; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG168659 DB	'none', 00H
	ORG $+3
$SG168660 DB	'zlib', 00H
	ORG $+3
$SG168661 DB	'bzip2', 00H
	ORG $+2
$SG168668 DB	'none', 00H
	ORG $+3
$SG168669 DB	'devhdr', 00H
	ORG $+1
$SG168670 DB	'cdevhdr', 00H
$SG168671 DB	'l1', 00H
	ORG $+1
$SG168672 DB	'l2', 00H
	ORG $+1
$SG168673 DB	'trk', 00H
$SG168674 DB	'blkgrp', 00H
	ORG $+1
$SG168675 DB	'free', 00H
	ORG $+3
$SG168676 DB	'eof', 00H
$SG168677 DB	'L2LOWER', 00H
$SG168678 DB	'L2UPPER', 00H
$SG168679 DB	'data', 00H
	ORG $+3
$SG168680 DB	'unknown', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
VOL1_KEYA DB	056H
	DB	04fH
	DB	04cH
	DB	031H
VOL1_KEY DB	0e5H
	DB	0d6H
	DB	0d3H
	DB	0f1H
IPL1_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f1H
IPL2_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f2H
iplpsw	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
iplccw1	DB	06H
	DB	00H
	DB	03aH
	DB	098H
	DB	060H
	DB	00H
	DB	00H
	DB	060H
iplccw2	DB	08H
	DB	00H
	DB	03aH
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
noiplpsw DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
noiplccw1 DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
noiplccw2 DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
ipl2data DB	07H
	DB	00H
	DB	03aH
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	06H
	DB	031H
	DB	00H
	DB	03aH
	DB	0beH
	DB	040H
	DB	00H
	DB	00H
	DB	05H
	DB	08H
	DB	00H
	DB	03aH
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	07fH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	sprintf
PUBLIC	fetch_hw_noswap
PUBLIC	fetch_fw_noswap
PUBLIC	comp_to_str
PUBLIC	spc_typ_to_str
PUBLIC	cckd_swapend
PUBLIC	cckd_swapend_chdr
PUBLIC	cckd_swapend_l1
PUBLIC	cckd_swapend_l2
PUBLIC	cckd_swapend_free
PUBLIC	cckd_def_opt_bigend
PUBLIC	cckd_comp
PUBLIC	cckd_chkdsk
PUBLIC	cdsk_valid_trk
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp__errno:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_calloc:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_qsort:PROC
EXTRN	_byteswap_ushort:PROC
EXTRN	_byteswap_ulong:PROC
EXTRN	__imp__chsize_s:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp_write:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp__fstat64:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_get_file_accmode_flags:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_fprintf:PROC
EXTRN	dasd_lookup:PROC
EXTRN	cckd64_swapend:PROC
EXTRN	cckd64_comp:PROC
EXTRN	cckd64_chkdsk:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	dh_devid_typ:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__imp_extgui:DWORD
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_hw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_hw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_fw_noswap DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$fetch_fw_noswap
pdata	ENDS
pdata	SEGMENT
$pdata$comp_to_str DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$comp_to_str
$pdata$spc_typ_to_str DD imagerel $LN5
	DD	imagerel $LN5+61
	DD	imagerel $unwind$spc_typ_to_str
$pdata$cckd_swapend DD imagerel $LN123
	DD	imagerel $LN123+5857
	DD	imagerel $unwind$cckd_swapend
$pdata$cckd_swapend_chdr DD imagerel $LN3
	DD	imagerel $LN3+246
	DD	imagerel $unwind$cckd_swapend_chdr
$pdata$cckd_swapend_l1 DD imagerel $LN6
	DD	imagerel $LN6+81
	DD	imagerel $unwind$cckd_swapend_l1
$pdata$cckd_swapend_l2 DD imagerel $LN6
	DD	imagerel $LN6+147
	DD	imagerel $unwind$cckd_swapend_l2
$pdata$cckd_swapend_free DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$cckd_swapend_free
$pdata$cckd_def_opt_bigend DD imagerel $LN5
	DD	imagerel $LN5+55
	DD	imagerel $unwind$cckd_def_opt_bigend
$pdata$cckd_comp DD imagerel $LN274
	DD	imagerel $LN274+14545
	DD	imagerel $unwind$cckd_comp
$pdata$cckd_chkdsk DD imagerel $LN825
	DD	imagerel $LN825+45311
	DD	imagerel $unwind$cckd_chkdsk
$pdata$cdsk_valid_trk DD imagerel $LN29
	DD	imagerel $LN29+910
	DD	imagerel $unwind$cdsk_valid_trk
$pdata$comp_spctab_sort DD imagerel comp_spctab_sort
	DD	imagerel comp_spctab_sort+153
	DD	imagerel $unwind$comp_spctab_sort
$pdata$cdsk_spctab_sort DD imagerel cdsk_spctab_sort
	DD	imagerel cdsk_spctab_sort+153
	DD	imagerel $unwind$cdsk_spctab_sort
$pdata$cdsk_build_free_space DD imagerel cdsk_build_free_space
	DD	imagerel cdsk_build_free_space+506
	DD	imagerel $unwind$cdsk_build_free_space
pdata	ENDS
_DATA	SEGMENT
?comp_types@?1??comp_to_str@@9@9 DQ FLAT:$SG168659	; `comp_to_str'::`2'::comp_types
	DQ	FLAT:$SG168660
	DQ	FLAT:$SG168661
$SG168662 DB	'?????', 00H
	ORG $+2
?spc_types@?1??spc_typ_to_str@@9@9 DQ FLAT:$SG168668	; `spc_typ_to_str'::`2'::spc_types
	DQ	FLAT:$SG168669
	DQ	FLAT:$SG168670
	DQ	FLAT:$SG168671
	DQ	FLAT:$SG168672
	DQ	FLAT:$SG168673
	DQ	FLAT:$SG168674
	DQ	FLAT:$SG168675
	DQ	FLAT:$SG168676
	DQ	FLAT:$SG168677
	DQ	FLAT:$SG168678
	DQ	FLAT:$SG168679
	DQ	FLAT:$SG168680
$SG168681 DB	'???????', 00H
$SG168774 DB	'SIZE=%llu', 0aH, 00H
	ORG $+1
$SG168835 DB	'E', 00H
	ORG $+2
$SG168777 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168840 DB	'E', 00H
	ORG $+2
$SG168781 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168847 DB	'E', 00H
	ORG $+2
$SG168787 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168852 DB	'E', 00H
	ORG $+2
$SG168791 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168859 DB	'read()', 00H
	ORG $+1
$SG168860 DB	'E', 00H
	ORG $+2
$SG168798 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168865 DB	'read()', 00H
	ORG $+1
$SG168866 DB	'E', 00H
	ORG $+2
$SG168802 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168874 DB	'E', 00H
	ORG $+2
$SG168807 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168880 DB	'E', 00H
	ORG $+2
$SG168811 DB	'FREE_BLK', 00H
	ORG $+3
$SG168887 DB	'E', 00H
	ORG $+2
$SG168815 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG168891 DB	'E', 00H
	ORG $+2
$SG168819 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG169169 DB	'E', 00H
	ORG $+2
$SG168825 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG169173 DB	'E', 00H
	ORG $+2
$SG168829 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG169186 DB	'I', 00H
	ORG $+2
$SG168834 DB	'fstat()', 00H
$SG168836 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG169192 DB	'I', 00H
	ORG $+2
$SG168837 DB	'cckd_swapend', 00H
	ORG $+3
$SG168838 DB	'cckdutil.c', 00H
	ORG $+1
$SG169229 DB	'I', 00H
	ORG $+2
$SG168839 DB	'fstat()', 00H
$SG168841 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG169233 DB	'I', 00H
	ORG $+2
$SG168842 DB	'cckd_swapend', 00H
	ORG $+3
$SG168843 DB	'cckdutil.c', 00H
	ORG $+1
$SG169294 DB	'I', 00H
	ORG $+2
$SG168846 DB	'lseek()', 00H
$SG168851 DB	'lseek()', 00H
$SG168848 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG169298 DB	'I', 00H
	ORG $+2
$SG168849 DB	'cckd_swapend', 00H
	ORG $+3
$SG168850 DB	'cckdutil.c', 00H
	ORG $+5
$SG168854 DB	'cckd_swapend', 00H
	ORG $+3
$SG168873 DB	'write()', 00H
$SG168853 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG169304 DB	'I', 00H
	ORG $+2
$SG168855 DB	'cckdutil.c', 00H
	ORG $+1
$SG169308 DB	'I', 00H
	ORG $+2
$SG168858 DB	'incomplete', 00H
	ORG $+5
$SG168862 DB	'cckd_swapend', 00H
	ORG $+3
$SG168879 DB	'write()', 00H
$SG168861 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG169322 DB	'E', 00H
	ORG $+2
$SG168863 DB	'cckdutil.c', 00H
	ORG $+1
$SG169327 DB	'E', 00H
	ORG $+2
$SG168864 DB	'incomplete', 00H
	ORG $+5
$SG168868 DB	'cckd_swapend', 00H
	ORG $+3
$SG169170 DB	'HHC00356%s %1d:%04X CCKD file %s: not a compressed dasd '
	DB	'file', 0aH, 00H
	ORG $+2
$SG169187 DB	'HHC00357%s %1d:%04X CCKD file %s: converting to %s', 0aH
	DB	00H
	ORG $+4
$SG168867 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG169334 DB	'E', 00H
	ORG $+2
$SG168869 DB	'cckdutil.c', 00H
	ORG $+1
$SG169339 DB	'E', 00H
	ORG $+2
$SG168872 DB	'incomplete', 00H
	ORG $+5
$SG168876 DB	'cckd_swapend', 00H
	ORG $+3
$SG169174 DB	'HHC00356%s %1d:%04X CCKD file %s: not a compressed dasd '
	DB	'file', 0aH, 00H
	ORG $+2
$SG169193 DB	'HHC00357%s %1d:%04X CCKD file %s: converting to %s', 0aH
	DB	00H
	ORG $+4
$SG168875 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG169346 DB	'read()', 00H
	ORG $+1
$SG169347 DB	'E', 00H
	ORG $+2
$SG168877 DB	'cckdutil.c', 00H
	ORG $+1
$SG169353 DB	'E', 00H
	ORG $+2
$SG168878 DB	'incomplete', 00H
	ORG $+5
$SG168881 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG169352 DB	'read()', 00H
	ORG $+1
$SG169361 DB	'E', 00H
	ORG $+2
$SG168882 DB	'cckd_swapend', 00H
	ORG $+3
$SG168883 DB	'cckdutil.c', 00H
	ORG $+1
$SG169367 DB	'E', 00H
	ORG $+2
$SG168884 DB	'malloc(%d)', 00H
	ORG $+1
$SG169374 DB	'E', 00H
	ORG $+2
$SG168888 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG169378 DB	'E', 00H
	ORG $+2
$SG168889 DB	'cckd_swapend', 00H
	ORG $+3
$SG168890 DB	'cckdutil.c', 00H
	ORG $+1
$SG169385 DB	'E', 00H
	ORG $+2
$SG168892 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG169389 DB	'E', 00H
	ORG $+2
$SG168893 DB	'cckd_swapend', 00H
	ORG $+3
$SG168894 DB	'cckdutil.c', 00H
	ORG $+1
$SG169990 DB	'E', 00H
	ORG $+2
$SG169160 DB	'SIZE=%llu', 0aH, 00H
	ORG $+1
$SG169994 DB	'E', 00H
	ORG $+2
$SG169163 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170010 DB	'I', 00H
	ORG $+2
$SG169171 DB	'cckd_comp', 00H
	ORG $+2
$SG170016 DB	'I', 00H
	ORG $+2
$SG169172 DB	'cckdutil.c', 00H
	ORG $+1
$SG170027 DB	'E', 00H
	ORG $+2
$SG169175 DB	'cckd_comp', 00H
	ORG $+2
$SG170031 DB	'E', 00H
	ORG $+2
$SG169176 DB	'cckdutil.c', 00H
	ORG $+1
$SG170039 DB	'E', 00H
	ORG $+2
$SG169179 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170044 DB	'E', 00H
	ORG $+2
$SG169184 DB	'little-endian', 00H
	ORG $+2
$SG169185 DB	'big-endian', 00H
	ORG $+1
$SG170052 DB	'E', 00H
	ORG $+2
$SG169188 DB	'cckd_comp', 00H
	ORG $+2
$SG170057 DB	'E', 00H
	ORG $+2
$SG169189 DB	'cckdutil.c', 00H
	ORG $+1
$SG170068 DB	'E', 00H
	ORG $+2
$SG169190 DB	'little-endian', 00H
	ORG $+2
$SG169191 DB	'big-endian', 00H
	ORG $+1
$SG170073 DB	'E', 00H
	ORG $+2
$SG169194 DB	'cckd_comp', 00H
	ORG $+2
$SG170081 DB	'E', 00H
	ORG $+2
$SG169195 DB	'cckdutil.c', 00H
	ORG $+1
$SG170086 DB	'E', 00H
	ORG $+2
$SG169204 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170093 DB	'W', 00H
	ORG $+2
$SG169214 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170097 DB	'W', 00H
	ORG $+2
$SG169230 DB	'HHC00358%s %1d:%04X CCKD file %s: file already compresse'
	DB	'd', 0aH, 00H
	ORG $+1
$SG170104 DB	'W', 00H
	ORG $+2
$SG169231 DB	'cckd_comp', 00H
	ORG $+2
$SG170108 DB	'W', 00H
	ORG $+2
$SG169232 DB	'cckdutil.c', 00H
	ORG $+1
$SG170115 DB	'W', 00H
	ORG $+2
$SG169234 DB	'HHC00358%s %1d:%04X CCKD file %s: file already compresse'
	DB	'd', 0aH, 00H
	ORG $+1
$SG170119 DB	'W', 00H
	ORG $+2
$SG169235 DB	'cckd_comp', 00H
	ORG $+2
$SG170126 DB	'W', 00H
	ORG $+2
$SG169236 DB	'cckdutil.c', 00H
	ORG $+1
$SG170130 DB	'W', 00H
	ORG $+2
$SG169243 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170172 DB	'%s', 00H
	ORG $+1
$SG169254 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170175 DB	'%s', 00H
	ORG $+1
$SG169258 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170182 DB	'W', 00H
	ORG $+2
$SG169262 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170186 DB	'W', 00H
	ORG $+2
$SG169270 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170192 DB	'W', 00H
	ORG $+2
$SG169274 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170196 DB	'W', 00H
	ORG $+2
$SG169279 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170210 DB	'W', 00H
	ORG $+2
$SG169284 DB	'cckd_comp', 00H
	ORG $+2
$SG170214 DB	'W', 00H
	ORG $+2
$SG169285 DB	'cckdutil.c', 00H
	ORG $+5
$SG169286 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169288 DB	'cckd_comp', 00H
	ORG $+2
$SG170224 DB	'W', 00H
	ORG $+2
$SG169289 DB	'cckdutil.c', 00H
	ORG $+5
$SG169321 DB	'fstat()', 00H
$SG169290 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169326 DB	'fstat()', 00H
$SG169295 DB	'HHC00359%s %1d:%04X CCKD file %s: compress successful, %'
	DB	'lld bytes released', 0aH, 00H
$SG170228 DB	'W', 00H
	ORG $+2
$SG169296 DB	'cckd_comp', 00H
	ORG $+2
$SG170261 DB	'W', 00H
	ORG $+2
$SG169297 DB	'cckdutil.c', 00H
	ORG $+5
$SG169299 DB	'HHC00359%s %1d:%04X CCKD file %s: compress successful, %'
	DB	'lld bytes released', 0aH, 00H
$SG170265 DB	'W', 00H
	ORG $+2
$SG169300 DB	'cckd_comp', 00H
	ORG $+2
$SG170279 DB	'W', 00H
	ORG $+2
$SG169301 DB	'cckdutil.c', 00H
	ORG $+5
$SG169305 DB	'HHC00360%s %1d:%04X CCKD file %s: compress successful, L'
	DB	'2 tables relocated', 0aH, 00H
$SG170283 DB	'W', 00H
	ORG $+2
$SG169306 DB	'cckd_comp', 00H
	ORG $+2
$SG170290 DB	'W', 00H
	ORG $+2
$SG169307 DB	'cckdutil.c', 00H
	ORG $+5
$SG169309 DB	'HHC00360%s %1d:%04X CCKD file %s: compress successful, L'
	DB	'2 tables relocated', 0aH, 00H
$SG170294 DB	'W', 00H
	ORG $+2
$SG169310 DB	'cckd_comp', 00H
	ORG $+2
$SG170301 DB	'W', 00H
	ORG $+2
$SG169311 DB	'cckdutil.c', 00H
	ORG $+1
$SG170305 DB	'W', 00H
	ORG $+2
$SG169313 DB	'POS=%llu', 0aH, 00H
	ORG $+2
$SG170314 DB	'W', 00H
	ORG $+2
$SG169323 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG170318 DB	'W', 00H
	ORG $+2
$SG169324 DB	'cckd_comp', 00H
	ORG $+2
$SG170366 DB	'I', 00H
	ORG $+2
$SG169325 DB	'cckdutil.c', 00H
	ORG $+1
$SG170370 DB	'I', 00H
	ORG $+2
$SG169328 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG170418 DB	'I', 00H
	ORG $+2
$SG169329 DB	'cckd_comp', 00H
	ORG $+2
$SG170422 DB	'I', 00H
	ORG $+2
$SG169330 DB	'cckdutil.c', 00H
	ORG $+1
$SG170430 DB	'I', 00H
	ORG $+2
$SG169333 DB	'lseek()', 00H
$SG169338 DB	'lseek()', 00H
$SG169335 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG170434 DB	'I', 00H
	ORG $+2
$SG169336 DB	'cckd_comp', 00H
	ORG $+2
$SG170451 DB	'E', 00H
	ORG $+2
$SG169337 DB	'cckdutil.c', 00H
	ORG $+5
$SG169360 DB	'write()', 00H
$SG169340 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG170455 DB	'E', 00H
	ORG $+2
$SG169341 DB	'cckd_comp', 00H
	ORG $+2
$SG170463 DB	'W', 00H
	ORG $+2
$SG169342 DB	'cckdutil.c', 00H
	ORG $+1
$SG170468 DB	'W', 00H
	ORG $+2
$SG169345 DB	'incomplete', 00H
	ORG $+5
$SG169366 DB	'write()', 00H
$SG169348 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG170476 DB	'W', 00H
	ORG $+2
$SG169349 DB	'cckd_comp', 00H
	ORG $+2
$SG170481 DB	'W', 00H
	ORG $+2
$SG169350 DB	'cckdutil.c', 00H
	ORG $+1
$SG170501 DB	'W', 00H
	ORG $+2
$SG169351 DB	'incomplete', 00H
	ORG $+5
$SG169375 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG170174 DB	'[%d]', 00H
	ORG $+7
$SG169354 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG170505 DB	'W', 00H
	ORG $+2
$SG169355 DB	'cckd_comp', 00H
	ORG $+2
$SG170567 DB	'I', 00H
	ORG $+2
$SG169356 DB	'cckdutil.c', 00H
	ORG $+1
$SG170571 DB	'I', 00H
	ORG $+2
$SG169359 DB	'incomplete', 00H
	ORG $+5
$SG169379 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG170177 DB	'[%d]', 00H
	ORG $+7
$SG169362 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG170600 DB	'E', 00H
	ORG $+2
$SG169363 DB	'cckd_comp', 00H
	ORG $+2
$SG170605 DB	'E', 00H
	ORG $+2
$SG169364 DB	'cckdutil.c', 00H
	ORG $+1
$SG170612 DB	'E', 00H
	ORG $+2
$SG169365 DB	'incomplete', 00H
	ORG $+5
$SG169386 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG170617 DB	'E', 00H
	ORG $+2
$SG170011 DB	'HHC00357%s %1d:%04X CCKD file %s: converting to %s', 0aH
	DB	00H
	ORG $+4
$SG169368 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG170624 DB	'read()', 00H
	ORG $+1
$SG170625 DB	'E', 00H
	ORG $+2
$SG169369 DB	'cckd_comp', 00H
	ORG $+2
$SG170630 DB	'read()', 00H
	ORG $+1
$SG170631 DB	'E', 00H
	ORG $+2
$SG169370 DB	'cckdutil.c', 00H
	ORG $+1
$SG170639 DB	'E', 00H
	ORG $+2
$SG169371 DB	'malloc(%d)', 00H
	ORG $+1
$SG170645 DB	'E', 00H
	ORG $+2
$SG169376 DB	'cckd_comp', 00H
	ORG $+2
$SG170652 DB	'E', 00H
	ORG $+2
$SG169377 DB	'cckdutil.c', 00H
	ORG $+1
$SG170656 DB	'E', 00H
	ORG $+2
$SG169380 DB	'cckd_comp', 00H
	ORG $+2
$SG170663 DB	'E', 00H
	ORG $+2
$SG169381 DB	'cckdutil.c', 00H
	ORG $+1
$SG170667 DB	'E', 00H
	ORG $+2
$SG169382 DB	'calloc(%d)', 00H
	ORG $+5
$SG169387 DB	'cckd_comp', 00H
	ORG $+6
$SG169388 DB	'cckdutil.c', 00H
	ORG $+5
$SG169390 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG169391 DB	'cckd_comp', 00H
	ORG $+6
$SG169392 DB	'cckdutil.c', 00H
	ORG $+5
$SG169978 DB	'SIZE=%llu', 0aH, 00H
	ORG $+5
$SG169981 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG169991 DB	'HHC00356%s %1d:%04X CCKD file %s: not a compressed dasd '
	DB	'file', 0aH, 00H
	ORG $+2
$SG169992 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG169993 DB	'cckdutil.c', 00H
	ORG $+5
$SG169995 DB	'HHC00356%s %1d:%04X CCKD file %s: not a compressed dasd '
	DB	'file', 0aH, 00H
	ORG $+2
$SG169996 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG169997 DB	'cckdutil.c', 00H
	ORG $+5
$SG170001 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170008 DB	'little-endian', 00H
	ORG $+2
$SG170009 DB	'big-endian', 00H
	ORG $+5
$SG170012 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170013 DB	'cckdutil.c', 00H
	ORG $+5
$SG170014 DB	'little-endian', 00H
	ORG $+2
$SG170015 DB	'big-endian', 00H
	ORG $+5
$SG170017 DB	'HHC00357%s %1d:%04X CCKD file %s: converting to %s', 0aH
	DB	00H
	ORG $+4
$SG170018 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170019 DB	'cckdutil.c', 00H
	ORG $+5
$SG170028 DB	'HHC00361%s %1d:%04X CCKD file %s: dasd lookup error type'
	DB	' %02X cylinders %d', 0aH, 00H
	ORG $+4
$SG170029 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170030 DB	'cckdutil.c', 00H
	ORG $+5
$SG170032 DB	'HHC00361%s %1d:%04X CCKD file %s: dasd lookup error type'
	DB	' %02X cylinders %d', 0aH, 00H
	ORG $+4
$SG170033 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170034 DB	'cckdutil.c', 00H
	ORG $+5
$SG170038 DB	'track size', 00H
	ORG $+5
$SG170040 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170041 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170042 DB	'cckdutil.c', 00H
	ORG $+5
$SG170043 DB	'track size', 00H
	ORG $+5
$SG170045 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170046 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170047 DB	'cckdutil.c', 00H
	ORG $+5
$SG170051 DB	'number of heads', 00H
$SG170053 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170054 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170055 DB	'cckdutil.c', 00H
	ORG $+5
$SG170056 DB	'number of heads', 00H
$SG170058 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170059 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170060 DB	'cckdutil.c', 00H
	ORG $+5
$SG170067 DB	'num_L1tab', 00H
	ORG $+6
$SG170069 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170070 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170071 DB	'cckdutil.c', 00H
	ORG $+5
$SG170072 DB	'num_L1tab', 00H
	ORG $+6
$SG170074 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170075 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170076 DB	'cckdutil.c', 00H
	ORG $+5
$SG170080 DB	'file length to contain L1 table', 00H
$SG170082 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170083 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170084 DB	'cckdutil.c', 00H
	ORG $+5
$SG170085 DB	'file length to contain L1 table', 00H
$SG170087 DB	'HHC00362%s %1d:%04X CCKD file %s: bad %s %lld, expecting'
	DB	' %lld', 0aH, 00H
	ORG $+1
$SG170088 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170089 DB	'cckdutil.c', 00H
	ORG $+5
$SG170094 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170095 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170096 DB	'cckdutil.c', 00H
	ORG $+5
$SG170098 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170099 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170100 DB	'cckdutil.c', 00H
	ORG $+5
$SG170105 DB	'HHC00363%s %1d:%04X CCKD file %s: cdevhdr inconsistencie'
	DB	's found, code %4.4X', 0aH, 00H
	ORG $+3
$SG170106 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170107 DB	'cckdutil.c', 00H
	ORG $+5
$SG170109 DB	'HHC00363%s %1d:%04X CCKD file %s: cdevhdr inconsistencie'
	DB	's found, code %4.4X', 0aH, 00H
	ORG $+3
$SG170110 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170111 DB	'cckdutil.c', 00H
	ORG $+5
$SG170116 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170117 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170118 DB	'cckdutil.c', 00H
	ORG $+5
$SG170120 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170121 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170122 DB	'cckdutil.c', 00H
	ORG $+5
$SG170127 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170128 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170129 DB	'cckdutil.c', 00H
	ORG $+5
$SG170131 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170132 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170133 DB	'cckdutil.c', 00H
	ORG $+5
$SG170141 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170159 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170183 DB	'HHC00365%s %1d:%04X CCKD file %s: %s offset 0x%16.16llX '
	DB	'len %lld is out of bounds', 0aH, 00H
	ORG $+5
$SG170184 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170185 DB	'cckdutil.c', 00H
	ORG $+5
$SG170188 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170262 DB	'HHC00368%s %1d:%04X CCKD file %s: free space errors dete'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG170462 DB	'file opened read-only', 00H
	ORG $+2
$SG170187 DB	'HHC00365%s %1d:%04X CCKD file %s: %s offset 0x%16.16llX '
	DB	'len %lld is out of bounds', 0aH, 00H
	ORG $+5
$SG170189 DB	'cckdutil.c', 00H
	ORG $+5
$SG170194 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170266 DB	'HHC00368%s %1d:%04X CCKD file %s: free space errors dete'
	DB	'cted', 0aH, 00H
	ORG $+2
$SG170467 DB	'file opened read-only', 00H
	ORG $+2
$SG170193 DB	'HHC00366%s %1d:%04X CCKD file %s: %s offset 0x%16.16llX '
	DB	'len %lld overlaps %s offset 0x%llX', 0aH, 00H
	ORG $+4
$SG170195 DB	'cckdutil.c', 00H
	ORG $+5
$SG170197 DB	'HHC00366%s %1d:%04X CCKD file %s: %s offset 0x%16.16llX '
	DB	'len %lld overlaps %s offset 0x%llX', 0aH, 00H
	ORG $+4
$SG170198 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170199 DB	'cckdutil.c', 00H
	ORG $+5
$SG170211 DB	'HHC00367%s %1d:%04X CCKD file %s: %s[%d] l2 inconsistenc'
	DB	'y: len %lld, size %lld', 0aH, 00H
$SG170212 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170213 DB	'cckdutil.c', 00H
	ORG $+5
$SG170215 DB	'HHC00367%s %1d:%04X CCKD file %s: %s[%d] l2 inconsistenc'
	DB	'y: len %lld, size %lld', 0aH, 00H
$SG170216 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170217 DB	'cckdutil.c', 00H
	ORG $+5
$SG170225 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170226 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170227 DB	'cckdutil.c', 00H
	ORG $+5
$SG170229 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170230 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170231 DB	'cckdutil.c', 00H
	ORG $+5
$SG170238 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170241 DB	'FREE_BLK', 00H
	ORG $+7
$SG170252 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170263 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170264 DB	'cckdutil.c', 00H
	ORG $+5
$SG170267 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170268 DB	'cckdutil.c', 00H
	ORG $+5
$SG170273 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170280 DB	'HHC00369%s %1d:%04X CCKD file %s: %s[%d] hdr error offse'
	DB	't 0x%16.16llX: %2.2X%2.2X%2.2X%2.2X%2.2X', 0aH, 00H
	ORG $+6
$SG170281 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170282 DB	'cckdutil.c', 00H
	ORG $+5
$SG170285 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170464 DB	'HHC00375%s %1d:%04X CCKD file %s: recovery not completed'
	DB	': %s', 0aH, 00H
	ORG $+2
$SG170475 DB	'missing compression', 00H
	ORG $+4
$SG170284 DB	'HHC00369%s %1d:%04X CCKD file %s: %s[%d] hdr error offse'
	DB	't 0x%16.16llX: %2.2X%2.2X%2.2X%2.2X%2.2X', 0aH, 00H
	ORG $+6
$SG170286 DB	'cckdutil.c', 00H
	ORG $+5
$SG170291 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170292 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170293 DB	'cckdutil.c', 00H
	ORG $+5
$SG170295 DB	'HHC00364%s %1d:%04X CCKD file %s: forcing check level %d'
	DB	0aH, 00H
	ORG $+6
$SG170296 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170297 DB	'cckdutil.c', 00H
	ORG $+5
$SG170303 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170469 DB	'HHC00375%s %1d:%04X CCKD file %s: recovery not completed'
	DB	': %s', 0aH, 00H
	ORG $+2
$SG170480 DB	'missing compression', 00H
	ORG $+4
$SG170302 DB	'HHC00370%s %1d:%04X CCKD file %s: %s[%d] compressed usin'
	DB	'g %s, not supported', 0aH, 00H
	ORG $+3
$SG170304 DB	'cckdutil.c', 00H
	ORG $+5
$SG170306 DB	'HHC00370%s %1d:%04X CCKD file %s: %s[%d] compressed usin'
	DB	'g %s, not supported', 0aH, 00H
	ORG $+3
$SG170307 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170308 DB	'cckdutil.c', 00H
	ORG $+5
$SG170315 DB	'HHC00371%s %1d:%04X CCKD file %s: %s[%d] offset 0x%16.16'
	DB	'llX len %lld validation error', 0aH, 00H
	ORG $+1
$SG170316 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170317 DB	'cckdutil.c', 00H
	ORG $+5
$SG170320 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170477 DB	'HHC00375%s %1d:%04X CCKD file %s: recovery not completed'
	DB	': %s', 0aH, 00H
	ORG $+2
$SG170568 DB	'HHC00377%s %1d:%04X CCKD file %s: free space rebuilt', 0aH
	DB	00H
	ORG $+2
$SG170319 DB	'HHC00371%s %1d:%04X CCKD file %s: %s[%d] offset 0x%16.16'
	DB	'llX len %lld validation error', 0aH, 00H
	ORG $+1
$SG170321 DB	'cckdutil.c', 00H
	ORG $+5
$SG170331 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170368 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170482 DB	'HHC00375%s %1d:%04X CCKD file %s: recovery not completed'
	DB	': %s', 0aH, 00H
	ORG $+2
$SG170572 DB	'HHC00377%s %1d:%04X CCKD file %s: free space rebuilt', 0aH
	DB	00H
	ORG $+2
$SG170367 DB	'HHC00372%s %1d:%04X CCKD file %s: %s[%d] recovered offse'
	DB	't 0x%16.16llX len %lld', 0aH, 00H
$SG170369 DB	'cckdutil.c', 00H
	ORG $+5
$SG170371 DB	'HHC00372%s %1d:%04X CCKD file %s: %s[%d] recovered offse'
	DB	't 0x%16.16llX len %lld', 0aH, 00H
$SG170372 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170373 DB	'cckdutil.c', 00H
	ORG $+5
$SG170380 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170419 DB	'HHC00372%s %1d:%04X CCKD file %s: %s[%d] recovered offse'
	DB	't 0x%16.16llX len %lld', 0aH, 00H
$SG170420 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170421 DB	'cckdutil.c', 00H
	ORG $+5
$SG170423 DB	'HHC00372%s %1d:%04X CCKD file %s: %s[%d] recovered offse'
	DB	't 0x%16.16llX len %lld', 0aH, 00H
$SG170424 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170425 DB	'cckdutil.c', 00H
	ORG $+5
$SG170431 DB	'HHC00373%s %1d:%04X CCKD file %s: %lld %s images recover'
	DB	'ed', 0aH, 00H
	ORG $+4
$SG170432 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170433 DB	'cckdutil.c', 00H
	ORG $+5
$SG170435 DB	'HHC00373%s %1d:%04X CCKD file %s: %lld %s images recover'
	DB	'ed', 0aH, 00H
	ORG $+4
$SG170436 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170437 DB	'cckdutil.c', 00H
	ORG $+5
$SG170452 DB	'HHC00374%s %1d:%04X CCKD file %s: not enough file space '
	DB	'for recovery', 0aH, 00H
	ORG $+2
$SG170453 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170454 DB	'cckdutil.c', 00H
	ORG $+5
$SG170457 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170599 DB	'fstat()', 00H
$SG170456 DB	'HHC00374%s %1d:%04X CCKD file %s: not enough file space '
	DB	'for recovery', 0aH, 00H
	ORG $+2
$SG170458 DB	'cckdutil.c', 00H
	ORG $+5
$SG170465 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170466 DB	'cckdutil.c', 00H
	ORG $+5
$SG170470 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170471 DB	'cckdutil.c', 00H
	ORG $+5
$SG170478 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170479 DB	'cckdutil.c', 00H
	ORG $+5
$SG170483 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170484 DB	'cckdutil.c', 00H
	ORG $+5
$SG170487 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170493 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170503 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170604 DB	'fstat()', 00H
$SG170502 DB	'HHC00376%s %1d:%04X CCKD file %s: free space not rebuilt'
	DB	', file opened read-only', 0aH, 00H
	ORG $+7
$SG170504 DB	'cckdutil.c', 00H
	ORG $+5
$SG170507 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170611 DB	'lseek()', 00H
$SG170506 DB	'HHC00376%s %1d:%04X CCKD file %s: free space not rebuilt'
	DB	', file opened read-only', 0aH, 00H
	ORG $+7
$SG170508 DB	'cckdutil.c', 00H
	ORG $+5
$SG170515 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170519 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170525 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170529 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170541 DB	'FREE_BLK', 00H
	ORG $+7
$SG170545 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170550 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170554 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170558 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170562 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170569 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170570 DB	'cckdutil.c', 00H
	ORG $+5
$SG170573 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170574 DB	'cckdutil.c', 00H
	ORG $+5
$SG170578 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170579 DB	'cckdutil.c', 00H
	ORG $+5
$SG170582 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170616 DB	'lseek()', 00H
$SG170580 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG170583 DB	'cckdutil.c', 00H
	ORG $+5
$SG170601 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG170638 DB	'write()', 00H
$SG170584 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG170587 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170589 DB	'POS=%llu', 0aH, 00H
	ORG $+6
$SG170602 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170603 DB	'cckdutil.c', 00H
	ORG $+5
$SG170606 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG170607 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170608 DB	'cckdutil.c', 00H
	ORG $+5
$SG170614 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170644 DB	'write()', 00H
$SG170613 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+6
$SG170615 DB	'cckdutil.c', 00H
	ORG $+5
$SG170619 DB	'cckd_chkdsk', 00H
	ORG $+12
$SG170618 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+6
$SG170620 DB	'cckdutil.c', 00H
	ORG $+5
$SG170623 DB	'incomplete', 00H
	ORG $+13
$SG170626 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+6
$SG170627 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170628 DB	'cckdutil.c', 00H
	ORG $+5
$SG170629 DB	'incomplete', 00H
	ORG $+13
$SG170632 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+6
$SG170633 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170634 DB	'cckdutil.c', 00H
	ORG $+5
$SG170637 DB	'incomplete', 00H
	ORG $+13
$SG170640 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+6
$SG170641 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170642 DB	'cckdutil.c', 00H
	ORG $+5
$SG170643 DB	'incomplete', 00H
	ORG $+13
$SG170646 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+6
$SG170647 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170648 DB	'cckdutil.c', 00H
	ORG $+5
$SG170649 DB	'malloc(%d)', 00H
	ORG $+5
$SG170653 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG170654 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170655 DB	'cckdutil.c', 00H
	ORG $+5
$SG170657 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG170658 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170659 DB	'cckdutil.c', 00H
	ORG $+5
$SG170660 DB	'calloc(%d)', 00H
	ORG $+5
$SG170664 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG170665 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170666 DB	'cckdutil.c', 00H
	ORG $+5
$SG170668 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
	ORG $+4
$SG170669 DB	'cckd_chkdsk', 00H
	ORG $+4
$SG170670 DB	'cckdutil.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cdsk_valid_trk
	DD	026H
	DD	0377H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cckd_chkdsk
	DD	022H
	DD	0b0e5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cckd_comp
	DD	01dH
	DD	038b8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cckd_swapend
	DD	016H
	DD	016c9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_fw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_hw_noswap DD 010901H
	DD	02209H
xdata	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$comp_to_str DD 010801H
	DD	02208H
$unwind$spc_typ_to_str DD 010801H
	DD	02208H
$unwind$cckd_swapend DD 021e19H
	DD	0193010cH
	DD	imagerel __GSHandlerCheck
	DD	0c80H
$unwind$cckd_swapend_chdr DD 010901H
	DD	04209H
$unwind$cckd_swapend_l1 DD 010d01H
	DD	0620dH
$unwind$cckd_swapend_l2 DD 010901H
	DD	06209H
$unwind$cckd_swapend_free DD 010901H
	DD	04209H
$unwind$cckd_def_opt_bigend DD 010401H
	DD	02204H
$unwind$cckd_comp DD 032519H
	DD	083020113H
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	041800H
$unwind$cckd_chkdsk DD 042a19H
	DD	084370118H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	0421a0H
$unwind$cdsk_valid_trk DD 042b19H
	DD	011011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$comp_spctab_sort DD 010e01H
	DD	0220eH
$unwind$cdsk_spctab_sort DD 010e01H
	DD	0220eH
$unwind$cdsk_build_free_space DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
i$ = 32
tv181 = 36
spctab$ = 64
s$ = 72
cdsk_build_free_space PROC

; 2883 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2884 : int i;
; 2885 : 
; 2886 :     for (i = 0; i < s; i++)

  0000d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00015	eb 0a		 jmp	 SHORT $LN4@cdsk_build
$LN2@cdsk_build:
  00017	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0001b	ff c0		 inc	 eax
  0001d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@cdsk_build:
  00021	8b 44 24 48	 mov	 eax, DWORD PTR s$[rsp]
  00025	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00029	7d 2b		 jge	 SHORT $LN3@cdsk_build

; 2887 :         if (spctab[i].spc_typ == SPCTAB_FREE)

  0002b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00030	48 6b c0 18	 imul	 rax, rax, 24
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  00039	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0003d	83 f8 07	 cmp	 eax, 7
  00040	75 12		 jne	 SHORT $LN10@cdsk_build

; 2888 :             spctab[i].spc_typ = SPCTAB_NONE;

  00042	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00047	48 6b c0 18	 imul	 rax, rax, 24
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  00050	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN10@cdsk_build:
  00054	eb c1		 jmp	 SHORT $LN2@cdsk_build
$LN3@cdsk_build:

; 2889 :     qsort (spctab, s, sizeof(SPCTAB), cdsk_spctab_sort);

  00056	48 63 44 24 48	 movsxd	 rax, DWORD PTR s$[rsp]
  0005b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab_sort
  00062	41 b8 18 00 00
	00		 mov	 r8d, 24
  00068	48 8b d0	 mov	 rdx, rax
  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN5@cdsk_build:

; 2890 :     while (spctab[s-1].spc_typ == SPCTAB_NONE) s--;

  00076	8b 44 24 48	 mov	 eax, DWORD PTR s$[rsp]
  0007a	ff c8		 dec	 eax
  0007c	48 98		 cdqe
  0007e	48 6b c0 18	 imul	 rax, rax, 24
  00082	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  00087	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0008b	85 c0		 test	 eax, eax
  0008d	75 0c		 jne	 SHORT $LN6@cdsk_build
  0008f	8b 44 24 48	 mov	 eax, DWORD PTR s$[rsp]
  00093	ff c8		 dec	 eax
  00095	89 44 24 48	 mov	 DWORD PTR s$[rsp], eax
  00099	eb db		 jmp	 SHORT $LN5@cdsk_build
$LN6@cdsk_build:

; 2891 :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  0009b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000a3	eb 0a		 jmp	 SHORT $LN9@cdsk_build
$LN7@cdsk_build:
  000a5	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000a9	ff c0		 inc	 eax
  000ab	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN9@cdsk_build:
  000af	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000b4	48 6b c0 18	 imul	 rax, rax, 24
  000b8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  000bd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000c1	83 f8 08	 cmp	 eax, 8
  000c4	0f 84 07 01 00
	00		 je	 $LN8@cdsk_build

; 2892 :         if (spctab[i].spc_off + spctab[i].spc_siz < spctab[i+1].spc_off)

  000ca	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000cf	48 6b c0 18	 imul	 rax, rax, 24
  000d3	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  000d8	48 6b c9 18	 imul	 rcx, rcx, 24
  000dc	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  000e1	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  000e5	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  000ea	03 44 0a 14	 add	 eax, DWORD PTR [rdx+rcx+20]
  000ee	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  000f2	ff c1		 inc	 ecx
  000f4	48 63 c9	 movsxd	 rcx, ecx
  000f7	48 6b c9 18	 imul	 rcx, rcx, 24
  000fb	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  00100	3b 44 0a 0c	 cmp	 eax, DWORD PTR [rdx+rcx+12]
  00104	0f 83 c2 00 00
	00		 jae	 $LN11@cdsk_build

; 2893 :         {
; 2894 :             spctab[s].spc_typ = SPCTAB_FREE;

  0010a	48 63 44 24 48	 movsxd	 rax, DWORD PTR s$[rsp]
  0010f	48 6b c0 18	 imul	 rax, rax, 24
  00113	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  00118	c6 04 01 07	 mov	 BYTE PTR [rcx+rax], 7

; 2895 :             spctab[s].spc_val = -1;

  0011c	48 63 44 24 48	 movsxd	 rax, DWORD PTR s$[rsp]
  00121	48 6b c0 18	 imul	 rax, rax, 24
  00125	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  0012a	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 2896 :             spctab[s].spc_off = spctab[i].spc_off + spctab[i].spc_siz;

  00132	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00137	48 6b c0 18	 imul	 rax, rax, 24
  0013b	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00140	48 6b c9 18	 imul	 rcx, rcx, 24
  00144	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  00149	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  0014d	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  00152	03 44 0a 14	 add	 eax, DWORD PTR [rdx+rcx+20]
  00156	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR s$[rsp]
  0015b	48 6b c9 18	 imul	 rcx, rcx, 24
  0015f	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  00164	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 2897 :             spctab[s].spc_len =

  00168	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0016c	ff c0		 inc	 eax
  0016e	48 98		 cdqe
  00170	48 6b c0 18	 imul	 rax, rax, 24
  00174	48 63 4c 24 48	 movsxd	 rcx, DWORD PTR s$[rsp]
  00179	48 6b c9 18	 imul	 rcx, rcx, 24
  0017d	48 8b 54 24 40	 mov	 rdx, QWORD PTR spctab$[rsp]
  00182	4c 8b 44 24 40	 mov	 r8, QWORD PTR spctab$[rsp]
  00187	41 8b 4c 08 0c	 mov	 ecx, DWORD PTR [r8+rcx+12]
  0018c	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  00190	2b c1		 sub	 eax, ecx
  00192	89 44 24 24	 mov	 DWORD PTR tv181[rsp], eax
  00196	48 63 44 24 48	 movsxd	 rax, DWORD PTR s$[rsp]
  0019b	48 6b c0 18	 imul	 rax, rax, 24
  0019f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  001a4	8b 54 24 24	 mov	 edx, DWORD PTR tv181[rsp]
  001a8	89 54 01 14	 mov	 DWORD PTR [rcx+rax+20], edx
  001ac	48 63 44 24 48	 movsxd	 rax, DWORD PTR s$[rsp]
  001b1	48 6b c0 18	 imul	 rax, rax, 24
  001b5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  001ba	8b 54 24 24	 mov	 edx, DWORD PTR tv181[rsp]
  001be	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 2898 :             spctab[s].spc_siz = spctab[i+1].spc_off - spctab[s].spc_off;
; 2899 :             s++;

  001c2	8b 44 24 48	 mov	 eax, DWORD PTR s$[rsp]
  001c6	ff c0		 inc	 eax
  001c8	89 44 24 48	 mov	 DWORD PTR s$[rsp], eax
$LN11@cdsk_build:

; 2900 :         }

  001cc	e9 d4 fe ff ff	 jmp	 $LN7@cdsk_build
$LN8@cdsk_build:

; 2901 :     qsort (spctab, s, sizeof(SPCTAB), cdsk_spctab_sort);

  001d1	48 63 44 24 48	 movsxd	 rax, DWORD PTR s$[rsp]
  001d6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab_sort
  001dd	41 b8 18 00 00
	00		 mov	 r8d, 24
  001e3	48 8b d0	 mov	 rdx, rax
  001e6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR spctab$[rsp]
  001eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 2902 :     return s;

  001f1	8b 44 24 48	 mov	 eax, DWORD PTR s$[rsp]

; 2903 : }

  001f5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001f9	c3		 ret	 0
cdsk_build_free_space ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
x$ = 0
y$ = 8
a$ = 32
b$ = 40
cdsk_spctab_sort PROC

; 2868 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 2869 : const SPCTAB *x = a, *y = b;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00013	48 89 04 24	 mov	 QWORD PTR x$[rsp], rax
  00017	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  0001c	48 89 44 24 08	 mov	 QWORD PTR y$[rsp], rax

; 2870 : 
; 2871 :          if (x->spc_typ == SPCTAB_NONE) return +1;

  00021	48 8b 04 24	 mov	 rax, QWORD PTR x$[rsp]
  00025	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00028	85 c0		 test	 eax, eax
  0002a	75 09		 jne	 SHORT $LN2@cdsk_spcta
  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	eb 61		 jmp	 SHORT $LN1@cdsk_spcta
  00033	eb 5f		 jmp	 SHORT $LN3@cdsk_spcta
$LN2@cdsk_spcta:

; 2872 :     else if (y->spc_typ == SPCTAB_NONE) return -1;

  00035	48 8b 44 24 08	 mov	 rax, QWORD PTR y$[rsp]
  0003a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0003d	85 c0		 test	 eax, eax
  0003f	75 09		 jne	 SHORT $LN4@cdsk_spcta
  00041	b8 ff ff ff ff	 mov	 eax, -1
  00046	eb 4c		 jmp	 SHORT $LN1@cdsk_spcta
  00048	eb 4a		 jmp	 SHORT $LN5@cdsk_spcta
$LN4@cdsk_spcta:

; 2873 :     else if (x->spc_typ == SPCTAB_EOF)  return +1;

  0004a	48 8b 04 24	 mov	 rax, QWORD PTR x$[rsp]
  0004e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00051	83 f8 08	 cmp	 eax, 8
  00054	75 09		 jne	 SHORT $LN6@cdsk_spcta
  00056	b8 01 00 00 00	 mov	 eax, 1
  0005b	eb 37		 jmp	 SHORT $LN1@cdsk_spcta
  0005d	eb 35		 jmp	 SHORT $LN7@cdsk_spcta
$LN6@cdsk_spcta:

; 2874 :     else if (y->spc_typ == SPCTAB_EOF)  return -1;

  0005f	48 8b 44 24 08	 mov	 rax, QWORD PTR y$[rsp]
  00064	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00067	83 f8 08	 cmp	 eax, 8
  0006a	75 09		 jne	 SHORT $LN8@cdsk_spcta
  0006c	b8 ff ff ff ff	 mov	 eax, -1
  00071	eb 21		 jmp	 SHORT $LN1@cdsk_spcta
  00073	eb 1f		 jmp	 SHORT $LN9@cdsk_spcta
$LN8@cdsk_spcta:

; 2875 :     else if (x->spc_off < y->spc_off)   return -1;

  00075	48 8b 04 24	 mov	 rax, QWORD PTR x$[rsp]
  00079	48 8b 4c 24 08	 mov	 rcx, QWORD PTR y$[rsp]
  0007e	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00081	39 48 0c	 cmp	 DWORD PTR [rax+12], ecx
  00084	73 09		 jae	 SHORT $LN10@cdsk_spcta
  00086	b8 ff ff ff ff	 mov	 eax, -1
  0008b	eb 07		 jmp	 SHORT $LN1@cdsk_spcta
  0008d	eb 05		 jmp	 SHORT $LN11@cdsk_spcta
$LN10@cdsk_spcta:

; 2876 :     else                                return +1;

  0008f	b8 01 00 00 00	 mov	 eax, 1
$LN11@cdsk_spcta:
$LN9@cdsk_spcta:
$LN7@cdsk_spcta:
$LN5@cdsk_spcta:
$LN3@cdsk_spcta:
$LN1@cdsk_spcta:

; 2877 : } /* end function cdsk_spctab_sort */

  00094	48 83 c4 18	 add	 rsp, 24
  00098	c3		 ret	 0
cdsk_spctab_sort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
x$ = 0
y$ = 8
a$ = 32
b$ = 40
comp_spctab_sort PROC

; 992  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 993  : const SPCTAB *x = a, *y = b;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00013	48 89 04 24	 mov	 QWORD PTR x$[rsp], rax
  00017	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  0001c	48 89 44 24 08	 mov	 QWORD PTR y$[rsp], rax

; 994  : 
; 995  :          if (x->spc_typ == SPCTAB_NONE) return +1;

  00021	48 8b 04 24	 mov	 rax, QWORD PTR x$[rsp]
  00025	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00028	85 c0		 test	 eax, eax
  0002a	75 09		 jne	 SHORT $LN2@comp_spcta
  0002c	b8 01 00 00 00	 mov	 eax, 1
  00031	eb 61		 jmp	 SHORT $LN1@comp_spcta
  00033	eb 5f		 jmp	 SHORT $LN3@comp_spcta
$LN2@comp_spcta:

; 996  :     else if (y->spc_typ == SPCTAB_NONE) return -1;

  00035	48 8b 44 24 08	 mov	 rax, QWORD PTR y$[rsp]
  0003a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0003d	85 c0		 test	 eax, eax
  0003f	75 09		 jne	 SHORT $LN4@comp_spcta
  00041	b8 ff ff ff ff	 mov	 eax, -1
  00046	eb 4c		 jmp	 SHORT $LN1@comp_spcta
  00048	eb 4a		 jmp	 SHORT $LN5@comp_spcta
$LN4@comp_spcta:

; 997  :     else if (x->spc_typ == SPCTAB_EOF)  return +1;

  0004a	48 8b 04 24	 mov	 rax, QWORD PTR x$[rsp]
  0004e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00051	83 f8 08	 cmp	 eax, 8
  00054	75 09		 jne	 SHORT $LN6@comp_spcta
  00056	b8 01 00 00 00	 mov	 eax, 1
  0005b	eb 37		 jmp	 SHORT $LN1@comp_spcta
  0005d	eb 35		 jmp	 SHORT $LN7@comp_spcta
$LN6@comp_spcta:

; 998  :     else if (y->spc_typ == SPCTAB_EOF)  return -1;

  0005f	48 8b 44 24 08	 mov	 rax, QWORD PTR y$[rsp]
  00064	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00067	83 f8 08	 cmp	 eax, 8
  0006a	75 09		 jne	 SHORT $LN8@comp_spcta
  0006c	b8 ff ff ff ff	 mov	 eax, -1
  00071	eb 21		 jmp	 SHORT $LN1@comp_spcta
  00073	eb 1f		 jmp	 SHORT $LN9@comp_spcta
$LN8@comp_spcta:

; 999  :     else if (x->spc_off < y->spc_off)   return -1;

  00075	48 8b 04 24	 mov	 rax, QWORD PTR x$[rsp]
  00079	48 8b 4c 24 08	 mov	 rcx, QWORD PTR y$[rsp]
  0007e	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00081	39 48 0c	 cmp	 DWORD PTR [rax+12], ecx
  00084	73 09		 jae	 SHORT $LN10@comp_spcta
  00086	b8 ff ff ff ff	 mov	 eax, -1
  0008b	eb 07		 jmp	 SHORT $LN1@comp_spcta
  0008d	eb 05		 jmp	 SHORT $LN11@comp_spcta
$LN10@comp_spcta:

; 1000 :     else                                return +1;

  0008f	b8 01 00 00 00	 mov	 eax, 1
$LN11@comp_spcta:
$LN9@comp_spcta:
$LN7@comp_spcta:
$LN5@comp_spcta:
$LN3@comp_spcta:
$LN1@comp_spcta:

; 1001 : }

  00094	48 83 c4 18	 add	 rsp, 24
  00098	c3		 ret	 0
comp_spctab_sort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
cmp$ = 32
bufl$ = 36
len2$ = 40
i$ = 44
bufp$ = 48
tv66 = 56
tv85 = 60
tv226 = 64
tv77 = 68
tv93 = 72
tv132 = 76
tv148 = 80
tv159 = 84
tv200 = 88
rn$ = 96
ha$ = 104
__$ArrayPad$ = 112
trk$ = 160
buf$ = 168
heads$ = 176
len$ = 184
cdsk_valid_trk PROC

; 2913 : {

$LN29:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 44 24 70	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2914 : CKD_TRKHDR      ha;                     /* Home Address              */
; 2915 : CKD_RECHDR      rn;                     /* Record-n (r0, r1 ... rn)  */
; 2916 : int             i;                      /* Buffer index              */
; 2917 : int             len2;                   /* Positive 'len'            */
; 2918 : BYTE           *bufp;                   /* Buffer pointer            */
; 2919 : BYTE            cmp;                    /* Compression indicator     */
; 2920 : int             bufl;                   /* Buffer length             */
; 2921 : #if defined( HAVE_ZLIB )
; 2922 : uLongf          zlen;
; 2923 : #endif
; 2924 : #if defined( CCKD_BZIP2 )
; 2925 : unsigned int    bz2len;
; 2926 : #endif
; 2927 : #if defined( HAVE_ZLIB ) || defined( CCKD_BZIP2 )
; 2928 : int             rc;                     /* Return code               */
; 2929 : BYTE            buf2[64*1024];          /* Uncompressed buffer       */
; 2930 : #endif
; 2931 : 
; 2932 :     /* Negative len only allowed for comp none */
; 2933 :     len2 = len > 0 ? len : -len;

  0002b	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR len$[rsp], 0
  00033	7e 0d		 jle	 SHORT $LN23@cdsk_valid
  00035	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  0003c	89 44 24 38	 mov	 DWORD PTR tv66[rsp], eax
  00040	eb 0d		 jmp	 SHORT $LN24@cdsk_valid
$LN23@cdsk_valid:
  00042	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  00049	f7 d8		 neg	 eax
  0004b	89 44 24 38	 mov	 DWORD PTR tv66[rsp], eax
$LN24@cdsk_valid:
  0004f	8b 44 24 38	 mov	 eax, DWORD PTR tv66[rsp]
  00053	89 44 24 28	 mov	 DWORD PTR len2$[rsp], eax

; 2934 : 
; 2935 :     if (len2 < CKD_MIN_TRKSIZE)

  00057	48 63 44 24 28	 movsxd	 rax, DWORD PTR len2$[rsp]
  0005c	48 83 f8 0d	 cmp	 rax, 13
  00060	7d 07		 jge	 SHORT $LN7@cdsk_valid

; 2936 :         return 0; // (error: WAY too small!)

  00062	33 c0		 xor	 eax, eax
  00064	e9 0e 03 00 00	 jmp	 $LN1@cdsk_valid
$LN7@cdsk_valid:

; 2937 : 
; 2938 :     /* Save Home Address */
; 2939 :     memcpy( &ha, buf, CKD_TRKHDR_SIZE );

  00069	48 8d 44 24 68	 lea	 rax, QWORD PTR ha$[rsp]
  0006e	48 8b f8	 mov	 rdi, rax
  00071	48 8b b4 24 a8
	00 00 00	 mov	 rsi, QWORD PTR buf$[rsp]
  00079	b9 05 00 00 00	 mov	 ecx, 5
  0007e	f3 a4		 rep movsb

; 2940 :     cmp = ha.bin;

  00080	0f b6 44 24 68	 movzx	 eax, BYTE PTR ha$[rsp]
  00085	88 44 24 20	 mov	 BYTE PTR cmp$[rsp], al

; 2941 : 
; 2942 :     /* Uncompress (inflate or expand) the track/block image... */
; 2943 :     switch (cmp) {

  00089	0f b6 44 24 20	 movzx	 eax, BYTE PTR cmp$[rsp]
  0008e	88 44 24 44	 mov	 BYTE PTR tv77[rsp], al
  00092	80 7c 24 44 00	 cmp	 BYTE PTR tv77[rsp], 0
  00097	74 02		 je	 SHORT $LN8@cdsk_valid
  00099	eb 17		 jmp	 SHORT $LN9@cdsk_valid
$LN8@cdsk_valid:

; 2944 : 
; 2945 :     case CCKD_COMPRESS_NONE:
; 2946 :         bufp = buf;

  0009b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  000a3	48 89 44 24 30	 mov	 QWORD PTR bufp$[rsp], rax

; 2947 :         bufl = len2;

  000a8	8b 44 24 28	 mov	 eax, DWORD PTR len2$[rsp]
  000ac	89 44 24 24	 mov	 DWORD PTR bufl$[rsp], eax

; 2948 :         break;

  000b0	eb 07		 jmp	 SHORT $LN2@cdsk_valid
$LN9@cdsk_valid:

; 2949 : 
; 2950 : #if defined( HAVE_ZLIB )
; 2951 :     case CCKD_COMPRESS_ZLIB:
; 2952 :         if (len < 0) return 0;
; 2953 :         bufp = (BYTE*) buf2;
; 2954 :         memcpy( buf2, &ha,      CKD_TRKHDR_SIZE );
; 2955 :         zlen = sizeof( buf2 ) - CKD_TRKHDR_SIZE;
; 2956 :         rc = uncompress( buf2 + CKD_TRKHDR_SIZE, &zlen,
; 2957 :                          buf  + CKD_TRKHDR_SIZE,
; 2958 :                          len  - CKD_TRKHDR_SIZE ); if (rc != Z_OK) return 0;
; 2959 :         bufl =     (int) zlen + CKD_TRKHDR_SIZE;
; 2960 :         break;
; 2961 : #endif
; 2962 : 
; 2963 : #if defined( CCKD_BZIP2 )
; 2964 :     case CCKD_COMPRESS_BZIP2:
; 2965 :         if (len < 0) return 0;
; 2966 :         bufp = (BYTE*) buf2;
; 2967 :         memcpy( buf2, &ha,                                CKD_TRKHDR_SIZE );
; 2968 :         bz2len =                         sizeof(  buf2) - CKD_TRKHDR_SIZE;
; 2969 :         rc = BZ2_bzBuffToBuffDecompress( (char*) &buf2[   CKD_TRKHDR_SIZE ], &bz2len,
; 2970 :                                          (char*) &buf [   CKD_TRKHDR_SIZE ],
; 2971 :                                                   len -   CKD_TRKHDR_SIZE, 0, 0 ); if (rc != BZ_OK) return 0;
; 2972 :         bufl =                           (int) bz2len +   CKD_TRKHDR_SIZE;
; 2973 :         break;
; 2974 : #endif
; 2975 : 
; 2976 :     default:
; 2977 :         return 0; // (error: unsupported compression algorithm!)

  000b2	33 c0		 xor	 eax, eax
  000b4	e9 be 02 00 00	 jmp	 $LN1@cdsk_valid
$LN2@cdsk_valid:

; 2978 : 
; 2979 :     } /* end switch (cmp) */
; 2980 : 
; 2981 :     /* FBA check */
; 2982 :     if (heads == 65536)

  000b9	81 bc 24 b0 00
	00 00 00 00 01
	00		 cmp	 DWORD PTR heads$[rsp], 65536 ; 00010000H
  000c4	75 3c		 jne	 SHORT $LN10@cdsk_valid

; 2983 :     {
; 2984 :         if (bufl != CKD_TRKHDR_SIZE + CFBA_BLKGRP_SIZE)

  000c6	48 63 44 24 24	 movsxd	 rax, DWORD PTR bufl$[rsp]
  000cb	48 3d 05 f0 00
	00		 cmp	 rax, 61445		; 0000f005H
  000d1	74 07		 je	 SHORT $LN11@cdsk_valid

; 2985 :             return 0; // (error: bad block group size!)

  000d3	33 c0		 xor	 eax, eax
  000d5	e9 9d 02 00 00	 jmp	 $LN1@cdsk_valid
$LN11@cdsk_valid:

; 2986 : 
; 2987 :         /* FBA devices don't have record headers or end-of-track
; 2988 :            records either, so there's nothing else to validate.
; 2989 :            Just return the length of this "track" (block group).
; 2990 :         */
; 2991 :         return len > 0 ? len : bufl;

  000da	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR len$[rsp], 0
  000e2	7e 0d		 jle	 SHORT $LN25@cdsk_valid
  000e4	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  000eb	89 44 24 3c	 mov	 DWORD PTR tv85[rsp], eax
  000ef	eb 08		 jmp	 SHORT $LN26@cdsk_valid
$LN25@cdsk_valid:
  000f1	8b 44 24 24	 mov	 eax, DWORD PTR bufl$[rsp]
  000f5	89 44 24 3c	 mov	 DWORD PTR tv85[rsp], eax
$LN26@cdsk_valid:
  000f9	8b 44 24 3c	 mov	 eax, DWORD PTR tv85[rsp]
  000fd	e9 75 02 00 00	 jmp	 $LN1@cdsk_valid
$LN10@cdsk_valid:

; 2992 :     }
; 2993 : 
; 2994 :     /* Validate length */
; 2995 :     if (bufl < MIN( MIN( CKD_NULLTRK_SIZE0, CKD_NULLTRK_SIZE1 ), CKD_NULLTRK_SIZE2 ))

  00102	48 63 44 24 24	 movsxd	 rax, DWORD PTR bufl$[rsp]
  00107	48 83 f8 1d	 cmp	 rax, 29
  0010b	7d 07		 jge	 SHORT $LN12@cdsk_valid

; 2996 :         return 0; // (error: too small!)

  0010d	33 c0		 xor	 eax, eax
  0010f	e9 63 02 00 00	 jmp	 $LN1@cdsk_valid
$LN12@cdsk_valid:

; 2997 : 
; 2998 :     /* Check ha */
; 2999 :     if (0
; 3000 :         || fetch_hw( ha.cyl  ) != trk / heads
; 3001 :         || fetch_hw( ha.head ) != trk % heads

  00114	33 c0		 xor	 eax, eax
  00116	85 c0		 test	 eax, eax
  00118	75 62		 jne	 SHORT $LN14@cdsk_valid
  0011a	48 8d 4c 24 69	 lea	 rcx, QWORD PTR ha$[rsp+1]
  0011f	e8 00 00 00 00	 call	 fetch_hw_noswap
  00124	0f b7 c8	 movzx	 ecx, ax
  00127	e8 00 00 00 00	 call	 _byteswap_ushort
  0012c	0f b7 c0	 movzx	 eax, ax
  0012f	89 44 24 48	 mov	 DWORD PTR tv93[rsp], eax
  00133	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR trk$[rsp]
  0013a	99		 cdq
  0013b	f7 bc 24 b0 00
	00 00		 idiv	 DWORD PTR heads$[rsp]
  00142	8b 4c 24 48	 mov	 ecx, DWORD PTR tv93[rsp]
  00146	3b c8		 cmp	 ecx, eax
  00148	75 32		 jne	 SHORT $LN14@cdsk_valid
  0014a	48 8d 4c 24 6b	 lea	 rcx, QWORD PTR ha$[rsp+3]
  0014f	e8 00 00 00 00	 call	 fetch_hw_noswap
  00154	0f b7 c8	 movzx	 ecx, ax
  00157	e8 00 00 00 00	 call	 _byteswap_ushort
  0015c	0f b7 c0	 movzx	 eax, ax
  0015f	89 44 24 4c	 mov	 DWORD PTR tv132[rsp], eax
  00163	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR trk$[rsp]
  0016a	99		 cdq
  0016b	f7 bc 24 b0 00
	00 00		 idiv	 DWORD PTR heads$[rsp]
  00172	8b c2		 mov	 eax, edx
  00174	8b 4c 24 4c	 mov	 ecx, DWORD PTR tv132[rsp]
  00178	3b c8		 cmp	 ecx, eax
  0017a	74 07		 je	 SHORT $LN13@cdsk_valid
$LN14@cdsk_valid:

; 3002 :     )
; 3003 :         return 0; // (error: bad home address record!)

  0017c	33 c0		 xor	 eax, eax
  0017e	e9 f4 01 00 00	 jmp	 $LN1@cdsk_valid
$LN13@cdsk_valid:

; 3004 : 
; 3005 :     /* Get past ha to r0 count */
; 3006 :     bufp += CKD_TRKHDR_SIZE;

  00183	48 8b 44 24 30	 mov	 rax, QWORD PTR bufp$[rsp]
  00188	48 83 c0 05	 add	 rax, 5
  0018c	48 89 44 24 30	 mov	 QWORD PTR bufp$[rsp], rax

; 3007 : 
; 3008 :     /* Save r0 count */
; 3009 :     memcpy( &rn, bufp, CKD_R0_SIZE );

  00191	48 8b 44 24 30	 mov	 rax, QWORD PTR bufp$[rsp]
  00196	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00199	48 89 44 24 60	 mov	 QWORD PTR rn$[rsp], rax

; 3010 : 
; 3011 :     /* Validate r0 count */
; 3012 :     if (0
; 3013 :         || fetch_hw( rn.cyl  ) != fetch_hw( ha.cyl  )
; 3014 :         || fetch_hw( rn.head ) != fetch_hw( ha.head )
; 3015 :         || rn.rec  != 0
; 3016 :         || rn.klen != 0
; 3017 :         || fetch_hw( rn.dlen ) != CKD_R0_DLEN

  0019e	33 c0		 xor	 eax, eax
  001a0	85 c0		 test	 eax, eax
  001a2	0f 85 98 00 00
	00		 jne	 $LN16@cdsk_valid
  001a8	48 8d 4c 24 60	 lea	 rcx, QWORD PTR rn$[rsp]
  001ad	e8 00 00 00 00	 call	 fetch_hw_noswap
  001b2	0f b7 c8	 movzx	 ecx, ax
  001b5	e8 00 00 00 00	 call	 _byteswap_ushort
  001ba	0f b7 c0	 movzx	 eax, ax
  001bd	89 44 24 50	 mov	 DWORD PTR tv148[rsp], eax
  001c1	48 8d 4c 24 69	 lea	 rcx, QWORD PTR ha$[rsp+1]
  001c6	e8 00 00 00 00	 call	 fetch_hw_noswap
  001cb	0f b7 c8	 movzx	 ecx, ax
  001ce	e8 00 00 00 00	 call	 _byteswap_ushort
  001d3	0f b7 c0	 movzx	 eax, ax
  001d6	8b 4c 24 50	 mov	 ecx, DWORD PTR tv148[rsp]
  001da	3b c8		 cmp	 ecx, eax
  001dc	75 62		 jne	 SHORT $LN16@cdsk_valid
  001de	48 8d 4c 24 62	 lea	 rcx, QWORD PTR rn$[rsp+2]
  001e3	e8 00 00 00 00	 call	 fetch_hw_noswap
  001e8	0f b7 c8	 movzx	 ecx, ax
  001eb	e8 00 00 00 00	 call	 _byteswap_ushort
  001f0	0f b7 c0	 movzx	 eax, ax
  001f3	89 44 24 54	 mov	 DWORD PTR tv159[rsp], eax
  001f7	48 8d 4c 24 6b	 lea	 rcx, QWORD PTR ha$[rsp+3]
  001fc	e8 00 00 00 00	 call	 fetch_hw_noswap
  00201	0f b7 c8	 movzx	 ecx, ax
  00204	e8 00 00 00 00	 call	 _byteswap_ushort
  00209	0f b7 c0	 movzx	 eax, ax
  0020c	8b 4c 24 54	 mov	 ecx, DWORD PTR tv159[rsp]
  00210	3b c8		 cmp	 ecx, eax
  00212	75 2c		 jne	 SHORT $LN16@cdsk_valid
  00214	0f b6 44 24 64	 movzx	 eax, BYTE PTR rn$[rsp+4]
  00219	85 c0		 test	 eax, eax
  0021b	75 23		 jne	 SHORT $LN16@cdsk_valid
  0021d	0f b6 44 24 65	 movzx	 eax, BYTE PTR rn$[rsp+5]
  00222	85 c0		 test	 eax, eax
  00224	75 1a		 jne	 SHORT $LN16@cdsk_valid
  00226	48 8d 4c 24 66	 lea	 rcx, QWORD PTR rn$[rsp+6]
  0022b	e8 00 00 00 00	 call	 fetch_hw_noswap
  00230	0f b7 c8	 movzx	 ecx, ax
  00233	e8 00 00 00 00	 call	 _byteswap_ushort
  00238	0f b7 c0	 movzx	 eax, ax
  0023b	83 f8 08	 cmp	 eax, 8
  0023e	74 07		 je	 SHORT $LN15@cdsk_valid
$LN16@cdsk_valid:

; 3018 :     )
; 3019 :         return 0; // (error: bad r0 count!) */)

  00240	33 c0		 xor	 eax, eax
  00242	e9 30 01 00 00	 jmp	 $LN1@cdsk_valid
$LN15@cdsk_valid:

; 3020 : 
; 3021 :     /* Get past r0 count + data to r1 count */
; 3022 :     bufp += (CKD_R0_SIZE + CKD_R0_DLEN);

  00247	48 8b 44 24 30	 mov	 rax, QWORD PTR bufp$[rsp]
  0024c	48 83 c0 10	 add	 rax, 16
  00250	48 89 44 24 30	 mov	 QWORD PTR bufp$[rsp], rax

; 3023 : 
; 3024 :     /* Check user records r1 ... rn */
; 3025 :     for
; 3026 :     (
; 3027 :         /* Buffer index to r1 count */
; 3028 :         i = CKD_TRKHDR_SIZE + (CKD_R0_SIZE + CKD_R0_DLEN);

  00255	c7 44 24 2c 15
	00 00 00	 mov	 DWORD PTR i$[rsp], 21
  0025d	eb 25		 jmp	 SHORT $LN6@cdsk_valid
$LN4@cdsk_valid:

; 3032 : 
; 3033 :         /* Increment buffer index by rn count + key + data */
; 3034 :         i += len2,   /* (len2 is re-calculated each loop iteration) */

  0025f	8b 44 24 28	 mov	 eax, DWORD PTR len2$[rsp]
  00263	8b 4c 24 2c	 mov	 ecx, DWORD PTR i$[rsp]
  00267	03 c8		 add	 ecx, eax
  00269	8b c1		 mov	 eax, ecx
  0026b	89 44 24 2c	 mov	 DWORD PTR i$[rsp], eax
  0026f	48 63 44 24 28	 movsxd	 rax, DWORD PTR len2$[rsp]
  00274	48 8b 4c 24 30	 mov	 rcx, QWORD PTR bufp$[rsp]
  00279	48 03 c8	 add	 rcx, rax
  0027c	48 8b c1	 mov	 rax, rcx
  0027f	48 89 44 24 30	 mov	 QWORD PTR bufp$[rsp], rax
$LN6@cdsk_valid:

; 3029 : 
; 3030 :         /* While possible user records remain... */
; 3031 :         i < bufl - CKD_ENDTRK_SIZE;

  00284	48 63 44 24 2c	 movsxd	 rax, DWORD PTR i$[rsp]
  00289	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR bufl$[rsp]
  0028e	48 83 e9 08	 sub	 rcx, 8
  00292	48 3b c1	 cmp	 rax, rcx
  00295	7d 6e		 jge	 SHORT $LN5@cdsk_valid

; 3035 : 
; 3036 :         /* Get past this record to the next possible user record */
; 3037 :         bufp += len2 /* (len2 is re-calculated each loop iteration) */
; 3038 :     )
; 3039 :     {
; 3040 :         /* Save rn count field */
; 3041 :         memcpy( &rn, bufp, CKD_RECHDR_SIZE );

  00297	48 8b 44 24 30	 mov	 rax, QWORD PTR bufp$[rsp]
  0029c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0029f	48 89 44 24 60	 mov	 QWORD PTR rn$[rsp], rax

; 3042 : 
; 3043 :         /* PROGRAMMING NOTE: the CKD record CC, HH and R count fields
; 3044 :            are NOT required to match the actual CC and HH of the Home
; 3045 :            Address record! They can be any value the user wants, as
; 3046 :            long as they're valid: the HH value MUST be < the number
; 3047 :            number of heads the device supports, and the R field can't
; 3048 :            be 0 (there can be only ONE r0 and we already processed it).
; 3049 :         */
; 3050 :         if (0
; 3051 :             || fetch_hw( rn.head ) >= heads
; 3052 :             || rn.rec == 0

  002a4	33 c0		 xor	 eax, eax
  002a6	85 c0		 test	 eax, eax
  002a8	75 27		 jne	 SHORT $LN18@cdsk_valid
  002aa	48 8d 4c 24 62	 lea	 rcx, QWORD PTR rn$[rsp+2]
  002af	e8 00 00 00 00	 call	 fetch_hw_noswap
  002b4	0f b7 c8	 movzx	 ecx, ax
  002b7	e8 00 00 00 00	 call	 _byteswap_ushort
  002bc	0f b7 c0	 movzx	 eax, ax
  002bf	3b 84 24 b0 00
	00 00		 cmp	 eax, DWORD PTR heads$[rsp]
  002c6	7d 09		 jge	 SHORT $LN18@cdsk_valid
  002c8	0f b6 44 24 64	 movzx	 eax, BYTE PTR rn$[rsp+4]
  002cd	85 c0		 test	 eax, eax
  002cf	75 02		 jne	 SHORT $LN17@cdsk_valid
$LN18@cdsk_valid:

; 3053 :         )
; 3054 :             break; // (error: bad rn count!)

  002d1	eb 32		 jmp	 SHORT $LN5@cdsk_valid
$LN17@cdsk_valid:

; 3055 : 
; 3056 :         /* Calculate buffer index to the next possible user record */
; 3057 :         len2 = CKD_RECHDR_SIZE + rn.klen + fetch_hw( rn.dlen );

  002d3	0f b6 44 24 65	 movzx	 eax, BYTE PTR rn$[rsp+5]
  002d8	48 89 44 24 58	 mov	 QWORD PTR tv200[rsp], rax
  002dd	48 8d 4c 24 66	 lea	 rcx, QWORD PTR rn$[rsp+6]
  002e2	e8 00 00 00 00	 call	 fetch_hw_noswap
  002e7	0f b7 c8	 movzx	 ecx, ax
  002ea	e8 00 00 00 00	 call	 _byteswap_ushort
  002ef	0f b7 c0	 movzx	 eax, ax
  002f2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv200[rsp]
  002f7	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  002fc	89 44 24 28	 mov	 DWORD PTR len2$[rsp], eax

; 3058 :     }

  00300	e9 5a ff ff ff	 jmp	 $LN4@cdsk_valid
$LN5@cdsk_valid:

; 3059 : 
; 3060 :     /* Include length of END-OF-TRACK record too if requested */
; 3061 :     if (len < 0)

  00305	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR len$[rsp], 0
  0030d	7d 0d		 jge	 SHORT $LN19@cdsk_valid

; 3062 :         bufl = i + CKD_ENDTRK_SIZE;

  0030f	48 63 44 24 2c	 movsxd	 rax, DWORD PTR i$[rsp]
  00314	48 83 c0 08	 add	 rax, 8
  00318	89 44 24 24	 mov	 DWORD PTR bufl$[rsp], eax
$LN19@cdsk_valid:

; 3063 : 
; 3064 :     /* Validate track length and existence of END-OF-TRACK record */
; 3065 :     if (0
; 3066 :         || i != (bufl - CKD_ENDTRK_SIZE)
; 3067 :         || memcmp( bufp, &CKD_ENDTRK, CKD_ENDTRK_SIZE ) != 0

  0031c	33 c0		 xor	 eax, eax
  0031e	85 c0		 test	 eax, eax
  00320	75 2e		 jne	 SHORT $LN21@cdsk_valid
  00322	48 63 44 24 2c	 movsxd	 rax, DWORD PTR i$[rsp]
  00327	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR bufl$[rsp]
  0032c	48 83 e9 08	 sub	 rcx, 8
  00330	48 3b c1	 cmp	 rax, rcx
  00333	75 1b		 jne	 SHORT $LN21@cdsk_valid
  00335	41 b8 08 00 00
	00		 mov	 r8d, 8
  0033b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:CKD_ENDTRK
  00342	48 8b 4c 24 30	 mov	 rcx, QWORD PTR bufp$[rsp]
  00347	e8 00 00 00 00	 call	 memcmp
  0034c	85 c0		 test	 eax, eax
  0034e	74 04		 je	 SHORT $LN20@cdsk_valid
$LN21@cdsk_valid:

; 3068 :     )
; 3069 :         return 0; // (error: missing END-OF-TRACK!)

  00350	33 c0		 xor	 eax, eax
  00352	eb 23		 jmp	 SHORT $LN1@cdsk_valid
$LN20@cdsk_valid:

; 3070 : 
; 3071 :     return len > 0 ? len : bufl;  // (success: return track length)

  00354	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR len$[rsp], 0
  0035c	7e 0d		 jle	 SHORT $LN27@cdsk_valid
  0035e	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  00365	89 44 24 40	 mov	 DWORD PTR tv226[rsp], eax
  00369	eb 08		 jmp	 SHORT $LN28@cdsk_valid
$LN27@cdsk_valid:
  0036b	8b 44 24 24	 mov	 eax, DWORD PTR bufl$[rsp]
  0036f	89 44 24 40	 mov	 DWORD PTR tv226[rsp], eax
$LN28@cdsk_valid:
  00373	8b 44 24 40	 mov	 eax, DWORD PTR tv226[rsp]
$LN1@cdsk_valid:

; 3072 : 
; 3073 : } /* end function cdsk_valid_trk */

  00377	48 8b 4c 24 70	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0037c	48 33 cc	 xor	 rcx, rsp
  0037f	e8 00 00 00 00	 call	 __security_check_cookie
  00384	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0038b	5f		 pop	 rdi
  0038c	5e		 pop	 rsi
  0038d	c3		 ret	 0
cdsk_valid_trk ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
i$ = 144
spctab$ = 152
s$ = 160
len$ = 164
l$ = 168
fd$ = 172
j$ = 176
n$ = 180
rc$ = 184
f$ = 188
off$ = 192
hdrerr$ = 200
heads$ = 204
trktyp$ = 208
trk$ = 212
L1idx$ = 216
lopos$ = 220
comp$ = 224
l2$ = 232
blkgrp$ = 240
trks$ = 244
fsperr$ = 248
rcvtab$ = 256
l1size$ = 264
recovery$ = 268
trksz$ = 272
pass$ = 276
blkgrpsz$ = 280
fsp$ = 288
hipos$ = 296
cyls$ = 300
l1$ = 304
flen$1 = 312
freeblk$ = 320
swapend$ = 328
cyl$ = 332
head$ = 336
ro$ = 340
flen$2 = 344
fpos$3 = 348
l2x$ = 352
tv1102 = 356
l2errs$ = 360
valid$ = 368
ckddasd$ = 372
shadow$ = 376
imgtyp$ = 380
blkgrps$ = 384
tv374 = 388
tv380 = 392
tv399 = 396
tv405 = 400
tv471 = 404
tv477 = 408
tv498 = 412
tv504 = 416
tv533 = 420
tv539 = 424
tv561 = 428
tv567 = 432
blks$ = 436
tv613 = 440
tv619 = 444
tv640 = 448
tv646 = 452
tv677 = 456
tv683 = 460
tv736 = 464
tv742 = 468
tv768 = 472
tv774 = 476
tv791 = 480
tv797 = 484
tv811 = 488
tv815 = 492
tv819 = 496
tv823 = 500
tv827 = 504
tv831 = 508
tv867 = 512
tv871 = 516
tv875 = 520
tv878 = 524
tv891 = 528
tv897 = 532
tv914 = 536
tv920 = 540
tv942 = 544
tv948 = 548
tv965 = 552
tv971 = 556
tv1028 = 560
tv1034 = 564
tv1051 = 568
tv1057 = 572
err$4 = 576
tv1597 = 580
tv1676 = 584
tv1682 = 588
tv1711 = 592
tv1717 = 596
tv1758 = 600
tv1764 = 604
tv1801 = 608
tv1807 = 612
tv1954 = 616
tv1960 = 620
tv2028 = 624
tv2034 = 628
tv2106 = 632
tv2112 = 636
tv2129 = 640
tv2135 = 644
tv2401 = 648
tv2407 = 652
tv2423 = 656
tv2429 = 660
tv2554 = 664
tv2560 = 668
tv2605 = 672
tv2611 = 676
tv2676 = 680
tv2682 = 684
tv2699 = 688
tv2705 = 692
tv2740 = 696
tv2746 = 700
tv2772 = 704
tv2778 = 708
tv2812 = 712
tv2818 = 716
tv2841 = 720
tv2847 = 724
tv3297 = 728
tv3303 = 732
tv3328 = 736
tv3334 = 740
fpos$5 = 744
fbadasd$ = 748
tv3766 = 752
tv3772 = 756
tv3797 = 760
tv3803 = 764
tv3894 = 768
tv3900 = 772
tv3921 = 776
tv3927 = 780
tv3984 = 784
tv4166 = 788
tv4172 = 792
tv4188 = 796
tv4194 = 800
tv4281 = 804
tv4287 = 808
tv4304 = 812
tv4310 = 816
comperrs$ = 820
tv4364 = 824
tv4370 = 828
tv4387 = 832
tv4393 = 836
tv4509 = 840
tv4515 = 844
tv4531 = 848
tv4537 = 852
tv5121 = 856
tv5127 = 860
tv5143 = 864
tv5149 = 868
tv5161 = 872
tv5163 = 876
tv5258 = 880
tv5264 = 884
tv5285 = 888
tv5291 = 892
tv5349 = 896
tv5355 = 900
tv5377 = 904
tv5383 = 908
tv5411 = 912
tv5417 = 916
tv5441 = 920
tv5447 = 924
tv5475 = 928
tv5481 = 932
tv5505 = 936
tv5511 = 940
tv5572 = 944
tv5578 = 948
tv5599 = 952
tv5605 = 956
tv5635 = 960
tv5641 = 964
tv5662 = 968
tv5668 = 972
tv86 = 976
tv226 = 980
tv232 = 984
tv246 = 988
tv286 = 992
tv292 = 996
tv313 = 1000
tv319 = 1004
ckd$6 = 1008
tv2538 = 1016
tv2573 = 1020
tv2577 = 1024
tv2581 = 1028
tv2589 = 1032
tv3157 = 1036
tv3174 = 1040
fdflags$ = 1044
tv206 = 1048
tv210 = 1052
tv268 = 1056
tv367 = 1060
tv392 = 1064
tv2522 = 1068
tv2526 = 1072
tv2530 = 1076
cckd$ = 1080
l2ent$ = 1088
$T7 = 1096
tv279 = 1104
tv306 = 1112
tv2480 = 1120
tv2944 = 1128
tv3498 = 1136
tv3973 = 1144
cckd_maxsize$ = 1152
tv5402 = 1160
tv5432 = 1168
tv5466 = 1176
tv5496 = 1184
tv137 = 1192
tv203 = 1200
tv221 = 1208
tv254 = 1216
tv281 = 1224
tv308 = 1232
tv369 = 1240
tv394 = 1248
tv461 = 1256
tv463 = 1264
tv466 = 1272
tv488 = 1280
tv490 = 1288
tv493 = 1296
tv523 = 1304
tv525 = 1312
tv528 = 1320
tv551 = 1328
tv553 = 1336
tv556 = 1344
tv603 = 1352
tv605 = 1360
tv608 = 1368
tv630 = 1376
tv632 = 1384
tv635 = 1392
tv668 = 1400
tv672 = 1408
tv695 = 1416
tv699 = 1424
tv763 = 1432
tv786 = 1440
tv886 = 1448
tv909 = 1456
tv937 = 1464
tv960 = 1472
tv991 = 1480
tv1046 = 1488
tv1117 = 1496
tv1335 = 1504
tv1340 = 1512
tv1378 = 1520
tv1662 = 1528
tv1668 = 1536
tv1671 = 1544
tv1697 = 1552
tv1703 = 1560
tv1706 = 1568
tv1737 = 1576
tv1744 = 1584
tv1750 = 1592
tv1780 = 1600
tv1787 = 1608
tv1793 = 1616
tv1933 = 1624
tv1939 = 1632
tv1942 = 1640
tv1946 = 1648
tv1949 = 1656
tv1975 = 1664
tv1981 = 1672
tv2016 = 1680
tv2020 = 1688
tv2023 = 1696
tv2101 = 1704
tv2124 = 1712
tv2210 = 1720
tv2319 = 1728
tv2396 = 1736
tv2418 = 1744
tv2466 = 1752
tv2542 = 1760
tv2546 = 1768
tv2549 = 1776
tv2593 = 1784
tv2597 = 1792
tv2600 = 1800
tv2671 = 1808
tv2694 = 1816
tv2725 = 1824
tv2732 = 1832
tv2735 = 1840
tv2757 = 1848
tv2764 = 1856
tv2767 = 1864
tv2800 = 1872
tv2804 = 1880
tv2807 = 1888
tv2829 = 1896
tv2833 = 1904
tv2836 = 1912
tv2954 = 1920
tv3283 = 1928
tv3286 = 1936
tv3289 = 1944
tv3292 = 1952
tv3314 = 1960
tv3317 = 1968
tv3320 = 1976
tv3323 = 1984
tv3508 = 1992
tv3752 = 2000
tv3755 = 2008
tv3758 = 2016
tv3761 = 2024
tv3783 = 2032
tv3786 = 2040
tv3789 = 2048
tv3792 = 2056
tv3884 = 2064
tv3887 = 2072
tv3889 = 2080
tv3911 = 2088
tv3914 = 2096
tv3916 = 2104
tv7362 = 2112
tv4161 = 2120
tv4183 = 2128
tv4276 = 2136
tv4299 = 2144
tv4359 = 2152
tv4382 = 2160
tv4411 = 2168
tv4461 = 2176
tv4504 = 2184
tv4526 = 2192
tv4639 = 2200
tv4665 = 2208
tv4717 = 2216
tv4738 = 2224
tv4962 = 2232
tv5021 = 2240
tv5050 = 2248
tv5070 = 2256
tv5090 = 2264
tv5116 = 2272
tv5138 = 2280
tv5204 = 2288
tv5214 = 2296
tv5248 = 2304
tv5253 = 2312
tv5275 = 2320
tv5280 = 2328
tv5306 = 2336
tv5344 = 2344
tv5366 = 2352
tv5372 = 2360
tv5406 = 2368
tv5436 = 2376
tv5470 = 2384
tv5500 = 2392
tv5530 = 2400
tv5535 = 2408
tv5589 = 2416
tv5594 = 2424
tv5625 = 2432
tv5630 = 2440
tv5652 = 2448
tv5657 = 2456
devhdr$ = 2464
cdevhdr$ = 2976
fst$ = 3488
cdevhdr2$ = 3552
l2tab$ = 4064
empty_l2$ = 6112
space1$8 = 8160
space2$9 = 8192
compmask$ = 8224
buf$10 = 8480
buf$11 = 8544
buf$ = 8608
__$ArrayPad$ = 270752
dev$ = 270800
level$ = 270808
cckd_chkdsk PROC

; 1015 : {

$LN825:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	b8 b8 21 04 00	 mov	 eax, 270776		; 000421b8H
  00010	e8 00 00 00 00	 call	 __chkstk
  00015	48 2b e0	 sub	 rsp, rax
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 a0
	21 04 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1016 : CCKD_EXT       *cckd;                   /* -> ckd extension          */
; 1017 : int             fd;                     /* file descriptor           */
; 1018 : struct stat     fst;                    /* file status information   */
; 1019 : int             fdflags;                /* file descriptor flags     */
; 1020 : U64             cckd_maxsize;           /* max cckd file size        */
; 1021 : int             ro;                     /* 1=file opened read-only   */
; 1022 : int             f, i, j, l, n;          /* work integers             */
; 1023 : int             L1idx, l2x;             /* l1, l2 table indexes      */
; 1024 : U32             imgtyp;                 /* Dasd image type           */
; 1025 : BYTE            compmask[256];          /* compression byte mask
; 1026 :                                            00 - supported
; 1027 :                                            0x - valid, not supported
; 1028 :                                            ff - invalid              */
; 1029 : off_t           off;                    /* file offset               */
; 1030 : int             len;                    /* length to read            */
; 1031 : int             rc;                     /* function return code      */
; 1032 : int             comp;                   /* trkhdr compression byte[0]*/
; 1033 : int             cyl;                    /* trkhdr cyl      bytes[1-2]*/
; 1034 : int             head;                   /* trkhdr head     bytes[3-4]*/
; 1035 : int             trk;                    /* trkhdr calculated trk     */
; 1036 : int             cyls;                   /* number cylinders          */
; 1037 : int             heads;                  /* number heads/cylinder     */
; 1038 : int             trks;                   /* number tracks             */
; 1039 : unsigned int    trksz;                  /* track size                */
; 1040 : int             blks;                   /* number fba blocks         */
; 1041 : int             blkgrp;                 /* current block group nbr   */
; 1042 : int             blkgrps;                /* number fba block groups   */
; 1043 : unsigned int    blkgrpsz;               /* fba block group size      */
; 1044 : int             trktyp;                 /* track type (TRK, BLKGRP)  */
; 1045 : int             ckddasd=0;              /* 1=ckd                     */

  0002a	c7 84 24 74 01
	00 00 00 00 00
	00		 mov	 DWORD PTR ckddasd$[rsp], 0

; 1046 : int             fbadasd=0;              /* 1= fba                    */

  00035	c7 84 24 ec 02
	00 00 00 00 00
	00		 mov	 DWORD PTR fbadasd$[rsp], 0

; 1047 : int             shadow=0;               /* 0xff=shadow file          */

  00040	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR shadow$[rsp], 0

; 1048 : int             hdrerr=0;               /* non-zero: header errors   */

  0004b	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR hdrerr$[rsp], 0

; 1049 : int             fsperr=0;               /* 1=rebuild free space      */

  00056	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR fsperr$[rsp], 0

; 1050 : int             comperrs=0;             /* 1=unsupported comp found  */

  00061	c7 84 24 34 03
	00 00 00 00 00
	00		 mov	 DWORD PTR comperrs$[rsp], 0

; 1051 : int             recovery=0;             /* 1=perform track recovery  */

  0006c	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR recovery$[rsp], 0

; 1052 : int             valid;                  /* 1=valid trk recovered     */
; 1053 : int             l1size;                 /* size of l1 table          */
; 1054 : int             swapend=0;              /* 1=call cckd_swapend       */

  00077	c7 84 24 48 01
	00 00 00 00 00
	00		 mov	 DWORD PTR swapend$[rsp], 0

; 1055 : U32             lopos, hipos;           /* low/high file positions   */
; 1056 : int             pass;                   /* recovery pass number (fba)*/
; 1057 : int             s;                      /* space table index         */
; 1058 : SPCTAB         *spctab=NULL;            /* -> space table            */

  00082	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR spctab$[rsp], 0

; 1059 : BYTE           *l2errs=NULL;            /* l2 error table            */

  0008e	48 c7 84 24 68
	01 00 00 00 00
	00 00		 mov	 QWORD PTR l2errs$[rsp], 0

; 1060 : BYTE           *rcvtab=NULL;            /* recovered tracks          */

  0009a	48 c7 84 24 00
	01 00 00 00 00
	00 00		 mov	 QWORD PTR rcvtab$[rsp], 0

; 1061 : CKD_DEVHDR      devhdr;                 /* device header             */
; 1062 : CCKD_DEVHDR     cdevhdr;                /* compressed device header  */
; 1063 : CCKD_DEVHDR     cdevhdr2;               /* compressed device header 2*/
; 1064 : CCKD_L1ENT     *l1=NULL;                /* -> level 1 table          */

  000a6	48 c7 84 24 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR l1$[rsp], 0

; 1065 : CCKD_L2ENT      l2ent;                  /* level 2 entry             */
; 1066 : CCKD_L2ENT      l2tab[256];             /* level 2 table             */
; 1067 : CCKD_L2ENT    **l2=NULL;                /* -> level 2 table array    */

  000b2	48 c7 84 24 e8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR l2$[rsp], 0

; 1068 : CCKD_L2ENT      empty_l2[256];          /* Empty l2 table            */
; 1069 : CCKD_FREEBLK    freeblk;                /* free block                */
; 1070 : CCKD_FREEBLK   *fsp=NULL;               /* free blocks (new format)  */

  000be	48 c7 84 24 20
	01 00 00 00 00
	00 00		 mov	 QWORD PTR fsp$[rsp], 0

; 1071 : BYTE            buf[4*65536];           /* buffer                    */
; 1072 : 
; 1073 :     /* Get fd */
; 1074 :     cckd = dev->cckd_ext;

  000ca	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  000d2	48 8b 80 08 13
	00 00		 mov	 rax, QWORD PTR [rax+4872]
  000d9	48 89 84 24 38
	04 00 00	 mov	 QWORD PTR cckd$[rsp], rax

; 1075 :     if (cckd == NULL)

  000e1	48 83 bc 24 38
	04 00 00 00	 cmp	 QWORD PTR cckd$[rsp], 0
  000ea	75 17		 jne	 SHORT $LN144@cckd_chkds

; 1076 :         fd = dev->fd;

  000ec	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  000f4	8b 80 ac 01 00
	00		 mov	 eax, DWORD PTR [rax+428]
  000fa	89 84 24 ac 00
	00 00		 mov	 DWORD PTR fd$[rsp], eax
  00101	eb 22		 jmp	 SHORT $LN145@cckd_chkds
$LN144@cckd_chkds:

; 1077 :     else
; 1078 :         fd = cckd->fd[cckd->sfn];

  00103	48 8b 84 24 38
	04 00 00	 mov	 rax, QWORD PTR cckd$[rsp]
  0010b	48 63 40 3c	 movsxd	 rax, DWORD PTR [rax+60]
  0010f	48 8b 8c 24 38
	04 00 00	 mov	 rcx, QWORD PTR cckd$[rsp]
  00117	8b 84 81 f0 00
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+240]
  0011e	89 84 24 ac 00
	00 00		 mov	 DWORD PTR fd$[rsp], eax
$LN145@cckd_chkds:

; 1079 : 
; 1080 :     /* Get some file information */
; 1081 :     if ( fstat (fd, &fst) < 0 )

  00125	48 8d 94 24 a0
	0d 00 00	 lea	 rdx, QWORD PTR fst$[rsp]
  0012d	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fstat64
  0013a	85 c0		 test	 eax, eax
  0013c	7d 05		 jge	 SHORT $LN146@cckd_chkds

; 1082 :         goto cdsk_fstat_error;

  0013e	e9 4b a1 00 00	 jmp	 $cdsk_fstat_error$826
$LN146@cckd_chkds:

; 1083 :     gui_fprintf (stderr, "SIZE=%"PRIu64"\n", (U64) fst.st_size);

  00143	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0014a	83 38 00	 cmp	 DWORD PTR [rax], 0
  0014d	74 23		 je	 SHORT $LN147@cckd_chkds
  0014f	b9 02 00 00 00	 mov	 ecx, 2
  00154	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0015a	4c 8b 84 24 b8
	0d 00 00	 mov	 r8, QWORD PTR fst$[rsp+24]
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169978
  00169	48 8b c8	 mov	 rcx, rax
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN147@cckd_chkds:

; 1084 :     hipos = (U32)fst.st_size;

  00172	8b 84 24 b8 0d
	00 00		 mov	 eax, DWORD PTR fst$[rsp+24]
  00179	89 84 24 28 01
	00 00		 mov	 DWORD PTR hipos$[rsp], eax

; 1085 :     cckd_maxsize = CCKD_MAXSIZE;

  00180	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  00185	48 89 84 24 80
	04 00 00	 mov	 QWORD PTR cckd_maxsize$[rsp], rax

; 1086 :     fdflags = get_file_accmode_flags(fd);

  0018d	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00194	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_get_file_accmode_flags
  0019a	89 84 24 14 04
	00 00		 mov	 DWORD PTR fdflags$[rsp], eax

; 1087 :     ro = (fdflags & O_RDWR) == 0;

  001a1	8b 84 24 14 04
	00 00		 mov	 eax, DWORD PTR fdflags$[rsp]
  001a8	83 e0 02	 and	 eax, 2
  001ab	85 c0		 test	 eax, eax
  001ad	75 0d		 jne	 SHORT $LN505@cckd_chkds
  001af	c7 84 24 d0 03
	00 00 01 00 00
	00		 mov	 DWORD PTR tv86[rsp], 1
  001ba	eb 0b		 jmp	 SHORT $LN506@cckd_chkds
$LN505@cckd_chkds:
  001bc	c7 84 24 d0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv86[rsp], 0
$LN506@cckd_chkds:
  001c7	8b 84 24 d0 03
	00 00		 mov	 eax, DWORD PTR tv86[rsp]
  001ce	89 84 24 54 01
	00 00		 mov	 DWORD PTR ro$[rsp], eax

; 1088 : 
; 1089 :     /* Build table for compression byte test */
; 1090 :     memset (compmask, 0xff, 256);

  001d5	48 8d 84 24 20
	20 00 00	 lea	 rax, QWORD PTR compmask$[rsp]
  001dd	48 8b f8	 mov	 rdi, rax
  001e0	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  001e5	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  001ea	f3 aa		 rep stosb

; 1091 :     compmask[0] = 0;

  001ec	b8 01 00 00 00	 mov	 eax, 1
  001f1	48 6b c0 00	 imul	 rax, rax, 0
  001f5	48 89 84 24 48
	04 00 00	 mov	 QWORD PTR $T7[rsp], rax
  001fd	48 81 bc 24 48
	04 00 00 00 01
	00 00		 cmp	 QWORD PTR $T7[rsp], 256	; 00000100H
  00209	73 02		 jae	 SHORT $LN507@cckd_chkds
  0020b	eb 05		 jmp	 SHORT $LN508@cckd_chkds
$LN507@cckd_chkds:
  0020d	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN508@cckd_chkds:
  00212	48 8b 84 24 48
	04 00 00	 mov	 rax, QWORD PTR $T7[rsp]
  0021a	c6 84 04 20 20
	00 00 00	 mov	 BYTE PTR compmask$[rsp+rax], 0

; 1092 : #if defined( HAVE_ZLIB )
; 1093 :     compmask[CCKD_COMPRESS_ZLIB] = 0;
; 1094 : #else
; 1095 :     compmask[CCKD_COMPRESS_ZLIB] = 1;

  00222	b8 01 00 00 00	 mov	 eax, 1
  00227	48 6b c0 01	 imul	 rax, rax, 1
  0022b	c6 84 04 20 20
	00 00 01	 mov	 BYTE PTR compmask$[rsp+rax], 1

; 1096 : #endif
; 1097 : #if defined( CCKD_BZIP2 )
; 1098 :     compmask[CCKD_COMPRESS_BZIP2] = 0;
; 1099 : #else
; 1100 :     compmask[CCKD_COMPRESS_BZIP2] = 2;

  00233	b8 01 00 00 00	 mov	 eax, 1
  00238	48 6b c0 02	 imul	 rax, rax, 2
  0023c	c6 84 04 20 20
	00 00 02	 mov	 BYTE PTR compmask$[rsp+rax], 2

; 1101 : #endif
; 1102 : 
; 1103 :     /*---------------------------------------------------------------
; 1104 :      * Header checks
; 1105 :      *---------------------------------------------------------------*/
; 1106 : 
; 1107 :     /* Read the device header */
; 1108 :     off = 0;

  00244	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR off$[rsp], 0

; 1109 :     if ( lseek (fd, off, SEEK_SET) < 0)

  00250	45 33 c0	 xor	 r8d, r8d
  00253	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0025b	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00262	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00268	48 85 c0	 test	 rax, rax
  0026b	7d 05		 jge	 SHORT $LN148@cckd_chkds

; 1110 :         goto cdsk_lseek_error;

  0026d	e9 52 a2 00 00	 jmp	 $cdsk_lseek_error$827
$LN148@cckd_chkds:

; 1111 :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00272	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00279	83 38 00	 cmp	 DWORD PTR [rax], 0
  0027c	74 43		 je	 SHORT $LN149@cckd_chkds
  0027e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00284	33 d2		 xor	 edx, edx
  00286	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0028d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00293	48 89 84 24 a8
	04 00 00	 mov	 QWORD PTR tv137[rsp], rax
  0029b	b9 02 00 00 00	 mov	 ecx, 2
  002a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002a6	48 8b 8c 24 a8
	04 00 00	 mov	 rcx, QWORD PTR tv137[rsp]
  002ae	4c 8b c1	 mov	 r8, rcx
  002b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169981
  002b8	48 8b c8	 mov	 rcx, rax
  002bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN149@cckd_chkds:

; 1112 :     len = CKD_DEVHDR_SIZE;

  002c1	c7 84 24 a4 00
	00 00 00 02 00
	00		 mov	 DWORD PTR len$[rsp], 512 ; 00000200H

; 1113 :     if ((rc = read (fd, &devhdr, len)) != len)

  002cc	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  002d4	48 8d 94 24 a0
	09 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  002dc	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  002e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  002e9	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  002f0	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  002f7	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  002fe	74 05		 je	 SHORT $LN150@cckd_chkds

; 1114 :         goto cdsk_read_error;

  00300	e9 0f a4 00 00	 jmp	 $cdsk_read_error$828
$LN150@cckd_chkds:

; 1115 : 
; 1116 :     /* Device header checks */
; 1117 :     dev->cckd64 = 0;

  00305	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0030d	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  00314	24 fe		 and	 al, 254			; 000000feH
  00316	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0031e	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 1118 :     imgtyp = dh_devid_typ( devhdr.dh_devid );

  00324	48 8d 8c 24 a0
	09 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  0032c	e8 00 00 00 00	 call	 dh_devid_typ
  00331	89 84 24 7c 01
	00 00		 mov	 DWORD PTR imgtyp$[rsp], eax

; 1119 : 
; 1120 :          if (imgtyp & CKD32_CMP_OR_SF_TYP) ckddasd = 1;

  00338	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR imgtyp$[rsp]
  0033f	25 00 00 00 60	 and	 eax, 1610612736		; 60000000H
  00344	85 c0		 test	 eax, eax
  00346	74 10		 je	 SHORT $LN151@cckd_chkds
  00348	c7 84 24 74 01
	00 00 01 00 00
	00		 mov	 DWORD PTR ckddasd$[rsp], 1
  00353	e9 0e 02 00 00	 jmp	 $LN152@cckd_chkds
$LN151@cckd_chkds:

; 1121 :     else if (imgtyp & FBA32_CMP_OR_SF_TYP) fbadasd = 1;

  00358	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR imgtyp$[rsp]
  0035f	25 00 60 00 00	 and	 eax, 24576		; 00006000H
  00364	85 c0		 test	 eax, eax
  00366	74 10		 je	 SHORT $LN153@cckd_chkds
  00368	c7 84 24 ec 02
	00 00 01 00 00
	00		 mov	 DWORD PTR fbadasd$[rsp], 1
  00373	e9 ee 01 00 00	 jmp	 $LN154@cckd_chkds
$LN153@cckd_chkds:

; 1122 :     else
; 1123 :     {
; 1124 :         if (imgtyp & ANY64_CMP_OR_SF_TYP)

  00378	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR imgtyp$[rsp]
  0037f	25 60 00 60 00	 and	 eax, 6291552		; 00600060H
  00384	85 c0		 test	 eax, eax
  00386	74 38		 je	 SHORT $LN155@cckd_chkds

; 1125 :         {
; 1126 :             dev->cckd64 = 1;

  00388	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00390	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  00397	0c 01		 or	 al, 1
  00399	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003a1	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 1127 :             return cckd64_chkdsk( dev, level );

  003a7	8b 94 24 d8 21
	04 00		 mov	 edx, DWORD PTR level$[rsp]
  003ae	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003b6	e8 00 00 00 00	 call	 cckd64_chkdsk
  003bb	e9 25 ad 00 00	 jmp	 $LN1@cckd_chkds
$LN155@cckd_chkds:

; 1128 :         }
; 1129 : 
; 1130 :         // "%1d:%04X CCKD file %s: not a compressed dasd file"
; 1131 :         if (dev->batch)

  003c0	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  003c8	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  003ce	c1 e8 0a	 shr	 eax, 10
  003d1	83 e0 01	 and	 eax, 1
  003d4	85 c0		 test	 eax, eax
  003d6	0f 84 ad 00 00
	00		 je	 $LN156@cckd_chkds

; 1132 :             FWRMSG( stdout, HHC00356, "E", SSID_TO_LCSS( dev->ssid ),

  003dc	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  003e4	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  003ea	48 89 84 24 b0
	04 00 00	 mov	 QWORD PTR tv203[rsp], rax
  003f2	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003fa	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  003fe	89 8c 24 18 04
	00 00		 mov	 DWORD PTR tv206[rsp], ecx
  00405	48 8b 94 24 d0
	21 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0040d	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  00411	d1 fa		 sar	 edx, 1
  00413	89 94 24 1c 04
	00 00		 mov	 DWORD PTR tv210[rsp], edx
  0041a	b9 01 00 00 00	 mov	 ecx, 1
  0041f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00425	48 8b 8c 24 b0
	04 00 00	 mov	 rcx, QWORD PTR tv203[rsp]
  0042d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00432	8b 8c 24 18 04
	00 00		 mov	 ecx, DWORD PTR tv206[rsp]
  00439	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0043d	8b 8c 24 1c 04
	00 00		 mov	 ecx, DWORD PTR tv210[rsp]
  00444	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00448	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169990
  0044f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00454	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169991
  0045b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00460	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00465	41 b9 03 00 00
	00		 mov	 r9d, 3
  0046b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169992
  00472	ba 6d 04 00 00	 mov	 edx, 1133		; 0000046dH
  00477	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169993
  0047e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00484	e9 d8 00 00 00	 jmp	 $LN157@cckd_chkds
$LN156@cckd_chkds:

; 1133 :                 dev->devnum, dev->filename );
; 1134 :         else
; 1135 :             WRMSG( HHC00356, "E", LCSS_DEVNUM, dev->filename );

  00489	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00492	74 15		 je	 SHORT $LN509@cckd_chkds
  00494	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0049c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  004a0	89 84 24 d4 03
	00 00		 mov	 DWORD PTR tv226[rsp], eax
  004a7	eb 0b		 jmp	 SHORT $LN510@cckd_chkds
$LN509@cckd_chkds:
  004a9	c7 84 24 d4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv226[rsp], 0
$LN510@cckd_chkds:
  004b4	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  004bd	74 17		 je	 SHORT $LN511@cckd_chkds
  004bf	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  004c7	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  004cb	d1 f8		 sar	 eax, 1
  004cd	89 84 24 d8 03
	00 00		 mov	 DWORD PTR tv232[rsp], eax
  004d4	eb 0b		 jmp	 SHORT $LN512@cckd_chkds
$LN511@cckd_chkds:
  004d6	c7 84 24 d8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv232[rsp], 0
$LN512@cckd_chkds:
  004e1	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  004e9	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  004ef	48 89 84 24 b8
	04 00 00	 mov	 QWORD PTR tv221[rsp], rax
  004f7	b9 01 00 00 00	 mov	 ecx, 1
  004fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00502	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR tv221[rsp]
  0050a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0050f	8b 8c 24 d4 03
	00 00		 mov	 ecx, DWORD PTR tv226[rsp]
  00516	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0051a	8b 8c 24 d8 03
	00 00		 mov	 ecx, DWORD PTR tv232[rsp]
  00521	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00525	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169994
  0052c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00531	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169995
  00538	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0053d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00542	41 b9 03 00 00
	00		 mov	 r9d, 3
  00548	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169996
  0054f	ba 6f 04 00 00	 mov	 edx, 1135		; 0000046fH
  00554	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169997
  0055b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN157@cckd_chkds:

; 1136 :         goto cdsk_error;

  00561	e9 6f ab 00 00	 jmp	 $cdsk_error$829
$LN154@cckd_chkds:
$LN152@cckd_chkds:

; 1137 :     }
; 1138 : 
; 1139 :     if (imgtyp & ANY32_SF_TYP)

  00566	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR imgtyp$[rsp]
  0056d	25 00 20 00 20	 and	 eax, 536879104		; 20002000H
  00572	85 c0		 test	 eax, eax
  00574	74 0b		 je	 SHORT $LN158@cckd_chkds

; 1140 :         shadow = 0xff;

  00576	c7 84 24 78 01
	00 00 ff 00 00
	00		 mov	 DWORD PTR shadow$[rsp], 255 ; 000000ffH
$LN158@cckd_chkds:

; 1141 : 
; 1142 :     trktyp = ckddasd ? SPCTAB_TRK : SPCTAB_BLKGRP;

  00581	83 bc 24 74 01
	00 00 00	 cmp	 DWORD PTR ckddasd$[rsp], 0
  00589	74 0d		 je	 SHORT $LN513@cckd_chkds
  0058b	c7 84 24 dc 03
	00 00 05 00 00
	00		 mov	 DWORD PTR tv246[rsp], 5
  00596	eb 0b		 jmp	 SHORT $LN514@cckd_chkds
$LN513@cckd_chkds:
  00598	c7 84 24 dc 03
	00 00 06 00 00
	00		 mov	 DWORD PTR tv246[rsp], 6
$LN514@cckd_chkds:
  005a3	8b 84 24 dc 03
	00 00		 mov	 eax, DWORD PTR tv246[rsp]
  005aa	89 84 24 d0 00
	00 00		 mov	 DWORD PTR trktyp$[rsp], eax

; 1143 : 
; 1144 :     /* Read the cckd device header */
; 1145 :     off = CCKD_DEVHDR_POS;

  005b1	48 c7 84 24 c0
	00 00 00 00 02
	00 00		 mov	 QWORD PTR off$[rsp], 512 ; 00000200H

; 1146 :     if ( lseek (fd, off, SEEK_SET) < 0)

  005bd	45 33 c0	 xor	 r8d, r8d
  005c0	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  005c8	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  005cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  005d5	48 85 c0	 test	 rax, rax
  005d8	7d 05		 jge	 SHORT $LN159@cckd_chkds

; 1147 :         goto cdsk_lseek_error;

  005da	e9 e5 9e 00 00	 jmp	 $cdsk_lseek_error$827
$LN159@cckd_chkds:

; 1148 :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  005df	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  005e6	83 38 00	 cmp	 DWORD PTR [rax], 0
  005e9	74 43		 je	 SHORT $LN160@cckd_chkds
  005eb	41 b8 01 00 00
	00		 mov	 r8d, 1
  005f1	33 d2		 xor	 edx, edx
  005f3	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  005fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00600	48 89 84 24 c0
	04 00 00	 mov	 QWORD PTR tv254[rsp], rax
  00608	b9 02 00 00 00	 mov	 ecx, 2
  0060d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00613	48 8b 8c 24 c0
	04 00 00	 mov	 rcx, QWORD PTR tv254[rsp]
  0061b	4c 8b c1	 mov	 r8, rcx
  0061e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170001
  00625	48 8b c8	 mov	 rcx, rax
  00628	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN160@cckd_chkds:

; 1149 :     len = CCKD_DEVHDR_SIZE;

  0062e	c7 84 24 a4 00
	00 00 00 02 00
	00		 mov	 DWORD PTR len$[rsp], 512 ; 00000200H

; 1150 :     if ((rc = read (fd, &cdevhdr, len)) != len)

  00639	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  00641	48 8d 94 24 a0
	0b 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  00649	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00650	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00656	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  0065d	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  00664	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  0066b	74 05		 je	 SHORT $LN161@cckd_chkds

; 1151 :         goto cdsk_read_error;

  0066d	e9 a2 a0 00 00	 jmp	 $cdsk_read_error$828
$LN161@cckd_chkds:

; 1152 : 
; 1153 :     /* Endianess check */
; 1154 :     if ((cdevhdr.cdh_opts & CCKD_OPT_BIGEND) != cckd_def_opt_bigend())

  00672	0f b6 84 24 a3
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  0067a	83 e0 02	 and	 eax, 2
  0067d	89 84 24 20 04
	00 00		 mov	 DWORD PTR tv268[rsp], eax
  00684	e8 00 00 00 00	 call	 cckd_def_opt_bigend
  00689	8b 8c 24 20 04
	00 00		 mov	 ecx, DWORD PTR tv268[rsp]
  00690	3b c8		 cmp	 ecx, eax
  00692	0f 84 a7 02 00
	00		 je	 $LN162@cckd_chkds

; 1155 :     {
; 1156 :         if (!ro)

  00698	83 bc 24 54 01
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  006a0	0f 85 81 02 00
	00		 jne	 $LN163@cckd_chkds

; 1157 :         {
; 1158 :             if(dev->batch)

  006a6	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  006ae	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  006b4	c1 e8 0a	 shr	 eax, 10
  006b7	83 e0 01	 and	 eax, 1
  006ba	85 c0		 test	 eax, eax
  006bc	0f 84 19 01 00
	00		 je	 $LN165@cckd_chkds

; 1159 :                 // "%1d:%04X CCKD file %s: converting to %s"
; 1160 :                 FWRMSG( stdout, HHC00357, "I", LCSS_DEVNUM, dev->filename,

  006c2	0f b6 84 24 a3
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  006ca	83 e0 02	 and	 eax, 2
  006cd	85 c0		 test	 eax, eax
  006cf	74 11		 je	 SHORT $LN515@cckd_chkds
  006d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170008
  006d8	48 89 84 24 50
	04 00 00	 mov	 QWORD PTR tv279[rsp], rax
  006e0	eb 0f		 jmp	 SHORT $LN516@cckd_chkds
$LN515@cckd_chkds:
  006e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170009
  006e9	48 89 84 24 50
	04 00 00	 mov	 QWORD PTR tv279[rsp], rax
$LN516@cckd_chkds:
  006f1	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  006fa	74 15		 je	 SHORT $LN517@cckd_chkds
  006fc	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00704	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00708	89 84 24 e0 03
	00 00		 mov	 DWORD PTR tv286[rsp], eax
  0070f	eb 0b		 jmp	 SHORT $LN518@cckd_chkds
$LN517@cckd_chkds:
  00711	c7 84 24 e0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv286[rsp], 0
$LN518@cckd_chkds:
  0071c	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00725	74 17		 je	 SHORT $LN519@cckd_chkds
  00727	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0072f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00733	d1 f8		 sar	 eax, 1
  00735	89 84 24 e4 03
	00 00		 mov	 DWORD PTR tv292[rsp], eax
  0073c	eb 0b		 jmp	 SHORT $LN520@cckd_chkds
$LN519@cckd_chkds:
  0073e	c7 84 24 e4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv292[rsp], 0
$LN520@cckd_chkds:
  00749	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00751	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00757	48 89 84 24 c8
	04 00 00	 mov	 QWORD PTR tv281[rsp], rax
  0075f	b9 01 00 00 00	 mov	 ecx, 1
  00764	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0076a	48 8b 8c 24 50
	04 00 00	 mov	 rcx, QWORD PTR tv279[rsp]
  00772	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00777	48 8b 8c 24 c8
	04 00 00	 mov	 rcx, QWORD PTR tv281[rsp]
  0077f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00784	8b 8c 24 e0 03
	00 00		 mov	 ecx, DWORD PTR tv286[rsp]
  0078b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0078f	8b 8c 24 e4 03
	00 00		 mov	 ecx, DWORD PTR tv292[rsp]
  00796	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0079a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170010
  007a1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170011
  007ad	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007b2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007b7	41 b9 03 00 00
	00		 mov	 r9d, 3
  007bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170012
  007c4	ba 8a 04 00 00	 mov	 edx, 1162		; 0000048aH
  007c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170013
  007d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  007d6	e9 14 01 00 00	 jmp	 $LN166@cckd_chkds
$LN165@cckd_chkds:

; 1161 :                         (cdevhdr.cdh_opts & CCKD_OPT_BIGEND) ?
; 1162 :                             "little-endian" : "big-endian" );
; 1163 :             else
; 1164 :                 // "%1d:%04X CCKD file %s: converting to %s"
; 1165 :                 WRMSG( HHC00357, "I", LCSS_DEVNUM, dev->filename,

  007db	0f b6 84 24 a3
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  007e3	83 e0 02	 and	 eax, 2
  007e6	85 c0		 test	 eax, eax
  007e8	74 11		 je	 SHORT $LN521@cckd_chkds
  007ea	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170014
  007f1	48 89 84 24 58
	04 00 00	 mov	 QWORD PTR tv306[rsp], rax
  007f9	eb 0f		 jmp	 SHORT $LN522@cckd_chkds
$LN521@cckd_chkds:
  007fb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170015
  00802	48 89 84 24 58
	04 00 00	 mov	 QWORD PTR tv306[rsp], rax
$LN522@cckd_chkds:
  0080a	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00813	74 15		 je	 SHORT $LN523@cckd_chkds
  00815	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0081d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00821	89 84 24 e8 03
	00 00		 mov	 DWORD PTR tv313[rsp], eax
  00828	eb 0b		 jmp	 SHORT $LN524@cckd_chkds
$LN523@cckd_chkds:
  0082a	c7 84 24 e8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv313[rsp], 0
$LN524@cckd_chkds:
  00835	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0083e	74 17		 je	 SHORT $LN525@cckd_chkds
  00840	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00848	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0084c	d1 f8		 sar	 eax, 1
  0084e	89 84 24 ec 03
	00 00		 mov	 DWORD PTR tv319[rsp], eax
  00855	eb 0b		 jmp	 SHORT $LN526@cckd_chkds
$LN525@cckd_chkds:
  00857	c7 84 24 ec 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv319[rsp], 0
$LN526@cckd_chkds:
  00862	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0086a	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00870	48 89 84 24 d0
	04 00 00	 mov	 QWORD PTR tv308[rsp], rax
  00878	b9 01 00 00 00	 mov	 ecx, 1
  0087d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00883	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR tv306[rsp]
  0088b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00890	48 8b 8c 24 d0
	04 00 00	 mov	 rcx, QWORD PTR tv308[rsp]
  00898	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0089d	8b 8c 24 e8 03
	00 00		 mov	 ecx, DWORD PTR tv313[rsp]
  008a4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  008a8	8b 8c 24 ec 03
	00 00		 mov	 ecx, DWORD PTR tv319[rsp]
  008af	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  008b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170016
  008ba	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170017
  008c6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008cb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008d0	41 b9 03 00 00
	00		 mov	 r9d, 3
  008d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170018
  008dd	ba 8f 04 00 00	 mov	 edx, 1167		; 0000048fH
  008e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170019
  008e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN166@cckd_chkds:

; 1166 :                        (cdevhdr.cdh_opts & CCKD_OPT_BIGEND) ?
; 1167 :                         "little-endian" : "big-endian" );
; 1168 : 
; 1169 :             if (cckd_swapend (dev) < 0)

  008ef	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  008f7	e8 00 00 00 00	 call	 cckd_swapend
  008fc	85 c0		 test	 eax, eax
  008fe	7d 05		 jge	 SHORT $LN167@cckd_chkds

; 1170 :                 goto cdsk_error;

  00900	e9 d0 a7 00 00	 jmp	 $cdsk_error$829
$LN167@cckd_chkds:

; 1171 : 
; 1172 :             if (level < 0)

  00905	83 bc 24 d8 21
	04 00 00	 cmp	 DWORD PTR level$[rsp], 0
  0090d	7d 0b		 jge	 SHORT $LN168@cckd_chkds

; 1173 :                 level = 0;

  0090f	c7 84 24 d8 21
	04 00 00 00 00
	00		 mov	 DWORD PTR level$[rsp], 0
$LN168@cckd_chkds:

; 1174 : 
; 1175 :             swapend = 0;

  0091a	c7 84 24 48 01
	00 00 00 00 00
	00		 mov	 DWORD PTR swapend$[rsp], 0

; 1176 :         }

  00925	eb 0b		 jmp	 SHORT $LN164@cckd_chkds
$LN163@cckd_chkds:

; 1177 :         else
; 1178 :             swapend = 1;

  00927	c7 84 24 48 01
	00 00 01 00 00
	00		 mov	 DWORD PTR swapend$[rsp], 1
$LN164@cckd_chkds:

; 1179 : 
; 1180 :         cckd_swapend_chdr (&cdevhdr);

  00932	48 8d 8c 24 a0
	0b 00 00	 lea	 rcx, QWORD PTR cdevhdr$[rsp]
  0093a	e8 00 00 00 00	 call	 cckd_swapend_chdr
$LN162@cckd_chkds:

; 1181 :     }
; 1182 : 
; 1183 :     /* ckd checks */
; 1184 :     if (ckddasd)

  0093f	83 bc 24 74 01
	00 00 00	 cmp	 DWORD PTR ckddasd$[rsp], 0
  00947	0f 84 0b 08 00
	00		 je	 $LN169@cckd_chkds

; 1185 :     {
; 1186 :         CKDDEV *ckd;
; 1187 : 
; 1188 :         FETCH_LE_FW( heads,  devhdr.dh_heads   );

  0094d	48 8d 8c 24 a8
	09 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp+8]
  00955	e8 00 00 00 00	 call	 fetch_fw_noswap
  0095a	8b c8		 mov	 ecx, eax
  0095c	e8 00 00 00 00	 call	 _byteswap_ulong
  00961	8b c8		 mov	 ecx, eax
  00963	e8 00 00 00 00	 call	 _byteswap_ulong
  00968	89 84 24 cc 00
	00 00		 mov	 DWORD PTR heads$[rsp], eax

; 1189 :         FETCH_LE_FW( cyls,  cdevhdr.cdh_cyls   );

  0096f	48 8d 8c 24 c8
	0b 00 00	 lea	 rcx, QWORD PTR cdevhdr$[rsp+40]
  00977	e8 00 00 00 00	 call	 fetch_fw_noswap
  0097c	8b c8		 mov	 ecx, eax
  0097e	e8 00 00 00 00	 call	 _byteswap_ulong
  00983	8b c8		 mov	 ecx, eax
  00985	e8 00 00 00 00	 call	 _byteswap_ulong
  0098a	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cyls$[rsp], eax

; 1190 :         FETCH_LE_FW( trksz,  devhdr.dh_trksize );

  00991	48 8d 8c 24 ac
	09 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp+12]
  00999	e8 00 00 00 00	 call	 fetch_fw_noswap
  0099e	8b c8		 mov	 ecx, eax
  009a0	e8 00 00 00 00	 call	 _byteswap_ulong
  009a5	8b c8		 mov	 ecx, eax
  009a7	e8 00 00 00 00	 call	 _byteswap_ulong
  009ac	89 84 24 10 01
	00 00		 mov	 DWORD PTR trksz$[rsp], eax

; 1191 : 
; 1192 :         trks = heads * cyls;

  009b3	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR heads$[rsp]
  009ba	0f af 84 24 2c
	01 00 00	 imul	 eax, DWORD PTR cyls$[rsp]
  009c2	89 84 24 f4 00
	00 00		 mov	 DWORD PTR trks$[rsp], eax

; 1193 : 
; 1194 :         /* ckd dasd lookup */
; 1195 :         ckd = dasd_lookup (DASD_CKDDEV, NULL, devhdr.dh_devtyp, 0);

  009c9	0f b6 84 24 b0
	09 00 00	 movzx	 eax, BYTE PTR devhdr$[rsp+16]
  009d1	45 33 c9	 xor	 r9d, r9d
  009d4	44 8b c0	 mov	 r8d, eax
  009d7	33 d2		 xor	 edx, edx
  009d9	b9 01 00 00 00	 mov	 ecx, 1
  009de	e8 00 00 00 00	 call	 dasd_lookup
  009e3	48 89 84 24 f0
	03 00 00	 mov	 QWORD PTR ckd$6[rsp], rax

; 1196 :         if (ckd == NULL)

  009eb	48 83 bc 24 f0
	03 00 00 00	 cmp	 QWORD PTR ckd$6[rsp], 0
  009f4	0f 85 22 02 00
	00		 jne	 $LN171@cckd_chkds

; 1197 :         {
; 1198 :             if(dev->batch)

  009fa	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a02	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00a08	c1 e8 0a	 shr	 eax, 10
  00a0b	83 e0 01	 and	 eax, 1
  00a0e	85 c0		 test	 eax, eax
  00a10	0f 84 03 01 00
	00		 je	 $LN172@cckd_chkds

; 1199 :                 // "%1d:%04X CCKD file %s: dasd lookup error type %02X cylinders %d"
; 1200 :                 FWRMSG( stdout, HHC00361, "E", LCSS_DEVNUM, dev->filename,

  00a16	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00a1f	74 15		 je	 SHORT $LN527@cckd_chkds
  00a21	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a29	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00a2d	89 84 24 84 01
	00 00		 mov	 DWORD PTR tv374[rsp], eax
  00a34	eb 0b		 jmp	 SHORT $LN528@cckd_chkds
$LN527@cckd_chkds:
  00a36	c7 84 24 84 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv374[rsp], 0
$LN528@cckd_chkds:
  00a41	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00a4a	74 17		 je	 SHORT $LN529@cckd_chkds
  00a4c	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a54	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00a58	d1 f8		 sar	 eax, 1
  00a5a	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv380[rsp], eax
  00a61	eb 0b		 jmp	 SHORT $LN530@cckd_chkds
$LN529@cckd_chkds:
  00a63	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv380[rsp], 0
$LN530@cckd_chkds:
  00a6e	0f b6 84 24 b0
	09 00 00	 movzx	 eax, BYTE PTR devhdr$[rsp+16]
  00a76	89 84 24 24 04
	00 00		 mov	 DWORD PTR tv367[rsp], eax
  00a7d	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00a85	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00a8c	48 89 8c 24 d8
	04 00 00	 mov	 QWORD PTR tv369[rsp], rcx
  00a94	b9 01 00 00 00	 mov	 ecx, 1
  00a99	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a9f	8b 8c 24 2c 01
	00 00		 mov	 ecx, DWORD PTR cyls$[rsp]
  00aa6	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00aaa	8b 8c 24 24 04
	00 00		 mov	 ecx, DWORD PTR tv367[rsp]
  00ab1	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00ab5	48 8b 8c 24 d8
	04 00 00	 mov	 rcx, QWORD PTR tv369[rsp]
  00abd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00ac2	8b 8c 24 84 01
	00 00		 mov	 ecx, DWORD PTR tv374[rsp]
  00ac9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00acd	8b 8c 24 88 01
	00 00		 mov	 ecx, DWORD PTR tv380[rsp]
  00ad4	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00ad8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170027
  00adf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ae4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170028
  00aeb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00af0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00af5	41 b9 03 00 00
	00		 mov	 r9d, 3
  00afb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170029
  00b02	ba b1 04 00 00	 mov	 edx, 1201		; 000004b1H
  00b07	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170030
  00b0e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00b14	e9 fe 00 00 00	 jmp	 $LN173@cckd_chkds
$LN172@cckd_chkds:

; 1201 :                         devhdr.dh_devtyp, cyls);
; 1202 :             else
; 1203 :                 // "%1d:%04X CCKD file %s: dasd lookup error type %02X cylinders %d"
; 1204 :                 WRMSG( HHC00361, "E", LCSS_DEVNUM, dev->filename,

  00b19	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00b22	74 15		 je	 SHORT $LN531@cckd_chkds
  00b24	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b2c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00b30	89 84 24 8c 01
	00 00		 mov	 DWORD PTR tv399[rsp], eax
  00b37	eb 0b		 jmp	 SHORT $LN532@cckd_chkds
$LN531@cckd_chkds:
  00b39	c7 84 24 8c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv399[rsp], 0
$LN532@cckd_chkds:
  00b44	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00b4d	74 17		 je	 SHORT $LN533@cckd_chkds
  00b4f	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b57	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00b5b	d1 f8		 sar	 eax, 1
  00b5d	89 84 24 90 01
	00 00		 mov	 DWORD PTR tv405[rsp], eax
  00b64	eb 0b		 jmp	 SHORT $LN534@cckd_chkds
$LN533@cckd_chkds:
  00b66	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv405[rsp], 0
$LN534@cckd_chkds:
  00b71	0f b6 84 24 b0
	09 00 00	 movzx	 eax, BYTE PTR devhdr$[rsp+16]
  00b79	89 84 24 28 04
	00 00		 mov	 DWORD PTR tv392[rsp], eax
  00b80	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b88	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00b8f	48 89 8c 24 e0
	04 00 00	 mov	 QWORD PTR tv394[rsp], rcx
  00b97	b9 01 00 00 00	 mov	 ecx, 1
  00b9c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ba2	8b 8c 24 2c 01
	00 00		 mov	 ecx, DWORD PTR cyls$[rsp]
  00ba9	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00bad	8b 8c 24 28 04
	00 00		 mov	 ecx, DWORD PTR tv392[rsp]
  00bb4	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00bb8	48 8b 8c 24 e0
	04 00 00	 mov	 rcx, QWORD PTR tv394[rsp]
  00bc0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00bc5	8b 8c 24 8c 01
	00 00		 mov	 ecx, DWORD PTR tv399[rsp]
  00bcc	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00bd0	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR tv405[rsp]
  00bd7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00bdb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170031
  00be2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00be7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170032
  00bee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00bf3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bf8	41 b9 03 00 00
	00		 mov	 r9d, 3
  00bfe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170033
  00c05	ba b5 04 00 00	 mov	 edx, 1205		; 000004b5H
  00c0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170034
  00c11	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN173@cckd_chkds:

; 1205 :                       devhdr.dh_devtyp, cyls);
; 1206 :              goto cdsk_error;

  00c17	e9 b9 a4 00 00	 jmp	 $cdsk_error$829
$LN171@cckd_chkds:

; 1207 :         }
; 1208 : 
; 1209 :         /* track size check */
; 1210 :         n = CKD_TRKHDR_SIZE

  00c1c	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR ckd$6[rsp]
  00c24	0f b7 40 16	 movzx	 eax, WORD PTR [rax+22]
  00c28	48 83 c0 25	 add	 rax, 37			; 00000025H
  00c2c	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 1211 :           + CKD_RECHDR_SIZE + CKD_R0_DLEN
; 1212 :           + CKD_RECHDR_SIZE + ckd->r1       /* max data length */
; 1213 :           + CKD_ENDTRK_SIZE;
; 1214 :         n = ((n+511)/512)*512;

  00c33	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  00c3a	05 ff 01 00 00	 add	 eax, 511		; 000001ffH
  00c3f	99		 cdq
  00c40	81 e2 ff 01 00
	00		 and	 edx, 511		; 000001ffH
  00c46	03 c2		 add	 eax, edx
  00c48	c1 f8 09	 sar	 eax, 9
  00c4b	69 c0 00 02 00
	00		 imul	 eax, eax, 512		; 00000200H
  00c51	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 1215 :         if ((int)trksz != n)

  00c58	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  00c5f	39 84 24 10 01
	00 00		 cmp	 DWORD PTR trksz$[rsp], eax
  00c66	0f 84 62 02 00
	00		 je	 $LN174@cckd_chkds

; 1216 :         {
; 1217 :             if(dev->batch)

  00c6c	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c74	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00c7a	c1 e8 0a	 shr	 eax, 10
  00c7d	83 e0 01	 and	 eax, 1
  00c80	85 c0		 test	 eax, eax
  00c82	0f 84 23 01 00
	00		 je	 $LN175@cckd_chkds

; 1218 :                 // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1219 :                 FWRMSG( stdout, HHC00362, "E", LCSS_DEVNUM, dev->filename,

  00c88	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00c91	74 15		 je	 SHORT $LN535@cckd_chkds
  00c93	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c9b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00c9f	89 84 24 94 01
	00 00		 mov	 DWORD PTR tv471[rsp], eax
  00ca6	eb 0b		 jmp	 SHORT $LN536@cckd_chkds
$LN535@cckd_chkds:
  00ca8	c7 84 24 94 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv471[rsp], 0
$LN536@cckd_chkds:
  00cb3	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00cbc	74 17		 je	 SHORT $LN537@cckd_chkds
  00cbe	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00cc6	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00cca	d1 f8		 sar	 eax, 1
  00ccc	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv477[rsp], eax
  00cd3	eb 0b		 jmp	 SHORT $LN538@cckd_chkds
$LN537@cckd_chkds:
  00cd5	c7 84 24 98 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv477[rsp], 0
$LN538@cckd_chkds:
  00ce0	48 63 84 24 b4
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00ce8	48 89 84 24 e8
	04 00 00	 mov	 QWORD PTR tv461[rsp], rax
  00cf0	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR trksz$[rsp]
  00cf7	48 89 8c 24 f0
	04 00 00	 mov	 QWORD PTR tv463[rsp], rcx
  00cff	48 8b 94 24 d0
	21 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00d07	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  00d0e	48 89 94 24 f8
	04 00 00	 mov	 QWORD PTR tv466[rsp], rdx
  00d16	b9 01 00 00 00	 mov	 ecx, 1
  00d1b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d21	48 8b 8c 24 e8
	04 00 00	 mov	 rcx, QWORD PTR tv461[rsp]
  00d29	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00d2e	48 8b 8c 24 f0
	04 00 00	 mov	 rcx, QWORD PTR tv463[rsp]
  00d36	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00d3b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170038
  00d42	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00d47	48 8b 8c 24 f8
	04 00 00	 mov	 rcx, QWORD PTR tv466[rsp]
  00d4f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00d54	8b 8c 24 94 01
	00 00		 mov	 ecx, DWORD PTR tv471[rsp]
  00d5b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00d5f	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR tv477[rsp]
  00d66	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00d6a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170039
  00d71	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d76	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170040
  00d7d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d82	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00d87	41 b9 03 00 00
	00		 mov	 r9d, 3
  00d8d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170041
  00d94	ba c4 04 00 00	 mov	 edx, 1220		; 000004c4H
  00d99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170042
  00da0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00da6	e9 1e 01 00 00	 jmp	 $LN176@cckd_chkds
$LN175@cckd_chkds:

; 1220 :                         "track size", (S64)trksz, (S64)n );
; 1221 :             else
; 1222 :                 // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1223 :                 WRMSG( HHC00362, "E", LCSS_DEVNUM, dev->filename,

  00dab	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00db4	74 15		 je	 SHORT $LN539@cckd_chkds
  00db6	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00dbe	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00dc2	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv498[rsp], eax
  00dc9	eb 0b		 jmp	 SHORT $LN540@cckd_chkds
$LN539@cckd_chkds:
  00dcb	c7 84 24 9c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv498[rsp], 0
$LN540@cckd_chkds:
  00dd6	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00ddf	74 17		 je	 SHORT $LN541@cckd_chkds
  00de1	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00de9	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00ded	d1 f8		 sar	 eax, 1
  00def	89 84 24 a0 01
	00 00		 mov	 DWORD PTR tv504[rsp], eax
  00df6	eb 0b		 jmp	 SHORT $LN542@cckd_chkds
$LN541@cckd_chkds:
  00df8	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv504[rsp], 0
$LN542@cckd_chkds:
  00e03	48 63 84 24 b4
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  00e0b	48 89 84 24 00
	05 00 00	 mov	 QWORD PTR tv488[rsp], rax
  00e13	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR trksz$[rsp]
  00e1a	48 89 8c 24 08
	05 00 00	 mov	 QWORD PTR tv490[rsp], rcx
  00e22	48 8b 94 24 d0
	21 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00e2a	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  00e31	48 89 94 24 10
	05 00 00	 mov	 QWORD PTR tv493[rsp], rdx
  00e39	b9 01 00 00 00	 mov	 ecx, 1
  00e3e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e44	48 8b 8c 24 00
	05 00 00	 mov	 rcx, QWORD PTR tv488[rsp]
  00e4c	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00e51	48 8b 8c 24 08
	05 00 00	 mov	 rcx, QWORD PTR tv490[rsp]
  00e59	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00e5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170043
  00e65	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00e6a	48 8b 8c 24 10
	05 00 00	 mov	 rcx, QWORD PTR tv493[rsp]
  00e72	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00e77	8b 8c 24 9c 01
	00 00		 mov	 ecx, DWORD PTR tv498[rsp]
  00e7e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00e82	8b 8c 24 a0 01
	00 00		 mov	 ecx, DWORD PTR tv504[rsp]
  00e89	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00e8d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170044
  00e94	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170045
  00ea0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ea5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00eaa	41 b9 03 00 00
	00		 mov	 r9d, 3
  00eb0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170046
  00eb7	ba c8 04 00 00	 mov	 edx, 1224		; 000004c8H
  00ebc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170047
  00ec3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN176@cckd_chkds:

; 1224 :                       "track size", (S64)trksz, (S64)n );
; 1225 :              goto cdsk_error;

  00ec9	e9 07 a2 00 00	 jmp	 $cdsk_error$829
$LN174@cckd_chkds:

; 1226 :         }
; 1227 : 
; 1228 :         /* number of heads check */
; 1229 :         if (heads != ckd->heads)

  00ece	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR ckd$6[rsp]
  00ed6	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  00eda	39 84 24 cc 00
	00 00		 cmp	 DWORD PTR heads$[rsp], eax
  00ee1	0f 84 6c 02 00
	00		 je	 $LN177@cckd_chkds

; 1230 :         {
; 1231 :             if(dev->batch)

  00ee7	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00eef	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00ef5	c1 e8 0a	 shr	 eax, 10
  00ef8	83 e0 01	 and	 eax, 1
  00efb	85 c0		 test	 eax, eax
  00efd	0f 84 28 01 00
	00		 je	 $LN178@cckd_chkds

; 1232 :                 // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1233 :                 FWRMSG( stdout, HHC00362, "E", LCSS_DEVNUM, dev->filename,

  00f03	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00f0c	74 15		 je	 SHORT $LN543@cckd_chkds
  00f0e	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f16	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00f1a	89 84 24 a4 01
	00 00		 mov	 DWORD PTR tv533[rsp], eax
  00f21	eb 0b		 jmp	 SHORT $LN544@cckd_chkds
$LN543@cckd_chkds:
  00f23	c7 84 24 a4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv533[rsp], 0
$LN544@cckd_chkds:
  00f2e	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00f37	74 17		 je	 SHORT $LN545@cckd_chkds
  00f39	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f41	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00f45	d1 f8		 sar	 eax, 1
  00f47	89 84 24 a8 01
	00 00		 mov	 DWORD PTR tv539[rsp], eax
  00f4e	eb 0b		 jmp	 SHORT $LN546@cckd_chkds
$LN545@cckd_chkds:
  00f50	c7 84 24 a8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv539[rsp], 0
$LN546@cckd_chkds:
  00f5b	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR ckd$6[rsp]
  00f63	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  00f67	48 89 84 24 18
	05 00 00	 mov	 QWORD PTR tv523[rsp], rax
  00f6f	48 63 8c 24 cc
	00 00 00	 movsxd	 rcx, DWORD PTR heads$[rsp]
  00f77	48 89 8c 24 20
	05 00 00	 mov	 QWORD PTR tv525[rsp], rcx
  00f7f	48 8b 94 24 d0
	21 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00f87	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  00f8e	48 89 94 24 28
	05 00 00	 mov	 QWORD PTR tv528[rsp], rdx
  00f96	b9 01 00 00 00	 mov	 ecx, 1
  00f9b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00fa1	48 8b 8c 24 18
	05 00 00	 mov	 rcx, QWORD PTR tv523[rsp]
  00fa9	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00fae	48 8b 8c 24 20
	05 00 00	 mov	 rcx, QWORD PTR tv525[rsp]
  00fb6	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00fbb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170051
  00fc2	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00fc7	48 8b 8c 24 28
	05 00 00	 mov	 rcx, QWORD PTR tv528[rsp]
  00fcf	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00fd4	8b 8c 24 a4 01
	00 00		 mov	 ecx, DWORD PTR tv533[rsp]
  00fdb	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00fdf	8b 8c 24 a8 01
	00 00		 mov	 ecx, DWORD PTR tv539[rsp]
  00fe6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00fea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170052
  00ff1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00ff6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170053
  00ffd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01002	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01007	41 b9 03 00 00
	00		 mov	 r9d, 3
  0100d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170054
  01014	ba d2 04 00 00	 mov	 edx, 1234		; 000004d2H
  01019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170055
  01020	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01026	e9 23 01 00 00	 jmp	 $LN179@cckd_chkds
$LN178@cckd_chkds:

; 1234 :                         "number of heads", (S64)heads, (S64)ckd->heads );
; 1235 :             else
; 1236 :                 // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1237 :                 WRMSG( HHC00362, "E", LCSS_DEVNUM, dev->filename,

  0102b	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01034	74 15		 je	 SHORT $LN547@cckd_chkds
  01036	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0103e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01042	89 84 24 ac 01
	00 00		 mov	 DWORD PTR tv561[rsp], eax
  01049	eb 0b		 jmp	 SHORT $LN548@cckd_chkds
$LN547@cckd_chkds:
  0104b	c7 84 24 ac 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv561[rsp], 0
$LN548@cckd_chkds:
  01056	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0105f	74 17		 je	 SHORT $LN549@cckd_chkds
  01061	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01069	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0106d	d1 f8		 sar	 eax, 1
  0106f	89 84 24 b0 01
	00 00		 mov	 DWORD PTR tv567[rsp], eax
  01076	eb 0b		 jmp	 SHORT $LN550@cckd_chkds
$LN549@cckd_chkds:
  01078	c7 84 24 b0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv567[rsp], 0
$LN550@cckd_chkds:
  01083	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR ckd$6[rsp]
  0108b	0f b7 40 12	 movzx	 eax, WORD PTR [rax+18]
  0108f	48 89 84 24 30
	05 00 00	 mov	 QWORD PTR tv551[rsp], rax
  01097	48 63 8c 24 cc
	00 00 00	 movsxd	 rcx, DWORD PTR heads$[rsp]
  0109f	48 89 8c 24 38
	05 00 00	 mov	 QWORD PTR tv553[rsp], rcx
  010a7	48 8b 94 24 d0
	21 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  010af	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  010b6	48 89 94 24 40
	05 00 00	 mov	 QWORD PTR tv556[rsp], rdx
  010be	b9 01 00 00 00	 mov	 ecx, 1
  010c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  010c9	48 8b 8c 24 30
	05 00 00	 mov	 rcx, QWORD PTR tv551[rsp]
  010d1	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  010d6	48 8b 8c 24 38
	05 00 00	 mov	 rcx, QWORD PTR tv553[rsp]
  010de	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  010e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170056
  010ea	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  010ef	48 8b 8c 24 40
	05 00 00	 mov	 rcx, QWORD PTR tv556[rsp]
  010f7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  010fc	8b 8c 24 ac 01
	00 00		 mov	 ecx, DWORD PTR tv561[rsp]
  01103	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01107	8b 8c 24 b0 01
	00 00		 mov	 ecx, DWORD PTR tv567[rsp]
  0110e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170057
  01119	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0111e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170058
  01125	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0112a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0112f	41 b9 03 00 00
	00		 mov	 r9d, 3
  01135	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170059
  0113c	ba d6 04 00 00	 mov	 edx, 1238		; 000004d6H
  01141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170060
  01148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN179@cckd_chkds:

; 1238 :                       "number of heads", (S64)heads, (S64)ckd->heads );
; 1239 :              goto cdsk_error;

  0114e	e9 82 9f 00 00	 jmp	 $cdsk_error$829
$LN177@cckd_chkds:

; 1240 :         }
; 1241 :     } /* if (ckddasd) */

  01153	e9 ae 00 00 00	 jmp	 $LN170@cckd_chkds
$LN169@cckd_chkds:

; 1242 : 
; 1243 :     /* fba checks */
; 1244 :     else
; 1245 :     {
; 1246 :         /* Note: cyls & heads are setup for ckd type hdr checks */
; 1247 :         FETCH_LE_FW( blks, cdevhdr.cdh_cyls );

  01158	48 8d 8c 24 c8
	0b 00 00	 lea	 rcx, QWORD PTR cdevhdr$[rsp+40]
  01160	e8 00 00 00 00	 call	 fetch_fw_noswap
  01165	8b c8		 mov	 ecx, eax
  01167	e8 00 00 00 00	 call	 _byteswap_ulong
  0116c	8b c8		 mov	 ecx, eax
  0116e	e8 00 00 00 00	 call	 _byteswap_ulong
  01173	89 84 24 b4 01
	00 00		 mov	 DWORD PTR blks$[rsp], eax

; 1248 : 
; 1249 :         trks = blks / CFBA_BLKS_PER_GRP;

  0117a	8b 84 24 b4 01
	00 00		 mov	 eax, DWORD PTR blks$[rsp]
  01181	99		 cdq
  01182	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  01187	f7 f9		 idiv	 ecx
  01189	89 84 24 f4 00
	00 00		 mov	 DWORD PTR trks$[rsp], eax

; 1250 :         if (   blks % CFBA_BLKS_PER_GRP ) trks++;

  01190	8b 84 24 b4 01
	00 00		 mov	 eax, DWORD PTR blks$[rsp]
  01197	99		 cdq
  01198	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  0119d	f7 f9		 idiv	 ecx
  0119f	8b c2		 mov	 eax, edx
  011a1	85 c0		 test	 eax, eax
  011a3	74 10		 je	 SHORT $LN180@cckd_chkds
  011a5	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  011ac	ff c0		 inc	 eax
  011ae	89 84 24 f4 00
	00 00		 mov	 DWORD PTR trks$[rsp], eax
$LN180@cckd_chkds:

; 1251 : 
; 1252 :         trksz = CKD_TRKHDR_SIZE + CFBA_BLKGRP_SIZE;

  011b5	c7 84 24 10 01
	00 00 05 f0 00
	00		 mov	 DWORD PTR trksz$[rsp], 61445 ; 0000f005H

; 1253 :         heads = 65536;

  011c0	c7 84 24 cc 00
	00 00 00 00 01
	00		 mov	 DWORD PTR heads$[rsp], 65536 ; 00010000H

; 1254 : 
; 1255 :         cyls = trks / heads;

  011cb	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  011d2	99		 cdq
  011d3	f7 bc 24 cc 00
	00 00		 idiv	 DWORD PTR heads$[rsp]
  011da	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cyls$[rsp], eax

; 1256 :         if (   trks % heads) cyls++;

  011e1	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  011e8	99		 cdq
  011e9	f7 bc 24 cc 00
	00 00		 idiv	 DWORD PTR heads$[rsp]
  011f0	8b c2		 mov	 eax, edx
  011f2	85 c0		 test	 eax, eax
  011f4	74 10		 je	 SHORT $LN181@cckd_chkds
  011f6	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cyls$[rsp]
  011fd	ff c0		 inc	 eax
  011ff	89 84 24 2c 01
	00 00		 mov	 DWORD PTR cyls$[rsp], eax
$LN181@cckd_chkds:
$LN170@cckd_chkds:

; 1257 :     }
; 1258 : 
; 1259 :     /* fba variables */
; 1260 :     blkgrps = trks;

  01206	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  0120d	89 84 24 80 01
	00 00		 mov	 DWORD PTR blkgrps$[rsp], eax

; 1261 :     blkgrpsz = trksz;

  01214	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR trksz$[rsp]
  0121b	89 84 24 18 01
	00 00		 mov	 DWORD PTR blkgrpsz$[rsp], eax

; 1262 : 
; 1263 :     /* `num_L1tab' check */
; 1264 :     n = trks / 256;

  01222	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  01229	99		 cdq
  0122a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  01230	03 c2		 add	 eax, edx
  01232	c1 f8 08	 sar	 eax, 8
  01235	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 1265 :     if (trks % 256) n++;

  0123c	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  01243	99		 cdq
  01244	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0124a	03 c2		 add	 eax, edx
  0124c	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01251	2b c2		 sub	 eax, edx
  01253	85 c0		 test	 eax, eax
  01255	74 10		 je	 SHORT $LN182@cckd_chkds
  01257	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  0125e	ff c0		 inc	 eax
  01260	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax
$LN182@cckd_chkds:

; 1266 : 
; 1267 :     if (cdevhdr.num_L1tab != n && cdevhdr.num_L1tab != n + 1)

  01267	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  0126e	39 84 24 a4 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+4], eax
  01275	0f 84 7a 02 00
	00		 je	 $LN183@cckd_chkds
  0127b	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  01282	ff c0		 inc	 eax
  01284	39 84 24 a4 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+4], eax
  0128b	0f 84 64 02 00
	00		 je	 $LN183@cckd_chkds

; 1268 :     {
; 1269 :         if(dev->batch)

  01291	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01299	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0129f	c1 e8 0a	 shr	 eax, 10
  012a2	83 e0 01	 and	 eax, 1
  012a5	85 c0		 test	 eax, eax
  012a7	0f 84 24 01 00
	00		 je	 $LN184@cckd_chkds

; 1270 :             // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1271 :             FWRMSG( stdout, HHC00362, "E", LCSS_DEVNUM, dev->filename,

  012ad	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  012b6	74 15		 je	 SHORT $LN551@cckd_chkds
  012b8	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  012c0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  012c4	89 84 24 b8 01
	00 00		 mov	 DWORD PTR tv613[rsp], eax
  012cb	eb 0b		 jmp	 SHORT $LN552@cckd_chkds
$LN551@cckd_chkds:
  012cd	c7 84 24 b8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv613[rsp], 0
$LN552@cckd_chkds:
  012d8	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  012e1	74 17		 je	 SHORT $LN553@cckd_chkds
  012e3	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  012eb	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  012ef	d1 f8		 sar	 eax, 1
  012f1	89 84 24 bc 01
	00 00		 mov	 DWORD PTR tv619[rsp], eax
  012f8	eb 0b		 jmp	 SHORT $LN554@cckd_chkds
$LN553@cckd_chkds:
  012fa	c7 84 24 bc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv619[rsp], 0
$LN554@cckd_chkds:
  01305	48 63 84 24 b4
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  0130d	48 89 84 24 48
	05 00 00	 mov	 QWORD PTR tv603[rsp], rax
  01315	48 63 8c 24 a4
	0b 00 00	 movsxd	 rcx, DWORD PTR cdevhdr$[rsp+4]
  0131d	48 89 8c 24 50
	05 00 00	 mov	 QWORD PTR tv605[rsp], rcx
  01325	48 8b 94 24 d0
	21 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0132d	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  01334	48 89 94 24 58
	05 00 00	 mov	 QWORD PTR tv608[rsp], rdx
  0133c	b9 01 00 00 00	 mov	 ecx, 1
  01341	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01347	48 8b 8c 24 48
	05 00 00	 mov	 rcx, QWORD PTR tv603[rsp]
  0134f	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  01354	48 8b 8c 24 50
	05 00 00	 mov	 rcx, QWORD PTR tv605[rsp]
  0135c	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01361	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170067
  01368	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0136d	48 8b 8c 24 58
	05 00 00	 mov	 rcx, QWORD PTR tv608[rsp]
  01375	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0137a	8b 8c 24 b8 01
	00 00		 mov	 ecx, DWORD PTR tv613[rsp]
  01381	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01385	8b 8c 24 bc 01
	00 00		 mov	 ecx, DWORD PTR tv619[rsp]
  0138c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01390	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170068
  01397	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0139c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170069
  013a3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  013a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013ad	41 b9 03 00 00
	00		 mov	 r9d, 3
  013b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170070
  013ba	ba f8 04 00 00	 mov	 edx, 1272		; 000004f8H
  013bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170071
  013c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  013cc	e9 1f 01 00 00	 jmp	 $LN185@cckd_chkds
$LN184@cckd_chkds:

; 1272 :                     "num_L1tab", (S64)cdevhdr.num_L1tab, (S64)n );
; 1273 :         else
; 1274 :             // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1275 :             WRMSG( HHC00362, "E", LCSS_DEVNUM, dev->filename,

  013d1	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  013da	74 15		 je	 SHORT $LN555@cckd_chkds
  013dc	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  013e4	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  013e8	89 84 24 c0 01
	00 00		 mov	 DWORD PTR tv640[rsp], eax
  013ef	eb 0b		 jmp	 SHORT $LN556@cckd_chkds
$LN555@cckd_chkds:
  013f1	c7 84 24 c0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv640[rsp], 0
$LN556@cckd_chkds:
  013fc	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01405	74 17		 je	 SHORT $LN557@cckd_chkds
  01407	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0140f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01413	d1 f8		 sar	 eax, 1
  01415	89 84 24 c4 01
	00 00		 mov	 DWORD PTR tv646[rsp], eax
  0141c	eb 0b		 jmp	 SHORT $LN558@cckd_chkds
$LN557@cckd_chkds:
  0141e	c7 84 24 c4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv646[rsp], 0
$LN558@cckd_chkds:
  01429	48 63 84 24 b4
	00 00 00	 movsxd	 rax, DWORD PTR n$[rsp]
  01431	48 89 84 24 60
	05 00 00	 mov	 QWORD PTR tv630[rsp], rax
  01439	48 63 8c 24 a4
	0b 00 00	 movsxd	 rcx, DWORD PTR cdevhdr$[rsp+4]
  01441	48 89 8c 24 68
	05 00 00	 mov	 QWORD PTR tv632[rsp], rcx
  01449	48 8b 94 24 d0
	21 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01451	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  01458	48 89 94 24 70
	05 00 00	 mov	 QWORD PTR tv635[rsp], rdx
  01460	b9 01 00 00 00	 mov	 ecx, 1
  01465	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0146b	48 8b 8c 24 60
	05 00 00	 mov	 rcx, QWORD PTR tv630[rsp]
  01473	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  01478	48 8b 8c 24 68
	05 00 00	 mov	 rcx, QWORD PTR tv632[rsp]
  01480	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01485	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170072
  0148c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01491	48 8b 8c 24 70
	05 00 00	 mov	 rcx, QWORD PTR tv635[rsp]
  01499	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0149e	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR tv640[rsp]
  014a5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  014a9	8b 8c 24 c4 01
	00 00		 mov	 ecx, DWORD PTR tv646[rsp]
  014b0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  014b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170073
  014bb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  014c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170074
  014c7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  014cc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  014d1	41 b9 03 00 00
	00		 mov	 r9d, 3
  014d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170075
  014de	ba fc 04 00 00	 mov	 edx, 1276		; 000004fcH
  014e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170076
  014ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN185@cckd_chkds:

; 1276 :                   "num_L1tab", (S64)cdevhdr.num_L1tab, (S64)n );
; 1277 :         goto cdsk_error;

  014f0	e9 e0 9b 00 00	 jmp	 $cdsk_error$829
$LN183@cckd_chkds:

; 1278 :     }
; 1279 :     l1size = cdevhdr.num_L1tab * CCKD_L1ENT_SIZE;

  014f5	48 63 84 24 a4
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  014fd	48 c1 e0 02	 shl	 rax, 2
  01501	89 84 24 08 01
	00 00		 mov	 DWORD PTR l1size$[rsp], eax

; 1280 :     if (CCKD_L1TAB_POS + l1size > fst.st_size)

  01508	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  01510	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  01516	48 3b 84 24 b8
	0d 00 00	 cmp	 rax, QWORD PTR fst$[rsp+24]
  0151e	0f 8e 50 02 00
	00		 jle	 $LN186@cckd_chkds

; 1281 :     {
; 1282 :         if(dev->batch)

  01524	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0152c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01532	c1 e8 0a	 shr	 eax, 10
  01535	83 e0 01	 and	 eax, 1
  01538	85 c0		 test	 eax, eax
  0153a	0f 84 1a 01 00
	00		 je	 $LN187@cckd_chkds

; 1283 :             // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1284 :             FWRMSG( stdout, HHC00362, "E", LCSS_DEVNUM, dev->filename,

  01540	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01549	74 15		 je	 SHORT $LN559@cckd_chkds
  0154b	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01553	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01557	89 84 24 c8 01
	00 00		 mov	 DWORD PTR tv677[rsp], eax
  0155e	eb 0b		 jmp	 SHORT $LN560@cckd_chkds
$LN559@cckd_chkds:
  01560	c7 84 24 c8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv677[rsp], 0
$LN560@cckd_chkds:
  0156b	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01574	74 17		 je	 SHORT $LN561@cckd_chkds
  01576	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0157e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01582	d1 f8		 sar	 eax, 1
  01584	89 84 24 cc 01
	00 00		 mov	 DWORD PTR tv683[rsp], eax
  0158b	eb 0b		 jmp	 SHORT $LN562@cckd_chkds
$LN561@cckd_chkds:
  0158d	c7 84 24 cc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv683[rsp], 0
$LN562@cckd_chkds:
  01598	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  015a0	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  015a6	48 89 84 24 78
	05 00 00	 mov	 QWORD PTR tv668[rsp], rax
  015ae	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  015b6	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  015bd	48 89 8c 24 80
	05 00 00	 mov	 QWORD PTR tv672[rsp], rcx
  015c5	b9 01 00 00 00	 mov	 ecx, 1
  015ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  015d0	48 8b 8c 24 78
	05 00 00	 mov	 rcx, QWORD PTR tv668[rsp]
  015d8	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  015dd	48 8b 8c 24 b8
	0d 00 00	 mov	 rcx, QWORD PTR fst$[rsp+24]
  015e5	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  015ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170080
  015f1	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  015f6	48 8b 8c 24 80
	05 00 00	 mov	 rcx, QWORD PTR tv672[rsp]
  015fe	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01603	8b 8c 24 c8 01
	00 00		 mov	 ecx, DWORD PTR tv677[rsp]
  0160a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0160e	8b 8c 24 cc 01
	00 00		 mov	 ecx, DWORD PTR tv683[rsp]
  01615	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01619	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170081
  01620	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01625	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170082
  0162c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01631	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01636	41 b9 03 00 00
	00		 mov	 r9d, 3
  0163c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170083
  01643	ba 05 05 00 00	 mov	 edx, 1285		; 00000505H
  01648	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170084
  0164f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01655	e9 15 01 00 00	 jmp	 $LN188@cckd_chkds
$LN187@cckd_chkds:

; 1285 :                     "file length to contain L1 table", (S64)fst.st_size, (S64)CCKD_L1TAB_POS + l1size );
; 1286 :         else
; 1287 :             // "%1d:%04X CCKD file %s: bad %s %"PRId64", expecting %"PRId64
; 1288 :             WRMSG( HHC00362, "E", LCSS_DEVNUM, dev->filename,

  0165a	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01663	74 15		 je	 SHORT $LN563@cckd_chkds
  01665	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0166d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01671	89 84 24 d0 01
	00 00		 mov	 DWORD PTR tv736[rsp], eax
  01678	eb 0b		 jmp	 SHORT $LN564@cckd_chkds
$LN563@cckd_chkds:
  0167a	c7 84 24 d0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv736[rsp], 0
$LN564@cckd_chkds:
  01685	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0168e	74 17		 je	 SHORT $LN565@cckd_chkds
  01690	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01698	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0169c	d1 f8		 sar	 eax, 1
  0169e	89 84 24 d4 01
	00 00		 mov	 DWORD PTR tv742[rsp], eax
  016a5	eb 0b		 jmp	 SHORT $LN566@cckd_chkds
$LN565@cckd_chkds:
  016a7	c7 84 24 d4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv742[rsp], 0
$LN566@cckd_chkds:
  016b2	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  016ba	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  016c0	48 89 84 24 88
	05 00 00	 mov	 QWORD PTR tv695[rsp], rax
  016c8	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  016d0	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  016d7	48 89 8c 24 90
	05 00 00	 mov	 QWORD PTR tv699[rsp], rcx
  016df	b9 01 00 00 00	 mov	 ecx, 1
  016e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  016ea	48 8b 8c 24 88
	05 00 00	 mov	 rcx, QWORD PTR tv695[rsp]
  016f2	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  016f7	48 8b 8c 24 b8
	0d 00 00	 mov	 rcx, QWORD PTR fst$[rsp+24]
  016ff	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01704	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170085
  0170b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01710	48 8b 8c 24 90
	05 00 00	 mov	 rcx, QWORD PTR tv699[rsp]
  01718	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0171d	8b 8c 24 d0 01
	00 00		 mov	 ecx, DWORD PTR tv736[rsp]
  01724	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01728	8b 8c 24 d4 01
	00 00		 mov	 ecx, DWORD PTR tv742[rsp]
  0172f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01733	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170086
  0173a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0173f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170087
  01746	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0174b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01750	41 b9 03 00 00
	00		 mov	 r9d, 3
  01756	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170088
  0175d	ba 09 05 00 00	 mov	 edx, 1289		; 00000509H
  01762	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170089
  01769	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN188@cckd_chkds:

; 1289 :                   "file length to contain L1 table", (S64)fst.st_size, (S64)CCKD_L1TAB_POS + l1size );
; 1290 :         goto cdsk_error;

  0176f	e9 61 99 00 00	 jmp	 $cdsk_error$829
$LN186@cckd_chkds:

; 1291 :     }
; 1292 : 
; 1293 :     /* check level 2 if SPERRS bit on */
; 1294 :     if (!ro && level < 2 && (cdevhdr.cdh_opts & CCKD_OPT_SPERRS))

  01774	83 bc 24 54 01
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  0177c	0f 85 13 02 00
	00		 jne	 $LN189@cckd_chkds
  01782	83 bc 24 d8 21
	04 00 02	 cmp	 DWORD PTR level$[rsp], 2
  0178a	0f 8d 05 02 00
	00		 jge	 $LN189@cckd_chkds
  01790	0f b6 84 24 a3
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  01798	83 e0 20	 and	 eax, 32			; 00000020H
  0179b	85 c0		 test	 eax, eax
  0179d	0f 84 f2 01 00
	00		 je	 $LN189@cckd_chkds

; 1295 :     {
; 1296 :         level = 2;

  017a3	c7 84 24 d8 21
	04 00 02 00 00
	00		 mov	 DWORD PTR level$[rsp], 2

; 1297 :         if(dev->batch)

  017ae	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  017b6	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  017bc	c1 e8 0a	 shr	 eax, 10
  017bf	83 e0 01	 and	 eax, 1
  017c2	85 c0		 test	 eax, eax
  017c4	0f 84 e8 00 00
	00		 je	 $LN190@cckd_chkds

; 1298 :             FWRMSG( stdout, HHC00364, "W", LCSS_DEVNUM, dev->filename, level);

  017ca	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  017d3	74 15		 je	 SHORT $LN567@cckd_chkds
  017d5	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  017dd	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  017e1	89 84 24 d8 01
	00 00		 mov	 DWORD PTR tv768[rsp], eax
  017e8	eb 0b		 jmp	 SHORT $LN568@cckd_chkds
$LN567@cckd_chkds:
  017ea	c7 84 24 d8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv768[rsp], 0
$LN568@cckd_chkds:
  017f5	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  017fe	74 17		 je	 SHORT $LN569@cckd_chkds
  01800	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01808	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0180c	d1 f8		 sar	 eax, 1
  0180e	89 84 24 dc 01
	00 00		 mov	 DWORD PTR tv774[rsp], eax
  01815	eb 0b		 jmp	 SHORT $LN570@cckd_chkds
$LN569@cckd_chkds:
  01817	c7 84 24 dc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv774[rsp], 0
$LN570@cckd_chkds:
  01822	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0182a	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  01830	48 89 84 24 98
	05 00 00	 mov	 QWORD PTR tv763[rsp], rax
  01838	b9 01 00 00 00	 mov	 ecx, 1
  0183d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01843	8b 8c 24 d8 21
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  0184a	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0184e	48 8b 8c 24 98
	05 00 00	 mov	 rcx, QWORD PTR tv763[rsp]
  01856	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0185b	8b 8c 24 d8 01
	00 00		 mov	 ecx, DWORD PTR tv768[rsp]
  01862	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01866	8b 8c 24 dc 01
	00 00		 mov	 ecx, DWORD PTR tv774[rsp]
  0186d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01871	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170093
  01878	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0187d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170094
  01884	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01889	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0188e	41 b9 03 00 00
	00		 mov	 r9d, 3
  01894	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170095
  0189b	ba 12 05 00 00	 mov	 edx, 1298		; 00000512H
  018a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170096
  018a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  018ad	e9 e3 00 00 00	 jmp	 $LN191@cckd_chkds
$LN190@cckd_chkds:

; 1299 :         else
; 1300 :             WRMSG( HHC00364, "W", LCSS_DEVNUM, dev->filename, level);

  018b2	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  018bb	74 15		 je	 SHORT $LN571@cckd_chkds
  018bd	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  018c5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  018c9	89 84 24 e0 01
	00 00		 mov	 DWORD PTR tv791[rsp], eax
  018d0	eb 0b		 jmp	 SHORT $LN572@cckd_chkds
$LN571@cckd_chkds:
  018d2	c7 84 24 e0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv791[rsp], 0
$LN572@cckd_chkds:
  018dd	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  018e6	74 17		 je	 SHORT $LN573@cckd_chkds
  018e8	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  018f0	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  018f4	d1 f8		 sar	 eax, 1
  018f6	89 84 24 e4 01
	00 00		 mov	 DWORD PTR tv797[rsp], eax
  018fd	eb 0b		 jmp	 SHORT $LN574@cckd_chkds
$LN573@cckd_chkds:
  018ff	c7 84 24 e4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv797[rsp], 0
$LN574@cckd_chkds:
  0190a	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01912	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  01918	48 89 84 24 a0
	05 00 00	 mov	 QWORD PTR tv786[rsp], rax
  01920	b9 01 00 00 00	 mov	 ecx, 1
  01925	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0192b	8b 8c 24 d8 21
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  01932	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  01936	48 8b 8c 24 a0
	05 00 00	 mov	 rcx, QWORD PTR tv786[rsp]
  0193e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01943	8b 8c 24 e0 01
	00 00		 mov	 ecx, DWORD PTR tv791[rsp]
  0194a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0194e	8b 8c 24 e4 01
	00 00		 mov	 ecx, DWORD PTR tv797[rsp]
  01955	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01959	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170097
  01960	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01965	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170098
  0196c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01971	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01976	41 b9 03 00 00
	00		 mov	 r9d, 3
  0197c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170099
  01983	ba 14 05 00 00	 mov	 edx, 1300		; 00000514H
  01988	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170100
  0198f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN191@cckd_chkds:
$LN189@cckd_chkds:

; 1301 :     }
; 1302 : 
; 1303 :     /* cdevhdr inconsistencies check */
; 1304 :     hdrerr  = 0;

  01995	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR hdrerr$[rsp], 0

; 1305 :     hdrerr |= fst.st_size != (off_t)cdevhdr.cdh_size && cdevhdr.cdh_size != cdevhdr.free_off ? 0x0001 : 0;

  019a0	8b 84 24 ac 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+12]
  019a7	48 39 84 24 b8
	0d 00 00	 cmp	 QWORD PTR fst$[rsp+24], rax
  019af	74 1d		 je	 SHORT $LN575@cckd_chkds
  019b1	8b 84 24 b4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+20]
  019b8	39 84 24 ac 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+12], eax
  019bf	74 0d		 je	 SHORT $LN575@cckd_chkds
  019c1	c7 84 24 e8 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv811[rsp], 1
  019cc	eb 0b		 jmp	 SHORT $LN576@cckd_chkds
$LN575@cckd_chkds:
  019ce	c7 84 24 e8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv811[rsp], 0
$LN576@cckd_chkds:
  019d9	8b 84 24 e8 01
	00 00		 mov	 eax, DWORD PTR tv811[rsp]
  019e0	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR hdrerr$[rsp]
  019e7	0b c8		 or	 ecx, eax
  019e9	8b c1		 mov	 eax, ecx
  019eb	89 84 24 c8 00
	00 00		 mov	 DWORD PTR hdrerr$[rsp], eax

; 1306 :     hdrerr |= cdevhdr.cdh_size !=      cdevhdr.free_total  +  cdevhdr.cdh_used               ? 0x0002 : 0;

  019f2	8b 84 24 b0 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+16]
  019f9	8b 8c 24 b8 0b
	00 00		 mov	 ecx, DWORD PTR cdevhdr$[rsp+24]
  01a00	03 c8		 add	 ecx, eax
  01a02	8b c1		 mov	 eax, ecx
  01a04	39 84 24 ac 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+12], eax
  01a0b	74 0d		 je	 SHORT $LN577@cckd_chkds
  01a0d	c7 84 24 ec 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv815[rsp], 2
  01a18	eb 0b		 jmp	 SHORT $LN578@cckd_chkds
$LN577@cckd_chkds:
  01a1a	c7 84 24 ec 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv815[rsp], 0
$LN578@cckd_chkds:
  01a25	8b 84 24 ec 01
	00 00		 mov	 eax, DWORD PTR tv815[rsp]
  01a2c	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR hdrerr$[rsp]
  01a33	0b c8		 or	 ecx, eax
  01a35	8b c1		 mov	 eax, ecx
  01a37	89 84 24 c8 00
	00 00		 mov	 DWORD PTR hdrerr$[rsp], eax

; 1307 :     hdrerr |= cdevhdr.free_largest  >  cdevhdr.free_total  -  cdevhdr.free_imbed             ? 0x0004 : 0;

  01a3e	8b 84 24 c4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+36]
  01a45	8b 8c 24 b8 0b
	00 00		 mov	 ecx, DWORD PTR cdevhdr$[rsp+24]
  01a4c	2b c8		 sub	 ecx, eax
  01a4e	8b c1		 mov	 eax, ecx
  01a50	39 84 24 bc 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+28], eax
  01a57	76 0d		 jbe	 SHORT $LN579@cckd_chkds
  01a59	c7 84 24 f0 01
	00 00 04 00 00
	00		 mov	 DWORD PTR tv819[rsp], 4
  01a64	eb 0b		 jmp	 SHORT $LN580@cckd_chkds
$LN579@cckd_chkds:
  01a66	c7 84 24 f0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv819[rsp], 0
$LN580@cckd_chkds:
  01a71	8b 84 24 f0 01
	00 00		 mov	 eax, DWORD PTR tv819[rsp]
  01a78	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR hdrerr$[rsp]
  01a7f	0b c8		 or	 ecx, eax
  01a81	8b c1		 mov	 eax, ecx
  01a83	89 84 24 c8 00
	00 00		 mov	 DWORD PTR hdrerr$[rsp], eax

; 1308 :     hdrerr |= cdevhdr.free_off == 0 && cdevhdr.free_num    != 0                              ? 0x0008 : 0;

  01a8a	83 bc 24 b4 0b
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+20], 0
  01a92	75 17		 jne	 SHORT $LN581@cckd_chkds
  01a94	83 bc 24 c0 0b
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+32], 0
  01a9c	74 0d		 je	 SHORT $LN581@cckd_chkds
  01a9e	c7 84 24 f4 01
	00 00 08 00 00
	00		 mov	 DWORD PTR tv823[rsp], 8
  01aa9	eb 0b		 jmp	 SHORT $LN582@cckd_chkds
$LN581@cckd_chkds:
  01aab	c7 84 24 f4 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv823[rsp], 0
$LN582@cckd_chkds:
  01ab6	8b 84 24 f4 01
	00 00		 mov	 eax, DWORD PTR tv823[rsp]
  01abd	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR hdrerr$[rsp]
  01ac4	0b c8		 or	 ecx, eax
  01ac6	8b c1		 mov	 eax, ecx
  01ac8	89 84 24 c8 00
	00 00		 mov	 DWORD PTR hdrerr$[rsp], eax

; 1309 :     hdrerr |= cdevhdr.free_off == 0 && cdevhdr.free_total  != cdevhdr.free_imbed             ? 0x0010 : 0;

  01acf	83 bc 24 b4 0b
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+20], 0
  01ad7	75 1d		 jne	 SHORT $LN583@cckd_chkds
  01ad9	8b 84 24 c4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+36]
  01ae0	39 84 24 b8 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+24], eax
  01ae7	74 0d		 je	 SHORT $LN583@cckd_chkds
  01ae9	c7 84 24 f8 01
	00 00 10 00 00
	00		 mov	 DWORD PTR tv827[rsp], 16
  01af4	eb 0b		 jmp	 SHORT $LN584@cckd_chkds
$LN583@cckd_chkds:
  01af6	c7 84 24 f8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv827[rsp], 0
$LN584@cckd_chkds:
  01b01	8b 84 24 f8 01
	00 00		 mov	 eax, DWORD PTR tv827[rsp]
  01b08	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR hdrerr$[rsp]
  01b0f	0b c8		 or	 ecx, eax
  01b11	8b c1		 mov	 eax, ecx
  01b13	89 84 24 c8 00
	00 00		 mov	 DWORD PTR hdrerr$[rsp], eax

; 1310 :     hdrerr |= cdevhdr.free_off != 0 && cdevhdr.free_total  == 0                              ? 0x0020 : 0;

  01b1a	83 bc 24 b4 0b
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+20], 0
  01b22	74 17		 je	 SHORT $LN585@cckd_chkds
  01b24	83 bc 24 b8 0b
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+24], 0
  01b2c	75 0d		 jne	 SHORT $LN585@cckd_chkds
  01b2e	c7 84 24 fc 01
	00 00 20 00 00
	00		 mov	 DWORD PTR tv831[rsp], 32 ; 00000020H
  01b39	eb 0b		 jmp	 SHORT $LN586@cckd_chkds
$LN585@cckd_chkds:
  01b3b	c7 84 24 fc 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv831[rsp], 0
$LN586@cckd_chkds:
  01b46	8b 84 24 fc 01
	00 00		 mov	 eax, DWORD PTR tv831[rsp]
  01b4d	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR hdrerr$[rsp]
  01b54	0b c8		 or	 ecx, eax
  01b56	8b c1		 mov	 eax, ecx
  01b58	89 84 24 c8 00
	00 00		 mov	 DWORD PTR hdrerr$[rsp], eax

; 1311 :     hdrerr |= cdevhdr.free_off != 0 && cdevhdr.free_num    == 0                              ? 0x0040 : 0;

  01b5f	83 bc 24 b4 0b
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+20], 0
  01b67	74 17		 je	 SHORT $LN587@cckd_chkds
  01b69	83 bc 24 c0 0b
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+32], 0
  01b71	75 0d		 jne	 SHORT $LN587@cckd_chkds
  01b73	c7 84 24 00 02
	00 00 40 00 00
	00		 mov	 DWORD PTR tv867[rsp], 64 ; 00000040H
  01b7e	eb 0b		 jmp	 SHORT $LN588@cckd_chkds
$LN587@cckd_chkds:
  01b80	c7 84 24 00 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv867[rsp], 0
$LN588@cckd_chkds:
  01b8b	8b 84 24 00 02
	00 00		 mov	 eax, DWORD PTR tv867[rsp]
  01b92	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR hdrerr$[rsp]
  01b99	0b c8		 or	 ecx, eax
  01b9b	8b c1		 mov	 eax, ecx
  01b9d	89 84 24 c8 00
	00 00		 mov	 DWORD PTR hdrerr$[rsp], eax

; 1312 :     hdrerr |= cdevhdr.free_num == 0 && cdevhdr.free_total  != cdevhdr.free_imbed             ? 0x0080 : 0;

  01ba4	83 bc 24 c0 0b
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+32], 0
  01bac	75 1d		 jne	 SHORT $LN589@cckd_chkds
  01bae	8b 84 24 c4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+36]
  01bb5	39 84 24 b8 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+24], eax
  01bbc	74 0d		 je	 SHORT $LN589@cckd_chkds
  01bbe	c7 84 24 04 02
	00 00 80 00 00
	00		 mov	 DWORD PTR tv871[rsp], 128 ; 00000080H
  01bc9	eb 0b		 jmp	 SHORT $LN590@cckd_chkds
$LN589@cckd_chkds:
  01bcb	c7 84 24 04 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv871[rsp], 0
$LN590@cckd_chkds:
  01bd6	8b 84 24 04 02
	00 00		 mov	 eax, DWORD PTR tv871[rsp]
  01bdd	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR hdrerr$[rsp]
  01be4	0b c8		 or	 ecx, eax
  01be6	8b c1		 mov	 eax, ecx
  01be8	89 84 24 c8 00
	00 00		 mov	 DWORD PTR hdrerr$[rsp], eax

; 1313 :     hdrerr |= cdevhdr.free_num != 0 && cdevhdr.free_total  <= cdevhdr.free_imbed             ? 0x0100 : 0;

  01bef	83 bc 24 c0 0b
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+32], 0
  01bf7	74 1d		 je	 SHORT $LN591@cckd_chkds
  01bf9	8b 84 24 c4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+36]
  01c00	39 84 24 b8 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+24], eax
  01c07	77 0d		 ja	 SHORT $LN591@cckd_chkds
  01c09	c7 84 24 08 02
	00 00 00 01 00
	00		 mov	 DWORD PTR tv875[rsp], 256 ; 00000100H
  01c14	eb 0b		 jmp	 SHORT $LN592@cckd_chkds
$LN591@cckd_chkds:
  01c16	c7 84 24 08 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv875[rsp], 0
$LN592@cckd_chkds:
  01c21	8b 84 24 08 02
	00 00		 mov	 eax, DWORD PTR tv875[rsp]
  01c28	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR hdrerr$[rsp]
  01c2f	0b c8		 or	 ecx, eax
  01c31	8b c1		 mov	 eax, ecx
  01c33	89 84 24 c8 00
	00 00		 mov	 DWORD PTR hdrerr$[rsp], eax

; 1314 :     hdrerr |= cdevhdr.free_imbed    >  cdevhdr.free_total                                    ? 0x0200 : 0;

  01c3a	8b 84 24 b8 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+24]
  01c41	39 84 24 c4 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+36], eax
  01c48	76 0d		 jbe	 SHORT $LN593@cckd_chkds
  01c4a	c7 84 24 0c 02
	00 00 00 02 00
	00		 mov	 DWORD PTR tv878[rsp], 512 ; 00000200H
  01c55	eb 0b		 jmp	 SHORT $LN594@cckd_chkds
$LN593@cckd_chkds:
  01c57	c7 84 24 0c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv878[rsp], 0
$LN594@cckd_chkds:
  01c62	8b 84 24 0c 02
	00 00		 mov	 eax, DWORD PTR tv878[rsp]
  01c69	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR hdrerr$[rsp]
  01c70	0b c8		 or	 ecx, eax
  01c72	8b c1		 mov	 eax, ecx
  01c74	89 84 24 c8 00
	00 00		 mov	 DWORD PTR hdrerr$[rsp], eax

; 1315 : 
; 1316 :     /* Additional checking if header errors */
; 1317 :     if (hdrerr != 0)

  01c7b	83 bc 24 c8 00
	00 00 00	 cmp	 DWORD PTR hdrerr$[rsp], 0
  01c83	0f 84 e7 03 00
	00		 je	 $LN192@cckd_chkds

; 1318 :     {
; 1319 :         // "%1d:%04X CCKD file %s: cdevhdr inconsistencies found, code %4.4X"
; 1320 :         if(dev->batch)

  01c89	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c91	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01c97	c1 e8 0a	 shr	 eax, 10
  01c9a	83 e0 01	 and	 eax, 1
  01c9d	85 c0		 test	 eax, eax
  01c9f	0f 84 e8 00 00
	00		 je	 $LN193@cckd_chkds

; 1321 :             FWRMSG( stdout, HHC00363, "W", LCSS_DEVNUM, dev->filename, hdrerr);

  01ca5	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01cae	74 15		 je	 SHORT $LN595@cckd_chkds
  01cb0	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01cb8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01cbc	89 84 24 10 02
	00 00		 mov	 DWORD PTR tv891[rsp], eax
  01cc3	eb 0b		 jmp	 SHORT $LN596@cckd_chkds
$LN595@cckd_chkds:
  01cc5	c7 84 24 10 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv891[rsp], 0
$LN596@cckd_chkds:
  01cd0	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01cd9	74 17		 je	 SHORT $LN597@cckd_chkds
  01cdb	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ce3	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01ce7	d1 f8		 sar	 eax, 1
  01ce9	89 84 24 14 02
	00 00		 mov	 DWORD PTR tv897[rsp], eax
  01cf0	eb 0b		 jmp	 SHORT $LN598@cckd_chkds
$LN597@cckd_chkds:
  01cf2	c7 84 24 14 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv897[rsp], 0
$LN598@cckd_chkds:
  01cfd	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d05	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  01d0b	48 89 84 24 a8
	05 00 00	 mov	 QWORD PTR tv886[rsp], rax
  01d13	b9 01 00 00 00	 mov	 ecx, 1
  01d18	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01d1e	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR hdrerr$[rsp]
  01d25	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  01d29	48 8b 8c 24 a8
	05 00 00	 mov	 rcx, QWORD PTR tv886[rsp]
  01d31	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01d36	8b 8c 24 10 02
	00 00		 mov	 ecx, DWORD PTR tv891[rsp]
  01d3d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01d41	8b 8c 24 14 02
	00 00		 mov	 ecx, DWORD PTR tv897[rsp]
  01d48	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01d4c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170104
  01d53	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01d58	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170105
  01d5f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01d64	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01d69	41 b9 03 00 00
	00		 mov	 r9d, 3
  01d6f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170106
  01d76	ba 29 05 00 00	 mov	 edx, 1321		; 00000529H
  01d7b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170107
  01d82	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01d88	e9 e3 00 00 00	 jmp	 $LN194@cckd_chkds
$LN193@cckd_chkds:

; 1322 :         else
; 1323 :             WRMSG( HHC00363, "W", LCSS_DEVNUM, dev->filename, hdrerr);

  01d8d	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01d96	74 15		 je	 SHORT $LN599@cckd_chkds
  01d98	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01da0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01da4	89 84 24 18 02
	00 00		 mov	 DWORD PTR tv914[rsp], eax
  01dab	eb 0b		 jmp	 SHORT $LN600@cckd_chkds
$LN599@cckd_chkds:
  01dad	c7 84 24 18 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv914[rsp], 0
$LN600@cckd_chkds:
  01db8	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01dc1	74 17		 je	 SHORT $LN601@cckd_chkds
  01dc3	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01dcb	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01dcf	d1 f8		 sar	 eax, 1
  01dd1	89 84 24 1c 02
	00 00		 mov	 DWORD PTR tv920[rsp], eax
  01dd8	eb 0b		 jmp	 SHORT $LN602@cckd_chkds
$LN601@cckd_chkds:
  01dda	c7 84 24 1c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv920[rsp], 0
$LN602@cckd_chkds:
  01de5	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ded	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  01df3	48 89 84 24 b0
	05 00 00	 mov	 QWORD PTR tv909[rsp], rax
  01dfb	b9 01 00 00 00	 mov	 ecx, 1
  01e00	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01e06	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR hdrerr$[rsp]
  01e0d	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  01e11	48 8b 8c 24 b0
	05 00 00	 mov	 rcx, QWORD PTR tv909[rsp]
  01e19	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01e1e	8b 8c 24 18 02
	00 00		 mov	 ecx, DWORD PTR tv914[rsp]
  01e25	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01e29	8b 8c 24 1c 02
	00 00		 mov	 ecx, DWORD PTR tv920[rsp]
  01e30	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01e34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170108
  01e3b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01e40	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170109
  01e47	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01e4c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01e51	41 b9 03 00 00
	00		 mov	 r9d, 3
  01e57	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170110
  01e5e	ba 2b 05 00 00	 mov	 edx, 1323		; 0000052bH
  01e63	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170111
  01e6a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN194@cckd_chkds:

; 1324 :         if (level < 1)

  01e70	83 bc 24 d8 21
	04 00 01	 cmp	 DWORD PTR level$[rsp], 1
  01e78	0f 8d f2 01 00
	00		 jge	 $LN195@cckd_chkds

; 1325 :         {
; 1326 :             level = 1;

  01e7e	c7 84 24 d8 21
	04 00 01 00 00
	00		 mov	 DWORD PTR level$[rsp], 1

; 1327 :             if(dev->batch)

  01e89	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e91	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01e97	c1 e8 0a	 shr	 eax, 10
  01e9a	83 e0 01	 and	 eax, 1
  01e9d	85 c0		 test	 eax, eax
  01e9f	0f 84 e8 00 00
	00		 je	 $LN196@cckd_chkds

; 1328 :                 FWRMSG( stdout, HHC00364, "W", LCSS_DEVNUM, dev->filename, level);

  01ea5	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01eae	74 15		 je	 SHORT $LN603@cckd_chkds
  01eb0	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01eb8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01ebc	89 84 24 20 02
	00 00		 mov	 DWORD PTR tv942[rsp], eax
  01ec3	eb 0b		 jmp	 SHORT $LN604@cckd_chkds
$LN603@cckd_chkds:
  01ec5	c7 84 24 20 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv942[rsp], 0
$LN604@cckd_chkds:
  01ed0	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01ed9	74 17		 je	 SHORT $LN605@cckd_chkds
  01edb	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ee3	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01ee7	d1 f8		 sar	 eax, 1
  01ee9	89 84 24 24 02
	00 00		 mov	 DWORD PTR tv948[rsp], eax
  01ef0	eb 0b		 jmp	 SHORT $LN606@cckd_chkds
$LN605@cckd_chkds:
  01ef2	c7 84 24 24 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv948[rsp], 0
$LN606@cckd_chkds:
  01efd	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f05	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  01f0b	48 89 84 24 b8
	05 00 00	 mov	 QWORD PTR tv937[rsp], rax
  01f13	b9 01 00 00 00	 mov	 ecx, 1
  01f18	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01f1e	8b 8c 24 d8 21
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  01f25	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  01f29	48 8b 8c 24 b8
	05 00 00	 mov	 rcx, QWORD PTR tv937[rsp]
  01f31	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01f36	8b 8c 24 20 02
	00 00		 mov	 ecx, DWORD PTR tv942[rsp]
  01f3d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01f41	8b 8c 24 24 02
	00 00		 mov	 ecx, DWORD PTR tv948[rsp]
  01f48	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01f4c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170115
  01f53	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01f58	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170116
  01f5f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01f64	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01f69	41 b9 03 00 00
	00		 mov	 r9d, 3
  01f6f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170117
  01f76	ba 30 05 00 00	 mov	 edx, 1328		; 00000530H
  01f7b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170118
  01f82	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01f88	e9 e3 00 00 00	 jmp	 $LN197@cckd_chkds
$LN196@cckd_chkds:

; 1329 :             else
; 1330 :                 WRMSG( HHC00364, "W", LCSS_DEVNUM, dev->filename, level);

  01f8d	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01f96	74 15		 je	 SHORT $LN607@cckd_chkds
  01f98	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01fa0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01fa4	89 84 24 28 02
	00 00		 mov	 DWORD PTR tv965[rsp], eax
  01fab	eb 0b		 jmp	 SHORT $LN608@cckd_chkds
$LN607@cckd_chkds:
  01fad	c7 84 24 28 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv965[rsp], 0
$LN608@cckd_chkds:
  01fb8	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01fc1	74 17		 je	 SHORT $LN609@cckd_chkds
  01fc3	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01fcb	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01fcf	d1 f8		 sar	 eax, 1
  01fd1	89 84 24 2c 02
	00 00		 mov	 DWORD PTR tv971[rsp], eax
  01fd8	eb 0b		 jmp	 SHORT $LN610@cckd_chkds
$LN609@cckd_chkds:
  01fda	c7 84 24 2c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv971[rsp], 0
$LN610@cckd_chkds:
  01fe5	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01fed	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  01ff3	48 89 84 24 c0
	05 00 00	 mov	 QWORD PTR tv960[rsp], rax
  01ffb	b9 01 00 00 00	 mov	 ecx, 1
  02000	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02006	8b 8c 24 d8 21
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  0200d	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  02011	48 8b 8c 24 c0
	05 00 00	 mov	 rcx, QWORD PTR tv960[rsp]
  02019	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0201e	8b 8c 24 28 02
	00 00		 mov	 ecx, DWORD PTR tv965[rsp]
  02025	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02029	8b 8c 24 2c 02
	00 00		 mov	 ecx, DWORD PTR tv971[rsp]
  02030	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170119
  0203b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170120
  02047	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0204c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02051	41 b9 03 00 00
	00		 mov	 r9d, 3
  02057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170121
  0205e	ba 32 05 00 00	 mov	 edx, 1330		; 00000532H
  02063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170122
  0206a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN197@cckd_chkds:
$LN195@cckd_chkds:
$LN192@cckd_chkds:

; 1331 :         }
; 1332 :     }
; 1333 : 
; 1334 :     /* Additional checking if not properly closed */
; 1335 :     if (level < 1 && (cdevhdr.cdh_opts & CCKD_OPT_OPENED))

  02070	83 bc 24 d8 21
	04 00 01	 cmp	 DWORD PTR level$[rsp], 1
  02078	0f 8d 07 02 00
	00		 jge	 $LN198@cckd_chkds
  0207e	0f b6 84 24 a3
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  02086	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0208b	85 c0		 test	 eax, eax
  0208d	0f 84 f2 01 00
	00		 je	 $LN198@cckd_chkds

; 1336 :     {
; 1337 :         level = 1;

  02093	c7 84 24 d8 21
	04 00 01 00 00
	00		 mov	 DWORD PTR level$[rsp], 1

; 1338 :         if(dev->batch)

  0209e	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  020a6	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  020ac	c1 e8 0a	 shr	 eax, 10
  020af	83 e0 01	 and	 eax, 1
  020b2	85 c0		 test	 eax, eax
  020b4	0f 84 e8 00 00
	00		 je	 $LN199@cckd_chkds

; 1339 :             FWRMSG( stdout, HHC00364, "W", LCSS_DEVNUM, dev->filename, level);

  020ba	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  020c3	74 15		 je	 SHORT $LN611@cckd_chkds
  020c5	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  020cd	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  020d1	89 84 24 30 02
	00 00		 mov	 DWORD PTR tv1028[rsp], eax
  020d8	eb 0b		 jmp	 SHORT $LN612@cckd_chkds
$LN611@cckd_chkds:
  020da	c7 84 24 30 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1028[rsp], 0
$LN612@cckd_chkds:
  020e5	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  020ee	74 17		 je	 SHORT $LN613@cckd_chkds
  020f0	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  020f8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  020fc	d1 f8		 sar	 eax, 1
  020fe	89 84 24 34 02
	00 00		 mov	 DWORD PTR tv1034[rsp], eax
  02105	eb 0b		 jmp	 SHORT $LN614@cckd_chkds
$LN613@cckd_chkds:
  02107	c7 84 24 34 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1034[rsp], 0
$LN614@cckd_chkds:
  02112	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0211a	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  02120	48 89 84 24 c8
	05 00 00	 mov	 QWORD PTR tv991[rsp], rax
  02128	b9 01 00 00 00	 mov	 ecx, 1
  0212d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02133	8b 8c 24 d8 21
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  0213a	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0213e	48 8b 8c 24 c8
	05 00 00	 mov	 rcx, QWORD PTR tv991[rsp]
  02146	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0214b	8b 8c 24 30 02
	00 00		 mov	 ecx, DWORD PTR tv1028[rsp]
  02152	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02156	8b 8c 24 34 02
	00 00		 mov	 ecx, DWORD PTR tv1034[rsp]
  0215d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170126
  02168	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0216d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170127
  02174	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02179	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0217e	41 b9 03 00 00
	00		 mov	 r9d, 3
  02184	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170128
  0218b	ba 3b 05 00 00	 mov	 edx, 1339		; 0000053bH
  02190	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170129
  02197	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0219d	e9 e3 00 00 00	 jmp	 $LN200@cckd_chkds
$LN199@cckd_chkds:

; 1340 :         else
; 1341 :             WRMSG( HHC00364, "W", LCSS_DEVNUM, dev->filename, level);

  021a2	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  021ab	74 15		 je	 SHORT $LN615@cckd_chkds
  021ad	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  021b5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  021b9	89 84 24 38 02
	00 00		 mov	 DWORD PTR tv1051[rsp], eax
  021c0	eb 0b		 jmp	 SHORT $LN616@cckd_chkds
$LN615@cckd_chkds:
  021c2	c7 84 24 38 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1051[rsp], 0
$LN616@cckd_chkds:
  021cd	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  021d6	74 17		 je	 SHORT $LN617@cckd_chkds
  021d8	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  021e0	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  021e4	d1 f8		 sar	 eax, 1
  021e6	89 84 24 3c 02
	00 00		 mov	 DWORD PTR tv1057[rsp], eax
  021ed	eb 0b		 jmp	 SHORT $LN618@cckd_chkds
$LN617@cckd_chkds:
  021ef	c7 84 24 3c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1057[rsp], 0
$LN618@cckd_chkds:
  021fa	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02202	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  02208	48 89 84 24 d0
	05 00 00	 mov	 QWORD PTR tv1046[rsp], rax
  02210	b9 01 00 00 00	 mov	 ecx, 1
  02215	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0221b	8b 8c 24 d8 21
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  02222	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  02226	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR tv1046[rsp]
  0222e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02233	8b 8c 24 38 02
	00 00		 mov	 ecx, DWORD PTR tv1051[rsp]
  0223a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0223e	8b 8c 24 3c 02
	00 00		 mov	 ecx, DWORD PTR tv1057[rsp]
  02245	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02249	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170130
  02250	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02255	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170131
  0225c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02261	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02266	41 b9 03 00 00
	00		 mov	 r9d, 3
  0226c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170132
  02273	ba 3d 05 00 00	 mov	 edx, 1341		; 0000053dH
  02278	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170133
  0227f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN200@cckd_chkds:
$LN198@cckd_chkds:

; 1342 :     }
; 1343 : 
; 1344 :     /* Additional checking if last opened for read/write */
; 1345 :     if (level < 0 && (cdevhdr.cdh_opts & CCKD_OPT_OPENRW))

  02285	83 bc 24 d8 21
	04 00 00	 cmp	 DWORD PTR level$[rsp], 0
  0228d	7d 1a		 jge	 SHORT $LN201@cckd_chkds
  0228f	0f b6 84 24 a3
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  02297	83 e0 40	 and	 eax, 64			; 00000040H
  0229a	85 c0		 test	 eax, eax
  0229c	74 0b		 je	 SHORT $LN201@cckd_chkds

; 1346 :         level = 0;

  0229e	c7 84 24 d8 21
	04 00 00 00 00
	00		 mov	 DWORD PTR level$[rsp], 0
$LN201@cckd_chkds:

; 1347 : 
; 1348 :     /* Set check level -1 */
; 1349 :     if (level == 0 && !dev->batch && !hdrerr
; 1350 :      && (cdevhdr.cdh_opts & (CCKD_OPT_OPENED | CCKD_OPT_SPERRS)) == 0
; 1351 :      && ((cdevhdr.cdh_opts & (CCKD_OPT_OPENRW)) == 0 || ro))

  022a9	83 bc 24 d8 21
	04 00 00	 cmp	 DWORD PTR level$[rsp], 0
  022b1	75 57		 jne	 SHORT $LN202@cckd_chkds
  022b3	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  022bb	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  022c1	c1 e8 0a	 shr	 eax, 10
  022c4	83 e0 01	 and	 eax, 1
  022c7	85 c0		 test	 eax, eax
  022c9	75 3f		 jne	 SHORT $LN202@cckd_chkds
  022cb	83 bc 24 c8 00
	00 00 00	 cmp	 DWORD PTR hdrerr$[rsp], 0
  022d3	75 35		 jne	 SHORT $LN202@cckd_chkds
  022d5	0f b6 84 24 a3
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  022dd	25 a0 00 00 00	 and	 eax, 160		; 000000a0H
  022e2	85 c0		 test	 eax, eax
  022e4	75 24		 jne	 SHORT $LN202@cckd_chkds
  022e6	0f b6 84 24 a3
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  022ee	83 e0 40	 and	 eax, 64			; 00000040H
  022f1	85 c0		 test	 eax, eax
  022f3	74 0a		 je	 SHORT $LN203@cckd_chkds
  022f5	83 bc 24 54 01
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  022fd	74 0b		 je	 SHORT $LN202@cckd_chkds
$LN203@cckd_chkds:

; 1352 :         level = -1;

  022ff	c7 84 24 d8 21
	04 00 ff ff ff
	ff		 mov	 DWORD PTR level$[rsp], -1
$LN202@cckd_chkds:

; 1353 : 
; 1354 :     /* Build empty l2 table */
; 1355 :     memset (&empty_l2, shadow, CCKD_L2TAB_SIZE);

  0230a	48 63 84 24 78
	01 00 00	 movsxd	 rax, DWORD PTR shadow$[rsp]
  02312	48 8d 8c 24 e0
	17 00 00	 lea	 rcx, QWORD PTR empty_l2$[rsp]
  0231a	48 8b f9	 mov	 rdi, rcx
  0231d	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  02322	f3 aa		 rep stosb

; 1356 :     if (shadow == 0 && cdevhdr.cdh_nullfmt != 0)

  02324	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR shadow$[rsp], 0
  0232c	75 78		 jne	 SHORT $LN204@cckd_chkds
  0232e	0f b6 84 24 cc
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+44]
  02336	85 c0		 test	 eax, eax
  02338	74 6c		 je	 SHORT $LN204@cckd_chkds

; 1357 :         for (i = 0; i < 256; i++)

  0233a	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  02345	eb 10		 jmp	 SHORT $LN4@cckd_chkds
$LN2@cckd_chkds:
  02347	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0234e	ff c0		 inc	 eax
  02350	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN4@cckd_chkds:
  02357	81 bc 24 90 00
	00 00 00 01 00
	00		 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  02362	7d 42		 jge	 SHORT $LN3@cckd_chkds

; 1358 :             empty_l2[i].L2_len = empty_l2[i].L2_size = cdevhdr.cdh_nullfmt;

  02364	0f b6 84 24 cc
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+44]
  0236c	66 89 84 24 64
	01 00 00	 mov	 WORD PTR tv1102[rsp], ax
  02374	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0237c	0f b7 8c 24 64
	01 00 00	 movzx	 ecx, WORD PTR tv1102[rsp]
  02384	66 89 8c c4 e6
	17 00 00	 mov	 WORD PTR empty_l2$[rsp+rax*8+6], cx
  0238c	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02394	0f b7 8c 24 64
	01 00 00	 movzx	 ecx, WORD PTR tv1102[rsp]
  0239c	66 89 8c c4 e4
	17 00 00	 mov	 WORD PTR empty_l2$[rsp+rax*8+4], cx
  023a4	eb a1		 jmp	 SHORT $LN2@cckd_chkds
$LN3@cckd_chkds:
$LN204@cckd_chkds:

; 1359 : 
; 1360 :     /*---------------------------------------------------------------
; 1361 :      * read the level 1 table
; 1362 :      *---------------------------------------------------------------*/
; 1363 :     len = l1size;

  023a6	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR l1size$[rsp]
  023ad	89 84 24 a4 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 1364 :     if ((l1 = malloc (len)) == NULL)

  023b4	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  023bc	48 8b c8	 mov	 rcx, rax
  023bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  023c5	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR l1$[rsp], rax
  023cd	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR l1$[rsp], 0
  023d6	75 05		 jne	 SHORT $LN205@cckd_chkds

; 1365 :         goto cdsk_error;

  023d8	e9 f8 8c 00 00	 jmp	 $cdsk_error$829
$LN205@cckd_chkds:

; 1366 :     off = CCKD_L1TAB_POS;

  023dd	48 c7 84 24 c0
	00 00 00 00 04
	00 00		 mov	 QWORD PTR off$[rsp], 1024 ; 00000400H

; 1367 :     if ( lseek (fd, off, SEEK_SET) < 0)

  023e9	45 33 c0	 xor	 r8d, r8d
  023ec	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  023f4	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  023fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  02401	48 85 c0	 test	 rax, rax
  02404	7d 05		 jge	 SHORT $LN206@cckd_chkds

; 1368 :         goto cdsk_lseek_error;

  02406	e9 b9 80 00 00	 jmp	 $cdsk_lseek_error$827
$LN206@cckd_chkds:

; 1369 :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0240b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  02412	83 38 00	 cmp	 DWORD PTR [rax], 0
  02415	74 43		 je	 SHORT $LN207@cckd_chkds
  02417	41 b8 01 00 00
	00		 mov	 r8d, 1
  0241d	33 d2		 xor	 edx, edx
  0241f	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02426	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0242c	48 89 84 24 d8
	05 00 00	 mov	 QWORD PTR tv1117[rsp], rax
  02434	b9 02 00 00 00	 mov	 ecx, 2
  02439	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0243f	48 8b 8c 24 d8
	05 00 00	 mov	 rcx, QWORD PTR tv1117[rsp]
  02447	4c 8b c1	 mov	 r8, rcx
  0244a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170141
  02451	48 8b c8	 mov	 rcx, rax
  02454	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN207@cckd_chkds:

; 1370 :     if ((rc = read (fd, l1, len)) != len)

  0245a	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  02462	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  0246a	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02471	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  02477	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  0247e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  02485	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  0248c	74 05		 je	 SHORT $LN208@cckd_chkds

; 1371 :         goto cdsk_read_error;

  0248e	e9 81 82 00 00	 jmp	 $cdsk_read_error$828
$LN208@cckd_chkds:

; 1372 :     if (swapend) cckd_swapend_l1 (l1, (int)cdevhdr.num_L1tab);

  02493	83 bc 24 48 01
	00 00 00	 cmp	 DWORD PTR swapend$[rsp], 0
  0249b	74 14		 je	 SHORT $LN209@cckd_chkds
  0249d	8b 94 24 a4 0b
	00 00		 mov	 edx, DWORD PTR cdevhdr$[rsp+4]
  024a4	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  024ac	e8 00 00 00 00	 call	 cckd_swapend_l1
$LN209@cckd_chkds:

; 1373 :     lopos = CCKD_L1TAB_POS + l1size;

  024b1	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  024b9	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  024bf	89 84 24 dc 00
	00 00		 mov	 DWORD PTR lopos$[rsp], eax

; 1374 : 
; 1375 :     /*---------------------------------------------------------------
; 1376 :      * initialize the space table
; 1377 :      *---------------------------------------------------------------*/
; 1378 : 
; 1379 :     /* find number of non-null l1 entries */
; 1380 :     for (i = n = 0; i < cdevhdr.num_L1tab; i++)

  024c6	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR n$[rsp], 0
  024d1	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  024d8	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
  024df	eb 10		 jmp	 SHORT $LN7@cckd_chkds
$LN5@cckd_chkds:
  024e1	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  024e8	ff c0		 inc	 eax
  024ea	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN7@cckd_chkds:
  024f1	8b 84 24 a4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  024f8	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  024ff	7d 3e		 jge	 SHORT $LN6@cckd_chkds

; 1381 :         if (l1[i] != CCKD_NOSIZE && l1[i] != CCKD_MAXSIZE)

  02501	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02509	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  02511	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  02515	74 26		 je	 SHORT $LN210@cckd_chkds
  02517	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0251f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  02527	83 3c 81 ff	 cmp	 DWORD PTR [rcx+rax*4], -1 ; ffffffffH
  0252b	74 10		 je	 SHORT $LN210@cckd_chkds

; 1382 :             n++;

  0252d	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  02534	ff c0		 inc	 eax
  02536	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax
$LN210@cckd_chkds:
  0253d	eb a2		 jmp	 SHORT $LN5@cckd_chkds
$LN6@cckd_chkds:

; 1383 : 
; 1384 :     if (level >= 4) n = cdevhdr.num_L1tab;

  0253f	83 bc 24 d8 21
	04 00 04	 cmp	 DWORD PTR level$[rsp], 4
  02547	7c 0e		 jl	 SHORT $LN211@cckd_chkds
  02549	8b 84 24 a4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  02550	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax
$LN211@cckd_chkds:

; 1385 : 
; 1386 :     /* calculate max possible space table entries */
; 1387 :     n = 1 + 1 + 1                    // devhdr, cdevhdr, l1tab

  02557	69 84 24 b4 00
	00 00 00 01 00
	00		 imul	 eax, DWORD PTR n$[rsp], 256 ; 00000100H
  02562	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR n$[rsp]
  02569	8d 44 01 03	 lea	 eax, DWORD PTR [rcx+rax+3]
  0256d	69 8c 24 b4 00
	00 00 00 01 00
	00		 imul	 ecx, DWORD PTR n$[rsp], 256 ; 00000100H
  02578	8b 94 24 b4 00
	00 00		 mov	 edx, DWORD PTR n$[rsp]
  0257f	8d 4c 0a 01	 lea	 ecx, DWORD PTR [rdx+rcx+1]
  02583	8d 44 08 02	 lea	 eax, DWORD PTR [rax+rcx+2]
  02587	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 1388 :       + n                            // l2tabs
; 1389 :       + (n * 256)                    // trk/blk images
; 1390 :       + (1 + n + (n * 256) + 1)      // max possible free spaces
; 1391 :       + 1;                           // end-of-file
; 1392 : 
; 1393 :     /* obtain the space table */
; 1394 :     len = sizeof(SPCTAB);

  0258e	c7 84 24 a4 00
	00 00 18 00 00
	00		 mov	 DWORD PTR len$[rsp], 24

; 1395 :     if ((spctab = calloc (n, len)) == NULL)

  02599	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  025a1	48 63 8c 24 b4
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  025a9	48 8b d0	 mov	 rdx, rax
  025ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  025b2	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR spctab$[rsp], rax
  025ba	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR spctab$[rsp], 0
  025c3	75 05		 jne	 SHORT $LN212@cckd_chkds

; 1396 :         goto cdsk_calloc_error;

  025c5	e9 ac 88 00 00	 jmp	 $cdsk_calloc_error$830
$LN212@cckd_chkds:

; 1397 : 
; 1398 :     /* populate the table with what we have */
; 1399 :     s = 0;

  025ca	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR s$[rsp], 0

; 1400 : 
; 1401 :     /* devhdr */
; 1402 :     spctab[s].spc_typ = SPCTAB_DEVHDR;

  025d5	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  025dd	48 6b c0 18	 imul	 rax, rax, 24
  025e1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  025e9	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1

; 1403 :     spctab[s].spc_val = -1;

  025ed	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  025f5	48 6b c0 18	 imul	 rax, rax, 24
  025f9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02601	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 1404 :     spctab[s].spc_off = 0;

  02609	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02611	48 6b c0 18	 imul	 rax, rax, 24
  02615	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0261d	c7 44 01 0c 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+12], 0

; 1405 :     spctab[s].spc_len =

  02625	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0262d	48 6b c0 18	 imul	 rax, rax, 24
  02631	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02639	c7 44 01 14 00
	02 00 00	 mov	 DWORD PTR [rcx+rax+20], 512 ; 00000200H
  02641	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02649	48 6b c0 18	 imul	 rax, rax, 24
  0264d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02655	c7 44 01 10 00
	02 00 00	 mov	 DWORD PTR [rcx+rax+16], 512 ; 00000200H

; 1406 :     spctab[s].spc_siz = CKD_DEVHDR_SIZE;
; 1407 :     s++;

  0265d	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  02664	ff c0		 inc	 eax
  02666	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1408 :     /* cdevhdr */
; 1409 :     spctab[s].spc_typ = SPCTAB_CDEVHDR;

  0266d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02675	48 6b c0 18	 imul	 rax, rax, 24
  02679	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02681	c6 04 01 02	 mov	 BYTE PTR [rcx+rax], 2

; 1410 :     spctab[s].spc_val = -1;

  02685	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0268d	48 6b c0 18	 imul	 rax, rax, 24
  02691	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02699	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 1411 :     spctab[s].spc_off = CCKD_DEVHDR_POS;

  026a1	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  026a9	48 6b c0 18	 imul	 rax, rax, 24
  026ad	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  026b5	c7 44 01 0c 00
	02 00 00	 mov	 DWORD PTR [rcx+rax+12], 512 ; 00000200H

; 1412 :     spctab[s].spc_len =

  026bd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  026c5	48 6b c0 18	 imul	 rax, rax, 24
  026c9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  026d1	c7 44 01 14 00
	02 00 00	 mov	 DWORD PTR [rcx+rax+20], 512 ; 00000200H
  026d9	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  026e1	48 6b c0 18	 imul	 rax, rax, 24
  026e5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  026ed	c7 44 01 10 00
	02 00 00	 mov	 DWORD PTR [rcx+rax+16], 512 ; 00000200H

; 1413 :     spctab[s].spc_siz = CCKD_DEVHDR_SIZE;
; 1414 :     s++;

  026f5	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  026fc	ff c0		 inc	 eax
  026fe	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1415 :     /* l1 table */
; 1416 :     spctab[s].spc_typ = SPCTAB_L1;

  02705	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0270d	48 6b c0 18	 imul	 rax, rax, 24
  02711	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02719	c6 04 01 03	 mov	 BYTE PTR [rcx+rax], 3

; 1417 :     spctab[s].spc_val = -1;

  0271d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02725	48 6b c0 18	 imul	 rax, rax, 24
  02729	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02731	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 1418 :     spctab[s].spc_off = CCKD_L1TAB_POS;

  02739	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02741	48 6b c0 18	 imul	 rax, rax, 24
  02745	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0274d	c7 44 01 0c 00
	04 00 00	 mov	 DWORD PTR [rcx+rax+12], 1024 ; 00000400H

; 1419 :     spctab[s].spc_len =

  02755	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0275d	48 6b c0 18	 imul	 rax, rax, 24
  02761	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02769	8b 94 24 08 01
	00 00		 mov	 edx, DWORD PTR l1size$[rsp]
  02770	89 54 01 14	 mov	 DWORD PTR [rcx+rax+20], edx
  02774	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0277c	48 6b c0 18	 imul	 rax, rax, 24
  02780	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02788	8b 94 24 08 01
	00 00		 mov	 edx, DWORD PTR l1size$[rsp]
  0278f	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 1420 :     spctab[s].spc_siz = l1size;
; 1421 :     s++;

  02793	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  0279a	ff c0		 inc	 eax
  0279c	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1422 :     /* l2 tables */
; 1423 :     for (i = 0; i < cdevhdr.num_L1tab && level < 4; i++)

  027a3	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  027ae	eb 10		 jmp	 SHORT $LN10@cckd_chkds
$LN8@cckd_chkds:
  027b0	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  027b7	ff c0		 inc	 eax
  027b9	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN10@cckd_chkds:
  027c0	8b 84 24 a4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  027c7	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  027ce	0f 8d eb 00 00
	00		 jge	 $LN9@cckd_chkds
  027d4	83 bc 24 d8 21
	04 00 04	 cmp	 DWORD PTR level$[rsp], 4
  027dc	0f 8d dd 00 00
	00		 jge	 $LN9@cckd_chkds

; 1424 :     {
; 1425 :         if (l1[i] == CCKD_NOSIZE || l1[i] == CCKD_MAXSIZE)

  027e2	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  027ea	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  027f2	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  027f6	74 16		 je	 SHORT $LN214@cckd_chkds
  027f8	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02800	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  02808	83 3c 81 ff	 cmp	 DWORD PTR [rcx+rax*4], -1 ; ffffffffH
  0280c	75 02		 jne	 SHORT $LN213@cckd_chkds
$LN214@cckd_chkds:

; 1426 :             continue;

  0280e	eb a0		 jmp	 SHORT $LN8@cckd_chkds
$LN213@cckd_chkds:

; 1427 :         spctab[s].spc_typ = SPCTAB_L2;

  02810	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02818	48 6b c0 18	 imul	 rax, rax, 24
  0281c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02824	c6 04 01 04	 mov	 BYTE PTR [rcx+rax], 4

; 1428 :         spctab[s].spc_val = i;

  02828	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02830	48 6b c0 18	 imul	 rax, rax, 24
  02834	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0283c	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR i$[rsp]
  02843	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 1429 :         spctab[s].spc_off = l1[i];

  02847	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0284f	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  02857	48 6b c9 18	 imul	 rcx, rcx, 24
  0285b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02863	48 8b bc 24 30
	01 00 00	 mov	 rdi, QWORD PTR l1$[rsp]
  0286b	8b 04 87	 mov	 eax, DWORD PTR [rdi+rax*4]
  0286e	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 1430 :         spctab[s].spc_len =

  02872	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0287a	48 6b c0 18	 imul	 rax, rax, 24
  0287e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02886	c7 44 01 14 00
	08 00 00	 mov	 DWORD PTR [rcx+rax+20], 2048 ; 00000800H
  0288e	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02896	48 6b c0 18	 imul	 rax, rax, 24
  0289a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  028a2	c7 44 01 10 00
	08 00 00	 mov	 DWORD PTR [rcx+rax+16], 2048 ; 00000800H

; 1431 :         spctab[s].spc_siz = CCKD_L2TAB_SIZE;
; 1432 :         s++;

  028aa	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  028b1	ff c0		 inc	 eax
  028b3	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1433 :     }

  028ba	e9 f1 fe ff ff	 jmp	 $LN8@cckd_chkds
$LN9@cckd_chkds:

; 1434 :     /* end-of-file */
; 1435 :     spctab[s].spc_typ = SPCTAB_EOF;

  028bf	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  028c7	48 6b c0 18	 imul	 rax, rax, 24
  028cb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  028d3	c6 04 01 08	 mov	 BYTE PTR [rcx+rax], 8

; 1436 :     spctab[s].spc_val = -1;

  028d7	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  028df	48 6b c0 18	 imul	 rax, rax, 24
  028e3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  028eb	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 1437 :     spctab[s].spc_off = (U32)fst.st_size;

  028f3	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  028fb	48 6b c0 18	 imul	 rax, rax, 24
  028ff	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02907	8b 94 24 b8 0d
	00 00		 mov	 edx, DWORD PTR fst$[rsp+24]
  0290e	89 54 01 0c	 mov	 DWORD PTR [rcx+rax+12], edx

; 1438 :     spctab[s].spc_len =

  02912	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0291a	48 6b c0 18	 imul	 rax, rax, 24
  0291e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02926	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+20], 0
  0292e	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02936	48 6b c0 18	 imul	 rax, rax, 24
  0293a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02942	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+16], 0

; 1439 :     spctab[s].spc_siz = 0;
; 1440 :     s++;

  0294a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  02951	ff c0		 inc	 eax
  02953	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1441 : 
; 1442 :     qsort (spctab, s, sizeof(SPCTAB), cdsk_spctab_sort);

  0295a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02962	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab_sort
  02969	41 b8 18 00 00
	00		 mov	 r8d, 24
  0296f	48 8b d0	 mov	 rdx, rax
  02972	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0297a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 1443 : 
; 1444 :     /*---------------------------------------------------------------
; 1445 :      * Quick return if level -1
; 1446 :      *---------------------------------------------------------------*/
; 1447 : 
; 1448 :     if (level < 0)

  02980	83 bc 24 d8 21
	04 00 00	 cmp	 DWORD PTR level$[rsp], 0
  02988	0f 8d b2 00 00
	00		 jge	 $LN215@cckd_chkds

; 1449 :     {
; 1450 :         int err = 0;

  0298e	c7 84 24 40 02
	00 00 00 00 00
	00		 mov	 DWORD PTR err$4[rsp], 0

; 1451 :         /* check for overlaps */
; 1452 :         for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  02999	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  029a4	eb 10		 jmp	 SHORT $LN13@cckd_chkds
$LN11@cckd_chkds:
  029a6	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  029ad	ff c0		 inc	 eax
  029af	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN13@cckd_chkds:
  029b6	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  029be	48 6b c0 18	 imul	 rax, rax, 24
  029c2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  029ca	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  029ce	83 f8 08	 cmp	 eax, 8
  029d1	74 5e		 je	 SHORT $LN12@cckd_chkds

; 1453 :             if (spctab[i].spc_off + spctab[i].spc_siz > spctab[i+1].spc_off)

  029d3	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  029db	48 6b c0 18	 imul	 rax, rax, 24
  029df	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  029e7	48 6b c9 18	 imul	 rcx, rcx, 24
  029eb	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  029f3	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  029f7	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  029ff	03 44 0a 14	 add	 eax, DWORD PTR [rdx+rcx+20]
  02a03	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR i$[rsp]
  02a0a	ff c1		 inc	 ecx
  02a0c	48 63 c9	 movsxd	 rcx, ecx
  02a0f	48 6b c9 18	 imul	 rcx, rcx, 24
  02a13	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02a1b	3b 44 0a 0c	 cmp	 eax, DWORD PTR [rdx+rcx+12]
  02a1f	76 0b		 jbe	 SHORT $LN216@cckd_chkds

; 1454 :                 err = 1;

  02a21	c7 84 24 40 02
	00 00 01 00 00
	00		 mov	 DWORD PTR err$4[rsp], 1
$LN216@cckd_chkds:
  02a2c	e9 75 ff ff ff	 jmp	 $LN11@cckd_chkds
$LN12@cckd_chkds:

; 1455 :         /* exit if no errors */
; 1456 :         if (!err) goto cdsk_return_ok;

  02a31	83 bc 24 40 02
	00 00 00	 cmp	 DWORD PTR err$4[rsp], 0
  02a39	75 05		 jne	 SHORT $LN217@cckd_chkds
  02a3b	e9 3a 75 00 00	 jmp	 $cdsk_return_ok$831
$LN217@cckd_chkds:
$LN215@cckd_chkds:

; 1457 :     }
; 1458 : 
; 1459 :     /*---------------------------------------------------------------
; 1460 :      * obtain the l2errs table and recovery table
; 1461 :      *---------------------------------------------------------------*/
; 1462 : 
; 1463 :     len = sizeof(BYTE);

  02a40	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR len$[rsp], 1

; 1464 : 
; 1465 :     n = cdevhdr.num_L1tab;

  02a4b	8b 84 24 a4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  02a52	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 1466 :     if ((l2errs = calloc (n, len)) == NULL)

  02a59	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  02a61	48 63 8c 24 b4
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  02a69	48 8b d0	 mov	 rdx, rax
  02a6c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  02a72	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR l2errs$[rsp], rax
  02a7a	48 83 bc 24 68
	01 00 00 00	 cmp	 QWORD PTR l2errs$[rsp], 0
  02a83	75 05		 jne	 SHORT $LN218@cckd_chkds

; 1467 :         goto cdsk_calloc_error;

  02a85	e9 ec 83 00 00	 jmp	 $cdsk_calloc_error$830
$LN218@cckd_chkds:

; 1468 : 
; 1469 :     n = trks;

  02a8a	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  02a91	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 1470 :     if ((rcvtab = calloc (n, len)) == NULL)

  02a98	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  02aa0	48 63 8c 24 b4
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  02aa8	48 8b d0	 mov	 rdx, rax
  02aab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  02ab1	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR rcvtab$[rsp], rax
  02ab9	48 83 bc 24 00
	01 00 00 00	 cmp	 QWORD PTR rcvtab$[rsp], 0
  02ac2	75 05		 jne	 SHORT $LN219@cckd_chkds

; 1471 :         goto cdsk_calloc_error;

  02ac4	e9 ad 83 00 00	 jmp	 $cdsk_calloc_error$830
$LN219@cckd_chkds:

; 1472 : 
; 1473 :     /*---------------------------------------------------------------
; 1474 :      * Special processing for level 4 (recover everything)
; 1475 :      *---------------------------------------------------------------*/
; 1476 : 
; 1477 :     if (level == 4)

  02ac9	83 bc 24 d8 21
	04 00 04	 cmp	 DWORD PTR level$[rsp], 4
  02ad1	75 53		 jne	 SHORT $LN220@cckd_chkds

; 1478 :     {
; 1479 :         memset (l2errs, 1, cdevhdr.num_L1tab);

  02ad3	48 63 84 24 a4
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  02adb	48 89 84 24 e0
	05 00 00	 mov	 QWORD PTR tv1335[rsp], rax
  02ae3	48 8b bc 24 68
	01 00 00	 mov	 rdi, QWORD PTR l2errs$[rsp]
  02aeb	b8 01 00 00 00	 mov	 eax, 1
  02af0	48 8b 8c 24 e0
	05 00 00	 mov	 rcx, QWORD PTR tv1335[rsp]
  02af8	f3 aa		 rep stosb

; 1480 :         memset (rcvtab, 1, trks);

  02afa	48 63 84 24 f4
	00 00 00	 movsxd	 rax, DWORD PTR trks$[rsp]
  02b02	48 89 84 24 e8
	05 00 00	 mov	 QWORD PTR tv1340[rsp], rax
  02b0a	48 8b bc 24 00
	01 00 00	 mov	 rdi, QWORD PTR rcvtab$[rsp]
  02b12	b8 01 00 00 00	 mov	 eax, 1
  02b17	48 8b 8c 24 e8
	05 00 00	 mov	 rcx, QWORD PTR tv1340[rsp]
  02b1f	f3 aa		 rep stosb

; 1481 :         goto cdsk_recovery;

  02b21	e9 2b 2e 00 00	 jmp	 $cdsk_recovery$832
$LN220@cckd_chkds:

; 1482 :     }
; 1483 : 
; 1484 :     /*---------------------------------------------------------------
; 1485 :      * Read the level 2 tables
; 1486 :      *---------------------------------------------------------------*/
; 1487 : 
; 1488 :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  02b26	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  02b31	eb 10		 jmp	 SHORT $LN16@cckd_chkds
$LN14@cckd_chkds:
  02b33	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  02b3a	ff c0		 inc	 eax
  02b3c	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN16@cckd_chkds:
  02b43	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02b4b	48 6b c0 18	 imul	 rax, rax, 24
  02b4f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02b57	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02b5b	83 f8 08	 cmp	 eax, 8
  02b5e	0f 84 95 02 00
	00		 je	 $LN15@cckd_chkds

; 1489 :     {
; 1490 :         if (spctab[i].spc_typ != SPCTAB_L2
; 1491 :          || spctab[i].spc_off < lopos || spctab[i].spc_off > hipos)

  02b64	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02b6c	48 6b c0 18	 imul	 rax, rax, 24
  02b70	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02b78	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02b7c	83 f8 04	 cmp	 eax, 4
  02b7f	75 42		 jne	 SHORT $LN222@cckd_chkds
  02b81	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02b89	48 6b c0 18	 imul	 rax, rax, 24
  02b8d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02b95	8b 94 24 dc 00
	00 00		 mov	 edx, DWORD PTR lopos$[rsp]
  02b9c	39 54 01 0c	 cmp	 DWORD PTR [rcx+rax+12], edx
  02ba0	72 21		 jb	 SHORT $LN222@cckd_chkds
  02ba2	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02baa	48 6b c0 18	 imul	 rax, rax, 24
  02bae	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02bb6	8b 94 24 28 01
	00 00		 mov	 edx, DWORD PTR hipos$[rsp]
  02bbd	39 54 01 0c	 cmp	 DWORD PTR [rcx+rax+12], edx
  02bc1	76 05		 jbe	 SHORT $LN221@cckd_chkds
$LN222@cckd_chkds:

; 1492 :             continue;

  02bc3	e9 6b ff ff ff	 jmp	 $LN14@cckd_chkds
$LN221@cckd_chkds:

; 1493 : 
; 1494 :         off = spctab[i].spc_off;

  02bc8	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02bd0	48 6b c0 18	 imul	 rax, rax, 24
  02bd4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02bdc	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  02be0	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 1495 :         if ( lseek (fd, off, SEEK_SET) < 0 )

  02be8	45 33 c0	 xor	 r8d, r8d
  02beb	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  02bf3	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02bfa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  02c00	48 85 c0	 test	 rax, rax
  02c03	7d 05		 jge	 SHORT $LN223@cckd_chkds

; 1496 :             goto cdsk_lseek_error;

  02c05	e9 ba 78 00 00	 jmp	 $cdsk_lseek_error$827
$LN223@cckd_chkds:

; 1497 :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  02c0a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  02c11	83 38 00	 cmp	 DWORD PTR [rax], 0
  02c14	74 43		 je	 SHORT $LN224@cckd_chkds
  02c16	41 b8 01 00 00
	00		 mov	 r8d, 1
  02c1c	33 d2		 xor	 edx, edx
  02c1e	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02c25	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  02c2b	48 89 84 24 f0
	05 00 00	 mov	 QWORD PTR tv1378[rsp], rax
  02c33	b9 02 00 00 00	 mov	 ecx, 2
  02c38	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02c3e	48 8b 8c 24 f0
	05 00 00	 mov	 rcx, QWORD PTR tv1378[rsp]
  02c46	4c 8b c1	 mov	 r8, rcx
  02c49	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170159
  02c50	48 8b c8	 mov	 rcx, rax
  02c53	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN224@cckd_chkds:

; 1498 :         len = CCKD_L2TAB_SIZE;

  02c59	c7 84 24 a4 00
	00 00 00 08 00
	00		 mov	 DWORD PTR len$[rsp], 2048 ; 00000800H

; 1499 :         if ((rc = read (fd, l2tab, len)) != len)

  02c64	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  02c6c	48 8d 94 24 e0
	0f 00 00	 lea	 rdx, QWORD PTR l2tab$[rsp]
  02c74	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02c7b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  02c81	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  02c88	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  02c8f	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  02c96	74 05		 je	 SHORT $LN225@cckd_chkds

; 1500 :             goto cdsk_read_error;

  02c98	e9 77 7a 00 00	 jmp	 $cdsk_read_error$828
$LN225@cckd_chkds:

; 1501 :         if (swapend) cckd_swapend_l2 (l2tab);

  02c9d	83 bc 24 48 01
	00 00 00	 cmp	 DWORD PTR swapend$[rsp], 0
  02ca5	74 0d		 je	 SHORT $LN226@cckd_chkds
  02ca7	48 8d 8c 24 e0
	0f 00 00	 lea	 rcx, QWORD PTR l2tab$[rsp]
  02caf	e8 00 00 00 00	 call	 cckd_swapend_l2
$LN226@cckd_chkds:

; 1502 : 
; 1503 :         /* add trks/blkgrps to the space table */
; 1504 :         for (j = 0; j < 256; j++)

  02cb4	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  02cbf	eb 10		 jmp	 SHORT $LN19@cckd_chkds
$LN17@cckd_chkds:
  02cc1	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  02cc8	ff c0		 inc	 eax
  02cca	89 84 24 b0 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN19@cckd_chkds:
  02cd1	81 bc 24 b0 00
	00 00 00 01 00
	00		 cmp	 DWORD PTR j$[rsp], 256	; 00000100H
  02cdc	0f 8d 12 01 00
	00		 jge	 $LN18@cckd_chkds

; 1505 :         {
; 1506 :             if (l2tab[j].L2_trkoff != CCKD_NOSIZE && l2tab[j].L2_trkoff != CCKD_MAXSIZE)

  02ce2	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  02cea	83 bc c4 e0 0f
	00 00 00	 cmp	 DWORD PTR l2tab$[rsp+rax*8], 0
  02cf2	0f 84 f7 00 00
	00		 je	 $LN227@cckd_chkds
  02cf8	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  02d00	83 bc c4 e0 0f
	00 00 ff	 cmp	 DWORD PTR l2tab$[rsp+rax*8], -1 ; ffffffffH
  02d08	0f 84 e1 00 00
	00		 je	 $LN227@cckd_chkds

; 1507 :             {
; 1508 :                 spctab[s].spc_typ = trktyp;

  02d0e	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02d16	48 6b c0 18	 imul	 rax, rax, 24
  02d1a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02d22	0f b6 94 24 d0
	00 00 00	 movzx	 edx, BYTE PTR trktyp$[rsp]
  02d2a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1509 :                 spctab[s].spc_val = spctab[i].spc_val * 256 + j;

  02d2d	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02d35	48 6b c0 18	 imul	 rax, rax, 24
  02d39	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02d41	69 44 01 04 00
	01 00 00	 imul	 eax, DWORD PTR [rcx+rax+4], 256 ; 00000100H
  02d49	03 84 24 b0 00
	00 00		 add	 eax, DWORD PTR j$[rsp]
  02d50	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  02d58	48 6b c9 18	 imul	 rcx, rcx, 24
  02d5c	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02d64	89 44 0a 04	 mov	 DWORD PTR [rdx+rcx+4], eax

; 1510 :                 spctab[s].spc_off = l2tab[j].L2_trkoff;

  02d68	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  02d70	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  02d78	48 6b c9 18	 imul	 rcx, rcx, 24
  02d7c	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02d84	8b 84 c4 e0 0f
	00 00		 mov	 eax, DWORD PTR l2tab$[rsp+rax*8]
  02d8b	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 1511 :                 spctab[s].spc_len = l2tab[j].L2_len;

  02d8f	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  02d97	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  02d9f	48 6b c9 18	 imul	 rcx, rcx, 24
  02da3	0f b7 84 c4 e4
	0f 00 00	 movzx	 eax, WORD PTR l2tab$[rsp+rax*8+4]
  02dab	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02db3	89 44 0a 10	 mov	 DWORD PTR [rdx+rcx+16], eax

; 1512 :                 spctab[s].spc_siz = l2tab[j].L2_size;

  02db7	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  02dbf	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  02dc7	48 6b c9 18	 imul	 rcx, rcx, 24
  02dcb	0f b7 84 c4 e6
	0f 00 00	 movzx	 eax, WORD PTR l2tab$[rsp+rax*8+6]
  02dd3	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02ddb	89 44 0a 14	 mov	 DWORD PTR [rdx+rcx+20], eax

; 1513 :                 s++;

  02ddf	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  02de6	ff c0		 inc	 eax
  02de8	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax
$LN227@cckd_chkds:

; 1514 :             }
; 1515 :         }

  02def	e9 cd fe ff ff	 jmp	 $LN17@cckd_chkds
$LN18@cckd_chkds:

; 1516 :     }

  02df4	e9 3a fd ff ff	 jmp	 $LN14@cckd_chkds
$LN15@cckd_chkds:

; 1517 :     qsort (spctab, s, sizeof(SPCTAB), cdsk_spctab_sort);

  02df9	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  02e01	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab_sort
  02e08	41 b8 18 00 00
	00		 mov	 r8d, 24
  02e0e	48 8b d0	 mov	 rdx, rax
  02e11	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02e19	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 1518 : 
; 1519 :     /*---------------------------------------------------------------
; 1520 :      * Consistency checks.
; 1521 :      *
; 1522 :      * The space table is now populated with everything but free
; 1523 :      * space.  Therefore we can infer what the free space should
; 1524 :      * be (ie gaps between allocated spaces).
; 1525 :      *---------------------------------------------------------------*/
; 1526 : 
; 1527 :     lopos = CCKD_L1TAB_POS + l1size;

  02e1f	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  02e27	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  02e2d	89 84 24 dc 00
	00 00		 mov	 DWORD PTR lopos$[rsp], eax

; 1528 :     hipos = (U32)fst.st_size;

  02e34	8b 84 24 b8 0d
	00 00		 mov	 eax, DWORD PTR fst$[rsp+24]
  02e3b	89 84 24 28 01
	00 00		 mov	 DWORD PTR hipos$[rsp], eax

; 1529 : 
; 1530 :     /* Make adjustment if new format free space is at the end */
; 1531 :     len = spctab[s-1].spc_off - (spctab[s-2].spc_off + spctab[s-2].spc_siz);

  02e42	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  02e49	ff c8		 dec	 eax
  02e4b	48 98		 cdqe
  02e4d	48 6b c0 18	 imul	 rax, rax, 24
  02e51	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR s$[rsp]
  02e58	83 e9 02	 sub	 ecx, 2
  02e5b	48 63 c9	 movsxd	 rcx, ecx
  02e5e	48 6b c9 18	 imul	 rcx, rcx, 24
  02e62	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR s$[rsp]
  02e69	83 ea 02	 sub	 edx, 2
  02e6c	48 63 d2	 movsxd	 rdx, edx
  02e6f	48 6b d2 18	 imul	 rdx, rdx, 24
  02e73	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  02e7b	8b 4c 0f 0c	 mov	 ecx, DWORD PTR [rdi+rcx+12]
  02e7f	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  02e87	03 4c 17 14	 add	 ecx, DWORD PTR [rdi+rdx+20]
  02e8b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02e93	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  02e97	2b c1		 sub	 eax, ecx
  02e99	89 84 24 a4 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 1532 :     if (len > 0
; 1533 :      && cdevhdr.cdh_size == cdevhdr.free_off
; 1534 :      && cdevhdr.cdh_size + len == spctab[s-1].spc_off)

  02ea0	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR len$[rsp], 0
  02ea8	0f 8e 9d 00 00
	00		 jle	 $LN228@cckd_chkds
  02eae	8b 84 24 b4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+20]
  02eb5	39 84 24 ac 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+12], eax
  02ebc	0f 85 89 00 00
	00		 jne	 $LN228@cckd_chkds
  02ec2	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  02ec9	8b 8c 24 ac 0b
	00 00		 mov	 ecx, DWORD PTR cdevhdr$[rsp+12]
  02ed0	03 c8		 add	 ecx, eax
  02ed2	8b c1		 mov	 eax, ecx
  02ed4	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR s$[rsp]
  02edb	ff c9		 dec	 ecx
  02edd	48 63 c9	 movsxd	 rcx, ecx
  02ee0	48 6b c9 18	 imul	 rcx, rcx, 24
  02ee4	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02eec	3b 44 0a 0c	 cmp	 eax, DWORD PTR [rdx+rcx+12]
  02ef0	75 59		 jne	 SHORT $LN228@cckd_chkds

; 1535 :     {
; 1536 :         spctab[s-1].spc_off -= len;

  02ef2	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  02ef9	ff c8		 dec	 eax
  02efb	48 98		 cdqe
  02efd	48 6b c0 18	 imul	 rax, rax, 24
  02f01	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02f09	8b 94 24 a4 00
	00 00		 mov	 edx, DWORD PTR len$[rsp]
  02f10	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  02f14	2b c2		 sub	 eax, edx
  02f16	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR s$[rsp]
  02f1d	ff c9		 dec	 ecx
  02f1f	48 63 c9	 movsxd	 rcx, ecx
  02f22	48 6b c9 18	 imul	 rcx, rcx, 24
  02f26	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02f2e	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 1537 :         hipos -= len;

  02f32	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  02f39	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR hipos$[rsp]
  02f40	2b c8		 sub	 ecx, eax
  02f42	8b c1		 mov	 eax, ecx
  02f44	89 84 24 28 01
	00 00		 mov	 DWORD PTR hipos$[rsp], eax
$LN228@cckd_chkds:

; 1538 :     }
; 1539 : 
; 1540 :     memset( &cdevhdr2, 0, CCKD_DEVHDR_SIZE );

  02f4b	48 8d 84 24 e0
	0d 00 00	 lea	 rax, QWORD PTR cdevhdr2$[rsp]
  02f53	48 8b f8	 mov	 rdi, rax
  02f56	33 c0		 xor	 eax, eax
  02f58	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  02f5d	f3 aa		 rep stosb

; 1541 :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  02f5f	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  02f6a	eb 10		 jmp	 SHORT $LN22@cckd_chkds
$LN20@cckd_chkds:
  02f6c	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  02f73	ff c0		 inc	 eax
  02f75	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN22@cckd_chkds:
  02f7c	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02f84	48 6b c0 18	 imul	 rax, rax, 24
  02f88	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  02f90	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02f94	83 f8 08	 cmp	 eax, 8
  02f97	0f 84 33 0f 00
	00		 je	 $LN21@cckd_chkds

; 1542 :     {
; 1543 :         /* Calculate gap size */
; 1544 :         len = spctab[i+1].spc_off - (spctab[i].spc_off + spctab[i].spc_siz);

  02f9d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  02fa4	ff c0		 inc	 eax
  02fa6	48 98		 cdqe
  02fa8	48 6b c0 18	 imul	 rax, rax, 24
  02fac	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  02fb4	48 6b c9 18	 imul	 rcx, rcx, 24
  02fb8	48 63 94 24 90
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  02fc0	48 6b d2 18	 imul	 rdx, rdx, 24
  02fc4	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  02fcc	8b 4c 0f 0c	 mov	 ecx, DWORD PTR [rdi+rcx+12]
  02fd0	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  02fd8	03 4c 17 14	 add	 ecx, DWORD PTR [rdi+rdx+20]
  02fdc	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  02fe4	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  02fe8	2b c1		 sub	 eax, ecx
  02fea	89 84 24 a4 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 1545 : 
; 1546 :         /* Update space statistics */
; 1547 :         cdevhdr2.cdh_size += spctab[i].spc_siz + len;

  02ff1	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  02ff9	48 6b c0 18	 imul	 rax, rax, 24
  02ffd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03005	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  03009	03 84 24 a4 00
	00 00		 add	 eax, DWORD PTR len$[rsp]
  03010	8b 8c 24 ec 0d
	00 00		 mov	 ecx, DWORD PTR cdevhdr2$[rsp+12]
  03017	03 c8		 add	 ecx, eax
  03019	8b c1		 mov	 eax, ecx
  0301b	89 84 24 ec 0d
	00 00		 mov	 DWORD PTR cdevhdr2$[rsp+12], eax

; 1548 :         cdevhdr2.cdh_used += spctab[i].spc_len;

  03022	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0302a	48 6b c0 18	 imul	 rax, rax, 24
  0302e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03036	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  0303a	8b 8c 24 f0 0d
	00 00		 mov	 ecx, DWORD PTR cdevhdr2$[rsp+16]
  03041	03 c8		 add	 ecx, eax
  03043	8b c1		 mov	 eax, ecx
  03045	89 84 24 f0 0d
	00 00		 mov	 DWORD PTR cdevhdr2$[rsp+16], eax

; 1549 :         if (len > 0)

  0304c	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR len$[rsp], 0
  03054	7e 47		 jle	 SHORT $LN229@cckd_chkds

; 1550 :         {
; 1551 :             cdevhdr2.free_num++;

  03056	8b 84 24 00 0e
	00 00		 mov	 eax, DWORD PTR cdevhdr2$[rsp+32]
  0305d	ff c0		 inc	 eax
  0305f	89 84 24 00 0e
	00 00		 mov	 DWORD PTR cdevhdr2$[rsp+32], eax

; 1552 :             cdevhdr2.free_total += len;

  03066	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  0306d	8b 8c 24 f8 0d
	00 00		 mov	 ecx, DWORD PTR cdevhdr2$[rsp+24]
  03074	03 c8		 add	 ecx, eax
  03076	8b c1		 mov	 eax, ecx
  03078	89 84 24 f8 0d
	00 00		 mov	 DWORD PTR cdevhdr2$[rsp+24], eax

; 1553 :             if (cdevhdr2.free_largest < (U32)len)

  0307f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  03086	39 84 24 fc 0d
	00 00		 cmp	 DWORD PTR cdevhdr2$[rsp+28], eax
  0308d	73 0e		 jae	 SHORT $LN230@cckd_chkds

; 1554 :                 cdevhdr2.free_largest = (U32)len;

  0308f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  03096	89 84 24 fc 0d
	00 00		 mov	 DWORD PTR cdevhdr2$[rsp+28], eax
$LN230@cckd_chkds:
$LN229@cckd_chkds:

; 1555 :         }
; 1556 :         if (spctab[i].spc_typ == trktyp)

  0309d	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  030a5	48 6b c0 18	 imul	 rax, rax, 24
  030a9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  030b1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  030b5	3b 84 24 d0 00
	00 00		 cmp	 eax, DWORD PTR trktyp$[rsp]
  030bc	0f 85 88 00 00
	00		 jne	 $LN231@cckd_chkds

; 1557 :         {
; 1558 :             cdevhdr2.free_total += spctab[i].spc_siz - spctab[i].spc_len;

  030c2	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  030ca	48 6b c0 18	 imul	 rax, rax, 24
  030ce	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  030d6	48 6b c9 18	 imul	 rcx, rcx, 24
  030da	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  030e2	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  030ea	8b 4c 0f 10	 mov	 ecx, DWORD PTR [rdi+rcx+16]
  030ee	8b 44 02 14	 mov	 eax, DWORD PTR [rdx+rax+20]
  030f2	2b c1		 sub	 eax, ecx
  030f4	8b 8c 24 f8 0d
	00 00		 mov	 ecx, DWORD PTR cdevhdr2$[rsp+24]
  030fb	03 c8		 add	 ecx, eax
  030fd	8b c1		 mov	 eax, ecx
  030ff	89 84 24 f8 0d
	00 00		 mov	 DWORD PTR cdevhdr2$[rsp+24], eax

; 1559 :             cdevhdr2.free_imbed += spctab[i].spc_siz - spctab[i].spc_len;

  03106	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0310e	48 6b c0 18	 imul	 rax, rax, 24
  03112	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  0311a	48 6b c9 18	 imul	 rcx, rcx, 24
  0311e	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  03126	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  0312e	8b 4c 0f 10	 mov	 ecx, DWORD PTR [rdi+rcx+16]
  03132	8b 44 02 14	 mov	 eax, DWORD PTR [rdx+rax+20]
  03136	2b c1		 sub	 eax, ecx
  03138	8b 8c 24 04 0e
	00 00		 mov	 ecx, DWORD PTR cdevhdr2$[rsp+36]
  0313f	03 c8		 add	 ecx, eax
  03141	8b c1		 mov	 eax, ecx
  03143	89 84 24 04 0e
	00 00		 mov	 DWORD PTR cdevhdr2$[rsp+36], eax
$LN231@cckd_chkds:

; 1560 :         }
; 1561 : 
; 1562 :         /* ignore devhdr, cdevhdr and l1 (these are `out of bounds') */
; 1563 :         if (spctab[i].spc_typ == SPCTAB_DEVHDR
; 1564 :          || spctab[i].spc_typ == SPCTAB_CDEVHDR
; 1565 :          || spctab[i].spc_typ == SPCTAB_L1

  0314a	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03152	48 6b c0 18	 imul	 rax, rax, 24
  03156	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0315e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03162	83 f8 01	 cmp	 eax, 1
  03165	74 3a		 je	 SHORT $LN233@cckd_chkds
  03167	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0316f	48 6b c0 18	 imul	 rax, rax, 24
  03173	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0317b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0317f	83 f8 02	 cmp	 eax, 2
  03182	74 1d		 je	 SHORT $LN233@cckd_chkds
  03184	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0318c	48 6b c0 18	 imul	 rax, rax, 24
  03190	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03198	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0319c	83 f8 03	 cmp	 eax, 3
  0319f	75 05		 jne	 SHORT $LN232@cckd_chkds
$LN233@cckd_chkds:

; 1566 :            )
; 1567 :             continue;

  031a1	e9 c6 fd ff ff	 jmp	 $LN20@cckd_chkds
$LN232@cckd_chkds:

; 1568 : 
; 1569 :         /* check if the space is out of bounds */
; 1570 :         valid = (off_t)spctab[i].spc_off >= lopos

  031a6	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  031ae	48 6b c0 18	 imul	 rax, rax, 24
  031b2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  031ba	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  031be	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR lopos$[rsp]
  031c5	48 3b c1	 cmp	 rax, rcx
  031c8	7c 4c		 jl	 SHORT $LN619@cckd_chkds
  031ca	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  031d2	48 6b c0 18	 imul	 rax, rax, 24
  031d6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  031de	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  031e2	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  031ea	48 6b c9 18	 imul	 rcx, rcx, 24
  031ee	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  031f6	8b 4c 0a 14	 mov	 ecx, DWORD PTR [rdx+rcx+20]
  031fa	48 03 c1	 add	 rax, rcx
  031fd	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR hipos$[rsp]
  03204	48 3b c1	 cmp	 rax, rcx
  03207	7f 0d		 jg	 SHORT $LN619@cckd_chkds
  03209	c7 84 24 44 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1597[rsp], 1
  03214	eb 0b		 jmp	 SHORT $LN620@cckd_chkds
$LN619@cckd_chkds:
  03216	c7 84 24 44 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1597[rsp], 0
$LN620@cckd_chkds:
  03221	8b 84 24 44 02
	00 00		 mov	 eax, DWORD PTR tv1597[rsp]
  03228	89 84 24 70 01
	00 00		 mov	 DWORD PTR valid$[rsp], eax

; 1571 :              && (off_t)spctab[i].spc_off + spctab[i].spc_siz <= hipos;
; 1572 : 
; 1573 :         /* Overlap check */
; 1574 :         if (len < 0 || !valid)

  0322f	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR len$[rsp], 0
  03237	7c 0e		 jl	 SHORT $LN236@cckd_chkds
  03239	83 bc 24 70 01
	00 00 00	 cmp	 DWORD PTR valid$[rsp], 0
  03241	0f 85 97 08 00
	00		 jne	 $LN234@cckd_chkds
$LN236@cckd_chkds:

; 1575 :         {
; 1576 :             char space1[32], space2[32];
; 1577 :             recovery = 1;

  03247	c7 84 24 0c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR recovery$[rsp], 1

; 1578 : 
; 1579 :             /* issue error message */
; 1580 :             j = MSGBUF(space1, "%s", spc_typ_to_str( spctab[i].spc_typ ));

  03252	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0325a	48 6b c0 18	 imul	 rax, rax, 24
  0325e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03266	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  0326a	e8 00 00 00 00	 call	 spc_typ_to_str
  0326f	4c 8b c8	 mov	 r9, rax
  03272	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170172
  03279	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0327e	48 8d 8c 24 e0
	1f 00 00	 lea	 rcx, QWORD PTR space1$8[rsp]
  03286	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0328c	89 84 24 b0 00
	00 00		 mov	 DWORD PTR j$[rsp], eax

; 1581 :             if (spctab[i].spc_val >= 0)

  03293	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0329b	48 6b c0 18	 imul	 rax, rax, 24
  0329f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  032a7	83 7c 01 04 00	 cmp	 DWORD PTR [rcx+rax+4], 0
  032ac	7c 35		 jl	 SHORT $LN237@cckd_chkds

; 1582 :                 sprintf(space1+j, "[%d]", spctab[i].spc_val);

  032ae	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  032b6	48 6b c0 18	 imul	 rax, rax, 24
  032ba	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  032c2	48 8d 8c 0c e0
	1f 00 00	 lea	 rcx, QWORD PTR space1$8[rsp+rcx]
  032ca	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  032d2	44 8b 44 02 04	 mov	 r8d, DWORD PTR [rdx+rax+4]
  032d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170174
  032de	e8 00 00 00 00	 call	 sprintf
$LN237@cckd_chkds:

; 1583 :             j = MSGBUF(space2, "%s", spc_typ_to_str( spctab[i+1].spc_typ ));

  032e3	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  032ea	ff c0		 inc	 eax
  032ec	48 98		 cdqe
  032ee	48 6b c0 18	 imul	 rax, rax, 24
  032f2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  032fa	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  032fe	e8 00 00 00 00	 call	 spc_typ_to_str
  03303	4c 8b c8	 mov	 r9, rax
  03306	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170175
  0330d	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  03312	48 8d 8c 24 00
	20 00 00	 lea	 rcx, QWORD PTR space2$9[rsp]
  0331a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  03320	89 84 24 b0 00
	00 00		 mov	 DWORD PTR j$[rsp], eax

; 1584 :             if (spctab[i+1].spc_val >= 0)

  03327	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0332e	ff c0		 inc	 eax
  03330	48 98		 cdqe
  03332	48 6b c0 18	 imul	 rax, rax, 24
  03336	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0333e	83 7c 01 04 00	 cmp	 DWORD PTR [rcx+rax+4], 0
  03343	7c 38		 jl	 SHORT $LN238@cckd_chkds

; 1585 :                 sprintf(space2+j, "[%d]", spctab[i+1].spc_val);

  03345	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0334c	ff c0		 inc	 eax
  0334e	48 98		 cdqe
  03350	48 6b c0 18	 imul	 rax, rax, 24
  03354	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  0335c	48 8d 8c 0c 00
	20 00 00	 lea	 rcx, QWORD PTR space2$9[rsp+rcx]
  03364	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0336c	44 8b 44 02 04	 mov	 r8d, DWORD PTR [rdx+rax+4]
  03371	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170177
  03378	e8 00 00 00 00	 call	 sprintf
$LN238@cckd_chkds:

; 1586 : 
; 1587 :             if (!valid)

  0337d	83 bc 24 70 01
	00 00 00	 cmp	 DWORD PTR valid$[rsp], 0
  03385	0f 85 a6 02 00
	00		 jne	 $LN239@cckd_chkds

; 1588 :             {
; 1589 :                 if(dev->batch)

  0338b	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03393	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03399	c1 e8 0a	 shr	 eax, 10
  0339c	83 e0 01	 and	 eax, 1
  0339f	85 c0		 test	 eax, eax
  033a1	0f 84 45 01 00
	00		 je	 $LN241@cckd_chkds

; 1590 :                     // "%1d:%04X CCKD file %s: %s offset 0x%16.16"PRIX64" len %"PRId64" is out of bounds"
; 1591 :                     FWRMSG( stdout, HHC00365, "W", LCSS_DEVNUM, dev->filename,

  033a7	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  033b0	74 15		 je	 SHORT $LN621@cckd_chkds
  033b2	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  033ba	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  033be	89 84 24 48 02
	00 00		 mov	 DWORD PTR tv1676[rsp], eax
  033c5	eb 0b		 jmp	 SHORT $LN622@cckd_chkds
$LN621@cckd_chkds:
  033c7	c7 84 24 48 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1676[rsp], 0
$LN622@cckd_chkds:
  033d2	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  033db	74 17		 je	 SHORT $LN623@cckd_chkds
  033dd	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  033e5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  033e9	d1 f8		 sar	 eax, 1
  033eb	89 84 24 4c 02
	00 00		 mov	 DWORD PTR tv1682[rsp], eax
  033f2	eb 0b		 jmp	 SHORT $LN624@cckd_chkds
$LN623@cckd_chkds:
  033f4	c7 84 24 4c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1682[rsp], 0
$LN624@cckd_chkds:
  033ff	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03407	48 6b c0 18	 imul	 rax, rax, 24
  0340b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03413	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  03417	48 89 84 24 f8
	05 00 00	 mov	 QWORD PTR tv1662[rsp], rax
  0341f	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  03427	48 6b c9 18	 imul	 rcx, rcx, 24
  0342b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  03433	8b 4c 0a 0c	 mov	 ecx, DWORD PTR [rdx+rcx+12]
  03437	48 89 8c 24 00
	06 00 00	 mov	 QWORD PTR tv1668[rsp], rcx
  0343f	48 8b 94 24 d0
	21 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  03447	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  0344e	48 89 94 24 08
	06 00 00	 mov	 QWORD PTR tv1671[rsp], rdx
  03456	b9 01 00 00 00	 mov	 ecx, 1
  0345b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03461	48 8b 8c 24 f8
	05 00 00	 mov	 rcx, QWORD PTR tv1662[rsp]
  03469	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0346e	48 8b 8c 24 00
	06 00 00	 mov	 rcx, QWORD PTR tv1668[rsp]
  03476	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0347b	48 8d 8c 24 e0
	1f 00 00	 lea	 rcx, QWORD PTR space1$8[rsp]
  03483	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03488	48 8b 8c 24 08
	06 00 00	 mov	 rcx, QWORD PTR tv1671[rsp]
  03490	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03495	8b 8c 24 48 02
	00 00		 mov	 ecx, DWORD PTR tv1676[rsp]
  0349c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  034a0	8b 8c 24 4c 02
	00 00		 mov	 ecx, DWORD PTR tv1682[rsp]
  034a7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  034ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170182
  034b2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  034b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170183
  034be	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  034c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  034c8	41 b9 03 00 00
	00		 mov	 r9d, 3
  034ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170184
  034d5	ba 38 06 00 00	 mov	 edx, 1592		; 00000638H
  034da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170185
  034e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  034e7	e9 40 01 00 00	 jmp	 $LN242@cckd_chkds
$LN241@cckd_chkds:

; 1592 :                             space1, (U64)spctab[i].spc_off, (U64)spctab[i].spc_siz);
; 1593 :                 else
; 1594 :                     // "%1d:%04X CCKD file %s: %s offset 0x%16.16"PRIX64" len %"PRId64" is out of bounds"
; 1595 :                     WRMSG( HHC00365, "W", LCSS_DEVNUM, dev->filename,

  034ec	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  034f5	74 15		 je	 SHORT $LN625@cckd_chkds
  034f7	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  034ff	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03503	89 84 24 50 02
	00 00		 mov	 DWORD PTR tv1711[rsp], eax
  0350a	eb 0b		 jmp	 SHORT $LN626@cckd_chkds
$LN625@cckd_chkds:
  0350c	c7 84 24 50 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1711[rsp], 0
$LN626@cckd_chkds:
  03517	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03520	74 17		 je	 SHORT $LN627@cckd_chkds
  03522	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0352a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0352e	d1 f8		 sar	 eax, 1
  03530	89 84 24 54 02
	00 00		 mov	 DWORD PTR tv1717[rsp], eax
  03537	eb 0b		 jmp	 SHORT $LN628@cckd_chkds
$LN627@cckd_chkds:
  03539	c7 84 24 54 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1717[rsp], 0
$LN628@cckd_chkds:
  03544	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0354c	48 6b c0 18	 imul	 rax, rax, 24
  03550	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03558	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  0355c	48 89 84 24 10
	06 00 00	 mov	 QWORD PTR tv1697[rsp], rax
  03564	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  0356c	48 6b c9 18	 imul	 rcx, rcx, 24
  03570	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  03578	8b 4c 0a 0c	 mov	 ecx, DWORD PTR [rdx+rcx+12]
  0357c	48 89 8c 24 18
	06 00 00	 mov	 QWORD PTR tv1703[rsp], rcx
  03584	48 8b 94 24 d0
	21 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0358c	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  03593	48 89 94 24 20
	06 00 00	 mov	 QWORD PTR tv1706[rsp], rdx
  0359b	b9 01 00 00 00	 mov	 ecx, 1
  035a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  035a6	48 8b 8c 24 10
	06 00 00	 mov	 rcx, QWORD PTR tv1697[rsp]
  035ae	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  035b3	48 8b 8c 24 18
	06 00 00	 mov	 rcx, QWORD PTR tv1703[rsp]
  035bb	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  035c0	48 8d 8c 24 e0
	1f 00 00	 lea	 rcx, QWORD PTR space1$8[rsp]
  035c8	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  035cd	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR tv1706[rsp]
  035d5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  035da	8b 8c 24 50 02
	00 00		 mov	 ecx, DWORD PTR tv1711[rsp]
  035e1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  035e5	8b 8c 24 54 02
	00 00		 mov	 ecx, DWORD PTR tv1717[rsp]
  035ec	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  035f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170186
  035f7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  035fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170187
  03603	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03608	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0360d	41 b9 03 00 00
	00		 mov	 r9d, 3
  03613	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170188
  0361a	ba 3c 06 00 00	 mov	 edx, 1596		; 0000063cH
  0361f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170189
  03626	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN242@cckd_chkds:

; 1596 :                           space1, (U64)spctab[i].spc_off, (U64)spctab[i].spc_siz);
; 1597 :             }

  0362c	e9 fb 02 00 00	 jmp	 $LN240@cckd_chkds
$LN239@cckd_chkds:

; 1598 :             else
; 1599 :             {
; 1600 :                 if(dev->batch)

  03631	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03639	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0363f	c1 e8 0a	 shr	 eax, 10
  03642	83 e0 01	 and	 eax, 1
  03645	85 c0		 test	 eax, eax
  03647	0f 84 72 01 00
	00		 je	 $LN243@cckd_chkds

; 1601 :                     // "%1d:%04X CCKD file %s: %s offset 0x%16.16"PRIX64" len %"PRId64" overlaps %s offset 0x%"PRIX64
; 1602 :                     FWRMSG( stdout, HHC00366, "W", LCSS_DEVNUM, dev->filename,

  0364d	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03656	74 15		 je	 SHORT $LN629@cckd_chkds
  03658	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03660	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03664	89 84 24 58 02
	00 00		 mov	 DWORD PTR tv1758[rsp], eax
  0366b	eb 0b		 jmp	 SHORT $LN630@cckd_chkds
$LN629@cckd_chkds:
  0366d	c7 84 24 58 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1758[rsp], 0
$LN630@cckd_chkds:
  03678	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03681	74 17		 je	 SHORT $LN631@cckd_chkds
  03683	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0368b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0368f	d1 f8		 sar	 eax, 1
  03691	89 84 24 5c 02
	00 00		 mov	 DWORD PTR tv1764[rsp], eax
  03698	eb 0b		 jmp	 SHORT $LN632@cckd_chkds
$LN631@cckd_chkds:
  0369a	c7 84 24 5c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1764[rsp], 0
$LN632@cckd_chkds:
  036a5	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  036ac	ff c0		 inc	 eax
  036ae	48 98		 cdqe
  036b0	48 6b c0 18	 imul	 rax, rax, 24
  036b4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  036bc	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  036c0	48 89 84 24 28
	06 00 00	 mov	 QWORD PTR tv1737[rsp], rax
  036c8	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  036d0	48 6b c9 18	 imul	 rcx, rcx, 24
  036d4	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  036dc	8b 4c 0a 14	 mov	 ecx, DWORD PTR [rdx+rcx+20]
  036e0	48 89 8c 24 30
	06 00 00	 mov	 QWORD PTR tv1744[rsp], rcx
  036e8	48 63 94 24 90
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  036f0	48 6b d2 18	 imul	 rdx, rdx, 24
  036f4	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  036fc	8b 54 17 0c	 mov	 edx, DWORD PTR [rdi+rdx+12]
  03700	48 89 94 24 38
	06 00 00	 mov	 QWORD PTR tv1750[rsp], rdx
  03708	48 8b bc 24 d0
	21 04 00	 mov	 rdi, QWORD PTR dev$[rsp]
  03710	48 81 c7 a4 00
	00 00		 add	 rdi, 164		; 000000a4H
  03717	b9 01 00 00 00	 mov	 ecx, 1
  0371c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03722	48 8b 8c 24 28
	06 00 00	 mov	 rcx, QWORD PTR tv1737[rsp]
  0372a	48 89 4c 24 70	 mov	 QWORD PTR [rsp+112], rcx
  0372f	48 8d 8c 24 00
	20 00 00	 lea	 rcx, QWORD PTR space2$9[rsp]
  03737	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  0373c	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR tv1744[rsp]
  03744	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03749	48 8b 8c 24 38
	06 00 00	 mov	 rcx, QWORD PTR tv1750[rsp]
  03751	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  03756	48 8d 8c 24 e0
	1f 00 00	 lea	 rcx, QWORD PTR space1$8[rsp]
  0375e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03763	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  03768	8b 8c 24 58 02
	00 00		 mov	 ecx, DWORD PTR tv1758[rsp]
  0376f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03773	8b 8c 24 5c 02
	00 00		 mov	 ecx, DWORD PTR tv1764[rsp]
  0377a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0377e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170192
  03785	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0378a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170193
  03791	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03796	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0379b	41 b9 03 00 00
	00		 mov	 r9d, 3
  037a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170194
  037a8	ba 43 06 00 00	 mov	 edx, 1603		; 00000643H
  037ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170195
  037b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  037ba	e9 6d 01 00 00	 jmp	 $LN244@cckd_chkds
$LN243@cckd_chkds:

; 1603 :                             space1, (U64)spctab[i].spc_off, (U64)spctab[i].spc_siz, space2, (U64)spctab[i+1].spc_off);
; 1604 :                 else
; 1605 :                     // "%1d:%04X CCKD file %s: %s offset 0x%16.16"PRIX64" len %"PRId64" overlaps %s offset 0x%"PRIX64
; 1606 :                     WRMSG( HHC00366, "W", LCSS_DEVNUM, dev->filename,

  037bf	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  037c8	74 15		 je	 SHORT $LN633@cckd_chkds
  037ca	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  037d2	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  037d6	89 84 24 60 02
	00 00		 mov	 DWORD PTR tv1801[rsp], eax
  037dd	eb 0b		 jmp	 SHORT $LN634@cckd_chkds
$LN633@cckd_chkds:
  037df	c7 84 24 60 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1801[rsp], 0
$LN634@cckd_chkds:
  037ea	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  037f3	74 17		 je	 SHORT $LN635@cckd_chkds
  037f5	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  037fd	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03801	d1 f8		 sar	 eax, 1
  03803	89 84 24 64 02
	00 00		 mov	 DWORD PTR tv1807[rsp], eax
  0380a	eb 0b		 jmp	 SHORT $LN636@cckd_chkds
$LN635@cckd_chkds:
  0380c	c7 84 24 64 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1807[rsp], 0
$LN636@cckd_chkds:
  03817	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0381e	ff c0		 inc	 eax
  03820	48 98		 cdqe
  03822	48 6b c0 18	 imul	 rax, rax, 24
  03826	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0382e	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  03832	48 89 84 24 40
	06 00 00	 mov	 QWORD PTR tv1780[rsp], rax
  0383a	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  03842	48 6b c9 18	 imul	 rcx, rcx, 24
  03846	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0384e	8b 4c 0a 14	 mov	 ecx, DWORD PTR [rdx+rcx+20]
  03852	48 89 8c 24 48
	06 00 00	 mov	 QWORD PTR tv1787[rsp], rcx
  0385a	48 63 94 24 90
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  03862	48 6b d2 18	 imul	 rdx, rdx, 24
  03866	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  0386e	8b 54 17 0c	 mov	 edx, DWORD PTR [rdi+rdx+12]
  03872	48 89 94 24 50
	06 00 00	 mov	 QWORD PTR tv1793[rsp], rdx
  0387a	48 8b bc 24 d0
	21 04 00	 mov	 rdi, QWORD PTR dev$[rsp]
  03882	48 81 c7 a4 00
	00 00		 add	 rdi, 164		; 000000a4H
  03889	b9 01 00 00 00	 mov	 ecx, 1
  0388e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03894	48 8b 8c 24 40
	06 00 00	 mov	 rcx, QWORD PTR tv1780[rsp]
  0389c	48 89 4c 24 70	 mov	 QWORD PTR [rsp+112], rcx
  038a1	48 8d 8c 24 00
	20 00 00	 lea	 rcx, QWORD PTR space2$9[rsp]
  038a9	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  038ae	48 8b 8c 24 48
	06 00 00	 mov	 rcx, QWORD PTR tv1787[rsp]
  038b6	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  038bb	48 8b 8c 24 50
	06 00 00	 mov	 rcx, QWORD PTR tv1793[rsp]
  038c3	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  038c8	48 8d 8c 24 e0
	1f 00 00	 lea	 rcx, QWORD PTR space1$8[rsp]
  038d0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  038d5	48 89 7c 24 48	 mov	 QWORD PTR [rsp+72], rdi
  038da	8b 8c 24 60 02
	00 00		 mov	 ecx, DWORD PTR tv1801[rsp]
  038e1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  038e5	8b 8c 24 64 02
	00 00		 mov	 ecx, DWORD PTR tv1807[rsp]
  038ec	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  038f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170196
  038f7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  038fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170197
  03903	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03908	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0390d	41 b9 03 00 00
	00		 mov	 r9d, 3
  03913	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170198
  0391a	ba 47 06 00 00	 mov	 edx, 1607		; 00000647H
  0391f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170199
  03926	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN244@cckd_chkds:
$LN240@cckd_chkds:

; 1607 :                           space1, (U64)spctab[i].spc_off, (U64)spctab[i].spc_siz, space2, (U64)spctab[i+1].spc_off );
; 1608 :             }
; 1609 : 
; 1610 :             /* setup recovery */
; 1611 :             if (spctab[i].spc_typ == SPCTAB_L2)

  0392c	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03934	48 6b c0 18	 imul	 rax, rax, 24
  03938	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03940	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03944	83 f8 04	 cmp	 eax, 4
  03947	75 62		 jne	 SHORT $LN245@cckd_chkds

; 1612 :             {
; 1613 :                 l2errs[spctab[i].spc_val] = 1;

  03949	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03951	48 6b c0 18	 imul	 rax, rax, 24
  03955	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0395d	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  03962	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR l2errs$[rsp]
  0396a	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1

; 1614 :                 /* Mark all tracks for the l2 for recovery */
; 1615 :                 memset (rcvtab + (spctab[i].spc_val*256), 1, 256);

  0396e	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03976	48 6b c0 18	 imul	 rax, rax, 24
  0397a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03982	69 44 01 04 00
	01 00 00	 imul	 eax, DWORD PTR [rcx+rax+4], 256 ; 00000100H
  0398a	48 98		 cdqe
  0398c	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  03994	48 03 c8	 add	 rcx, rax
  03997	48 8b c1	 mov	 rax, rcx
  0399a	48 8b f8	 mov	 rdi, rax
  0399d	b8 01 00 00 00	 mov	 eax, 1
  039a2	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  039a7	f3 aa		 rep stosb

; 1616 :             }

  039a9	eb 46		 jmp	 SHORT $LN246@cckd_chkds
$LN245@cckd_chkds:

; 1617 :             else if (spctab[i].spc_typ == trktyp)

  039ab	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  039b3	48 6b c0 18	 imul	 rax, rax, 24
  039b7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  039bf	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  039c3	3b 84 24 d0 00
	00 00		 cmp	 eax, DWORD PTR trktyp$[rsp]
  039ca	75 25		 jne	 SHORT $LN247@cckd_chkds

; 1618 :                 rcvtab[spctab[i].spc_val] = 1;

  039cc	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  039d4	48 6b c0 18	 imul	 rax, rax, 24
  039d8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  039e0	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  039e5	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  039ed	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
$LN247@cckd_chkds:
$LN246@cckd_chkds:

; 1619 : 
; 1620 :             if (spctab[i+1].spc_typ == SPCTAB_L2 && valid)

  039f1	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  039f8	ff c0		 inc	 eax
  039fa	48 98		 cdqe
  039fc	48 6b c0 18	 imul	 rax, rax, 24
  03a00	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03a08	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03a0c	83 f8 04	 cmp	 eax, 4
  03a0f	75 72		 jne	 SHORT $LN248@cckd_chkds
  03a11	83 bc 24 70 01
	00 00 00	 cmp	 DWORD PTR valid$[rsp], 0
  03a19	74 68		 je	 SHORT $LN248@cckd_chkds

; 1621 :             {
; 1622 :                 l2errs[spctab[i+1].spc_val] = 1;

  03a1b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  03a22	ff c0		 inc	 eax
  03a24	48 98		 cdqe
  03a26	48 6b c0 18	 imul	 rax, rax, 24
  03a2a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03a32	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  03a37	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR l2errs$[rsp]
  03a3f	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1

; 1623 :                 memset (rcvtab + (spctab[i+1].spc_val*256), 1, 256);

  03a43	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  03a4a	ff c0		 inc	 eax
  03a4c	48 98		 cdqe
  03a4e	48 6b c0 18	 imul	 rax, rax, 24
  03a52	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03a5a	69 44 01 04 00
	01 00 00	 imul	 eax, DWORD PTR [rcx+rax+4], 256 ; 00000100H
  03a62	48 98		 cdqe
  03a64	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  03a6c	48 03 c8	 add	 rcx, rax
  03a6f	48 8b c1	 mov	 rax, rcx
  03a72	48 8b f8	 mov	 rdi, rax
  03a75	b8 01 00 00 00	 mov	 eax, 1
  03a7a	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  03a7f	f3 aa		 rep stosb

; 1624 :             }

  03a81	eb 56		 jmp	 SHORT $LN249@cckd_chkds
$LN248@cckd_chkds:

; 1625 :             else if (spctab[i+1].spc_typ == trktyp && valid)

  03a83	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  03a8a	ff c0		 inc	 eax
  03a8c	48 98		 cdqe
  03a8e	48 6b c0 18	 imul	 rax, rax, 24
  03a92	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03a9a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03a9e	3b 84 24 d0 00
	00 00		 cmp	 eax, DWORD PTR trktyp$[rsp]
  03aa5	75 32		 jne	 SHORT $LN250@cckd_chkds
  03aa7	83 bc 24 70 01
	00 00 00	 cmp	 DWORD PTR valid$[rsp], 0
  03aaf	74 28		 je	 SHORT $LN250@cckd_chkds

; 1626 :                 rcvtab[spctab[i+1].spc_val] = 1;

  03ab1	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  03ab8	ff c0		 inc	 eax
  03aba	48 98		 cdqe
  03abc	48 6b c0 18	 imul	 rax, rax, 24
  03ac0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03ac8	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  03acd	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  03ad5	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
$LN250@cckd_chkds:
$LN249@cckd_chkds:

; 1627 : 
; 1628 :         } /* if overlap or out of bounds */

  03ad9	e9 ed 03 00 00	 jmp	 $LN235@cckd_chkds
$LN234@cckd_chkds:

; 1629 : 
; 1630 :         /* Check image l2 entry consistency */
; 1631 :         else if (spctab[i].spc_typ == trktyp
; 1632 :          && (spctab[i].spc_len < CKD_TRKHDR_SIZE

  03ade	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03ae6	48 6b c0 18	 imul	 rax, rax, 24
  03aea	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03af2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03af6	3b 84 24 d0 00
	00 00		 cmp	 eax, DWORD PTR trktyp$[rsp]
  03afd	0f 85 c8 03 00
	00		 jne	 $LN251@cckd_chkds
  03b03	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03b0b	48 6b c0 18	 imul	 rax, rax, 24
  03b0f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03b17	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  03b1b	48 83 f8 05	 cmp	 rax, 5
  03b1f	7c 57		 jl	 SHORT $LN252@cckd_chkds
  03b21	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03b29	48 6b c0 18	 imul	 rax, rax, 24
  03b2d	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  03b35	48 6b c9 18	 imul	 rcx, rcx, 24
  03b39	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  03b41	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  03b49	8b 4c 0f 14	 mov	 ecx, DWORD PTR [rdi+rcx+20]
  03b4d	39 4c 02 10	 cmp	 DWORD PTR [rdx+rax+16], ecx
  03b51	77 25		 ja	 SHORT $LN252@cckd_chkds
  03b53	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03b5b	48 6b c0 18	 imul	 rax, rax, 24
  03b5f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03b67	8b 94 24 10 01
	00 00		 mov	 edx, DWORD PTR trksz$[rsp]
  03b6e	39 54 01 10	 cmp	 DWORD PTR [rcx+rax+16], edx
  03b72	0f 86 53 03 00
	00		 jbe	 $LN251@cckd_chkds
$LN252@cckd_chkds:

; 1633 :           || spctab[i].spc_len > spctab[i].spc_siz
; 1634 :           || spctab[i].spc_len > trksz))
; 1635 :         {
; 1636 :             recovery = 1;

  03b78	c7 84 24 0c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR recovery$[rsp], 1

; 1637 : 
; 1638 :             /* issue error message */
; 1639 :             if(dev->batch)

  03b83	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03b8b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03b91	c1 e8 0a	 shr	 eax, 10
  03b94	83 e0 01	 and	 eax, 1
  03b97	85 c0		 test	 eax, eax
  03b99	0f 84 86 01 00
	00		 je	 $LN253@cckd_chkds

; 1640 :                 // "%1d:%04X CCKD file %s: %s[%d] l2 inconsistency: len %"PRId64", size %"PRId64
; 1641 :                 FWRMSG( stdout, HHC00367, "W", LCSS_DEVNUM, dev->filename,

  03b9f	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03ba8	74 15		 je	 SHORT $LN637@cckd_chkds
  03baa	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03bb2	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03bb6	89 84 24 68 02
	00 00		 mov	 DWORD PTR tv1954[rsp], eax
  03bbd	eb 0b		 jmp	 SHORT $LN638@cckd_chkds
$LN637@cckd_chkds:
  03bbf	c7 84 24 68 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1954[rsp], 0
$LN638@cckd_chkds:
  03bca	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03bd3	74 17		 je	 SHORT $LN639@cckd_chkds
  03bd5	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03bdd	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03be1	d1 f8		 sar	 eax, 1
  03be3	89 84 24 6c 02
	00 00		 mov	 DWORD PTR tv1960[rsp], eax
  03bea	eb 0b		 jmp	 SHORT $LN640@cckd_chkds
$LN639@cckd_chkds:
  03bec	c7 84 24 6c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1960[rsp], 0
$LN640@cckd_chkds:
  03bf7	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03bff	48 6b c0 18	 imul	 rax, rax, 24
  03c03	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03c0b	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  03c0f	48 89 84 24 58
	06 00 00	 mov	 QWORD PTR tv1933[rsp], rax
  03c17	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  03c1f	48 6b c9 18	 imul	 rcx, rcx, 24
  03c23	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  03c2b	8b 4c 0a 10	 mov	 ecx, DWORD PTR [rdx+rcx+16]
  03c2f	48 89 8c 24 60
	06 00 00	 mov	 QWORD PTR tv1939[rsp], rcx
  03c37	48 63 94 24 90
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  03c3f	48 6b d2 18	 imul	 rdx, rdx, 24
  03c43	48 89 94 24 68
	06 00 00	 mov	 QWORD PTR tv1942[rsp], rdx
  03c4b	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  03c53	e8 00 00 00 00	 call	 spc_typ_to_str
  03c58	48 89 84 24 70
	06 00 00	 mov	 QWORD PTR tv1946[rsp], rax
  03c60	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03c68	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  03c6f	48 89 8c 24 78
	06 00 00	 mov	 QWORD PTR tv1949[rsp], rcx
  03c77	b9 01 00 00 00	 mov	 ecx, 1
  03c7c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03c82	48 8b 8c 24 58
	06 00 00	 mov	 rcx, QWORD PTR tv1933[rsp]
  03c8a	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  03c8f	48 8b 8c 24 60
	06 00 00	 mov	 rcx, QWORD PTR tv1939[rsp]
  03c97	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03c9c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03ca4	48 8b 94 24 68
	06 00 00	 mov	 rdx, QWORD PTR tv1942[rsp]
  03cac	8b 4c 11 04	 mov	 ecx, DWORD PTR [rcx+rdx+4]
  03cb0	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  03cb4	48 8b 8c 24 70
	06 00 00	 mov	 rcx, QWORD PTR tv1946[rsp]
  03cbc	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03cc1	48 8b 8c 24 78
	06 00 00	 mov	 rcx, QWORD PTR tv1949[rsp]
  03cc9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03cce	8b 8c 24 68 02
	00 00		 mov	 ecx, DWORD PTR tv1954[rsp]
  03cd5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03cd9	8b 8c 24 6c 02
	00 00		 mov	 ecx, DWORD PTR tv1960[rsp]
  03ce0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03ce4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170210
  03ceb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03cf0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170211
  03cf7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03cfc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03d01	41 b9 03 00 00
	00		 mov	 r9d, 3
  03d07	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170212
  03d0e	ba 6a 06 00 00	 mov	 edx, 1642		; 0000066aH
  03d13	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170213
  03d1a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  03d20	e9 81 01 00 00	 jmp	 $LN254@cckd_chkds
$LN253@cckd_chkds:

; 1642 :                         spc_typ_to_str( trktyp ), spctab[i].spc_val, (U64)spctab[i].spc_len, (U64)spctab[i].spc_siz);
; 1643 :             else
; 1644 :                 // "%1d:%04X CCKD file %s: %s[%d] l2 inconsistency: len %"PRId64", size %"PRId64
; 1645 :                 WRMSG( HHC00367, "W", LCSS_DEVNUM, dev->filename,

  03d25	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03d2e	74 15		 je	 SHORT $LN641@cckd_chkds
  03d30	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03d38	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03d3c	89 84 24 70 02
	00 00		 mov	 DWORD PTR tv2028[rsp], eax
  03d43	eb 0b		 jmp	 SHORT $LN642@cckd_chkds
$LN641@cckd_chkds:
  03d45	c7 84 24 70 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2028[rsp], 0
$LN642@cckd_chkds:
  03d50	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03d59	74 17		 je	 SHORT $LN643@cckd_chkds
  03d5b	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03d63	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03d67	d1 f8		 sar	 eax, 1
  03d69	89 84 24 74 02
	00 00		 mov	 DWORD PTR tv2034[rsp], eax
  03d70	eb 0b		 jmp	 SHORT $LN644@cckd_chkds
$LN643@cckd_chkds:
  03d72	c7 84 24 74 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2034[rsp], 0
$LN644@cckd_chkds:
  03d7d	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03d85	48 6b c0 18	 imul	 rax, rax, 24
  03d89	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03d91	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  03d95	48 89 84 24 80
	06 00 00	 mov	 QWORD PTR tv1975[rsp], rax
  03d9d	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  03da5	48 6b c9 18	 imul	 rcx, rcx, 24
  03da9	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  03db1	8b 4c 0a 10	 mov	 ecx, DWORD PTR [rdx+rcx+16]
  03db5	48 89 8c 24 88
	06 00 00	 mov	 QWORD PTR tv1981[rsp], rcx
  03dbd	48 63 94 24 90
	00 00 00	 movsxd	 rdx, DWORD PTR i$[rsp]
  03dc5	48 6b d2 18	 imul	 rdx, rdx, 24
  03dc9	48 89 94 24 90
	06 00 00	 mov	 QWORD PTR tv2016[rsp], rdx
  03dd1	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  03dd9	e8 00 00 00 00	 call	 spc_typ_to_str
  03dde	48 89 84 24 98
	06 00 00	 mov	 QWORD PTR tv2020[rsp], rax
  03de6	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03dee	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  03df5	48 89 8c 24 a0
	06 00 00	 mov	 QWORD PTR tv2023[rsp], rcx
  03dfd	b9 01 00 00 00	 mov	 ecx, 1
  03e02	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03e08	48 8b 8c 24 80
	06 00 00	 mov	 rcx, QWORD PTR tv1975[rsp]
  03e10	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  03e15	48 8b 8c 24 88
	06 00 00	 mov	 rcx, QWORD PTR tv1981[rsp]
  03e1d	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03e22	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03e2a	48 8b 94 24 90
	06 00 00	 mov	 rdx, QWORD PTR tv2016[rsp]
  03e32	8b 4c 11 04	 mov	 ecx, DWORD PTR [rcx+rdx+4]
  03e36	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  03e3a	48 8b 8c 24 98
	06 00 00	 mov	 rcx, QWORD PTR tv2020[rsp]
  03e42	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03e47	48 8b 8c 24 a0
	06 00 00	 mov	 rcx, QWORD PTR tv2023[rsp]
  03e4f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03e54	8b 8c 24 70 02
	00 00		 mov	 ecx, DWORD PTR tv2028[rsp]
  03e5b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03e5f	8b 8c 24 74 02
	00 00		 mov	 ecx, DWORD PTR tv2034[rsp]
  03e66	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03e6a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170214
  03e71	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03e76	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170215
  03e7d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03e82	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03e87	41 b9 03 00 00
	00		 mov	 r9d, 3
  03e8d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170216
  03e94	ba 6e 06 00 00	 mov	 edx, 1646		; 0000066eH
  03e99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170217
  03ea0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN254@cckd_chkds:

; 1646 :                       spc_typ_to_str( trktyp ), spctab[i].spc_val, (U64)spctab[i].spc_len, (U64)spctab[i].spc_siz);
; 1647 : 
; 1648 :             /* setup recovery */
; 1649 :             rcvtab[spctab[i].spc_val] = 1;

  03ea6	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03eae	48 6b c0 18	 imul	 rax, rax, 24
  03eb2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03eba	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  03ebf	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  03ec7	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
$LN251@cckd_chkds:
$LN235@cckd_chkds:

; 1650 :         } /* if inconsistent l2 */
; 1651 :     } /* for each space */

  03ecb	e9 9c f0 ff ff	 jmp	 $LN20@cckd_chkds
$LN21@cckd_chkds:

; 1652 : 
; 1653 :     /* remove any l2 tables or tracks in error from the space table */
; 1654 :     for (i = 0; recovery && spctab[i].spc_typ != SPCTAB_EOF; i++)

  03ed0	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  03edb	eb 10		 jmp	 SHORT $LN25@cckd_chkds
$LN23@cckd_chkds:
  03edd	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  03ee4	ff c0		 inc	 eax
  03ee6	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN25@cckd_chkds:
  03eed	83 bc 24 0c 01
	00 00 00	 cmp	 DWORD PTR recovery$[rsp], 0
  03ef5	0f 84 ce 00 00
	00		 je	 $LN24@cckd_chkds
  03efb	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03f03	48 6b c0 18	 imul	 rax, rax, 24
  03f07	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03f0f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03f13	83 f8 08	 cmp	 eax, 8
  03f16	0f 84 ad 00 00
	00		 je	 $LN24@cckd_chkds

; 1655 :         if ((spctab[i].spc_typ == SPCTAB_L2 && l2errs[spctab[i].spc_val])
; 1656 :          || (spctab[i].spc_typ == trktyp    && rcvtab[spctab[i].spc_val]))

  03f1c	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03f24	48 6b c0 18	 imul	 rax, rax, 24
  03f28	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03f30	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03f34	83 f8 04	 cmp	 eax, 4
  03f37	75 29		 jne	 SHORT $LN257@cckd_chkds
  03f39	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03f41	48 6b c0 18	 imul	 rax, rax, 24
  03f45	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03f4d	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  03f52	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR l2errs$[rsp]
  03f5a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03f5e	85 c0		 test	 eax, eax
  03f60	75 4a		 jne	 SHORT $LN256@cckd_chkds
$LN257@cckd_chkds:
  03f62	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03f6a	48 6b c0 18	 imul	 rax, rax, 24
  03f6e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03f76	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03f7a	3b 84 24 d0 00
	00 00		 cmp	 eax, DWORD PTR trktyp$[rsp]
  03f81	75 41		 jne	 SHORT $LN255@cckd_chkds
  03f83	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03f8b	48 6b c0 18	 imul	 rax, rax, 24
  03f8f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03f97	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  03f9c	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  03fa4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  03fa8	85 c0		 test	 eax, eax
  03faa	74 18		 je	 SHORT $LN255@cckd_chkds
$LN256@cckd_chkds:

; 1657 :             spctab[i].spc_typ = SPCTAB_NONE;

  03fac	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  03fb4	48 6b c0 18	 imul	 rax, rax, 24
  03fb8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  03fc0	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN255@cckd_chkds:
  03fc4	e9 14 ff ff ff	 jmp	 $LN23@cckd_chkds
$LN24@cckd_chkds:

; 1658 : 
; 1659 :     /* overlaps are serious */
; 1660 :     if (recovery && level < 3)

  03fc9	83 bc 24 0c 01
	00 00 00	 cmp	 DWORD PTR recovery$[rsp], 0
  03fd1	0f 84 00 02 00
	00		 je	 $LN258@cckd_chkds
  03fd7	83 bc 24 d8 21
	04 00 03	 cmp	 DWORD PTR level$[rsp], 3
  03fdf	0f 8d f2 01 00
	00		 jge	 $LN258@cckd_chkds

; 1661 :     {
; 1662 :         // "%1d:%04X CCKD file %s: forcing check level %d"
; 1663 :         level = 3;

  03fe5	c7 84 24 d8 21
	04 00 03 00 00
	00		 mov	 DWORD PTR level$[rsp], 3

; 1664 :         if(dev->batch)

  03ff0	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03ff8	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03ffe	c1 e8 0a	 shr	 eax, 10
  04001	83 e0 01	 and	 eax, 1
  04004	85 c0		 test	 eax, eax
  04006	0f 84 e8 00 00
	00		 je	 $LN259@cckd_chkds

; 1665 :             FWRMSG( stdout, HHC00364, "W", LCSS_DEVNUM, dev->filename, level);

  0400c	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04015	74 15		 je	 SHORT $LN645@cckd_chkds
  04017	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0401f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04023	89 84 24 78 02
	00 00		 mov	 DWORD PTR tv2106[rsp], eax
  0402a	eb 0b		 jmp	 SHORT $LN646@cckd_chkds
$LN645@cckd_chkds:
  0402c	c7 84 24 78 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2106[rsp], 0
$LN646@cckd_chkds:
  04037	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04040	74 17		 je	 SHORT $LN647@cckd_chkds
  04042	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0404a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0404e	d1 f8		 sar	 eax, 1
  04050	89 84 24 7c 02
	00 00		 mov	 DWORD PTR tv2112[rsp], eax
  04057	eb 0b		 jmp	 SHORT $LN648@cckd_chkds
$LN647@cckd_chkds:
  04059	c7 84 24 7c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2112[rsp], 0
$LN648@cckd_chkds:
  04064	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0406c	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  04072	48 89 84 24 a8
	06 00 00	 mov	 QWORD PTR tv2101[rsp], rax
  0407a	b9 01 00 00 00	 mov	 ecx, 1
  0407f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04085	8b 8c 24 d8 21
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  0408c	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  04090	48 8b 8c 24 a8
	06 00 00	 mov	 rcx, QWORD PTR tv2101[rsp]
  04098	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0409d	8b 8c 24 78 02
	00 00		 mov	 ecx, DWORD PTR tv2106[rsp]
  040a4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  040a8	8b 8c 24 7c 02
	00 00		 mov	 ecx, DWORD PTR tv2112[rsp]
  040af	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  040b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170224
  040ba	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  040bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170225
  040c6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  040cb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  040d0	41 b9 03 00 00
	00		 mov	 r9d, 3
  040d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170226
  040dd	ba 81 06 00 00	 mov	 edx, 1665		; 00000681H
  040e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170227
  040e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  040ef	e9 e3 00 00 00	 jmp	 $LN260@cckd_chkds
$LN259@cckd_chkds:

; 1666 :         else
; 1667 :             WRMSG( HHC00364, "W", LCSS_DEVNUM, dev->filename, level);

  040f4	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  040fd	74 15		 je	 SHORT $LN649@cckd_chkds
  040ff	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04107	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0410b	89 84 24 80 02
	00 00		 mov	 DWORD PTR tv2129[rsp], eax
  04112	eb 0b		 jmp	 SHORT $LN650@cckd_chkds
$LN649@cckd_chkds:
  04114	c7 84 24 80 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2129[rsp], 0
$LN650@cckd_chkds:
  0411f	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04128	74 17		 je	 SHORT $LN651@cckd_chkds
  0412a	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04132	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  04136	d1 f8		 sar	 eax, 1
  04138	89 84 24 84 02
	00 00		 mov	 DWORD PTR tv2135[rsp], eax
  0413f	eb 0b		 jmp	 SHORT $LN652@cckd_chkds
$LN651@cckd_chkds:
  04141	c7 84 24 84 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2135[rsp], 0
$LN652@cckd_chkds:
  0414c	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04154	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0415a	48 89 84 24 b0
	06 00 00	 mov	 QWORD PTR tv2124[rsp], rax
  04162	b9 01 00 00 00	 mov	 ecx, 1
  04167	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0416d	8b 8c 24 d8 21
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  04174	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  04178	48 8b 8c 24 b0
	06 00 00	 mov	 rcx, QWORD PTR tv2124[rsp]
  04180	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  04185	8b 8c 24 80 02
	00 00		 mov	 ecx, DWORD PTR tv2129[rsp]
  0418c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  04190	8b 8c 24 84 02
	00 00		 mov	 ecx, DWORD PTR tv2135[rsp]
  04197	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0419b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170228
  041a2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  041a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170229
  041ae	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  041b3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  041b8	41 b9 03 00 00
	00		 mov	 r9d, 3
  041be	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170230
  041c5	ba 83 06 00 00	 mov	 edx, 1667		; 00000683H
  041ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170231
  041d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN260@cckd_chkds:
$LN258@cckd_chkds:

; 1668 :     }
; 1669 : 
; 1670 :     /* Rebuild free space if any errors */
; 1671 :     if (recovery || hdrerr
; 1672 :      || cdevhdr.cdh_size     != cdevhdr2.cdh_size
; 1673 :      || cdevhdr.cdh_used     != cdevhdr2.cdh_used
; 1674 :      || cdevhdr.free_num     != cdevhdr2.free_num
; 1675 :      || cdevhdr.free_largest != cdevhdr2.free_largest
; 1676 :      || cdevhdr.free_total   != cdevhdr2.free_total
; 1677 :      || cdevhdr.free_imbed   != cdevhdr2.free_imbed

  041d7	83 bc 24 0c 01
	00 00 00	 cmp	 DWORD PTR recovery$[rsp], 0
  041df	75 6a		 jne	 SHORT $LN262@cckd_chkds
  041e1	83 bc 24 c8 00
	00 00 00	 cmp	 DWORD PTR hdrerr$[rsp], 0
  041e9	75 60		 jne	 SHORT $LN262@cckd_chkds
  041eb	8b 84 24 ec 0d
	00 00		 mov	 eax, DWORD PTR cdevhdr2$[rsp+12]
  041f2	39 84 24 ac 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+12], eax
  041f9	75 50		 jne	 SHORT $LN262@cckd_chkds
  041fb	8b 84 24 f0 0d
	00 00		 mov	 eax, DWORD PTR cdevhdr2$[rsp+16]
  04202	39 84 24 b0 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+16], eax
  04209	75 40		 jne	 SHORT $LN262@cckd_chkds
  0420b	8b 84 24 00 0e
	00 00		 mov	 eax, DWORD PTR cdevhdr2$[rsp+32]
  04212	39 84 24 c0 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+32], eax
  04219	75 30		 jne	 SHORT $LN262@cckd_chkds
  0421b	8b 84 24 fc 0d
	00 00		 mov	 eax, DWORD PTR cdevhdr2$[rsp+28]
  04222	39 84 24 bc 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+28], eax
  04229	75 20		 jne	 SHORT $LN262@cckd_chkds
  0422b	8b 84 24 f8 0d
	00 00		 mov	 eax, DWORD PTR cdevhdr2$[rsp+24]
  04232	39 84 24 b8 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+24], eax
  04239	75 10		 jne	 SHORT $LN262@cckd_chkds
  0423b	8b 84 24 04 0e
	00 00		 mov	 eax, DWORD PTR cdevhdr2$[rsp+36]
  04242	39 84 24 c4 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+36], eax
  04249	74 0b		 je	 SHORT $LN261@cckd_chkds
$LN262@cckd_chkds:

; 1678 :        )
; 1679 :         fsperr = 1;

  0424b	c7 84 24 f8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR fsperr$[rsp], 1
$LN261@cckd_chkds:

; 1680 : 
; 1681 :     /*---------------------------------------------------------------
; 1682 :      * read the free space
; 1683 :      *---------------------------------------------------------------*/
; 1684 : 
; 1685 :     lopos = CCKD_L1TAB_POS + l1size;

  04256	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  0425e	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  04264	89 84 24 dc 00
	00 00		 mov	 DWORD PTR lopos$[rsp], eax

; 1686 :     hipos = (U32)fst.st_size;

  0426b	8b 84 24 b8 0d
	00 00		 mov	 eax, DWORD PTR fst$[rsp+24]
  04272	89 84 24 28 01
	00 00		 mov	 DWORD PTR hipos$[rsp], eax

; 1687 : 
; 1688 :     if (level >= 1 && !fsperr)

  04279	83 bc 24 d8 21
	04 00 01	 cmp	 DWORD PTR level$[rsp], 1
  04281	0f 8c a4 06 00
	00		 jl	 $LN263@cckd_chkds
  04287	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR fsperr$[rsp], 0
  0428f	0f 85 96 06 00
	00		 jne	 $LN263@cckd_chkds
$LN26@cckd_chkds:

; 1689 :     {
; 1690 :         while (cdevhdr.free_off) // `while' so code can break

  04295	83 bc 24 b4 0b
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+20], 0
  0429d	0f 84 88 06 00
	00		 je	 $LN27@cckd_chkds

; 1691 :         {
; 1692 :             fsperr = 1;  // be pessimistic

  042a3	c7 84 24 f8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR fsperr$[rsp], 1

; 1693 :             fsp = NULL;

  042ae	48 c7 84 24 20
	01 00 00 00 00
	00 00		 mov	 QWORD PTR fsp$[rsp], 0

; 1694 : 
; 1695 :             /* Read the free space */
; 1696 :             off = (off_t)cdevhdr.free_off;

  042ba	8b 84 24 b4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+20]
  042c1	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 1697 :             len = CCKD_FREEBLK_SIZE;

  042c9	c7 84 24 a4 00
	00 00 08 00 00
	00		 mov	 DWORD PTR len$[rsp], 8

; 1698 :             if (off < lopos || off + CCKD_FREEBLK_SIZE > hipos
; 1699 :              || lseek (fd, off, SEEK_SET) < 0
; 1700 :              || (rc = read (fd, &freeblk, len)) != len)

  042d4	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR lopos$[rsp]
  042db	48 39 84 24 c0
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  042e3	7c 69		 jl	 SHORT $LN265@cckd_chkds
  042e5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR off$[rsp]
  042ed	48 83 c0 08	 add	 rax, 8
  042f1	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR hipos$[rsp]
  042f8	48 3b c1	 cmp	 rax, rcx
  042fb	7f 51		 jg	 SHORT $LN265@cckd_chkds
  042fd	45 33 c0	 xor	 r8d, r8d
  04300	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  04308	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0430f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  04315	48 85 c0	 test	 rax, rax
  04318	7c 34		 jl	 SHORT $LN265@cckd_chkds
  0431a	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  04322	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  0432a	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04331	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  04337	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  0433e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  04345	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  0434c	74 05		 je	 SHORT $LN264@cckd_chkds
$LN265@cckd_chkds:

; 1701 :                 break;

  0434e	e9 d8 05 00 00	 jmp	 $LN27@cckd_chkds
$LN264@cckd_chkds:

; 1702 : 
; 1703 :             gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  04353	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0435a	83 38 00	 cmp	 DWORD PTR [rax], 0
  0435d	74 43		 je	 SHORT $LN266@cckd_chkds
  0435f	41 b8 01 00 00
	00		 mov	 r8d, 1
  04365	33 d2		 xor	 edx, edx
  04367	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0436e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  04374	48 89 84 24 b8
	06 00 00	 mov	 QWORD PTR tv2210[rsp], rax
  0437c	b9 02 00 00 00	 mov	 ecx, 2
  04381	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04387	48 8b 8c 24 b8
	06 00 00	 mov	 rcx, QWORD PTR tv2210[rsp]
  0438f	4c 8b c1	 mov	 r8, rcx
  04392	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170238
  04399	48 8b c8	 mov	 rcx, rax
  0439c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN266@cckd_chkds:

; 1704 : 
; 1705 :             if (memcmp (&freeblk, "FREE_BLK", 8) == 0)

  043a2	41 b8 08 00 00
	00		 mov	 r8d, 8
  043a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170241
  043af	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR freeblk$[rsp]
  043b7	e8 00 00 00 00	 call	 memcmp
  043bc	85 c0		 test	 eax, eax
  043be	0f 85 4a 02 00
	00		 jne	 $LN267@cckd_chkds

; 1706 :             {
; 1707 :                 /* new format free space */
; 1708 :                 len = cdevhdr.free_num * CCKD_FREEBLK_SIZE;

  043c4	48 63 84 24 c0
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+32]
  043cc	48 c1 e0 03	 shl	 rax, 3
  043d0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 1709 :                 if ((fsp = malloc(len)) == NULL
; 1710 :                  || (rc = read (fd, fsp, len)) != len)

  043d7	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  043df	48 8b c8	 mov	 rcx, rax
  043e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  043e8	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR fsp$[rsp], rax
  043f0	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR fsp$[rsp], 0
  043f9	74 34		 je	 SHORT $LN270@cckd_chkds
  043fb	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  04403	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR fsp$[rsp]
  0440b	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04412	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  04418	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  0441f	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  04426	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  0442d	74 05		 je	 SHORT $LN269@cckd_chkds
$LN270@cckd_chkds:

; 1711 :                     break;

  0442f	e9 f7 04 00 00	 jmp	 $LN27@cckd_chkds
$LN269@cckd_chkds:

; 1712 : 
; 1713 :                 for (i = 0; i < cdevhdr.free_num; i++)

  04434	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  0443f	eb 10		 jmp	 SHORT $LN30@cckd_chkds
$LN28@cckd_chkds:
  04441	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  04448	ff c0		 inc	 eax
  0444a	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN30@cckd_chkds:
  04451	8b 84 24 c0 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+32]
  04458	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  0445f	0f 8d 89 01 00
	00		 jge	 $LN29@cckd_chkds

; 1714 :                 {
; 1715 :                     if (swapend) cckd_swapend_free (&fsp[i]);

  04465	83 bc 24 48 01
	00 00 00	 cmp	 DWORD PTR swapend$[rsp], 0
  0446d	74 1c		 je	 SHORT $LN271@cckd_chkds
  0446f	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  04477	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR fsp$[rsp]
  0447f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  04483	48 8b c8	 mov	 rcx, rax
  04486	e8 00 00 00 00	 call	 cckd_swapend_free
$LN271@cckd_chkds:

; 1716 :                     spctab[s].spc_typ = SPCTAB_FREE;

  0448b	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  04493	48 6b c0 18	 imul	 rax, rax, 24
  04497	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0449f	c6 04 01 07	 mov	 BYTE PTR [rcx+rax], 7

; 1717 :                     spctab[s].spc_val = -1;

  044a3	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  044ab	48 6b c0 18	 imul	 rax, rax, 24
  044af	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  044b7	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 1718 :                     spctab[s].spc_off = fsp[i].fb_offnxt;

  044bf	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  044c7	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  044cf	48 6b c9 18	 imul	 rcx, rcx, 24
  044d3	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  044db	48 8b bc 24 20
	01 00 00	 mov	 rdi, QWORD PTR fsp$[rsp]
  044e3	8b 04 c7	 mov	 eax, DWORD PTR [rdi+rax*8]
  044e6	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 1719 :                     spctab[s].spc_len =

  044ea	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  044f2	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  044fa	48 6b c9 18	 imul	 rcx, rcx, 24
  044fe	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  04506	48 8b bc 24 20
	01 00 00	 mov	 rdi, QWORD PTR fsp$[rsp]
  0450e	8b 44 c7 04	 mov	 eax, DWORD PTR [rdi+rax*8+4]
  04512	89 44 0a 14	 mov	 DWORD PTR [rdx+rcx+20], eax
  04516	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0451e	48 6b c0 18	 imul	 rax, rax, 24
  04522	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  0452a	48 6b c9 18	 imul	 rcx, rcx, 24
  0452e	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  04536	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  0453e	8b 44 07 14	 mov	 eax, DWORD PTR [rdi+rax+20]
  04542	89 44 0a 10	 mov	 DWORD PTR [rdx+rcx+16], eax

; 1720 :                     spctab[s].spc_siz = fsp[i].fb_len;
; 1721 :                     /* Free space should be ascending */
; 1722 :                     if (spctab[s].spc_off < lopos
; 1723 :                      || spctab[s].spc_off + spctab[s].spc_siz > hipos)

  04546	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0454e	48 6b c0 18	 imul	 rax, rax, 24
  04552	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0455a	8b 94 24 dc 00
	00 00		 mov	 edx, DWORD PTR lopos$[rsp]
  04561	39 54 01 0c	 cmp	 DWORD PTR [rcx+rax+12], edx
  04565	72 39		 jb	 SHORT $LN273@cckd_chkds
  04567	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0456f	48 6b c0 18	 imul	 rax, rax, 24
  04573	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  0457b	48 6b c9 18	 imul	 rcx, rcx, 24
  0457f	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  04587	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  0458b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  04593	03 44 0a 14	 add	 eax, DWORD PTR [rdx+rcx+20]
  04597	3b 84 24 28 01
	00 00		 cmp	 eax, DWORD PTR hipos$[rsp]
  0459e	76 02		 jbe	 SHORT $LN272@cckd_chkds
$LN273@cckd_chkds:

; 1724 :                         break;

  045a0	eb 4c		 jmp	 SHORT $LN29@cckd_chkds
$LN272@cckd_chkds:

; 1725 :                     lopos = spctab[s].spc_off + spctab[s].spc_siz;

  045a2	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  045aa	48 6b c0 18	 imul	 rax, rax, 24
  045ae	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  045b6	48 6b c9 18	 imul	 rcx, rcx, 24
  045ba	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  045c2	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  045c6	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  045ce	03 44 0a 14	 add	 eax, DWORD PTR [rdx+rcx+20]
  045d2	89 84 24 dc 00
	00 00		 mov	 DWORD PTR lopos$[rsp], eax

; 1726 :                     s++;

  045d9	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  045e0	ff c0		 inc	 eax
  045e2	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1727 :                 } /* for each free space */

  045e9	e9 53 fe ff ff	 jmp	 $LN28@cckd_chkds
$LN29@cckd_chkds:

; 1728 :                 if (i >= cdevhdr.free_num)

  045ee	8b 84 24 c0 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+32]
  045f5	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  045fc	7c 0b		 jl	 SHORT $LN274@cckd_chkds

; 1729 :                     fsperr = 0;

  045fe	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR fsperr$[rsp], 0
$LN274@cckd_chkds:

; 1730 :             } /* new format free space */

  04609	e9 29 02 00 00	 jmp	 $LN268@cckd_chkds
$LN267@cckd_chkds:

; 1731 :             else
; 1732 :             {
; 1733 :                 /* old format free space */
; 1734 :                 off = (off_t)cdevhdr.free_off;

  0460e	8b 84 24 b4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+20]
  04615	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 1735 :                 len = CCKD_FREEBLK_SIZE;

  0461d	c7 84 24 a4 00
	00 00 08 00 00
	00		 mov	 DWORD PTR len$[rsp], 8

; 1736 :                 for (i = 0; i < cdevhdr.free_num; i++)

  04628	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  04633	eb 10		 jmp	 SHORT $LN33@cckd_chkds
$LN31@cckd_chkds:
  04635	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0463c	ff c0		 inc	 eax
  0463e	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN33@cckd_chkds:
  04645	8b 84 24 c0 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+32]
  0464c	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  04653	0f 8d b9 01 00
	00		 jge	 $LN32@cckd_chkds

; 1737 :                 {
; 1738 :                     if (off < lopos || off > hipos) break;

  04659	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR lopos$[rsp]
  04660	48 39 84 24 c0
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  04668	7c 11		 jl	 SHORT $LN276@cckd_chkds
  0466a	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR hipos$[rsp]
  04671	48 39 84 24 c0
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  04679	7e 05		 jle	 SHORT $LN275@cckd_chkds
$LN276@cckd_chkds:
  0467b	e9 92 01 00 00	 jmp	 $LN32@cckd_chkds
$LN275@cckd_chkds:

; 1739 :                     if (lseek (fd, off, SEEK_SET) < 0)

  04680	45 33 c0	 xor	 r8d, r8d
  04683	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0468b	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04692	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  04698	48 85 c0	 test	 rax, rax
  0469b	7d 05		 jge	 SHORT $LN277@cckd_chkds

; 1740 :                         goto cdsk_lseek_error;

  0469d	e9 22 5e 00 00	 jmp	 $cdsk_lseek_error$827
$LN277@cckd_chkds:

; 1741 :                     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  046a2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  046a9	83 38 00	 cmp	 DWORD PTR [rax], 0
  046ac	74 43		 je	 SHORT $LN278@cckd_chkds
  046ae	41 b8 01 00 00
	00		 mov	 r8d, 1
  046b4	33 d2		 xor	 edx, edx
  046b6	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  046bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  046c3	48 89 84 24 c0
	06 00 00	 mov	 QWORD PTR tv2319[rsp], rax
  046cb	b9 02 00 00 00	 mov	 ecx, 2
  046d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  046d6	48 8b 8c 24 c0
	06 00 00	 mov	 rcx, QWORD PTR tv2319[rsp]
  046de	4c 8b c1	 mov	 r8, rcx
  046e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170252
  046e8	48 8b c8	 mov	 rcx, rax
  046eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN278@cckd_chkds:

; 1742 :                     if ((rc = read (fd, &freeblk, len)) != len)

  046f1	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  046f9	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  04701	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04708	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0470e	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  04715	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  0471c	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  04723	74 05		 je	 SHORT $LN279@cckd_chkds

; 1743 :                         goto cdsk_read_error;

  04725	e9 ea 5f 00 00	 jmp	 $cdsk_read_error$828
$LN279@cckd_chkds:

; 1744 :                     if (swapend) cckd_swapend_free (&freeblk);

  0472a	83 bc 24 48 01
	00 00 00	 cmp	 DWORD PTR swapend$[rsp], 0
  04732	74 0d		 je	 SHORT $LN280@cckd_chkds
  04734	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR freeblk$[rsp]
  0473c	e8 00 00 00 00	 call	 cckd_swapend_free
$LN280@cckd_chkds:

; 1745 :                     spctab[s].spc_typ = SPCTAB_FREE;

  04741	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  04749	48 6b c0 18	 imul	 rax, rax, 24
  0474d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04755	c6 04 01 07	 mov	 BYTE PTR [rcx+rax], 7

; 1746 :                     spctab[s].spc_val = -1;

  04759	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  04761	48 6b c0 18	 imul	 rax, rax, 24
  04765	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0476d	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 1747 :                     spctab[s].spc_off = (U32)off;

  04775	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0477d	48 6b c0 18	 imul	 rax, rax, 24
  04781	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04789	8b 94 24 c0 00
	00 00		 mov	 edx, DWORD PTR off$[rsp]
  04790	89 54 01 0c	 mov	 DWORD PTR [rcx+rax+12], edx

; 1748 :                     spctab[s].spc_len =

  04794	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0479c	48 6b c0 18	 imul	 rax, rax, 24
  047a0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  047a8	8b 94 24 44 01
	00 00		 mov	 edx, DWORD PTR freeblk$[rsp+4]
  047af	89 54 01 14	 mov	 DWORD PTR [rcx+rax+20], edx
  047b3	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  047bb	48 6b c0 18	 imul	 rax, rax, 24
  047bf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  047c7	8b 94 24 44 01
	00 00		 mov	 edx, DWORD PTR freeblk$[rsp+4]
  047ce	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 1749 :                     spctab[s].spc_siz = freeblk.fb_len;
; 1750 :                     s++;

  047d2	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  047d9	ff c0		 inc	 eax
  047db	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1751 :                     lopos = (U32)(off + freeblk.fb_len);

  047e2	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR freeblk$[rsp+4]
  047e9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  047f1	48 03 c8	 add	 rcx, rax
  047f4	48 8b c1	 mov	 rax, rcx
  047f7	89 84 24 dc 00
	00 00		 mov	 DWORD PTR lopos$[rsp], eax

; 1752 :                     off = (off_t)freeblk.fb_offnxt;

  047fe	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR freeblk$[rsp]
  04805	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 1753 :                 }

  0480d	e9 23 fe ff ff	 jmp	 $LN31@cckd_chkds
$LN32@cckd_chkds:

; 1754 :                 if (i >= cdevhdr.free_num && freeblk.fb_offnxt == 0)

  04812	8b 84 24 c0 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+32]
  04819	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  04820	7c 15		 jl	 SHORT $LN281@cckd_chkds
  04822	83 bc 24 40 01
	00 00 00	 cmp	 DWORD PTR freeblk$[rsp], 0
  0482a	75 0b		 jne	 SHORT $LN281@cckd_chkds

; 1755 :                     fsperr = 0;

  0482c	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR fsperr$[rsp], 0
$LN281@cckd_chkds:
$LN268@cckd_chkds:

; 1756 :             } /* if old format free space */
; 1757 : 
; 1758 :             if (fsp) free(fsp);

  04837	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR fsp$[rsp], 0
  04840	74 0e		 je	 SHORT $LN282@cckd_chkds
  04842	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR fsp$[rsp]
  0484a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN282@cckd_chkds:

; 1759 :             fsp = NULL;

  04850	48 c7 84 24 20
	01 00 00 00 00
	00 00		 mov	 QWORD PTR fsp$[rsp], 0

; 1760 : 
; 1761 :             /* Check for gaps/overlaps */
; 1762 :             qsort (spctab, s, sizeof(SPCTAB), cdsk_spctab_sort);

  0485c	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  04864	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab_sort
  0486b	41 b8 18 00 00
	00		 mov	 r8d, 24
  04871	48 8b d0	 mov	 rdx, rax
  04874	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0487c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 1763 :             for (i = 0; !fsperr && spctab[i].spc_typ != SPCTAB_EOF; i++)

  04882	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  0488d	eb 10		 jmp	 SHORT $LN36@cckd_chkds
$LN34@cckd_chkds:
  0488f	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  04896	ff c0		 inc	 eax
  04898	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN36@cckd_chkds:
  0489f	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR fsperr$[rsp], 0
  048a7	75 7b		 jne	 SHORT $LN35@cckd_chkds
  048a9	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  048b1	48 6b c0 18	 imul	 rax, rax, 24
  048b5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  048bd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  048c1	83 f8 08	 cmp	 eax, 8
  048c4	74 5e		 je	 SHORT $LN35@cckd_chkds

; 1764 :                 if (spctab[i].spc_off + spctab[i].spc_siz != spctab[i+1].spc_off)

  048c6	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  048ce	48 6b c0 18	 imul	 rax, rax, 24
  048d2	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  048da	48 6b c9 18	 imul	 rcx, rcx, 24
  048de	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  048e6	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  048ea	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  048f2	03 44 0a 14	 add	 eax, DWORD PTR [rdx+rcx+20]
  048f6	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR i$[rsp]
  048fd	ff c1		 inc	 ecx
  048ff	48 63 c9	 movsxd	 rcx, ecx
  04902	48 6b c9 18	 imul	 rcx, rcx, 24
  04906	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0490e	3b 44 0a 0c	 cmp	 eax, DWORD PTR [rdx+rcx+12]
  04912	74 0b		 je	 SHORT $LN283@cckd_chkds

; 1765 :                     fsperr = 1;

  04914	c7 84 24 f8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR fsperr$[rsp], 1
$LN283@cckd_chkds:
  0491f	e9 6b ff ff ff	 jmp	 $LN34@cckd_chkds
$LN35@cckd_chkds:

; 1766 :             break;

  04924	eb 05		 jmp	 SHORT $LN27@cckd_chkds

; 1767 :         } /* while (cdevhdr.free_off) */

  04926	e9 6a f9 ff ff	 jmp	 $LN26@cckd_chkds
$LN27@cckd_chkds:
$LN263@cckd_chkds:

; 1768 :     } /* if (level >= 1 && !fsperr) */
; 1769 : 
; 1770 :     if (fsperr)

  0492b	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR fsperr$[rsp], 0
  04933	0f 84 d1 01 00
	00		 je	 $LN284@cckd_chkds

; 1771 :     {
; 1772 :         // "%1d:%04X CCKD file %s: free space errors detected"
; 1773 :         if(dev->batch)

  04939	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04941	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  04947	c1 e8 0a	 shr	 eax, 10
  0494a	83 e0 01	 and	 eax, 1
  0494d	85 c0		 test	 eax, eax
  0494f	0f 84 dd 00 00
	00		 je	 $LN285@cckd_chkds

; 1774 :             FWRMSG( stdout, HHC00368, "W", LCSS_DEVNUM, dev->filename);

  04955	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0495e	74 15		 je	 SHORT $LN653@cckd_chkds
  04960	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04968	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0496c	89 84 24 88 02
	00 00		 mov	 DWORD PTR tv2401[rsp], eax
  04973	eb 0b		 jmp	 SHORT $LN654@cckd_chkds
$LN653@cckd_chkds:
  04975	c7 84 24 88 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2401[rsp], 0
$LN654@cckd_chkds:
  04980	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04989	74 17		 je	 SHORT $LN655@cckd_chkds
  0498b	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04993	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  04997	d1 f8		 sar	 eax, 1
  04999	89 84 24 8c 02
	00 00		 mov	 DWORD PTR tv2407[rsp], eax
  049a0	eb 0b		 jmp	 SHORT $LN656@cckd_chkds
$LN655@cckd_chkds:
  049a2	c7 84 24 8c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2407[rsp], 0
$LN656@cckd_chkds:
  049ad	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  049b5	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  049bb	48 89 84 24 c8
	06 00 00	 mov	 QWORD PTR tv2396[rsp], rax
  049c3	b9 01 00 00 00	 mov	 ecx, 1
  049c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  049ce	48 8b 8c 24 c8
	06 00 00	 mov	 rcx, QWORD PTR tv2396[rsp]
  049d6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  049db	8b 8c 24 88 02
	00 00		 mov	 ecx, DWORD PTR tv2401[rsp]
  049e2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  049e6	8b 8c 24 8c 02
	00 00		 mov	 ecx, DWORD PTR tv2407[rsp]
  049ed	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  049f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170261
  049f8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  049fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170262
  04a04	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  04a09	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04a0e	41 b9 03 00 00
	00		 mov	 r9d, 3
  04a14	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170263
  04a1b	ba ee 06 00 00	 mov	 edx, 1774		; 000006eeH
  04a20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170264
  04a27	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  04a2d	e9 d8 00 00 00	 jmp	 $LN286@cckd_chkds
$LN285@cckd_chkds:

; 1775 :         else
; 1776 :             WRMSG( HHC00368, "W", LCSS_DEVNUM, dev->filename);

  04a32	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04a3b	74 15		 je	 SHORT $LN657@cckd_chkds
  04a3d	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04a45	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04a49	89 84 24 90 02
	00 00		 mov	 DWORD PTR tv2423[rsp], eax
  04a50	eb 0b		 jmp	 SHORT $LN658@cckd_chkds
$LN657@cckd_chkds:
  04a52	c7 84 24 90 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2423[rsp], 0
$LN658@cckd_chkds:
  04a5d	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04a66	74 17		 je	 SHORT $LN659@cckd_chkds
  04a68	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04a70	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  04a74	d1 f8		 sar	 eax, 1
  04a76	89 84 24 94 02
	00 00		 mov	 DWORD PTR tv2429[rsp], eax
  04a7d	eb 0b		 jmp	 SHORT $LN660@cckd_chkds
$LN659@cckd_chkds:
  04a7f	c7 84 24 94 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2429[rsp], 0
$LN660@cckd_chkds:
  04a8a	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04a92	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  04a98	48 89 84 24 d0
	06 00 00	 mov	 QWORD PTR tv2418[rsp], rax
  04aa0	b9 01 00 00 00	 mov	 ecx, 1
  04aa5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04aab	48 8b 8c 24 d0
	06 00 00	 mov	 rcx, QWORD PTR tv2418[rsp]
  04ab3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  04ab8	8b 8c 24 90 02
	00 00		 mov	 ecx, DWORD PTR tv2423[rsp]
  04abf	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  04ac3	8b 8c 24 94 02
	00 00		 mov	 ecx, DWORD PTR tv2429[rsp]
  04aca	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  04ace	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170265
  04ad5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  04ada	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170266
  04ae1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  04ae6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04aeb	41 b9 03 00 00
	00		 mov	 r9d, 3
  04af1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170267
  04af8	ba f0 06 00 00	 mov	 edx, 1776		; 000006f0H
  04afd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170268
  04b04	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN286@cckd_chkds:
$LN284@cckd_chkds:
$cdsk_space_check$833:

; 1777 :     }
; 1778 : 
; 1779 :     /*---------------------------------------------------------------
; 1780 :      * Read track headers/images
; 1781 :      *---------------------------------------------------------------*/
; 1782 : 
; 1783 : cdsk_space_check:
; 1784 : 
; 1785 :     if (level >= 2)

  04b0a	83 bc 24 d8 21
	04 00 02	 cmp	 DWORD PTR level$[rsp], 2
  04b12	0f 8c 39 0e 00
	00		 jl	 $LN287@cckd_chkds

; 1786 :     {
; 1787 :         for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  04b18	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  04b23	eb 10		 jmp	 SHORT $LN39@cckd_chkds
$LN37@cckd_chkds:
  04b25	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  04b2c	ff c0		 inc	 eax
  04b2e	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN39@cckd_chkds:
  04b35	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  04b3d	48 6b c0 18	 imul	 rax, rax, 24
  04b41	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04b49	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  04b4d	83 f8 08	 cmp	 eax, 8
  04b50	0f 84 fb 0d 00
	00		 je	 $LN38@cckd_chkds

; 1788 :         {
; 1789 :             if (spctab[i].spc_typ != trktyp) continue;

  04b56	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  04b5e	48 6b c0 18	 imul	 rax, rax, 24
  04b62	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04b6a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  04b6e	3b 84 24 d0 00
	00 00		 cmp	 eax, DWORD PTR trktyp$[rsp]
  04b75	74 02		 je	 SHORT $LN288@cckd_chkds
  04b77	eb ac		 jmp	 SHORT $LN37@cckd_chkds
$LN288@cckd_chkds:

; 1790 : 
; 1791 :             /* read the header or image depending on the check level */
; 1792 :             off = spctab[i].spc_off;

  04b79	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  04b81	48 6b c0 18	 imul	 rax, rax, 24
  04b85	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04b8d	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  04b91	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 1793 :             if ( lseek (fd, off, SEEK_SET) < 0 )

  04b99	45 33 c0	 xor	 r8d, r8d
  04b9c	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  04ba4	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04bab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  04bb1	48 85 c0	 test	 rax, rax
  04bb4	7d 05		 jge	 SHORT $LN289@cckd_chkds

; 1794 :                 goto cdsk_lseek_error;

  04bb6	e9 09 59 00 00	 jmp	 $cdsk_lseek_error$827
$LN289@cckd_chkds:

; 1795 :             gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  04bbb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  04bc2	83 38 00	 cmp	 DWORD PTR [rax], 0
  04bc5	74 43		 je	 SHORT $LN290@cckd_chkds
  04bc7	41 b8 01 00 00
	00		 mov	 r8d, 1
  04bcd	33 d2		 xor	 edx, edx
  04bcf	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04bd6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  04bdc	48 89 84 24 d8
	06 00 00	 mov	 QWORD PTR tv2466[rsp], rax
  04be4	b9 02 00 00 00	 mov	 ecx, 2
  04be9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04bef	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR tv2466[rsp]
  04bf7	4c 8b c1	 mov	 r8, rcx
  04bfa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170273
  04c01	48 8b c8	 mov	 rcx, rax
  04c04	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN290@cckd_chkds:

; 1796 :             len = level < 3 ? CKD_TRKHDR_SIZE : spctab[i].spc_len;

  04c0a	83 bc 24 d8 21
	04 00 03	 cmp	 DWORD PTR level$[rsp], 3
  04c12	7d 0e		 jge	 SHORT $LN661@cckd_chkds
  04c14	48 c7 84 24 60
	04 00 00 05 00
	00 00		 mov	 QWORD PTR tv2480[rsp], 5
  04c20	eb 20		 jmp	 SHORT $LN662@cckd_chkds
$LN661@cckd_chkds:
  04c22	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  04c2a	48 6b c0 18	 imul	 rax, rax, 24
  04c2e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04c36	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  04c3a	48 89 84 24 60
	04 00 00	 mov	 QWORD PTR tv2480[rsp], rax
$LN662@cckd_chkds:
  04c42	8b 84 24 60 04
	00 00		 mov	 eax, DWORD PTR tv2480[rsp]
  04c49	89 84 24 a4 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 1797 :             if ((rc = read (fd, buf, len)) != len)

  04c50	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  04c58	48 8d 94 24 a0
	21 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  04c60	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  04c67	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  04c6d	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  04c74	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  04c7b	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  04c82	74 05		 je	 SHORT $LN291@cckd_chkds

; 1798 :                 goto cdsk_read_error;

  04c84	e9 8b 5a 00 00	 jmp	 $cdsk_read_error$828
$LN291@cckd_chkds:

; 1799 : 
; 1800 :             /* Extract header info */
; 1801 :             comp = buf[0];

  04c89	b8 01 00 00 00	 mov	 eax, 1
  04c8e	48 6b c0 00	 imul	 rax, rax, 0
  04c92	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  04c9a	89 84 24 e0 00
	00 00		 mov	 DWORD PTR comp$[rsp], eax

; 1802 :             cyl  = fetch_hw (buf + 1);

  04ca1	48 8d 84 24 a1
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+1]
  04ca9	48 8b c8	 mov	 rcx, rax
  04cac	e8 00 00 00 00	 call	 fetch_hw_noswap
  04cb1	0f b7 c8	 movzx	 ecx, ax
  04cb4	e8 00 00 00 00	 call	 _byteswap_ushort
  04cb9	0f b7 c0	 movzx	 eax, ax
  04cbc	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cyl$[rsp], eax

; 1803 :             head = fetch_hw (buf + 3);

  04cc3	48 8d 84 24 a3
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+3]
  04ccb	48 8b c8	 mov	 rcx, rax
  04cce	e8 00 00 00 00	 call	 fetch_hw_noswap
  04cd3	0f b7 c8	 movzx	 ecx, ax
  04cd6	e8 00 00 00 00	 call	 _byteswap_ushort
  04cdb	0f b7 c0	 movzx	 eax, ax
  04cde	89 84 24 50 01
	00 00		 mov	 DWORD PTR head$[rsp], eax

; 1804 :             trk  = cyl * heads + head;

  04ce5	8b 84 24 4c 01
	00 00		 mov	 eax, DWORD PTR cyl$[rsp]
  04cec	0f af 84 24 cc
	00 00 00	 imul	 eax, DWORD PTR heads$[rsp]
  04cf4	03 84 24 50 01
	00 00		 add	 eax, DWORD PTR head$[rsp]
  04cfb	89 84 24 d4 00
	00 00		 mov	 DWORD PTR trk$[rsp], eax

; 1805 : 
; 1806 :             /* Validate header info */
; 1807 :             if (compmask[comp] == 0xff
; 1808 :              || cyl >= cyls || head >= heads
; 1809 :              || trk != spctab[i].spc_val)

  04d02	48 63 84 24 e0
	00 00 00	 movsxd	 rax, DWORD PTR comp$[rsp]
  04d0a	0f b6 84 04 20
	20 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  04d12	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  04d17	74 45		 je	 SHORT $LN293@cckd_chkds
  04d19	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cyls$[rsp]
  04d20	39 84 24 4c 01
	00 00		 cmp	 DWORD PTR cyl$[rsp], eax
  04d27	7d 35		 jge	 SHORT $LN293@cckd_chkds
  04d29	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR heads$[rsp]
  04d30	39 84 24 50 01
	00 00		 cmp	 DWORD PTR head$[rsp], eax
  04d37	7d 25		 jge	 SHORT $LN293@cckd_chkds
  04d39	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  04d41	48 6b c0 18	 imul	 rax, rax, 24
  04d45	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04d4d	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  04d51	39 84 24 d4 00
	00 00		 cmp	 DWORD PTR trk$[rsp], eax
  04d58	0f 84 36 06 00
	00		 je	 $LN292@cckd_chkds
$LN293@cckd_chkds:

; 1810 :             {
; 1811 :                 if(dev->batch)

  04d5e	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04d66	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  04d6c	c1 e8 0a	 shr	 eax, 10
  04d6f	83 e0 01	 and	 eax, 1
  04d72	85 c0		 test	 eax, eax
  04d74	0f 84 e3 01 00
	00		 je	 $LN294@cckd_chkds

; 1812 :                     FWRMSG( stdout, HHC00369, "W", LCSS_DEVNUM, dev->filename,

  04d7a	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04d83	74 15		 je	 SHORT $LN663@cckd_chkds
  04d85	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04d8d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04d91	89 84 24 98 02
	00 00		 mov	 DWORD PTR tv2554[rsp], eax
  04d98	eb 0b		 jmp	 SHORT $LN664@cckd_chkds
$LN663@cckd_chkds:
  04d9a	c7 84 24 98 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2554[rsp], 0
$LN664@cckd_chkds:
  04da5	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04dae	74 17		 je	 SHORT $LN665@cckd_chkds
  04db0	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04db8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  04dbc	d1 f8		 sar	 eax, 1
  04dbe	89 84 24 9c 02
	00 00		 mov	 DWORD PTR tv2560[rsp], eax
  04dc5	eb 0b		 jmp	 SHORT $LN666@cckd_chkds
$LN665@cckd_chkds:
  04dc7	c7 84 24 9c 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2560[rsp], 0
$LN666@cckd_chkds:
  04dd2	b8 01 00 00 00	 mov	 eax, 1
  04dd7	48 6b c0 04	 imul	 rax, rax, 4
  04ddb	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  04de3	89 84 24 2c 04
	00 00		 mov	 DWORD PTR tv2522[rsp], eax
  04dea	b9 01 00 00 00	 mov	 ecx, 1
  04def	48 6b c9 03	 imul	 rcx, rcx, 3
  04df3	0f b6 8c 0c a0
	21 00 00	 movzx	 ecx, BYTE PTR buf$[rsp+rcx]
  04dfb	89 8c 24 30 04
	00 00		 mov	 DWORD PTR tv2526[rsp], ecx
  04e02	ba 01 00 00 00	 mov	 edx, 1
  04e07	48 6b d2 02	 imul	 rdx, rdx, 2
  04e0b	0f b6 94 14 a0
	21 00 00	 movzx	 edx, BYTE PTR buf$[rsp+rdx]
  04e13	89 94 24 34 04
	00 00		 mov	 DWORD PTR tv2530[rsp], edx
  04e1a	bf 01 00 00 00	 mov	 edi, 1
  04e1f	48 6b ff 01	 imul	 rdi, rdi, 1
  04e23	0f b6 bc 3c a0
	21 00 00	 movzx	 edi, BYTE PTR buf$[rsp+rdi]
  04e2b	41 b8 01 00 00
	00		 mov	 r8d, 1
  04e31	4d 6b c0 00	 imul	 r8, r8, 0
  04e35	46 0f b6 84 04
	a0 21 00 00	 movzx	 r8d, BYTE PTR buf$[rsp+r8]
  04e3e	44 89 84 24 f8
	03 00 00	 mov	 DWORD PTR tv2538[rsp], r8d
  04e46	4c 63 8c 24 90
	00 00 00	 movsxd	 r9, DWORD PTR i$[rsp]
  04e4e	4d 6b c9 18	 imul	 r9, r9, 24
  04e52	4c 89 8c 24 e0
	06 00 00	 mov	 QWORD PTR tv2542[rsp], r9
  04e5a	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  04e62	e8 00 00 00 00	 call	 spc_typ_to_str
  04e67	48 89 84 24 e8
	06 00 00	 mov	 QWORD PTR tv2546[rsp], rax
  04e6f	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04e77	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  04e7e	48 89 8c 24 f0
	06 00 00	 mov	 QWORD PTR tv2549[rsp], rcx
  04e86	b9 01 00 00 00	 mov	 ecx, 1
  04e8b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04e91	8b 8c 24 2c 04
	00 00		 mov	 ecx, DWORD PTR tv2522[rsp]
  04e98	89 8c 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], ecx
  04e9f	8b 8c 24 30 04
	00 00		 mov	 ecx, DWORD PTR tv2526[rsp]
  04ea6	89 8c 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], ecx
  04ead	8b 8c 24 34 04
	00 00		 mov	 ecx, DWORD PTR tv2530[rsp]
  04eb4	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  04eb8	89 7c 24 70	 mov	 DWORD PTR [rsp+112], edi
  04ebc	8b 8c 24 f8 03
	00 00		 mov	 ecx, DWORD PTR tv2538[rsp]
  04ec3	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  04ec7	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  04ecf	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  04ed4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  04edc	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR tv2542[rsp]
  04ee4	8b 4c 11 04	 mov	 ecx, DWORD PTR [rcx+rdx+4]
  04ee8	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  04eec	48 8b 8c 24 e8
	06 00 00	 mov	 rcx, QWORD PTR tv2546[rsp]
  04ef4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  04ef9	48 8b 8c 24 f0
	06 00 00	 mov	 rcx, QWORD PTR tv2549[rsp]
  04f01	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  04f06	8b 8c 24 98 02
	00 00		 mov	 ecx, DWORD PTR tv2554[rsp]
  04f0d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  04f11	8b 8c 24 9c 02
	00 00		 mov	 ecx, DWORD PTR tv2560[rsp]
  04f18	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  04f1c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170279
  04f23	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  04f28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170280
  04f2f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  04f34	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04f39	41 b9 03 00 00
	00		 mov	 r9d, 3
  04f3f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170281
  04f46	ba 16 07 00 00	 mov	 edx, 1814		; 00000716H
  04f4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170282
  04f52	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  04f58	e9 de 01 00 00	 jmp	 $LN295@cckd_chkds
$LN294@cckd_chkds:

; 1813 :                             spc_typ_to_str( trktyp ), spctab[i].spc_val, off,
; 1814 :                             buf[0],buf[1],buf[2],buf[3],buf[4]);
; 1815 :                 else
; 1816 :                     WRMSG( HHC00369, "W", LCSS_DEVNUM, dev->filename,

  04f5d	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04f66	74 15		 je	 SHORT $LN667@cckd_chkds
  04f68	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04f70	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04f74	89 84 24 a0 02
	00 00		 mov	 DWORD PTR tv2605[rsp], eax
  04f7b	eb 0b		 jmp	 SHORT $LN668@cckd_chkds
$LN667@cckd_chkds:
  04f7d	c7 84 24 a0 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2605[rsp], 0
$LN668@cckd_chkds:
  04f88	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04f91	74 17		 je	 SHORT $LN669@cckd_chkds
  04f93	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  04f9b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  04f9f	d1 f8		 sar	 eax, 1
  04fa1	89 84 24 a4 02
	00 00		 mov	 DWORD PTR tv2611[rsp], eax
  04fa8	eb 0b		 jmp	 SHORT $LN670@cckd_chkds
$LN669@cckd_chkds:
  04faa	c7 84 24 a4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2611[rsp], 0
$LN670@cckd_chkds:
  04fb5	b8 01 00 00 00	 mov	 eax, 1
  04fba	48 6b c0 04	 imul	 rax, rax, 4
  04fbe	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  04fc6	89 84 24 fc 03
	00 00		 mov	 DWORD PTR tv2573[rsp], eax
  04fcd	b9 01 00 00 00	 mov	 ecx, 1
  04fd2	48 6b c9 03	 imul	 rcx, rcx, 3
  04fd6	0f b6 8c 0c a0
	21 00 00	 movzx	 ecx, BYTE PTR buf$[rsp+rcx]
  04fde	89 8c 24 00 04
	00 00		 mov	 DWORD PTR tv2577[rsp], ecx
  04fe5	ba 01 00 00 00	 mov	 edx, 1
  04fea	48 6b d2 02	 imul	 rdx, rdx, 2
  04fee	0f b6 94 14 a0
	21 00 00	 movzx	 edx, BYTE PTR buf$[rsp+rdx]
  04ff6	89 94 24 04 04
	00 00		 mov	 DWORD PTR tv2581[rsp], edx
  04ffd	bf 01 00 00 00	 mov	 edi, 1
  05002	48 6b ff 01	 imul	 rdi, rdi, 1
  05006	0f b6 bc 3c a0
	21 00 00	 movzx	 edi, BYTE PTR buf$[rsp+rdi]
  0500e	41 b8 01 00 00
	00		 mov	 r8d, 1
  05014	4d 6b c0 00	 imul	 r8, r8, 0
  05018	46 0f b6 84 04
	a0 21 00 00	 movzx	 r8d, BYTE PTR buf$[rsp+r8]
  05021	44 89 84 24 08
	04 00 00	 mov	 DWORD PTR tv2589[rsp], r8d
  05029	4c 63 8c 24 90
	00 00 00	 movsxd	 r9, DWORD PTR i$[rsp]
  05031	4d 6b c9 18	 imul	 r9, r9, 24
  05035	4c 89 8c 24 f8
	06 00 00	 mov	 QWORD PTR tv2593[rsp], r9
  0503d	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  05045	e8 00 00 00 00	 call	 spc_typ_to_str
  0504a	48 89 84 24 00
	07 00 00	 mov	 QWORD PTR tv2597[rsp], rax
  05052	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0505a	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  05061	48 89 8c 24 08
	07 00 00	 mov	 QWORD PTR tv2600[rsp], rcx
  05069	b9 01 00 00 00	 mov	 ecx, 1
  0506e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  05074	8b 8c 24 fc 03
	00 00		 mov	 ecx, DWORD PTR tv2573[rsp]
  0507b	89 8c 24 88 00
	00 00		 mov	 DWORD PTR [rsp+136], ecx
  05082	8b 8c 24 00 04
	00 00		 mov	 ecx, DWORD PTR tv2577[rsp]
  05089	89 8c 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], ecx
  05090	8b 8c 24 04 04
	00 00		 mov	 ecx, DWORD PTR tv2581[rsp]
  05097	89 4c 24 78	 mov	 DWORD PTR [rsp+120], ecx
  0509b	89 7c 24 70	 mov	 DWORD PTR [rsp+112], edi
  0509f	8b 8c 24 08 04
	00 00		 mov	 ecx, DWORD PTR tv2589[rsp]
  050a6	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  050aa	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  050b2	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  050b7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  050bf	48 8b 94 24 f8
	06 00 00	 mov	 rdx, QWORD PTR tv2593[rsp]
  050c7	8b 4c 11 04	 mov	 ecx, DWORD PTR [rcx+rdx+4]
  050cb	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  050cf	48 8b 8c 24 00
	07 00 00	 mov	 rcx, QWORD PTR tv2597[rsp]
  050d7	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  050dc	48 8b 8c 24 08
	07 00 00	 mov	 rcx, QWORD PTR tv2600[rsp]
  050e4	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  050e9	8b 8c 24 a0 02
	00 00		 mov	 ecx, DWORD PTR tv2605[rsp]
  050f0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  050f4	8b 8c 24 a4 02
	00 00		 mov	 ecx, DWORD PTR tv2611[rsp]
  050fb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  050ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170283
  05106	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0510b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170284
  05112	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  05117	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0511c	41 b9 03 00 00
	00		 mov	 r9d, 3
  05122	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170285
  05129	ba 1a 07 00 00	 mov	 edx, 1818		; 0000071aH
  0512e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170286
  05135	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN295@cckd_chkds:

; 1817 :                           spc_typ_to_str( trktyp ), spctab[i].spc_val, off,
; 1818 :                           buf[0],buf[1],buf[2],buf[3],buf[4]);
; 1819 : 
; 1820 :                 /* recover this track */
; 1821 :                 rcvtab[spctab[i].spc_val] = recovery = 1;

  0513b	c7 84 24 0c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR recovery$[rsp], 1
  05146	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0514e	48 6b c0 18	 imul	 rax, rax, 24
  05152	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0515a	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  0515f	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  05167	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR recovery$[rsp]
  0516f	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1822 :                 spctab[i].spc_typ = SPCTAB_NONE;

  05172	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0517a	48 6b c0 18	 imul	 rax, rax, 24
  0517e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05186	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1823 : 
; 1824 :                 /* Force level 3 checking */
; 1825 :                 if (level < 3)

  0518a	83 bc 24 d8 21
	04 00 03	 cmp	 DWORD PTR level$[rsp], 3
  05192	0f 8d f7 01 00
	00		 jge	 $LN296@cckd_chkds

; 1826 :                 {
; 1827 :                     level = 3;

  05198	c7 84 24 d8 21
	04 00 03 00 00
	00		 mov	 DWORD PTR level$[rsp], 3

; 1828 :                     if(dev->batch)

  051a3	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  051ab	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  051b1	c1 e8 0a	 shr	 eax, 10
  051b4	83 e0 01	 and	 eax, 1
  051b7	85 c0		 test	 eax, eax
  051b9	0f 84 e8 00 00
	00		 je	 $LN297@cckd_chkds

; 1829 :                         FWRMSG( stdout, HHC00364, "W", LCSS_DEVNUM,

  051bf	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  051c8	74 15		 je	 SHORT $LN671@cckd_chkds
  051ca	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  051d2	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  051d6	89 84 24 a8 02
	00 00		 mov	 DWORD PTR tv2676[rsp], eax
  051dd	eb 0b		 jmp	 SHORT $LN672@cckd_chkds
$LN671@cckd_chkds:
  051df	c7 84 24 a8 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2676[rsp], 0
$LN672@cckd_chkds:
  051ea	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  051f3	74 17		 je	 SHORT $LN673@cckd_chkds
  051f5	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  051fd	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  05201	d1 f8		 sar	 eax, 1
  05203	89 84 24 ac 02
	00 00		 mov	 DWORD PTR tv2682[rsp], eax
  0520a	eb 0b		 jmp	 SHORT $LN674@cckd_chkds
$LN673@cckd_chkds:
  0520c	c7 84 24 ac 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2682[rsp], 0
$LN674@cckd_chkds:
  05217	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0521f	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  05225	48 89 84 24 10
	07 00 00	 mov	 QWORD PTR tv2671[rsp], rax
  0522d	b9 01 00 00 00	 mov	 ecx, 1
  05232	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  05238	8b 8c 24 d8 21
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  0523f	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  05243	48 8b 8c 24 10
	07 00 00	 mov	 rcx, QWORD PTR tv2671[rsp]
  0524b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  05250	8b 8c 24 a8 02
	00 00		 mov	 ecx, DWORD PTR tv2676[rsp]
  05257	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0525b	8b 8c 24 ac 02
	00 00		 mov	 ecx, DWORD PTR tv2682[rsp]
  05262	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  05266	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170290
  0526d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  05272	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170291
  05279	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0527e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  05283	41 b9 03 00 00
	00		 mov	 r9d, 3
  05289	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170292
  05290	ba 26 07 00 00	 mov	 edx, 1830		; 00000726H
  05295	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170293
  0529c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  052a2	e9 e3 00 00 00	 jmp	 $LN298@cckd_chkds
$LN297@cckd_chkds:

; 1830 :                                 dev->filename, level);
; 1831 :                     else
; 1832 :                         WRMSG( HHC00364, "W", LCSS_DEVNUM, dev->filename, level);

  052a7	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  052b0	74 15		 je	 SHORT $LN675@cckd_chkds
  052b2	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  052ba	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  052be	89 84 24 b0 02
	00 00		 mov	 DWORD PTR tv2699[rsp], eax
  052c5	eb 0b		 jmp	 SHORT $LN676@cckd_chkds
$LN675@cckd_chkds:
  052c7	c7 84 24 b0 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2699[rsp], 0
$LN676@cckd_chkds:
  052d2	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  052db	74 17		 je	 SHORT $LN677@cckd_chkds
  052dd	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  052e5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  052e9	d1 f8		 sar	 eax, 1
  052eb	89 84 24 b4 02
	00 00		 mov	 DWORD PTR tv2705[rsp], eax
  052f2	eb 0b		 jmp	 SHORT $LN678@cckd_chkds
$LN677@cckd_chkds:
  052f4	c7 84 24 b4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2705[rsp], 0
$LN678@cckd_chkds:
  052ff	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05307	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0530d	48 89 84 24 18
	07 00 00	 mov	 QWORD PTR tv2694[rsp], rax
  05315	b9 01 00 00 00	 mov	 ecx, 1
  0531a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  05320	8b 8c 24 d8 21
	04 00		 mov	 ecx, DWORD PTR level$[rsp]
  05327	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  0532b	48 8b 8c 24 18
	07 00 00	 mov	 rcx, QWORD PTR tv2694[rsp]
  05333	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  05338	8b 8c 24 b0 02
	00 00		 mov	 ecx, DWORD PTR tv2699[rsp]
  0533f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  05343	8b 8c 24 b4 02
	00 00		 mov	 ecx, DWORD PTR tv2705[rsp]
  0534a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0534e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170294
  05355	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0535a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170295
  05361	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  05366	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0536b	41 b9 03 00 00
	00		 mov	 r9d, 3
  05371	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170296
  05378	ba 28 07 00 00	 mov	 edx, 1832		; 00000728H
  0537d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170297
  05384	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN298@cckd_chkds:

; 1833 :                     goto cdsk_space_check;

  0538a	e9 7b f7 ff ff	 jmp	 $cdsk_space_check$833
$LN296@cckd_chkds:

; 1834 :                 }
; 1835 :                 continue;

  0538f	e9 91 f7 ff ff	 jmp	 $LN37@cckd_chkds
$LN292@cckd_chkds:

; 1836 :             } /* if invalid header info */
; 1837 : 
; 1838 :             /* Check if compression supported */
; 1839 :             if (compmask[comp])

  05394	48 63 84 24 e0
	00 00 00	 movsxd	 rax, DWORD PTR comp$[rsp]
  0539c	0f b6 84 04 20
	20 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  053a4	85 c0		 test	 eax, eax
  053a6	0f 84 91 02 00
	00		 je	 $LN299@cckd_chkds

; 1840 :             {
; 1841 :                 comperrs = 1;

  053ac	c7 84 24 34 03
	00 00 01 00 00
	00		 mov	 DWORD PTR comperrs$[rsp], 1

; 1842 :                 if(dev->batch)

  053b7	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  053bf	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  053c5	c1 e8 0a	 shr	 eax, 10
  053c8	83 e0 01	 and	 eax, 1
  053cb	85 c0		 test	 eax, eax
  053cd	0f 84 35 01 00
	00		 je	 $LN300@cckd_chkds

; 1843 :                     FWRMSG( stdout, HHC00370, "W", LCSS_DEVNUM, dev->filename,

  053d3	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  053dc	74 15		 je	 SHORT $LN679@cckd_chkds
  053de	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  053e6	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  053ea	89 84 24 b8 02
	00 00		 mov	 DWORD PTR tv2740[rsp], eax
  053f1	eb 0b		 jmp	 SHORT $LN680@cckd_chkds
$LN679@cckd_chkds:
  053f3	c7 84 24 b8 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2740[rsp], 0
$LN680@cckd_chkds:
  053fe	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  05407	74 17		 je	 SHORT $LN681@cckd_chkds
  05409	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05411	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  05415	d1 f8		 sar	 eax, 1
  05417	89 84 24 bc 02
	00 00		 mov	 DWORD PTR tv2746[rsp], eax
  0541e	eb 0b		 jmp	 SHORT $LN682@cckd_chkds
$LN681@cckd_chkds:
  05420	c7 84 24 bc 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2746[rsp], 0
$LN682@cckd_chkds:
  0542b	48 63 84 24 e0
	00 00 00	 movsxd	 rax, DWORD PTR comp$[rsp]
  05433	0f b6 8c 04 20
	20 00 00	 movzx	 ecx, BYTE PTR compmask$[rsp+rax]
  0543b	e8 00 00 00 00	 call	 comp_to_str
  05440	48 89 84 24 20
	07 00 00	 mov	 QWORD PTR tv2725[rsp], rax
  05448	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  05450	e8 00 00 00 00	 call	 spc_typ_to_str
  05455	48 89 84 24 28
	07 00 00	 mov	 QWORD PTR tv2732[rsp], rax
  0545d	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05465	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0546c	48 89 8c 24 30
	07 00 00	 mov	 QWORD PTR tv2735[rsp], rcx
  05474	b9 01 00 00 00	 mov	 ecx, 1
  05479	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0547f	48 8b 8c 24 20
	07 00 00	 mov	 rcx, QWORD PTR tv2725[rsp]
  05487	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0548c	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  05493	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  05497	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR tv2732[rsp]
  0549f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  054a4	48 8b 8c 24 30
	07 00 00	 mov	 rcx, QWORD PTR tv2735[rsp]
  054ac	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  054b1	8b 8c 24 b8 02
	00 00		 mov	 ecx, DWORD PTR tv2740[rsp]
  054b8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  054bc	8b 8c 24 bc 02
	00 00		 mov	 ecx, DWORD PTR tv2746[rsp]
  054c3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  054c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170301
  054ce	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  054d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170302
  054da	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  054df	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  054e4	41 b9 03 00 00
	00		 mov	 r9d, 3
  054ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170303
  054f1	ba 34 07 00 00	 mov	 edx, 1844		; 00000734H
  054f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170304
  054fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  05503	e9 30 01 00 00	 jmp	 $LN301@cckd_chkds
$LN300@cckd_chkds:

; 1844 :                             spc_typ_to_str( trktyp ), trk, comp_to_str( compmask[ comp ]));
; 1845 :                 else
; 1846 :                     WRMSG( HHC00370, "W", LCSS_DEVNUM, dev->filename,

  05508	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  05511	74 15		 je	 SHORT $LN683@cckd_chkds
  05513	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0551b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0551f	89 84 24 c0 02
	00 00		 mov	 DWORD PTR tv2772[rsp], eax
  05526	eb 0b		 jmp	 SHORT $LN684@cckd_chkds
$LN683@cckd_chkds:
  05528	c7 84 24 c0 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2772[rsp], 0
$LN684@cckd_chkds:
  05533	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0553c	74 17		 je	 SHORT $LN685@cckd_chkds
  0553e	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05546	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0554a	d1 f8		 sar	 eax, 1
  0554c	89 84 24 c4 02
	00 00		 mov	 DWORD PTR tv2778[rsp], eax
  05553	eb 0b		 jmp	 SHORT $LN686@cckd_chkds
$LN685@cckd_chkds:
  05555	c7 84 24 c4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2778[rsp], 0
$LN686@cckd_chkds:
  05560	48 63 84 24 e0
	00 00 00	 movsxd	 rax, DWORD PTR comp$[rsp]
  05568	0f b6 8c 04 20
	20 00 00	 movzx	 ecx, BYTE PTR compmask$[rsp+rax]
  05570	e8 00 00 00 00	 call	 comp_to_str
  05575	48 89 84 24 38
	07 00 00	 mov	 QWORD PTR tv2757[rsp], rax
  0557d	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  05585	e8 00 00 00 00	 call	 spc_typ_to_str
  0558a	48 89 84 24 40
	07 00 00	 mov	 QWORD PTR tv2764[rsp], rax
  05592	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0559a	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  055a1	48 89 8c 24 48
	07 00 00	 mov	 QWORD PTR tv2767[rsp], rcx
  055a9	b9 01 00 00 00	 mov	 ecx, 1
  055ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  055b4	48 8b 8c 24 38
	07 00 00	 mov	 rcx, QWORD PTR tv2757[rsp]
  055bc	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  055c1	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  055c8	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  055cc	48 8b 8c 24 40
	07 00 00	 mov	 rcx, QWORD PTR tv2764[rsp]
  055d4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  055d9	48 8b 8c 24 48
	07 00 00	 mov	 rcx, QWORD PTR tv2767[rsp]
  055e1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  055e6	8b 8c 24 c0 02
	00 00		 mov	 ecx, DWORD PTR tv2772[rsp]
  055ed	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  055f1	8b 8c 24 c4 02
	00 00		 mov	 ecx, DWORD PTR tv2778[rsp]
  055f8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  055fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170305
  05603	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  05608	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170306
  0560f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  05614	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  05619	41 b9 03 00 00
	00		 mov	 r9d, 3
  0561f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170307
  05626	ba 37 07 00 00	 mov	 edx, 1847		; 00000737H
  0562b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170308
  05632	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN301@cckd_chkds:

; 1847 :                           spc_typ_to_str( trktyp ), trk, comp_to_str( compmask[ comp ]));
; 1848 :                 continue;

  05638	e9 e8 f4 ff ff	 jmp	 $LN37@cckd_chkds
$LN299@cckd_chkds:

; 1849 :             }
; 1850 : 
; 1851 :             /* Validate the space if check level 3 */
; 1852 :             if (level > 2)

  0563d	83 bc 24 d8 21
	04 00 02	 cmp	 DWORD PTR level$[rsp], 2
  05645	0f 8e 01 03 00
	00		 jle	 $LN302@cckd_chkds

; 1853 :             {
; 1854 :                 if (!cdsk_valid_trk (trk, buf, heads, len))

  0564b	44 8b 8c 24 a4
	00 00 00	 mov	 r9d, DWORD PTR len$[rsp]
  05653	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  0565b	48 8d 94 24 a0
	21 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  05663	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  0566a	e8 00 00 00 00	 call	 cdsk_valid_trk
  0566f	85 c0		 test	 eax, eax
  05671	0f 85 c1 02 00
	00		 jne	 $LN303@cckd_chkds

; 1855 :                 {
; 1856 :                     if(dev->batch)

  05677	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0567f	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  05685	c1 e8 0a	 shr	 eax, 10
  05688	83 e0 01	 and	 eax, 1
  0568b	85 c0		 test	 eax, eax
  0568d	0f 84 35 01 00
	00		 je	 $LN305@cckd_chkds

; 1857 :                         // "%1d:%04X CCKD file %s: %s[%d] offset 0x%16.16"PRIX64" len %"PRId64" validation error"
; 1858 :                         FWRMSG( stdout, HHC00371, "W", LCSS_DEVNUM, dev->filename,

  05693	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0569c	74 15		 je	 SHORT $LN687@cckd_chkds
  0569e	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  056a6	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  056aa	89 84 24 c8 02
	00 00		 mov	 DWORD PTR tv2812[rsp], eax
  056b1	eb 0b		 jmp	 SHORT $LN688@cckd_chkds
$LN687@cckd_chkds:
  056b3	c7 84 24 c8 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2812[rsp], 0
$LN688@cckd_chkds:
  056be	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  056c7	74 17		 je	 SHORT $LN689@cckd_chkds
  056c9	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  056d1	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  056d5	d1 f8		 sar	 eax, 1
  056d7	89 84 24 cc 02
	00 00		 mov	 DWORD PTR tv2818[rsp], eax
  056de	eb 0b		 jmp	 SHORT $LN690@cckd_chkds
$LN689@cckd_chkds:
  056e0	c7 84 24 cc 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2818[rsp], 0
$LN690@cckd_chkds:
  056eb	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  056f3	48 89 84 24 50
	07 00 00	 mov	 QWORD PTR tv2800[rsp], rax
  056fb	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  05703	e8 00 00 00 00	 call	 spc_typ_to_str
  05708	48 89 84 24 58
	07 00 00	 mov	 QWORD PTR tv2804[rsp], rax
  05710	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05718	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0571f	48 89 8c 24 60
	07 00 00	 mov	 QWORD PTR tv2807[rsp], rcx
  05727	b9 01 00 00 00	 mov	 ecx, 1
  0572c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  05732	48 8b 8c 24 50
	07 00 00	 mov	 rcx, QWORD PTR tv2800[rsp]
  0573a	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  0573f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  05747	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0574c	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  05753	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  05757	48 8b 8c 24 58
	07 00 00	 mov	 rcx, QWORD PTR tv2804[rsp]
  0575f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  05764	48 8b 8c 24 60
	07 00 00	 mov	 rcx, QWORD PTR tv2807[rsp]
  0576c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  05771	8b 8c 24 c8 02
	00 00		 mov	 ecx, DWORD PTR tv2812[rsp]
  05778	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0577c	8b 8c 24 cc 02
	00 00		 mov	 ecx, DWORD PTR tv2818[rsp]
  05783	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  05787	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170314
  0578e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  05793	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170315
  0579a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0579f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  057a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  057aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170316
  057b1	ba 43 07 00 00	 mov	 edx, 1859		; 00000743H
  057b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170317
  057bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  057c3	e9 30 01 00 00	 jmp	 $LN306@cckd_chkds
$LN305@cckd_chkds:

; 1859 :                                 spc_typ_to_str( trktyp ), trk, off, (S64)len);
; 1860 :                     else
; 1861 :                         // "%1d:%04X CCKD file %s: %s[%d] offset 0x%16.16"PRIX64" len %"PRId64" validation error"
; 1862 :                         WRMSG( HHC00371, "W", LCSS_DEVNUM, dev->filename,

  057c8	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  057d1	74 15		 je	 SHORT $LN691@cckd_chkds
  057d3	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  057db	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  057df	89 84 24 d0 02
	00 00		 mov	 DWORD PTR tv2841[rsp], eax
  057e6	eb 0b		 jmp	 SHORT $LN692@cckd_chkds
$LN691@cckd_chkds:
  057e8	c7 84 24 d0 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2841[rsp], 0
$LN692@cckd_chkds:
  057f3	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  057fc	74 17		 je	 SHORT $LN693@cckd_chkds
  057fe	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  05806	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0580a	d1 f8		 sar	 eax, 1
  0580c	89 84 24 d4 02
	00 00		 mov	 DWORD PTR tv2847[rsp], eax
  05813	eb 0b		 jmp	 SHORT $LN694@cckd_chkds
$LN693@cckd_chkds:
  05815	c7 84 24 d4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2847[rsp], 0
$LN694@cckd_chkds:
  05820	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  05828	48 89 84 24 68
	07 00 00	 mov	 QWORD PTR tv2829[rsp], rax
  05830	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  05838	e8 00 00 00 00	 call	 spc_typ_to_str
  0583d	48 89 84 24 70
	07 00 00	 mov	 QWORD PTR tv2833[rsp], rax
  05845	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0584d	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  05854	48 89 8c 24 78
	07 00 00	 mov	 QWORD PTR tv2836[rsp], rcx
  0585c	b9 01 00 00 00	 mov	 ecx, 1
  05861	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  05867	48 8b 8c 24 68
	07 00 00	 mov	 rcx, QWORD PTR tv2829[rsp]
  0586f	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  05874	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0587c	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  05881	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  05888	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  0588c	48 8b 8c 24 70
	07 00 00	 mov	 rcx, QWORD PTR tv2833[rsp]
  05894	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  05899	48 8b 8c 24 78
	07 00 00	 mov	 rcx, QWORD PTR tv2836[rsp]
  058a1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  058a6	8b 8c 24 d0 02
	00 00		 mov	 ecx, DWORD PTR tv2841[rsp]
  058ad	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  058b1	8b 8c 24 d4 02
	00 00		 mov	 ecx, DWORD PTR tv2847[rsp]
  058b8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  058bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170318
  058c3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  058c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170319
  058cf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  058d4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  058d9	41 b9 03 00 00
	00		 mov	 r9d, 3
  058df	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170320
  058e6	ba 47 07 00 00	 mov	 edx, 1863		; 00000747H
  058eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170321
  058f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN306@cckd_chkds:

; 1863 :                               spc_typ_to_str( trktyp ), trk, off, (S64)len);
; 1864 : 
; 1865 :                     /* recover this track */
; 1866 :                     rcvtab[trk] = recovery = 1;

  058f8	c7 84 24 0c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR recovery$[rsp], 1
  05903	48 63 84 24 d4
	00 00 00	 movsxd	 rax, DWORD PTR trk$[rsp]
  0590b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  05913	0f b6 94 24 0c
	01 00 00	 movzx	 edx, BYTE PTR recovery$[rsp]
  0591b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1867 :                     spctab[i].spc_typ = SPCTAB_NONE;

  0591e	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  05926	48 6b c0 18	 imul	 rax, rax, 24
  0592a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05932	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1868 :                 } /* if invalid space */

  05936	eb 14		 jmp	 SHORT $LN304@cckd_chkds
$LN303@cckd_chkds:

; 1869 :                 else
; 1870 :                     rcvtab[trk] = 0;

  05938	48 63 84 24 d4
	00 00 00	 movsxd	 rax, DWORD PTR trk$[rsp]
  05940	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  05948	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN304@cckd_chkds:
$LN302@cckd_chkds:

; 1871 :             } /* if level > 2 */
; 1872 :         } /* for each space */

  0594c	e9 d4 f1 ff ff	 jmp	 $LN37@cckd_chkds
$LN38@cckd_chkds:
$LN287@cckd_chkds:
$cdsk_recovery$832:

; 1873 :     } /* if (level >= 2) */
; 1874 : 
; 1875 :     /*---------------------------------------------------------------
; 1876 :      * Recovery
; 1877 :      *---------------------------------------------------------------*/
; 1878 : 
; 1879 : cdsk_recovery:
; 1880 : 
; 1881 :     if (recovery || level == 4)

  05951	83 bc 24 0c 01
	00 00 00	 cmp	 DWORD PTR recovery$[rsp], 0
  05959	75 0e		 jne	 SHORT $LN308@cckd_chkds
  0595b	83 bc 24 d8 21
	04 00 04	 cmp	 DWORD PTR level$[rsp], 4
  05963	0f 85 a7 31 00
	00		 jne	 $LN307@cckd_chkds
$LN308@cckd_chkds:

; 1882 :     {
; 1883 :      U32 flen, fpos;
; 1884 : 
; 1885 :         /*-----------------------------------------------------------
; 1886 :          * Phase 1 -- recover trk/blkgrp images
; 1887 :          *-----------------------------------------------------------*/
; 1888 :         /*
; 1889 :          * Reset the end-of-file pos to the file size
; 1890 :          * It might have been changed if new format free space
; 1891 :          * occurred at the end of the file.
; 1892 :          */
; 1893 :         qsort (spctab, s, sizeof(SPCTAB), cdsk_spctab_sort);

  05969	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  05971	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab_sort
  05978	41 b8 18 00 00
	00		 mov	 r8d, 24
  0597e	48 8b d0	 mov	 rdx, rax
  05981	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05989	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN40@cckd_chkds:

; 1894 :         while (spctab[s-1].spc_typ == SPCTAB_NONE) s--;

  0598f	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  05996	ff c8		 dec	 eax
  05998	48 98		 cdqe
  0599a	48 6b c0 18	 imul	 rax, rax, 24
  0599e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  059a6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  059aa	85 c0		 test	 eax, eax
  059ac	75 12		 jne	 SHORT $LN41@cckd_chkds
  059ae	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  059b5	ff c8		 dec	 eax
  059b7	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax
  059be	eb cf		 jmp	 SHORT $LN40@cckd_chkds
$LN41@cckd_chkds:

; 1895 :         spctab[s-1].spc_off = (U32)fst.st_size;

  059c0	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  059c7	ff c8		 dec	 eax
  059c9	48 98		 cdqe
  059cb	48 6b c0 18	 imul	 rax, rax, 24
  059cf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  059d7	8b 94 24 b8 0d
	00 00		 mov	 edx, DWORD PTR fst$[rsp+24]
  059de	89 54 01 0c	 mov	 DWORD PTR [rcx+rax+12], edx

; 1896 : 
; 1897 :         /* count number tracks to be recovered */
; 1898 :         for (i = n = 0; i < trks; i++)

  059e2	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR n$[rsp], 0
  059ed	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  059f4	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
  059fb	eb 10		 jmp	 SHORT $LN44@cckd_chkds
$LN42@cckd_chkds:
  059fd	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  05a04	ff c0		 inc	 eax
  05a06	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN44@cckd_chkds:
  05a0d	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  05a14	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  05a1b	7d 2b		 jge	 SHORT $LN43@cckd_chkds

; 1899 :             if (rcvtab[i] == 1)

  05a1d	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  05a25	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  05a2d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05a31	83 f8 01	 cmp	 eax, 1
  05a34	75 10		 jne	 SHORT $LN309@cckd_chkds

; 1900 :                n++;

  05a36	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  05a3d	ff c0		 inc	 eax
  05a3f	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax
$LN309@cckd_chkds:
  05a46	eb b5		 jmp	 SHORT $LN42@cckd_chkds
$LN43@cckd_chkds:

; 1901 : 
; 1902 :         /*-----------------------------------------------------------
; 1903 :          * ckd recovery
; 1904 :          *-----------------------------------------------------------*/
; 1905 :         if (ckddasd)

  05a48	83 bc 24 74 01
	00 00 00	 cmp	 DWORD PTR ckddasd$[rsp], 0
  05a50	0f 84 aa 0e 00
	00		 je	 $LN310@cckd_chkds

; 1906 :         {
; 1907 :             /* recovery loop */
; 1908 :             s = cdsk_build_free_space (spctab, s);

  05a56	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR s$[rsp]
  05a5d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05a65	e8 00 00 00 00	 call	 cdsk_build_free_space
  05a6a	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 1909 :             for (f = 0; spctab[f].spc_typ != SPCTAB_EOF && n; )

  05a71	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR f$[rsp], 0
$LN45@cckd_chkds:
  05a7c	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  05a84	48 6b c0 18	 imul	 rax, rax, 24
  05a88	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05a90	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05a94	83 f8 08	 cmp	 eax, 8
  05a97	0f 84 63 0e 00
	00		 je	 $LN46@cckd_chkds
  05a9d	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR n$[rsp], 0
  05aa5	0f 84 55 0e 00
	00		 je	 $LN46@cckd_chkds

; 1910 :             {
; 1911 :                 /* next free space if too small */
; 1912 :                 if (spctab[f].spc_typ != SPCTAB_FREE
; 1913 :                  || spctab[f].spc_siz <= CKD_TRKHDR_SIZE+8)

  05aab	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  05ab3	48 6b c0 18	 imul	 rax, rax, 24
  05ab7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05abf	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05ac3	83 f8 07	 cmp	 eax, 7
  05ac6	75 1e		 jne	 SHORT $LN312@cckd_chkds
  05ac8	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  05ad0	48 6b c0 18	 imul	 rax, rax, 24
  05ad4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05adc	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  05ae0	48 83 f8 0d	 cmp	 rax, 13
  05ae4	7f 65		 jg	 SHORT $LN311@cckd_chkds
$LN312@cckd_chkds:

; 1914 :                 {
; 1915 :                     for (f = f + 1; spctab[f].spc_typ != SPCTAB_EOF; f++)

  05ae6	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR f$[rsp]
  05aed	ff c0		 inc	 eax
  05aef	89 84 24 bc 00
	00 00		 mov	 DWORD PTR f$[rsp], eax
  05af6	eb 10		 jmp	 SHORT $LN50@cckd_chkds
$LN48@cckd_chkds:
  05af8	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR f$[rsp]
  05aff	ff c0		 inc	 eax
  05b01	89 84 24 bc 00
	00 00		 mov	 DWORD PTR f$[rsp], eax
$LN50@cckd_chkds:
  05b08	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  05b10	48 6b c0 18	 imul	 rax, rax, 24
  05b14	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05b1c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05b20	83 f8 08	 cmp	 eax, 8
  05b23	74 21		 je	 SHORT $LN49@cckd_chkds

; 1916 :                         if (spctab[f].spc_typ == SPCTAB_FREE)

  05b25	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  05b2d	48 6b c0 18	 imul	 rax, rax, 24
  05b31	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05b39	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05b3d	83 f8 07	 cmp	 eax, 7
  05b40	75 02		 jne	 SHORT $LN313@cckd_chkds

; 1917 :                             break;

  05b42	eb 02		 jmp	 SHORT $LN49@cckd_chkds
$LN313@cckd_chkds:
  05b44	eb b2		 jmp	 SHORT $LN48@cckd_chkds
$LN49@cckd_chkds:

; 1918 :                     continue;

  05b46	e9 31 ff ff ff	 jmp	 $LN45@cckd_chkds
$LN311@cckd_chkds:

; 1919 :                 }
; 1920 : 
; 1921 :                 fpos = spctab[f].spc_off;

  05b4b	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  05b53	48 6b c0 18	 imul	 rax, rax, 24
  05b57	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05b5f	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  05b63	89 84 24 e8 02
	00 00		 mov	 DWORD PTR fpos$5[rsp], eax

; 1922 :                 flen = spctab[f].spc_siz;

  05b6a	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  05b72	48 6b c0 18	 imul	 rax, rax, 24
  05b76	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  05b7e	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  05b82	89 84 24 58 01
	00 00		 mov	 DWORD PTR flen$2[rsp], eax

; 1923 : 
; 1924 :                 /* length to read */
; 1925 :                 len = flen < sizeof(buf) ? flen : sizeof(buf);

  05b89	8b 84 24 58 01
	00 00		 mov	 eax, DWORD PTR flen$2[rsp]
  05b90	48 3d 00 00 04
	00		 cmp	 rax, 262144		; 00040000H
  05b96	73 11		 jae	 SHORT $LN695@cckd_chkds
  05b98	8b 84 24 58 01
	00 00		 mov	 eax, DWORD PTR flen$2[rsp]
  05b9f	48 89 84 24 68
	04 00 00	 mov	 QWORD PTR tv2944[rsp], rax
  05ba7	eb 0c		 jmp	 SHORT $LN696@cckd_chkds
$LN695@cckd_chkds:
  05ba9	48 c7 84 24 68
	04 00 00 00 00
	04 00		 mov	 QWORD PTR tv2944[rsp], 262144 ; 00040000H
$LN696@cckd_chkds:
  05bb5	8b 84 24 68 04
	00 00		 mov	 eax, DWORD PTR tv2944[rsp]
  05bbc	89 84 24 a4 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 1926 : 
; 1927 :                 /* read the free space */
; 1928 :                 off = (off_t)fpos;

  05bc3	8b 84 24 e8 02
	00 00		 mov	 eax, DWORD PTR fpos$5[rsp]
  05bca	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 1929 :                 if (lseek (fd, off, SEEK_SET) < 0)

  05bd2	45 33 c0	 xor	 r8d, r8d
  05bd5	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  05bdd	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  05be4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  05bea	48 85 c0	 test	 rax, rax
  05bed	7d 05		 jge	 SHORT $LN314@cckd_chkds

; 1930 :                     goto cdsk_lseek_error;

  05bef	e9 d0 48 00 00	 jmp	 $cdsk_lseek_error$827
$LN314@cckd_chkds:

; 1931 :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  05bf4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  05bfb	83 38 00	 cmp	 DWORD PTR [rax], 0
  05bfe	74 43		 je	 SHORT $LN315@cckd_chkds
  05c00	41 b8 01 00 00
	00		 mov	 r8d, 1
  05c06	33 d2		 xor	 edx, edx
  05c08	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  05c0f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  05c15	48 89 84 24 80
	07 00 00	 mov	 QWORD PTR tv2954[rsp], rax
  05c1d	b9 02 00 00 00	 mov	 ecx, 2
  05c22	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  05c28	48 8b 8c 24 80
	07 00 00	 mov	 rcx, QWORD PTR tv2954[rsp]
  05c30	4c 8b c1	 mov	 r8, rcx
  05c33	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170331
  05c3a	48 8b c8	 mov	 rcx, rax
  05c3d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN315@cckd_chkds:

; 1932 :                 if ((rc = read (fd, buf, len)) != len)

  05c43	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  05c4b	48 8d 94 24 a0
	21 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  05c53	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  05c5a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  05c60	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  05c67	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  05c6e	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  05c75	74 05		 je	 SHORT $LN316@cckd_chkds

; 1933 :                     goto cdsk_read_error;

  05c77	e9 98 4a 00 00	 jmp	 $cdsk_read_error$828
$LN316@cckd_chkds:

; 1934 : 
; 1935 :                 /* Scan the space for a trkhdr */
; 1936 :                 for (i = 0; i < len - (CKD_TRKHDR_SIZE+8); i++)

  05c7c	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  05c87	eb 10		 jmp	 SHORT $LN53@cckd_chkds
$LN51@cckd_chkds:
  05c89	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  05c90	ff c0		 inc	 eax
  05c92	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN53@cckd_chkds:
  05c99	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  05ca1	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR len$[rsp]
  05ca9	48 83 e9 0d	 sub	 rcx, 13
  05cad	48 3b c1	 cmp	 rax, rcx
  05cb0	0f 8d 9c 0b 00
	00		 jge	 $LN52@cckd_chkds

; 1937 :                 {
; 1938 :                     /* Check compression byte */
; 1939 :                     if (compmask[buf[i]])

  05cb6	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  05cbe	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  05cc6	0f b6 84 04 20
	20 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  05cce	85 c0		 test	 eax, eax
  05cd0	74 02		 je	 SHORT $LN317@cckd_chkds

; 1940 :                         continue;

  05cd2	eb b5		 jmp	 SHORT $LN51@cckd_chkds
$LN317@cckd_chkds:

; 1941 : 
; 1942 :                     /* Fetch possible trkhdr */
; 1943 :                     comp = buf[i];

  05cd4	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  05cdc	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  05ce4	89 84 24 e0 00
	00 00		 mov	 DWORD PTR comp$[rsp], eax

; 1944 :                     cyl  = fetch_hw (buf + i + 1);

  05ceb	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  05cf3	48 8d 84 04 a1
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+1]
  05cfb	48 8b c8	 mov	 rcx, rax
  05cfe	e8 00 00 00 00	 call	 fetch_hw_noswap
  05d03	0f b7 c8	 movzx	 ecx, ax
  05d06	e8 00 00 00 00	 call	 _byteswap_ushort
  05d0b	0f b7 c0	 movzx	 eax, ax
  05d0e	89 84 24 4c 01
	00 00		 mov	 DWORD PTR cyl$[rsp], eax

; 1945 :                     head = fetch_hw (buf + i + 3);

  05d15	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  05d1d	48 8d 84 04 a3
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+3]
  05d25	48 8b c8	 mov	 rcx, rax
  05d28	e8 00 00 00 00	 call	 fetch_hw_noswap
  05d2d	0f b7 c8	 movzx	 ecx, ax
  05d30	e8 00 00 00 00	 call	 _byteswap_ushort
  05d35	0f b7 c0	 movzx	 eax, ax
  05d38	89 84 24 50 01
	00 00		 mov	 DWORD PTR head$[rsp], eax

; 1946 :                     trk  = cyl * heads + head;

  05d3f	8b 84 24 4c 01
	00 00		 mov	 eax, DWORD PTR cyl$[rsp]
  05d46	0f af 84 24 cc
	00 00 00	 imul	 eax, DWORD PTR heads$[rsp]
  05d4e	03 84 24 50 01
	00 00		 add	 eax, DWORD PTR head$[rsp]
  05d55	89 84 24 d4 00
	00 00		 mov	 DWORD PTR trk$[rsp], eax

; 1947 : 
; 1948 :                     /* Validate possible trkhdr */
; 1949 :                     if (cyl >= cyls || head >= heads || rcvtab[trk] != 1)

  05d5c	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR cyls$[rsp]
  05d63	39 84 24 4c 01
	00 00		 cmp	 DWORD PTR cyl$[rsp], eax
  05d6a	7d 29		 jge	 SHORT $LN319@cckd_chkds
  05d6c	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR heads$[rsp]
  05d73	39 84 24 50 01
	00 00		 cmp	 DWORD PTR head$[rsp], eax
  05d7a	7d 19		 jge	 SHORT $LN319@cckd_chkds
  05d7c	48 63 84 24 d4
	00 00 00	 movsxd	 rax, DWORD PTR trk$[rsp]
  05d84	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  05d8c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05d90	83 f8 01	 cmp	 eax, 1
  05d93	74 05		 je	 SHORT $LN318@cckd_chkds
$LN319@cckd_chkds:

; 1950 :                         continue;

  05d95	e9 ef fe ff ff	 jmp	 $LN51@cckd_chkds
$LN318@cckd_chkds:

; 1951 : 
; 1952 :                     /* Quick validation for compress none */
; 1953 :                     if (comp == CCKD_COMPRESS_NONE
; 1954 :                      && (fetch_hw (buf + i +  5) != cyl   // r0 cyl

  05d9a	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR comp$[rsp], 0
  05da2	0f 85 be 00 00
	00		 jne	 $LN320@cckd_chkds
  05da8	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  05db0	48 8d 84 04 a5
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+5]
  05db8	48 8b c8	 mov	 rcx, rax
  05dbb	e8 00 00 00 00	 call	 fetch_hw_noswap
  05dc0	0f b7 c8	 movzx	 ecx, ax
  05dc3	e8 00 00 00 00	 call	 _byteswap_ushort
  05dc8	0f b7 c0	 movzx	 eax, ax
  05dcb	3b 84 24 4c 01
	00 00		 cmp	 eax, DWORD PTR cyl$[rsp]
  05dd2	0f 85 84 00 00
	00		 jne	 $LN322@cckd_chkds
  05dd8	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  05de0	48 8d 84 04 a7
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+7]
  05de8	48 8b c8	 mov	 rcx, rax
  05deb	e8 00 00 00 00	 call	 fetch_hw_noswap
  05df0	0f b7 c8	 movzx	 ecx, ax
  05df3	e8 00 00 00 00	 call	 _byteswap_ushort
  05df8	0f b7 c0	 movzx	 eax, ax
  05dfb	3b 84 24 50 01
	00 00		 cmp	 eax, DWORD PTR head$[rsp]
  05e02	75 58		 jne	 SHORT $LN322@cckd_chkds
  05e04	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  05e0b	83 c0 09	 add	 eax, 9
  05e0e	48 98		 cdqe
  05e10	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  05e18	85 c0		 test	 eax, eax
  05e1a	75 40		 jne	 SHORT $LN322@cckd_chkds
  05e1c	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  05e23	83 c0 0a	 add	 eax, 10
  05e26	48 98		 cdqe
  05e28	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  05e30	85 c0		 test	 eax, eax
  05e32	75 28		 jne	 SHORT $LN322@cckd_chkds
  05e34	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  05e3c	48 8d 84 04 ab
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+11]
  05e44	48 8b c8	 mov	 rcx, rax
  05e47	e8 00 00 00 00	 call	 fetch_hw_noswap
  05e4c	0f b7 c8	 movzx	 ecx, ax
  05e4f	e8 00 00 00 00	 call	 _byteswap_ushort
  05e54	0f b7 c0	 movzx	 eax, ax
  05e57	83 f8 08	 cmp	 eax, 8
  05e5a	74 0a		 je	 SHORT $LN320@cckd_chkds
$LN322@cckd_chkds:

; 1955 :                       || fetch_hw (buf + i +  7) != head  // r0 head
; 1956 :                       || buf[i +  9] != 0                 // r0 record
; 1957 :                       || buf[i + 10] != 0                 // r0 key length
; 1958 :                       || fetch_hw (buf + i + 11) != 8     // r0 data length
; 1959 :                         )
; 1960 :                        )
; 1961 :                         continue;

  05e5c	e9 28 fe ff ff	 jmp	 $LN51@cckd_chkds
  05e61	e9 83 00 00 00	 jmp	 $LN321@cckd_chkds
$LN320@cckd_chkds:

; 1962 : 
; 1963 :                     /* Quick validation for zlib */
; 1964 :                     else if (comp == CCKD_COMPRESS_ZLIB
; 1965 :                      && fetch_hw(buf + i + 5) % 31 != 0)

  05e66	83 bc 24 e0 00
	00 00 01	 cmp	 DWORD PTR comp$[rsp], 1
  05e6e	75 38		 jne	 SHORT $LN323@cckd_chkds
  05e70	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  05e78	48 8d 84 04 a5
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+5]
  05e80	48 8b c8	 mov	 rcx, rax
  05e83	e8 00 00 00 00	 call	 fetch_hw_noswap
  05e88	0f b7 c8	 movzx	 ecx, ax
  05e8b	e8 00 00 00 00	 call	 _byteswap_ushort
  05e90	0f b7 c0	 movzx	 eax, ax
  05e93	99		 cdq
  05e94	b9 1f 00 00 00	 mov	 ecx, 31
  05e99	f7 f9		 idiv	 ecx
  05e9b	8b c2		 mov	 eax, edx
  05e9d	85 c0		 test	 eax, eax
  05e9f	74 07		 je	 SHORT $LN323@cckd_chkds

; 1966 :                         continue;

  05ea1	e9 e3 fd ff ff	 jmp	 $LN51@cckd_chkds
  05ea6	eb 41		 jmp	 SHORT $LN324@cckd_chkds
$LN323@cckd_chkds:

; 1967 : 
; 1968 :                     /* Quick validation for bzip2 */
; 1969 :                     else if (comp == CCKD_COMPRESS_BZIP2
; 1970 :                      && (buf[i+5] != 'B' || buf[i+6] != 'Z'))

  05ea8	83 bc 24 e0 00
	00 00 02	 cmp	 DWORD PTR comp$[rsp], 2
  05eb0	75 37		 jne	 SHORT $LN325@cckd_chkds
  05eb2	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  05eb9	83 c0 05	 add	 eax, 5
  05ebc	48 98		 cdqe
  05ebe	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  05ec6	83 f8 42	 cmp	 eax, 66			; 00000042H
  05ec9	75 19		 jne	 SHORT $LN326@cckd_chkds
  05ecb	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  05ed2	83 c0 06	 add	 eax, 6
  05ed5	48 98		 cdqe
  05ed7	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  05edf	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  05ee2	74 05		 je	 SHORT $LN325@cckd_chkds
$LN326@cckd_chkds:

; 1971 :                         continue;

  05ee4	e9 a0 fd ff ff	 jmp	 $LN51@cckd_chkds
$LN325@cckd_chkds:
$LN324@cckd_chkds:
$LN321@cckd_chkds:

; 1972 :                     /*
; 1973 :                      * If we are in `borrowed space' then start over
; 1974 :                      * with the current position at the beginning
; 1975 :                      */
; 1976 :                     if (flen > (U32)len && i > len - (int)trksz)

  05ee9	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  05ef0	39 84 24 58 01
	00 00		 cmp	 DWORD PTR flen$2[rsp], eax
  05ef7	76 20		 jbe	 SHORT $LN327@cckd_chkds
  05ef9	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR trksz$[rsp]
  05f00	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  05f07	2b c8		 sub	 ecx, eax
  05f09	8b c1		 mov	 eax, ecx
  05f0b	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  05f12	7e 05		 jle	 SHORT $LN327@cckd_chkds

; 1977 :                         break;

  05f14	e9 39 09 00 00	 jmp	 $LN52@cckd_chkds
$LN327@cckd_chkds:

; 1978 : 
; 1979 :                     /* Checks for comp none */
; 1980 :                     if (comp == CCKD_COMPRESS_NONE)

  05f19	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR comp$[rsp], 0
  05f21	75 69		 jne	 SHORT $LN328@cckd_chkds

; 1981 :                     {
; 1982 :                         l = len - i;

  05f23	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  05f2a	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  05f31	2b c8		 sub	 ecx, eax
  05f33	8b c1		 mov	 eax, ecx
  05f35	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 1983 :                         if ((l = cdsk_valid_trk (trk, buf+i, heads, -l)))

  05f3c	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  05f43	f7 d8		 neg	 eax
  05f45	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  05f4d	48 8d 8c 0c a0
	21 00 00	 lea	 rcx, QWORD PTR buf$[rsp+rcx]
  05f55	44 8b c8	 mov	 r9d, eax
  05f58	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  05f60	48 8b d1	 mov	 rdx, rcx
  05f63	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  05f6a	e8 00 00 00 00	 call	 cdsk_valid_trk
  05f6f	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax
  05f76	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR l$[rsp], 0
  05f7e	74 07		 je	 SHORT $LN329@cckd_chkds

; 1984 :                             goto cdsk_ckd_recover;

  05f80	e9 18 05 00 00	 jmp	 $cdsk_ckd_recover$834
  05f85	eb 05		 jmp	 SHORT $LN330@cckd_chkds
$LN329@cckd_chkds:

; 1985 :                         else
; 1986 :                              continue;

  05f87	e9 fd fc ff ff	 jmp	 $LN51@cckd_chkds
$LN330@cckd_chkds:
$LN328@cckd_chkds:

; 1987 :                     }
; 1988 : 
; 1989 :                     /* Check short `length' */
; 1990 :                     if (flen == (U32)len && (l = len - i) <= 1024)

  05f8c	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  05f93	39 84 24 58 01
	00 00		 cmp	 DWORD PTR flen$2[rsp], eax
  05f9a	0f 85 b7 00 00
	00		 jne	 $LN331@cckd_chkds
  05fa0	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  05fa7	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  05fae	2b c8		 sub	 ecx, eax
  05fb0	8b c1		 mov	 eax, ecx
  05fb2	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax
  05fb9	81 bc 24 a8 00
	00 00 00 04 00
	00		 cmp	 DWORD PTR l$[rsp], 1024	; 00000400H
  05fc4	0f 8f 8d 00 00
	00		 jg	 $LN331@cckd_chkds

; 1991 :                     {
; 1992 :                         if (cdsk_valid_trk (trk, buf+i, heads, l))

  05fca	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  05fd2	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  05fda	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  05fe2	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  05fea	48 8b d0	 mov	 rdx, rax
  05fed	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  05ff4	e8 00 00 00 00	 call	 cdsk_valid_trk
  05ff9	85 c0		 test	 eax, eax
  05ffb	74 5a		 je	 SHORT $LN332@cckd_chkds
$LN54@cckd_chkds:

; 1993 :                         {
; 1994 :                             while (cdsk_valid_trk (trk, buf+i, heads, --l));

  05ffd	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  06004	ff c8		 dec	 eax
  06006	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax
  0600d	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06015	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  0601d	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  06025	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  0602d	48 8b d0	 mov	 rdx, rax
  06030	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  06037	e8 00 00 00 00	 call	 cdsk_valid_trk
  0603c	85 c0		 test	 eax, eax
  0603e	74 02		 je	 SHORT $LN55@cckd_chkds
  06040	eb bb		 jmp	 SHORT $LN54@cckd_chkds
$LN55@cckd_chkds:

; 1995 :                             l++;

  06042	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  06049	ff c0		 inc	 eax
  0604b	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 1996 :                             goto cdsk_ckd_recover;

  06052	e9 46 04 00 00	 jmp	 $cdsk_ckd_recover$834
$LN332@cckd_chkds:
$LN331@cckd_chkds:

; 1997 :                         }
; 1998 :                     }
; 1999 : 
; 2000 :                     /* Scan for next trkhdr */
; 2001 :                     for (j = i + CKD_TRKHDR_SIZE+8;

  06057	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0605f	48 83 c0 0d	 add	 rax, 13
  06063	89 84 24 b0 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
  0606a	eb 10		 jmp	 SHORT $LN58@cckd_chkds
$LN56@cckd_chkds:

; 2003 :                          j++)

  0606c	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  06073	ff c0		 inc	 eax
  06075	89 84 24 b0 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN58@cckd_chkds:

; 2002 :                          j <= len - (CKD_TRKHDR_SIZE+8);

  0607c	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  06084	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR len$[rsp]
  0608c	48 83 e9 0d	 sub	 rcx, 13
  06090	48 3b c1	 cmp	 rax, rcx
  06093	0f 8f b0 02 00
	00		 jg	 $LN57@cckd_chkds

; 2004 :                     {
; 2005 :                         if (j - i > (int)trksz) break;

  06099	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  060a0	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR j$[rsp]
  060a7	2b c8		 sub	 ecx, eax
  060a9	8b c1		 mov	 eax, ecx
  060ab	3b 84 24 10 01
	00 00		 cmp	 eax, DWORD PTR trksz$[rsp]
  060b2	7e 05		 jle	 SHORT $LN333@cckd_chkds
  060b4	e9 90 02 00 00	 jmp	 $LN57@cckd_chkds
$LN333@cckd_chkds:

; 2006 : 
; 2007 :                         if (compmask[buf[j]] != 0
; 2008 :                          || fetch_hw(buf+j+1) >= cyls
; 2009 :                          || fetch_hw(buf+j+3) >= heads)

  060b9	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  060c1	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  060c9	0f b6 84 04 20
	20 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  060d1	85 c0		 test	 eax, eax
  060d3	75 58		 jne	 SHORT $LN335@cckd_chkds
  060d5	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  060dd	48 8d 84 04 a1
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+1]
  060e5	48 8b c8	 mov	 rcx, rax
  060e8	e8 00 00 00 00	 call	 fetch_hw_noswap
  060ed	0f b7 c8	 movzx	 ecx, ax
  060f0	e8 00 00 00 00	 call	 _byteswap_ushort
  060f5	0f b7 c0	 movzx	 eax, ax
  060f8	3b 84 24 2c 01
	00 00		 cmp	 eax, DWORD PTR cyls$[rsp]
  060ff	7d 2c		 jge	 SHORT $LN335@cckd_chkds
  06101	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  06109	48 8d 84 04 a3
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+3]
  06111	48 8b c8	 mov	 rcx, rax
  06114	e8 00 00 00 00	 call	 fetch_hw_noswap
  06119	0f b7 c8	 movzx	 ecx, ax
  0611c	e8 00 00 00 00	 call	 _byteswap_ushort
  06121	0f b7 c0	 movzx	 eax, ax
  06124	3b 84 24 cc 00
	00 00		 cmp	 eax, DWORD PTR heads$[rsp]
  0612b	7c 05		 jl	 SHORT $LN334@cckd_chkds
$LN335@cckd_chkds:

; 2010 :                             continue;

  0612d	e9 3a ff ff ff	 jmp	 $LN56@cckd_chkds
$LN334@cckd_chkds:

; 2011 : 
; 2012 :                         /* check uncompressed hdr */
; 2013 :                         if (buf[j] == CCKD_COMPRESS_NONE
; 2014 :                          && (fetch_hw (buf+j+5) != fetch_hw(buf+j+1)

  06132	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  0613a	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  06142	85 c0		 test	 eax, eax
  06144	0f 85 10 01 00
	00		 jne	 $LN336@cckd_chkds
  0614a	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  06152	48 8d 84 04 a5
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+5]
  0615a	48 8b c8	 mov	 rcx, rax
  0615d	e8 00 00 00 00	 call	 fetch_hw_noswap
  06162	0f b7 c8	 movzx	 ecx, ax
  06165	e8 00 00 00 00	 call	 _byteswap_ushort
  0616a	0f b7 c0	 movzx	 eax, ax
  0616d	89 84 24 0c 04
	00 00		 mov	 DWORD PTR tv3157[rsp], eax
  06174	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  0617c	48 8d 8c 0c a1
	21 00 00	 lea	 rcx, QWORD PTR buf$[rsp+rcx+1]
  06184	e8 00 00 00 00	 call	 fetch_hw_noswap
  06189	0f b7 c8	 movzx	 ecx, ax
  0618c	e8 00 00 00 00	 call	 _byteswap_ushort
  06191	0f b7 c0	 movzx	 eax, ax
  06194	8b 8c 24 0c 04
	00 00		 mov	 ecx, DWORD PTR tv3157[rsp]
  0619b	3b c8		 cmp	 ecx, eax
  0619d	0f 85 ad 00 00
	00		 jne	 $LN338@cckd_chkds
  061a3	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  061ab	48 8d 84 04 a7
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+7]
  061b3	48 8b c8	 mov	 rcx, rax
  061b6	e8 00 00 00 00	 call	 fetch_hw_noswap
  061bb	0f b7 c8	 movzx	 ecx, ax
  061be	e8 00 00 00 00	 call	 _byteswap_ushort
  061c3	0f b7 c0	 movzx	 eax, ax
  061c6	89 84 24 10 04
	00 00		 mov	 DWORD PTR tv3174[rsp], eax
  061cd	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  061d5	48 8d 8c 0c a3
	21 00 00	 lea	 rcx, QWORD PTR buf$[rsp+rcx+3]
  061dd	e8 00 00 00 00	 call	 fetch_hw_noswap
  061e2	0f b7 c8	 movzx	 ecx, ax
  061e5	e8 00 00 00 00	 call	 _byteswap_ushort
  061ea	0f b7 c0	 movzx	 eax, ax
  061ed	8b 8c 24 10 04
	00 00		 mov	 ecx, DWORD PTR tv3174[rsp]
  061f4	3b c8		 cmp	 ecx, eax
  061f6	75 58		 jne	 SHORT $LN338@cckd_chkds
  061f8	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  061ff	83 c0 09	 add	 eax, 9
  06202	48 98		 cdqe
  06204	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  0620c	85 c0		 test	 eax, eax
  0620e	75 40		 jne	 SHORT $LN338@cckd_chkds
  06210	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  06217	83 c0 0a	 add	 eax, 10
  0621a	48 98		 cdqe
  0621c	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  06224	85 c0		 test	 eax, eax
  06226	75 28		 jne	 SHORT $LN338@cckd_chkds
  06228	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  06230	48 8d 84 04 ab
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+11]
  06238	48 8b c8	 mov	 rcx, rax
  0623b	e8 00 00 00 00	 call	 fetch_hw_noswap
  06240	0f b7 c8	 movzx	 ecx, ax
  06243	e8 00 00 00 00	 call	 _byteswap_ushort
  06248	0f b7 c0	 movzx	 eax, ax
  0624b	83 f8 08	 cmp	 eax, 8
  0624e	74 0a		 je	 SHORT $LN336@cckd_chkds
$LN338@cckd_chkds:

; 2015 :                           || fetch_hw (buf+j+7) != fetch_hw(buf+j+3)
; 2016 :                           || buf[j+9] != 0      || buf[j+10] != 0
; 2017 :                           || fetch_hw(buf+j+11) != 8))
; 2018 :                                 continue;

  06250	e9 17 fe ff ff	 jmp	 $LN56@cckd_chkds
  06255	e9 99 00 00 00	 jmp	 $LN337@cckd_chkds
$LN336@cckd_chkds:

; 2019 :                         /* check zlib compressed header */
; 2020 :                         else if (buf[j] == CCKD_COMPRESS_ZLIB
; 2021 :                          && fetch_hw(buf + j + 5) % 31 != 0)

  0625a	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  06262	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  0626a	83 f8 01	 cmp	 eax, 1
  0626d	75 38		 jne	 SHORT $LN339@cckd_chkds
  0626f	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  06277	48 8d 84 04 a5
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+5]
  0627f	48 8b c8	 mov	 rcx, rax
  06282	e8 00 00 00 00	 call	 fetch_hw_noswap
  06287	0f b7 c8	 movzx	 ecx, ax
  0628a	e8 00 00 00 00	 call	 _byteswap_ushort
  0628f	0f b7 c0	 movzx	 eax, ax
  06292	99		 cdq
  06293	b9 1f 00 00 00	 mov	 ecx, 31
  06298	f7 f9		 idiv	 ecx
  0629a	8b c2		 mov	 eax, edx
  0629c	85 c0		 test	 eax, eax
  0629e	74 07		 je	 SHORT $LN339@cckd_chkds

; 2022 :                                 continue;

  062a0	e9 c7 fd ff ff	 jmp	 $LN56@cckd_chkds
  062a5	eb 4c		 jmp	 SHORT $LN340@cckd_chkds
$LN339@cckd_chkds:

; 2023 :                         /* check bzip2 compressed header */
; 2024 :                         else if (buf[j] == CCKD_COMPRESS_BZIP2
; 2025 :                          && (buf[j+5] != 'B' || buf[j+6] != 'Z'))

  062a7	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  062af	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  062b7	83 f8 02	 cmp	 eax, 2
  062ba	75 37		 jne	 SHORT $LN341@cckd_chkds
  062bc	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  062c3	83 c0 05	 add	 eax, 5
  062c6	48 98		 cdqe
  062c8	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  062d0	83 f8 42	 cmp	 eax, 66			; 00000042H
  062d3	75 19		 jne	 SHORT $LN342@cckd_chkds
  062d5	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  062dc	83 c0 06	 add	 eax, 6
  062df	48 98		 cdqe
  062e1	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  062e9	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  062ec	74 05		 je	 SHORT $LN341@cckd_chkds
$LN342@cckd_chkds:

; 2026 :                                 continue;

  062ee	e9 79 fd ff ff	 jmp	 $LN56@cckd_chkds
$LN341@cckd_chkds:
$LN340@cckd_chkds:
$LN337@cckd_chkds:

; 2027 : 
; 2028 :                         /* check to possible trkhdr */
; 2029 :                         l = j - i;

  062f3	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  062fa	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR j$[rsp]
  06301	2b c8		 sub	 ecx, eax
  06303	8b c1		 mov	 eax, ecx
  06305	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 2030 :                         if (cdsk_valid_trk (trk, buf+i, heads, l))

  0630c	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06314	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  0631c	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  06324	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  0632c	48 8b d0	 mov	 rdx, rax
  0632f	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  06336	e8 00 00 00 00	 call	 cdsk_valid_trk
  0633b	85 c0		 test	 eax, eax
  0633d	74 05		 je	 SHORT $LN343@cckd_chkds

; 2031 :                         {
; 2032 : #if 0
; 2033 :                             while (cdsk_valid_trk (trk, buf+i, heads, --l));
; 2034 :                             l++;
; 2035 : #endif
; 2036 :                             goto cdsk_ckd_recover;

  0633f	e9 59 01 00 00	 jmp	 $cdsk_ckd_recover$834
$LN343@cckd_chkds:

; 2037 :                         }
; 2038 : 
; 2039 :                     } /* scan for next trkhdr */

  06344	e9 23 fd ff ff	 jmp	 $LN56@cckd_chkds
$LN57@cckd_chkds:

; 2040 : 
; 2041 :                     /* Check `length' */
; 2042 :                     if (flen == (U32)len && (l = len - i) <= (int)trksz)

  06349	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  06350	39 84 24 58 01
	00 00		 cmp	 DWORD PTR flen$2[rsp], eax
  06357	0f 85 ba 00 00
	00		 jne	 $LN344@cckd_chkds
  0635d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  06364	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  0636b	2b c8		 sub	 ecx, eax
  0636d	8b c1		 mov	 eax, ecx
  0636f	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax
  06376	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR trksz$[rsp]
  0637d	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR l$[rsp], eax
  06384	0f 8f 8d 00 00
	00		 jg	 $LN344@cckd_chkds

; 2043 :                     {
; 2044 :                         if (cdsk_valid_trk (trk, buf+i, heads, l))

  0638a	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06392	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  0639a	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  063a2	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  063aa	48 8b d0	 mov	 rdx, rax
  063ad	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  063b4	e8 00 00 00 00	 call	 cdsk_valid_trk
  063b9	85 c0		 test	 eax, eax
  063bb	74 5a		 je	 SHORT $LN345@cckd_chkds
$LN59@cckd_chkds:

; 2045 :                         {
; 2046 :                             while (cdsk_valid_trk (trk, buf+i, heads, --l));

  063bd	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  063c4	ff c8		 dec	 eax
  063c6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax
  063cd	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  063d5	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  063dd	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  063e5	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  063ed	48 8b d0	 mov	 rdx, rax
  063f0	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  063f7	e8 00 00 00 00	 call	 cdsk_valid_trk
  063fc	85 c0		 test	 eax, eax
  063fe	74 02		 je	 SHORT $LN60@cckd_chkds
  06400	eb bb		 jmp	 SHORT $LN59@cckd_chkds
$LN60@cckd_chkds:

; 2047 :                             l++;

  06402	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  06409	ff c0		 inc	 eax
  0640b	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 2048 :                             goto cdsk_ckd_recover;

  06412	e9 86 00 00 00	 jmp	 $cdsk_ckd_recover$834
$LN345@cckd_chkds:
$LN344@cckd_chkds:

; 2049 :                         }
; 2050 :                     }
; 2051 : 
; 2052 :                     /* Scan all lengths */
; 2053 :                     for (l = CKD_TRKHDR_SIZE+8; i + l <= len; l++)

  06417	c7 84 24 a8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR l$[rsp], 13
  06422	eb 10		 jmp	 SHORT $LN63@cckd_chkds
$LN61@cckd_chkds:
  06424	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  0642b	ff c0		 inc	 eax
  0642d	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax
$LN63@cckd_chkds:
  06434	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  0643b	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR i$[rsp]
  06442	03 c8		 add	 ecx, eax
  06444	8b c1		 mov	 eax, ecx
  06446	3b 84 24 a4 00
	00 00		 cmp	 eax, DWORD PTR len$[rsp]
  0644d	7f 49		 jg	 SHORT $LN62@cckd_chkds

; 2054 :                     {
; 2055 :                         if (l > (int)trksz)

  0644f	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR trksz$[rsp]
  06456	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR l$[rsp], eax
  0645d	7e 02		 jle	 SHORT $LN346@cckd_chkds

; 2056 :                             break;

  0645f	eb 37		 jmp	 SHORT $LN62@cckd_chkds
$LN346@cckd_chkds:

; 2057 :                         if (cdsk_valid_trk (trk, buf+i, heads, l))

  06461	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06469	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  06471	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  06479	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  06481	48 8b d0	 mov	 rdx, rax
  06484	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  0648b	e8 00 00 00 00	 call	 cdsk_valid_trk
  06490	85 c0		 test	 eax, eax
  06492	74 02		 je	 SHORT $LN347@cckd_chkds

; 2058 :                             goto cdsk_ckd_recover;

  06494	eb 07		 jmp	 SHORT $cdsk_ckd_recover$834
$LN347@cckd_chkds:

; 2059 :                     } /* for all lengths */

  06496	eb 8c		 jmp	 SHORT $LN61@cckd_chkds
$LN62@cckd_chkds:

; 2060 : 
; 2061 :                     continue;

  06498	e9 ec f7 ff ff	 jmp	 $LN51@cckd_chkds
$cdsk_ckd_recover$834:

; 2062 : 
; 2063 : cdsk_ckd_recover:
; 2064 :                     if(dev->batch)

  0649d	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  064a5	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  064ab	c1 e8 0a	 shr	 eax, 10
  064ae	83 e0 01	 and	 eax, 1
  064b1	85 c0		 test	 eax, eax
  064b3	0f 84 53 01 00
	00		 je	 $LN348@cckd_chkds

; 2065 :                         // "%1d:%04X CCKD file %s: %s[%d] recovered offset 0x%16.16"PRIX64" len %"PRId64
; 2066 :                         FWRMSG( stdout, HHC00372, "I", LCSS_DEVNUM, dev->filename,

  064b9	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  064c2	74 15		 je	 SHORT $LN697@cckd_chkds
  064c4	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  064cc	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  064d0	89 84 24 d8 02
	00 00		 mov	 DWORD PTR tv3297[rsp], eax
  064d7	eb 0b		 jmp	 SHORT $LN698@cckd_chkds
$LN697@cckd_chkds:
  064d9	c7 84 24 d8 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3297[rsp], 0
$LN698@cckd_chkds:
  064e4	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  064ed	74 17		 je	 SHORT $LN699@cckd_chkds
  064ef	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  064f7	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  064fb	d1 f8		 sar	 eax, 1
  064fd	89 84 24 dc 02
	00 00		 mov	 DWORD PTR tv3303[rsp], eax
  06504	eb 0b		 jmp	 SHORT $LN700@cckd_chkds
$LN699@cckd_chkds:
  06506	c7 84 24 dc 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3303[rsp], 0
$LN700@cckd_chkds:
  06511	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  06519	48 89 84 24 88
	07 00 00	 mov	 QWORD PTR tv3283[rsp], rax
  06521	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  06529	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  06531	48 03 d1	 add	 rdx, rcx
  06534	48 8b ca	 mov	 rcx, rdx
  06537	48 89 8c 24 90
	07 00 00	 mov	 QWORD PTR tv3286[rsp], rcx
  0653f	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  06547	e8 00 00 00 00	 call	 spc_typ_to_str
  0654c	48 89 84 24 98
	07 00 00	 mov	 QWORD PTR tv3289[rsp], rax
  06554	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0655c	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  06563	48 89 8c 24 a0
	07 00 00	 mov	 QWORD PTR tv3292[rsp], rcx
  0656b	b9 01 00 00 00	 mov	 ecx, 1
  06570	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  06576	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR tv3283[rsp]
  0657e	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  06583	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR tv3286[rsp]
  0658b	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  06590	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  06597	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  0659b	48 8b 8c 24 98
	07 00 00	 mov	 rcx, QWORD PTR tv3289[rsp]
  065a3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  065a8	48 8b 8c 24 a0
	07 00 00	 mov	 rcx, QWORD PTR tv3292[rsp]
  065b0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  065b5	8b 8c 24 d8 02
	00 00		 mov	 ecx, DWORD PTR tv3297[rsp]
  065bc	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  065c0	8b 8c 24 dc 02
	00 00		 mov	 ecx, DWORD PTR tv3303[rsp]
  065c7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  065cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170366
  065d2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  065d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170367
  065de	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  065e3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  065e8	41 b9 03 00 00
	00		 mov	 r9d, 3
  065ee	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170368
  065f5	ba 13 08 00 00	 mov	 edx, 2067		; 00000813H
  065fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170369
  06601	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  06607	e9 4e 01 00 00	 jmp	 $LN349@cckd_chkds
$LN348@cckd_chkds:

; 2067 :                                 spc_typ_to_str( trktyp ), trk, off + i, (S64)l);
; 2068 :                     else
; 2069 :                         // "%1d:%04X CCKD file %s: %s[%d] recovered offset 0x%16.16"PRIX64" len %"PRId64
; 2070 :                         WRMSG( HHC00372, "I", LCSS_DEVNUM, dev->filename,

  0660c	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  06615	74 15		 je	 SHORT $LN701@cckd_chkds
  06617	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0661f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  06623	89 84 24 e0 02
	00 00		 mov	 DWORD PTR tv3328[rsp], eax
  0662a	eb 0b		 jmp	 SHORT $LN702@cckd_chkds
$LN701@cckd_chkds:
  0662c	c7 84 24 e0 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3328[rsp], 0
$LN702@cckd_chkds:
  06637	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  06640	74 17		 je	 SHORT $LN703@cckd_chkds
  06642	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0664a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0664e	d1 f8		 sar	 eax, 1
  06650	89 84 24 e4 02
	00 00		 mov	 DWORD PTR tv3334[rsp], eax
  06657	eb 0b		 jmp	 SHORT $LN704@cckd_chkds
$LN703@cckd_chkds:
  06659	c7 84 24 e4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3334[rsp], 0
$LN704@cckd_chkds:
  06664	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  0666c	48 89 84 24 a8
	07 00 00	 mov	 QWORD PTR tv3314[rsp], rax
  06674	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  0667c	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  06684	48 03 d1	 add	 rdx, rcx
  06687	48 8b ca	 mov	 rcx, rdx
  0668a	48 89 8c 24 b0
	07 00 00	 mov	 QWORD PTR tv3317[rsp], rcx
  06692	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  0669a	e8 00 00 00 00	 call	 spc_typ_to_str
  0669f	48 89 84 24 b8
	07 00 00	 mov	 QWORD PTR tv3320[rsp], rax
  066a7	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  066af	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  066b6	48 89 8c 24 c0
	07 00 00	 mov	 QWORD PTR tv3323[rsp], rcx
  066be	b9 01 00 00 00	 mov	 ecx, 1
  066c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  066c9	48 8b 8c 24 a8
	07 00 00	 mov	 rcx, QWORD PTR tv3314[rsp]
  066d1	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  066d6	48 8b 8c 24 b0
	07 00 00	 mov	 rcx, QWORD PTR tv3317[rsp]
  066de	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  066e3	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR trk$[rsp]
  066ea	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  066ee	48 8b 8c 24 b8
	07 00 00	 mov	 rcx, QWORD PTR tv3320[rsp]
  066f6	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  066fb	48 8b 8c 24 c0
	07 00 00	 mov	 rcx, QWORD PTR tv3323[rsp]
  06703	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  06708	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR tv3328[rsp]
  0670f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  06713	8b 8c 24 e4 02
	00 00		 mov	 ecx, DWORD PTR tv3334[rsp]
  0671a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0671e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170370
  06725	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0672a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170371
  06731	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  06736	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0673b	41 b9 03 00 00
	00		 mov	 r9d, 3
  06741	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170372
  06748	ba 17 08 00 00	 mov	 edx, 2071		; 00000817H
  0674d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170373
  06754	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN349@cckd_chkds:

; 2071 :                               spc_typ_to_str( trktyp ), trk, off + i, (S64)l);
; 2072 :                     n--;

  0675a	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  06761	ff c8		 dec	 eax
  06763	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 2073 :                     rcvtab[trk] = 2;

  0676a	48 63 84 24 d4
	00 00 00	 movsxd	 rax, DWORD PTR trk$[rsp]
  06772	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  0677a	c6 04 01 02	 mov	 BYTE PTR [rcx+rax], 2

; 2074 : 
; 2075 :                     /* add recovered track to the space table */
; 2076 :                     spctab[s].spc_typ = trktyp;

  0677e	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  06786	48 6b c0 18	 imul	 rax, rax, 24
  0678a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06792	0f b6 94 24 d0
	00 00 00	 movzx	 edx, BYTE PTR trktyp$[rsp]
  0679a	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 2077 :                     spctab[s].spc_val = trk;

  0679d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  067a5	48 6b c0 18	 imul	 rax, rax, 24
  067a9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  067b1	8b 94 24 d4 00
	00 00		 mov	 edx, DWORD PTR trk$[rsp]
  067b8	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 2078 :                     spctab[s].spc_off = fpos + i;

  067bc	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  067c3	8b 8c 24 e8 02
	00 00		 mov	 ecx, DWORD PTR fpos$5[rsp]
  067ca	03 c8		 add	 ecx, eax
  067cc	8b c1		 mov	 eax, ecx
  067ce	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  067d6	48 6b c9 18	 imul	 rcx, rcx, 24
  067da	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  067e2	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 2079 :                     spctab[s].spc_len =

  067e6	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  067ee	48 6b c0 18	 imul	 rax, rax, 24
  067f2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  067fa	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR l$[rsp]
  06801	89 54 01 14	 mov	 DWORD PTR [rcx+rax+20], edx
  06805	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0680d	48 6b c0 18	 imul	 rax, rax, 24
  06811	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06819	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR l$[rsp]
  06820	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 2080 :                     spctab[s].spc_siz = l;
; 2081 :                     s++;

  06824	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  0682b	ff c0		 inc	 eax
  0682d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 2082 :                     /*
; 2083 :                      * adjust `i' knowing it will be incremented
; 2084 :                      * in the `for' loop above.
; 2085 :                      */
; 2086 :                     i += l - 1;

  06834	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0683b	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR l$[rsp]
  06842	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  06846	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax

; 2087 :                 } /* for each byte in the free space */

  0684d	e9 37 f4 ff ff	 jmp	 $LN51@cckd_chkds
$LN52@cckd_chkds:

; 2088 : 
; 2089 :                 /* Adjust the free space for what we processed */
; 2090 :                 spctab[f].spc_off += i;

  06852	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  0685a	48 6b c0 18	 imul	 rax, rax, 24
  0685e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06866	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  0686a	03 84 24 90 00
	00 00		 add	 eax, DWORD PTR i$[rsp]
  06871	48 63 8c 24 bc
	00 00 00	 movsxd	 rcx, DWORD PTR f$[rsp]
  06879	48 6b c9 18	 imul	 rcx, rcx, 24
  0687d	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  06885	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 2091 :                 spctab[f].spc_len -= i;

  06889	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  06891	48 6b c0 18	 imul	 rax, rax, 24
  06895	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0689d	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR i$[rsp]
  068a4	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  068a8	2b c2		 sub	 eax, edx
  068aa	48 63 8c 24 bc
	00 00 00	 movsxd	 rcx, DWORD PTR f$[rsp]
  068b2	48 6b c9 18	 imul	 rcx, rcx, 24
  068b6	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  068be	89 44 0a 10	 mov	 DWORD PTR [rdx+rcx+16], eax

; 2092 :                 spctab[f].spc_siz -= i;

  068c2	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  068ca	48 6b c0 18	 imul	 rax, rax, 24
  068ce	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  068d6	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR i$[rsp]
  068dd	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  068e1	2b c2		 sub	 eax, edx
  068e3	48 63 8c 24 bc
	00 00 00	 movsxd	 rcx, DWORD PTR f$[rsp]
  068eb	48 6b c9 18	 imul	 rcx, rcx, 24
  068ef	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  068f7	89 44 0a 14	 mov	 DWORD PTR [rdx+rcx+20], eax

; 2093 : 
; 2094 :             } /* for each free space */

  068fb	e9 7c f1 ff ff	 jmp	 $LN45@cckd_chkds
$LN46@cckd_chkds:
$LN310@cckd_chkds:

; 2095 : 
; 2096 :         } /* if ckddasd */
; 2097 : 
; 2098 :         /*-----------------------------------------------------------
; 2099 :          * fba recovery
; 2100 :          *-----------------------------------------------------------*/
; 2101 : 
; 2102 :         /*
; 2103 :          * FBA blkgrps are harder to recover than CKD tracks because
; 2104 :          * there is not any information within the blkgrp itself to
; 2105 :          * validate (unlike a track, which has count fields that
; 2106 :          * terminate in an end-of-track marker).
; 2107 :          *
; 2108 :          * On the first pass we recover all compressed blkgrps since
; 2109 :          * these are readily validated (they must uncompress to a
; 2110 :          * certain size, CFBA_BLKGRP_SIZE+CKD_TRKHDR_SIZE).  We
; 2111 :          * also recover uncompressed blkgrps if they are followed by
; 2112 :          * a valid trkhdr (and don't occur to close to the beginning
; 2113 :          * of the file).
; 2114 :          *
; 2115 :          * On the second pass we recover all uncompressed blkgrps
; 2116 :          * that weren't recovered in the first pass.  The only
; 2117 :          * criteria is that the compression byte is zero and the
; 2118 :          * 4 byte blkgrp number is in range and there are at least
; 2119 :          * CFBA_BLKGRP_SIZE bytes following.
; 2120 :          */
; 2121 : 
; 2122 :         for (pass = 0; fbadasd && pass < 2; pass++)

  06900	c7 84 24 14 01
	00 00 00 00 00
	00		 mov	 DWORD PTR pass$[rsp], 0
  0690b	eb 10		 jmp	 SHORT $LN66@cckd_chkds
$LN64@cckd_chkds:
  0690d	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR pass$[rsp]
  06914	ff c0		 inc	 eax
  06916	89 84 24 14 01
	00 00		 mov	 DWORD PTR pass$[rsp], eax
$LN66@cckd_chkds:
  0691d	83 bc 24 ec 02
	00 00 00	 cmp	 DWORD PTR fbadasd$[rsp], 0
  06925	0f 84 3e 0e 00
	00		 je	 $LN65@cckd_chkds
  0692b	83 bc 24 14 01
	00 00 02	 cmp	 DWORD PTR pass$[rsp], 2
  06933	0f 8d 30 0e 00
	00		 jge	 $LN65@cckd_chkds

; 2123 :         {
; 2124 :             lopos = CCKD_L1TAB_POS + (cdevhdr.num_L1tab * 4);

  06939	8b 84 24 a4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  06940	c1 e0 02	 shl	 eax, 2
  06943	48 98		 cdqe
  06945	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  0694b	89 84 24 dc 00
	00 00		 mov	 DWORD PTR lopos$[rsp], eax

; 2125 :             if (pass == 0)

  06952	83 bc 24 14 01
	00 00 00	 cmp	 DWORD PTR pass$[rsp], 0
  0695a	75 23		 jne	 SHORT $LN350@cckd_chkds

; 2126 :                 lopos += (cdevhdr.num_L1tab * CCKD_L2TAB_SIZE);

  0695c	48 63 84 24 a4
	0b 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  06964	48 69 c0 00 08
	00 00		 imul	 rax, rax, 2048		; 00000800H
  0696b	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR lopos$[rsp]
  06972	48 03 c8	 add	 rcx, rax
  06975	48 8b c1	 mov	 rax, rcx
  06978	89 84 24 dc 00
	00 00		 mov	 DWORD PTR lopos$[rsp], eax
$LN350@cckd_chkds:

; 2127 : 
; 2128 :             /* recovery loop */
; 2129 :             s = cdsk_build_free_space (spctab, s);

  0697f	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR s$[rsp]
  06986	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0698e	e8 00 00 00 00	 call	 cdsk_build_free_space
  06993	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 2130 :             for (f = 0; spctab[f].spc_typ != SPCTAB_EOF && n > 0; )

  0699a	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR f$[rsp], 0
$LN67@cckd_chkds:
  069a5	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  069ad	48 6b c0 18	 imul	 rax, rax, 24
  069b1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  069b9	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  069bd	83 f8 08	 cmp	 eax, 8
  069c0	0f 84 9e 0d 00
	00		 je	 $LN68@cckd_chkds
  069c6	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR n$[rsp], 0
  069ce	0f 8e 90 0d 00
	00		 jle	 $LN68@cckd_chkds

; 2131 :             {
; 2132 :                 U32 flen, fpos;
; 2133 : 
; 2134 :                 /* next free space if too small */
; 2135 :                 if (spctab[f].spc_typ != SPCTAB_FREE
; 2136 :                  || spctab[f].spc_siz <= CKD_TRKHDR_SIZE+8
; 2137 :                  || (pass == 1 && spctab[f].spc_siz < blkgrpsz))

  069d4	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  069dc	48 6b c0 18	 imul	 rax, rax, 24
  069e0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  069e8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  069ec	83 f8 07	 cmp	 eax, 7
  069ef	75 4d		 jne	 SHORT $LN352@cckd_chkds
  069f1	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  069f9	48 6b c0 18	 imul	 rax, rax, 24
  069fd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06a05	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  06a09	48 83 f8 0d	 cmp	 rax, 13
  06a0d	7e 2f		 jle	 SHORT $LN352@cckd_chkds
  06a0f	83 bc 24 14 01
	00 00 01	 cmp	 DWORD PTR pass$[rsp], 1
  06a17	0f 85 86 00 00
	00		 jne	 $LN351@cckd_chkds
  06a1d	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  06a25	48 6b c0 18	 imul	 rax, rax, 24
  06a29	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06a31	8b 94 24 18 01
	00 00		 mov	 edx, DWORD PTR blkgrpsz$[rsp]
  06a38	39 54 01 14	 cmp	 DWORD PTR [rcx+rax+20], edx
  06a3c	73 65		 jae	 SHORT $LN351@cckd_chkds
$LN352@cckd_chkds:

; 2138 :                 {
; 2139 :                     for (f = f + 1; spctab[f].spc_typ != SPCTAB_EOF; f++)

  06a3e	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR f$[rsp]
  06a45	ff c0		 inc	 eax
  06a47	89 84 24 bc 00
	00 00		 mov	 DWORD PTR f$[rsp], eax
  06a4e	eb 10		 jmp	 SHORT $LN72@cckd_chkds
$LN70@cckd_chkds:
  06a50	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR f$[rsp]
  06a57	ff c0		 inc	 eax
  06a59	89 84 24 bc 00
	00 00		 mov	 DWORD PTR f$[rsp], eax
$LN72@cckd_chkds:
  06a60	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  06a68	48 6b c0 18	 imul	 rax, rax, 24
  06a6c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06a74	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  06a78	83 f8 08	 cmp	 eax, 8
  06a7b	74 21		 je	 SHORT $LN71@cckd_chkds

; 2140 :                         if (spctab[f].spc_typ == SPCTAB_FREE)

  06a7d	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  06a85	48 6b c0 18	 imul	 rax, rax, 24
  06a89	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06a91	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  06a95	83 f8 07	 cmp	 eax, 7
  06a98	75 02		 jne	 SHORT $LN353@cckd_chkds

; 2141 :                             break;

  06a9a	eb 02		 jmp	 SHORT $LN71@cckd_chkds
$LN353@cckd_chkds:
  06a9c	eb b2		 jmp	 SHORT $LN70@cckd_chkds
$LN71@cckd_chkds:

; 2142 :                     continue;

  06a9e	e9 02 ff ff ff	 jmp	 $LN67@cckd_chkds
$LN351@cckd_chkds:

; 2143 :                 }
; 2144 : 
; 2145 :                 fpos = spctab[f].spc_off;

  06aa3	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  06aab	48 6b c0 18	 imul	 rax, rax, 24
  06aaf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06ab7	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  06abb	89 84 24 5c 01
	00 00		 mov	 DWORD PTR fpos$3[rsp], eax

; 2146 :                 flen = spctab[f].spc_siz;

  06ac2	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  06aca	48 6b c0 18	 imul	 rax, rax, 24
  06ace	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  06ad6	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  06ada	89 84 24 38 01
	00 00		 mov	 DWORD PTR flen$1[rsp], eax

; 2147 :                 /*
; 2148 :                  * calculate length to read
; 2149 :                  * if flen > len then we only read part of the space
; 2150 :                  */
; 2151 :                 len = flen < sizeof(buf) ? flen : sizeof(buf);

  06ae1	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR flen$1[rsp]
  06ae8	48 3d 00 00 04
	00		 cmp	 rax, 262144		; 00040000H
  06aee	73 11		 jae	 SHORT $LN705@cckd_chkds
  06af0	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR flen$1[rsp]
  06af7	48 89 84 24 70
	04 00 00	 mov	 QWORD PTR tv3498[rsp], rax
  06aff	eb 0c		 jmp	 SHORT $LN706@cckd_chkds
$LN705@cckd_chkds:
  06b01	48 c7 84 24 70
	04 00 00 00 00
	04 00		 mov	 QWORD PTR tv3498[rsp], 262144 ; 00040000H
$LN706@cckd_chkds:
  06b0d	8b 84 24 70 04
	00 00		 mov	 eax, DWORD PTR tv3498[rsp]
  06b14	89 84 24 a4 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 2152 : 
; 2153 :                 /* read the free space */
; 2154 :                 off = (off_t)fpos;

  06b1b	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR fpos$3[rsp]
  06b22	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2155 :                 if (lseek (fd, off, SEEK_SET) < 0)

  06b2a	45 33 c0	 xor	 r8d, r8d
  06b2d	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  06b35	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  06b3c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  06b42	48 85 c0	 test	 rax, rax
  06b45	7d 05		 jge	 SHORT $LN354@cckd_chkds

; 2156 :                     goto cdsk_lseek_error;

  06b47	e9 78 39 00 00	 jmp	 $cdsk_lseek_error$827
$LN354@cckd_chkds:

; 2157 :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  06b4c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  06b53	83 38 00	 cmp	 DWORD PTR [rax], 0
  06b56	74 43		 je	 SHORT $LN355@cckd_chkds
  06b58	41 b8 01 00 00
	00		 mov	 r8d, 1
  06b5e	33 d2		 xor	 edx, edx
  06b60	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  06b67	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  06b6d	48 89 84 24 c8
	07 00 00	 mov	 QWORD PTR tv3508[rsp], rax
  06b75	b9 02 00 00 00	 mov	 ecx, 2
  06b7a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  06b80	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR tv3508[rsp]
  06b88	4c 8b c1	 mov	 r8, rcx
  06b8b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170380
  06b92	48 8b c8	 mov	 rcx, rax
  06b95	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN355@cckd_chkds:

; 2158 :                 if ((rc = read (fd, buf, len)) != len)

  06b9b	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  06ba3	48 8d 94 24 a0
	21 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  06bab	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  06bb2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  06bb8	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  06bbf	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  06bc6	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  06bcd	74 05		 je	 SHORT $LN356@cckd_chkds

; 2159 :                     goto cdsk_read_error;

  06bcf	e9 40 3b 00 00	 jmp	 $cdsk_read_error$828
$LN356@cckd_chkds:

; 2160 : 
; 2161 :                 /* Scan the space */
; 2162 :                 for (i = 0; i < len - (CKD_TRKHDR_SIZE+8); i++)

  06bd4	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  06bdf	eb 10		 jmp	 SHORT $LN75@cckd_chkds
$LN73@cckd_chkds:
  06be1	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  06be8	ff c0		 inc	 eax
  06bea	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN75@cckd_chkds:
  06bf1	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06bf9	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR len$[rsp]
  06c01	48 83 e9 0d	 sub	 rcx, 13
  06c05	48 3b c1	 cmp	 rax, rcx
  06c08	0f 8d a8 0a 00
	00		 jge	 $LN74@cckd_chkds

; 2163 :                 {
; 2164 :                     /* For pass 1 the size left must be at least blkgrpsz */
; 2165 :                     if (pass == 1 && len - i < (int)blkgrpsz)

  06c0e	83 bc 24 14 01
	00 00 01	 cmp	 DWORD PTR pass$[rsp], 1
  06c16	75 20		 jne	 SHORT $LN357@cckd_chkds
  06c18	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  06c1f	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  06c26	2b c8		 sub	 ecx, eax
  06c28	8b c1		 mov	 eax, ecx
  06c2a	3b 84 24 18 01
	00 00		 cmp	 eax, DWORD PTR blkgrpsz$[rsp]
  06c31	7d 05		 jge	 SHORT $LN357@cckd_chkds

; 2166 :                         break;

  06c33	e9 7e 0a 00 00	 jmp	 $LN74@cckd_chkds
$LN357@cckd_chkds:

; 2167 : 
; 2168 :                     /* Check compression byte */
; 2169 :                     if ((pass == 0 && compmask[buf[i]])
; 2170 :                      || (pass == 1 && buf[i] != CCKD_COMPRESS_NONE))

  06c38	83 bc 24 14 01
	00 00 00	 cmp	 DWORD PTR pass$[rsp], 0
  06c40	75 1c		 jne	 SHORT $LN360@cckd_chkds
  06c42	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06c4a	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  06c52	0f b6 84 04 20
	20 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  06c5a	85 c0		 test	 eax, eax
  06c5c	75 1e		 jne	 SHORT $LN359@cckd_chkds
$LN360@cckd_chkds:
  06c5e	83 bc 24 14 01
	00 00 01	 cmp	 DWORD PTR pass$[rsp], 1
  06c66	75 19		 jne	 SHORT $LN358@cckd_chkds
  06c68	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06c70	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  06c78	85 c0		 test	 eax, eax
  06c7a	74 05		 je	 SHORT $LN358@cckd_chkds
$LN359@cckd_chkds:

; 2171 :                         continue;

  06c7c	e9 60 ff ff ff	 jmp	 $LN73@cckd_chkds
$LN358@cckd_chkds:

; 2172 : 
; 2173 :                     /* Fetch possible trkhdr */
; 2174 :                     comp = buf[i];

  06c81	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06c89	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  06c91	89 84 24 e0 00
	00 00		 mov	 DWORD PTR comp$[rsp], eax

; 2175 :                     blkgrp = fetch_fw (buf + i + 1);

  06c98	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06ca0	48 8d 84 04 a1
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+1]
  06ca8	48 8b c8	 mov	 rcx, rax
  06cab	e8 00 00 00 00	 call	 fetch_fw_noswap
  06cb0	8b c8		 mov	 ecx, eax
  06cb2	e8 00 00 00 00	 call	 _byteswap_ulong
  06cb7	89 84 24 f0 00
	00 00		 mov	 DWORD PTR blkgrp$[rsp], eax

; 2176 : 
; 2177 :                     /* Validate possible trkhdr */
; 2178 :                     if (blkgrp < 0 || blkgrp >= blkgrps
; 2179 :                      || rcvtab[blkgrp] != 1)

  06cbe	83 bc 24 f0 00
	00 00 00	 cmp	 DWORD PTR blkgrp$[rsp], 0
  06cc6	7c 29		 jl	 SHORT $LN362@cckd_chkds
  06cc8	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR blkgrps$[rsp]
  06ccf	39 84 24 f0 00
	00 00		 cmp	 DWORD PTR blkgrp$[rsp], eax
  06cd6	7d 19		 jge	 SHORT $LN362@cckd_chkds
  06cd8	48 63 84 24 f0
	00 00 00	 movsxd	 rax, DWORD PTR blkgrp$[rsp]
  06ce0	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  06ce8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  06cec	83 f8 01	 cmp	 eax, 1
  06cef	74 05		 je	 SHORT $LN361@cckd_chkds
$LN362@cckd_chkds:

; 2180 :                         continue;

  06cf1	e9 eb fe ff ff	 jmp	 $LN73@cckd_chkds
$LN361@cckd_chkds:

; 2181 : 
; 2182 :                     /* Validation for compress none */
; 2183 :                     if (comp == CCKD_COMPRESS_NONE
; 2184 :                      && flen == (U32)len && len - i < (int)blkgrpsz)

  06cf6	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR comp$[rsp], 0
  06cfe	75 35		 jne	 SHORT $LN363@cckd_chkds
  06d00	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  06d07	39 84 24 38 01
	00 00		 cmp	 DWORD PTR flen$1[rsp], eax
  06d0e	75 25		 jne	 SHORT $LN363@cckd_chkds
  06d10	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  06d17	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  06d1e	2b c8		 sub	 ecx, eax
  06d20	8b c1		 mov	 eax, ecx
  06d22	3b 84 24 18 01
	00 00		 cmp	 eax, DWORD PTR blkgrpsz$[rsp]
  06d29	7d 0a		 jge	 SHORT $LN363@cckd_chkds

; 2185 :                         continue;

  06d2b	e9 b1 fe ff ff	 jmp	 $LN73@cckd_chkds
  06d30	e9 83 00 00 00	 jmp	 $LN364@cckd_chkds
$LN363@cckd_chkds:

; 2186 : 
; 2187 :                     /* Quick validation for zlib */
; 2188 :                     else if (comp == CCKD_COMPRESS_ZLIB
; 2189 :                      && fetch_hw(buf + i + 5) % 31 != 0)

  06d35	83 bc 24 e0 00
	00 00 01	 cmp	 DWORD PTR comp$[rsp], 1
  06d3d	75 38		 jne	 SHORT $LN365@cckd_chkds
  06d3f	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06d47	48 8d 84 04 a5
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+5]
  06d4f	48 8b c8	 mov	 rcx, rax
  06d52	e8 00 00 00 00	 call	 fetch_hw_noswap
  06d57	0f b7 c8	 movzx	 ecx, ax
  06d5a	e8 00 00 00 00	 call	 _byteswap_ushort
  06d5f	0f b7 c0	 movzx	 eax, ax
  06d62	99		 cdq
  06d63	b9 1f 00 00 00	 mov	 ecx, 31
  06d68	f7 f9		 idiv	 ecx
  06d6a	8b c2		 mov	 eax, edx
  06d6c	85 c0		 test	 eax, eax
  06d6e	74 07		 je	 SHORT $LN365@cckd_chkds

; 2190 :                         continue;

  06d70	e9 6c fe ff ff	 jmp	 $LN73@cckd_chkds
  06d75	eb 41		 jmp	 SHORT $LN366@cckd_chkds
$LN365@cckd_chkds:

; 2191 : 
; 2192 :                     /* Quick validation for bzip2 */
; 2193 :                     else if (comp == CCKD_COMPRESS_BZIP2
; 2194 :                      && (buf[i+5] != 'B' || buf[i+6] != 'Z'))

  06d77	83 bc 24 e0 00
	00 00 02	 cmp	 DWORD PTR comp$[rsp], 2
  06d7f	75 37		 jne	 SHORT $LN367@cckd_chkds
  06d81	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  06d88	83 c0 05	 add	 eax, 5
  06d8b	48 98		 cdqe
  06d8d	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  06d95	83 f8 42	 cmp	 eax, 66			; 00000042H
  06d98	75 19		 jne	 SHORT $LN368@cckd_chkds
  06d9a	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  06da1	83 c0 06	 add	 eax, 6
  06da4	48 98		 cdqe
  06da6	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  06dae	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  06db1	74 05		 je	 SHORT $LN367@cckd_chkds
$LN368@cckd_chkds:

; 2195 :                         continue;

  06db3	e9 29 fe ff ff	 jmp	 $LN73@cckd_chkds
$LN367@cckd_chkds:
$LN366@cckd_chkds:
$LN364@cckd_chkds:

; 2196 :                     /*
; 2197 :                      * If we are in `borrowed space' then start over
; 2198 :                      * with the current position at the beginning
; 2199 :                      */
; 2200 :                     if (flen > (U32)len && i > len - (int)blkgrpsz)

  06db8	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  06dbf	39 84 24 38 01
	00 00		 cmp	 DWORD PTR flen$1[rsp], eax
  06dc6	76 20		 jbe	 SHORT $LN369@cckd_chkds
  06dc8	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR blkgrpsz$[rsp]
  06dcf	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  06dd6	2b c8		 sub	 ecx, eax
  06dd8	8b c1		 mov	 eax, ecx
  06dda	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  06de1	7e 05		 jle	 SHORT $LN369@cckd_chkds

; 2201 :                         break;

  06de3	e9 ce 08 00 00	 jmp	 $LN74@cckd_chkds
$LN369@cckd_chkds:

; 2202 : 
; 2203 :                     /* Checks for comp none */
; 2204 :                     if (comp == CCKD_COMPRESS_NONE)

  06de8	83 bc 24 e0 00
	00 00 00	 cmp	 DWORD PTR comp$[rsp], 0
  06df0	0f 85 0f 01 00
	00		 jne	 $LN370@cckd_chkds

; 2205 :                     {
; 2206 :                         l = blkgrpsz;

  06df6	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR blkgrpsz$[rsp]
  06dfd	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 2207 :                         if (len - i < (int)blkgrpsz || fpos + i < lopos)

  06e04	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  06e0b	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  06e12	2b c8		 sub	 ecx, eax
  06e14	8b c1		 mov	 eax, ecx
  06e16	3b 84 24 18 01
	00 00		 cmp	 eax, DWORD PTR blkgrpsz$[rsp]
  06e1d	7c 1b		 jl	 SHORT $LN372@cckd_chkds
  06e1f	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  06e26	8b 8c 24 5c 01
	00 00		 mov	 ecx, DWORD PTR fpos$3[rsp]
  06e2d	03 c8		 add	 ecx, eax
  06e2f	8b c1		 mov	 eax, ecx
  06e31	3b 84 24 dc 00
	00 00		 cmp	 eax, DWORD PTR lopos$[rsp]
  06e38	73 05		 jae	 SHORT $LN371@cckd_chkds
$LN372@cckd_chkds:

; 2208 :                             continue;

  06e3a	e9 a2 fd ff ff	 jmp	 $LN73@cckd_chkds
$LN371@cckd_chkds:

; 2209 :                         if (len - i == (int)blkgrpsz && flen == (U32)len)

  06e3f	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  06e46	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  06e4d	2b c8		 sub	 ecx, eax
  06e4f	8b c1		 mov	 eax, ecx
  06e51	3b 84 24 18 01
	00 00		 cmp	 eax, DWORD PTR blkgrpsz$[rsp]
  06e58	75 15		 jne	 SHORT $LN373@cckd_chkds
  06e5a	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  06e61	39 84 24 38 01
	00 00		 cmp	 DWORD PTR flen$1[rsp], eax
  06e68	75 05		 jne	 SHORT $LN373@cckd_chkds

; 2210 :                             goto cdsk_fba_recover;

  06e6a	e9 5e 04 00 00	 jmp	 $cdsk_fba_recover$835
$LN373@cckd_chkds:

; 2211 :                         /* Pass 0 checks */
; 2212 :                         if (pass == 0
; 2213 :                          && (len - i - l < CKD_TRKHDR_SIZE+8

  06e6f	83 bc 24 14 01
	00 00 00	 cmp	 DWORD PTR pass$[rsp], 0
  06e77	0f 85 83 00 00
	00		 jne	 $LN374@cckd_chkds
  06e7d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  06e84	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  06e8b	2b c8		 sub	 ecx, eax
  06e8d	8b c1		 mov	 eax, ecx
  06e8f	2b 84 24 a8 00
	00 00		 sub	 eax, DWORD PTR l$[rsp]
  06e96	48 98		 cdqe
  06e98	48 83 f8 0d	 cmp	 rax, 13
  06e9c	7c 5d		 jl	 SHORT $LN375@cckd_chkds
  06e9e	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  06ea5	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR i$[rsp]
  06eac	03 c8		 add	 ecx, eax
  06eae	8b c1		 mov	 eax, ecx
  06eb0	48 98		 cdqe
  06eb2	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  06eba	0f b6 84 04 20
	20 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  06ec2	85 c0		 test	 eax, eax
  06ec4	75 35		 jne	 SHORT $LN375@cckd_chkds
  06ec6	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06ece	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  06ed6	48 63 8c 24 a8
	00 00 00	 movsxd	 rcx, DWORD PTR l$[rsp]
  06ede	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  06ee3	48 8b c8	 mov	 rcx, rax
  06ee6	e8 00 00 00 00	 call	 fetch_fw_noswap
  06eeb	8b c8		 mov	 ecx, eax
  06eed	e8 00 00 00 00	 call	 _byteswap_ulong
  06ef2	3b 84 24 80 01
	00 00		 cmp	 eax, DWORD PTR blkgrps$[rsp]
  06ef9	72 05		 jb	 SHORT $LN374@cckd_chkds
$LN375@cckd_chkds:

; 2214 :                           || compmask[buf[i+l]]
; 2215 :                           || fetch_fw (buf+i+l+1) >= (unsigned int)blkgrps)
; 2216 :                            )
; 2217 :                             continue;

  06efb	e9 e1 fc ff ff	 jmp	 $LN73@cckd_chkds
$LN374@cckd_chkds:

; 2218 :                         goto cdsk_fba_recover;

  06f00	e9 c8 03 00 00	 jmp	 $cdsk_fba_recover$835
$LN370@cckd_chkds:

; 2219 :                     }
; 2220 : 
; 2221 :                     /* The tests below are for pass 0 only */
; 2222 :                     if (pass == 1)

  06f05	83 bc 24 14 01
	00 00 01	 cmp	 DWORD PTR pass$[rsp], 1
  06f0d	75 05		 jne	 SHORT $LN376@cckd_chkds

; 2223 :                         continue;

  06f0f	e9 cd fc ff ff	 jmp	 $LN73@cckd_chkds
$LN376@cckd_chkds:

; 2224 : 
; 2225 :                     /* Check short `length' */
; 2226 :                     if (flen == (U32)len && (l = len - i) <= 1024)

  06f14	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  06f1b	39 84 24 38 01
	00 00		 cmp	 DWORD PTR flen$1[rsp], eax
  06f22	0f 85 b7 00 00
	00		 jne	 $LN377@cckd_chkds
  06f28	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  06f2f	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  06f36	2b c8		 sub	 ecx, eax
  06f38	8b c1		 mov	 eax, ecx
  06f3a	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax
  06f41	81 bc 24 a8 00
	00 00 00 04 00
	00		 cmp	 DWORD PTR l$[rsp], 1024	; 00000400H
  06f4c	0f 8f 8d 00 00
	00		 jg	 $LN377@cckd_chkds

; 2227 :                     {
; 2228 :                         if (cdsk_valid_trk (blkgrp, buf+i, heads, l))

  06f52	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06f5a	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  06f62	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  06f6a	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  06f72	48 8b d0	 mov	 rdx, rax
  06f75	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  06f7c	e8 00 00 00 00	 call	 cdsk_valid_trk
  06f81	85 c0		 test	 eax, eax
  06f83	74 5a		 je	 SHORT $LN378@cckd_chkds
$LN76@cckd_chkds:

; 2229 :                         {
; 2230 :                             while (cdsk_valid_trk (blkgrp, buf+i, heads, --l));

  06f85	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  06f8c	ff c8		 dec	 eax
  06f8e	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax
  06f95	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06f9d	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  06fa5	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  06fad	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  06fb5	48 8b d0	 mov	 rdx, rax
  06fb8	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  06fbf	e8 00 00 00 00	 call	 cdsk_valid_trk
  06fc4	85 c0		 test	 eax, eax
  06fc6	74 02		 je	 SHORT $LN77@cckd_chkds
  06fc8	eb bb		 jmp	 SHORT $LN76@cckd_chkds
$LN77@cckd_chkds:

; 2231 :                             l++;

  06fca	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  06fd1	ff c0		 inc	 eax
  06fd3	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 2232 :                             goto cdsk_fba_recover;

  06fda	e9 ee 02 00 00	 jmp	 $cdsk_fba_recover$835
$LN378@cckd_chkds:
$LN377@cckd_chkds:

; 2233 :                         }
; 2234 :                     }
; 2235 : 
; 2236 :                     /* Scan for next trkhdr */
; 2237 :                     for (j = i + CKD_TRKHDR_SIZE+8;

  06fdf	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  06fe7	48 83 c0 0d	 add	 rax, 13
  06feb	89 84 24 b0 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
  06ff2	eb 10		 jmp	 SHORT $LN80@cckd_chkds
$LN78@cckd_chkds:

; 2239 :                          j++)

  06ff4	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  06ffb	ff c0		 inc	 eax
  06ffd	89 84 24 b0 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN80@cckd_chkds:

; 2238 :                          j <= len - (CKD_TRKHDR_SIZE+8);

  07004	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  0700c	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR len$[rsp]
  07014	48 83 e9 0d	 sub	 rcx, 13
  07018	48 3b c1	 cmp	 rax, rcx
  0701b	0f 8f 58 01 00
	00		 jg	 $LN79@cckd_chkds

; 2240 :                     {
; 2241 :                         if (j - i > (int)blkgrpsz) break;

  07021	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  07028	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR j$[rsp]
  0702f	2b c8		 sub	 ecx, eax
  07031	8b c1		 mov	 eax, ecx
  07033	3b 84 24 18 01
	00 00		 cmp	 eax, DWORD PTR blkgrpsz$[rsp]
  0703a	7e 05		 jle	 SHORT $LN379@cckd_chkds
  0703c	e9 38 01 00 00	 jmp	 $LN79@cckd_chkds
$LN379@cckd_chkds:

; 2242 : 
; 2243 :                         if (compmask[buf[j]] != 0
; 2244 :                          || fetch_fw(buf+j+1) >= (unsigned int)blkgrps)

  07041	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  07049	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  07051	0f b6 84 04 20
	20 00 00	 movzx	 eax, BYTE PTR compmask$[rsp+rax]
  07059	85 c0		 test	 eax, eax
  0705b	75 28		 jne	 SHORT $LN381@cckd_chkds
  0705d	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  07065	48 8d 84 04 a1
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+1]
  0706d	48 8b c8	 mov	 rcx, rax
  07070	e8 00 00 00 00	 call	 fetch_fw_noswap
  07075	8b c8		 mov	 ecx, eax
  07077	e8 00 00 00 00	 call	 _byteswap_ulong
  0707c	3b 84 24 80 01
	00 00		 cmp	 eax, DWORD PTR blkgrps$[rsp]
  07083	72 05		 jb	 SHORT $LN380@cckd_chkds
$LN381@cckd_chkds:

; 2245 :                             continue;

  07085	e9 6a ff ff ff	 jmp	 $LN78@cckd_chkds
$LN380@cckd_chkds:

; 2246 : 
; 2247 :                         /* check zlib compressed header */
; 2248 :                         if (buf[j] == CCKD_COMPRESS_ZLIB
; 2249 :                          && fetch_hw(buf + j + 5) % 31 != 0)

  0708a	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  07092	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  0709a	83 f8 01	 cmp	 eax, 1
  0709d	75 38		 jne	 SHORT $LN382@cckd_chkds
  0709f	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  070a7	48 8d 84 04 a5
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax+5]
  070af	48 8b c8	 mov	 rcx, rax
  070b2	e8 00 00 00 00	 call	 fetch_hw_noswap
  070b7	0f b7 c8	 movzx	 ecx, ax
  070ba	e8 00 00 00 00	 call	 _byteswap_ushort
  070bf	0f b7 c0	 movzx	 eax, ax
  070c2	99		 cdq
  070c3	b9 1f 00 00 00	 mov	 ecx, 31
  070c8	f7 f9		 idiv	 ecx
  070ca	8b c2		 mov	 eax, edx
  070cc	85 c0		 test	 eax, eax
  070ce	74 07		 je	 SHORT $LN382@cckd_chkds

; 2250 :                             continue;

  070d0	e9 1f ff ff ff	 jmp	 $LN78@cckd_chkds
  070d5	eb 4c		 jmp	 SHORT $LN383@cckd_chkds
$LN382@cckd_chkds:

; 2251 : 
; 2252 :                         /* check bzip2 compressed header */
; 2253 :                         else if (buf[j] == CCKD_COMPRESS_BZIP2
; 2254 :                          && (buf[j+5] != 'B' || buf[j+6] != 'Z'))

  070d7	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  070df	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  070e7	83 f8 02	 cmp	 eax, 2
  070ea	75 37		 jne	 SHORT $LN384@cckd_chkds
  070ec	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  070f3	83 c0 05	 add	 eax, 5
  070f6	48 98		 cdqe
  070f8	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  07100	83 f8 42	 cmp	 eax, 66			; 00000042H
  07103	75 19		 jne	 SHORT $LN385@cckd_chkds
  07105	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  0710c	83 c0 06	 add	 eax, 6
  0710f	48 98		 cdqe
  07111	0f b6 84 04 a0
	21 00 00	 movzx	 eax, BYTE PTR buf$[rsp+rax]
  07119	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  0711c	74 05		 je	 SHORT $LN384@cckd_chkds
$LN385@cckd_chkds:

; 2255 :                                 continue;

  0711e	e9 d1 fe ff ff	 jmp	 $LN78@cckd_chkds
$LN384@cckd_chkds:
$LN383@cckd_chkds:

; 2256 : 
; 2257 :                         /* check to possible trkhdr */
; 2258 :                         l = j - i;

  07123	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0712a	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR j$[rsp]
  07131	2b c8		 sub	 ecx, eax
  07133	8b c1		 mov	 eax, ecx
  07135	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 2259 :                         if (cdsk_valid_trk (blkgrp, buf+i, heads, l))

  0713c	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07144	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  0714c	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  07154	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  0715c	48 8b d0	 mov	 rdx, rax
  0715f	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  07166	e8 00 00 00 00	 call	 cdsk_valid_trk
  0716b	85 c0		 test	 eax, eax
  0716d	74 05		 je	 SHORT $LN386@cckd_chkds

; 2260 :                         {
; 2261 : #if 0
; 2262 :                             while (cdsk_valid_trk (blkgrp, buf+i, heads, --l));
; 2263 :                             l++;
; 2264 : #endif
; 2265 :                             goto cdsk_fba_recover;

  0716f	e9 59 01 00 00	 jmp	 $cdsk_fba_recover$835
$LN386@cckd_chkds:

; 2266 :                         }
; 2267 : 
; 2268 :                     } /* scan for next trkhdr */

  07174	e9 7b fe ff ff	 jmp	 $LN78@cckd_chkds
$LN79@cckd_chkds:

; 2269 : 
; 2270 :                     /* Check `length' */
; 2271 :                     l = len - i;

  07179	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  07180	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  07187	2b c8		 sub	 ecx, eax
  07189	8b c1		 mov	 eax, ecx
  0718b	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 2272 :                     if (flen == (U32)len && l <= (int)blkgrpsz)

  07192	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  07199	39 84 24 38 01
	00 00		 cmp	 DWORD PTR flen$1[rsp], eax
  071a0	0f 85 a1 00 00
	00		 jne	 $LN387@cckd_chkds
  071a6	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR blkgrpsz$[rsp]
  071ad	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR l$[rsp], eax
  071b4	0f 8f 8d 00 00
	00		 jg	 $LN387@cckd_chkds

; 2273 :                     {
; 2274 :                         if (cdsk_valid_trk (blkgrp, buf+i, heads, l))

  071ba	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  071c2	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  071ca	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  071d2	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  071da	48 8b d0	 mov	 rdx, rax
  071dd	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  071e4	e8 00 00 00 00	 call	 cdsk_valid_trk
  071e9	85 c0		 test	 eax, eax
  071eb	74 5a		 je	 SHORT $LN388@cckd_chkds
$LN81@cckd_chkds:

; 2275 :                         {
; 2276 :                             while (cdsk_valid_trk (blkgrp, buf+i, heads, --l));

  071ed	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  071f4	ff c8		 dec	 eax
  071f6	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax
  071fd	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07205	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  0720d	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  07215	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  0721d	48 8b d0	 mov	 rdx, rax
  07220	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  07227	e8 00 00 00 00	 call	 cdsk_valid_trk
  0722c	85 c0		 test	 eax, eax
  0722e	74 02		 je	 SHORT $LN82@cckd_chkds
  07230	eb bb		 jmp	 SHORT $LN81@cckd_chkds
$LN82@cckd_chkds:

; 2277 :                             l++;

  07232	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  07239	ff c0		 inc	 eax
  0723b	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 2278 :                             goto cdsk_fba_recover;

  07242	e9 86 00 00 00	 jmp	 $cdsk_fba_recover$835
$LN388@cckd_chkds:
$LN387@cckd_chkds:

; 2279 :                         }
; 2280 :                     }
; 2281 : 
; 2282 :                     /* Scan all lengths */
; 2283 :                     for (l = CKD_TRKHDR_SIZE+8; i + l <= len; l++)

  07247	c7 84 24 a8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR l$[rsp], 13
  07252	eb 10		 jmp	 SHORT $LN85@cckd_chkds
$LN83@cckd_chkds:
  07254	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  0725b	ff c0		 inc	 eax
  0725d	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax
$LN85@cckd_chkds:
  07264	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  0726b	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR i$[rsp]
  07272	03 c8		 add	 ecx, eax
  07274	8b c1		 mov	 eax, ecx
  07276	3b 84 24 a4 00
	00 00		 cmp	 eax, DWORD PTR len$[rsp]
  0727d	7f 49		 jg	 SHORT $LN84@cckd_chkds

; 2284 :                     {
; 2285 :                         if (l > (int)blkgrpsz)

  0727f	8b 84 24 18 01
	00 00		 mov	 eax, DWORD PTR blkgrpsz$[rsp]
  07286	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR l$[rsp], eax
  0728d	7e 02		 jle	 SHORT $LN389@cckd_chkds

; 2286 :                             break;

  0728f	eb 37		 jmp	 SHORT $LN84@cckd_chkds
$LN389@cckd_chkds:

; 2287 :                         if (cdsk_valid_trk (blkgrp, buf+i, heads, l))

  07291	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07299	48 8d 84 04 a0
	21 00 00	 lea	 rax, QWORD PTR buf$[rsp+rax]
  072a1	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR l$[rsp]
  072a9	44 8b 84 24 cc
	00 00 00	 mov	 r8d, DWORD PTR heads$[rsp]
  072b1	48 8b d0	 mov	 rdx, rax
  072b4	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  072bb	e8 00 00 00 00	 call	 cdsk_valid_trk
  072c0	85 c0		 test	 eax, eax
  072c2	74 02		 je	 SHORT $LN390@cckd_chkds

; 2288 :                             goto cdsk_fba_recover;

  072c4	eb 07		 jmp	 SHORT $cdsk_fba_recover$835
$LN390@cckd_chkds:

; 2289 :                     } /* for all lengths */

  072c6	eb 8c		 jmp	 SHORT $LN83@cckd_chkds
$LN84@cckd_chkds:

; 2290 : 
; 2291 :                     continue;

  072c8	e9 14 f9 ff ff	 jmp	 $LN73@cckd_chkds
$cdsk_fba_recover$835:

; 2292 : 
; 2293 : cdsk_fba_recover:
; 2294 :                     if(dev->batch)

  072cd	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  072d5	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  072db	c1 e8 0a	 shr	 eax, 10
  072de	83 e0 01	 and	 eax, 1
  072e1	85 c0		 test	 eax, eax
  072e3	0f 84 53 01 00
	00		 je	 $LN391@cckd_chkds

; 2295 :                         // "%1d:%04X CCKD file %s: %s[%d] recovered offset 0x%16.16"PRIX64" len %"PRId64
; 2296 :                         FWRMSG( stdout, HHC00372, "I", LCSS_DEVNUM, dev->filename,

  072e9	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  072f2	74 15		 je	 SHORT $LN707@cckd_chkds
  072f4	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  072fc	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  07300	89 84 24 f0 02
	00 00		 mov	 DWORD PTR tv3766[rsp], eax
  07307	eb 0b		 jmp	 SHORT $LN708@cckd_chkds
$LN707@cckd_chkds:
  07309	c7 84 24 f0 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3766[rsp], 0
$LN708@cckd_chkds:
  07314	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0731d	74 17		 je	 SHORT $LN709@cckd_chkds
  0731f	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  07327	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0732b	d1 f8		 sar	 eax, 1
  0732d	89 84 24 f4 02
	00 00		 mov	 DWORD PTR tv3772[rsp], eax
  07334	eb 0b		 jmp	 SHORT $LN710@cckd_chkds
$LN709@cckd_chkds:
  07336	c7 84 24 f4 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3772[rsp], 0
$LN710@cckd_chkds:
  07341	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  07349	48 89 84 24 d0
	07 00 00	 mov	 QWORD PTR tv3752[rsp], rax
  07351	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  07359	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  07361	48 03 d1	 add	 rdx, rcx
  07364	48 8b ca	 mov	 rcx, rdx
  07367	48 89 8c 24 d8
	07 00 00	 mov	 QWORD PTR tv3755[rsp], rcx
  0736f	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  07377	e8 00 00 00 00	 call	 spc_typ_to_str
  0737c	48 89 84 24 e0
	07 00 00	 mov	 QWORD PTR tv3758[rsp], rax
  07384	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0738c	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  07393	48 89 8c 24 e8
	07 00 00	 mov	 QWORD PTR tv3761[rsp], rcx
  0739b	b9 01 00 00 00	 mov	 ecx, 1
  073a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  073a6	48 8b 8c 24 d0
	07 00 00	 mov	 rcx, QWORD PTR tv3752[rsp]
  073ae	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  073b3	48 8b 8c 24 d8
	07 00 00	 mov	 rcx, QWORD PTR tv3755[rsp]
  073bb	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  073c0	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  073c7	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  073cb	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR tv3758[rsp]
  073d3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  073d8	48 8b 8c 24 e8
	07 00 00	 mov	 rcx, QWORD PTR tv3761[rsp]
  073e0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  073e5	8b 8c 24 f0 02
	00 00		 mov	 ecx, DWORD PTR tv3766[rsp]
  073ec	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  073f0	8b 8c 24 f4 02
	00 00		 mov	 ecx, DWORD PTR tv3772[rsp]
  073f7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  073fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170418
  07402	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  07407	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170419
  0740e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  07413	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  07418	41 b9 03 00 00
	00		 mov	 r9d, 3
  0741e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170420
  07425	ba f9 08 00 00	 mov	 edx, 2297		; 000008f9H
  0742a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170421
  07431	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  07437	e9 4e 01 00 00	 jmp	 $LN392@cckd_chkds
$LN391@cckd_chkds:

; 2297 :                                 spc_typ_to_str( trktyp ), blkgrp, off + i, (S64)l);
; 2298 :                     else
; 2299 :                         // "%1d:%04X CCKD file %s: %s[%d] recovered offset 0x%16.16"PRIX64" len %"PRId64
; 2300 :                         WRMSG( HHC00372, "I", LCSS_DEVNUM, dev->filename,

  0743c	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  07445	74 15		 je	 SHORT $LN711@cckd_chkds
  07447	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0744f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  07453	89 84 24 f8 02
	00 00		 mov	 DWORD PTR tv3797[rsp], eax
  0745a	eb 0b		 jmp	 SHORT $LN712@cckd_chkds
$LN711@cckd_chkds:
  0745c	c7 84 24 f8 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3797[rsp], 0
$LN712@cckd_chkds:
  07467	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  07470	74 17		 je	 SHORT $LN713@cckd_chkds
  07472	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0747a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0747e	d1 f8		 sar	 eax, 1
  07480	89 84 24 fc 02
	00 00		 mov	 DWORD PTR tv3803[rsp], eax
  07487	eb 0b		 jmp	 SHORT $LN714@cckd_chkds
$LN713@cckd_chkds:
  07489	c7 84 24 fc 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3803[rsp], 0
$LN714@cckd_chkds:
  07494	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  0749c	48 89 84 24 f0
	07 00 00	 mov	 QWORD PTR tv3783[rsp], rax
  074a4	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  074ac	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  074b4	48 03 d1	 add	 rdx, rcx
  074b7	48 8b ca	 mov	 rcx, rdx
  074ba	48 89 8c 24 f8
	07 00 00	 mov	 QWORD PTR tv3786[rsp], rcx
  074c2	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  074ca	e8 00 00 00 00	 call	 spc_typ_to_str
  074cf	48 89 84 24 00
	08 00 00	 mov	 QWORD PTR tv3789[rsp], rax
  074d7	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  074df	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  074e6	48 89 8c 24 08
	08 00 00	 mov	 QWORD PTR tv3792[rsp], rcx
  074ee	b9 01 00 00 00	 mov	 ecx, 1
  074f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  074f9	48 8b 8c 24 f0
	07 00 00	 mov	 rcx, QWORD PTR tv3783[rsp]
  07501	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  07506	48 8b 8c 24 f8
	07 00 00	 mov	 rcx, QWORD PTR tv3786[rsp]
  0750e	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  07513	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR blkgrp$[rsp]
  0751a	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  0751e	48 8b 8c 24 00
	08 00 00	 mov	 rcx, QWORD PTR tv3789[rsp]
  07526	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0752b	48 8b 8c 24 08
	08 00 00	 mov	 rcx, QWORD PTR tv3792[rsp]
  07533	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  07538	8b 8c 24 f8 02
	00 00		 mov	 ecx, DWORD PTR tv3797[rsp]
  0753f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  07543	8b 8c 24 fc 02
	00 00		 mov	 ecx, DWORD PTR tv3803[rsp]
  0754a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0754e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170422
  07555	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0755a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170423
  07561	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  07566	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0756b	41 b9 03 00 00
	00		 mov	 r9d, 3
  07571	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170424
  07578	ba fd 08 00 00	 mov	 edx, 2301		; 000008fdH
  0757d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170425
  07584	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN392@cckd_chkds:

; 2301 :                               spc_typ_to_str( trktyp ), blkgrp, off + i, (S64)l);
; 2302 :                     n--;

  0758a	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  07591	ff c8		 dec	 eax
  07593	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 2303 :                     rcvtab[blkgrp] = 2;

  0759a	48 63 84 24 f0
	00 00 00	 movsxd	 rax, DWORD PTR blkgrp$[rsp]
  075a2	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  075aa	c6 04 01 02	 mov	 BYTE PTR [rcx+rax], 2

; 2304 : 
; 2305 :                     /* Enable recovery of comp 0 blkgrps for pass 0 */
; 2306 :                     if (fpos + i < lopos)

  075ae	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  075b5	8b 8c 24 5c 01
	00 00		 mov	 ecx, DWORD PTR fpos$3[rsp]
  075bc	03 c8		 add	 ecx, eax
  075be	8b c1		 mov	 eax, ecx
  075c0	3b 84 24 dc 00
	00 00		 cmp	 eax, DWORD PTR lopos$[rsp]
  075c7	73 19		 jae	 SHORT $LN393@cckd_chkds

; 2307 :                         lopos = fpos + i;

  075c9	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  075d0	8b 8c 24 5c 01
	00 00		 mov	 ecx, DWORD PTR fpos$3[rsp]
  075d7	03 c8		 add	 ecx, eax
  075d9	8b c1		 mov	 eax, ecx
  075db	89 84 24 dc 00
	00 00		 mov	 DWORD PTR lopos$[rsp], eax
$LN393@cckd_chkds:

; 2308 : 
; 2309 :                     /* add recovered block group to the space table */
; 2310 :                     spctab[s].spc_typ = trktyp;

  075e2	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  075ea	48 6b c0 18	 imul	 rax, rax, 24
  075ee	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  075f6	0f b6 94 24 d0
	00 00 00	 movzx	 edx, BYTE PTR trktyp$[rsp]
  075fe	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 2311 :                     spctab[s].spc_val = blkgrp;

  07601	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  07609	48 6b c0 18	 imul	 rax, rax, 24
  0760d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07615	8b 94 24 f0 00
	00 00		 mov	 edx, DWORD PTR blkgrp$[rsp]
  0761c	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 2312 :                     spctab[s].spc_off = fpos + i;

  07620	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  07627	8b 8c 24 5c 01
	00 00		 mov	 ecx, DWORD PTR fpos$3[rsp]
  0762e	03 c8		 add	 ecx, eax
  07630	8b c1		 mov	 eax, ecx
  07632	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  0763a	48 6b c9 18	 imul	 rcx, rcx, 24
  0763e	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  07646	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 2313 :                     spctab[s].spc_len =

  0764a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  07652	48 6b c0 18	 imul	 rax, rax, 24
  07656	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0765e	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR l$[rsp]
  07665	89 54 01 14	 mov	 DWORD PTR [rcx+rax+20], edx
  07669	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  07671	48 6b c0 18	 imul	 rax, rax, 24
  07675	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0767d	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR l$[rsp]
  07684	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 2314 :                     spctab[s].spc_siz = l;
; 2315 :                     s++;

  07688	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  0768f	ff c0		 inc	 eax
  07691	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 2316 :                     /*
; 2317 :                      * adjust `i' knowing it will be incremented
; 2318 :                      * in the `for' loop above.
; 2319 :                      */
; 2320 :                     i += l - 1;

  07698	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0769f	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR l$[rsp]
  076a6	8d 44 08 ff	 lea	 eax, DWORD PTR [rax+rcx-1]
  076aa	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax

; 2321 :                 } /* for each byte in the free space */

  076b1	e9 2b f5 ff ff	 jmp	 $LN73@cckd_chkds
$LN74@cckd_chkds:

; 2322 : 
; 2323 :                 /* Adjust the free space for what we processed */
; 2324 :                 spctab[f].spc_off += i;

  076b6	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  076be	48 6b c0 18	 imul	 rax, rax, 24
  076c2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  076ca	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  076ce	03 84 24 90 00
	00 00		 add	 eax, DWORD PTR i$[rsp]
  076d5	48 63 8c 24 bc
	00 00 00	 movsxd	 rcx, DWORD PTR f$[rsp]
  076dd	48 6b c9 18	 imul	 rcx, rcx, 24
  076e1	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  076e9	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 2325 :                 spctab[f].spc_len -= i;

  076ed	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  076f5	48 6b c0 18	 imul	 rax, rax, 24
  076f9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07701	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR i$[rsp]
  07708	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  0770c	2b c2		 sub	 eax, edx
  0770e	48 63 8c 24 bc
	00 00 00	 movsxd	 rcx, DWORD PTR f$[rsp]
  07716	48 6b c9 18	 imul	 rcx, rcx, 24
  0771a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  07722	89 44 0a 10	 mov	 DWORD PTR [rdx+rcx+16], eax

; 2326 :                 spctab[f].spc_siz -= i;

  07726	48 63 84 24 bc
	00 00 00	 movsxd	 rax, DWORD PTR f$[rsp]
  0772e	48 6b c0 18	 imul	 rax, rax, 24
  07732	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0773a	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR i$[rsp]
  07741	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  07745	2b c2		 sub	 eax, edx
  07747	48 63 8c 24 bc
	00 00 00	 movsxd	 rcx, DWORD PTR f$[rsp]
  0774f	48 6b c9 18	 imul	 rcx, rcx, 24
  07753	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0775b	89 44 0a 14	 mov	 DWORD PTR [rdx+rcx+20], eax

; 2327 : 
; 2328 :             } /* for each free space */

  0775f	e9 41 f2 ff ff	 jmp	 $LN67@cckd_chkds
$LN68@cckd_chkds:

; 2329 : 
; 2330 :         } /* if fbadasd */

  07764	e9 a4 f1 ff ff	 jmp	 $LN64@cckd_chkds
$LN65@cckd_chkds:

; 2331 : 
; 2332 :         for (i = n = 0; i < trks; i++)

  07769	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR n$[rsp], 0
  07774	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  0777b	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
  07782	eb 10		 jmp	 SHORT $LN88@cckd_chkds
$LN86@cckd_chkds:
  07784	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0778b	ff c0		 inc	 eax
  0778d	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN88@cckd_chkds:
  07794	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  0779b	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  077a2	7d 2b		 jge	 SHORT $LN87@cckd_chkds

; 2333 :             if (rcvtab[i] == 2)

  077a4	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  077ac	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  077b4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  077b8	83 f8 02	 cmp	 eax, 2
  077bb	75 10		 jne	 SHORT $LN394@cckd_chkds

; 2334 :                 n++;

  077bd	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  077c4	ff c0		 inc	 eax
  077c6	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax
$LN394@cckd_chkds:
  077cd	eb b5		 jmp	 SHORT $LN86@cckd_chkds
$LN87@cckd_chkds:

; 2335 : 
; 2336 :         if(dev->batch)

  077cf	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  077d7	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  077dd	c1 e8 0a	 shr	 eax, 10
  077e0	83 e0 01	 and	 eax, 1
  077e3	85 c0		 test	 eax, eax
  077e5	0f 84 1d 01 00
	00		 je	 $LN395@cckd_chkds

; 2337 :             // "%1d:%04X CCKD file %s: %"PRId64" %s images recovered"
; 2338 :             FWRMSG( stdout, HHC00373, "I", LCSS_DEVNUM, dev->filename,

  077eb	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  077f4	74 15		 je	 SHORT $LN715@cckd_chkds
  077f6	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  077fe	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  07802	89 84 24 00 03
	00 00		 mov	 DWORD PTR tv3894[rsp], eax
  07809	eb 0b		 jmp	 SHORT $LN716@cckd_chkds
$LN715@cckd_chkds:
  0780b	c7 84 24 00 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3894[rsp], 0
$LN716@cckd_chkds:
  07816	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0781f	74 17		 je	 SHORT $LN717@cckd_chkds
  07821	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  07829	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0782d	d1 f8		 sar	 eax, 1
  0782f	89 84 24 04 03
	00 00		 mov	 DWORD PTR tv3900[rsp], eax
  07836	eb 0b		 jmp	 SHORT $LN718@cckd_chkds
$LN717@cckd_chkds:
  07838	c7 84 24 04 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3900[rsp], 0
$LN718@cckd_chkds:
  07843	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  0784b	e8 00 00 00 00	 call	 spc_typ_to_str
  07850	48 89 84 24 10
	08 00 00	 mov	 QWORD PTR tv3884[rsp], rax
  07858	48 63 8c 24 b4
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  07860	48 89 8c 24 18
	08 00 00	 mov	 QWORD PTR tv3887[rsp], rcx
  07868	48 8b 94 24 d0
	21 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  07870	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  07877	48 89 94 24 20
	08 00 00	 mov	 QWORD PTR tv3889[rsp], rdx
  0787f	b9 01 00 00 00	 mov	 ecx, 1
  07884	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0788a	48 8b 8c 24 10
	08 00 00	 mov	 rcx, QWORD PTR tv3884[rsp]
  07892	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  07897	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR tv3887[rsp]
  0789f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  078a4	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR tv3889[rsp]
  078ac	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  078b1	8b 8c 24 00 03
	00 00		 mov	 ecx, DWORD PTR tv3894[rsp]
  078b8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  078bc	8b 8c 24 04 03
	00 00		 mov	 ecx, DWORD PTR tv3900[rsp]
  078c3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  078c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170430
  078ce	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  078d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170431
  078da	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  078df	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  078e4	41 b9 03 00 00
	00		 mov	 r9d, 3
  078ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170432
  078f1	ba 23 09 00 00	 mov	 edx, 2339		; 00000923H
  078f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170433
  078fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  07903	e9 18 01 00 00	 jmp	 $LN396@cckd_chkds
$LN395@cckd_chkds:

; 2339 :                     (S64)n, spc_typ_to_str( trktyp ));
; 2340 :         else
; 2341 :             // "%1d:%04X CCKD file %s: %"PRId64" %s images recovered"
; 2342 :             WRMSG( HHC00373, "I", LCSS_DEVNUM, dev->filename,

  07908	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  07911	74 15		 je	 SHORT $LN719@cckd_chkds
  07913	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0791b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0791f	89 84 24 08 03
	00 00		 mov	 DWORD PTR tv3921[rsp], eax
  07926	eb 0b		 jmp	 SHORT $LN720@cckd_chkds
$LN719@cckd_chkds:
  07928	c7 84 24 08 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3921[rsp], 0
$LN720@cckd_chkds:
  07933	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0793c	74 17		 je	 SHORT $LN721@cckd_chkds
  0793e	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  07946	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0794a	d1 f8		 sar	 eax, 1
  0794c	89 84 24 0c 03
	00 00		 mov	 DWORD PTR tv3927[rsp], eax
  07953	eb 0b		 jmp	 SHORT $LN722@cckd_chkds
$LN721@cckd_chkds:
  07955	c7 84 24 0c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3927[rsp], 0
$LN722@cckd_chkds:
  07960	0f b6 8c 24 d0
	00 00 00	 movzx	 ecx, BYTE PTR trktyp$[rsp]
  07968	e8 00 00 00 00	 call	 spc_typ_to_str
  0796d	48 89 84 24 28
	08 00 00	 mov	 QWORD PTR tv3911[rsp], rax
  07975	48 63 8c 24 b4
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  0797d	48 89 8c 24 30
	08 00 00	 mov	 QWORD PTR tv3914[rsp], rcx
  07985	48 8b 94 24 d0
	21 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0798d	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  07994	48 89 94 24 38
	08 00 00	 mov	 QWORD PTR tv3916[rsp], rdx
  0799c	b9 01 00 00 00	 mov	 ecx, 1
  079a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  079a7	48 8b 8c 24 28
	08 00 00	 mov	 rcx, QWORD PTR tv3911[rsp]
  079af	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  079b4	48 8b 8c 24 30
	08 00 00	 mov	 rcx, QWORD PTR tv3914[rsp]
  079bc	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  079c1	48 8b 8c 24 38
	08 00 00	 mov	 rcx, QWORD PTR tv3916[rsp]
  079c9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  079ce	8b 8c 24 08 03
	00 00		 mov	 ecx, DWORD PTR tv3921[rsp]
  079d5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  079d9	8b 8c 24 0c 03
	00 00		 mov	 ecx, DWORD PTR tv3927[rsp]
  079e0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  079e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170434
  079eb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  079f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170435
  079f7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  079fc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  07a01	41 b9 03 00 00
	00		 mov	 r9d, 3
  07a07	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170436
  07a0e	ba 27 09 00 00	 mov	 edx, 2343		; 00000927H
  07a13	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170437
  07a1a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN396@cckd_chkds:

; 2343 :                   (S64)n, spc_typ_to_str( trktyp ));
; 2344 : 
; 2345 :         /*-----------------------------------------------------------
; 2346 :          * Phase 2 -- rebuild affected l2 tables
; 2347 :          *-----------------------------------------------------------*/
; 2348 : 
; 2349 :         /*
; 2350 :          * Make sure there's at least one non-zero `rcvtab' entry
; 2351 :          * for l2 tables in `l2errs'.  Space validation may have
; 2352 :          * turned off all `rcvtab' entries for an l2.
; 2353 :          */
; 2354 :         for (i = 0; i < cdevhdr.num_L1tab; i++)

  07a20	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  07a2b	eb 10		 jmp	 SHORT $LN91@cckd_chkds
$LN89@cckd_chkds:
  07a2d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  07a34	ff c0		 inc	 eax
  07a36	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN91@cckd_chkds:
  07a3d	8b 84 24 a4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  07a44	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  07a4b	7d 33		 jge	 SHORT $LN90@cckd_chkds

; 2355 :             if (l2errs[i])

  07a4d	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07a55	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR l2errs$[rsp]
  07a5d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  07a61	85 c0		 test	 eax, eax
  07a63	74 19		 je	 SHORT $LN397@cckd_chkds

; 2356 :                 rcvtab[i*256] = 1;

  07a65	69 84 24 90 00
	00 00 00 01 00
	00		 imul	 eax, DWORD PTR i$[rsp], 256 ; 00000100H
  07a70	48 98		 cdqe
  07a72	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  07a7a	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1
$LN397@cckd_chkds:
  07a7e	eb ad		 jmp	 SHORT $LN89@cckd_chkds
$LN90@cckd_chkds:

; 2357 : 
; 2358 :         /* Get storage for the l2 table array */
; 2359 :         n = cdevhdr.num_L1tab;

  07a80	8b 84 24 a4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  07a87	89 84 24 b4 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 2360 :         len = sizeof(void *);

  07a8e	c7 84 24 a4 00
	00 00 08 00 00
	00		 mov	 DWORD PTR len$[rsp], 8

; 2361 :         if ((l2 = calloc (n, len)) == NULL)

  07a99	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  07aa1	48 63 8c 24 b4
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  07aa9	48 8b d0	 mov	 rdx, rax
  07aac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  07ab2	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR l2$[rsp], rax
  07aba	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR l2$[rsp], 0
  07ac3	75 05		 jne	 SHORT $LN398@cckd_chkds

; 2362 :             goto cdsk_calloc_error;

  07ac5	e9 ac 33 00 00	 jmp	 $cdsk_calloc_error$830
$LN398@cckd_chkds:

; 2363 : 
; 2364 :         /* Get storage for the rebuilt l2 tables */
; 2365 :         len = CCKD_L2TAB_SIZE;

  07aca	c7 84 24 a4 00
	00 00 00 08 00
	00		 mov	 DWORD PTR len$[rsp], 2048 ; 00000800H

; 2366 :         for (i = 0; i < trks; i++)

  07ad5	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  07ae0	eb 10		 jmp	 SHORT $LN94@cckd_chkds
$LN92@cckd_chkds:
  07ae2	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  07ae9	ff c0		 inc	 eax
  07aeb	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN94@cckd_chkds:
  07af2	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR trks$[rsp]
  07af9	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  07b00	0f 8d 13 01 00
	00		 jge	 $LN93@cckd_chkds

; 2367 :         {
; 2368 :             L1idx = i / 256;

  07b06	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  07b0d	99		 cdq
  07b0e	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  07b14	03 c2		 add	 eax, edx
  07b16	c1 f8 08	 sar	 eax, 8
  07b19	89 84 24 d8 00
	00 00		 mov	 DWORD PTR L1idx$[rsp], eax

; 2369 :             if (rcvtab[i] != 0 && l2[L1idx] == NULL)

  07b20	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07b28	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  07b30	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  07b34	85 c0		 test	 eax, eax
  07b36	0f 84 d8 00 00
	00		 je	 $LN399@cckd_chkds
  07b3c	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  07b44	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07b4c	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  07b51	0f 85 bd 00 00
	00		 jne	 $LN399@cckd_chkds

; 2370 :             {
; 2371 :                 if ((l2[L1idx] = malloc (len)) == NULL)

  07b57	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  07b5f	48 8b c8	 mov	 rcx, rax
  07b62	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  07b68	48 89 84 24 78
	04 00 00	 mov	 QWORD PTR tv3973[rsp], rax
  07b70	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  07b78	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07b80	48 8b 94 24 78
	04 00 00	 mov	 rdx, QWORD PTR tv3973[rsp]
  07b88	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
  07b8c	48 83 bc 24 78
	04 00 00 00	 cmp	 QWORD PTR tv3973[rsp], 0
  07b95	75 05		 jne	 SHORT $LN400@cckd_chkds

; 2372 :                     goto cdsk_malloc_error;

  07b97	e9 80 30 00 00	 jmp	 $cdsk_malloc_error$836
$LN400@cckd_chkds:

; 2373 :                 l1[L1idx] = shadow ? CCKD_SHADOW_NO_OFFSET : CCKD_BASE_NO_OFFSET;

  07b9c	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR shadow$[rsp], 0
  07ba4	74 0d		 je	 SHORT $LN723@cckd_chkds
  07ba6	c7 84 24 10 03
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tv3984[rsp], -1 ; ffffffffH
  07bb1	eb 0b		 jmp	 SHORT $LN724@cckd_chkds
$LN723@cckd_chkds:
  07bb3	c7 84 24 10 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv3984[rsp], 0
$LN724@cckd_chkds:
  07bbe	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  07bc6	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  07bce	8b 94 24 10 03
	00 00		 mov	 edx, DWORD PTR tv3984[rsp]
  07bd5	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx

; 2374 :                 memcpy (l2[L1idx], &empty_l2, len);

  07bd8	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  07be0	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR L1idx$[rsp]
  07be8	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  07bf0	48 8d bc 24 e0
	17 00 00	 lea	 rdi, QWORD PTR empty_l2$[rsp]
  07bf8	48 89 bc 24 40
	08 00 00	 mov	 QWORD PTR tv7362[rsp], rdi
  07c00	48 8b 3c ca	 mov	 rdi, QWORD PTR [rdx+rcx*8]
  07c04	48 8b 8c 24 40
	08 00 00	 mov	 rcx, QWORD PTR tv7362[rsp]
  07c0c	48 8b f1	 mov	 rsi, rcx
  07c0f	48 8b c8	 mov	 rcx, rax
  07c12	f3 a4		 rep movsb
$LN399@cckd_chkds:

; 2375 :             }
; 2376 :         }

  07c14	e9 c9 fe ff ff	 jmp	 $LN92@cckd_chkds
$LN93@cckd_chkds:

; 2377 : 
; 2378 :         /* Rebuild the l2 tables */
; 2379 :         qsort (spctab, s, sizeof(SPCTAB), cdsk_spctab_sort);

  07c19	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  07c21	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab_sort
  07c28	41 b8 18 00 00
	00		 mov	 r8d, 24
  07c2e	48 8b d0	 mov	 rdx, rax
  07c31	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07c39	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 2380 :         for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  07c3f	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  07c4a	eb 10		 jmp	 SHORT $LN97@cckd_chkds
$LN95@cckd_chkds:
  07c4c	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  07c53	ff c0		 inc	 eax
  07c55	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN97@cckd_chkds:
  07c5c	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07c64	48 6b c0 18	 imul	 rax, rax, 24
  07c68	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07c70	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  07c74	83 f8 08	 cmp	 eax, 8
  07c77	0f 84 ca 01 00
	00		 je	 $LN96@cckd_chkds

; 2381 :         {
; 2382 :             if (spctab[i].spc_typ == SPCTAB_L2 && l2[spctab[i].spc_val])

  07c7d	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07c85	48 6b c0 18	 imul	 rax, rax, 24
  07c89	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07c91	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  07c95	83 f8 04	 cmp	 eax, 4
  07c98	75 45		 jne	 SHORT $LN401@cckd_chkds
  07c9a	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07ca2	48 6b c0 18	 imul	 rax, rax, 24
  07ca6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07cae	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  07cb3	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07cbb	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  07cc0	74 1d		 je	 SHORT $LN401@cckd_chkds

; 2383 :                 spctab[i].spc_typ = SPCTAB_NONE;

  07cc2	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07cca	48 6b c0 18	 imul	 rax, rax, 24
  07cce	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07cd6	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
  07cda	e9 63 01 00 00	 jmp	 $LN402@cckd_chkds
$LN401@cckd_chkds:

; 2384 :             else if (spctab[i].spc_typ == trktyp && l2[spctab[i].spc_val/256])

  07cdf	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07ce7	48 6b c0 18	 imul	 rax, rax, 24
  07ceb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07cf3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  07cf7	3b 84 24 d0 00
	00 00		 cmp	 eax, DWORD PTR trktyp$[rsp]
  07cfe	0f 85 3e 01 00
	00		 jne	 $LN403@cckd_chkds
  07d04	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07d0c	48 6b c0 18	 imul	 rax, rax, 24
  07d10	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07d18	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  07d1c	99		 cdq
  07d1d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  07d23	03 c2		 add	 eax, edx
  07d25	c1 f8 08	 sar	 eax, 8
  07d28	48 98		 cdqe
  07d2a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07d32	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  07d37	0f 84 05 01 00
	00		 je	 $LN403@cckd_chkds

; 2385 :             {
; 2386 :                 L1idx = spctab[i].spc_val / 256;

  07d3d	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07d45	48 6b c0 18	 imul	 rax, rax, 24
  07d49	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07d51	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  07d55	99		 cdq
  07d56	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  07d5c	03 c2		 add	 eax, edx
  07d5e	c1 f8 08	 sar	 eax, 8
  07d61	89 84 24 d8 00
	00 00		 mov	 DWORD PTR L1idx$[rsp], eax

; 2387 :                 l2x = spctab[i].spc_val % 256;

  07d68	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07d70	48 6b c0 18	 imul	 rax, rax, 24
  07d74	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07d7c	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  07d80	99		 cdq
  07d81	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  07d87	03 c2		 add	 eax, edx
  07d89	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  07d8e	2b c2		 sub	 eax, edx
  07d90	89 84 24 60 01
	00 00		 mov	 DWORD PTR l2x$[rsp], eax

; 2388 :                 l2[L1idx][l2x].L2_trkoff = spctab[i].spc_off;

  07d97	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07d9f	48 6b c0 18	 imul	 rax, rax, 24
  07da3	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR L1idx$[rsp]
  07dab	48 63 94 24 60
	01 00 00	 movsxd	 rdx, DWORD PTR l2x$[rsp]
  07db3	48 8b bc 24 e8
	00 00 00	 mov	 rdi, QWORD PTR l2$[rsp]
  07dbb	48 8b 0c cf	 mov	 rcx, QWORD PTR [rdi+rcx*8]
  07dbf	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  07dc7	8b 44 07 0c	 mov	 eax, DWORD PTR [rdi+rax+12]
  07dcb	89 04 d1	 mov	 DWORD PTR [rcx+rdx*8], eax

; 2389 :                 l2[L1idx][l2x].L2_len   = spctab[i].spc_len;

  07dce	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07dd6	48 6b c0 18	 imul	 rax, rax, 24
  07dda	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR L1idx$[rsp]
  07de2	48 63 94 24 60
	01 00 00	 movsxd	 rdx, DWORD PTR l2x$[rsp]
  07dea	48 8b bc 24 e8
	00 00 00	 mov	 rdi, QWORD PTR l2$[rsp]
  07df2	48 8b 0c cf	 mov	 rcx, QWORD PTR [rdi+rcx*8]
  07df6	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  07dfe	0f b7 44 07 10	 movzx	 eax, WORD PTR [rdi+rax+16]
  07e03	66 89 44 d1 04	 mov	 WORD PTR [rcx+rdx*8+4], ax

; 2390 :                 l2[L1idx][l2x].L2_size  = spctab[i].spc_siz;

  07e08	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07e10	48 6b c0 18	 imul	 rax, rax, 24
  07e14	48 63 8c 24 d8
	00 00 00	 movsxd	 rcx, DWORD PTR L1idx$[rsp]
  07e1c	48 63 94 24 60
	01 00 00	 movsxd	 rdx, DWORD PTR l2x$[rsp]
  07e24	48 8b bc 24 e8
	00 00 00	 mov	 rdi, QWORD PTR l2$[rsp]
  07e2c	48 8b 0c cf	 mov	 rcx, QWORD PTR [rdi+rcx*8]
  07e30	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  07e38	0f b7 44 07 14	 movzx	 eax, WORD PTR [rdi+rax+20]
  07e3d	66 89 44 d1 06	 mov	 WORD PTR [rcx+rdx*8+6], ax
$LN403@cckd_chkds:
$LN402@cckd_chkds:

; 2391 :             }
; 2392 :         } /* for each space */

  07e42	e9 05 fe ff ff	 jmp	 $LN95@cckd_chkds
$LN96@cckd_chkds:

; 2393 :         qsort (spctab, s, sizeof(SPCTAB), cdsk_spctab_sort);

  07e47	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  07e4f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab_sort
  07e56	41 b8 18 00 00
	00		 mov	 r8d, 24
  07e5c	48 8b d0	 mov	 rdx, rax
  07e5f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07e67	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN98@cckd_chkds:

; 2394 :         while (spctab[s-1].spc_typ == SPCTAB_NONE) s--;

  07e6d	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  07e74	ff c8		 dec	 eax
  07e76	48 98		 cdqe
  07e78	48 6b c0 18	 imul	 rax, rax, 24
  07e7c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07e84	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  07e88	85 c0		 test	 eax, eax
  07e8a	75 12		 jne	 SHORT $LN99@cckd_chkds
  07e8c	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  07e93	ff c8		 dec	 eax
  07e95	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax
  07e9c	eb cf		 jmp	 SHORT $LN98@cckd_chkds
$LN99@cckd_chkds:

; 2395 : 
; 2396 :         /* Look for empty l2 tables */
; 2397 :         for (i = 0; i < cdevhdr.num_L1tab; i++)

  07e9e	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  07ea9	eb 10		 jmp	 SHORT $LN102@cckd_chkds
$LN100@cckd_chkds:
  07eab	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  07eb2	ff c0		 inc	 eax
  07eb4	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN102@cckd_chkds:
  07ebb	8b 84 24 a4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  07ec2	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  07ec9	7d 79		 jge	 SHORT $LN101@cckd_chkds

; 2398 :             if (l2[i] != NULL
; 2399 :              && memcmp (l2[i], &empty_l2, CCKD_L2TAB_SIZE) == 0)

  07ecb	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07ed3	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07edb	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  07ee0	74 5d		 je	 SHORT $LN404@cckd_chkds
  07ee2	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07eea	41 b8 00 08 00
	00		 mov	 r8d, 2048		; 00000800H
  07ef0	48 8d 94 24 e0
	17 00 00	 lea	 rdx, QWORD PTR empty_l2$[rsp]
  07ef8	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07f00	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  07f04	e8 00 00 00 00	 call	 memcmp
  07f09	85 c0		 test	 eax, eax
  07f0b	75 32		 jne	 SHORT $LN404@cckd_chkds

; 2400 :             {
; 2401 :                 free (l2[i]);

  07f0d	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07f15	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07f1d	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  07f21	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2402 :                 l2[i] = NULL;

  07f27	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07f2f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07f37	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0
$LN404@cckd_chkds:

; 2403 :             }

  07f3f	e9 67 ff ff ff	 jmp	 $LN100@cckd_chkds
$LN101@cckd_chkds:

; 2404 :         /*
; 2405 :          * `s-1' indexes the SPCTAB_EOF space table entry.
; 2406 :          * Set its `pos' to the maximum allowed value to ensure
; 2407 :          * there will be free space for the rebuilt l2 tables.
; 2408 :          */
; 2409 :         spctab[s-1].spc_off = (U32)cckd_maxsize;

  07f44	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  07f4b	ff c8		 dec	 eax
  07f4d	48 98		 cdqe
  07f4f	48 6b c0 18	 imul	 rax, rax, 24
  07f53	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07f5b	8b 94 24 80 04
	00 00		 mov	 edx, DWORD PTR cckd_maxsize$[rsp]
  07f62	89 54 01 0c	 mov	 DWORD PTR [rcx+rax+12], edx

; 2410 : 
; 2411 :         /* Build the free space */
; 2412 :         s = cdsk_build_free_space (spctab, s);

  07f66	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR s$[rsp]
  07f6d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07f75	e8 00 00 00 00	 call	 cdsk_build_free_space
  07f7a	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 2413 : 
; 2414 :         /* Find space for the rebuilt l2 tables */
; 2415 :         for (i = j = 0; i < cdevhdr.num_L1tab; i++)

  07f81	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  07f8c	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  07f93	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
  07f9a	eb 10		 jmp	 SHORT $LN105@cckd_chkds
$LN103@cckd_chkds:
  07f9c	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  07fa3	ff c0		 inc	 eax
  07fa5	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN105@cckd_chkds:
  07fac	8b 84 24 a4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  07fb3	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  07fba	0f 8d 01 04 00
	00		 jge	 $LN104@cckd_chkds

; 2416 :         {
; 2417 :             if (l2[i] == NULL) continue;

  07fc0	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  07fc8	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  07fd0	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  07fd5	75 02		 jne	 SHORT $LN405@cckd_chkds
  07fd7	eb c3		 jmp	 SHORT $LN103@cckd_chkds
$LN405@cckd_chkds:

; 2418 : 
; 2419 :             /* find a free space */
; 2420 :             for ( ; spctab[j].spc_typ != SPCTAB_EOF; j++)

  07fd9	eb 10		 jmp	 SHORT $LN108@cckd_chkds
$LN106@cckd_chkds:
  07fdb	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  07fe2	ff c0		 inc	 eax
  07fe4	89 84 24 b0 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN108@cckd_chkds:
  07feb	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  07ff3	48 6b c0 18	 imul	 rax, rax, 24
  07ff7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  07fff	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08003	83 f8 08	 cmp	 eax, 8
  08006	74 41		 je	 SHORT $LN107@cckd_chkds

; 2421 :                 if (spctab[j].spc_typ == SPCTAB_FREE
; 2422 :                  && spctab[j].spc_siz >= CCKD_L2TAB_SIZE)

  08008	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  08010	48 6b c0 18	 imul	 rax, rax, 24
  08014	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0801c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08020	83 f8 07	 cmp	 eax, 7
  08023	75 22		 jne	 SHORT $LN406@cckd_chkds
  08025	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  0802d	48 6b c0 18	 imul	 rax, rax, 24
  08031	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08039	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  0803d	48 3d 00 08 00
	00		 cmp	 rax, 2048		; 00000800H
  08043	7c 02		 jl	 SHORT $LN406@cckd_chkds

; 2423 :                      break;

  08045	eb 02		 jmp	 SHORT $LN107@cckd_chkds
$LN406@cckd_chkds:
  08047	eb 92		 jmp	 SHORT $LN106@cckd_chkds
$LN107@cckd_chkds:

; 2424 : 
; 2425 :             /* weird error if no space */
; 2426 :             if (spctab[j].spc_typ == SPCTAB_EOF)

  08049	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  08051	48 6b c0 18	 imul	 rax, rax, 24
  08055	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0805d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08061	83 f8 08	 cmp	 eax, 8
  08064	0f 85 d6 01 00
	00		 jne	 $LN407@cckd_chkds

; 2427 :             {
; 2428 :                 if(dev->batch)

  0806a	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08072	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  08078	c1 e8 0a	 shr	 eax, 10
  0807b	83 e0 01	 and	 eax, 1
  0807e	85 c0		 test	 eax, eax
  08080	0f 84 dd 00 00
	00		 je	 $LN408@cckd_chkds

; 2429 :                     FWRMSG( stdout, HHC00374, "E", LCSS_DEVNUM, dev->filename);

  08086	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0808f	74 15		 je	 SHORT $LN725@cckd_chkds
  08091	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08099	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0809d	89 84 24 14 03
	00 00		 mov	 DWORD PTR tv4166[rsp], eax
  080a4	eb 0b		 jmp	 SHORT $LN726@cckd_chkds
$LN725@cckd_chkds:
  080a6	c7 84 24 14 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4166[rsp], 0
$LN726@cckd_chkds:
  080b1	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  080ba	74 17		 je	 SHORT $LN727@cckd_chkds
  080bc	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  080c4	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  080c8	d1 f8		 sar	 eax, 1
  080ca	89 84 24 18 03
	00 00		 mov	 DWORD PTR tv4172[rsp], eax
  080d1	eb 0b		 jmp	 SHORT $LN728@cckd_chkds
$LN727@cckd_chkds:
  080d3	c7 84 24 18 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4172[rsp], 0
$LN728@cckd_chkds:
  080de	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  080e6	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  080ec	48 89 84 24 48
	08 00 00	 mov	 QWORD PTR tv4161[rsp], rax
  080f4	b9 01 00 00 00	 mov	 ecx, 1
  080f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  080ff	48 8b 8c 24 48
	08 00 00	 mov	 rcx, QWORD PTR tv4161[rsp]
  08107	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0810c	8b 8c 24 14 03
	00 00		 mov	 ecx, DWORD PTR tv4166[rsp]
  08113	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  08117	8b 8c 24 18 03
	00 00		 mov	 ecx, DWORD PTR tv4172[rsp]
  0811e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  08122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170451
  08129	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0812e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170452
  08135	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0813a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0813f	41 b9 03 00 00
	00		 mov	 r9d, 3
  08145	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170453
  0814c	ba 7d 09 00 00	 mov	 edx, 2429		; 0000097dH
  08151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170454
  08158	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0815e	e9 d8 00 00 00	 jmp	 $LN409@cckd_chkds
$LN408@cckd_chkds:

; 2430 :                 else
; 2431 :                     WRMSG( HHC00374, "E", LCSS_DEVNUM, dev->filename);

  08163	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0816c	74 15		 je	 SHORT $LN729@cckd_chkds
  0816e	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08176	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0817a	89 84 24 1c 03
	00 00		 mov	 DWORD PTR tv4188[rsp], eax
  08181	eb 0b		 jmp	 SHORT $LN730@cckd_chkds
$LN729@cckd_chkds:
  08183	c7 84 24 1c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4188[rsp], 0
$LN730@cckd_chkds:
  0818e	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08197	74 17		 je	 SHORT $LN731@cckd_chkds
  08199	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  081a1	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  081a5	d1 f8		 sar	 eax, 1
  081a7	89 84 24 20 03
	00 00		 mov	 DWORD PTR tv4194[rsp], eax
  081ae	eb 0b		 jmp	 SHORT $LN732@cckd_chkds
$LN731@cckd_chkds:
  081b0	c7 84 24 20 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4194[rsp], 0
$LN732@cckd_chkds:
  081bb	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  081c3	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  081c9	48 89 84 24 50
	08 00 00	 mov	 QWORD PTR tv4183[rsp], rax
  081d1	b9 01 00 00 00	 mov	 ecx, 1
  081d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  081dc	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR tv4183[rsp]
  081e4	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  081e9	8b 8c 24 1c 03
	00 00		 mov	 ecx, DWORD PTR tv4188[rsp]
  081f0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  081f4	8b 8c 24 20 03
	00 00		 mov	 ecx, DWORD PTR tv4194[rsp]
  081fb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  081ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170455
  08206	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0820b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170456
  08212	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  08217	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0821c	41 b9 03 00 00
	00		 mov	 r9d, 3
  08222	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170457
  08229	ba 7f 09 00 00	 mov	 edx, 2431		; 0000097fH
  0822e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170458
  08235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN409@cckd_chkds:

; 2432 :                 goto cdsk_error;

  0823b	e9 95 2e 00 00	 jmp	 $cdsk_error$829
$LN407@cckd_chkds:

; 2433 :             }
; 2434 : 
; 2435 :             /* add l2 space */
; 2436 :             l1[i]             = spctab[j].spc_off;

  08240	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  08248	48 6b c0 18	 imul	 rax, rax, 24
  0824c	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  08254	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  0825c	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  08264	8b 44 07 0c	 mov	 eax, DWORD PTR [rdi+rax+12]
  08268	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax

; 2437 :             spctab[s].spc_typ = SPCTAB_L2;

  0826b	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  08273	48 6b c0 18	 imul	 rax, rax, 24
  08277	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0827f	c6 04 01 04	 mov	 BYTE PTR [rcx+rax], 4

; 2438 :             spctab[s].spc_val = i;

  08283	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  0828b	48 6b c0 18	 imul	 rax, rax, 24
  0828f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08297	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR i$[rsp]
  0829e	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 2439 :             spctab[s].spc_off = spctab[j].spc_off;

  082a2	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  082aa	48 6b c0 18	 imul	 rax, rax, 24
  082ae	48 63 8c 24 a0
	00 00 00	 movsxd	 rcx, DWORD PTR s$[rsp]
  082b6	48 6b c9 18	 imul	 rcx, rcx, 24
  082ba	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  082c2	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  082ca	8b 44 07 0c	 mov	 eax, DWORD PTR [rdi+rax+12]
  082ce	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 2440 :             spctab[s].spc_len =

  082d2	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  082da	48 6b c0 18	 imul	 rax, rax, 24
  082de	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  082e6	c7 44 01 14 00
	08 00 00	 mov	 DWORD PTR [rcx+rax+20], 2048 ; 00000800H
  082ee	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  082f6	48 6b c0 18	 imul	 rax, rax, 24
  082fa	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08302	c7 44 01 10 00
	08 00 00	 mov	 DWORD PTR [rcx+rax+16], 2048 ; 00000800H

; 2441 :             spctab[s].spc_siz = CCKD_L2TAB_SIZE;
; 2442 :             s++;

  0830a	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08311	ff c0		 inc	 eax
  08313	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 2443 : 
; 2444 :             /* adjust the free space */
; 2445 :             spctab[j].spc_off += CCKD_L2TAB_SIZE;

  0831a	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  08322	48 6b c0 18	 imul	 rax, rax, 24
  08326	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0832e	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  08332	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  08338	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  08340	48 6b c9 18	 imul	 rcx, rcx, 24
  08344	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0834c	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 2446 :             spctab[j].spc_len -= CCKD_L2TAB_SIZE;

  08350	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  08358	48 6b c0 18	 imul	 rax, rax, 24
  0835c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08364	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  08368	48 2d 00 08 00
	00		 sub	 rax, 2048		; 00000800H
  0836e	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  08376	48 6b c9 18	 imul	 rcx, rcx, 24
  0837a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  08382	89 44 0a 10	 mov	 DWORD PTR [rdx+rcx+16], eax

; 2447 :             spctab[j].spc_siz -= CCKD_L2TAB_SIZE;

  08386	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  0838e	48 6b c0 18	 imul	 rax, rax, 24
  08392	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0839a	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  0839e	48 2d 00 08 00
	00		 sub	 rax, 2048		; 00000800H
  083a4	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  083ac	48 6b c9 18	 imul	 rcx, rcx, 24
  083b0	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  083b8	89 44 0a 14	 mov	 DWORD PTR [rdx+rcx+20], eax

; 2448 :         } /* for each l2 table */

  083bc	e9 db fb ff ff	 jmp	 $LN103@cckd_chkds
$LN104@cckd_chkds:

; 2449 : 
; 2450 : 
; 2451 :         /*-----------------------------------------------------------
; 2452 :          * Phase 3 -- write l1 and l2 tables
; 2453 :          *-----------------------------------------------------------*/
; 2454 : 
; 2455 :         if (ro)

  083c1	83 bc 24 54 01
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  083c9	0f 84 ee 01 00
	00		 je	 $LN410@cckd_chkds

; 2456 :         {
; 2457 :             if(dev->batch)

  083cf	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  083d7	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  083dd	c1 e8 0a	 shr	 eax, 10
  083e0	83 e0 01	 and	 eax, 1
  083e3	85 c0		 test	 eax, eax
  083e5	0f 84 e9 00 00
	00		 je	 $LN411@cckd_chkds

; 2458 :                 FWRMSG( stdout, HHC00375, "W", LCSS_DEVNUM, dev->filename,

  083eb	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  083f4	74 15		 je	 SHORT $LN733@cckd_chkds
  083f6	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  083fe	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  08402	89 84 24 24 03
	00 00		 mov	 DWORD PTR tv4281[rsp], eax
  08409	eb 0b		 jmp	 SHORT $LN734@cckd_chkds
$LN733@cckd_chkds:
  0840b	c7 84 24 24 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4281[rsp], 0
$LN734@cckd_chkds:
  08416	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0841f	74 17		 je	 SHORT $LN735@cckd_chkds
  08421	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08429	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0842d	d1 f8		 sar	 eax, 1
  0842f	89 84 24 28 03
	00 00		 mov	 DWORD PTR tv4287[rsp], eax
  08436	eb 0b		 jmp	 SHORT $LN736@cckd_chkds
$LN735@cckd_chkds:
  08438	c7 84 24 28 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4287[rsp], 0
$LN736@cckd_chkds:
  08443	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0844b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  08451	48 89 84 24 58
	08 00 00	 mov	 QWORD PTR tv4276[rsp], rax
  08459	b9 01 00 00 00	 mov	 ecx, 1
  0845e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08464	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170462
  0846b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  08470	48 8b 8c 24 58
	08 00 00	 mov	 rcx, QWORD PTR tv4276[rsp]
  08478	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0847d	8b 8c 24 24 03
	00 00		 mov	 ecx, DWORD PTR tv4281[rsp]
  08484	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  08488	8b 8c 24 28 03
	00 00		 mov	 ecx, DWORD PTR tv4287[rsp]
  0848f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  08493	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170463
  0849a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0849f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170464
  084a6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  084ab	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  084b0	41 b9 03 00 00
	00		 mov	 r9d, 3
  084b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170465
  084bd	ba 9b 09 00 00	 mov	 edx, 2459		; 0000099bH
  084c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170466
  084c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  084cf	e9 e4 00 00 00	 jmp	 $LN412@cckd_chkds
$LN411@cckd_chkds:

; 2459 :                         "file opened read-only");
; 2460 :             else
; 2461 :                 WRMSG( HHC00375, "W", LCSS_DEVNUM, dev->filename,

  084d4	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  084dd	74 15		 je	 SHORT $LN737@cckd_chkds
  084df	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  084e7	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  084eb	89 84 24 2c 03
	00 00		 mov	 DWORD PTR tv4304[rsp], eax
  084f2	eb 0b		 jmp	 SHORT $LN738@cckd_chkds
$LN737@cckd_chkds:
  084f4	c7 84 24 2c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4304[rsp], 0
$LN738@cckd_chkds:
  084ff	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08508	74 17		 je	 SHORT $LN739@cckd_chkds
  0850a	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08512	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  08516	d1 f8		 sar	 eax, 1
  08518	89 84 24 30 03
	00 00		 mov	 DWORD PTR tv4310[rsp], eax
  0851f	eb 0b		 jmp	 SHORT $LN740@cckd_chkds
$LN739@cckd_chkds:
  08521	c7 84 24 30 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4310[rsp], 0
$LN740@cckd_chkds:
  0852c	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08534	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0853a	48 89 84 24 60
	08 00 00	 mov	 QWORD PTR tv4299[rsp], rax
  08542	b9 01 00 00 00	 mov	 ecx, 1
  08547	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0854d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170467
  08554	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  08559	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR tv4299[rsp]
  08561	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  08566	8b 8c 24 2c 03
	00 00		 mov	 ecx, DWORD PTR tv4304[rsp]
  0856d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  08571	8b 8c 24 30 03
	00 00		 mov	 ecx, DWORD PTR tv4310[rsp]
  08578	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0857c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170468
  08583	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  08588	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170469
  0858f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  08594	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  08599	41 b9 03 00 00
	00		 mov	 r9d, 3
  0859f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170470
  085a6	ba 9e 09 00 00	 mov	 edx, 2462		; 0000099eH
  085ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170471
  085b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN412@cckd_chkds:

; 2462 :                       "file opened read-only");
; 2463 :               goto cdsk_error;

  085b8	e9 18 2b 00 00	 jmp	 $cdsk_error$829
$LN410@cckd_chkds:

; 2464 :         }
; 2465 :         if (comperrs)

  085bd	83 bc 24 34 03
	00 00 00	 cmp	 DWORD PTR comperrs$[rsp], 0
  085c5	0f 84 ee 01 00
	00		 je	 $LN413@cckd_chkds

; 2466 :         {
; 2467 :             if(dev->batch)

  085cb	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  085d3	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  085d9	c1 e8 0a	 shr	 eax, 10
  085dc	83 e0 01	 and	 eax, 1
  085df	85 c0		 test	 eax, eax
  085e1	0f 84 e9 00 00
	00		 je	 $LN414@cckd_chkds

; 2468 :                 FWRMSG( stdout, HHC00375, "W", LCSS_DEVNUM, dev->filename,

  085e7	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  085f0	74 15		 je	 SHORT $LN741@cckd_chkds
  085f2	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  085fa	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  085fe	89 84 24 38 03
	00 00		 mov	 DWORD PTR tv4364[rsp], eax
  08605	eb 0b		 jmp	 SHORT $LN742@cckd_chkds
$LN741@cckd_chkds:
  08607	c7 84 24 38 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4364[rsp], 0
$LN742@cckd_chkds:
  08612	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0861b	74 17		 je	 SHORT $LN743@cckd_chkds
  0861d	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08625	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  08629	d1 f8		 sar	 eax, 1
  0862b	89 84 24 3c 03
	00 00		 mov	 DWORD PTR tv4370[rsp], eax
  08632	eb 0b		 jmp	 SHORT $LN744@cckd_chkds
$LN743@cckd_chkds:
  08634	c7 84 24 3c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4370[rsp], 0
$LN744@cckd_chkds:
  0863f	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08647	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0864d	48 89 84 24 68
	08 00 00	 mov	 QWORD PTR tv4359[rsp], rax
  08655	b9 01 00 00 00	 mov	 ecx, 1
  0865a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08660	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170475
  08667	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0866c	48 8b 8c 24 68
	08 00 00	 mov	 rcx, QWORD PTR tv4359[rsp]
  08674	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  08679	8b 8c 24 38 03
	00 00		 mov	 ecx, DWORD PTR tv4364[rsp]
  08680	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  08684	8b 8c 24 3c 03
	00 00		 mov	 ecx, DWORD PTR tv4370[rsp]
  0868b	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0868f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170476
  08696	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0869b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170477
  086a2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  086a7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  086ac	41 b9 03 00 00
	00		 mov	 r9d, 3
  086b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170478
  086b9	ba a5 09 00 00	 mov	 edx, 2469		; 000009a5H
  086be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170479
  086c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  086cb	e9 e4 00 00 00	 jmp	 $LN415@cckd_chkds
$LN414@cckd_chkds:

; 2469 :                         "missing compression");
; 2470 :             else
; 2471 :                 WRMSG( HHC00375, "W", LCSS_DEVNUM, dev->filename,

  086d0	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  086d9	74 15		 je	 SHORT $LN745@cckd_chkds
  086db	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  086e3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  086e7	89 84 24 40 03
	00 00		 mov	 DWORD PTR tv4387[rsp], eax
  086ee	eb 0b		 jmp	 SHORT $LN746@cckd_chkds
$LN745@cckd_chkds:
  086f0	c7 84 24 40 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4387[rsp], 0
$LN746@cckd_chkds:
  086fb	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08704	74 17		 je	 SHORT $LN747@cckd_chkds
  08706	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0870e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  08712	d1 f8		 sar	 eax, 1
  08714	89 84 24 44 03
	00 00		 mov	 DWORD PTR tv4393[rsp], eax
  0871b	eb 0b		 jmp	 SHORT $LN748@cckd_chkds
$LN747@cckd_chkds:
  0871d	c7 84 24 44 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4393[rsp], 0
$LN748@cckd_chkds:
  08728	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08730	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  08736	48 89 84 24 70
	08 00 00	 mov	 QWORD PTR tv4382[rsp], rax
  0873e	b9 01 00 00 00	 mov	 ecx, 1
  08743	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08749	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170480
  08750	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  08755	48 8b 8c 24 70
	08 00 00	 mov	 rcx, QWORD PTR tv4382[rsp]
  0875d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  08762	8b 8c 24 40 03
	00 00		 mov	 ecx, DWORD PTR tv4387[rsp]
  08769	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0876d	8b 8c 24 44 03
	00 00		 mov	 ecx, DWORD PTR tv4393[rsp]
  08774	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  08778	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170481
  0877f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  08784	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170482
  0878b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  08790	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  08795	41 b9 03 00 00
	00		 mov	 r9d, 3
  0879b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170483
  087a2	ba a8 09 00 00	 mov	 edx, 2472		; 000009a8H
  087a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170484
  087ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN415@cckd_chkds:

; 2472 :                       "missing compression");
; 2473 :             goto cdsk_error;

  087b4	e9 1c 29 00 00	 jmp	 $cdsk_error$829
$LN413@cckd_chkds:

; 2474 :         }
; 2475 : 
; 2476 :         /* Write the l1 table */
; 2477 :         off = CCKD_L1TAB_POS;

  087b9	48 c7 84 24 c0
	00 00 00 00 04
	00 00		 mov	 QWORD PTR off$[rsp], 1024 ; 00000400H

; 2478 :         if (lseek (fd, off, SEEK_SET) < 0)

  087c5	45 33 c0	 xor	 r8d, r8d
  087c8	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  087d0	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  087d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  087dd	48 85 c0	 test	 rax, rax
  087e0	7d 05		 jge	 SHORT $LN416@cckd_chkds

; 2479 :             goto cdsk_lseek_error;

  087e2	e9 dd 1c 00 00	 jmp	 $cdsk_lseek_error$827
$LN416@cckd_chkds:

; 2480 :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  087e7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  087ee	83 38 00	 cmp	 DWORD PTR [rax], 0
  087f1	74 43		 je	 SHORT $LN417@cckd_chkds
  087f3	41 b8 01 00 00
	00		 mov	 r8d, 1
  087f9	33 d2		 xor	 edx, edx
  087fb	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  08802	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  08808	48 89 84 24 78
	08 00 00	 mov	 QWORD PTR tv4411[rsp], rax
  08810	b9 02 00 00 00	 mov	 ecx, 2
  08815	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0881b	48 8b 8c 24 78
	08 00 00	 mov	 rcx, QWORD PTR tv4411[rsp]
  08823	4c 8b c1	 mov	 r8, rcx
  08826	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170487
  0882d	48 8b c8	 mov	 rcx, rax
  08830	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN417@cckd_chkds:

; 2481 :         len = l1size;

  08836	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR l1size$[rsp]
  0883d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 2482 :         if ((rc = write (fd, l1, len)) != len)

  08844	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  0884c	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  08854	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0885b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  08861	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  08868	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  0886f	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  08876	74 05		 je	 SHORT $LN418@cckd_chkds

; 2483 :             goto cdsk_write_error;

  08878	e9 1b 21 00 00	 jmp	 $cdsk_write_error$837
$LN418@cckd_chkds:

; 2484 : 
; 2485 :         /* Write l2 tables */
; 2486 :         qsort (spctab, s, sizeof(SPCTAB), cdsk_spctab_sort);

  0887d	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR s$[rsp]
  08885	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:cdsk_spctab_sort
  0888c	41 b8 18 00 00
	00		 mov	 r8d, 24
  08892	48 8b d0	 mov	 rdx, rax
  08895	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0889d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 2487 :         for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  088a3	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  088ae	eb 10		 jmp	 SHORT $LN111@cckd_chkds
$LN109@cckd_chkds:
  088b0	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  088b7	ff c0		 inc	 eax
  088b9	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN111@cckd_chkds:
  088c0	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  088c8	48 6b c0 18	 imul	 rax, rax, 24
  088cc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  088d4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  088d8	83 f8 08	 cmp	 eax, 8
  088db	0f 84 6b 01 00
	00		 je	 $LN110@cckd_chkds

; 2488 :         {
; 2489 :             L1idx = spctab[i].spc_val;

  088e1	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  088e9	48 6b c0 18	 imul	 rax, rax, 24
  088ed	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  088f5	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  088f9	89 84 24 d8 00
	00 00		 mov	 DWORD PTR L1idx$[rsp], eax

; 2490 :             if (spctab[i].spc_typ != SPCTAB_L2 || l2[L1idx] == NULL)

  08900	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  08908	48 6b c0 18	 imul	 rax, rax, 24
  0890c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08914	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08918	83 f8 04	 cmp	 eax, 4
  0891b	75 17		 jne	 SHORT $LN420@cckd_chkds
  0891d	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  08925	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  0892d	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  08932	75 05		 jne	 SHORT $LN419@cckd_chkds
$LN420@cckd_chkds:

; 2491 :                 continue;

  08934	e9 77 ff ff ff	 jmp	 $LN109@cckd_chkds
$LN419@cckd_chkds:

; 2492 :             off = (off_t)l1[L1idx];

  08939	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  08941	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  08949	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0894c	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2493 :             if (lseek (fd, off, SEEK_SET) < 0)

  08954	45 33 c0	 xor	 r8d, r8d
  08957	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0895f	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  08966	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0896c	48 85 c0	 test	 rax, rax
  0896f	7d 05		 jge	 SHORT $LN421@cckd_chkds

; 2494 :                 goto cdsk_lseek_error;

  08971	e9 4e 1b 00 00	 jmp	 $cdsk_lseek_error$827
$LN421@cckd_chkds:

; 2495 :             gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  08976	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0897d	83 38 00	 cmp	 DWORD PTR [rax], 0
  08980	74 43		 je	 SHORT $LN422@cckd_chkds
  08982	41 b8 01 00 00
	00		 mov	 r8d, 1
  08988	33 d2		 xor	 edx, edx
  0898a	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  08991	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  08997	48 89 84 24 80
	08 00 00	 mov	 QWORD PTR tv4461[rsp], rax
  0899f	b9 02 00 00 00	 mov	 ecx, 2
  089a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  089aa	48 8b 8c 24 80
	08 00 00	 mov	 rcx, QWORD PTR tv4461[rsp]
  089b2	4c 8b c1	 mov	 r8, rcx
  089b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170493
  089bc	48 8b c8	 mov	 rcx, rax
  089bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN422@cckd_chkds:

; 2496 :             len = CCKD_L2TAB_SIZE;

  089c5	c7 84 24 a4 00
	00 00 00 08 00
	00		 mov	 DWORD PTR len$[rsp], 2048 ; 00000800H

; 2497 :             if ((rc = write (fd, l2[L1idx], len)) != len)

  089d0	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  089d8	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  089e0	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  089e8	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  089ec	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  089f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  089f9	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  08a00	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  08a07	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  08a0e	74 05		 je	 SHORT $LN423@cckd_chkds

; 2498 :                 goto cdsk_write_error;

  08a10	e9 83 1f 00 00	 jmp	 $cdsk_write_error$837
$LN423@cckd_chkds:

; 2499 :             free (l2[L1idx]);

  08a15	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  08a1d	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  08a25	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  08a29	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2500 :             l2[L1idx] = NULL;

  08a2f	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  08a37	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  08a3f	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0

; 2501 :         } /* for each space */

  08a47	e9 64 fe ff ff	 jmp	 $LN109@cckd_chkds
$LN110@cckd_chkds:

; 2502 : 
; 2503 :         /* Free recovery related storage */
; 2504 :         if (l2)

  08a4c	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR l2$[rsp], 0
  08a55	74 7a		 je	 SHORT $LN424@cckd_chkds

; 2505 :         {
; 2506 :             for (i = 0; i < cdevhdr.num_L1tab; i++)

  08a57	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  08a62	eb 10		 jmp	 SHORT $LN114@cckd_chkds
$LN112@cckd_chkds:
  08a64	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  08a6b	ff c0		 inc	 eax
  08a6d	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN114@cckd_chkds:
  08a74	8b 84 24 a4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  08a7b	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  08a82	7d 33		 jge	 SHORT $LN113@cckd_chkds

; 2507 :                 if (l2[i])

  08a84	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  08a8c	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  08a94	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  08a99	74 1a		 je	 SHORT $LN425@cckd_chkds

; 2508 :                     free (l2[i]);

  08a9b	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  08aa3	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  08aab	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  08aaf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN425@cckd_chkds:
  08ab5	eb ad		 jmp	 SHORT $LN112@cckd_chkds
$LN113@cckd_chkds:

; 2509 :             free (l2); l2 = NULL;

  08ab7	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  08abf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  08ac5	48 c7 84 24 e8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR l2$[rsp], 0
$LN424@cckd_chkds:

; 2510 :         }
; 2511 :         free (l2errs); l2errs = NULL;

  08ad1	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR l2errs$[rsp]
  08ad9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  08adf	48 c7 84 24 68
	01 00 00 00 00
	00 00		 mov	 QWORD PTR l2errs$[rsp], 0

; 2512 :         free (rcvtab); rcvtab = NULL;

  08aeb	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  08af3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  08af9	48 c7 84 24 00
	01 00 00 00 00
	00 00		 mov	 QWORD PTR rcvtab$[rsp], 0

; 2513 : 
; 2514 :         /* Ensure we do free space recovery */
; 2515 :         fsperr = 1;

  08b05	c7 84 24 f8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR fsperr$[rsp], 1
$LN307@cckd_chkds:

; 2516 : 
; 2517 :     } /* if (recovery || level >= 4) */
; 2518 : 
; 2519 :     /*---------------------------------------------------------------
; 2520 :      * Rebuild free space
; 2521 :      *---------------------------------------------------------------*/
; 2522 : 
; 2523 :     if (fsperr && ro)

  08b10	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR fsperr$[rsp], 0
  08b18	0f 84 e4 01 00
	00		 je	 $LN426@cckd_chkds
  08b1e	83 bc 24 54 01
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  08b26	0f 84 d6 01 00
	00		 je	 $LN426@cckd_chkds

; 2524 :     {
; 2525 :         if(dev->batch)

  08b2c	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08b34	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  08b3a	c1 e8 0a	 shr	 eax, 10
  08b3d	83 e0 01	 and	 eax, 1
  08b40	85 c0		 test	 eax, eax
  08b42	0f 84 dd 00 00
	00		 je	 $LN428@cckd_chkds

; 2526 :               FWRMSG( stdout, HHC00376, "W", LCSS_DEVNUM, dev->filename);

  08b48	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08b51	74 15		 je	 SHORT $LN749@cckd_chkds
  08b53	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08b5b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  08b5f	89 84 24 48 03
	00 00		 mov	 DWORD PTR tv4509[rsp], eax
  08b66	eb 0b		 jmp	 SHORT $LN750@cckd_chkds
$LN749@cckd_chkds:
  08b68	c7 84 24 48 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4509[rsp], 0
$LN750@cckd_chkds:
  08b73	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08b7c	74 17		 je	 SHORT $LN751@cckd_chkds
  08b7e	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08b86	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  08b8a	d1 f8		 sar	 eax, 1
  08b8c	89 84 24 4c 03
	00 00		 mov	 DWORD PTR tv4515[rsp], eax
  08b93	eb 0b		 jmp	 SHORT $LN752@cckd_chkds
$LN751@cckd_chkds:
  08b95	c7 84 24 4c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4515[rsp], 0
$LN752@cckd_chkds:
  08ba0	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08ba8	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  08bae	48 89 84 24 88
	08 00 00	 mov	 QWORD PTR tv4504[rsp], rax
  08bb6	b9 01 00 00 00	 mov	 ecx, 1
  08bbb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08bc1	48 8b 8c 24 88
	08 00 00	 mov	 rcx, QWORD PTR tv4504[rsp]
  08bc9	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  08bce	8b 8c 24 48 03
	00 00		 mov	 ecx, DWORD PTR tv4509[rsp]
  08bd5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  08bd9	8b 8c 24 4c 03
	00 00		 mov	 ecx, DWORD PTR tv4515[rsp]
  08be0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  08be4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170501
  08beb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  08bf0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170502
  08bf7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  08bfc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  08c01	41 b9 03 00 00
	00		 mov	 r9d, 3
  08c07	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170503
  08c0e	ba de 09 00 00	 mov	 edx, 2526		; 000009deH
  08c13	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170504
  08c1a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  08c20	e9 d8 00 00 00	 jmp	 $LN429@cckd_chkds
$LN428@cckd_chkds:

; 2527 :           else
; 2528 :               WRMSG( HHC00376, "W", LCSS_DEVNUM, dev->filename);

  08c25	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08c2e	74 15		 je	 SHORT $LN753@cckd_chkds
  08c30	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08c38	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  08c3c	89 84 24 50 03
	00 00		 mov	 DWORD PTR tv4531[rsp], eax
  08c43	eb 0b		 jmp	 SHORT $LN754@cckd_chkds
$LN753@cckd_chkds:
  08c45	c7 84 24 50 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4531[rsp], 0
$LN754@cckd_chkds:
  08c50	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  08c59	74 17		 je	 SHORT $LN755@cckd_chkds
  08c5b	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08c63	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  08c67	d1 f8		 sar	 eax, 1
  08c69	89 84 24 54 03
	00 00		 mov	 DWORD PTR tv4537[rsp], eax
  08c70	eb 0b		 jmp	 SHORT $LN756@cckd_chkds
$LN755@cckd_chkds:
  08c72	c7 84 24 54 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4537[rsp], 0
$LN756@cckd_chkds:
  08c7d	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  08c85	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  08c8b	48 89 84 24 90
	08 00 00	 mov	 QWORD PTR tv4526[rsp], rax
  08c93	b9 01 00 00 00	 mov	 ecx, 1
  08c98	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08c9e	48 8b 8c 24 90
	08 00 00	 mov	 rcx, QWORD PTR tv4526[rsp]
  08ca6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  08cab	8b 8c 24 50 03
	00 00		 mov	 ecx, DWORD PTR tv4531[rsp]
  08cb2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  08cb6	8b 8c 24 54 03
	00 00		 mov	 ecx, DWORD PTR tv4537[rsp]
  08cbd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  08cc1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170505
  08cc8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  08ccd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170506
  08cd4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  08cd9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  08cde	41 b9 03 00 00
	00		 mov	 r9d, 3
  08ce4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170507
  08ceb	ba e0 09 00 00	 mov	 edx, 2528		; 000009e0H
  08cf0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170508
  08cf7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN429@cckd_chkds:

; 2529 :     }

  08cfd	e9 78 12 00 00	 jmp	 $LN427@cckd_chkds
$LN426@cckd_chkds:

; 2530 :     else if (fsperr)

  08d02	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR fsperr$[rsp], 0
  08d0a	0f 84 6a 12 00
	00		 je	 $LN430@cckd_chkds
$cdsk_fsperr_retry$838:

; 2531 :     {
; 2532 :         /*-----------------------------------------------------------
; 2533 :          * Phase 1 -- build the free space
; 2534 :          *            make sure the last space isn't free space and
; 2535 :          *            that each free space is long enough (8 bytes).
; 2536 :          *-----------------------------------------------------------*/
; 2537 : 
; 2538 : cdsk_fsperr_retry:
; 2539 : 
; 2540 :         s = cdsk_build_free_space (spctab, s);

  08d10	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR s$[rsp]
  08d17	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08d1f	e8 00 00 00 00	 call	 cdsk_build_free_space
  08d24	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax

; 2541 : 
; 2542 :         /*
; 2543 :          * spctab[s-1] is the SPCTAB_EOF entry.
; 2544 :          * if spctab[s-2] is SPCTAB_FREE then discard it
; 2545 :          */
; 2546 :         if (spctab[s-2].spc_typ == SPCTAB_FREE)

  08d2b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08d32	83 e8 02	 sub	 eax, 2
  08d35	48 98		 cdqe
  08d37	48 6b c0 18	 imul	 rax, rax, 24
  08d3b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08d43	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08d47	83 f8 07	 cmp	 eax, 7
  08d4a	0f 85 a7 00 00
	00		 jne	 $LN431@cckd_chkds

; 2547 :         {
; 2548 :             spctab[s-1].spc_typ = SPCTAB_NONE;

  08d50	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08d57	ff c8		 dec	 eax
  08d59	48 98		 cdqe
  08d5b	48 6b c0 18	 imul	 rax, rax, 24
  08d5f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08d67	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 2549 :             spctab[s-2].spc_typ = SPCTAB_EOF;

  08d6b	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08d72	83 e8 02	 sub	 eax, 2
  08d75	48 98		 cdqe
  08d77	48 6b c0 18	 imul	 rax, rax, 24
  08d7b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08d83	c6 04 01 08	 mov	 BYTE PTR [rcx+rax], 8

; 2550 :             spctab[s-2].spc_val = -1;

  08d87	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08d8e	83 e8 02	 sub	 eax, 2
  08d91	48 98		 cdqe
  08d93	48 6b c0 18	 imul	 rax, rax, 24
  08d97	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08d9f	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 2551 :             spctab[s-2].spc_len =

  08da7	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08dae	83 e8 02	 sub	 eax, 2
  08db1	48 98		 cdqe
  08db3	48 6b c0 18	 imul	 rax, rax, 24
  08db7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08dbf	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+20], 0
  08dc7	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08dce	83 e8 02	 sub	 eax, 2
  08dd1	48 98		 cdqe
  08dd3	48 6b c0 18	 imul	 rax, rax, 24
  08dd7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08ddf	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+16], 0

; 2552 :             spctab[s-2].spc_siz = 0;
; 2553 :             s--;

  08de7	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR s$[rsp]
  08dee	ff c8		 dec	 eax
  08df0	89 84 24 a0 00
	00 00		 mov	 DWORD PTR s$[rsp], eax
$LN431@cckd_chkds:

; 2554 :         }
; 2555 :         /*
; 2556 :          * Check for short free spaces.
; 2557 :          * If found, shift left until the next free space or eof.
; 2558 :          */
; 2559 :         for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  08df7	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  08e02	eb 10		 jmp	 SHORT $LN117@cckd_chkds
$LN115@cckd_chkds:
  08e04	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  08e0b	ff c0		 inc	 eax
  08e0d	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN117@cckd_chkds:
  08e14	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  08e1c	48 6b c0 18	 imul	 rax, rax, 24
  08e20	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08e28	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08e2c	83 f8 08	 cmp	 eax, 8
  08e2f	74 3f		 je	 SHORT $LN116@cckd_chkds

; 2560 :             if (spctab[i].spc_typ == SPCTAB_FREE
; 2561 :              && spctab[i].spc_siz < CCKD_FREEBLK_SIZE)

  08e31	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  08e39	48 6b c0 18	 imul	 rax, rax, 24
  08e3d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08e45	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08e49	83 f8 07	 cmp	 eax, 7
  08e4c	75 20		 jne	 SHORT $LN432@cckd_chkds
  08e4e	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  08e56	48 6b c0 18	 imul	 rax, rax, 24
  08e5a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08e62	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  08e66	48 83 f8 08	 cmp	 rax, 8
  08e6a	7d 02		 jge	 SHORT $LN432@cckd_chkds

; 2562 :                 break;

  08e6c	eb 02		 jmp	 SHORT $LN116@cckd_chkds
$LN432@cckd_chkds:
  08e6e	eb 94		 jmp	 SHORT $LN115@cckd_chkds
$LN116@cckd_chkds:

; 2563 :         if (spctab[i].spc_typ != SPCTAB_EOF)

  08e70	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  08e78	48 6b c0 18	 imul	 rax, rax, 24
  08e7c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08e84	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08e88	83 f8 08	 cmp	 eax, 8
  08e8b	0f 84 03 05 00
	00		 je	 $LN433@cckd_chkds

; 2564 :         {
; 2565 :             /* Shift following space left */
; 2566 :             l = spctab[i++].spc_siz;

  08e91	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  08e99	48 6b c0 18	 imul	 rax, rax, 24
  08e9d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08ea5	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  08ea9	89 84 24 a8 00
	00 00		 mov	 DWORD PTR l$[rsp], eax
  08eb0	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  08eb7	ff c0		 inc	 eax
  08eb9	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN118@cckd_chkds:

; 2567 :             while (spctab[i].spc_typ != SPCTAB_FREE && spctab[i].spc_typ != SPCTAB_EOF)

  08ec0	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  08ec8	48 6b c0 18	 imul	 rax, rax, 24
  08ecc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08ed4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08ed8	83 f8 07	 cmp	 eax, 7
  08edb	0f 84 ae 04 00
	00		 je	 $LN119@cckd_chkds
  08ee1	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  08ee9	48 6b c0 18	 imul	 rax, rax, 24
  08eed	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08ef5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  08ef9	83 f8 08	 cmp	 eax, 8
  08efc	0f 84 8d 04 00
	00		 je	 $LN119@cckd_chkds

; 2568 :             {
; 2569 :                 /* Read the space and write shifted to the left */
; 2570 :                 off = (off_t)spctab[i].spc_off;

  08f02	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  08f0a	48 6b c0 18	 imul	 rax, rax, 24
  08f0e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08f16	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  08f1a	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2571 :                 if (lseek (fd, off, SEEK_SET) < 0)

  08f22	45 33 c0	 xor	 r8d, r8d
  08f25	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  08f2d	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  08f34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  08f3a	48 85 c0	 test	 rax, rax
  08f3d	7d 05		 jge	 SHORT $LN434@cckd_chkds

; 2572 :                     goto cdsk_lseek_error;

  08f3f	e9 80 15 00 00	 jmp	 $cdsk_lseek_error$827
$LN434@cckd_chkds:

; 2573 :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  08f44	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  08f4b	83 38 00	 cmp	 DWORD PTR [rax], 0
  08f4e	74 43		 je	 SHORT $LN435@cckd_chkds
  08f50	41 b8 01 00 00
	00		 mov	 r8d, 1
  08f56	33 d2		 xor	 edx, edx
  08f58	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  08f5f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  08f65	48 89 84 24 98
	08 00 00	 mov	 QWORD PTR tv4639[rsp], rax
  08f6d	b9 02 00 00 00	 mov	 ecx, 2
  08f72	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  08f78	48 8b 8c 24 98
	08 00 00	 mov	 rcx, QWORD PTR tv4639[rsp]
  08f80	4c 8b c1	 mov	 r8, rcx
  08f83	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170515
  08f8a	48 8b c8	 mov	 rcx, rax
  08f8d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN435@cckd_chkds:

; 2574 :                 len = spctab[i].spc_siz;

  08f93	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  08f9b	48 6b c0 18	 imul	 rax, rax, 24
  08f9f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  08fa7	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  08fab	89 84 24 a4 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 2575 :                 if ((rc = read (fd, buf, len)) != len)

  08fb2	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  08fba	48 8d 94 24 a0
	21 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  08fc2	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  08fc9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  08fcf	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  08fd6	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  08fdd	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  08fe4	74 05		 je	 SHORT $LN436@cckd_chkds

; 2576 :                     goto cdsk_read_error;

  08fe6	e9 29 17 00 00	 jmp	 $cdsk_read_error$828
$LN436@cckd_chkds:

; 2577 :                 off -= l;

  08feb	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  08ff3	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  08ffb	48 2b c8	 sub	 rcx, rax
  08ffe	48 8b c1	 mov	 rax, rcx
  09001	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2578 :                 if (lseek (fd, off, SEEK_SET) < 0)

  09009	45 33 c0	 xor	 r8d, r8d
  0900c	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  09014	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0901b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09021	48 85 c0	 test	 rax, rax
  09024	7d 05		 jge	 SHORT $LN437@cckd_chkds

; 2579 :                     goto cdsk_lseek_error;

  09026	e9 99 14 00 00	 jmp	 $cdsk_lseek_error$827
$LN437@cckd_chkds:

; 2580 :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0902b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  09032	83 38 00	 cmp	 DWORD PTR [rax], 0
  09035	74 43		 je	 SHORT $LN438@cckd_chkds
  09037	41 b8 01 00 00
	00		 mov	 r8d, 1
  0903d	33 d2		 xor	 edx, edx
  0903f	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0904c	48 89 84 24 a0
	08 00 00	 mov	 QWORD PTR tv4665[rsp], rax
  09054	b9 02 00 00 00	 mov	 ecx, 2
  09059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0905f	48 8b 8c 24 a0
	08 00 00	 mov	 rcx, QWORD PTR tv4665[rsp]
  09067	4c 8b c1	 mov	 r8, rcx
  0906a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170519
  09071	48 8b c8	 mov	 rcx, rax
  09074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN438@cckd_chkds:

; 2581 :                 if ((rc = write (fd, buf, len)) != len)

  0907a	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  09082	48 8d 94 24 a0
	21 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  0908a	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  09097	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  0909e	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  090a5	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  090ac	74 05		 je	 SHORT $LN439@cckd_chkds

; 2582 :                     goto cdsk_write_error;

  090ae	e9 e5 18 00 00	 jmp	 $cdsk_write_error$837
$LN439@cckd_chkds:

; 2583 :                 spctab[i].spc_off -= l;

  090b3	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  090bb	48 6b c0 18	 imul	 rax, rax, 24
  090bf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  090c7	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR l$[rsp]
  090ce	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  090d2	2b c2		 sub	 eax, edx
  090d4	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  090dc	48 6b c9 18	 imul	 rcx, rcx, 24
  090e0	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  090e8	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 2584 : 
; 2585 :                 /* Update the l2 or l1 table entry */
; 2586 :                 if (spctab[i].spc_typ == trktyp)

  090ec	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  090f4	48 6b c0 18	 imul	 rax, rax, 24
  090f8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09100	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  09104	3b 84 24 d0 00
	00 00		 cmp	 eax, DWORD PTR trktyp$[rsp]
  0910b	0f 85 fb 01 00
	00		 jne	 $LN440@cckd_chkds

; 2587 :                 {
; 2588 :                     L1idx = spctab[i].spc_val/256;

  09111	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09119	48 6b c0 18	 imul	 rax, rax, 24
  0911d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09125	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  09129	99		 cdq
  0912a	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  09130	03 c2		 add	 eax, edx
  09132	c1 f8 08	 sar	 eax, 8
  09135	89 84 24 d8 00
	00 00		 mov	 DWORD PTR L1idx$[rsp], eax

; 2589 :                     l2x = spctab[i].spc_val%256;

  0913c	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09144	48 6b c0 18	 imul	 rax, rax, 24
  09148	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09150	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  09154	99		 cdq
  09155	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0915b	03 c2		 add	 eax, edx
  0915d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  09162	2b c2		 sub	 eax, edx
  09164	89 84 24 60 01
	00 00		 mov	 DWORD PTR l2x$[rsp], eax

; 2590 :                     off = (off_t)l1[L1idx] + l2x * CCKD_L2ENT_SIZE;

  0916b	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR L1idx$[rsp]
  09173	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  0917b	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0917e	48 63 8c 24 60
	01 00 00	 movsxd	 rcx, DWORD PTR l2x$[rsp]
  09186	48 8d 04 c8	 lea	 rax, QWORD PTR [rax+rcx*8]
  0918a	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2591 :                     if (lseek (fd, off, SEEK_SET) < 0)

  09192	45 33 c0	 xor	 r8d, r8d
  09195	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0919d	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  091a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  091aa	48 85 c0	 test	 rax, rax
  091ad	7d 05		 jge	 SHORT $LN442@cckd_chkds

; 2592 :                         goto cdsk_lseek_error;

  091af	e9 10 13 00 00	 jmp	 $cdsk_lseek_error$827
$LN442@cckd_chkds:

; 2593 :                     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  091b4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  091bb	83 38 00	 cmp	 DWORD PTR [rax], 0
  091be	74 43		 je	 SHORT $LN443@cckd_chkds
  091c0	41 b8 01 00 00
	00		 mov	 r8d, 1
  091c6	33 d2		 xor	 edx, edx
  091c8	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  091cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  091d5	48 89 84 24 a8
	08 00 00	 mov	 QWORD PTR tv4717[rsp], rax
  091dd	b9 02 00 00 00	 mov	 ecx, 2
  091e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  091e8	48 8b 8c 24 a8
	08 00 00	 mov	 rcx, QWORD PTR tv4717[rsp]
  091f0	4c 8b c1	 mov	 r8, rcx
  091f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170525
  091fa	48 8b c8	 mov	 rcx, rax
  091fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN443@cckd_chkds:

; 2594 :                     len = CCKD_L2ENT_SIZE;

  09203	c7 84 24 a4 00
	00 00 08 00 00
	00		 mov	 DWORD PTR len$[rsp], 8

; 2595 :                     if ((rc = read (fd, &l2ent, len)) != len)

  0920e	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  09216	48 8d 94 24 40
	04 00 00	 lea	 rdx, QWORD PTR l2ent$[rsp]
  0921e	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09225	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0922b	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  09232	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  09239	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  09240	74 05		 je	 SHORT $LN444@cckd_chkds

; 2596 :                         goto cdsk_read_error;

  09242	e9 cd 14 00 00	 jmp	 $cdsk_read_error$828
$LN444@cckd_chkds:

; 2597 :                     l2ent.L2_trkoff -= l;

  09247	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR l$[rsp]
  0924e	8b 8c 24 40 04
	00 00		 mov	 ecx, DWORD PTR l2ent$[rsp]
  09255	2b c8		 sub	 ecx, eax
  09257	8b c1		 mov	 eax, ecx
  09259	89 84 24 40 04
	00 00		 mov	 DWORD PTR l2ent$[rsp], eax

; 2598 :                     if (lseek (fd, off, SEEK_SET) < 0)

  09260	45 33 c0	 xor	 r8d, r8d
  09263	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0926b	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09272	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09278	48 85 c0	 test	 rax, rax
  0927b	7d 05		 jge	 SHORT $LN445@cckd_chkds

; 2599 :                         goto cdsk_lseek_error;

  0927d	e9 42 12 00 00	 jmp	 $cdsk_lseek_error$827
$LN445@cckd_chkds:

; 2600 :                     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  09282	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  09289	83 38 00	 cmp	 DWORD PTR [rax], 0
  0928c	74 43		 je	 SHORT $LN446@cckd_chkds
  0928e	41 b8 01 00 00
	00		 mov	 r8d, 1
  09294	33 d2		 xor	 edx, edx
  09296	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0929d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  092a3	48 89 84 24 b0
	08 00 00	 mov	 QWORD PTR tv4738[rsp], rax
  092ab	b9 02 00 00 00	 mov	 ecx, 2
  092b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  092b6	48 8b 8c 24 b0
	08 00 00	 mov	 rcx, QWORD PTR tv4738[rsp]
  092be	4c 8b c1	 mov	 r8, rcx
  092c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170529
  092c8	48 8b c8	 mov	 rcx, rax
  092cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN446@cckd_chkds:

; 2601 :                     if ((rc = write (fd, &l2ent, len)) != len)

  092d1	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  092d9	48 8d 94 24 40
	04 00 00	 lea	 rdx, QWORD PTR l2ent$[rsp]
  092e1	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  092e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  092ee	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  092f5	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  092fc	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  09303	74 05		 je	 SHORT $LN447@cckd_chkds

; 2602 :                         goto cdsk_write_error;

  09305	e9 8e 16 00 00	 jmp	 $cdsk_write_error$837
$LN447@cckd_chkds:

; 2603 :                 } /* trk/blkgrp relocated */

  0930a	eb 6e		 jmp	 SHORT $LN441@cckd_chkds
$LN440@cckd_chkds:

; 2604 :                 else if (spctab[i].spc_typ == SPCTAB_L2)

  0930c	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09314	48 6b c0 18	 imul	 rax, rax, 24
  09318	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09320	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  09324	83 f8 04	 cmp	 eax, 4
  09327	75 51		 jne	 SHORT $LN448@cckd_chkds

; 2605 :                     l1[spctab[i].spc_val] -= l;

  09329	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09331	48 6b c0 18	 imul	 rax, rax, 24
  09335	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0933d	48 63 44 01 04	 movsxd	 rax, DWORD PTR [rcx+rax+4]
  09342	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  0934a	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR l$[rsp]
  09351	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  09354	2b c2		 sub	 eax, edx
  09356	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  0935e	48 6b c9 18	 imul	 rcx, rcx, 24
  09362	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  0936a	48 63 4c 0a 04	 movsxd	 rcx, DWORD PTR [rdx+rcx+4]
  0936f	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  09377	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
$LN448@cckd_chkds:
$LN441@cckd_chkds:

; 2606 :                 i++;

  0937a	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  09381	ff c0		 inc	 eax
  09383	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax

; 2607 :             } /* while not FREE space or EOF */

  0938a	e9 31 fb ff ff	 jmp	 $LN118@cckd_chkds
$LN119@cckd_chkds:

; 2608 :             goto cdsk_fsperr_retry;

  0938f	e9 7c f9 ff ff	 jmp	 $cdsk_fsperr_retry$838
$LN433@cckd_chkds:

; 2609 :         } /* if short free space found */
; 2610 : 
; 2611 :         /*-----------------------------------------------------------
; 2612 :          * Phase 2 -- rebuild free space statistics
; 2613 :          *-----------------------------------------------------------*/
; 2614 : 
; 2615 :         cdevhdr.cdh_vrm[0] = CCKD_VERSION;

  09394	b8 01 00 00 00	 mov	 eax, 1
  09399	48 6b c0 00	 imul	 rax, rax, 0
  0939d	c6 84 04 a0 0b
	00 00 00	 mov	 BYTE PTR cdevhdr$[rsp+rax], 0

; 2616 :         cdevhdr.cdh_vrm[1] = CCKD_RELEASE;

  093a5	b8 01 00 00 00	 mov	 eax, 1
  093aa	48 6b c0 01	 imul	 rax, rax, 1
  093ae	c6 84 04 a0 0b
	00 00 03	 mov	 BYTE PTR cdevhdr$[rsp+rax], 3

; 2617 :         cdevhdr.cdh_vrm[2] = CCKD_MODLVL;

  093b6	b8 01 00 00 00	 mov	 eax, 1
  093bb	48 6b c0 02	 imul	 rax, rax, 2
  093bf	c6 84 04 a0 0b
	00 00 01	 mov	 BYTE PTR cdevhdr$[rsp+rax], 1

; 2618 : 
; 2619 :         cdevhdr.cdh_size     =

  093c7	c7 84 24 c4 0b
	00 00 00 00 00
	00		 mov	 DWORD PTR cdevhdr$[rsp+36], 0
  093d2	8b 84 24 c4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+36]
  093d9	89 84 24 c0 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+32], eax
  093e0	8b 84 24 c0 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+32]
  093e7	89 84 24 bc 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+28], eax
  093ee	8b 84 24 bc 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+28]
  093f5	89 84 24 b8 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+24], eax
  093fc	8b 84 24 b8 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+24]
  09403	89 84 24 b4 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+20], eax
  0940a	8b 84 24 b4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+20]
  09411	89 84 24 b0 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+16], eax
  09418	8b 84 24 b0 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+16]
  0941f	89 84 24 ac 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+12], eax

; 2620 :         cdevhdr.cdh_used     =
; 2621 :         cdevhdr.free_off     =
; 2622 :         cdevhdr.free_total   =
; 2623 :         cdevhdr.free_largest =
; 2624 :         cdevhdr.free_num     =
; 2625 :         cdevhdr.free_imbed   = 0;
; 2626 : 
; 2627 :         for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  09426	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  09431	eb 10		 jmp	 SHORT $LN122@cckd_chkds
$LN120@cckd_chkds:
  09433	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0943a	ff c0		 inc	 eax
  0943c	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN122@cckd_chkds:
  09443	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0944b	48 6b c0 18	 imul	 rax, rax, 24
  0944f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09457	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0945b	83 f8 08	 cmp	 eax, 8
  0945e	0f 84 ab 01 00
	00		 je	 $LN121@cckd_chkds

; 2628 :             if (spctab[i].spc_typ == SPCTAB_FREE)

  09464	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0946c	48 6b c0 18	 imul	 rax, rax, 24
  09470	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09478	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0947c	83 f8 07	 cmp	 eax, 7
  0947f	0f 85 a9 00 00
	00		 jne	 $LN449@cckd_chkds

; 2629 :             {
; 2630 :                 cdevhdr.cdh_size += spctab[i].spc_siz;

  09485	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0948d	48 6b c0 18	 imul	 rax, rax, 24
  09491	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09499	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  0949d	8b 8c 24 ac 0b
	00 00		 mov	 ecx, DWORD PTR cdevhdr$[rsp+12]
  094a4	03 c8		 add	 ecx, eax
  094a6	8b c1		 mov	 eax, ecx
  094a8	89 84 24 ac 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+12], eax

; 2631 : 
; 2632 :                 if (spctab[i].spc_siz > cdevhdr.free_largest)

  094af	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  094b7	48 6b c0 18	 imul	 rax, rax, 24
  094bb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  094c3	8b 94 24 bc 0b
	00 00		 mov	 edx, DWORD PTR cdevhdr$[rsp+28]
  094ca	39 54 01 14	 cmp	 DWORD PTR [rcx+rax+20], edx
  094ce	76 1f		 jbe	 SHORT $LN451@cckd_chkds

; 2633 :                     cdevhdr.free_largest = spctab[i].spc_siz;

  094d0	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  094d8	48 6b c0 18	 imul	 rax, rax, 24
  094dc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  094e4	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  094e8	89 84 24 bc 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+28], eax
$LN451@cckd_chkds:

; 2634 : 
; 2635 :                 cdevhdr.free_total += spctab[i].spc_siz;

  094ef	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  094f7	48 6b c0 18	 imul	 rax, rax, 24
  094fb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09503	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  09507	8b 8c 24 b8 0b
	00 00		 mov	 ecx, DWORD PTR cdevhdr$[rsp+24]
  0950e	03 c8		 add	 ecx, eax
  09510	8b c1		 mov	 eax, ecx
  09512	89 84 24 b8 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+24], eax

; 2636 :                 cdevhdr.free_num++;

  09519	8b 84 24 c0 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+32]
  09520	ff c0		 inc	 eax
  09522	89 84 24 c0 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+32], eax

; 2637 :             }

  09529	e9 dc 00 00 00	 jmp	 $LN450@cckd_chkds
$LN449@cckd_chkds:

; 2638 :             else
; 2639 :             {
; 2640 :                 cdevhdr.cdh_size   += spctab[i].spc_siz;

  0952e	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09536	48 6b c0 18	 imul	 rax, rax, 24
  0953a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09542	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  09546	8b 8c 24 ac 0b
	00 00		 mov	 ecx, DWORD PTR cdevhdr$[rsp+12]
  0954d	03 c8		 add	 ecx, eax
  0954f	8b c1		 mov	 eax, ecx
  09551	89 84 24 ac 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+12], eax

; 2641 :                 cdevhdr.cdh_used   += spctab[i].spc_len;

  09558	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09560	48 6b c0 18	 imul	 rax, rax, 24
  09564	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0956c	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  09570	8b 8c 24 b0 0b
	00 00		 mov	 ecx, DWORD PTR cdevhdr$[rsp+16]
  09577	03 c8		 add	 ecx, eax
  09579	8b c1		 mov	 eax, ecx
  0957b	89 84 24 b0 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+16], eax

; 2642 :                 cdevhdr.free_total += spctab[i].spc_siz - spctab[i].spc_len;

  09582	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0958a	48 6b c0 18	 imul	 rax, rax, 24
  0958e	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  09596	48 6b c9 18	 imul	 rcx, rcx, 24
  0959a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  095a2	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  095aa	8b 4c 0f 10	 mov	 ecx, DWORD PTR [rdi+rcx+16]
  095ae	8b 44 02 14	 mov	 eax, DWORD PTR [rdx+rax+20]
  095b2	2b c1		 sub	 eax, ecx
  095b4	8b 8c 24 b8 0b
	00 00		 mov	 ecx, DWORD PTR cdevhdr$[rsp+24]
  095bb	03 c8		 add	 ecx, eax
  095bd	8b c1		 mov	 eax, ecx
  095bf	89 84 24 b8 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+24], eax

; 2643 :                 cdevhdr.free_imbed += spctab[i].spc_siz - spctab[i].spc_len;

  095c6	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  095ce	48 6b c0 18	 imul	 rax, rax, 24
  095d2	48 63 8c 24 90
	00 00 00	 movsxd	 rcx, DWORD PTR i$[rsp]
  095da	48 6b c9 18	 imul	 rcx, rcx, 24
  095de	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR spctab$[rsp]
  095e6	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  095ee	8b 4c 0f 10	 mov	 ecx, DWORD PTR [rdi+rcx+16]
  095f2	8b 44 02 14	 mov	 eax, DWORD PTR [rdx+rax+20]
  095f6	2b c1		 sub	 eax, ecx
  095f8	8b 8c 24 c4 0b
	00 00		 mov	 ecx, DWORD PTR cdevhdr$[rsp+36]
  095ff	03 c8		 add	 ecx, eax
  09601	8b c1		 mov	 eax, ecx
  09603	89 84 24 c4 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+36], eax
$LN450@cckd_chkds:

; 2644 :              }

  0960a	e9 24 fe ff ff	 jmp	 $LN120@cckd_chkds
$LN121@cckd_chkds:

; 2645 : 
; 2646 :         /*-----------------------------------------------------------
; 2647 :          * Phase 3 -- write the free space
; 2648 :          *-----------------------------------------------------------*/
; 2649 : 
; 2650 :         if (cdevhdr.free_num)

  0960f	83 bc 24 c0 0b
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+32], 0
  09617	0f 84 c9 05 00
	00		 je	 $LN452@cckd_chkds

; 2651 :         {
; 2652 :             /* size needed for new format free space */
; 2653 :             len = (cdevhdr.free_num+1) * CCKD_FREEBLK_SIZE;

  0961d	8b 84 24 c0 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+32]
  09624	ff c0		 inc	 eax
  09626	48 98		 cdqe
  09628	48 c1 e0 03	 shl	 rax, 3
  0962c	89 84 24 a4 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 2654 : 
; 2655 :             /* look for existing free space to fit new format free space */
; 2656 :             for (i=0, off=0; !off && spctab[i].spc_typ != SPCTAB_EOF; i++)

  09633	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  0963e	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR off$[rsp], 0
  0964a	eb 10		 jmp	 SHORT $LN125@cckd_chkds
$LN123@cckd_chkds:
  0964c	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  09653	ff c0		 inc	 eax
  09655	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN125@cckd_chkds:
  0965c	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR off$[rsp], 0
  09665	0f 85 80 00 00
	00		 jne	 $LN124@cckd_chkds
  0966b	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09673	48 6b c0 18	 imul	 rax, rax, 24
  09677	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0967f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  09683	83 f8 08	 cmp	 eax, 8
  09686	74 63		 je	 SHORT $LN124@cckd_chkds

; 2657 :                 if (spctab[i].spc_typ == SPCTAB_FREE && len <= (int)spctab[i].spc_siz)

  09688	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09690	48 6b c0 18	 imul	 rax, rax, 24
  09694	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0969c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  096a0	83 f8 07	 cmp	 eax, 7
  096a3	75 41		 jne	 SHORT $LN453@cckd_chkds
  096a5	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  096ad	48 6b c0 18	 imul	 rax, rax, 24
  096b1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  096b9	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  096bd	39 84 24 a4 00
	00 00		 cmp	 DWORD PTR len$[rsp], eax
  096c4	7f 20		 jg	 SHORT $LN453@cckd_chkds

; 2658 :                     off = (off_t)spctab[i].spc_off;

  096c6	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  096ce	48 6b c0 18	 imul	 rax, rax, 24
  096d2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  096da	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  096de	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax
$LN453@cckd_chkds:
  096e6	e9 61 ff ff ff	 jmp	 $LN123@cckd_chkds
$LN124@cckd_chkds:

; 2659 : 
; 2660 :             /* if no applicable space see if we can append to the file */
; 2661 :             if (!off && (cckd_maxsize - cdevhdr.cdh_size) >= (U64)len)

  096eb	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR off$[rsp], 0
  096f4	75 31		 jne	 SHORT $LN454@cckd_chkds
  096f6	8b 84 24 ac 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+12]
  096fd	48 8b 8c 24 80
	04 00 00	 mov	 rcx, QWORD PTR cckd_maxsize$[rsp]
  09705	48 2b c8	 sub	 rcx, rax
  09708	48 8b c1	 mov	 rax, rcx
  0970b	48 63 8c 24 a4
	00 00 00	 movsxd	 rcx, DWORD PTR len$[rsp]
  09713	48 3b c1	 cmp	 rax, rcx
  09716	72 0f		 jb	 SHORT $LN454@cckd_chkds

; 2662 :                 off = (off_t)cdevhdr.cdh_size;

  09718	8b 84 24 ac 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+12]
  0971f	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax
$LN454@cckd_chkds:

; 2663 : 
; 2664 :             /* get free space buffer */
; 2665 :             if (off && (fsp = malloc (len)) == NULL)

  09727	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR off$[rsp], 0
  09730	74 30		 je	 SHORT $LN455@cckd_chkds
  09732	48 63 84 24 a4
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  0973a	48 8b c8	 mov	 rcx, rax
  0973d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  09743	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR fsp$[rsp], rax
  0974b	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR fsp$[rsp], 0
  09754	75 0c		 jne	 SHORT $LN455@cckd_chkds

; 2666 :                 off = 0;

  09756	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR off$[rsp], 0
$LN455@cckd_chkds:

; 2667 : 
; 2668 :             if (off)

  09762	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR off$[rsp], 0
  0976b	0f 84 bb 01 00
	00		 je	 $LN456@cckd_chkds

; 2669 :             {
; 2670 :                 /* new format free space */
; 2671 :                 memcpy (fsp, "FREE_BLK", 8);

  09771	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR fsp$[rsp]
  09779	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR $SG170541
  09780	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2672 :                 for (i = 0, j = 1; spctab[i].spc_typ != SPCTAB_EOF; i++)

  09783	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  0978e	c7 84 24 b0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR j$[rsp], 1
  09799	eb 10		 jmp	 SHORT $LN128@cckd_chkds
$LN126@cckd_chkds:
  0979b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  097a2	ff c0		 inc	 eax
  097a4	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN128@cckd_chkds:
  097ab	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  097b3	48 6b c0 18	 imul	 rax, rax, 24
  097b7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  097bf	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  097c3	83 f8 08	 cmp	 eax, 8
  097c6	0f 84 89 00 00
	00		 je	 $LN127@cckd_chkds

; 2673 :                     if (spctab[i].spc_typ == SPCTAB_FREE)

  097cc	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  097d4	48 6b c0 18	 imul	 rax, rax, 24
  097d8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  097e0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  097e4	83 f8 07	 cmp	 eax, 7
  097e7	75 67		 jne	 SHORT $LN458@cckd_chkds

; 2674 :                     {
; 2675 :                         fsp[j].fb_offnxt = spctab[i].spc_off;

  097e9	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  097f1	48 6b c0 18	 imul	 rax, rax, 24
  097f5	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  097fd	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR fsp$[rsp]
  09805	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  0980d	8b 44 07 0c	 mov	 eax, DWORD PTR [rdi+rax+12]
  09811	89 04 ca	 mov	 DWORD PTR [rdx+rcx*8], eax

; 2676 :                         fsp[j++].fb_len = spctab[i].spc_siz;

  09814	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0981c	48 6b c0 18	 imul	 rax, rax, 24
  09820	48 63 8c 24 b0
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  09828	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR fsp$[rsp]
  09830	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR spctab$[rsp]
  09838	8b 44 07 14	 mov	 eax, DWORD PTR [rdi+rax+20]
  0983c	89 44 ca 04	 mov	 DWORD PTR [rdx+rcx*8+4], eax
  09840	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  09847	ff c0		 inc	 eax
  09849	89 84 24 b0 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN458@cckd_chkds:

; 2677 :                     }

  09850	e9 46 ff ff ff	 jmp	 $LN126@cckd_chkds
$LN127@cckd_chkds:

; 2678 : 
; 2679 :                 /* Write the free space */
; 2680 :                 if (lseek (fd, off, SEEK_SET) < 0)

  09855	45 33 c0	 xor	 r8d, r8d
  09858	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  09860	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09867	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0986d	48 85 c0	 test	 rax, rax
  09870	7d 05		 jge	 SHORT $LN459@cckd_chkds

; 2681 :                     goto cdsk_lseek_error;

  09872	e9 4d 0c 00 00	 jmp	 $cdsk_lseek_error$827
$LN459@cckd_chkds:

; 2682 :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  09877	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0987e	83 38 00	 cmp	 DWORD PTR [rax], 0
  09881	74 43		 je	 SHORT $LN460@cckd_chkds
  09883	41 b8 01 00 00
	00		 mov	 r8d, 1
  09889	33 d2		 xor	 edx, edx
  0988b	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09892	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09898	48 89 84 24 b8
	08 00 00	 mov	 QWORD PTR tv4962[rsp], rax
  098a0	b9 02 00 00 00	 mov	 ecx, 2
  098a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  098ab	48 8b 8c 24 b8
	08 00 00	 mov	 rcx, QWORD PTR tv4962[rsp]
  098b3	4c 8b c1	 mov	 r8, rcx
  098b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170545
  098bd	48 8b c8	 mov	 rcx, rax
  098c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN460@cckd_chkds:

; 2683 :                 if ((rc = write (fd, fsp, len)) != len)

  098c6	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  098ce	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR fsp$[rsp]
  098d6	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  098dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  098e3	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  098ea	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  098f1	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  098f8	74 05		 je	 SHORT $LN461@cckd_chkds

; 2684 :                     goto cdsk_write_error;

  098fa	e9 99 10 00 00	 jmp	 $cdsk_write_error$837
$LN461@cckd_chkds:

; 2685 :                 cdevhdr.free_off = (U32)off;

  098ff	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR off$[rsp]
  09906	89 84 24 b4 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+20], eax

; 2686 : 
; 2687 :                 free (fsp);

  0990d	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR fsp$[rsp]
  09915	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2688 :                 fsp = NULL;

  0991b	48 c7 84 24 20
	01 00 00 00 00
	00 00		 mov	 QWORD PTR fsp$[rsp], 0

; 2689 :             } /* new format free space */

  09927	e9 ba 02 00 00	 jmp	 $LN457@cckd_chkds
$LN456@cckd_chkds:

; 2690 :             else
; 2691 :             {
; 2692 :                 /* old format free space */
; 2693 :                 len = CCKD_FREEBLK_SIZE;

  0992c	c7 84 24 a4 00
	00 00 08 00 00
	00		 mov	 DWORD PTR len$[rsp], 8

; 2694 :                 for (i = 0; spctab[i].spc_typ != SPCTAB_FREE; i++);

  09937	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  09942	eb 10		 jmp	 SHORT $LN131@cckd_chkds
$LN129@cckd_chkds:
  09944	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0994b	ff c0		 inc	 eax
  0994d	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN131@cckd_chkds:
  09954	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0995c	48 6b c0 18	 imul	 rax, rax, 24
  09960	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09968	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0996c	83 f8 07	 cmp	 eax, 7
  0996f	74 02		 je	 SHORT $LN130@cckd_chkds
  09971	eb d1		 jmp	 SHORT $LN129@cckd_chkds
$LN130@cckd_chkds:

; 2695 :                 cdevhdr.free_off = spctab[i].spc_off;

  09973	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0997b	48 6b c0 18	 imul	 rax, rax, 24
  0997f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09987	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  0998b	89 84 24 b4 0b
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+20], eax

; 2696 :                 off = (off_t)spctab[i].spc_off;

  09992	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0999a	48 6b c0 18	 imul	 rax, rax, 24
  0999e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  099a6	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  099aa	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2697 :                 freeblk.fb_offnxt = 0;

  099b2	c7 84 24 40 01
	00 00 00 00 00
	00		 mov	 DWORD PTR freeblk$[rsp], 0

; 2698 :                 freeblk.fb_len = spctab[i].spc_siz;

  099bd	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  099c5	48 6b c0 18	 imul	 rax, rax, 24
  099c9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  099d1	8b 44 01 14	 mov	 eax, DWORD PTR [rcx+rax+20]
  099d5	89 84 24 44 01
	00 00		 mov	 DWORD PTR freeblk$[rsp+4], eax

; 2699 :                 for (i = i + 1; spctab[i].spc_typ != SPCTAB_EOF; i++)

  099dc	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  099e3	ff c0		 inc	 eax
  099e5	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
  099ec	eb 10		 jmp	 SHORT $LN134@cckd_chkds
$LN132@cckd_chkds:
  099ee	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  099f5	ff c0		 inc	 eax
  099f7	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN134@cckd_chkds:
  099fe	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09a06	48 6b c0 18	 imul	 rax, rax, 24
  09a0a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09a12	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  09a16	83 f8 08	 cmp	 eax, 8
  09a19	0f 84 2b 01 00
	00		 je	 $LN133@cckd_chkds

; 2700 :                     if (spctab[i].spc_typ == SPCTAB_FREE)

  09a1f	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09a27	48 6b c0 18	 imul	 rax, rax, 24
  09a2b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09a33	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  09a37	83 f8 07	 cmp	 eax, 7
  09a3a	0f 85 05 01 00
	00		 jne	 $LN462@cckd_chkds

; 2701 :                     {
; 2702 :                         freeblk.fb_offnxt = spctab[i].spc_off;

  09a40	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09a48	48 6b c0 18	 imul	 rax, rax, 24
  09a4c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09a54	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  09a58	89 84 24 40 01
	00 00		 mov	 DWORD PTR freeblk$[rsp], eax

; 2703 :                         if (lseek (fd, off, SEEK_SET) < 0)

  09a5f	45 33 c0	 xor	 r8d, r8d
  09a62	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  09a6a	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09a71	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09a77	48 85 c0	 test	 rax, rax
  09a7a	7d 05		 jge	 SHORT $LN463@cckd_chkds

; 2704 :                             goto cdsk_lseek_error;

  09a7c	e9 43 0a 00 00	 jmp	 $cdsk_lseek_error$827
$LN463@cckd_chkds:

; 2705 :                         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  09a81	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  09a88	83 38 00	 cmp	 DWORD PTR [rax], 0
  09a8b	74 43		 je	 SHORT $LN464@cckd_chkds
  09a8d	41 b8 01 00 00
	00		 mov	 r8d, 1
  09a93	33 d2		 xor	 edx, edx
  09a95	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09a9c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09aa2	48 89 84 24 c0
	08 00 00	 mov	 QWORD PTR tv5021[rsp], rax
  09aaa	b9 02 00 00 00	 mov	 ecx, 2
  09aaf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09ab5	48 8b 8c 24 c0
	08 00 00	 mov	 rcx, QWORD PTR tv5021[rsp]
  09abd	4c 8b c1	 mov	 r8, rcx
  09ac0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170550
  09ac7	48 8b c8	 mov	 rcx, rax
  09aca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN464@cckd_chkds:

; 2706 :                         if (write (fd, &freeblk, len) != len)

  09ad0	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  09ad8	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  09ae0	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09ae7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  09aed	3b 84 24 a4 00
	00 00		 cmp	 eax, DWORD PTR len$[rsp]
  09af4	74 05		 je	 SHORT $LN465@cckd_chkds

; 2707 :                             goto cdsk_write_error;

  09af6	e9 9d 0e 00 00	 jmp	 $cdsk_write_error$837
$LN465@cckd_chkds:

; 2708 :                         off = (off_t)spctab[i].spc_off;

  09afb	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09b03	48 6b c0 18	 imul	 rax, rax, 24
  09b07	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09b0f	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  09b13	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2709 :                         freeblk.fb_offnxt = 0;

  09b1b	c7 84 24 40 01
	00 00 00 00 00
	00		 mov	 DWORD PTR freeblk$[rsp], 0

; 2710 :                         freeblk.fb_len = spctab[i].spc_len;

  09b26	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  09b2e	48 6b c0 18	 imul	 rax, rax, 24
  09b32	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  09b3a	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  09b3e	89 84 24 44 01
	00 00		 mov	 DWORD PTR freeblk$[rsp+4], eax
$LN462@cckd_chkds:

; 2711 :                     }

  09b45	e9 a4 fe ff ff	 jmp	 $LN132@cckd_chkds
$LN133@cckd_chkds:

; 2712 :                 if (lseek (fd, off, SEEK_SET) < 0)

  09b4a	45 33 c0	 xor	 r8d, r8d
  09b4d	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  09b55	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09b5c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09b62	48 85 c0	 test	 rax, rax
  09b65	7d 05		 jge	 SHORT $LN466@cckd_chkds

; 2713 :                     goto cdsk_lseek_error;

  09b67	e9 58 09 00 00	 jmp	 $cdsk_lseek_error$827
$LN466@cckd_chkds:

; 2714 :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  09b6c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  09b73	83 38 00	 cmp	 DWORD PTR [rax], 0
  09b76	74 43		 je	 SHORT $LN467@cckd_chkds
  09b78	41 b8 01 00 00
	00		 mov	 r8d, 1
  09b7e	33 d2		 xor	 edx, edx
  09b80	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09b87	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09b8d	48 89 84 24 c8
	08 00 00	 mov	 QWORD PTR tv5050[rsp], rax
  09b95	b9 02 00 00 00	 mov	 ecx, 2
  09b9a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09ba0	48 8b 8c 24 c8
	08 00 00	 mov	 rcx, QWORD PTR tv5050[rsp]
  09ba8	4c 8b c1	 mov	 r8, rcx
  09bab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170554
  09bb2	48 8b c8	 mov	 rcx, rax
  09bb5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN467@cckd_chkds:

; 2715 :                 if (write (fd, &freeblk, len) != len)

  09bbb	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  09bc3	48 8d 94 24 40
	01 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  09bcb	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09bd2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  09bd8	3b 84 24 a4 00
	00 00		 cmp	 eax, DWORD PTR len$[rsp]
  09bdf	74 05		 je	 SHORT $LN468@cckd_chkds

; 2716 :                     goto cdsk_write_error;

  09be1	e9 b2 0d 00 00	 jmp	 $cdsk_write_error$837
$LN468@cckd_chkds:
$LN457@cckd_chkds:
$LN452@cckd_chkds:

; 2717 :             } /* old format free space */
; 2718 :         } /* if (cdevhdr.free_num) */
; 2719 : 
; 2720 :         /* Write cdevhdr and l1 table */
; 2721 :         off = CCKD_DEVHDR_POS;

  09be6	48 c7 84 24 c0
	00 00 00 00 02
	00 00		 mov	 QWORD PTR off$[rsp], 512 ; 00000200H

; 2722 :         if (lseek (fd, off, SEEK_SET) < 0)

  09bf2	45 33 c0	 xor	 r8d, r8d
  09bf5	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  09bfd	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09c04	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09c0a	48 85 c0	 test	 rax, rax
  09c0d	7d 05		 jge	 SHORT $LN469@cckd_chkds

; 2723 :             goto cdsk_lseek_error;

  09c0f	e9 b0 08 00 00	 jmp	 $cdsk_lseek_error$827
$LN469@cckd_chkds:

; 2724 :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  09c14	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  09c1b	83 38 00	 cmp	 DWORD PTR [rax], 0
  09c1e	74 43		 je	 SHORT $LN470@cckd_chkds
  09c20	41 b8 01 00 00
	00		 mov	 r8d, 1
  09c26	33 d2		 xor	 edx, edx
  09c28	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09c2f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09c35	48 89 84 24 d0
	08 00 00	 mov	 QWORD PTR tv5070[rsp], rax
  09c3d	b9 02 00 00 00	 mov	 ecx, 2
  09c42	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09c48	48 8b 8c 24 d0
	08 00 00	 mov	 rcx, QWORD PTR tv5070[rsp]
  09c50	4c 8b c1	 mov	 r8, rcx
  09c53	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170558
  09c5a	48 8b c8	 mov	 rcx, rax
  09c5d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN470@cckd_chkds:

; 2725 :         len = CCKD_DEVHDR_SIZE;

  09c63	c7 84 24 a4 00
	00 00 00 02 00
	00		 mov	 DWORD PTR len$[rsp], 512 ; 00000200H

; 2726 :         if (write (fd, &cdevhdr, len) != len)

  09c6e	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  09c76	48 8d 94 24 a0
	0b 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  09c7e	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09c85	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  09c8b	3b 84 24 a4 00
	00 00		 cmp	 eax, DWORD PTR len$[rsp]
  09c92	74 05		 je	 SHORT $LN471@cckd_chkds

; 2727 :             goto cdsk_write_error;

  09c94	e9 ff 0c 00 00	 jmp	 $cdsk_write_error$837
$LN471@cckd_chkds:

; 2728 : 
; 2729 :         off = CCKD_L1TAB_POS;

  09c99	48 c7 84 24 c0
	00 00 00 00 04
	00 00		 mov	 QWORD PTR off$[rsp], 1024 ; 00000400H

; 2730 :         if (lseek (fd, off, SEEK_SET) < 0)

  09ca5	45 33 c0	 xor	 r8d, r8d
  09ca8	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  09cb0	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09cb7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09cbd	48 85 c0	 test	 rax, rax
  09cc0	7d 05		 jge	 SHORT $LN472@cckd_chkds

; 2731 :             goto cdsk_lseek_error;

  09cc2	e9 fd 07 00 00	 jmp	 $cdsk_lseek_error$827
$LN472@cckd_chkds:

; 2732 :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  09cc7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  09cce	83 38 00	 cmp	 DWORD PTR [rax], 0
  09cd1	74 43		 je	 SHORT $LN473@cckd_chkds
  09cd3	41 b8 01 00 00
	00		 mov	 r8d, 1
  09cd9	33 d2		 xor	 edx, edx
  09cdb	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09ce2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  09ce8	48 89 84 24 d8
	08 00 00	 mov	 QWORD PTR tv5090[rsp], rax
  09cf0	b9 02 00 00 00	 mov	 ecx, 2
  09cf5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09cfb	48 8b 8c 24 d8
	08 00 00	 mov	 rcx, QWORD PTR tv5090[rsp]
  09d03	4c 8b c1	 mov	 r8, rcx
  09d06	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170562
  09d0d	48 8b c8	 mov	 rcx, rax
  09d10	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN473@cckd_chkds:

; 2733 :         len = l1size;

  09d16	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR l1size$[rsp]
  09d1d	89 84 24 a4 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 2734 :         if (write (fd, l1, len) != len)

  09d24	44 8b 84 24 a4
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  09d2c	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  09d34	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09d3b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  09d41	3b 84 24 a4 00
	00 00		 cmp	 eax, DWORD PTR len$[rsp]
  09d48	74 05		 je	 SHORT $LN474@cckd_chkds

; 2735 :             goto cdsk_write_error;

  09d4a	e9 49 0c 00 00	 jmp	 $cdsk_write_error$837
$LN474@cckd_chkds:

; 2736 : 
; 2737 :         /* Truncate the file */
; 2738 :         off = (off_t)cdevhdr.cdh_size;

  09d4f	8b 84 24 ac 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+12]
  09d56	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 2739 :         if (cdevhdr.free_off == cdevhdr.cdh_size)

  09d5e	8b 84 24 ac 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+12]
  09d65	39 84 24 b4 0b
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+20], eax
  09d6c	75 1f		 jne	 SHORT $LN475@cckd_chkds

; 2740 :             off += (cdevhdr.free_num+1) * CCKD_FREEBLK_SIZE;

  09d6e	8b 84 24 c0 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+32]
  09d75	ff c0		 inc	 eax
  09d77	48 98		 cdqe
  09d79	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  09d81	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  09d85	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR off$[rsp], rax
$LN475@cckd_chkds:

; 2741 :         rc = ftruncate (fd, off);

  09d8d	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  09d95	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  09d9c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__chsize_s
  09da2	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 2742 : 
; 2743 :         if(dev->batch)

  09da9	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09db1	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  09db7	c1 e8 0a	 shr	 eax, 10
  09dba	83 e0 01	 and	 eax, 1
  09dbd	85 c0		 test	 eax, eax
  09dbf	0f 84 dd 00 00
	00		 je	 $LN476@cckd_chkds

; 2744 :             FWRMSG( stdout, HHC00377, "I", LCSS_DEVNUM, dev->filename);

  09dc5	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  09dce	74 15		 je	 SHORT $LN757@cckd_chkds
  09dd0	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09dd8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  09ddc	89 84 24 58 03
	00 00		 mov	 DWORD PTR tv5121[rsp], eax
  09de3	eb 0b		 jmp	 SHORT $LN758@cckd_chkds
$LN757@cckd_chkds:
  09de5	c7 84 24 58 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5121[rsp], 0
$LN758@cckd_chkds:
  09df0	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  09df9	74 17		 je	 SHORT $LN759@cckd_chkds
  09dfb	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09e03	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  09e07	d1 f8		 sar	 eax, 1
  09e09	89 84 24 5c 03
	00 00		 mov	 DWORD PTR tv5127[rsp], eax
  09e10	eb 0b		 jmp	 SHORT $LN760@cckd_chkds
$LN759@cckd_chkds:
  09e12	c7 84 24 5c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5127[rsp], 0
$LN760@cckd_chkds:
  09e1d	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09e25	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  09e2b	48 89 84 24 e0
	08 00 00	 mov	 QWORD PTR tv5116[rsp], rax
  09e33	b9 01 00 00 00	 mov	 ecx, 1
  09e38	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09e3e	48 8b 8c 24 e0
	08 00 00	 mov	 rcx, QWORD PTR tv5116[rsp]
  09e46	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  09e4b	8b 8c 24 58 03
	00 00		 mov	 ecx, DWORD PTR tv5121[rsp]
  09e52	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  09e56	8b 8c 24 5c 03
	00 00		 mov	 ecx, DWORD PTR tv5127[rsp]
  09e5d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  09e61	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170567
  09e68	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  09e6d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170568
  09e74	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  09e79	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  09e7e	41 b9 03 00 00
	00		 mov	 r9d, 3
  09e84	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170569
  09e8b	ba b8 0a 00 00	 mov	 edx, 2744		; 00000ab8H
  09e90	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170570
  09e97	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  09e9d	e9 d8 00 00 00	 jmp	 $LN477@cckd_chkds
$LN476@cckd_chkds:

; 2745 :         else
; 2746 :             WRMSG( HHC00377, "I", LCSS_DEVNUM, dev->filename);

  09ea2	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  09eab	74 15		 je	 SHORT $LN761@cckd_chkds
  09ead	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09eb5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  09eb9	89 84 24 60 03
	00 00		 mov	 DWORD PTR tv5143[rsp], eax
  09ec0	eb 0b		 jmp	 SHORT $LN762@cckd_chkds
$LN761@cckd_chkds:
  09ec2	c7 84 24 60 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5143[rsp], 0
$LN762@cckd_chkds:
  09ecd	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  09ed6	74 17		 je	 SHORT $LN763@cckd_chkds
  09ed8	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09ee0	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  09ee4	d1 f8		 sar	 eax, 1
  09ee6	89 84 24 64 03
	00 00		 mov	 DWORD PTR tv5149[rsp], eax
  09eed	eb 0b		 jmp	 SHORT $LN764@cckd_chkds
$LN763@cckd_chkds:
  09eef	c7 84 24 64 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5149[rsp], 0
$LN764@cckd_chkds:
  09efa	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  09f02	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  09f08	48 89 84 24 e8
	08 00 00	 mov	 QWORD PTR tv5138[rsp], rax
  09f10	b9 01 00 00 00	 mov	 ecx, 1
  09f15	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  09f1b	48 8b 8c 24 e8
	08 00 00	 mov	 rcx, QWORD PTR tv5138[rsp]
  09f23	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  09f28	8b 8c 24 60 03
	00 00		 mov	 ecx, DWORD PTR tv5143[rsp]
  09f2f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  09f33	8b 8c 24 64 03
	00 00		 mov	 ecx, DWORD PTR tv5149[rsp]
  09f3a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  09f3e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170571
  09f45	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  09f4a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170572
  09f51	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  09f56	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  09f5b	41 b9 03 00 00
	00		 mov	 r9d, 3
  09f61	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170573
  09f68	ba ba 0a 00 00	 mov	 edx, 2746		; 00000abaH
  09f6d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170574
  09f74	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN477@cckd_chkds:
$LN430@cckd_chkds:
$LN427@cckd_chkds:
$cdsk_return_ok$831:

; 2747 : 
; 2748 :     } /* if (fsperr) */
; 2749 : 
; 2750 :     /*---------------------------------------------------------------
; 2751 :      * Return
; 2752 :      *---------------------------------------------------------------*/
; 2753 : 
; 2754 : cdsk_return_ok:
; 2755 : 
; 2756 :     rc = recovery ? 2 : fsperr ? 1 : 0;

  09f7a	83 bc 24 0c 01
	00 00 00	 cmp	 DWORD PTR recovery$[rsp], 0
  09f82	74 0d		 je	 SHORT $LN767@cckd_chkds
  09f84	c7 84 24 6c 03
	00 00 02 00 00
	00		 mov	 DWORD PTR tv5163[rsp], 2
  09f8f	eb 30		 jmp	 SHORT $LN768@cckd_chkds
$LN767@cckd_chkds:
  09f91	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR fsperr$[rsp], 0
  09f99	74 0d		 je	 SHORT $LN765@cckd_chkds
  09f9b	c7 84 24 68 03
	00 00 01 00 00
	00		 mov	 DWORD PTR tv5161[rsp], 1
  09fa6	eb 0b		 jmp	 SHORT $LN766@cckd_chkds
$LN765@cckd_chkds:
  09fa8	c7 84 24 68 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5161[rsp], 0
$LN766@cckd_chkds:
  09fb3	8b 84 24 68 03
	00 00		 mov	 eax, DWORD PTR tv5161[rsp]
  09fba	89 84 24 6c 03
	00 00		 mov	 DWORD PTR tv5163[rsp], eax
$LN768@cckd_chkds:
  09fc1	8b 84 24 6c 03
	00 00		 mov	 eax, DWORD PTR tv5163[rsp]
  09fc8	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 2757 : 
; 2758 :     if (!ro && (cdevhdr.cdh_opts & (CCKD_OPT_OPENRW | CCKD_OPT_OPENED | CCKD_OPT_SPERRS)))

  09fcf	83 bc 24 54 01
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  09fd7	0f 85 60 01 00
	00		 jne	 $LN478@cckd_chkds
  09fdd	0f b6 84 24 a3
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  09fe5	25 e0 00 00 00	 and	 eax, 224		; 000000e0H
  09fea	85 c0		 test	 eax, eax
  09fec	0f 84 4b 01 00
	00		 je	 $LN478@cckd_chkds

; 2759 :     {
; 2760 :         cdevhdr.cdh_opts &= ~(CCKD_OPT_OPENED | CCKD_OPT_SPERRS);

  09ff2	0f b6 84 24 a3
	0b 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  09ffa	25 5f ff ff ff	 and	 eax, -161		; ffffffffffffff5fH
  09fff	88 84 24 a3 0b
	00 00		 mov	 BYTE PTR cdevhdr$[rsp+3], al

; 2761 : 
; 2762 :         /* Set version.release.modlvl */
; 2763 :         cdevhdr.cdh_vrm[0] = CCKD_VERSION;

  0a006	b8 01 00 00 00	 mov	 eax, 1
  0a00b	48 6b c0 00	 imul	 rax, rax, 0
  0a00f	c6 84 04 a0 0b
	00 00 00	 mov	 BYTE PTR cdevhdr$[rsp+rax], 0

; 2764 :         cdevhdr.cdh_vrm[1] = CCKD_RELEASE;

  0a017	b8 01 00 00 00	 mov	 eax, 1
  0a01c	48 6b c0 01	 imul	 rax, rax, 1
  0a020	c6 84 04 a0 0b
	00 00 03	 mov	 BYTE PTR cdevhdr$[rsp+rax], 3

; 2765 :         cdevhdr.cdh_vrm[2] = CCKD_MODLVL;

  0a028	b8 01 00 00 00	 mov	 eax, 1
  0a02d	48 6b c0 02	 imul	 rax, rax, 2
  0a031	c6 84 04 a0 0b
	00 00 01	 mov	 BYTE PTR cdevhdr$[rsp+rax], 1

; 2766 : 
; 2767 :         off = CCKD_DEVHDR_POS;

  0a039	48 c7 84 24 c0
	00 00 00 00 02
	00 00		 mov	 QWORD PTR off$[rsp], 512 ; 00000200H

; 2768 :         if (lseek (fd, CCKD_DEVHDR_POS, SEEK_SET) >= 0)

  0a045	45 33 c0	 xor	 r8d, r8d
  0a048	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  0a04d	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0a054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0a05a	48 85 c0	 test	 rax, rax
  0a05d	0f 8c 8b 00 00
	00		 jl	 $LN479@cckd_chkds
$LN137@cckd_chkds:

; 2769 :             VERIFY(CCKD_DEVHDR_SIZE == write (fd, &cdevhdr, CCKD_DEVHDR_SIZE));

  0a063	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  0a069	48 8d 94 24 a0
	0b 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  0a071	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0a078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0a07e	48 98		 cdqe
  0a080	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  0a086	74 5c		 je	 SHORT $LN480@cckd_chkds
$LN140@cckd_chkds:
  0a088	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG170578
  0a08f	41 b8 d1 0a 00
	00		 mov	 r8d, 2769		; 00000ad1H
  0a095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170579
  0a09c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170580
  0a0a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0a0a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0a0af	85 c0		 test	 eax, eax
  0a0b1	74 20		 je	 SHORT $LN481@cckd_chkds
  0a0b3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG170582
  0a0ba	41 b8 d1 0a 00
	00		 mov	 r8d, 2769		; 00000ad1H
  0a0c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170583
  0a0c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170584
  0a0ce	e8 00 00 00 00	 call	 DebuggerTrace
$LN481@cckd_chkds:
  0a0d3	33 c0		 xor	 eax, eax
  0a0d5	85 c0		 test	 eax, eax
  0a0d7	75 af		 jne	 SHORT $LN140@cckd_chkds
  0a0d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0a0df	85 c0		 test	 eax, eax
  0a0e1	74 01		 je	 SHORT $LN482@cckd_chkds
  0a0e3	cc		 int	 3
$LN482@cckd_chkds:
$LN480@cckd_chkds:
  0a0e4	33 c0		 xor	 eax, eax
  0a0e6	85 c0		 test	 eax, eax
  0a0e8	0f 85 75 ff ff
	ff		 jne	 $LN137@cckd_chkds
$LN479@cckd_chkds:

; 2770 :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0a0ee	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0a0f5	83 38 00	 cmp	 DWORD PTR [rax], 0
  0a0f8	74 43		 je	 SHORT $LN483@cckd_chkds
  0a0fa	41 b8 01 00 00
	00		 mov	 r8d, 1
  0a100	33 d2		 xor	 edx, edx
  0a102	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0a109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0a10f	48 89 84 24 f0
	08 00 00	 mov	 QWORD PTR tv5204[rsp], rax
  0a117	b9 02 00 00 00	 mov	 ecx, 2
  0a11c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a122	48 8b 8c 24 f0
	08 00 00	 mov	 rcx, QWORD PTR tv5204[rsp]
  0a12a	4c 8b c1	 mov	 r8, rcx
  0a12d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170587
  0a134	48 8b c8	 mov	 rcx, rax
  0a137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN483@cckd_chkds:
$LN478@cckd_chkds:
$cdsk_return$839:

; 2771 :     }
; 2772 : 
; 2773 : cdsk_return:
; 2774 : 
; 2775 :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0a13d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0a144	83 38 00	 cmp	 DWORD PTR [rax], 0
  0a147	74 43		 je	 SHORT $LN484@cckd_chkds
  0a149	41 b8 01 00 00
	00		 mov	 r8d, 1
  0a14f	33 d2		 xor	 edx, edx
  0a151	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0a158	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0a15e	48 89 84 24 f8
	08 00 00	 mov	 QWORD PTR tv5214[rsp], rax
  0a166	b9 02 00 00 00	 mov	 ecx, 2
  0a16b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a171	48 8b 8c 24 f8
	08 00 00	 mov	 rcx, QWORD PTR tv5214[rsp]
  0a179	4c 8b c1	 mov	 r8, rcx
  0a17c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170589
  0a183	48 8b c8	 mov	 rcx, rax
  0a186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN484@cckd_chkds:

; 2776 : 
; 2777 :     /* free all space */
; 2778 :     if (l1)     free (l1);

  0a18c	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR l1$[rsp], 0
  0a195	74 0e		 je	 SHORT $LN485@cckd_chkds
  0a197	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  0a19f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN485@cckd_chkds:

; 2779 :     if (spctab) free (spctab);

  0a1a5	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR spctab$[rsp], 0
  0a1ae	74 0e		 je	 SHORT $LN486@cckd_chkds
  0a1b0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR spctab$[rsp]
  0a1b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN486@cckd_chkds:

; 2780 :     if (l2errs) free (l2errs);

  0a1be	48 83 bc 24 68
	01 00 00 00	 cmp	 QWORD PTR l2errs$[rsp], 0
  0a1c7	74 0e		 je	 SHORT $LN487@cckd_chkds
  0a1c9	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR l2errs$[rsp]
  0a1d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN487@cckd_chkds:

; 2781 :     if (rcvtab) free (rcvtab);

  0a1d7	48 83 bc 24 00
	01 00 00 00	 cmp	 QWORD PTR rcvtab$[rsp], 0
  0a1e0	74 0e		 je	 SHORT $LN488@cckd_chkds
  0a1e2	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR rcvtab$[rsp]
  0a1ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN488@cckd_chkds:

; 2782 :     if (fsp)    free (fsp);

  0a1f0	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR fsp$[rsp], 0
  0a1f9	74 0e		 je	 SHORT $LN489@cckd_chkds
  0a1fb	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR fsp$[rsp]
  0a203	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN489@cckd_chkds:

; 2783 :     if (l2)

  0a209	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR l2$[rsp], 0
  0a212	74 6e		 je	 SHORT $LN490@cckd_chkds

; 2784 :     {
; 2785 :         for (i = 0; i < cdevhdr.num_L1tab; i++)

  0a214	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  0a21f	eb 10		 jmp	 SHORT $LN143@cckd_chkds
$LN141@cckd_chkds:
  0a221	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  0a228	ff c0		 inc	 eax
  0a22a	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN143@cckd_chkds:
  0a231	8b 84 24 a4 0b
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  0a238	39 84 24 90 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  0a23f	7d 33		 jge	 SHORT $LN142@cckd_chkds

; 2786 :             if (l2[i]) free (l2[i]);

  0a241	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0a249	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  0a251	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0a256	74 1a		 je	 SHORT $LN491@cckd_chkds
  0a258	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  0a260	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  0a268	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0a26c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN491@cckd_chkds:
  0a272	eb ad		 jmp	 SHORT $LN141@cckd_chkds
$LN142@cckd_chkds:

; 2787 :         free (l2);

  0a274	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  0a27c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN490@cckd_chkds:

; 2788 :     }
; 2789 : 
; 2790 :     return rc;

  0a282	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR rc$[rsp]
  0a289	e9 57 0e 00 00	 jmp	 $LN1@cckd_chkds
$cdsk_fstat_error$826:

; 2791 : 
; 2792 :     /*---------------------------------------------------------------
; 2793 :      * Error exits
; 2794 :      *---------------------------------------------------------------*/
; 2795 : 
; 2796 : cdsk_fstat_error:
; 2797 :     if(dev->batch)

  0a28e	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a296	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0a29c	c1 e8 0a	 shr	 eax, 10
  0a29f	83 e0 01	 and	 eax, 1
  0a2a2	85 c0		 test	 eax, eax
  0a2a4	0f 84 0d 01 00
	00		 je	 $LN492@cckd_chkds

; 2798 :         FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0a2aa	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a2b3	74 15		 je	 SHORT $LN769@cckd_chkds
  0a2b5	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a2bd	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a2c1	89 84 24 70 03
	00 00		 mov	 DWORD PTR tv5258[rsp], eax
  0a2c8	eb 0b		 jmp	 SHORT $LN770@cckd_chkds
$LN769@cckd_chkds:
  0a2ca	c7 84 24 70 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5258[rsp], 0
$LN770@cckd_chkds:
  0a2d5	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a2de	74 17		 je	 SHORT $LN771@cckd_chkds
  0a2e0	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a2e8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0a2ec	d1 f8		 sar	 eax, 1
  0a2ee	89 84 24 74 03
	00 00		 mov	 DWORD PTR tv5264[rsp], eax
  0a2f5	eb 0b		 jmp	 SHORT $LN772@cckd_chkds
$LN771@cckd_chkds:
  0a2f7	c7 84 24 74 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5264[rsp], 0
$LN772@cckd_chkds:
  0a302	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a308	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a30a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a310	48 89 84 24 00
	09 00 00	 mov	 QWORD PTR tv5248[rsp], rax
  0a318	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0a320	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0a327	48 89 8c 24 08
	09 00 00	 mov	 QWORD PTR tv5253[rsp], rcx
  0a32f	b9 01 00 00 00	 mov	 ecx, 1
  0a334	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a33a	48 8b 8c 24 00
	09 00 00	 mov	 rcx, QWORD PTR tv5248[rsp]
  0a342	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0a347	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170599
  0a34e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0a353	48 8b 8c 24 08
	09 00 00	 mov	 rcx, QWORD PTR tv5253[rsp]
  0a35b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0a360	8b 8c 24 70 03
	00 00		 mov	 ecx, DWORD PTR tv5258[rsp]
  0a367	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0a36b	8b 8c 24 74 03
	00 00		 mov	 ecx, DWORD PTR tv5264[rsp]
  0a372	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0a376	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170600
  0a37d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0a382	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170601
  0a389	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0a38e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0a393	41 b9 03 00 00
	00		 mov	 r9d, 3
  0a399	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170602
  0a3a0	ba ef 0a 00 00	 mov	 edx, 2799		; 00000aefH
  0a3a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170603
  0a3ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0a3b2	e9 08 01 00 00	 jmp	 $LN493@cckd_chkds
$LN492@cckd_chkds:

; 2799 :                 "fstat()", strerror( errno ));
; 2800 :     else
; 2801 :         WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0a3b7	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a3c0	74 15		 je	 SHORT $LN773@cckd_chkds
  0a3c2	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a3ca	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a3ce	89 84 24 78 03
	00 00		 mov	 DWORD PTR tv5285[rsp], eax
  0a3d5	eb 0b		 jmp	 SHORT $LN774@cckd_chkds
$LN773@cckd_chkds:
  0a3d7	c7 84 24 78 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5285[rsp], 0
$LN774@cckd_chkds:
  0a3e2	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a3eb	74 17		 je	 SHORT $LN775@cckd_chkds
  0a3ed	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a3f5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0a3f9	d1 f8		 sar	 eax, 1
  0a3fb	89 84 24 7c 03
	00 00		 mov	 DWORD PTR tv5291[rsp], eax
  0a402	eb 0b		 jmp	 SHORT $LN776@cckd_chkds
$LN775@cckd_chkds:
  0a404	c7 84 24 7c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5291[rsp], 0
$LN776@cckd_chkds:
  0a40f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a415	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a417	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a41d	48 89 84 24 10
	09 00 00	 mov	 QWORD PTR tv5275[rsp], rax
  0a425	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0a42d	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0a434	48 89 8c 24 18
	09 00 00	 mov	 QWORD PTR tv5280[rsp], rcx
  0a43c	b9 01 00 00 00	 mov	 ecx, 1
  0a441	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a447	48 8b 8c 24 10
	09 00 00	 mov	 rcx, QWORD PTR tv5275[rsp]
  0a44f	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0a454	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170604
  0a45b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0a460	48 8b 8c 24 18
	09 00 00	 mov	 rcx, QWORD PTR tv5280[rsp]
  0a468	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0a46d	8b 8c 24 78 03
	00 00		 mov	 ecx, DWORD PTR tv5285[rsp]
  0a474	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0a478	8b 8c 24 7c 03
	00 00		 mov	 ecx, DWORD PTR tv5291[rsp]
  0a47f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0a483	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170605
  0a48a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0a48f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170606
  0a496	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0a49b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0a4a0	41 b9 03 00 00
	00		 mov	 r9d, 3
  0a4a6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170607
  0a4ad	ba f2 0a 00 00	 mov	 edx, 2802		; 00000af2H
  0a4b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170608
  0a4b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN493@cckd_chkds:

; 2802 :               "fstat()", strerror( errno ));
; 2803 :     goto cdsk_error;

  0a4bf	e9 11 0c 00 00	 jmp	 $cdsk_error$829
$cdsk_lseek_error$827:

; 2804 : 
; 2805 : cdsk_lseek_error:
; 2806 :     if(dev->batch)

  0a4c4	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a4cc	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0a4d2	c1 e8 0a	 shr	 eax, 10
  0a4d5	83 e0 01	 and	 eax, 1
  0a4d8	85 c0		 test	 eax, eax
  0a4da	0f 84 1a 01 00
	00		 je	 $LN494@cckd_chkds

; 2807 :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0a4e0	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a4e9	74 15		 je	 SHORT $LN777@cckd_chkds
  0a4eb	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a4f3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a4f7	89 84 24 80 03
	00 00		 mov	 DWORD PTR tv5349[rsp], eax
  0a4fe	eb 0b		 jmp	 SHORT $LN778@cckd_chkds
$LN777@cckd_chkds:
  0a500	c7 84 24 80 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5349[rsp], 0
$LN778@cckd_chkds:
  0a50b	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a514	74 17		 je	 SHORT $LN779@cckd_chkds
  0a516	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a51e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0a522	d1 f8		 sar	 eax, 1
  0a524	89 84 24 84 03
	00 00		 mov	 DWORD PTR tv5355[rsp], eax
  0a52b	eb 0b		 jmp	 SHORT $LN780@cckd_chkds
$LN779@cckd_chkds:
  0a52d	c7 84 24 84 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5355[rsp], 0
$LN780@cckd_chkds:
  0a538	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a53e	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a540	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a546	48 89 84 24 20
	09 00 00	 mov	 QWORD PTR tv5306[rsp], rax
  0a54e	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0a556	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0a55d	48 89 8c 24 28
	09 00 00	 mov	 QWORD PTR tv5344[rsp], rcx
  0a565	b9 01 00 00 00	 mov	 ecx, 1
  0a56a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a570	48 8b 8c 24 20
	09 00 00	 mov	 rcx, QWORD PTR tv5306[rsp]
  0a578	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0a57d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0a585	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0a58a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170611
  0a591	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0a596	48 8b 8c 24 28
	09 00 00	 mov	 rcx, QWORD PTR tv5344[rsp]
  0a59e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0a5a3	8b 8c 24 80 03
	00 00		 mov	 ecx, DWORD PTR tv5349[rsp]
  0a5aa	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0a5ae	8b 8c 24 84 03
	00 00		 mov	 ecx, DWORD PTR tv5355[rsp]
  0a5b5	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0a5b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170612
  0a5c0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0a5c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170613
  0a5cc	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0a5d1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0a5d6	41 b9 03 00 00
	00		 mov	 r9d, 3
  0a5dc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170614
  0a5e3	ba f8 0a 00 00	 mov	 edx, 2808		; 00000af8H
  0a5e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170615
  0a5ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0a5f5	e9 15 01 00 00	 jmp	 $LN495@cckd_chkds
$LN494@cckd_chkds:

; 2808 :                 "lseek()", off, strerror( errno ));
; 2809 :     else
; 2810 :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0a5fa	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a603	74 15		 je	 SHORT $LN781@cckd_chkds
  0a605	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a60d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a611	89 84 24 88 03
	00 00		 mov	 DWORD PTR tv5377[rsp], eax
  0a618	eb 0b		 jmp	 SHORT $LN782@cckd_chkds
$LN781@cckd_chkds:
  0a61a	c7 84 24 88 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5377[rsp], 0
$LN782@cckd_chkds:
  0a625	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a62e	74 17		 je	 SHORT $LN783@cckd_chkds
  0a630	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a638	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0a63c	d1 f8		 sar	 eax, 1
  0a63e	89 84 24 8c 03
	00 00		 mov	 DWORD PTR tv5383[rsp], eax
  0a645	eb 0b		 jmp	 SHORT $LN784@cckd_chkds
$LN783@cckd_chkds:
  0a647	c7 84 24 8c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5383[rsp], 0
$LN784@cckd_chkds:
  0a652	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a658	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a65a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a660	48 89 84 24 30
	09 00 00	 mov	 QWORD PTR tv5366[rsp], rax
  0a668	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0a670	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0a677	48 89 8c 24 38
	09 00 00	 mov	 QWORD PTR tv5372[rsp], rcx
  0a67f	b9 01 00 00 00	 mov	 ecx, 1
  0a684	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a68a	48 8b 8c 24 30
	09 00 00	 mov	 rcx, QWORD PTR tv5366[rsp]
  0a692	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0a697	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0a69f	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0a6a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170616
  0a6ab	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0a6b0	48 8b 8c 24 38
	09 00 00	 mov	 rcx, QWORD PTR tv5372[rsp]
  0a6b8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0a6bd	8b 8c 24 88 03
	00 00		 mov	 ecx, DWORD PTR tv5377[rsp]
  0a6c4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0a6c8	8b 8c 24 8c 03
	00 00		 mov	 ecx, DWORD PTR tv5383[rsp]
  0a6cf	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0a6d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170617
  0a6da	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0a6df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170618
  0a6e6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0a6eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0a6f0	41 b9 03 00 00
	00		 mov	 r9d, 3
  0a6f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170619
  0a6fd	ba fb 0a 00 00	 mov	 edx, 2811		; 00000afbH
  0a702	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170620
  0a709	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN495@cckd_chkds:

; 2811 :               "lseek()", off, strerror( errno ));
; 2812 :     goto cdsk_error;

  0a70f	e9 c1 09 00 00	 jmp	 $cdsk_error$829
$cdsk_read_error$828:

; 2813 : 
; 2814 : cdsk_read_error:
; 2815 :     if(dev->batch)

  0a714	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a71c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0a722	c1 e8 0a	 shr	 eax, 10
  0a725	83 e0 01	 and	 eax, 1
  0a728	85 c0		 test	 eax, eax
  0a72a	0f 84 34 01 00
	00		 je	 $LN496@cckd_chkds

; 2816 :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0a730	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  0a738	7d 18		 jge	 SHORT $LN785@cckd_chkds
  0a73a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a740	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a742	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a748	48 89 84 24 88
	04 00 00	 mov	 QWORD PTR tv5402[rsp], rax
  0a750	eb 0f		 jmp	 SHORT $LN786@cckd_chkds
$LN785@cckd_chkds:
  0a752	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170623
  0a759	48 89 84 24 88
	04 00 00	 mov	 QWORD PTR tv5402[rsp], rax
$LN786@cckd_chkds:
  0a761	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a76a	74 15		 je	 SHORT $LN787@cckd_chkds
  0a76c	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a774	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a778	89 84 24 90 03
	00 00		 mov	 DWORD PTR tv5411[rsp], eax
  0a77f	eb 0b		 jmp	 SHORT $LN788@cckd_chkds
$LN787@cckd_chkds:
  0a781	c7 84 24 90 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5411[rsp], 0
$LN788@cckd_chkds:
  0a78c	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a795	74 17		 je	 SHORT $LN789@cckd_chkds
  0a797	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a79f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0a7a3	d1 f8		 sar	 eax, 1
  0a7a5	89 84 24 94 03
	00 00		 mov	 DWORD PTR tv5417[rsp], eax
  0a7ac	eb 0b		 jmp	 SHORT $LN790@cckd_chkds
$LN789@cckd_chkds:
  0a7ae	c7 84 24 94 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5417[rsp], 0
$LN790@cckd_chkds:
  0a7b9	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a7c1	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0a7c7	48 89 84 24 40
	09 00 00	 mov	 QWORD PTR tv5406[rsp], rax
  0a7cf	b9 01 00 00 00	 mov	 ecx, 1
  0a7d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a7da	48 8b 8c 24 88
	04 00 00	 mov	 rcx, QWORD PTR tv5402[rsp]
  0a7e2	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0a7e7	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0a7ef	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0a7f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170624
  0a7fb	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0a800	48 8b 8c 24 40
	09 00 00	 mov	 rcx, QWORD PTR tv5406[rsp]
  0a808	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0a80d	8b 8c 24 90 03
	00 00		 mov	 ecx, DWORD PTR tv5411[rsp]
  0a814	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0a818	8b 8c 24 94 03
	00 00		 mov	 ecx, DWORD PTR tv5417[rsp]
  0a81f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0a823	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170625
  0a82a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0a82f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170626
  0a836	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0a83b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0a840	41 b9 03 00 00
	00		 mov	 r9d, 3
  0a846	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170627
  0a84d	ba 01 0b 00 00	 mov	 edx, 2817		; 00000b01H
  0a852	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170628
  0a859	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0a85f	e9 2f 01 00 00	 jmp	 $LN497@cckd_chkds
$LN496@cckd_chkds:

; 2817 :                 "read()", off, rc < 0 ? strerror( errno ) : "incomplete");
; 2818 :     else
; 2819 :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0a864	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  0a86c	7d 18		 jge	 SHORT $LN791@cckd_chkds
  0a86e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a874	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a876	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a87c	48 89 84 24 90
	04 00 00	 mov	 QWORD PTR tv5432[rsp], rax
  0a884	eb 0f		 jmp	 SHORT $LN792@cckd_chkds
$LN791@cckd_chkds:
  0a886	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170629
  0a88d	48 89 84 24 90
	04 00 00	 mov	 QWORD PTR tv5432[rsp], rax
$LN792@cckd_chkds:
  0a895	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a89e	74 15		 je	 SHORT $LN793@cckd_chkds
  0a8a0	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a8a8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a8ac	89 84 24 98 03
	00 00		 mov	 DWORD PTR tv5441[rsp], eax
  0a8b3	eb 0b		 jmp	 SHORT $LN794@cckd_chkds
$LN793@cckd_chkds:
  0a8b5	c7 84 24 98 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5441[rsp], 0
$LN794@cckd_chkds:
  0a8c0	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a8c9	74 17		 je	 SHORT $LN795@cckd_chkds
  0a8cb	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a8d3	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0a8d7	d1 f8		 sar	 eax, 1
  0a8d9	89 84 24 9c 03
	00 00		 mov	 DWORD PTR tv5447[rsp], eax
  0a8e0	eb 0b		 jmp	 SHORT $LN796@cckd_chkds
$LN795@cckd_chkds:
  0a8e2	c7 84 24 9c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5447[rsp], 0
$LN796@cckd_chkds:
  0a8ed	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a8f5	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0a8fb	48 89 84 24 48
	09 00 00	 mov	 QWORD PTR tv5436[rsp], rax
  0a903	b9 01 00 00 00	 mov	 ecx, 1
  0a908	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0a90e	48 8b 8c 24 90
	04 00 00	 mov	 rcx, QWORD PTR tv5432[rsp]
  0a916	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0a91b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0a923	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0a928	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170630
  0a92f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0a934	48 8b 8c 24 48
	09 00 00	 mov	 rcx, QWORD PTR tv5436[rsp]
  0a93c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0a941	8b 8c 24 98 03
	00 00		 mov	 ecx, DWORD PTR tv5441[rsp]
  0a948	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0a94c	8b 8c 24 9c 03
	00 00		 mov	 ecx, DWORD PTR tv5447[rsp]
  0a953	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0a957	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170631
  0a95e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0a963	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170632
  0a96a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0a96f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0a974	41 b9 03 00 00
	00		 mov	 r9d, 3
  0a97a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170633
  0a981	ba 04 0b 00 00	 mov	 edx, 2820		; 00000b04H
  0a986	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170634
  0a98d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN497@cckd_chkds:

; 2820 :               "read()", off, rc < 0 ? strerror( errno ) : "incomplete");
; 2821 :     goto cdsk_error;

  0a993	e9 3d 07 00 00	 jmp	 $cdsk_error$829
$cdsk_write_error$837:

; 2822 : 
; 2823 : cdsk_write_error:
; 2824 :     if(dev->batch)

  0a998	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a9a0	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0a9a6	c1 e8 0a	 shr	 eax, 10
  0a9a9	83 e0 01	 and	 eax, 1
  0a9ac	85 c0		 test	 eax, eax
  0a9ae	0f 84 34 01 00
	00		 je	 $LN498@cckd_chkds

; 2825 :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0a9b4	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  0a9bc	7d 18		 jge	 SHORT $LN797@cckd_chkds
  0a9be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0a9c4	8b 08		 mov	 ecx, DWORD PTR [rax]
  0a9c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0a9cc	48 89 84 24 98
	04 00 00	 mov	 QWORD PTR tv5466[rsp], rax
  0a9d4	eb 0f		 jmp	 SHORT $LN798@cckd_chkds
$LN797@cckd_chkds:
  0a9d6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170637
  0a9dd	48 89 84 24 98
	04 00 00	 mov	 QWORD PTR tv5466[rsp], rax
$LN798@cckd_chkds:
  0a9e5	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0a9ee	74 15		 je	 SHORT $LN799@cckd_chkds
  0a9f0	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0a9f8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0a9fc	89 84 24 a0 03
	00 00		 mov	 DWORD PTR tv5475[rsp], eax
  0aa03	eb 0b		 jmp	 SHORT $LN800@cckd_chkds
$LN799@cckd_chkds:
  0aa05	c7 84 24 a0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5475[rsp], 0
$LN800@cckd_chkds:
  0aa10	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0aa19	74 17		 je	 SHORT $LN801@cckd_chkds
  0aa1b	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0aa23	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0aa27	d1 f8		 sar	 eax, 1
  0aa29	89 84 24 a4 03
	00 00		 mov	 DWORD PTR tv5481[rsp], eax
  0aa30	eb 0b		 jmp	 SHORT $LN802@cckd_chkds
$LN801@cckd_chkds:
  0aa32	c7 84 24 a4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5481[rsp], 0
$LN802@cckd_chkds:
  0aa3d	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0aa45	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0aa4b	48 89 84 24 50
	09 00 00	 mov	 QWORD PTR tv5470[rsp], rax
  0aa53	b9 01 00 00 00	 mov	 ecx, 1
  0aa58	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0aa5e	48 8b 8c 24 98
	04 00 00	 mov	 rcx, QWORD PTR tv5466[rsp]
  0aa66	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0aa6b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0aa73	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0aa78	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170638
  0aa7f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0aa84	48 8b 8c 24 50
	09 00 00	 mov	 rcx, QWORD PTR tv5470[rsp]
  0aa8c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0aa91	8b 8c 24 a0 03
	00 00		 mov	 ecx, DWORD PTR tv5475[rsp]
  0aa98	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0aa9c	8b 8c 24 a4 03
	00 00		 mov	 ecx, DWORD PTR tv5481[rsp]
  0aaa3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0aaa7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170639
  0aaae	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0aab3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170640
  0aaba	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0aabf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0aac4	41 b9 03 00 00
	00		 mov	 r9d, 3
  0aaca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170641
  0aad1	ba 0a 0b 00 00	 mov	 edx, 2826		; 00000b0aH
  0aad6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170642
  0aadd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0aae3	e9 2f 01 00 00	 jmp	 $LN499@cckd_chkds
$LN498@cckd_chkds:

; 2826 :                 "write()", off, rc < 0 ? strerror( errno ) : "incomplete");
; 2827 :     else
; 2828 :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0aae8	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  0aaf0	7d 18		 jge	 SHORT $LN803@cckd_chkds
  0aaf2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0aaf8	8b 08		 mov	 ecx, DWORD PTR [rax]
  0aafa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0ab00	48 89 84 24 a0
	04 00 00	 mov	 QWORD PTR tv5496[rsp], rax
  0ab08	eb 0f		 jmp	 SHORT $LN804@cckd_chkds
$LN803@cckd_chkds:
  0ab0a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170643
  0ab11	48 89 84 24 a0
	04 00 00	 mov	 QWORD PTR tv5496[rsp], rax
$LN804@cckd_chkds:
  0ab19	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0ab22	74 15		 je	 SHORT $LN805@cckd_chkds
  0ab24	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0ab2c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0ab30	89 84 24 a8 03
	00 00		 mov	 DWORD PTR tv5505[rsp], eax
  0ab37	eb 0b		 jmp	 SHORT $LN806@cckd_chkds
$LN805@cckd_chkds:
  0ab39	c7 84 24 a8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5505[rsp], 0
$LN806@cckd_chkds:
  0ab44	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0ab4d	74 17		 je	 SHORT $LN807@cckd_chkds
  0ab4f	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0ab57	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0ab5b	d1 f8		 sar	 eax, 1
  0ab5d	89 84 24 ac 03
	00 00		 mov	 DWORD PTR tv5511[rsp], eax
  0ab64	eb 0b		 jmp	 SHORT $LN808@cckd_chkds
$LN807@cckd_chkds:
  0ab66	c7 84 24 ac 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5511[rsp], 0
$LN808@cckd_chkds:
  0ab71	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0ab79	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0ab7f	48 89 84 24 58
	09 00 00	 mov	 QWORD PTR tv5500[rsp], rax
  0ab87	b9 01 00 00 00	 mov	 ecx, 1
  0ab8c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0ab92	48 8b 8c 24 a0
	04 00 00	 mov	 rcx, QWORD PTR tv5496[rsp]
  0ab9a	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0ab9f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0aba7	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0abac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170644
  0abb3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0abb8	48 8b 8c 24 58
	09 00 00	 mov	 rcx, QWORD PTR tv5500[rsp]
  0abc0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0abc5	8b 8c 24 a8 03
	00 00		 mov	 ecx, DWORD PTR tv5505[rsp]
  0abcc	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0abd0	8b 8c 24 ac 03
	00 00		 mov	 ecx, DWORD PTR tv5511[rsp]
  0abd7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0abdb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170645
  0abe2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0abe7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170646
  0abee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0abf3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0abf8	41 b9 03 00 00
	00		 mov	 r9d, 3
  0abfe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170647
  0ac05	ba 0d 0b 00 00	 mov	 edx, 2829		; 00000b0dH
  0ac0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170648
  0ac11	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN499@cckd_chkds:

; 2829 :               "write()", off, rc < 0 ? strerror( errno ) : "incomplete");
; 2830 :     goto cdsk_error;

  0ac17	e9 b9 04 00 00	 jmp	 $cdsk_error$829
$cdsk_malloc_error$836:

; 2831 : 
; 2832 : cdsk_malloc_error:
; 2833 :     {
; 2834 :         char buf[64];
; 2835 :         MSGBUF( buf, "malloc(%d)", len);

  0ac1c	44 8b 8c 24 a4
	00 00 00	 mov	 r9d, DWORD PTR len$[rsp]
  0ac24	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170649
  0ac2b	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0ac30	48 8d 8c 24 20
	21 00 00	 lea	 rcx, QWORD PTR buf$10[rsp]
  0ac38	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2836 :         if(dev->batch)

  0ac3e	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0ac46	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0ac4c	c1 e8 0a	 shr	 eax, 10
  0ac4f	83 e0 01	 and	 eax, 1
  0ac52	85 c0		 test	 eax, eax
  0ac54	0f 84 0e 01 00
	00		 je	 $LN500@cckd_chkds

; 2837 :             FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0ac5a	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0ac63	74 15		 je	 SHORT $LN809@cckd_chkds
  0ac65	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0ac6d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0ac71	89 84 24 b0 03
	00 00		 mov	 DWORD PTR tv5572[rsp], eax
  0ac78	eb 0b		 jmp	 SHORT $LN810@cckd_chkds
$LN809@cckd_chkds:
  0ac7a	c7 84 24 b0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5572[rsp], 0
$LN810@cckd_chkds:
  0ac85	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0ac8e	74 17		 je	 SHORT $LN811@cckd_chkds
  0ac90	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0ac98	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0ac9c	d1 f8		 sar	 eax, 1
  0ac9e	89 84 24 b4 03
	00 00		 mov	 DWORD PTR tv5578[rsp], eax
  0aca5	eb 0b		 jmp	 SHORT $LN812@cckd_chkds
$LN811@cckd_chkds:
  0aca7	c7 84 24 b4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5578[rsp], 0
$LN812@cckd_chkds:
  0acb2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0acb8	8b 08		 mov	 ecx, DWORD PTR [rax]
  0acba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0acc0	48 89 84 24 60
	09 00 00	 mov	 QWORD PTR tv5530[rsp], rax
  0acc8	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0acd0	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0acd7	48 89 8c 24 68
	09 00 00	 mov	 QWORD PTR tv5535[rsp], rcx
  0acdf	b9 01 00 00 00	 mov	 ecx, 1
  0ace4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0acea	48 8b 8c 24 60
	09 00 00	 mov	 rcx, QWORD PTR tv5530[rsp]
  0acf2	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0acf7	48 8d 8c 24 20
	21 00 00	 lea	 rcx, QWORD PTR buf$10[rsp]
  0acff	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0ad04	48 8b 8c 24 68
	09 00 00	 mov	 rcx, QWORD PTR tv5535[rsp]
  0ad0c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0ad11	8b 8c 24 b0 03
	00 00		 mov	 ecx, DWORD PTR tv5572[rsp]
  0ad18	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0ad1c	8b 8c 24 b4 03
	00 00		 mov	 ecx, DWORD PTR tv5578[rsp]
  0ad23	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0ad27	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170652
  0ad2e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0ad33	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170653
  0ad3a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0ad3f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0ad44	41 b9 03 00 00
	00		 mov	 r9d, 3
  0ad4a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170654
  0ad51	ba 16 0b 00 00	 mov	 edx, 2838		; 00000b16H
  0ad56	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170655
  0ad5d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0ad63	e9 09 01 00 00	 jmp	 $LN501@cckd_chkds
$LN500@cckd_chkds:

; 2838 :                     buf, strerror( errno ));
; 2839 :         else
; 2840 :              WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0ad68	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0ad71	74 15		 je	 SHORT $LN813@cckd_chkds
  0ad73	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0ad7b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0ad7f	89 84 24 b8 03
	00 00		 mov	 DWORD PTR tv5599[rsp], eax
  0ad86	eb 0b		 jmp	 SHORT $LN814@cckd_chkds
$LN813@cckd_chkds:
  0ad88	c7 84 24 b8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5599[rsp], 0
$LN814@cckd_chkds:
  0ad93	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0ad9c	74 17		 je	 SHORT $LN815@cckd_chkds
  0ad9e	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0ada6	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0adaa	d1 f8		 sar	 eax, 1
  0adac	89 84 24 bc 03
	00 00		 mov	 DWORD PTR tv5605[rsp], eax
  0adb3	eb 0b		 jmp	 SHORT $LN816@cckd_chkds
$LN815@cckd_chkds:
  0adb5	c7 84 24 bc 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5605[rsp], 0
$LN816@cckd_chkds:
  0adc0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0adc6	8b 08		 mov	 ecx, DWORD PTR [rax]
  0adc8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0adce	48 89 84 24 70
	09 00 00	 mov	 QWORD PTR tv5589[rsp], rax
  0add6	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0adde	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0ade5	48 89 8c 24 78
	09 00 00	 mov	 QWORD PTR tv5594[rsp], rcx
  0aded	b9 01 00 00 00	 mov	 ecx, 1
  0adf2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0adf8	48 8b 8c 24 70
	09 00 00	 mov	 rcx, QWORD PTR tv5589[rsp]
  0ae00	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0ae05	48 8d 8c 24 20
	21 00 00	 lea	 rcx, QWORD PTR buf$10[rsp]
  0ae0d	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0ae12	48 8b 8c 24 78
	09 00 00	 mov	 rcx, QWORD PTR tv5594[rsp]
  0ae1a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0ae1f	8b 8c 24 b8 03
	00 00		 mov	 ecx, DWORD PTR tv5599[rsp]
  0ae26	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0ae2a	8b 8c 24 bc 03
	00 00		 mov	 ecx, DWORD PTR tv5605[rsp]
  0ae31	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0ae35	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170656
  0ae3c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0ae41	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170657
  0ae48	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0ae4d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0ae52	41 b9 03 00 00
	00		 mov	 r9d, 3
  0ae58	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170658
  0ae5f	ba 19 0b 00 00	 mov	 edx, 2841		; 00000b19H
  0ae64	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170659
  0ae6b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN501@cckd_chkds:

; 2841 :                    buf, strerror( errno ));
; 2842 :     }
; 2843 :     goto cdsk_error;

  0ae71	e9 5f 02 00 00	 jmp	 $cdsk_error$829
$cdsk_calloc_error$830:

; 2844 : 
; 2845 : cdsk_calloc_error:
; 2846 :     {
; 2847 :         char buf[64];
; 2848 :         MSGBUF( buf, "calloc(%d)", n * len);

  0ae76	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  0ae7d	0f af 84 24 a4
	00 00 00	 imul	 eax, DWORD PTR len$[rsp]
  0ae85	44 8b c8	 mov	 r9d, eax
  0ae88	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170660
  0ae8f	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0ae94	48 8d 8c 24 60
	21 00 00	 lea	 rcx, QWORD PTR buf$11[rsp]
  0ae9c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 2849 :         if(dev->batch)

  0aea2	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0aeaa	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0aeb0	c1 e8 0a	 shr	 eax, 10
  0aeb3	83 e0 01	 and	 eax, 1
  0aeb6	85 c0		 test	 eax, eax
  0aeb8	0f 84 0e 01 00
	00		 je	 $LN502@cckd_chkds

; 2850 :             FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0aebe	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0aec7	74 15		 je	 SHORT $LN817@cckd_chkds
  0aec9	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0aed1	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0aed5	89 84 24 c0 03
	00 00		 mov	 DWORD PTR tv5635[rsp], eax
  0aedc	eb 0b		 jmp	 SHORT $LN818@cckd_chkds
$LN817@cckd_chkds:
  0aede	c7 84 24 c0 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5635[rsp], 0
$LN818@cckd_chkds:
  0aee9	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0aef2	74 17		 je	 SHORT $LN819@cckd_chkds
  0aef4	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0aefc	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0af00	d1 f8		 sar	 eax, 1
  0af02	89 84 24 c4 03
	00 00		 mov	 DWORD PTR tv5641[rsp], eax
  0af09	eb 0b		 jmp	 SHORT $LN820@cckd_chkds
$LN819@cckd_chkds:
  0af0b	c7 84 24 c4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5641[rsp], 0
$LN820@cckd_chkds:
  0af16	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0af1c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0af1e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0af24	48 89 84 24 80
	09 00 00	 mov	 QWORD PTR tv5625[rsp], rax
  0af2c	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0af34	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0af3b	48 89 8c 24 88
	09 00 00	 mov	 QWORD PTR tv5630[rsp], rcx
  0af43	b9 01 00 00 00	 mov	 ecx, 1
  0af48	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0af4e	48 8b 8c 24 80
	09 00 00	 mov	 rcx, QWORD PTR tv5625[rsp]
  0af56	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0af5b	48 8d 8c 24 60
	21 00 00	 lea	 rcx, QWORD PTR buf$11[rsp]
  0af63	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0af68	48 8b 8c 24 88
	09 00 00	 mov	 rcx, QWORD PTR tv5630[rsp]
  0af70	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0af75	8b 8c 24 c0 03
	00 00		 mov	 ecx, DWORD PTR tv5635[rsp]
  0af7c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0af80	8b 8c 24 c4 03
	00 00		 mov	 ecx, DWORD PTR tv5641[rsp]
  0af87	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0af8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170663
  0af92	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0af97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170664
  0af9e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0afa3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0afa8	41 b9 03 00 00
	00		 mov	 r9d, 3
  0afae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170665
  0afb5	ba 23 0b 00 00	 mov	 edx, 2851		; 00000b23H
  0afba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170666
  0afc1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0afc7	e9 09 01 00 00	 jmp	 $LN503@cckd_chkds
$LN502@cckd_chkds:

; 2851 :                     buf, strerror( errno ));
; 2852 :         else
; 2853 :              WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0afcc	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0afd5	74 15		 je	 SHORT $LN821@cckd_chkds
  0afd7	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0afdf	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0afe3	89 84 24 c8 03
	00 00		 mov	 DWORD PTR tv5662[rsp], eax
  0afea	eb 0b		 jmp	 SHORT $LN822@cckd_chkds
$LN821@cckd_chkds:
  0afec	c7 84 24 c8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5662[rsp], 0
$LN822@cckd_chkds:
  0aff7	48 83 bc 24 d0
	21 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0b000	74 17		 je	 SHORT $LN823@cckd_chkds
  0b002	48 8b 84 24 d0
	21 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0b00a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0b00e	d1 f8		 sar	 eax, 1
  0b010	89 84 24 cc 03
	00 00		 mov	 DWORD PTR tv5668[rsp], eax
  0b017	eb 0b		 jmp	 SHORT $LN824@cckd_chkds
$LN823@cckd_chkds:
  0b019	c7 84 24 cc 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv5668[rsp], 0
$LN824@cckd_chkds:
  0b024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0b02a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0b02c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0b032	48 89 84 24 90
	09 00 00	 mov	 QWORD PTR tv5652[rsp], rax
  0b03a	48 8b 8c 24 d0
	21 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0b042	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0b049	48 89 8c 24 98
	09 00 00	 mov	 QWORD PTR tv5657[rsp], rcx
  0b051	b9 01 00 00 00	 mov	 ecx, 1
  0b056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0b05c	48 8b 8c 24 90
	09 00 00	 mov	 rcx, QWORD PTR tv5652[rsp]
  0b064	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0b069	48 8d 8c 24 60
	21 00 00	 lea	 rcx, QWORD PTR buf$11[rsp]
  0b071	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0b076	48 8b 8c 24 98
	09 00 00	 mov	 rcx, QWORD PTR tv5657[rsp]
  0b07e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0b083	8b 8c 24 c8 03
	00 00		 mov	 ecx, DWORD PTR tv5662[rsp]
  0b08a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0b08e	8b 8c 24 cc 03
	00 00		 mov	 ecx, DWORD PTR tv5668[rsp]
  0b095	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0b099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170667
  0b0a0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0b0a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170668
  0b0ac	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0b0b1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0b0b6	41 b9 03 00 00
	00		 mov	 r9d, 3
  0b0bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170669
  0b0c3	ba 26 0b 00 00	 mov	 edx, 2854		; 00000b26H
  0b0c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170670
  0b0cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN503@cckd_chkds:
$cdsk_error$829:

; 2854 :                    buf, strerror( errno ));
; 2855 :     }
; 2856 :     goto cdsk_error;
; 2857 : 
; 2858 : cdsk_error:
; 2859 :     rc = -1;

  0b0d5	c7 84 24 b8 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR rc$[rsp], -1

; 2860 :     goto cdsk_return;

  0b0e0	e9 58 f0 ff ff	 jmp	 $cdsk_return$839
$LN1@cckd_chkds:
$LN504@cckd_chkds:

; 2861 : 
; 2862 : } /* end function cckd_chkdsk */

  0b0e5	48 8b 8c 24 a0
	21 04 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0b0ed	48 33 cc	 xor	 rcx, rsp
  0b0f0	e8 00 00 00 00	 call	 __security_check_cookie
  0b0f5	48 81 c4 b8 21
	04 00		 add	 rsp, 270776		; 000421b8H
  0b0fc	5f		 pop	 rdi
  0b0fd	5e		 pop	 rsi
  0b0fe	c3		 ret	 0
cckd_chkdsk ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
i$ = 112
s$ = 116
spctab$ = 120
len$ = 128
fd$ = 132
rc$ = 136
j$ = 140
off$ = 144
l$ = 152
l2$ = 160
l1$ = 168
p$ = 176
rlen$ = 184
n$ = 188
tv309 = 192
relocate$ = 196
l1size$ = 200
rbuf$ = 208
tv183 = 216
tv189 = 220
tv238 = 224
tv244 = 228
tv265 = 232
tv271 = 236
tv780 = 240
tv786 = 244
tv802 = 248
tv808 = 252
tv1512 = 256
tv1518 = 260
tv1536 = 264
tv1542 = 268
tv1562 = 272
tv1568 = 276
tv1584 = 280
tv1590 = 284
tv1675 = 288
tv1681 = 292
tv1702 = 296
tv1708 = 300
tv1734 = 304
tv1740 = 308
tv1762 = 312
tv1768 = 316
tv1796 = 320
tv1802 = 324
tv1826 = 328
tv1832 = 332
tv1892 = 336
tv1898 = 340
tv1922 = 344
tv1928 = 348
tv1957 = 352
tv1984 = 356
tv1990 = 360
tv2020 = 364
tv2026 = 368
tv2047 = 372
tv2053 = 376
l2area$ = 384
tv1963 = 392
tv163 = 396
tv167 = 400
tv221 = 404
next$ = 408
cckd$ = 416
tv231 = 424
tv258 = 432
tv550 = 440
tv1787 = 448
tv1817 = 456
tv1851 = 464
tv1913 = 472
tv95 = 480
tv160 = 488
tv178 = 496
tv207 = 504
tv233 = 512
tv260 = 520
tv363 = 528
tv569 = 536
tv775 = 544
tv797 = 552
tv933 = 560
tv1147 = 568
tv1178 = 576
tv1261 = 584
tv1406 = 592
tv1426 = 600
tv1460 = 608
tv1505 = 616
tv1507 = 624
tv1529 = 632
tv1531 = 640
tv1557 = 648
tv1579 = 656
tv1603 = 664
tv1665 = 672
tv1670 = 680
tv1692 = 688
tv1697 = 696
tv1723 = 704
tv1729 = 712
tv1751 = 720
tv1757 = 728
tv1791 = 736
tv1821 = 744
tv1855 = 752
tv1917 = 760
tv1947 = 768
tv1952 = 776
tv1974 = 784
tv1979 = 792
tv2010 = 800
tv2015 = 808
tv2037 = 816
tv2042 = 824
fst$ = 832
cdevhdr$ = 896
devhdr$ = 1408
zero_l2$ = 1920
ff_l2$ = 3968
buf$1 = 6016
buf$2 = 6080
buf$ = 6144
__$ArrayPad$ = 268288
dev$ = 268320
cckd_comp PROC

; 395  : {

$LN274:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	57		 push	 rdi
  00006	b8 10 18 04 00	 mov	 eax, 268304		; 00041810H
  0000b	e8 00 00 00 00	 call	 __chkstk
  00010	48 2b e0	 sub	 rsp, rax
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 84 24 00
	18 04 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 396  : CCKD_EXT       *cckd;                   /* -> cckd extension         */
; 397  : int             fd;                     /* File descriptor           */
; 398  : struct stat     fst;                    /* File status buffer        */
; 399  : int             rc;                     /* Return code               */
; 400  : off_t           off;                    /* File offset               */
; 401  : off_t           l2area;                 /* Boundary for l2 tables    */
; 402  : int             len;                    /* Length                    */
; 403  : int             i, j, l, n;             /* Work variables            */
; 404  : int             relocate = 0;           /* 1=spaces will be relocated*/

  00025	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR relocate$[rsp], 0

; 405  : int             l1size;                 /* l1 table size             */
; 406  : U32             next;                   /* offset of next space      */
; 407  : int             s;                      /* space table index         */
; 408  : CKD_DEVHDR      devhdr;                 /* CKD device header         */
; 409  : CCKD_DEVHDR     cdevhdr;                /* CCKD device header        */
; 410  : CCKD_L1ENT     *l1=NULL;                /* ->L1tab table             */

  00030	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR l1$[rsp], 0

; 411  : CCKD_L2ENT    **l2=NULL;                /* ->L2tab table array       */

  0003c	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR l2$[rsp], 0

; 412  : SPCTAB         *spctab=NULL;            /* -> space table            */

  00048	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR spctab$[rsp], 0

; 413  : BYTE           *rbuf=NULL;              /* Relocation buffer         */

  00051	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rbuf$[rsp], 0

; 414  : BYTE           *p;                      /* -> relocation buffer      */
; 415  : int             rlen=0;                 /* Relocation buffer length  */

  0005d	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rlen$[rsp], 0

; 416  : CCKD_L2ENT      zero_l2[256];           /* Empty l2 table (zeros)    */
; 417  : CCKD_L2ENT      ff_l2[256];             /* Empty l2 table (0xff's)   */
; 418  : BYTE            buf[65536*4];           /* Buffer                    */
; 419  : 
; 420  :     if (dev->cckd64)

  00068	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00070	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  00077	24 01		 and	 al, 1
  00079	0f b6 c0	 movzx	 eax, al
  0007c	85 c0		 test	 eax, eax
  0007e	74 12		 je	 SHORT $LN64@cckd_comp

; 421  :         return cckd64_comp( dev );

  00080	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00088	e8 00 00 00 00	 call	 cckd64_comp
  0008d	e9 26 38 00 00	 jmp	 $LN1@cckd_comp
$LN64@cckd_comp:

; 422  : 
; 423  :     /*---------------------------------------------------------------
; 424  :      * Get fd
; 425  :      *---------------------------------------------------------------*/
; 426  :     cckd = dev->cckd_ext;

  00092	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0009a	48 8b 80 08 13
	00 00		 mov	 rax, QWORD PTR [rax+4872]
  000a1	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR cckd$[rsp], rax

; 427  :     if (cckd == NULL)

  000a9	48 83 bc 24 a0
	01 00 00 00	 cmp	 QWORD PTR cckd$[rsp], 0
  000b2	75 17		 jne	 SHORT $LN65@cckd_comp

; 428  :         fd = dev->fd;

  000b4	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  000bc	8b 80 ac 01 00
	00		 mov	 eax, DWORD PTR [rax+428]
  000c2	89 84 24 84 00
	00 00		 mov	 DWORD PTR fd$[rsp], eax
  000c9	eb 22		 jmp	 SHORT $LN66@cckd_comp
$LN65@cckd_comp:

; 429  :     else
; 430  :         fd = cckd->fd[cckd->sfn];

  000cb	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR cckd$[rsp]
  000d3	48 63 40 3c	 movsxd	 rax, DWORD PTR [rax+60]
  000d7	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR cckd$[rsp]
  000df	8b 84 81 f0 00
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+240]
  000e6	89 84 24 84 00
	00 00		 mov	 DWORD PTR fd$[rsp], eax
$LN66@cckd_comp:

; 431  : 
; 432  :     /*---------------------------------------------------------------
; 433  :      * Get file statistics
; 434  :      *---------------------------------------------------------------*/
; 435  :     if (fstat (fd, &fst) < 0)

  000ed	48 8d 94 24 40
	03 00 00	 lea	 rdx, QWORD PTR fst$[rsp]
  000f5	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  000fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fstat64
  00102	85 c0		 test	 eax, eax
  00104	7d 05		 jge	 SHORT $LN67@cckd_comp

; 436  :         goto comp_fstat_error;

  00106	e9 56 29 00 00	 jmp	 $comp_fstat_error$275
$LN67@cckd_comp:

; 437  :     gui_fprintf (stderr, "SIZE=%"PRIu64"\n", (U64) fst.st_size);

  0010b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00112	83 38 00	 cmp	 DWORD PTR [rax], 0
  00115	74 23		 je	 SHORT $LN68@cckd_comp
  00117	b9 02 00 00 00	 mov	 ecx, 2
  0011c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00122	4c 8b 84 24 58
	03 00 00	 mov	 r8, QWORD PTR fst$[rsp+24]
  0012a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169160
  00131	48 8b c8	 mov	 rcx, rax
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN68@cckd_comp:

; 438  : 
; 439  :     /*---------------------------------------------------------------
; 440  :      * Read device header
; 441  :      *---------------------------------------------------------------*/
; 442  :     off = 0;

  0013a	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR off$[rsp], 0

; 443  :     if (lseek( fd, off, SEEK_SET ) < 0)

  00146	45 33 c0	 xor	 r8d, r8d
  00149	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00151	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00158	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0015e	48 85 c0	 test	 rax, rax
  00161	7d 05		 jge	 SHORT $LN69@cckd_comp

; 444  :         goto comp_lseek_error;

  00163	e9 2f 2b 00 00	 jmp	 $comp_lseek_error$276
$LN69@cckd_comp:

; 445  :     gui_fprintf( stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00168	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0016f	83 38 00	 cmp	 DWORD PTR [rax], 0
  00172	74 43		 je	 SHORT $LN70@cckd_comp
  00174	41 b8 01 00 00
	00		 mov	 r8d, 1
  0017a	33 d2		 xor	 edx, edx
  0017c	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00183	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00189	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv95[rsp], rax
  00191	b9 02 00 00 00	 mov	 ecx, 2
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0019c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR tv95[rsp]
  001a4	4c 8b c1	 mov	 r8, rcx
  001a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169163
  001ae	48 8b c8	 mov	 rcx, rax
  001b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN70@cckd_comp:

; 446  :     len = CKD_DEVHDR_SIZE;

  001b7	c7 84 24 80 00
	00 00 00 02 00
	00		 mov	 DWORD PTR len$[rsp], 512 ; 00000200H

; 447  :     if ((rc = read( fd, &devhdr, len )) != len)

  001c2	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  001ca	48 8d 94 24 80
	05 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  001d2	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  001df	89 84 24 88 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  001e6	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  001ed	39 84 24 88 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  001f4	74 05		 je	 SHORT $LN71@cckd_comp

; 448  :         goto comp_read_error;

  001f6	e9 ec 2c 00 00	 jmp	 $comp_read_error$277
$LN71@cckd_comp:

; 449  : 
; 450  :     dev->cckd64 = 0;

  001fb	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00203	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  0020a	24 fe		 and	 al, 254			; 000000feH
  0020c	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00214	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 451  :     if (!(dh_devid_typ( devhdr.dh_devid ) & ANY32_CMP_OR_SF_TYP))

  0021a	48 8d 8c 24 80
	05 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  00222	e8 00 00 00 00	 call	 dh_devid_typ
  00227	25 00 60 00 60	 and	 eax, 1610637312		; 60006000H
  0022c	85 c0		 test	 eax, eax
  0022e	0f 85 ed 01 00
	00		 jne	 $LN72@cckd_comp

; 452  :     {
; 453  :         if (dh_devid_typ( devhdr.dh_devid ) & ANY64_CMP_OR_SF_TYP)

  00234	48 8d 8c 24 80
	05 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  0023c	e8 00 00 00 00	 call	 dh_devid_typ
  00241	25 60 00 60 00	 and	 eax, 6291552		; 00600060H
  00246	85 c0		 test	 eax, eax
  00248	74 31		 je	 SHORT $LN73@cckd_comp

; 454  :         {
; 455  :             dev->cckd64 = 1;

  0024a	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00252	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  00259	0c 01		 or	 al, 1
  0025b	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00263	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 456  :             return cckd64_comp( dev );

  00269	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00271	e8 00 00 00 00	 call	 cckd64_comp
  00276	e9 3d 36 00 00	 jmp	 $LN1@cckd_comp
$LN73@cckd_comp:

; 457  :         }
; 458  : 
; 459  :         // "%1d:%04X CCKD file %s: not a compressed dasd file"
; 460  :         if (dev->batch)

  0027b	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00283	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00289	c1 e8 0a	 shr	 eax, 10
  0028c	83 e0 01	 and	 eax, 1
  0028f	85 c0		 test	 eax, eax
  00291	0f 84 ad 00 00
	00		 je	 $LN74@cckd_comp

; 461  :             FWRMSG( stdout, HHC00356, "E", SSID_TO_LCSS( dev->ssid ),

  00297	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0029f	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  002a5	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv160[rsp], rax
  002ad	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002b5	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  002b9	89 8c 24 8c 01
	00 00		 mov	 DWORD PTR tv163[rsp], ecx
  002c0	48 8b 94 24 20
	18 04 00	 mov	 rdx, QWORD PTR dev$[rsp]
  002c8	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  002cc	d1 fa		 sar	 edx, 1
  002ce	89 94 24 90 01
	00 00		 mov	 DWORD PTR tv167[rsp], edx
  002d5	b9 01 00 00 00	 mov	 ecx, 1
  002da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002e0	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR tv160[rsp]
  002e8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002ed	8b 8c 24 8c 01
	00 00		 mov	 ecx, DWORD PTR tv163[rsp]
  002f4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002f8	8b 8c 24 90 01
	00 00		 mov	 ecx, DWORD PTR tv167[rsp]
  002ff	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169169
  0030a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0030f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169170
  00316	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0031b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00320	41 b9 03 00 00
	00		 mov	 r9d, 3
  00326	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169171
  0032d	ba ce 01 00 00	 mov	 edx, 462		; 000001ceH
  00332	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169172
  00339	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0033f	e9 d8 00 00 00	 jmp	 $LN75@cckd_comp
$LN74@cckd_comp:

; 462  :                 dev->devnum, dev->filename );
; 463  :         else
; 464  :             WRMSG( HHC00356, "E", LCSS_DEVNUM, dev->filename );

  00344	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0034d	74 15		 je	 SHORT $LN178@cckd_comp
  0034f	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00357	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0035b	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv183[rsp], eax
  00362	eb 0b		 jmp	 SHORT $LN179@cckd_comp
$LN178@cckd_comp:
  00364	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv183[rsp], 0
$LN179@cckd_comp:
  0036f	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00378	74 17		 je	 SHORT $LN180@cckd_comp
  0037a	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00382	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00386	d1 f8		 sar	 eax, 1
  00388	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv189[rsp], eax
  0038f	eb 0b		 jmp	 SHORT $LN181@cckd_comp
$LN180@cckd_comp:
  00391	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv189[rsp], 0
$LN181@cckd_comp:
  0039c	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  003a4	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  003aa	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv178[rsp], rax
  003b2	b9 01 00 00 00	 mov	 ecx, 1
  003b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003bd	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR tv178[rsp]
  003c5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003ca	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv183[rsp]
  003d1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003d5	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR tv189[rsp]
  003dc	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169173
  003e7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169174
  003f3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003f8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003fd	41 b9 03 00 00
	00		 mov	 r9d, 3
  00403	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169175
  0040a	ba d0 01 00 00	 mov	 edx, 464		; 000001d0H
  0040f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169176
  00416	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN75@cckd_comp:

; 465  :         goto comp_error;

  0041c	e9 87 34 00 00	 jmp	 $comp_error$278
$LN72@cckd_comp:
$comp_restart$279:

; 466  :     }
; 467  : 
; 468  : comp_restart:
; 469  : 
; 470  :     /*---------------------------------------------------------------
; 471  :      * Read compressed device header
; 472  :      *---------------------------------------------------------------*/
; 473  :     off = CCKD_DEVHDR_POS;

  00421	48 c7 84 24 90
	00 00 00 00 02
	00 00		 mov	 QWORD PTR off$[rsp], 512 ; 00000200H

; 474  :     if (lseek (fd, off, SEEK_SET) < 0)

  0042d	45 33 c0	 xor	 r8d, r8d
  00430	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00438	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0043f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00445	48 85 c0	 test	 rax, rax
  00448	7d 05		 jge	 SHORT $LN76@cckd_comp

; 475  :         goto comp_lseek_error;

  0044a	e9 48 28 00 00	 jmp	 $comp_lseek_error$276
$LN76@cckd_comp:

; 476  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0044f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00456	83 38 00	 cmp	 DWORD PTR [rax], 0
  00459	74 43		 je	 SHORT $LN77@cckd_comp
  0045b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00461	33 d2		 xor	 edx, edx
  00463	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0046a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00470	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv207[rsp], rax
  00478	b9 02 00 00 00	 mov	 ecx, 2
  0047d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00483	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR tv207[rsp]
  0048b	4c 8b c1	 mov	 r8, rcx
  0048e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169179
  00495	48 8b c8	 mov	 rcx, rax
  00498	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN77@cckd_comp:

; 477  :     len = CCKD_DEVHDR_SIZE;

  0049e	c7 84 24 80 00
	00 00 00 02 00
	00		 mov	 DWORD PTR len$[rsp], 512 ; 00000200H

; 478  :     if ((rc = read (fd, &cdevhdr, len)) != len)

  004a9	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  004b1	48 8d 94 24 80
	03 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  004b9	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  004c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  004c6	89 84 24 88 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  004cd	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  004d4	39 84 24 88 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  004db	74 05		 je	 SHORT $LN78@cckd_comp

; 479  :         goto comp_read_error;

  004dd	e9 05 2a 00 00	 jmp	 $comp_read_error$277
$LN78@cckd_comp:

; 480  : 
; 481  :     /*---------------------------------------------------------------
; 482  :      * Check the endianness of the file
; 483  :      *---------------------------------------------------------------*/
; 484  :     if ((cdevhdr.cdh_opts & CCKD_OPT_BIGEND) != cckd_def_opt_bigend())

  004e2	0f b6 84 24 83
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  004ea	83 e0 02	 and	 eax, 2
  004ed	89 84 24 94 01
	00 00		 mov	 DWORD PTR tv221[rsp], eax
  004f4	e8 00 00 00 00	 call	 cckd_def_opt_bigend
  004f9	8b 8c 24 94 01
	00 00		 mov	 ecx, DWORD PTR tv221[rsp]
  00500	3b c8		 cmp	 ecx, eax
  00502	0f 84 66 02 00
	00		 je	 $LN79@cckd_comp

; 485  :     {
; 486  :         if(dev->batch)

  00508	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00510	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00516	c1 e8 0a	 shr	 eax, 10
  00519	83 e0 01	 and	 eax, 1
  0051c	85 c0		 test	 eax, eax
  0051e	0f 84 19 01 00
	00		 je	 $LN80@cckd_comp

; 487  :             // "%1d:%04X CCKD file %s: converting to %s"
; 488  :             FWRMSG( stdout, HHC00357, "I", LCSS_DEVNUM, dev->filename,

  00524	0f b6 84 24 83
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  0052c	83 e0 02	 and	 eax, 2
  0052f	85 c0		 test	 eax, eax
  00531	74 11		 je	 SHORT $LN182@cckd_comp
  00533	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169184
  0053a	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv231[rsp], rax
  00542	eb 0f		 jmp	 SHORT $LN183@cckd_comp
$LN182@cckd_comp:
  00544	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169185
  0054b	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv231[rsp], rax
$LN183@cckd_comp:
  00553	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0055c	74 15		 je	 SHORT $LN184@cckd_comp
  0055e	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00566	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0056a	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv238[rsp], eax
  00571	eb 0b		 jmp	 SHORT $LN185@cckd_comp
$LN184@cckd_comp:
  00573	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv238[rsp], 0
$LN185@cckd_comp:
  0057e	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00587	74 17		 je	 SHORT $LN186@cckd_comp
  00589	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  00591	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00595	d1 f8		 sar	 eax, 1
  00597	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv244[rsp], eax
  0059e	eb 0b		 jmp	 SHORT $LN187@cckd_comp
$LN186@cckd_comp:
  005a0	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv244[rsp], 0
$LN187@cckd_comp:
  005ab	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  005b3	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  005b9	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR tv233[rsp], rax
  005c1	b9 01 00 00 00	 mov	 ecx, 1
  005c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005cc	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR tv231[rsp]
  005d4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  005d9	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR tv233[rsp]
  005e1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  005e6	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv238[rsp]
  005ed	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  005f1	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv244[rsp]
  005f8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  005fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169186
  00603	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00608	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169187
  0060f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00614	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00619	41 b9 03 00 00
	00		 mov	 r9d, 3
  0061f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169188
  00626	ba ea 01 00 00	 mov	 edx, 490		; 000001eaH
  0062b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169189
  00632	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00638	e9 14 01 00 00	 jmp	 $LN81@cckd_comp
$LN80@cckd_comp:

; 489  :                     (cdevhdr.cdh_opts & CCKD_OPT_BIGEND) ?
; 490  :                         "little-endian" : "big-endian" );
; 491  :         else
; 492  :             // "%1d:%04X CCKD file %s: converting to %s"
; 493  :             WRMSG( HHC00357, "I", LCSS_DEVNUM, dev->filename,

  0063d	0f b6 84 24 83
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  00645	83 e0 02	 and	 eax, 2
  00648	85 c0		 test	 eax, eax
  0064a	74 11		 je	 SHORT $LN188@cckd_comp
  0064c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169190
  00653	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv258[rsp], rax
  0065b	eb 0f		 jmp	 SHORT $LN189@cckd_comp
$LN188@cckd_comp:
  0065d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169191
  00664	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv258[rsp], rax
$LN189@cckd_comp:
  0066c	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00675	74 15		 je	 SHORT $LN190@cckd_comp
  00677	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0067f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00683	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv265[rsp], eax
  0068a	eb 0b		 jmp	 SHORT $LN191@cckd_comp
$LN190@cckd_comp:
  0068c	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv265[rsp], 0
$LN191@cckd_comp:
  00697	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  006a0	74 17		 je	 SHORT $LN192@cckd_comp
  006a2	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  006aa	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  006ae	d1 f8		 sar	 eax, 1
  006b0	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv271[rsp], eax
  006b7	eb 0b		 jmp	 SHORT $LN193@cckd_comp
$LN192@cckd_comp:
  006b9	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv271[rsp], 0
$LN193@cckd_comp:
  006c4	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  006cc	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  006d2	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR tv260[rsp], rax
  006da	b9 01 00 00 00	 mov	 ecx, 1
  006df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006e5	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tv258[rsp]
  006ed	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  006f2	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR tv260[rsp]
  006fa	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  006ff	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv265[rsp]
  00706	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0070a	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv271[rsp]
  00711	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00715	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169192
  0071c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00721	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169193
  00728	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0072d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00732	41 b9 03 00 00
	00		 mov	 r9d, 3
  00738	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169194
  0073f	ba ef 01 00 00	 mov	 edx, 495		; 000001efH
  00744	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169195
  0074b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN81@cckd_comp:

; 494  :                    (cdevhdr.cdh_opts & CCKD_OPT_BIGEND) ?
; 495  :                     "little-endian" : "big-endian" );
; 496  : 
; 497  :         if (cckd_swapend (dev) < 0)

  00751	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00759	e8 00 00 00 00	 call	 cckd_swapend
  0075e	85 c0		 test	 eax, eax
  00760	7d 07		 jge	 SHORT $LN82@cckd_comp

; 498  :             goto comp_error;

  00762	e9 41 31 00 00	 jmp	 $comp_error$278
  00767	eb 05		 jmp	 SHORT $LN83@cckd_comp
$LN82@cckd_comp:

; 499  :         else
; 500  :             goto comp_restart;

  00769	e9 b3 fc ff ff	 jmp	 $comp_restart$279
$LN83@cckd_comp:
$LN79@cckd_comp:

; 501  :     }
; 502  : 
; 503  :     /*---------------------------------------------------------------
; 504  :      * Some header checks
; 505  :      *---------------------------------------------------------------*/
; 506  :     if ((off_t)cdevhdr.cdh_size != fst.st_size
; 507  :      || cdevhdr.cdh_size   != cdevhdr.cdh_used || cdevhdr.free_off     != 0
; 508  :      || cdevhdr.free_total != 0                || cdevhdr.free_largest != 0
; 509  :      || cdevhdr.free_num   != 0                || cdevhdr.free_imbed   != 0)

  0076e	8b 84 24 8c 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+12]
  00775	48 3b 84 24 58
	03 00 00	 cmp	 rax, QWORD PTR fst$[rsp+24]
  0077d	75 42		 jne	 SHORT $LN85@cckd_comp
  0077f	8b 84 24 90 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+16]
  00786	39 84 24 8c 03
	00 00		 cmp	 DWORD PTR cdevhdr$[rsp+12], eax
  0078d	75 32		 jne	 SHORT $LN85@cckd_comp
  0078f	83 bc 24 94 03
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+20], 0
  00797	75 28		 jne	 SHORT $LN85@cckd_comp
  00799	83 bc 24 98 03
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+24], 0
  007a1	75 1e		 jne	 SHORT $LN85@cckd_comp
  007a3	83 bc 24 9c 03
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+28], 0
  007ab	75 14		 jne	 SHORT $LN85@cckd_comp
  007ad	83 bc 24 a0 03
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+32], 0
  007b5	75 0a		 jne	 SHORT $LN85@cckd_comp
  007b7	83 bc 24 a4 03
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+36], 0
  007bf	74 0b		 je	 SHORT $LN84@cckd_comp
$LN85@cckd_comp:

; 510  :         relocate = 1;

  007c1	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR relocate$[rsp], 1
$LN84@cckd_comp:

; 511  : 
; 512  :     /*---------------------------------------------------------------
; 513  :      * Build empty l2 tables
; 514  :      *---------------------------------------------------------------*/
; 515  :     memset( &zero_l2, 0, CCKD_L2TAB_SIZE );

  007cc	48 8d 84 24 80
	07 00 00	 lea	 rax, QWORD PTR zero_l2$[rsp]
  007d4	48 8b f8	 mov	 rdi, rax
  007d7	33 c0		 xor	 eax, eax
  007d9	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  007de	f3 aa		 rep stosb

; 516  :     if (cdevhdr.cdh_nullfmt != 0)

  007e0	0f b6 84 24 ac
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+44]
  007e8	85 c0		 test	 eax, eax
  007ea	74 5a		 je	 SHORT $LN86@cckd_comp

; 517  :         for (i = 0; i < 256; i++)

  007ec	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  007f4	eb 0a		 jmp	 SHORT $LN4@cckd_comp
$LN2@cckd_comp:
  007f6	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  007fa	ff c0		 inc	 eax
  007fc	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN4@cckd_comp:
  00800	81 7c 24 70 00
	01 00 00	 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  00808	7d 3c		 jge	 SHORT $LN3@cckd_comp

; 518  :             zero_l2[i].L2_len = zero_l2[i].L2_size = cdevhdr.cdh_nullfmt;

  0080a	0f b6 84 24 ac
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+44]
  00812	66 89 84 24 c0
	00 00 00	 mov	 WORD PTR tv309[rsp], ax
  0081a	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0081f	0f b7 8c 24 c0
	00 00 00	 movzx	 ecx, WORD PTR tv309[rsp]
  00827	66 89 8c c4 86
	07 00 00	 mov	 WORD PTR zero_l2$[rsp+rax*8+6], cx
  0082f	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00834	0f b7 8c 24 c0
	00 00 00	 movzx	 ecx, WORD PTR tv309[rsp]
  0083c	66 89 8c c4 84
	07 00 00	 mov	 WORD PTR zero_l2$[rsp+rax*8+4], cx
  00844	eb b0		 jmp	 SHORT $LN2@cckd_comp
$LN3@cckd_comp:
$LN86@cckd_comp:

; 519  :     memset (&ff_l2, 0xff, CCKD_L2TAB_SIZE);

  00846	48 8d 84 24 80
	0f 00 00	 lea	 rax, QWORD PTR ff_l2$[rsp]
  0084e	48 8b f8	 mov	 rdi, rax
  00851	b8 ff 00 00 00	 mov	 eax, 255		; 000000ffH
  00856	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0085b	f3 aa		 rep stosb

; 520  : 
; 521  :     /*---------------------------------------------------------------
; 522  :      * Read the l1 table
; 523  :      *---------------------------------------------------------------*/
; 524  :     l1size = len = cdevhdr.num_L1tab * CCKD_L1ENT_SIZE;

  0085d	48 63 84 24 84
	03 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  00865	48 c1 e0 02	 shl	 rax, 2
  00869	89 84 24 80 00
	00 00		 mov	 DWORD PTR len$[rsp], eax
  00870	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  00877	89 84 24 c8 00
	00 00		 mov	 DWORD PTR l1size$[rsp], eax

; 525  :     if ((l1 = malloc (len)) == NULL)

  0087e	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  00886	48 8b c8	 mov	 rcx, rax
  00889	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0088f	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR l1$[rsp], rax
  00897	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR l1$[rsp], 0
  008a0	75 05		 jne	 SHORT $LN87@cckd_comp

; 526  :         goto comp_malloc_error;

  008a2	e9 48 2b 00 00	 jmp	 $comp_malloc_error$280
$LN87@cckd_comp:

; 527  :     off = CCKD_L1TAB_POS;

  008a7	48 c7 84 24 90
	00 00 00 00 04
	00 00		 mov	 QWORD PTR off$[rsp], 1024 ; 00000400H

; 528  :     if (lseek (fd, off, SEEK_SET) < 0)

  008b3	45 33 c0	 xor	 r8d, r8d
  008b6	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  008be	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  008c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  008cb	48 85 c0	 test	 rax, rax
  008ce	7d 05		 jge	 SHORT $LN88@cckd_comp

; 529  :         goto comp_lseek_error;

  008d0	e9 c2 23 00 00	 jmp	 $comp_lseek_error$276
$LN88@cckd_comp:

; 530  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  008d5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  008dc	83 38 00	 cmp	 DWORD PTR [rax], 0
  008df	74 43		 je	 SHORT $LN89@cckd_comp
  008e1	41 b8 01 00 00
	00		 mov	 r8d, 1
  008e7	33 d2		 xor	 edx, edx
  008e9	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  008f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  008f6	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv363[rsp], rax
  008fe	b9 02 00 00 00	 mov	 ecx, 2
  00903	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00909	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR tv363[rsp]
  00911	4c 8b c1	 mov	 r8, rcx
  00914	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169204
  0091b	48 8b c8	 mov	 rcx, rax
  0091e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN89@cckd_comp:

; 531  :     if ((rc = read (fd, l1, len)) != len)

  00924	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  0092c	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  00934	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0093b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00941	89 84 24 88 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  00948	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  0094f	39 84 24 88 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  00956	74 05		 je	 SHORT $LN90@cckd_comp

; 532  :         goto comp_read_error;

  00958	e9 8a 25 00 00	 jmp	 $comp_read_error$277
$LN90@cckd_comp:

; 533  : 
; 534  :     /*---------------------------------------------------------------
; 535  :      * Build the space table
; 536  :      *---------------------------------------------------------------*/
; 537  :     n = 1 + 1 + 1 + cdevhdr.num_L1tab + 1;

  0095d	8b 84 24 84 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  00964	83 c0 04	 add	 eax, 4
  00967	89 84 24 bc 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 538  :     for (i = 0; i < cdevhdr.num_L1tab; i++)

  0096e	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00976	eb 0a		 jmp	 SHORT $LN7@cckd_comp
$LN5@cckd_comp:
  00978	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  0097c	ff c0		 inc	 eax
  0097e	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN7@cckd_comp:
  00982	8b 84 24 84 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  00989	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  0098d	7d 3b		 jge	 SHORT $LN6@cckd_comp

; 539  :         if (l1[i] != CCKD_NOSIZE && l1[i] != CCKD_MAXSIZE)

  0098f	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00994	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  0099c	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  009a0	74 26		 je	 SHORT $LN91@cckd_comp
  009a2	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  009a7	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  009af	83 3c 81 ff	 cmp	 DWORD PTR [rcx+rax*4], -1 ; ffffffffH
  009b3	74 13		 je	 SHORT $LN91@cckd_comp

; 540  :             n += 256;

  009b5	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  009bc	05 00 01 00 00	 add	 eax, 256		; 00000100H
  009c1	89 84 24 bc 00
	00 00		 mov	 DWORD PTR n$[rsp], eax
$LN91@cckd_comp:
  009c8	eb ae		 jmp	 SHORT $LN5@cckd_comp
$LN6@cckd_comp:

; 541  :     len = sizeof(SPCTAB);

  009ca	c7 84 24 80 00
	00 00 18 00 00
	00		 mov	 DWORD PTR len$[rsp], 24

; 542  :     if ((spctab = calloc (n, len)) == NULL)

  009d5	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  009dd	48 63 8c 24 bc
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  009e5	48 8b d0	 mov	 rdx, rax
  009e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  009ee	48 89 44 24 78	 mov	 QWORD PTR spctab$[rsp], rax
  009f3	48 83 7c 24 78
	00		 cmp	 QWORD PTR spctab$[rsp], 0
  009f9	75 05		 jne	 SHORT $LN92@cckd_comp

; 543  :         goto comp_calloc_error;

  009fb	e9 49 2c 00 00	 jmp	 $comp_calloc_error$281
$LN92@cckd_comp:

; 544  :     s = 0;

  00a00	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR s$[rsp], 0

; 545  :     spctab[s].spc_typ = SPCTAB_DEVHDR;

  00a08	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a0d	48 6b c0 18	 imul	 rax, rax, 24
  00a11	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00a16	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1

; 546  :     spctab[s].spc_val = -1;

  00a1a	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a1f	48 6b c0 18	 imul	 rax, rax, 24
  00a23	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00a28	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 547  :     spctab[s].spc_off = 0;

  00a30	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a35	48 6b c0 18	 imul	 rax, rax, 24
  00a39	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00a3e	c7 44 01 0c 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+12], 0

; 548  :     spctab[s].spc_len =

  00a46	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a4b	48 6b c0 18	 imul	 rax, rax, 24
  00a4f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00a54	c7 44 01 14 00
	02 00 00	 mov	 DWORD PTR [rcx+rax+20], 512 ; 00000200H
  00a5c	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a61	48 6b c0 18	 imul	 rax, rax, 24
  00a65	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00a6a	c7 44 01 10 00
	02 00 00	 mov	 DWORD PTR [rcx+rax+16], 512 ; 00000200H

; 549  :     spctab[s].spc_siz = CKD_DEVHDR_SIZE;
; 550  :     s++;

  00a72	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  00a76	ff c0		 inc	 eax
  00a78	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 551  :     spctab[s].spc_typ = SPCTAB_CDEVHDR;

  00a7c	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a81	48 6b c0 18	 imul	 rax, rax, 24
  00a85	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00a8a	c6 04 01 02	 mov	 BYTE PTR [rcx+rax], 2

; 552  :     spctab[s].spc_val = -1;

  00a8e	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00a93	48 6b c0 18	 imul	 rax, rax, 24
  00a97	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00a9c	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 553  :     spctab[s].spc_off = CCKD_DEVHDR_POS;

  00aa4	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00aa9	48 6b c0 18	 imul	 rax, rax, 24
  00aad	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00ab2	c7 44 01 0c 00
	02 00 00	 mov	 DWORD PTR [rcx+rax+12], 512 ; 00000200H

; 554  :     spctab[s].spc_len =

  00aba	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00abf	48 6b c0 18	 imul	 rax, rax, 24
  00ac3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00ac8	c7 44 01 14 00
	02 00 00	 mov	 DWORD PTR [rcx+rax+20], 512 ; 00000200H
  00ad0	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00ad5	48 6b c0 18	 imul	 rax, rax, 24
  00ad9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00ade	c7 44 01 10 00
	02 00 00	 mov	 DWORD PTR [rcx+rax+16], 512 ; 00000200H

; 555  :     spctab[s].spc_siz = CCKD_DEVHDR_SIZE;
; 556  :     s++;

  00ae6	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  00aea	ff c0		 inc	 eax
  00aec	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 557  :     spctab[s].spc_typ = SPCTAB_L1;

  00af0	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00af5	48 6b c0 18	 imul	 rax, rax, 24
  00af9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00afe	c6 04 01 03	 mov	 BYTE PTR [rcx+rax], 3

; 558  :     spctab[s].spc_val = -1;

  00b02	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b07	48 6b c0 18	 imul	 rax, rax, 24
  00b0b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00b10	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 559  :     spctab[s].spc_off = CCKD_L1TAB_POS;

  00b18	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b1d	48 6b c0 18	 imul	 rax, rax, 24
  00b21	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00b26	c7 44 01 0c 00
	04 00 00	 mov	 DWORD PTR [rcx+rax+12], 1024 ; 00000400H

; 560  :     spctab[s].spc_len =

  00b2e	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b33	48 6b c0 18	 imul	 rax, rax, 24
  00b37	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00b3c	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR l1size$[rsp]
  00b43	89 54 01 14	 mov	 DWORD PTR [rcx+rax+20], edx
  00b47	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b4c	48 6b c0 18	 imul	 rax, rax, 24
  00b50	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00b55	8b 94 24 c8 00
	00 00		 mov	 edx, DWORD PTR l1size$[rsp]
  00b5c	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 561  :     spctab[s].spc_siz = l1size;
; 562  :     s++;

  00b60	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  00b64	ff c0		 inc	 eax
  00b66	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 563  :     spctab[s].spc_typ = SPCTAB_EOF;

  00b6a	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b6f	48 6b c0 18	 imul	 rax, rax, 24
  00b73	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00b78	c6 04 01 08	 mov	 BYTE PTR [rcx+rax], 8

; 564  :     spctab[s].spc_val = -1;

  00b7c	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b81	48 6b c0 18	 imul	 rax, rax, 24
  00b85	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00b8a	c7 44 01 04 ff
	ff ff ff	 mov	 DWORD PTR [rcx+rax+4], -1

; 565  :     spctab[s].spc_off = (U32)fst.st_size;

  00b92	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00b97	48 6b c0 18	 imul	 rax, rax, 24
  00b9b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00ba0	8b 94 24 58 03
	00 00		 mov	 edx, DWORD PTR fst$[rsp+24]
  00ba7	89 54 01 0c	 mov	 DWORD PTR [rcx+rax+12], edx

; 566  :     spctab[s].spc_len =

  00bab	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00bb0	48 6b c0 18	 imul	 rax, rax, 24
  00bb4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00bb9	c7 44 01 14 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+20], 0
  00bc1	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00bc6	48 6b c0 18	 imul	 rax, rax, 24
  00bca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00bcf	c7 44 01 10 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+16], 0

; 567  :     spctab[s].spc_siz = 0;
; 568  :     s++;

  00bd7	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  00bdb	ff c0		 inc	 eax
  00bdd	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 569  : 
; 570  :     for (i = 0; i < cdevhdr.num_L1tab; i++)

  00be1	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00be9	eb 0a		 jmp	 SHORT $LN10@cckd_comp
$LN8@cckd_comp:
  00beb	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00bef	ff c0		 inc	 eax
  00bf1	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN10@cckd_comp:
  00bf5	8b 84 24 84 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  00bfc	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  00c00	0f 8d b3 00 00
	00		 jge	 $LN9@cckd_comp

; 571  :         if (l1[i] != CCKD_NOSIZE && l1[i] != CCKD_MAXSIZE)

  00c06	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00c0b	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  00c13	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  00c17	0f 84 97 00 00
	00		 je	 $LN93@cckd_comp
  00c1d	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00c22	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  00c2a	83 3c 81 ff	 cmp	 DWORD PTR [rcx+rax*4], -1 ; ffffffffH
  00c2e	0f 84 80 00 00
	00		 je	 $LN93@cckd_comp

; 572  :         {
; 573  :             spctab[s].spc_typ = SPCTAB_L2;

  00c34	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00c39	48 6b c0 18	 imul	 rax, rax, 24
  00c3d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00c42	c6 04 01 04	 mov	 BYTE PTR [rcx+rax], 4

; 574  :             spctab[s].spc_val = i;

  00c46	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00c4b	48 6b c0 18	 imul	 rax, rax, 24
  00c4f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00c54	8b 54 24 70	 mov	 edx, DWORD PTR i$[rsp]
  00c58	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 575  :             spctab[s].spc_off = l1[i];

  00c5c	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00c61	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR s$[rsp]
  00c66	48 6b c9 18	 imul	 rcx, rcx, 24
  00c6a	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  00c6f	48 8b bc 24 a8
	00 00 00	 mov	 rdi, QWORD PTR l1$[rsp]
  00c77	8b 04 87	 mov	 eax, DWORD PTR [rdi+rax*4]
  00c7a	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 576  :             spctab[s].spc_len =

  00c7e	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00c83	48 6b c0 18	 imul	 rax, rax, 24
  00c87	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00c8c	c7 44 01 14 00
	08 00 00	 mov	 DWORD PTR [rcx+rax+20], 2048 ; 00000800H
  00c94	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00c99	48 6b c0 18	 imul	 rax, rax, 24
  00c9d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00ca2	c7 44 01 10 00
	08 00 00	 mov	 DWORD PTR [rcx+rax+16], 2048 ; 00000800H

; 577  :             spctab[s].spc_siz = CCKD_L2TAB_SIZE;
; 578  :             s++;

  00caa	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  00cae	ff c0		 inc	 eax
  00cb0	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax
$LN93@cckd_comp:

; 579  :         }

  00cb4	e9 32 ff ff ff	 jmp	 $LN8@cckd_comp
$LN9@cckd_comp:

; 580  :     qsort (spctab, s, sizeof(SPCTAB), comp_spctab_sort);

  00cb9	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00cbe	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:comp_spctab_sort
  00cc5	41 b8 18 00 00
	00		 mov	 r8d, 24
  00ccb	48 8b d0	 mov	 rdx, rax
  00cce	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00cd3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 581  : 
; 582  :     /*---------------------------------------------------------------
; 583  :      * Read level 2 tables
; 584  :      *---------------------------------------------------------------*/
; 585  :     n = cdevhdr.num_L1tab;

  00cd9	8b 84 24 84 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  00ce0	89 84 24 bc 00
	00 00		 mov	 DWORD PTR n$[rsp], eax

; 586  :     len = sizeof (void *);

  00ce7	c7 84 24 80 00
	00 00 08 00 00
	00		 mov	 DWORD PTR len$[rsp], 8

; 587  :     if ((l2 = calloc (n, len)) == NULL)

  00cf2	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  00cfa	48 63 8c 24 bc
	00 00 00	 movsxd	 rcx, DWORD PTR n$[rsp]
  00d02	48 8b d0	 mov	 rdx, rax
  00d05	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00d0b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR l2$[rsp], rax
  00d13	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR l2$[rsp], 0
  00d1c	75 05		 jne	 SHORT $LN94@cckd_comp

; 588  :         goto comp_calloc_error;

  00d1e	e9 26 29 00 00	 jmp	 $comp_calloc_error$281
$LN94@cckd_comp:

; 589  :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  00d23	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00d2b	eb 0a		 jmp	 SHORT $LN13@cckd_comp
$LN11@cckd_comp:
  00d2d	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00d31	ff c0		 inc	 eax
  00d33	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN13@cckd_comp:
  00d37	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00d3c	48 6b c0 18	 imul	 rax, rax, 24
  00d40	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00d45	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00d49	83 f8 08	 cmp	 eax, 8
  00d4c	0f 84 8e 03 00
	00		 je	 $LN12@cckd_comp

; 590  :     {
; 591  :         if (spctab[i].spc_typ != SPCTAB_L2) continue;

  00d52	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00d57	48 6b c0 18	 imul	 rax, rax, 24
  00d5b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00d60	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00d64	83 f8 04	 cmp	 eax, 4
  00d67	74 02		 je	 SHORT $LN95@cckd_comp
  00d69	eb c2		 jmp	 SHORT $LN11@cckd_comp
$LN95@cckd_comp:

; 592  :         l = spctab[i].spc_val;

  00d6b	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00d70	48 6b c0 18	 imul	 rax, rax, 24
  00d74	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00d79	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  00d7d	89 84 24 98 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 593  :         len = CCKD_L2TAB_SIZE;

  00d84	c7 84 24 80 00
	00 00 00 08 00
	00		 mov	 DWORD PTR len$[rsp], 2048 ; 00000800H

; 594  :         if ((l2[l] = malloc (len)) == NULL)

  00d8f	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  00d97	48 8b c8	 mov	 rcx, rax
  00d9a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00da0	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv550[rsp], rax
  00da8	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00db0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  00db8	48 8b 94 24 b8
	01 00 00	 mov	 rdx, QWORD PTR tv550[rsp]
  00dc0	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
  00dc4	48 83 bc 24 b8
	01 00 00 00	 cmp	 QWORD PTR tv550[rsp], 0
  00dcd	75 05		 jne	 SHORT $LN96@cckd_comp

; 595  :             goto comp_malloc_error;

  00dcf	e9 1b 26 00 00	 jmp	 $comp_malloc_error$280
$LN96@cckd_comp:

; 596  :         off = (off_t)spctab[i].spc_off;

  00dd4	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00dd9	48 6b c0 18	 imul	 rax, rax, 24
  00ddd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00de2	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  00de6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 597  :         if (lseek (fd, off, SEEK_SET) < 0)

  00dee	45 33 c0	 xor	 r8d, r8d
  00df1	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00df9	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00e00	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00e06	48 85 c0	 test	 rax, rax
  00e09	7d 05		 jge	 SHORT $LN97@cckd_comp

; 598  :             goto comp_lseek_error;

  00e0b	e9 87 1e 00 00	 jmp	 $comp_lseek_error$276
$LN97@cckd_comp:

; 599  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00e10	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00e17	83 38 00	 cmp	 DWORD PTR [rax], 0
  00e1a	74 43		 je	 SHORT $LN98@cckd_comp
  00e1c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00e22	33 d2		 xor	 edx, edx
  00e24	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00e2b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00e31	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv569[rsp], rax
  00e39	b9 02 00 00 00	 mov	 ecx, 2
  00e3e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00e44	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR tv569[rsp]
  00e4c	4c 8b c1	 mov	 r8, rcx
  00e4f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169214
  00e56	48 8b c8	 mov	 rcx, rax
  00e59	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN98@cckd_comp:

; 600  :         if ((rc = read (fd, l2[l], len)) != len)

  00e5f	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00e67	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  00e6f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  00e77	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00e7b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  00e82	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00e88	89 84 24 88 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  00e8f	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  00e96	39 84 24 88 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  00e9d	74 05		 je	 SHORT $LN99@cckd_comp

; 601  :             goto comp_read_error;

  00e9f	e9 43 20 00 00	 jmp	 $comp_read_error$277
$LN99@cckd_comp:

; 602  :         for (j = 0; j < 256; j++)

  00ea4	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  00eaf	eb 10		 jmp	 SHORT $LN16@cckd_comp
$LN14@cckd_comp:
  00eb1	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  00eb8	ff c0		 inc	 eax
  00eba	89 84 24 8c 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN16@cckd_comp:
  00ec1	81 bc 24 8c 00
	00 00 00 01 00
	00		 cmp	 DWORD PTR j$[rsp], 256	; 00000100H
  00ecc	0f 8d 2d 01 00
	00		 jge	 $LN15@cckd_comp

; 603  :         {
; 604  :             if (l2[l][j].L2_trkoff == CCKD_NOSIZE || l2[l][j].L2_trkoff == CCKD_MAXSIZE)

  00ed2	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00eda	48 63 8c 24 8c
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  00ee2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  00eea	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00eee	83 3c c8 00	 cmp	 DWORD PTR [rax+rcx*8], 0
  00ef2	74 22		 je	 SHORT $LN101@cckd_comp
  00ef4	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00efc	48 63 8c 24 8c
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  00f04	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  00f0c	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00f10	83 3c c8 ff	 cmp	 DWORD PTR [rax+rcx*8], -1 ; ffffffffH
  00f14	75 02		 jne	 SHORT $LN100@cckd_comp
$LN101@cckd_comp:

; 605  :                 continue;

  00f16	eb 99		 jmp	 SHORT $LN14@cckd_comp
$LN100@cckd_comp:

; 606  :             spctab[s].spc_typ = SPCTAB_TRK;

  00f18	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  00f1d	48 6b c0 18	 imul	 rax, rax, 24
  00f21	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00f26	c6 04 01 05	 mov	 BYTE PTR [rcx+rax], 5

; 607  :             spctab[s].spc_val = spctab[i].spc_val*256 + j;

  00f2a	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00f2f	48 6b c0 18	 imul	 rax, rax, 24
  00f33	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00f38	69 44 01 04 00
	01 00 00	 imul	 eax, DWORD PTR [rcx+rax+4], 256 ; 00000100H
  00f40	03 84 24 8c 00
	00 00		 add	 eax, DWORD PTR j$[rsp]
  00f47	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR s$[rsp]
  00f4c	48 6b c9 18	 imul	 rcx, rcx, 24
  00f50	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  00f55	89 44 0a 04	 mov	 DWORD PTR [rdx+rcx+4], eax

; 608  :             spctab[s].spc_off = l2[l][j].L2_trkoff;

  00f59	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00f61	48 63 8c 24 8c
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  00f69	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  00f71	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00f75	48 63 54 24 74	 movsxd	 rdx, DWORD PTR s$[rsp]
  00f7a	48 6b d2 18	 imul	 rdx, rdx, 24
  00f7e	48 8b 7c 24 78	 mov	 rdi, QWORD PTR spctab$[rsp]
  00f83	8b 04 c8	 mov	 eax, DWORD PTR [rax+rcx*8]
  00f86	89 44 17 0c	 mov	 DWORD PTR [rdi+rdx+12], eax

; 609  :             spctab[s].spc_len = l2[l][j].L2_len;

  00f8a	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00f92	48 63 8c 24 8c
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  00f9a	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  00fa2	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00fa6	48 63 54 24 74	 movsxd	 rdx, DWORD PTR s$[rsp]
  00fab	48 6b d2 18	 imul	 rdx, rdx, 24
  00faf	0f b7 44 c8 04	 movzx	 eax, WORD PTR [rax+rcx*8+4]
  00fb4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00fb9	89 44 11 10	 mov	 DWORD PTR [rcx+rdx+16], eax

; 610  :             spctab[s].spc_siz = l2[l][j].L2_size;

  00fbd	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  00fc5	48 63 8c 24 8c
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  00fcd	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  00fd5	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  00fd9	48 63 54 24 74	 movsxd	 rdx, DWORD PTR s$[rsp]
  00fde	48 6b d2 18	 imul	 rdx, rdx, 24
  00fe2	0f b7 44 c8 06	 movzx	 eax, WORD PTR [rax+rcx*8+6]
  00fe7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  00fec	89 44 11 14	 mov	 DWORD PTR [rcx+rdx+20], eax

; 611  :             s++;

  00ff0	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  00ff4	ff c0		 inc	 eax
  00ff6	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 612  :         } /* for each l2 entry */

  00ffa	e9 b2 fe ff ff	 jmp	 $LN14@cckd_comp
$LN15@cckd_comp:

; 613  :         /* check if empty l2 table */
; 614  :         if (memcmp (l2[l], &zero_l2, CCKD_L2TAB_SIZE) == 0
; 615  :          || memcmp (l2[l], &ff_l2,   CCKD_L2TAB_SIZE) == 0)

  00fff	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  01007	41 b8 00 08 00
	00		 mov	 r8d, 2048		; 00000800H
  0100d	48 8d 94 24 80
	07 00 00	 lea	 rdx, QWORD PTR zero_l2$[rsp]
  01015	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  0101d	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  01021	e8 00 00 00 00	 call	 memcmp
  01026	85 c0		 test	 eax, eax
  01028	74 2f		 je	 SHORT $LN103@cckd_comp
  0102a	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  01032	41 b8 00 08 00
	00		 mov	 r8d, 2048		; 00000800H
  01038	48 8d 94 24 80
	0f 00 00	 lea	 rdx, QWORD PTR ff_l2$[rsp]
  01040	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  01048	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0104c	e8 00 00 00 00	 call	 memcmp
  01051	85 c0		 test	 eax, eax
  01053	0f 85 82 00 00
	00		 jne	 $LN102@cckd_comp
$LN103@cckd_comp:

; 616  :         {
; 617  :             l1[l] = l2[l][0].L2_trkoff; /* CCKD_NOSIZE or CCKD_MAXSIZE */

  01059	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  01061	b9 08 00 00 00	 mov	 ecx, 8
  01066	48 6b c9 00	 imul	 rcx, rcx, 0
  0106a	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  01072	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  01076	48 63 94 24 98
	00 00 00	 movsxd	 rdx, DWORD PTR l$[rsp]
  0107e	48 8b bc 24 a8
	00 00 00	 mov	 rdi, QWORD PTR l1$[rsp]
  01086	8b 04 08	 mov	 eax, DWORD PTR [rax+rcx]
  01089	89 04 97	 mov	 DWORD PTR [rdi+rdx*4], eax

; 618  :             spctab[i].spc_typ = SPCTAB_NONE;

  0108c	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01091	48 6b c0 18	 imul	 rax, rax, 24
  01095	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0109a	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 619  :             free (l2[l]);

  0109e	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  010a6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  010ae	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  010b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 620  :             l2[l] = NULL;

  010b8	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  010c0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  010c8	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0

; 621  :             relocate = 1;

  010d0	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR relocate$[rsp], 1
$LN102@cckd_comp:

; 622  :         }
; 623  :     } /* for each space */

  010db	e9 4d fc ff ff	 jmp	 $LN11@cckd_comp
$LN12@cckd_comp:

; 624  :     qsort (spctab, s, sizeof(SPCTAB), comp_spctab_sort);

  010e0	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  010e5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:comp_spctab_sort
  010ec	41 b8 18 00 00
	00		 mov	 r8d, 24
  010f2	48 8b d0	 mov	 rdx, rax
  010f5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  010fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN17@cckd_comp:

; 625  :     while (spctab[s-1].spc_typ == SPCTAB_NONE) s--;

  01100	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01104	ff c8		 dec	 eax
  01106	48 98		 cdqe
  01108	48 6b c0 18	 imul	 rax, rax, 24
  0110c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01111	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01115	85 c0		 test	 eax, eax
  01117	75 0c		 jne	 SHORT $LN18@cckd_comp
  01119	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  0111d	ff c8		 dec	 eax
  0111f	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax
  01123	eb db		 jmp	 SHORT $LN17@cckd_comp
$LN18@cckd_comp:

; 626  :     /* set relocate flag if last space is free space */
; 627  :     if (spctab[s-2].spc_off + spctab[s-2].spc_len != spctab[s-1].spc_off)

  01125	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01129	83 e8 02	 sub	 eax, 2
  0112c	48 98		 cdqe
  0112e	48 6b c0 18	 imul	 rax, rax, 24
  01132	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  01136	83 e9 02	 sub	 ecx, 2
  01139	48 63 c9	 movsxd	 rcx, ecx
  0113c	48 6b c9 18	 imul	 rcx, rcx, 24
  01140	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01145	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  01149	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  0114e	03 44 0a 10	 add	 eax, DWORD PTR [rdx+rcx+16]
  01152	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  01156	ff c9		 dec	 ecx
  01158	48 63 c9	 movsxd	 rcx, ecx
  0115b	48 6b c9 18	 imul	 rcx, rcx, 24
  0115f	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01164	3b 44 0a 0c	 cmp	 eax, DWORD PTR [rdx+rcx+12]
  01168	74 0b		 je	 SHORT $LN104@cckd_comp

; 628  :         relocate = 1;

  0116a	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR relocate$[rsp], 1
$LN104@cckd_comp:

; 629  : 
; 630  :     /*---------------------------------------------------------------
; 631  :      * relocate l2 tables in order
; 632  :      *---------------------------------------------------------------*/
; 633  : 
; 634  :     /* determine l2 area */
; 635  :     l2area = CCKD_L1TAB_POS + l1size;

  01175	48 63 84 24 c8
	00 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  0117d	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  01183	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR l2area$[rsp], rax

; 636  :     for (i = 0; i < cdevhdr.num_L1tab; i++)

  0118b	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  01193	eb 0a		 jmp	 SHORT $LN21@cckd_comp
$LN19@cckd_comp:
  01195	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  01199	ff c0		 inc	 eax
  0119b	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN21@cckd_comp:
  0119f	8b 84 24 84 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  011a6	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  011aa	7d 65		 jge	 SHORT $LN20@cckd_comp

; 637  :     {
; 638  :         if (l1[i] == CCKD_NOSIZE || l1[i] == CCKD_MAXSIZE)

  011ac	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  011b1	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  011b9	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  011bd	74 13		 je	 SHORT $LN106@cckd_comp
  011bf	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  011c4	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  011cc	83 3c 81 ff	 cmp	 DWORD PTR [rcx+rax*4], -1 ; ffffffffH
  011d0	75 02		 jne	 SHORT $LN105@cckd_comp
$LN106@cckd_comp:

; 639  :             continue;

  011d2	eb c1		 jmp	 SHORT $LN19@cckd_comp
$LN105@cckd_comp:

; 640  :         if (l1[i] != l2area)

  011d4	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  011d9	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  011e1	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  011e4	48 3b 84 24 80
	01 00 00	 cmp	 rax, QWORD PTR l2area$[rsp]
  011ec	74 0b		 je	 SHORT $LN107@cckd_comp

; 641  :             relocate = 1;

  011ee	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR relocate$[rsp], 1
$LN107@cckd_comp:

; 642  :         l2area += CCKD_L2TAB_SIZE;

  011f9	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR l2area$[rsp]
  01201	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  01207	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR l2area$[rsp], rax

; 643  :     }

  0120f	eb 84		 jmp	 SHORT $LN19@cckd_comp
$LN20@cckd_comp:

; 644  : 
; 645  :     /* quick return if all l2 tables are orderered and no free space */
; 646  :     if (!relocate)

  01211	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR relocate$[rsp], 0
  01219	0f 85 5f 02 00
	00		 jne	 $LN108@cckd_comp

; 647  :     {
; 648  :         for (i = 1; spctab[i].spc_typ != SPCTAB_EOF; i++)

  0121f	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  01227	eb 0a		 jmp	 SHORT $LN24@cckd_comp
$LN22@cckd_comp:
  01229	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  0122d	ff c0		 inc	 eax
  0122f	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN24@cckd_comp:
  01233	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01238	48 6b c0 18	 imul	 rax, rax, 24
  0123c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01241	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01245	83 f8 08	 cmp	 eax, 8
  01248	74 43		 je	 SHORT $LN23@cckd_comp

; 649  :             if (spctab[i-1].spc_off + spctab[i-1].spc_len != spctab[i].spc_off)

  0124a	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  0124e	ff c8		 dec	 eax
  01250	48 98		 cdqe
  01252	48 6b c0 18	 imul	 rax, rax, 24
  01256	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  0125a	ff c9		 dec	 ecx
  0125c	48 63 c9	 movsxd	 rcx, ecx
  0125f	48 6b c9 18	 imul	 rcx, rcx, 24
  01263	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01268	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  0126c	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01271	03 44 0a 10	 add	 eax, DWORD PTR [rdx+rcx+16]
  01275	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR i$[rsp]
  0127a	48 6b c9 18	 imul	 rcx, rcx, 24
  0127e	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01283	3b 44 0a 0c	 cmp	 eax, DWORD PTR [rdx+rcx+12]
  01287	74 02		 je	 SHORT $LN109@cckd_comp

; 650  :                 break;

  01289	eb 02		 jmp	 SHORT $LN23@cckd_comp
$LN109@cckd_comp:
  0128b	eb 9c		 jmp	 SHORT $LN22@cckd_comp
$LN23@cckd_comp:

; 651  :         if (spctab[i].spc_typ == SPCTAB_EOF)

  0128d	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01292	48 6b c0 18	 imul	 rax, rax, 24
  01296	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0129b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0129f	83 f8 08	 cmp	 eax, 8
  012a2	0f 85 d6 01 00
	00		 jne	 $LN110@cckd_comp

; 652  :         {
; 653  :             if(dev->batch)

  012a8	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  012b0	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  012b6	c1 e8 0a	 shr	 eax, 10
  012b9	83 e0 01	 and	 eax, 1
  012bc	85 c0		 test	 eax, eax
  012be	0f 84 dd 00 00
	00		 je	 $LN111@cckd_comp

; 654  :                 FWRMSG( stdout, HHC00358, "I", LCSS_DEVNUM, dev->filename);

  012c4	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  012cd	74 15		 je	 SHORT $LN194@cckd_comp
  012cf	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  012d7	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  012db	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv780[rsp], eax
  012e2	eb 0b		 jmp	 SHORT $LN195@cckd_comp
$LN194@cckd_comp:
  012e4	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv780[rsp], 0
$LN195@cckd_comp:
  012ef	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  012f8	74 17		 je	 SHORT $LN196@cckd_comp
  012fa	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01302	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01306	d1 f8		 sar	 eax, 1
  01308	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv786[rsp], eax
  0130f	eb 0b		 jmp	 SHORT $LN197@cckd_comp
$LN196@cckd_comp:
  01311	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv786[rsp], 0
$LN197@cckd_comp:
  0131c	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01324	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0132a	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR tv775[rsp], rax
  01332	b9 01 00 00 00	 mov	 ecx, 1
  01337	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0133d	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR tv775[rsp]
  01345	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0134a	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv780[rsp]
  01351	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01355	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR tv786[rsp]
  0135c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01360	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169229
  01367	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0136c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169230
  01373	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01378	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0137d	41 b9 03 00 00
	00		 mov	 r9d, 3
  01383	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169231
  0138a	ba 8e 02 00 00	 mov	 edx, 654		; 0000028eH
  0138f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169232
  01396	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0139c	e9 d8 00 00 00	 jmp	 $LN112@cckd_comp
$LN111@cckd_comp:

; 655  :             else
; 656  :                 WRMSG( HHC00358, "I", LCSS_DEVNUM, dev->filename);

  013a1	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  013aa	74 15		 je	 SHORT $LN198@cckd_comp
  013ac	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  013b4	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  013b8	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv802[rsp], eax
  013bf	eb 0b		 jmp	 SHORT $LN199@cckd_comp
$LN198@cckd_comp:
  013c1	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv802[rsp], 0
$LN199@cckd_comp:
  013cc	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  013d5	74 17		 je	 SHORT $LN200@cckd_comp
  013d7	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  013df	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  013e3	d1 f8		 sar	 eax, 1
  013e5	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv808[rsp], eax
  013ec	eb 0b		 jmp	 SHORT $LN201@cckd_comp
$LN200@cckd_comp:
  013ee	c7 84 24 fc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv808[rsp], 0
$LN201@cckd_comp:
  013f9	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  01401	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  01407	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv797[rsp], rax
  0140f	b9 01 00 00 00	 mov	 ecx, 1
  01414	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0141a	48 8b 8c 24 28
	02 00 00	 mov	 rcx, QWORD PTR tv797[rsp]
  01422	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01427	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR tv802[rsp]
  0142e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01432	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR tv808[rsp]
  01439	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0143d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169233
  01444	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01449	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169234
  01450	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01455	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0145a	41 b9 03 00 00
	00		 mov	 r9d, 3
  01460	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169235
  01467	ba 90 02 00 00	 mov	 edx, 656		; 00000290H
  0146c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169236
  01473	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN112@cckd_comp:

; 657  :             goto comp_return_ok;

  01479	e9 d1 14 00 00	 jmp	 $comp_return_ok$282
$LN110@cckd_comp:
$LN108@cckd_comp:

; 658  :         }
; 659  :     }
; 660  : 
; 661  :     /* file will be updated */
; 662  :     cdevhdr.cdh_opts |= CCKD_OPT_OPENRW;

  0147e	0f b6 84 24 83
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  01486	83 c8 40	 or	 eax, 64			; 00000040H
  01489	88 84 24 83 03
	00 00		 mov	 BYTE PTR cdevhdr$[rsp+3], al

; 663  : 
; 664  :     /* calculate track size within the l2 area */
; 665  :     for (i = rlen = 0; spctab[i].spc_off < l2area; i++)

  01490	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rlen$[rsp], 0
  0149b	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR rlen$[rsp]
  014a2	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
  014a6	eb 0a		 jmp	 SHORT $LN27@cckd_comp
$LN25@cckd_comp:
  014a8	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  014ac	ff c0		 inc	 eax
  014ae	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN27@cckd_comp:
  014b2	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  014b7	48 6b c0 18	 imul	 rax, rax, 24
  014bb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  014c0	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  014c4	48 3b 84 24 80
	01 00 00	 cmp	 rax, QWORD PTR l2area$[rsp]
  014cc	7d 3f		 jge	 SHORT $LN26@cckd_comp

; 666  :         if (spctab[i].spc_typ == SPCTAB_TRK)

  014ce	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  014d3	48 6b c0 18	 imul	 rax, rax, 24
  014d7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  014dc	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  014e0	83 f8 05	 cmp	 eax, 5
  014e3	75 26		 jne	 SHORT $LN113@cckd_comp

; 667  :             rlen += sizeof(spctab[i].spc_val) + sizeof(spctab[i].spc_len)

  014e5	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  014ea	48 6b c0 18	 imul	 rax, rax, 24
  014ee	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  014f3	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  014f7	48 63 8c 24 b8
	00 00 00	 movsxd	 rcx, DWORD PTR rlen$[rsp]
  014ff	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  01504	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rlen$[rsp], eax
$LN113@cckd_comp:
  0150b	eb 9b		 jmp	 SHORT $LN25@cckd_comp
$LN26@cckd_comp:

; 668  :                  +  spctab[i].spc_len;
; 669  : 
; 670  :     /* read any tracks in the l2area into rbuf */
; 671  :     if ((len = rlen) > 0)

  0150d	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR rlen$[rsp]
  01514	89 84 24 80 00
	00 00		 mov	 DWORD PTR len$[rsp], eax
  0151b	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR len$[rsp], 0
  01523	0f 8e 3d 02 00
	00		 jle	 $LN114@cckd_comp

; 672  :     {
; 673  :         if ((rbuf = malloc (len)) == NULL)

  01529	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  01531	48 8b c8	 mov	 rcx, rax
  01534	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0153a	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR rbuf$[rsp], rax
  01542	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR rbuf$[rsp], 0
  0154b	75 05		 jne	 SHORT $LN115@cckd_comp

; 674  :             goto comp_malloc_error;

  0154d	e9 9d 1e 00 00	 jmp	 $comp_malloc_error$280
$LN115@cckd_comp:

; 675  :         for (i = 0, p = rbuf; spctab[i].spc_off < l2area; i++)

  01552	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0155a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  01562	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax
  0156a	eb 0a		 jmp	 SHORT $LN30@cckd_comp
$LN28@cckd_comp:
  0156c	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  01570	ff c0		 inc	 eax
  01572	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN30@cckd_comp:
  01576	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0157b	48 6b c0 18	 imul	 rax, rax, 24
  0157f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01584	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  01588	48 3b 84 24 80
	01 00 00	 cmp	 rax, QWORD PTR l2area$[rsp]
  01590	0f 8d 8b 01 00
	00		 jge	 $LN29@cckd_comp

; 676  :         {
; 677  :             if (spctab[i].spc_typ != SPCTAB_TRK) continue;

  01596	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0159b	48 6b c0 18	 imul	 rax, rax, 24
  0159f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  015a4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  015a8	83 f8 05	 cmp	 eax, 5
  015ab	74 02		 je	 SHORT $LN116@cckd_comp
  015ad	eb bd		 jmp	 SHORT $LN28@cckd_comp
$LN116@cckd_comp:

; 678  :             memcpy (p, &spctab[i].spc_val, sizeof(spctab[i].spc_val));

  015af	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  015b4	48 6b c0 18	 imul	 rax, rax, 24
  015b8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  015c0	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  015c5	8b 44 02 04	 mov	 eax, DWORD PTR [rdx+rax+4]
  015c9	89 01		 mov	 DWORD PTR [rcx], eax

; 679  :             p += sizeof(spctab[i].spc_val);

  015cb	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  015d3	48 83 c0 04	 add	 rax, 4
  015d7	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax

; 680  :             memcpy (p, &spctab[i].spc_len, sizeof(spctab[i].spc_len));

  015df	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  015e4	48 6b c0 18	 imul	 rax, rax, 24
  015e8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  015f0	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  015f5	8b 44 02 10	 mov	 eax, DWORD PTR [rdx+rax+16]
  015f9	89 01		 mov	 DWORD PTR [rcx], eax

; 681  :             p += sizeof(spctab[i].spc_len);

  015fb	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01603	48 83 c0 04	 add	 rax, 4
  01607	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax

; 682  :             off = (off_t)spctab[i].spc_off;

  0160f	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01614	48 6b c0 18	 imul	 rax, rax, 24
  01618	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0161d	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  01621	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 683  :             if (lseek (fd, off, SEEK_SET) < 0)

  01629	45 33 c0	 xor	 r8d, r8d
  0162c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  01634	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0163b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01641	48 85 c0	 test	 rax, rax
  01644	7d 05		 jge	 SHORT $LN117@cckd_comp

; 684  :                 goto comp_lseek_error;

  01646	e9 4c 16 00 00	 jmp	 $comp_lseek_error$276
$LN117@cckd_comp:

; 685  :             gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0164b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  01652	83 38 00	 cmp	 DWORD PTR [rax], 0
  01655	74 43		 je	 SHORT $LN118@cckd_comp
  01657	41 b8 01 00 00
	00		 mov	 r8d, 1
  0165d	33 d2		 xor	 edx, edx
  0165f	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01666	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0166c	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv933[rsp], rax
  01674	b9 02 00 00 00	 mov	 ecx, 2
  01679	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0167f	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR tv933[rsp]
  01687	4c 8b c1	 mov	 r8, rcx
  0168a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169243
  01691	48 8b c8	 mov	 rcx, rax
  01694	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN118@cckd_comp:

; 686  :             len = spctab[i].spc_len;

  0169a	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0169f	48 6b c0 18	 imul	 rax, rax, 24
  016a3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  016a8	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  016ac	89 84 24 80 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 687  :             if ((rc = read (fd, p, len)) != len)

  016b3	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  016bb	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  016c3	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  016ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  016d0	89 84 24 88 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  016d7	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  016de	39 84 24 88 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  016e5	74 05		 je	 SHORT $LN119@cckd_comp

; 688  :                 goto comp_read_error;

  016e7	e9 fb 17 00 00	 jmp	 $comp_read_error$277
$LN119@cckd_comp:

; 689  :             p += len;

  016ec	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  016f4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  016fc	48 03 c8	 add	 rcx, rax
  016ff	48 8b c1	 mov	 rax, rcx
  01702	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax

; 690  :             spctab[i].spc_typ = SPCTAB_NONE;

  0170a	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0170f	48 6b c0 18	 imul	 rax, rax, 24
  01713	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01718	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 691  :         } /* for each space in the l2 area */

  0171c	e9 4b fe ff ff	 jmp	 $LN28@cckd_comp
$LN29@cckd_comp:

; 692  :         qsort (spctab, s, sizeof(SPCTAB), comp_spctab_sort);

  01721	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01726	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:comp_spctab_sort
  0172d	41 b8 18 00 00
	00		 mov	 r8d, 24
  01733	48 8b d0	 mov	 rdx, rax
  01736	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0173b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN31@cckd_comp:

; 693  :         while (spctab[s-1].spc_typ == SPCTAB_NONE) s--;

  01741	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01745	ff c8		 dec	 eax
  01747	48 98		 cdqe
  01749	48 6b c0 18	 imul	 rax, rax, 24
  0174d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01752	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01756	85 c0		 test	 eax, eax
  01758	75 0c		 jne	 SHORT $LN32@cckd_comp
  0175a	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  0175e	ff c8		 dec	 eax
  01760	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax
  01764	eb db		 jmp	 SHORT $LN31@cckd_comp
$LN32@cckd_comp:
$LN114@cckd_comp:

; 694  :     } /* if any tracks to relocate */
; 695  : 
; 696  :     /* remove all l2 tables from the space table */
; 697  :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  01766	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0176e	eb 0a		 jmp	 SHORT $LN35@cckd_comp
$LN33@cckd_comp:
  01770	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  01774	ff c0		 inc	 eax
  01776	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN35@cckd_comp:
  0177a	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0177f	48 6b c0 18	 imul	 rax, rax, 24
  01783	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01788	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0178c	83 f8 08	 cmp	 eax, 8
  0178f	74 2b		 je	 SHORT $LN34@cckd_comp

; 698  :         if (spctab[i].spc_typ == SPCTAB_L2)

  01791	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01796	48 6b c0 18	 imul	 rax, rax, 24
  0179a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0179f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  017a3	83 f8 04	 cmp	 eax, 4
  017a6	75 12		 jne	 SHORT $LN120@cckd_comp

; 699  :             spctab[i].spc_typ = SPCTAB_NONE;

  017a8	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  017ad	48 6b c0 18	 imul	 rax, rax, 24
  017b1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  017b6	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN120@cckd_comp:
  017ba	eb b4		 jmp	 SHORT $LN33@cckd_comp
$LN34@cckd_comp:

; 700  :     qsort (spctab, s, sizeof(SPCTAB), comp_spctab_sort);

  017bc	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  017c1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:comp_spctab_sort
  017c8	41 b8 18 00 00
	00		 mov	 r8d, 24
  017ce	48 8b d0	 mov	 rdx, rax
  017d1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  017d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort
$LN36@cckd_comp:

; 701  :     while (spctab[s-1].spc_typ == SPCTAB_NONE) s--;

  017dc	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  017e0	ff c8		 dec	 eax
  017e2	48 98		 cdqe
  017e4	48 6b c0 18	 imul	 rax, rax, 24
  017e8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  017ed	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  017f1	85 c0		 test	 eax, eax
  017f3	75 0c		 jne	 SHORT $LN37@cckd_comp
  017f5	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  017f9	ff c8		 dec	 eax
  017fb	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax
  017ff	eb db		 jmp	 SHORT $LN36@cckd_comp
$LN37@cckd_comp:

; 702  : 
; 703  :     /* add all l2 tables at their ordered offsets */
; 704  :     off = CCKD_L1TAB_POS + l1size;

  01801	48 63 84 24 c8
	00 00 00	 movsxd	 rax, DWORD PTR l1size$[rsp]
  01809	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  0180f	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 705  :     for (i = 0; i < cdevhdr.num_L1tab; i++)

  01817	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0181f	eb 0a		 jmp	 SHORT $LN40@cckd_comp
$LN38@cckd_comp:
  01821	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  01825	ff c0		 inc	 eax
  01827	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN40@cckd_comp:
  0182b	8b 84 24 84 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  01832	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  01836	0f 8d ba 00 00
	00		 jge	 $LN39@cckd_comp

; 706  :     {
; 707  :         if (l1[i] == CCKD_NOSIZE || l1[i] == CCKD_MAXSIZE)

  0183c	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01841	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  01849	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  0184d	74 13		 je	 SHORT $LN122@cckd_comp
  0184f	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01854	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  0185c	83 3c 81 ff	 cmp	 DWORD PTR [rcx+rax*4], -1 ; ffffffffH
  01860	75 02		 jne	 SHORT $LN121@cckd_comp
$LN122@cckd_comp:

; 708  :             continue;

  01862	eb bd		 jmp	 SHORT $LN38@cckd_comp
$LN121@cckd_comp:

; 709  :         spctab[s].spc_typ = SPCTAB_L2;

  01864	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01869	48 6b c0 18	 imul	 rax, rax, 24
  0186d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01872	c6 04 01 04	 mov	 BYTE PTR [rcx+rax], 4

; 710  :         spctab[s].spc_val = i;

  01876	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  0187b	48 6b c0 18	 imul	 rax, rax, 24
  0187f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01884	8b 54 24 70	 mov	 edx, DWORD PTR i$[rsp]
  01888	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 711  :         spctab[s].spc_off = (U32)off;

  0188c	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01891	48 6b c0 18	 imul	 rax, rax, 24
  01895	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0189a	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR off$[rsp]
  018a1	89 54 01 0c	 mov	 DWORD PTR [rcx+rax+12], edx

; 712  :         spctab[s].spc_len =

  018a5	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  018aa	48 6b c0 18	 imul	 rax, rax, 24
  018ae	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  018b3	c7 44 01 14 00
	08 00 00	 mov	 DWORD PTR [rcx+rax+20], 2048 ; 00000800H
  018bb	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  018c0	48 6b c0 18	 imul	 rax, rax, 24
  018c4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  018c9	c7 44 01 10 00
	08 00 00	 mov	 DWORD PTR [rcx+rax+16], 2048 ; 00000800H

; 713  :         spctab[s].spc_siz = CCKD_L2TAB_SIZE;
; 714  :         s++;

  018d1	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  018d5	ff c0		 inc	 eax
  018d7	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 715  :         off += CCKD_L2TAB_SIZE;

  018db	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR off$[rsp]
  018e3	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  018e9	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 716  :     }

  018f1	e9 2b ff ff ff	 jmp	 $LN38@cckd_comp
$LN39@cckd_comp:

; 717  :     qsort (spctab, s, sizeof(SPCTAB), comp_spctab_sort);

  018f6	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  018fb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:comp_spctab_sort
  01902	41 b8 18 00 00
	00		 mov	 r8d, 24
  01908	48 8b d0	 mov	 rdx, rax
  0190b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01910	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 718  :     /* set end-of-file position */
; 719  :     spctab[s-1].spc_off = spctab[s-2].spc_off + spctab[s-2].spc_len;

  01916	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  0191a	83 e8 02	 sub	 eax, 2
  0191d	48 98		 cdqe
  0191f	48 6b c0 18	 imul	 rax, rax, 24
  01923	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  01927	83 e9 02	 sub	 ecx, 2
  0192a	48 63 c9	 movsxd	 rcx, ecx
  0192d	48 6b c9 18	 imul	 rcx, rcx, 24
  01931	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01936	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  0193a	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  0193f	03 44 0a 10	 add	 eax, DWORD PTR [rdx+rcx+16]
  01943	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  01947	ff c9		 dec	 ecx
  01949	48 63 c9	 movsxd	 rcx, ecx
  0194c	48 6b c9 18	 imul	 rcx, rcx, 24
  01950	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01955	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 720  : 
; 721  :     /*---------------------------------------------------------------
; 722  :      * Perform compression
; 723  :      *---------------------------------------------------------------*/
; 724  : 
; 725  :     /* move spaces left */
; 726  :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  01959	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  01961	eb 0a		 jmp	 SHORT $LN43@cckd_comp
$LN41@cckd_comp:
  01963	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  01967	ff c0		 inc	 eax
  01969	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN43@cckd_comp:
  0196d	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01972	48 6b c0 18	 imul	 rax, rax, 24
  01976	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0197b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0197f	83 f8 08	 cmp	 eax, 8
  01982	0f 84 53 03 00
	00		 je	 $LN42@cckd_comp

; 727  :     {
; 728  :         /* ignore contiguous spaces */
; 729  :         if (spctab[i].spc_off + spctab[i].spc_len == spctab[i+1].spc_off)

  01988	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0198d	48 6b c0 18	 imul	 rax, rax, 24
  01991	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR i$[rsp]
  01996	48 6b c9 18	 imul	 rcx, rcx, 24
  0199a	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  0199f	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  019a3	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  019a8	03 44 0a 10	 add	 eax, DWORD PTR [rdx+rcx+16]
  019ac	8b 4c 24 70	 mov	 ecx, DWORD PTR i$[rsp]
  019b0	ff c1		 inc	 ecx
  019b2	48 63 c9	 movsxd	 rcx, ecx
  019b5	48 6b c9 18	 imul	 rcx, rcx, 24
  019b9	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  019be	3b 44 0a 0c	 cmp	 eax, DWORD PTR [rdx+rcx+12]
  019c2	75 02		 jne	 SHORT $LN123@cckd_comp

; 730  :             continue;

  019c4	eb 9d		 jmp	 SHORT $LN41@cckd_comp
$LN123@cckd_comp:

; 731  : 
; 732  :         /* found a gap */
; 733  :         off = (off_t)spctab[i+1].spc_off;

  019c6	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  019ca	ff c0		 inc	 eax
  019cc	48 98		 cdqe
  019ce	48 6b c0 18	 imul	 rax, rax, 24
  019d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  019d7	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  019db	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 734  : 
; 735  :         /* figure out how much we can read */
; 736  :         for (len = 0, j = i + 1; spctab[j].spc_typ != SPCTAB_EOF; j++)

  019e3	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR len$[rsp], 0
  019ee	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  019f2	ff c0		 inc	 eax
  019f4	89 84 24 8c 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
  019fb	eb 10		 jmp	 SHORT $LN46@cckd_comp
$LN44@cckd_comp:
  019fd	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  01a04	ff c0		 inc	 eax
  01a06	89 84 24 8c 00
	00 00		 mov	 DWORD PTR j$[rsp], eax
$LN46@cckd_comp:
  01a0d	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  01a15	48 6b c0 18	 imul	 rax, rax, 24
  01a19	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01a1e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01a22	83 f8 08	 cmp	 eax, 8
  01a25	0f 84 19 01 00
	00		 je	 $LN45@cckd_comp

; 737  :         {
; 738  :             if (len + spctab[j].spc_len > sizeof(buf))

  01a2b	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  01a33	48 6b c0 18	 imul	 rax, rax, 24
  01a37	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01a3c	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  01a40	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  01a47	03 c8		 add	 ecx, eax
  01a49	8b c1		 mov	 eax, ecx
  01a4b	8b c0		 mov	 eax, eax
  01a4d	48 3d 00 00 04
	00		 cmp	 rax, 262144		; 00040000H
  01a53	76 05		 jbe	 SHORT $LN124@cckd_comp

; 739  :                 break;

  01a55	e9 ea 00 00 00	 jmp	 $LN45@cckd_comp
$LN124@cckd_comp:

; 740  :             next = spctab[j].spc_off + spctab[j].spc_len;

  01a5a	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  01a62	48 6b c0 18	 imul	 rax, rax, 24
  01a66	48 63 8c 24 8c
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  01a6e	48 6b c9 18	 imul	 rcx, rcx, 24
  01a72	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01a77	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  01a7b	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01a80	03 44 0a 10	 add	 eax, DWORD PTR [rdx+rcx+16]
  01a84	89 84 24 98 01
	00 00		 mov	 DWORD PTR next$[rsp], eax

; 741  :             spctab[j].spc_off = spctab[i].spc_off + spctab[i].spc_len + len;

  01a8b	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01a90	48 6b c0 18	 imul	 rax, rax, 24
  01a94	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR i$[rsp]
  01a99	48 6b c9 18	 imul	 rcx, rcx, 24
  01a9d	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01aa2	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  01aa6	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01aab	03 44 0a 10	 add	 eax, DWORD PTR [rdx+rcx+16]
  01aaf	03 84 24 80 00
	00 00		 add	 eax, DWORD PTR len$[rsp]
  01ab6	48 63 8c 24 8c
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  01abe	48 6b c9 18	 imul	 rcx, rcx, 24
  01ac2	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01ac7	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 742  :             spctab[j].spc_siz = spctab[j].spc_len;

  01acb	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  01ad3	48 6b c0 18	 imul	 rax, rax, 24
  01ad7	48 63 8c 24 8c
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  01adf	48 6b c9 18	 imul	 rcx, rcx, 24
  01ae3	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01ae8	48 8b 7c 24 78	 mov	 rdi, QWORD PTR spctab$[rsp]
  01aed	8b 44 07 10	 mov	 eax, DWORD PTR [rdi+rax+16]
  01af1	89 44 0a 14	 mov	 DWORD PTR [rdx+rcx+20], eax

; 743  :             len += spctab[j].spc_len;

  01af5	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  01afd	48 6b c0 18	 imul	 rax, rax, 24
  01b01	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01b06	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  01b0a	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR len$[rsp]
  01b11	03 c8		 add	 ecx, eax
  01b13	8b c1		 mov	 eax, ecx
  01b15	89 84 24 80 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 744  :             if (next != spctab[j+1].spc_off)

  01b1c	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  01b23	ff c0		 inc	 eax
  01b25	48 98		 cdqe
  01b27	48 6b c0 18	 imul	 rax, rax, 24
  01b2b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01b30	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  01b34	39 84 24 98 01
	00 00		 cmp	 DWORD PTR next$[rsp], eax
  01b3b	74 02		 je	 SHORT $LN125@cckd_comp

; 745  :                 break;

  01b3d	eb 05		 jmp	 SHORT $LN45@cckd_comp
$LN125@cckd_comp:

; 746  :         } /* search for contiguous spaces */

  01b3f	e9 b9 fe ff ff	 jmp	 $LN44@cckd_comp
$LN45@cckd_comp:

; 747  : 
; 748  :         /* this can happen if the next space is end-of-file */
; 749  :         if (len == 0)

  01b44	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR len$[rsp], 0
  01b4c	75 05		 jne	 SHORT $LN126@cckd_comp

; 750  :             continue;

  01b4e	e9 10 fe ff ff	 jmp	 $LN41@cckd_comp
$LN126@cckd_comp:

; 751  : 
; 752  :         /* read the image(s) to be relocated */
; 753  :         if (lseek (fd, off, SEEK_SET) < 0)

  01b53	45 33 c0	 xor	 r8d, r8d
  01b56	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  01b5e	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01b65	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01b6b	48 85 c0	 test	 rax, rax
  01b6e	7d 05		 jge	 SHORT $LN127@cckd_comp

; 754  :             goto comp_lseek_error;

  01b70	e9 22 11 00 00	 jmp	 $comp_lseek_error$276
$LN127@cckd_comp:

; 755  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  01b75	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  01b7c	83 38 00	 cmp	 DWORD PTR [rax], 0
  01b7f	74 43		 je	 SHORT $LN128@cckd_comp
  01b81	41 b8 01 00 00
	00		 mov	 r8d, 1
  01b87	33 d2		 xor	 edx, edx
  01b89	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01b90	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01b96	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv1147[rsp], rax
  01b9e	b9 02 00 00 00	 mov	 ecx, 2
  01ba3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01ba9	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR tv1147[rsp]
  01bb1	4c 8b c1	 mov	 r8, rcx
  01bb4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169254
  01bbb	48 8b c8	 mov	 rcx, rax
  01bbe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN128@cckd_comp:

; 756  :         if ((rc = read (fd, buf, len)) != len)

  01bc4	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  01bcc	48 8d 94 24 00
	18 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  01bd4	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01bdb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  01be1	89 84 24 88 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  01be8	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  01bef	39 84 24 88 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  01bf6	74 05		 je	 SHORT $LN129@cckd_comp

; 757  :             goto comp_write_error;

  01bf8	e9 6e 15 00 00	 jmp	 $comp_write_error$283
$LN129@cckd_comp:

; 758  : 
; 759  :         /* write the images */
; 760  :         off = (off_t)spctab[i].spc_off + spctab[i].spc_len;

  01bfd	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  01c02	48 6b c0 18	 imul	 rax, rax, 24
  01c06	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01c0b	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  01c0f	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR i$[rsp]
  01c14	48 6b c9 18	 imul	 rcx, rcx, 24
  01c18	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01c1d	8b 4c 0a 10	 mov	 ecx, DWORD PTR [rdx+rcx+16]
  01c21	48 03 c1	 add	 rax, rcx
  01c24	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 761  :         if (lseek (fd, off, SEEK_SET) < 0)

  01c2c	45 33 c0	 xor	 r8d, r8d
  01c2f	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  01c37	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01c3e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01c44	48 85 c0	 test	 rax, rax
  01c47	7d 05		 jge	 SHORT $LN130@cckd_comp

; 762  :             goto comp_lseek_error;

  01c49	e9 49 10 00 00	 jmp	 $comp_lseek_error$276
$LN130@cckd_comp:

; 763  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  01c4e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  01c55	83 38 00	 cmp	 DWORD PTR [rax], 0
  01c58	74 43		 je	 SHORT $LN131@cckd_comp
  01c5a	41 b8 01 00 00
	00		 mov	 r8d, 1
  01c60	33 d2		 xor	 edx, edx
  01c62	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01c69	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01c6f	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv1178[rsp], rax
  01c77	b9 02 00 00 00	 mov	 ecx, 2
  01c7c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01c82	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR tv1178[rsp]
  01c8a	4c 8b c1	 mov	 r8, rcx
  01c8d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169258
  01c94	48 8b c8	 mov	 rcx, rax
  01c97	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN131@cckd_comp:

; 764  :         if ((rc = write (fd, buf, len)) != len)

  01c9d	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  01ca5	48 8d 94 24 00
	18 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  01cad	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01cb4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  01cba	89 84 24 88 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  01cc1	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  01cc8	39 84 24 88 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  01ccf	74 05		 je	 SHORT $LN132@cckd_comp

; 765  :             goto comp_write_error;

  01cd1	e9 95 14 00 00	 jmp	 $comp_write_error$283
$LN132@cckd_comp:

; 766  :     }

  01cd6	e9 88 fc ff ff	 jmp	 $LN41@cckd_comp
$LN42@cckd_comp:

; 767  : 
; 768  :     /* adjust the size of the file */
; 769  :     spctab[s-1].spc_off = spctab[s-2].spc_off + spctab[s-2].spc_len;

  01cdb	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01cdf	83 e8 02	 sub	 eax, 2
  01ce2	48 98		 cdqe
  01ce4	48 6b c0 18	 imul	 rax, rax, 24
  01ce8	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  01cec	83 e9 02	 sub	 ecx, 2
  01cef	48 63 c9	 movsxd	 rcx, ecx
  01cf2	48 6b c9 18	 imul	 rcx, rcx, 24
  01cf6	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01cfb	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  01cff	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01d04	03 44 0a 10	 add	 eax, DWORD PTR [rdx+rcx+16]
  01d08	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  01d0c	ff c9		 dec	 ecx
  01d0e	48 63 c9	 movsxd	 rcx, ecx
  01d11	48 6b c9 18	 imul	 rcx, rcx, 24
  01d15	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01d1a	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax

; 770  : 
; 771  :     /*---------------------------------------------------------------
; 772  :      * Write spaces relocated from the l2area to the end of the file
; 773  :      *---------------------------------------------------------------*/
; 774  :     off = (off_t)spctab[s-1].spc_off;

  01d1e	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01d22	ff c8		 dec	 eax
  01d24	48 98		 cdqe
  01d26	48 6b c0 18	 imul	 rax, rax, 24
  01d2a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01d2f	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  01d33	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 775  :     p = rbuf;

  01d3b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  01d43	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax
$LN47@cckd_comp:

; 776  :     while (rlen)

  01d4b	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR rlen$[rsp], 0
  01d53	0f 84 de 01 00
	00		 je	 $LN48@cckd_comp

; 777  :     {
; 778  :         spctab[s].spc_typ = SPCTAB_TRK;

  01d59	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01d5e	48 6b c0 18	 imul	 rax, rax, 24
  01d62	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01d67	c6 04 01 05	 mov	 BYTE PTR [rcx+rax], 5

; 779  :         spctab[s].spc_off = (U32)off;

  01d6b	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01d70	48 6b c0 18	 imul	 rax, rax, 24
  01d74	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01d79	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR off$[rsp]
  01d80	89 54 01 0c	 mov	 DWORD PTR [rcx+rax+12], edx

; 780  :         memcpy (&spctab[s].spc_val, p, sizeof(spctab[s].spc_val));

  01d84	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01d89	48 6b c0 18	 imul	 rax, rax, 24
  01d8d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01d92	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01d9a	8b 12		 mov	 edx, DWORD PTR [rdx]
  01d9c	89 54 01 04	 mov	 DWORD PTR [rcx+rax+4], edx

; 781  :         p += sizeof(spctab[s].spc_val);

  01da0	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01da8	48 83 c0 04	 add	 rax, 4
  01dac	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax

; 782  :         memcpy (&spctab[s].spc_len, p, sizeof(spctab[s].spc_len));

  01db4	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01db9	48 6b c0 18	 imul	 rax, rax, 24
  01dbd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01dc2	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01dca	8b 12		 mov	 edx, DWORD PTR [rdx]
  01dcc	89 54 01 10	 mov	 DWORD PTR [rcx+rax+16], edx

; 783  :         spctab[s].spc_siz = spctab[s].spc_len;

  01dd0	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01dd5	48 6b c0 18	 imul	 rax, rax, 24
  01dd9	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR s$[rsp]
  01dde	48 6b c9 18	 imul	 rcx, rcx, 24
  01de2	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01de7	48 8b 7c 24 78	 mov	 rdi, QWORD PTR spctab$[rsp]
  01dec	8b 44 07 10	 mov	 eax, DWORD PTR [rdi+rax+16]
  01df0	89 44 0a 14	 mov	 DWORD PTR [rdx+rcx+20], eax

; 784  :         p += sizeof(spctab[s].spc_len);

  01df4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  01dfc	48 83 c0 04	 add	 rax, 4
  01e00	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax

; 785  : 
; 786  :         if (lseek (fd, off, SEEK_SET) < 0)

  01e08	45 33 c0	 xor	 r8d, r8d
  01e0b	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  01e13	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01e1a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01e20	48 85 c0	 test	 rax, rax
  01e23	7d 05		 jge	 SHORT $LN133@cckd_comp

; 787  :             goto comp_lseek_error;

  01e25	e9 6d 0e 00 00	 jmp	 $comp_lseek_error$276
$LN133@cckd_comp:

; 788  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  01e2a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  01e31	83 38 00	 cmp	 DWORD PTR [rax], 0
  01e34	74 43		 je	 SHORT $LN134@cckd_comp
  01e36	41 b8 01 00 00
	00		 mov	 r8d, 1
  01e3c	33 d2		 xor	 edx, edx
  01e3e	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01e45	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  01e4b	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR tv1261[rsp], rax
  01e53	b9 02 00 00 00	 mov	 ecx, 2
  01e58	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01e5e	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR tv1261[rsp]
  01e66	4c 8b c1	 mov	 r8, rcx
  01e69	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169262
  01e70	48 8b c8	 mov	 rcx, rax
  01e73	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN134@cckd_comp:

; 789  :         len = spctab[s].spc_len;

  01e79	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01e7e	48 6b c0 18	 imul	 rax, rax, 24
  01e82	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01e87	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  01e8b	89 84 24 80 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 790  :         if ((rc = write (fd, p, len)) != len)

  01e92	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  01e9a	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  01ea2	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  01ea9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  01eaf	89 84 24 88 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  01eb6	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  01ebd	39 84 24 88 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  01ec4	74 05		 je	 SHORT $LN135@cckd_comp

; 791  :             goto comp_write_error;

  01ec6	e9 a0 12 00 00	 jmp	 $comp_write_error$283
$LN135@cckd_comp:

; 792  : 
; 793  :         p += len;

  01ecb	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  01ed3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  01edb	48 03 c8	 add	 rcx, rax
  01ede	48 8b c1	 mov	 rax, rcx
  01ee1	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax

; 794  :         off += len;

  01ee9	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  01ef1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  01ef9	48 03 c8	 add	 rcx, rax
  01efc	48 8b c1	 mov	 rax, rcx
  01eff	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 795  :         rlen -= len + sizeof(spctab[s].spc_val) + sizeof(spctab[s].spc_len);

  01f07	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR len$[rsp]
  01f0f	48 83 c0 08	 add	 rax, 8
  01f13	48 63 8c 24 b8
	00 00 00	 movsxd	 rcx, DWORD PTR rlen$[rsp]
  01f1b	48 2b c8	 sub	 rcx, rax
  01f1e	48 8b c1	 mov	 rax, rcx
  01f21	89 84 24 b8 00
	00 00		 mov	 DWORD PTR rlen$[rsp], eax

; 796  :         s++;

  01f28	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01f2c	ff c0		 inc	 eax
  01f2e	89 44 24 74	 mov	 DWORD PTR s$[rsp], eax

; 797  :     } /* for each relocated space in l2area */

  01f32	e9 14 fe ff ff	 jmp	 $LN47@cckd_comp
$LN48@cckd_comp:

; 798  : 
; 799  :     /* adjust the space table */
; 800  :     if (rbuf)

  01f37	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR rbuf$[rsp], 0
  01f40	74 7d		 je	 SHORT $LN136@cckd_comp

; 801  :     {
; 802  :         free (rbuf); rbuf = NULL;

  01f42	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rbuf$[rsp]
  01f4a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  01f50	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rbuf$[rsp], 0

; 803  :         qsort (spctab, s, sizeof(SPCTAB), comp_spctab_sort);

  01f5c	48 63 44 24 74	 movsxd	 rax, DWORD PTR s$[rsp]
  01f61	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:comp_spctab_sort
  01f68	41 b8 18 00 00
	00		 mov	 r8d, 24
  01f6e	48 8b d0	 mov	 rdx, rax
  01f71	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01f76	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 804  :         spctab[s-1].spc_off = spctab[s-2].spc_off + spctab[s-2].spc_len;

  01f7c	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01f80	83 e8 02	 sub	 eax, 2
  01f83	48 98		 cdqe
  01f85	48 6b c0 18	 imul	 rax, rax, 24
  01f89	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  01f8d	83 e9 02	 sub	 ecx, 2
  01f90	48 63 c9	 movsxd	 rcx, ecx
  01f93	48 6b c9 18	 imul	 rcx, rcx, 24
  01f97	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01f9c	8b 44 02 0c	 mov	 eax, DWORD PTR [rdx+rax+12]
  01fa0	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01fa5	03 44 0a 10	 add	 eax, DWORD PTR [rdx+rcx+16]
  01fa9	8b 4c 24 74	 mov	 ecx, DWORD PTR s$[rsp]
  01fad	ff c9		 dec	 ecx
  01faf	48 63 c9	 movsxd	 rcx, ecx
  01fb2	48 6b c9 18	 imul	 rcx, rcx, 24
  01fb6	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  01fbb	89 44 0a 0c	 mov	 DWORD PTR [rdx+rcx+12], eax
$LN136@cckd_comp:

; 805  :     }
; 806  : 
; 807  :     /*---------------------------------------------------------------
; 808  :      * Update the device header
; 809  :      *---------------------------------------------------------------*/
; 810  :     cdevhdr.cdh_size     =

  01fbf	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  01fc3	ff c8		 dec	 eax
  01fc5	48 98		 cdqe
  01fc7	48 6b c0 18	 imul	 rax, rax, 24
  01fcb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  01fd0	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  01fd4	89 84 24 90 03
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+16], eax
  01fdb	8b 84 24 90 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+16]
  01fe2	89 84 24 8c 03
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+12], eax

; 811  :     cdevhdr.cdh_used     = spctab[s-1].spc_off;
; 812  : 
; 813  :     cdevhdr.free_off     =

  01fe9	c7 84 24 a4 03
	00 00 00 00 00
	00		 mov	 DWORD PTR cdevhdr$[rsp+36], 0
  01ff4	8b 84 24 a4 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+36]
  01ffb	89 84 24 a0 03
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+32], eax
  02002	8b 84 24 a0 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+32]
  02009	89 84 24 9c 03
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+28], eax
  02010	8b 84 24 9c 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+28]
  02017	89 84 24 98 03
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+24], eax
  0201e	8b 84 24 98 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+24]
  02025	89 84 24 94 03
	00 00		 mov	 DWORD PTR cdevhdr$[rsp+20], eax

; 814  :     cdevhdr.free_total   =
; 815  :     cdevhdr.free_largest =
; 816  :     cdevhdr.free_num     =
; 817  :     cdevhdr.free_imbed   = 0;
; 818  : 
; 819  :     cdevhdr.cdh_vrm[0] = CCKD_VERSION;

  0202c	b8 01 00 00 00	 mov	 eax, 1
  02031	48 6b c0 00	 imul	 rax, rax, 0
  02035	c6 84 04 80 03
	00 00 00	 mov	 BYTE PTR cdevhdr$[rsp+rax], 0

; 820  :     cdevhdr.cdh_vrm[1] = CCKD_RELEASE;

  0203d	b8 01 00 00 00	 mov	 eax, 1
  02042	48 6b c0 01	 imul	 rax, rax, 1
  02046	c6 84 04 80 03
	00 00 03	 mov	 BYTE PTR cdevhdr$[rsp+rax], 3

; 821  :     cdevhdr.cdh_vrm[2] = CCKD_MODLVL;

  0204e	b8 01 00 00 00	 mov	 eax, 1
  02053	48 6b c0 02	 imul	 rax, rax, 2
  02057	c6 84 04 80 03
	00 00 01	 mov	 BYTE PTR cdevhdr$[rsp+rax], 1

; 822  : 
; 823  :     /*---------------------------------------------------------------
; 824  :      * Update the lookup tables
; 825  :      *---------------------------------------------------------------*/
; 826  :     for (i = 0; spctab[i].spc_typ != SPCTAB_EOF; i++)

  0205f	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  02067	eb 0a		 jmp	 SHORT $LN51@cckd_comp
$LN49@cckd_comp:
  02069	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  0206d	ff c0		 inc	 eax
  0206f	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN51@cckd_comp:
  02073	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02078	48 6b c0 18	 imul	 rax, rax, 24
  0207c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  02081	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02085	83 f8 08	 cmp	 eax, 8
  02088	0f 84 61 01 00
	00		 je	 $LN50@cckd_comp

; 827  :         if (spctab[i].spc_typ == SPCTAB_L2)

  0208e	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02093	48 6b c0 18	 imul	 rax, rax, 24
  02097	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  0209c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  020a0	83 f8 04	 cmp	 eax, 4
  020a3	75 35		 jne	 SHORT $LN137@cckd_comp

; 828  :             l1[spctab[i].spc_val] = spctab[i].spc_off;

  020a5	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  020aa	48 6b c0 18	 imul	 rax, rax, 24
  020ae	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR i$[rsp]
  020b3	48 6b c9 18	 imul	 rcx, rcx, 24
  020b7	48 8b 54 24 78	 mov	 rdx, QWORD PTR spctab$[rsp]
  020bc	48 63 4c 0a 04	 movsxd	 rcx, DWORD PTR [rdx+rcx+4]
  020c1	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  020c9	48 8b 7c 24 78	 mov	 rdi, QWORD PTR spctab$[rsp]
  020ce	8b 44 07 0c	 mov	 eax, DWORD PTR [rdi+rax+12]
  020d2	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  020d5	e9 10 01 00 00	 jmp	 $LN138@cckd_comp
$LN137@cckd_comp:

; 829  :         else if (spctab[i].spc_typ == SPCTAB_TRK)

  020da	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  020df	48 6b c0 18	 imul	 rax, rax, 24
  020e3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  020e8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  020ec	83 f8 05	 cmp	 eax, 5
  020ef	0f 85 f5 00 00
	00		 jne	 $LN139@cckd_comp

; 830  :         {
; 831  :             l = spctab[i].spc_val / 256;

  020f5	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  020fa	48 6b c0 18	 imul	 rax, rax, 24
  020fe	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  02103	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  02107	99		 cdq
  02108	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  0210e	03 c2		 add	 eax, edx
  02110	c1 f8 08	 sar	 eax, 8
  02113	89 84 24 98 00
	00 00		 mov	 DWORD PTR l$[rsp], eax

; 832  :             j = spctab[i].spc_val % 256;

  0211a	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0211f	48 6b c0 18	 imul	 rax, rax, 24
  02123	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  02128	8b 44 01 04	 mov	 eax, DWORD PTR [rcx+rax+4]
  0212c	99		 cdq
  0212d	81 e2 ff 00 00
	00		 and	 edx, 255		; 000000ffH
  02133	03 c2		 add	 eax, edx
  02135	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0213a	2b c2		 sub	 eax, edx
  0213c	89 84 24 8c 00
	00 00		 mov	 DWORD PTR j$[rsp], eax

; 833  :             l2[l][j].L2_trkoff  = spctab[i].spc_off;

  02143	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02148	48 6b c0 18	 imul	 rax, rax, 24
  0214c	48 63 8c 24 98
	00 00 00	 movsxd	 rcx, DWORD PTR l$[rsp]
  02154	48 63 94 24 8c
	00 00 00	 movsxd	 rdx, DWORD PTR j$[rsp]
  0215c	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR l2$[rsp]
  02164	48 8b 0c cf	 mov	 rcx, QWORD PTR [rdi+rcx*8]
  02168	48 8b 7c 24 78	 mov	 rdi, QWORD PTR spctab$[rsp]
  0216d	8b 44 07 0c	 mov	 eax, DWORD PTR [rdi+rax+12]
  02171	89 04 d1	 mov	 DWORD PTR [rcx+rdx*8], eax

; 834  :             l2[l][j].L2_len  =

  02174	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02179	48 6b c0 18	 imul	 rax, rax, 24
  0217d	48 63 8c 24 98
	00 00 00	 movsxd	 rcx, DWORD PTR l$[rsp]
  02185	48 63 94 24 8c
	00 00 00	 movsxd	 rdx, DWORD PTR j$[rsp]
  0218d	48 8b bc 24 a0
	00 00 00	 mov	 rdi, QWORD PTR l2$[rsp]
  02195	48 8b 0c cf	 mov	 rcx, QWORD PTR [rdi+rcx*8]
  02199	48 8b 7c 24 78	 mov	 rdi, QWORD PTR spctab$[rsp]
  0219e	0f b7 44 07 10	 movzx	 eax, WORD PTR [rdi+rax+16]
  021a3	66 89 44 d1 06	 mov	 WORD PTR [rcx+rdx*8+6], ax
  021a8	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR l$[rsp]
  021b0	48 63 8c 24 8c
	00 00 00	 movsxd	 rcx, DWORD PTR j$[rsp]
  021b8	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR l2$[rsp]
  021c0	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  021c4	48 63 94 24 98
	00 00 00	 movsxd	 rdx, DWORD PTR l$[rsp]
  021cc	48 63 bc 24 8c
	00 00 00	 movsxd	 rdi, DWORD PTR j$[rsp]
  021d4	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR l2$[rsp]
  021dc	49 8b 14 d0	 mov	 rdx, QWORD PTR [r8+rdx*8]
  021e0	0f b7 44 c8 06	 movzx	 eax, WORD PTR [rax+rcx*8+6]
  021e5	66 89 44 fa 04	 mov	 WORD PTR [rdx+rdi*8+4], ax
$LN139@cckd_comp:
$LN138@cckd_comp:

; 835  :             l2[l][j].L2_size = spctab[i].spc_len;
; 836  :         }

  021ea	e9 7a fe ff ff	 jmp	 $LN49@cckd_comp
$LN50@cckd_comp:

; 837  : 
; 838  :     /*---------------------------------------------------------------
; 839  :      * Write the cdevhdr, l1 table and l2 tables
; 840  :      *---------------------------------------------------------------*/
; 841  : 
; 842  :     /* write cdevhdr */
; 843  :     off = CCKD_DEVHDR_POS;

  021ef	48 c7 84 24 90
	00 00 00 00 02
	00 00		 mov	 QWORD PTR off$[rsp], 512 ; 00000200H

; 844  :     if (lseek (fd, off, SEEK_SET) < 0)

  021fb	45 33 c0	 xor	 r8d, r8d
  021fe	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  02206	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0220d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  02213	48 85 c0	 test	 rax, rax
  02216	7d 05		 jge	 SHORT $LN140@cckd_comp

; 845  :         goto comp_lseek_error;

  02218	e9 7a 0a 00 00	 jmp	 $comp_lseek_error$276
$LN140@cckd_comp:

; 846  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0221d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  02224	83 38 00	 cmp	 DWORD PTR [rax], 0
  02227	74 43		 je	 SHORT $LN141@cckd_comp
  02229	41 b8 01 00 00
	00		 mov	 r8d, 1
  0222f	33 d2		 xor	 edx, edx
  02231	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02238	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0223e	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv1406[rsp], rax
  02246	b9 02 00 00 00	 mov	 ecx, 2
  0224b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02251	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR tv1406[rsp]
  02259	4c 8b c1	 mov	 r8, rcx
  0225c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169270
  02263	48 8b c8	 mov	 rcx, rax
  02266	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN141@cckd_comp:

; 847  :     len = CCKD_DEVHDR_SIZE;

  0226c	c7 84 24 80 00
	00 00 00 02 00
	00		 mov	 DWORD PTR len$[rsp], 512 ; 00000200H

; 848  :     if ((rc = write (fd, &cdevhdr, len)) != len)

  02277	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  0227f	48 8d 94 24 80
	03 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  02287	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0228e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  02294	89 84 24 88 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  0229b	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  022a2	39 84 24 88 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  022a9	74 05		 je	 SHORT $LN142@cckd_comp

; 849  :         goto comp_write_error;

  022ab	e9 bb 0e 00 00	 jmp	 $comp_write_error$283
$LN142@cckd_comp:

; 850  : 
; 851  :     /* write l1 table */
; 852  :     off = CCKD_L1TAB_POS;

  022b0	48 c7 84 24 90
	00 00 00 00 04
	00 00		 mov	 QWORD PTR off$[rsp], 1024 ; 00000400H

; 853  :     if (lseek (fd, off, SEEK_SET) < 0)

  022bc	45 33 c0	 xor	 r8d, r8d
  022bf	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  022c7	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  022ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  022d4	48 85 c0	 test	 rax, rax
  022d7	7d 05		 jge	 SHORT $LN143@cckd_comp

; 854  :         goto comp_lseek_error;

  022d9	e9 b9 09 00 00	 jmp	 $comp_lseek_error$276
$LN143@cckd_comp:

; 855  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  022de	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  022e5	83 38 00	 cmp	 DWORD PTR [rax], 0
  022e8	74 43		 je	 SHORT $LN144@cckd_comp
  022ea	41 b8 01 00 00
	00		 mov	 r8d, 1
  022f0	33 d2		 xor	 edx, edx
  022f2	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  022f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  022ff	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv1426[rsp], rax
  02307	b9 02 00 00 00	 mov	 ecx, 2
  0230c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02312	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR tv1426[rsp]
  0231a	4c 8b c1	 mov	 r8, rcx
  0231d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169274
  02324	48 8b c8	 mov	 rcx, rax
  02327	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN144@cckd_comp:

; 856  :     len = l1size;

  0232d	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR l1size$[rsp]
  02334	89 84 24 80 00
	00 00		 mov	 DWORD PTR len$[rsp], eax

; 857  :     if ((rc = write (fd, l1, len)) != len)

  0233b	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  02343	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  0234b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02352	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  02358	89 84 24 88 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  0235f	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  02366	39 84 24 88 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  0236d	74 05		 je	 SHORT $LN145@cckd_comp

; 858  :         goto comp_write_error;

  0236f	e9 f7 0d 00 00	 jmp	 $comp_write_error$283
$LN145@cckd_comp:

; 859  : 
; 860  :     /* write l2 tables */
; 861  :     for (i = 0; i < cdevhdr.num_L1tab; i++)

  02374	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0237c	eb 0a		 jmp	 SHORT $LN54@cckd_comp
$LN52@cckd_comp:
  0237e	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  02382	ff c0		 inc	 eax
  02384	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN54@cckd_comp:
  02388	8b 84 24 84 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  0238f	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  02393	0f 8d 09 01 00
	00		 jge	 $LN53@cckd_comp

; 862  :         if (l1[i] != CCKD_NOSIZE && l1[i] != CCKD_MAXSIZE)

  02399	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  0239e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  023a6	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  023aa	0f 84 ed 00 00
	00		 je	 $LN146@cckd_comp
  023b0	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  023b5	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  023bd	83 3c 81 ff	 cmp	 DWORD PTR [rcx+rax*4], -1 ; ffffffffH
  023c1	0f 84 d6 00 00
	00		 je	 $LN146@cckd_comp

; 863  :         {
; 864  :             off = (off_t)l1[i];

  023c7	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  023cc	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  023d4	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  023d7	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 865  :             if (lseek (fd, off, SEEK_SET) < 0)

  023df	45 33 c0	 xor	 r8d, r8d
  023e2	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  023ea	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  023f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  023f7	48 85 c0	 test	 rax, rax
  023fa	7d 05		 jge	 SHORT $LN147@cckd_comp

; 866  :                 goto comp_lseek_error;

  023fc	e9 96 08 00 00	 jmp	 $comp_lseek_error$276
$LN147@cckd_comp:

; 867  :             gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  02401	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  02408	83 38 00	 cmp	 DWORD PTR [rax], 0
  0240b	74 43		 je	 SHORT $LN148@cckd_comp
  0240d	41 b8 01 00 00
	00		 mov	 r8d, 1
  02413	33 d2		 xor	 edx, edx
  02415	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0241c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  02422	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR tv1460[rsp], rax
  0242a	b9 02 00 00 00	 mov	 ecx, 2
  0242f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02435	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR tv1460[rsp]
  0243d	4c 8b c1	 mov	 r8, rcx
  02440	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169279
  02447	48 8b c8	 mov	 rcx, rax
  0244a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN148@cckd_comp:

; 868  :             len = CCKD_L2TAB_SIZE;

  02450	c7 84 24 80 00
	00 00 00 08 00
	00		 mov	 DWORD PTR len$[rsp], 2048 ; 00000800H

; 869  :             if ((rc = write (fd, l2[i], len)) != len)

  0245b	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02460	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  02468	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  02470	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  02474	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  0247b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  02481	89 84 24 88 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  02488	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  0248f	39 84 24 88 00
	00 00		 cmp	 DWORD PTR rc$[rsp], eax
  02496	74 05		 je	 SHORT $LN149@cckd_comp

; 870  :                 goto comp_lseek_error;

  02498	e9 fa 07 00 00	 jmp	 $comp_lseek_error$276
$LN149@cckd_comp:
$LN146@cckd_comp:

; 871  :         }

  0249d	e9 dc fe ff ff	 jmp	 $LN52@cckd_comp
$LN53@cckd_comp:

; 872  : 
; 873  :     /* truncate the file */
; 874  :     off = (off_t)spctab[s-1].spc_off;

  024a2	8b 44 24 74	 mov	 eax, DWORD PTR s$[rsp]
  024a6	ff c8		 dec	 eax
  024a8	48 98		 cdqe
  024aa	48 6b c0 18	 imul	 rax, rax, 24
  024ae	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  024b3	8b 44 01 0c	 mov	 eax, DWORD PTR [rcx+rax+12]
  024b7	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 875  :     if (off < fst.st_size)

  024bf	48 8b 84 24 58
	03 00 00	 mov	 rax, QWORD PTR fst$[rsp+24]
  024c7	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  024cf	0f 8d a9 02 00
	00		 jge	 $LN150@cckd_comp
$LN57@cckd_comp:

; 876  :     {
; 877  :         VERIFY(!ftruncate (fd, off));

  024d5	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  024dd	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  024e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__chsize_s
  024ea	85 c0		 test	 eax, eax
  024ec	74 5c		 je	 SHORT $LN152@cckd_comp
$LN60@cckd_comp:
  024ee	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169284
  024f5	41 b8 6d 03 00
	00		 mov	 r8d, 877		; 0000036dH
  024fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169285
  02502	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169286
  02509	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0250f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  02515	85 c0		 test	 eax, eax
  02517	74 20		 je	 SHORT $LN153@cckd_comp
  02519	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169288
  02520	41 b8 6d 03 00
	00		 mov	 r8d, 877		; 0000036dH
  02526	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169289
  0252d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169290
  02534	e8 00 00 00 00	 call	 DebuggerTrace
$LN153@cckd_comp:
  02539	33 c0		 xor	 eax, eax
  0253b	85 c0		 test	 eax, eax
  0253d	75 af		 jne	 SHORT $LN60@cckd_comp
  0253f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  02545	85 c0		 test	 eax, eax
  02547	74 01		 je	 SHORT $LN154@cckd_comp
  02549	cc		 int	 3
$LN154@cckd_comp:
$LN152@cckd_comp:
  0254a	33 c0		 xor	 eax, eax
  0254c	85 c0		 test	 eax, eax
  0254e	75 85		 jne	 SHORT $LN57@cckd_comp

; 878  :         if(dev->batch)

  02550	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02558	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0255e	c1 e8 0a	 shr	 eax, 10
  02561	83 e0 01	 and	 eax, 1
  02564	85 c0		 test	 eax, eax
  02566	0f 84 09 01 00
	00		 je	 $LN155@cckd_comp

; 879  :             FWRMSG( stdout, HHC00359, "I", LCSS_DEVNUM, dev->filename,

  0256c	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02575	74 15		 je	 SHORT $LN202@cckd_comp
  02577	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0257f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02583	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv1512[rsp], eax
  0258a	eb 0b		 jmp	 SHORT $LN203@cckd_comp
$LN202@cckd_comp:
  0258c	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1512[rsp], 0
$LN203@cckd_comp:
  02597	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  025a0	74 17		 je	 SHORT $LN204@cckd_comp
  025a2	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  025aa	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  025ae	d1 f8		 sar	 eax, 1
  025b0	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv1518[rsp], eax
  025b7	eb 0b		 jmp	 SHORT $LN205@cckd_comp
$LN204@cckd_comp:
  025b9	c7 84 24 04 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1518[rsp], 0
$LN205@cckd_comp:
  025c4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR off$[rsp]
  025cc	48 8b 8c 24 58
	03 00 00	 mov	 rcx, QWORD PTR fst$[rsp+24]
  025d4	48 2b c8	 sub	 rcx, rax
  025d7	48 8b c1	 mov	 rax, rcx
  025da	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv1505[rsp], rax
  025e2	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  025ea	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  025f1	48 89 8c 24 70
	02 00 00	 mov	 QWORD PTR tv1507[rsp], rcx
  025f9	b9 01 00 00 00	 mov	 ecx, 1
  025fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02604	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR tv1505[rsp]
  0260c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02611	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR tv1507[rsp]
  02619	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0261e	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv1512[rsp]
  02625	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02629	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR tv1518[rsp]
  02630	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02634	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169294
  0263b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02640	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169295
  02647	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0264c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02651	41 b9 03 00 00
	00		 mov	 r9d, 3
  02657	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169296
  0265e	ba 70 03 00 00	 mov	 edx, 880		; 00000370H
  02663	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169297
  0266a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02670	e9 04 01 00 00	 jmp	 $LN156@cckd_comp
$LN155@cckd_comp:

; 880  :                     fst.st_size - off);
; 881  :         else
; 882  :             WRMSG( HHC00359, "I", LCSS_DEVNUM, dev->filename, fst.st_size - off);

  02675	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0267e	74 15		 je	 SHORT $LN206@cckd_comp
  02680	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02688	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0268c	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv1536[rsp], eax
  02693	eb 0b		 jmp	 SHORT $LN207@cckd_comp
$LN206@cckd_comp:
  02695	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1536[rsp], 0
$LN207@cckd_comp:
  026a0	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  026a9	74 17		 je	 SHORT $LN208@cckd_comp
  026ab	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  026b3	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  026b7	d1 f8		 sar	 eax, 1
  026b9	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv1542[rsp], eax
  026c0	eb 0b		 jmp	 SHORT $LN209@cckd_comp
$LN208@cckd_comp:
  026c2	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1542[rsp], 0
$LN209@cckd_comp:
  026cd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR off$[rsp]
  026d5	48 8b 8c 24 58
	03 00 00	 mov	 rcx, QWORD PTR fst$[rsp+24]
  026dd	48 2b c8	 sub	 rcx, rax
  026e0	48 8b c1	 mov	 rax, rcx
  026e3	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv1529[rsp], rax
  026eb	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  026f3	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  026fa	48 89 8c 24 80
	02 00 00	 mov	 QWORD PTR tv1531[rsp], rcx
  02702	b9 01 00 00 00	 mov	 ecx, 1
  02707	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0270d	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR tv1529[rsp]
  02715	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0271a	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR tv1531[rsp]
  02722	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02727	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR tv1536[rsp]
  0272e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02732	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR tv1542[rsp]
  02739	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0273d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169298
  02744	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02749	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169299
  02750	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02755	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0275a	41 b9 03 00 00
	00		 mov	 r9d, 3
  02760	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169300
  02767	ba 72 03 00 00	 mov	 edx, 882		; 00000372H
  0276c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169301
  02773	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN156@cckd_comp:

; 883  :     }

  02779	e9 d1 01 00 00	 jmp	 $LN151@cckd_comp
$LN150@cckd_comp:

; 884  :     else
; 885  :     {
; 886  :         if(dev->batch)

  0277e	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02786	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0278c	c1 e8 0a	 shr	 eax, 10
  0278f	83 e0 01	 and	 eax, 1
  02792	85 c0		 test	 eax, eax
  02794	0f 84 dd 00 00
	00		 je	 $LN157@cckd_comp

; 887  :             FWRMSG( stdout, HHC00360, "I", LCSS_DEVNUM, dev->filename);

  0279a	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  027a3	74 15		 je	 SHORT $LN210@cckd_comp
  027a5	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  027ad	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  027b1	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv1562[rsp], eax
  027b8	eb 0b		 jmp	 SHORT $LN211@cckd_comp
$LN210@cckd_comp:
  027ba	c7 84 24 10 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1562[rsp], 0
$LN211@cckd_comp:
  027c5	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  027ce	74 17		 je	 SHORT $LN212@cckd_comp
  027d0	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  027d8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  027dc	d1 f8		 sar	 eax, 1
  027de	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv1568[rsp], eax
  027e5	eb 0b		 jmp	 SHORT $LN213@cckd_comp
$LN212@cckd_comp:
  027e7	c7 84 24 14 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1568[rsp], 0
$LN213@cckd_comp:
  027f2	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  027fa	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  02800	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR tv1557[rsp], rax
  02808	b9 01 00 00 00	 mov	 ecx, 1
  0280d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02813	48 8b 8c 24 88
	02 00 00	 mov	 rcx, QWORD PTR tv1557[rsp]
  0281b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02820	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR tv1562[rsp]
  02827	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0282b	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR tv1568[rsp]
  02832	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02836	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169304
  0283d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02842	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169305
  02849	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0284e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02853	41 b9 03 00 00
	00		 mov	 r9d, 3
  02859	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169306
  02860	ba 77 03 00 00	 mov	 edx, 887		; 00000377H
  02865	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169307
  0286c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02872	e9 d8 00 00 00	 jmp	 $LN158@cckd_comp
$LN157@cckd_comp:

; 888  :         else
; 889  :             WRMSG( HHC00360, "I", LCSS_DEVNUM, dev->filename);

  02877	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02880	74 15		 je	 SHORT $LN214@cckd_comp
  02882	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0288a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0288e	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv1584[rsp], eax
  02895	eb 0b		 jmp	 SHORT $LN215@cckd_comp
$LN214@cckd_comp:
  02897	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1584[rsp], 0
$LN215@cckd_comp:
  028a2	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  028ab	74 17		 je	 SHORT $LN216@cckd_comp
  028ad	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  028b5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  028b9	d1 f8		 sar	 eax, 1
  028bb	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv1590[rsp], eax
  028c2	eb 0b		 jmp	 SHORT $LN217@cckd_comp
$LN216@cckd_comp:
  028c4	c7 84 24 1c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1590[rsp], 0
$LN217@cckd_comp:
  028cf	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  028d7	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  028dd	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv1579[rsp], rax
  028e5	b9 01 00 00 00	 mov	 ecx, 1
  028ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  028f0	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR tv1579[rsp]
  028f8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  028fd	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR tv1584[rsp]
  02904	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02908	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR tv1590[rsp]
  0290f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02913	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169308
  0291a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0291f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169309
  02926	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0292b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02930	41 b9 03 00 00
	00		 mov	 r9d, 3
  02936	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169310
  0293d	ba 79 03 00 00	 mov	 edx, 889		; 00000379H
  02942	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169311
  02949	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN158@cckd_comp:
$LN151@cckd_comp:
$comp_return_ok$282:

; 890  :     }
; 891  : 
; 892  :     /*---------------------------------------------------------------
; 893  :      * Return
; 894  :      *---------------------------------------------------------------*/
; 895  : 
; 896  : comp_return_ok:
; 897  : 
; 898  :     rc = 0;

  0294f	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rc$[rsp], 0
$comp_return$284:

; 899  : 
; 900  : comp_return:
; 901  : 
; 902  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0295a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  02961	83 38 00	 cmp	 DWORD PTR [rax], 0
  02964	74 43		 je	 SHORT $LN159@cckd_comp
  02966	41 b8 01 00 00
	00		 mov	 r8d, 1
  0296c	33 d2		 xor	 edx, edx
  0296e	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR fd$[rsp]
  02975	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0297b	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv1603[rsp], rax
  02983	b9 02 00 00 00	 mov	 ecx, 2
  02988	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0298e	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR tv1603[rsp]
  02996	4c 8b c1	 mov	 r8, rcx
  02999	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169313
  029a0	48 8b c8	 mov	 rcx, rax
  029a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN159@cckd_comp:

; 903  : 
; 904  :     if (rbuf) free(rbuf);

  029a9	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR rbuf$[rsp], 0
  029b2	74 0e		 je	 SHORT $LN160@cckd_comp
  029b4	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR rbuf$[rsp]
  029bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN160@cckd_comp:

; 905  :     if (l2)

  029c2	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR l2$[rsp], 0
  029cb	74 5c		 je	 SHORT $LN161@cckd_comp

; 906  :     {
; 907  :         for (i = 0; i < cdevhdr.num_L1tab; i++)

  029cd	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  029d5	eb 0a		 jmp	 SHORT $LN63@cckd_comp
$LN61@cckd_comp:
  029d7	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  029db	ff c0		 inc	 eax
  029dd	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN63@cckd_comp:
  029e1	8b 84 24 84 03
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  029e8	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  029ec	7d 2d		 jge	 SHORT $LN62@cckd_comp

; 908  :             if (l2[i])

  029ee	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  029f3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  029fb	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  02a00	74 17		 je	 SHORT $LN162@cckd_comp

; 909  :                 free (l2[i]);

  02a02	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  02a07	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  02a0f	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  02a13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN162@cckd_comp:
  02a19	eb bc		 jmp	 SHORT $LN61@cckd_comp
$LN62@cckd_comp:

; 910  :         free (l2);

  02a1b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR l2$[rsp]
  02a23	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN161@cckd_comp:

; 911  :     }
; 912  :     if (l1) free (l1);

  02a29	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR l1$[rsp], 0
  02a32	74 0e		 je	 SHORT $LN163@cckd_comp
  02a34	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  02a3c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN163@cckd_comp:

; 913  :     if (spctab) free (spctab);

  02a42	48 83 7c 24 78
	00		 cmp	 QWORD PTR spctab$[rsp], 0
  02a48	74 0b		 je	 SHORT $LN164@cckd_comp
  02a4a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR spctab$[rsp]
  02a4f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN164@cckd_comp:

; 914  : 
; 915  :     return rc;

  02a55	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR rc$[rsp]
  02a5c	e9 57 0e 00 00	 jmp	 $LN1@cckd_comp
$comp_fstat_error$275:

; 916  : 
; 917  :     /*---------------------------------------------------------------
; 918  :      * Error exits
; 919  :      *---------------------------------------------------------------*/
; 920  : 
; 921  : comp_fstat_error:
; 922  :     if(dev->batch)

  02a61	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02a69	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02a6f	c1 e8 0a	 shr	 eax, 10
  02a72	83 e0 01	 and	 eax, 1
  02a75	85 c0		 test	 eax, eax
  02a77	0f 84 0d 01 00
	00		 je	 $LN165@cckd_comp

; 923  :         FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  02a7d	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02a86	74 15		 je	 SHORT $LN218@cckd_comp
  02a88	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02a90	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02a94	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv1675[rsp], eax
  02a9b	eb 0b		 jmp	 SHORT $LN219@cckd_comp
$LN218@cckd_comp:
  02a9d	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1675[rsp], 0
$LN219@cckd_comp:
  02aa8	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02ab1	74 17		 je	 SHORT $LN220@cckd_comp
  02ab3	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02abb	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02abf	d1 f8		 sar	 eax, 1
  02ac1	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv1681[rsp], eax
  02ac8	eb 0b		 jmp	 SHORT $LN221@cckd_comp
$LN220@cckd_comp:
  02aca	c7 84 24 24 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1681[rsp], 0
$LN221@cckd_comp:
  02ad5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  02adb	8b 08		 mov	 ecx, DWORD PTR [rax]
  02add	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02ae3	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR tv1665[rsp], rax
  02aeb	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02af3	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  02afa	48 89 8c 24 a8
	02 00 00	 mov	 QWORD PTR tv1670[rsp], rcx
  02b02	b9 01 00 00 00	 mov	 ecx, 1
  02b07	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02b0d	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR tv1665[rsp]
  02b15	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02b1a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169321
  02b21	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02b26	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR tv1670[rsp]
  02b2e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02b33	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR tv1675[rsp]
  02b3a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02b3e	8b 8c 24 24 01
	00 00		 mov	 ecx, DWORD PTR tv1681[rsp]
  02b45	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02b49	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169322
  02b50	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02b55	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169323
  02b5c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02b61	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02b66	41 b9 03 00 00
	00		 mov	 r9d, 3
  02b6c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169324
  02b73	ba 9c 03 00 00	 mov	 edx, 924		; 0000039cH
  02b78	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169325
  02b7f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02b85	e9 08 01 00 00	 jmp	 $LN166@cckd_comp
$LN165@cckd_comp:

; 924  :                 "fstat()", strerror( errno ));
; 925  :     else
; 926  :         WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  02b8a	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02b93	74 15		 je	 SHORT $LN222@cckd_comp
  02b95	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b9d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02ba1	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv1702[rsp], eax
  02ba8	eb 0b		 jmp	 SHORT $LN223@cckd_comp
$LN222@cckd_comp:
  02baa	c7 84 24 28 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1702[rsp], 0
$LN223@cckd_comp:
  02bb5	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02bbe	74 17		 je	 SHORT $LN224@cckd_comp
  02bc0	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02bc8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02bcc	d1 f8		 sar	 eax, 1
  02bce	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv1708[rsp], eax
  02bd5	eb 0b		 jmp	 SHORT $LN225@cckd_comp
$LN224@cckd_comp:
  02bd7	c7 84 24 2c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1708[rsp], 0
$LN225@cckd_comp:
  02be2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  02be8	8b 08		 mov	 ecx, DWORD PTR [rax]
  02bea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02bf0	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv1692[rsp], rax
  02bf8	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02c00	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  02c07	48 89 8c 24 b8
	02 00 00	 mov	 QWORD PTR tv1697[rsp], rcx
  02c0f	b9 01 00 00 00	 mov	 ecx, 1
  02c14	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02c1a	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR tv1692[rsp]
  02c22	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02c27	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169326
  02c2e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02c33	48 8b 8c 24 b8
	02 00 00	 mov	 rcx, QWORD PTR tv1697[rsp]
  02c3b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02c40	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR tv1702[rsp]
  02c47	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02c4b	8b 8c 24 2c 01
	00 00		 mov	 ecx, DWORD PTR tv1708[rsp]
  02c52	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02c56	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169327
  02c5d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02c62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169328
  02c69	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02c6e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02c73	41 b9 03 00 00
	00		 mov	 r9d, 3
  02c79	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169329
  02c80	ba 9f 03 00 00	 mov	 edx, 927		; 0000039fH
  02c85	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169330
  02c8c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN166@cckd_comp:

; 927  :               "fstat()", strerror( errno ));
; 928  :     goto comp_error;

  02c92	e9 11 0c 00 00	 jmp	 $comp_error$278
$comp_lseek_error$276:

; 929  : 
; 930  : comp_lseek_error:
; 931  :     if(dev->batch)

  02c97	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02c9f	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02ca5	c1 e8 0a	 shr	 eax, 10
  02ca8	83 e0 01	 and	 eax, 1
  02cab	85 c0		 test	 eax, eax
  02cad	0f 84 1a 01 00
	00		 je	 $LN167@cckd_comp

; 932  :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  02cb3	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02cbc	74 15		 je	 SHORT $LN226@cckd_comp
  02cbe	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02cc6	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02cca	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv1734[rsp], eax
  02cd1	eb 0b		 jmp	 SHORT $LN227@cckd_comp
$LN226@cckd_comp:
  02cd3	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1734[rsp], 0
$LN227@cckd_comp:
  02cde	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02ce7	74 17		 je	 SHORT $LN228@cckd_comp
  02ce9	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02cf1	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02cf5	d1 f8		 sar	 eax, 1
  02cf7	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv1740[rsp], eax
  02cfe	eb 0b		 jmp	 SHORT $LN229@cckd_comp
$LN228@cckd_comp:
  02d00	c7 84 24 34 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1740[rsp], 0
$LN229@cckd_comp:
  02d0b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  02d11	8b 08		 mov	 ecx, DWORD PTR [rax]
  02d13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02d19	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv1723[rsp], rax
  02d21	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02d29	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  02d30	48 89 8c 24 c8
	02 00 00	 mov	 QWORD PTR tv1729[rsp], rcx
  02d38	b9 01 00 00 00	 mov	 ecx, 1
  02d3d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02d43	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR tv1723[rsp]
  02d4b	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  02d50	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  02d58	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02d5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169333
  02d64	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02d69	48 8b 8c 24 c8
	02 00 00	 mov	 rcx, QWORD PTR tv1729[rsp]
  02d71	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02d76	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR tv1734[rsp]
  02d7d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02d81	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR tv1740[rsp]
  02d88	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02d8c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169334
  02d93	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02d98	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169335
  02d9f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02da4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02da9	41 b9 03 00 00
	00		 mov	 r9d, 3
  02daf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169336
  02db6	ba a5 03 00 00	 mov	 edx, 933		; 000003a5H
  02dbb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169337
  02dc2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02dc8	e9 15 01 00 00	 jmp	 $LN168@cckd_comp
$LN167@cckd_comp:

; 933  :                 "lseek()", off, strerror( errno ));
; 934  :     else
; 935  :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  02dcd	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02dd6	74 15		 je	 SHORT $LN230@cckd_comp
  02dd8	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02de0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02de4	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv1762[rsp], eax
  02deb	eb 0b		 jmp	 SHORT $LN231@cckd_comp
$LN230@cckd_comp:
  02ded	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1762[rsp], 0
$LN231@cckd_comp:
  02df8	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02e01	74 17		 je	 SHORT $LN232@cckd_comp
  02e03	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02e0b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02e0f	d1 f8		 sar	 eax, 1
  02e11	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv1768[rsp], eax
  02e18	eb 0b		 jmp	 SHORT $LN233@cckd_comp
$LN232@cckd_comp:
  02e1a	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1768[rsp], 0
$LN233@cckd_comp:
  02e25	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  02e2b	8b 08		 mov	 ecx, DWORD PTR [rax]
  02e2d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02e33	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv1751[rsp], rax
  02e3b	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02e43	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  02e4a	48 89 8c 24 d8
	02 00 00	 mov	 QWORD PTR tv1757[rsp], rcx
  02e52	b9 01 00 00 00	 mov	 ecx, 1
  02e57	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02e5d	48 8b 8c 24 d0
	02 00 00	 mov	 rcx, QWORD PTR tv1751[rsp]
  02e65	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  02e6a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  02e72	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02e77	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169338
  02e7e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02e83	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR tv1757[rsp]
  02e8b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02e90	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR tv1762[rsp]
  02e97	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02e9b	8b 8c 24 3c 01
	00 00		 mov	 ecx, DWORD PTR tv1768[rsp]
  02ea2	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02ea6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169339
  02ead	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02eb2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169340
  02eb9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02ebe	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02ec3	41 b9 03 00 00
	00		 mov	 r9d, 3
  02ec9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169341
  02ed0	ba a8 03 00 00	 mov	 edx, 936		; 000003a8H
  02ed5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169342
  02edc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN168@cckd_comp:

; 936  :               "lseek()", off, strerror( errno ));
; 937  :     goto comp_error;

  02ee2	e9 c1 09 00 00	 jmp	 $comp_error$278
$comp_read_error$277:

; 938  : 
; 939  : comp_read_error:
; 940  :     if(dev->batch)

  02ee7	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02eef	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  02ef5	c1 e8 0a	 shr	 eax, 10
  02ef8	83 e0 01	 and	 eax, 1
  02efb	85 c0		 test	 eax, eax
  02efd	0f 84 34 01 00
	00		 je	 $LN169@cckd_comp

; 941  :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  02f03	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  02f0b	7d 18		 jge	 SHORT $LN234@cckd_comp
  02f0d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  02f13	8b 08		 mov	 ecx, DWORD PTR [rax]
  02f15	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  02f1b	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv1787[rsp], rax
  02f23	eb 0f		 jmp	 SHORT $LN235@cckd_comp
$LN234@cckd_comp:
  02f25	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169345
  02f2c	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv1787[rsp], rax
$LN235@cckd_comp:
  02f34	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02f3d	74 15		 je	 SHORT $LN236@cckd_comp
  02f3f	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02f47	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02f4b	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv1796[rsp], eax
  02f52	eb 0b		 jmp	 SHORT $LN237@cckd_comp
$LN236@cckd_comp:
  02f54	c7 84 24 40 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1796[rsp], 0
$LN237@cckd_comp:
  02f5f	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02f68	74 17		 je	 SHORT $LN238@cckd_comp
  02f6a	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02f72	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02f76	d1 f8		 sar	 eax, 1
  02f78	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv1802[rsp], eax
  02f7f	eb 0b		 jmp	 SHORT $LN239@cckd_comp
$LN238@cckd_comp:
  02f81	c7 84 24 44 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1802[rsp], 0
$LN239@cckd_comp:
  02f8c	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  02f94	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  02f9a	48 89 84 24 e0
	02 00 00	 mov	 QWORD PTR tv1791[rsp], rax
  02fa2	b9 01 00 00 00	 mov	 ecx, 1
  02fa7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02fad	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR tv1787[rsp]
  02fb5	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  02fba	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  02fc2	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02fc7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169346
  02fce	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02fd3	48 8b 8c 24 e0
	02 00 00	 mov	 rcx, QWORD PTR tv1791[rsp]
  02fdb	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02fe0	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR tv1796[rsp]
  02fe7	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02feb	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR tv1802[rsp]
  02ff2	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02ff6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169347
  02ffd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03002	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169348
  03009	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0300e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03013	41 b9 03 00 00
	00		 mov	 r9d, 3
  03019	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169349
  03020	ba ae 03 00 00	 mov	 edx, 942		; 000003aeH
  03025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169350
  0302c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  03032	e9 2f 01 00 00	 jmp	 $LN170@cckd_comp
$LN169@cckd_comp:

; 942  :                 "read()", off, rc < 0 ? strerror( errno ) : "incomplete");
; 943  :     else
; 944  :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  03037	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  0303f	7d 18		 jge	 SHORT $LN240@cckd_comp
  03041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  03047	8b 08		 mov	 ecx, DWORD PTR [rax]
  03049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0304f	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv1817[rsp], rax
  03057	eb 0f		 jmp	 SHORT $LN241@cckd_comp
$LN240@cckd_comp:
  03059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169351
  03060	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv1817[rsp], rax
$LN241@cckd_comp:
  03068	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03071	74 15		 je	 SHORT $LN242@cckd_comp
  03073	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0307b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0307f	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv1826[rsp], eax
  03086	eb 0b		 jmp	 SHORT $LN243@cckd_comp
$LN242@cckd_comp:
  03088	c7 84 24 48 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1826[rsp], 0
$LN243@cckd_comp:
  03093	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0309c	74 17		 je	 SHORT $LN244@cckd_comp
  0309e	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  030a6	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  030aa	d1 f8		 sar	 eax, 1
  030ac	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv1832[rsp], eax
  030b3	eb 0b		 jmp	 SHORT $LN245@cckd_comp
$LN244@cckd_comp:
  030b5	c7 84 24 4c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1832[rsp], 0
$LN245@cckd_comp:
  030c0	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  030c8	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  030ce	48 89 84 24 e8
	02 00 00	 mov	 QWORD PTR tv1821[rsp], rax
  030d6	b9 01 00 00 00	 mov	 ecx, 1
  030db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  030e1	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR tv1817[rsp]
  030e9	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  030ee	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  030f6	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  030fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169352
  03102	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03107	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR tv1821[rsp]
  0310f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03114	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR tv1826[rsp]
  0311b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0311f	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR tv1832[rsp]
  03126	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0312a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169353
  03131	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169354
  0313d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03142	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03147	41 b9 03 00 00
	00		 mov	 r9d, 3
  0314d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169355
  03154	ba b1 03 00 00	 mov	 edx, 945		; 000003b1H
  03159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169356
  03160	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN170@cckd_comp:

; 945  :               "read()", off, rc < 0 ? strerror( errno ) : "incomplete");
; 946  :     goto comp_error;

  03166	e9 3d 07 00 00	 jmp	 $comp_error$278
$comp_write_error$283:

; 947  : 
; 948  : comp_write_error:
; 949  :     if(dev->batch)

  0316b	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03173	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03179	c1 e8 0a	 shr	 eax, 10
  0317c	83 e0 01	 and	 eax, 1
  0317f	85 c0		 test	 eax, eax
  03181	0f 84 34 01 00
	00		 je	 $LN171@cckd_comp

; 950  :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  03187	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  0318f	7d 18		 jge	 SHORT $LN246@cckd_comp
  03191	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  03197	8b 08		 mov	 ecx, DWORD PTR [rax]
  03199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0319f	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv1851[rsp], rax
  031a7	eb 0f		 jmp	 SHORT $LN247@cckd_comp
$LN246@cckd_comp:
  031a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169359
  031b0	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv1851[rsp], rax
$LN247@cckd_comp:
  031b8	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  031c1	74 15		 je	 SHORT $LN248@cckd_comp
  031c3	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  031cb	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  031cf	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv1892[rsp], eax
  031d6	eb 0b		 jmp	 SHORT $LN249@cckd_comp
$LN248@cckd_comp:
  031d8	c7 84 24 50 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1892[rsp], 0
$LN249@cckd_comp:
  031e3	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  031ec	74 17		 je	 SHORT $LN250@cckd_comp
  031ee	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  031f6	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  031fa	d1 f8		 sar	 eax, 1
  031fc	89 84 24 54 01
	00 00		 mov	 DWORD PTR tv1898[rsp], eax
  03203	eb 0b		 jmp	 SHORT $LN251@cckd_comp
$LN250@cckd_comp:
  03205	c7 84 24 54 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1898[rsp], 0
$LN251@cckd_comp:
  03210	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03218	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0321e	48 89 84 24 f0
	02 00 00	 mov	 QWORD PTR tv1855[rsp], rax
  03226	b9 01 00 00 00	 mov	 ecx, 1
  0322b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03231	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR tv1851[rsp]
  03239	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0323e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  03246	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0324b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169360
  03252	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03257	48 8b 8c 24 f0
	02 00 00	 mov	 rcx, QWORD PTR tv1855[rsp]
  0325f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03264	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR tv1892[rsp]
  0326b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0326f	8b 8c 24 54 01
	00 00		 mov	 ecx, DWORD PTR tv1898[rsp]
  03276	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0327a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169361
  03281	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03286	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169362
  0328d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03292	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03297	41 b9 03 00 00
	00		 mov	 r9d, 3
  0329d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169363
  032a4	ba b7 03 00 00	 mov	 edx, 951		; 000003b7H
  032a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169364
  032b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  032b6	e9 2f 01 00 00	 jmp	 $LN172@cckd_comp
$LN171@cckd_comp:

; 951  :                 "write()", off, rc < 0 ? strerror( errno ) : "incomplete");
; 952  :     else
; 953  :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  032bb	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  032c3	7d 18		 jge	 SHORT $LN252@cckd_comp
  032c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  032cb	8b 08		 mov	 ecx, DWORD PTR [rax]
  032cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  032d3	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv1913[rsp], rax
  032db	eb 0f		 jmp	 SHORT $LN253@cckd_comp
$LN252@cckd_comp:
  032dd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169365
  032e4	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv1913[rsp], rax
$LN253@cckd_comp:
  032ec	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  032f5	74 15		 je	 SHORT $LN254@cckd_comp
  032f7	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  032ff	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03303	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv1922[rsp], eax
  0330a	eb 0b		 jmp	 SHORT $LN255@cckd_comp
$LN254@cckd_comp:
  0330c	c7 84 24 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1922[rsp], 0
$LN255@cckd_comp:
  03317	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03320	74 17		 je	 SHORT $LN256@cckd_comp
  03322	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0332a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0332e	d1 f8		 sar	 eax, 1
  03330	89 84 24 5c 01
	00 00		 mov	 DWORD PTR tv1928[rsp], eax
  03337	eb 0b		 jmp	 SHORT $LN257@cckd_comp
$LN256@cckd_comp:
  03339	c7 84 24 5c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1928[rsp], 0
$LN257@cckd_comp:
  03344	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0334c	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  03352	48 89 84 24 f8
	02 00 00	 mov	 QWORD PTR tv1917[rsp], rax
  0335a	b9 01 00 00 00	 mov	 ecx, 1
  0335f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03365	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR tv1913[rsp]
  0336d	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03372	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  0337a	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0337f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169366
  03386	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0338b	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR tv1917[rsp]
  03393	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03398	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR tv1922[rsp]
  0339f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  033a3	8b 8c 24 5c 01
	00 00		 mov	 ecx, DWORD PTR tv1928[rsp]
  033aa	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  033ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169367
  033b5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  033ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169368
  033c1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  033c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  033cb	41 b9 03 00 00
	00		 mov	 r9d, 3
  033d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169369
  033d8	ba ba 03 00 00	 mov	 edx, 954		; 000003baH
  033dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169370
  033e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN172@cckd_comp:

; 954  :               "write()", off, rc < 0 ? strerror( errno ) : "incomplete");
; 955  :     goto comp_error;

  033ea	e9 b9 04 00 00	 jmp	 $comp_error$278
$comp_malloc_error$280:

; 956  : 
; 957  : comp_malloc_error:
; 958  :     {
; 959  :         char buf[64];
; 960  :         MSGBUF( buf, "malloc(%d)", len);

  033ef	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR len$[rsp]
  033f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169371
  033fe	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  03403	48 8d 8c 24 80
	17 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  0340b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 961  :         if(dev->batch)

  03411	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03419	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0341f	c1 e8 0a	 shr	 eax, 10
  03422	83 e0 01	 and	 eax, 1
  03425	85 c0		 test	 eax, eax
  03427	0f 84 0e 01 00
	00		 je	 $LN173@cckd_comp

; 962  :             FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0342d	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03436	74 15		 je	 SHORT $LN258@cckd_comp
  03438	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03440	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03444	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv1957[rsp], eax
  0344b	eb 0b		 jmp	 SHORT $LN259@cckd_comp
$LN258@cckd_comp:
  0344d	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1957[rsp], 0
$LN259@cckd_comp:
  03458	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03461	74 17		 je	 SHORT $LN260@cckd_comp
  03463	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0346b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0346f	d1 f8		 sar	 eax, 1
  03471	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv1963[rsp], eax
  03478	eb 0b		 jmp	 SHORT $LN261@cckd_comp
$LN260@cckd_comp:
  0347a	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1963[rsp], 0
$LN261@cckd_comp:
  03485	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0348b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0348d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  03493	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR tv1947[rsp], rax
  0349b	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  034a3	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  034aa	48 89 8c 24 08
	03 00 00	 mov	 QWORD PTR tv1952[rsp], rcx
  034b2	b9 01 00 00 00	 mov	 ecx, 1
  034b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  034bd	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR tv1947[rsp]
  034c5	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  034ca	48 8d 8c 24 80
	17 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  034d2	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  034d7	48 8b 8c 24 08
	03 00 00	 mov	 rcx, QWORD PTR tv1952[rsp]
  034df	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  034e4	8b 8c 24 60 01
	00 00		 mov	 ecx, DWORD PTR tv1957[rsp]
  034eb	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  034ef	8b 8c 24 88 01
	00 00		 mov	 ecx, DWORD PTR tv1963[rsp]
  034f6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  034fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169374
  03501	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03506	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169375
  0350d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03512	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03517	41 b9 03 00 00
	00		 mov	 r9d, 3
  0351d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169376
  03524	ba c3 03 00 00	 mov	 edx, 963		; 000003c3H
  03529	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169377
  03530	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  03536	e9 09 01 00 00	 jmp	 $LN174@cckd_comp
$LN173@cckd_comp:

; 963  :                     buf, strerror( errno ));
; 964  :         else
; 965  :             WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0353b	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03544	74 15		 je	 SHORT $LN262@cckd_comp
  03546	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0354e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03552	89 84 24 64 01
	00 00		 mov	 DWORD PTR tv1984[rsp], eax
  03559	eb 0b		 jmp	 SHORT $LN263@cckd_comp
$LN262@cckd_comp:
  0355b	c7 84 24 64 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1984[rsp], 0
$LN263@cckd_comp:
  03566	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0356f	74 17		 je	 SHORT $LN264@cckd_comp
  03571	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  03579	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0357d	d1 f8		 sar	 eax, 1
  0357f	89 84 24 68 01
	00 00		 mov	 DWORD PTR tv1990[rsp], eax
  03586	eb 0b		 jmp	 SHORT $LN265@cckd_comp
$LN264@cckd_comp:
  03588	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1990[rsp], 0
$LN265@cckd_comp:
  03593	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  03599	8b 08		 mov	 ecx, DWORD PTR [rax]
  0359b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  035a1	48 89 84 24 10
	03 00 00	 mov	 QWORD PTR tv1974[rsp], rax
  035a9	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  035b1	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  035b8	48 89 8c 24 18
	03 00 00	 mov	 QWORD PTR tv1979[rsp], rcx
  035c0	b9 01 00 00 00	 mov	 ecx, 1
  035c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  035cb	48 8b 8c 24 10
	03 00 00	 mov	 rcx, QWORD PTR tv1974[rsp]
  035d3	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  035d8	48 8d 8c 24 80
	17 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  035e0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  035e5	48 8b 8c 24 18
	03 00 00	 mov	 rcx, QWORD PTR tv1979[rsp]
  035ed	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  035f2	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR tv1984[rsp]
  035f9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  035fd	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR tv1990[rsp]
  03604	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03608	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169378
  0360f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03614	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169379
  0361b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03620	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03625	41 b9 03 00 00
	00		 mov	 r9d, 3
  0362b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169380
  03632	ba c6 03 00 00	 mov	 edx, 966		; 000003c6H
  03637	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169381
  0363e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN174@cckd_comp:

; 966  :                   buf, strerror( errno ));
; 967  :         goto comp_error;

  03644	e9 5f 02 00 00	 jmp	 $comp_error$278
$comp_calloc_error$281:

; 968  :     }
; 969  : comp_calloc_error:
; 970  :     {
; 971  :         char buf[64];
; 972  :         MSGBUF( buf, "calloc(%d)", n * len);

  03649	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR n$[rsp]
  03650	0f af 84 24 80
	00 00 00	 imul	 eax, DWORD PTR len$[rsp]
  03658	44 8b c8	 mov	 r9d, eax
  0365b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169382
  03662	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  03667	48 8d 8c 24 c0
	17 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  0366f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 973  :         if(dev->batch)

  03675	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  0367d	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  03683	c1 e8 0a	 shr	 eax, 10
  03686	83 e0 01	 and	 eax, 1
  03689	85 c0		 test	 eax, eax
  0368b	0f 84 0e 01 00
	00		 je	 $LN175@cckd_comp

; 974  :             FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  03691	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0369a	74 15		 je	 SHORT $LN266@cckd_comp
  0369c	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  036a4	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  036a8	89 84 24 6c 01
	00 00		 mov	 DWORD PTR tv2020[rsp], eax
  036af	eb 0b		 jmp	 SHORT $LN267@cckd_comp
$LN266@cckd_comp:
  036b1	c7 84 24 6c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2020[rsp], 0
$LN267@cckd_comp:
  036bc	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  036c5	74 17		 je	 SHORT $LN268@cckd_comp
  036c7	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  036cf	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  036d3	d1 f8		 sar	 eax, 1
  036d5	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv2026[rsp], eax
  036dc	eb 0b		 jmp	 SHORT $LN269@cckd_comp
$LN268@cckd_comp:
  036de	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2026[rsp], 0
$LN269@cckd_comp:
  036e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  036ef	8b 08		 mov	 ecx, DWORD PTR [rax]
  036f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  036f7	48 89 84 24 20
	03 00 00	 mov	 QWORD PTR tv2010[rsp], rax
  036ff	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03707	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0370e	48 89 8c 24 28
	03 00 00	 mov	 QWORD PTR tv2015[rsp], rcx
  03716	b9 01 00 00 00	 mov	 ecx, 1
  0371b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03721	48 8b 8c 24 20
	03 00 00	 mov	 rcx, QWORD PTR tv2010[rsp]
  03729	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0372e	48 8d 8c 24 c0
	17 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  03736	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0373b	48 8b 8c 24 28
	03 00 00	 mov	 rcx, QWORD PTR tv2015[rsp]
  03743	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03748	8b 8c 24 6c 01
	00 00		 mov	 ecx, DWORD PTR tv2020[rsp]
  0374f	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03753	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR tv2026[rsp]
  0375a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0375e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169385
  03765	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0376a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169386
  03771	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03776	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0377b	41 b9 03 00 00
	00		 mov	 r9d, 3
  03781	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169387
  03788	ba cf 03 00 00	 mov	 edx, 975		; 000003cfH
  0378d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169388
  03794	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0379a	e9 09 01 00 00	 jmp	 $LN176@cckd_comp
$LN175@cckd_comp:

; 975  :                     buf, strerror( errno ));
; 976  :         else
; 977  :             WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0379f	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  037a8	74 15		 je	 SHORT $LN270@cckd_comp
  037aa	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  037b2	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  037b6	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv2047[rsp], eax
  037bd	eb 0b		 jmp	 SHORT $LN271@cckd_comp
$LN270@cckd_comp:
  037bf	c7 84 24 74 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2047[rsp], 0
$LN271@cckd_comp:
  037ca	48 83 bc 24 20
	18 04 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  037d3	74 17		 je	 SHORT $LN272@cckd_comp
  037d5	48 8b 84 24 20
	18 04 00	 mov	 rax, QWORD PTR dev$[rsp]
  037dd	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  037e1	d1 f8		 sar	 eax, 1
  037e3	89 84 24 78 01
	00 00		 mov	 DWORD PTR tv2053[rsp], eax
  037ea	eb 0b		 jmp	 SHORT $LN273@cckd_comp
$LN272@cckd_comp:
  037ec	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2053[rsp], 0
$LN273@cckd_comp:
  037f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  037fd	8b 08		 mov	 ecx, DWORD PTR [rax]
  037ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  03805	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR tv2037[rsp], rax
  0380d	48 8b 8c 24 20
	18 04 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03815	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0381c	48 89 8c 24 38
	03 00 00	 mov	 QWORD PTR tv2042[rsp], rcx
  03824	b9 01 00 00 00	 mov	 ecx, 1
  03829	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0382f	48 8b 8c 24 30
	03 00 00	 mov	 rcx, QWORD PTR tv2037[rsp]
  03837	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0383c	48 8d 8c 24 c0
	17 00 00	 lea	 rcx, QWORD PTR buf$2[rsp]
  03844	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03849	48 8b 8c 24 38
	03 00 00	 mov	 rcx, QWORD PTR tv2042[rsp]
  03851	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03856	8b 8c 24 74 01
	00 00		 mov	 ecx, DWORD PTR tv2047[rsp]
  0385d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03861	8b 8c 24 78 01
	00 00		 mov	 ecx, DWORD PTR tv2053[rsp]
  03868	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0386c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169389
  03873	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03878	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169390
  0387f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03884	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03889	41 b9 03 00 00
	00		 mov	 r9d, 3
  0388f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169391
  03896	ba d2 03 00 00	 mov	 edx, 978		; 000003d2H
  0389b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169392
  038a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN176@cckd_comp:
$comp_error$278:

; 978  :                   buf, strerror( errno ));
; 979  :         goto comp_error;
; 980  :     }
; 981  : comp_error:
; 982  : 
; 983  :     rc = -1;

  038a8	c7 84 24 88 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR rc$[rsp], -1

; 984  :     goto comp_return;

  038b3	e9 a2 f0 ff ff	 jmp	 $comp_return$284
$LN1@cckd_comp:

; 985  : 
; 986  : } /* cckd_comp() */

  038b8	48 8b 8c 24 00
	18 04 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  038c0	48 33 cc	 xor	 rcx, rsp
  038c3	e8 00 00 00 00	 call	 __security_check_cookie
  038c8	48 81 c4 10 18
	04 00		 add	 rsp, 268304		; 00041810H
  038cf	5f		 pop	 rdi
  038d0	c3		 ret	 0
cckd_comp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
tv68 = 0
u$ = 4
cckd_def_opt_bigend PROC

; 326  : {

$LN5:
  00000	48 83 ec 18	 sub	 rsp, 24

; 327  :     union
; 328  :     {
; 329  :         long l;
; 330  :         char c[ sizeof( long )];
; 331  :     }
; 332  :     u;
; 333  : 
; 334  :     u.l = 1;

  00004	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR u$[rsp], 1

; 335  :     return u.c[ sizeof( long ) - 1 ] == 1 ? CCKD_OPT_BIGEND : 0;

  0000c	b8 01 00 00 00	 mov	 eax, 1
  00011	48 6b c0 03	 imul	 rax, rax, 3
  00015	0f be 44 04 04	 movsx	 eax, BYTE PTR u$[rsp+rax]
  0001a	83 f8 01	 cmp	 eax, 1
  0001d	75 09		 jne	 SHORT $LN3@cckd_def_o
  0001f	c7 04 24 02 00
	00 00		 mov	 DWORD PTR tv68[rsp], 2
  00026	eb 07		 jmp	 SHORT $LN4@cckd_def_o
$LN3@cckd_def_o:
  00028	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv68[rsp], 0
$LN4@cckd_def_o:
  0002f	8b 04 24	 mov	 eax, DWORD PTR tv68[rsp]

; 336  : }

  00032	48 83 c4 18	 add	 rsp, 24
  00036	c3		 ret	 0
cckd_def_opt_bigend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
fb$ = 48
cckd_swapend_free PROC

; 386  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 387  :     fb->fb_offnxt = SWAP32( fb->fb_offnxt );

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR fb$[rsp]
  0000e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00010	e8 00 00 00 00	 call	 _byteswap_ulong
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fb$[rsp]
  0001a	89 01		 mov	 DWORD PTR [rcx], eax

; 388  :     fb->fb_len    = SWAP32( fb->fb_len    );

  0001c	48 8b 44 24 30	 mov	 rax, QWORD PTR fb$[rsp]
  00021	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  00024	e8 00 00 00 00	 call	 _byteswap_ulong
  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fb$[rsp]
  0002e	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 389  : }

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
cckd_swapend_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
i$ = 32
l2$ = 64
cckd_swapend_l2 PROC

; 372  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 373  :     int  i;
; 374  :     for (i = 0; i < 256; i++)  // (always 256 entries per L2 table)

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00011	eb 0a		 jmp	 SHORT $LN4@cckd_swape
$LN2@cckd_swape:
  00013	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00017	ff c0		 inc	 eax
  00019	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@cckd_swape:
  0001d	81 7c 24 20 00
	01 00 00	 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  00025	7d 67		 jge	 SHORT $LN3@cckd_swape

; 375  :     {
; 376  :         l2[i].L2_trkoff = SWAP32( l2[i].L2_trkoff );

  00027	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR l2$[rsp]
  00031	8b 0c c1	 mov	 ecx, DWORD PTR [rcx+rax*8]
  00034	e8 00 00 00 00	 call	 _byteswap_ulong
  00039	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0003e	48 8b 54 24 40	 mov	 rdx, QWORD PTR l2$[rsp]
  00043	89 04 ca	 mov	 DWORD PTR [rdx+rcx*8], eax

; 377  :         l2[i].L2_len    = SWAP16( l2[i].L2_len    );

  00046	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR l2$[rsp]
  00050	0f b7 4c c1 04	 movzx	 ecx, WORD PTR [rcx+rax*8+4]
  00055	e8 00 00 00 00	 call	 _byteswap_ushort
  0005a	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0005f	48 8b 54 24 40	 mov	 rdx, QWORD PTR l2$[rsp]
  00064	66 89 44 ca 04	 mov	 WORD PTR [rdx+rcx*8+4], ax

; 378  :         l2[i].L2_size   = SWAP16( l2[i].L2_size   );

  00069	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0006e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR l2$[rsp]
  00073	0f b7 4c c1 06	 movzx	 ecx, WORD PTR [rcx+rax*8+6]
  00078	e8 00 00 00 00	 call	 _byteswap_ushort
  0007d	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00082	48 8b 54 24 40	 mov	 rdx, QWORD PTR l2$[rsp]
  00087	66 89 44 ca 06	 mov	 WORD PTR [rdx+rcx*8+6], ax

; 379  :     }

  0008c	eb 85		 jmp	 SHORT $LN2@cckd_swape
$LN3@cckd_swape:

; 380  : }

  0008e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00092	c3		 ret	 0
cckd_swapend_l2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
i$ = 32
l1$ = 64
num_L1tab$ = 72
cckd_swapend_l1 PROC

; 362  : {

$LN6:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 363  :     int  i;
; 364  :     for (i = 0; i < num_L1tab; i++)

  0000d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00015	eb 0a		 jmp	 SHORT $LN4@cckd_swape
$LN2@cckd_swape:
  00017	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0001b	ff c0		 inc	 eax
  0001d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@cckd_swape:
  00021	8b 44 24 48	 mov	 eax, DWORD PTR num_L1tab$[rsp]
  00025	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00029	7d 21		 jge	 SHORT $LN3@cckd_swape

; 365  :         l1[i] = SWAP32( l1[i] );

  0002b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00030	48 8b 4c 24 40	 mov	 rcx, QWORD PTR l1$[rsp]
  00035	8b 0c 81	 mov	 ecx, DWORD PTR [rcx+rax*4]
  00038	e8 00 00 00 00	 call	 _byteswap_ulong
  0003d	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00042	48 8b 54 24 40	 mov	 rdx, QWORD PTR l1$[rsp]
  00047	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
  0004a	eb cb		 jmp	 SHORT $LN2@cckd_swape
$LN3@cckd_swape:

; 366  : }

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
cckd_swapend_l1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
cdevhdr$ = 48
cckd_swapend_chdr PROC

; 342  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 343  :     /* fix the compressed ckd header */
; 344  :     cdevhdr->cdh_opts ^= CCKD_OPT_BIGEND;

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  0000e	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00012	83 f0 02	 xor	 eax, 2
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  0001a	88 41 03	 mov	 BYTE PTR [rcx+3], al

; 345  : 
; 346  :     cdevhdr->num_L1tab    = SWAP32( cdevhdr->num_L1tab    );

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  00022	8b 48 04	 mov	 ecx, DWORD PTR [rax+4]
  00025	e8 00 00 00 00	 call	 _byteswap_ulong
  0002a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  0002f	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 347  :     cdevhdr->num_L2tab    = SWAP32( cdevhdr->num_L2tab    );

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  00037	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  0003a	e8 00 00 00 00	 call	 _byteswap_ulong
  0003f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  00044	89 41 08	 mov	 DWORD PTR [rcx+8], eax

; 348  :     cdevhdr->cdh_size     = SWAP32( cdevhdr->cdh_size     );

  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  0004c	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  0004f	e8 00 00 00 00	 call	 _byteswap_ulong
  00054	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  00059	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 349  :     cdevhdr->cdh_used     = SWAP32( cdevhdr->cdh_used     );

  0005c	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  00061	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  00064	e8 00 00 00 00	 call	 _byteswap_ulong
  00069	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  0006e	89 41 10	 mov	 DWORD PTR [rcx+16], eax

; 350  :     cdevhdr->free_off     = SWAP32( cdevhdr->free_off     );

  00071	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  00076	8b 48 14	 mov	 ecx, DWORD PTR [rax+20]
  00079	e8 00 00 00 00	 call	 _byteswap_ulong
  0007e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  00083	89 41 14	 mov	 DWORD PTR [rcx+20], eax

; 351  :     cdevhdr->free_total   = SWAP32( cdevhdr->free_total   );

  00086	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  0008b	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  0008e	e8 00 00 00 00	 call	 _byteswap_ulong
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  00098	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 352  :     cdevhdr->free_largest = SWAP32( cdevhdr->free_largest );

  0009b	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  000a0	8b 48 1c	 mov	 ecx, DWORD PTR [rax+28]
  000a3	e8 00 00 00 00	 call	 _byteswap_ulong
  000a8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  000ad	89 41 1c	 mov	 DWORD PTR [rcx+28], eax

; 353  :     cdevhdr->free_num     = SWAP32( cdevhdr->free_num     );

  000b0	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  000b5	8b 48 20	 mov	 ecx, DWORD PTR [rax+32]
  000b8	e8 00 00 00 00	 call	 _byteswap_ulong
  000bd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  000c2	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 354  :     cdevhdr->free_imbed   = SWAP32( cdevhdr->free_imbed   );

  000c5	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  000ca	8b 48 24	 mov	 ecx, DWORD PTR [rax+36]
  000cd	e8 00 00 00 00	 call	 _byteswap_ulong
  000d2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  000d7	89 41 24	 mov	 DWORD PTR [rcx+36], eax

; 355  :     cdevhdr->cmp_parm     = SWAP16( cdevhdr->cmp_parm     );

  000da	48 8b 44 24 30	 mov	 rax, QWORD PTR cdevhdr$[rsp]
  000df	0f b7 48 2e	 movzx	 ecx, WORD PTR [rax+46]
  000e3	e8 00 00 00 00	 call	 _byteswap_ushort
  000e8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cdevhdr$[rsp]
  000ed	66 89 41 2e	 mov	 WORD PTR [rcx+46], ax

; 356  : }

  000f1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000f5	c3		 ret	 0
cckd_swapend_chdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
fd$ = 112
len$ = 116
rc$ = 120
i$ = 124
off$ = 128
l1$ = 136
freeblk$ = 144
swapend$ = 152
tv466 = 156
tv472 = 160
tv498 = 164
tv504 = 168
tv526 = 172
tv532 = 176
tv592 = 180
tv598 = 184
tv622 = 188
tv628 = 192
tv656 = 196
tv662 = 200
tv686 = 204
tv692 = 208
tv721 = 212
tv727 = 216
tv748 = 220
tv754 = 224
tv144 = 228
tv439 = 232
tv445 = 236
hipos$ = 240
tv141 = 248
cckd$ = 256
lopos$ = 264
tv583 = 272
tv613 = 280
tv647 = 288
tv677 = 296
tv95 = 304
tv156 = 312
tv188 = 320
tv210 = 328
tv261 = 336
tv282 = 344
tv310 = 352
tv342 = 360
tv363 = 368
tv388 = 376
tv409 = 384
tv429 = 392
tv434 = 400
tv456 = 408
tv461 = 416
tv487 = 424
tv493 = 432
tv515 = 440
tv521 = 448
tv587 = 456
tv617 = 464
tv651 = 472
tv681 = 480
tv711 = 488
tv716 = 496
tv738 = 504
tv743 = 512
fst$ = 520
cdevhdr$ = 576
l2$ = 1088
buf$1 = 3136
__$ArrayPad$ = 3200
dev$ = 3232
cckd_swapend PROC

; 82   : {

$LN123:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 98 0c
	00 00		 sub	 rsp, 3224		; 00000c98H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 80
	0c 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 83   : CCKD_EXT         *cckd;                 /* -> cckd extension         */
; 84   : int               fd;                   /* File descriptor           */
; 85   : int               rc;                   /* Return code               */
; 86   : struct stat       fst;                  /* File status buffer        */
; 87   : int               i;                    /* Index                     */
; 88   : int               swapend;              /* 1=swap space              */
; 89   : int               len;                  /* Length                    */
; 90   : off_t             off, lopos, hipos;    /* File offsets              */
; 91   : CCKD_DEVHDR       cdevhdr;              /* Compressed ckd header     */
; 92   : CCKD_L1ENT       *l1 = NULL;            /* Level 1 table             */

  0001e	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR l1$[rsp], 0

; 93   : CCKD_L2ENT        l2[256];              /* Level 2 table             */
; 94   : CCKD_FREEBLK      freeblk;              /* Free block                */
; 95   : 
; 96   :     if (dev->cckd64)

  0002a	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00032	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  00039	24 01		 and	 al, 1
  0003b	0f b6 c0	 movzx	 eax, al
  0003e	85 c0		 test	 eax, eax
  00040	74 12		 je	 SHORT $LN11@cckd_swape

; 97   :         return cckd64_swapend( dev );

  00042	48 8b 8c 24 a0
	0c 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0004a	e8 00 00 00 00	 call	 cckd64_swapend
  0004f	e9 75 16 00 00	 jmp	 $LN1@cckd_swape
$LN11@cckd_swape:

; 98   : 
; 99   :     /* Get fd */
; 100  :     cckd = dev->cckd_ext;

  00054	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0005c	48 8b 80 08 13
	00 00		 mov	 rax, QWORD PTR [rax+4872]
  00063	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR cckd$[rsp], rax

; 101  :     if (cckd == NULL)

  0006b	48 83 bc 24 00
	01 00 00 00	 cmp	 QWORD PTR cckd$[rsp], 0
  00074	75 14		 jne	 SHORT $LN12@cckd_swape

; 102  :         fd = dev->fd;

  00076	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007e	8b 80 ac 01 00
	00		 mov	 eax, DWORD PTR [rax+428]
  00084	89 44 24 70	 mov	 DWORD PTR fd$[rsp], eax
  00088	eb 1f		 jmp	 SHORT $LN13@cckd_swape
$LN12@cckd_swape:

; 103  :     else
; 104  :         fd = cckd->fd[cckd->sfn];

  0008a	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR cckd$[rsp]
  00092	48 63 40 3c	 movsxd	 rax, DWORD PTR [rax+60]
  00096	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR cckd$[rsp]
  0009e	8b 84 81 f0 00
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+240]
  000a5	89 44 24 70	 mov	 DWORD PTR fd$[rsp], eax
$LN13@cckd_swape:

; 105  : 
; 106  :     /* Get file size */
; 107  :     if (fstat (fd, &fst) < 0)

  000a9	48 8d 94 24 08
	02 00 00	 lea	 rdx, QWORD PTR fst$[rsp]
  000b1	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fstat64
  000bb	85 c0		 test	 eax, eax
  000bd	7d 05		 jge	 SHORT $LN14@cckd_swape

; 108  :         goto cswp_fstat_error;

  000bf	e9 13 0a 00 00	 jmp	 $cswp_fstat_error$124
$LN14@cckd_swape:

; 109  :     gui_fprintf (stderr, "SIZE=%"PRIu64"\n", (U64) fst.st_size);

  000c4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  000cb	83 38 00	 cmp	 DWORD PTR [rax], 0
  000ce	74 23		 je	 SHORT $LN15@cckd_swape
  000d0	b9 02 00 00 00	 mov	 ecx, 2
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000db	4c 8b 84 24 20
	02 00 00	 mov	 r8, QWORD PTR fst$[rsp+24]
  000e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168774
  000ea	48 8b c8	 mov	 rcx, rax
  000ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN15@cckd_swape:

; 110  :     hipos = fst.st_size;

  000f3	48 8b 84 24 20
	02 00 00	 mov	 rax, QWORD PTR fst$[rsp+24]
  000fb	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR hipos$[rsp], rax

; 111  : 
; 112  :     /* Device header */
; 113  :     off = CCKD_DEVHDR_POS;

  00103	48 c7 84 24 80
	00 00 00 00 02
	00 00		 mov	 QWORD PTR off$[rsp], 512 ; 00000200H

; 114  :     if (lseek (fd, off, SEEK_SET) < 0)

  0010f	45 33 c0	 xor	 r8d, r8d
  00112	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0011a	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00124	48 85 c0	 test	 rax, rax
  00127	7d 05		 jge	 SHORT $LN16@cckd_swape

; 115  :         goto cswp_lseek_error;

  00129	e9 df 0b 00 00	 jmp	 $cswp_lseek_error$125
$LN16@cckd_swape:

; 116  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0012e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00135	83 38 00	 cmp	 DWORD PTR [rax], 0
  00138	74 40		 je	 SHORT $LN17@cckd_swape
  0013a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00140	33 d2		 xor	 edx, edx
  00142	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00146	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0014c	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv95[rsp], rax
  00154	b9 02 00 00 00	 mov	 ecx, 2
  00159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0015f	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv95[rsp]
  00167	4c 8b c1	 mov	 r8, rcx
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168777
  00171	48 8b c8	 mov	 rcx, rax
  00174	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN17@cckd_swape:

; 117  :     len = CCKD_DEVHDR_SIZE;

  0017a	c7 44 24 74 00
	02 00 00	 mov	 DWORD PTR len$[rsp], 512 ; 00000200H

; 118  :     if ((rc = read (fd, &cdevhdr, len)) != len)

  00182	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00187	48 8d 94 24 40
	02 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  0018f	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00193	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00199	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0019d	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  001a1	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  001a5	74 05		 je	 SHORT $LN18@cckd_swape

; 119  :         goto cswp_read_error;

  001a7	e9 b1 0d 00 00	 jmp	 $cswp_read_error$126
$LN18@cckd_swape:

; 120  : 
; 121  :     swapend = (cdevhdr.cdh_opts & CCKD_OPT_BIGEND) != cckd_def_opt_bigend();

  001ac	0f b6 84 24 43
	02 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  001b4	83 e0 02	 and	 eax, 2
  001b7	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv141[rsp], eax
  001be	e8 00 00 00 00	 call	 cckd_def_opt_bigend
  001c3	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR tv141[rsp]
  001ca	3b c8		 cmp	 ecx, eax
  001cc	74 0d		 je	 SHORT $LN73@cckd_swape
  001ce	c7 84 24 e4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv144[rsp], 1
  001d9	eb 0b		 jmp	 SHORT $LN74@cckd_swape
$LN73@cckd_swape:
  001db	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv144[rsp], 0
$LN74@cckd_swape:
  001e6	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR tv144[rsp]
  001ed	89 84 24 98 00
	00 00		 mov	 DWORD PTR swapend$[rsp], eax

; 122  : 
; 123  :     cckd_swapend_chdr (&cdevhdr);

  001f4	48 8d 8c 24 40
	02 00 00	 lea	 rcx, QWORD PTR cdevhdr$[rsp]
  001fc	e8 00 00 00 00	 call	 cckd_swapend_chdr

; 124  : 
; 125  :     cdevhdr.cdh_opts |= CCKD_OPT_OPENRW;

  00201	0f b6 84 24 43
	02 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  00209	83 c8 40	 or	 eax, 64			; 00000040H
  0020c	88 84 24 43 02
	00 00		 mov	 BYTE PTR cdevhdr$[rsp+3], al

; 126  :     if (lseek (fd, off, SEEK_SET) < 0)

  00213	45 33 c0	 xor	 r8d, r8d
  00216	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0021e	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00222	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00228	48 85 c0	 test	 rax, rax
  0022b	7d 05		 jge	 SHORT $LN19@cckd_swape

; 127  :         goto cswp_lseek_error;

  0022d	e9 db 0a 00 00	 jmp	 $cswp_lseek_error$125
$LN19@cckd_swape:

; 128  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00232	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00239	83 38 00	 cmp	 DWORD PTR [rax], 0
  0023c	74 40		 je	 SHORT $LN20@cckd_swape
  0023e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00244	33 d2		 xor	 edx, edx
  00246	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0024a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00250	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv156[rsp], rax
  00258	b9 02 00 00 00	 mov	 ecx, 2
  0025d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00263	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv156[rsp]
  0026b	4c 8b c1	 mov	 r8, rcx
  0026e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168781
  00275	48 8b c8	 mov	 rcx, rax
  00278	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN20@cckd_swape:

; 129  :     if ((rc = write (fd, &cdevhdr, len)) != len)

  0027e	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00283	48 8d 94 24 40
	02 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  0028b	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0028f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00295	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00299	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  0029d	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  002a1	74 05		 je	 SHORT $LN21@cckd_swape

; 130  :         goto cswp_write_error;

  002a3	e9 33 0f 00 00	 jmp	 $cswp_write_error$127
$LN21@cckd_swape:

; 131  : 
; 132  :     if (!swapend)

  002a8	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR swapend$[rsp], 0
  002b0	75 0d		 jne	 SHORT $LN22@cckd_swape

; 133  :         cckd_swapend_chdr (&cdevhdr);

  002b2	48 8d 8c 24 40
	02 00 00	 lea	 rcx, QWORD PTR cdevhdr$[rsp]
  002ba	e8 00 00 00 00	 call	 cckd_swapend_chdr
$LN22@cckd_swape:

; 134  : 
; 135  :     /* l1 table */
; 136  :     len = cdevhdr.num_L1tab * CCKD_L1ENT_SIZE;

  002bf	48 63 84 24 44
	02 00 00	 movsxd	 rax, DWORD PTR cdevhdr$[rsp+4]
  002c7	48 c1 e0 02	 shl	 rax, 2
  002cb	89 44 24 74	 mov	 DWORD PTR len$[rsp], eax

; 137  :     if ((l1 = malloc (len)) == NULL)

  002cf	48 63 44 24 74	 movsxd	 rax, DWORD PTR len$[rsp]
  002d4	48 8b c8	 mov	 rcx, rax
  002d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  002dd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR l1$[rsp], rax
  002e5	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR l1$[rsp], 0
  002ee	75 05		 jne	 SHORT $LN23@cckd_swape

; 138  :         goto cswp_malloc_error;

  002f0	e9 64 11 00 00	 jmp	 $cswp_malloc_error$128
$LN23@cckd_swape:

; 139  :     off = CCKD_L1TAB_POS;

  002f5	48 c7 84 24 80
	00 00 00 00 04
	00 00		 mov	 QWORD PTR off$[rsp], 1024 ; 00000400H

; 140  :     if (lseek (fd, off, SEEK_SET) < 0)

  00301	45 33 c0	 xor	 r8d, r8d
  00304	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  0030c	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00310	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00316	48 85 c0	 test	 rax, rax
  00319	7d 05		 jge	 SHORT $LN24@cckd_swape

; 141  :         goto cswp_lseek_error;

  0031b	e9 ed 09 00 00	 jmp	 $cswp_lseek_error$125
$LN24@cckd_swape:

; 142  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00320	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00327	83 38 00	 cmp	 DWORD PTR [rax], 0
  0032a	74 40		 je	 SHORT $LN25@cckd_swape
  0032c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00332	33 d2		 xor	 edx, edx
  00334	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00338	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0033e	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv188[rsp], rax
  00346	b9 02 00 00 00	 mov	 ecx, 2
  0034b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00351	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv188[rsp]
  00359	4c 8b c1	 mov	 r8, rcx
  0035c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168787
  00363	48 8b c8	 mov	 rcx, rax
  00366	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN25@cckd_swape:

; 143  :     if ((rc = read (fd, l1, len)) != len)

  0036c	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00371	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  00379	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0037d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00383	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00387	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  0038b	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  0038f	74 05		 je	 SHORT $LN26@cckd_swape

; 144  :         goto cswp_read_error;

  00391	e9 c7 0b 00 00	 jmp	 $cswp_read_error$126
$LN26@cckd_swape:

; 145  : 
; 146  :     cckd_swapend_l1 (l1, (int)cdevhdr.num_L1tab);

  00396	8b 94 24 44 02
	00 00		 mov	 edx, DWORD PTR cdevhdr$[rsp+4]
  0039d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  003a5	e8 00 00 00 00	 call	 cckd_swapend_l1

; 147  : 
; 148  :     if (lseek (fd, off, SEEK_SET) < 0)

  003aa	45 33 c0	 xor	 r8d, r8d
  003ad	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  003b5	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  003b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  003bf	48 85 c0	 test	 rax, rax
  003c2	7d 05		 jge	 SHORT $LN27@cckd_swape

; 149  :         goto cswp_lseek_error;

  003c4	e9 44 09 00 00	 jmp	 $cswp_lseek_error$125
$LN27@cckd_swape:

; 150  :     gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  003c9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  003d0	83 38 00	 cmp	 DWORD PTR [rax], 0
  003d3	74 40		 je	 SHORT $LN28@cckd_swape
  003d5	41 b8 01 00 00
	00		 mov	 r8d, 1
  003db	33 d2		 xor	 edx, edx
  003dd	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  003e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  003e7	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv210[rsp], rax
  003ef	b9 02 00 00 00	 mov	 ecx, 2
  003f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003fa	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR tv210[rsp]
  00402	4c 8b c1	 mov	 r8, rcx
  00405	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168791
  0040c	48 8b c8	 mov	 rcx, rax
  0040f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN28@cckd_swape:

; 151  :     if ((rc = write (fd, l1, len)) != len)

  00415	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  0041a	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR l1$[rsp]
  00422	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00426	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0042c	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00430	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  00434	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00438	74 05		 je	 SHORT $LN29@cckd_swape

; 152  :         goto cswp_write_error;

  0043a	e9 9c 0d 00 00	 jmp	 $cswp_write_error$127
$LN29@cckd_swape:

; 153  : 
; 154  :     if (!swapend)

  0043f	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR swapend$[rsp], 0
  00447	75 14		 jne	 SHORT $LN30@cckd_swape

; 155  :         cckd_swapend_l1 (l1, (int)cdevhdr.num_L1tab);

  00449	8b 94 24 44 02
	00 00		 mov	 edx, DWORD PTR cdevhdr$[rsp+4]
  00450	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  00458	e8 00 00 00 00	 call	 cckd_swapend_l1
$LN30@cckd_swape:

; 156  : 
; 157  :     lopos = CCKD_L1TAB_POS + len;

  0045d	48 63 44 24 74	 movsxd	 rax, DWORD PTR len$[rsp]
  00462	48 05 00 04 00
	00		 add	 rax, 1024		; 00000400H
  00468	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR lopos$[rsp], rax

; 158  : 
; 159  :     /* l2 tables */
; 160  :     for (i = 0; i < cdevhdr.num_L1tab; i++)

  00470	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00478	eb 0a		 jmp	 SHORT $LN4@cckd_swape
$LN2@cckd_swape:
  0047a	8b 44 24 7c	 mov	 eax, DWORD PTR i$[rsp]
  0047e	ff c0		 inc	 eax
  00480	89 44 24 7c	 mov	 DWORD PTR i$[rsp], eax
$LN4@cckd_swape:
  00484	8b 84 24 44 02
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+4]
  0048b	39 44 24 7c	 cmp	 DWORD PTR i$[rsp], eax
  0048f	0f 8d cb 01 00
	00		 jge	 $LN3@cckd_swape

; 161  :     {
; 162  :         if (0
; 163  :             || l1[i] == CCKD_NOSIZE
; 164  :             || l1[i] == CCKD_MAXSIZE
; 165  :             || l1[i] < lopos
; 166  :             || l1[i] > hipos - CCKD_L2TAB_SIZE

  00495	33 c0		 xor	 eax, eax
  00497	85 c0		 test	 eax, eax
  00499	75 64		 jne	 SHORT $LN32@cckd_swape
  0049b	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  004a0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  004a8	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  004ac	74 51		 je	 SHORT $LN32@cckd_swape
  004ae	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  004b3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  004bb	83 3c 81 ff	 cmp	 DWORD PTR [rcx+rax*4], -1 ; ffffffffH
  004bf	74 3e		 je	 SHORT $LN32@cckd_swape
  004c1	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  004c6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  004ce	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  004d1	48 3b 84 24 08
	01 00 00	 cmp	 rax, QWORD PTR lopos$[rsp]
  004d9	7c 24		 jl	 SHORT $LN32@cckd_swape
  004db	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  004e0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  004e8	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  004eb	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR hipos$[rsp]
  004f3	48 81 e9 00 08
	00 00		 sub	 rcx, 2048		; 00000800H
  004fa	48 3b c1	 cmp	 rax, rcx
  004fd	7e 05		 jle	 SHORT $LN31@cckd_swape
$LN32@cckd_swape:

; 167  :         )
; 168  :             continue;

  004ff	e9 76 ff ff ff	 jmp	 $LN2@cckd_swape
$LN31@cckd_swape:

; 169  : 
; 170  :         off = (off_t)l1[i];

  00504	48 63 44 24 7c	 movsxd	 rax, DWORD PTR i$[rsp]
  00509	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  00511	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00514	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 171  :         if (lseek (fd, off, SEEK_SET) < 0)

  0051c	45 33 c0	 xor	 r8d, r8d
  0051f	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00527	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0052b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00531	48 85 c0	 test	 rax, rax
  00534	7d 05		 jge	 SHORT $LN33@cckd_swape

; 172  :             goto cswp_lseek_error;

  00536	e9 d2 07 00 00	 jmp	 $cswp_lseek_error$125
$LN33@cckd_swape:

; 173  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0053b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00542	83 38 00	 cmp	 DWORD PTR [rax], 0
  00545	74 40		 je	 SHORT $LN34@cckd_swape
  00547	41 b8 01 00 00
	00		 mov	 r8d, 1
  0054d	33 d2		 xor	 edx, edx
  0054f	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00553	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00559	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv261[rsp], rax
  00561	b9 02 00 00 00	 mov	 ecx, 2
  00566	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0056c	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR tv261[rsp]
  00574	4c 8b c1	 mov	 r8, rcx
  00577	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168798
  0057e	48 8b c8	 mov	 rcx, rax
  00581	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN34@cckd_swape:

; 174  :         len = CCKD_L2TAB_SIZE;

  00587	c7 44 24 74 00
	08 00 00	 mov	 DWORD PTR len$[rsp], 2048 ; 00000800H

; 175  :         if ((rc = read (fd, l2, len)) != len)

  0058f	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00594	48 8d 94 24 40
	04 00 00	 lea	 rdx, QWORD PTR l2$[rsp]
  0059c	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  005a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  005a6	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  005aa	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  005ae	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  005b2	74 05		 je	 SHORT $LN35@cckd_swape

; 176  :             goto cswp_read_error;

  005b4	e9 a4 09 00 00	 jmp	 $cswp_read_error$126
$LN35@cckd_swape:

; 177  : 
; 178  :         cckd_swapend_l2 (l2);

  005b9	48 8d 8c 24 40
	04 00 00	 lea	 rcx, QWORD PTR l2$[rsp]
  005c1	e8 00 00 00 00	 call	 cckd_swapend_l2

; 179  : 
; 180  :         if (lseek (fd, off, SEEK_SET) < 0)

  005c6	45 33 c0	 xor	 r8d, r8d
  005c9	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  005d1	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  005d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  005db	48 85 c0	 test	 rax, rax
  005de	7d 05		 jge	 SHORT $LN36@cckd_swape

; 181  :             goto cswp_lseek_error;

  005e0	e9 28 07 00 00	 jmp	 $cswp_lseek_error$125
$LN36@cckd_swape:

; 182  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  005e5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  005ec	83 38 00	 cmp	 DWORD PTR [rax], 0
  005ef	74 40		 je	 SHORT $LN37@cckd_swape
  005f1	41 b8 01 00 00
	00		 mov	 r8d, 1
  005f7	33 d2		 xor	 edx, edx
  005f9	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  005fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00603	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv282[rsp], rax
  0060b	b9 02 00 00 00	 mov	 ecx, 2
  00610	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00616	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tv282[rsp]
  0061e	4c 8b c1	 mov	 r8, rcx
  00621	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168802
  00628	48 8b c8	 mov	 rcx, rax
  0062b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN37@cckd_swape:

; 183  :         if ((rc = write (fd, l2, len)) != len)

  00631	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00636	48 8d 94 24 40
	04 00 00	 lea	 rdx, QWORD PTR l2$[rsp]
  0063e	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00642	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00648	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0064c	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  00650	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00654	74 05		 je	 SHORT $LN38@cckd_swape

; 184  :             goto cswp_write_error;

  00656	e9 80 0b 00 00	 jmp	 $cswp_write_error$127
$LN38@cckd_swape:

; 185  :     }

  0065b	e9 1a fe ff ff	 jmp	 $LN2@cckd_swape
$LN3@cckd_swape:

; 186  : 
; 187  :     free (l1);

  00660	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  00668	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 188  :     l1 = NULL;

  0066e	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR l1$[rsp], 0

; 189  : 
; 190  :     /* free space */
; 191  :     if (cdevhdr.free_off && cdevhdr.free_off >= lopos
; 192  :      && cdevhdr.free_off <= hipos - CCKD_FREEBLK_SIZE)

  0067a	83 bc 24 54 02
	00 00 00	 cmp	 DWORD PTR cdevhdr$[rsp+20], 0
  00682	0f 84 48 04 00
	00		 je	 $LN39@cckd_swape
  00688	8b 84 24 54 02
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+20]
  0068f	48 3b 84 24 08
	01 00 00	 cmp	 rax, QWORD PTR lopos$[rsp]
  00697	0f 8c 33 04 00
	00		 jl	 $LN39@cckd_swape
  0069d	8b 84 24 54 02
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+20]
  006a4	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR hipos$[rsp]
  006ac	48 83 e9 08	 sub	 rcx, 8
  006b0	48 3b c1	 cmp	 rax, rcx
  006b3	0f 8f 17 04 00
	00		 jg	 $LN39@cckd_swape

; 193  :     {
; 194  :         off = (off_t)cdevhdr.free_off;

  006b9	8b 84 24 54 02
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+20]
  006c0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 195  :         if (lseek (fd, off, SEEK_SET) < 0)

  006c8	45 33 c0	 xor	 r8d, r8d
  006cb	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  006d3	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  006d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  006dd	48 85 c0	 test	 rax, rax
  006e0	7d 05		 jge	 SHORT $LN40@cckd_swape

; 196  :             goto cswp_lseek_error;

  006e2	e9 26 06 00 00	 jmp	 $cswp_lseek_error$125
$LN40@cckd_swape:

; 197  :         gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  006e7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  006ee	83 38 00	 cmp	 DWORD PTR [rax], 0
  006f1	74 40		 je	 SHORT $LN41@cckd_swape
  006f3	41 b8 01 00 00
	00		 mov	 r8d, 1
  006f9	33 d2		 xor	 edx, edx
  006fb	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  006ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00705	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv310[rsp], rax
  0070d	b9 02 00 00 00	 mov	 ecx, 2
  00712	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00718	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR tv310[rsp]
  00720	4c 8b c1	 mov	 r8, rcx
  00723	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168807
  0072a	48 8b c8	 mov	 rcx, rax
  0072d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN41@cckd_swape:

; 198  :         len = CCKD_FREEBLK_SIZE;

  00733	c7 44 24 74 08
	00 00 00	 mov	 DWORD PTR len$[rsp], 8

; 199  :         if ((rc = read (fd, &freeblk, len)) != len)

  0073b	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00740	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  00748	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0074c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00752	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00756	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  0075a	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  0075e	74 05		 je	 SHORT $LN42@cckd_swape

; 200  :             goto cswp_read_error;

  00760	e9 f8 07 00 00	 jmp	 $cswp_read_error$126
$LN42@cckd_swape:

; 201  :         if (memcmp(&freeblk, "FREE_BLK", 8) == 0)

  00765	41 b8 08 00 00
	00		 mov	 r8d, 8
  0076b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168811
  00772	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR freeblk$[rsp]
  0077a	e8 00 00 00 00	 call	 memcmp
  0077f	85 c0		 test	 eax, eax
  00781	0f 85 95 01 00
	00		 jne	 $LN43@cckd_swape

; 202  :         {
; 203  :             /* New format free space */
; 204  :             for (i = 0; i < cdevhdr.free_num; i++)

  00787	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0078f	eb 0a		 jmp	 SHORT $LN7@cckd_swape
$LN5@cckd_swape:
  00791	8b 44 24 7c	 mov	 eax, DWORD PTR i$[rsp]
  00795	ff c0		 inc	 eax
  00797	89 44 24 7c	 mov	 DWORD PTR i$[rsp], eax
$LN7@cckd_swape:
  0079b	8b 84 24 60 02
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+32]
  007a2	39 44 24 7c	 cmp	 DWORD PTR i$[rsp], eax
  007a6	0f 8d 6b 01 00
	00		 jge	 $LN6@cckd_swape

; 205  :             {
; 206  :                 off += CCKD_FREEBLK_SIZE;

  007ac	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR off$[rsp]
  007b4	48 83 c0 08	 add	 rax, 8
  007b8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 207  :                 if (off > hipos - CCKD_FREEBLK_SIZE)

  007c0	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR hipos$[rsp]
  007c8	48 83 e8 08	 sub	 rax, 8
  007cc	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  007d4	7e 05		 jle	 SHORT $LN45@cckd_swape

; 208  :                     break;

  007d6	e9 3c 01 00 00	 jmp	 $LN6@cckd_swape
$LN45@cckd_swape:

; 209  :                 if (lseek (fd, off, SEEK_SET) < 0)

  007db	45 33 c0	 xor	 r8d, r8d
  007de	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  007e6	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  007ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  007f0	48 85 c0	 test	 rax, rax
  007f3	7d 05		 jge	 SHORT $LN46@cckd_swape

; 210  :                     goto cswp_lseek_error;

  007f5	e9 13 05 00 00	 jmp	 $cswp_lseek_error$125
$LN46@cckd_swape:

; 211  :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  007fa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00801	83 38 00	 cmp	 DWORD PTR [rax], 0
  00804	74 40		 je	 SHORT $LN47@cckd_swape
  00806	41 b8 01 00 00
	00		 mov	 r8d, 1
  0080c	33 d2		 xor	 edx, edx
  0080e	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00812	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00818	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv342[rsp], rax
  00820	b9 02 00 00 00	 mov	 ecx, 2
  00825	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0082b	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR tv342[rsp]
  00833	4c 8b c1	 mov	 r8, rcx
  00836	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168815
  0083d	48 8b c8	 mov	 rcx, rax
  00840	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN47@cckd_swape:

; 212  :                 if ((rc = read (fd, &freeblk, len)) != len)

  00846	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  0084b	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  00853	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00857	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0085d	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00861	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  00865	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00869	74 05		 je	 SHORT $LN48@cckd_swape

; 213  :                     goto cswp_read_error;

  0086b	e9 ed 06 00 00	 jmp	 $cswp_read_error$126
$LN48@cckd_swape:

; 214  : 
; 215  :                 cckd_swapend_free (&freeblk);

  00870	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR freeblk$[rsp]
  00878	e8 00 00 00 00	 call	 cckd_swapend_free

; 216  : 
; 217  :                 if (lseek (fd, off, SEEK_SET) < 0)

  0087d	45 33 c0	 xor	 r8d, r8d
  00880	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00888	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0088c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00892	48 85 c0	 test	 rax, rax
  00895	7d 05		 jge	 SHORT $LN49@cckd_swape

; 218  :                     goto cswp_lseek_error;

  00897	e9 71 04 00 00	 jmp	 $cswp_lseek_error$125
$LN49@cckd_swape:

; 219  :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0089c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  008a3	83 38 00	 cmp	 DWORD PTR [rax], 0
  008a6	74 40		 je	 SHORT $LN50@cckd_swape
  008a8	41 b8 01 00 00
	00		 mov	 r8d, 1
  008ae	33 d2		 xor	 edx, edx
  008b0	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  008b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  008ba	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv363[rsp], rax
  008c2	b9 02 00 00 00	 mov	 ecx, 2
  008c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008cd	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR tv363[rsp]
  008d5	4c 8b c1	 mov	 r8, rcx
  008d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168819
  008df	48 8b c8	 mov	 rcx, rax
  008e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN50@cckd_swape:

; 220  :                 if ((rc = write (fd, &freeblk, len)) != len)

  008e8	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  008ed	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  008f5	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  008f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  008ff	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00903	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  00907	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  0090b	74 05		 je	 SHORT $LN51@cckd_swape

; 221  :                     goto cswp_write_error;

  0090d	e9 c9 08 00 00	 jmp	 $cswp_write_error$127
$LN51@cckd_swape:

; 222  :             } /* for each free space */

  00912	e9 7a fe ff ff	 jmp	 $LN5@cckd_swape
$LN6@cckd_swape:

; 223  :         } /* if new format free space */

  00917	e9 b4 01 00 00	 jmp	 $LN44@cckd_swape
$LN43@cckd_swape:

; 224  :         else
; 225  :         {
; 226  :             /* Old format free space */
; 227  :             for (i = 0; i < cdevhdr.free_num; i++)

  0091c	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00924	eb 0a		 jmp	 SHORT $LN10@cckd_swape
$LN8@cckd_swape:
  00926	8b 44 24 7c	 mov	 eax, DWORD PTR i$[rsp]
  0092a	ff c0		 inc	 eax
  0092c	89 44 24 7c	 mov	 DWORD PTR i$[rsp], eax
$LN10@cckd_swape:
  00930	8b 84 24 60 02
	00 00		 mov	 eax, DWORD PTR cdevhdr$[rsp+32]
  00937	39 44 24 7c	 cmp	 DWORD PTR i$[rsp], eax
  0093b	0f 8d 8f 01 00
	00		 jge	 $LN9@cckd_swape

; 228  :             {
; 229  :                 if (off < lopos || off > hipos - CCKD_FREEBLK_SIZE)

  00941	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR lopos$[rsp]
  00949	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  00951	7c 16		 jl	 SHORT $LN53@cckd_swape
  00953	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR hipos$[rsp]
  0095b	48 83 e8 08	 sub	 rax, 8
  0095f	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR off$[rsp], rax
  00967	7e 05		 jle	 SHORT $LN52@cckd_swape
$LN53@cckd_swape:

; 230  :                     break;

  00969	e9 62 01 00 00	 jmp	 $LN9@cckd_swape
$LN52@cckd_swape:

; 231  :                 if (lseek (fd, off, SEEK_SET) < 0)

  0096e	45 33 c0	 xor	 r8d, r8d
  00971	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00979	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  0097d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00983	48 85 c0	 test	 rax, rax
  00986	7d 05		 jge	 SHORT $LN54@cckd_swape

; 232  :                     goto cswp_lseek_error;

  00988	e9 80 03 00 00	 jmp	 $cswp_lseek_error$125
$LN54@cckd_swape:

; 233  :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  0098d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00994	83 38 00	 cmp	 DWORD PTR [rax], 0
  00997	74 40		 je	 SHORT $LN55@cckd_swape
  00999	41 b8 01 00 00
	00		 mov	 r8d, 1
  0099f	33 d2		 xor	 edx, edx
  009a1	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  009a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  009ab	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv388[rsp], rax
  009b3	b9 02 00 00 00	 mov	 ecx, 2
  009b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009be	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR tv388[rsp]
  009c6	4c 8b c1	 mov	 r8, rcx
  009c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168825
  009d0	48 8b c8	 mov	 rcx, rax
  009d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN55@cckd_swape:

; 234  :                 if ((rc = read (fd, &freeblk, len)) != len)

  009d9	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  009de	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  009e6	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  009ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  009f0	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  009f4	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  009f8	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  009fc	74 05		 je	 SHORT $LN56@cckd_swape

; 235  :                     goto cswp_read_error;

  009fe	e9 5a 05 00 00	 jmp	 $cswp_read_error$126
$LN56@cckd_swape:

; 236  : 
; 237  :                 cckd_swapend_free (&freeblk);

  00a03	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR freeblk$[rsp]
  00a0b	e8 00 00 00 00	 call	 cckd_swapend_free

; 238  : 
; 239  :                 if (lseek (fd, off, SEEK_SET) < 0)

  00a10	45 33 c0	 xor	 r8d, r8d
  00a13	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR off$[rsp]
  00a1b	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00a1f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00a25	48 85 c0	 test	 rax, rax
  00a28	7d 05		 jge	 SHORT $LN57@cckd_swape

; 240  :                     goto cswp_lseek_error;

  00a2a	e9 de 02 00 00	 jmp	 $cswp_lseek_error$125
$LN57@cckd_swape:

; 241  :                 gui_fprintf (stderr, "POS=%"PRIu64"\n", (U64) lseek( fd, 0, SEEK_CUR ));

  00a2f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00a36	83 38 00	 cmp	 DWORD PTR [rax], 0
  00a39	74 40		 je	 SHORT $LN58@cckd_swape
  00a3b	41 b8 01 00 00
	00		 mov	 r8d, 1
  00a41	33 d2		 xor	 edx, edx
  00a43	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00a47	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00a4d	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv409[rsp], rax
  00a55	b9 02 00 00 00	 mov	 ecx, 2
  00a5a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a60	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR tv409[rsp]
  00a68	4c 8b c1	 mov	 r8, rcx
  00a6b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG168829
  00a72	48 8b c8	 mov	 rcx, rax
  00a75	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN58@cckd_swape:

; 242  :                 if ((rc = write (fd, &freeblk, len)) != len)

  00a7b	44 8b 44 24 74	 mov	 r8d, DWORD PTR len$[rsp]
  00a80	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR freeblk$[rsp]
  00a88	8b 4c 24 70	 mov	 ecx, DWORD PTR fd$[rsp]
  00a8c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00a92	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00a96	8b 44 24 74	 mov	 eax, DWORD PTR len$[rsp]
  00a9a	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00a9e	74 05		 je	 SHORT $LN59@cckd_swape

; 243  :                     goto cswp_write_error;

  00aa0	e9 36 07 00 00	 jmp	 $cswp_write_error$127
$LN59@cckd_swape:

; 244  : 
; 245  :                 if (!swapend)

  00aa5	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR swapend$[rsp], 0
  00aad	75 0d		 jne	 SHORT $LN60@cckd_swape

; 246  :                     cckd_swapend_free (&freeblk);

  00aaf	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR freeblk$[rsp]
  00ab7	e8 00 00 00 00	 call	 cckd_swapend_free
$LN60@cckd_swape:

; 247  : 
; 248  :                 off = (off_t)freeblk.fb_offnxt;

  00abc	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR freeblk$[rsp]
  00ac3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR off$[rsp], rax

; 249  :             } /* for each free space */

  00acb	e9 56 fe ff ff	 jmp	 $LN8@cckd_swape
$LN9@cckd_swape:
$LN44@cckd_swape:
$LN39@cckd_swape:

; 250  :         } /* else old format free space */
; 251  :     } /* if free space */
; 252  : 
; 253  :     return 0;

  00ad0	33 c0		 xor	 eax, eax
  00ad2	e9 f2 0b 00 00	 jmp	 $LN1@cckd_swape
$cswp_fstat_error$124:

; 254  : 
; 255  :     /* error exits */
; 256  : cswp_fstat_error:
; 257  :     if(dev->batch)

  00ad7	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00adf	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00ae5	c1 e8 0a	 shr	 eax, 10
  00ae8	83 e0 01	 and	 eax, 1
  00aeb	85 c0		 test	 eax, eax
  00aed	0f 84 0d 01 00
	00		 je	 $LN61@cckd_swape

; 258  :         FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  00af3	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00afc	74 15		 je	 SHORT $LN75@cckd_swape
  00afe	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b06	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00b0a	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv439[rsp], eax
  00b11	eb 0b		 jmp	 SHORT $LN76@cckd_swape
$LN75@cckd_swape:
  00b13	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv439[rsp], 0
$LN76@cckd_swape:
  00b1e	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00b27	74 17		 je	 SHORT $LN77@cckd_swape
  00b29	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b31	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00b35	d1 f8		 sar	 eax, 1
  00b37	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv445[rsp], eax
  00b3e	eb 0b		 jmp	 SHORT $LN78@cckd_swape
$LN77@cckd_swape:
  00b40	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv445[rsp], 0
$LN78@cckd_swape:
  00b4b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00b51	8b 08		 mov	 ecx, DWORD PTR [rax]
  00b53	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00b59	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv429[rsp], rax
  00b61	48 8b 8c 24 a0
	0c 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b69	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00b70	48 89 8c 24 90
	01 00 00	 mov	 QWORD PTR tv434[rsp], rcx
  00b78	b9 01 00 00 00	 mov	 ecx, 1
  00b7d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b83	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR tv429[rsp]
  00b8b	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00b90	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168834
  00b97	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00b9c	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR tv434[rsp]
  00ba4	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00ba9	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv439[rsp]
  00bb0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00bb4	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv445[rsp]
  00bbb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00bbf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168835
  00bc6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00bcb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168836
  00bd2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00bd7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00bdc	41 b9 03 00 00
	00		 mov	 r9d, 3
  00be2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168837
  00be9	ba 03 01 00 00	 mov	 edx, 259		; 00000103H
  00bee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168838
  00bf5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00bfb	e9 08 01 00 00	 jmp	 $LN62@cckd_swape
$LN61@cckd_swape:

; 259  :                 "fstat()", strerror( errno ));
; 260  :     else
; 261  :         WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  00c00	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00c09	74 15		 je	 SHORT $LN79@cckd_swape
  00c0b	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c13	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00c17	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv466[rsp], eax
  00c1e	eb 0b		 jmp	 SHORT $LN80@cckd_swape
$LN79@cckd_swape:
  00c20	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv466[rsp], 0
$LN80@cckd_swape:
  00c2b	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00c34	74 17		 je	 SHORT $LN81@cckd_swape
  00c36	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c3e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00c42	d1 f8		 sar	 eax, 1
  00c44	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv472[rsp], eax
  00c4b	eb 0b		 jmp	 SHORT $LN82@cckd_swape
$LN81@cckd_swape:
  00c4d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv472[rsp], 0
$LN82@cckd_swape:
  00c58	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00c5e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00c60	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00c66	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv456[rsp], rax
  00c6e	48 8b 8c 24 a0
	0c 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00c76	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00c7d	48 89 8c 24 a0
	01 00 00	 mov	 QWORD PTR tv461[rsp], rcx
  00c85	b9 01 00 00 00	 mov	 ecx, 1
  00c8a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c90	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR tv456[rsp]
  00c98	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00c9d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168839
  00ca4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00ca9	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR tv461[rsp]
  00cb1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00cb6	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv466[rsp]
  00cbd	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00cc1	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv472[rsp]
  00cc8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00ccc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168840
  00cd3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00cd8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168841
  00cdf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00ce4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ce9	41 b9 03 00 00
	00		 mov	 r9d, 3
  00cef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168842
  00cf6	ba 06 01 00 00	 mov	 edx, 262		; 00000106H
  00cfb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168843
  00d02	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN62@cckd_swape:

; 262  :               "fstat()", strerror( errno ));
; 263  :     goto cswp_error;

  00d08	e9 9e 09 00 00	 jmp	 $cswp_error$129
$cswp_lseek_error$125:

; 264  : 
; 265  : cswp_lseek_error:
; 266  :     if(dev->batch)

  00d0d	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d15	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00d1b	c1 e8 0a	 shr	 eax, 10
  00d1e	83 e0 01	 and	 eax, 1
  00d21	85 c0		 test	 eax, eax
  00d23	0f 84 1a 01 00
	00		 je	 $LN63@cckd_swape

; 267  :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  00d29	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00d32	74 15		 je	 SHORT $LN83@cckd_swape
  00d34	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d3c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00d40	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv498[rsp], eax
  00d47	eb 0b		 jmp	 SHORT $LN84@cckd_swape
$LN83@cckd_swape:
  00d49	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv498[rsp], 0
$LN84@cckd_swape:
  00d54	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00d5d	74 17		 je	 SHORT $LN85@cckd_swape
  00d5f	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d67	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00d6b	d1 f8		 sar	 eax, 1
  00d6d	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv504[rsp], eax
  00d74	eb 0b		 jmp	 SHORT $LN86@cckd_swape
$LN85@cckd_swape:
  00d76	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv504[rsp], 0
$LN86@cckd_swape:
  00d81	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00d87	8b 08		 mov	 ecx, DWORD PTR [rax]
  00d89	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00d8f	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv487[rsp], rax
  00d97	48 8b 8c 24 a0
	0c 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00d9f	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00da6	48 89 8c 24 b0
	01 00 00	 mov	 QWORD PTR tv493[rsp], rcx
  00dae	b9 01 00 00 00	 mov	 ecx, 1
  00db3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00db9	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR tv487[rsp]
  00dc1	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00dc6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  00dce	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00dd3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168846
  00dda	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00ddf	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tv493[rsp]
  00de7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00dec	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv498[rsp]
  00df3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00df7	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv504[rsp]
  00dfe	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00e02	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168847
  00e09	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e0e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168848
  00e15	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e1a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e1f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e25	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168849
  00e2c	ba 0c 01 00 00	 mov	 edx, 268		; 0000010cH
  00e31	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168850
  00e38	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00e3e	e9 15 01 00 00	 jmp	 $LN64@cckd_swape
$LN63@cckd_swape:

; 268  :                 "lseek()", off, strerror( errno ));
; 269  :     else
; 270  :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  00e43	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00e4c	74 15		 je	 SHORT $LN87@cckd_swape
  00e4e	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e56	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00e5a	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv526[rsp], eax
  00e61	eb 0b		 jmp	 SHORT $LN88@cckd_swape
$LN87@cckd_swape:
  00e63	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv526[rsp], 0
$LN88@cckd_swape:
  00e6e	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00e77	74 17		 je	 SHORT $LN89@cckd_swape
  00e79	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e81	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00e85	d1 f8		 sar	 eax, 1
  00e87	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv532[rsp], eax
  00e8e	eb 0b		 jmp	 SHORT $LN90@cckd_swape
$LN89@cckd_swape:
  00e90	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv532[rsp], 0
$LN90@cckd_swape:
  00e9b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00ea1	8b 08		 mov	 ecx, DWORD PTR [rax]
  00ea3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00ea9	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv515[rsp], rax
  00eb1	48 8b 8c 24 a0
	0c 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00eb9	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00ec0	48 89 8c 24 c0
	01 00 00	 mov	 QWORD PTR tv521[rsp], rcx
  00ec8	b9 01 00 00 00	 mov	 ecx, 1
  00ecd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ed3	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR tv515[rsp]
  00edb	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00ee0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  00ee8	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00eed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168851
  00ef4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00ef9	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR tv521[rsp]
  00f01	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00f06	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv526[rsp]
  00f0d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00f11	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv532[rsp]
  00f18	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00f1c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168852
  00f23	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00f28	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168853
  00f2f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00f34	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f39	41 b9 03 00 00
	00		 mov	 r9d, 3
  00f3f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168854
  00f46	ba 0f 01 00 00	 mov	 edx, 271		; 0000010fH
  00f4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168855
  00f52	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN64@cckd_swape:

; 271  :               "lseek()", off, strerror( errno ));
; 272  :     goto cswp_error;

  00f58	e9 4e 07 00 00	 jmp	 $cswp_error$129
$cswp_read_error$126:

; 273  : 
; 274  : cswp_read_error:
; 275  :     if(dev->batch)

  00f5d	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f65	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00f6b	c1 e8 0a	 shr	 eax, 10
  00f6e	83 e0 01	 and	 eax, 1
  00f71	85 c0		 test	 eax, eax
  00f73	0f 84 31 01 00
	00		 je	 $LN65@cckd_swape

; 276  :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  00f79	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00f7e	7d 18		 jge	 SHORT $LN91@cckd_swape
  00f80	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00f86	8b 08		 mov	 ecx, DWORD PTR [rax]
  00f88	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00f8e	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv583[rsp], rax
  00f96	eb 0f		 jmp	 SHORT $LN92@cckd_swape
$LN91@cckd_swape:
  00f98	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168858
  00f9f	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv583[rsp], rax
$LN92@cckd_swape:
  00fa7	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00fb0	74 15		 je	 SHORT $LN93@cckd_swape
  00fb2	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00fba	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00fbe	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv592[rsp], eax
  00fc5	eb 0b		 jmp	 SHORT $LN94@cckd_swape
$LN93@cckd_swape:
  00fc7	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv592[rsp], 0
$LN94@cckd_swape:
  00fd2	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00fdb	74 17		 je	 SHORT $LN95@cckd_swape
  00fdd	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00fe5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00fe9	d1 f8		 sar	 eax, 1
  00feb	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv598[rsp], eax
  00ff2	eb 0b		 jmp	 SHORT $LN96@cckd_swape
$LN95@cckd_swape:
  00ff4	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv598[rsp], 0
$LN96@cckd_swape:
  00fff	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01007	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0100d	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv587[rsp], rax
  01015	b9 01 00 00 00	 mov	 ecx, 1
  0101a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01020	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv583[rsp]
  01028	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0102d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  01035	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0103a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168859
  01041	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01046	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR tv587[rsp]
  0104e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01053	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv592[rsp]
  0105a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0105e	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv598[rsp]
  01065	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168860
  01070	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168861
  0107c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01081	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01086	41 b9 03 00 00
	00		 mov	 r9d, 3
  0108c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168862
  01093	ba 15 01 00 00	 mov	 edx, 277		; 00000115H
  01098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168863
  0109f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  010a5	e9 2c 01 00 00	 jmp	 $LN66@cckd_swape
$LN65@cckd_swape:

; 277  :                 "read()", off, rc < 0 ? strerror( errno ) : "incomplete");
; 278  :     else
; 279  :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  010aa	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  010af	7d 18		 jge	 SHORT $LN97@cckd_swape
  010b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  010b7	8b 08		 mov	 ecx, DWORD PTR [rax]
  010b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  010bf	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv613[rsp], rax
  010c7	eb 0f		 jmp	 SHORT $LN98@cckd_swape
$LN97@cckd_swape:
  010c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168864
  010d0	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv613[rsp], rax
$LN98@cckd_swape:
  010d8	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  010e1	74 15		 je	 SHORT $LN99@cckd_swape
  010e3	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  010eb	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  010ef	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv622[rsp], eax
  010f6	eb 0b		 jmp	 SHORT $LN100@cckd_swape
$LN99@cckd_swape:
  010f8	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv622[rsp], 0
$LN100@cckd_swape:
  01103	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0110c	74 17		 je	 SHORT $LN101@cckd_swape
  0110e	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01116	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0111a	d1 f8		 sar	 eax, 1
  0111c	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv628[rsp], eax
  01123	eb 0b		 jmp	 SHORT $LN102@cckd_swape
$LN101@cckd_swape:
  01125	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv628[rsp], 0
$LN102@cckd_swape:
  01130	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01138	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0113e	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv617[rsp], rax
  01146	b9 01 00 00 00	 mov	 ecx, 1
  0114b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01151	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv613[rsp]
  01159	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0115e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  01166	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0116b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168865
  01172	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01177	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR tv617[rsp]
  0117f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01184	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv622[rsp]
  0118b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0118f	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv628[rsp]
  01196	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0119a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168866
  011a1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  011a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168867
  011ad	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  011b2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  011b7	41 b9 03 00 00
	00		 mov	 r9d, 3
  011bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168868
  011c4	ba 18 01 00 00	 mov	 edx, 280		; 00000118H
  011c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168869
  011d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN66@cckd_swape:

; 280  :               "read()", off, rc < 0 ? strerror( errno ) : "incomplete");
; 281  :     goto cswp_error;

  011d6	e9 d0 04 00 00	 jmp	 $cswp_error$129
$cswp_write_error$127:

; 282  : 
; 283  : cswp_write_error:
; 284  :     if(dev->batch)

  011db	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011e3	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  011e9	c1 e8 0a	 shr	 eax, 10
  011ec	83 e0 01	 and	 eax, 1
  011ef	85 c0		 test	 eax, eax
  011f1	0f 84 31 01 00
	00		 je	 $LN67@cckd_swape

; 285  :         FWRMSG( stdout, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  011f7	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  011fc	7d 18		 jge	 SHORT $LN103@cckd_swape
  011fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  01204	8b 08		 mov	 ecx, DWORD PTR [rax]
  01206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0120c	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv647[rsp], rax
  01214	eb 0f		 jmp	 SHORT $LN104@cckd_swape
$LN103@cckd_swape:
  01216	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168872
  0121d	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv647[rsp], rax
$LN104@cckd_swape:
  01225	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0122e	74 15		 je	 SHORT $LN105@cckd_swape
  01230	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01238	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0123c	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv656[rsp], eax
  01243	eb 0b		 jmp	 SHORT $LN106@cckd_swape
$LN105@cckd_swape:
  01245	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv656[rsp], 0
$LN106@cckd_swape:
  01250	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01259	74 17		 je	 SHORT $LN107@cckd_swape
  0125b	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01263	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01267	d1 f8		 sar	 eax, 1
  01269	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv662[rsp], eax
  01270	eb 0b		 jmp	 SHORT $LN108@cckd_swape
$LN107@cckd_swape:
  01272	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv662[rsp], 0
$LN108@cckd_swape:
  0127d	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01285	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0128b	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv651[rsp], rax
  01293	b9 01 00 00 00	 mov	 ecx, 1
  01298	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0129e	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv647[rsp]
  012a6	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  012ab	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  012b3	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  012b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168873
  012bf	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  012c4	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR tv651[rsp]
  012cc	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  012d1	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv656[rsp]
  012d8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  012dc	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv662[rsp]
  012e3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  012e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168874
  012ee	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  012f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168875
  012fa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012ff	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01304	41 b9 03 00 00
	00		 mov	 r9d, 3
  0130a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168876
  01311	ba 1e 01 00 00	 mov	 edx, 286		; 0000011eH
  01316	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168877
  0131d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01323	e9 2c 01 00 00	 jmp	 $LN68@cckd_swape
$LN67@cckd_swape:

; 286  :                 "write()", off, rc < 0 ? strerror( errno ) : "incomplete");
; 287  :     else
; 288  :         WRMSG( HHC00355, "E", LCSS_DEVNUM, dev->filename,

  01328	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0132d	7d 18		 jge	 SHORT $LN109@cckd_swape
  0132f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  01335	8b 08		 mov	 ecx, DWORD PTR [rax]
  01337	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0133d	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv677[rsp], rax
  01345	eb 0f		 jmp	 SHORT $LN110@cckd_swape
$LN109@cckd_swape:
  01347	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168878
  0134e	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv677[rsp], rax
$LN110@cckd_swape:
  01356	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0135f	74 15		 je	 SHORT $LN111@cckd_swape
  01361	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01369	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0136d	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv686[rsp], eax
  01374	eb 0b		 jmp	 SHORT $LN112@cckd_swape
$LN111@cckd_swape:
  01376	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv686[rsp], 0
$LN112@cckd_swape:
  01381	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0138a	74 17		 je	 SHORT $LN113@cckd_swape
  0138c	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01394	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01398	d1 f8		 sar	 eax, 1
  0139a	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv692[rsp], eax
  013a1	eb 0b		 jmp	 SHORT $LN114@cckd_swape
$LN113@cckd_swape:
  013a3	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv692[rsp], 0
$LN114@cckd_swape:
  013ae	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013b6	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  013bc	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv681[rsp], rax
  013c4	b9 01 00 00 00	 mov	 ecx, 1
  013c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  013cf	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv677[rsp]
  013d7	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  013dc	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR off$[rsp]
  013e4	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  013e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168879
  013f0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  013f5	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR tv681[rsp]
  013fd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01402	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv686[rsp]
  01409	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0140d	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR tv692[rsp]
  01414	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01418	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168880
  0141f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01424	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168881
  0142b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01430	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01435	41 b9 03 00 00
	00		 mov	 r9d, 3
  0143b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168882
  01442	ba 21 01 00 00	 mov	 edx, 289		; 00000121H
  01447	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168883
  0144e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN68@cckd_swape:

; 289  :               "write()", off, rc < 0 ? strerror( errno ) : "incomplete");
; 290  :     goto cswp_error;

  01454	e9 52 02 00 00	 jmp	 $cswp_error$129
$cswp_malloc_error$128:

; 291  : 
; 292  : cswp_malloc_error:
; 293  :     {
; 294  :         char buf[64];
; 295  :         MSGBUF( buf, "malloc(%d)", len);

  01459	44 8b 4c 24 74	 mov	 r9d, DWORD PTR len$[rsp]
  0145e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168884
  01465	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0146a	48 8d 8c 24 40
	0c 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  01472	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 296  :         if(dev->batch)

  01478	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01480	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  01486	c1 e8 0a	 shr	 eax, 10
  01489	83 e0 01	 and	 eax, 1
  0148c	85 c0		 test	 eax, eax
  0148e	0f 84 0e 01 00
	00		 je	 $LN69@cckd_swape

; 297  :             FWRMSG( stdout, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  01494	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0149d	74 15		 je	 SHORT $LN115@cckd_swape
  0149f	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014a7	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  014ab	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv721[rsp], eax
  014b2	eb 0b		 jmp	 SHORT $LN116@cckd_swape
$LN115@cckd_swape:
  014b4	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv721[rsp], 0
$LN116@cckd_swape:
  014bf	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  014c8	74 17		 je	 SHORT $LN117@cckd_swape
  014ca	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014d2	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  014d6	d1 f8		 sar	 eax, 1
  014d8	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv727[rsp], eax
  014df	eb 0b		 jmp	 SHORT $LN118@cckd_swape
$LN117@cckd_swape:
  014e1	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv727[rsp], 0
$LN118@cckd_swape:
  014ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  014f2	8b 08		 mov	 ecx, DWORD PTR [rax]
  014f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  014fa	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv711[rsp], rax
  01502	48 8b 8c 24 a0
	0c 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0150a	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  01511	48 89 8c 24 f0
	01 00 00	 mov	 QWORD PTR tv716[rsp], rcx
  01519	b9 01 00 00 00	 mov	 ecx, 1
  0151e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01524	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR tv711[rsp]
  0152c	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01531	48 8d 8c 24 40
	0c 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  01539	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0153e	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR tv716[rsp]
  01546	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0154b	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv721[rsp]
  01552	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01556	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv727[rsp]
  0155d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01561	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168887
  01568	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0156d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168888
  01574	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01579	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0157e	41 b9 03 00 00
	00		 mov	 r9d, 3
  01584	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168889
  0158b	ba 2a 01 00 00	 mov	 edx, 298		; 0000012aH
  01590	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168890
  01597	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0159d	e9 09 01 00 00	 jmp	 $LN70@cckd_swape
$LN69@cckd_swape:

; 298  :                     buf, strerror( errno ));
; 299  :         else
; 300  :              WRMSG( HHC00354, "E", LCSS_DEVNUM, dev->filename,

  015a2	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  015ab	74 15		 je	 SHORT $LN119@cckd_swape
  015ad	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015b5	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  015b9	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv748[rsp], eax
  015c0	eb 0b		 jmp	 SHORT $LN120@cckd_swape
$LN119@cckd_swape:
  015c2	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv748[rsp], 0
$LN120@cckd_swape:
  015cd	48 83 bc 24 a0
	0c 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  015d6	74 17		 je	 SHORT $LN121@cckd_swape
  015d8	48 8b 84 24 a0
	0c 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015e0	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  015e4	d1 f8		 sar	 eax, 1
  015e6	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv754[rsp], eax
  015ed	eb 0b		 jmp	 SHORT $LN122@cckd_swape
$LN121@cckd_swape:
  015ef	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv754[rsp], 0
$LN122@cckd_swape:
  015fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  01600	8b 08		 mov	 ecx, DWORD PTR [rax]
  01602	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  01608	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv738[rsp], rax
  01610	48 8b 8c 24 a0
	0c 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01618	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0161f	48 89 8c 24 00
	02 00 00	 mov	 QWORD PTR tv743[rsp], rcx
  01627	b9 01 00 00 00	 mov	 ecx, 1
  0162c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01632	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR tv738[rsp]
  0163a	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0163f	48 8d 8c 24 40
	0c 00 00	 lea	 rcx, QWORD PTR buf$1[rsp]
  01647	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0164c	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR tv743[rsp]
  01654	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01659	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR tv748[rsp]
  01660	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01664	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv754[rsp]
  0166b	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0166f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168891
  01676	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0167b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168892
  01682	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01687	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0168c	41 b9 03 00 00
	00		 mov	 r9d, 3
  01692	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG168893
  01699	ba 2d 01 00 00	 mov	 edx, 301		; 0000012dH
  0169e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG168894
  016a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN70@cckd_swape:
$cswp_error$129:

; 301  :                    buf, strerror( errno ));
; 302  :         goto cswp_error;
; 303  :     }
; 304  : cswp_error:
; 305  :     if (l1) free(l1);

  016ab	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR l1$[rsp], 0
  016b4	74 0e		 je	 SHORT $LN71@cckd_swape
  016b6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR l1$[rsp]
  016be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN71@cckd_swape:

; 306  :     return -1;

  016c4	b8 ff ff ff ff	 mov	 eax, -1
$LN1@cckd_swape:

; 307  : }

  016c9	48 8b 8c 24 80
	0c 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  016d1	48 33 cc	 xor	 rcx, rsp
  016d4	e8 00 00 00 00	 call	 __security_check_cookie
  016d9	48 81 c4 98 0c
	00 00		 add	 rsp, 3224		; 00000c98H
  016e0	c3		 ret	 0
cckd_swapend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
tv69 = 0
spc_typ$ = 32
spc_typ_to_str PROC

; 56   : {

$LN5:
  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	48 83 ec 18	 sub	 rsp, 24

; 57   :     static const char* spc_types[] =
; 58   :     {
; 59   :         "none",             //  SPCTAB_NONE       0
; 60   :         "devhdr",           //  SPCTAB_DEVHDR     1
; 61   :         "cdevhdr",          //  SPCTAB_CDEVHDR    2
; 62   :         "l1",               //  SPCTAB_L1         3
; 63   :         "l2",               //  SPCTAB_L2         4
; 64   :         "trk",              //  SPCTAB_TRK        5
; 65   :         "blkgrp",           //  SPCTAB_BLKGRP     6
; 66   :         "free",             //  SPCTAB_FREE       7
; 67   :         "eof",              //  SPCTAB_EOF        8
; 68   :         "L2LOWER",          //  SPCTAB_L2LOWER    9
; 69   :         "L2UPPER",          //  SPCTAB_L2UPPER   10
; 70   :         "data",             //  SPCTAB_DATA      11
; 71   :         "unknown",          //  SPCTAB_DATA      12
; 72   :     };
; 73   : 
; 74   :     return (spc_typ < _countof( spc_types )) ?

  00008	0f b6 44 24 20	 movzx	 eax, BYTE PTR spc_typ$[rsp]
  0000d	48 83 f8 0d	 cmp	 rax, 13
  00011	73 16		 jae	 SHORT $LN3@spc_typ_to
  00013	0f b6 44 24 20	 movzx	 eax, BYTE PTR spc_typ$[rsp]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?spc_types@?1??spc_typ_to_str@@9@9
  0001f	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00023	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
  00027	eb 0b		 jmp	 SHORT $LN4@spc_typ_to
$LN3@spc_typ_to:
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168681
  00030	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
$LN4@spc_typ_to:
  00034	48 8b 04 24	 mov	 rax, QWORD PTR tv69[rsp]

; 75   :         spc_types[ spc_typ ] : "???????";
; 76   : }

  00038	48 83 c4 18	 add	 rsp, 24
  0003c	c3		 ret	 0
spc_typ_to_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdutil.c
_TEXT	SEGMENT
tv69 = 0
comp$ = 32
comp_to_str PROC

; 40   : {

$LN5:
  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	48 83 ec 18	 sub	 rsp, 24

; 41   :     static const char* comp_types[] =
; 42   :     {
; 43   :         "none",
; 44   :         "zlib",
; 45   :         "bzip2"
; 46   :     };
; 47   : 
; 48   :     return (comp < _countof( comp_types )) ?

  00008	0f b6 44 24 20	 movzx	 eax, BYTE PTR comp$[rsp]
  0000d	48 83 f8 03	 cmp	 rax, 3
  00011	73 16		 jae	 SHORT $LN3@comp_to_st
  00013	0f b6 44 24 20	 movzx	 eax, BYTE PTR comp$[rsp]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?comp_types@?1??comp_to_str@@9@9
  0001f	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00023	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
  00027	eb 0b		 jmp	 SHORT $LN4@comp_to_st
$LN3@comp_to_st:
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG168662
  00030	48 89 04 24	 mov	 QWORD PTR tv69[rsp], rax
$LN4@comp_to_st:
  00034	48 8b 04 24	 mov	 rax, QWORD PTR tv69[rsp]

; 49   :         comp_types[ comp ] : "?????";
; 50   : }

  00038	48 83 c4 18	 add	 rsp, 24
  0003c	c3		 ret	 0
comp_to_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_fw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_fw_noswap PROC					; COMDAT

; 746  :     inline U32 fetch_fw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 747  :       U32 value;
; 748  :       memcpy(&value, (BYTE *)ptr, 4);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR value$[rsp], eax

; 749  :       return value;

  00013	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]

; 750  :     }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
fetch_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_hw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_hw_noswap PROC					; COMDAT

; 712  :     inline U16 fetch_hw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 713  :       U16 value;
; 714  :       memcpy(&value, (BYTE *)ptr, 2);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00011	66 89 04 24	 mov	 WORD PTR value$[rsp], ax

; 715  :       return value;

  00015	0f b7 04 24	 movzx	 eax, WORD PTR value$[rsp]

; 716  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT

; 1771 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1779 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1780 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1458 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  0002c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00038	e8 00 00 00 00	 call	 _vsnprintf_l

; 1460 :     }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1391 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 83 c8 01	 or	 rax, 1
  00024	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0003d	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00050	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00054	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00059	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  0005b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00063	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00065	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00069	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  0006d	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1397 :     }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
