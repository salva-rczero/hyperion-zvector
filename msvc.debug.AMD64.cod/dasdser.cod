; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
VOL1_KEYA DB	056H
	DB	04fH
	DB	04cH
	DB	031H
VOL1_KEY DB	0e5H
	DB	0d6H
	DB	0d3H
	DB	0f1H
IPL1_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f1H
IPL2_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f2H
iplpsw	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
iplccw1	DB	06H
	DB	00H
	DB	03aH
	DB	098H
	DB	060H
	DB	00H
	DB	00H
	DB	060H
iplccw2	DB	08H
	DB	00H
	DB	03aH
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
noiplpsw DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
noiplccw1 DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
noiplccw2 DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
ipl2data DB	07H
	DB	00H
	DB	03aH
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	06H
	DB	031H
	DB	00H
	DB	03aH
	DB	0beH
	DB	040H
	DB	00H
	DB	00H
	DB	05H
	DB	08H
	DB	00H
	DB	03aH
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	07fH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
CONST	ENDS
PUBLIC	main
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp__errno:PROC
EXTRN	strlen:PROC
EXTRN	__imp_exit:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_open:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp_write:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_is_numeric:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_is_dh_devid_typ:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$retcode DD imagerel retcode
	DD	imagerel retcode+23
	DD	imagerel $unwind$retcode
$pdata$main DD	imagerel $LN23
	DD	imagerel $LN23+1801
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
$SG159594 DB	'DASD serial number utility', 00H
	ORG $+5
$SG159595 DB	'dasdser', 00H
$SG159598 DB	'I', 00H
	ORG $+6
$SG159599 DB	'HHC03100%s Usage: %s  image  [serial]', 0aH, 'HHC03100I '
	DB	'  image    base CKD dasd image file', 0aH, 'HHC03100I   seria'
	DB	'l   serial number to set. If not given then the', 0aH, 'HHC03'
	DB	'100I            existing serial number is simply displayed.', 0aH
	DB	00H
	ORG $+1
$SG159600 DB	'main', 00H
	ORG $+3
$SG159601 DB	'dasdser.c', 00H
	ORG $+2
$SG159605 DB	'serial', 00H
	ORG $+1
$SG159606 DB	'E', 00H
	ORG $+2
$SG159607 DB	'HHC03101%s Invalid %s "%s"', 0aH, 00H
$SG159608 DB	'main', 00H
	ORG $+3
$SG159611 DB	'open()', 00H
	ORG $+1
$SG159612 DB	'E', 00H
	ORG $+2
$SG159609 DB	'dasdser.c', 00H
	ORG $+2
$SG159619 DB	'read()', 00H
	ORG $+1
$SG159620 DB	'E', 00H
	ORG $+2
$SG159613 DB	'HHC03102%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159614 DB	'main', 00H
	ORG $+3
$SG159615 DB	'dasdser.c', 00H
	ORG $+2
$SG159624 DB	'E', 00H
	ORG $+2
$SG159621 DB	'HHC03102%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159622 DB	'main', 00H
	ORG $+3
$SG159623 DB	'dasdser.c', 00H
	ORG $+2
$SG159629 DB	'E', 00H
	ORG $+2
$SG159625 DB	'HHC03103%s Unsupported dasd image file format', 0aH, 00H
	ORG $+1
$SG159626 DB	'main', 00H
	ORG $+3
$SG159627 DB	'dasdser.c', 00H
	ORG $+2
$SG159637 DB	'E', 00H
	ORG $+2
$SG159630 DB	'HHC03103%s Unsupported dasd image file format', 0aH, 00H
	ORG $+1
$SG159631 DB	'main', 00H
	ORG $+3
$SG159632 DB	'dasdser.c', 00H
	ORG $+2
$SG159643 DB	'E', 00H
	ORG $+2
$SG159636 DB	'lseek()', 00H
$SG159638 DB	'HHC03102%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159639 DB	'main', 00H
	ORG $+3
$SG159640 DB	'dasdser.c', 00H
	ORG $+2
$SG159648 DB	'I', 00H
	ORG $+2
$SG159642 DB	'write()', 00H
$SG159644 DB	'HHC03102%s Error in function %s: %s', 0aH, 00H
	ORG $+3
$SG159645 DB	'main', 00H
	ORG $+3
$SG159646 DB	'dasdser.c', 00H
	ORG $+2
$SG159653 DB	'I', 00H
	ORG $+2
$SG159647 DB	'SERIAL NUMBER', 00H
	ORG $+2
$SG159649 DB	'HHC02204%s %-14s set to %s', 0aH, 00H
$SG159650 DB	'main', 00H
	ORG $+7
$SG159651 DB	'dasdser.c', 00H
	ORG $+6
$SG159652 DB	'SERIAL NUMBER', 00H
	ORG $+2
$SG159654 DB	'HHC02203%s %-14s: %s', 0aH, 00H
	ORG $+2
$SG159655 DB	'main', 00H
	ORG $+3
$SG159656 DB	'dasdser.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	01cH
	DD	06efH
voltbl	ENDS
xdata	SEGMENT
$unwind$retcode DD 010801H
	DD	04208H
$unwind$main DD	042419H
	DD	0590112H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	02b0H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dasdser.c
_TEXT	SEGMENT
fd$ = 80
rc$ = 84
tv163 = 88
$T1 = 96
$T2 = 104
pgm$ = 112
tv133 = 120
tv170 = 128
tv192 = 136
tv239 = 144
tv300 = 152
devhdr$ = 160
serial$ = 672
__$ArrayPad$ = 688
argc$ = 736
argv$ = 744
main	PROC

; 43   : {

$LN23:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	48 81 ec c8 02
	00 00		 sub	 rsp, 712		; 000002c8H
  00012	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00019	48 33 c4	 xor	 rax, rsp
  0001c	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 44   : char*       pgm;                        /* Less any extension (.ext) */
; 45   : BYTE        serial[12+1] = {0};         /* Serial number to assign   */

  00024	48 8d 84 24 a0
	02 00 00	 lea	 rax, QWORD PTR serial$[rsp]
  0002c	48 8b f8	 mov	 rdi, rax
  0002f	33 c0		 xor	 eax, eax
  00031	b9 0d 00 00 00	 mov	 ecx, 13
  00036	f3 aa		 rep stosb

; 46   : CKD_DEVHDR  devhdr;                     /* DASD Image Device Header  */
; 47   : int         fd;                         /* File descriptor           */
; 48   : int         rc;                         /* Return code               */
; 49   : 
; 50   :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  00038	48 8d 44 24 70	 lea	 rax, QWORD PTR pgm$[rsp]
  0003d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00042	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159594
  00049	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159595
  00050	48 8b 94 24 e8
	02 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00058	8b 8c 24 e0 02
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  0005f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  00065	89 84 24 e0 02
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 51   : 
; 52   :     /* Display help if needed or requested */
; 53   :     if (argc < 2 || argc > 3)

  0006c	83 bc 24 e0 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00074	7c 0a		 jl	 SHORT $LN3@main
  00076	83 bc 24 e0 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  0007e	7e 60		 jle	 SHORT $LN2@main
$LN3@main:

; 54   :     {
; 55   :         // "Usage: ..."
; 56   :         FWRMSG( stderr, HHC03100, "I", pgm );

  00080	b9 02 00 00 00	 mov	 ecx, 2
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0008b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pgm$[rsp]
  00090	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159598
  0009c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159599
  000a8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000b2	41 b9 03 00 00
	00		 mov	 r9d, 3
  000b8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159600
  000bf	ba 38 00 00 00	 mov	 edx, 56			; 00000038H
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159601
  000cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 57   :         return retcode( -1 );

  000d1	b9 ff ff ff ff	 mov	 ecx, -1
  000d6	e8 00 00 00 00	 call	 retcode
  000db	e9 0f 06 00 00	 jmp	 $LN1@main
$LN2@main:

; 58   :     }
; 59   : 
; 60   :     /* New serial number to be assigned? */
; 61   :     if (argc > 2)

  000e0	83 bc 24 e0 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000e8	0f 8e 26 01 00
	00		 jle	 $LN4@main

; 62   :     {
; 63   :         /* Valid 12-digit numeric serial number? */
; 64   :         if (0
; 65   :             || !is_numeric( argv[2] )
; 66   :             || strlen( argv[2] ) != sizeof( devhdr.dh_serial )

  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	75 46		 jne	 SHORT $LN6@main
  000f4	b8 08 00 00 00	 mov	 eax, 8
  000f9	48 6b c0 02	 imul	 rax, rax, 2
  000fd	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00105	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00109	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_numeric
  0010f	0f b6 c0	 movzx	 eax, al
  00112	85 c0		 test	 eax, eax
  00114	74 24		 je	 SHORT $LN6@main
  00116	b8 08 00 00 00	 mov	 eax, 8
  0011b	48 6b c0 02	 imul	 rax, rax, 2
  0011f	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00127	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0012b	e8 00 00 00 00	 call	 strlen
  00130	48 83 f8 0c	 cmp	 rax, 12
  00134	0f 84 86 00 00
	00		 je	 $LN5@main
$LN6@main:

; 67   :         )
; 68   :         {
; 69   :             // "Invalid %s \"%s\""
; 70   :             FWRMSG( stderr, HHC03101, "E", "serial", argv[2] );

  0013a	b8 08 00 00 00	 mov	 eax, 8
  0013f	48 6b c0 02	 imul	 rax, rax, 2
  00143	48 89 44 24 78	 mov	 QWORD PTR tv133[rsp], rax
  00148	b9 02 00 00 00	 mov	 ecx, 2
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00153	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0015b	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv133[rsp]
  00160	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00164	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159605
  00170	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00175	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159606
  0017c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00181	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159607
  00188	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0018d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00192	41 b9 03 00 00
	00		 mov	 r9d, 3
  00198	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159608
  0019f	ba 46 00 00 00	 mov	 edx, 70			; 00000046H
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159609
  001ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 71   :             return retcode( -1 );

  001b1	b9 ff ff ff ff	 mov	 ecx, -1
  001b6	e8 00 00 00 00	 call	 retcode
  001bb	e9 2f 05 00 00	 jmp	 $LN1@main
$LN5@main:

; 72   :         }
; 73   : 
; 74   :         /* Save serial number */
; 75   :         memcpy( serial, argv[2], sizeof( devhdr.dh_serial ));

  001c0	b8 08 00 00 00	 mov	 eax, 8
  001c5	48 6b c0 02	 imul	 rax, rax, 2
  001c9	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001d1	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  001d5	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR serial$[rsp]
  001dd	48 8b f9	 mov	 rdi, rcx
  001e0	48 8b f0	 mov	 rsi, rax
  001e3	b9 0c 00 00 00	 mov	 ecx, 12
  001e8	f3 a4		 rep movsb

; 76   :         serial[12] = 0;

  001ea	b8 01 00 00 00	 mov	 eax, 1
  001ef	48 6b c0 0c	 imul	 rax, rax, 12
  001f3	48 89 44 24 60	 mov	 QWORD PTR $T1[rsp], rax
  001f8	48 83 7c 24 60
	0d		 cmp	 QWORD PTR $T1[rsp], 13
  001fe	73 02		 jae	 SHORT $LN17@main
  00200	eb 05		 jmp	 SHORT $LN18@main
$LN17@main:
  00202	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN18@main:
  00207	48 8b 44 24 60	 mov	 rax, QWORD PTR $T1[rsp]
  0020c	c6 84 04 a0 02
	00 00 00	 mov	 BYTE PTR serial$[rsp+rax], 0
$LN4@main:

; 77   :     }
; 78   : 
; 79   :     /* Open the dasd image file */
; 80   :     if ((fd = open( argv[1], O_BINARY | (argc > 2 ? O_RDWR : O_RDONLY))) < 0)

  00214	83 bc 24 e0 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  0021c	7e 0a		 jle	 SHORT $LN19@main
  0021e	c7 44 24 58 02
	00 00 00	 mov	 DWORD PTR tv163[rsp], 2
  00226	eb 08		 jmp	 SHORT $LN20@main
$LN19@main:
  00228	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv163[rsp], 0
$LN20@main:
  00230	8b 44 24 58	 mov	 eax, DWORD PTR tv163[rsp]
  00234	0f ba e8 0f	 bts	 eax, 15
  00238	b9 08 00 00 00	 mov	 ecx, 8
  0023d	48 6b c9 01	 imul	 rcx, rcx, 1
  00241	8b d0		 mov	 edx, eax
  00243	48 8b 84 24 e8
	02 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0024b	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  0024f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_open
  00255	89 44 24 50	 mov	 DWORD PTR fd$[rsp], eax
  00259	83 7c 24 50 00	 cmp	 DWORD PTR fd$[rsp], 0
  0025e	0f 8d 85 00 00
	00		 jge	 $LN7@main

; 81   :     {
; 82   :         // "Error in function %s: %s"
; 83   :         FWRMSG( stderr, HHC03102, "E", "open()", strerror( errno ));

  00264	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0026a	8b 08		 mov	 ecx, DWORD PTR [rax]
  0026c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00272	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv170[rsp], rax
  0027a	b9 02 00 00 00	 mov	 ecx, 2
  0027f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00285	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv170[rsp]
  0028d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00292	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159611
  00299	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0029e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159612
  002a5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159613
  002b1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002b6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002bb	41 b9 03 00 00
	00		 mov	 r9d, 3
  002c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159614
  002c8	ba 53 00 00 00	 mov	 edx, 83			; 00000053H
  002cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159615
  002d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 84   :         return retcode( -1 );

  002da	b9 ff ff ff ff	 mov	 ecx, -1
  002df	e8 00 00 00 00	 call	 retcode
  002e4	e9 06 04 00 00	 jmp	 $LN1@main
$LN7@main:

; 85   :     }
; 86   : 
; 87   :     /* Read the device header */
; 88   :     if ((rc = read( fd, &devhdr, sizeof( devhdr ))) < (int) sizeof( devhdr ))

  002e9	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  002ef	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  002f7	8b 4c 24 50	 mov	 ecx, DWORD PTR fd$[rsp]
  002fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00301	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax
  00305	81 7c 24 54 00
	02 00 00	 cmp	 DWORD PTR rc$[rsp], 512	; 00000200H
  0030d	0f 8d d5 00 00
	00		 jge	 $LN8@main

; 89   :     {
; 90   :         if (rc < 0)

  00313	83 7c 24 54 00	 cmp	 DWORD PTR rc$[rsp], 0
  00318	7d 78		 jge	 SHORT $LN9@main

; 91   :         {
; 92   :             // "Error in function %s: %s"
; 93   :             FWRMSG( stderr, HHC03102, "E", "read()", strerror( errno ));

  0031a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00320	8b 08		 mov	 ecx, DWORD PTR [rax]
  00322	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00328	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv192[rsp], rax
  00330	b9 02 00 00 00	 mov	 ecx, 2
  00335	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0033b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv192[rsp]
  00343	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00348	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159619
  0034f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00354	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159620
  0035b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00360	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159621
  00367	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0036c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00371	41 b9 03 00 00
	00		 mov	 r9d, 3
  00377	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159622
  0037e	ba 5d 00 00 00	 mov	 edx, 93			; 0000005dH
  00383	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159623
  0038a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 94   :         }

  00390	eb 47		 jmp	 SHORT $LN10@main
$LN9@main:

; 95   :         else
; 96   :         {
; 97   :             // "Unsupported dasd image file format"
; 98   :             FWRMSG( stderr, HHC03103, "E" );

  00392	b9 02 00 00 00	 mov	 ecx, 2
  00397	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0039d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159624
  003a4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159625
  003b0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003b5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003ba	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159626
  003c7	ba 62 00 00 00	 mov	 edx, 98			; 00000062H
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159627
  003d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN10@main:

; 99   :         }
; 100  :         return retcode( -1 );

  003d9	b9 ff ff ff ff	 mov	 ecx, -1
  003de	e8 00 00 00 00	 call	 retcode
  003e3	e9 07 03 00 00	 jmp	 $LN1@main
$LN8@main:

; 101  :     }
; 102  : 
; 103  :     /* Normal (uncompressed) FBA types don't have device headers! */
; 104  :     if (!is_dh_devid_typ( devhdr.dh_devid, CKD_CMP_OR_NML_TYP ))

  003e8	ba 00 00 c0 c0	 mov	 edx, -1061158912	; c0c00000H
  003ed	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  003f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_dh_devid_typ
  003fb	0f b6 c0	 movzx	 eax, al
  003fe	85 c0		 test	 eax, eax
  00400	75 56		 jne	 SHORT $LN11@main

; 105  :     {
; 106  :         // "Unsupported dasd image file format"
; 107  :         FWRMSG( stderr, HHC03103, "E" );

  00402	b9 02 00 00 00	 mov	 ecx, 2
  00407	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0040d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159629
  00414	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00419	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159630
  00420	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00425	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0042a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00430	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159631
  00437	ba 6b 00 00 00	 mov	 edx, 107		; 0000006bH
  0043c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159632
  00443	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 108  :         return retcode( -1 );

  00449	b9 ff ff ff ff	 mov	 ecx, -1
  0044e	e8 00 00 00 00	 call	 retcode
  00453	e9 97 02 00 00	 jmp	 $LN1@main
$LN11@main:

; 109  :     }
; 110  : 
; 111  :     /* Set new serial number or display current serial number... */
; 112  : 
; 113  :     if (argc > 2) // (assign/update/set?)

  00458	83 bc 24 e0 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00460	0f 8e d1 01 00
	00		 jle	 $LN12@main

; 114  :     {
; 115  :         /* Seek back to beginning of file where the device header is */
; 116  :         if (lseek( fd, 0, SEEK_SET ) != 0)

  00466	45 33 c0	 xor	 r8d, r8d
  00469	33 d2		 xor	 edx, edx
  0046b	8b 4c 24 50	 mov	 ecx, DWORD PTR fd$[rsp]
  0046f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00475	48 85 c0	 test	 rax, rax
  00478	0f 84 85 00 00
	00		 je	 $LN14@main

; 117  :         {
; 118  :             // "Error in function %s: %s"
; 119  :             FWRMSG( stderr, HHC03102, "E", "lseek()", strerror( errno ));

  0047e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00484	8b 08		 mov	 ecx, DWORD PTR [rax]
  00486	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0048c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv239[rsp], rax
  00494	b9 02 00 00 00	 mov	 ecx, 2
  00499	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0049f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv239[rsp]
  004a7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  004ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159636
  004b3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159637
  004bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159638
  004cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004d5	41 b9 03 00 00
	00		 mov	 r9d, 3
  004db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159639
  004e2	ba 77 00 00 00	 mov	 edx, 119		; 00000077H
  004e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159640
  004ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 120  :             return retcode( -1 );

  004f4	b9 ff ff ff ff	 mov	 ecx, -1
  004f9	e8 00 00 00 00	 call	 retcode
  004fe	e9 ec 01 00 00	 jmp	 $LN1@main
$LN14@main:

; 121  :         }
; 122  : 
; 123  :         /* Assign/update/set new serial number */
; 124  :         memcpy( devhdr.dh_serial, serial, sizeof( devhdr.dh_serial ));

  00503	48 8d 84 24 b4
	00 00 00	 lea	 rax, QWORD PTR devhdr$[rsp+20]
  0050b	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR serial$[rsp]
  00513	48 8b f8	 mov	 rdi, rax
  00516	48 8b f1	 mov	 rsi, rcx
  00519	b9 0c 00 00 00	 mov	 ecx, 12
  0051e	f3 a4		 rep movsb

; 125  : 
; 126  :         /* Rewrite the device header with the new serial number */
; 127  :         if ((rc = write( fd, &devhdr, sizeof( devhdr ))) != sizeof( devhdr ))

  00520	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00526	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  0052e	8b 4c 24 50	 mov	 ecx, DWORD PTR fd$[rsp]
  00532	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00538	89 44 24 54	 mov	 DWORD PTR rc$[rsp], eax
  0053c	48 63 44 24 54	 movsxd	 rax, DWORD PTR rc$[rsp]
  00541	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  00547	0f 84 85 00 00
	00		 je	 $LN15@main

; 128  :         {
; 129  :             // "Error in function %s: %s"
; 130  :             FWRMSG( stderr, HHC03102, "E", "write()", strerror( errno ));

  0054d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00553	8b 08		 mov	 ecx, DWORD PTR [rax]
  00555	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0055b	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv300[rsp], rax
  00563	b9 02 00 00 00	 mov	 ecx, 2
  00568	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0056e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv300[rsp]
  00576	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0057b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159642
  00582	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00587	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159643
  0058e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00593	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159644
  0059a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0059f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  005aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159645
  005b1	ba 82 00 00 00	 mov	 edx, 130		; 00000082H
  005b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159646
  005bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 131  :             return retcode( -1 );

  005c3	b9 ff ff ff ff	 mov	 ecx, -1
  005c8	e8 00 00 00 00	 call	 retcode
  005cd	e9 1d 01 00 00	 jmp	 $LN1@main
$LN15@main:

; 132  :         }
; 133  : 
; 134  :         // "%-14s set to %s"
; 135  :         WRMSG( HHC02204, "I", "SERIAL NUMBER", (const char*) serial );

  005d2	b9 01 00 00 00	 mov	 ecx, 1
  005d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005dd	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR serial$[rsp]
  005e5	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  005ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159647
  005f1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  005f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159648
  005fd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00602	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159649
  00609	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0060e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00613	41 b9 03 00 00
	00		 mov	 r9d, 3
  00619	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159650
  00620	ba 87 00 00 00	 mov	 edx, 135		; 00000087H
  00625	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159651
  0062c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 136  :     }

  00632	e9 a7 00 00 00	 jmp	 $LN13@main
$LN12@main:

; 137  :     else /* Display existing serial number */
; 138  :     {
; 139  :         memcpy( serial, devhdr.dh_serial, sizeof( devhdr.dh_serial ));

  00637	48 8d 84 24 a0
	02 00 00	 lea	 rax, QWORD PTR serial$[rsp]
  0063f	48 8d 8c 24 b4
	00 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp+20]
  00647	48 8b f8	 mov	 rdi, rax
  0064a	48 8b f1	 mov	 rsi, rcx
  0064d	b9 0c 00 00 00	 mov	 ecx, 12
  00652	f3 a4		 rep movsb

; 140  :         serial[12] = 0;

  00654	b8 01 00 00 00	 mov	 eax, 1
  00659	48 6b c0 0c	 imul	 rax, rax, 12
  0065d	48 89 44 24 68	 mov	 QWORD PTR $T2[rsp], rax
  00662	48 83 7c 24 68
	0d		 cmp	 QWORD PTR $T2[rsp], 13
  00668	73 02		 jae	 SHORT $LN21@main
  0066a	eb 05		 jmp	 SHORT $LN22@main
$LN21@main:
  0066c	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN22@main:
  00671	48 8b 44 24 68	 mov	 rax, QWORD PTR $T2[rsp]
  00676	c6 84 04 a0 02
	00 00 00	 mov	 BYTE PTR serial$[rsp+rax], 0

; 141  : 
; 142  :         // "%-14s: %s"
; 143  :         WRMSG( HHC02203, "I", "SERIAL NUMBER", (const char*) serial );

  0067e	b9 01 00 00 00	 mov	 ecx, 1
  00683	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00689	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR serial$[rsp]
  00691	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00696	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159652
  0069d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159653
  006a9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159654
  006b5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006bf	41 b9 03 00 00
	00		 mov	 r9d, 3
  006c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159655
  006cc	ba 8f 00 00 00	 mov	 edx, 143		; 0000008fH
  006d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159656
  006d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN13@main:

; 144  :     }
; 145  : 
; 146  :     /* Close the file */
; 147  :     close( fd );

  006de	8b 4c 24 50	 mov	 ecx, DWORD PTR fd$[rsp]
  006e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 148  : 
; 149  :     /* DONE! */
; 150  :     return retcode( 0 );

  006e8	33 c9		 xor	 ecx, ecx
  006ea	e8 00 00 00 00	 call	 retcode
$LN1@main:
$LN16@main:

; 151  : }

  006ef	48 8b 8c 24 b0
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006f7	48 33 cc	 xor	 rcx, rsp
  006fa	e8 00 00 00 00	 call	 __security_check_cookie
  006ff	48 81 c4 c8 02
	00 00		 add	 rsp, 712		; 000002c8H
  00706	5f		 pop	 rdi
  00707	5e		 pop	 rsi
  00708	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dasdser.c
_TEXT	SEGMENT
rc$ = 48
retcode	PROC

; 35   : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 36   :     exit( rc );     // (convenient place to set breakpoint)

  00008	8b 4c 24 30	 mov	 ecx, DWORD PTR rc$[rsp]
  0000c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN2@retcode:

; 37   : }

  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
retcode	ENDP
_TEXT	ENDS
END
