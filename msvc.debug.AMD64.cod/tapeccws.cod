; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	TapeDevtypeList
PUBLIC	TapeCommandTable
PUBLIC	TapeSenseTable
PUBLIC	TapeImmedOther
PUBLIC	TapeImmed3590
PUBLIC	build_sense_3410
PUBLIC	build_sense_3420
PUBLIC	build_sense_3480_etal
PUBLIC	build_sense_3490
PUBLIC	build_sense_3590
PUBLIC	build_sense_Streaming
PUBLIC	TapeCommands3410
PUBLIC	TapeCommands3420
PUBLIC	TapeCommands3422
PUBLIC	TapeCommands3430
PUBLIC	TapeCommands3480
PUBLIC	TapeCommands3490
PUBLIC	TapeCommands3590
PUBLIC	TapeCommands9347
_DATA	SEGMENT
TapeDevtypeList DD 03410H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	03411H
	DD	00H
	DD	01H
	DD	00H
	DD	00H
	DD	03420H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	03422H
	DD	02H
	DD	00H
	DD	00H
	DD	02H
	DD	03430H
	DD	03H
	DD	00H
	DD	00H
	DD	03H
	DD	03480H
	DD	04H
	DD	00H
	DD	00H
	DD	04H
	DD	03490H
	DD	05H
	DD	00H
	DD	00H
	DD	05H
	DD	03590H
	DD	06H
	DD	00H
	DD	00H
	DD	06H
	DD	09347H
	DD	07H
	DD	00H
	DD	00H
	DD	07H
	DD	09348H
	DD	07H
	DD	00H
	DD	00H
	DD	07H
	DD	08809H
	DD	07H
	DD	00H
	DD	00H
	DD	07H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
TapeCommandTable DQ FLAT:TapeCommands3410
	DQ	FLAT:TapeCommands3420
	DQ	FLAT:TapeCommands3422
	DQ	FLAT:TapeCommands3430
	DQ	FLAT:TapeCommands3480
	DQ	FLAT:TapeCommands3490
	DQ	FLAT:TapeCommands3590
	DQ	FLAT:TapeCommands9347
	DQ	0000000000000000H
	ORG $+8
TapeSenseTable DQ FLAT:build_sense_3410
	DQ	FLAT:build_sense_3420
	DQ	FLAT:build_sense_3420
	DQ	FLAT:build_sense_3420
	DQ	FLAT:build_sense_3480_etal
	DQ	FLAT:build_sense_3490
	DQ	FLAT:build_sense_3590
	DQ	FLAT:build_sense_Streaming
	DQ	0000000000000000H
	ORG $+8
TapeImmedOther DB 00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
TapeImmed3590 DB 00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
TapeCommands3410 DB 00H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
TapeCommands3420 DB 00H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
TapeCommands3422 DB 00H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
TapeCommands3430 DB 00H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
TapeCommands3480 DB 03H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
TapeCommands3490 DB 03H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
TapeCommands3590 DB 03H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	00H
	DB	01H
	DB	05H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	03H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
TapeCommands9347 DB 00H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	05H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	store_hw_noswap
PUBLIC	fetch_fw_noswap
PUBLIC	store_fw_noswap
PUBLIC	TapeCommandIsValid
PUBLIC	tapedev_execute_ccw
PUBLIC	load_display
PUBLIC	build_senseX
PUBLIC	build_sense_3410_3420
EXTRN	__report_rangecheckfailure:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp__strnicmp:PROC
EXTRN	__imp_strdup:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	_byteswap_ushort:PROC
EXTRN	_byteswap_ulong:PROC
EXTRN	__imp_access:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_hthread_create_thread:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_realpath:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_guest_to_host:PROC
EXTRN	__imp_str_guest_to_host:PROC
EXTRN	__imp_str_host_to_guest:PROC
EXTRN	__imp_het_cntl:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	int_scsi_rewind_unload:PROC
EXTRN	autoload_wait_for_tapemount_thread:PROC
EXTRN	IsAtLoadPoint:PROC
EXTRN	ReqAutoMount:PROC
EXTRN	UpdateDisplay:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
$SG169697 DB	01H DUP (?)
	ALIGN	4

$SG169746 DB	05H DUP (?)
	ALIGN	4

$SG169750 DB	05H DUP (?)
	ALIGN	4

$SG169785 DB	0cH DUP (?)
$SG169796 DB	0bH DUP (?)
	ALIGN	4

$SG169828 DB	0cH DUP (?)
$SG169831 DB	0cH DUP (?)
$SG169836 DB	0cH DUP (?)
$SG169839 DB	0cH DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_fw_noswap DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$fetch_fw_noswap
pdata	ENDS
pdata	SEGMENT
$pdata$is_tape_feat DD imagerel is_tape_feat
	DD	imagerel is_tape_feat+94
	DD	imagerel $unwind$is_tape_feat
$pdata$TapeCommandIsValid DD imagerel $LN10
	DD	imagerel $LN10+265
	DD	imagerel $unwind$TapeCommandIsValid
$pdata$tapedev_execute_ccw DD imagerel $LN627
	DD	imagerel $LN627+27543
	DD	imagerel $unwind$tapedev_execute_ccw
$pdata$load_display DD imagerel $LN108
	DD	imagerel $LN108+4357
	DD	imagerel $unwind$load_display
$pdata$build_senseX DD imagerel $LN13
	DD	imagerel $LN13+451
	DD	imagerel $unwind$build_senseX
$pdata$build_sense_3410 DD imagerel $LN3
	DD	imagerel $LN3+184
	DD	imagerel $unwind$build_sense_3410
$pdata$build_sense_3420 DD imagerel $LN3
	DD	imagerel $LN3+294
	DD	imagerel $unwind$build_sense_3420
$pdata$build_sense_3410_3420 DD imagerel $LN38
	DD	imagerel $LN38+1352
	DD	imagerel $unwind$build_sense_3410_3420
$pdata$build_sense_3480_etal DD imagerel $LN49
	DD	imagerel $LN49+2324
	DD	imagerel $unwind$build_sense_3480_etal
$pdata$build_sense_3490 DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$build_sense_3490
$pdata$build_sense_3590 DD imagerel $LN59
	DD	imagerel $LN59+1072
	DD	imagerel $unwind$build_sense_3590
$pdata$build_sense_Streaming DD imagerel $LN38
	DD	imagerel $LN38+1356
	DD	imagerel $unwind$build_sense_Streaming
$pdata$findtamdir DD imagerel findtamdir
	DD	imagerel findtamdir+245
	DD	imagerel $unwind$findtamdir
pdata	ENDS
_DATA	SEGMENT
$SG169351 DB	'AWS', 00H
$SG169352 DB	'OMA', 00H
$SG169353 DB	'SCSI', 00H
	ORG $+3
$SG169354 DB	'HET', 00H
$SG169355 DB	'FAKE', 00H
	ORG $+3
$SG169356 DB	'DWTVF', 00H
	ORG $+2
$SG169358 DB	'E', 00H
	ORG $+2
$SG169357 DB	'UNKNOWN', 00H
$SG169359 DB	'HHC00212%s %1d:%04X Tape file %s, type %s: data chaining'
	DB	' not supported for CCW %2.2X', 0aH, 00H
	ORG $+2
$SG169360 DB	'tapedev_execute_ccw', 00H
$SG169386 DB	'*', 00H
	ORG $+2
$SG169361 DB	'tapeccws.c', 00H
	ORG $+1
$SG169461 DB	'E', 00H
	ORG $+2
$SG169365 DB	'tapedev_execute_ccw', 00H
$SG169541 DB	'*', 00H
	ORG $+2
$SG169366 DB	'tapeccws.c', 00H
	ORG $+5
$SG169369 DB	'tapedev_execute_ccw', 00H
	ORG $+4
$SG169367 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169370 DB	'tapeccws.c', 00H
	ORG $+5
$SG169459 DB	'tapeccws.c:1054', 00H
$SG169462 DB	'HHC00102%s Error in function create_thread(): %s', 0aH, 00H
	ORG $+6
$SG169371 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169458 DB	'autoload wait for %4.4X tapemount thread', 00H
	ORG $+3
$SG169544 DB	'*', 00H
	ORG $+2
$SG169463 DB	'tapedev_execute_ccw', 00H
$SG169551 DB	'AWS', 00H
$SG169464 DB	'tapeccws.c', 00H
	ORG $+1
$SG169552 DB	'OMA', 00H
$SG169540 DB	'OFFLINE', 00H
$SG169542 DB	'tapeccws.c:1630', 00H
$SG169549 DB	'unresolvable path', 00H
	ORG $+2
$SG169554 DB	'HET', 00H
$SG169550 DB	'auto-mount', 00H
	ORG $+1
$SG169553 DB	'SCSI', 00H
	ORG $+3
$SG169555 DB	'FAKE', 00H
	ORG $+3
$SG169556 DB	'DWTVF', 00H
	ORG $+2
$SG169558 DB	'E', 00H
	ORG $+2
$SG169557 DB	'UNKNOWN', 00H
$SG169559 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169560 DB	'tapedev_execute_ccw', 00H
$SG169566 DB	'AWS', 00H
$SG169561 DB	'tapeccws.c', 00H
	ORG $+1
$SG169567 DB	'OMA', 00H
$SG169562 DB	'tapeccws.c:1671', 00H
$SG169564 DB	'impermissible directory', 00H
$SG169565 DB	'auto-mount', 00H
	ORG $+1
$SG169568 DB	'SCSI', 00H
	ORG $+3
$SG169569 DB	'HET', 00H
$SG169570 DB	'FAKE', 00H
	ORG $+3
$SG169571 DB	'DWTVF', 00H
	ORG $+2
$SG169572 DB	'UNKNOWN', 00H
$SG169573 DB	'E', 00H
	ORG $+6
$SG169574 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169575 DB	'tapedev_execute_ccw', 00H
$SG169581 DB	'AWS', 00H
$SG169576 DB	'tapeccws.c', 00H
	ORG $+1
$SG169582 DB	'OMA', 00H
$SG169577 DB	'tapeccws.c:1687', 00H
$SG169579 DB	'file not found', 00H
	ORG $+1
$SG169580 DB	'auto-mount', 00H
	ORG $+1
$SG169583 DB	'SCSI', 00H
	ORG $+3
$SG169584 DB	'HET', 00H
$SG169585 DB	'FAKE', 00H
	ORG $+3
$SG169586 DB	'DWTVF', 00H
	ORG $+2
$SG169587 DB	'UNKNOWN', 00H
$SG169588 DB	'E', 00H
	ORG $+6
$SG169590 DB	'tapedev_execute_ccw', 00H
	ORG $+4
$SG169589 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169591 DB	'tapeccws.c', 00H
	ORG $+1
$SG169594 DB	'*', 00H
	ORG $+2
$SG169592 DB	'tapeccws.c:1691', 00H
$SG169595 DB	'*', 00H
	ORG $+2
$SG169596 DB	'AWS', 00H
$SG169597 DB	'OMA', 00H
$SG169598 DB	'SCSI', 00H
	ORG $+3
$SG169599 DB	'HET', 00H
$SG169600 DB	'FAKE', 00H
	ORG $+3
$SG169601 DB	'DWTVF', 00H
	ORG $+2
$SG169602 DB	'UNKNOWN', 00H
$SG169603 DB	'E', 00H
	ORG $+6
$SG169604 DB	'HHC00214%s %1d:%04X Tape file %s, type %s: auto-mount re'
	DB	'jected: drive not empty', 0aH, 00H
	ORG $+3
$SG169616 DB	'*', 00H
	ORG $+2
$SG169605 DB	'tapedev_execute_ccw', 00H
$SG169619 DB	'AWS', 00H
$SG169606 DB	'tapeccws.c', 00H
	ORG $+1
$SG169620 DB	'OMA', 00H
$SG169607 DB	'tapeccws.c:1703', 00H
$SG169617 DB	'see previous message', 00H
	ORG $+3
$SG169618 DB	'auto-unmount', 00H
	ORG $+3
$SG169621 DB	'SCSI', 00H
	ORG $+3
$SG169622 DB	'HET', 00H
$SG169623 DB	'FAKE', 00H
	ORG $+3
$SG169624 DB	'DWTVF', 00H
	ORG $+2
$SG169626 DB	'E', 00H
	ORG $+2
$SG169625 DB	'UNKNOWN', 00H
$SG169627 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169628 DB	'tapedev_execute_ccw', 00H
$SG169632 DB	'AWS', 00H
$SG169629 DB	'tapeccws.c', 00H
	ORG $+1
$SG169633 DB	'OMA', 00H
$SG169630 DB	'file not found', 00H
	ORG $+1
$SG169631 DB	'auto-mount', 00H
	ORG $+1
$SG169634 DB	'SCSI', 00H
	ORG $+3
$SG169635 DB	'HET', 00H
$SG169636 DB	'FAKE', 00H
	ORG $+3
$SG169637 DB	'DWTVF', 00H
	ORG $+2
$SG169638 DB	'UNKNOWN', 00H
$SG169639 DB	'E', 00H
	ORG $+6
$SG169641 DB	'tapedev_execute_ccw', 00H
	ORG $+4
$SG169640 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169642 DB	'tapeccws.c', 00H
	ORG $+1
$SG169646 DB	'*', 00H
	ORG $+2
$SG169643 DB	'tapeccws.c:1747', 00H
$SG169647 DB	'AWS', 00H
$SG169648 DB	'OMA', 00H
$SG169649 DB	'SCSI', 00H
	ORG $+3
$SG169650 DB	'HET', 00H
$SG169651 DB	'FAKE', 00H
	ORG $+3
$SG169652 DB	'DWTVF', 00H
	ORG $+2
$SG169654 DB	'I', 00H
	ORG $+2
$SG169653 DB	'UNKNOWN', 00H
$SG169655 DB	'HHC00216%s %1d:%04X Tape file %s, type %s: auto-unmounte'
	DB	'd', 0aH, 00H
	ORG $+1
$SG169658 DB	'AWS', 00H
$SG169656 DB	'tapedev_execute_ccw', 00H
$SG169659 DB	'OMA', 00H
$SG169657 DB	'tapeccws.c', 00H
	ORG $+1
$SG169660 DB	'SCSI', 00H
	ORG $+3
$SG169661 DB	'HET', 00H
$SG169662 DB	'FAKE', 00H
	ORG $+3
$SG169663 DB	'DWTVF', 00H
	ORG $+2
$SG169664 DB	'UNKNOWN', 00H
$SG169665 DB	'I', 00H
	ORG $+2
$SG169690 DB	'AWS', 00H
$SG169666 DB	'HHC00215%s %1d:%04X Tape file %s, type %s: auto-mounted', 0aH
	DB	00H
	ORG $+3
$SG169691 DB	'OMA', 00H
$SG169667 DB	'tapedev_execute_ccw', 00H
$SG169693 DB	'HET', 00H
$SG169668 DB	'tapeccws.c', 00H
	ORG $+1
$SG169698 DB	'I', 00H
	ORG $+2
$SG169669 DB	'tapeccws.c:1770', 00H
$SG169678 DB	'tapedev_execute_ccw', 00H
$SG169895 DB	'AWS', 00H
$SG169679 DB	'tapeccws.c', 00H
	ORG $+5
$SG169682 DB	'tapedev_execute_ccw', 00H
	ORG $+4
$SG169680 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169683 DB	'tapeccws.c', 00H
	ORG $+1
$SG169692 DB	'SCSI', 00H
	ORG $+7
$SG169684 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169694 DB	'FAKE', 00H
	ORG $+3
$SG169695 DB	'DWTVF', 00H
	ORG $+2
$SG169696 DB	'UNKNOWN', 00H
$SG169699 DB	'HHC00217%s %1d:%04X Tape file %s, type %s: locate block '
	DB	'0x%8.8X', 0aH, 00H
	ORG $+3
$SG169896 DB	'OMA', 00H
$SG169700 DB	'tapedev_execute_ccw', 00H
$SG169898 DB	'HET', 00H
$SG169701 DB	'tapeccws.c', 00H
	ORG $+1
$SG169897 DB	'SCSI', 00H
	ORG $+3
$SG169899 DB	'FAKE', 00H
	ORG $+3
$SG169900 DB	'DWTVF', 00H
	ORG $+2
$SG169902 DB	'I', 00H
	ORG $+2
$SG169901 DB	'UNKNOWN', 00H
$SG169903 DB	'HHC00218%s %1d:%04X Tape file %s, type %s: display %s un'
	DB	'til unmounted', 0aH, 00H
	ORG $+1
$SG169904 DB	'load_display', 00H
	ORG $+3
$SG169905 DB	'tapeccws.c', 00H
	ORG $+1
$SG169909 DB	'AWS', 00H
$SG169910 DB	'OMA', 00H
$SG169911 DB	'SCSI', 00H
	ORG $+3
$SG169912 DB	'HET', 00H
$SG169913 DB	'FAKE', 00H
	ORG $+3
$SG169914 DB	'DWTVF', 00H
	ORG $+2
$SG169915 DB	'UNKNOWN', 00H
$SG169916 DB	'I', 00H
	ORG $+6
$SG169918 DB	'load_display', 00H
	ORG $+3
$SG169927 DB	'AWS', 00H
	ORG $+4
$SG169917 DB	'HHC00218%s %1d:%04X Tape file %s, type %s: display %s un'
	DB	'til unmounted', 0aH, 00H
	ORG $+1
$SG169919 DB	'tapeccws.c', 00H
	ORG $+1
$SG169928 DB	'OMA', 00H
$SG169929 DB	'SCSI', 00H
	ORG $+3
$SG169930 DB	'HET', 00H
$SG169931 DB	'FAKE', 00H
	ORG $+3
$SG169932 DB	'DWTVF', 00H
	ORG $+2
$SG169934 DB	'I', 00H
	ORG $+2
$SG169933 DB	'UNKNOWN', 00H
$SG169935 DB	'HHC00219%s %1d:%04X Tape file %s, type %s: display %s un'
	DB	'til unmounted, then %s until mounted', 0aH, 00H
	ORG $+2
$SG169936 DB	'load_display', 00H
	ORG $+3
$SG169937 DB	'tapeccws.c', 00H
	ORG $+1
$SG169939 DB	'AWS', 00H
$SG169940 DB	'OMA', 00H
$SG169941 DB	'SCSI', 00H
	ORG $+3
$SG169942 DB	'HET', 00H
$SG169943 DB	'FAKE', 00H
	ORG $+3
$SG169944 DB	'DWTVF', 00H
	ORG $+2
$SG169945 DB	'UNKNOWN', 00H
$SG169946 DB	'I', 00H
	ORG $+6
$SG169947 DB	'HHC00218%s %1d:%04X Tape file %s, type %s: display %s un'
	DB	'til unmounted', 0aH, 00H
	ORG $+1
$SG169948 DB	'load_display', 00H
	ORG $+3
$SG169949 DB	'tapeccws.c', 00H
	ORG $+1
$SG170015 DB	'*', 00H
	ORG $+2
$SG170093 DB	'*', 00H
	ORG $+2
$SG170204 DB	'*', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:findtamdir
	DD	01eH
	DD	0ddH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:load_display
	DD	022H
	DD	0fefH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tapedev_execute_ccw
	DD	026H
	DD	068c9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_fw_noswap DD 010901H
	DD	02209H
xdata	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$is_tape_feat DD 010d01H
	DD	0620dH
$unwind$TapeCommandIsValid DD 011201H
	DD	02212H
$unwind$tapedev_execute_ccw DD 042e19H
	DD	0ef011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0760H
$unwind$load_display DD 032a19H
	DD	0400118H
	DD	07011H
	DD	imagerel __GSHandlerCheck
	DD	01f8H
$unwind$build_senseX DD 021801H
	DD	070147218H
$unwind$build_sense_3410 DD 011701H
	DD	04217H
$unwind$build_sense_3420 DD 011701H
	DD	04217H
$unwind$build_sense_3410_3420 DD 011701H
	DD	06217H
$unwind$build_sense_3480_etal DD 021801H
	DD	070145218H
$unwind$build_sense_3490 DD 011701H
	DD	04217H
$unwind$build_sense_3590 DD 011701H
	DD	06217H
$unwind$build_sense_Streaming DD 011701H
	DD	06217H
$unwind$findtamdir DD 022619H
	DD	04d0114H
	DD	imagerel __GSHandlerCheck
	DD	0250H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapeccws.c
_TEXT	SEGMENT
pTAMDIR$ = 32
szTAMDIR$ = 48
szDIR$ = 320
__$ArrayPad$ = 592
rej$ = 624
minlen$ = 632
pszDir$ = 640
findtamdir PROC

; 3349 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 81 ec 68 02
	00 00		 sub	 rsp, 616		; 00000268H
  00014	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001b	48 33 c4	 xor	 rax, rsp
  0001e	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 3350 :     char    szDIR[MAX_PATH + 1];
; 3351 :     char    szTAMDIR[MAX_PATH + 1];
; 3352 :     TAMDIR *pTAMDIR;
; 3353 : 
; 3354 :     hostpath(szDIR, pszDir, sizeof(szDIR));

  00026	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  0002c	48 8b 94 24 80
	02 00 00	 mov	 rdx, QWORD PTR pszDir$[rsp]
  00034	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR szDIR$[rsp]
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 3355 : 
; 3356 :     pTAMDIR = sysblk.tamdir;    /* always search entire list */

  00042	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00049	48 8b 80 80 12
	00 00		 mov	 rax, QWORD PTR [rax+4736]
  00050	48 89 44 24 20	 mov	 QWORD PTR pTAMDIR$[rsp], rax
$LN4@findtamdir:

; 3357 : 
; 3358 :     do
; 3359 :     {
; 3360 :         hostpath(szTAMDIR, pTAMDIR->dir, sizeof(szTAMDIR));

  00055	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR pTAMDIR$[rsp]
  00060	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00064	48 8d 4c 24 30	 lea	 rcx, QWORD PTR szTAMDIR$[rsp]
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 3361 :         if (1
; 3362 :             && pTAMDIR->rej == rej
; 3363 :             && pTAMDIR->len > minlen
; 3364 :             && strnfilenamecmp( szDIR, szTAMDIR, pTAMDIR->len ) == 0

  0006f	33 c0		 xor	 eax, eax
  00071	83 f8 01	 cmp	 eax, 1
  00074	74 4c		 je	 SHORT $LN5@findtamdir
  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR pTAMDIR$[rsp]
  0007b	8b 8c 24 70 02
	00 00		 mov	 ecx, DWORD PTR rej$[rsp]
  00082	39 48 14	 cmp	 DWORD PTR [rax+20], ecx
  00085	75 3b		 jne	 SHORT $LN5@findtamdir
  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR pTAMDIR$[rsp]
  0008c	8b 8c 24 78 02
	00 00		 mov	 ecx, DWORD PTR minlen$[rsp]
  00093	39 48 10	 cmp	 DWORD PTR [rax+16], ecx
  00096	7e 2a		 jle	 SHORT $LN5@findtamdir
  00098	48 8b 44 24 20	 mov	 rax, QWORD PTR pTAMDIR$[rsp]
  0009d	48 63 40 10	 movsxd	 rax, DWORD PTR [rax+16]
  000a1	4c 8b c0	 mov	 r8, rax
  000a4	48 8d 54 24 30	 lea	 rdx, QWORD PTR szTAMDIR$[rsp]
  000a9	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR szDIR$[rsp]
  000b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  000b7	85 c0		 test	 eax, eax
  000b9	75 07		 jne	 SHORT $LN5@findtamdir

; 3365 :         )
; 3366 :             return pTAMDIR;

  000bb	48 8b 44 24 20	 mov	 rax, QWORD PTR pTAMDIR$[rsp]
  000c0	eb 1b		 jmp	 SHORT $LN1@findtamdir
$LN5@findtamdir:

; 3367 :     }
; 3368 :         while ((pTAMDIR = pTAMDIR->next) != NULL);

  000c2	48 8b 44 24 20	 mov	 rax, QWORD PTR pTAMDIR$[rsp]
  000c7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ca	48 89 44 24 20	 mov	 QWORD PTR pTAMDIR$[rsp], rax
  000cf	48 83 7c 24 20
	00		 cmp	 QWORD PTR pTAMDIR$[rsp], 0
  000d5	0f 85 7a ff ff
	ff		 jne	 $LN4@findtamdir

; 3369 :     return NULL;

  000db	33 c0		 xor	 eax, eax
$LN1@findtamdir:

; 3370 : }

  000dd	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000e5	48 33 cc	 xor	 rcx, rsp
  000e8	e8 00 00 00 00	 call	 __security_check_cookie
  000ed	48 81 c4 68 02
	00 00		 add	 rsp, 616		; 00000268H
  000f4	c3		 ret	 0
findtamdir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapeccws.c
_TEXT	SEGMENT
tv65 = 32
tv217 = 36
tv235 = 40
ERCode$ = 64
dev$ = 72
unitstat$ = 80
ccwcode$ = 88
build_sense_Streaming PROC

; 4147 : {

$LN38:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@build_sens:

; 4148 :     // NOTE: caller should have cleared sense area to zeros
; 4149 :     //       if this isn't a 'TAPE_BSENSE_STATUSONLY' call
; 4150 : 
; 4151 :     UNREFERENCED(ccwcode);

  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@build_sens

; 4152 : 
; 4153 :     switch(ERCode)

  0001d	8b 44 24 40	 mov	 eax, DWORD PTR ERCode$[rsp]
  00021	89 44 24 20	 mov	 DWORD PTR tv65[rsp], eax
  00025	83 7c 24 20 14	 cmp	 DWORD PTR tv65[rsp], 20
  0002a	0f 87 2f 02 00
	00		 ja	 $LN5@build_sens
  00030	48 63 44 24 20	 movsxd	 rax, DWORD PTR tv65[rsp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0003c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN37@build_sens[rcx+rax*4]
  00043	48 03 c1	 add	 rax, rcx
  00046	ff e0		 jmp	 rax
$LN7@build_sens:

; 4154 :     {
; 4155 :     case TAPE_BSENSE_TAPEUNLOADED:
; 4156 :         *unitstat = CSW_UC;

  00048	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  0004d	c6 00 02	 mov	 BYTE PTR [rax], 2

; 4157 :         dev->sense[0] = SENSE_IR;

  00050	b8 01 00 00 00	 mov	 eax, 1
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0005e	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 4158 :         dev->sense[3] = 6;        /* Int Req ERAC */

  00066	b8 01 00 00 00	 mov	 eax, 1
  0006b	48 6b c0 03	 imul	 rax, rax, 3
  0006f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00074	c6 84 01 64 03
	00 00 06	 mov	 BYTE PTR [rcx+rax+868], 6

; 4159 :         break;

  0007c	e9 de 01 00 00	 jmp	 $LN5@build_sens
$LN8@build_sens:

; 4160 :     case TAPE_BSENSE_RUN_SUCCESS: /* RewUnld op */
; 4161 :         *unitstat = CSW_UC | CSW_CE | CSW_DE | CSW_CUE;

  00081	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00086	c6 00 2e	 mov	 BYTE PTR [rax], 46	; 0000002eH

; 4162 :         /*
; 4163 :         *unitstat = CSW_CE | CSW_UC | CSW_DE | CSW_CUE;
; 4164 :         */
; 4165 :         dev->sense[0] = SENSE_IR;

  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	48 6b c0 00	 imul	 rax, rax, 0
  00092	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00097	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 4166 :         dev->sense[3] = 6;        /* Int Req ERAC */

  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	48 6b c0 03	 imul	 rax, rax, 3
  000a8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  000ad	c6 84 01 64 03
	00 00 06	 mov	 BYTE PTR [rcx+rax+868], 6

; 4167 :         break;

  000b5	e9 a5 01 00 00	 jmp	 $LN5@build_sens
$LN9@build_sens:
$LN10@build_sens:

; 4168 :     case TAPE_BSENSE_REWINDFAILED:
; 4169 :     case TAPE_BSENSE_ITFERROR:
; 4170 :         dev->sense[0] = SENSE_EC;

  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	48 6b c0 00	 imul	 rax, rax, 0
  000c3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  000c8	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 4171 :         dev->sense[3] = 0x03;     /* Perm Equip Check */

  000d0	b8 01 00 00 00	 mov	 eax, 1
  000d5	48 6b c0 03	 imul	 rax, rax, 3
  000d9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  000de	c6 84 01 64 03
	00 00 03	 mov	 BYTE PTR [rcx+rax+868], 3

; 4172 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  000e6	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  000eb	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 4173 :         break;

  000ee	e9 6c 01 00 00	 jmp	 $LN5@build_sens
$LN11@build_sens:
$LN12@build_sens:
$LN13@build_sens:
$LN14@build_sens:
$LN15@build_sens:
$LN16@build_sens:
$LN17@build_sens:

; 4174 :     case TAPE_BSENSE_TAPELOADFAIL:
; 4175 :     case TAPE_BSENSE_LOCATEERR:
; 4176 :     case TAPE_BSENSE_ENDOFTAPE:
; 4177 :     case TAPE_BSENSE_EMPTYTAPE:
; 4178 :     case TAPE_BSENSE_FENCED:
; 4179 :     case TAPE_BSENSE_BLOCKSHORT:
; 4180 :     case TAPE_BSENSE_INCOMPAT:
; 4181 :         dev->sense[0] = SENSE_EC;

  000f3	b8 01 00 00 00	 mov	 eax, 1
  000f8	48 6b c0 00	 imul	 rax, rax, 0
  000fc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00101	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 4182 :         dev->sense[3] = 0x10; /* PE-ID Burst Check */

  00109	b8 01 00 00 00	 mov	 eax, 1
  0010e	48 6b c0 03	 imul	 rax, rax, 3
  00112	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00117	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 4183 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  0011f	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00124	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 4184 :         break;

  00127	e9 33 01 00 00	 jmp	 $LN5@build_sens
$LN18@build_sens:
$LN19@build_sens:

; 4185 :     case TAPE_BSENSE_BADALGORITHM:
; 4186 :     case TAPE_BSENSE_READFAIL:
; 4187 :         dev->sense[0] = SENSE_DC;

  0012c	b8 01 00 00 00	 mov	 eax, 1
  00131	48 6b c0 00	 imul	 rax, rax, 0
  00135	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0013a	c6 84 01 64 03
	00 00 08	 mov	 BYTE PTR [rcx+rax+868], 8

; 4188 :         dev->sense[3] = 0x09;     /* Read Data Check */

  00142	b8 01 00 00 00	 mov	 eax, 1
  00147	48 6b c0 03	 imul	 rax, rax, 3
  0014b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00150	c6 84 01 64 03
	00 00 09	 mov	 BYTE PTR [rcx+rax+868], 9

; 4189 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00158	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  0015d	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 4190 :         break;

  00160	e9 fa 00 00 00	 jmp	 $LN5@build_sens
$LN20@build_sens:

; 4191 :     case TAPE_BSENSE_WRITEFAIL:
; 4192 :         dev->sense[0] = SENSE_DC;

  00165	b8 01 00 00 00	 mov	 eax, 1
  0016a	48 6b c0 00	 imul	 rax, rax, 0
  0016e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00173	c6 84 01 64 03
	00 00 08	 mov	 BYTE PTR [rcx+rax+868], 8

; 4193 :         dev->sense[3] = 0x07;     /* Write Data Check (Media Error) */

  0017b	b8 01 00 00 00	 mov	 eax, 1
  00180	48 6b c0 03	 imul	 rax, rax, 3
  00184	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00189	c6 84 01 64 03
	00 00 07	 mov	 BYTE PTR [rcx+rax+868], 7

; 4194 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00191	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00196	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 4195 :         break;

  00199	e9 c1 00 00 00	 jmp	 $LN5@build_sens
$LN21@build_sens:

; 4196 :     case TAPE_BSENSE_BADCOMMAND:
; 4197 :         dev->sense[0] = SENSE_CR;

  0019e	b8 01 00 00 00	 mov	 eax, 1
  001a3	48 6b c0 00	 imul	 rax, rax, 0
  001a7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  001ac	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 4198 :         dev->sense[3] = 0x0C;     /* Bad Command */

  001b4	b8 01 00 00 00	 mov	 eax, 1
  001b9	48 6b c0 03	 imul	 rax, rax, 3
  001bd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  001c2	c6 84 01 64 03
	00 00 0c	 mov	 BYTE PTR [rcx+rax+868], 12

; 4199 :         *unitstat = CSW_UC;

  001ca	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  001cf	c6 00 02	 mov	 BYTE PTR [rax], 2

; 4200 :         break;

  001d2	e9 88 00 00 00	 jmp	 $LN5@build_sens
$LN22@build_sens:

; 4201 :     case TAPE_BSENSE_WRITEPROTECT:
; 4202 :         dev->sense[0] = SENSE_CR;

  001d7	b8 01 00 00 00	 mov	 eax, 1
  001dc	48 6b c0 00	 imul	 rax, rax, 0
  001e0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  001e5	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 4203 :         dev->sense[3] = 0x0B;     /* File Protect */

  001ed	b8 01 00 00 00	 mov	 eax, 1
  001f2	48 6b c0 03	 imul	 rax, rax, 3
  001f6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  001fb	c6 84 01 64 03
	00 00 0b	 mov	 BYTE PTR [rcx+rax+868], 11

; 4204 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00203	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00208	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 4205 :         break;

  0020b	eb 52		 jmp	 SHORT $LN5@build_sens
$LN23@build_sens:

; 4206 :     case TAPE_BSENSE_LOADPTERR:
; 4207 :         dev->sense[0] = SENSE_CR;

  0020d	b8 01 00 00 00	 mov	 eax, 1
  00212	48 6b c0 00	 imul	 rax, rax, 0
  00216	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0021b	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 4208 :         dev->sense[3] = 0x0D;     /* Backspace at Load Point */

  00223	b8 01 00 00 00	 mov	 eax, 1
  00228	48 6b c0 03	 imul	 rax, rax, 3
  0022c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00231	c6 84 01 64 03
	00 00 0d	 mov	 BYTE PTR [rcx+rax+868], 13

; 4209 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00239	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  0023e	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 4210 :         break;

  00241	eb 1c		 jmp	 SHORT $LN5@build_sens
$LN24@build_sens:

; 4211 :     case TAPE_BSENSE_READTM:
; 4212 :         *unitstat = CSW_CE|CSW_DE|CSW_UX;

  00243	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00248	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 4213 :         break;

  0024b	eb 12		 jmp	 SHORT $LN5@build_sens
$LN25@build_sens:

; 4214 :     case TAPE_BSENSE_UNSOLICITED:
; 4215 :         *unitstat = CSW_CE|CSW_DE;

  0024d	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00252	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 4216 :         break;

  00255	eb 08		 jmp	 SHORT $LN5@build_sens
$LN26@build_sens:

; 4217 :     case TAPE_BSENSE_STATUSONLY:
; 4218 :         *unitstat = CSW_CE|CSW_DE;

  00257	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  0025c	c6 00 0c	 mov	 BYTE PTR [rax], 12
$LN5@build_sens:

; 4219 :         break;
; 4220 :     } // end switch(ERCode)
; 4221 : 
; 4222 :     if (TAPE_BSENSE_STATUSONLY == ERCode)

  0025f	83 7c 24 40 0d	 cmp	 DWORD PTR ERCode$[rsp], 13
  00264	75 05		 jne	 SHORT $LN27@build_sens

; 4223 :         return; // (mission accomplished)

  00266	e9 85 02 00 00	 jmp	 $LN1@build_sens
$LN27@build_sens:

; 4224 : 
; 4225 :     /* Fill in the common sense information */
; 4226 : 
; 4227 :     if (strcmp(dev->filename,TAPE_UNLOADED) == 0
; 4228 :         || !dev->tmh->tapeloaded(dev,NULL,0))

  0026b	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  00270	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00276	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170204
  0027d	48 8b c8	 mov	 rcx, rax
  00280	e8 00 00 00 00	 call	 strcmp
  00285	85 c0		 test	 eax, eax
  00287	74 21		 je	 SHORT $LN30@build_sens
  00289	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  0028e	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00295	45 33 c0	 xor	 r8d, r8d
  00298	33 d2		 xor	 edx, edx
  0029a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0029f	ff 50 70	 call	 QWORD PTR [rax+112]
  002a2	85 c0		 test	 eax, eax
  002a4	0f 85 bd 00 00
	00		 jne	 $LN28@build_sens
$LN30@build_sens:

; 4229 :     {
; 4230 :         dev->sense[0] |= SENSE_IR;

  002aa	b8 01 00 00 00	 mov	 eax, 1
  002af	48 6b c0 00	 imul	 rax, rax, 0
  002b3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  002b8	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  002c0	83 c8 40	 or	 eax, 64			; 00000040H
  002c3	b9 01 00 00 00	 mov	 ecx, 1
  002c8	48 6b c9 00	 imul	 rcx, rcx, 0
  002cc	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  002d1	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4231 :         dev->sense[1] |= SENSE1_TAPE_FP;

  002d8	b8 01 00 00 00	 mov	 eax, 1
  002dd	48 6b c0 01	 imul	 rax, rax, 1
  002e1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  002e6	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  002ee	83 c8 02	 or	 eax, 2
  002f1	b9 01 00 00 00	 mov	 ecx, 1
  002f6	48 6b c9 01	 imul	 rcx, rcx, 1
  002fa	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  002ff	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4232 :         dev->sense[1] &= ~SENSE1_TAPE_TUA;

  00306	b8 01 00 00 00	 mov	 eax, 1
  0030b	48 6b c0 01	 imul	 rax, rax, 1
  0030f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00314	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  0031c	83 e0 bf	 and	 eax, -65		; ffffffffffffffbfH
  0031f	b9 01 00 00 00	 mov	 ecx, 1
  00324	48 6b c9 01	 imul	 rcx, rcx, 1
  00328	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0032d	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4233 :         dev->sense[1] |= SENSE1_TAPE_TUB;

  00334	b8 01 00 00 00	 mov	 eax, 1
  00339	48 6b c0 01	 imul	 rax, rax, 1
  0033d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00342	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  0034a	83 c8 20	 or	 eax, 32			; 00000020H
  0034d	b9 01 00 00 00	 mov	 ecx, 1
  00352	48 6b c9 01	 imul	 rcx, rcx, 1
  00356	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0035b	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4234 :     }

  00362	e9 43 01 00 00	 jmp	 $LN29@build_sens
$LN28@build_sens:

; 4235 :     else
; 4236 :     {
; 4237 :         dev->sense[0] &= ~SENSE_IR;

  00367	b8 01 00 00 00	 mov	 eax, 1
  0036c	48 6b c0 00	 imul	 rax, rax, 0
  00370	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00375	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  0037d	83 e0 bf	 and	 eax, -65		; ffffffffffffffbfH
  00380	b9 01 00 00 00	 mov	 ecx, 1
  00385	48 6b c9 00	 imul	 rcx, rcx, 0
  00389	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0038e	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4238 :         dev->sense[1] |= IsAtLoadPoint( dev ) ? SENSE1_TAPE_LOADPT : 0;

  00395	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0039a	e8 00 00 00 00	 call	 IsAtLoadPoint
  0039f	85 c0		 test	 eax, eax
  003a1	74 0a		 je	 SHORT $LN33@build_sens
  003a3	c7 44 24 24 08
	00 00 00	 mov	 DWORD PTR tv217[rsp], 8
  003ab	eb 08		 jmp	 SHORT $LN34@build_sens
$LN33@build_sens:
  003ad	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv217[rsp], 0
$LN34@build_sens:
  003b5	b8 01 00 00 00	 mov	 eax, 1
  003ba	48 6b c0 01	 imul	 rax, rax, 1
  003be	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  003c3	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  003cb	0b 44 24 24	 or	 eax, DWORD PTR tv217[rsp]
  003cf	b9 01 00 00 00	 mov	 ecx, 1
  003d4	48 6b c9 01	 imul	 rcx, rcx, 1
  003d8	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  003dd	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4239 :         dev->sense[1] |= dev->readonly || dev->tdparms.logical_readonly ?

  003e4	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  003e9	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  003ef	d1 e8		 shr	 eax, 1
  003f1	83 e0 01	 and	 eax, 1
  003f4	85 c0		 test	 eax, eax
  003f6	75 1f		 jne	 SHORT $LN35@build_sens
  003f8	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  003fd	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  00403	c1 e8 0b	 shr	 eax, 11
  00406	83 e0 01	 and	 eax, 1
  00409	85 c0		 test	 eax, eax
  0040b	75 0a		 jne	 SHORT $LN35@build_sens
  0040d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv235[rsp], 0
  00415	eb 08		 jmp	 SHORT $LN36@build_sens
$LN35@build_sens:
  00417	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR tv235[rsp], 2
$LN36@build_sens:
  0041f	b8 01 00 00 00	 mov	 eax, 1
  00424	48 6b c0 01	 imul	 rax, rax, 1
  00428	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0042d	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00435	0b 44 24 28	 or	 eax, DWORD PTR tv235[rsp]
  00439	b9 01 00 00 00	 mov	 ecx, 1
  0043e	48 6b c9 01	 imul	 rcx, rcx, 1
  00442	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00447	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4240 :             SENSE1_TAPE_FP : 0;
; 4241 :         dev->sense[1] |= SENSE1_TAPE_TUA;

  0044e	b8 01 00 00 00	 mov	 eax, 1
  00453	48 6b c0 01	 imul	 rax, rax, 1
  00457	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0045c	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00464	83 c8 40	 or	 eax, 64			; 00000040H
  00467	b9 01 00 00 00	 mov	 ecx, 1
  0046c	48 6b c9 01	 imul	 rcx, rcx, 1
  00470	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00475	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4242 :         dev->sense[1] &= ~SENSE1_TAPE_TUB;

  0047c	b8 01 00 00 00	 mov	 eax, 1
  00481	48 6b c0 01	 imul	 rax, rax, 1
  00485	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0048a	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00492	83 e0 df	 and	 eax, -33		; ffffffffffffffdfH
  00495	b9 01 00 00 00	 mov	 ecx, 1
  0049a	48 6b c9 01	 imul	 rcx, rcx, 1
  0049e	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  004a3	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al
$LN29@build_sens:

; 4243 :     }
; 4244 :     if (dev->tmh->passedeot(dev))

  004aa	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  004af	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  004b6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  004bb	ff 50 78	 call	 QWORD PTR [rax+120]
  004be	85 c0		 test	 eax, eax
  004c0	74 2e		 je	 SHORT $LN31@build_sens

; 4245 :     {
; 4246 :         dev->sense[4] |= 0x40;

  004c2	b8 01 00 00 00	 mov	 eax, 1
  004c7	48 6b c0 04	 imul	 rax, rax, 4
  004cb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  004d0	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  004d8	83 c8 40	 or	 eax, 64			; 00000040H
  004db	b9 01 00 00 00	 mov	 ecx, 1
  004e0	48 6b c9 04	 imul	 rcx, rcx, 4
  004e4	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  004e9	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al
$LN31@build_sens:
$LN1@build_sens:

; 4247 :     }
; 4248 : 
; 4249 : } /* end function build_sense_Streaming */

  004f0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  004f4	c3		 ret	 0
  004f5	0f 1f 00	 npad	 3
$LN37@build_sens:
  004f8	00 00 00 00	 DD	 $LN7@build_sens
  004fc	00 00 00 00	 DD	 $LN11@build_sens
  00500	00 00 00 00	 DD	 $LN19@build_sens
  00504	00 00 00 00	 DD	 $LN20@build_sens
  00508	00 00 00 00	 DD	 $LN21@build_sens
  0050c	00 00 00 00	 DD	 $LN17@build_sens
  00510	00 00 00 00	 DD	 $LN22@build_sens
  00514	00 00 00 00	 DD	 $LN14@build_sens
  00518	00 00 00 00	 DD	 $LN13@build_sens
  0051c	00 00 00 00	 DD	 $LN23@build_sens
  00520	00 00 00 00	 DD	 $LN15@build_sens
  00524	00 00 00 00	 DD	 $LN18@build_sens
  00528	00 00 00 00	 DD	 $LN8@build_sens
  0052c	00 00 00 00	 DD	 $LN26@build_sens
  00530	00 00 00 00	 DD	 $LN12@build_sens
  00534	00 00 00 00	 DD	 $LN24@build_sens
  00538	00 00 00 00	 DD	 $LN5@build_sens
  0053c	00 00 00 00	 DD	 $LN16@build_sens
  00540	00 00 00 00	 DD	 $LN10@build_sens
  00544	00 00 00 00	 DD	 $LN9@build_sens
  00548	00 00 00 00	 DD	 $LN25@build_sens
build_sense_Streaming ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapeccws.c
_TEXT	SEGMENT
ERA$ = 32
tv72 = 36
tv166 = 40
ERCode$ = 64
dev$ = 72
unitstat$ = 80
ccwcode$ = 88
build_sense_3590 PROC

; 4037 : {

$LN59:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4038 :     unsigned char ERA;
; 4039 :     // Until we know for sure that we have to do something different,
; 4040 :     // we should be able to safely use the 3480 sense function here...
; 4041 : 
; 4042 :     build_sense_3480_etal( ERCode, dev, unitstat, ccwcode );

  00017	44 0f b6 4c 24
	58		 movzx	 r9d, BYTE PTR ccwcode$[rsp]
  0001d	4c 8b 44 24 50	 mov	 r8, QWORD PTR unitstat$[rsp]
  00022	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00027	8b 4c 24 40	 mov	 ecx, DWORD PTR ERCode$[rsp]
  0002b	e8 00 00 00 00	 call	 build_sense_3480_etal

; 4043 : 
; 4044 : /* This information is from GA32-0127-03 sections 4.2 and 4.3
; 4045 :    although it is a 3490E reference guide, the values are correct
; 4046 :    for a 3590. For the 3480 and 3490 devices, these actions are
; 4047 :    determined by the OS. For 3590, the device through sense byte
; 4048 :    2 (two) tells the OS what to do.
; 4049 : */
; 4050 :     ERA = dev->sense[3];

  00030	b8 01 00 00 00	 mov	 eax, 1
  00035	48 6b c0 03	 imul	 rax, rax, 3
  00039	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0003e	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00046	88 44 24 20	 mov	 BYTE PTR ERA$[rsp], al

; 4051 : 
; 4052 :     switch ( ERA )          /* Set Software Recovery */

  0004a	0f b6 44 24 20	 movzx	 eax, BYTE PTR ERA$[rsp]
  0004f	89 44 24 24	 mov	 DWORD PTR tv72[rsp], eax
  00053	83 7c 24 24 57	 cmp	 DWORD PTR tv72[rsp], 87	; 00000057H
  00058	0f 87 5c 01 00
	00		 ja	 $LN25@build_sens
  0005e	48 63 44 24 24	 movsxd	 rax, DWORD PTR tv72[rsp]
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0006a	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN57@build_sens[rcx+rax]
  00072	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN58@build_sens[rcx+rax*4]
  00079	48 03 c1	 add	 rax, rcx
  0007c	ff e0		 jmp	 rax
$LN6@build_sens:

; 4053 :     {
; 4054 :     case TAPE_ERA_00_UNSOLICITED_SENSE:
; 4055 :         if ( unitstat[0] & CSW_UC )

  0007e	b8 01 00 00 00	 mov	 eax, 1
  00083	48 6b c0 00	 imul	 rax, rax, 0
  00087	48 8b 4c 24 50	 mov	 rcx, QWORD PTR unitstat$[rsp]
  0008c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00090	83 e0 02	 and	 eax, 2
  00093	85 c0		 test	 eax, eax
  00095	74 5c		 je	 SHORT $LN7@build_sens

; 4056 :         {
; 4057 :             dev->sense[2] |= TAPE_SNS2_NTP_BRAC_00_PERM_ERR;

  00097	b8 01 00 00 00	 mov	 eax, 1
  0009c	48 6b c0 02	 imul	 rax, rax, 2
  000a0	b9 01 00 00 00	 mov	 ecx, 1
  000a5	48 6b c9 02	 imul	 rcx, rcx, 2
  000a9	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  000ae	4c 8b 44 24 48	 mov	 r8, QWORD PTR dev$[rsp]
  000b3	41 0f b6 84 00
	64 03 00 00	 movzx	 eax, BYTE PTR [r8+rax+868]
  000bc	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4058 :             dev->sense[2] |= TAPE_SNS2_NTP_LOG_CD2_PERM_OBR;

  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	48 6b c0 02	 imul	 rax, rax, 2
  000cc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  000d1	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  000d9	83 c8 10	 or	 eax, 16
  000dc	b9 01 00 00 00	 mov	 ecx, 1
  000e1	48 6b c9 02	 imul	 rcx, rcx, 2
  000e5	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  000ea	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4059 :         }

  000f1	eb 2c		 jmp	 SHORT $LN8@build_sens
$LN7@build_sens:

; 4060 :         else
; 4061 :         {
; 4062 :             dev->sense[2] |= TAPE_SNS2_NTP_LOG_CD0_NO_LOG;

  000f3	b8 01 00 00 00	 mov	 eax, 1
  000f8	48 6b c0 02	 imul	 rax, rax, 2
  000fc	b9 01 00 00 00	 mov	 ecx, 1
  00101	48 6b c9 02	 imul	 rcx, rcx, 2
  00105	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0010a	4c 8b 44 24 48	 mov	 r8, QWORD PTR dev$[rsp]
  0010f	41 0f b6 84 00
	64 03 00 00	 movzx	 eax, BYTE PTR [r8+rax+868]
  00118	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al
$LN8@build_sens:

; 4063 :         }
; 4064 :         break;

  0011f	e9 c2 00 00 00	 jmp	 $LN2@build_sens
$LN9@build_sens:
$LN10@build_sens:

; 4065 :         /* Software Recovery - CONTINUE */
; 4066 :     case TAPE_ERA_2B_ENVIRONMENTAL_DATA_PRESENT:
; 4067 :     case TAPE_ERA_52_END_OF_VOLUME_COMPLETE:
; 4068 :         dev->sense[2] |= TAPE_SNS2_NTP_BRAC_01_CONTINUE;

  00124	b8 01 00 00 00	 mov	 eax, 1
  00129	48 6b c0 02	 imul	 rax, rax, 2
  0012d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00132	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  0013a	83 c8 40	 or	 eax, 64			; 00000040H
  0013d	b9 01 00 00 00	 mov	 ecx, 1
  00142	48 6b c9 02	 imul	 rcx, rcx, 2
  00146	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0014b	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4069 :         break;

  00152	e9 8f 00 00 00	 jmp	 $LN2@build_sens
$LN11@build_sens:
$LN12@build_sens:
$LN13@build_sens:
$LN14@build_sens:
$LN15@build_sens:
$LN16@build_sens:
$LN17@build_sens:
$LN18@build_sens:
$LN19@build_sens:
$LN20@build_sens:

; 4070 :         /* Software Recovery - REISSUE */
; 4071 :     case TAPE_ERA_21_DATA_STREAMING_NOT_OPER:
; 4072 :     case TAPE_ERA_2A_UNSOL_ENVIRONMENTAL_DATA:
; 4073 :     case TAPE_ERA_42_DEGRADED_MODE:
; 4074 :     case TAPE_ERA_48_UNSOL_INFORMATIONAL_DATA:
; 4075 :     case TAPE_ERA_4C_RECOVERED_CHECKONE_FAILURE:
; 4076 :     case TAPE_ERA_50_BUFFERED_LOG_OVERFLOW:
; 4077 :     case TAPE_ERA_51_BUFFERED_LOG_END_OF_VOLUME:
; 4078 :     case TAPE_ERA_53_GLOBAL_COMMAND_INTERCEPT:
; 4079 :     case TAPE_ERA_54_TEMP_CHNL_INTERFACE_ERROR:
; 4080 :     case TAPE_ERA_57_GLOBAL_STATUS_INTERCEPT:
; 4081 :         dev->sense[2] |= TAPE_SNS2_NTP_BRAC_10_REISSUE;

  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	48 6b c0 02	 imul	 rax, rax, 2
  00160	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00165	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  0016d	0f ba e8 07	 bts	 eax, 7
  00171	b9 01 00 00 00	 mov	 ecx, 1
  00176	48 6b c9 02	 imul	 rcx, rcx, 2
  0017a	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0017f	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4082 :         break;

  00186	eb 5e		 jmp	 SHORT $LN2@build_sens
$LN21@build_sens:
$LN22@build_sens:
$LN23@build_sens:
$LN24@build_sens:

; 4083 :         /* Software Recovery - DEFER REISSUE */
; 4084 :     case TAPE_ERA_33_LOAD_FAILURE:
; 4085 :     case TAPE_ERA_34_UNLOAD_FAILURE:
; 4086 :     case TAPE_ERA_3A_DRIVE_SWITCHED_NOT_READY:
; 4087 :     case TAPE_ERA_43_DRIVE_NOT_READY:
; 4088 :         dev->sense[2] |= TAPE_SNS2_NTP_BRAC_11_DEFER_REISS;

  00188	b8 01 00 00 00	 mov	 eax, 1
  0018d	48 6b c0 02	 imul	 rax, rax, 2
  00191	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00196	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  0019e	0d c0 00 00 00	 or	 eax, 192		; 000000c0H
  001a3	b9 01 00 00 00	 mov	 ecx, 1
  001a8	48 6b c9 02	 imul	 rcx, rcx, 2
  001ac	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  001b1	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4089 :         break;

  001b8	eb 2c		 jmp	 SHORT $LN2@build_sens
$LN25@build_sens:

; 4090 :     default:
; 4091 :         /* Software Recovery - NONE - PERMANENT */
; 4092 :         dev->sense[2] |= TAPE_SNS2_NTP_BRAC_00_PERM_ERR;

  001ba	b8 01 00 00 00	 mov	 eax, 1
  001bf	48 6b c0 02	 imul	 rax, rax, 2
  001c3	b9 01 00 00 00	 mov	 ecx, 1
  001c8	48 6b c9 02	 imul	 rcx, rcx, 2
  001cc	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  001d1	4c 8b 44 24 48	 mov	 r8, QWORD PTR dev$[rsp]
  001d6	41 0f b6 84 00
	64 03 00 00	 movzx	 eax, BYTE PTR [r8+rax+868]
  001df	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al
$LN2@build_sens:

; 4093 :         break;
; 4094 :     }
; 4095 : 
; 4096 :     /* Check for OBR  */
; 4097 :     switch ( ERA )

  001e6	0f b6 44 24 20	 movzx	 eax, BYTE PTR ERA$[rsp]
  001eb	89 44 24 28	 mov	 DWORD PTR tv166[rsp], eax
  001ef	83 7c 24 28 57	 cmp	 DWORD PTR tv166[rsp], 87 ; 00000057H
  001f4	0f 87 83 00 00
	00		 ja	 $LN52@build_sens
  001fa	48 63 44 24 28	 movsxd	 rax, DWORD PTR tv166[rsp]
  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00206	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN55@build_sens[rcx+rax]
  0020e	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN56@build_sens[rcx+rax*4]
  00215	48 03 c1	 add	 rax, rcx
  00218	ff e0		 jmp	 rax
$LN26@build_sens:

; 4098 :     {
; 4099 :     case TAPE_ERA_00_UNSOLICITED_SENSE:
; 4100 :         break;

  0021a	e9 a6 00 00 00	 jmp	 $LN4@build_sens
$LN27@build_sens:
$LN28@build_sens:
$LN29@build_sens:
$LN30@build_sens:
$LN31@build_sens:
$LN32@build_sens:
$LN33@build_sens:
$LN34@build_sens:
$LN35@build_sens:
$LN36@build_sens:
$LN37@build_sens:
$LN38@build_sens:
$LN39@build_sens:
$LN40@build_sens:
$LN41@build_sens:
$LN42@build_sens:
$LN43@build_sens:
$LN44@build_sens:
$LN45@build_sens:

; 4101 :     case TAPE_ERA_24_LOAD_DISPLAY_CHECK:
; 4102 :     case TAPE_ERA_26_READ_OPPOSITE:
; 4103 :     case TAPE_ERA_27_COMMAND_REJECT:
; 4104 :     case TAPE_ERA_29_FUNCTION_INCOMPATIBLE:
; 4105 :     case TAPE_ERA_2A_UNSOL_ENVIRONMENTAL_DATA:
; 4106 :     case TAPE_ERA_2B_ENVIRONMENTAL_DATA_PRESENT:
; 4107 :     case TAPE_ERA_30_WRITE_PROTECTED:
; 4108 :     case TAPE_ERA_38_PHYSICAL_END_OF_TAPE:
; 4109 :     case TAPE_ERA_3A_DRIVE_SWITCHED_NOT_READY:
; 4110 :     case TAPE_ERA_43_DRIVE_NOT_READY:
; 4111 :     case TAPE_ERA_44_LOCATE_BLOCK_FAILED:
; 4112 :     case TAPE_ERA_45_DRIVE_ASSIGNED_ELSEWHERE:
; 4113 :     case TAPE_ERA_46_DRIVE_NOT_ONLINE:
; 4114 :     case TAPE_ERA_4E_MAX_BLOCKSIZE_EXCEEDED:
; 4115 :     case TAPE_ERA_50_BUFFERED_LOG_OVERFLOW:
; 4116 :     case TAPE_ERA_51_BUFFERED_LOG_END_OF_VOLUME:
; 4117 :     case TAPE_ERA_52_END_OF_VOLUME_COMPLETE:
; 4118 :     case TAPE_ERA_53_GLOBAL_COMMAND_INTERCEPT:
; 4119 :     case TAPE_ERA_57_GLOBAL_STATUS_INTERCEPT:
; 4120 :         /* OBR - NO LOG */
; 4121 :         dev->sense[2] |= TAPE_SNS2_NTP_LOG_CD0_NO_LOG;

  0021f	b8 01 00 00 00	 mov	 eax, 1
  00224	48 6b c0 02	 imul	 rax, rax, 2
  00228	b9 01 00 00 00	 mov	 ecx, 1
  0022d	48 6b c9 02	 imul	 rcx, rcx, 2
  00231	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00236	4c 8b 44 24 48	 mov	 r8, QWORD PTR dev$[rsp]
  0023b	41 0f b6 84 00
	64 03 00 00	 movzx	 eax, BYTE PTR [r8+rax+868]
  00244	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4122 :         break;

  0024b	eb 78		 jmp	 SHORT $LN4@build_sens
$LN46@build_sens:
$LN47@build_sens:
$LN48@build_sens:
$LN49@build_sens:
$LN50@build_sens:
$LN51@build_sens:

; 4123 :     case TAPE_ERA_21_DATA_STREAMING_NOT_OPER:
; 4124 :     case TAPE_ERA_33_LOAD_FAILURE:
; 4125 :     case TAPE_ERA_34_UNLOAD_FAILURE:
; 4126 :     case TAPE_ERA_48_UNSOL_INFORMATIONAL_DATA:
; 4127 :     case TAPE_ERA_4D_RESETTING_EVENT:
; 4128 :     case TAPE_ERA_54_TEMP_CHNL_INTERFACE_ERROR:
; 4129 :         /* OBR - TEMP */
; 4130 :         dev->sense[2] |= TAPE_SNS2_NTP_LOG_CD1_TEMP_OBR;

  0024d	b8 01 00 00 00	 mov	 eax, 1
  00252	48 6b c0 02	 imul	 rax, rax, 2
  00256	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0025b	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00263	83 c8 08	 or	 eax, 8
  00266	b9 01 00 00 00	 mov	 ecx, 1
  0026b	48 6b c9 02	 imul	 rcx, rcx, 2
  0026f	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00274	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4131 :         break;

  0027b	eb 48		 jmp	 SHORT $LN4@build_sens
$LN52@build_sens:

; 4132 :     default:
; 4133 :         /* OBR - NONE - PERMANENT */
; 4134 :         if ( ERA == TAPE_ERA_39_BACKWARD_AT_BOT && dev->blockid == 0 )

  0027d	0f b6 44 24 20	 movzx	 eax, BYTE PTR ERA$[rsp]
  00282	83 f8 39	 cmp	 eax, 57			; 00000039H
  00285	75 10		 jne	 SHORT $LN53@build_sens
  00287	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  0028c	83 b8 04 10 00
	00 00		 cmp	 DWORD PTR [rax+4100], 0
  00293	75 02		 jne	 SHORT $LN53@build_sens

; 4135 :             break;

  00295	eb 2e		 jmp	 SHORT $LN4@build_sens
$LN53@build_sens:

; 4136 :         dev->sense[2] |= TAPE_SNS2_NTP_LOG_CD2_PERM_OBR;

  00297	b8 01 00 00 00	 mov	 eax, 1
  0029c	48 6b c0 02	 imul	 rax, rax, 2
  002a0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  002a5	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  002ad	83 c8 10	 or	 eax, 16
  002b0	b9 01 00 00 00	 mov	 ecx, 1
  002b5	48 6b c9 02	 imul	 rcx, rcx, 2
  002b9	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  002be	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al
$LN4@build_sens:

; 4137 :         break;
; 4138 : 
; 4139 :     }
; 4140 : }

  002c5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  002c9	c3		 ret	 0
  002ca	66 90		 npad	 2
$LN58@build_sens:
  002cc	00 00 00 00	 DD	 $LN6@build_sens
  002d0	00 00 00 00	 DD	 $LN11@build_sens
  002d4	00 00 00 00	 DD	 $LN12@build_sens
  002d8	00 00 00 00	 DD	 $LN9@build_sens
  002dc	00 00 00 00	 DD	 $LN21@build_sens
  002e0	00 00 00 00	 DD	 $LN22@build_sens
  002e4	00 00 00 00	 DD	 $LN23@build_sens
  002e8	00 00 00 00	 DD	 $LN13@build_sens
  002ec	00 00 00 00	 DD	 $LN24@build_sens
  002f0	00 00 00 00	 DD	 $LN14@build_sens
  002f4	00 00 00 00	 DD	 $LN15@build_sens
  002f8	00 00 00 00	 DD	 $LN16@build_sens
  002fc	00 00 00 00	 DD	 $LN17@build_sens
  00300	00 00 00 00	 DD	 $LN10@build_sens
  00304	00 00 00 00	 DD	 $LN18@build_sens
  00308	00 00 00 00	 DD	 $LN19@build_sens
  0030c	00 00 00 00	 DD	 $LN20@build_sens
  00310	00 00 00 00	 DD	 $LN25@build_sens
$LN57@build_sens:
  00314	00		 DB	 0
  00315	11		 DB	 17
  00316	11		 DB	 17
  00317	11		 DB	 17
  00318	11		 DB	 17
  00319	11		 DB	 17
  0031a	11		 DB	 17
  0031b	11		 DB	 17
  0031c	11		 DB	 17
  0031d	11		 DB	 17
  0031e	11		 DB	 17
  0031f	11		 DB	 17
  00320	11		 DB	 17
  00321	11		 DB	 17
  00322	11		 DB	 17
  00323	11		 DB	 17
  00324	11		 DB	 17
  00325	11		 DB	 17
  00326	11		 DB	 17
  00327	11		 DB	 17
  00328	11		 DB	 17
  00329	11		 DB	 17
  0032a	11		 DB	 17
  0032b	11		 DB	 17
  0032c	11		 DB	 17
  0032d	11		 DB	 17
  0032e	11		 DB	 17
  0032f	11		 DB	 17
  00330	11		 DB	 17
  00331	11		 DB	 17
  00332	11		 DB	 17
  00333	11		 DB	 17
  00334	11		 DB	 17
  00335	01		 DB	 1
  00336	11		 DB	 17
  00337	11		 DB	 17
  00338	11		 DB	 17
  00339	11		 DB	 17
  0033a	11		 DB	 17
  0033b	11		 DB	 17
  0033c	11		 DB	 17
  0033d	11		 DB	 17
  0033e	02		 DB	 2
  0033f	03		 DB	 3
  00340	11		 DB	 17
  00341	11		 DB	 17
  00342	11		 DB	 17
  00343	11		 DB	 17
  00344	11		 DB	 17
  00345	11		 DB	 17
  00346	11		 DB	 17
  00347	04		 DB	 4
  00348	05		 DB	 5
  00349	11		 DB	 17
  0034a	11		 DB	 17
  0034b	11		 DB	 17
  0034c	11		 DB	 17
  0034d	11		 DB	 17
  0034e	06		 DB	 6
  0034f	11		 DB	 17
  00350	11		 DB	 17
  00351	11		 DB	 17
  00352	11		 DB	 17
  00353	11		 DB	 17
  00354	11		 DB	 17
  00355	11		 DB	 17
  00356	07		 DB	 7
  00357	08		 DB	 8
  00358	11		 DB	 17
  00359	11		 DB	 17
  0035a	11		 DB	 17
  0035b	11		 DB	 17
  0035c	09		 DB	 9
  0035d	11		 DB	 17
  0035e	11		 DB	 17
  0035f	11		 DB	 17
  00360	0a		 DB	 10
  00361	11		 DB	 17
  00362	11		 DB	 17
  00363	11		 DB	 17
  00364	0b		 DB	 11
  00365	0c		 DB	 12
  00366	0d		 DB	 13
  00367	0e		 DB	 14
  00368	0f		 DB	 15
  00369	11		 DB	 17
  0036a	11		 DB	 17
  0036b	10		 DB	 16
$LN56@build_sens:
  0036c	00 00 00 00	 DD	 $LN26@build_sens
  00370	00 00 00 00	 DD	 $LN46@build_sens
  00374	00 00 00 00	 DD	 $LN27@build_sens
  00378	00 00 00 00	 DD	 $LN28@build_sens
  0037c	00 00 00 00	 DD	 $LN29@build_sens
  00380	00 00 00 00	 DD	 $LN30@build_sens
  00384	00 00 00 00	 DD	 $LN31@build_sens
  00388	00 00 00 00	 DD	 $LN32@build_sens
  0038c	00 00 00 00	 DD	 $LN33@build_sens
  00390	00 00 00 00	 DD	 $LN47@build_sens
  00394	00 00 00 00	 DD	 $LN48@build_sens
  00398	00 00 00 00	 DD	 $LN34@build_sens
  0039c	00 00 00 00	 DD	 $LN35@build_sens
  003a0	00 00 00 00	 DD	 $LN36@build_sens
  003a4	00 00 00 00	 DD	 $LN37@build_sens
  003a8	00 00 00 00	 DD	 $LN38@build_sens
  003ac	00 00 00 00	 DD	 $LN39@build_sens
  003b0	00 00 00 00	 DD	 $LN49@build_sens
  003b4	00 00 00 00	 DD	 $LN50@build_sens
  003b8	00 00 00 00	 DD	 $LN40@build_sens
  003bc	00 00 00 00	 DD	 $LN41@build_sens
  003c0	00 00 00 00	 DD	 $LN42@build_sens
  003c4	00 00 00 00	 DD	 $LN43@build_sens
  003c8	00 00 00 00	 DD	 $LN44@build_sens
  003cc	00 00 00 00	 DD	 $LN51@build_sens
  003d0	00 00 00 00	 DD	 $LN45@build_sens
  003d4	00 00 00 00	 DD	 $LN52@build_sens
$LN55@build_sens:
  003d8	00		 DB	 0
  003d9	1a		 DB	 26
  003da	1a		 DB	 26
  003db	1a		 DB	 26
  003dc	1a		 DB	 26
  003dd	1a		 DB	 26
  003de	1a		 DB	 26
  003df	1a		 DB	 26
  003e0	1a		 DB	 26
  003e1	1a		 DB	 26
  003e2	1a		 DB	 26
  003e3	1a		 DB	 26
  003e4	1a		 DB	 26
  003e5	1a		 DB	 26
  003e6	1a		 DB	 26
  003e7	1a		 DB	 26
  003e8	1a		 DB	 26
  003e9	1a		 DB	 26
  003ea	1a		 DB	 26
  003eb	1a		 DB	 26
  003ec	1a		 DB	 26
  003ed	1a		 DB	 26
  003ee	1a		 DB	 26
  003ef	1a		 DB	 26
  003f0	1a		 DB	 26
  003f1	1a		 DB	 26
  003f2	1a		 DB	 26
  003f3	1a		 DB	 26
  003f4	1a		 DB	 26
  003f5	1a		 DB	 26
  003f6	1a		 DB	 26
  003f7	1a		 DB	 26
  003f8	1a		 DB	 26
  003f9	01		 DB	 1
  003fa	1a		 DB	 26
  003fb	1a		 DB	 26
  003fc	02		 DB	 2
  003fd	1a		 DB	 26
  003fe	03		 DB	 3
  003ff	04		 DB	 4
  00400	1a		 DB	 26
  00401	05		 DB	 5
  00402	06		 DB	 6
  00403	07		 DB	 7
  00404	1a		 DB	 26
  00405	1a		 DB	 26
  00406	1a		 DB	 26
  00407	1a		 DB	 26
  00408	08		 DB	 8
  00409	1a		 DB	 26
  0040a	1a		 DB	 26
  0040b	09		 DB	 9
  0040c	0a		 DB	 10
  0040d	1a		 DB	 26
  0040e	1a		 DB	 26
  0040f	1a		 DB	 26
  00410	0b		 DB	 11
  00411	1a		 DB	 26
  00412	0c		 DB	 12
  00413	1a		 DB	 26
  00414	1a		 DB	 26
  00415	1a		 DB	 26
  00416	1a		 DB	 26
  00417	1a		 DB	 26
  00418	1a		 DB	 26
  00419	1a		 DB	 26
  0041a	1a		 DB	 26
  0041b	0d		 DB	 13
  0041c	0e		 DB	 14
  0041d	0f		 DB	 15
  0041e	10		 DB	 16
  0041f	1a		 DB	 26
  00420	11		 DB	 17
  00421	1a		 DB	 26
  00422	1a		 DB	 26
  00423	1a		 DB	 26
  00424	1a		 DB	 26
  00425	12		 DB	 18
  00426	13		 DB	 19
  00427	1a		 DB	 26
  00428	14		 DB	 20
  00429	15		 DB	 21
  0042a	16		 DB	 22
  0042b	17		 DB	 23
  0042c	18		 DB	 24
  0042d	1a		 DB	 26
  0042e	1a		 DB	 26
  0042f	19		 DB	 25
build_sense_3590 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapeccws.c
_TEXT	SEGMENT
ERCode$ = 48
dev$ = 56
unitstat$ = 64
ccwcode$ = 72
build_sense_3490 PROC

; 4026 : {

$LN3:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 4027 :     // Until we know for sure that we have to do something different,
; 4028 :     // we should be able to safely use the 3480 sense function here...
; 4029 : 
; 4030 :     build_sense_3480_etal( ERCode, dev, unitstat, ccwcode );

  00017	44 0f b6 4c 24
	48		 movzx	 r9d, BYTE PTR ccwcode$[rsp]
  0001d	4c 8b 44 24 40	 mov	 r8, QWORD PTR unitstat$[rsp]
  00022	48 8b 54 24 38	 mov	 rdx, QWORD PTR dev$[rsp]
  00027	8b 4c 24 30	 mov	 ecx, DWORD PTR ERCode$[rsp]
  0002b	e8 00 00 00 00	 call	 build_sense_3480_etal

; 4031 : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
build_sense_3490 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapeccws.c
_TEXT	SEGMENT
sns4mat$ = 32
tv64 = 36
tv361 = 40
tv379 = 44
ERCode$ = 64
dev$ = 72
unitstat$ = 80
ccwcode$ = 88
build_sense_3480_etal PROC

; 3828 : {

$LN49:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	57		 push	 rdi
  00014	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 3829 : int sns4mat = TAPE_SNS7_FMT_20_3480;

  00018	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR sns4mat$[rsp], 32 ; 00000020H

; 3830 : 
; 3831 :     // NOTE: caller should have cleared sense area to zeros
; 3832 :     //       if this isn't a 'TAPE_BSENSE_STATUSONLY' call
; 3833 : 
; 3834 :     switch(ERCode)

  00020	8b 44 24 40	 mov	 eax, DWORD PTR ERCode$[rsp]
  00024	89 44 24 24	 mov	 DWORD PTR tv64[rsp], eax
  00028	83 7c 24 24 14	 cmp	 DWORD PTR tv64[rsp], 20
  0002d	0f 87 38 04 00
	00		 ja	 $LN26@build_sens
  00033	48 63 44 24 24	 movsxd	 rax, DWORD PTR tv64[rsp]
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0003f	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN48@build_sens[rcx+rax*4]
  00046	48 03 c1	 add	 rax, rcx
  00049	ff e0		 jmp	 rax
$LN4@build_sens:

; 3835 :     {
; 3836 :     case TAPE_BSENSE_TAPEUNLOADED:
; 3837 :         dev->sense[0] = TAPE_SNS0_INTVREQ;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	48 6b c0 00	 imul	 rax, rax, 0
  00054	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00059	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3838 :         dev->sense[3] = TAPE_ERA_43_DRIVE_NOT_READY; /* ERA 43 = Int Req */

  00061	b8 01 00 00 00	 mov	 eax, 1
  00066	48 6b c0 03	 imul	 rax, rax, 3
  0006a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0006f	c6 84 01 64 03
	00 00 43	 mov	 BYTE PTR [rcx+rax+868], 67 ; 00000043H

; 3839 :         *unitstat = CSW_UC;

  00077	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  0007c	c6 00 02	 mov	 BYTE PTR [rax], 2

; 3840 :         break;

  0007f	e9 1d 04 00 00	 jmp	 $LN2@build_sens
$LN5@build_sens:

; 3841 :     case TAPE_BSENSE_RUN_SUCCESS:        /* Not an error */
; 3842 :         /* NOT an error, But according to GA32-0219-02 2.1.2.2
; 3843 :            Rewind Unload always ends with with DE+UC on secondary status */
; 3844 :         /* FIXME! */
; 3845 :         /* Note that Initial status & Secondary statuses are merged here */
; 3846 :         /* when they should be presented separatly */
; 3847 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00084	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00089	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3848 :         dev->sense[0] = TAPE_SNS0_INTVREQ;

  0008c	b8 01 00 00 00	 mov	 eax, 1
  00091	48 6b c0 00	 imul	 rax, rax, 0
  00095	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0009a	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3849 :         dev->sense[3] = TAPE_ERA_2B_ENVIRONMENTAL_DATA_PRESENT;

  000a2	b8 01 00 00 00	 mov	 eax, 1
  000a7	48 6b c0 03	 imul	 rax, rax, 3
  000ab	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  000b0	c6 84 01 64 03
	00 00 2b	 mov	 BYTE PTR [rcx+rax+868], 43 ; 0000002bH

; 3850 :         sns4mat = TAPE_SNS7_FMT_22_3480_EOV_STATS;

  000b8	c7 44 24 20 22
	00 00 00	 mov	 DWORD PTR sns4mat$[rsp], 34 ; 00000022H

; 3851 :         break;

  000c0	e9 dc 03 00 00	 jmp	 $LN2@build_sens
$LN6@build_sens:

; 3852 :     case TAPE_BSENSE_TAPELOADFAIL:
; 3853 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  000c5	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  000ca	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3854 :         dev->sense[0] = TAPE_SNS0_INTVREQ|TAPE_SNS0_DEFUNITCK;

  000cd	b8 01 00 00 00	 mov	 eax, 1
  000d2	48 6b c0 00	 imul	 rax, rax, 0
  000d6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  000db	c6 84 01 64 03
	00 00 42	 mov	 BYTE PTR [rcx+rax+868], 66 ; 00000042H

; 3855 :         dev->sense[3] = TAPE_ERA_33_LOAD_FAILURE; /* ERA 33 = Load Failed */

  000e3	b8 01 00 00 00	 mov	 eax, 1
  000e8	48 6b c0 03	 imul	 rax, rax, 3
  000ec	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  000f1	c6 84 01 64 03
	00 00 33	 mov	 BYTE PTR [rcx+rax+868], 51 ; 00000033H

; 3856 :         break;

  000f9	e9 a3 03 00 00	 jmp	 $LN2@build_sens
$LN7@build_sens:

; 3857 :     case TAPE_BSENSE_READFAIL:
; 3858 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  000fe	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00103	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3859 :         dev->sense[0] = TAPE_SNS0_DATACHK;

  00106	b8 01 00 00 00	 mov	 eax, 1
  0010b	48 6b c0 00	 imul	 rax, rax, 0
  0010f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00114	c6 84 01 64 03
	00 00 08	 mov	 BYTE PTR [rcx+rax+868], 8

; 3860 :         dev->sense[3] = TAPE_ERA_23_READ_DATA_CHECK;

  0011c	b8 01 00 00 00	 mov	 eax, 1
  00121	48 6b c0 03	 imul	 rax, rax, 3
  00125	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0012a	c6 84 01 64 03
	00 00 23	 mov	 BYTE PTR [rcx+rax+868], 35 ; 00000023H

; 3861 :         break;

  00132	e9 6a 03 00 00	 jmp	 $LN2@build_sens
$LN8@build_sens:

; 3862 :     case TAPE_BSENSE_WRITEFAIL:
; 3863 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00137	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  0013c	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3864 :         dev->sense[0] = TAPE_SNS0_DATACHK;

  0013f	b8 01 00 00 00	 mov	 eax, 1
  00144	48 6b c0 00	 imul	 rax, rax, 0
  00148	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0014d	c6 84 01 64 03
	00 00 08	 mov	 BYTE PTR [rcx+rax+868], 8

; 3865 :         dev->sense[3] = TAPE_ERA_25_WRITE_DATA_CHECK;

  00155	b8 01 00 00 00	 mov	 eax, 1
  0015a	48 6b c0 03	 imul	 rax, rax, 3
  0015e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00163	c6 84 01 64 03
	00 00 25	 mov	 BYTE PTR [rcx+rax+868], 37 ; 00000025H

; 3866 :         break;

  0016b	e9 31 03 00 00	 jmp	 $LN2@build_sens
$LN9@build_sens:

; 3867 :     case TAPE_BSENSE_BADCOMMAND:
; 3868 :         *unitstat = CSW_UC;

  00170	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00175	c6 00 02	 mov	 BYTE PTR [rax], 2

; 3869 :         dev->sense[0] = TAPE_SNS0_CMDREJ;

  00178	b8 01 00 00 00	 mov	 eax, 1
  0017d	48 6b c0 00	 imul	 rax, rax, 0
  00181	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00186	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3870 :         dev->sense[3] = TAPE_ERA_27_COMMAND_REJECT;

  0018e	b8 01 00 00 00	 mov	 eax, 1
  00193	48 6b c0 03	 imul	 rax, rax, 3
  00197	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0019c	c6 84 01 64 03
	00 00 27	 mov	 BYTE PTR [rcx+rax+868], 39 ; 00000027H

; 3871 :         break;

  001a4	e9 f8 02 00 00	 jmp	 $LN2@build_sens
$LN10@build_sens:

; 3872 :     case TAPE_BSENSE_INCOMPAT:
; 3873 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  001a9	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  001ae	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3874 :         dev->sense[0] = TAPE_SNS0_CMDREJ;

  001b1	b8 01 00 00 00	 mov	 eax, 1
  001b6	48 6b c0 00	 imul	 rax, rax, 0
  001ba	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  001bf	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3875 :         dev->sense[3] = TAPE_ERA_29_FUNCTION_INCOMPATIBLE;

  001c7	b8 01 00 00 00	 mov	 eax, 1
  001cc	48 6b c0 03	 imul	 rax, rax, 3
  001d0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  001d5	c6 84 01 64 03
	00 00 29	 mov	 BYTE PTR [rcx+rax+868], 41 ; 00000029H

; 3876 :         break;

  001dd	e9 bf 02 00 00	 jmp	 $LN2@build_sens
$LN11@build_sens:

; 3877 :     case TAPE_BSENSE_WRITEPROTECT:
; 3878 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  001e2	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  001e7	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3879 :         dev->sense[0] = TAPE_SNS0_CMDREJ;

  001ea	b8 01 00 00 00	 mov	 eax, 1
  001ef	48 6b c0 00	 imul	 rax, rax, 0
  001f3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  001f8	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3880 :         dev->sense[3] = TAPE_ERA_30_WRITE_PROTECTED;

  00200	b8 01 00 00 00	 mov	 eax, 1
  00205	48 6b c0 03	 imul	 rax, rax, 3
  00209	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0020e	c6 84 01 64 03
	00 00 30	 mov	 BYTE PTR [rcx+rax+868], 48 ; 00000030H

; 3881 :         break;

  00216	e9 86 02 00 00	 jmp	 $LN2@build_sens
$LN12@build_sens:

; 3882 :     case TAPE_BSENSE_EMPTYTAPE:
; 3883 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  0021b	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00220	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3884 :         dev->sense[0] = TAPE_SNS0_DATACHK;

  00223	b8 01 00 00 00	 mov	 eax, 1
  00228	48 6b c0 00	 imul	 rax, rax, 0
  0022c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00231	c6 84 01 64 03
	00 00 08	 mov	 BYTE PTR [rcx+rax+868], 8

; 3885 :         dev->sense[3] = TAPE_ERA_31_TAPE_VOID;

  00239	b8 01 00 00 00	 mov	 eax, 1
  0023e	48 6b c0 03	 imul	 rax, rax, 3
  00242	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00247	c6 84 01 64 03
	00 00 31	 mov	 BYTE PTR [rcx+rax+868], 49 ; 00000031H

; 3886 :         break;

  0024f	e9 4d 02 00 00	 jmp	 $LN2@build_sens
$LN13@build_sens:

; 3887 :     case TAPE_BSENSE_ENDOFTAPE:
; 3888 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00254	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00259	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3889 :         dev->sense[0] = TAPE_SNS0_EQUIPCHK;

  0025c	b8 01 00 00 00	 mov	 eax, 1
  00261	48 6b c0 00	 imul	 rax, rax, 0
  00265	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0026a	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 3890 :         dev->sense[3] = TAPE_ERA_38_PHYSICAL_END_OF_TAPE;

  00272	b8 01 00 00 00	 mov	 eax, 1
  00277	48 6b c0 03	 imul	 rax, rax, 3
  0027b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00280	c6 84 01 64 03
	00 00 38	 mov	 BYTE PTR [rcx+rax+868], 56 ; 00000038H

; 3891 :         break;

  00288	e9 14 02 00 00	 jmp	 $LN2@build_sens
$LN14@build_sens:

; 3892 :     case TAPE_BSENSE_LOADPTERR:
; 3893 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  0028d	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00292	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3894 :         dev->sense[0] = 0;

  00295	b8 01 00 00 00	 mov	 eax, 1
  0029a	48 6b c0 00	 imul	 rax, rax, 0
  0029e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  002a3	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 3895 :         dev->sense[3] = TAPE_ERA_39_BACKWARD_AT_BOT;

  002ab	b8 01 00 00 00	 mov	 eax, 1
  002b0	48 6b c0 03	 imul	 rax, rax, 3
  002b4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  002b9	c6 84 01 64 03
	00 00 39	 mov	 BYTE PTR [rcx+rax+868], 57 ; 00000039H

; 3896 :         break;

  002c1	e9 db 01 00 00	 jmp	 $LN2@build_sens
$LN15@build_sens:

; 3897 :     case TAPE_BSENSE_FENCED:
; 3898 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  002c6	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  002cb	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3899 :         dev->sense[0] = TAPE_SNS0_EQUIPCHK|TAPE_SNS0_DEFUNITCK; /* Deffered UC */

  002ce	b8 01 00 00 00	 mov	 eax, 1
  002d3	48 6b c0 00	 imul	 rax, rax, 0
  002d7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  002dc	c6 84 01 64 03
	00 00 12	 mov	 BYTE PTR [rcx+rax+868], 18

; 3900 :         dev->sense[3] = TAPE_ERA_47_VOLUME_FENCED;

  002e4	b8 01 00 00 00	 mov	 eax, 1
  002e9	48 6b c0 03	 imul	 rax, rax, 3
  002ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  002f2	c6 84 01 64 03
	00 00 47	 mov	 BYTE PTR [rcx+rax+868], 71 ; 00000047H

; 3901 :         break;

  002fa	e9 a2 01 00 00	 jmp	 $LN2@build_sens
$LN16@build_sens:

; 3902 :     case TAPE_BSENSE_BADALGORITHM:
; 3903 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  002ff	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00304	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3904 :         dev->sense[0] = TAPE_SNS0_EQUIPCHK;

  00307	b8 01 00 00 00	 mov	 eax, 1
  0030c	48 6b c0 00	 imul	 rax, rax, 0
  00310	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00315	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 3905 :         if (dev->devtype==0x3480)

  0031d	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  00322	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00326	3d 80 34 00 00	 cmp	 eax, 13440		; 00003480H
  0032b	75 18		 jne	 SHORT $LN17@build_sens

; 3906 :         {
; 3907 :             dev->sense[3] = TAPE_ERA_47_VOLUME_FENCED;   // (volume fenced)

  0032d	b8 01 00 00 00	 mov	 eax, 1
  00332	48 6b c0 03	 imul	 rax, rax, 3
  00336	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0033b	c6 84 01 64 03
	00 00 47	 mov	 BYTE PTR [rcx+rax+868], 71 ; 00000047H

; 3908 :         }

  00343	eb 16		 jmp	 SHORT $LN18@build_sens
$LN17@build_sens:

; 3909 :         else // 3490, 3590, etc.
; 3910 :         {
; 3911 :             dev->sense[3] = TAPE_ERA_5E_COMPACT_ALGORITHM_INCOMPAT;   // (bad compaction algorithm)

  00345	b8 01 00 00 00	 mov	 eax, 1
  0034a	48 6b c0 03	 imul	 rax, rax, 3
  0034e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00353	c6 84 01 64 03
	00 00 5e	 mov	 BYTE PTR [rcx+rax+868], 94 ; 0000005eH
$LN18@build_sens:

; 3912 :         }
; 3913 :         break;

  0035b	e9 41 01 00 00	 jmp	 $LN2@build_sens
$LN19@build_sens:

; 3914 :     case TAPE_BSENSE_LOCATEERR:
; 3915 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00360	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00365	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3916 :         dev->sense[0] = TAPE_SNS0_EQUIPCHK;

  00368	b8 01 00 00 00	 mov	 eax, 1
  0036d	48 6b c0 00	 imul	 rax, rax, 0
  00371	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00376	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 3917 :         dev->sense[3] = TAPE_ERA_44_LOCATE_BLOCK_FAILED;

  0037e	b8 01 00 00 00	 mov	 eax, 1
  00383	48 6b c0 03	 imul	 rax, rax, 3
  00387	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0038c	c6 84 01 64 03
	00 00 44	 mov	 BYTE PTR [rcx+rax+868], 68 ; 00000044H

; 3918 :         break;

  00394	e9 08 01 00 00	 jmp	 $LN2@build_sens
$LN20@build_sens:

; 3919 :     case TAPE_BSENSE_BLOCKSHORT:
; 3920 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00399	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  0039e	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3921 :         dev->sense[0] = TAPE_SNS0_EQUIPCHK;

  003a1	b8 01 00 00 00	 mov	 eax, 1
  003a6	48 6b c0 00	 imul	 rax, rax, 0
  003aa	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  003af	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 3922 :         dev->sense[3] = TAPE_ERA_36_END_OF_DATA;

  003b7	b8 01 00 00 00	 mov	 eax, 1
  003bc	48 6b c0 03	 imul	 rax, rax, 3
  003c0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  003c5	c6 84 01 64 03
	00 00 36	 mov	 BYTE PTR [rcx+rax+868], 54 ; 00000036H

; 3923 :         break;

  003cd	e9 cf 00 00 00	 jmp	 $LN2@build_sens
$LN21@build_sens:

; 3924 :     case TAPE_BSENSE_ITFERROR:
; 3925 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  003d2	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  003d7	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3926 :         dev->sense[0] = TAPE_SNS0_EQUIPCHK;

  003da	b8 01 00 00 00	 mov	 eax, 1
  003df	48 6b c0 00	 imul	 rax, rax, 0
  003e3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  003e8	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 3927 :         dev->sense[3] = TAPE_ERA_22_PATH_EQUIPMENT_CHECK;

  003f0	b8 01 00 00 00	 mov	 eax, 1
  003f5	48 6b c0 03	 imul	 rax, rax, 3
  003f9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  003fe	c6 84 01 64 03
	00 00 22	 mov	 BYTE PTR [rcx+rax+868], 34 ; 00000022H

; 3928 :         break;

  00406	e9 96 00 00 00	 jmp	 $LN2@build_sens
$LN22@build_sens:

; 3929 :     case TAPE_BSENSE_REWINDFAILED:
; 3930 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  0040b	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00410	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3931 :         dev->sense[0] = TAPE_SNS0_EQUIPCHK;

  00413	b8 01 00 00 00	 mov	 eax, 1
  00418	48 6b c0 00	 imul	 rax, rax, 0
  0041c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00421	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 3932 :         dev->sense[3] = TAPE_ERA_2C_PERMANENT_EQUIPMENT_CHECK; /* Generic Equipment Malfunction ERP code */

  00429	b8 01 00 00 00	 mov	 eax, 1
  0042e	48 6b c0 03	 imul	 rax, rax, 3
  00432	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00437	c6 84 01 64 03
	00 00 2c	 mov	 BYTE PTR [rcx+rax+868], 44 ; 0000002cH

; 3933 :         break;

  0043f	eb 60		 jmp	 SHORT $LN2@build_sens
$LN23@build_sens:

; 3934 :     case TAPE_BSENSE_READTM:
; 3935 :         *unitstat = CSW_CE|CSW_DE|CSW_UX;

  00441	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00446	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3936 :         break;

  00449	eb 56		 jmp	 SHORT $LN2@build_sens
$LN24@build_sens:

; 3937 :     case TAPE_BSENSE_UNSOLICITED:
; 3938 :         *unitstat = CSW_CE|CSW_DE;

  0044b	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00450	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3939 :         dev->sense[3] = TAPE_ERA_00_UNSOLICITED_SENSE;

  00453	b8 01 00 00 00	 mov	 eax, 1
  00458	48 6b c0 03	 imul	 rax, rax, 3
  0045c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00461	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 3940 :         break;

  00469	eb 36		 jmp	 SHORT $LN2@build_sens
$LN25@build_sens:
$LN26@build_sens:

; 3941 :     case TAPE_BSENSE_STATUSONLY:
; 3942 :     default:
; 3943 :         if ( ccwcode == 0x24 )      // READ BUFFERED LOG

  0046b	0f b6 44 24 58	 movzx	 eax, BYTE PTR ccwcode$[rsp]
  00470	83 f8 24	 cmp	 eax, 36			; 00000024H
  00473	75 24		 jne	 SHORT $LN27@build_sens

; 3944 :         {
; 3945 :             if ( dev->tdparms.compress == 0 )

  00475	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  0047a	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  00480	83 e0 01	 and	 eax, 1
  00483	85 c0		 test	 eax, eax
  00485	75 0a		 jne	 SHORT $LN28@build_sens

; 3946 :                 sns4mat = TAPE_SNS7_FMT_21_3480_READ_BUF_LOG;

  00487	c7 44 24 20 21
	00 00 00	 mov	 DWORD PTR sns4mat$[rsp], 33 ; 00000021H
  0048f	eb 08		 jmp	 SHORT $LN29@build_sens
$LN28@build_sens:

; 3947 :             else
; 3948 :                 sns4mat = TAPE_SNS7_FMT_30_3480_READ_BUF_LOG;

  00491	c7 44 24 20 30
	00 00 00	 mov	 DWORD PTR sns4mat$[rsp], 48 ; 00000030H
$LN29@build_sens:
$LN27@build_sens:

; 3949 :         }
; 3950 :         *unitstat = CSW_CE|CSW_DE;

  00499	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  0049e	c6 00 0c	 mov	 BYTE PTR [rax], 12
$LN2@build_sens:

; 3951 :         break;
; 3952 :     } // end switch(ERCode)
; 3953 : 
; 3954 :     if (TAPE_BSENSE_STATUSONLY == ERCode)

  004a1	83 7c 24 40 0d	 cmp	 DWORD PTR ERCode$[rsp], 13
  004a6	75 05		 jne	 SHORT $LN30@build_sens

; 3955 :         return; // (mission accomplished)

  004a8	e9 0d 04 00 00	 jmp	 $LN1@build_sens
$LN30@build_sens:

; 3956 : 
; 3957 :     /* Fill in the common sense information */
; 3958 : 
; 3959 :     if ( sns4mat == TAPE_SNS7_FMT_20_3480              ||
; 3960 :          sns4mat == TAPE_SNS7_FMT_21_3480_READ_BUF_LOG ||
; 3961 :          sns4mat == TAPE_SNS7_FMT_22_3480_EOV_STATS    ||

  004ad	83 7c 24 20 20	 cmp	 DWORD PTR sns4mat$[rsp], 32 ; 00000020H
  004b2	74 19		 je	 SHORT $LN32@build_sens
  004b4	83 7c 24 20 21	 cmp	 DWORD PTR sns4mat$[rsp], 33 ; 00000021H
  004b9	74 12		 je	 SHORT $LN32@build_sens
  004bb	83 7c 24 20 22	 cmp	 DWORD PTR sns4mat$[rsp], 34 ; 00000022H
  004c0	74 0b		 je	 SHORT $LN32@build_sens
  004c2	83 7c 24 20 30	 cmp	 DWORD PTR sns4mat$[rsp], 48 ; 00000030H
  004c7	0f 85 c0 01 00
	00		 jne	 $LN31@build_sens
$LN32@build_sens:

; 3962 :          sns4mat == TAPE_SNS7_FMT_30_3480_READ_BUF_LOG )
; 3963 :     {
; 3964 :         dev->sense[7] = sns4mat;

  004cd	b8 01 00 00 00	 mov	 eax, 1
  004d2	48 6b c0 07	 imul	 rax, rax, 7
  004d6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  004db	0f b6 54 24 20	 movzx	 edx, BYTE PTR sns4mat$[rsp]
  004e0	88 94 01 64 03
	00 00		 mov	 BYTE PTR [rcx+rax+868], dl

; 3965 :         memset(&dev->sense[8], 0,31-8);

  004e7	b8 01 00 00 00	 mov	 eax, 1
  004ec	48 6b c0 08	 imul	 rax, rax, 8
  004f0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  004f5	48 8d 84 01 64
	03 00 00	 lea	 rax, QWORD PTR [rcx+rax+868]
  004fd	48 8b f8	 mov	 rdi, rax
  00500	33 c0		 xor	 eax, eax
  00502	b9 17 00 00 00	 mov	 ecx, 23
  00507	f3 aa		 rep stosb

; 3966 : 
; 3967 :         if ( sns4mat == TAPE_SNS7_FMT_20_3480 )

  00509	83 7c 24 20 20	 cmp	 DWORD PTR sns4mat$[rsp], 32 ; 00000020H
  0050e	75 55		 jne	 SHORT $LN33@build_sens

; 3968 :         {
; 3969 :             dev->sense[25] = 0x06;                  // IDRC Installed & Upgraded Buffer

  00510	b8 01 00 00 00	 mov	 eax, 1
  00515	48 6b c0 19	 imul	 rax, rax, 25
  00519	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0051e	c6 84 01 64 03
	00 00 06	 mov	 BYTE PTR [rcx+rax+868], 6

; 3970 :             if ( sysblk.tamdir != NULL )            // is AUTOLOADER ENABLED

  00526	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0052d	48 83 b8 80 12
	00 00 00	 cmp	 QWORD PTR [rax+4736], 0
  00535	74 2e		 je	 SHORT $LN34@build_sens

; 3971 :             {
; 3972 :                 dev->sense[25] |= 0x01;             // ACL is installed

  00537	b8 01 00 00 00	 mov	 eax, 1
  0053c	48 6b c0 19	 imul	 rax, rax, 25
  00540	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00545	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  0054d	83 c8 01	 or	 eax, 1
  00550	b9 01 00 00 00	 mov	 ecx, 1
  00555	48 6b c9 19	 imul	 rcx, rcx, 25
  00559	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0055e	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al
$LN34@build_sens:
$LN33@build_sens:

; 3973 :             }
; 3974 :         }
; 3975 : 
; 3976 :         if ( dev->devtype == 0x3480 )

  00565	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  0056a	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  0056e	3d 80 34 00 00	 cmp	 eax, 13440		; 00003480H
  00573	75 18		 jne	 SHORT $LN35@build_sens

; 3977 :         {
; 3978 :             dev->sense[27] = 0xf0;                  // indicate 3480-A22/B22

  00575	b8 01 00 00 00	 mov	 eax, 1
  0057a	48 6b c0 1b	 imul	 rax, rax, 27
  0057e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00583	c6 84 01 64 03
	00 00 f0	 mov	 BYTE PTR [rcx+rax+868], 240 ; 000000f0H

; 3979 :         }

  0058b	eb 4e		 jmp	 SHORT $LN36@build_sens
$LN35@build_sens:

; 3980 :         else if ( dev->devtype==0x3490 )

  0058d	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  00592	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00596	3d 90 34 00 00	 cmp	 eax, 13456		; 00003490H
  0059b	75 18		 jne	 SHORT $LN37@build_sens

; 3981 :         {
; 3982 :             dev->sense[27] = 0xe0;                  // indicate 3490-D31/D32

  0059d	b8 01 00 00 00	 mov	 eax, 1
  005a2	48 6b c0 1b	 imul	 rax, rax, 27
  005a6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  005ab	c6 84 01 64 03
	00 00 e0	 mov	 BYTE PTR [rcx+rax+868], 224 ; 000000e0H

; 3983 :         }

  005b3	eb 26		 jmp	 SHORT $LN38@build_sens
$LN37@build_sens:

; 3984 :         else if ( dev->devtype==0x3590 )

  005b5	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  005ba	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  005be	3d 90 35 00 00	 cmp	 eax, 13712		; 00003590H
  005c3	75 16		 jne	 SHORT $LN39@build_sens

; 3985 :         {
; 3986 :             dev->sense[27] = 0xe0;                  // indicate same as 3490 for now

  005c5	b8 01 00 00 00	 mov	 eax, 1
  005ca	48 6b c0 1b	 imul	 rax, rax, 27
  005ce	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  005d3	c6 84 01 64 03
	00 00 e0	 mov	 BYTE PTR [rcx+rax+868], 224 ; 000000e0H
$LN39@build_sens:
$LN38@build_sens:
$LN36@build_sens:

; 3987 :         }
; 3988 : 
; 3989 :         /* create a serial Number */
; 3990 :         dev->sense[27] |= 0x0C;

  005db	b8 01 00 00 00	 mov	 eax, 1
  005e0	48 6b c0 1b	 imul	 rax, rax, 27
  005e4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  005e9	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  005f1	83 c8 0c	 or	 eax, 12
  005f4	b9 01 00 00 00	 mov	 ecx, 1
  005f9	48 6b c9 1b	 imul	 rcx, rcx, 27
  005fd	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00602	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3991 :         dev->sense[28] = (BYTE)( ( dev->devnum >> 12 ) & 0xFF );

  00609	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  0060e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00612	c1 f8 0c	 sar	 eax, 12
  00615	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0061a	b9 01 00 00 00	 mov	 ecx, 1
  0061f	48 6b c9 1c	 imul	 rcx, rcx, 28
  00623	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00628	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3992 :         dev->sense[29] = (BYTE)( ( dev->devnum >>  4 ) & 0xFF );

  0062f	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  00634	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00638	c1 f8 04	 sar	 eax, 4
  0063b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00640	b9 01 00 00 00	 mov	 ecx, 1
  00645	48 6b c9 1d	 imul	 rcx, rcx, 29
  00649	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0064e	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3993 : 
; 3994 :         dev->sense[30] = (BYTE)( dev->devnum & 0x000F ) | ( (BYTE)((BYTE)( dev->devnum & 0x000F )) << 4 );

  00655	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  0065a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0065e	83 e0 0f	 and	 eax, 15
  00661	0f b6 c0	 movzx	 eax, al
  00664	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00669	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0066d	83 e1 0f	 and	 ecx, 15
  00670	0f b6 c9	 movzx	 ecx, cl
  00673	c1 e1 04	 shl	 ecx, 4
  00676	0b c1		 or	 eax, ecx
  00678	b9 01 00 00 00	 mov	 ecx, 1
  0067d	48 6b c9 1e	 imul	 rcx, rcx, 30
  00681	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00686	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al
$LN31@build_sens:

; 3995 :     }
; 3996 : 
; 3997 :     if (0
; 3998 :         || strcmp( dev->filename, TAPE_UNLOADED ) == 0
; 3999 :         || (1

  0068d	33 c0		 xor	 eax, eax
  0068f	85 c0		 test	 eax, eax
  00691	75 55		 jne	 SHORT $LN42@build_sens
  00693	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  00698	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0069e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170093
  006a5	48 8b c8	 mov	 rcx, rax
  006a8	e8 00 00 00 00	 call	 strcmp
  006ad	85 c0		 test	 eax, eax
  006af	74 37		 je	 SHORT $LN42@build_sens
  006b1	33 c0		 xor	 eax, eax
  006b3	83 f8 01	 cmp	 eax, 1
  006b6	0f 84 8d 00 00
	00		 je	 $LN40@build_sens
  006bc	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  006c1	48 83 b8 e0 10
	00 00 00	 cmp	 QWORD PTR [rax+4320], 0
  006c9	74 7e		 je	 SHORT $LN40@build_sens
  006cb	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  006d0	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  006d7	45 33 c0	 xor	 r8d, r8d
  006da	33 d2		 xor	 edx, edx
  006dc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  006e1	ff 50 70	 call	 QWORD PTR [rax+112]
  006e4	85 c0		 test	 eax, eax
  006e6	75 61		 jne	 SHORT $LN40@build_sens
$LN42@build_sens:

; 4000 :             &&  dev->tmh
; 4001 :             && !dev->tmh->tapeloaded( dev, NULL, 0 )
; 4002 :            )
; 4003 :     )
; 4004 :     {
; 4005 :         dev->sense[0] |= TAPE_SNS0_INTVREQ;

  006e8	b8 01 00 00 00	 mov	 eax, 1
  006ed	48 6b c0 00	 imul	 rax, rax, 0
  006f1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  006f6	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  006fe	83 c8 40	 or	 eax, 64			; 00000040H
  00701	b9 01 00 00 00	 mov	 ecx, 1
  00706	48 6b c9 00	 imul	 rcx, rcx, 0
  0070a	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0070f	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4006 :         dev->sense[1] |= TAPE_SNS1_FILEPROT;

  00716	b8 01 00 00 00	 mov	 eax, 1
  0071b	48 6b c0 01	 imul	 rax, rax, 1
  0071f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00724	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  0072c	83 c8 02	 or	 eax, 2
  0072f	b9 01 00 00 00	 mov	 ecx, 1
  00734	48 6b c9 01	 imul	 rcx, rcx, 1
  00738	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0073d	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4007 :     }

  00744	e9 15 01 00 00	 jmp	 $LN41@build_sens
$LN40@build_sens:

; 4008 :     else
; 4009 :     {
; 4010 :         dev->sense[0] &= ~TAPE_SNS0_INTVREQ;

  00749	b8 01 00 00 00	 mov	 eax, 1
  0074e	48 6b c0 00	 imul	 rax, rax, 0
  00752	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00757	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  0075f	83 e0 bf	 and	 eax, -65		; ffffffffffffffbfH
  00762	b9 01 00 00 00	 mov	 ecx, 1
  00767	48 6b c9 00	 imul	 rcx, rcx, 0
  0076b	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00770	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4011 :         dev->sense[1] &= ~(TAPE_SNS1_BOT|TAPE_SNS1_FILEPROT);

  00777	b8 01 00 00 00	 mov	 eax, 1
  0077c	48 6b c0 01	 imul	 rax, rax, 1
  00780	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00785	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  0078d	83 e0 f5	 and	 eax, -11
  00790	b9 01 00 00 00	 mov	 ecx, 1
  00795	48 6b c9 01	 imul	 rcx, rcx, 1
  00799	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0079e	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4012 :         dev->sense[1] |= IsAtLoadPoint( dev ) ? TAPE_SNS1_BOT : 0;

  007a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  007aa	e8 00 00 00 00	 call	 IsAtLoadPoint
  007af	85 c0		 test	 eax, eax
  007b1	74 0a		 je	 SHORT $LN44@build_sens
  007b3	c7 44 24 28 08
	00 00 00	 mov	 DWORD PTR tv361[rsp], 8
  007bb	eb 08		 jmp	 SHORT $LN45@build_sens
$LN44@build_sens:
  007bd	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv361[rsp], 0
$LN45@build_sens:
  007c5	b8 01 00 00 00	 mov	 eax, 1
  007ca	48 6b c0 01	 imul	 rax, rax, 1
  007ce	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  007d3	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  007db	0b 44 24 28	 or	 eax, DWORD PTR tv361[rsp]
  007df	b9 01 00 00 00	 mov	 ecx, 1
  007e4	48 6b c9 01	 imul	 rcx, rcx, 1
  007e8	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  007ed	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4013 :         dev->sense[1] |= dev->readonly || dev->tdparms.logical_readonly ?

  007f4	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  007f9	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  007ff	d1 e8		 shr	 eax, 1
  00801	83 e0 01	 and	 eax, 1
  00804	85 c0		 test	 eax, eax
  00806	75 1f		 jne	 SHORT $LN46@build_sens
  00808	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  0080d	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  00813	c1 e8 0b	 shr	 eax, 11
  00816	83 e0 01	 and	 eax, 1
  00819	85 c0		 test	 eax, eax
  0081b	75 0a		 jne	 SHORT $LN46@build_sens
  0081d	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv379[rsp], 0
  00825	eb 08		 jmp	 SHORT $LN47@build_sens
$LN46@build_sens:
  00827	c7 44 24 2c 02
	00 00 00	 mov	 DWORD PTR tv379[rsp], 2
$LN47@build_sens:
  0082f	b8 01 00 00 00	 mov	 eax, 1
  00834	48 6b c0 01	 imul	 rax, rax, 1
  00838	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0083d	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00845	0b 44 24 2c	 or	 eax, DWORD PTR tv379[rsp]
  00849	b9 01 00 00 00	 mov	 ecx, 1
  0084e	48 6b c9 01	 imul	 rcx, rcx, 1
  00852	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00857	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al
$LN41@build_sens:

; 4014 :             TAPE_SNS1_FILEPROT : 0;
; 4015 :     }
; 4016 : 
; 4017 :     dev->sense[1] |= TAPE_SNS1_ONLINE;

  0085e	b8 01 00 00 00	 mov	 eax, 1
  00863	48 6b c0 01	 imul	 rax, rax, 1
  00867	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0086c	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00874	83 c8 40	 or	 eax, 64			; 00000040H
  00877	b9 01 00 00 00	 mov	 ecx, 1
  0087c	48 6b c9 01	 imul	 rcx, rcx, 1
  00880	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00885	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 4018 :     dev->sense[2] |= TAPE_SNS2_REPORTING_CHAN_A;

  0088c	b8 01 00 00 00	 mov	 eax, 1
  00891	48 6b c0 02	 imul	 rax, rax, 2
  00895	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0089a	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  008a2	83 c8 20	 or	 eax, 32			; 00000020H
  008a5	b9 01 00 00 00	 mov	 ecx, 1
  008aa	48 6b c9 02	 imul	 rcx, rcx, 2
  008ae	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  008b3	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al
$LN1@build_sens:

; 4019 : 
; 4020 : } /* end function build_sense_3480_etal */

  008ba	48 83 c4 30	 add	 rsp, 48			; 00000030H
  008be	5f		 pop	 rdi
  008bf	c3		 ret	 0
$LN48@build_sens:
  008c0	00 00 00 00	 DD	 $LN4@build_sens
  008c4	00 00 00 00	 DD	 $LN6@build_sens
  008c8	00 00 00 00	 DD	 $LN7@build_sens
  008cc	00 00 00 00	 DD	 $LN8@build_sens
  008d0	00 00 00 00	 DD	 $LN9@build_sens
  008d4	00 00 00 00	 DD	 $LN10@build_sens
  008d8	00 00 00 00	 DD	 $LN11@build_sens
  008dc	00 00 00 00	 DD	 $LN12@build_sens
  008e0	00 00 00 00	 DD	 $LN13@build_sens
  008e4	00 00 00 00	 DD	 $LN14@build_sens
  008e8	00 00 00 00	 DD	 $LN15@build_sens
  008ec	00 00 00 00	 DD	 $LN16@build_sens
  008f0	00 00 00 00	 DD	 $LN5@build_sens
  008f4	00 00 00 00	 DD	 $LN25@build_sens
  008f8	00 00 00 00	 DD	 $LN19@build_sens
  008fc	00 00 00 00	 DD	 $LN23@build_sens
  00900	00 00 00 00	 DD	 $LN26@build_sens
  00904	00 00 00 00	 DD	 $LN20@build_sens
  00908	00 00 00 00	 DD	 $LN21@build_sens
  0090c	00 00 00 00	 DD	 $LN22@build_sens
  00910	00 00 00 00	 DD	 $LN24@build_sens
build_sense_3480_etal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapeccws.c
_TEXT	SEGMENT
tv65 = 32
tv217 = 36
tv235 = 40
ERCode$ = 64
dev$ = 72
unitstat$ = 80
ccwcode$ = 88
build_sense_3410_3420 PROC

; 3679 : {

$LN38:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@build_sens:

; 3680 :     // NOTE: caller should have cleared sense area to zeros
; 3681 :     //       if this isn't a 'TAPE_BSENSE_STATUSONLY' call
; 3682 : 
; 3683 :     UNREFERENCED(ccwcode);

  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@build_sens

; 3684 : 
; 3685 :     switch(ERCode)

  0001d	8b 44 24 40	 mov	 eax, DWORD PTR ERCode$[rsp]
  00021	89 44 24 20	 mov	 DWORD PTR tv65[rsp], eax
  00025	83 7c 24 20 14	 cmp	 DWORD PTR tv65[rsp], 20
  0002a	0f 87 2c 02 00
	00		 ja	 $LN5@build_sens
  00030	48 63 44 24 20	 movsxd	 rax, DWORD PTR tv65[rsp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0003c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN37@build_sens[rcx+rax*4]
  00043	48 03 c1	 add	 rax, rcx
  00046	ff e0		 jmp	 rax
$LN7@build_sens:

; 3686 :     {
; 3687 :     case TAPE_BSENSE_TAPEUNLOADED:
; 3688 :         *unitstat = CSW_UC;

  00048	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  0004d	c6 00 02	 mov	 BYTE PTR [rax], 2

; 3689 :         dev->sense[0] = SENSE_IR;

  00050	b8 01 00 00 00	 mov	 eax, 1
  00055	48 6b c0 00	 imul	 rax, rax, 0
  00059	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0005e	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3690 :         dev->sense[1] = SENSE1_TAPE_TUB;

  00066	b8 01 00 00 00	 mov	 eax, 1
  0006b	48 6b c0 01	 imul	 rax, rax, 1
  0006f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00074	c6 84 01 64 03
	00 00 20	 mov	 BYTE PTR [rcx+rax+868], 32 ; 00000020H

; 3691 :         break;

  0007c	e9 db 01 00 00	 jmp	 $LN5@build_sens
$LN8@build_sens:

; 3692 :     case TAPE_BSENSE_RUN_SUCCESS: /* RewUnld op */
; 3693 :         /* FIXME : CE Should have been presented before */
; 3694 :         /*         Same as for 348x drives */
; 3695 :         *unitstat = CSW_CE | CSW_UC | CSW_DE | CSW_CUE;

  00081	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00086	c6 00 2e	 mov	 BYTE PTR [rax], 46	; 0000002eH

; 3696 :         /*
; 3697 :         *unitstat = CSW_UC | CSW_DE | CSW_CUE;
; 3698 :         */
; 3699 :         dev->sense[0] = SENSE_IR;

  00089	b8 01 00 00 00	 mov	 eax, 1
  0008e	48 6b c0 00	 imul	 rax, rax, 0
  00092	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00097	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 3700 :         dev->sense[1] = SENSE1_TAPE_TUB;

  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	48 6b c0 01	 imul	 rax, rax, 1
  000a8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  000ad	c6 84 01 64 03
	00 00 20	 mov	 BYTE PTR [rcx+rax+868], 32 ; 00000020H

; 3701 :         break;

  000b5	e9 a2 01 00 00	 jmp	 $LN5@build_sens
$LN9@build_sens:
$LN10@build_sens:
$LN11@build_sens:
$LN12@build_sens:
$LN13@build_sens:
$LN14@build_sens:
$LN15@build_sens:

; 3702 :     case TAPE_BSENSE_REWINDFAILED:
; 3703 :     case TAPE_BSENSE_FENCED:
; 3704 :     case TAPE_BSENSE_EMPTYTAPE:
; 3705 :     case TAPE_BSENSE_ENDOFTAPE:
; 3706 :     case TAPE_BSENSE_BLOCKSHORT:
; 3707 :         /* On 3411/3420 the tape runs off the reel in that case */
; 3708 :         /* this will cause pressure loss in both columns */
; 3709 :     case TAPE_BSENSE_LOCATEERR:
; 3710 :         /* Locate error: This is more like improperly formatted tape */
; 3711 :         /* i.e. the tape broke inside the drive                       */
; 3712 :         /* So EC instead of DC                                        */
; 3713 :     case TAPE_BSENSE_TAPELOADFAIL:
; 3714 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  000ba	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  000bf	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3715 :         dev->sense[0] = SENSE_EC;

  000c2	b8 01 00 00 00	 mov	 eax, 1
  000c7	48 6b c0 00	 imul	 rax, rax, 0
  000cb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  000d0	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 3716 :         dev->sense[1] = SENSE1_TAPE_TUB;

  000d8	b8 01 00 00 00	 mov	 eax, 1
  000dd	48 6b c0 01	 imul	 rax, rax, 1
  000e1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  000e6	c6 84 01 64 03
	00 00 20	 mov	 BYTE PTR [rcx+rax+868], 32 ; 00000020H

; 3717 :         dev->sense[7] = 0x60;

  000ee	b8 01 00 00 00	 mov	 eax, 1
  000f3	48 6b c0 07	 imul	 rax, rax, 7
  000f7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  000fc	c6 84 01 64 03
	00 00 60	 mov	 BYTE PTR [rcx+rax+868], 96 ; 00000060H

; 3718 :         break;

  00104	e9 53 01 00 00	 jmp	 $LN5@build_sens
$LN16@build_sens:

; 3719 :     case TAPE_BSENSE_ITFERROR:
; 3720 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00109	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  0010e	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3721 :         dev->sense[0] = SENSE_EC;

  00111	b8 01 00 00 00	 mov	 eax, 1
  00116	48 6b c0 00	 imul	 rax, rax, 0
  0011a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0011f	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 3722 :         dev->sense[1] = SENSE1_TAPE_TUB;

  00127	b8 01 00 00 00	 mov	 eax, 1
  0012c	48 6b c0 01	 imul	 rax, rax, 1
  00130	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00135	c6 84 01 64 03
	00 00 20	 mov	 BYTE PTR [rcx+rax+868], 32 ; 00000020H

; 3723 :         dev->sense[4] = 0x80; /* Tape Unit Reject */

  0013d	b8 01 00 00 00	 mov	 eax, 1
  00142	48 6b c0 04	 imul	 rax, rax, 4
  00146	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0014b	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3724 :         break;

  00153	e9 04 01 00 00	 jmp	 $LN5@build_sens
$LN17@build_sens:
$LN18@build_sens:

; 3725 :     case TAPE_BSENSE_READFAIL:
; 3726 :     case TAPE_BSENSE_BADALGORITHM:
; 3727 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00158	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  0015d	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3728 :         dev->sense[0] = SENSE_DC;

  00160	b8 01 00 00 00	 mov	 eax, 1
  00165	48 6b c0 00	 imul	 rax, rax, 0
  00169	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0016e	c6 84 01 64 03
	00 00 08	 mov	 BYTE PTR [rcx+rax+868], 8

; 3729 :         dev->sense[3] = 0xC0; /* Vertical CRC check & Multitrack error */

  00176	b8 01 00 00 00	 mov	 eax, 1
  0017b	48 6b c0 03	 imul	 rax, rax, 3
  0017f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00184	c6 84 01 64 03
	00 00 c0	 mov	 BYTE PTR [rcx+rax+868], 192 ; 000000c0H

; 3730 :         break;

  0018c	e9 cb 00 00 00	 jmp	 $LN5@build_sens
$LN19@build_sens:

; 3731 :     case TAPE_BSENSE_WRITEFAIL:
; 3732 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00191	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00196	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3733 :         dev->sense[0] = SENSE_DC;

  00199	b8 01 00 00 00	 mov	 eax, 1
  0019e	48 6b c0 00	 imul	 rax, rax, 0
  001a2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  001a7	c6 84 01 64 03
	00 00 08	 mov	 BYTE PTR [rcx+rax+868], 8

; 3734 :         dev->sense[3] = 0x60; /* Longitudinal CRC check & Multitrack error */

  001af	b8 01 00 00 00	 mov	 eax, 1
  001b4	48 6b c0 03	 imul	 rax, rax, 3
  001b8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  001bd	c6 84 01 64 03
	00 00 60	 mov	 BYTE PTR [rcx+rax+868], 96 ; 00000060H

; 3735 :         break;

  001c5	e9 92 00 00 00	 jmp	 $LN5@build_sens
$LN20@build_sens:
$LN21@build_sens:

; 3736 :     case TAPE_BSENSE_BADCOMMAND:
; 3737 :     case TAPE_BSENSE_INCOMPAT:
; 3738 :         *unitstat = CSW_UC;

  001ca	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  001cf	c6 00 02	 mov	 BYTE PTR [rax], 2

; 3739 :         dev->sense[0] = SENSE_CR;

  001d2	b8 01 00 00 00	 mov	 eax, 1
  001d7	48 6b c0 00	 imul	 rax, rax, 0
  001db	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  001e0	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3740 :         dev->sense[4] = 0x01;

  001e8	b8 01 00 00 00	 mov	 eax, 1
  001ed	48 6b c0 04	 imul	 rax, rax, 4
  001f1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  001f6	c6 84 01 64 03
	00 00 01	 mov	 BYTE PTR [rcx+rax+868], 1

; 3741 :         break;

  001fe	eb 5c		 jmp	 SHORT $LN5@build_sens
$LN22@build_sens:

; 3742 :     case TAPE_BSENSE_WRITEPROTECT:
; 3743 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00200	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00205	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3744 :         dev->sense[0] = SENSE_CR;

  00208	b8 01 00 00 00	 mov	 eax, 1
  0020d	48 6b c0 00	 imul	 rax, rax, 0
  00211	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00216	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3745 :         break;

  0021e	eb 3c		 jmp	 SHORT $LN5@build_sens
$LN23@build_sens:

; 3746 :     case TAPE_BSENSE_LOADPTERR:
; 3747 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  00220	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00225	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 3748 :         dev->sense[0] = 0;

  00228	b8 01 00 00 00	 mov	 eax, 1
  0022d	48 6b c0 00	 imul	 rax, rax, 0
  00231	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00236	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 3749 :         break;

  0023e	eb 1c		 jmp	 SHORT $LN5@build_sens
$LN24@build_sens:

; 3750 :     case TAPE_BSENSE_READTM:
; 3751 :         *unitstat = CSW_CE|CSW_DE|CSW_UX;

  00240	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00245	c6 00 0d	 mov	 BYTE PTR [rax], 13

; 3752 :         break;

  00248	eb 12		 jmp	 SHORT $LN5@build_sens
$LN25@build_sens:

; 3753 :     case TAPE_BSENSE_UNSOLICITED:
; 3754 :         *unitstat = CSW_CE|CSW_DE;

  0024a	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  0024f	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 3755 :         break;

  00252	eb 08		 jmp	 SHORT $LN5@build_sens
$LN26@build_sens:

; 3756 :     case TAPE_BSENSE_STATUSONLY:
; 3757 :         *unitstat = CSW_CE|CSW_DE;

  00254	48 8b 44 24 50	 mov	 rax, QWORD PTR unitstat$[rsp]
  00259	c6 00 0c	 mov	 BYTE PTR [rax], 12
$LN5@build_sens:

; 3758 :         break;
; 3759 :     } // end switch(ERCode)
; 3760 : 
; 3761 :     if (TAPE_BSENSE_STATUSONLY == ERCode)

  0025c	83 7c 24 40 0d	 cmp	 DWORD PTR ERCode$[rsp], 13
  00261	75 05		 jne	 SHORT $LN27@build_sens

; 3762 :         return; // (mission accomplished)

  00263	e9 85 02 00 00	 jmp	 $LN1@build_sens
$LN27@build_sens:

; 3763 : 
; 3764 :     /* Fill in the common sense information */
; 3765 : 
; 3766 :     if (strcmp(dev->filename,TAPE_UNLOADED) == 0
; 3767 :         || !dev->tmh->tapeloaded(dev,NULL,0))

  00268	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  0026d	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00273	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170015
  0027a	48 8b c8	 mov	 rcx, rax
  0027d	e8 00 00 00 00	 call	 strcmp
  00282	85 c0		 test	 eax, eax
  00284	74 21		 je	 SHORT $LN30@build_sens
  00286	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  0028b	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00292	45 33 c0	 xor	 r8d, r8d
  00295	33 d2		 xor	 edx, edx
  00297	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0029c	ff 50 70	 call	 QWORD PTR [rax+112]
  0029f	85 c0		 test	 eax, eax
  002a1	0f 85 bd 00 00
	00		 jne	 $LN28@build_sens
$LN30@build_sens:

; 3768 :     {
; 3769 :         dev->sense[0] |= SENSE_IR;

  002a7	b8 01 00 00 00	 mov	 eax, 1
  002ac	48 6b c0 00	 imul	 rax, rax, 0
  002b0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  002b5	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  002bd	83 c8 40	 or	 eax, 64			; 00000040H
  002c0	b9 01 00 00 00	 mov	 ecx, 1
  002c5	48 6b c9 00	 imul	 rcx, rcx, 0
  002c9	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  002ce	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3770 :         dev->sense[1] |= SENSE1_TAPE_FP;

  002d5	b8 01 00 00 00	 mov	 eax, 1
  002da	48 6b c0 01	 imul	 rax, rax, 1
  002de	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  002e3	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  002eb	83 c8 02	 or	 eax, 2
  002ee	b9 01 00 00 00	 mov	 ecx, 1
  002f3	48 6b c9 01	 imul	 rcx, rcx, 1
  002f7	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  002fc	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3771 :         dev->sense[1] &= ~SENSE1_TAPE_TUA;

  00303	b8 01 00 00 00	 mov	 eax, 1
  00308	48 6b c0 01	 imul	 rax, rax, 1
  0030c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00311	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00319	83 e0 bf	 and	 eax, -65		; ffffffffffffffbfH
  0031c	b9 01 00 00 00	 mov	 ecx, 1
  00321	48 6b c9 01	 imul	 rcx, rcx, 1
  00325	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0032a	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3772 :         dev->sense[1] |= SENSE1_TAPE_TUB;

  00331	b8 01 00 00 00	 mov	 eax, 1
  00336	48 6b c0 01	 imul	 rax, rax, 1
  0033a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0033f	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00347	83 c8 20	 or	 eax, 32			; 00000020H
  0034a	b9 01 00 00 00	 mov	 ecx, 1
  0034f	48 6b c9 01	 imul	 rcx, rcx, 1
  00353	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00358	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3773 :     }

  0035f	e9 43 01 00 00	 jmp	 $LN29@build_sens
$LN28@build_sens:

; 3774 :     else
; 3775 :     {
; 3776 :         dev->sense[0] &= ~SENSE_IR;

  00364	b8 01 00 00 00	 mov	 eax, 1
  00369	48 6b c0 00	 imul	 rax, rax, 0
  0036d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00372	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  0037a	83 e0 bf	 and	 eax, -65		; ffffffffffffffbfH
  0037d	b9 01 00 00 00	 mov	 ecx, 1
  00382	48 6b c9 00	 imul	 rcx, rcx, 0
  00386	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  0038b	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3777 :         dev->sense[1] |= IsAtLoadPoint( dev ) ? SENSE1_TAPE_LOADPT : 0;

  00392	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00397	e8 00 00 00 00	 call	 IsAtLoadPoint
  0039c	85 c0		 test	 eax, eax
  0039e	74 0a		 je	 SHORT $LN33@build_sens
  003a0	c7 44 24 24 08
	00 00 00	 mov	 DWORD PTR tv217[rsp], 8
  003a8	eb 08		 jmp	 SHORT $LN34@build_sens
$LN33@build_sens:
  003aa	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv217[rsp], 0
$LN34@build_sens:
  003b2	b8 01 00 00 00	 mov	 eax, 1
  003b7	48 6b c0 01	 imul	 rax, rax, 1
  003bb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  003c0	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  003c8	0b 44 24 24	 or	 eax, DWORD PTR tv217[rsp]
  003cc	b9 01 00 00 00	 mov	 ecx, 1
  003d1	48 6b c9 01	 imul	 rcx, rcx, 1
  003d5	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  003da	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3778 :         dev->sense[1] |= dev->readonly || dev->tdparms.logical_readonly ?

  003e1	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  003e6	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  003ec	d1 e8		 shr	 eax, 1
  003ee	83 e0 01	 and	 eax, 1
  003f1	85 c0		 test	 eax, eax
  003f3	75 1f		 jne	 SHORT $LN35@build_sens
  003f5	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  003fa	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  00400	c1 e8 0b	 shr	 eax, 11
  00403	83 e0 01	 and	 eax, 1
  00406	85 c0		 test	 eax, eax
  00408	75 0a		 jne	 SHORT $LN35@build_sens
  0040a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv235[rsp], 0
  00412	eb 08		 jmp	 SHORT $LN36@build_sens
$LN35@build_sens:
  00414	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR tv235[rsp], 2
$LN36@build_sens:
  0041c	b8 01 00 00 00	 mov	 eax, 1
  00421	48 6b c0 01	 imul	 rax, rax, 1
  00425	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  0042a	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00432	0b 44 24 28	 or	 eax, DWORD PTR tv235[rsp]
  00436	b9 01 00 00 00	 mov	 ecx, 1
  0043b	48 6b c9 01	 imul	 rcx, rcx, 1
  0043f	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00444	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3779 :             SENSE1_TAPE_FP : 0;
; 3780 :         dev->sense[1] |= SENSE1_TAPE_TUA;

  0044b	b8 01 00 00 00	 mov	 eax, 1
  00450	48 6b c0 01	 imul	 rax, rax, 1
  00454	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00459	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00461	83 c8 40	 or	 eax, 64			; 00000040H
  00464	b9 01 00 00 00	 mov	 ecx, 1
  00469	48 6b c9 01	 imul	 rcx, rcx, 1
  0046d	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  00472	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3781 :         dev->sense[1] &= ~SENSE1_TAPE_TUB;

  00479	b8 01 00 00 00	 mov	 eax, 1
  0047e	48 6b c0 01	 imul	 rax, rax, 1
  00482	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  00487	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  0048f	83 e0 df	 and	 eax, -33		; ffffffffffffffdfH
  00492	b9 01 00 00 00	 mov	 ecx, 1
  00497	48 6b c9 01	 imul	 rcx, rcx, 1
  0049b	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  004a0	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al
$LN29@build_sens:

; 3782 :     }
; 3783 :     if (dev->tmh->passedeot(dev))

  004a7	48 8b 44 24 48	 mov	 rax, QWORD PTR dev$[rsp]
  004ac	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  004b3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  004b8	ff 50 78	 call	 QWORD PTR [rax+120]
  004bb	85 c0		 test	 eax, eax
  004bd	74 2e		 je	 SHORT $LN31@build_sens

; 3784 :     {
; 3785 :         dev->sense[4] |= 0x40;

  004bf	b8 01 00 00 00	 mov	 eax, 1
  004c4	48 6b c0 04	 imul	 rax, rax, 4
  004c8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dev$[rsp]
  004cd	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  004d5	83 c8 40	 or	 eax, 64			; 00000040H
  004d8	b9 01 00 00 00	 mov	 ecx, 1
  004dd	48 6b c9 04	 imul	 rcx, rcx, 4
  004e1	48 8b 54 24 48	 mov	 rdx, QWORD PTR dev$[rsp]
  004e6	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al
$LN31@build_sens:
$LN1@build_sens:

; 3786 :     }
; 3787 : 
; 3788 : } /* end function build_sense_3410_3420 */

  004ed	48 83 c4 38	 add	 rsp, 56			; 00000038H
  004f1	c3		 ret	 0
  004f2	66 90		 npad	 2
$LN37@build_sens:
  004f4	00 00 00 00	 DD	 $LN7@build_sens
  004f8	00 00 00 00	 DD	 $LN15@build_sens
  004fc	00 00 00 00	 DD	 $LN17@build_sens
  00500	00 00 00 00	 DD	 $LN19@build_sens
  00504	00 00 00 00	 DD	 $LN20@build_sens
  00508	00 00 00 00	 DD	 $LN21@build_sens
  0050c	00 00 00 00	 DD	 $LN22@build_sens
  00510	00 00 00 00	 DD	 $LN11@build_sens
  00514	00 00 00 00	 DD	 $LN12@build_sens
  00518	00 00 00 00	 DD	 $LN23@build_sens
  0051c	00 00 00 00	 DD	 $LN10@build_sens
  00520	00 00 00 00	 DD	 $LN18@build_sens
  00524	00 00 00 00	 DD	 $LN8@build_sens
  00528	00 00 00 00	 DD	 $LN26@build_sens
  0052c	00 00 00 00	 DD	 $LN14@build_sens
  00530	00 00 00 00	 DD	 $LN24@build_sens
  00534	00 00 00 00	 DD	 $LN5@build_sens
  00538	00 00 00 00	 DD	 $LN13@build_sens
  0053c	00 00 00 00	 DD	 $LN16@build_sens
  00540	00 00 00 00	 DD	 $LN9@build_sens
  00544	00 00 00 00	 DD	 $LN25@build_sens
build_sense_3410_3420 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapeccws.c
_TEXT	SEGMENT
ERCode$ = 48
dev$ = 56
unitstat$ = 64
ccwcode$ = 72
build_sense_3420 PROC

; 3808 : {

$LN3:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3809 :     build_sense_3410_3420(ERCode,dev,unitstat,ccwcode);

  00017	44 0f b6 4c 24
	48		 movzx	 r9d, BYTE PTR ccwcode$[rsp]
  0001d	4c 8b 44 24 40	 mov	 r8, QWORD PTR unitstat$[rsp]
  00022	48 8b 54 24 38	 mov	 rdx, QWORD PTR dev$[rsp]
  00027	8b 4c 24 30	 mov	 ecx, DWORD PTR ERCode$[rsp]
  0002b	e8 00 00 00 00	 call	 build_sense_3410_3420

; 3810 : 
; 3811 :     /* Following stripped from original 'build_sense' */
; 3812 :     dev->sense[5] |= 0xC0;

  00030	b8 01 00 00 00	 mov	 eax, 1
  00035	48 6b c0 05	 imul	 rax, rax, 5
  00039	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dev$[rsp]
  0003e	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00046	0d c0 00 00 00	 or	 eax, 192		; 000000c0H
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	48 6b c9 05	 imul	 rcx, rcx, 5
  00054	48 8b 54 24 38	 mov	 rdx, QWORD PTR dev$[rsp]
  00059	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3813 :     dev->sense[6] |= 0x03;

  00060	b8 01 00 00 00	 mov	 eax, 1
  00065	48 6b c0 06	 imul	 rax, rax, 6
  00069	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dev$[rsp]
  0006e	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00076	83 c8 03	 or	 eax, 3
  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	48 6b c9 06	 imul	 rcx, rcx, 6
  00082	48 8b 54 24 38	 mov	 rdx, QWORD PTR dev$[rsp]
  00087	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3814 :     dev->sense[13] = 0x80;

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	48 6b c0 0d	 imul	 rax, rax, 13
  00097	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dev$[rsp]
  0009c	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 3815 :     dev->sense[14] = 0x01;

  000a4	b8 01 00 00 00	 mov	 eax, 1
  000a9	48 6b c0 0e	 imul	 rax, rax, 14
  000ad	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dev$[rsp]
  000b2	c6 84 01 64 03
	00 00 01	 mov	 BYTE PTR [rcx+rax+868], 1

; 3816 :     dev->sense[15] = 0x00;

  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	48 6b c0 0f	 imul	 rax, rax, 15
  000c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dev$[rsp]
  000c8	c6 84 01 64 03
	00 00 00	 mov	 BYTE PTR [rcx+rax+868], 0

; 3817 :     dev->sense[16] = 0x01;

  000d0	b8 01 00 00 00	 mov	 eax, 1
  000d5	48 6b c0 10	 imul	 rax, rax, 16
  000d9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dev$[rsp]
  000de	c6 84 01 64 03
	00 00 01	 mov	 BYTE PTR [rcx+rax+868], 1

; 3818 :     dev->sense[19] = 0xFF;

  000e6	b8 01 00 00 00	 mov	 eax, 1
  000eb	48 6b c0 13	 imul	 rax, rax, 19
  000ef	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dev$[rsp]
  000f4	c6 84 01 64 03
	00 00 ff	 mov	 BYTE PTR [rcx+rax+868], 255 ; 000000ffH

; 3819 :     dev->sense[20] = 0xFF;

  000fc	b8 01 00 00 00	 mov	 eax, 1
  00101	48 6b c0 14	 imul	 rax, rax, 20
  00105	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dev$[rsp]
  0010a	c6 84 01 64 03
	00 00 ff	 mov	 BYTE PTR [rcx+rax+868], 255 ; 000000ffH

; 3820 :     dev->numsense = 24;

  00112	48 8b 44 24 38	 mov	 rax, QWORD PTR dev$[rsp]
  00117	c7 80 60 03 00
	00 18 00 00 00	 mov	 DWORD PTR [rax+864], 24

; 3821 : 
; 3822 : } /* end function build_sense_3420 */

  00121	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00125	c3		 ret	 0
build_sense_3420 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapeccws.c
_TEXT	SEGMENT
ERCode$ = 48
dev$ = 56
unitstat$ = 64
ccwcode$ = 72
build_sense_3410 PROC

; 3794 : {

$LN3:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3795 :     build_sense_3410_3420(ERCode,dev,unitstat,ccwcode);

  00017	44 0f b6 4c 24
	48		 movzx	 r9d, BYTE PTR ccwcode$[rsp]
  0001d	4c 8b 44 24 40	 mov	 r8, QWORD PTR unitstat$[rsp]
  00022	48 8b 54 24 38	 mov	 rdx, QWORD PTR dev$[rsp]
  00027	8b 4c 24 30	 mov	 ecx, DWORD PTR ERCode$[rsp]
  0002b	e8 00 00 00 00	 call	 build_sense_3410_3420

; 3796 : 
; 3797 :     dev->sense[5] &= 0x80;

  00030	b8 01 00 00 00	 mov	 eax, 1
  00035	48 6b c0 05	 imul	 rax, rax, 5
  00039	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dev$[rsp]
  0003e	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00046	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	48 6b c9 05	 imul	 rcx, rcx, 5
  00054	48 8b 54 24 38	 mov	 rdx, QWORD PTR dev$[rsp]
  00059	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3798 :     dev->sense[5] |= 0x40;

  00060	b8 01 00 00 00	 mov	 eax, 1
  00065	48 6b c0 05	 imul	 rax, rax, 5
  00069	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dev$[rsp]
  0006e	0f b6 84 01 64
	03 00 00	 movzx	 eax, BYTE PTR [rcx+rax+868]
  00076	83 c8 40	 or	 eax, 64			; 00000040H
  00079	b9 01 00 00 00	 mov	 ecx, 1
  0007e	48 6b c9 05	 imul	 rcx, rcx, 5
  00082	48 8b 54 24 38	 mov	 rdx, QWORD PTR dev$[rsp]
  00087	88 84 0a 64 03
	00 00		 mov	 BYTE PTR [rdx+rcx+868], al

; 3799 :     dev->sense[6] = 0x22; /* Dual Dens - 3410/3411 Model 2 */

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	48 6b c0 06	 imul	 rax, rax, 6
  00097	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dev$[rsp]
  0009c	c6 84 01 64 03
	00 00 22	 mov	 BYTE PTR [rcx+rax+868], 34 ; 00000022H

; 3800 :     dev->numsense = 9;

  000a4	48 8b 44 24 38	 mov	 rax, QWORD PTR dev$[rsp]
  000a9	c7 80 60 03 00
	00 09 00 00 00	 mov	 DWORD PTR [rax+864], 9

; 3801 : 
; 3802 : } /* end function build_sense_3410 */

  000b3	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b7	c3		 ret	 0
build_sense_3410 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapeccws.c
_TEXT	SEGMENT
usr$ = 32
i$ = 36
sense_built$ = 40
tv163 = 48
ERCode$ = 80
dev$ = 88
unitstat$ = 96
ccwcode$ = 104
build_senseX PROC

; 3613 : {

$LN13:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	57		 push	 rdi
  00014	48 83 ec 40	 sub	 rsp, 64			; 00000040H

; 3614 : int i;
; 3615 : BYTE usr;
; 3616 : int sense_built;
; 3617 :     sense_built = 0;

  00018	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR sense_built$[rsp], 0

; 3618 :     if(unitstat==NULL)

  00020	48 83 7c 24 60
	00		 cmp	 QWORD PTR unitstat$[rsp], 0
  00026	75 0a		 jne	 SHORT $LN5@build_sens

; 3619 :     {
; 3620 :         unitstat = &usr;

  00028	48 8d 44 24 20	 lea	 rax, QWORD PTR usr$[rsp]
  0002d	48 89 44 24 60	 mov	 QWORD PTR unitstat$[rsp], rax
$LN5@build_sens:

; 3621 :     }
; 3622 :     for(i = 0;TapeDevtypeList[i] != 0; i += TAPEDEVTYPELIST_ENTRYSIZE)

  00032	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0003a	eb 0b		 jmp	 SHORT $LN4@build_sens
$LN2@build_sens:
  0003c	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00040	83 c0 05	 add	 eax, 5
  00043	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@build_sens:
  00047	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:TapeDevtypeList
  00053	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  00057	0f 84 fc 00 00
	00		 je	 $LN3@build_sens

; 3623 :     {
; 3624 :         if (TapeDevtypeList[i] == dev->devtype)

  0005d	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:TapeDevtypeList
  00069	48 8b 54 24 58	 mov	 rdx, QWORD PTR dev$[rsp]
  0006e	0f b7 52 4a	 movzx	 edx, WORD PTR [rdx+74]
  00072	39 14 81	 cmp	 DWORD PTR [rcx+rax*4], edx
  00075	0f 85 d9 00 00
	00		 jne	 $LN6@build_sens

; 3625 :         {
; 3626 :             // Clear old sense if we're going to completely rebuild it...
; 3627 : 
; 3628 :             if (TAPE_BSENSE_STATUSONLY != ERCode)

  0007b	83 7c 24 50 0d	 cmp	 DWORD PTR ERCode$[rsp], 13
  00080	74 30		 je	 SHORT $LN7@build_sens

; 3629 :             {
; 3630 :                 memset( dev->sense, 0, sizeof(dev->sense) );

  00082	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00087	48 05 64 03 00
	00		 add	 rax, 868		; 00000364H
  0008d	48 8b f8	 mov	 rdi, rax
  00090	33 c0		 xor	 eax, eax
  00092	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00097	f3 aa		 rep stosb

; 3631 :                 dev->sns_pending = 0;

  00099	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0009e	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  000a4	83 e0 fb	 and	 eax, -5			; fffffffbH
  000a7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  000ac	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax
$LN7@build_sens:

; 3632 :             }
; 3633 : 
; 3634 :             // Call the primary sense function (e.g. "build_sense_3480_etal")...
; 3635 : 
; 3636 :             TapeSenseTable[TapeDevtypeList[i+4]](ERCode,dev,unitstat,ccwcode);

  000b2	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  000b6	83 c0 04	 add	 eax, 4
  000b9	48 98		 cdqe
  000bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:TapeDevtypeList
  000c2	48 63 04 81	 movsxd	 rax, DWORD PTR [rcx+rax*4]
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:TapeSenseTable
  000cd	48 89 4c 24 30	 mov	 QWORD PTR tv163[rsp], rcx
  000d2	44 0f b6 4c 24
	68		 movzx	 r9d, BYTE PTR ccwcode$[rsp]
  000d8	4c 8b 44 24 60	 mov	 r8, QWORD PTR unitstat$[rsp]
  000dd	48 8b 54 24 58	 mov	 rdx, QWORD PTR dev$[rsp]
  000e2	8b 4c 24 50	 mov	 ecx, DWORD PTR ERCode$[rsp]
  000e6	48 8b 7c 24 30	 mov	 rdi, QWORD PTR tv163[rsp]
  000eb	ff 14 c7	 call	 QWORD PTR [rdi+rax*8]

; 3637 :             sense_built = 1;

  000ee	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR sense_built$[rsp], 1

; 3638 : 
; 3639 :             // Unit-exception s/b signalled for all write operations
; 3640 :             // once the end-of-tape (EOT) reflector has been passed...
; 3641 : 
; 3642 :             if (1
; 3643 :                 && TAPE_BSENSE_STATUSONLY == ERCode
; 3644 :                 &&
; 3645 :                 (0
; 3646 :                     || 0x01 == ccwcode      // write
; 3647 :                     || 0x17 == ccwcode      // erase gap
; 3648 :                     || 0x1F == ccwcode      // write tapemark
; 3649 :                 )
; 3650 :                 && dev->tmh->passedeot(dev)

  000f6	33 c0		 xor	 eax, eax
  000f8	83 f8 01	 cmp	 eax, 1
  000fb	74 55		 je	 SHORT $LN8@build_sens
  000fd	83 7c 24 50 0d	 cmp	 DWORD PTR ERCode$[rsp], 13
  00102	75 4e		 jne	 SHORT $LN8@build_sens
  00104	33 c0		 xor	 eax, eax
  00106	85 c0		 test	 eax, eax
  00108	75 1e		 jne	 SHORT $LN9@build_sens
  0010a	0f b6 44 24 68	 movzx	 eax, BYTE PTR ccwcode$[rsp]
  0010f	83 f8 01	 cmp	 eax, 1
  00112	74 14		 je	 SHORT $LN9@build_sens
  00114	0f b6 44 24 68	 movzx	 eax, BYTE PTR ccwcode$[rsp]
  00119	83 f8 17	 cmp	 eax, 23
  0011c	74 0a		 je	 SHORT $LN9@build_sens
  0011e	0f b6 44 24 68	 movzx	 eax, BYTE PTR ccwcode$[rsp]
  00123	83 f8 1f	 cmp	 eax, 31
  00126	75 2a		 jne	 SHORT $LN8@build_sens
$LN9@build_sens:
  00128	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  0012d	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00134	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00139	ff 50 78	 call	 QWORD PTR [rax+120]
  0013c	85 c0		 test	 eax, eax
  0013e	74 12		 je	 SHORT $LN8@build_sens

; 3651 :             )
; 3652 :             {
; 3653 :                 // We're still in the "Early Warning Zone",
; 3654 :                 // so keep warning them...
; 3655 : 
; 3656 :                 *unitstat |= CSW_UX;        // ("Warning!")

  00140	48 8b 44 24 60	 mov	 rax, QWORD PTR unitstat$[rsp]
  00145	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00148	83 c8 01	 or	 eax, 1
  0014b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR unitstat$[rsp]
  00150	88 01		 mov	 BYTE PTR [rcx], al
$LN8@build_sens:

; 3657 :             }
; 3658 :             break;

  00152	eb 05		 jmp	 SHORT $LN3@build_sens
$LN6@build_sens:

; 3659 :         }
; 3660 :     }

  00154	e9 e3 fe ff ff	 jmp	 $LN2@build_sens
$LN3@build_sens:

; 3661 :     if (!sense_built)

  00159	83 7c 24 28 00	 cmp	 DWORD PTR sense_built$[rsp], 0
  0015e	75 35		 jne	 SHORT $LN10@build_sens

; 3662 :     {
; 3663 :         memset( dev->sense, 0, sizeof(dev->sense) );

  00160	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  00165	48 05 64 03 00
	00		 add	 rax, 868		; 00000364H
  0016b	48 8b f8	 mov	 rdi, rax
  0016e	33 c0		 xor	 eax, eax
  00170	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00175	f3 aa		 rep stosb

; 3664 :         dev->sense[0]=SENSE_EC;

  00177	b8 01 00 00 00	 mov	 eax, 1
  0017c	48 6b c0 00	 imul	 rax, rax, 0
  00180	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  00185	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 3665 :         *unitstat = CSW_CE|CSW_DE|CSW_UC;

  0018d	48 8b 44 24 60	 mov	 rax, QWORD PTR unitstat$[rsp]
  00192	c6 00 0e	 mov	 BYTE PTR [rax], 14
$LN10@build_sens:

; 3666 :     }
; 3667 :     if (*unitstat & CSW_UC)

  00195	48 8b 44 24 60	 mov	 rax, QWORD PTR unitstat$[rsp]
  0019a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0019d	83 e0 02	 and	 eax, 2
  001a0	85 c0		 test	 eax, eax
  001a2	74 19		 je	 SHORT $LN11@build_sens

; 3668 :     {
; 3669 :         dev->sns_pending = 1;

  001a4	48 8b 44 24 58	 mov	 rax, QWORD PTR dev$[rsp]
  001a9	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  001af	83 c8 04	 or	 eax, 4
  001b2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR dev$[rsp]
  001b7	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax
$LN11@build_sens:

; 3670 :     }
; 3671 :     return;
; 3672 : 
; 3673 : } /* end function build_senseX */

  001bd	48 83 c4 40	 add	 rsp, 64			; 00000040H
  001c1	5f		 pop	 rdi
  001c2	c3		 ret	 0
build_senseX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapeccws.c
_TEXT	SEGMENT
fcb$ = 112
i$ = 116
tapeloaded$ = 120
tv90 = 121
tv141 = 122
rc$ = 124
msg$ = 128
tv158 = 136
tv214 = 140
tv220 = 144
tv276 = 148
tv282 = 152
tv346 = 156
tv352 = 160
tv433 = 164
tv439 = 168
tv495 = 172
tv491 = 176
tv500 = 180
tv505 = 184
$T1 = 192
$T2 = 200
tv202 = 208
tv203 = 216
tv204 = 224
tv205 = 232
tv206 = 240
tv207 = 248
tv264 = 256
tv265 = 264
tv266 = 272
tv267 = 280
tv268 = 288
tv269 = 296
tv334 = 304
tv335 = 312
tv336 = 320
tv337 = 328
tv338 = 336
tv339 = 344
tv421 = 352
tv422 = 360
tv423 = 368
tv424 = 376
tv425 = 384
tv426 = 392
tv182 = 400
tv209 = 408
tv244 = 416
tv271 = 424
tv312 = 432
tv314 = 440
tv341 = 448
tv369 = 456
tv428 = 464
msg1$ = 472
msg2$ = 488
__$ArrayPad$ = 504
dev$ = 528
buf$ = 536
count$ = 544
load_display PROC

; 3376 : {

$LN108:
  00000	66 44 89 44 24
	18		 mov	 WORD PTR [rsp+24], r8w
  00006	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000b	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00010	57		 push	 rdi
  00011	48 81 ec 00 02
	00 00		 sub	 rsp, 512		; 00000200H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 3377 : int             rc = 0;                 /* Return code               */

  0002a	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 3378 : U16             i;                      /* Array subscript           */
; 3379 : char            msg1[9], msg2[9];       /* Message areas (ASCIIZ)    */
; 3380 : BYTE            fcb;                    /* Format Control Byte       */
; 3381 : BYTE            tapeloaded;             /* (boolean true/false)      */
; 3382 : BYTE*           msg;                    /* (work buf ptr)            */
; 3383 : 
; 3384 :     if (!count)

  00032	0f b7 84 24 20
	02 00 00	 movzx	 eax, WORD PTR count$[rsp]
  0003a	85 c0		 test	 eax, eax
  0003c	75 09		 jne	 SHORT $LN10@load_displ

; 3385 :         return rc;

  0003e	8b 44 24 7c	 mov	 eax, DWORD PTR rc$[rsp]
  00042	e9 a8 0f 00 00	 jmp	 $LN1@load_displ
$LN10@load_displ:

; 3386 : 
; 3387 :     /* Pick up format control byte */
; 3388 :     fcb = *buf;

  00047	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  0004f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00052	88 44 24 70	 mov	 BYTE PTR fcb$[rsp], al

; 3389 : 
; 3390 :     /* Copy and translate messages... */
; 3391 : 
; 3392 :     memset( msg1, 0, sizeof(msg1) );

  00056	48 8d 84 24 d8
	01 00 00	 lea	 rax, QWORD PTR msg1$[rsp]
  0005e	48 8b f8	 mov	 rdi, rax
  00061	33 c0		 xor	 eax, eax
  00063	b9 09 00 00 00	 mov	 ecx, 9
  00068	f3 aa		 rep stosb

; 3393 :     memset( msg2, 0, sizeof(msg2) );

  0006a	48 8d 84 24 e8
	01 00 00	 lea	 rax, QWORD PTR msg2$[rsp]
  00072	48 8b f8	 mov	 rdi, rax
  00075	33 c0		 xor	 eax, eax
  00077	b9 09 00 00 00	 mov	 ecx, 9
  0007c	f3 aa		 rep stosb

; 3394 : 
; 3395 :     msg = buf+1;

  0007e	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00086	48 ff c0	 inc	 rax
  00089	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR msg$[rsp], rax

; 3396 : 
; 3397 :     for (i=0; *msg && i < 8 && ((i+1)+0) < count; i++)

  00091	33 c0		 xor	 eax, eax
  00093	66 89 44 24 74	 mov	 WORD PTR i$[rsp], ax
  00098	eb 0d		 jmp	 SHORT $LN4@load_displ
$LN2@load_displ:
  0009a	0f b7 44 24 74	 movzx	 eax, WORD PTR i$[rsp]
  0009f	66 ff c0	 inc	 ax
  000a2	66 89 44 24 74	 mov	 WORD PTR i$[rsp], ax
$LN4@load_displ:
  000a7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR msg$[rsp]
  000af	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000b2	85 c0		 test	 eax, eax
  000b4	74 58		 je	 SHORT $LN3@load_displ
  000b6	0f b7 44 24 74	 movzx	 eax, WORD PTR i$[rsp]
  000bb	83 f8 08	 cmp	 eax, 8
  000be	7d 4e		 jge	 SHORT $LN3@load_displ
  000c0	0f b7 44 24 74	 movzx	 eax, WORD PTR i$[rsp]
  000c5	ff c0		 inc	 eax
  000c7	0f b7 8c 24 20
	02 00 00	 movzx	 ecx, WORD PTR count$[rsp]
  000cf	3b c1		 cmp	 eax, ecx
  000d1	7d 3b		 jge	 SHORT $LN3@load_displ

; 3398 :         msg1[i] = guest_to_host(*msg++);

  000d3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR msg$[rsp]
  000db	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000de	88 44 24 79	 mov	 BYTE PTR tv90[rsp], al
  000e2	0f b6 4c 24 79	 movzx	 ecx, BYTE PTR tv90[rsp]
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  000ed	0f b7 4c 24 74	 movzx	 ecx, WORD PTR i$[rsp]
  000f2	88 84 0c d8 01
	00 00		 mov	 BYTE PTR msg1$[rsp+rcx], al
  000f9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR msg$[rsp]
  00101	48 ff c0	 inc	 rax
  00104	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR msg$[rsp], rax
  0010c	eb 8c		 jmp	 SHORT $LN2@load_displ
$LN3@load_displ:

; 3399 : 
; 3400 :     msg = buf+1+8;

  0010e	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR buf$[rsp]
  00116	48 83 c0 09	 add	 rax, 9
  0011a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR msg$[rsp], rax

; 3401 : 
; 3402 :     for (i=0; *msg && i < 8 && ((i+1)+8) < count; i++)

  00122	33 c0		 xor	 eax, eax
  00124	66 89 44 24 74	 mov	 WORD PTR i$[rsp], ax
  00129	eb 0d		 jmp	 SHORT $LN7@load_displ
$LN5@load_displ:
  0012b	0f b7 44 24 74	 movzx	 eax, WORD PTR i$[rsp]
  00130	66 ff c0	 inc	 ax
  00133	66 89 44 24 74	 mov	 WORD PTR i$[rsp], ax
$LN7@load_displ:
  00138	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR msg$[rsp]
  00140	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00143	85 c0		 test	 eax, eax
  00145	74 59		 je	 SHORT $LN6@load_displ
  00147	0f b7 44 24 74	 movzx	 eax, WORD PTR i$[rsp]
  0014c	83 f8 08	 cmp	 eax, 8
  0014f	7d 4f		 jge	 SHORT $LN6@load_displ
  00151	0f b7 44 24 74	 movzx	 eax, WORD PTR i$[rsp]
  00156	83 c0 09	 add	 eax, 9
  00159	0f b7 8c 24 20
	02 00 00	 movzx	 ecx, WORD PTR count$[rsp]
  00161	3b c1		 cmp	 eax, ecx
  00163	7d 3b		 jge	 SHORT $LN6@load_displ

; 3403 :         msg2[i] = guest_to_host(*msg++);

  00165	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR msg$[rsp]
  0016d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00170	88 44 24 7a	 mov	 BYTE PTR tv141[rsp], al
  00174	0f b6 4c 24 7a	 movzx	 ecx, BYTE PTR tv141[rsp]
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  0017f	0f b7 4c 24 74	 movzx	 ecx, WORD PTR i$[rsp]
  00184	88 84 0c e8 01
	00 00		 mov	 BYTE PTR msg2$[rsp+rcx], al
  0018b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR msg$[rsp]
  00193	48 ff c0	 inc	 rax
  00196	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR msg$[rsp], rax
  0019e	eb 8b		 jmp	 SHORT $LN5@load_displ
$LN6@load_displ:

; 3404 : 
; 3405 :     msg1[ sizeof(msg1) - 1 ] = 0;

  001a0	b8 01 00 00 00	 mov	 eax, 1
  001a5	48 6b c0 08	 imul	 rax, rax, 8
  001a9	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR $T1[rsp], rax
  001b1	48 83 bc 24 c0
	00 00 00 09	 cmp	 QWORD PTR $T1[rsp], 9
  001ba	73 02		 jae	 SHORT $LN30@load_displ
  001bc	eb 05		 jmp	 SHORT $LN31@load_displ
$LN30@load_displ:
  001be	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN31@load_displ:
  001c3	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR $T1[rsp]
  001cb	c6 84 04 d8 01
	00 00 00	 mov	 BYTE PTR msg1$[rsp+rax], 0

; 3406 :     msg2[ sizeof(msg2) - 1 ] = 0;

  001d3	b8 01 00 00 00	 mov	 eax, 1
  001d8	48 6b c0 08	 imul	 rax, rax, 8
  001dc	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR $T2[rsp], rax
  001e4	48 83 bc 24 c8
	00 00 00 09	 cmp	 QWORD PTR $T2[rsp], 9
  001ed	73 02		 jae	 SHORT $LN32@load_displ
  001ef	eb 05		 jmp	 SHORT $LN33@load_displ
$LN32@load_displ:
  001f1	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN33@load_displ:
  001f6	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR $T2[rsp]
  001fe	c6 84 04 e8 01
	00 00 00	 mov	 BYTE PTR msg2$[rsp+rax], 0

; 3407 : 
; 3408 :     tapeloaded = dev->tmh->tapeloaded( dev, NULL, 0 );

  00206	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0020e	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00215	45 33 c0	 xor	 r8d, r8d
  00218	33 d2		 xor	 edx, edx
  0021a	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00222	ff 50 70	 call	 QWORD PTR [rax+112]
  00225	88 44 24 78	 mov	 BYTE PTR tapeloaded$[rsp], al

; 3409 : 
; 3410 :     switch ( fcb & FCB_FS )  // (high-order 3 bits)

  00229	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  0022e	25 e0 00 00 00	 and	 eax, 224		; 000000e0H
  00233	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv158[rsp], eax
  0023a	81 bc 24 88 00
	00 00 e0 00 00
	00		 cmp	 DWORD PTR tv158[rsp], 224 ; 000000e0H
  00245	0f 87 2e 06 00
	00		 ja	 $LN19@load_displ
  0024b	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR tv158[rsp]
  00253	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0025a	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN106@load_displ[rcx+rax]
  00262	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN107@load_displ[rcx+rax*4]
  00269	48 03 c1	 add	 rax, rcx
  0026c	ff e0		 jmp	 rax
$LN11@load_displ:

; 3411 :     {
; 3412 :     case FCB_FS_READYGO:     // 0x00
; 3413 : 
; 3414 :         /*
; 3415 :         || 000b: "The message specified in bytes 1-8 and 9-16 is
; 3416 :         ||       maintained until the tape drive next starts tape
; 3417 :         ||       motion, or until the message is updated."
; 3418 :         */
; 3419 : 
; 3420 :         dev->tapedispflags = 0;

  0026e	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00276	c6 80 61 11 00
	00 00		 mov	 BYTE PTR [rax+4449], 0

; 3421 : 
; 3422 :         STRLCPY( dev->tapemsg1, msg1 );

  0027d	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00285	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  0028b	41 b8 09 00 00
	00		 mov	 r8d, 9
  00291	48 8d 94 24 d8
	01 00 00	 lea	 rdx, QWORD PTR msg1$[rsp]
  00299	48 8b c8	 mov	 rcx, rax
  0029c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 3423 :         STRLCPY( dev->tapemsg2, msg2 );

  002a2	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002aa	48 05 29 11 00
	00		 add	 rax, 4393		; 00001129H
  002b0	41 b8 09 00 00
	00		 mov	 r8d, 9
  002b6	48 8d 94 24 e8
	01 00 00	 lea	 rdx, QWORD PTR msg2$[rsp]
  002be	48 8b c8	 mov	 rcx, rax
  002c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 3424 : 
; 3425 :         dev->tapedisptype  = TAPEDISPTYP_WAITACT;

  002c7	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002cf	c6 80 60 11 00
	00 09		 mov	 BYTE PTR [rax+4448], 9

; 3426 : 
; 3427 :         break;

  002d6	e9 6b 0b 00 00	 jmp	 $LN8@load_displ
$LN12@load_displ:

; 3428 : 
; 3429 :     case FCB_FS_UNMOUNT:     // 0x20
; 3430 : 
; 3431 :         /*
; 3432 :         || 001b: "The message specified in bytes 1-8 is maintained
; 3433 :         ||       until the tape cartridge is physically removed from
; 3434 :         ||       the tape drive, or until the next unload/load cycle.
; 3435 :         ||       If the drive does not contain a cartridge when the
; 3436 :         ||       Load Display command is received, the display will
; 3437 :         ||       contain the message that existed prior to the receipt
; 3438 :         ||       of the command."
; 3439 :         */
; 3440 : 
; 3441 :         dev->tapedispflags = 0;

  002db	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002e3	c6 80 61 11 00
	00 00		 mov	 BYTE PTR [rax+4449], 0

; 3442 : 
; 3443 :         if ( tapeloaded )

  002ea	0f b6 44 24 78	 movzx	 eax, BYTE PTR tapeloaded$[rsp]
  002ef	85 c0		 test	 eax, eax
  002f1	0f 84 ae 02 00
	00		 je	 $LN13@load_displ

; 3444 :         {
; 3445 :             dev->tapedisptype  = TAPEDISPTYP_UNMOUNT;

  002f7	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002ff	c6 80 60 11 00
	00 07		 mov	 BYTE PTR [rax+4448], 7

; 3446 :             dev->tapedispflags = TAPEDISPFLG_REQAUTOMNT;

  00306	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0030e	c6 80 61 11 00
	00 08		 mov	 BYTE PTR [rax+4449], 8

; 3447 : 
; 3448 :             STRLCPY( dev->tapemsg1, msg1 );

  00315	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0031d	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  00323	41 b8 09 00 00
	00		 mov	 r8d, 9
  00329	48 8d 94 24 d8
	01 00 00	 lea	 rdx, QWORD PTR msg1$[rsp]
  00331	48 8b c8	 mov	 rcx, rax
  00334	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 3449 : 
; 3450 :             if (dev->ccwtrace)

  0033a	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00342	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00348	c1 e8 0f	 shr	 eax, 15
  0034b	83 e0 01	 and	 eax, 1
  0034e	85 c0		 test	 eax, eax
  00350	0f 84 4f 02 00
	00		 je	 $LN14@load_displ

; 3451 :                 WRMSG(HHC00218, "I", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), dev->tapemsg1 );

  00356	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0035e	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00365	83 f8 01	 cmp	 eax, 1
  00368	75 14		 jne	 SHORT $LN44@load_displ
  0036a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169895
  00371	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv207[rsp], rax
  00379	e9 1e 01 00 00	 jmp	 $LN45@load_displ
$LN44@load_displ:
  0037e	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00386	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0038d	83 f8 02	 cmp	 eax, 2
  00390	75 14		 jne	 SHORT $LN42@load_displ
  00392	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169896
  00399	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv206[rsp], rax
  003a1	e9 e6 00 00 00	 jmp	 $LN43@load_displ
$LN42@load_displ:
  003a6	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003ae	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  003b5	83 f8 03	 cmp	 eax, 3
  003b8	75 14		 jne	 SHORT $LN40@load_displ
  003ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169897
  003c1	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv205[rsp], rax
  003c9	e9 ae 00 00 00	 jmp	 $LN41@load_displ
$LN40@load_displ:
  003ce	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003d6	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  003dd	83 f8 04	 cmp	 eax, 4
  003e0	75 11		 jne	 SHORT $LN38@load_displ
  003e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169898
  003e9	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv204[rsp], rax
  003f1	eb 79		 jmp	 SHORT $LN39@load_displ
$LN38@load_displ:
  003f3	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003fb	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00402	83 f8 05	 cmp	 eax, 5
  00405	75 11		 jne	 SHORT $LN36@load_displ
  00407	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169899
  0040e	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv203[rsp], rax
  00416	eb 44		 jmp	 SHORT $LN37@load_displ
$LN36@load_displ:
  00418	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00420	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00427	83 f8 06	 cmp	 eax, 6
  0042a	75 11		 jne	 SHORT $LN34@load_displ
  0042c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169900
  00433	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv202[rsp], rax
  0043b	eb 0f		 jmp	 SHORT $LN35@load_displ
$LN34@load_displ:
  0043d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169901
  00444	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv202[rsp], rax
$LN35@load_displ:
  0044c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv202[rsp]
  00454	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv203[rsp], rax
$LN37@load_displ:
  0045c	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv203[rsp]
  00464	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv204[rsp], rax
$LN39@load_displ:
  0046c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tv204[rsp]
  00474	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv205[rsp], rax
$LN41@load_displ:
  0047c	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv205[rsp]
  00484	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv206[rsp], rax
$LN43@load_displ:
  0048c	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv206[rsp]
  00494	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv207[rsp], rax
$LN45@load_displ:
  0049c	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  004a5	74 15		 je	 SHORT $LN46@load_displ
  004a7	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004af	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  004b3	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv214[rsp], eax
  004ba	eb 0b		 jmp	 SHORT $LN47@load_displ
$LN46@load_displ:
  004bc	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv214[rsp], 0
$LN47@load_displ:
  004c7	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  004d0	74 17		 je	 SHORT $LN48@load_displ
  004d2	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004da	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  004de	d1 f8		 sar	 eax, 1
  004e0	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv220[rsp], eax
  004e7	eb 0b		 jmp	 SHORT $LN49@load_displ
$LN48@load_displ:
  004e9	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv220[rsp], 0
$LN49@load_displ:
  004f4	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004fc	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  00502	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv182[rsp], rax
  0050a	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00512	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00519	48 89 8c 24 98
	01 00 00	 mov	 QWORD PTR tv209[rsp], rcx
  00521	b9 01 00 00 00	 mov	 ecx, 1
  00526	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0052c	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR tv182[rsp]
  00534	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00539	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv207[rsp]
  00541	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00546	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR tv209[rsp]
  0054e	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00553	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv214[rsp]
  0055a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0055e	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv220[rsp]
  00565	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00569	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169902
  00570	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00575	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169903
  0057c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00581	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00586	41 b9 03 00 00
	00		 mov	 r9d, 3
  0058c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169904
  00593	ba 7b 0d 00 00	 mov	 edx, 3451		; 00000d7bH
  00598	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169905
  0059f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN14@load_displ:
$LN13@load_displ:

; 3452 :         }
; 3453 : 
; 3454 :         break;

  005a5	e9 9c 08 00 00	 jmp	 $LN8@load_displ
$LN15@load_displ:

; 3455 : 
; 3456 :     case FCB_FS_MOUNT:       // 0x40
; 3457 : 
; 3458 :         /*
; 3459 :         || 010b: "The message specified in bytes 1-8 is maintained
; 3460 :         ||       until the drive is next loaded. If the drive is
; 3461 :         ||       loaded when the Load Display command is received,
; 3462 :         ||       the display will contain the message that existed
; 3463 :         ||       prior to the receipt of the command."
; 3464 :         */
; 3465 : 
; 3466 :         dev->tapedispflags = 0;

  005aa	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005b2	c6 80 61 11 00
	00 00		 mov	 BYTE PTR [rax+4449], 0

; 3467 : 
; 3468 :         if ( !tapeloaded )

  005b9	0f b6 44 24 78	 movzx	 eax, BYTE PTR tapeloaded$[rsp]
  005be	85 c0		 test	 eax, eax
  005c0	0f 85 ae 02 00
	00		 jne	 $LN16@load_displ

; 3469 :         {
; 3470 :             dev->tapedisptype  = TAPEDISPTYP_MOUNT;

  005c6	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005ce	c6 80 60 11 00
	00 06		 mov	 BYTE PTR [rax+4448], 6

; 3471 :             dev->tapedispflags = TAPEDISPFLG_REQAUTOMNT;

  005d5	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005dd	c6 80 61 11 00
	00 08		 mov	 BYTE PTR [rax+4449], 8

; 3472 : 
; 3473 :             STRLCPY( dev->tapemsg1, msg1 );

  005e4	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005ec	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  005f2	41 b8 09 00 00
	00		 mov	 r8d, 9
  005f8	48 8d 94 24 d8
	01 00 00	 lea	 rdx, QWORD PTR msg1$[rsp]
  00600	48 8b c8	 mov	 rcx, rax
  00603	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 3474 : 
; 3475 :             if (dev->ccwtrace)

  00609	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00611	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00617	c1 e8 0f	 shr	 eax, 15
  0061a	83 e0 01	 and	 eax, 1
  0061d	85 c0		 test	 eax, eax
  0061f	0f 84 4f 02 00
	00		 je	 $LN17@load_displ

; 3476 :                 WRMSG(HHC00218, "I", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), dev->tapemsg1 );

  00625	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0062d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00634	83 f8 01	 cmp	 eax, 1
  00637	75 14		 jne	 SHORT $LN60@load_displ
  00639	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169909
  00640	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv269[rsp], rax
  00648	e9 1e 01 00 00	 jmp	 $LN61@load_displ
$LN60@load_displ:
  0064d	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00655	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0065c	83 f8 02	 cmp	 eax, 2
  0065f	75 14		 jne	 SHORT $LN58@load_displ
  00661	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169910
  00668	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv268[rsp], rax
  00670	e9 e6 00 00 00	 jmp	 $LN59@load_displ
$LN58@load_displ:
  00675	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0067d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00684	83 f8 03	 cmp	 eax, 3
  00687	75 14		 jne	 SHORT $LN56@load_displ
  00689	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169911
  00690	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv267[rsp], rax
  00698	e9 ae 00 00 00	 jmp	 $LN57@load_displ
$LN56@load_displ:
  0069d	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006a5	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  006ac	83 f8 04	 cmp	 eax, 4
  006af	75 11		 jne	 SHORT $LN54@load_displ
  006b1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169912
  006b8	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv266[rsp], rax
  006c0	eb 79		 jmp	 SHORT $LN55@load_displ
$LN54@load_displ:
  006c2	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006ca	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  006d1	83 f8 05	 cmp	 eax, 5
  006d4	75 11		 jne	 SHORT $LN52@load_displ
  006d6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169913
  006dd	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv265[rsp], rax
  006e5	eb 44		 jmp	 SHORT $LN53@load_displ
$LN52@load_displ:
  006e7	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006ef	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  006f6	83 f8 06	 cmp	 eax, 6
  006f9	75 11		 jne	 SHORT $LN50@load_displ
  006fb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169914
  00702	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv264[rsp], rax
  0070a	eb 0f		 jmp	 SHORT $LN51@load_displ
$LN50@load_displ:
  0070c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169915
  00713	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv264[rsp], rax
$LN51@load_displ:
  0071b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR tv264[rsp]
  00723	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv265[rsp], rax
$LN53@load_displ:
  0072b	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv265[rsp]
  00733	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv266[rsp], rax
$LN55@load_displ:
  0073b	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv266[rsp]
  00743	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv267[rsp], rax
$LN57@load_displ:
  0074b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv267[rsp]
  00753	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv268[rsp], rax
$LN59@load_displ:
  0075b	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR tv268[rsp]
  00763	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv269[rsp], rax
$LN61@load_displ:
  0076b	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00774	74 15		 je	 SHORT $LN62@load_displ
  00776	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0077e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00782	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv276[rsp], eax
  00789	eb 0b		 jmp	 SHORT $LN63@load_displ
$LN62@load_displ:
  0078b	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv276[rsp], 0
$LN63@load_displ:
  00796	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0079f	74 17		 je	 SHORT $LN64@load_displ
  007a1	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007a9	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  007ad	d1 f8		 sar	 eax, 1
  007af	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv282[rsp], eax
  007b6	eb 0b		 jmp	 SHORT $LN65@load_displ
$LN64@load_displ:
  007b8	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv282[rsp], 0
$LN65@load_displ:
  007c3	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007cb	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  007d1	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR tv244[rsp], rax
  007d9	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  007e1	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  007e8	48 89 8c 24 a8
	01 00 00	 mov	 QWORD PTR tv271[rsp], rcx
  007f0	b9 01 00 00 00	 mov	 ecx, 1
  007f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007fb	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR tv244[rsp]
  00803	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00808	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv269[rsp]
  00810	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00815	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR tv271[rsp]
  0081d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00822	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv276[rsp]
  00829	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0082d	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv282[rsp]
  00834	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00838	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169916
  0083f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00844	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169917
  0084b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00850	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00855	41 b9 03 00 00
	00		 mov	 r9d, 3
  0085b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169918
  00862	ba 94 0d 00 00	 mov	 edx, 3476		; 00000d94H
  00867	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169919
  0086e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@load_displ:
$LN16@load_displ:

; 3477 :         }
; 3478 : 
; 3479 :         break;

  00874	e9 cd 05 00 00	 jmp	 $LN8@load_displ
$LN18@load_displ:
$LN19@load_displ:

; 3480 : 
; 3481 :     case FCB_FS_NOP:         // 0x60
; 3482 :     default:
; 3483 : 
; 3484 :         /*
; 3485 :         || 011b: "This value is used to physically access a drive
; 3486 :         ||       without changing the message display. This option
; 3487 :         ||       can be used to test whether a control unit can
; 3488 :         ||       physically communicate with a drive."
; 3489 :         */
; 3490 : 
; 3491 :         return rc;

  00879	8b 44 24 7c	 mov	 eax, DWORD PTR rc$[rsp]
  0087d	e9 6d 07 00 00	 jmp	 $LN1@load_displ
$LN20@load_displ:

; 3492 : 
; 3493 :     case FCB_FS_RESET_DISPLAY: // 0x80
; 3494 : 
; 3495 :         /*
; 3496 :         || 100b: "The host message being displayed is cancelled and
; 3497 :         ||       a unit message is displayed instead."
; 3498 :         */
; 3499 : 
; 3500 :         dev->tapedispflags = 0;

  00882	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0088a	c6 80 61 11 00
	00 00		 mov	 BYTE PTR [rax+4449], 0

; 3501 :         dev->tapedisptype  = TAPEDISPTYP_IDLE;

  00891	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00899	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 3502 : 
; 3503 :         break;

  008a0	e9 a1 05 00 00	 jmp	 $LN8@load_displ
$LN21@load_displ:

; 3504 : 
; 3505 :     case FCB_FS_UMOUNTMOUNT: // 0xE0
; 3506 : 
; 3507 :         /*
; 3508 :         || 111b: "The message in bytes 1-8 is displayed until a tape
; 3509 :         ||       cartridge is physically removed from the tape drive,
; 3510 :         ||       or until the drive is next loaded. The message in
; 3511 :         ||       bytes 9-16 is displayed until the drive is next loaded.
; 3512 :         ||       If no cartridge is present in the drive, the first
; 3513 :         ||       message is ignored and only the second message is
; 3514 :         ||       displayed until the drive is next loaded."
; 3515 :         */
; 3516 : 
; 3517 :         dev->tapedispflags = 0;

  008a5	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008ad	c6 80 61 11 00
	00 00		 mov	 BYTE PTR [rax+4449], 0

; 3518 : 
; 3519 :         STRLCPY( dev->tapemsg1, msg1 );

  008b4	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008bc	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  008c2	41 b8 09 00 00
	00		 mov	 r8d, 9
  008c8	48 8d 94 24 d8
	01 00 00	 lea	 rdx, QWORD PTR msg1$[rsp]
  008d0	48 8b c8	 mov	 rcx, rax
  008d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 3520 :         STRLCPY( dev->tapemsg2, msg2 );

  008d9	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008e1	48 05 29 11 00
	00		 add	 rax, 4393		; 00001129H
  008e7	41 b8 09 00 00
	00		 mov	 r8d, 9
  008ed	48 8d 94 24 e8
	01 00 00	 lea	 rdx, QWORD PTR msg2$[rsp]
  008f5	48 8b c8	 mov	 rcx, rax
  008f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 3521 : 
; 3522 :         if ( tapeloaded )

  008fe	0f b6 44 24 78	 movzx	 eax, BYTE PTR tapeloaded$[rsp]
  00903	85 c0		 test	 eax, eax
  00905	0f 84 b2 02 00
	00		 je	 $LN22@load_displ

; 3523 :         {
; 3524 :             dev->tapedisptype  = TAPEDISPTYP_UMOUNTMOUNT;

  0090b	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00913	c6 80 60 11 00
	00 08		 mov	 BYTE PTR [rax+4448], 8

; 3525 :             dev->tapedispflags = TAPEDISPFLG_REQAUTOMNT;

  0091a	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00922	c6 80 61 11 00
	00 08		 mov	 BYTE PTR [rax+4449], 8

; 3526 : 
; 3527 :             if (dev->ccwtrace)

  00929	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00931	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00937	c1 e8 0f	 shr	 eax, 15
  0093a	83 e0 01	 and	 eax, 1
  0093d	85 c0		 test	 eax, eax
  0093f	0f 84 73 02 00
	00		 je	 $LN24@load_displ

; 3528 :                 WRMSG(HHC00219, "I", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), dev->tapemsg1, dev->tapemsg2 );

  00945	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0094d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00954	83 f8 01	 cmp	 eax, 1
  00957	75 14		 jne	 SHORT $LN76@load_displ
  00959	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169927
  00960	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv339[rsp], rax
  00968	e9 1e 01 00 00	 jmp	 $LN77@load_displ
$LN76@load_displ:
  0096d	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00975	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0097c	83 f8 02	 cmp	 eax, 2
  0097f	75 14		 jne	 SHORT $LN74@load_displ
  00981	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169928
  00988	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv338[rsp], rax
  00990	e9 e6 00 00 00	 jmp	 $LN75@load_displ
$LN74@load_displ:
  00995	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0099d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  009a4	83 f8 03	 cmp	 eax, 3
  009a7	75 14		 jne	 SHORT $LN72@load_displ
  009a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169929
  009b0	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv337[rsp], rax
  009b8	e9 ae 00 00 00	 jmp	 $LN73@load_displ
$LN72@load_displ:
  009bd	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009c5	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  009cc	83 f8 04	 cmp	 eax, 4
  009cf	75 11		 jne	 SHORT $LN70@load_displ
  009d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169930
  009d8	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv336[rsp], rax
  009e0	eb 79		 jmp	 SHORT $LN71@load_displ
$LN70@load_displ:
  009e2	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009ea	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  009f1	83 f8 05	 cmp	 eax, 5
  009f4	75 11		 jne	 SHORT $LN68@load_displ
  009f6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169931
  009fd	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv335[rsp], rax
  00a05	eb 44		 jmp	 SHORT $LN69@load_displ
$LN68@load_displ:
  00a07	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a0f	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00a16	83 f8 06	 cmp	 eax, 6
  00a19	75 11		 jne	 SHORT $LN66@load_displ
  00a1b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169932
  00a22	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv334[rsp], rax
  00a2a	eb 0f		 jmp	 SHORT $LN67@load_displ
$LN66@load_displ:
  00a2c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169933
  00a33	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv334[rsp], rax
$LN67@load_displ:
  00a3b	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR tv334[rsp]
  00a43	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv335[rsp], rax
$LN69@load_displ:
  00a4b	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR tv335[rsp]
  00a53	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv336[rsp], rax
$LN71@load_displ:
  00a5b	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR tv336[rsp]
  00a63	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv337[rsp], rax
$LN73@load_displ:
  00a6b	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR tv337[rsp]
  00a73	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv338[rsp], rax
$LN75@load_displ:
  00a7b	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR tv338[rsp]
  00a83	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv339[rsp], rax
$LN77@load_displ:
  00a8b	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00a94	74 15		 je	 SHORT $LN78@load_displ
  00a96	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a9e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00aa2	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv346[rsp], eax
  00aa9	eb 0b		 jmp	 SHORT $LN79@load_displ
$LN78@load_displ:
  00aab	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv346[rsp], 0
$LN79@load_displ:
  00ab6	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00abf	74 17		 je	 SHORT $LN80@load_displ
  00ac1	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ac9	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00acd	d1 f8		 sar	 eax, 1
  00acf	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv352[rsp], eax
  00ad6	eb 0b		 jmp	 SHORT $LN81@load_displ
$LN80@load_displ:
  00ad8	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv352[rsp], 0
$LN81@load_displ:
  00ae3	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00aeb	48 05 29 11 00
	00		 add	 rax, 4393		; 00001129H
  00af1	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv312[rsp], rax
  00af9	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b01	48 81 c1 20 11
	00 00		 add	 rcx, 4384		; 00001120H
  00b08	48 89 8c 24 b8
	01 00 00	 mov	 QWORD PTR tv314[rsp], rcx
  00b10	48 8b 94 24 10
	02 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00b18	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  00b1f	48 89 94 24 c0
	01 00 00	 mov	 QWORD PTR tv341[rsp], rdx
  00b27	b9 01 00 00 00	 mov	 ecx, 1
  00b2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00b32	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tv312[rsp]
  00b3a	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00b3f	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR tv314[rsp]
  00b47	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00b4c	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tv339[rsp]
  00b54	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00b59	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR tv341[rsp]
  00b61	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00b66	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv346[rsp]
  00b6d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00b71	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv352[rsp]
  00b78	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00b7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169934
  00b83	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b88	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169935
  00b8f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b94	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b99	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b9f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169936
  00ba6	ba c8 0d 00 00	 mov	 edx, 3528		; 00000dc8H
  00bab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169937
  00bb2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN24@load_displ:

; 3529 :         }

  00bb8	e9 89 02 00 00	 jmp	 $LN23@load_displ
$LN22@load_displ:

; 3530 :         else
; 3531 :         {
; 3532 :             dev->tapedisptype  = TAPEDISPTYP_MOUNT;

  00bbd	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00bc5	c6 80 60 11 00
	00 06		 mov	 BYTE PTR [rax+4448], 6

; 3533 :             dev->tapedispflags = TAPEDISPFLG_MESSAGE2 | TAPEDISPFLG_REQAUTOMNT;

  00bcc	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00bd4	c6 80 61 11 00
	00 28		 mov	 BYTE PTR [rax+4449], 40	; 00000028H

; 3534 : 
; 3535 :             if (dev->ccwtrace)

  00bdb	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00be3	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00be9	c1 e8 0f	 shr	 eax, 15
  00bec	83 e0 01	 and	 eax, 1
  00bef	85 c0		 test	 eax, eax
  00bf1	0f 84 4f 02 00
	00		 je	 $LN25@load_displ

; 3536 :                 WRMSG(HHC00218, "I", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), dev->tapemsg2 );

  00bf7	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00bff	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00c06	83 f8 01	 cmp	 eax, 1
  00c09	75 14		 jne	 SHORT $LN92@load_displ
  00c0b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169939
  00c12	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv426[rsp], rax
  00c1a	e9 1e 01 00 00	 jmp	 $LN93@load_displ
$LN92@load_displ:
  00c1f	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c27	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00c2e	83 f8 02	 cmp	 eax, 2
  00c31	75 14		 jne	 SHORT $LN90@load_displ
  00c33	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169940
  00c3a	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv425[rsp], rax
  00c42	e9 e6 00 00 00	 jmp	 $LN91@load_displ
$LN90@load_displ:
  00c47	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c4f	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00c56	83 f8 03	 cmp	 eax, 3
  00c59	75 14		 jne	 SHORT $LN88@load_displ
  00c5b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169941
  00c62	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv424[rsp], rax
  00c6a	e9 ae 00 00 00	 jmp	 $LN89@load_displ
$LN88@load_displ:
  00c6f	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c77	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00c7e	83 f8 04	 cmp	 eax, 4
  00c81	75 11		 jne	 SHORT $LN86@load_displ
  00c83	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169942
  00c8a	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv423[rsp], rax
  00c92	eb 79		 jmp	 SHORT $LN87@load_displ
$LN86@load_displ:
  00c94	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c9c	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00ca3	83 f8 05	 cmp	 eax, 5
  00ca6	75 11		 jne	 SHORT $LN84@load_displ
  00ca8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169943
  00caf	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv422[rsp], rax
  00cb7	eb 44		 jmp	 SHORT $LN85@load_displ
$LN84@load_displ:
  00cb9	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00cc1	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00cc8	83 f8 06	 cmp	 eax, 6
  00ccb	75 11		 jne	 SHORT $LN82@load_displ
  00ccd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169944
  00cd4	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv421[rsp], rax
  00cdc	eb 0f		 jmp	 SHORT $LN83@load_displ
$LN82@load_displ:
  00cde	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169945
  00ce5	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv421[rsp], rax
$LN83@load_displ:
  00ced	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR tv421[rsp]
  00cf5	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv422[rsp], rax
$LN85@load_displ:
  00cfd	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR tv422[rsp]
  00d05	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv423[rsp], rax
$LN87@load_displ:
  00d0d	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR tv423[rsp]
  00d15	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv424[rsp], rax
$LN89@load_displ:
  00d1d	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR tv424[rsp]
  00d25	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv425[rsp], rax
$LN91@load_displ:
  00d2d	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR tv425[rsp]
  00d35	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv426[rsp], rax
$LN93@load_displ:
  00d3d	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00d46	74 15		 je	 SHORT $LN94@load_displ
  00d48	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d50	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00d54	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv433[rsp], eax
  00d5b	eb 0b		 jmp	 SHORT $LN95@load_displ
$LN94@load_displ:
  00d5d	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv433[rsp], 0
$LN95@load_displ:
  00d68	48 83 bc 24 10
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00d71	74 17		 je	 SHORT $LN96@load_displ
  00d73	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d7b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00d7f	d1 f8		 sar	 eax, 1
  00d81	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv439[rsp], eax
  00d88	eb 0b		 jmp	 SHORT $LN97@load_displ
$LN96@load_displ:
  00d8a	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv439[rsp], 0
$LN97@load_displ:
  00d95	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d9d	48 05 29 11 00
	00		 add	 rax, 4393		; 00001129H
  00da3	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv369[rsp], rax
  00dab	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00db3	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00dba	48 89 8c 24 d0
	01 00 00	 mov	 QWORD PTR tv428[rsp], rcx
  00dc2	b9 01 00 00 00	 mov	 ecx, 1
  00dc7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00dcd	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR tv369[rsp]
  00dd5	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00dda	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR tv426[rsp]
  00de2	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00de7	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR tv428[rsp]
  00def	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00df4	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv433[rsp]
  00dfb	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00dff	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv439[rsp]
  00e06	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00e0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169946
  00e11	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169947
  00e1d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e22	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e27	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e2d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169948
  00e34	ba d0 0d 00 00	 mov	 edx, 3536		; 00000dd0H
  00e39	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169949
  00e40	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN25@load_displ:
$LN23@load_displ:
$LN8@load_displ:

; 3537 :         }
; 3538 : 
; 3539 :         break;
; 3540 :     }
; 3541 : 
; 3542 :     /* Set the flags... */
; 3543 : 
; 3544 :     /*
; 3545 :         "When bit 7 (FCB_AL) is active and bits 0-2 (FCB_FS) specify
; 3546 :         a Mount Message, then only the first eight characters of the
; 3547 :         message are displayed and bits 3-5 (FCB_AM, FCB_BM, FCB_M2)
; 3548 :         are ignored."
; 3549 :     */
; 3550 :     if (1
; 3551 :         &&   ( fcb & FCB_AL )
; 3552 :         && ( ( fcb & FCB_FS ) == FCB_FS_MOUNT )

  00e46	33 c0		 xor	 eax, eax
  00e48	83 f8 01	 cmp	 eax, 1
  00e4b	74 47		 je	 SHORT $LN26@load_displ
  00e4d	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  00e52	83 e0 01	 and	 eax, 1
  00e55	85 c0		 test	 eax, eax
  00e57	74 3b		 je	 SHORT $LN26@load_displ
  00e59	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  00e5e	25 e0 00 00 00	 and	 eax, 224		; 000000e0H
  00e63	83 f8 40	 cmp	 eax, 64			; 00000040H
  00e66	75 2c		 jne	 SHORT $LN26@load_displ

; 3553 :     )
; 3554 :     {
; 3555 :         fcb  &=  ~( FCB_AM | FCB_BM | FCB_M2 );

  00e68	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  00e6d	83 e0 e3	 and	 eax, -29
  00e70	88 44 24 70	 mov	 BYTE PTR fcb$[rsp], al

; 3556 :         dev->tapedispflags &= ~TAPEDISPFLG_MESSAGE2;

  00e74	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e7c	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  00e83	83 e0 df	 and	 eax, -33		; ffffffffffffffdfH
  00e86	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00e8e	88 81 61 11 00
	00		 mov	 BYTE PTR [rcx+4449], al
$LN26@load_displ:

; 3557 :     }
; 3558 : 
; 3559 :     /*
; 3560 :         "When bit 7 (FCB_AL) is active and bits 0-2 (FCB_FS) specify
; 3561 :         a Demount/Mount message, then only the last eight characters
; 3562 :         of the message are displayed. Bits 3-5 (FCB_AM, FCB_BM, FCB_M2)
; 3563 :         are ignored."
; 3564 :     */
; 3565 :     if (1
; 3566 :         &&   ( fcb & FCB_AL )
; 3567 :         && ( ( fcb & FCB_FS ) == FCB_FS_UMOUNTMOUNT )

  00e94	33 c0		 xor	 eax, eax
  00e96	83 f8 01	 cmp	 eax, 1
  00e99	74 49		 je	 SHORT $LN27@load_displ
  00e9b	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  00ea0	83 e0 01	 and	 eax, 1
  00ea3	85 c0		 test	 eax, eax
  00ea5	74 3d		 je	 SHORT $LN27@load_displ
  00ea7	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  00eac	25 e0 00 00 00	 and	 eax, 224		; 000000e0H
  00eb1	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  00eb6	75 2c		 jne	 SHORT $LN27@load_displ

; 3568 :     )
; 3569 :     {
; 3570 :         fcb  &=  ~( FCB_AM | FCB_BM | FCB_M2 );

  00eb8	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  00ebd	83 e0 e3	 and	 eax, -29
  00ec0	88 44 24 70	 mov	 BYTE PTR fcb$[rsp], al

; 3571 :         dev->tapedispflags |= TAPEDISPFLG_MESSAGE2;

  00ec4	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ecc	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  00ed3	83 c8 20	 or	 eax, 32			; 00000020H
  00ed6	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ede	88 81 61 11 00
	00		 mov	 BYTE PTR [rcx+4449], al
$LN27@load_displ:

; 3572 :     }
; 3573 : 
; 3574 :     /*
; 3575 :         "When bit 3 (FCB_AM) is set to 1, then bits 4 (FCB_BM) and 5
; 3576 :         (FCB_M2) are ignored."
; 3577 :     */
; 3578 :     if ( fcb & FCB_AM )

  00ee4	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  00ee9	83 e0 10	 and	 eax, 16
  00eec	85 c0		 test	 eax, eax
  00eee	74 0c		 je	 SHORT $LN28@load_displ

; 3579 :         fcb  &=  ~( FCB_BM | FCB_M2 );

  00ef0	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  00ef5	83 e0 f3	 and	 eax, -13
  00ef8	88 44 24 70	 mov	 BYTE PTR fcb$[rsp], al
$LN28@load_displ:

; 3580 : 
; 3581 :     dev->tapedispflags |= (((fcb & FCB_AM) ? TAPEDISPFLG_ALTERNATE  : 0 ) |

  00efc	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  00f01	83 e0 10	 and	 eax, 16
  00f04	85 c0		 test	 eax, eax
  00f06	74 0d		 je	 SHORT $LN98@load_displ
  00f08	c7 84 24 b0 00
	00 00 80 00 00
	00		 mov	 DWORD PTR tv491[rsp], 128 ; 00000080H
  00f13	eb 0b		 jmp	 SHORT $LN99@load_displ
$LN98@load_displ:
  00f15	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv491[rsp], 0
$LN99@load_displ:
  00f20	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  00f25	83 e0 08	 and	 eax, 8
  00f28	85 c0		 test	 eax, eax
  00f2a	74 0d		 je	 SHORT $LN100@load_displ
  00f2c	c7 84 24 ac 00
	00 00 40 00 00
	00		 mov	 DWORD PTR tv495[rsp], 64 ; 00000040H
  00f37	eb 0b		 jmp	 SHORT $LN101@load_displ
$LN100@load_displ:
  00f39	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv495[rsp], 0
$LN101@load_displ:
  00f44	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  00f49	83 e0 04	 and	 eax, 4
  00f4c	85 c0		 test	 eax, eax
  00f4e	74 0d		 je	 SHORT $LN102@load_displ
  00f50	c7 84 24 b4 00
	00 00 20 00 00
	00		 mov	 DWORD PTR tv500[rsp], 32 ; 00000020H
  00f5b	eb 0b		 jmp	 SHORT $LN103@load_displ
$LN102@load_displ:
  00f5d	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv500[rsp], 0
$LN103@load_displ:
  00f68	0f b6 44 24 70	 movzx	 eax, BYTE PTR fcb$[rsp]
  00f6d	83 e0 01	 and	 eax, 1
  00f70	85 c0		 test	 eax, eax
  00f72	74 0d		 je	 SHORT $LN104@load_displ
  00f74	c7 84 24 b8 00
	00 00 10 00 00
	00		 mov	 DWORD PTR tv505[rsp], 16
  00f7f	eb 0b		 jmp	 SHORT $LN105@load_displ
$LN104@load_displ:
  00f81	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv505[rsp], 0
$LN105@load_displ:
  00f8c	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv495[rsp]
  00f93	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv491[rsp]
  00f9a	0b c8		 or	 ecx, eax
  00f9c	8b c1		 mov	 eax, ecx
  00f9e	0b 84 24 b4 00
	00 00		 or	 eax, DWORD PTR tv500[rsp]
  00fa5	0b 84 24 b8 00
	00 00		 or	 eax, DWORD PTR tv505[rsp]
  00fac	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00fb4	0f b6 89 61 11
	00 00		 movzx	 ecx, BYTE PTR [rcx+4449]
  00fbb	0b c8		 or	 ecx, eax
  00fbd	8b c1		 mov	 eax, ecx
  00fbf	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00fc7	88 81 61 11 00
	00		 mov	 BYTE PTR [rcx+4449], al

; 3582 :                           ( (fcb & FCB_BM) ? TAPEDISPFLG_BLINKING   : 0 ) |
; 3583 :                           ( (fcb & FCB_M2) ? TAPEDISPFLG_MESSAGE2   : 0 ) |
; 3584 :                           ( (fcb & FCB_AL) ? TAPEDISPFLG_AUTOLOADER : 0 ));
; 3585 : 
; 3586 :     UpdateDisplay( dev );

  00fcd	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00fd5	e8 00 00 00 00	 call	 UpdateDisplay

; 3587 :     rc = ReqAutoMount( dev );

  00fda	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00fe2	e8 00 00 00 00	 call	 ReqAutoMount
  00fe7	89 44 24 7c	 mov	 DWORD PTR rc$[rsp], eax

; 3588 :     return rc;

  00feb	8b 44 24 7c	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@load_displ:
$LN29@load_displ:

; 3589 : 
; 3590 : } /* end function load_display */

  00fef	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00ff7	48 33 cc	 xor	 rcx, rsp
  00ffa	e8 00 00 00 00	 call	 __security_check_cookie
  00fff	48 81 c4 00 02
	00 00		 add	 rsp, 512		; 00000200H
  01006	5f		 pop	 rdi
  01007	c3		 ret	 0
$LN107@load_displ:
  01008	00 00 00 00	 DD	 $LN11@load_displ
  0100c	00 00 00 00	 DD	 $LN12@load_displ
  01010	00 00 00 00	 DD	 $LN15@load_displ
  01014	00 00 00 00	 DD	 $LN18@load_displ
  01018	00 00 00 00	 DD	 $LN20@load_displ
  0101c	00 00 00 00	 DD	 $LN21@load_displ
  01020	00 00 00 00	 DD	 $LN19@load_displ
$LN106@load_displ:
  01024	00		 DB	 0
  01025	06		 DB	 6
  01026	06		 DB	 6
  01027	06		 DB	 6
  01028	06		 DB	 6
  01029	06		 DB	 6
  0102a	06		 DB	 6
  0102b	06		 DB	 6
  0102c	06		 DB	 6
  0102d	06		 DB	 6
  0102e	06		 DB	 6
  0102f	06		 DB	 6
  01030	06		 DB	 6
  01031	06		 DB	 6
  01032	06		 DB	 6
  01033	06		 DB	 6
  01034	06		 DB	 6
  01035	06		 DB	 6
  01036	06		 DB	 6
  01037	06		 DB	 6
  01038	06		 DB	 6
  01039	06		 DB	 6
  0103a	06		 DB	 6
  0103b	06		 DB	 6
  0103c	06		 DB	 6
  0103d	06		 DB	 6
  0103e	06		 DB	 6
  0103f	06		 DB	 6
  01040	06		 DB	 6
  01041	06		 DB	 6
  01042	06		 DB	 6
  01043	06		 DB	 6
  01044	01		 DB	 1
  01045	06		 DB	 6
  01046	06		 DB	 6
  01047	06		 DB	 6
  01048	06		 DB	 6
  01049	06		 DB	 6
  0104a	06		 DB	 6
  0104b	06		 DB	 6
  0104c	06		 DB	 6
  0104d	06		 DB	 6
  0104e	06		 DB	 6
  0104f	06		 DB	 6
  01050	06		 DB	 6
  01051	06		 DB	 6
  01052	06		 DB	 6
  01053	06		 DB	 6
  01054	06		 DB	 6
  01055	06		 DB	 6
  01056	06		 DB	 6
  01057	06		 DB	 6
  01058	06		 DB	 6
  01059	06		 DB	 6
  0105a	06		 DB	 6
  0105b	06		 DB	 6
  0105c	06		 DB	 6
  0105d	06		 DB	 6
  0105e	06		 DB	 6
  0105f	06		 DB	 6
  01060	06		 DB	 6
  01061	06		 DB	 6
  01062	06		 DB	 6
  01063	06		 DB	 6
  01064	02		 DB	 2
  01065	06		 DB	 6
  01066	06		 DB	 6
  01067	06		 DB	 6
  01068	06		 DB	 6
  01069	06		 DB	 6
  0106a	06		 DB	 6
  0106b	06		 DB	 6
  0106c	06		 DB	 6
  0106d	06		 DB	 6
  0106e	06		 DB	 6
  0106f	06		 DB	 6
  01070	06		 DB	 6
  01071	06		 DB	 6
  01072	06		 DB	 6
  01073	06		 DB	 6
  01074	06		 DB	 6
  01075	06		 DB	 6
  01076	06		 DB	 6
  01077	06		 DB	 6
  01078	06		 DB	 6
  01079	06		 DB	 6
  0107a	06		 DB	 6
  0107b	06		 DB	 6
  0107c	06		 DB	 6
  0107d	06		 DB	 6
  0107e	06		 DB	 6
  0107f	06		 DB	 6
  01080	06		 DB	 6
  01081	06		 DB	 6
  01082	06		 DB	 6
  01083	06		 DB	 6
  01084	03		 DB	 3
  01085	06		 DB	 6
  01086	06		 DB	 6
  01087	06		 DB	 6
  01088	06		 DB	 6
  01089	06		 DB	 6
  0108a	06		 DB	 6
  0108b	06		 DB	 6
  0108c	06		 DB	 6
  0108d	06		 DB	 6
  0108e	06		 DB	 6
  0108f	06		 DB	 6
  01090	06		 DB	 6
  01091	06		 DB	 6
  01092	06		 DB	 6
  01093	06		 DB	 6
  01094	06		 DB	 6
  01095	06		 DB	 6
  01096	06		 DB	 6
  01097	06		 DB	 6
  01098	06		 DB	 6
  01099	06		 DB	 6
  0109a	06		 DB	 6
  0109b	06		 DB	 6
  0109c	06		 DB	 6
  0109d	06		 DB	 6
  0109e	06		 DB	 6
  0109f	06		 DB	 6
  010a0	06		 DB	 6
  010a1	06		 DB	 6
  010a2	06		 DB	 6
  010a3	06		 DB	 6
  010a4	04		 DB	 4
  010a5	06		 DB	 6
  010a6	06		 DB	 6
  010a7	06		 DB	 6
  010a8	06		 DB	 6
  010a9	06		 DB	 6
  010aa	06		 DB	 6
  010ab	06		 DB	 6
  010ac	06		 DB	 6
  010ad	06		 DB	 6
  010ae	06		 DB	 6
  010af	06		 DB	 6
  010b0	06		 DB	 6
  010b1	06		 DB	 6
  010b2	06		 DB	 6
  010b3	06		 DB	 6
  010b4	06		 DB	 6
  010b5	06		 DB	 6
  010b6	06		 DB	 6
  010b7	06		 DB	 6
  010b8	06		 DB	 6
  010b9	06		 DB	 6
  010ba	06		 DB	 6
  010bb	06		 DB	 6
  010bc	06		 DB	 6
  010bd	06		 DB	 6
  010be	06		 DB	 6
  010bf	06		 DB	 6
  010c0	06		 DB	 6
  010c1	06		 DB	 6
  010c2	06		 DB	 6
  010c3	06		 DB	 6
  010c4	06		 DB	 6
  010c5	06		 DB	 6
  010c6	06		 DB	 6
  010c7	06		 DB	 6
  010c8	06		 DB	 6
  010c9	06		 DB	 6
  010ca	06		 DB	 6
  010cb	06		 DB	 6
  010cc	06		 DB	 6
  010cd	06		 DB	 6
  010ce	06		 DB	 6
  010cf	06		 DB	 6
  010d0	06		 DB	 6
  010d1	06		 DB	 6
  010d2	06		 DB	 6
  010d3	06		 DB	 6
  010d4	06		 DB	 6
  010d5	06		 DB	 6
  010d6	06		 DB	 6
  010d7	06		 DB	 6
  010d8	06		 DB	 6
  010d9	06		 DB	 6
  010da	06		 DB	 6
  010db	06		 DB	 6
  010dc	06		 DB	 6
  010dd	06		 DB	 6
  010de	06		 DB	 6
  010df	06		 DB	 6
  010e0	06		 DB	 6
  010e1	06		 DB	 6
  010e2	06		 DB	 6
  010e3	06		 DB	 6
  010e4	06		 DB	 6
  010e5	06		 DB	 6
  010e6	06		 DB	 6
  010e7	06		 DB	 6
  010e8	06		 DB	 6
  010e9	06		 DB	 6
  010ea	06		 DB	 6
  010eb	06		 DB	 6
  010ec	06		 DB	 6
  010ed	06		 DB	 6
  010ee	06		 DB	 6
  010ef	06		 DB	 6
  010f0	06		 DB	 6
  010f1	06		 DB	 6
  010f2	06		 DB	 6
  010f3	06		 DB	 6
  010f4	06		 DB	 6
  010f5	06		 DB	 6
  010f6	06		 DB	 6
  010f7	06		 DB	 6
  010f8	06		 DB	 6
  010f9	06		 DB	 6
  010fa	06		 DB	 6
  010fb	06		 DB	 6
  010fc	06		 DB	 6
  010fd	06		 DB	 6
  010fe	06		 DB	 6
  010ff	06		 DB	 6
  01100	06		 DB	 6
  01101	06		 DB	 6
  01102	06		 DB	 6
  01103	06		 DB	 6
  01104	05		 DB	 5
load_display ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapeccws.c
_TEXT	SEGMENT
len$ = 112
num$ = 116
rc$ = 120
parm$1 = 124
order$2 = 125
i$3 = 128
bEnable$4 = 132
flag$5 = 133
bEnable$6 = 134
rej$7 = 136
locblock$8 = 140
tv294 = 144
tv2137 = 148
rustat$ = 152
drc$ = 156
minlen$9 = 160
argc$10 = 164
tv2563 = 168
tv2858 = 172
argv$11 = 176
tv174 = 184
tv180 = 188
tv211 = 192
tv399 = 196
tv435 = 200
tv546 = 204
tv693 = 208
tv828 = 212
errcode$12 = 216
tv866 = 220
tv868 = 224
tv882 = 228
tv974 = 232
tv1051 = 236
tv1151 = 240
tv1265 = 244
tv1271 = 248
tv1298 = 252
tv1332 = 256
tv1338 = 260
tv1391 = 264
tv1397 = 268
tv1490 = 272
tv1496 = 276
tv1639 = 280
tv1645 = 284
tv1719 = 288
tv1725 = 292
tv1780 = 296
tv1786 = 300
tv1859 = 304
tv1865 = 308
tv1903 = 312
tv1974 = 316
tv2016 = 320
tv2022 = 324
errcode$13 = 328
tv2102 = 332
tv2140 = 336
tv2143 = 340
tv2158 = 344
tv2170 = 348
tv2173 = 352
tv2194 = 356
tv2209 = 360
tv2222 = 364
tv2238 = 368
tv2255 = 372
tv2268 = 376
tv2411 = 380
tv2505 = 384
tv2517 = 388
tv2551 = 392
tv2626 = 396
tv2676 = 400
tv2740 = 404
tv2779 = 408
tv2847 = 412
tv3023 = 416
tv3042 = 420
tv3062 = 424
tv79 = 428
log_blockid$14 = 432
phys_blockid$15 = 436
tamdir$16 = 440
tv142 = 448
tv2011 = 456
tv162 = 464
tv163 = 472
tv164 = 480
tv165 = 488
tv166 = 496
tv167 = 504
$T17 = 512
$T18 = 520
tv1254 = 528
tv1255 = 536
tv1256 = 544
tv1257 = 552
tv1258 = 560
tv1259 = 568
tv1321 = 576
tv1322 = 584
tv1323 = 592
tv1324 = 600
tv1325 = 608
tv1326 = 616
tv1380 = 624
tv1381 = 632
tv1382 = 640
tv1383 = 648
tv1384 = 656
tv1385 = 664
tv1479 = 672
tv1480 = 680
tv1481 = 688
tv1482 = 696
tv1483 = 704
tv1484 = 712
tv1628 = 720
tv1629 = 728
tv1630 = 736
tv1631 = 744
tv1632 = 752
tv1633 = 760
tv1708 = 768
tv1709 = 776
tv1710 = 784
tv1711 = 792
tv1712 = 800
tv1713 = 808
tv1769 = 816
tv1770 = 824
tv1771 = 832
tv1772 = 840
tv1773 = 848
tv1774 = 856
tv1815 = 864
tv1816 = 872
tv1817 = 880
tv1818 = 888
tv1819 = 896
tv1820 = 904
tv2000 = 912
tv2001 = 920
tv2002 = 928
tv2003 = 936
tv2004 = 944
tv2005 = 952
dummy_tid$19 = 960
tv169 = 968
tv657 = 976
tv873 = 984
tv1822 = 992
tv2681 = 1000
newfile$20 = 1008
thread_name$21 = 1280
resolve_in$22 = 1344
resolve_out$23 = 1616
__$ArrayPad$ = 1888
dev$ = 1936
code$ = 1944
flags$ = 1952
chained$ = 1960
count$ = 1968
prevcode$ = 1976
ccwseq$ = 1984
iobuf$ = 1992
more$ = 2000
unitstat$ = 2008
residual$ = 2016
tapedev_execute_ccw PROC

; 449  : {

$LN627:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 81 ec 78 07
	00 00		 sub	 rsp, 1912		; 00000778H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 60
	07 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@tapedev_ex:

; 450  : int     rc;                             /* Return code               */
; 451  : U32     len;     /*(see NOTE below)*/   /* Length of data block      */
; 452  : U32     num;     /*(see NOTE below)*/   /* Number of bytes to read   */
; 453  : int     drc;                            /* code disposition          */
; 454  : BYTE    rustat;                         /* Addl CSW stat on RewUnld  */
; 455  : 
; 456  :     UNREFERENCED( ccwseq );

  0002e	33 c0		 xor	 eax, eax
  00030	85 c0		 test	 eax, eax
  00032	75 fa		 jne	 SHORT $LN4@tapedev_ex

; 457  : 
; 458  :     /* PROGRAMMING NOTE: len, num, count, *residual and *more are
; 459  :        used and updated automatically by the RESIDUAL_CALC macro */
; 460  : 
; 461  :     /* Reset flags at start of CCW chain */
; 462  :     if (dev->ccwseq == 0)

  00034	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0003c	83 b8 7c 02 00
	00 00		 cmp	 DWORD PTR [rax+636], 0
  00043	75 51		 jne	 SHORT $LN35@tapedev_ex

; 463  :     {
; 464  :         dev->supvr_inhibit = 0;         /* (reset to default mode)   */

  00045	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0004d	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00053	0f ba f0 07	 btr	 eax, 7
  00057	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0005f	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 465  :         dev->write_immed   = 0;         /* (reset to default mode)   */

  00065	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0006d	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00073	0f ba f0 08	 btr	 eax, 8
  00077	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0007f	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 466  :         dev->tapssdlen     = 0;         /* (clear all subsys data)   */

  00085	33 c0		 xor	 eax, eax
  00087	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0008f	66 89 81 20 10
	00 00		 mov	 WORD PTR [rcx+4128], ax
$LN35@tapedev_ex:

; 467  :     }
; 468  : 
; 469  :     /* If this is a data-chained READ, then return any data remaining
; 470  :        in the buffer which was not used by the previous CCW */
; 471  :     if (chained & CCW_FLAGS_CD)

  00096	0f b6 84 24 a8
	07 00 00	 movzx	 eax, BYTE PTR chained$[rsp]
  0009e	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000a3	85 c0		 test	 eax, eax
  000a5	0f 84 0a 01 00
	00		 je	 $LN36@tapedev_ex

; 472  :     {
; 473  :         /* Calculate number of bytes to read and residual byte count */
; 474  :         RESIDUAL_CALC (dev->curblkrem);

  000ab	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000b3	8b 80 18 10 00
	00		 mov	 eax, DWORD PTR [rax+4120]
  000b9	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  000bd	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  000c1	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  000c8	73 10		 jae	 SHORT $LN378@tapedev_ex
  000ca	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  000d1	89 84 24 ac 01
	00 00		 mov	 DWORD PTR tv79[rsp], eax
  000d8	eb 0b		 jmp	 SHORT $LN379@tapedev_ex
$LN378@tapedev_ex:
  000da	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  000de	89 84 24 ac 01
	00 00		 mov	 DWORD PTR tv79[rsp], eax
$LN379@tapedev_ex:
  000e5	8b 84 24 ac 01
	00 00		 mov	 eax, DWORD PTR tv79[rsp]
  000ec	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  000f0	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  000f4	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  000fb	2b c8		 sub	 ecx, eax
  000fd	8b c1		 mov	 eax, ecx
  000ff	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  00107	89 01		 mov	 DWORD PTR [rcx], eax
  00109	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0010d	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  00114	73 0b		 jae	 SHORT $LN37@tapedev_ex
  00116	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  0011e	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN37@tapedev_ex:

; 475  : 
; 476  :         if (IS_CCW_RDBACK(code))

  00121	0f b6 84 24 98
	07 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00129	83 e0 0f	 and	 eax, 15
  0012c	83 f8 0c	 cmp	 eax, 12
  0012f	75 02		 jne	 SHORT $LN38@tapedev_ex

; 477  :         {
; 478  :             /* We don't need to move anything in this case - just set length */
; 479  :         }

  00131	eb 30		 jmp	 SHORT $LN39@tapedev_ex
$LN38@tapedev_ex:

; 480  :         else
; 481  :         {
; 482  :             memcpy (iobuf, dev->buf + dev->curbufoff, num);

  00133	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  00137	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0013f	8b 89 1c 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4124]
  00145	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0014d	48 03 8a c8 01
	00 00		 add	 rcx, QWORD PTR [rdx+456]
  00154	48 8b bc 24 c8
	07 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  0015c	48 8b f1	 mov	 rsi, rcx
  0015f	8b c8		 mov	 ecx, eax
  00161	f3 a4		 rep movsb
$LN39@tapedev_ex:

; 483  :         }
; 484  : 
; 485  :         /* Save size and offset of data not used by this CCW */
; 486  :         dev->curblkrem -= num;

  00163	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0016b	8b 4c 24 74	 mov	 ecx, DWORD PTR num$[rsp]
  0016f	8b 80 18 10 00
	00		 mov	 eax, DWORD PTR [rax+4120]
  00175	2b c1		 sub	 eax, ecx
  00177	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0017f	89 81 18 10 00
	00		 mov	 DWORD PTR [rcx+4120], eax

; 487  :         dev->curbufoff += num;

  00185	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0018d	8b 80 1c 10 00
	00		 mov	 eax, DWORD PTR [rax+4124]
  00193	03 44 24 74	 add	 eax, DWORD PTR num$[rsp]
  00197	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0019f	89 81 1c 10 00
	00		 mov	 DWORD PTR [rcx+4124], eax

; 488  : 
; 489  :         *unitstat = CSW_CE | CSW_DE;

  001a5	48 8b 84 24 d8
	07 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  001ad	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 490  :         return;

  001b0	e9 14 67 00 00	 jmp	 $LN1@tapedev_ex
$LN36@tapedev_ex:

; 491  :     }
; 492  : 
; 493  :     /* Command reject if data chaining and command is not a read type */
; 494  :     if ((flags & CCW_FLAGS_CD) &&

  001b5	0f b6 84 24 a0
	07 00 00	 movzx	 eax, BYTE PTR flags$[rsp]
  001bd	25 80 00 00 00	 and	 eax, 128		; 00000080H
  001c2	85 c0		 test	 eax, eax
  001c4	0f 84 96 02 00
	00		 je	 $LN40@tapedev_ex
  001ca	0f b6 84 24 98
	07 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  001d2	83 e0 03	 and	 eax, 3
  001d5	83 f8 02	 cmp	 eax, 2
  001d8	0f 84 82 02 00
	00		 je	 $LN40@tapedev_ex
  001de	0f b6 84 24 98
	07 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  001e6	83 e0 0f	 and	 eax, 15
  001e9	83 f8 0c	 cmp	 eax, 12
  001ec	0f 84 6e 02 00
	00		 je	 $LN40@tapedev_ex

; 495  :         !(IS_CCW_READ(code) || IS_CCW_RDBACK(code)))
; 496  :     {
; 497  :         WRMSG(HHC00212, "E", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), code);

  001f2	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001fa	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00201	83 f8 01	 cmp	 eax, 1
  00204	75 14		 jne	 SHORT $LN390@tapedev_ex
  00206	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169351
  0020d	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv167[rsp], rax
  00215	e9 1e 01 00 00	 jmp	 $LN391@tapedev_ex
$LN390@tapedev_ex:
  0021a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00222	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00229	83 f8 02	 cmp	 eax, 2
  0022c	75 14		 jne	 SHORT $LN388@tapedev_ex
  0022e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169352
  00235	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv166[rsp], rax
  0023d	e9 e6 00 00 00	 jmp	 $LN389@tapedev_ex
$LN388@tapedev_ex:
  00242	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0024a	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00251	83 f8 03	 cmp	 eax, 3
  00254	75 14		 jne	 SHORT $LN386@tapedev_ex
  00256	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169353
  0025d	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv165[rsp], rax
  00265	e9 ae 00 00 00	 jmp	 $LN387@tapedev_ex
$LN386@tapedev_ex:
  0026a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00272	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00279	83 f8 04	 cmp	 eax, 4
  0027c	75 11		 jne	 SHORT $LN384@tapedev_ex
  0027e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169354
  00285	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv164[rsp], rax
  0028d	eb 79		 jmp	 SHORT $LN385@tapedev_ex
$LN384@tapedev_ex:
  0028f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00297	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0029e	83 f8 05	 cmp	 eax, 5
  002a1	75 11		 jne	 SHORT $LN382@tapedev_ex
  002a3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169355
  002aa	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv163[rsp], rax
  002b2	eb 44		 jmp	 SHORT $LN383@tapedev_ex
$LN382@tapedev_ex:
  002b4	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002bc	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  002c3	83 f8 06	 cmp	 eax, 6
  002c6	75 11		 jne	 SHORT $LN380@tapedev_ex
  002c8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169356
  002cf	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv162[rsp], rax
  002d7	eb 0f		 jmp	 SHORT $LN381@tapedev_ex
$LN380@tapedev_ex:
  002d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169357
  002e0	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv162[rsp], rax
$LN381@tapedev_ex:
  002e8	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR tv162[rsp]
  002f0	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv163[rsp], rax
$LN383@tapedev_ex:
  002f8	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR tv163[rsp]
  00300	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv164[rsp], rax
$LN385@tapedev_ex:
  00308	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR tv164[rsp]
  00310	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv165[rsp], rax
$LN387@tapedev_ex:
  00318	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR tv165[rsp]
  00320	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv166[rsp], rax
$LN389@tapedev_ex:
  00328	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR tv166[rsp]
  00330	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv167[rsp], rax
$LN391@tapedev_ex:
  00338	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00341	74 15		 je	 SHORT $LN392@tapedev_ex
  00343	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0034b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0034f	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv174[rsp], eax
  00356	eb 0b		 jmp	 SHORT $LN393@tapedev_ex
$LN392@tapedev_ex:
  00358	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv174[rsp], 0
$LN393@tapedev_ex:
  00363	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0036c	74 17		 je	 SHORT $LN394@tapedev_ex
  0036e	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00376	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0037a	d1 f8		 sar	 eax, 1
  0037c	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv180[rsp], eax
  00383	eb 0b		 jmp	 SHORT $LN395@tapedev_ex
$LN394@tapedev_ex:
  00385	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv180[rsp], 0
$LN395@tapedev_ex:
  00390	0f b6 84 24 98
	07 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00398	89 84 24 c0 01
	00 00		 mov	 DWORD PTR tv142[rsp], eax
  0039f	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003a7	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  003ae	48 89 8c 24 c8
	03 00 00	 mov	 QWORD PTR tv169[rsp], rcx
  003b6	b9 01 00 00 00	 mov	 ecx, 1
  003bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003c1	8b 8c 24 c0 01
	00 00		 mov	 ecx, DWORD PTR tv142[rsp]
  003c8	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  003cc	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR tv167[rsp]
  003d4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  003d9	48 8b 8c 24 c8
	03 00 00	 mov	 rcx, QWORD PTR tv169[rsp]
  003e1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003e6	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv174[rsp]
  003ed	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003f1	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv180[rsp]
  003f8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169358
  00403	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00408	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169359
  0040f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00414	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00419	41 b9 03 00 00
	00		 mov	 r9d, 3
  0041f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169360
  00426	ba f1 01 00 00	 mov	 edx, 497		; 000001f1H
  0042b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169361
  00432	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 498  :         build_senseX(TAPE_BSENSE_BADCOMMAND,dev,unitstat,code);

  00438	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00441	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00449	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00451	b9 04 00 00 00	 mov	 ecx, 4
  00456	e8 00 00 00 00	 call	 build_senseX

; 499  :         return;

  0045b	e9 69 64 00 00	 jmp	 $LN1@tapedev_ex
$LN40@tapedev_ex:

; 500  :     }
; 501  : 
; 502  :     /* Command reject if command is not Read Subsystem Data command
; 503  :        if the previous one was a Perform Subsystem Function command
; 504  :        that prepared some subsystem data for subsequent reading
; 505  :     */
; 506  :     if (0x77 == prevcode && dev->tapssdlen && 0x3E != code)

  00460	0f b6 84 24 b8
	07 00 00	 movzx	 eax, BYTE PTR prevcode$[rsp]
  00468	83 f8 77	 cmp	 eax, 119		; 00000077H
  0046b	75 48		 jne	 SHORT $LN41@tapedev_ex
  0046d	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00475	0f b7 80 20 10
	00 00		 movzx	 eax, WORD PTR [rax+4128]
  0047c	85 c0		 test	 eax, eax
  0047e	74 35		 je	 SHORT $LN41@tapedev_ex
  00480	0f b6 84 24 98
	07 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00488	83 f8 3e	 cmp	 eax, 62			; 0000003eH
  0048b	74 28		 je	 SHORT $LN41@tapedev_ex

; 507  :     {
; 508  :         build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  0048d	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00496	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0049e	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  004a6	b9 04 00 00 00	 mov	 ecx, 4
  004ab	e8 00 00 00 00	 call	 build_senseX

; 509  :         return;

  004b0	e9 14 64 00 00	 jmp	 $LN1@tapedev_ex
$LN41@tapedev_ex:

; 510  :     }
; 511  : 
; 512  :     /* Early determination of CCW validity via TapeCommandTable lookup... */
; 513  : 
; 514  :     drc = TapeCommandIsValid (code, dev->devtype, &rustat);

  004b5	4c 8d 84 24 98
	00 00 00	 lea	 r8, QWORD PTR rustat$[rsp]
  004bd	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004c5	0f b7 50 4a	 movzx	 edx, WORD PTR [rax+74]
  004c9	0f b6 8c 24 98
	07 00 00	 movzx	 ecx, BYTE PTR code$[rsp]
  004d1	e8 00 00 00 00	 call	 TapeCommandIsValid
  004d6	89 84 24 9c 00
	00 00		 mov	 DWORD PTR drc$[rsp], eax

; 515  : 
; 516  :     switch (drc)

  004dd	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR drc$[rsp]
  004e4	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv211[rsp], eax
  004eb	83 bc 24 c0 00
	00 00 05	 cmp	 DWORD PTR tv211[rsp], 5
  004f3	77 1b		 ja	 SHORT $LN42@tapedev_ex
  004f5	48 63 84 24 c0
	00 00 00	 movsxd	 rax, DWORD PTR tv211[rsp]
  004fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00504	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN626@tapedev_ex[rcx+rax*4]
  0050b	48 03 c1	 add	 rax, rcx
  0050e	ff e0		 jmp	 rax
$LN42@tapedev_ex:
$LN9@tapedev_ex:

; 517  :     {
; 518  :         default:    /* Should NOT occur! */
; 519  : 
; 520  :             ASSERT(0);  // (fall thru to case 0 = unsupported)

  00510	33 c0		 xor	 eax, eax
  00512	83 f8 01	 cmp	 eax, 1
  00515	74 5c		 je	 SHORT $LN43@tapedev_ex
$LN12@tapedev_ex:
  00517	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169365
  0051e	41 b8 08 02 00
	00		 mov	 r8d, 520		; 00000208H
  00524	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169366
  0052b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169367
  00532	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00538	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0053e	85 c0		 test	 eax, eax
  00540	74 20		 je	 SHORT $LN44@tapedev_ex
  00542	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169369
  00549	41 b8 08 02 00
	00		 mov	 r8d, 520		; 00000208H
  0054f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169370
  00556	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169371
  0055d	e8 00 00 00 00	 call	 DebuggerTrace
$LN44@tapedev_ex:
  00562	33 c0		 xor	 eax, eax
  00564	85 c0		 test	 eax, eax
  00566	75 af		 jne	 SHORT $LN12@tapedev_ex
  00568	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0056e	85 c0		 test	 eax, eax
  00570	74 01		 je	 SHORT $LN45@tapedev_ex
  00572	cc		 int	 3
$LN45@tapedev_ex:
$LN43@tapedev_ex:
  00573	33 c0		 xor	 eax, eax
  00575	85 c0		 test	 eax, eax
  00577	75 97		 jne	 SHORT $LN9@tapedev_ex
$LN46@tapedev_ex:

; 521  :             /* FALLTHRU */
; 522  : 
; 523  :         case 0:     /* Unsupported CCW code for given device-type */
; 524  : 
; 525  :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  00579	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00582	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0058a	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00592	b9 04 00 00 00	 mov	 ecx, 4
  00597	e8 00 00 00 00	 call	 build_senseX

; 526  :             return;

  0059c	e9 28 63 00 00	 jmp	 $LN1@tapedev_ex
$LN47@tapedev_ex:

; 527  : 
; 528  :         case 1:     /* Valid - Tape MUST be loaded                    */
; 529  :             break;

  005a1	e9 e5 00 00 00	 jmp	 $LN5@tapedev_ex
$LN48@tapedev_ex:

; 530  : 
; 531  :         case 2:     /* Valid - Tape NEED NOT be loaded                */
; 532  :             break;

  005a6	e9 e0 00 00 00	 jmp	 $LN5@tapedev_ex
$LN49@tapedev_ex:

; 533  : 
; 534  :         case 3:     /* Valid - But is a NO-OP (return CE+DE now) */
; 535  : 
; 536  :             /* Command reject if the volume is currently fenced */
; 537  :             if (dev->fenced)

  005ab	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005b3	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  005b9	83 e0 01	 and	 eax, 1
  005bc	85 c0		 test	 eax, eax
  005be	74 28		 je	 SHORT $LN50@tapedev_ex

; 538  :             {
; 539  :                 build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  005c0	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  005c9	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  005d1	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  005d9	b9 0a 00 00 00	 mov	 ecx, 10
  005de	e8 00 00 00 00	 call	 build_senseX

; 540  :                 return;

  005e3	e9 e1 62 00 00	 jmp	 $LN1@tapedev_ex
$LN50@tapedev_ex:

; 541  :             }
; 542  : 
; 543  :             build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  005e8	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  005f1	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  005f9	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00601	b9 0d 00 00 00	 mov	 ecx, 13
  00606	e8 00 00 00 00	 call	 build_senseX

; 544  :             return;

  0060b	e9 b9 62 00 00	 jmp	 $LN1@tapedev_ex
$LN51@tapedev_ex:

; 545  : 
; 546  :         case 4:     /* Valid, But is a NO-OP (for virtual tapes) */
; 547  : 
; 548  :             /* Command reject if the volume is currently fenced */
; 549  :             if (dev->fenced)

  00610	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00618	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0061e	83 e0 01	 and	 eax, 1
  00621	85 c0		 test	 eax, eax
  00623	74 28		 je	 SHORT $LN52@tapedev_ex

; 550  :             {
; 551  :                 build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  00625	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0062e	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00636	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0063e	b9 0a 00 00 00	 mov	 ecx, 10
  00643	e8 00 00 00 00	 call	 build_senseX

; 552  :                 return;

  00648	e9 7c 62 00 00	 jmp	 $LN1@tapedev_ex
$LN52@tapedev_ex:

; 553  :             }
; 554  : 
; 555  :             /* If non-virtual (SCSI) then further processing required */
; 556  :             if (dev->tapedevt == TAPEDEVT_SCSITAPE)

  0064d	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00655	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0065c	83 f8 03	 cmp	 eax, 3
  0065f	75 02		 jne	 SHORT $LN53@tapedev_ex

; 557  :                 break;

  00661	eb 28		 jmp	 SHORT $LN5@tapedev_ex
$LN53@tapedev_ex:

; 558  : 
; 559  :             build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  00663	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0066c	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00674	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0067c	b9 0d 00 00 00	 mov	 ecx, 13
  00681	e8 00 00 00 00	 call	 build_senseX

; 560  :             return;

  00686	e9 3e 62 00 00	 jmp	 $LN1@tapedev_ex
$LN54@tapedev_ex:
$LN5@tapedev_ex:

; 561  : 
; 562  :         case 5:     /* Valid - Tape MUST be loaded (add DE to status) */
; 563  :             break;
; 564  :     }
; 565  :     // end switch (drc)
; 566  : 
; 567  :     /* Verify a tape is loaded if that is required for this CCW... */
; 568  : 
; 569  :     if ((1 == drc || 5 == drc) &&                               // (tape MUST be loaded?)

  0068b	83 bc 24 9c 00
	00 00 01	 cmp	 DWORD PTR drc$[rsp], 1
  00693	74 0e		 je	 SHORT $LN56@tapedev_ex
  00695	83 bc 24 9c 00
	00 00 05	 cmp	 DWORD PTR drc$[rsp], 5
  0069d	0f 85 20 01 00
	00		 jne	 $LN55@tapedev_ex
$LN56@tapedev_ex:
  006a3	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006ab	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  006b2	7c 18		 jl	 SHORT $LN57@tapedev_ex
  006b4	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006bc	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  006c3	83 f8 03	 cmp	 eax, 3
  006c6	0f 85 f7 00 00
	00		 jne	 $LN55@tapedev_ex
$LN57@tapedev_ex:

; 570  :         (dev->fd < 0 || TAPEDEVT_SCSITAPE == dev->tapedevt))    // (no tape loaded or non-virtual?)
; 571  :     {
; 572  :         *residual = count;

  006cc	48 8b 84 24 e0
	07 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  006d4	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  006db	89 08		 mov	 DWORD PTR [rax], ecx

; 573  : 
; 574  :         /* Error if tape unloaded */
; 575  :         if (!strcmp (dev->filename, TAPE_UNLOADED))

  006dd	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006e5	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  006eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169386
  006f2	48 8b c8	 mov	 rcx, rax
  006f5	e8 00 00 00 00	 call	 strcmp
  006fa	85 c0		 test	 eax, eax
  006fc	75 25		 jne	 SHORT $LN58@tapedev_ex

; 576  :         {
; 577  :             build_senseX (TAPE_BSENSE_TAPEUNLOADED, dev, unitstat, code);

  006fe	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00707	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0070f	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00717	33 c9		 xor	 ecx, ecx
  00719	e8 00 00 00 00	 call	 build_senseX

; 578  :             return;

  0071e	e9 a6 61 00 00	 jmp	 $LN1@tapedev_ex
$LN58@tapedev_ex:

; 579  :         }
; 580  : 
; 581  :         /* Open the device file if necessary */
; 582  :         if (dev->fd < 0)

  00723	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0072b	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00732	7d 3b		 jge	 SHORT $LN59@tapedev_ex

; 583  :         {
; 584  :             rc = dev->tmh->open( dev, unitstat, code );

  00734	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0073c	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00743	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  0074c	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00754	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0075c	ff 50 08	 call	 QWORD PTR [rax+8]
  0075f	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 585  : 
; 586  :             if (rc < 0)     /* Did open fail? */

  00763	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00768	7d 05		 jge	 SHORT $LN60@tapedev_ex

; 587  :             {
; 588  :                 return;     /* Yes, exit with unit status */

  0076a	e9 5a 61 00 00	 jmp	 $LN1@tapedev_ex
$LN60@tapedev_ex:
$LN59@tapedev_ex:

; 589  :             }
; 590  :         }
; 591  : 
; 592  :         /* Error if tape is not loaded */
; 593  :         if (!dev->tmh->tapeloaded( dev, unitstat, code ))

  0076f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00777	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  0077e	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  00787	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  0078f	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00797	ff 50 70	 call	 QWORD PTR [rax+112]
  0079a	85 c0		 test	 eax, eax
  0079c	75 25		 jne	 SHORT $LN61@tapedev_ex

; 594  :         {
; 595  :             build_senseX (TAPE_BSENSE_TAPEUNLOADED, dev, unitstat, code);

  0079e	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  007a7	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  007af	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  007b7	33 c9		 xor	 ecx, ecx
  007b9	e8 00 00 00 00	 call	 build_senseX

; 596  :             return;

  007be	e9 06 61 00 00	 jmp	 $LN1@tapedev_ex
$LN61@tapedev_ex:
$LN55@tapedev_ex:

; 597  :         }
; 598  :     }
; 599  : 
; 600  :     /* Process depending on CCW opcode */
; 601  :     switch (code) {

  007c3	0f b6 84 24 98
	07 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  007cb	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv294[rsp], eax
  007d2	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv294[rsp]
  007d9	ff c8		 dec	 eax
  007db	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv294[rsp], eax
  007e2	81 bc 24 90 00
	00 00 f9 00 00
	00		 cmp	 DWORD PTR tv294[rsp], 249 ; 000000f9H
  007ed	0f 87 b3 60 00
	00		 ja	 $LN376@tapedev_ex
  007f3	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR tv294[rsp]
  007fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00802	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN624@tapedev_ex[rcx+rax]
  0080a	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN625@tapedev_ex[rcx+rax*4]
  00811	48 03 c1	 add	 rax, rcx
  00814	ff e0		 jmp	 rax
$LN62@tapedev_ex:
$LN63@tapedev_ex:
$LN64@tapedev_ex:
$LN65@tapedev_ex:
$LN66@tapedev_ex:
$LN67@tapedev_ex:
$LN68@tapedev_ex:
$LN69@tapedev_ex:
$LN70@tapedev_ex:
$LN71@tapedev_ex:
$LN72@tapedev_ex:
$LN73@tapedev_ex:
$LN74@tapedev_ex:
$LN75@tapedev_ex:
$LN76@tapedev_ex:

; 602  : 
; 603  :     /*---------------------------------------------------------------*/
; 604  :     /* MODE SET   (pre-3480 and earlier drives)                      */
; 605  :     /*---------------------------------------------------------------*/
; 606  :         /* Patch to no-op modeset 1 (7-track) commands -             */
; 607  :         /*   causes VM problems                                      */
; 608  :         /* Andy Norrie 2002/10/06                                    */
; 609  :     case 0x13:
; 610  :     case 0x23:
; 611  :     case 0x33:
; 612  :     case 0x3B:
; 613  :     case 0x53:
; 614  :     case 0x63:
; 615  :     case 0x6B:
; 616  : //  case 0x73:  // Mode Set (7-track 556/Odd/Normal) for 3420-3/5/7
; 617  :                 // with 7-track feature installed, No-op for 3420-2/4/6
; 618  :                 // and 3480, Invalid for 3422/3430, "Set Interface
; 619  :                 // Identifier" for 3490 and later. NOTE: 3480 and earlier
; 620  :                 // interpretation handled by command-table; 3490 and
; 621  :                 // and later handled further below.
; 622  :     case 0x7B:
; 623  :     case 0x93:
; 624  :     case 0xA3:
; 625  :     case 0xAB:
; 626  :     case 0xB3:
; 627  :     case 0xBB:
; 628  : //  case 0xC3:  // Mode Set (9-track 1600 bpi) for models earlier than
; 629  :                 // 3480, "Set Tape-Write-Immediate" for 3480 and later.
; 630  :                 // NOTE: handled by command-table for all models earlier
; 631  :                 // than 3480; 3480 and later handled further below.
; 632  : //  case 0xCB:  // "Mode Set" (9-track 800 bpi) for some models (3410,
; 633  :                 // 3420, etc.) but some other unknown command for other
; 634  :                 // models (3480, 3590, etc) and completely invalid for
; 635  :                 // yet other models (3422, 3430). For all device types
; 636  :                 // except 3590, this code is handled by command-table
; 637  :                 // and not here. For 3590, it is handled further below.
; 638  :     case 0xD3: /* 9-track 6250 bpi */
; 639  :     case 0xEB: /* invalid mode set issued by DOS/VS */
; 640  :     {
; 641  :         build_senseX(TAPE_BSENSE_STATUSONLY,dev,unitstat,code);

  00816	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0081f	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00827	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0082f	b9 0d 00 00 00	 mov	 ecx, 13
  00834	e8 00 00 00 00	 call	 build_senseX

; 642  :         break;

  00839	e9 8b 60 00 00	 jmp	 $LN13@tapedev_ex
$LN77@tapedev_ex:

; 643  :     }
; 644  : 
; 645  :     /*---------------------------------------------------------------*/
; 646  :     /* WRITE                                                         */
; 647  :     /*---------------------------------------------------------------*/
; 648  :     case 0x01:
; 649  :     {
; 650  :         /* Command reject if the volume is currently fenced */
; 651  :         if (dev->fenced)

  0083e	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00846	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0084c	83 e0 01	 and	 eax, 1
  0084f	85 c0		 test	 eax, eax
  00851	74 28		 je	 SHORT $LN78@tapedev_ex

; 652  :         {
; 653  :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  00853	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0085c	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00864	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0086c	b9 0a 00 00 00	 mov	 ecx, 10
  00871	e8 00 00 00 00	 call	 build_senseX

; 654  :             break;

  00876	e9 4e 60 00 00	 jmp	 $LN13@tapedev_ex
$LN78@tapedev_ex:

; 655  :         }
; 656  : 
; 657  :         /* Unit check if tape is write-protected */
; 658  :         if (dev->readonly || dev->tdparms.logical_readonly)

  0087b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00883	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00889	d1 e8		 shr	 eax, 1
  0088b	83 e0 01	 and	 eax, 1
  0088e	85 c0		 test	 eax, eax
  00890	75 18		 jne	 SHORT $LN80@tapedev_ex
  00892	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0089a	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  008a0	c1 e8 0b	 shr	 eax, 11
  008a3	83 e0 01	 and	 eax, 1
  008a6	85 c0		 test	 eax, eax
  008a8	74 28		 je	 SHORT $LN79@tapedev_ex
$LN80@tapedev_ex:

; 659  :         {
; 660  :             build_senseX (TAPE_BSENSE_WRITEPROTECT, dev, unitstat, code);

  008aa	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  008b3	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  008bb	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  008c3	b9 06 00 00 00	 mov	 ecx, 6
  008c8	e8 00 00 00 00	 call	 build_senseX

; 661  :             break;

  008cd	e9 f7 5f 00 00	 jmp	 $LN13@tapedev_ex
$LN79@tapedev_ex:

; 662  :         }
; 663  : 
; 664  :         /* Update matrix display if needed */
; 665  :         if ( TAPEDISPTYP_WAITACT == dev->tapedisptype )

  008d2	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008da	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  008e1	83 f8 09	 cmp	 eax, 9
  008e4	75 1c		 jne	 SHORT $LN81@tapedev_ex

; 666  :         {
; 667  :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  008e6	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008ee	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 668  :             UpdateDisplay( dev );

  008f5	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  008fd	e8 00 00 00 00	 call	 UpdateDisplay
$LN81@tapedev_ex:

; 669  :         }
; 670  : 
; 671  :         /* Assign a unique Message Id for this I/O if needed */
; 672  :         INCREMENT_MESSAGEID(dev);

  00902	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0090a	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00910	c1 e8 03	 shr	 eax, 3
  00913	83 e0 01	 and	 eax, 1
  00916	85 c0		 test	 eax, eax
  00918	74 1e		 je	 SHORT $LN82@tapedev_ex
  0091a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00922	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  00928	ff c0		 inc	 eax
  0092a	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00932	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN82@tapedev_ex:

; 673  : 
; 674  :         /* Write a block to the tape according to device type */
; 675  :         if ((rc = dev->tmh->write( dev, iobuf, count, unitstat, code)) < 0)

  00938	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00940	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00947	0f b6 8c 24 98
	07 00 00	 movzx	 ecx, BYTE PTR code$[rsp]
  0094f	88 4c 24 20	 mov	 BYTE PTR [rsp+32], cl
  00953	4c 8b 8c 24 d8
	07 00 00	 mov	 r9, QWORD PTR unitstat$[rsp]
  0095b	44 8b 84 24 b0
	07 00 00	 mov	 r8d, DWORD PTR count$[rsp]
  00963	48 8b 94 24 c8
	07 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  0096b	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00973	ff 50 20	 call	 QWORD PTR [rax+32]
  00976	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0097a	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0097f	7d 05		 jge	 SHORT $LN83@tapedev_ex

; 676  :             break;      // (error)

  00981	e9 43 5f 00 00	 jmp	 $LN13@tapedev_ex
$LN83@tapedev_ex:

; 677  : 
; 678  :         *residual = 0;

  00986	48 8b 84 24 e0
	07 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  0098e	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 679  : 
; 680  :         /* Perform flush/sync and/or set normal completion status */
; 681  :         if (0
; 682  :             || !dev->write_immed
; 683  :             || (rc = dev->tmh->sync( dev, unitstat, code )) == 0

  00994	33 c0		 xor	 eax, eax
  00996	85 c0		 test	 eax, eax
  00998	75 4e		 jne	 SHORT $LN85@tapedev_ex
  0099a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009a2	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  009a8	c1 e8 08	 shr	 eax, 8
  009ab	83 e0 01	 and	 eax, 1
  009ae	85 c0		 test	 eax, eax
  009b0	74 36		 je	 SHORT $LN85@tapedev_ex
  009b2	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009ba	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  009c1	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  009ca	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  009d2	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  009da	ff 50 58	 call	 QWORD PTR [rax+88]
  009dd	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  009e1	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  009e6	75 23		 jne	 SHORT $LN84@tapedev_ex
$LN85@tapedev_ex:

; 684  :         )
; 685  :             build_senseX( TAPE_BSENSE_STATUSONLY, dev, unitstat, code );

  009e8	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  009f1	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  009f9	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00a01	b9 0d 00 00 00	 mov	 ecx, 13
  00a06	e8 00 00 00 00	 call	 build_senseX
$LN84@tapedev_ex:

; 686  : 
; 687  :         break;

  00a0b	e9 b9 5e 00 00	 jmp	 $LN13@tapedev_ex
$LN86@tapedev_ex:

; 688  :     }
; 689  : 
; 690  :     /*---------------------------------------------------------------*/
; 691  :     /* READ FORWARD  (3590 only)                                     */
; 692  :     /*---------------------------------------------------------------*/
; 693  :     case 0x06:
; 694  :     {
; 695  :         if (!RDFWD_SUPPORTED())

  00a10	b8 01 00 00 00	 mov	 eax, 1
  00a15	48 6b c0 00	 imul	 rax, rax, 0
  00a19	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00a21	48 8d 84 01 78
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1400]
  00a29	ba 00 00 80 00	 mov	 edx, 8388608		; 00800000H
  00a2e	48 8b c8	 mov	 rcx, rax
  00a31	e8 00 00 00 00	 call	 is_tape_feat
  00a36	0f b6 c0	 movzx	 eax, al
  00a39	85 c0		 test	 eax, eax
  00a3b	75 28		 jne	 SHORT $LN87@tapedev_ex

; 696  :         {
; 697  :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  00a3d	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00a46	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00a4e	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00a56	b9 04 00 00 00	 mov	 ecx, 4
  00a5b	e8 00 00 00 00	 call	 build_senseX

; 698  :             break;

  00a60	e9 64 5e 00 00	 jmp	 $LN13@tapedev_ex
$LN87@tapedev_ex:
$LN88@tapedev_ex:

; 699  :         }
; 700  : 
; 701  :         /*   SG24-2506 IBM 3590 Tape Subsystem Technical Guide
; 702  : 
; 703  :         5.2.1 Separate Channel Commands for IPL Read and Normal Read
; 704  : 
; 705  :         On IBM 3480/3490 tape devices there is only one Read Forward
; 706  :         CCW, the X'02' command code.  This CCW is used to perform
; 707  :         not only normal read operations but also an IPL Read from
; 708  :         tape, for example, DFSMSdss Stand-Alone Restore.  When the
; 709  :         CCW is used as an IPL Read, it is not subject to resetting
; 710  :         event notification, by definition.  Because there is only
; 711  :         one Read Forward CCW, it cannot be subject to resetting event
; 712  :         notification on IBM 3480 and 3490 devices.
; 713  : 
; 714  :         To differentiate between an IPL Read and a normal read
; 715  :         forward operation, the X'02' command code has been redefined
; 716  :         to be the IPL Read CCW, and a new X'06' command code has been
; 717  :         defined to be the Read Forward CCW.  The new Read Forward
; 718  :         CCW, X'06', is subject to resetting event notification, as
; 719  :         should be the case for normal read CCWs issued by applications
; 720  :         or other host software.
; 721  :         */
; 722  : 
; 723  :         // PROGRAMMING NOTE: I'm not sure what they mean by "resetting
; 724  :         // event notification" above, but for now we'll just FALL THROUGH
; 725  :         // to the below IPL READ logic...
; 726  :     }
; 727  : 
; 728  :     /* (purposely FALL THROUGH to below IPL READ logic for now) */
; 729  :     /* comment Below to silent GCC warning */
; 730  :     /* FALLTHRU */
; 731  : 
; 732  :     /*---------------------------------------------------------------*/
; 733  :     /* IPL READ  (non-3590)                                          */
; 734  :     /*---------------------------------------------------------------*/
; 735  :     case 0x02:
; 736  :     {
; 737  :         /* Command reject if the volume is currently fenced */
; 738  :         if (dev->fenced)

  00a65	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a6d	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00a73	83 e0 01	 and	 eax, 1
  00a76	85 c0		 test	 eax, eax
  00a78	74 28		 je	 SHORT $LN89@tapedev_ex

; 739  :         {
; 740  :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  00a7a	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00a83	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00a8b	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00a93	b9 0a 00 00 00	 mov	 ecx, 10
  00a98	e8 00 00 00 00	 call	 build_senseX

; 741  :             break;

  00a9d	e9 27 5e 00 00	 jmp	 $LN13@tapedev_ex
$LN89@tapedev_ex:

; 742  :         }
; 743  : 
; 744  :         /* Update matrix display if needed */
; 745  :         if ( TAPEDISPTYP_WAITACT == dev->tapedisptype )

  00aa2	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00aaa	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00ab1	83 f8 09	 cmp	 eax, 9
  00ab4	75 1c		 jne	 SHORT $LN90@tapedev_ex

; 746  :         {
; 747  :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  00ab6	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00abe	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 748  :             UpdateDisplay( dev );

  00ac5	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00acd	e8 00 00 00 00	 call	 UpdateDisplay
$LN90@tapedev_ex:

; 749  :         }
; 750  : 
; 751  :         /* Assign a unique Message Id for this I/O if needed */
; 752  :         INCREMENT_MESSAGEID(dev);

  00ad2	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ada	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00ae0	c1 e8 03	 shr	 eax, 3
  00ae3	83 e0 01	 and	 eax, 1
  00ae6	85 c0		 test	 eax, eax
  00ae8	74 1e		 je	 SHORT $LN91@tapedev_ex
  00aea	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00af2	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  00af8	ff c0		 inc	 eax
  00afa	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b02	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN91@tapedev_ex:

; 753  : 
; 754  :         /* Read a block from the tape according to device type */
; 755  :         /* Exit with unit check status if read error condition */
; 756  :         if ((S32)(len = dev->tmh->read( dev, dev->buf, unitstat, code)) < 0)

  00b08	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b10	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00b17	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00b20	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00b28	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b30	48 8b 91 c8 01
	00 00		 mov	 rdx, QWORD PTR [rcx+456]
  00b37	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b3f	ff 50 18	 call	 QWORD PTR [rax+24]
  00b42	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  00b46	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  00b4b	7d 05		 jge	 SHORT $LN92@tapedev_ex

; 757  :             break;      // (error)

  00b4d	e9 77 5d 00 00	 jmp	 $LN13@tapedev_ex
$LN92@tapedev_ex:

; 758  : 
; 759  :         /* Calculate number of bytes to read and residual byte count */
; 760  :         RESIDUAL_CALC (len);

  00b52	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00b56	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  00b5a	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00b5e	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  00b65	73 10		 jae	 SHORT $LN396@tapedev_ex
  00b67	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00b6e	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv399[rsp], eax
  00b75	eb 0b		 jmp	 SHORT $LN397@tapedev_ex
$LN396@tapedev_ex:
  00b77	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00b7b	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv399[rsp], eax
$LN397@tapedev_ex:
  00b82	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv399[rsp]
  00b89	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  00b8d	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  00b91	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00b98	2b c8		 sub	 ecx, eax
  00b9a	8b c1		 mov	 eax, ecx
  00b9c	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  00ba4	89 01		 mov	 DWORD PTR [rcx], eax
  00ba6	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00baa	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  00bb1	73 0b		 jae	 SHORT $LN93@tapedev_ex
  00bb3	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  00bbb	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN93@tapedev_ex:

; 761  : 
; 762  :         /* Copy data to I/O buffer */
; 763  :         memcpy (iobuf, dev->buf, num);

  00bbe	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  00bc2	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00bca	48 8b bc 24 c8
	07 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  00bd2	48 8b b1 c8 01
	00 00		 mov	 rsi, QWORD PTR [rcx+456]
  00bd9	8b c8		 mov	 ecx, eax
  00bdb	f3 a4		 rep movsb

; 764  : 
; 765  :         /* Save size and offset of data not used by this CCW */
; 766  :         dev->curblkrem = len - num;

  00bdd	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  00be1	8b 4c 24 70	 mov	 ecx, DWORD PTR len$[rsp]
  00be5	2b c8		 sub	 ecx, eax
  00be7	8b c1		 mov	 eax, ecx
  00be9	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00bf1	89 81 18 10 00
	00		 mov	 DWORD PTR [rcx+4120], eax

; 767  :         dev->curbufoff = num;

  00bf7	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00bff	8b 4c 24 74	 mov	 ecx, DWORD PTR num$[rsp]
  00c03	89 88 1c 10 00
	00		 mov	 DWORD PTR [rax+4124], ecx

; 768  :         dev->buflen = len;

  00c09	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c11	8b 4c 24 70	 mov	 ecx, DWORD PTR len$[rsp]
  00c15	89 88 dc 01 00
	00		 mov	 DWORD PTR [rax+476], ecx

; 769  : 
; 770  :         /* Exit with unit exception status if tapemark was read */
; 771  :         if (len == 0)

  00c1b	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  00c20	75 25		 jne	 SHORT $LN94@tapedev_ex

; 772  :             build_senseX (TAPE_BSENSE_READTM, dev, unitstat, code);

  00c22	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00c2b	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00c33	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00c3b	b9 0f 00 00 00	 mov	 ecx, 15
  00c40	e8 00 00 00 00	 call	 build_senseX
  00c45	eb 23		 jmp	 SHORT $LN95@tapedev_ex
$LN94@tapedev_ex:

; 773  :         else
; 774  :             build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  00c47	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00c50	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00c58	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00c60	b9 0d 00 00 00	 mov	 ecx, 13
  00c65	e8 00 00 00 00	 call	 build_senseX
$LN95@tapedev_ex:

; 775  : 
; 776  :         break;

  00c6a	e9 5a 5c 00 00	 jmp	 $LN13@tapedev_ex
$LN96@tapedev_ex:

; 777  :     }
; 778  : 
; 779  :     /*---------------------------------------------------------------*/
; 780  :     /* CONTROL NO-OPERATION                                          */
; 781  :     /*---------------------------------------------------------------*/
; 782  :     case 0x03:
; 783  :     {
; 784  :         /* Command reject if the volume is currently fenced */
; 785  :         if (dev->fenced)

  00c6f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c77	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00c7d	83 e0 01	 and	 eax, 1
  00c80	85 c0		 test	 eax, eax
  00c82	74 28		 je	 SHORT $LN97@tapedev_ex

; 786  :         {
; 787  :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  00c84	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00c8d	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00c95	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00c9d	b9 0a 00 00 00	 mov	 ecx, 10
  00ca2	e8 00 00 00 00	 call	 build_senseX

; 788  :             break;

  00ca7	e9 1d 5c 00 00	 jmp	 $LN13@tapedev_ex
$LN97@tapedev_ex:

; 789  :         }
; 790  : 
; 791  :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  00cac	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00cb5	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00cbd	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00cc5	b9 0d 00 00 00	 mov	 ecx, 13
  00cca	e8 00 00 00 00	 call	 build_senseX

; 792  :         break;

  00ccf	e9 f5 5b 00 00	 jmp	 $LN13@tapedev_ex
$LN98@tapedev_ex:

; 793  :     }
; 794  : 
; 795  :     /*---------------------------------------------------------------*/
; 796  :     /* SENSE                                                         */
; 797  :     /*---------------------------------------------------------------*/
; 798  :     case 0x04:
; 799  :     {
; 800  :         /* Calculate residual byte count */
; 801  :         RESIDUAL_CALC (dev->numsense);

  00cd4	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00cdc	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  00ce2	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  00ce6	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00cea	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  00cf1	73 10		 jae	 SHORT $LN398@tapedev_ex
  00cf3	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00cfa	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv435[rsp], eax
  00d01	eb 0b		 jmp	 SHORT $LN399@tapedev_ex
$LN398@tapedev_ex:
  00d03	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00d07	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv435[rsp], eax
$LN399@tapedev_ex:
  00d0e	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR tv435[rsp]
  00d15	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  00d19	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  00d1d	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00d24	2b c8		 sub	 ecx, eax
  00d26	8b c1		 mov	 eax, ecx
  00d28	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  00d30	89 01		 mov	 DWORD PTR [rcx], eax
  00d32	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  00d36	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  00d3d	73 0b		 jae	 SHORT $LN99@tapedev_ex
  00d3f	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  00d47	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN99@tapedev_ex:

; 802  : 
; 803  :         /* If we don't already have some sense already pre-built
; 804  :            and ready and waiting, then we'll have to build it fresh
; 805  :            for this call...  Otherwise, we use whatever we already
; 806  :            have waiting for them pre-built from a previous call...
; 807  :         */
; 808  :         if (!dev->sns_pending)

  00d4a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d52	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00d58	c1 e8 02	 shr	 eax, 2
  00d5b	83 e0 01	 and	 eax, 1
  00d5e	85 c0		 test	 eax, eax
  00d60	75 23		 jne	 SHORT $LN100@tapedev_ex

; 809  :             build_senseX (TAPE_BSENSE_UNSOLICITED, dev, unitstat, code);

  00d62	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00d6b	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00d73	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00d7b	b9 14 00 00 00	 mov	 ecx, 20
  00d80	e8 00 00 00 00	 call	 build_senseX
$LN100@tapedev_ex:

; 810  : 
; 811  :         *unitstat = CSW_CE|CSW_DE;  /* Need to do this ourselves as  */

  00d85	48 8b 84 24 d8
	07 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00d8d	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 812  :                                     /* we might not have gone thru   */
; 813  :                                     /* build_senseX...               */
; 814  : 
; 815  :         /* Copy device sense bytes to channel I/O buffer, clear
; 816  :            them for the next time, and then finally, reset the
; 817  :            Contengent Allegiance condition... */
; 818  :         memcpy (iobuf, dev->sense, num);

  00d90	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  00d94	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00d9c	48 81 c1 64 03
	00 00		 add	 rcx, 868		; 00000364H
  00da3	48 8b bc 24 c8
	07 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  00dab	48 8b f1	 mov	 rsi, rcx
  00dae	8b c8		 mov	 ecx, eax
  00db0	f3 a4		 rep movsb

; 819  :         memset (dev->sense, 0, sizeof(dev->sense));

  00db2	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00dba	48 05 64 03 00
	00		 add	 rax, 868		; 00000364H
  00dc0	48 8b f8	 mov	 rdi, rax
  00dc3	33 c0		 xor	 eax, eax
  00dc5	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00dca	f3 aa		 rep stosb

; 820  : 
; 821  :         dev->sns_pending = 0;

  00dcc	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00dd4	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00dda	83 e0 fb	 and	 eax, -5			; fffffffbH
  00ddd	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00de5	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 822  : 
; 823  :         break;

  00deb	e9 d9 5a 00 00	 jmp	 $LN13@tapedev_ex
$LN101@tapedev_ex:

; 824  :     }
; 825  : 
; 826  :     /*---------------------------------------------------------------*/
; 827  :     /* READ FORWARD  (3590 only)                                     */
; 828  :     /*---------------------------------------------------------------*/
; 829  : //  case 0x06:
; 830  : //  {
; 831  :         // (handled by case 0x02: IPL READ)
; 832  : //  }
; 833  : 
; 834  :     /*---------------------------------------------------------------*/
; 835  :     /* REWIND                                                        */
; 836  :     /*---------------------------------------------------------------*/
; 837  :     case 0x07:
; 838  :     {
; 839  :         /* Update matrix display if needed */
; 840  :         if ( TAPEDISPTYP_IDLE    == dev->tapedisptype ||

  00df0	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00df8	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00dff	85 c0		 test	 eax, eax
  00e01	74 14		 je	 SHORT $LN103@tapedev_ex
  00e03	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e0b	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00e12	83 f8 09	 cmp	 eax, 9
  00e15	75 1c		 jne	 SHORT $LN102@tapedev_ex
$LN103@tapedev_ex:

; 841  :              TAPEDISPTYP_WAITACT == dev->tapedisptype )
; 842  :         {
; 843  :             dev->tapedisptype = TAPEDISPTYP_REWINDING;

  00e17	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e1f	c6 80 60 11 00
	00 03		 mov	 BYTE PTR [rax+4448], 3

; 844  :             UpdateDisplay( dev );

  00e26	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00e2e	e8 00 00 00 00	 call	 UpdateDisplay
$LN102@tapedev_ex:

; 845  :         }
; 846  : 
; 847  :         /* Assign a unique Message Id for this I/O if needed */
; 848  :         INCREMENT_MESSAGEID(dev);

  00e33	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e3b	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00e41	c1 e8 03	 shr	 eax, 3
  00e44	83 e0 01	 and	 eax, 1
  00e47	85 c0		 test	 eax, eax
  00e49	74 1e		 je	 SHORT $LN104@tapedev_ex
  00e4b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e53	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  00e59	ff c0		 inc	 eax
  00e5b	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00e63	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN104@tapedev_ex:

; 849  : 
; 850  :         /* Do the rewind */
; 851  :         rc = dev->tmh->rewind( dev, unitstat, code);

  00e69	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e71	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00e78	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  00e81	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00e89	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00e91	ff 50 28	 call	 QWORD PTR [rax+40]
  00e94	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 852  : 
; 853  :         /* Update matrix display if needed */
; 854  :         if ( TAPEDISPTYP_REWINDING == dev->tapedisptype )

  00e98	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ea0	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00ea7	83 f8 03	 cmp	 eax, 3
  00eaa	75 1c		 jne	 SHORT $LN105@tapedev_ex

; 855  :         {
; 856  :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  00eac	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00eb4	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 857  :             UpdateDisplay( dev );

  00ebb	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ec3	e8 00 00 00 00	 call	 UpdateDisplay
$LN105@tapedev_ex:

; 858  :         }
; 859  : 
; 860  :         /* Check for error */
; 861  :         if (rc < 0)

  00ec8	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00ecd	7d 51		 jge	 SHORT $LN106@tapedev_ex

; 862  :         {
; 863  :             if (!SVF_ENABLED())

  00ecf	b8 01 00 00 00	 mov	 eax, 1
  00ed4	48 6b c0 00	 imul	 rax, rax, 0
  00ed8	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ee0	48 8d 84 01 72
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1394]
  00ee8	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00eed	48 8b c8	 mov	 rcx, rax
  00ef0	e8 00 00 00 00	 call	 is_tape_feat
  00ef5	0f b6 c0	 movzx	 eax, al
  00ef8	85 c0		 test	 eax, eax
  00efa	75 1f		 jne	 SHORT $LN107@tapedev_ex

; 864  :                 dev->fenced = 1;  // (position lost; fence the volume)

  00efc	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f04	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00f0a	83 c8 01	 or	 eax, 1
  00f0d	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00f15	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax
$LN107@tapedev_ex:

; 865  :             break;

  00f1b	e9 a9 59 00 00	 jmp	 $LN13@tapedev_ex
$LN106@tapedev_ex:

; 866  :         }
; 867  : 
; 868  :         dev->eotwarning = 0;

  00f20	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f28	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00f2e	83 e0 df	 and	 eax, -33		; ffffffdfH
  00f31	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00f39	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 869  :         dev->fenced = 0;

  00f3f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f47	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00f4d	83 e0 fe	 and	 eax, -2			; fffffffeH
  00f50	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00f58	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 870  : 
; 871  :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  00f5e	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00f67	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00f6f	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00f77	b9 0d 00 00 00	 mov	 ecx, 13
  00f7c	e8 00 00 00 00	 call	 build_senseX

; 872  :         break;

  00f81	e9 43 59 00 00	 jmp	 $LN13@tapedev_ex
$LN108@tapedev_ex:
$LN109@tapedev_ex:

; 873  :     }
; 874  : 
; 875  :     /*---------------------------------------------------------------*/
; 876  :     /* READ PREVIOUS  (3590)                                         */
; 877  :     /*---------------------------------------------------------------*/
; 878  :     case 0x0A:
; 879  :     {
; 880  :         /*    SG24-2506 IBM 3590 Tape Subsystem Technical Guide
; 881  : 
; 882  :         5.2.2 Read Previous to Replace Read Backward:
; 883  : 
; 884  :         The ESCON-attached Magstar tape drive does not support the
; 885  :         Read Backward CCW (command code, X'0C').  It supports a new
; 886  :         Read Previous CCW that allows processing of an IBM 3590 High
; 887  :         Performance Tape Cartridge in the backward direction without
; 888  :         the performance penalties that exist with the Read Backward
; 889  :         CCW.  IBM 3480 and 3490 devices had to reread the physical
; 890  :         block from the medium for each request of a logical block.
; 891  :         The Magstar tape drive retains the physical block in the
; 892  :         device buffer and satisfies any subsequent Read Previous from
; 893  :         the buffer, similar to how Read Forward operates.  The Read
; 894  :         Previous CCW operates somewhat like the Read Backward CCW
; 895  :         in that it can be used to process the volumes in the backward
; 896  :         direction.  It is different from the Read Backward, however,
; 897  :         because the data is transferred to the host in the same order
; 898  :         in which it was written, rather than in reverse order like
; 899  :         Read Backward.
; 900  :         */
; 901  : 
; 902  :         /*   SG24-2594 IBM 3590 Multiplatform Implementation
; 903  : 
; 904  :         5.1.2 New and Changed Read Channel Commands
; 905  : 
; 906  :         [...] That is, the Read Backward command's data address
; 907  :         will point to the end of the storage area, while a Read
; 908  :         Previous command points to the beginning of the storage
; 909  :         area...
; 910  :         */
; 911  : 
; 912  :         // PROGRAMMING NOTE: luckily, channel.c's buffer handling
; 913  :         // causes transparent handling of Read Backward/Reverse,
; 914  :         // so the above buffer alignment and data transfer order
; 915  :         // is not a concern for us here.
; 916  : 
; 917  :         // PROGRAMMING NOTE: until we can add support to Hercules
; 918  :         // allowing direct SCSI i/o (so that we can issue the 'Read
; 919  :         // Reverse' command directly to the SCSI device), we will
; 920  :         // simply FALL THROUGH to our existing "Read Backward" logic.
; 921  :     }
; 922  : 
; 923  :     // (purposely FALL THROUGH to the 'READ BACKWARD' logic below)
; 924  : 
; 925  :     /*---------------------------------------------------------------*/
; 926  :     /* READ BACKWARD                                                 */
; 927  :     /*---------------------------------------------------------------*/
; 928  :     case 0x0C:
; 929  :     {
; 930  :         /* Update matrix display if needed */
; 931  :         if ( TAPEDISPTYP_WAITACT == dev->tapedisptype )

  00f86	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f8e	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00f95	83 f8 09	 cmp	 eax, 9
  00f98	75 1c		 jne	 SHORT $LN110@tapedev_ex

; 932  :         {
; 933  :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  00f9a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00fa2	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 934  :             UpdateDisplay( dev );

  00fa9	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00fb1	e8 00 00 00 00	 call	 UpdateDisplay
$LN110@tapedev_ex:

; 935  :         }
; 936  : 
; 937  :         /* Backspace to previous block according to device type */
; 938  :         /* Exit with unit check status if error condition */
; 939  :         if ((rc = dev->tmh->bsb( dev, unitstat, code )) < 0)

  00fb6	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00fbe	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00fc5	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  00fce	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00fd6	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00fde	ff 50 30	 call	 QWORD PTR [rax+48]
  00fe1	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00fe5	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00fea	7d 05		 jge	 SHORT $LN111@tapedev_ex

; 940  :             break;      // (error)

  00fec	e9 d8 58 00 00	 jmp	 $LN13@tapedev_ex
$LN111@tapedev_ex:

; 941  : 
; 942  :         /* Exit with unit exception status if tapemark was sensed */
; 943  :         if (rc == 0)

  00ff1	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00ff6	75 36		 jne	 SHORT $LN112@tapedev_ex

; 944  :         {
; 945  :             *residual = 0;

  00ff8	48 8b 84 24 e0
	07 00 00	 mov	 rax, QWORD PTR residual$[rsp]
  01000	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 946  :             build_senseX (TAPE_BSENSE_READTM, dev, unitstat, code);

  01006	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0100f	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01017	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0101f	b9 0f 00 00 00	 mov	 ecx, 15
  01024	e8 00 00 00 00	 call	 build_senseX

; 947  :             break;

  01029	e9 9b 58 00 00	 jmp	 $LN13@tapedev_ex
$LN112@tapedev_ex:

; 948  :         }
; 949  : 
; 950  :         /* Assign a unique Message Id for this I/O if needed */
; 951  :         INCREMENT_MESSAGEID(dev);

  0102e	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01036	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0103c	c1 e8 03	 shr	 eax, 3
  0103f	83 e0 01	 and	 eax, 1
  01042	85 c0		 test	 eax, eax
  01044	74 1e		 je	 SHORT $LN113@tapedev_ex
  01046	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0104e	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  01054	ff c0		 inc	 eax
  01056	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0105e	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN113@tapedev_ex:

; 952  : 
; 953  :         /* Now read in a forward direction the actual data block
; 954  :            we just backspaced over, and exit with unit check status
; 955  :            on any read error condition
; 956  :         */
; 957  :         if ((S32)(len = dev->tmh->read( dev, dev->buf, unitstat, code )) < 0)

  01064	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0106c	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  01073	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0107c	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01084	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0108c	48 8b 91 c8 01
	00 00		 mov	 rdx, QWORD PTR [rcx+456]
  01093	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0109b	ff 50 18	 call	 QWORD PTR [rax+24]
  0109e	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  010a2	83 7c 24 70 00	 cmp	 DWORD PTR len$[rsp], 0
  010a7	7d 05		 jge	 SHORT $LN114@tapedev_ex

; 958  :             break;      // (error)

  010a9	e9 1b 58 00 00	 jmp	 $LN13@tapedev_ex
$LN114@tapedev_ex:

; 959  : 
; 960  :         /* Calculate number of bytes to read and residual byte count */
; 961  :         RESIDUAL_CALC (len);

  010ae	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  010b2	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  010b6	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  010ba	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  010c1	73 10		 jae	 SHORT $LN400@tapedev_ex
  010c3	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  010ca	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv546[rsp], eax
  010d1	eb 0b		 jmp	 SHORT $LN401@tapedev_ex
$LN400@tapedev_ex:
  010d3	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  010d7	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv546[rsp], eax
$LN401@tapedev_ex:
  010de	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR tv546[rsp]
  010e5	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  010e9	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  010ed	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  010f4	2b c8		 sub	 ecx, eax
  010f6	8b c1		 mov	 eax, ecx
  010f8	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  01100	89 01		 mov	 DWORD PTR [rcx], eax
  01102	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  01106	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  0110d	73 0b		 jae	 SHORT $LN115@tapedev_ex
  0110f	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  01117	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN115@tapedev_ex:

; 962  : 
; 963  :         /* Copy data to I/O buffer */
; 964  :         memcpy (iobuf, dev->buf, num);

  0111a	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  0111e	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01126	48 8b bc 24 c8
	07 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  0112e	48 8b b1 c8 01
	00 00		 mov	 rsi, QWORD PTR [rcx+456]
  01135	8b c8		 mov	 ecx, eax
  01137	f3 a4		 rep movsb

; 965  : 
; 966  :         /* Save size and offset of data not used by this CCW */
; 967  :         dev->curblkrem = len - num;

  01139	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  0113d	8b 4c 24 70	 mov	 ecx, DWORD PTR len$[rsp]
  01141	2b c8		 sub	 ecx, eax
  01143	8b c1		 mov	 eax, ecx
  01145	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0114d	89 81 18 10 00
	00		 mov	 DWORD PTR [rcx+4120], eax

; 968  :         dev->curbufoff = num;

  01153	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0115b	8b 4c 24 74	 mov	 ecx, DWORD PTR num$[rsp]
  0115f	89 88 1c 10 00
	00		 mov	 DWORD PTR [rax+4124], ecx

; 969  :         dev->buflen = len;

  01165	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0116d	8b 4c 24 70	 mov	 ecx, DWORD PTR len$[rsp]
  01171	89 88 dc 01 00
	00		 mov	 DWORD PTR [rax+476], ecx

; 970  : 
; 971  :         /* Backspace to previous block according to device type,
; 972  :            and exit with unit check status if error condition */
; 973  :         if ((rc = dev->tmh->bsb( dev, unitstat, code )) < 0)

  01177	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0117f	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  01186	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  0118f	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  01197	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0119f	ff 50 30	 call	 QWORD PTR [rax+48]
  011a2	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  011a6	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  011ab	7d 05		 jge	 SHORT $LN116@tapedev_ex

; 974  :             break;      // (error)

  011ad	e9 17 57 00 00	 jmp	 $LN13@tapedev_ex
$LN116@tapedev_ex:

; 975  : 
; 976  :         /* Set normal status */
; 977  :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  011b2	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  011bb	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  011c3	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  011cb	b9 0d 00 00 00	 mov	 ecx, 13
  011d0	e8 00 00 00 00	 call	 build_senseX

; 978  :         break;

  011d5	e9 ef 56 00 00	 jmp	 $LN13@tapedev_ex
$LN117@tapedev_ex:

; 979  : 
; 980  :     } /* End case 0x0C: READ BACKWARD */
; 981  : 
; 982  :     /*---------------------------------------------------------------*/
; 983  :     /* REWIND UNLOAD                                                 */
; 984  :     /*---------------------------------------------------------------*/
; 985  :     case 0x0F:
; 986  :     {
; 987  :         /* Update matrix display if needed */
; 988  :         if ( dev->tdparms.displayfeat )

  011da	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011e2	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  011e8	c1 e8 09	 shr	 eax, 9
  011eb	83 e0 01	 and	 eax, 1
  011ee	85 c0		 test	 eax, eax
  011f0	0f 84 94 00 00
	00		 je	 $LN118@tapedev_ex

; 989  :         {
; 990  :             if ( TAPEDISPTYP_UMOUNTMOUNT == dev->tapedisptype )

  011f6	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011fe	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  01205	83 f8 08	 cmp	 eax, 8
  01208	75 5d		 jne	 SHORT $LN119@tapedev_ex

; 991  :             {
; 992  :                 dev->tapedisptype   = TAPEDISPTYP_MOUNT;

  0120a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01212	c6 80 60 11 00
	00 06		 mov	 BYTE PTR [rax+4448], 6

; 993  :                 dev->tapedispflags |= TAPEDISPFLG_REQAUTOMNT;

  01219	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01221	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  01228	83 c8 08	 or	 eax, 8
  0122b	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01233	88 81 61 11 00
	00		 mov	 BYTE PTR [rcx+4449], al

; 994  :                 STRLCPY( dev->tapemsg1, dev->tapemsg2 );

  01239	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01241	48 05 29 11 00
	00		 add	 rax, 4393		; 00001129H
  01247	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0124f	48 81 c1 20 11
	00 00		 add	 rcx, 4384		; 00001120H
  01256	41 b8 09 00 00
	00		 mov	 r8d, 9
  0125c	48 8b d0	 mov	 rdx, rax
  0125f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 995  :             }

  01265	eb 23		 jmp	 SHORT $LN120@tapedev_ex
$LN119@tapedev_ex:

; 996  :             else if ( TAPEDISPTYP_UNMOUNT == dev->tapedisptype )

  01267	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0126f	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  01276	83 f8 07	 cmp	 eax, 7
  01279	75 0f		 jne	 SHORT $LN121@tapedev_ex

; 997  :             {
; 998  :                 dev->tapedisptype = TAPEDISPTYP_IDLE;

  0127b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01283	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0
$LN121@tapedev_ex:
$LN120@tapedev_ex:
$LN118@tapedev_ex:

; 999  :             }
; 1000 :         }
; 1001 : 
; 1002 :         if ( TAPEDISPTYP_IDLE    == dev->tapedisptype ||

  0128a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01292	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  01299	85 c0		 test	 eax, eax
  0129b	74 14		 je	 SHORT $LN123@tapedev_ex
  0129d	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  012a5	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  012ac	83 f8 09	 cmp	 eax, 9
  012af	75 1c		 jne	 SHORT $LN122@tapedev_ex
$LN123@tapedev_ex:

; 1003 :              TAPEDISPTYP_WAITACT == dev->tapedisptype )
; 1004 :         {
; 1005 :             dev->tapedisptype = TAPEDISPTYP_UNLOADING;

  012b1	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  012b9	c6 80 60 11 00
	00 04		 mov	 BYTE PTR [rax+4448], 4

; 1006 :             UpdateDisplay( dev );

  012c0	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  012c8	e8 00 00 00 00	 call	 UpdateDisplay
$LN122@tapedev_ex:

; 1007 :         }
; 1008 : 
; 1009 :         /* Assign a unique Message Id for this I/O if needed */
; 1010 :         INCREMENT_MESSAGEID(dev);

  012cd	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  012d5	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  012db	c1 e8 03	 shr	 eax, 3
  012de	83 e0 01	 and	 eax, 1
  012e1	85 c0		 test	 eax, eax
  012e3	74 1e		 je	 SHORT $LN124@tapedev_ex
  012e5	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  012ed	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  012f3	ff c0		 inc	 eax
  012f5	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  012fd	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN124@tapedev_ex:

; 1011 : 
; 1012 :         /* Do the Rewind-Unload */
; 1013 : #if defined(OPTION_SCSI_TAPE)
; 1014 :         if ( TAPEDEVT_SCSITAPE == dev->tapedevt )

  01303	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0130b	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01312	83 f8 03	 cmp	 eax, 3
  01315	75 20		 jne	 SHORT $LN125@tapedev_ex

; 1015 :             int_scsi_rewind_unload( dev, unitstat, code );

  01317	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  01320	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  01328	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01330	e8 00 00 00 00	 call	 int_scsi_rewind_unload
  01335	eb 25		 jmp	 SHORT $LN126@tapedev_ex
$LN125@tapedev_ex:

; 1016 :         else
; 1017 : #endif
; 1018 :         {
; 1019 :             dev->tmh->close(dev);

  01337	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0133f	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  01346	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0134e	ff 50 10	 call	 QWORD PTR [rax+16]

; 1020 :             *unitstat=0;

  01351	48 8b 84 24 d8
	07 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  01359	c6 00 00	 mov	 BYTE PTR [rax], 0
$LN126@tapedev_ex:

; 1021 :         }
; 1022 : 
; 1023 :         /* Update matrix display if needed */
; 1024 :         if ( TAPEDISPTYP_UNLOADING == dev->tapedisptype )

  0135c	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01364	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  0136b	83 f8 04	 cmp	 eax, 4
  0136e	75 1c		 jne	 SHORT $LN127@tapedev_ex

; 1025 :         {
; 1026 :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  01370	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01378	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 1027 :             UpdateDisplay( dev );

  0137f	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01387	e8 00 00 00 00	 call	 UpdateDisplay
$LN127@tapedev_ex:

; 1028 :         }
; 1029 : 
; 1030 :         if ((*unitstat & CSW_UC) != 0)      // (did it work?)

  0138c	48 8b 84 24 d8
	07 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  01394	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01397	83 e0 02	 and	 eax, 2
  0139a	85 c0		 test	 eax, eax
  0139c	74 05		 je	 SHORT $LN128@tapedev_ex

; 1031 :             break;                          // (no it didn't)

  0139e	e9 26 55 00 00	 jmp	 $LN13@tapedev_ex
$LN128@tapedev_ex:

; 1032 : 
; 1033 :         dev->curfilen = 1;

  013a3	b8 01 00 00 00	 mov	 eax, 1
  013a8	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  013b0	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 1034 :         dev->nxtblkpos = 0;

  013b7	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013bf	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 1035 :         dev->prvblkpos = -1;

  013ca	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013d2	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 1036 :         dev->eotwarning = 0;

  013dd	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013e5	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  013eb	83 e0 df	 and	 eax, -33		; ffffffdfH
  013ee	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  013f6	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 1037 : //      dev->fenced = 0;        // (handler already did this)
; 1038 : 
; 1039 :         /* Update matrix display */
; 1040 :         UpdateDisplay( dev );

  013fc	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01404	e8 00 00 00 00	 call	 UpdateDisplay

; 1041 : 
; 1042 :         build_senseX(TAPE_BSENSE_RUN_SUCCESS,dev,unitstat,code);

  01409	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01412	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0141a	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01422	b9 0c 00 00 00	 mov	 ecx, 12
  01427	e8 00 00 00 00	 call	 build_senseX

; 1043 : 
; 1044 :         if ( dev->als )

  0142c	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01434	48 83 b8 e8 10
	00 00 00	 cmp	 QWORD PTR [rax+4328], 0
  0143c	0f 84 13 01 00
	00		 je	 $LN129@tapedev_ex

; 1045 :         {
; 1046 :             TID dummy_tid;
; 1047 :             char thread_name[64];
; 1048 :             MSGBUF(thread_name,

  01442	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0144a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0144e	44 8b c8	 mov	 r9d, eax
  01451	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169458
  01458	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0145d	48 8d 8c 24 00
	05 00 00	 lea	 rcx, QWORD PTR thread_name$21[rsp]
  01465	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1049 :                 "autoload wait for %4.4X tapemount thread",
; 1050 :                 dev->devnum);
; 1051 :             thread_name[sizeof(thread_name)-1] = 0;

  0146b	b8 01 00 00 00	 mov	 eax, 1
  01470	48 6b c0 3f	 imul	 rax, rax, 63		; 0000003fH
  01474	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR $T17[rsp], rax
  0147c	48 83 bc 24 00
	02 00 00 40	 cmp	 QWORD PTR $T17[rsp], 64	; 00000040H
  01485	73 02		 jae	 SHORT $LN402@tapedev_ex
  01487	eb 05		 jmp	 SHORT $LN403@tapedev_ex
$LN402@tapedev_ex:
  01489	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN403@tapedev_ex:
  0148e	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR $T17[rsp]
  01496	c6 84 04 00 05
	00 00 00	 mov	 BYTE PTR thread_name$21[rsp+rax], 0

; 1052 :             rc = create_thread( &dummy_tid, DETACHED,

  0149e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  014a5	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  014ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169459
  014b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  014b7	48 8d 8c 24 00
	05 00 00	 lea	 rcx, QWORD PTR thread_name$21[rsp]
  014bf	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  014c4	4c 8b 8c 24 90
	07 00 00	 mov	 r9, QWORD PTR dev$[rsp]
  014cc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:autoload_wait_for_tapemount_thread
  014d3	48 8b d0	 mov	 rdx, rax
  014d6	48 8d 8c 24 c0
	03 00 00	 lea	 rcx, QWORD PTR dummy_tid$19[rsp]
  014de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  014e4	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 1053 :                 autoload_wait_for_tapemount_thread,
; 1054 :                 dev, thread_name );
; 1055 :             if (rc)

  014e8	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  014ed	74 66		 je	 SHORT $LN130@tapedev_ex

; 1056 :                 WRMSG(HHC00102, "E", strerror(rc));

  014ef	8b 4c 24 78	 mov	 ecx, DWORD PTR rc$[rsp]
  014f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  014f9	48 89 84 24 d0
	03 00 00	 mov	 QWORD PTR tv657[rsp], rax
  01501	b9 01 00 00 00	 mov	 ecx, 1
  01506	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0150c	48 8b 8c 24 d0
	03 00 00	 mov	 rcx, QWORD PTR tv657[rsp]
  01514	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01519	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169461
  01520	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01525	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169462
  0152c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01531	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01536	41 b9 03 00 00
	00		 mov	 r9d, 3
  0153c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169463
  01543	ba 20 04 00 00	 mov	 edx, 1056		; 00000420H
  01548	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169464
  0154f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN130@tapedev_ex:
$LN129@tapedev_ex:

; 1057 :         }
; 1058 : 
; 1059 :         ReqAutoMount( dev );

  01555	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0155d	e8 00 00 00 00	 call	 ReqAutoMount

; 1060 :         break;

  01562	e9 62 53 00 00	 jmp	 $LN13@tapedev_ex
$LN131@tapedev_ex:

; 1061 : 
; 1062 :     } /* End case 0x0F: REWIND UNLOAD */
; 1063 : 
; 1064 :     /*---------------------------------------------------------------*/
; 1065 :     /* READ BUFFER  (3480 and later)                                 */
; 1066 :     /*---------------------------------------------------------------*/
; 1067 :     case 0x12:
; 1068 :     {
; 1069 :         /*    GA32-0127 IBM 3490E Hardware Reference
; 1070 : 
; 1071 :         Read Buffer (X'12')
; 1072 : 
; 1073 :         The Read Buffer command transfers data from the control unit
; 1074 :         to the channel if any buffered write data is in the control
; 1075 :         unit's buffer.  For each Read Buffer command completed, the
; 1076 :         controlling computer retrieves one block of data in last-in/
; 1077 :         first-out (LIFO) sequence until the buffer for the addressed
; 1078 :         tape drive is empty.  The controlling computer usually issues
; 1079 :         this command when the tape drive or subsystem malfunctions
; 1080 :         and cannot write data from the buffer to the tape.
; 1081 :         */
; 1082 : 
; 1083 :         /* Command reject if the volume is currently fenced */
; 1084 :         if (dev->fenced)

  01567	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0156f	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  01575	83 e0 01	 and	 eax, 1
  01578	85 c0		 test	 eax, eax
  0157a	74 28		 je	 SHORT $LN132@tapedev_ex

; 1085 :         {
; 1086 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  0157c	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01585	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0158d	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01595	b9 0a 00 00 00	 mov	 ecx, 10
  0159a	e8 00 00 00 00	 call	 build_senseX

; 1087 :             break;

  0159f	e9 25 53 00 00	 jmp	 $LN13@tapedev_ex
$LN132@tapedev_ex:

; 1088 :         }
; 1089 : 
; 1090 :         // PROGRAMMING NOTE: until we can add support for performing
; 1091 :         // SCSI i/o directly to the actual real device, we simply do
; 1092 :         // the same thing for non-virtual devices as we do for virtual
; 1093 :         // ones: we force-flush the data to the device (i.e. sync)
; 1094 :         // and then tell the truth: that there's zero bytes of data
; 1095 :         // still buffered (which is true if we just flushed it all)
; 1096 : 
; 1097 :         // Once we add direct SCSI i/o support though, we can change
; 1098 :         // the below to do an actual read-buffer SCSI command for
; 1099 :         // non-virtual devices. (We will still always need the below
; 1100 :         // for virtual devices though)
; 1101 : 
; 1102 :         /* Assign a unique Message Id for this I/O if needed */
; 1103 :         INCREMENT_MESSAGEID(dev);

  015a4	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015ac	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  015b2	c1 e8 03	 shr	 eax, 3
  015b5	83 e0 01	 and	 eax, 1
  015b8	85 c0		 test	 eax, eax
  015ba	74 1e		 je	 SHORT $LN133@tapedev_ex
  015bc	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015c4	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  015ca	ff c0		 inc	 eax
  015cc	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  015d4	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN133@tapedev_ex:

; 1104 : 
; 1105 :         // Perform flush/sync; exit on error...
; 1106 :         if ((rc = dev->tmh->sync( dev, unitstat, code )) < 0)

  015da	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015e2	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  015e9	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  015f2	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  015fa	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01602	ff 50 58	 call	 QWORD PTR [rax+88]
  01605	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  01609	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0160e	7d 05		 jge	 SHORT $LN134@tapedev_ex

; 1107 :             break;      // (i/o error)

  01610	e9 b4 52 00 00	 jmp	 $LN13@tapedev_ex
$LN134@tapedev_ex:

; 1108 : 
; 1109 :         // Flush complete. Our buffer is now empty. Tell them that.
; 1110 :         RESIDUAL_CALC (0);

  01615	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR len$[rsp], 0
  0161d	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  01621	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  01628	73 10		 jae	 SHORT $LN404@tapedev_ex
  0162a	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  01631	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv693[rsp], eax
  01638	eb 0b		 jmp	 SHORT $LN405@tapedev_ex
$LN404@tapedev_ex:
  0163a	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0163e	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv693[rsp], eax
$LN405@tapedev_ex:
  01645	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR tv693[rsp]
  0164c	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  01650	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  01654	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  0165b	2b c8		 sub	 ecx, eax
  0165d	8b c1		 mov	 eax, ecx
  0165f	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  01667	89 01		 mov	 DWORD PTR [rcx], eax
  01669	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0166d	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  01674	73 0b		 jae	 SHORT $LN135@tapedev_ex
  01676	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  0167e	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN135@tapedev_ex:

; 1111 :         dev->curblkrem = 0;

  01681	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01689	c7 80 18 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4120], 0

; 1112 :         dev->curbufoff = 0;

  01693	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0169b	c7 80 1c 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4124], 0

; 1113 :         break;

  016a5	e9 1f 52 00 00	 jmp	 $LN13@tapedev_ex
$LN136@tapedev_ex:

; 1114 :     }
; 1115 : 
; 1116 :     /*---------------------------------------------------------------*/
; 1117 :     /* ERASE GAP                                                     */
; 1118 :     /*---------------------------------------------------------------*/
; 1119 :     case 0x17:
; 1120 :     {
; 1121 :         /* Command reject if the volume is currently fenced */
; 1122 :         if (dev->fenced)

  016aa	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  016b2	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  016b8	83 e0 01	 and	 eax, 1
  016bb	85 c0		 test	 eax, eax
  016bd	74 28		 je	 SHORT $LN137@tapedev_ex

; 1123 :         {
; 1124 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  016bf	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  016c8	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  016d0	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  016d8	b9 0a 00 00 00	 mov	 ecx, 10
  016dd	e8 00 00 00 00	 call	 build_senseX

; 1125 :             break;

  016e2	e9 e2 51 00 00	 jmp	 $LN13@tapedev_ex
$LN137@tapedev_ex:

; 1126 :         }
; 1127 : 
; 1128 :         /* Unit check if tape is write-protected */
; 1129 :         if (dev->readonly || dev->tdparms.logical_readonly)

  016e7	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  016ef	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  016f5	d1 e8		 shr	 eax, 1
  016f7	83 e0 01	 and	 eax, 1
  016fa	85 c0		 test	 eax, eax
  016fc	75 18		 jne	 SHORT $LN139@tapedev_ex
  016fe	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01706	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  0170c	c1 e8 0b	 shr	 eax, 11
  0170f	83 e0 01	 and	 eax, 1
  01712	85 c0		 test	 eax, eax
  01714	74 28		 je	 SHORT $LN138@tapedev_ex
$LN139@tapedev_ex:

; 1130 :         {
; 1131 :             build_senseX (TAPE_BSENSE_WRITEPROTECT, dev, unitstat, code);

  01716	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0171f	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01727	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0172f	b9 06 00 00 00	 mov	 ecx, 6
  01734	e8 00 00 00 00	 call	 build_senseX

; 1132 :             break;

  01739	e9 8b 51 00 00	 jmp	 $LN13@tapedev_ex
$LN138@tapedev_ex:

; 1133 :         }
; 1134 : 
; 1135 :         /* Update matrix display if needed */
; 1136 :         if ( TAPEDISPTYP_WAITACT == dev->tapedisptype )

  0173e	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01746	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  0174d	83 f8 09	 cmp	 eax, 9
  01750	75 1c		 jne	 SHORT $LN140@tapedev_ex

; 1137 :         {
; 1138 :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  01752	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0175a	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 1139 :             UpdateDisplay( dev );

  01761	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01769	e8 00 00 00 00	 call	 UpdateDisplay
$LN140@tapedev_ex:

; 1140 :         }
; 1141 : 
; 1142 :         /* Assign a unique Message Id for this I/O if needed */
; 1143 :         INCREMENT_MESSAGEID(dev);

  0176e	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01776	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0177c	c1 e8 03	 shr	 eax, 3
  0177f	83 e0 01	 and	 eax, 1
  01782	85 c0		 test	 eax, eax
  01784	74 1e		 je	 SHORT $LN141@tapedev_ex
  01786	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0178e	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  01794	ff c0		 inc	 eax
  01796	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0179e	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN141@tapedev_ex:

; 1144 : 
; 1145 :         /* Do the ERG; exit if error */
; 1146 :         if ((rc = dev->tmh->erg( dev, unitstat, code )) < 0)

  017a4	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  017ac	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  017b3	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  017bc	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  017c4	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  017cc	ff 50 68	 call	 QWORD PTR [rax+104]
  017cf	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  017d3	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  017d8	7d 05		 jge	 SHORT $LN142@tapedev_ex

; 1147 :             break;      // (error)

  017da	e9 ea 50 00 00	 jmp	 $LN13@tapedev_ex
$LN142@tapedev_ex:

; 1148 : 
; 1149 :         /* Perform flush/sync and/or set normal completion status */
; 1150 :         if (0
; 1151 :             || !dev->write_immed
; 1152 :             || (rc = dev->tmh->sync( dev, unitstat, code )) == 0

  017df	33 c0		 xor	 eax, eax
  017e1	85 c0		 test	 eax, eax
  017e3	75 4e		 jne	 SHORT $LN144@tapedev_ex
  017e5	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  017ed	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  017f3	c1 e8 08	 shr	 eax, 8
  017f6	83 e0 01	 and	 eax, 1
  017f9	85 c0		 test	 eax, eax
  017fb	74 36		 je	 SHORT $LN144@tapedev_ex
  017fd	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01805	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  0180c	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  01815	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  0181d	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01825	ff 50 58	 call	 QWORD PTR [rax+88]
  01828	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0182c	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  01831	75 23		 jne	 SHORT $LN143@tapedev_ex
$LN144@tapedev_ex:

; 1153 :         )
; 1154 :             build_senseX( TAPE_BSENSE_STATUSONLY, dev, unitstat, code );

  01833	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0183c	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01844	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0184c	b9 0d 00 00 00	 mov	 ecx, 13
  01851	e8 00 00 00 00	 call	 build_senseX
$LN143@tapedev_ex:

; 1155 : 
; 1156 :         break;

  01856	e9 6e 50 00 00	 jmp	 $LN13@tapedev_ex
$LN145@tapedev_ex:

; 1157 :     }
; 1158 : 
; 1159 :     /*---------------------------------------------------------------*/
; 1160 :     /* WRITE TAPE MARK                                               */
; 1161 :     /*---------------------------------------------------------------*/
; 1162 :     case 0x1F:
; 1163 :     {
; 1164 :         /* Command reject if the volume is currently fenced */
; 1165 :         if (dev->fenced)

  0185b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01863	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  01869	83 e0 01	 and	 eax, 1
  0186c	85 c0		 test	 eax, eax
  0186e	74 28		 je	 SHORT $LN146@tapedev_ex

; 1166 :         {
; 1167 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  01870	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01879	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01881	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01889	b9 0a 00 00 00	 mov	 ecx, 10
  0188e	e8 00 00 00 00	 call	 build_senseX

; 1168 :             break;

  01893	e9 31 50 00 00	 jmp	 $LN13@tapedev_ex
$LN146@tapedev_ex:

; 1169 :         }
; 1170 : 
; 1171 :         /* Unit check if tape is write-protected */
; 1172 :         if (dev->readonly || dev->tdparms.logical_readonly)

  01898	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  018a0	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  018a6	d1 e8		 shr	 eax, 1
  018a8	83 e0 01	 and	 eax, 1
  018ab	85 c0		 test	 eax, eax
  018ad	75 18		 jne	 SHORT $LN148@tapedev_ex
  018af	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  018b7	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  018bd	c1 e8 0b	 shr	 eax, 11
  018c0	83 e0 01	 and	 eax, 1
  018c3	85 c0		 test	 eax, eax
  018c5	74 28		 je	 SHORT $LN147@tapedev_ex
$LN148@tapedev_ex:

; 1173 :         {
; 1174 :             build_senseX (TAPE_BSENSE_WRITEPROTECT, dev, unitstat, code);

  018c7	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  018d0	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  018d8	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  018e0	b9 06 00 00 00	 mov	 ecx, 6
  018e5	e8 00 00 00 00	 call	 build_senseX

; 1175 :             break;

  018ea	e9 da 4f 00 00	 jmp	 $LN13@tapedev_ex
$LN147@tapedev_ex:

; 1176 :         }
; 1177 : 
; 1178 :         /* Update matrix display if needed */
; 1179 :         if ( TAPEDISPTYP_WAITACT == dev->tapedisptype )

  018ef	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  018f7	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  018fe	83 f8 09	 cmp	 eax, 9
  01901	75 1c		 jne	 SHORT $LN149@tapedev_ex

; 1180 :         {
; 1181 :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  01903	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0190b	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 1182 :             UpdateDisplay( dev );

  01912	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0191a	e8 00 00 00 00	 call	 UpdateDisplay
$LN149@tapedev_ex:

; 1183 :         }
; 1184 : 
; 1185 :         /* Assign a unique Message Id for this I/O if needed */
; 1186 :         INCREMENT_MESSAGEID(dev);

  0191f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01927	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0192d	c1 e8 03	 shr	 eax, 3
  01930	83 e0 01	 and	 eax, 1
  01933	85 c0		 test	 eax, eax
  01935	74 1e		 je	 SHORT $LN150@tapedev_ex
  01937	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0193f	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  01945	ff c0		 inc	 eax
  01947	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0194f	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN150@tapedev_ex:

; 1187 : 
; 1188 :         /* Do the WTM; exit if error */
; 1189 :         if ((rc = dev->tmh->wtm(dev,unitstat,code)) < 0)

  01955	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0195d	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  01964	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  0196d	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  01975	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0197d	ff 50 50	 call	 QWORD PTR [rax+80]
  01980	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  01984	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  01989	7d 05		 jge	 SHORT $LN151@tapedev_ex

; 1190 :             break;      // (error)

  0198b	e9 39 4f 00 00	 jmp	 $LN13@tapedev_ex
$LN151@tapedev_ex:

; 1191 : 
; 1192 :         dev->curfilen++;

  01990	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01998	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  0199f	66 ff c0	 inc	 ax
  019a2	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  019aa	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 1193 : 
; 1194 :         /* Perform flush/sync and/or set normal completion status */
; 1195 :         if (0
; 1196 :             || !dev->write_immed
; 1197 :             || (rc = dev->tmh->sync( dev, unitstat, code )) == 0

  019b1	33 c0		 xor	 eax, eax
  019b3	85 c0		 test	 eax, eax
  019b5	75 4e		 jne	 SHORT $LN153@tapedev_ex
  019b7	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  019bf	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  019c5	c1 e8 08	 shr	 eax, 8
  019c8	83 e0 01	 and	 eax, 1
  019cb	85 c0		 test	 eax, eax
  019cd	74 36		 je	 SHORT $LN153@tapedev_ex
  019cf	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  019d7	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  019de	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  019e7	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  019ef	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  019f7	ff 50 58	 call	 QWORD PTR [rax+88]
  019fa	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  019fe	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  01a03	75 23		 jne	 SHORT $LN152@tapedev_ex
$LN153@tapedev_ex:

; 1198 :         )
; 1199 :             build_senseX( TAPE_BSENSE_STATUSONLY, dev, unitstat, code );

  01a05	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01a0e	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01a16	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01a1e	b9 0d 00 00 00	 mov	 ecx, 13
  01a23	e8 00 00 00 00	 call	 build_senseX
$LN152@tapedev_ex:

; 1200 : 
; 1201 :         break;

  01a28	e9 9c 4e 00 00	 jmp	 $LN13@tapedev_ex
$LN154@tapedev_ex:

; 1202 :     }
; 1203 : 
; 1204 :     /*---------------------------------------------------------------*/
; 1205 :     /* READ BLOCK ID                                                 */
; 1206 :     /*---------------------------------------------------------------*/
; 1207 :     case 0x22:
; 1208 :     {
; 1209 :         BYTE  log_blockid  [4];     // (temp; BIG-ENDIAN format)
; 1210 :         BYTE  phys_blockid [4];     // (temp; BIG-ENDIAN format)
; 1211 : 
; 1212 :         int   errcode   = TAPE_BSENSE_STATUSONLY; // (presume success)

  01a2d	c7 84 24 d8 00
	00 00 0d 00 00
	00		 mov	 DWORD PTR errcode$12[rsp], 13

; 1213 : 
; 1214 :         /* Command reject if the volume is currently fenced */
; 1215 :         if (dev->fenced)

  01a38	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a40	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  01a46	83 e0 01	 and	 eax, 1
  01a49	85 c0		 test	 eax, eax
  01a4b	74 28		 je	 SHORT $LN155@tapedev_ex

; 1216 :         {
; 1217 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  01a4d	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01a56	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01a5e	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01a66	b9 0a 00 00 00	 mov	 ecx, 10
  01a6b	e8 00 00 00 00	 call	 build_senseX

; 1218 :             break;

  01a70	e9 54 4e 00 00	 jmp	 $LN13@tapedev_ex
$LN155@tapedev_ex:

; 1219 :         }
; 1220 : 
; 1221 :         /* Assign a unique Message Id for this I/O if needed */
; 1222 :         INCREMENT_MESSAGEID(dev);

  01a75	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a7d	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  01a83	c1 e8 03	 shr	 eax, 3
  01a86	83 e0 01	 and	 eax, 1
  01a89	85 c0		 test	 eax, eax
  01a8b	74 1e		 je	 SHORT $LN156@tapedev_ex
  01a8d	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a95	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  01a9b	ff c0		 inc	 eax
  01a9d	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01aa5	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN156@tapedev_ex:

; 1223 : 
; 1224 :         /* Calculate number of bytes and residual byte count */
; 1225 :         RESIDUAL_CALC( 2 * sizeof(dev->blockid) );

  01aab	c7 44 24 70 08
	00 00 00	 mov	 DWORD PTR len$[rsp], 8
  01ab3	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  01ab7	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  01abe	73 10		 jae	 SHORT $LN406@tapedev_ex
  01ac0	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  01ac7	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv828[rsp], eax
  01ace	eb 0b		 jmp	 SHORT $LN407@tapedev_ex
$LN406@tapedev_ex:
  01ad0	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  01ad4	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv828[rsp], eax
$LN407@tapedev_ex:
  01adb	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR tv828[rsp]
  01ae2	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  01ae6	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  01aea	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  01af1	2b c8		 sub	 ecx, eax
  01af3	8b c1		 mov	 eax, ecx
  01af5	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  01afd	89 01		 mov	 DWORD PTR [rcx], eax
  01aff	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  01b03	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  01b0a	73 0b		 jae	 SHORT $LN157@tapedev_ex
  01b0c	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  01b14	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN157@tapedev_ex:

; 1226 : 
; 1227 :         /* Ask media handler for actual value(s)... */
; 1228 :         if ((rc = dev->tmh->readblkid( dev, log_blockid, phys_blockid )) < 0)

  01b17	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01b1f	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  01b26	4c 8d 84 24 b4
	01 00 00	 lea	 r8, QWORD PTR phys_blockid$15[rsp]
  01b2e	48 8d 94 24 b0
	01 00 00	 lea	 rdx, QWORD PTR log_blockid$14[rsp]
  01b36	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01b3e	ff 90 80 00 00
	00		 call	 QWORD PTR [rax+128]
  01b44	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  01b48	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  01b4d	7d 0d		 jge	 SHORT $LN158@tapedev_ex

; 1229 :             errcode = TAPE_BSENSE_LOCATEERR;

  01b4f	c7 84 24 d8 00
	00 00 0e 00 00
	00		 mov	 DWORD PTR errcode$12[rsp], 14
  01b5a	eb 36		 jmp	 SHORT $LN159@tapedev_ex
$LN158@tapedev_ex:

; 1230 :         else
; 1231 :         {
; 1232 :             /* Copy results to channel I/O buffer... */
; 1233 :             memcpy( &iobuf[0], log_blockid,  4 );

  01b5c	b8 01 00 00 00	 mov	 eax, 1
  01b61	48 6b c0 00	 imul	 rax, rax, 0
  01b65	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  01b6d	8b 94 24 b0 01
	00 00		 mov	 edx, DWORD PTR log_blockid$14[rsp]
  01b74	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 1234 :             memcpy( &iobuf[4], phys_blockid, 4 );

  01b77	b8 01 00 00 00	 mov	 eax, 1
  01b7c	48 6b c0 04	 imul	 rax, rax, 4
  01b80	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  01b88	8b 94 24 b4 01
	00 00		 mov	 edx, DWORD PTR phys_blockid$15[rsp]
  01b8f	89 14 01	 mov	 DWORD PTR [rcx+rax], edx
$LN159@tapedev_ex:

; 1235 :         }
; 1236 : 
; 1237 :         /* Set completion status... */
; 1238 :         build_senseX( errcode, dev, unitstat, code );

  01b92	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01b9b	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01ba3	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01bab	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR errcode$12[rsp]
  01bb2	e8 00 00 00 00	 call	 build_senseX

; 1239 :         break;

  01bb7	e9 0d 4d 00 00	 jmp	 $LN13@tapedev_ex
$LN160@tapedev_ex:

; 1240 :     }
; 1241 : 
; 1242 :     /*---------------------------------------------------------------*/
; 1243 :     /* READ BUFFERED LOG                                             */
; 1244 :     /*---------------------------------------------------------------*/
; 1245 :     case 0x24:
; 1246 :     {
; 1247 :         /* Calculate residual byte count... */
; 1248 : 
; 1249 :         // PROGRAMMING NOTE: technically we *should* have up to
; 1250 :         // 64 bytes to give them, but we may not have that many.
; 1251 : 
; 1252 :         /* How many bytes we SHOULD have depends on whether
; 1253 :            Extended Buffered Log support is enabled or not */
; 1254 :         len = (dev->devchar[8] & 0x01) ? 64 : 32;

  01bbc	b8 01 00 00 00	 mov	 eax, 1
  01bc1	48 6b c0 08	 imul	 rax, rax, 8
  01bc5	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01bcd	0f b6 84 01 6c
	05 00 00	 movzx	 eax, BYTE PTR [rcx+rax+1388]
  01bd5	83 e0 01	 and	 eax, 1
  01bd8	85 c0		 test	 eax, eax
  01bda	74 0d		 je	 SHORT $LN408@tapedev_ex
  01bdc	c7 84 24 dc 00
	00 00 40 00 00
	00		 mov	 DWORD PTR tv866[rsp], 64 ; 00000040H
  01be7	eb 0b		 jmp	 SHORT $LN409@tapedev_ex
$LN408@tapedev_ex:
  01be9	c7 84 24 dc 00
	00 00 20 00 00
	00		 mov	 DWORD PTR tv866[rsp], 32 ; 00000020H
$LN409@tapedev_ex:
  01bf4	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR tv866[rsp]
  01bfb	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax

; 1255 :         RESIDUAL_CALC (len);

  01bff	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  01c03	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  01c07	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  01c0b	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  01c12	73 10		 jae	 SHORT $LN410@tapedev_ex
  01c14	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  01c1b	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv868[rsp], eax
  01c22	eb 0b		 jmp	 SHORT $LN411@tapedev_ex
$LN410@tapedev_ex:
  01c24	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  01c28	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv868[rsp], eax
$LN411@tapedev_ex:
  01c2f	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR tv868[rsp]
  01c36	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  01c3a	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  01c3e	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  01c45	2b c8		 sub	 ecx, eax
  01c47	8b c1		 mov	 eax, ecx
  01c49	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  01c51	89 01		 mov	 DWORD PTR [rcx], eax
  01c53	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  01c57	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  01c5e	73 0b		 jae	 SHORT $LN161@tapedev_ex
  01c60	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  01c68	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN161@tapedev_ex:

; 1256 : 
; 1257 :         /* Clear the device sense bytes */
; 1258 :         memset( iobuf, 0, num );

  01c6b	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  01c6f	48 89 84 24 d8
	03 00 00	 mov	 QWORD PTR tv873[rsp], rax
  01c77	48 8b bc 24 c8
	07 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  01c7f	33 c0		 xor	 eax, eax
  01c81	48 8b 8c 24 d8
	03 00 00	 mov	 rcx, QWORD PTR tv873[rsp]
  01c89	f3 aa		 rep stosb

; 1259 : 
; 1260 :         /* Copy device sense bytes to channel I/O buffer */
; 1261 :         memcpy (iobuf, dev->sense,

  01c8b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c93	8b 4c 24 74	 mov	 ecx, DWORD PTR num$[rsp]
  01c97	39 88 60 03 00
	00		 cmp	 DWORD PTR [rax+864], ecx
  01c9d	73 17		 jae	 SHORT $LN412@tapedev_ex
  01c9f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ca7	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  01cad	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv882[rsp], eax
  01cb4	eb 0b		 jmp	 SHORT $LN413@tapedev_ex
$LN412@tapedev_ex:
  01cb6	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  01cba	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv882[rsp], eax
$LN413@tapedev_ex:
  01cc1	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR tv882[rsp]
  01cc8	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01cd0	48 81 c1 64 03
	00 00		 add	 rcx, 868		; 00000364H
  01cd7	48 8b bc 24 c8
	07 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  01cdf	48 8b f1	 mov	 rsi, rcx
  01ce2	8b c8		 mov	 ecx, eax
  01ce4	f3 a4		 rep movsb

; 1262 :                 dev->numsense < (U32)num ? dev->numsense : (U32)num);
; 1263 : 
; 1264 :         /* FIXME: Update for Format-30 Data and others
; 1265 :          *
; 1266 :          * SG24-2594-02 Magstar and IBM 3590 High Performance Tape
; 1267 :          *              Subsystem: Multiplatform Implementation, H.2
; 1268 :          *              Read Buffered Log (RBL, X'24') Format-30 Data,
; 1269 :          *              p. 290
; 1270 :          */
; 1271 : 
; 1272 :         /* Return unit status */
; 1273 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  01ce6	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01cef	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01cf7	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01cff	b9 0d 00 00 00	 mov	 ecx, 13
  01d04	e8 00 00 00 00	 call	 build_senseX

; 1274 :         break;

  01d09	e9 bb 4b 00 00	 jmp	 $LN13@tapedev_ex
$LN162@tapedev_ex:

; 1275 :     }
; 1276 : 
; 1277 :     /*---------------------------------------------------------------*/
; 1278 :     /* BACKSPACE BLOCK                                               */
; 1279 :     /*---------------------------------------------------------------*/
; 1280 :     case 0x27:
; 1281 :     {
; 1282 :         /* Command reject if the volume is currently fenced */
; 1283 :         if (dev->fenced)

  01d0e	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d16	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  01d1c	83 e0 01	 and	 eax, 1
  01d1f	85 c0		 test	 eax, eax
  01d21	74 28		 je	 SHORT $LN163@tapedev_ex

; 1284 :         {
; 1285 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  01d23	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01d2c	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01d34	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01d3c	b9 0a 00 00 00	 mov	 ecx, 10
  01d41	e8 00 00 00 00	 call	 build_senseX

; 1286 :             break;

  01d46	e9 7e 4b 00 00	 jmp	 $LN13@tapedev_ex
$LN163@tapedev_ex:

; 1287 :         }
; 1288 : 
; 1289 :         /* Update matrix display if needed */
; 1290 :         if ( TAPEDISPTYP_WAITACT == dev->tapedisptype )

  01d4b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d53	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  01d5a	83 f8 09	 cmp	 eax, 9
  01d5d	75 1c		 jne	 SHORT $LN164@tapedev_ex

; 1291 :         {
; 1292 :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  01d5f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d67	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 1293 :             UpdateDisplay( dev );

  01d6e	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01d76	e8 00 00 00 00	 call	 UpdateDisplay
$LN164@tapedev_ex:

; 1294 :         }
; 1295 : 
; 1296 :         /* Assign a unique Message Id for this I/O if needed */
; 1297 :         INCREMENT_MESSAGEID(dev);

  01d7b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d83	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  01d89	c1 e8 03	 shr	 eax, 3
  01d8c	83 e0 01	 and	 eax, 1
  01d8f	85 c0		 test	 eax, eax
  01d91	74 1e		 je	 SHORT $LN165@tapedev_ex
  01d93	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d9b	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  01da1	ff c0		 inc	 eax
  01da3	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01dab	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN165@tapedev_ex:

; 1298 : 
; 1299 :         /* Backspace to previous block according to device type,
; 1300 :            and exit with unit check status on error condition */
; 1301 :         if ((rc = dev->tmh->bsb( dev, unitstat, code )) < 0)

  01db1	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01db9	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  01dc0	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  01dc9	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  01dd1	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01dd9	ff 50 30	 call	 QWORD PTR [rax+48]
  01ddc	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  01de0	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  01de5	7d 05		 jge	 SHORT $LN166@tapedev_ex

; 1302 :             break;

  01de7	e9 dd 4a 00 00	 jmp	 $LN13@tapedev_ex
$LN166@tapedev_ex:

; 1303 : 
; 1304 :         /* Exit with unit exception status if tapemark was sensed */
; 1305 :         if (rc == 0)

  01dec	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  01df1	75 28		 jne	 SHORT $LN167@tapedev_ex

; 1306 :         {
; 1307 :             build_senseX (TAPE_BSENSE_READTM, dev, unitstat, code);

  01df3	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01dfc	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01e04	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01e0c	b9 0f 00 00 00	 mov	 ecx, 15
  01e11	e8 00 00 00 00	 call	 build_senseX

; 1308 :             break;

  01e16	e9 ae 4a 00 00	 jmp	 $LN13@tapedev_ex
$LN167@tapedev_ex:

; 1309 :         }
; 1310 : 
; 1311 :         /* Set normal status */
; 1312 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  01e1b	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01e24	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01e2c	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01e34	b9 0d 00 00 00	 mov	 ecx, 13
  01e39	e8 00 00 00 00	 call	 build_senseX

; 1313 :         break;

  01e3e	e9 86 4a 00 00	 jmp	 $LN13@tapedev_ex
$LN168@tapedev_ex:

; 1314 :     }
; 1315 : 
; 1316 :     /*---------------------------------------------------------------*/
; 1317 :     /* BACKSPACE FILE                                                */
; 1318 :     /*---------------------------------------------------------------*/
; 1319 :     case 0x2F:
; 1320 :     {
; 1321 :         /* Command reject if the volume is currently fenced */
; 1322 :         if (dev->fenced)

  01e43	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e4b	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  01e51	83 e0 01	 and	 eax, 1
  01e54	85 c0		 test	 eax, eax
  01e56	74 28		 je	 SHORT $LN169@tapedev_ex

; 1323 :         {
; 1324 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  01e58	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01e61	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01e69	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01e71	b9 0a 00 00 00	 mov	 ecx, 10
  01e76	e8 00 00 00 00	 call	 build_senseX

; 1325 :             break;

  01e7b	e9 49 4a 00 00	 jmp	 $LN13@tapedev_ex
$LN169@tapedev_ex:

; 1326 :         }
; 1327 : 
; 1328 :         /* Update matrix display if needed */
; 1329 :         if ( TAPEDISPTYP_WAITACT == dev->tapedisptype )

  01e80	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e88	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  01e8f	83 f8 09	 cmp	 eax, 9
  01e92	75 1c		 jne	 SHORT $LN170@tapedev_ex

; 1330 :         {
; 1331 :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  01e94	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e9c	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 1332 :             UpdateDisplay( dev );

  01ea3	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01eab	e8 00 00 00 00	 call	 UpdateDisplay
$LN170@tapedev_ex:

; 1333 :         }
; 1334 : 
; 1335 :         /* Assign a unique Message Id for this I/O if needed */
; 1336 :         INCREMENT_MESSAGEID(dev);

  01eb0	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01eb8	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  01ebe	c1 e8 03	 shr	 eax, 3
  01ec1	83 e0 01	 and	 eax, 1
  01ec4	85 c0		 test	 eax, eax
  01ec6	74 1e		 je	 SHORT $LN171@tapedev_ex
  01ec8	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ed0	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  01ed6	ff c0		 inc	 eax
  01ed8	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01ee0	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN171@tapedev_ex:

; 1337 : 
; 1338 :         /* Backspace to previous file according to device type,
; 1339 :            and exit with unit check status on error condition */
; 1340 :         if ((rc = dev->tmh->bsf( dev, unitstat, code )) < 0)

  01ee6	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01eee	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  01ef5	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  01efe	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  01f06	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01f0e	ff 50 40	 call	 QWORD PTR [rax+64]
  01f11	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  01f15	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  01f1a	7d 05		 jge	 SHORT $LN172@tapedev_ex

; 1341 :             break;

  01f1c	e9 a8 49 00 00	 jmp	 $LN13@tapedev_ex
$LN172@tapedev_ex:

; 1342 : 
; 1343 :         /* Set normal status */
; 1344 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  01f21	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01f2a	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01f32	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01f3a	b9 0d 00 00 00	 mov	 ecx, 13
  01f3f	e8 00 00 00 00	 call	 build_senseX

; 1345 :         break;

  01f44	e9 80 49 00 00	 jmp	 $LN13@tapedev_ex
$LN173@tapedev_ex:

; 1346 :     }
; 1347 : 
; 1348 :     /*---------------------------------------------------------------*/
; 1349 :     /* SENSE PATH GROUP ID                                           */
; 1350 :     /*---------------------------------------------------------------*/
; 1351 :     case 0x34:
; 1352 :     {
; 1353 :         /*    GA32-0127 IBM 3490E Hardware Reference
; 1354 : 
; 1355 :         Sense Path Group ID (X'34')
; 1356 : 
; 1357 :         The Sense Path Group ID command transfers 12 bytes of information
; 1358 :         from the control unit to the channel.  The first byte (byte 0)
; 1359 :         is the path state byte, and the remaining 11 bytes (bytes 1-11)
; 1360 :         contain the path-group ID.
; 1361 : 
; 1362 :         The bit assignments in the path state byte (byte 0) are:
; 1363 : 
; 1364 :          ________ ________ ____________________________________
; 1365 :         | Bit    |  Value | Description                        |
; 1366 :         |________|________|____________________________________|
; 1367 :         | 0, 1   |        | Pathing Status                     |
; 1368 :         |________|________|____________________________________|
; 1369 :         |        |   00   | Reset                              |
; 1370 :         |________|________|____________________________________|
; 1371 :         |        |   01   | Reserved                           |
; 1372 :         |________|________|____________________________________|
; 1373 :         |        |   10   | Ungrouped                          |
; 1374 :         |________|________|____________________________________|
; 1375 :         |        |   11   | Grouped                            |
; 1376 :         |________|________|____________________________________|
; 1377 :         | 2, 3   |        | Partitioning State                 |
; 1378 :         |________|________|____________________________________|
; 1379 :         |        |   00   | Implicitly Enabled                 |
; 1380 :         |________|________|____________________________________|
; 1381 :         |        |   01   | Reserved                           |
; 1382 :         |________|________|____________________________________|
; 1383 :         |        |   10   | Disabled                           |
; 1384 :         |________|________|____________________________________|
; 1385 :         |        |   11   | Explicitly Enabled                 |
; 1386 :         |________|________|____________________________________|
; 1387 :         | 4      |        | Path Mode                          |
; 1388 :         |________|________|____________________________________|
; 1389 :         |        |    0   | Single path mode.                  |
; 1390 :         |        |    1   | Reserved, invalid for this device. |
; 1391 :         |________|________|____________________________________|
; 1392 :         | 5-7    |   000  | Reserved                           |
; 1393 :         |________|________|____________________________________|
; 1394 :         */
; 1395 : 
; 1396 :         /* Command Reject if Supervisor-Inhibit */
; 1397 :         if (dev->supvr_inhibit)

  01f49	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f51	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  01f57	c1 e8 07	 shr	 eax, 7
  01f5a	83 e0 01	 and	 eax, 1
  01f5d	85 c0		 test	 eax, eax
  01f5f	74 28		 je	 SHORT $LN174@tapedev_ex

; 1398 :         {
; 1399 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  01f61	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01f6a	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01f72	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01f7a	b9 04 00 00 00	 mov	 ecx, 4
  01f7f	e8 00 00 00 00	 call	 build_senseX

; 1400 :             break;

  01f84	e9 40 49 00 00	 jmp	 $LN13@tapedev_ex
$LN174@tapedev_ex:

; 1401 :         }
; 1402 : 
; 1403 :         /* Command reject if the command is not the ONLY command
; 1404 :            in the channel program */
; 1405 :         if (chained & CCW_FLAGS_CC)

  01f89	0f b6 84 24 a8
	07 00 00	 movzx	 eax, BYTE PTR chained$[rsp]
  01f91	83 e0 40	 and	 eax, 64			; 00000040H
  01f94	85 c0		 test	 eax, eax
  01f96	74 28		 je	 SHORT $LN175@tapedev_ex

; 1406 :         {
; 1407 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  01f98	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  01fa1	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  01fa9	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  01fb1	b9 04 00 00 00	 mov	 ecx, 4
  01fb6	e8 00 00 00 00	 call	 build_senseX

; 1408 :             break;

  01fbb	e9 09 49 00 00	 jmp	 $LN13@tapedev_ex
$LN175@tapedev_ex:

; 1409 :         }
; 1410 : 
; 1411 :         /* Calculate residual byte count */
; 1412 :         RESIDUAL_CALC (12);

  01fc0	c7 44 24 70 0c
	00 00 00	 mov	 DWORD PTR len$[rsp], 12
  01fc8	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  01fcc	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  01fd3	73 10		 jae	 SHORT $LN414@tapedev_ex
  01fd5	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  01fdc	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv974[rsp], eax
  01fe3	eb 0b		 jmp	 SHORT $LN415@tapedev_ex
$LN414@tapedev_ex:
  01fe5	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  01fe9	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv974[rsp], eax
$LN415@tapedev_ex:
  01ff0	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR tv974[rsp]
  01ff7	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  01ffb	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  01fff	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  02006	2b c8		 sub	 ecx, eax
  02008	8b c1		 mov	 eax, ecx
  0200a	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  02012	89 01		 mov	 DWORD PTR [rcx], eax
  02014	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  02018	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  0201f	73 0b		 jae	 SHORT $LN176@tapedev_ex
  02021	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  02029	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN176@tapedev_ex:

; 1413 : 
; 1414 :         /* Byte 0 is the path group state byte */
; 1415 :         iobuf[0] = dev->pgstat;

  0202c	b8 01 00 00 00	 mov	 eax, 1
  02031	48 6b c0 00	 imul	 rax, rax, 0
  02035	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0203d	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02045	0f b6 92 ac 05
	00 00		 movzx	 edx, BYTE PTR [rdx+1452]
  0204c	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 1416 : 
; 1417 :         /* Bytes 1-11 contain the path group identifier */
; 1418 :         if (num > 1)

  0204f	83 7c 24 74 01	 cmp	 DWORD PTR num$[rsp], 1
  02054	76 2c		 jbe	 SHORT $LN177@tapedev_ex

; 1419 :             memcpy (iobuf+1, dev->pgid, num-1);

  02056	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  0205a	ff c8		 dec	 eax
  0205c	8b c0		 mov	 eax, eax
  0205e	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02066	48 81 c1 ad 05
	00 00		 add	 rcx, 1453		; 000005adH
  0206d	48 8b 94 24 c8
	07 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  02075	48 ff c2	 inc	 rdx
  02078	48 8b fa	 mov	 rdi, rdx
  0207b	48 8b f1	 mov	 rsi, rcx
  0207e	8b c8		 mov	 ecx, eax
  02080	f3 a4		 rep movsb
$LN177@tapedev_ex:

; 1420 : 
; 1421 :         /* Return unit status */
; 1422 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  02082	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0208b	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  02093	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0209b	b9 0d 00 00 00	 mov	 ecx, 13
  020a0	e8 00 00 00 00	 call	 build_senseX

; 1423 :         break;

  020a5	e9 1f 48 00 00	 jmp	 $LN13@tapedev_ex
$LN178@tapedev_ex:

; 1424 : 
; 1425 :     } /* End case 0x34: SENSE PATH GROUP ID */
; 1426 : 
; 1427 :     /*---------------------------------------------------------------*/
; 1428 :     /* FORWARD SPACE BLOCK                                           */
; 1429 :     /*---------------------------------------------------------------*/
; 1430 :     case 0x37:
; 1431 :     {
; 1432 :         /* Command reject if the volume is currently fenced */
; 1433 :         if (dev->fenced)

  020aa	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  020b2	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  020b8	83 e0 01	 and	 eax, 1
  020bb	85 c0		 test	 eax, eax
  020bd	74 28		 je	 SHORT $LN179@tapedev_ex

; 1434 :         {
; 1435 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  020bf	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  020c8	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  020d0	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  020d8	b9 0a 00 00 00	 mov	 ecx, 10
  020dd	e8 00 00 00 00	 call	 build_senseX

; 1436 :             break;

  020e2	e9 e2 47 00 00	 jmp	 $LN13@tapedev_ex
$LN179@tapedev_ex:

; 1437 :         }
; 1438 : 
; 1439 :         /* Update matrix display if needed */
; 1440 :         if ( TAPEDISPTYP_WAITACT == dev->tapedisptype )

  020e7	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  020ef	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  020f6	83 f8 09	 cmp	 eax, 9
  020f9	75 1c		 jne	 SHORT $LN180@tapedev_ex

; 1441 :         {
; 1442 :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  020fb	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02103	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 1443 :             UpdateDisplay( dev );

  0210a	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02112	e8 00 00 00 00	 call	 UpdateDisplay
$LN180@tapedev_ex:

; 1444 :         }
; 1445 : 
; 1446 :         /* Assign a unique Message Id for this I/O if needed */
; 1447 :         INCREMENT_MESSAGEID(dev);

  02117	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0211f	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  02125	c1 e8 03	 shr	 eax, 3
  02128	83 e0 01	 and	 eax, 1
  0212b	85 c0		 test	 eax, eax
  0212d	74 1e		 je	 SHORT $LN181@tapedev_ex
  0212f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02137	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  0213d	ff c0		 inc	 eax
  0213f	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02147	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN181@tapedev_ex:

; 1448 : 
; 1449 :         /* Forward to next block according to device type  */
; 1450 :         /* Exit with unit check status if error condition  */
; 1451 :         if ((rc = dev->tmh->fsb( dev, unitstat, code )) < 0)

  0214d	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02155	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  0215c	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  02165	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  0216d	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02175	ff 50 38	 call	 QWORD PTR [rax+56]
  02178	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0217c	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  02181	7d 05		 jge	 SHORT $LN182@tapedev_ex

; 1452 :             break;

  02183	e9 41 47 00 00	 jmp	 $LN13@tapedev_ex
$LN182@tapedev_ex:

; 1453 : 
; 1454 :         /* Exit with unit exception status if tapemark was sensed */
; 1455 :         if (rc == 0)

  02188	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0218d	75 28		 jne	 SHORT $LN183@tapedev_ex

; 1456 :         {
; 1457 :             build_senseX (TAPE_BSENSE_READTM, dev, unitstat, code);

  0218f	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  02198	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  021a0	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  021a8	b9 0f 00 00 00	 mov	 ecx, 15
  021ad	e8 00 00 00 00	 call	 build_senseX

; 1458 :             break;

  021b2	e9 12 47 00 00	 jmp	 $LN13@tapedev_ex
$LN183@tapedev_ex:

; 1459 :         }
; 1460 : 
; 1461 :         /* Set normal status */
; 1462 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  021b7	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  021c0	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  021c8	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  021d0	b9 0d 00 00 00	 mov	 ecx, 13
  021d5	e8 00 00 00 00	 call	 build_senseX

; 1463 :         break;

  021da	e9 ea 46 00 00	 jmp	 $LN13@tapedev_ex
$LN184@tapedev_ex:

; 1464 :     }
; 1465 : 
; 1466 :     /*---------------------------------------------------------------*/
; 1467 :     /* READ SUBSYSTEM DATA  (3490/3590)                              */
; 1468 :     /*---------------------------------------------------------------*/
; 1469 :     case 0x3E:
; 1470 :     {
; 1471 :         /*       GA32-0127 IBM 3490E Hardware Reference
; 1472 : 
; 1473 :         Read Subsystem Data (X'3E')
; 1474 : 
; 1475 :         The Read Subsystem Data command obtains various types of
; 1476 :         information from the 3480/3490 subsystem.  The data presented
; 1477 :         is dependent on the command immediately preceding the Read
; 1478 :         Subsystem Data command in the command chain.
; 1479 : 
; 1480 :         If the preceding command in the command chain is a Perform
; 1481 :         Subsystem Function command with the Prepare for Read Subsystem
; 1482 :         Data order, the data presented is a function of the sub-order
; 1483 :         in the data transferred with the order.
; 1484 :         */
; 1485 : 
; 1486 :         /* Command reject if not chained from either a Set Interface
; 1487 :            Identifier or Perform Subsystem Function command */
; 1488 :         if (!((chained & CCW_FLAGS_CC) && (0x77 == prevcode || 0x73 == prevcode)))

  021df	0f b6 84 24 a8
	07 00 00	 movzx	 eax, BYTE PTR chained$[rsp]
  021e7	83 e0 40	 and	 eax, 64			; 00000040H
  021ea	85 c0		 test	 eax, eax
  021ec	74 1a		 je	 SHORT $LN186@tapedev_ex
  021ee	0f b6 84 24 b8
	07 00 00	 movzx	 eax, BYTE PTR prevcode$[rsp]
  021f6	83 f8 77	 cmp	 eax, 119		; 00000077H
  021f9	74 35		 je	 SHORT $LN185@tapedev_ex
  021fb	0f b6 84 24 b8
	07 00 00	 movzx	 eax, BYTE PTR prevcode$[rsp]
  02203	83 f8 73	 cmp	 eax, 115		; 00000073H
  02206	74 28		 je	 SHORT $LN185@tapedev_ex
$LN186@tapedev_ex:

; 1489 :         {
; 1490 :             build_senseX(TAPE_BSENSE_BADCOMMAND,dev,unitstat,code);

  02208	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  02211	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  02219	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02221	b9 04 00 00 00	 mov	 ecx, 4
  02226	e8 00 00 00 00	 call	 build_senseX

; 1491 :             break;

  0222b	e9 99 46 00 00	 jmp	 $LN13@tapedev_ex
$LN185@tapedev_ex:

; 1492 :         }
; 1493 : 
; 1494 :         /* Command reject if no subsystem data was prepared
; 1495 :            by a previous Perform Subsystem Function command */
; 1496 :         if (!dev->tapssdlen)      // (any subsystem data?)

  02230	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02238	0f b7 80 20 10
	00 00		 movzx	 eax, WORD PTR [rax+4128]
  0223f	85 c0		 test	 eax, eax
  02241	75 28		 jne	 SHORT $LN187@tapedev_ex

; 1497 :         {
; 1498 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  02243	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0224c	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  02254	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0225c	b9 04 00 00 00	 mov	 ecx, 4
  02261	e8 00 00 00 00	 call	 build_senseX

; 1499 :             break;

  02266	e9 5e 46 00 00	 jmp	 $LN13@tapedev_ex
$LN187@tapedev_ex:

; 1500 :         }
; 1501 : 
; 1502 :         /* Calculate residual byte count */
; 1503 :         RESIDUAL_CALC (dev->tapssdlen);

  0226b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02273	0f b7 80 20 10
	00 00		 movzx	 eax, WORD PTR [rax+4128]
  0227a	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  0227e	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  02282	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  02289	73 10		 jae	 SHORT $LN416@tapedev_ex
  0228b	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  02292	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv1051[rsp], eax
  02299	eb 0b		 jmp	 SHORT $LN417@tapedev_ex
$LN416@tapedev_ex:
  0229b	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0229f	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv1051[rsp], eax
$LN417@tapedev_ex:
  022a6	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR tv1051[rsp]
  022ad	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  022b1	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  022b5	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  022bc	2b c8		 sub	 ecx, eax
  022be	8b c1		 mov	 eax, ecx
  022c0	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  022c8	89 01		 mov	 DWORD PTR [rcx], eax
  022ca	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  022ce	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  022d5	73 0b		 jae	 SHORT $LN188@tapedev_ex
  022d7	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  022df	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN188@tapedev_ex:

; 1504 : 
; 1505 :         /* PROGRAMMING NOTE: the Prepare for Read Subsystem Data
; 1506 :            order of the previous Perform Subsystem Function command
; 1507 :            has already prepared the subsystem data directly in the
; 1508 :            channel buffer itself (iobuf), so there isn't any data
; 1509 :            that actually needs to be moved/copied; the data is
; 1510 :            already sitting in the channel buffer. All we need do
; 1511 :            is return a normal status.
; 1512 :         */
; 1513 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  022e2	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  022eb	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  022f3	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  022fb	b9 0d 00 00 00	 mov	 ecx, 13
  02300	e8 00 00 00 00	 call	 build_senseX

; 1514 :         break;

  02305	e9 bf 45 00 00	 jmp	 $LN13@tapedev_ex
$LN189@tapedev_ex:

; 1515 : 
; 1516 :     } /* End case 0x3E: READ SUBSYSTEM DATA */
; 1517 : 
; 1518 :     /*---------------------------------------------------------------*/
; 1519 :     /* FORWARD SPACE FILE                                            */
; 1520 :     /*---------------------------------------------------------------*/
; 1521 :     case 0x3F:
; 1522 :     {
; 1523 :         /* Command reject if the volume is currently fenced */
; 1524 :         if (dev->fenced)

  0230a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02312	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  02318	83 e0 01	 and	 eax, 1
  0231b	85 c0		 test	 eax, eax
  0231d	74 28		 je	 SHORT $LN190@tapedev_ex

; 1525 :         {
; 1526 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  0231f	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  02328	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  02330	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02338	b9 0a 00 00 00	 mov	 ecx, 10
  0233d	e8 00 00 00 00	 call	 build_senseX

; 1527 :             break;

  02342	e9 82 45 00 00	 jmp	 $LN13@tapedev_ex
$LN190@tapedev_ex:

; 1528 :         }
; 1529 : 
; 1530 :         /* Update matrix display if needed */
; 1531 :         if ( TAPEDISPTYP_WAITACT == dev->tapedisptype )

  02347	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0234f	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  02356	83 f8 09	 cmp	 eax, 9
  02359	75 1c		 jne	 SHORT $LN191@tapedev_ex

; 1532 :         {
; 1533 :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  0235b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02363	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 1534 :             UpdateDisplay( dev );

  0236a	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02372	e8 00 00 00 00	 call	 UpdateDisplay
$LN191@tapedev_ex:

; 1535 :         }
; 1536 : 
; 1537 :         /* Assign a unique Message Id for this I/O if needed */
; 1538 :         INCREMENT_MESSAGEID(dev);

  02377	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0237f	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  02385	c1 e8 03	 shr	 eax, 3
  02388	83 e0 01	 and	 eax, 1
  0238b	85 c0		 test	 eax, eax
  0238d	74 1e		 je	 SHORT $LN192@tapedev_ex
  0238f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02397	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  0239d	ff c0		 inc	 eax
  0239f	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  023a7	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN192@tapedev_ex:

; 1539 : 
; 1540 :         /* Forward to next file according to device type  */
; 1541 :         /* Exit with unit check status if error condition */
; 1542 :         if ((rc = dev->tmh->fsf( dev, unitstat, code )) < 0)

  023ad	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  023b5	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  023bc	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  023c5	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  023cd	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  023d5	ff 50 48	 call	 QWORD PTR [rax+72]
  023d8	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  023dc	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  023e1	7d 05		 jge	 SHORT $LN193@tapedev_ex

; 1543 :             break;

  023e3	e9 e1 44 00 00	 jmp	 $LN13@tapedev_ex
$LN193@tapedev_ex:

; 1544 : 
; 1545 :         /* Set normal status */
; 1546 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  023e8	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  023f1	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  023f9	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02401	b9 0d 00 00 00	 mov	 ecx, 13
  02406	e8 00 00 00 00	 call	 build_senseX

; 1547 :         break;

  0240b	e9 b9 44 00 00	 jmp	 $LN13@tapedev_ex
$LN194@tapedev_ex:

; 1548 :     }
; 1549 : 
; 1550 :     /*---------------------------------------------------------------*/
; 1551 :     /* SYNCHRONIZE  (3480 or later)                                  */
; 1552 :     /*---------------------------------------------------------------*/
; 1553 :     case 0x43:
; 1554 :     {
; 1555 :         /* Command reject if the volume is currently fenced */
; 1556 :         if (dev->fenced)

  02410	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02418	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0241e	83 e0 01	 and	 eax, 1
  02421	85 c0		 test	 eax, eax
  02423	74 28		 je	 SHORT $LN195@tapedev_ex

; 1557 :         {
; 1558 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  02425	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0242e	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  02436	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0243e	b9 0a 00 00 00	 mov	 ecx, 10
  02443	e8 00 00 00 00	 call	 build_senseX

; 1559 :             break;

  02448	e9 7c 44 00 00	 jmp	 $LN13@tapedev_ex
$LN195@tapedev_ex:

; 1560 :         }
; 1561 : 
; 1562 :         /* Update matrix display if needed */
; 1563 :         if ( TAPEDISPTYP_WAITACT == dev->tapedisptype )

  0244d	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02455	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  0245c	83 f8 09	 cmp	 eax, 9
  0245f	75 1c		 jne	 SHORT $LN196@tapedev_ex

; 1564 :         {
; 1565 :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  02461	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02469	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 1566 :             UpdateDisplay( dev );

  02470	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02478	e8 00 00 00 00	 call	 UpdateDisplay
$LN196@tapedev_ex:

; 1567 :         }
; 1568 : 
; 1569 :         /* Assign a unique Message Id for this I/O if needed */
; 1570 :         INCREMENT_MESSAGEID(dev);

  0247d	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02485	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0248b	c1 e8 03	 shr	 eax, 3
  0248e	83 e0 01	 and	 eax, 1
  02491	85 c0		 test	 eax, eax
  02493	74 1e		 je	 SHORT $LN197@tapedev_ex
  02495	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0249d	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  024a3	ff c0		 inc	 eax
  024a5	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  024ad	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN197@tapedev_ex:

; 1571 : 
; 1572 :         /* Do the sync */
; 1573 :         if ((rc = dev->tmh->sync( dev, unitstat, code )) == 0)

  024b3	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  024bb	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  024c2	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  024cb	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  024d3	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  024db	ff 50 58	 call	 QWORD PTR [rax+88]
  024de	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  024e2	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  024e7	75 23		 jne	 SHORT $LN198@tapedev_ex

; 1574 :             build_senseX( TAPE_BSENSE_STATUSONLY, dev, unitstat, code );

  024e9	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  024f2	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  024fa	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02502	b9 0d 00 00 00	 mov	 ecx, 13
  02507	e8 00 00 00 00	 call	 build_senseX
$LN198@tapedev_ex:

; 1575 : 
; 1576 :         break;

  0250c	e9 b8 43 00 00	 jmp	 $LN13@tapedev_ex
$LN199@tapedev_ex:

; 1577 :     }
; 1578 : 
; 1579 :     /*---------------------------------------------------------------*/
; 1580 :     /* SET DIAGNOSE      --  Special AUTOMOUNT support  --           */
; 1581 :     /*---------------------------------------------------------------*/
; 1582 :     case 0x4B:
; 1583 :     {
; 1584 :         int     argc, i;                                     /* work */
; 1585 :         char  **argv;                                        /* work */
; 1586 :         char    newfile [ sizeof(dev->filename) ];           /* work */
; 1587 : 
; 1588 :         /* Command reject if AUTOMOUNT support not enabled */
; 1589 :         if (0
; 1590 :             || dev->tapedevt == TAPEDEVT_SCSITAPE
; 1591 :             || sysblk.tamdir == NULL
; 1592 :             || dev->noautomount

  02511	33 c0		 xor	 eax, eax
  02513	85 c0		 test	 eax, eax
  02515	75 3d		 jne	 SHORT $LN201@tapedev_ex
  02517	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0251f	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02526	83 f8 03	 cmp	 eax, 3
  02529	74 29		 je	 SHORT $LN201@tapedev_ex
  0252b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  02532	48 83 b8 80 12
	00 00 00	 cmp	 QWORD PTR [rax+4736], 0
  0253a	74 18		 je	 SHORT $LN201@tapedev_ex
  0253c	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02544	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0254a	c1 e8 06	 shr	 eax, 6
  0254d	83 e0 01	 and	 eax, 1
  02550	85 c0		 test	 eax, eax
  02552	74 28		 je	 SHORT $LN200@tapedev_ex
$LN201@tapedev_ex:

; 1593 :         )
; 1594 :         {
; 1595 :             build_senseX(TAPE_BSENSE_BADCOMMAND,dev,unitstat,code);

  02554	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0255d	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  02565	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0256d	b9 04 00 00 00	 mov	 ecx, 4
  02572	e8 00 00 00 00	 call	 build_senseX

; 1596 :             break;

  02577	e9 4d 43 00 00	 jmp	 $LN13@tapedev_ex
$LN200@tapedev_ex:

; 1597 :         }
; 1598 : 
; 1599 :         /* Command Reject if Supervisor-Inhibit */
; 1600 :         if (dev->supvr_inhibit)

  0257c	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02584	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0258a	c1 e8 07	 shr	 eax, 7
  0258d	83 e0 01	 and	 eax, 1
  02590	85 c0		 test	 eax, eax
  02592	74 28		 je	 SHORT $LN202@tapedev_ex

; 1601 :         {
; 1602 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  02594	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0259d	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  025a5	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  025ad	b9 04 00 00 00	 mov	 ecx, 4
  025b2	e8 00 00 00 00	 call	 build_senseX

; 1603 :             break;

  025b7	e9 0d 43 00 00	 jmp	 $LN13@tapedev_ex
$LN202@tapedev_ex:

; 1604 :         }
; 1605 : 
; 1606 :         /* Command Reject if command-chained and i/o length not 1 */
; 1607 :         if ((flags & CCW_FLAGS_CC) && count == 1)

  025bc	0f b6 84 24 a0
	07 00 00	 movzx	 eax, BYTE PTR flags$[rsp]
  025c4	83 e0 40	 and	 eax, 64			; 00000040H
  025c7	85 c0		 test	 eax, eax
  025c9	74 32		 je	 SHORT $LN203@tapedev_ex
  025cb	83 bc 24 b0 07
	00 00 01	 cmp	 DWORD PTR count$[rsp], 1
  025d3	75 28		 jne	 SHORT $LN203@tapedev_ex

; 1608 :         {
; 1609 :             /* AUTOMOUNT QUERY - part 1 (chained 0xE4 SENSE ID = part 2) */
; 1610 : 
; 1611 :             /* Set normal status but do nothing else; the next CCW
; 1612 :                should be a SENSE ID (0xE4) which will do the query */
; 1613 :             build_senseX( TAPE_BSENSE_STATUSONLY, dev, unitstat, code );

  025d5	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  025de	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  025e6	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  025ee	b9 0d 00 00 00	 mov	 ecx, 13
  025f3	e8 00 00 00 00	 call	 build_senseX

; 1614 :             break;

  025f8	e9 cc 42 00 00	 jmp	 $LN13@tapedev_ex
$LN203@tapedev_ex:

; 1615 :         }
; 1616 : 
; 1617 :         /* AUTOMOUNT MOUNT... */
; 1618 : 
; 1619 :         /* Calculate residual byte count */
; 1620 :         RESIDUAL_CALC (sizeof(newfile)-1);   /* (minus-1 for NULL) */

  025fd	c7 44 24 70 04
	01 00 00	 mov	 DWORD PTR len$[rsp], 260 ; 00000104H
  02605	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  02609	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  02610	73 10		 jae	 SHORT $LN418@tapedev_ex
  02612	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  02619	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv1151[rsp], eax
  02620	eb 0b		 jmp	 SHORT $LN419@tapedev_ex
$LN418@tapedev_ex:
  02622	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  02626	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv1151[rsp], eax
$LN419@tapedev_ex:
  0262d	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR tv1151[rsp]
  02634	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  02638	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  0263c	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  02643	2b c8		 sub	 ecx, eax
  02645	8b c1		 mov	 eax, ecx
  02647	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  0264f	89 01		 mov	 DWORD PTR [rcx], eax
  02651	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  02655	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  0265c	73 0b		 jae	 SHORT $LN204@tapedev_ex
  0265e	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  02666	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN204@tapedev_ex:

; 1621 : 
; 1622 :         /* Copy the device's new filename from guest storage */
; 1623 :         str_guest_to_host( iobuf, (BYTE *)newfile, num );

  02669	44 8b 44 24 74	 mov	 r8d, DWORD PTR num$[rsp]
  0266e	48 8d 94 24 f0
	03 00 00	 lea	 rdx, QWORD PTR newfile$20[rsp]
  02676	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0267e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_str_guest_to_host

; 1624 : 
; 1625 :         /* Change "OFFLINE" to "*" (tape unloaded) */
; 1626 :         if (strcasecmp (newfile, "OFFLINE") == 0)

  02684	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169540
  0268b	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  02693	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  02699	85 c0		 test	 eax, eax
  0269b	75 1b		 jne	 SHORT $LN205@tapedev_ex

; 1627 :             STRLCPY( newfile, TAPE_UNLOADED );

  0269d	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  026a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169541
  026aa	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  026b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN205@tapedev_ex:

; 1628 : 
; 1629 :         /* Obtain the device lock */
; 1630 :         obtain_lock (&dev->lock);

  026b8	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  026c0	48 83 c0 38	 add	 rax, 56			; 00000038H
  026c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169542
  026cb	48 8b c8	 mov	 rcx, rax
  026ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1631 : 
; 1632 :         /* Validate the given path... */
; 1633 :         if ( strcmp( newfile, TAPE_UNLOADED ) != 0 )

  026d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169544
  026db	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  026e3	e8 00 00 00 00	 call	 strcmp
  026e8	85 c0		 test	 eax, eax
  026ea	0f 84 31 09 00
	00		 je	 $LN206@tapedev_ex

; 1634 :         {
; 1635 :             TAMDIR *tamdir = NULL;

  026f0	48 c7 84 24 b8
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tamdir$16[rsp], 0

; 1636 :             int minlen = 0;

  026fc	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR minlen$9[rsp], 0

; 1637 :             int rej = 0;

  02707	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rej$7[rsp], 0

; 1638 : 
; 1639 :             /* (because i hate typing) */
; 1640 : #define  _HHC00205E(_file,_reason) \
; 1641 :             { \
; 1642 :                 WRMSG(HHC00205, "E", LCSS_DEVNUM, _file, TTYPSTR(dev->tapedevt), "auto-mount", _reason); \
; 1643 :                 build_senseX (TAPE_BSENSE_TAPELOADFAIL, dev, unitstat, code); \
; 1644 :                 release_lock (&dev->lock); \
; 1645 :                 break; \
; 1646 :             }
; 1647 : 
; 1648 :             // Resolve given path...
; 1649 :             {
; 1650 :                 char  resolve_in [ MAX_PATH ] = {0};  /* (work) */

  02712	48 8d 84 24 40
	05 00 00	 lea	 rax, QWORD PTR resolve_in$22[rsp]
  0271a	48 8b f8	 mov	 rdi, rax
  0271d	33 c0		 xor	 eax, eax
  0271f	b9 04 01 00 00	 mov	 ecx, 260		; 00000104H
  02724	f3 aa		 rep stosb

; 1651 :                 char  resolve_out[ MAX_PATH ] = {0};  /* (work) */

  02726	48 8d 84 24 50
	06 00 00	 lea	 rax, QWORD PTR resolve_out$23[rsp]
  0272e	48 8b f8	 mov	 rdi, rax
  02731	33 c0		 xor	 eax, eax
  02733	b9 04 01 00 00	 mov	 ecx, 260		; 00000104H
  02738	f3 aa		 rep stosb

; 1652 : 
; 1653 :                 /* (build path to be resolved...) */
; 1654 :                 if (0
; 1655 : #if defined(_MSVC_)
; 1656 :                     || newfile[1] == ':'        /* (fullpath given?) */
; 1657 : #else /* !_MSVC_ */
; 1658 :                     || newfile[0] == '/'        /* (fullpath given?) */
; 1659 : #endif /* _MSVC_ */
; 1660 :                     || newfile[0] == '.'        /* (relative path given?) */

  0273a	33 c0		 xor	 eax, eax
  0273c	85 c0		 test	 eax, eax
  0273e	75 2c		 jne	 SHORT $LN209@tapedev_ex
  02740	b8 01 00 00 00	 mov	 eax, 1
  02745	48 6b c0 01	 imul	 rax, rax, 1
  02749	0f be 84 04 f0
	03 00 00	 movsx	 eax, BYTE PTR newfile$20[rsp+rax]
  02751	83 f8 3a	 cmp	 eax, 58			; 0000003aH
  02754	74 16		 je	 SHORT $LN209@tapedev_ex
  02756	b8 01 00 00 00	 mov	 eax, 1
  0275b	48 6b c0 00	 imul	 rax, rax, 0
  0275f	0f be 84 04 f0
	03 00 00	 movsx	 eax, BYTE PTR newfile$20[rsp+rax]
  02767	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  0276a	75 38		 jne	 SHORT $LN207@tapedev_ex
$LN209@tapedev_ex:

; 1661 :                 )
; 1662 :                     resolve_in[0] = 0;          /* (then use just given spec) */

  0276c	b8 01 00 00 00	 mov	 eax, 1
  02771	48 6b c0 00	 imul	 rax, rax, 0
  02775	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR $T18[rsp], rax
  0277d	48 81 bc 24 08
	02 00 00 04 01
	00 00		 cmp	 QWORD PTR $T18[rsp], 260 ; 00000104H
  02789	73 02		 jae	 SHORT $LN420@tapedev_ex
  0278b	eb 05		 jmp	 SHORT $LN421@tapedev_ex
$LN420@tapedev_ex:
  0278d	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN421@tapedev_ex:
  02792	48 8b 84 24 08
	02 00 00	 mov	 rax, QWORD PTR $T18[rsp]
  0279a	c6 84 04 40 05
	00 00 00	 mov	 BYTE PTR resolve_in$22[rsp+rax], 0
  027a2	eb 22		 jmp	 SHORT $LN208@tapedev_ex
$LN207@tapedev_ex:

; 1663 :                 else                            /* (else prepend with default) */
; 1664 :                     STRLCPY( resolve_in, sysblk.defdir );

  027a4	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  027aa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  027b1	48 8b 90 88 12
	00 00		 mov	 rdx, QWORD PTR [rax+4744]
  027b8	48 8d 8c 24 40
	05 00 00	 lea	 rcx, QWORD PTR resolve_in$22[rsp]
  027c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN208@tapedev_ex:

; 1665 : 
; 1666 :                 /* (finish building path to be resolved) */
; 1667 :                 STRLCAT( resolve_in, newfile );

  027c6	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  027cc	48 8d 94 24 f0
	03 00 00	 lea	 rdx, QWORD PTR newfile$20[rsp]
  027d4	48 8d 8c 24 40
	05 00 00	 lea	 rcx, QWORD PTR resolve_in$22[rsp]
  027dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 1668 : 
; 1669 :                 /* (fully resolvable path?) */
; 1670 :                 if (realpath( resolve_in, resolve_out ) == NULL)

  027e2	48 8d 94 24 50
	06 00 00	 lea	 rdx, QWORD PTR resolve_out$23[rsp]
  027ea	48 8d 8c 24 40
	05 00 00	 lea	 rcx, QWORD PTR resolve_in$22[rsp]
  027f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realpath
  027f8	48 85 c0	 test	 rax, rax
  027fb	0f 85 71 02 00
	00		 jne	 $LN210@tapedev_ex

; 1671 :                     _HHC00205E( resolve_in, "unresolvable path" );

  02801	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02809	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02810	83 f8 01	 cmp	 eax, 1
  02813	75 14		 jne	 SHORT $LN432@tapedev_ex
  02815	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169551
  0281c	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv1259[rsp], rax
  02824	e9 1e 01 00 00	 jmp	 $LN433@tapedev_ex
$LN432@tapedev_ex:
  02829	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02831	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02838	83 f8 02	 cmp	 eax, 2
  0283b	75 14		 jne	 SHORT $LN430@tapedev_ex
  0283d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169552
  02844	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv1258[rsp], rax
  0284c	e9 e6 00 00 00	 jmp	 $LN431@tapedev_ex
$LN430@tapedev_ex:
  02851	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02859	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02860	83 f8 03	 cmp	 eax, 3
  02863	75 14		 jne	 SHORT $LN428@tapedev_ex
  02865	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169553
  0286c	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv1257[rsp], rax
  02874	e9 ae 00 00 00	 jmp	 $LN429@tapedev_ex
$LN428@tapedev_ex:
  02879	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02881	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02888	83 f8 04	 cmp	 eax, 4
  0288b	75 11		 jne	 SHORT $LN426@tapedev_ex
  0288d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169554
  02894	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR tv1256[rsp], rax
  0289c	eb 79		 jmp	 SHORT $LN427@tapedev_ex
$LN426@tapedev_ex:
  0289e	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  028a6	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  028ad	83 f8 05	 cmp	 eax, 5
  028b0	75 11		 jne	 SHORT $LN424@tapedev_ex
  028b2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169555
  028b9	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv1255[rsp], rax
  028c1	eb 44		 jmp	 SHORT $LN425@tapedev_ex
$LN424@tapedev_ex:
  028c3	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  028cb	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  028d2	83 f8 06	 cmp	 eax, 6
  028d5	75 11		 jne	 SHORT $LN422@tapedev_ex
  028d7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169556
  028de	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv1254[rsp], rax
  028e6	eb 0f		 jmp	 SHORT $LN423@tapedev_ex
$LN422@tapedev_ex:
  028e8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169557
  028ef	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv1254[rsp], rax
$LN423@tapedev_ex:
  028f7	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR tv1254[rsp]
  028ff	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv1255[rsp], rax
$LN425@tapedev_ex:
  02907	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR tv1255[rsp]
  0290f	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR tv1256[rsp], rax
$LN427@tapedev_ex:
  02917	48 8b 84 24 20
	02 00 00	 mov	 rax, QWORD PTR tv1256[rsp]
  0291f	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv1257[rsp], rax
$LN429@tapedev_ex:
  02927	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR tv1257[rsp]
  0292f	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv1258[rsp], rax
$LN431@tapedev_ex:
  02937	48 8b 84 24 30
	02 00 00	 mov	 rax, QWORD PTR tv1258[rsp]
  0293f	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv1259[rsp], rax
$LN433@tapedev_ex:
  02947	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02950	74 15		 je	 SHORT $LN434@tapedev_ex
  02952	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0295a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0295e	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv1265[rsp], eax
  02965	eb 0b		 jmp	 SHORT $LN435@tapedev_ex
$LN434@tapedev_ex:
  02967	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1265[rsp], 0
$LN435@tapedev_ex:
  02972	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0297b	74 17		 je	 SHORT $LN436@tapedev_ex
  0297d	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02985	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02989	d1 f8		 sar	 eax, 1
  0298b	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv1271[rsp], eax
  02992	eb 0b		 jmp	 SHORT $LN437@tapedev_ex
$LN436@tapedev_ex:
  02994	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1271[rsp], 0
$LN437@tapedev_ex:
  0299f	b9 01 00 00 00	 mov	 ecx, 1
  029a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  029aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169549
  029b1	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  029b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169550
  029bd	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  029c2	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR tv1259[rsp]
  029ca	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  029cf	48 8d 8c 24 40
	05 00 00	 lea	 rcx, QWORD PTR resolve_in$22[rsp]
  029d7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  029dc	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR tv1265[rsp]
  029e3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  029e7	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR tv1271[rsp]
  029ee	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  029f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169558
  029f9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  029fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169559
  02a05	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02a0a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02a0f	41 b9 03 00 00
	00		 mov	 r9d, 3
  02a15	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169560
  02a1c	ba 87 06 00 00	 mov	 edx, 1671		; 00000687H
  02a21	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169561
  02a28	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02a2e	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  02a37	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  02a3f	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02a47	b9 01 00 00 00	 mov	 ecx, 1
  02a4c	e8 00 00 00 00	 call	 build_senseX
  02a51	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02a59	48 83 c0 38	 add	 rax, 56			; 00000038H
  02a5d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169562
  02a64	48 8b c8	 mov	 rcx, rax
  02a67	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
  02a6d	e9 57 3e 00 00	 jmp	 $LN13@tapedev_ex
$LN210@tapedev_ex:

; 1672 : 
; 1673 :                 /* Switch to fully resolved path */
; 1674 :                 hostpath( newfile, resolve_out, sizeof(newfile) );

  02a72	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  02a78	48 8d 94 24 50
	06 00 00	 lea	 rdx, QWORD PTR resolve_out$23[rsp]
  02a80	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  02a88	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 1675 :             }
; 1676 : 
; 1677 :             /* Verify file is in an allowable directory... */
; 1678 :             rej = 0; minlen = 0;

  02a8e	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rej$7[rsp], 0
  02a99	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR minlen$9[rsp], 0
$LN15@tapedev_ex:

; 1679 :             while ((tamdir = findtamdir( rej, minlen, newfile )) != NULL)

  02aa4	4c 8d 84 24 f0
	03 00 00	 lea	 r8, QWORD PTR newfile$20[rsp]
  02aac	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR minlen$9[rsp]
  02ab3	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR rej$7[rsp]
  02aba	e8 00 00 00 00	 call	 findtamdir
  02abf	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tamdir$16[rsp], rax
  02ac7	48 83 bc 24 b8
	01 00 00 00	 cmp	 QWORD PTR tamdir$16[rsp], 0
  02ad0	74 44		 je	 SHORT $LN16@tapedev_ex

; 1680 :             {
; 1681 :                 rej = !rej;

  02ad2	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR rej$7[rsp], 0
  02ada	75 0d		 jne	 SHORT $LN438@tapedev_ex
  02adc	c7 84 24 fc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1298[rsp], 1
  02ae7	eb 0b		 jmp	 SHORT $LN439@tapedev_ex
$LN438@tapedev_ex:
  02ae9	c7 84 24 fc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1298[rsp], 0
$LN439@tapedev_ex:
  02af4	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR tv1298[rsp]
  02afb	89 84 24 88 00
	00 00		 mov	 DWORD PTR rej$7[rsp], eax

; 1682 :                 minlen = tamdir->len;

  02b02	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR tamdir$16[rsp]
  02b0a	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  02b0d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR minlen$9[rsp], eax

; 1683 :             }

  02b14	eb 8e		 jmp	 SHORT $LN15@tapedev_ex
$LN16@tapedev_ex:

; 1684 : 
; 1685 :             /* Error if "allowable" directory not found... */
; 1686 :             if (!rej)

  02b16	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR rej$7[rsp], 0
  02b1e	0f 85 71 02 00
	00		 jne	 $LN211@tapedev_ex

; 1687 :                 _HHC00205E( newfile, "impermissible directory" );

  02b24	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b2c	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02b33	83 f8 01	 cmp	 eax, 1
  02b36	75 14		 jne	 SHORT $LN450@tapedev_ex
  02b38	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169566
  02b3f	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv1326[rsp], rax
  02b47	e9 1e 01 00 00	 jmp	 $LN451@tapedev_ex
$LN450@tapedev_ex:
  02b4c	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b54	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02b5b	83 f8 02	 cmp	 eax, 2
  02b5e	75 14		 jne	 SHORT $LN448@tapedev_ex
  02b60	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169567
  02b67	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR tv1325[rsp], rax
  02b6f	e9 e6 00 00 00	 jmp	 $LN449@tapedev_ex
$LN448@tapedev_ex:
  02b74	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b7c	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02b83	83 f8 03	 cmp	 eax, 3
  02b86	75 14		 jne	 SHORT $LN446@tapedev_ex
  02b88	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169568
  02b8f	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv1324[rsp], rax
  02b97	e9 ae 00 00 00	 jmp	 $LN447@tapedev_ex
$LN446@tapedev_ex:
  02b9c	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02ba4	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02bab	83 f8 04	 cmp	 eax, 4
  02bae	75 11		 jne	 SHORT $LN444@tapedev_ex
  02bb0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169569
  02bb7	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv1323[rsp], rax
  02bbf	eb 79		 jmp	 SHORT $LN445@tapedev_ex
$LN444@tapedev_ex:
  02bc1	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02bc9	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02bd0	83 f8 05	 cmp	 eax, 5
  02bd3	75 11		 jne	 SHORT $LN442@tapedev_ex
  02bd5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169570
  02bdc	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR tv1322[rsp], rax
  02be4	eb 44		 jmp	 SHORT $LN443@tapedev_ex
$LN442@tapedev_ex:
  02be6	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02bee	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02bf5	83 f8 06	 cmp	 eax, 6
  02bf8	75 11		 jne	 SHORT $LN440@tapedev_ex
  02bfa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169571
  02c01	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv1321[rsp], rax
  02c09	eb 0f		 jmp	 SHORT $LN441@tapedev_ex
$LN440@tapedev_ex:
  02c0b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169572
  02c12	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv1321[rsp], rax
$LN441@tapedev_ex:
  02c1a	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR tv1321[rsp]
  02c22	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR tv1322[rsp], rax
$LN443@tapedev_ex:
  02c2a	48 8b 84 24 48
	02 00 00	 mov	 rax, QWORD PTR tv1322[rsp]
  02c32	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv1323[rsp], rax
$LN445@tapedev_ex:
  02c3a	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR tv1323[rsp]
  02c42	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv1324[rsp], rax
$LN447@tapedev_ex:
  02c4a	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR tv1324[rsp]
  02c52	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR tv1325[rsp], rax
$LN449@tapedev_ex:
  02c5a	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR tv1325[rsp]
  02c62	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv1326[rsp], rax
$LN451@tapedev_ex:
  02c6a	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02c73	74 15		 je	 SHORT $LN452@tapedev_ex
  02c75	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02c7d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02c81	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv1332[rsp], eax
  02c88	eb 0b		 jmp	 SHORT $LN453@tapedev_ex
$LN452@tapedev_ex:
  02c8a	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1332[rsp], 0
$LN453@tapedev_ex:
  02c95	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02c9e	74 17		 je	 SHORT $LN454@tapedev_ex
  02ca0	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02ca8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02cac	d1 f8		 sar	 eax, 1
  02cae	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv1338[rsp], eax
  02cb5	eb 0b		 jmp	 SHORT $LN455@tapedev_ex
$LN454@tapedev_ex:
  02cb7	c7 84 24 04 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1338[rsp], 0
$LN455@tapedev_ex:
  02cc2	b9 01 00 00 00	 mov	 ecx, 1
  02cc7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02ccd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169564
  02cd4	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  02cd9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169565
  02ce0	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02ce5	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR tv1326[rsp]
  02ced	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02cf2	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  02cfa	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02cff	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv1332[rsp]
  02d06	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02d0a	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR tv1338[rsp]
  02d11	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02d15	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169573
  02d1c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02d21	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169574
  02d28	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02d2d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02d32	41 b9 03 00 00
	00		 mov	 r9d, 3
  02d38	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169575
  02d3f	ba 97 06 00 00	 mov	 edx, 1687		; 00000697H
  02d44	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169576
  02d4b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02d51	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  02d5a	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  02d62	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02d6a	b9 01 00 00 00	 mov	 ecx, 1
  02d6f	e8 00 00 00 00	 call	 build_senseX
  02d74	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02d7c	48 83 c0 38	 add	 rax, 56			; 00000038H
  02d80	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169577
  02d87	48 8b c8	 mov	 rcx, rax
  02d8a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
  02d90	e9 34 3b 00 00	 jmp	 $LN13@tapedev_ex
$LN211@tapedev_ex:

; 1688 : 
; 1689 :             /* Verify file exists... */
; 1690 :             if (access( newfile, R_OK ) != 0)

  02d95	ba 04 00 00 00	 mov	 edx, 4
  02d9a	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  02da2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_access
  02da8	85 c0		 test	 eax, eax
  02daa	0f 84 71 02 00
	00		 je	 $LN212@tapedev_ex

; 1691 :                 _HHC00205E( newfile, "file not found" );

  02db0	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02db8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02dbf	83 f8 01	 cmp	 eax, 1
  02dc2	75 14		 jne	 SHORT $LN466@tapedev_ex
  02dc4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169581
  02dcb	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv1385[rsp], rax
  02dd3	e9 1e 01 00 00	 jmp	 $LN467@tapedev_ex
$LN466@tapedev_ex:
  02dd8	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02de0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02de7	83 f8 02	 cmp	 eax, 2
  02dea	75 14		 jne	 SHORT $LN464@tapedev_ex
  02dec	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169582
  02df3	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv1384[rsp], rax
  02dfb	e9 e6 00 00 00	 jmp	 $LN465@tapedev_ex
$LN464@tapedev_ex:
  02e00	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02e08	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02e0f	83 f8 03	 cmp	 eax, 3
  02e12	75 14		 jne	 SHORT $LN462@tapedev_ex
  02e14	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169583
  02e1b	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR tv1383[rsp], rax
  02e23	e9 ae 00 00 00	 jmp	 $LN463@tapedev_ex
$LN462@tapedev_ex:
  02e28	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02e30	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02e37	83 f8 04	 cmp	 eax, 4
  02e3a	75 11		 jne	 SHORT $LN460@tapedev_ex
  02e3c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169584
  02e43	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv1382[rsp], rax
  02e4b	eb 79		 jmp	 SHORT $LN461@tapedev_ex
$LN460@tapedev_ex:
  02e4d	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02e55	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02e5c	83 f8 05	 cmp	 eax, 5
  02e5f	75 11		 jne	 SHORT $LN458@tapedev_ex
  02e61	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169585
  02e68	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv1381[rsp], rax
  02e70	eb 44		 jmp	 SHORT $LN459@tapedev_ex
$LN458@tapedev_ex:
  02e72	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02e7a	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02e81	83 f8 06	 cmp	 eax, 6
  02e84	75 11		 jne	 SHORT $LN456@tapedev_ex
  02e86	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169586
  02e8d	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR tv1380[rsp], rax
  02e95	eb 0f		 jmp	 SHORT $LN457@tapedev_ex
$LN456@tapedev_ex:
  02e97	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169587
  02e9e	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR tv1380[rsp], rax
$LN457@tapedev_ex:
  02ea6	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR tv1380[rsp]
  02eae	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv1381[rsp], rax
$LN459@tapedev_ex:
  02eb6	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR tv1381[rsp]
  02ebe	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv1382[rsp], rax
$LN461@tapedev_ex:
  02ec6	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR tv1382[rsp]
  02ece	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR tv1383[rsp], rax
$LN463@tapedev_ex:
  02ed6	48 8b 84 24 88
	02 00 00	 mov	 rax, QWORD PTR tv1383[rsp]
  02ede	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv1384[rsp], rax
$LN465@tapedev_ex:
  02ee6	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR tv1384[rsp]
  02eee	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv1385[rsp], rax
$LN467@tapedev_ex:
  02ef6	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02eff	74 15		 je	 SHORT $LN468@tapedev_ex
  02f01	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02f09	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02f0d	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv1391[rsp], eax
  02f14	eb 0b		 jmp	 SHORT $LN469@tapedev_ex
$LN468@tapedev_ex:
  02f16	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1391[rsp], 0
$LN469@tapedev_ex:
  02f21	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02f2a	74 17		 je	 SHORT $LN470@tapedev_ex
  02f2c	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02f34	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02f38	d1 f8		 sar	 eax, 1
  02f3a	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv1397[rsp], eax
  02f41	eb 0b		 jmp	 SHORT $LN471@tapedev_ex
$LN470@tapedev_ex:
  02f43	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1397[rsp], 0
$LN471@tapedev_ex:
  02f4e	b9 01 00 00 00	 mov	 ecx, 1
  02f53	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02f59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169579
  02f60	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  02f65	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169580
  02f6c	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02f71	48 8b 8c 24 98
	02 00 00	 mov	 rcx, QWORD PTR tv1385[rsp]
  02f79	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02f7e	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  02f86	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02f8b	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR tv1391[rsp]
  02f92	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02f96	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR tv1397[rsp]
  02f9d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02fa1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169588
  02fa8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02fad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169589
  02fb4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02fb9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02fbe	41 b9 03 00 00
	00		 mov	 r9d, 3
  02fc4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169590
  02fcb	ba 9b 06 00 00	 mov	 edx, 1691		; 0000069bH
  02fd0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169591
  02fd7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02fdd	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  02fe6	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  02fee	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  02ff6	b9 01 00 00 00	 mov	 ecx, 1
  02ffb	e8 00 00 00 00	 call	 build_senseX
  03000	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03008	48 83 c0 38	 add	 rax, 56			; 00000038H
  0300c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169592
  03013	48 8b c8	 mov	 rcx, rax
  03016	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
  0301c	e9 a8 38 00 00	 jmp	 $LN13@tapedev_ex
$LN212@tapedev_ex:
$LN206@tapedev_ex:

; 1692 :         }
; 1693 : 
; 1694 :         /* Prevent accidental re-init'ing of an already loaded tape drive */
; 1695 :         if (1
; 1696 :             && sysblk.nomountedtapereinit
; 1697 :             && strcmp (newfile,       TAPE_UNLOADED) != 0
; 1698 :             && strcmp (dev->filename, TAPE_UNLOADED) != 0

  03021	33 c0		 xor	 eax, eax
  03023	83 f8 01	 cmp	 eax, 1
  03026	0f 84 b5 02 00
	00		 je	 $LN213@tapedev_ex
  0302c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  03033	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  03039	c1 e8 12	 shr	 eax, 18
  0303c	83 e0 01	 and	 eax, 1
  0303f	85 c0		 test	 eax, eax
  03041	0f 84 9a 02 00
	00		 je	 $LN213@tapedev_ex
  03047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169594
  0304e	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  03056	e8 00 00 00 00	 call	 strcmp
  0305b	85 c0		 test	 eax, eax
  0305d	0f 84 7e 02 00
	00		 je	 $LN213@tapedev_ex
  03063	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0306b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  03071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169595
  03078	48 8b c8	 mov	 rcx, rax
  0307b	e8 00 00 00 00	 call	 strcmp
  03080	85 c0		 test	 eax, eax
  03082	0f 84 59 02 00
	00		 je	 $LN213@tapedev_ex

; 1699 :         )
; 1700 :         {
; 1701 :             WRMSG(HHC00214, "E", LCSS_DEVNUM, newfile, TTYPSTR(dev->tapedevt));

  03088	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03090	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03097	83 f8 01	 cmp	 eax, 1
  0309a	75 14		 jne	 SHORT $LN482@tapedev_ex
  0309c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169596
  030a3	48 89 84 24 c8
	02 00 00	 mov	 QWORD PTR tv1484[rsp], rax
  030ab	e9 1e 01 00 00	 jmp	 $LN483@tapedev_ex
$LN482@tapedev_ex:
  030b0	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  030b8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  030bf	83 f8 02	 cmp	 eax, 2
  030c2	75 14		 jne	 SHORT $LN480@tapedev_ex
  030c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169597
  030cb	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv1483[rsp], rax
  030d3	e9 e6 00 00 00	 jmp	 $LN481@tapedev_ex
$LN480@tapedev_ex:
  030d8	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  030e0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  030e7	83 f8 03	 cmp	 eax, 3
  030ea	75 14		 jne	 SHORT $LN478@tapedev_ex
  030ec	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169598
  030f3	48 89 84 24 b8
	02 00 00	 mov	 QWORD PTR tv1482[rsp], rax
  030fb	e9 ae 00 00 00	 jmp	 $LN479@tapedev_ex
$LN478@tapedev_ex:
  03100	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03108	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0310f	83 f8 04	 cmp	 eax, 4
  03112	75 11		 jne	 SHORT $LN476@tapedev_ex
  03114	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169599
  0311b	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv1481[rsp], rax
  03123	eb 79		 jmp	 SHORT $LN477@tapedev_ex
$LN476@tapedev_ex:
  03125	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0312d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03134	83 f8 05	 cmp	 eax, 5
  03137	75 11		 jne	 SHORT $LN474@tapedev_ex
  03139	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169600
  03140	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv1480[rsp], rax
  03148	eb 44		 jmp	 SHORT $LN475@tapedev_ex
$LN474@tapedev_ex:
  0314a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03152	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03159	83 f8 06	 cmp	 eax, 6
  0315c	75 11		 jne	 SHORT $LN472@tapedev_ex
  0315e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169601
  03165	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR tv1479[rsp], rax
  0316d	eb 0f		 jmp	 SHORT $LN473@tapedev_ex
$LN472@tapedev_ex:
  0316f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169602
  03176	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR tv1479[rsp], rax
$LN473@tapedev_ex:
  0317e	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR tv1479[rsp]
  03186	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv1480[rsp], rax
$LN475@tapedev_ex:
  0318e	48 8b 84 24 a8
	02 00 00	 mov	 rax, QWORD PTR tv1480[rsp]
  03196	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv1481[rsp], rax
$LN477@tapedev_ex:
  0319e	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR tv1481[rsp]
  031a6	48 89 84 24 b8
	02 00 00	 mov	 QWORD PTR tv1482[rsp], rax
$LN479@tapedev_ex:
  031ae	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR tv1482[rsp]
  031b6	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv1483[rsp], rax
$LN481@tapedev_ex:
  031be	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR tv1483[rsp]
  031c6	48 89 84 24 c8
	02 00 00	 mov	 QWORD PTR tv1484[rsp], rax
$LN483@tapedev_ex:
  031ce	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  031d7	74 15		 je	 SHORT $LN484@tapedev_ex
  031d9	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  031e1	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  031e5	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv1490[rsp], eax
  031ec	eb 0b		 jmp	 SHORT $LN485@tapedev_ex
$LN484@tapedev_ex:
  031ee	c7 84 24 10 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1490[rsp], 0
$LN485@tapedev_ex:
  031f9	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03202	74 17		 je	 SHORT $LN486@tapedev_ex
  03204	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0320c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03210	d1 f8		 sar	 eax, 1
  03212	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv1496[rsp], eax
  03219	eb 0b		 jmp	 SHORT $LN487@tapedev_ex
$LN486@tapedev_ex:
  0321b	c7 84 24 14 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1496[rsp], 0
$LN487@tapedev_ex:
  03226	b9 01 00 00 00	 mov	 ecx, 1
  0322b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03231	48 8b 8c 24 c8
	02 00 00	 mov	 rcx, QWORD PTR tv1484[rsp]
  03239	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0323e	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  03246	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0324b	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR tv1490[rsp]
  03252	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03256	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR tv1496[rsp]
  0325d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03261	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169603
  03268	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0326d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169604
  03274	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03279	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0327e	41 b9 03 00 00
	00		 mov	 r9d, 3
  03284	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169605
  0328b	ba a5 06 00 00	 mov	 edx, 1701		; 000006a5H
  03290	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169606
  03297	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1702 :             build_senseX (TAPE_BSENSE_TAPELOADFAIL, dev, unitstat, code);

  0329d	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  032a6	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  032ae	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  032b6	b9 01 00 00 00	 mov	 ecx, 1
  032bb	e8 00 00 00 00	 call	 build_senseX

; 1703 :             release_lock (&dev->lock);

  032c0	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  032c8	48 83 c0 38	 add	 rax, 56			; 00000038H
  032cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169607
  032d3	48 8b c8	 mov	 rcx, rax
  032d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1704 :             break;

  032dc	e9 e8 35 00 00	 jmp	 $LN13@tapedev_ex
$LN213@tapedev_ex:

; 1705 :         }
; 1706 : 
; 1707 :         /* Build re-initialization parameters using new filename */
; 1708 :         argc = dev->argc;

  032e1	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  032e9	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  032ec	89 84 24 a4 00
	00 00		 mov	 DWORD PTR argc$10[rsp], eax

; 1709 :         argv = malloc (dev->argc * sizeof(char*));

  032f3	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  032fb	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  032ff	48 c1 e0 03	 shl	 rax, 3
  03303	48 8b c8	 mov	 rcx, rax
  03306	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0330c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR argv$11[rsp], rax

; 1710 : 
; 1711 :         for (i=0; i < argc; i++)

  03314	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$3[rsp], 0
  0331f	eb 10		 jmp	 SHORT $LN19@tapedev_ex
$LN17@tapedev_ex:
  03321	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$3[rsp]
  03328	ff c0		 inc	 eax
  0332a	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$3[rsp], eax
$LN19@tapedev_ex:
  03331	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR argc$10[rsp]
  03338	39 84 24 80 00
	00 00		 cmp	 DWORD PTR i$3[rsp], eax
  0333f	7d 6c		 jge	 SHORT $LN18@tapedev_ex

; 1712 :         {
; 1713 :             if (dev->argv[i])

  03341	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$3[rsp]
  03349	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03351	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  03355	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0335a	74 34		 je	 SHORT $LN214@tapedev_ex

; 1714 :                 argv[i] = strdup(dev->argv[i]);

  0335c	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$3[rsp]
  03364	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0336c	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  03370	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  03374	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0337a	48 63 8c 24 80
	00 00 00	 movsxd	 rcx, DWORD PTR i$3[rsp]
  03382	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR argv$11[rsp]
  0338a	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  0338e	eb 18		 jmp	 SHORT $LN215@tapedev_ex
$LN214@tapedev_ex:

; 1715 :             else
; 1716 :                 argv[i] = NULL;

  03390	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$3[rsp]
  03398	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR argv$11[rsp]
  033a0	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0
$LN215@tapedev_ex:

; 1717 :         }

  033a8	e9 74 ff ff ff	 jmp	 $LN17@tapedev_ex
$LN18@tapedev_ex:

; 1718 : 
; 1719 :         /* (replace filename argument with new filename) */
; 1720 :         free( argv[0] );

  033ad	b8 08 00 00 00	 mov	 eax, 8
  033b2	48 6b c0 00	 imul	 rax, rax, 0
  033b6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR argv$11[rsp]
  033be	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  033c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1721 :         argv[0] = strdup( newfile );

  033c8	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  033d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  033d6	b9 08 00 00 00	 mov	 ecx, 8
  033db	48 6b c9 00	 imul	 rcx, rcx, 0
  033df	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR argv$11[rsp]
  033e7	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax

; 1722 : 
; 1723 :         /* Attempt reinitializing the device using the new filename... */
; 1724 :         rc = (int)(dev->hnd->init)( dev, argc, argv );

  033eb	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  033f3	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  033fa	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR argv$11[rsp]
  03402	8b 94 24 a4 00
	00 00		 mov	 edx, DWORD PTR argc$10[rsp]
  03409	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03411	ff 10		 call	 QWORD PTR [rax]
  03413	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 1725 : 
; 1726 :         /* (free temp copy of parms to prevent memory leak) */
; 1727 :         for (i=0; i < argc; i++)

  03417	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$3[rsp], 0
  03422	eb 10		 jmp	 SHORT $LN22@tapedev_ex
$LN20@tapedev_ex:
  03424	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$3[rsp]
  0342b	ff c0		 inc	 eax
  0342d	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$3[rsp], eax
$LN22@tapedev_ex:
  03434	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR argc$10[rsp]
  0343b	39 84 24 80 00
	00 00		 cmp	 DWORD PTR i$3[rsp], eax
  03442	7d 33		 jge	 SHORT $LN21@tapedev_ex

; 1728 :             if (argv[i])

  03444	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$3[rsp]
  0344c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR argv$11[rsp]
  03454	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  03459	74 1a		 je	 SHORT $LN216@tapedev_ex

; 1729 :                 free(argv[i]);

  0345b	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$3[rsp]
  03463	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR argv$11[rsp]
  0346b	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0346f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN216@tapedev_ex:
  03475	eb ad		 jmp	 SHORT $LN20@tapedev_ex
$LN21@tapedev_ex:

; 1730 : 
; 1731 :         /* Issue message and set status based on whether it worked or not... */
; 1732 :         if (0
; 1733 :             || rc < 0
; 1734 :             || strfilenamecmp( dev->filename, newfile ) != 0

  03477	33 c0		 xor	 eax, eax
  03479	85 c0		 test	 eax, eax
  0347b	75 2e		 jne	 SHORT $LN219@tapedev_ex
  0347d	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  03482	7c 27		 jl	 SHORT $LN219@tapedev_ex
  03484	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0348c	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  03492	48 8d 94 24 f0
	03 00 00	 lea	 rdx, QWORD PTR newfile$20[rsp]
  0349a	48 8b c8	 mov	 rcx, rax
  0349d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  034a3	85 c0		 test	 eax, eax
  034a5	0f 84 e7 04 00
	00		 je	 $LN217@tapedev_ex
$LN219@tapedev_ex:

; 1735 :         )
; 1736 :         {
; 1737 :             // (failure)
; 1738 : 
; 1739 :             if (strcmp( newfile, TAPE_UNLOADED ) == 0)

  034ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169616
  034b2	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  034ba	e8 00 00 00 00	 call	 strcmp
  034bf	85 c0		 test	 eax, eax
  034c1	0f 85 32 02 00
	00		 jne	 $LN220@tapedev_ex

; 1740 :             {
; 1741 :                 /* (an error message explaining the reason for the
; 1742 :                     failure should hopefully already have been issued) */
; 1743 :                 WRMSG(HHC00205, "E", LCSS_DEVNUM, newfile,

  034c7	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  034cf	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  034d6	83 f8 01	 cmp	 eax, 1
  034d9	75 14		 jne	 SHORT $LN498@tapedev_ex
  034db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169619
  034e2	48 89 84 24 f8
	02 00 00	 mov	 QWORD PTR tv1633[rsp], rax
  034ea	e9 1e 01 00 00	 jmp	 $LN499@tapedev_ex
$LN498@tapedev_ex:
  034ef	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  034f7	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  034fe	83 f8 02	 cmp	 eax, 2
  03501	75 14		 jne	 SHORT $LN496@tapedev_ex
  03503	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169620
  0350a	48 89 84 24 f0
	02 00 00	 mov	 QWORD PTR tv1632[rsp], rax
  03512	e9 e6 00 00 00	 jmp	 $LN497@tapedev_ex
$LN496@tapedev_ex:
  03517	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0351f	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03526	83 f8 03	 cmp	 eax, 3
  03529	75 14		 jne	 SHORT $LN494@tapedev_ex
  0352b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169621
  03532	48 89 84 24 e8
	02 00 00	 mov	 QWORD PTR tv1631[rsp], rax
  0353a	e9 ae 00 00 00	 jmp	 $LN495@tapedev_ex
$LN494@tapedev_ex:
  0353f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03547	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0354e	83 f8 04	 cmp	 eax, 4
  03551	75 11		 jne	 SHORT $LN492@tapedev_ex
  03553	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169622
  0355a	48 89 84 24 e0
	02 00 00	 mov	 QWORD PTR tv1630[rsp], rax
  03562	eb 79		 jmp	 SHORT $LN493@tapedev_ex
$LN492@tapedev_ex:
  03564	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0356c	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03573	83 f8 05	 cmp	 eax, 5
  03576	75 11		 jne	 SHORT $LN490@tapedev_ex
  03578	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169623
  0357f	48 89 84 24 d8
	02 00 00	 mov	 QWORD PTR tv1629[rsp], rax
  03587	eb 44		 jmp	 SHORT $LN491@tapedev_ex
$LN490@tapedev_ex:
  03589	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03591	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03598	83 f8 06	 cmp	 eax, 6
  0359b	75 11		 jne	 SHORT $LN488@tapedev_ex
  0359d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169624
  035a4	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv1628[rsp], rax
  035ac	eb 0f		 jmp	 SHORT $LN489@tapedev_ex
$LN488@tapedev_ex:
  035ae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169625
  035b5	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv1628[rsp], rax
$LN489@tapedev_ex:
  035bd	48 8b 84 24 d0
	02 00 00	 mov	 rax, QWORD PTR tv1628[rsp]
  035c5	48 89 84 24 d8
	02 00 00	 mov	 QWORD PTR tv1629[rsp], rax
$LN491@tapedev_ex:
  035cd	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR tv1629[rsp]
  035d5	48 89 84 24 e0
	02 00 00	 mov	 QWORD PTR tv1630[rsp], rax
$LN493@tapedev_ex:
  035dd	48 8b 84 24 e0
	02 00 00	 mov	 rax, QWORD PTR tv1630[rsp]
  035e5	48 89 84 24 e8
	02 00 00	 mov	 QWORD PTR tv1631[rsp], rax
$LN495@tapedev_ex:
  035ed	48 8b 84 24 e8
	02 00 00	 mov	 rax, QWORD PTR tv1631[rsp]
  035f5	48 89 84 24 f0
	02 00 00	 mov	 QWORD PTR tv1632[rsp], rax
$LN497@tapedev_ex:
  035fd	48 8b 84 24 f0
	02 00 00	 mov	 rax, QWORD PTR tv1632[rsp]
  03605	48 89 84 24 f8
	02 00 00	 mov	 QWORD PTR tv1633[rsp], rax
$LN499@tapedev_ex:
  0360d	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03616	74 15		 je	 SHORT $LN500@tapedev_ex
  03618	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03620	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03624	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv1639[rsp], eax
  0362b	eb 0b		 jmp	 SHORT $LN501@tapedev_ex
$LN500@tapedev_ex:
  0362d	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1639[rsp], 0
$LN501@tapedev_ex:
  03638	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03641	74 17		 je	 SHORT $LN502@tapedev_ex
  03643	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0364b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0364f	d1 f8		 sar	 eax, 1
  03651	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv1645[rsp], eax
  03658	eb 0b		 jmp	 SHORT $LN503@tapedev_ex
$LN502@tapedev_ex:
  0365a	c7 84 24 1c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1645[rsp], 0
$LN503@tapedev_ex:
  03665	b9 01 00 00 00	 mov	 ecx, 1
  0366a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03670	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169617
  03677	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0367c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169618
  03683	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  03688	48 8b 8c 24 f8
	02 00 00	 mov	 rcx, QWORD PTR tv1633[rsp]
  03690	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03695	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  0369d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  036a2	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR tv1639[rsp]
  036a9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  036ad	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR tv1645[rsp]
  036b4	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  036b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169626
  036bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  036c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169627
  036cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  036d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  036d5	41 b9 03 00 00
	00		 mov	 r9d, 3
  036db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169628
  036e2	ba d0 06 00 00	 mov	 edx, 1744		; 000006d0H
  036e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169629
  036ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1744 :                       TTYPSTR(dev->tapedevt), "auto-unmount", "see previous message");
; 1745 :             }

  036f4	e9 71 02 00 00	 jmp	 $LN221@tapedev_ex
$LN220@tapedev_ex:

; 1746 :             else
; 1747 :                 _HHC00205E( newfile, "file not found" ); // (presumed)

  036f9	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03701	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03708	83 f8 01	 cmp	 eax, 1
  0370b	75 14		 jne	 SHORT $LN514@tapedev_ex
  0370d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169632
  03714	48 89 84 24 28
	03 00 00	 mov	 QWORD PTR tv1713[rsp], rax
  0371c	e9 1e 01 00 00	 jmp	 $LN515@tapedev_ex
$LN514@tapedev_ex:
  03721	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03729	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03730	83 f8 02	 cmp	 eax, 2
  03733	75 14		 jne	 SHORT $LN512@tapedev_ex
  03735	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169633
  0373c	48 89 84 24 20
	03 00 00	 mov	 QWORD PTR tv1712[rsp], rax
  03744	e9 e6 00 00 00	 jmp	 $LN513@tapedev_ex
$LN512@tapedev_ex:
  03749	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03751	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03758	83 f8 03	 cmp	 eax, 3
  0375b	75 14		 jne	 SHORT $LN510@tapedev_ex
  0375d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169634
  03764	48 89 84 24 18
	03 00 00	 mov	 QWORD PTR tv1711[rsp], rax
  0376c	e9 ae 00 00 00	 jmp	 $LN511@tapedev_ex
$LN510@tapedev_ex:
  03771	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03779	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03780	83 f8 04	 cmp	 eax, 4
  03783	75 11		 jne	 SHORT $LN508@tapedev_ex
  03785	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169635
  0378c	48 89 84 24 10
	03 00 00	 mov	 QWORD PTR tv1710[rsp], rax
  03794	eb 79		 jmp	 SHORT $LN509@tapedev_ex
$LN508@tapedev_ex:
  03796	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0379e	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  037a5	83 f8 05	 cmp	 eax, 5
  037a8	75 11		 jne	 SHORT $LN506@tapedev_ex
  037aa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169636
  037b1	48 89 84 24 08
	03 00 00	 mov	 QWORD PTR tv1709[rsp], rax
  037b9	eb 44		 jmp	 SHORT $LN507@tapedev_ex
$LN506@tapedev_ex:
  037bb	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  037c3	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  037ca	83 f8 06	 cmp	 eax, 6
  037cd	75 11		 jne	 SHORT $LN504@tapedev_ex
  037cf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169637
  037d6	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR tv1708[rsp], rax
  037de	eb 0f		 jmp	 SHORT $LN505@tapedev_ex
$LN504@tapedev_ex:
  037e0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169638
  037e7	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR tv1708[rsp], rax
$LN505@tapedev_ex:
  037ef	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR tv1708[rsp]
  037f7	48 89 84 24 08
	03 00 00	 mov	 QWORD PTR tv1709[rsp], rax
$LN507@tapedev_ex:
  037ff	48 8b 84 24 08
	03 00 00	 mov	 rax, QWORD PTR tv1709[rsp]
  03807	48 89 84 24 10
	03 00 00	 mov	 QWORD PTR tv1710[rsp], rax
$LN509@tapedev_ex:
  0380f	48 8b 84 24 10
	03 00 00	 mov	 rax, QWORD PTR tv1710[rsp]
  03817	48 89 84 24 18
	03 00 00	 mov	 QWORD PTR tv1711[rsp], rax
$LN511@tapedev_ex:
  0381f	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR tv1711[rsp]
  03827	48 89 84 24 20
	03 00 00	 mov	 QWORD PTR tv1712[rsp], rax
$LN513@tapedev_ex:
  0382f	48 8b 84 24 20
	03 00 00	 mov	 rax, QWORD PTR tv1712[rsp]
  03837	48 89 84 24 28
	03 00 00	 mov	 QWORD PTR tv1713[rsp], rax
$LN515@tapedev_ex:
  0383f	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03848	74 15		 je	 SHORT $LN516@tapedev_ex
  0384a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03852	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03856	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv1719[rsp], eax
  0385d	eb 0b		 jmp	 SHORT $LN517@tapedev_ex
$LN516@tapedev_ex:
  0385f	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1719[rsp], 0
$LN517@tapedev_ex:
  0386a	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03873	74 17		 je	 SHORT $LN518@tapedev_ex
  03875	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0387d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03881	d1 f8		 sar	 eax, 1
  03883	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv1725[rsp], eax
  0388a	eb 0b		 jmp	 SHORT $LN519@tapedev_ex
$LN518@tapedev_ex:
  0388c	c7 84 24 24 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1725[rsp], 0
$LN519@tapedev_ex:
  03897	b9 01 00 00 00	 mov	 ecx, 1
  0389c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  038a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169630
  038a9	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  038ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169631
  038b5	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  038ba	48 8b 8c 24 28
	03 00 00	 mov	 rcx, QWORD PTR tv1713[rsp]
  038c2	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  038c7	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  038cf	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  038d4	8b 8c 24 20 01
	00 00		 mov	 ecx, DWORD PTR tv1719[rsp]
  038db	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  038df	8b 8c 24 24 01
	00 00		 mov	 ecx, DWORD PTR tv1725[rsp]
  038e6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  038ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169639
  038f1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  038f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169640
  038fd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03902	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03907	41 b9 03 00 00
	00		 mov	 r9d, 3
  0390d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169641
  03914	ba d3 06 00 00	 mov	 edx, 1747		; 000006d3H
  03919	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169642
  03920	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  03926	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0392f	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  03937	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0393f	b9 01 00 00 00	 mov	 ecx, 1
  03944	e8 00 00 00 00	 call	 build_senseX
  03949	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03951	48 83 c0 38	 add	 rax, 56			; 00000038H
  03955	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169643
  0395c	48 8b c8	 mov	 rcx, rax
  0395f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
  03965	e9 5f 2f 00 00	 jmp	 $LN13@tapedev_ex
$LN221@tapedev_ex:

; 1748 : 
; 1749 :             /* (the load or unload attempt failed) */
; 1750 :             build_senseX (TAPE_BSENSE_TAPELOADFAIL, dev, unitstat, code);

  0396a	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  03973	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0397b	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  03983	b9 01 00 00 00	 mov	 ecx, 1
  03988	e8 00 00 00 00	 call	 build_senseX

; 1751 :         }

  0398d	e9 ca 04 00 00	 jmp	 $LN218@tapedev_ex
$LN217@tapedev_ex:

; 1752 :         else
; 1753 :         {
; 1754 :             // (success)
; 1755 : 
; 1756 :             if (strcmp( newfile, TAPE_UNLOADED ) == 0)

  03992	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169646
  03999	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  039a1	e8 00 00 00 00	 call	 strcmp
  039a6	85 c0		 test	 eax, eax
  039a8	0f 85 1a 02 00
	00		 jne	 $LN222@tapedev_ex

; 1757 :                 WRMSG(HHC00216, "I", LCSS_DEVNUM, newfile, TTYPSTR(dev->tapedevt));

  039ae	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  039b6	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  039bd	83 f8 01	 cmp	 eax, 1
  039c0	75 14		 jne	 SHORT $LN530@tapedev_ex
  039c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169647
  039c9	48 89 84 24 58
	03 00 00	 mov	 QWORD PTR tv1774[rsp], rax
  039d1	e9 1e 01 00 00	 jmp	 $LN531@tapedev_ex
$LN530@tapedev_ex:
  039d6	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  039de	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  039e5	83 f8 02	 cmp	 eax, 2
  039e8	75 14		 jne	 SHORT $LN528@tapedev_ex
  039ea	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169648
  039f1	48 89 84 24 50
	03 00 00	 mov	 QWORD PTR tv1773[rsp], rax
  039f9	e9 e6 00 00 00	 jmp	 $LN529@tapedev_ex
$LN528@tapedev_ex:
  039fe	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03a06	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03a0d	83 f8 03	 cmp	 eax, 3
  03a10	75 14		 jne	 SHORT $LN526@tapedev_ex
  03a12	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169649
  03a19	48 89 84 24 48
	03 00 00	 mov	 QWORD PTR tv1772[rsp], rax
  03a21	e9 ae 00 00 00	 jmp	 $LN527@tapedev_ex
$LN526@tapedev_ex:
  03a26	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03a2e	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03a35	83 f8 04	 cmp	 eax, 4
  03a38	75 11		 jne	 SHORT $LN524@tapedev_ex
  03a3a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169650
  03a41	48 89 84 24 40
	03 00 00	 mov	 QWORD PTR tv1771[rsp], rax
  03a49	eb 79		 jmp	 SHORT $LN525@tapedev_ex
$LN524@tapedev_ex:
  03a4b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03a53	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03a5a	83 f8 05	 cmp	 eax, 5
  03a5d	75 11		 jne	 SHORT $LN522@tapedev_ex
  03a5f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169651
  03a66	48 89 84 24 38
	03 00 00	 mov	 QWORD PTR tv1770[rsp], rax
  03a6e	eb 44		 jmp	 SHORT $LN523@tapedev_ex
$LN522@tapedev_ex:
  03a70	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03a78	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03a7f	83 f8 06	 cmp	 eax, 6
  03a82	75 11		 jne	 SHORT $LN520@tapedev_ex
  03a84	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169652
  03a8b	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR tv1769[rsp], rax
  03a93	eb 0f		 jmp	 SHORT $LN521@tapedev_ex
$LN520@tapedev_ex:
  03a95	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169653
  03a9c	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR tv1769[rsp], rax
$LN521@tapedev_ex:
  03aa4	48 8b 84 24 30
	03 00 00	 mov	 rax, QWORD PTR tv1769[rsp]
  03aac	48 89 84 24 38
	03 00 00	 mov	 QWORD PTR tv1770[rsp], rax
$LN523@tapedev_ex:
  03ab4	48 8b 84 24 38
	03 00 00	 mov	 rax, QWORD PTR tv1770[rsp]
  03abc	48 89 84 24 40
	03 00 00	 mov	 QWORD PTR tv1771[rsp], rax
$LN525@tapedev_ex:
  03ac4	48 8b 84 24 40
	03 00 00	 mov	 rax, QWORD PTR tv1771[rsp]
  03acc	48 89 84 24 48
	03 00 00	 mov	 QWORD PTR tv1772[rsp], rax
$LN527@tapedev_ex:
  03ad4	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR tv1772[rsp]
  03adc	48 89 84 24 50
	03 00 00	 mov	 QWORD PTR tv1773[rsp], rax
$LN529@tapedev_ex:
  03ae4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR tv1773[rsp]
  03aec	48 89 84 24 58
	03 00 00	 mov	 QWORD PTR tv1774[rsp], rax
$LN531@tapedev_ex:
  03af4	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03afd	74 15		 je	 SHORT $LN532@tapedev_ex
  03aff	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03b07	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03b0b	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv1780[rsp], eax
  03b12	eb 0b		 jmp	 SHORT $LN533@tapedev_ex
$LN532@tapedev_ex:
  03b14	c7 84 24 28 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1780[rsp], 0
$LN533@tapedev_ex:
  03b1f	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03b28	74 17		 je	 SHORT $LN534@tapedev_ex
  03b2a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03b32	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03b36	d1 f8		 sar	 eax, 1
  03b38	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv1786[rsp], eax
  03b3f	eb 0b		 jmp	 SHORT $LN535@tapedev_ex
$LN534@tapedev_ex:
  03b41	c7 84 24 2c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1786[rsp], 0
$LN535@tapedev_ex:
  03b4c	b9 01 00 00 00	 mov	 ecx, 1
  03b51	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03b57	48 8b 8c 24 58
	03 00 00	 mov	 rcx, QWORD PTR tv1774[rsp]
  03b5f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03b64	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  03b6c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03b71	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR tv1780[rsp]
  03b78	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03b7c	8b 8c 24 2c 01
	00 00		 mov	 ecx, DWORD PTR tv1786[rsp]
  03b83	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03b87	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169654
  03b8e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03b93	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169655
  03b9a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03b9f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03ba4	41 b9 03 00 00
	00		 mov	 r9d, 3
  03baa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169656
  03bb1	ba dd 06 00 00	 mov	 edx, 1757		; 000006ddH
  03bb6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169657
  03bbd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  03bc3	e9 2b 02 00 00	 jmp	 $LN223@tapedev_ex
$LN222@tapedev_ex:

; 1758 :             else
; 1759 :                 WRMSG(HHC00215, "I", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt));

  03bc8	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03bd0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03bd7	83 f8 01	 cmp	 eax, 1
  03bda	75 14		 jne	 SHORT $LN546@tapedev_ex
  03bdc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169658
  03be3	48 89 84 24 88
	03 00 00	 mov	 QWORD PTR tv1820[rsp], rax
  03beb	e9 1e 01 00 00	 jmp	 $LN547@tapedev_ex
$LN546@tapedev_ex:
  03bf0	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03bf8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03bff	83 f8 02	 cmp	 eax, 2
  03c02	75 14		 jne	 SHORT $LN544@tapedev_ex
  03c04	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169659
  03c0b	48 89 84 24 80
	03 00 00	 mov	 QWORD PTR tv1819[rsp], rax
  03c13	e9 e6 00 00 00	 jmp	 $LN545@tapedev_ex
$LN544@tapedev_ex:
  03c18	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03c20	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03c27	83 f8 03	 cmp	 eax, 3
  03c2a	75 14		 jne	 SHORT $LN542@tapedev_ex
  03c2c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169660
  03c33	48 89 84 24 78
	03 00 00	 mov	 QWORD PTR tv1818[rsp], rax
  03c3b	e9 ae 00 00 00	 jmp	 $LN543@tapedev_ex
$LN542@tapedev_ex:
  03c40	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03c48	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03c4f	83 f8 04	 cmp	 eax, 4
  03c52	75 11		 jne	 SHORT $LN540@tapedev_ex
  03c54	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169661
  03c5b	48 89 84 24 70
	03 00 00	 mov	 QWORD PTR tv1817[rsp], rax
  03c63	eb 79		 jmp	 SHORT $LN541@tapedev_ex
$LN540@tapedev_ex:
  03c65	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03c6d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03c74	83 f8 05	 cmp	 eax, 5
  03c77	75 11		 jne	 SHORT $LN538@tapedev_ex
  03c79	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169662
  03c80	48 89 84 24 68
	03 00 00	 mov	 QWORD PTR tv1816[rsp], rax
  03c88	eb 44		 jmp	 SHORT $LN539@tapedev_ex
$LN538@tapedev_ex:
  03c8a	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03c92	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03c99	83 f8 06	 cmp	 eax, 6
  03c9c	75 11		 jne	 SHORT $LN536@tapedev_ex
  03c9e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169663
  03ca5	48 89 84 24 60
	03 00 00	 mov	 QWORD PTR tv1815[rsp], rax
  03cad	eb 0f		 jmp	 SHORT $LN537@tapedev_ex
$LN536@tapedev_ex:
  03caf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169664
  03cb6	48 89 84 24 60
	03 00 00	 mov	 QWORD PTR tv1815[rsp], rax
$LN537@tapedev_ex:
  03cbe	48 8b 84 24 60
	03 00 00	 mov	 rax, QWORD PTR tv1815[rsp]
  03cc6	48 89 84 24 68
	03 00 00	 mov	 QWORD PTR tv1816[rsp], rax
$LN539@tapedev_ex:
  03cce	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR tv1816[rsp]
  03cd6	48 89 84 24 70
	03 00 00	 mov	 QWORD PTR tv1817[rsp], rax
$LN541@tapedev_ex:
  03cde	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR tv1817[rsp]
  03ce6	48 89 84 24 78
	03 00 00	 mov	 QWORD PTR tv1818[rsp], rax
$LN543@tapedev_ex:
  03cee	48 8b 84 24 78
	03 00 00	 mov	 rax, QWORD PTR tv1818[rsp]
  03cf6	48 89 84 24 80
	03 00 00	 mov	 QWORD PTR tv1819[rsp], rax
$LN545@tapedev_ex:
  03cfe	48 8b 84 24 80
	03 00 00	 mov	 rax, QWORD PTR tv1819[rsp]
  03d06	48 89 84 24 88
	03 00 00	 mov	 QWORD PTR tv1820[rsp], rax
$LN547@tapedev_ex:
  03d0e	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03d17	74 15		 je	 SHORT $LN548@tapedev_ex
  03d19	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03d21	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03d25	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv1859[rsp], eax
  03d2c	eb 0b		 jmp	 SHORT $LN549@tapedev_ex
$LN548@tapedev_ex:
  03d2e	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1859[rsp], 0
$LN549@tapedev_ex:
  03d39	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03d42	74 17		 je	 SHORT $LN550@tapedev_ex
  03d44	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03d4c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03d50	d1 f8		 sar	 eax, 1
  03d52	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv1865[rsp], eax
  03d59	eb 0b		 jmp	 SHORT $LN551@tapedev_ex
$LN550@tapedev_ex:
  03d5b	c7 84 24 34 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1865[rsp], 0
$LN551@tapedev_ex:
  03d66	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03d6e	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  03d74	48 89 84 24 e0
	03 00 00	 mov	 QWORD PTR tv1822[rsp], rax
  03d7c	b9 01 00 00 00	 mov	 ecx, 1
  03d81	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03d87	48 8b 8c 24 88
	03 00 00	 mov	 rcx, QWORD PTR tv1820[rsp]
  03d8f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03d94	48 8b 8c 24 e0
	03 00 00	 mov	 rcx, QWORD PTR tv1822[rsp]
  03d9c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03da1	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR tv1859[rsp]
  03da8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03dac	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR tv1865[rsp]
  03db3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03db7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169665
  03dbe	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03dc3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169666
  03dca	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03dcf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03dd4	41 b9 03 00 00
	00		 mov	 r9d, 3
  03dda	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169667
  03de1	ba df 06 00 00	 mov	 edx, 1759		; 000006dfH
  03de6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169668
  03ded	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN223@tapedev_ex:

; 1760 : 
; 1761 :             /* (save new parms for next time) */
; 1762 :             free( dev->argv[0] );

  03df3	b8 08 00 00 00	 mov	 eax, 8
  03df8	48 6b c0 00	 imul	 rax, rax, 0
  03dfc	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03e04	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  03e08	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  03e0c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1763 :             dev->argv[0] = strdup( newfile );

  03e12	48 8d 8c 24 f0
	03 00 00	 lea	 rcx, QWORD PTR newfile$20[rsp]
  03e1a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  03e20	b9 08 00 00 00	 mov	 ecx, 8
  03e25	48 6b c9 00	 imul	 rcx, rcx, 0
  03e29	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  03e31	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  03e35	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax

; 1764 : 
; 1765 :             /* (set normal status for this ccw) */
; 1766 :             build_senseX( TAPE_BSENSE_STATUSONLY, dev, unitstat, code );

  03e39	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  03e42	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  03e4a	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  03e52	b9 0d 00 00 00	 mov	 ecx, 13
  03e57	e8 00 00 00 00	 call	 build_senseX
$LN218@tapedev_ex:

; 1767 :         }
; 1768 : 
; 1769 :         /* Release the device lock and exit function... */
; 1770 :         release_lock (&dev->lock);

  03e5c	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03e64	48 83 c0 38	 add	 rax, 56			; 00000038H
  03e68	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169669
  03e6f	48 8b c8	 mov	 rcx, rax
  03e72	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1771 :         break;

  03e78	e9 4c 2a 00 00	 jmp	 $LN13@tapedev_ex
$LN224@tapedev_ex:

; 1772 : 
; 1773 :     } /* End case 0x4B: SET DIAGNOSE */
; 1774 : 
; 1775 :     /*---------------------------------------------------------------*/
; 1776 :     /* READ MESSAGE ID                                               */
; 1777 :     /*---------------------------------------------------------------*/
; 1778 :     case 0x4E:
; 1779 :     {
; 1780 :         /*       GA32-0127 IBM 3490E Hardware Reference
; 1781 : 
; 1782 :         Read Message ID (X'4E')
; 1783 : 
; 1784 :         The Read Message ID command is used to read the message identifier
; 1785 :         that was assigned by the control unit to commands that indicated
; 1786 :         the message-required flag requesting notification when an asynchronous
; 1787 :         operation is complete.  The Read Message ID command must be chained
; 1788 :         directly from the specific command that requested the message
; 1789 :         notification or the command will be presented unit check status
; 1790 :         with associated sense indicating ERA code 27.
; 1791 : 
; 1792 :         If the Read Message ID command is chained to a specific command
; 1793 :         that requests notification, but the command does not result in an
; 1794 :         asynchronous operation, the message identifier field returned
; 1795 :         will be all zeroes.
; 1796 : 
; 1797 :         The data returned has the following format:
; 1798 : 
; 1799 :          ________ ____________________________________________________
; 1800 :         | Byte   | Description                                        |
; 1801 :         |________|____________________________________________________|
; 1802 :         | 0,1    | Length (set to X'000A')                            |
; 1803 :         |________|____________________________________________________|
; 1804 :         | 2      | Format (set to X'02')                              |
; 1805 :         |________|____________________________________________________|
; 1806 :         | 3      | Message Code                                       |
; 1807 :         |        |                                                    |
; 1808 :         |        | Value Description                                  |
; 1809 :         |        |                                                    |
; 1810 :         |        | X'01' Delayed-Response Message                     |
; 1811 :         |________|____________________________________________________|
; 1812 :         | 4-7    | Message ID                                         |
; 1813 :         |        |                                                    |
; 1814 :         |        | This field contains the message identifier         |
; 1815 :         |        | assigned by the control unit to the requested      |
; 1816 :         |        | operation.  If the operation was executed by       |
; 1817 :         |        | the subsystem as an immediate operation, this      |
; 1818 :         |        | field contains all zeroes and a later delayed-     |
; 1819 :         |        | response message is not generated.                 |
; 1820 :         |________|____________________________________________________|
; 1821 :         | 8      | Flags (set to X'00')                               |
; 1822 :         |________|____________________________________________________|
; 1823 :         | 9      | Reserved (set to X'00')                            |
; 1824 :         |________|____________________________________________________|
; 1825 :         */
; 1826 : 
; 1827 :         /* Command reject if not chained from a write command */
; 1828 :         if (!((chained & CCW_FLAGS_CC) && IS_CCW_WRITE(prevcode)))

  03e7d	0f b6 84 24 a8
	07 00 00	 movzx	 eax, BYTE PTR chained$[rsp]
  03e85	83 e0 40	 and	 eax, 64			; 00000040H
  03e88	85 c0		 test	 eax, eax
  03e8a	74 10		 je	 SHORT $LN226@tapedev_ex
  03e8c	0f b6 84 24 b8
	07 00 00	 movzx	 eax, BYTE PTR prevcode$[rsp]
  03e94	83 e0 03	 and	 eax, 3
  03e97	83 f8 01	 cmp	 eax, 1
  03e9a	74 28		 je	 SHORT $LN225@tapedev_ex
$LN226@tapedev_ex:

; 1829 :         {
; 1830 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  03e9c	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  03ea5	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  03ead	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  03eb5	b9 04 00 00 00	 mov	 ecx, 4
  03eba	e8 00 00 00 00	 call	 build_senseX

; 1831 :             break;

  03ebf	e9 05 2a 00 00	 jmp	 $LN13@tapedev_ex
$LN225@tapedev_ex:

; 1832 :         }
; 1833 : 
; 1834 :         /* Calculate residual byte count */
; 1835 :         RESIDUAL_CALC( 10 );

  03ec4	c7 44 24 70 0a
	00 00 00	 mov	 DWORD PTR len$[rsp], 10
  03ecc	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  03ed0	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  03ed7	73 10		 jae	 SHORT $LN552@tapedev_ex
  03ed9	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  03ee0	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv1903[rsp], eax
  03ee7	eb 0b		 jmp	 SHORT $LN553@tapedev_ex
$LN552@tapedev_ex:
  03ee9	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  03eed	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv1903[rsp], eax
$LN553@tapedev_ex:
  03ef4	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR tv1903[rsp]
  03efb	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  03eff	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  03f03	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  03f0a	2b c8		 sub	 ecx, eax
  03f0c	8b c1		 mov	 eax, ecx
  03f0e	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  03f16	89 01		 mov	 DWORD PTR [rcx], eax
  03f18	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  03f1c	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  03f23	73 0b		 jae	 SHORT $LN227@tapedev_ex
  03f25	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  03f2d	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN227@tapedev_ex:

; 1836 : 
; 1837 :         // PROGRAMMING NOTE: at the moment all of our i/o's are synchronous.
; 1838 :         // Thus we always return zero indicating the i/o was not asynchronous.
; 1839 : 
; 1840 :         STORE_HW ( &iobuf[0],   10 );       // 0-1

  03f30	66 b9 0a 00	 mov	 cx, 10
  03f34	e8 00 00 00 00	 call	 _byteswap_ushort
  03f39	b9 01 00 00 00	 mov	 ecx, 1
  03f3e	48 6b c9 00	 imul	 rcx, rcx, 0
  03f42	48 8b 94 24 c8
	07 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  03f4a	48 03 d1	 add	 rdx, rcx
  03f4d	48 8b ca	 mov	 rcx, rdx
  03f50	0f b7 d0	 movzx	 edx, ax
  03f53	e8 00 00 00 00	 call	 store_hw_noswap

; 1841 :                     iobuf[2] = 0x02;        // 2

  03f58	b8 01 00 00 00	 mov	 eax, 1
  03f5d	48 6b c0 02	 imul	 rax, rax, 2
  03f61	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  03f69	c6 04 01 02	 mov	 BYTE PTR [rcx+rax], 2

; 1842 :                     iobuf[3] = 0x01;        // 3

  03f6d	b8 01 00 00 00	 mov	 eax, 1
  03f72	48 6b c0 03	 imul	 rax, rax, 3
  03f76	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  03f7e	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1

; 1843 :         STORE_FW ( &iobuf[4],    0 );       // 4-7  (Message Id)

  03f82	33 c9		 xor	 ecx, ecx
  03f84	e8 00 00 00 00	 call	 _byteswap_ulong
  03f89	b9 01 00 00 00	 mov	 ecx, 1
  03f8e	48 6b c9 04	 imul	 rcx, rcx, 4
  03f92	48 8b 94 24 c8
	07 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  03f9a	48 03 d1	 add	 rdx, rcx
  03f9d	48 8b ca	 mov	 rcx, rdx
  03fa0	8b d0		 mov	 edx, eax
  03fa2	e8 00 00 00 00	 call	 store_fw_noswap

; 1844 :                     iobuf[8] = 0x00;        // 8

  03fa7	b8 01 00 00 00	 mov	 eax, 1
  03fac	48 6b c0 08	 imul	 rax, rax, 8
  03fb0	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  03fb8	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1845 :                     iobuf[9] = 0x00;        // 9

  03fbc	b8 01 00 00 00	 mov	 eax, 1
  03fc1	48 6b c0 09	 imul	 rax, rax, 9
  03fc5	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  03fcd	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1846 : 
; 1847 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat,code);

  03fd1	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  03fda	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  03fe2	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  03fea	b9 0d 00 00 00	 mov	 ecx, 13
  03fef	e8 00 00 00 00	 call	 build_senseX

; 1848 :         break;

  03ff4	e9 d0 28 00 00	 jmp	 $LN13@tapedev_ex
$LN228@tapedev_ex:

; 1849 : 
; 1850 :     } /* End case 0x4E: READ MESSAGE ID */
; 1851 : 
; 1852 :     /*---------------------------------------------------------------*/
; 1853 :     /* LOCATE BLOCK                                                  */
; 1854 :     /*---------------------------------------------------------------*/
; 1855 :     case 0x4F:
; 1856 :     {
; 1857 :         U32  locblock;                 /* Block Id for Locate Block */
; 1858 :         int  errcode = TAPE_BSENSE_STATUSONLY;  /* Presumed success */

  03ff9	c7 84 24 48 01
	00 00 0d 00 00
	00		 mov	 DWORD PTR errcode$13[rsp], 13

; 1859 : 
; 1860 :         /* Command reject if the volume is currently fenced */
; 1861 :         if (dev->fenced)

  04004	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0400c	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  04012	83 e0 01	 and	 eax, 1
  04015	85 c0		 test	 eax, eax
  04017	74 28		 je	 SHORT $LN229@tapedev_ex

; 1862 :         {
; 1863 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  04019	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04022	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0402a	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04032	b9 0a 00 00 00	 mov	 ecx, 10
  04037	e8 00 00 00 00	 call	 build_senseX

; 1864 :             break;

  0403c	e9 88 28 00 00	 jmp	 $LN13@tapedev_ex
$LN229@tapedev_ex:

; 1865 :         }
; 1866 : 
; 1867 :         /* Check for minimum count field */
; 1868 :         if (count < sizeof(dev->blockid))

  04041	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  04048	48 83 f8 04	 cmp	 rax, 4
  0404c	73 28		 jae	 SHORT $LN230@tapedev_ex

; 1869 :         {
; 1870 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  0404e	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04057	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0405f	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04067	b9 04 00 00 00	 mov	 ecx, 4
  0406c	e8 00 00 00 00	 call	 build_senseX

; 1871 :             break;

  04071	e9 53 28 00 00	 jmp	 $LN13@tapedev_ex
$LN230@tapedev_ex:
$LN25@tapedev_ex:

; 1872 :         }
; 1873 : 
; 1874 :         /* Block to seek */
; 1875 :         ASSERT( count >= sizeof(locblock) );

  04076	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  0407d	48 83 f8 04	 cmp	 rax, 4
  04081	73 5c		 jae	 SHORT $LN231@tapedev_ex
$LN28@tapedev_ex:
  04083	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169678
  0408a	41 b8 53 07 00
	00		 mov	 r8d, 1875		; 00000753H
  04090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169679
  04097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169680
  0409e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  040a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  040aa	85 c0		 test	 eax, eax
  040ac	74 20		 je	 SHORT $LN232@tapedev_ex
  040ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169682
  040b5	41 b8 53 07 00
	00		 mov	 r8d, 1875		; 00000753H
  040bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169683
  040c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169684
  040c9	e8 00 00 00 00	 call	 DebuggerTrace
$LN232@tapedev_ex:
  040ce	33 c0		 xor	 eax, eax
  040d0	85 c0		 test	 eax, eax
  040d2	75 af		 jne	 SHORT $LN28@tapedev_ex
  040d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  040da	85 c0		 test	 eax, eax
  040dc	74 01		 je	 SHORT $LN233@tapedev_ex
  040de	cc		 int	 3
$LN233@tapedev_ex:
$LN231@tapedev_ex:
  040df	33 c0		 xor	 eax, eax
  040e1	85 c0		 test	 eax, eax
  040e3	75 91		 jne	 SHORT $LN25@tapedev_ex

; 1876 :         FETCH_FW(locblock, iobuf);

  040e5	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  040ed	e8 00 00 00 00	 call	 fetch_fw_noswap
  040f2	8b c8		 mov	 ecx, eax
  040f4	e8 00 00 00 00	 call	 _byteswap_ulong
  040f9	89 84 24 8c 00
	00 00		 mov	 DWORD PTR locblock$8[rsp], eax

; 1877 : 
; 1878 :         /* Check for invalid/reserved Format Mode bits */
; 1879 :         if (0x3590 != dev->devtype)

  04100	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04108	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  0410c	3d 90 35 00 00	 cmp	 eax, 13712		; 00003590H
  04111	74 4e		 je	 SHORT $LN234@tapedev_ex

; 1880 :         {
; 1881 :             if (0x00C00000 == (locblock & 0x00C00000))

  04113	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR locblock$8[rsp]
  0411a	25 00 00 c0 00	 and	 eax, 12582912		; 00c00000H
  0411f	3d 00 00 c0 00	 cmp	 eax, 12582912		; 00c00000H
  04124	75 28		 jne	 SHORT $LN235@tapedev_ex

; 1882 :             {
; 1883 :                 build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  04126	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0412f	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04137	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0413f	b9 04 00 00 00	 mov	 ecx, 4
  04144	e8 00 00 00 00	 call	 build_senseX

; 1884 :                 break;

  04149	e9 7b 27 00 00	 jmp	 $LN13@tapedev_ex
$LN235@tapedev_ex:

; 1885 :             }
; 1886 : 
; 1887 :             /* We only want the Block Number in the low-order 22 bits */
; 1888 :             locblock &= 0x003FFFFF;

  0414e	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR locblock$8[rsp]
  04155	25 ff ff 3f 00	 and	 eax, 4194303		; 003fffffH
  0415a	89 84 24 8c 00
	00 00		 mov	 DWORD PTR locblock$8[rsp], eax
$LN234@tapedev_ex:

; 1889 :         }
; 1890 : 
; 1891 :         /* Calculate residual byte count */
; 1892 :         RESIDUAL_CALC( sizeof(locblock) );

  04161	c7 44 24 70 04
	00 00 00	 mov	 DWORD PTR len$[rsp], 4
  04169	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0416d	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04174	73 10		 jae	 SHORT $LN554@tapedev_ex
  04176	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  0417d	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv1974[rsp], eax
  04184	eb 0b		 jmp	 SHORT $LN555@tapedev_ex
$LN554@tapedev_ex:
  04186	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0418a	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv1974[rsp], eax
$LN555@tapedev_ex:
  04191	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR tv1974[rsp]
  04198	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  0419c	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  041a0	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  041a7	2b c8		 sub	 ecx, eax
  041a9	8b c1		 mov	 eax, ecx
  041ab	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  041b3	89 01		 mov	 DWORD PTR [rcx], eax
  041b5	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  041b9	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  041c0	73 0b		 jae	 SHORT $LN236@tapedev_ex
  041c2	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  041ca	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN236@tapedev_ex:

; 1893 : 
; 1894 :         /* Informative message if tracing */
; 1895 :         if (dev->ccwtrace)

  041cd	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  041d5	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  041db	c1 e8 0f	 shr	 eax, 15
  041de	83 e0 01	 and	 eax, 1
  041e1	85 c0		 test	 eax, eax
  041e3	0f 84 5b 02 00
	00		 je	 $LN237@tapedev_ex

; 1896 :             WRMSG(HHC00217, "I", LCSS_DEVNUM

  041e9	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  041f1	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  041f8	83 f8 01	 cmp	 eax, 1
  041fb	75 14		 jne	 SHORT $LN566@tapedev_ex
  041fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169690
  04204	48 89 84 24 b8
	03 00 00	 mov	 QWORD PTR tv2005[rsp], rax
  0420c	e9 1e 01 00 00	 jmp	 $LN567@tapedev_ex
$LN566@tapedev_ex:
  04211	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04219	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04220	83 f8 02	 cmp	 eax, 2
  04223	75 14		 jne	 SHORT $LN564@tapedev_ex
  04225	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169691
  0422c	48 89 84 24 b0
	03 00 00	 mov	 QWORD PTR tv2004[rsp], rax
  04234	e9 e6 00 00 00	 jmp	 $LN565@tapedev_ex
$LN564@tapedev_ex:
  04239	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04241	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04248	83 f8 03	 cmp	 eax, 3
  0424b	75 14		 jne	 SHORT $LN562@tapedev_ex
  0424d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169692
  04254	48 89 84 24 a8
	03 00 00	 mov	 QWORD PTR tv2003[rsp], rax
  0425c	e9 ae 00 00 00	 jmp	 $LN563@tapedev_ex
$LN562@tapedev_ex:
  04261	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04269	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04270	83 f8 04	 cmp	 eax, 4
  04273	75 11		 jne	 SHORT $LN560@tapedev_ex
  04275	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169693
  0427c	48 89 84 24 a0
	03 00 00	 mov	 QWORD PTR tv2002[rsp], rax
  04284	eb 79		 jmp	 SHORT $LN561@tapedev_ex
$LN560@tapedev_ex:
  04286	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0428e	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04295	83 f8 05	 cmp	 eax, 5
  04298	75 11		 jne	 SHORT $LN558@tapedev_ex
  0429a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169694
  042a1	48 89 84 24 98
	03 00 00	 mov	 QWORD PTR tv2001[rsp], rax
  042a9	eb 44		 jmp	 SHORT $LN559@tapedev_ex
$LN558@tapedev_ex:
  042ab	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  042b3	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  042ba	83 f8 06	 cmp	 eax, 6
  042bd	75 11		 jne	 SHORT $LN556@tapedev_ex
  042bf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169695
  042c6	48 89 84 24 90
	03 00 00	 mov	 QWORD PTR tv2000[rsp], rax
  042ce	eb 0f		 jmp	 SHORT $LN557@tapedev_ex
$LN556@tapedev_ex:
  042d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169696
  042d7	48 89 84 24 90
	03 00 00	 mov	 QWORD PTR tv2000[rsp], rax
$LN557@tapedev_ex:
  042df	48 8b 84 24 90
	03 00 00	 mov	 rax, QWORD PTR tv2000[rsp]
  042e7	48 89 84 24 98
	03 00 00	 mov	 QWORD PTR tv2001[rsp], rax
$LN559@tapedev_ex:
  042ef	48 8b 84 24 98
	03 00 00	 mov	 rax, QWORD PTR tv2001[rsp]
  042f7	48 89 84 24 a0
	03 00 00	 mov	 QWORD PTR tv2002[rsp], rax
$LN561@tapedev_ex:
  042ff	48 8b 84 24 a0
	03 00 00	 mov	 rax, QWORD PTR tv2002[rsp]
  04307	48 89 84 24 a8
	03 00 00	 mov	 QWORD PTR tv2003[rsp], rax
$LN563@tapedev_ex:
  0430f	48 8b 84 24 a8
	03 00 00	 mov	 rax, QWORD PTR tv2003[rsp]
  04317	48 89 84 24 b0
	03 00 00	 mov	 QWORD PTR tv2004[rsp], rax
$LN565@tapedev_ex:
  0431f	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR tv2004[rsp]
  04327	48 89 84 24 b8
	03 00 00	 mov	 QWORD PTR tv2005[rsp], rax
$LN567@tapedev_ex:
  0432f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04337	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0433e	83 f8 03	 cmp	 eax, 3
  04341	75 18		 jne	 SHORT $LN568@tapedev_ex
  04343	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0434b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  04351	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv2011[rsp], rax
  04359	eb 0f		 jmp	 SHORT $LN569@tapedev_ex
$LN568@tapedev_ex:
  0435b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169697
  04362	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv2011[rsp], rax
$LN569@tapedev_ex:
  0436a	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04373	74 15		 je	 SHORT $LN570@tapedev_ex
  04375	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0437d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04381	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv2016[rsp], eax
  04388	eb 0b		 jmp	 SHORT $LN571@tapedev_ex
$LN570@tapedev_ex:
  0438a	c7 84 24 40 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2016[rsp], 0
$LN571@tapedev_ex:
  04395	48 83 bc 24 90
	07 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0439e	74 17		 je	 SHORT $LN572@tapedev_ex
  043a0	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  043a8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  043ac	d1 f8		 sar	 eax, 1
  043ae	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv2022[rsp], eax
  043b5	eb 0b		 jmp	 SHORT $LN573@tapedev_ex
$LN572@tapedev_ex:
  043b7	c7 84 24 44 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2022[rsp], 0
$LN573@tapedev_ex:
  043c2	b9 01 00 00 00	 mov	 ecx, 1
  043c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  043cd	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR locblock$8[rsp]
  043d4	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  043d8	48 8b 8c 24 b8
	03 00 00	 mov	 rcx, QWORD PTR tv2005[rsp]
  043e0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  043e5	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR tv2011[rsp]
  043ed	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  043f2	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR tv2016[rsp]
  043f9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  043fd	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR tv2022[rsp]
  04404	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  04408	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169698
  0440f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  04414	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169699
  0441b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  04420	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04425	41 b9 03 00 00
	00		 mov	 r9d, 3
  0442b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169700
  04432	ba 6c 07 00 00	 mov	 edx, 1900		; 0000076cH
  04437	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169701
  0443e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN237@tapedev_ex:

; 1897 :                 ,TAPEDEVT_SCSITAPE == dev->tapedevt ? (char*)dev->filename : ""
; 1898 :                 ,TTYPSTR(dev->tapedevt)
; 1899 :                 ,locblock
; 1900 :             );
; 1901 : 
; 1902 :         /* Update display if needed */
; 1903 :         if ( TAPEDISPTYP_IDLE    == dev->tapedisptype ||

  04444	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0444c	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  04453	85 c0		 test	 eax, eax
  04455	74 14		 je	 SHORT $LN239@tapedev_ex
  04457	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0445f	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  04466	83 f8 09	 cmp	 eax, 9
  04469	75 1c		 jne	 SHORT $LN238@tapedev_ex
$LN239@tapedev_ex:

; 1904 :              TAPEDISPTYP_WAITACT == dev->tapedisptype )
; 1905 :         {
; 1906 :             dev->tapedisptype = TAPEDISPTYP_LOCATING;

  0446b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04473	c6 80 60 11 00
	00 01		 mov	 BYTE PTR [rax+4448], 1

; 1907 :             UpdateDisplay( dev );

  0447a	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04482	e8 00 00 00 00	 call	 UpdateDisplay
$LN238@tapedev_ex:

; 1908 :         }
; 1909 : 
; 1910 :         /* Assign a unique Message Id for this I/O if needed */
; 1911 :         INCREMENT_MESSAGEID(dev);

  04487	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0448f	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  04495	c1 e8 03	 shr	 eax, 3
  04498	83 e0 01	 and	 eax, 1
  0449b	85 c0		 test	 eax, eax
  0449d	74 1e		 je	 SHORT $LN240@tapedev_ex
  0449f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  044a7	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  044ad	ff c0		 inc	 eax
  044af	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  044b7	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN240@tapedev_ex:

; 1912 : 
; 1913 :         /* Ask media handler to perform the locate... */
; 1914 :         if ((rc = dev->tmh->locateblk( dev, locblock, unitstat, code )) < 0)

  044bd	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  044c5	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  044cc	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  044d5	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  044dd	8b 94 24 8c 00
	00 00		 mov	 edx, DWORD PTR locblock$8[rsp]
  044e4	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  044ec	ff 90 88 00 00
	00		 call	 QWORD PTR [rax+136]
  044f2	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  044f6	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  044fb	7d 57		 jge	 SHORT $LN241@tapedev_ex

; 1915 :         {
; 1916 :             errcode = TAPE_BSENSE_LOCATEERR;

  044fd	c7 84 24 48 01
	00 00 0e 00 00
	00		 mov	 DWORD PTR errcode$13[rsp], 14

; 1917 : 
; 1918 :             if (!SVF_ENABLED())

  04508	b8 01 00 00 00	 mov	 eax, 1
  0450d	48 6b c0 00	 imul	 rax, rax, 0
  04511	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04519	48 8d 84 01 72
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1394]
  04521	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  04526	48 8b c8	 mov	 rcx, rax
  04529	e8 00 00 00 00	 call	 is_tape_feat
  0452e	0f b6 c0	 movzx	 eax, al
  04531	85 c0		 test	 eax, eax
  04533	75 1f		 jne	 SHORT $LN242@tapedev_ex

; 1919 :                 dev->fenced = 1; // (position lost; fence the volume)

  04535	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0453d	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  04543	83 c8 01	 or	 eax, 1
  04546	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0454e	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax
$LN242@tapedev_ex:
$LN241@tapedev_ex:

; 1920 :         }
; 1921 : 
; 1922 :         /* Update display if needed */
; 1923 :         if ( TAPEDISPTYP_LOCATING == dev->tapedisptype )

  04554	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0455c	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  04563	83 f8 01	 cmp	 eax, 1
  04566	75 1c		 jne	 SHORT $LN243@tapedev_ex

; 1924 :         {
; 1925 :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  04568	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04570	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 1926 :             UpdateDisplay( dev );

  04577	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0457f	e8 00 00 00 00	 call	 UpdateDisplay
$LN243@tapedev_ex:

; 1927 :         }
; 1928 : 
; 1929 :         /* Set completion status... */
; 1930 :         build_senseX( errcode, dev, unitstat, code );

  04584	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0458d	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04595	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0459d	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR errcode$13[rsp]
  045a4	e8 00 00 00 00	 call	 build_senseX

; 1931 :         break;

  045a9	e9 1b 23 00 00	 jmp	 $LN13@tapedev_ex
$LN244@tapedev_ex:

; 1932 : 
; 1933 :     } /* End case 0x4F: LOCATE BLOCK */
; 1934 : 
; 1935 :     /*---------------------------------------------------------------*/
; 1936 :     /* SUSPEND MULTIPATH RECONNECTION  (3480 and later)              */
; 1937 :     /*---------------------------------------------------------------*/
; 1938 :     case 0x5B:
; 1939 :     {
; 1940 :         /*       GA32-0127 IBM 3490E Hardware Reference
; 1941 : 
; 1942 :         Suspend Multipath Reconnection (X'5B')
; 1943 : 
; 1944 :         The Suspend Multipath Reconnection command performs as a
; 1945 :         No-Operation command because all controlling-computer-to-
; 1946 :         subsystem operations occur in single-path status.
; 1947 :         */
; 1948 : 
; 1949 :         /* Command Reject if Supervisor-Inhibit */
; 1950 :         if (dev->supvr_inhibit)

  045ae	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  045b6	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  045bc	c1 e8 07	 shr	 eax, 7
  045bf	83 e0 01	 and	 eax, 1
  045c2	85 c0		 test	 eax, eax
  045c4	74 28		 je	 SHORT $LN245@tapedev_ex

; 1951 :         {
; 1952 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  045c6	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  045cf	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  045d7	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  045df	b9 04 00 00 00	 mov	 ecx, 4
  045e4	e8 00 00 00 00	 call	 build_senseX

; 1953 :             break;

  045e9	e9 db 22 00 00	 jmp	 $LN13@tapedev_ex
$LN245@tapedev_ex:

; 1954 :         }
; 1955 : 
; 1956 :         /* Set normal status */
; 1957 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  045ee	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  045f7	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  045ff	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04607	b9 0d 00 00 00	 mov	 ecx, 13
  0460c	e8 00 00 00 00	 call	 build_senseX

; 1958 :         break;

  04611	e9 b3 22 00 00	 jmp	 $LN13@tapedev_ex
$LN246@tapedev_ex:

; 1959 :     }
; 1960 : 
; 1961 :     /*---------------------------------------------------------------*/
; 1962 :     /* READ MEDIA CHARACTERISTICS  (3590 only)                       */
; 1963 :     /*---------------------------------------------------------------*/
; 1964 :     case 0x62:
; 1965 :     {
; 1966 :         /*    SG24-2506 IBM 3590 Tape Subsystem Technical Guide
; 1967 : 
; 1968 :         5.2.3 New Read Media Characteristics
; 1969 : 
; 1970 :         The new Read Media Characteristics CCW (command code x'62')
; 1971 :         provides up to 256 bytes of information about the media and
; 1972 :         formats supported by the Magstar tape drive."
; 1973 :         */
; 1974 : 
; 1975 :         // ZZ FIXME: not coded yet.
; 1976 : 
; 1977 :         /* Set command reject sense byte, and unit check status */
; 1978 :         build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  04616	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0461f	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04627	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0462f	b9 04 00 00 00	 mov	 ecx, 4
  04634	e8 00 00 00 00	 call	 build_senseX

; 1979 :         break;

  04639	e9 8b 22 00 00	 jmp	 $LN13@tapedev_ex
$LN247@tapedev_ex:

; 1980 :     }
; 1981 : 
; 1982 :     /*---------------------------------------------------------------*/
; 1983 :     /* READ DEVICE CHARACTERISTICS                                   */
; 1984 :     /*---------------------------------------------------------------*/
; 1985 :     case 0x64:
; 1986 :     {
; 1987 :         /* Command reject if device characteristics not available */
; 1988 :         if (dev->numdevchar == 0)

  0463e	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04646	83 b8 68 05 00
	00 00		 cmp	 DWORD PTR [rax+1384], 0
  0464d	75 28		 jne	 SHORT $LN248@tapedev_ex

; 1989 :         {
; 1990 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  0464f	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04658	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04660	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04668	b9 04 00 00 00	 mov	 ecx, 4
  0466d	e8 00 00 00 00	 call	 build_senseX

; 1991 :             break;

  04672	e9 52 22 00 00	 jmp	 $LN13@tapedev_ex
$LN248@tapedev_ex:

; 1992 :         }
; 1993 : 
; 1994 :         /* Calculate residual byte count */
; 1995 :         RESIDUAL_CALC (dev->numdevchar);

  04677	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0467f	8b 80 68 05 00
	00		 mov	 eax, DWORD PTR [rax+1384]
  04685	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  04689	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0468d	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04694	73 10		 jae	 SHORT $LN574@tapedev_ex
  04696	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  0469d	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv2102[rsp], eax
  046a4	eb 0b		 jmp	 SHORT $LN575@tapedev_ex
$LN574@tapedev_ex:
  046a6	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  046aa	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv2102[rsp], eax
$LN575@tapedev_ex:
  046b1	8b 84 24 4c 01
	00 00		 mov	 eax, DWORD PTR tv2102[rsp]
  046b8	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  046bc	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  046c0	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  046c7	2b c8		 sub	 ecx, eax
  046c9	8b c1		 mov	 eax, ecx
  046cb	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  046d3	89 01		 mov	 DWORD PTR [rcx], eax
  046d5	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  046d9	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  046e0	73 0b		 jae	 SHORT $LN249@tapedev_ex
  046e2	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  046ea	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN249@tapedev_ex:

; 1996 : 
; 1997 :         /* Copy device characteristics bytes to channel buffer */
; 1998 :         memcpy (iobuf, dev->devchar, num);

  046ed	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  046f1	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  046f9	48 81 c1 6c 05
	00 00		 add	 rcx, 1388		; 0000056cH
  04700	48 8b bc 24 c8
	07 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  04708	48 8b f1	 mov	 rsi, rcx
  0470b	8b c8		 mov	 ecx, eax
  0470d	f3 a4		 rep movsb

; 1999 : 
; 2000 :         /* Return unit status */
; 2001 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  0470f	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04718	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04720	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04728	b9 0d 00 00 00	 mov	 ecx, 13
  0472d	e8 00 00 00 00	 call	 build_senseX

; 2002 :         break;

  04732	e9 92 21 00 00	 jmp	 $LN13@tapedev_ex
$LN250@tapedev_ex:

; 2003 :     }
; 2004 : 
; 2005 : #if 0
; 2006 :     /*---------------------------------------------------------------*/
; 2007 :     /* SET INTERFACE IDENTIFIER  (3490 and later)                    */
; 2008 :     /*---------------------------------------------------------------*/
; 2009 :     case 0x73:
; 2010 :     {
; 2011 :         // PROGRAMMING NOTE: the 3480 and earlier "Mode Set" interpretation
; 2012 :         // of this CCW is handled in the command-table as a no-op; the "Set
; 2013 :         // Interface Identifier" interpretation of this CCW for 3490 and
; 2014 :         // later model tape drives is *ALSO* handled in the command-table
; 2015 :         // as a no-op as well, so there's really no reason for this switch
; 2016 :         // case to even exist until such time as we need to support a model
; 2017 :         // that happens to require special handling (which is unlikely).
; 2018 : 
; 2019 :         // I'm keeping the code here however for documentation purposes
; 2020 :         // only, but of course disabling it from compilation via #if 0.
; 2021 : 
; 2022 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);
; 2023 :         break;
; 2024 :     }
; 2025 : #endif
; 2026 : 
; 2027 :     /*---------------------------------------------------------------*/
; 2028 :     /* PERFORM SUBSYSTEM FUNCTION                                    */
; 2029 :     /*---------------------------------------------------------------*/
; 2030 :     case 0x77:
; 2031 :     {
; 2032 :         BYTE  order  = iobuf[0];

  04737	b8 01 00 00 00	 mov	 eax, 1
  0473c	48 6b c0 00	 imul	 rax, rax, 0
  04740	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  04748	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0474c	88 44 24 7d	 mov	 BYTE PTR order$2[rsp], al

; 2033 :         BYTE  flag   = iobuf[1];

  04750	b8 01 00 00 00	 mov	 eax, 1
  04755	48 6b c0 01	 imul	 rax, rax, 1
  04759	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  04761	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  04765	88 84 24 85 00
	00 00		 mov	 BYTE PTR flag$5[rsp], al

; 2034 :         BYTE  parm   = iobuf[2];

  0476c	b8 01 00 00 00	 mov	 eax, 1
  04771	48 6b c0 02	 imul	 rax, rax, 2
  04775	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0477d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  04781	88 44 24 7c	 mov	 BYTE PTR parm$1[rsp], al

; 2035 : 
; 2036 :         /* Command Reject if Supervisor-Inhibit */
; 2037 :         if (dev->supvr_inhibit)

  04785	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0478d	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  04793	c1 e8 07	 shr	 eax, 7
  04796	83 e0 01	 and	 eax, 1
  04799	85 c0		 test	 eax, eax
  0479b	74 28		 je	 SHORT $LN251@tapedev_ex

; 2038 :         {
; 2039 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  0479d	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  047a6	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  047ae	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  047b6	b9 04 00 00 00	 mov	 ecx, 4
  047bb	e8 00 00 00 00	 call	 build_senseX

; 2040 :             break;

  047c0	e9 04 21 00 00	 jmp	 $LN13@tapedev_ex
$LN251@tapedev_ex:

; 2041 :         }
; 2042 : 
; 2043 :         /* The flag byte must be zero for all orders because
; 2044 :            none of our supported orders supports a flag byte */
; 2045 :         if (PSF_FLAG_ZERO != flag)

  047c5	0f b6 84 24 85
	00 00 00	 movzx	 eax, BYTE PTR flag$5[rsp]
  047cd	85 c0		 test	 eax, eax
  047cf	74 28		 je	 SHORT $LN252@tapedev_ex

; 2046 :         {
; 2047 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  047d1	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  047da	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  047e2	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  047ea	b9 04 00 00 00	 mov	 ecx, 4
  047ef	e8 00 00 00 00	 call	 build_senseX

; 2048 :             break;

  047f4	e9 d0 20 00 00	 jmp	 $LN13@tapedev_ex
$LN252@tapedev_ex:

; 2049 :         }
; 2050 : 
; 2051 :         /* Byte 0 is the PSF order */
; 2052 :         switch (order)

  047f9	0f b6 44 24 7d	 movzx	 eax, BYTE PTR order$2[rsp]
  047fe	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv2137[rsp], eax
  04805	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv2137[rsp]
  0480c	83 e8 18	 sub	 eax, 24
  0480f	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv2137[rsp], eax
  04816	81 bc 24 94 00
	00 00 8a 00 00
	00		 cmp	 DWORD PTR tv2137[rsp], 138 ; 0000008aH
  04821	0f 87 05 0b 00
	00		 ja	 $LN293@tapedev_ex
  04827	48 63 84 24 94
	00 00 00	 movsxd	 rax, DWORD PTR tv2137[rsp]
  0482f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  04836	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN622@tapedev_ex[rcx+rax]
  0483e	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN623@tapedev_ex[rcx+rax*4]
  04845	48 03 c1	 add	 rax, rcx
  04848	ff e0		 jmp	 rax
$LN253@tapedev_ex:
$LN254@tapedev_ex:

; 2053 :         {
; 2054 :         /*-----------------------------------------------------------*/
; 2055 :         /* Activate/Deactivate Forced Error Logging                  */
; 2056 :         /* 0x8000nn / 0x8100nn                                       */
; 2057 :         /*-----------------------------------------------------------*/
; 2058 :         case PSF_ORDER_AFEL:
; 2059 :         case PSF_ORDER_DFEL:
; 2060 :         {
; 2061 :             BYTE  bEnable  = (PSF_ORDER_AFEL == order) ? 1 : 0;

  0484a	0f b6 44 24 7d	 movzx	 eax, BYTE PTR order$2[rsp]
  0484f	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  04854	75 0d		 jne	 SHORT $LN576@tapedev_ex
  04856	c7 84 24 50 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv2140[rsp], 1
  04861	eb 0b		 jmp	 SHORT $LN577@tapedev_ex
$LN576@tapedev_ex:
  04863	c7 84 24 50 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2140[rsp], 0
$LN577@tapedev_ex:
  0486e	0f b6 84 24 50
	01 00 00	 movzx	 eax, BYTE PTR tv2140[rsp]
  04876	88 84 24 86 00
	00 00		 mov	 BYTE PTR bEnable$6[rsp], al

; 2062 : 
; 2063 :             /* Calculate residual byte count */
; 2064 :             RESIDUAL_CALC (3);

  0487d	c7 44 24 70 03
	00 00 00	 mov	 DWORD PTR len$[rsp], 3
  04885	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04889	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04890	73 10		 jae	 SHORT $LN578@tapedev_ex
  04892	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  04899	89 84 24 54 01
	00 00		 mov	 DWORD PTR tv2143[rsp], eax
  048a0	eb 0b		 jmp	 SHORT $LN579@tapedev_ex
$LN578@tapedev_ex:
  048a2	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  048a6	89 84 24 54 01
	00 00		 mov	 DWORD PTR tv2143[rsp], eax
$LN579@tapedev_ex:
  048ad	8b 84 24 54 01
	00 00		 mov	 eax, DWORD PTR tv2143[rsp]
  048b4	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  048b8	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  048bc	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  048c3	2b c8		 sub	 ecx, eax
  048c5	8b c1		 mov	 eax, ecx
  048c7	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  048cf	89 01		 mov	 DWORD PTR [rcx], eax
  048d1	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  048d5	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  048dc	73 0b		 jae	 SHORT $LN255@tapedev_ex
  048de	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  048e6	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN255@tapedev_ex:

; 2065 : 
; 2066 :             /* Control information length must be 3 bytes long */
; 2067 :             /* and the parameter byte must be one or the other */
; 2068 :             if ( (count < len)
; 2069 :                 || ((PSF_ACTION_FEL_IMPLICIT != parm) &&

  048e9	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  048ed	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  048f4	72 14		 jb	 SHORT $LN257@tapedev_ex
  048f6	0f b6 44 24 7c	 movzx	 eax, BYTE PTR parm$1[rsp]
  048fb	83 f8 01	 cmp	 eax, 1
  048fe	74 32		 je	 SHORT $LN256@tapedev_ex
  04900	0f b6 44 24 7c	 movzx	 eax, BYTE PTR parm$1[rsp]
  04905	83 f8 02	 cmp	 eax, 2
  04908	74 28		 je	 SHORT $LN256@tapedev_ex
$LN257@tapedev_ex:

; 2070 :                     (PSF_ACTION_FEL_EXPLICIT != parm))
; 2071 :             )
; 2072 :             {
; 2073 :                build_senseX(TAPE_BSENSE_BADCOMMAND,dev,unitstat,code);

  0490a	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04913	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0491b	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04923	b9 04 00 00 00	 mov	 ecx, 4
  04928	e8 00 00 00 00	 call	 build_senseX

; 2074 :                break;

  0492d	e9 1d 0a 00 00	 jmp	 $LN29@tapedev_ex
$LN256@tapedev_ex:

; 2075 :             }
; 2076 : 
; 2077 :             /* Enable/Disable Forced Error Logging as requested... */
; 2078 : 
; 2079 : #if 0 // (implicit enabling for all devices not currently supported; treat as explicit instead)
; 2080 :             if (PSF_ACTION_FEL_IMPLICIT == parm)
; 2081 :             {
; 2082 :                 // Implicit: for ALL devices...
; 2083 :                 dev->forced_logging = bEnable ? 1 : 0;
; 2084 :             }
; 2085 :             else // (PSF_ACTION_FEL_EXPLICIT == parm)
; 2086 : #endif // (implicit not supported)
; 2087 :             {
; 2088 :                 // Explicit: for only THIS device...
; 2089 :                 dev->forced_logging = bEnable ? 1 : 0;

  04932	0f b6 84 24 86
	00 00 00	 movzx	 eax, BYTE PTR bEnable$6[rsp]
  0493a	85 c0		 test	 eax, eax
  0493c	74 0d		 je	 SHORT $LN580@tapedev_ex
  0493e	c7 84 24 58 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv2158[rsp], 1
  04949	eb 0b		 jmp	 SHORT $LN581@tapedev_ex
$LN580@tapedev_ex:
  0494b	c7 84 24 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2158[rsp], 0
$LN581@tapedev_ex:
  04956	8b 84 24 58 01
	00 00		 mov	 eax, DWORD PTR tv2158[rsp]
  0495d	83 e0 01	 and	 eax, 1
  04960	c1 e0 04	 shl	 eax, 4
  04963	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0496b	8b 89 78 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4216]
  04971	83 e1 ef	 and	 ecx, -17		; ffffffefH
  04974	0b c8		 or	 ecx, eax
  04976	8b c1		 mov	 eax, ecx
  04978	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04980	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 2090 :             }
; 2091 : 
; 2092 :             build_senseX(TAPE_BSENSE_STATUSONLY,dev,unitstat,code);

  04986	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0498f	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04997	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0499f	b9 0d 00 00 00	 mov	 ecx, 13
  049a4	e8 00 00 00 00	 call	 build_senseX

; 2093 :             break;

  049a9	e9 a1 09 00 00	 jmp	 $LN29@tapedev_ex
$LN258@tapedev_ex:
$LN259@tapedev_ex:

; 2094 :         }
; 2095 : 
; 2096 :         /*-----------------------------------------------------------*/
; 2097 :         /* Activate/Deactivate Access Control                        */
; 2098 :         /* 0x8200nn00 / 0x8300nn00                                   */
; 2099 :         /*-----------------------------------------------------------*/
; 2100 :         case PSF_ORDER_AAC:     // (Activate)
; 2101 :         case PSF_ORDER_DAC:     // (Dectivate)
; 2102 :         {
; 2103 :             BYTE  bEnable  = (PSF_ORDER_AAC == order) ? 1 : 0;

  049ae	0f b6 44 24 7d	 movzx	 eax, BYTE PTR order$2[rsp]
  049b3	3d 82 00 00 00	 cmp	 eax, 130		; 00000082H
  049b8	75 0d		 jne	 SHORT $LN582@tapedev_ex
  049ba	c7 84 24 5c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv2170[rsp], 1
  049c5	eb 0b		 jmp	 SHORT $LN583@tapedev_ex
$LN582@tapedev_ex:
  049c7	c7 84 24 5c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2170[rsp], 0
$LN583@tapedev_ex:
  049d2	0f b6 84 24 5c
	01 00 00	 movzx	 eax, BYTE PTR tv2170[rsp]
  049da	88 84 24 84 00
	00 00		 mov	 BYTE PTR bEnable$4[rsp], al

; 2104 : 
; 2105 :             /* Calculate residual byte count */
; 2106 :             RESIDUAL_CALC (4);

  049e1	c7 44 24 70 04
	00 00 00	 mov	 DWORD PTR len$[rsp], 4
  049e9	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  049ed	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  049f4	73 10		 jae	 SHORT $LN584@tapedev_ex
  049f6	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  049fd	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv2173[rsp], eax
  04a04	eb 0b		 jmp	 SHORT $LN585@tapedev_ex
$LN584@tapedev_ex:
  04a06	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04a0a	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv2173[rsp], eax
$LN585@tapedev_ex:
  04a11	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR tv2173[rsp]
  04a18	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  04a1c	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  04a20	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  04a27	2b c8		 sub	 ecx, eax
  04a29	8b c1		 mov	 eax, ecx
  04a2b	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  04a33	89 01		 mov	 DWORD PTR [rcx], eax
  04a35	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04a39	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04a40	73 0b		 jae	 SHORT $LN260@tapedev_ex
  04a42	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  04a4a	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN260@tapedev_ex:

; 2107 : 
; 2108 :             /* Control information length must be 4 bytes long */
; 2109 :             /* and the parameter byte must not be invalid      */
; 2110 :             if (0
; 2111 :                 || (count < len)
; 2112 :                 || (parm  & ~(PSF_ACTION_AC_LWP | PSF_ACTION_AC_DCD |   // (bits on that shouldn't be)
; 2113 :                               PSF_ACTION_AC_DCR | PSF_ACTION_AC_ER))
; 2114 :                 || !(parm &  (PSF_ACTION_AC_LWP | PSF_ACTION_AC_DCD |   // (bits on that should be)

  04a4d	33 c0		 xor	 eax, eax
  04a4f	85 c0		 test	 eax, eax
  04a51	75 29		 jne	 SHORT $LN262@tapedev_ex
  04a53	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04a57	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04a5e	72 1c		 jb	 SHORT $LN262@tapedev_ex
  04a60	0f b6 44 24 7c	 movzx	 eax, BYTE PTR parm$1[rsp]
  04a65	25 6c ff ff ff	 and	 eax, -148		; ffffffffffffff6cH
  04a6a	85 c0		 test	 eax, eax
  04a6c	75 0e		 jne	 SHORT $LN262@tapedev_ex
  04a6e	0f b6 44 24 7c	 movzx	 eax, BYTE PTR parm$1[rsp]
  04a73	25 93 00 00 00	 and	 eax, 147		; 00000093H
  04a78	85 c0		 test	 eax, eax
  04a7a	75 28		 jne	 SHORT $LN261@tapedev_ex
$LN262@tapedev_ex:

; 2115 :                               PSF_ACTION_AC_DCR | PSF_ACTION_AC_ER))
; 2116 :             )
; 2117 :             {
; 2118 :                 build_senseX(TAPE_BSENSE_BADCOMMAND,dev,unitstat,code);

  04a7c	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04a85	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04a8d	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04a95	b9 04 00 00 00	 mov	 ecx, 4
  04a9a	e8 00 00 00 00	 call	 build_senseX

; 2119 :                 break;

  04a9f	e9 ab 08 00 00	 jmp	 $LN29@tapedev_ex
$LN261@tapedev_ex:

; 2120 :             }
; 2121 : 
; 2122 :             /* Enable/Disable Logical Write Protect if requested */
; 2123 :             if (parm & PSF_ACTION_AC_LWP)

  04aa4	0f b6 44 24 7c	 movzx	 eax, BYTE PTR parm$1[rsp]
  04aa9	25 80 00 00 00	 and	 eax, 128		; 00000080H
  04aae	85 c0		 test	 eax, eax
  04ab0	74 55		 je	 SHORT $LN263@tapedev_ex

; 2124 :                 dev->tdparms.logical_readonly = bEnable ? 1 : 0;

  04ab2	0f b6 84 24 84
	00 00 00	 movzx	 eax, BYTE PTR bEnable$4[rsp]
  04aba	85 c0		 test	 eax, eax
  04abc	74 0d		 je	 SHORT $LN586@tapedev_ex
  04abe	c7 84 24 64 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv2194[rsp], 1
  04ac9	eb 0b		 jmp	 SHORT $LN587@tapedev_ex
$LN586@tapedev_ex:
  04acb	c7 84 24 64 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2194[rsp], 0
$LN587@tapedev_ex:
  04ad6	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR tv2194[rsp]
  04add	83 e0 01	 and	 eax, 1
  04ae0	c1 e0 0b	 shl	 eax, 11
  04ae3	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04aeb	8b 89 30 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4144]
  04af1	0f ba f1 0b	 btr	 ecx, 11
  04af5	0b c8		 or	 ecx, eax
  04af7	8b c1		 mov	 eax, ecx
  04af9	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04b01	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax
$LN263@tapedev_ex:

; 2125 : 
; 2126 :             /* Enable/Disable Data Compaction (compression) if requested */
; 2127 :             if (parm & PSF_ACTION_AC_DCD)

  04b07	0f b6 44 24 7c	 movzx	 eax, BYTE PTR parm$1[rsp]
  04b0c	83 e0 10	 and	 eax, 16
  04b0f	85 c0		 test	 eax, eax
  04b11	74 6f		 je	 SHORT $LN264@tapedev_ex

; 2128 :             {
; 2129 :                 if (TAPEDEVT_HETTAPE == dev->tapedevt)

  04b13	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04b1b	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04b22	83 f8 04	 cmp	 eax, 4
  04b25	75 4c		 jne	 SHORT $LN265@tapedev_ex

; 2130 :                 {
; 2131 :                     rc = het_cntl( dev->hetb, HETCNTL_SET | HETCNTL_COMPRESS,

  04b27	0f b6 84 24 84
	00 00 00	 movzx	 eax, BYTE PTR bEnable$4[rsp]
  04b2f	85 c0		 test	 eax, eax
  04b31	74 0d		 je	 SHORT $LN588@tapedev_ex
  04b33	c7 84 24 68 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv2209[rsp], 1
  04b3e	eb 0b		 jmp	 SHORT $LN589@tapedev_ex
$LN588@tapedev_ex:
  04b40	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2209[rsp], 0
$LN589@tapedev_ex:
  04b4b	44 8b 84 24 68
	01 00 00	 mov	 r8d, DWORD PTR tv2209[rsp]
  04b53	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  04b58	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04b60	48 8b 88 28 10
	00 00		 mov	 rcx, QWORD PTR [rax+4136]
  04b67	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_cntl
  04b6d	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 2132 :                                    bEnable ? TRUE : FALSE );
; 2133 :                 }

  04b71	eb 0f		 jmp	 SHORT $LN266@tapedev_ex
$LN265@tapedev_ex:

; 2134 : #if defined(OPTION_SCSI_TAPE)
; 2135 :                 else if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  04b73	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04b7b	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
$LN266@tapedev_ex:
$LN264@tapedev_ex:

; 2136 :                 {
; 2137 :                     // ZZ FIXME: future place for direct SCSI i/o
; 2138 :                     // to enable/disable compression for 3480/later.
; 2139 :                 }
; 2140 : #endif
; 2141 :             }
; 2142 : 
; 2143 :             build_senseX(TAPE_BSENSE_STATUSONLY,dev,unitstat,code);

  04b82	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04b8b	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04b93	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04b9b	b9 0d 00 00 00	 mov	 ecx, 13
  04ba0	e8 00 00 00 00	 call	 build_senseX

; 2144 :             break;

  04ba5	e9 a5 07 00 00	 jmp	 $LN29@tapedev_ex
$LN268@tapedev_ex:

; 2145 :         }
; 2146 : 
; 2147 :         /*-----------------------------------------------------------*/
; 2148 :         /* Reset Volume Fenced                                       */
; 2149 :         /* 0x9000                                                    */
; 2150 :         /*-----------------------------------------------------------*/
; 2151 :         case PSF_ORDER_RVF:
; 2152 :         {
; 2153 :             /*       GA32-0127 IBM 3490E Hardware Reference
; 2154 : 
; 2155 :             Volume Fencing
; 2156 : 
; 2157 :             When a condition results in a volume integrity exposure,
; 2158 :             the control unit will prevent further access to the volume.
; 2159 :             This process is called Volume Fencing and is primarily
; 2160 :             related to loss of buffered write data, tape positioning,
; 2161 :             or assignment protection.
; 2162 : 
; 2163 :             The control unit prevents further access to the tape volume
; 2164 :             by conditioning itself to generate deferred unit checks with
; 2165 :             associated sense data indicating ERA code 47, for all commands
; 2166 :             that are eligible to receive the deferred unit check until
; 2167 :             the condition is reset or until the cartridge is unloaded.
; 2168 :             The condition that caused the fencing to occur has already
; 2169 :             been indicated by the previous unit check and associated sense
; 2170 :             data.
; 2171 :             */
; 2172 : 
; 2173 :             /* Calculate residual byte count */
; 2174 :             RESIDUAL_CALC (2);

  04baa	c7 44 24 70 02
	00 00 00	 mov	 DWORD PTR len$[rsp], 2
  04bb2	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04bb6	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04bbd	73 10		 jae	 SHORT $LN590@tapedev_ex
  04bbf	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  04bc6	89 84 24 6c 01
	00 00		 mov	 DWORD PTR tv2222[rsp], eax
  04bcd	eb 0b		 jmp	 SHORT $LN591@tapedev_ex
$LN590@tapedev_ex:
  04bcf	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04bd3	89 84 24 6c 01
	00 00		 mov	 DWORD PTR tv2222[rsp], eax
$LN591@tapedev_ex:
  04bda	8b 84 24 6c 01
	00 00		 mov	 eax, DWORD PTR tv2222[rsp]
  04be1	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  04be5	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  04be9	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  04bf0	2b c8		 sub	 ecx, eax
  04bf2	8b c1		 mov	 eax, ecx
  04bf4	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  04bfc	89 01		 mov	 DWORD PTR [rcx], eax
  04bfe	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04c02	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04c09	73 0b		 jae	 SHORT $LN269@tapedev_ex
  04c0b	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  04c13	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN269@tapedev_ex:

; 2175 : 
; 2176 :             /* Control information length must be 2 bytes long */
; 2177 :             if (count < len)

  04c16	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04c1a	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04c21	73 28		 jae	 SHORT $LN270@tapedev_ex

; 2178 :             {
; 2179 :               build_senseX(TAPE_BSENSE_BADCOMMAND,dev,unitstat,code);

  04c23	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04c2c	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04c34	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04c3c	b9 04 00 00 00	 mov	 ecx, 4
  04c41	e8 00 00 00 00	 call	 build_senseX

; 2180 :               break;

  04c46	e9 04 07 00 00	 jmp	 $LN29@tapedev_ex
$LN270@tapedev_ex:

; 2181 :             }
; 2182 : 
; 2183 :             dev->fenced = 0;        // (as requested!)

  04c4b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04c53	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  04c59	83 e0 fe	 and	 eax, -2			; fffffffeH
  04c5c	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04c64	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 2184 : 
; 2185 :             build_senseX(TAPE_BSENSE_STATUSONLY,dev,unitstat,code);

  04c6a	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04c73	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04c7b	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04c83	b9 0d 00 00 00	 mov	 ecx, 13
  04c88	e8 00 00 00 00	 call	 build_senseX

; 2186 :             break;

  04c8d	e9 bd 06 00 00	 jmp	 $LN29@tapedev_ex
$LN271@tapedev_ex:

; 2187 :         }
; 2188 : 
; 2189 :         /*-----------------------------------------------------------*/
; 2190 :         /* Pin Device                                                */
; 2191 :         /* 0xA100nn                                                  */
; 2192 :         /*-----------------------------------------------------------*/
; 2193 :         case PSF_ORDER_PIN_DEV:
; 2194 :         {
; 2195 :             /* Calculate residual byte count */
; 2196 :             RESIDUAL_CALC (3);

  04c92	c7 44 24 70 03
	00 00 00	 mov	 DWORD PTR len$[rsp], 3
  04c9a	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04c9e	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04ca5	73 10		 jae	 SHORT $LN592@tapedev_ex
  04ca7	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  04cae	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv2238[rsp], eax
  04cb5	eb 0b		 jmp	 SHORT $LN593@tapedev_ex
$LN592@tapedev_ex:
  04cb7	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04cbb	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv2238[rsp], eax
$LN593@tapedev_ex:
  04cc2	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv2238[rsp]
  04cc9	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  04ccd	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  04cd1	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  04cd8	2b c8		 sub	 ecx, eax
  04cda	8b c1		 mov	 eax, ecx
  04cdc	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  04ce4	89 01		 mov	 DWORD PTR [rcx], eax
  04ce6	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04cea	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04cf1	73 0b		 jae	 SHORT $LN272@tapedev_ex
  04cf3	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  04cfb	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN272@tapedev_ex:

; 2197 : 
; 2198 :             /* Control information length must be 3 bytes long
; 2199 :                and the parameter byte must not be invalid */
; 2200 :             if ( (count < len)
; 2201 :                   || ((parm != PSF_ACTION_PIN_CU0) &&

  04cfe	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04d02	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04d09	72 13		 jb	 SHORT $LN274@tapedev_ex
  04d0b	0f b6 44 24 7c	 movzx	 eax, BYTE PTR parm$1[rsp]
  04d10	85 c0		 test	 eax, eax
  04d12	74 32		 je	 SHORT $LN273@tapedev_ex
  04d14	0f b6 44 24 7c	 movzx	 eax, BYTE PTR parm$1[rsp]
  04d19	83 f8 01	 cmp	 eax, 1
  04d1c	74 28		 je	 SHORT $LN273@tapedev_ex
$LN274@tapedev_ex:

; 2202 :                       (parm != PSF_ACTION_PIN_CU1))
; 2203 :             )
; 2204 :             {
; 2205 :                 build_senseX(TAPE_BSENSE_BADCOMMAND,dev,unitstat,code);

  04d1e	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04d27	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04d2f	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04d37	b9 04 00 00 00	 mov	 ecx, 4
  04d3c	e8 00 00 00 00	 call	 build_senseX

; 2206 :                 break;

  04d41	e9 09 06 00 00	 jmp	 $LN29@tapedev_ex
$LN273@tapedev_ex:

; 2207 :             }
; 2208 : 
; 2209 :             /* Not currently supported; treat as no-op */
; 2210 :             build_senseX(TAPE_BSENSE_STATUSONLY,dev,unitstat,code);

  04d46	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04d4f	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04d57	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04d5f	b9 0d 00 00 00	 mov	 ecx, 13
  04d64	e8 00 00 00 00	 call	 build_senseX

; 2211 :             break;

  04d69	e9 e1 05 00 00	 jmp	 $LN29@tapedev_ex
$LN275@tapedev_ex:

; 2212 :         }
; 2213 : 
; 2214 :         /*-----------------------------------------------------------*/
; 2215 :         /* Unpin Device                                              */
; 2216 :         /* 0xA200                                                    */
; 2217 :         /*-----------------------------------------------------------*/
; 2218 :         case PSF_ORDER_UNPIN_DEV:
; 2219 :         {
; 2220 :             /* Calculate residual byte count */
; 2221 :             RESIDUAL_CALC (2);

  04d6e	c7 44 24 70 02
	00 00 00	 mov	 DWORD PTR len$[rsp], 2
  04d76	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04d7a	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04d81	73 10		 jae	 SHORT $LN594@tapedev_ex
  04d83	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  04d8a	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv2255[rsp], eax
  04d91	eb 0b		 jmp	 SHORT $LN595@tapedev_ex
$LN594@tapedev_ex:
  04d93	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04d97	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv2255[rsp], eax
$LN595@tapedev_ex:
  04d9e	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv2255[rsp]
  04da5	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  04da9	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  04dad	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  04db4	2b c8		 sub	 ecx, eax
  04db6	8b c1		 mov	 eax, ecx
  04db8	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  04dc0	89 01		 mov	 DWORD PTR [rcx], eax
  04dc2	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04dc6	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04dcd	73 0b		 jae	 SHORT $LN276@tapedev_ex
  04dcf	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  04dd7	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN276@tapedev_ex:

; 2222 : 
; 2223 :             /* Control information length must be 2 bytes long */
; 2224 :             if (count < len)

  04dda	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04dde	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04de5	73 28		 jae	 SHORT $LN277@tapedev_ex

; 2225 :             {
; 2226 :                 build_senseX(TAPE_BSENSE_BADCOMMAND,dev,unitstat,code);

  04de7	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04df0	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04df8	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04e00	b9 04 00 00 00	 mov	 ecx, 4
  04e05	e8 00 00 00 00	 call	 build_senseX

; 2227 :                 break;

  04e0a	e9 40 05 00 00	 jmp	 $LN29@tapedev_ex
$LN277@tapedev_ex:

; 2228 :             }
; 2229 : 
; 2230 :             /* Not currently supported; treat as no-op */
; 2231 :             build_senseX(TAPE_BSENSE_STATUSONLY,dev,unitstat,code);

  04e0f	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04e18	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04e20	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04e28	b9 0d 00 00 00	 mov	 ecx, 13
  04e2d	e8 00 00 00 00	 call	 build_senseX

; 2232 :             break;

  04e32	e9 18 05 00 00	 jmp	 $LN29@tapedev_ex
$LN278@tapedev_ex:

; 2233 :         }
; 2234 : 
; 2235 :         /*-----------------------------------------------------------*/
; 2236 :         /* Prepare for Read Subsystem Data                           */
; 2237 :         /* 0x180000000000mm00iiiiiiii                                */
; 2238 :         /*-----------------------------------------------------------*/
; 2239 :         case PSF_ORDER_PRSD:
; 2240 :         {
; 2241 :             /*       GA32-0127 IBM 3490E Hardware Reference
; 2242 : 
; 2243 :             Prepare for Read Subsystem Data (X'18')
; 2244 : 
; 2245 :             The order transfers 12 bytes of data used for processing a
; 2246 :             Read Subsystem Data command that immediately follows the
; 2247 :             Perform Subsystem Function command specifying this order in
; 2248 :             the command chain.  If a Read Subsystem Data command is not
; 2249 :             issued as the next command in the command chain, the data is
; 2250 :             discarded and no other action is performed.  If a Read Subsystem
; 2251 :             Data command is issued as the next command in the command chain,
; 2252 :             the data determines what type of information is presented to
; 2253 :             the Read Subsystem Data command.
; 2254 : 
; 2255 :             When the Prepare for Subsystem Data order with the attention
; 2256 :             message sub-order is specified in a Perform Subsystem Function
; 2257 :             command, the command is treated as a global command.  If the
; 2258 :             command is issued while the Special Intercept Condition is
; 2259 :             active, a unit check status is presented with the associated
; 2260 :             sense data indicating ERA code 53.
; 2261 : 
; 2262 :             The Prepare for Read Subsystem Data order requires an order
; 2263 :             byte (byte 0), a flag byte (byte 1), and parameter bytes.
; 2264 :             The flag byte is set to 0. The parameter bytes are defined
; 2265 :             as follows:
; 2266 : 
; 2267 :              ________ ___________________________________________________
; 2268 :             | Byte   | Description                                       |
; 2269 :             |________|___________________________________________________|
; 2270 :             | 2-5    | Reserved (X'00')                                  |
; 2271 :             |________|___________________________________________________|
; 2272 :             | 6      | Attention Message (X'03')                         |
; 2273 :             |        |                                                   |
; 2274 :             |        | When active and bytes 8-11 contain X'00000000',   |
; 2275 :             |        | the program is requesting the control unit        |
; 2276 :             |        | to present any pending attention message or       |
; 2277 :             |        | unsolicited unit check condition that is          |
; 2278 :             |        | associated with the addressed device-path pair.   |
; 2279 :             |        | If there is no message or unit check condition    |
; 2280 :             |        | present, the subsystem displays the "No Message"  |
; 2281 :             |        | message.                                          |
; 2282 :             |        |                                                   |
; 2283 :             |        | When active and bytes 8-11 contain anything       |
; 2284 :             |        | other than X'00000000', the program is re-        |
; 2285 :             |        | questing the control unit to present the status   |
; 2286 :             |        | of the asynchronous operation as identified by    |
; 2287 :             |        | the contents of bytes 8-11.                       |
; 2288 :             |________|___________________________________________________|
; 2289 :             | 7      | Reserved (X'00')                                  |
; 2290 :             |________|___________________________________________________|
; 2291 :             | 8-11   | Message ID                                        |
; 2292 :             |________|___________________________________________________|
; 2293 :             */
; 2294 : 
; 2295 :             /* Calculate residual byte count */
; 2296 :             RESIDUAL_CALC (12);

  04e37	c7 44 24 70 0c
	00 00 00	 mov	 DWORD PTR len$[rsp], 12
  04e3f	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04e43	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04e4a	73 10		 jae	 SHORT $LN596@tapedev_ex
  04e4c	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  04e53	89 84 24 78 01
	00 00		 mov	 DWORD PTR tv2268[rsp], eax
  04e5a	eb 0b		 jmp	 SHORT $LN597@tapedev_ex
$LN596@tapedev_ex:
  04e5c	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04e60	89 84 24 78 01
	00 00		 mov	 DWORD PTR tv2268[rsp], eax
$LN597@tapedev_ex:
  04e67	8b 84 24 78 01
	00 00		 mov	 eax, DWORD PTR tv2268[rsp]
  04e6e	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  04e72	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  04e76	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  04e7d	2b c8		 sub	 ecx, eax
  04e7f	8b c1		 mov	 eax, ecx
  04e81	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  04e89	89 01		 mov	 DWORD PTR [rcx], eax
  04e8b	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04e8f	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04e96	73 0b		 jae	 SHORT $LN279@tapedev_ex
  04e98	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  04ea0	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN279@tapedev_ex:

; 2297 : 
; 2298 :             /* Control information length must be 12 bytes long the */
; 2299 :             /* parameter must be valid and all reserved bytes zero. */
; 2300 :             /* Also note that the only sub-order we support is the  */
; 2301 :             /* only sub-order that is defined: attention message.   */
; 2302 :             if (0
; 2303 :                 || (count < len)
; 2304 :                 || (iobuf[6] != PSF_ACTION_SSD_ATNMSG)
; 2305 :                 || (memcmp( &iobuf[2], "\00\00\00\00", 4 ) != 0)
; 2306 :                 || (iobuf[7] != 0x00)

  04ea3	33 c0		 xor	 eax, eax
  04ea5	85 c0		 test	 eax, eax
  04ea7	75 70		 jne	 SHORT $LN281@tapedev_ex
  04ea9	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  04ead	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  04eb4	72 63		 jb	 SHORT $LN281@tapedev_ex
  04eb6	b8 01 00 00 00	 mov	 eax, 1
  04ebb	48 6b c0 06	 imul	 rax, rax, 6
  04ebf	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  04ec7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  04ecb	83 f8 03	 cmp	 eax, 3
  04ece	75 49		 jne	 SHORT $LN281@tapedev_ex
  04ed0	b8 01 00 00 00	 mov	 eax, 1
  04ed5	48 6b c0 02	 imul	 rax, rax, 2
  04ed9	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  04ee1	48 03 c8	 add	 rcx, rax
  04ee4	48 8b c1	 mov	 rax, rcx
  04ee7	41 b8 04 00 00
	00		 mov	 r8d, 4
  04eed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169746
  04ef4	48 8b c8	 mov	 rcx, rax
  04ef7	e8 00 00 00 00	 call	 memcmp
  04efc	85 c0		 test	 eax, eax
  04efe	75 19		 jne	 SHORT $LN281@tapedev_ex
  04f00	b8 01 00 00 00	 mov	 eax, 1
  04f05	48 6b c0 07	 imul	 rax, rax, 7
  04f09	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  04f11	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  04f15	85 c0		 test	 eax, eax
  04f17	74 28		 je	 SHORT $LN280@tapedev_ex
$LN281@tapedev_ex:

; 2307 :             )
; 2308 :             {
; 2309 :                 build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  04f19	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04f22	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04f2a	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04f32	b9 04 00 00 00	 mov	 ecx, 4
  04f37	e8 00 00 00 00	 call	 build_senseX

; 2310 :                 break;

  04f3c	e9 0e 04 00 00	 jmp	 $LN29@tapedev_ex
$LN280@tapedev_ex:

; 2311 :             }
; 2312 : 
; 2313 :             /* If the Special Intercept Condition is active, present
; 2314 :                unit check status with sense indicating ERA code 53 */
; 2315 :             if (dev->SIC_active)

  04f41	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04f49	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  04f4f	c1 e8 03	 shr	 eax, 3
  04f52	83 e0 01	 and	 eax, 1
  04f55	85 c0		 test	 eax, eax
  04f57	74 47		 je	 SHORT $LN282@tapedev_ex

; 2316 :             {
; 2317 :                 build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  04f59	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  04f62	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  04f6a	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  04f72	b9 04 00 00 00	 mov	 ecx, 4
  04f77	e8 00 00 00 00	 call	 build_senseX

; 2318 :                 dev->SIC_active = 0;

  04f7c	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04f84	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  04f8a	83 e0 f7	 and	 eax, -9			; fffffff7H
  04f8d	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04f95	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 2319 :                 break;

  04f9b	e9 af 03 00 00	 jmp	 $LN29@tapedev_ex
$LN282@tapedev_ex:

; 2320 :             }
; 2321 : 
; 2322 :             // Build the requested Subsystem Data...
; 2323 : 
; 2324 :             // PROGRAMMING NOTE: note that we build the requested data
; 2325 :             // directly in the channel i/o buffer itself (iobuf). This
; 2326 :             // relieves us from having to allocate/maintain a separate
; 2327 :             // buffer for it somewhere, and relieves the READ SUBSYSTEM
; 2328 :             // DATA command (0x3E) from having to copy the data into
; 2329 :             // the channel buffer from somewhere. Instead it can return
; 2330 :             // immediately since the data is already in the buffer. (See
; 2331 :             // the 0x3E: READ SUBSYSTEM DATA command for information).
; 2332 : 
; 2333 :             // PROGRAMMING NOTE: since at the moment we don't support
; 2334 :             // asynchronous i/o (all of our i/o's are synchronous), we
; 2335 :             // return either a Format x'00' (No Message) response if the
; 2336 :             // Message Id they specified was x'00000000' or, if they
; 2337 :             // requested the status for a specific Message Id, a format
; 2338 :             // x'02' (Message Id Status) response with x'00' Operation
; 2339 :             // Completion Status (I/O Completed).
; 2340 : 
; 2341 :             if (memcmp( &iobuf[8], "\00\00\00\00", 4 ) == 0)

  04fa0	b8 01 00 00 00	 mov	 eax, 1
  04fa5	48 6b c0 08	 imul	 rax, rax, 8
  04fa9	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  04fb1	48 03 c8	 add	 rcx, rax
  04fb4	48 8b c1	 mov	 rax, rcx
  04fb7	41 b8 04 00 00
	00		 mov	 r8d, 4
  04fbd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169750
  04fc4	48 8b c8	 mov	 rcx, rax
  04fc7	e8 00 00 00 00	 call	 memcmp
  04fcc	85 c0		 test	 eax, eax
  04fce	0f 85 b3 00 00
	00		 jne	 $LN283@tapedev_ex

; 2342 :             {
; 2343 :                 /* Format x'00': "No Message" */
; 2344 :                 dev->tapssdlen = 9;                     // (Length)

  04fd4	b8 09 00 00 00	 mov	 eax, 9
  04fd9	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04fe1	66 89 81 20 10
	00 00		 mov	 WORD PTR [rcx+4128], ax

; 2345 :                 STORE_HW ( &iobuf[0], dev->tapssdlen ); // (Length = 9 bytes)

  04fe8	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04ff0	0f b7 88 20 10
	00 00		 movzx	 ecx, WORD PTR [rax+4128]
  04ff7	e8 00 00 00 00	 call	 _byteswap_ushort
  04ffc	b9 01 00 00 00	 mov	 ecx, 1
  05001	48 6b c9 00	 imul	 rcx, rcx, 0
  05005	48 8b 94 24 c8
	07 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  0500d	48 03 d1	 add	 rdx, rcx
  05010	48 8b ca	 mov	 rcx, rdx
  05013	0f b7 d0	 movzx	 edx, ax
  05016	e8 00 00 00 00	 call	 store_hw_noswap

; 2346 :                 iobuf[2] = 0x00;                        // (Format = x'00': "No Message")

  0501b	b8 01 00 00 00	 mov	 eax, 1
  05020	48 6b c0 02	 imul	 rax, rax, 2
  05024	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0502c	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 2347 :                 iobuf[3] = 0x00;                        // (Message Code = none)

  05030	b8 01 00 00 00	 mov	 eax, 1
  05035	48 6b c0 03	 imul	 rax, rax, 3
  05039	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  05041	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 2348 :                 memcpy( &iobuf[4], &iobuf[8], 4 );      // (Message Id = same as requested)

  05045	b8 01 00 00 00	 mov	 eax, 1
  0504a	48 6b c0 08	 imul	 rax, rax, 8
  0504e	b9 01 00 00 00	 mov	 ecx, 1
  05053	48 6b c9 04	 imul	 rcx, rcx, 4
  05057	48 8b 94 24 c8
	07 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  0505f	48 8b bc 24 c8
	07 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  05067	8b 04 07	 mov	 eax, DWORD PTR [rdi+rax]
  0506a	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 2349 :                 iobuf[8] = 0x00;                        // (Flags = none)

  0506d	b8 01 00 00 00	 mov	 eax, 1
  05072	48 6b c0 08	 imul	 rax, rax, 8
  05076	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0507e	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 2350 :             }

  05082	e9 c3 00 00 00	 jmp	 $LN284@tapedev_ex
$LN283@tapedev_ex:

; 2351 :             else
; 2352 :             {
; 2353 :                 /* Format x'02': "Message Id Status" */
; 2354 :                 dev->tapssdlen = 10;                    // (Length)

  05087	b8 0a 00 00 00	 mov	 eax, 10
  0508c	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05094	66 89 81 20 10
	00 00		 mov	 WORD PTR [rcx+4128], ax

; 2355 :                 STORE_HW ( &iobuf[0], dev->tapssdlen ); // (Length = 10 bytes)

  0509b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  050a3	0f b7 88 20 10
	00 00		 movzx	 ecx, WORD PTR [rax+4128]
  050aa	e8 00 00 00 00	 call	 _byteswap_ushort
  050af	b9 01 00 00 00	 mov	 ecx, 1
  050b4	48 6b c9 00	 imul	 rcx, rcx, 0
  050b8	48 8b 94 24 c8
	07 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  050c0	48 03 d1	 add	 rdx, rcx
  050c3	48 8b ca	 mov	 rcx, rdx
  050c6	0f b7 d0	 movzx	 edx, ax
  050c9	e8 00 00 00 00	 call	 store_hw_noswap

; 2356 :                 iobuf[2] = 0x02;                        // (Format = x'01: Message Id Status)

  050ce	b8 01 00 00 00	 mov	 eax, 1
  050d3	48 6b c0 02	 imul	 rax, rax, 2
  050d7	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  050df	c6 04 01 02	 mov	 BYTE PTR [rcx+rax], 2

; 2357 :                 iobuf[3] = 0x01;                        // (Message Code = Delayed Response)

  050e3	b8 01 00 00 00	 mov	 eax, 1
  050e8	48 6b c0 03	 imul	 rax, rax, 3
  050ec	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  050f4	c6 04 01 01	 mov	 BYTE PTR [rcx+rax], 1

; 2358 :                 memcpy( &iobuf[4], &iobuf[8], 4 );      // (Message Id = same as requested)

  050f8	b8 01 00 00 00	 mov	 eax, 1
  050fd	48 6b c0 08	 imul	 rax, rax, 8
  05101	b9 01 00 00 00	 mov	 ecx, 1
  05106	48 6b c9 04	 imul	 rcx, rcx, 4
  0510a	48 8b 94 24 c8
	07 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  05112	48 8b bc 24 c8
	07 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  0511a	8b 04 07	 mov	 eax, DWORD PTR [rdi+rax]
  0511d	89 04 0a	 mov	 DWORD PTR [rdx+rcx], eax

; 2359 :                 iobuf[8] = 0x00;                        // (Reserved)

  05120	b8 01 00 00 00	 mov	 eax, 1
  05125	48 6b c0 08	 imul	 rax, rax, 8
  05129	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  05131	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 2360 :                 iobuf[9] = 0x00;                        // (Status = "I/O Completed")

  05135	b8 01 00 00 00	 mov	 eax, 1
  0513a	48 6b c0 09	 imul	 rax, rax, 9
  0513e	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  05146	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN284@tapedev_ex:

; 2361 :             }
; 2362 :             break;

  0514a	e9 00 02 00 00	 jmp	 $LN29@tapedev_ex
$LN285@tapedev_ex:

; 2363 : 
; 2364 :         } /* End case PSF_ORDER_PRSD */
; 2365 : 
; 2366 :         /*-----------------------------------------------------------*/
; 2367 :         /* Set Special Intercept Condition                           */
; 2368 :         /* 0x1B00                                                    */
; 2369 :         /*-----------------------------------------------------------*/
; 2370 :         case PSF_ORDER_SSIC:
; 2371 :         {
; 2372 :             /*       GA32-0127 IBM 3490E Hardware Reference
; 2373 : 
; 2374 :             Set Special Intercept Condition (X'1B')
; 2375 : 
; 2376 :             The order controls the activation or deactivation of the
; 2377 :             special intercept condition associated with the device-path
; 2378 :             group pair to which the command is issued.  The order is
; 2379 :             supported by the model if byte 8 bit 4 is active in the data
; 2380 :             presented to the Read Device Characteristics command.  The
; 2381 :             order requires an order byte (byte 0) and a flag byte (byte 1).
; 2382 :             The flag byte is set to 0.
; 2383 : 
; 2384 :             When processed, the command activates the special intercept
; 2385 :             condition for the device on each channel path that has the
; 2386 :             same path group ID as the issuing channel path.  The path
; 2387 :             group ID is considered valid on a given channel path if it
; 2388 :             is valid for any device on the channel path.  The special
; 2389 :             intercept condition controls the presentation of attention-
; 2390 :             intercept status.  The sense data associated with the
; 2391 :             attention-intercept status indicates ERA code 57.  The special
; 2392 :             intercept condition also causes the next global command
; 2393 :             issued to the device-path group pair to be presented unit check
; 2394 :             status with associated sense data indicating ERA code 53.
; 2395 : 
; 2396 :             The special intercept condition is deactivated on a channel
; 2397 :             path if a reset signal is received on the channel path.  The
; 2398 :             special intercept condition is deactivated for the device-group
; 2399 :             pair if a global command is presented unit check status with
; 2400 :             associated sense data indicating ERA code 53, or if the last
; 2401 :             path in the associated set of channel paths (that is, with the
; 2402 :             same valid path group ID) is reset.
; 2403 : 
; 2404 :             After the Set Special Intercept Condition order is specified
; 2405 :             in a Perform Subsystem Function command, the command is treated
; 2406 :             as a global command. If the command is issued while the special
; 2407 :             intercept condition is active, a unit check status is presented
; 2408 :             with associated sense data indicating ERA code 53.
; 2409 : 
; 2410 :             If a command is issued to a channel path without a valid path
; 2411 :             group ID (that is, all devices in the reset state), unit check
; 2412 :             status is presented with associated sense data indicating ERA
; 2413 :             code 27.
; 2414 :             */
; 2415 : 
; 2416 :             /* Command reject if Special Intercept Condition not supported */
; 2417 :             if (!SIC_SUPPORTED())

  0514f	b8 01 00 00 00	 mov	 eax, 1
  05154	48 6b c0 00	 imul	 rax, rax, 0
  05158	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05160	48 8d 84 01 72
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1394]
  05168	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  0516d	48 8b c8	 mov	 rcx, rax
  05170	e8 00 00 00 00	 call	 is_tape_feat
  05175	0f b6 c0	 movzx	 eax, al
  05178	85 c0		 test	 eax, eax
  0517a	75 28		 jne	 SHORT $LN286@tapedev_ex

; 2418 :             {
; 2419 :                 build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  0517c	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05185	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0518d	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05195	b9 04 00 00 00	 mov	 ecx, 4
  0519a	e8 00 00 00 00	 call	 build_senseX

; 2420 :                 break;

  0519f	e9 ab 01 00 00	 jmp	 $LN29@tapedev_ex
$LN286@tapedev_ex:

; 2421 :             }
; 2422 : 
; 2423 :             /* If the command is issued while the Special Intercept  */
; 2424 :             /* Condition is active, a unit check status is presented */
; 2425 :             /* with associated sense data indicating ERA code 53.    */
; 2426 :             if (dev->SIC_active)        // (already active?)

  051a4	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  051ac	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  051b2	c1 e8 03	 shr	 eax, 3
  051b5	83 e0 01	 and	 eax, 1
  051b8	85 c0		 test	 eax, eax
  051ba	74 47		 je	 SHORT $LN287@tapedev_ex

; 2427 :             {
; 2428 :                 build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  051bc	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  051c5	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  051cd	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  051d5	b9 04 00 00 00	 mov	 ecx, 4
  051da	e8 00 00 00 00	 call	 build_senseX

; 2429 :                 dev->SIC_active = 0;      // (reset after UC)

  051df	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  051e7	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  051ed	83 e0 f7	 and	 eax, -9			; fffffff7H
  051f0	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  051f8	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 2430 :                 break;

  051fe	e9 4c 01 00 00	 jmp	 $LN29@tapedev_ex
$LN287@tapedev_ex:

; 2431 :             }
; 2432 : 
; 2433 :             /* Activate Special Intercept Condition */
; 2434 :             dev->SIC_active = 1;

  05203	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0520b	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  05211	83 c8 08	 or	 eax, 8
  05214	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0521c	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 2435 :             break;

  05222	e9 28 01 00 00	 jmp	 $LN29@tapedev_ex
$LN288@tapedev_ex:

; 2436 : 
; 2437 :         } /* End case PSF_ORDER_SSIC */
; 2438 : 
; 2439 :         /*-----------------------------------------------------------*/
; 2440 :         /* Message Not Supported                                     */
; 2441 :         /* 0x1C00xxccnnnn0000iiiiii...                               */
; 2442 :         /*-----------------------------------------------------------*/
; 2443 :         case PSF_ORDER_MNS:
; 2444 :         {
; 2445 :             /*       GA32-0127 IBM 3490E Hardware Reference
; 2446 : 
; 2447 :             Message Not Supported (X'1C')
; 2448 : 
; 2449 :             The order transfers 20 bytes of data that identify the host
; 2450 :             that does not support a prior attention message containing
; 2451 :             the Notify Nonsupport flag. The order requires an order byte
; 2452 :             (byte 0), a flag byte (byte 1), and parameter bytes.  The
; 2453 :             flag byte is set to 0.  The parameter bytes are defined as
; 2454 :             follows:
; 2455 : 
; 2456 :              ________ ________ ____________________________________________
; 2457 :             | Byte   | Value  | Description                                |
; 2458 :             |________|________|____________________________________________|
; 2459 :             | 2      |        | Response Code                              |
; 2460 :             |________|________|____________________________________________|
; 2461 :             |        | 0      | Reserved (invalid).                        |
; 2462 :             |________|________|____________________________________________|
; 2463 :             |        | 1      | Message rejected.  Unknown format.         |
; 2464 :             |________|________|____________________________________________|
; 2465 :             |        | 2      | Message rejected.  Function not supported. |
; 2466 :             |________|________|____________________________________________|
; 2467 :             |        | 3-255  | Reserved (invalid).                        |
; 2468 :             |________|________|____________________________________________|
; 2469 :             | 3      |        | Channel Path ID (CHPID)                    |
; 2470 :             |        |        |                                            |
; 2471 :             |        |        | The byte identifies the channel path that  |
; 2472 :             |        |        | received the attention message.            |
; 2473 :             |________|________|____________________________________________|
; 2474 :             | 4, 5   |        | Device Number                              |
; 2475 :             |        |        |                                            |
; 2476 :             |        |        | The bytes identify the device number of    |
; 2477 :             |        |        | the device that received the attention     |
; 2478 :             |        |        | message.                                   |
; 2479 :             |________|________|____________________________________________|
; 2480 :             | 6, 7   |        | Reserved (must be X'00').                  |
; 2481 :             |________|________|____________________________________________|
; 2482 :             | 8-11   |        | Message ID                                 |
; 2483 :             |        |        |                                            |
; 2484 :             |        |        | The field contains the message ID that     |
; 2485 :             |        |        | was presented to the host in the attention |
; 2486 :             |        |        | message.                                   |
; 2487 :             |________|________|____________________________________________|
; 2488 :             | 12-19  |        | System ID                                  |
; 2489 :             |        |        |                                            |
; 2490 :             |        |        | The field contains an 8-byte system ID     |
; 2491 :             |        |        | that identifies the host or host partition |
; 2492 :             |        |        | responding to the attention message.       |
; 2493 :             |________|________|____________________________________________|
; 2494 :             */
; 2495 : 
; 2496 :             // PROGRAMMING NOTE: none of our responses to the Perform Sub-
; 2497 :             // System Function order Attention Message sub-order (see the
; 2498 :             // PSF_ORDER_PRSD case further above) support any flags. Thus
; 2499 :             // because we never set/request the "Notify Nonsupport" flag
; 2500 :             // in our Attention Message sub-order response, the host should
; 2501 :             // never actually ever be issuing this particular order of the
; 2502 :             // Perform Subsystem Functon command since it shouldn't be
; 2503 :             // trying to tell us what we never asked it to. Nevertheless
; 2504 :             // we should probably support it anyway just in case it does
; 2505 :             // by treating it as a no-op (as long as it's valid of course).
; 2506 : 
; 2507 :             /* Check for valid data (Note: we don't bother validating the
; 2508 :                Channel Path ID, Device Number, Message ID or System ID) */
; 2509 :             if (0
; 2510 :             //  ||  flag != 0x00                      // (flag byte) (note: already checked)
; 2511 :                 || (parm != 0x01 && parm != 0x02)     // (response code)
; 2512 :                 ||  iobuf[6] != 0x00                  // (reserved)
; 2513 :                 ||  iobuf[7] != 0x00                  // (reserved)

  05227	33 c0		 xor	 eax, eax
  05229	85 c0		 test	 eax, eax
  0522b	75 46		 jne	 SHORT $LN290@tapedev_ex
  0522d	0f b6 44 24 7c	 movzx	 eax, BYTE PTR parm$1[rsp]
  05232	83 f8 01	 cmp	 eax, 1
  05235	74 0a		 je	 SHORT $LN291@tapedev_ex
  05237	0f b6 44 24 7c	 movzx	 eax, BYTE PTR parm$1[rsp]
  0523c	83 f8 02	 cmp	 eax, 2
  0523f	75 32		 jne	 SHORT $LN290@tapedev_ex
$LN291@tapedev_ex:
  05241	b8 01 00 00 00	 mov	 eax, 1
  05246	48 6b c0 06	 imul	 rax, rax, 6
  0524a	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  05252	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05256	85 c0		 test	 eax, eax
  05258	75 19		 jne	 SHORT $LN290@tapedev_ex
  0525a	b8 01 00 00 00	 mov	 eax, 1
  0525f	48 6b c0 07	 imul	 rax, rax, 7
  05263	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0526b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0526f	85 c0		 test	 eax, eax
  05271	74 28		 je	 SHORT $LN289@tapedev_ex
$LN290@tapedev_ex:

; 2514 :             )
; 2515 :             {
; 2516 :                 build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  05273	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0527c	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05284	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0528c	b9 04 00 00 00	 mov	 ecx, 4
  05291	e8 00 00 00 00	 call	 build_senseX

; 2517 :                 break;

  05296	e9 b4 00 00 00	 jmp	 $LN29@tapedev_ex
$LN289@tapedev_ex:

; 2518 :             }
; 2519 : 
; 2520 :             /* Calculate residual byte count */
; 2521 :             RESIDUAL_CALC (20);

  0529b	c7 44 24 70 14
	00 00 00	 mov	 DWORD PTR len$[rsp], 20
  052a3	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  052a7	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  052ae	73 10		 jae	 SHORT $LN598@tapedev_ex
  052b0	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  052b7	89 84 24 7c 01
	00 00		 mov	 DWORD PTR tv2411[rsp], eax
  052be	eb 0b		 jmp	 SHORT $LN599@tapedev_ex
$LN598@tapedev_ex:
  052c0	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  052c4	89 84 24 7c 01
	00 00		 mov	 DWORD PTR tv2411[rsp], eax
$LN599@tapedev_ex:
  052cb	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv2411[rsp]
  052d2	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  052d6	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  052da	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  052e1	2b c8		 sub	 ecx, eax
  052e3	8b c1		 mov	 eax, ecx
  052e5	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  052ed	89 01		 mov	 DWORD PTR [rcx], eax
  052ef	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  052f3	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  052fa	73 0b		 jae	 SHORT $LN292@tapedev_ex
  052fc	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  05304	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN292@tapedev_ex:

; 2522 : 
; 2523 :             /* Treat as No-op */
; 2524 :             build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  05307	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05310	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05318	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05320	b9 0d 00 00 00	 mov	 ecx, 13
  05325	e8 00 00 00 00	 call	 build_senseX

; 2525 :             break;

  0532a	eb 23		 jmp	 SHORT $LN29@tapedev_ex
$LN293@tapedev_ex:

; 2526 : 
; 2527 :         } /* End case PSF_ORDER_MNS */
; 2528 : 
; 2529 :         /*-----------------------------------------------------------*/
; 2530 :         /* Unknown/Supported PSF order                               */
; 2531 :         /*-----------------------------------------------------------*/
; 2532 :         default:
; 2533 :         {
; 2534 :             build_senseX(TAPE_BSENSE_BADCOMMAND,dev,unitstat,code);

  0532c	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05335	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0533d	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05345	b9 04 00 00 00	 mov	 ecx, 4
  0534a	e8 00 00 00 00	 call	 build_senseX
$LN29@tapedev_ex:

; 2535 :             break;
; 2536 :         }
; 2537 : 
; 2538 :         } /* End PSF switch (order) */
; 2539 : 
; 2540 :         break;

  0534f	e9 75 15 00 00	 jmp	 $LN13@tapedev_ex
$LN294@tapedev_ex:

; 2541 : 
; 2542 :     } /* End case 0x77: PERFORM SUBSYSTEM FUNCTION */
; 2543 : 
; 2544 :     /*---------------------------------------------------------------*/
; 2545 :     /* DATA SECURITY ERASE                                           */
; 2546 :     /*---------------------------------------------------------------*/
; 2547 :     case 0x97:
; 2548 :     {
; 2549 :         /*      GA32-0127 IBM 3490E Hardware Reference
; 2550 : 
; 2551 :         Data Security Erase (X'97')
; 2552 : 
; 2553 :         The Data Security Erase command writes a random pattern
; 2554 :         from the position of the tape where the command is issued
; 2555 :         to the physical end of tape.
; 2556 : 
; 2557 :         The Data Security Erase command must be command-chained
; 2558 :         from an Erase Gap command.  Most operating systems signal
; 2559 :         that the channel program is complete when the channel ending
; 2560 :         status is returned for the final command in the chain.  If
; 2561 :         the Data Security Erase command is the last command in a
; 2562 :         channel program, another command should be chained after the
; 2563 :         Data Security Erase command.  (The No-Operation command is
; 2564 :         appropriate.)  This practice ensures that any error status
; 2565 :         returns with device ending status after the Data Security
; 2566 :         Erase command is completed.
; 2567 :         */
; 2568 : 
; 2569 :         /* Command reject if not chained from Erase Gap command */
; 2570 :         if (!((chained & CCW_FLAGS_CC) && 0x17 == prevcode))

  05354	0f b6 84 24 a8
	07 00 00	 movzx	 eax, BYTE PTR chained$[rsp]
  0535c	83 e0 40	 and	 eax, 64			; 00000040H
  0535f	85 c0		 test	 eax, eax
  05361	74 0d		 je	 SHORT $LN296@tapedev_ex
  05363	0f b6 84 24 b8
	07 00 00	 movzx	 eax, BYTE PTR prevcode$[rsp]
  0536b	83 f8 17	 cmp	 eax, 23
  0536e	74 28		 je	 SHORT $LN295@tapedev_ex
$LN296@tapedev_ex:

; 2571 :         {
; 2572 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  05370	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05379	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05381	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05389	b9 04 00 00 00	 mov	 ecx, 4
  0538e	e8 00 00 00 00	 call	 build_senseX

; 2573 :             break;

  05393	e9 31 15 00 00	 jmp	 $LN13@tapedev_ex
$LN295@tapedev_ex:

; 2574 :         }
; 2575 : 
; 2576 :         /* Command reject if the volume is currently fenced */
; 2577 :         if (dev->fenced)

  05398	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  053a0	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  053a6	83 e0 01	 and	 eax, 1
  053a9	85 c0		 test	 eax, eax
  053ab	74 28		 je	 SHORT $LN297@tapedev_ex

; 2578 :         {
; 2579 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  053ad	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  053b6	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  053be	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  053c6	b9 0a 00 00 00	 mov	 ecx, 10
  053cb	e8 00 00 00 00	 call	 build_senseX

; 2580 :             break;

  053d0	e9 f4 14 00 00	 jmp	 $LN13@tapedev_ex
$LN297@tapedev_ex:

; 2581 :         }
; 2582 : 
; 2583 :         /* Command reject if tape is write-protected */
; 2584 :         if (dev->readonly || dev->tdparms.logical_readonly)

  053d5	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  053dd	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  053e3	d1 e8		 shr	 eax, 1
  053e5	83 e0 01	 and	 eax, 1
  053e8	85 c0		 test	 eax, eax
  053ea	75 18		 jne	 SHORT $LN299@tapedev_ex
  053ec	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  053f4	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  053fa	c1 e8 0b	 shr	 eax, 11
  053fd	83 e0 01	 and	 eax, 1
  05400	85 c0		 test	 eax, eax
  05402	74 28		 je	 SHORT $LN298@tapedev_ex
$LN299@tapedev_ex:

; 2585 :         {
; 2586 :             build_senseX (TAPE_BSENSE_WRITEPROTECT, dev, unitstat, code);

  05404	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0540d	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05415	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0541d	b9 06 00 00 00	 mov	 ecx, 6
  05422	e8 00 00 00 00	 call	 build_senseX

; 2587 :             break;

  05427	e9 9d 14 00 00	 jmp	 $LN13@tapedev_ex
$LN298@tapedev_ex:

; 2588 :         }
; 2589 : 
; 2590 :         /* Update matrix display if needed */
; 2591 :         if ( TAPEDISPTYP_IDLE    == dev->tapedisptype ||

  0542c	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05434	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  0543b	85 c0		 test	 eax, eax
  0543d	74 14		 je	 SHORT $LN301@tapedev_ex
  0543f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05447	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  0544e	83 f8 09	 cmp	 eax, 9
  05451	75 1c		 jne	 SHORT $LN300@tapedev_ex
$LN301@tapedev_ex:

; 2592 :              TAPEDISPTYP_WAITACT == dev->tapedisptype )
; 2593 :         {
; 2594 :             dev->tapedisptype = TAPEDISPTYP_ERASING;

  05453	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0545b	c6 80 60 11 00
	00 02		 mov	 BYTE PTR [rax+4448], 2

; 2595 :             UpdateDisplay( dev );

  05462	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0546a	e8 00 00 00 00	 call	 UpdateDisplay
$LN300@tapedev_ex:

; 2596 :         }
; 2597 : 
; 2598 :         /* Assign a unique Message Id for this I/O if needed */
; 2599 :         INCREMENT_MESSAGEID(dev);

  0546f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05477	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0547d	c1 e8 03	 shr	 eax, 3
  05480	83 e0 01	 and	 eax, 1
  05483	85 c0		 test	 eax, eax
  05485	74 1e		 je	 SHORT $LN302@tapedev_ex
  05487	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0548f	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  05495	ff c0		 inc	 eax
  05497	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0549f	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN302@tapedev_ex:

; 2600 : 
; 2601 :         /* Do the DSE; exit if error */
; 2602 :         if ((rc = dev->tmh->dse( dev, unitstat, code )) < 0)

  054a5	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  054ad	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  054b4	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  054bd	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  054c5	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  054cd	ff 50 60	 call	 QWORD PTR [rax+96]
  054d0	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  054d4	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  054d9	7d 05		 jge	 SHORT $LN303@tapedev_ex

; 2603 :             break;      // (error)

  054db	e9 e9 13 00 00	 jmp	 $LN13@tapedev_ex
$LN303@tapedev_ex:

; 2604 : 
; 2605 :         /* Update matrix display if needed */
; 2606 :         if ( TAPEDISPTYP_ERASING == dev->tapedisptype )

  054e0	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  054e8	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  054ef	83 f8 02	 cmp	 eax, 2
  054f2	75 1c		 jne	 SHORT $LN304@tapedev_ex

; 2607 :         {
; 2608 :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  054f4	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  054fc	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0

; 2609 :             UpdateDisplay( dev );

  05503	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0550b	e8 00 00 00 00	 call	 UpdateDisplay
$LN304@tapedev_ex:

; 2610 :         }
; 2611 : 
; 2612 :         /* Perform flush/sync and/or set normal completion status */
; 2613 :         if (0
; 2614 :             || !dev->write_immed
; 2615 :             || (rc = dev->tmh->sync( dev, unitstat, code )) == 0

  05510	33 c0		 xor	 eax, eax
  05512	85 c0		 test	 eax, eax
  05514	75 4e		 jne	 SHORT $LN306@tapedev_ex
  05516	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0551e	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  05524	c1 e8 08	 shr	 eax, 8
  05527	83 e0 01	 and	 eax, 1
  0552a	85 c0		 test	 eax, eax
  0552c	74 36		 je	 SHORT $LN306@tapedev_ex
  0552e	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05536	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  0553d	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  05546	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  0554e	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05556	ff 50 58	 call	 QWORD PTR [rax+88]
  05559	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0555d	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  05562	75 23		 jne	 SHORT $LN305@tapedev_ex
$LN306@tapedev_ex:

; 2616 :         )
; 2617 :             build_senseX( TAPE_BSENSE_STATUSONLY, dev, unitstat, code );

  05564	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0556d	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05575	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0557d	b9 0d 00 00 00	 mov	 ecx, 13
  05582	e8 00 00 00 00	 call	 build_senseX
$LN305@tapedev_ex:

; 2618 : 
; 2619 :         break;

  05587	e9 3d 13 00 00	 jmp	 $LN13@tapedev_ex
$LN307@tapedev_ex:

; 2620 : 
; 2621 :     } /* End case 0x97: DATA SECURITY ERASE */
; 2622 : 
; 2623 :     /*---------------------------------------------------------------*/
; 2624 :     /* LOAD DISPLAY                                                  */
; 2625 :     /*---------------------------------------------------------------*/
; 2626 :     case 0x9F:
; 2627 :     {
; 2628 :         /* Command Reject if Supervisor-Inhibit */
; 2629 :         if (dev->supvr_inhibit)

  0558c	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05594	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0559a	c1 e8 07	 shr	 eax, 7
  0559d	83 e0 01	 and	 eax, 1
  055a0	85 c0		 test	 eax, eax
  055a2	74 28		 je	 SHORT $LN308@tapedev_ex

; 2630 :         {
; 2631 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  055a4	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  055ad	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  055b5	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  055bd	b9 04 00 00 00	 mov	 ecx, 4
  055c2	e8 00 00 00 00	 call	 build_senseX

; 2632 :             break;

  055c7	e9 fd 12 00 00	 jmp	 $LN13@tapedev_ex
$LN308@tapedev_ex:

; 2633 :         }
; 2634 : 
; 2635 :         /* Calculate residual byte count */
; 2636 :         RESIDUAL_CALC (17);

  055cc	c7 44 24 70 11
	00 00 00	 mov	 DWORD PTR len$[rsp], 17
  055d4	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  055d8	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  055df	73 10		 jae	 SHORT $LN600@tapedev_ex
  055e1	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  055e8	89 84 24 80 01
	00 00		 mov	 DWORD PTR tv2505[rsp], eax
  055ef	eb 0b		 jmp	 SHORT $LN601@tapedev_ex
$LN600@tapedev_ex:
  055f1	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  055f5	89 84 24 80 01
	00 00		 mov	 DWORD PTR tv2505[rsp], eax
$LN601@tapedev_ex:
  055fc	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv2505[rsp]
  05603	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  05607	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  0560b	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  05612	2b c8		 sub	 ecx, eax
  05614	8b c1		 mov	 eax, ecx
  05616	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  0561e	89 01		 mov	 DWORD PTR [rcx], eax
  05620	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05624	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  0562b	73 0b		 jae	 SHORT $LN309@tapedev_ex
  0562d	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  05635	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN309@tapedev_ex:

; 2637 : 
; 2638 :         /* Issue message on 3480 matrix display */
; 2639 :         load_display (dev, iobuf, count);

  05638	44 0f b7 84 24
	b0 07 00 00	 movzx	 r8d, WORD PTR count$[rsp]
  05641	48 8b 94 24 c8
	07 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  05649	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05651	e8 00 00 00 00	 call	 load_display

; 2640 : 
; 2641 :         /* Return unit status */
; 2642 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  05656	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0565f	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05667	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0566f	b9 0d 00 00 00	 mov	 ecx, 13
  05674	e8 00 00 00 00	 call	 build_senseX

; 2643 :         break;

  05679	e9 4b 12 00 00	 jmp	 $LN13@tapedev_ex
$LN310@tapedev_ex:

; 2644 :     }
; 2645 : 
; 2646 :     /*---------------------------------------------------------------*/
; 2647 :     /* Read and Reset Buffered Log (9347)                            */
; 2648 :     /*---------------------------------------------------------------*/
; 2649 :     case 0xA4:
; 2650 :     {
; 2651 :         /* Calculate residual byte count */
; 2652 :         RESIDUAL_CALC (dev->numsense);

  0567e	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05686	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  0568c	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  05690	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05694	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  0569b	73 10		 jae	 SHORT $LN602@tapedev_ex
  0569d	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  056a4	89 84 24 84 01
	00 00		 mov	 DWORD PTR tv2517[rsp], eax
  056ab	eb 0b		 jmp	 SHORT $LN603@tapedev_ex
$LN602@tapedev_ex:
  056ad	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  056b1	89 84 24 84 01
	00 00		 mov	 DWORD PTR tv2517[rsp], eax
$LN603@tapedev_ex:
  056b8	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv2517[rsp]
  056bf	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  056c3	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  056c7	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  056ce	2b c8		 sub	 ecx, eax
  056d0	8b c1		 mov	 eax, ecx
  056d2	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  056da	89 01		 mov	 DWORD PTR [rcx], eax
  056dc	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  056e0	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  056e7	73 0b		 jae	 SHORT $LN311@tapedev_ex
  056e9	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  056f1	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN311@tapedev_ex:

; 2653 : 
; 2654 :         /* Reset SENSE Data */
; 2655 :         memset (dev->sense, 0, sizeof(dev->sense));

  056f4	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  056fc	48 05 64 03 00
	00		 add	 rax, 868		; 00000364H
  05702	48 8b f8	 mov	 rdi, rax
  05705	33 c0		 xor	 eax, eax
  05707	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0570c	f3 aa		 rep stosb

; 2656 :         *unitstat = CSW_CE|CSW_DE;

  0570e	48 8b 84 24 d8
	07 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  05716	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 2657 : 
; 2658 :         /* Copy device Buffered log data (Bunch of 0s for now) */
; 2659 :         memcpy (iobuf, dev->sense, num);

  05719	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  0571d	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05725	48 81 c1 64 03
	00 00		 add	 rcx, 868		; 00000364H
  0572c	48 8b bc 24 c8
	07 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  05734	48 8b f1	 mov	 rsi, rcx
  05737	8b c8		 mov	 ecx, eax
  05739	f3 a4		 rep movsb

; 2660 : 
; 2661 :         /* Indicate Contengency Allegiance has been cleared */
; 2662 :         dev->sns_pending = 0;

  0573b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05743	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  05749	83 e0 fb	 and	 eax, -5			; fffffffbH
  0574c	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05754	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 2663 :         break;

  0575a	e9 6a 11 00 00	 jmp	 $LN13@tapedev_ex
$LN312@tapedev_ex:

; 2664 :     }
; 2665 : 
; 2666 :     /*---------------------------------------------------------------*/
; 2667 :     /* SET PATH GROUP ID                                             */
; 2668 :     /*---------------------------------------------------------------*/
; 2669 :     case 0xAF:
; 2670 :     {
; 2671 :         /*      GA32-0127 IBM 3490E Hardware Reference
; 2672 : 
; 2673 :         Set Path Group ID (X'AF')
; 2674 : 
; 2675 :         The Set Path Group ID command identifies a controlling computer
; 2676 :         and specific channel path to the addressed control unit and
; 2677 :         tape drive.
; 2678 : 
; 2679 :         The Set Path Group ID command transfers 12 bytes of path group
; 2680 :         ID information to the subsystem.  The first byte (byte 0) is a
; 2681 :         function control byte, and the remaining 11 bytes (bytes 1-11)
; 2682 :         contain the path-group ID.
; 2683 : 
; 2684 :         The bit assignments in the function control byte (byte 0) are:
; 2685 : 
; 2686 :          ________ ________ ___________________________________________
; 2687 :         | Bit    |  Value | Description                               |
; 2688 :         |________|________|___________________________________________|
; 2689 :         | 0      |        | Path Mode                                 |
; 2690 :         |________|________|___________________________________________|
; 2691 :         |        |    0   | Single-path Mode                          |
; 2692 :         |________|________|___________________________________________|
; 2693 :         |        |    1   | Multipath Mode (not supported by Models   |
; 2694 :         |        |        | C10, C11, and C22)                        |
; 2695 :         |________|________|___________________________________________|
; 2696 :         | 1, 2   |        | Group Code                                |
; 2697 :         |________|________|___________________________________________|
; 2698 :         |        |   00   | Establish Group                           |
; 2699 :         |________|________|___________________________________________|
; 2700 :         |        |   01   | Disband Group                             |
; 2701 :         |________|________|___________________________________________|
; 2702 :         |        |   10   | Resign from Group                         |
; 2703 :         |________|________|___________________________________________|
; 2704 :         |        |   11   | Reserved                                  |
; 2705 :         |________|________|___________________________________________|
; 2706 :         | 3-7    |  00000 | Reserved                                  |
; 2707 :         |________|________|___________________________________________|
; 2708 : 
; 2709 : 
; 2710 :         The final 11 bytes of the Set Path Group ID command identify
; 2711 :         the path group ID.  The path group ID identifies the channel
; 2712 :         paths that belong to the same controlling computer.  Path group
; 2713 :         ID bytes must be the same for all devices in a control unit
; 2714 :         on a given path.  The Path Group ID bytes cannot be all zeroes.
; 2715 :         */
; 2716 : 
; 2717 :         /* Command Reject if Supervisor-Inhibit */
; 2718 :         if (dev->supvr_inhibit)

  0575f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05767	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0576d	c1 e8 07	 shr	 eax, 7
  05770	83 e0 01	 and	 eax, 1
  05773	85 c0		 test	 eax, eax
  05775	74 28		 je	 SHORT $LN313@tapedev_ex

; 2719 :         {
; 2720 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  05777	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05780	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05788	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05790	b9 04 00 00 00	 mov	 ecx, 4
  05795	e8 00 00 00 00	 call	 build_senseX

; 2721 :             break;

  0579a	e9 2a 11 00 00	 jmp	 $LN13@tapedev_ex
$LN313@tapedev_ex:

; 2722 :         }
; 2723 : 
; 2724 :         /* Command reject if the command is not the ONLY command
; 2725 :            in the channel program */
; 2726 :         if (chained & CCW_FLAGS_CC)

  0579f	0f b6 84 24 a8
	07 00 00	 movzx	 eax, BYTE PTR chained$[rsp]
  057a7	83 e0 40	 and	 eax, 64			; 00000040H
  057aa	85 c0		 test	 eax, eax
  057ac	74 28		 je	 SHORT $LN314@tapedev_ex

; 2727 :         {
; 2728 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  057ae	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  057b7	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  057bf	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  057c7	b9 04 00 00 00	 mov	 ecx, 4
  057cc	e8 00 00 00 00	 call	 build_senseX

; 2729 :             break;

  057d1	e9 f3 10 00 00	 jmp	 $LN13@tapedev_ex
$LN314@tapedev_ex:

; 2730 :         }
; 2731 : 
; 2732 :         /* Calculate residual byte count */
; 2733 :         RESIDUAL_CALC (12);

  057d6	c7 44 24 70 0c
	00 00 00	 mov	 DWORD PTR len$[rsp], 12
  057de	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  057e2	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  057e9	73 10		 jae	 SHORT $LN604@tapedev_ex
  057eb	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  057f2	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv2551[rsp], eax
  057f9	eb 0b		 jmp	 SHORT $LN605@tapedev_ex
$LN604@tapedev_ex:
  057fb	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  057ff	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv2551[rsp], eax
$LN605@tapedev_ex:
  05806	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR tv2551[rsp]
  0580d	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  05811	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  05815	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  0581c	2b c8		 sub	 ecx, eax
  0581e	8b c1		 mov	 eax, ecx
  05820	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  05828	89 01		 mov	 DWORD PTR [rcx], eax
  0582a	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0582e	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  05835	73 0b		 jae	 SHORT $LN315@tapedev_ex
  05837	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  0583f	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN315@tapedev_ex:

; 2734 : 
; 2735 :         /* Control information length must be at least 12 bytes */
; 2736 :         if (count < 12)

  05842	83 bc 24 b0 07
	00 00 0c	 cmp	 DWORD PTR count$[rsp], 12
  0584a	73 28		 jae	 SHORT $LN316@tapedev_ex

; 2737 :         {
; 2738 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  0584c	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05855	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0585d	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05865	b9 04 00 00 00	 mov	 ecx, 4
  0586a	e8 00 00 00 00	 call	 build_senseX

; 2739 :             break;

  0586f	e9 55 10 00 00	 jmp	 $LN13@tapedev_ex
$LN316@tapedev_ex:

; 2740 :         }
; 2741 : 
; 2742 :         /* Byte 0 is the path group state byte */
; 2743 :         switch((iobuf[0] & SPG_SET_COMMAND))

  05874	b8 01 00 00 00	 mov	 eax, 1
  05879	48 6b c0 00	 imul	 rax, rax, 0
  0587d	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  05885	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05889	83 e0 60	 and	 eax, 96			; 00000060H
  0588c	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv2563[rsp], eax
  05893	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR tv2563[rsp], 0
  0589b	74 21		 je	 SHORT $LN317@tapedev_ex
  0589d	83 bc 24 a8 00
	00 00 20	 cmp	 DWORD PTR tv2563[rsp], 32 ; 00000020H
  058a5	0f 84 e7 00 00
	00		 je	 $LN319@tapedev_ex
  058ab	83 bc 24 a8 00
	00 00 40	 cmp	 DWORD PTR tv2563[rsp], 64 ; 00000040H
  058b3	0f 84 0d 01 00
	00		 je	 $LN321@tapedev_ex
  058b9	e9 08 01 00 00	 jmp	 $LN320@tapedev_ex
$LN317@tapedev_ex:

; 2744 :         {
; 2745 :         case SPG_SET_ESTABLISH:
; 2746 :             /* Only accept the new pathgroup id when
; 2747 :                1) it has not yet been set (ie contains zeros) or
; 2748 :                2) It is set, but we are setting the same value */
; 2749 :             if(memcmp(dev->pgid,
; 2750 :                  "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", 11)
; 2751 :               && memcmp(dev->pgid, iobuf+1, 11))

  058be	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  058c6	48 05 ad 05 00
	00		 add	 rax, 1453		; 000005adH
  058cc	41 b8 0b 00 00
	00		 mov	 r8d, 11
  058d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169785
  058d9	48 8b c8	 mov	 rcx, rax
  058dc	e8 00 00 00 00	 call	 memcmp
  058e1	85 c0		 test	 eax, eax
  058e3	74 54		 je	 SHORT $LN318@tapedev_ex
  058e5	48 8b 84 24 c8
	07 00 00	 mov	 rax, QWORD PTR iobuf$[rsp]
  058ed	48 ff c0	 inc	 rax
  058f0	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  058f8	48 81 c1 ad 05
	00 00		 add	 rcx, 1453		; 000005adH
  058ff	41 b8 0b 00 00
	00		 mov	 r8d, 11
  05905	48 8b d0	 mov	 rdx, rax
  05908	e8 00 00 00 00	 call	 memcmp
  0590d	85 c0		 test	 eax, eax
  0590f	74 28		 je	 SHORT $LN318@tapedev_ex

; 2752 :             {
; 2753 :                 build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  05911	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0591a	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05922	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0592a	b9 04 00 00 00	 mov	 ecx, 4
  0592f	e8 00 00 00 00	 call	 build_senseX

; 2754 :                 break;

  05934	e9 d9 00 00 00	 jmp	 $LN31@tapedev_ex
$LN318@tapedev_ex:

; 2755 :             }
; 2756 : 
; 2757 :             /* Bytes 1-11 contain the path group identifier */
; 2758 :             memcpy (dev->pgid, iobuf+1, 11); // (set initial value)

  05939	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05941	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  05949	48 8d b8 ad 05
	00 00		 lea	 rdi, QWORD PTR [rax+1453]
  05950	48 8d 71 01	 lea	 rsi, QWORD PTR [rcx+1]
  05954	b9 0b 00 00 00	 mov	 ecx, 11
  05959	f3 a4		 rep movsb

; 2759 :             dev->pgstat = SPG_PATHSTAT_GROUPED | SPG_PARTSTAT_IENABLED;

  0595b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05963	c6 80 ac 05 00
	00 c0		 mov	 BYTE PTR [rax+1452], 192 ; 000000c0H

; 2760 :             build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  0596a	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05973	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0597b	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05983	b9 0d 00 00 00	 mov	 ecx, 13
  05988	e8 00 00 00 00	 call	 build_senseX

; 2761 :             break;

  0598d	e9 80 00 00 00	 jmp	 $LN31@tapedev_ex
$LN319@tapedev_ex:

; 2762 : 
; 2763 :         case SPG_SET_DISBAND:
; 2764 :             dev->pgstat = 0;

  05992	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0599a	c6 80 ac 05 00
	00 00		 mov	 BYTE PTR [rax+1452], 0

; 2765 :             build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  059a1	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  059aa	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  059b2	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  059ba	b9 0d 00 00 00	 mov	 ecx, 13
  059bf	e8 00 00 00 00	 call	 build_senseX

; 2766 :             break;

  059c4	eb 4c		 jmp	 SHORT $LN31@tapedev_ex
$LN320@tapedev_ex:
$LN321@tapedev_ex:

; 2767 : 
; 2768 :         default:
; 2769 :         case SPG_SET_RESIGN:
; 2770 :             dev->pgstat = 0;

  059c6	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  059ce	c6 80 ac 05 00
	00 00		 mov	 BYTE PTR [rax+1452], 0

; 2771 :             memset (dev->pgid, 0, 11);  // (reset to zero)

  059d5	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  059dd	48 05 ad 05 00
	00		 add	 rax, 1453		; 000005adH
  059e3	48 8b f8	 mov	 rdi, rax
  059e6	33 c0		 xor	 eax, eax
  059e8	b9 0b 00 00 00	 mov	 ecx, 11
  059ed	f3 aa		 rep stosb

; 2772 :             build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  059ef	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  059f8	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05a00	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05a08	b9 0d 00 00 00	 mov	 ecx, 13
  05a0d	e8 00 00 00 00	 call	 build_senseX
$LN31@tapedev_ex:

; 2773 :             break;
; 2774 : 
; 2775 :         } // end switch((iobuf[0] & SPG_SET_COMMAND))
; 2776 : 
; 2777 :         break;

  05a12	e9 b2 0e 00 00	 jmp	 $LN13@tapedev_ex
$LN322@tapedev_ex:

; 2778 : 
; 2779 :     } /* End case 0xAF: SET PATH GROUP ID */
; 2780 : 
; 2781 :     /*---------------------------------------------------------------*/
; 2782 :     /* ASSIGN                                                        */
; 2783 :     /*---------------------------------------------------------------*/
; 2784 :     case 0xB7:
; 2785 :     {
; 2786 :         /* Command Reject if Supervisor-Inhibit */
; 2787 :         if (dev->supvr_inhibit)

  05a17	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05a1f	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  05a25	c1 e8 07	 shr	 eax, 7
  05a28	83 e0 01	 and	 eax, 1
  05a2b	85 c0		 test	 eax, eax
  05a2d	74 28		 je	 SHORT $LN323@tapedev_ex

; 2788 :         {
; 2789 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  05a2f	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05a38	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05a40	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05a48	b9 04 00 00 00	 mov	 ecx, 4
  05a4d	e8 00 00 00 00	 call	 build_senseX

; 2790 :             break;

  05a52	e9 72 0e 00 00	 jmp	 $LN13@tapedev_ex
$LN323@tapedev_ex:

; 2791 :         }
; 2792 : 
; 2793 :         /* Calculate residual byte count */
; 2794 :         RESIDUAL_CALC (11);

  05a57	c7 44 24 70 0b
	00 00 00	 mov	 DWORD PTR len$[rsp], 11
  05a5f	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05a63	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  05a6a	73 10		 jae	 SHORT $LN606@tapedev_ex
  05a6c	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  05a73	89 84 24 8c 01
	00 00		 mov	 DWORD PTR tv2626[rsp], eax
  05a7a	eb 0b		 jmp	 SHORT $LN607@tapedev_ex
$LN606@tapedev_ex:
  05a7c	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05a80	89 84 24 8c 01
	00 00		 mov	 DWORD PTR tv2626[rsp], eax
$LN607@tapedev_ex:
  05a87	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv2626[rsp]
  05a8e	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  05a92	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  05a96	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  05a9d	2b c8		 sub	 ecx, eax
  05a9f	8b c1		 mov	 eax, ecx
  05aa1	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  05aa9	89 01		 mov	 DWORD PTR [rcx], eax
  05aab	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05aaf	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  05ab6	73 0b		 jae	 SHORT $LN324@tapedev_ex
  05ab8	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  05ac0	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN324@tapedev_ex:

; 2795 : 
; 2796 :         /* Control information length must be at least 11 bytes */
; 2797 :         if (count < len)

  05ac3	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05ac7	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  05ace	73 28		 jae	 SHORT $LN325@tapedev_ex

; 2798 :         {
; 2799 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  05ad0	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05ad9	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05ae1	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05ae9	b9 04 00 00 00	 mov	 ecx, 4
  05aee	e8 00 00 00 00	 call	 build_senseX

; 2800 :             break;

  05af3	e9 d1 0d 00 00	 jmp	 $LN13@tapedev_ex
$LN325@tapedev_ex:

; 2801 :         }
; 2802 : 
; 2803 :         if((memcmp(iobuf,"\00\00\00\00\00\00\00\00\00\00",11)==0)
; 2804 :             || (memcmp(iobuf,dev->pgid,11)==0))

  05af8	41 b8 0b 00 00
	00		 mov	 r8d, 11
  05afe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169796
  05b05	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  05b0d	e8 00 00 00 00	 call	 memcmp
  05b12	85 c0		 test	 eax, eax
  05b14	74 28		 je	 SHORT $LN328@tapedev_ex
  05b16	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05b1e	48 05 ad 05 00
	00		 add	 rax, 1453		; 000005adH
  05b24	41 b8 0b 00 00
	00		 mov	 r8d, 11
  05b2a	48 8b d0	 mov	 rdx, rax
  05b2d	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  05b35	e8 00 00 00 00	 call	 memcmp
  05b3a	85 c0		 test	 eax, eax
  05b3c	75 22		 jne	 SHORT $LN326@tapedev_ex
$LN328@tapedev_ex:

; 2805 :         {
; 2806 :             dev->pgstat |= SPG_PARTSTAT_XENABLED; /* Set Explicit Partition Enabled */

  05b3e	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05b46	0f b6 80 ac 05
	00 00		 movzx	 eax, BYTE PTR [rax+1452]
  05b4d	83 c8 30	 or	 eax, 48			; 00000030H
  05b50	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05b58	88 81 ac 05 00
	00		 mov	 BYTE PTR [rcx+1452], al

; 2807 :         }

  05b5e	eb 28		 jmp	 SHORT $LN327@tapedev_ex
$LN326@tapedev_ex:

; 2808 :         else
; 2809 :         {
; 2810 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  05b60	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05b69	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05b71	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05b79	b9 04 00 00 00	 mov	 ecx, 4
  05b7e	e8 00 00 00 00	 call	 build_senseX

; 2811 :             break;

  05b83	e9 41 0d 00 00	 jmp	 $LN13@tapedev_ex
$LN327@tapedev_ex:

; 2812 :         }
; 2813 : 
; 2814 :         /* Return unit status */
; 2815 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  05b88	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05b91	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05b99	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05ba1	b9 0d 00 00 00	 mov	 ecx, 13
  05ba6	e8 00 00 00 00	 call	 build_senseX

; 2816 :         break;

  05bab	e9 19 0d 00 00	 jmp	 $LN13@tapedev_ex
$LN329@tapedev_ex:

; 2817 :     }
; 2818 : 
; 2819 :     /*---------------------------------------------------------------*/
; 2820 :     /* MEDIUM SENSE   (3590)                                         */
; 2821 :     /*---------------------------------------------------------------*/
; 2822 :     case 0xC2:
; 2823 :     {
; 2824 :         /*      GA32-0331 IBM 3590 Hardware Reference
; 2825 : 
; 2826 :         The 3590 Hardware Reference manual lists many different
; 2827 :         "Mode Sense" Pages that the 3590 supports, with one of
; 2828 :         the supported pages being Mode Page X'23': the "Medium
; 2829 :         Sense" mode page:
; 2830 : 
; 2831 :            The Medium Sense page provides information about
; 2832 :            the state of the medium currently associated with
; 2833 :            the device, if any.
; 2834 :         */
; 2835 :         if (!MEDSNS_SUPPORTED())

  05bb0	b8 01 00 00 00	 mov	 eax, 1
  05bb5	48 6b c0 00	 imul	 rax, rax, 0
  05bb9	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05bc1	48 8d 84 01 78
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1400]
  05bc9	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  05bce	48 8b c8	 mov	 rcx, rax
  05bd1	e8 00 00 00 00	 call	 is_tape_feat
  05bd6	0f b6 c0	 movzx	 eax, al
  05bd9	85 c0		 test	 eax, eax
  05bdb	75 28		 jne	 SHORT $LN330@tapedev_ex

; 2836 :         {
; 2837 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  05bdd	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05be6	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05bee	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05bf6	b9 04 00 00 00	 mov	 ecx, 4
  05bfb	e8 00 00 00 00	 call	 build_senseX

; 2838 :             break;

  05c00	e9 c4 0c 00 00	 jmp	 $LN13@tapedev_ex
$LN330@tapedev_ex:

; 2839 :         }
; 2840 : 
; 2841 : #if 0 //  ZZ FIXME: not coded yet
; 2842 : 
; 2843 :         // PROGRAMMING NOTE: until we can add support to Hercules
; 2844 :         // allowing direct SCSI i/o (so that we can issue the 10-byte
; 2845 :         // Mode Sense (X'5A') command to ask for Mode Page x'23' =
; 2846 :         // Medium Sense) we have no choice but to reject the command.
; 2847 : 
; 2848 :         // ZZ FIXME: not written yet.
; 2849 : 
; 2850 :         build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);
; 2851 : 
; 2852 : #else //  ++++  BEGIN MEDIUM SENSE HACK  ++++
; 2853 : 
; 2854 :         /* ZZ FIXME: ***  TEMPORARY(?) HACK  ***
; 2855 : 
; 2856 :             The following clues were gleaned from Linux 390 source:
; 2857 : 
; 2858 :                 struct tape_3590_med_sense
; 2859 :                 {
; 2860 :                     unsigned int macst:4;
; 2861 :                     unsigned int masst:4;
; 2862 : 
; 2863 :                     char pad[127];
; 2864 :                 }
; 2865 : 
; 2866 :                 #define  MSENSE_UNASSOCIATED       0x00
; 2867 :                 #define  MSENSE_ASSOCIATED_MOUNT   0x01
; 2868 :                 #define  MSENSE_ASSOCIATED_UMOUNT  0x02
; 2869 : 
; 2870 :                 case TO_MSEN:
; 2871 : 
; 2872 :                     sense = (struct tape_3590_med_sense *) request->cpdata;
; 2873 : 
; 2874 :                     if (sense->masst == MSENSE_UNASSOCIATED)
; 2875 :                             tape_med_state_set(device, MS_UNLOADED);
; 2876 : 
; 2877 :                     if (sense->masst == MSENSE_ASSOCIATED_MOUNT)
; 2878 :                             tape_med_state_set(device, MS_LOADED);
; 2879 :                     break;
; 2880 :         */
; 2881 : 
; 2882 :         /* Calculate residual byte count */
; 2883 :         RESIDUAL_CALC (128);

  05c05	c7 44 24 70 80
	00 00 00	 mov	 DWORD PTR len$[rsp], 128 ; 00000080H
  05c0d	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05c11	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  05c18	73 10		 jae	 SHORT $LN608@tapedev_ex
  05c1a	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  05c21	89 84 24 90 01
	00 00		 mov	 DWORD PTR tv2676[rsp], eax
  05c28	eb 0b		 jmp	 SHORT $LN609@tapedev_ex
$LN608@tapedev_ex:
  05c2a	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05c2e	89 84 24 90 01
	00 00		 mov	 DWORD PTR tv2676[rsp], eax
$LN609@tapedev_ex:
  05c35	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv2676[rsp]
  05c3c	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  05c40	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  05c44	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  05c4b	2b c8		 sub	 ecx, eax
  05c4d	8b c1		 mov	 eax, ecx
  05c4f	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  05c57	89 01		 mov	 DWORD PTR [rcx], eax
  05c59	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05c5d	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  05c64	73 0b		 jae	 SHORT $LN331@tapedev_ex
  05c66	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  05c6e	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN331@tapedev_ex:

; 2884 : 
; 2885 :         /* Return Media Sense data... */
; 2886 : 
; 2887 :         memset( iobuf, 0, num );          // (init to all zeroes first)

  05c71	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  05c75	48 89 84 24 e8
	03 00 00	 mov	 QWORD PTR tv2681[rsp], rax
  05c7d	48 8b bc 24 c8
	07 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  05c85	33 c0		 xor	 eax, eax
  05c87	48 8b 8c 24 e8
	03 00 00	 mov	 rcx, QWORD PTR tv2681[rsp]
  05c8f	f3 aa		 rep stosb

; 2888 : 
; 2889 :         if (dev->tmh->tapeloaded( dev, unitstat, code ))

  05c91	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05c99	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  05ca0	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  05ca9	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  05cb1	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05cb9	ff 50 70	 call	 QWORD PTR [rax+112]
  05cbc	85 c0		 test	 eax, eax
  05cbe	74 2c		 je	 SHORT $LN332@tapedev_ex

; 2890 :             iobuf[0] |= (0x01 & 0x0F);    // MSENSE_ASSOCIATED_MOUNT

  05cc0	b8 01 00 00 00	 mov	 eax, 1
  05cc5	48 6b c0 00	 imul	 rax, rax, 0
  05cc9	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  05cd1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  05cd5	83 c8 01	 or	 eax, 1
  05cd8	b9 01 00 00 00	 mov	 ecx, 1
  05cdd	48 6b c9 00	 imul	 rcx, rcx, 0
  05ce1	48 8b 94 24 c8
	07 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  05ce9	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN332@tapedev_ex:

; 2891 : //      else
; 2892 : //          iobuf[0] |= (0x00 & 0x0F);    // MSENSE_UNASSOCIATED
; 2893 : 
; 2894 :         /* Return unit status */
; 2895 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  05cec	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05cf5	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05cfd	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05d05	b9 0d 00 00 00	 mov	 ecx, 13
  05d0a	e8 00 00 00 00	 call	 build_senseX

; 2896 : 
; 2897 : #endif //  ++++  END MEDIUM SENSE HACK  ++++
; 2898 : 
; 2899 :         break;

  05d0f	e9 b5 0b 00 00	 jmp	 $LN13@tapedev_ex
$LN333@tapedev_ex:

; 2900 : 
; 2901 :     } /* End case 0xC2: MEDIUM SENSE */
; 2902 : 
; 2903 :     /*---------------------------------------------------------------*/
; 2904 :     /* SET TAPE-WRITE IMMEDIATE  (3480 and later)                    */
; 2905 :     /*---------------------------------------------------------------*/
; 2906 :     case 0xC3:
; 2907 :     {
; 2908 :         // NOTE: the "Mode Set" interpretation of this CCW for all
; 2909 :         // models earlier than 3480 are handled by the command-table;
; 2910 :         // the "Set Tape-Write Immediate" interpretation of this CCW
; 2911 :         // for 3480 and later models is handled below.
; 2912 : 
; 2913 :         /* Command reject if the volume is currently fenced */
; 2914 :         if (dev->fenced)

  05d14	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05d1c	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  05d22	83 e0 01	 and	 eax, 1
  05d25	85 c0		 test	 eax, eax
  05d27	74 28		 je	 SHORT $LN334@tapedev_ex

; 2915 :         {
; 2916 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  05d29	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05d32	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05d3a	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05d42	b9 0a 00 00 00	 mov	 ecx, 10
  05d47	e8 00 00 00 00	 call	 build_senseX

; 2917 :             break;

  05d4c	e9 78 0b 00 00	 jmp	 $LN13@tapedev_ex
$LN334@tapedev_ex:

; 2918 :         }
; 2919 : 
; 2920 :         /*      GA32-0127 IBM 3490E Hardware Reference
; 2921 : 
; 2922 :         Set Tape-Write-Immediate (X'C3')
; 2923 : 
; 2924 :         The Set Tape-Write-Immediate command causes all subsequent
; 2925 :         Write commands in the channel program to perform as write-
; 2926 :         immediate commands.
; 2927 : 
; 2928 :         The tape-write-immediate command is explicitly requested by a
; 2929 :         Mode Set or Set Tape-Write-Immediate command.  The subsystem
; 2930 :         forces the tape-write-immediate command while the tape is
; 2931 :         positioned beyond logical end of volume.  This prevents more
; 2932 :         than one record from being in the buffer if the physical end of
; 2933 :         volume is reached.  It may also be forced when load balancing
; 2934 :         is performed or on drives that write the 3480-2 XF format just
; 2935 :         before end of wrap processing.
; 2936 :         */
; 2937 : 
; 2938 :         /*     GA32-0329 3590 Introduction and Planning Guide
; 2939 : 
; 2940 :         When data is physically transferred to the tape medium it is
; 2941 :         always immediately reread and verified. The writing of data
; 2942 :         is normally buffered, however, which defers the physical
; 2943 :         transfer of the logical blocks to the tape until the buffer
; 2944 :         conditions require the offloading of the data or until a
; 2945 :         synchronizing command requires the transfer. If immediate
; 2946 :         validation of a successful transfer of data to the tape is
; 2947 :         required at the time that each logical block is written,
; 2948 :         then Tape Write Immediate mode may be programmatically invoked.
; 2949 :         This results in block-by-block synchronization and verification
; 2950 :         of successful transfer all the way to the medium, but at a
; 2951 :         very substantial cost in application performance.
; 2952 :         */
; 2953 : 
; 2954 :         /* Assign a unique Message Id for this I/O if needed */
; 2955 :         INCREMENT_MESSAGEID(dev);

  05d51	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05d59	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  05d5f	c1 e8 03	 shr	 eax, 3
  05d62	83 e0 01	 and	 eax, 1
  05d65	85 c0		 test	 eax, eax
  05d67	74 1e		 je	 SHORT $LN335@tapedev_ex
  05d69	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05d71	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  05d77	ff c0		 inc	 eax
  05d79	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05d81	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN335@tapedev_ex:

; 2956 : 
; 2957 :         /* set write-immedediate mode and perform sync function */
; 2958 :         dev->write_immed = 1;

  05d87	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05d8f	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  05d95	0f ba e8 08	 bts	 eax, 8
  05d99	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05da1	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 2959 :         if ((rc = dev->tmh->sync( dev, unitstat, code )) == 0)

  05da7	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05daf	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  05db6	44 0f b6 84 24
	98 07 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  05dbf	48 8b 94 24 d8
	07 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  05dc7	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  05dcf	ff 50 58	 call	 QWORD PTR [rax+88]
  05dd2	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  05dd6	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  05ddb	75 23		 jne	 SHORT $LN336@tapedev_ex

; 2960 :             build_senseX( TAPE_BSENSE_STATUSONLY, dev, unitstat, code );

  05ddd	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05de6	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05dee	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05df6	b9 0d 00 00 00	 mov	 ecx, 13
  05dfb	e8 00 00 00 00	 call	 build_senseX
$LN336@tapedev_ex:

; 2961 :         break;

  05e00	e9 c4 0a 00 00	 jmp	 $LN13@tapedev_ex
$LN337@tapedev_ex:

; 2962 : 
; 2963 :     } /* End case 0xC3: SET TAPE-WRITE IMMEDIATE */
; 2964 : 
; 2965 :     /*---------------------------------------------------------------*/
; 2966 :     /* UNASSIGN                                                      */
; 2967 :     /*---------------------------------------------------------------*/
; 2968 :     case 0xC7:
; 2969 :     {
; 2970 :         /* Command Reject if Supervisor-Inhibit */
; 2971 :         if (dev->supvr_inhibit)

  05e05	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05e0d	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  05e13	c1 e8 07	 shr	 eax, 7
  05e16	83 e0 01	 and	 eax, 1
  05e19	85 c0		 test	 eax, eax
  05e1b	74 28		 je	 SHORT $LN338@tapedev_ex

; 2972 :         {
; 2973 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  05e1d	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05e26	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05e2e	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05e36	b9 04 00 00 00	 mov	 ecx, 4
  05e3b	e8 00 00 00 00	 call	 build_senseX

; 2974 :             break;

  05e40	e9 84 0a 00 00	 jmp	 $LN13@tapedev_ex
$LN338@tapedev_ex:

; 2975 :         }
; 2976 : 
; 2977 :         /* Calculate residual byte count */
; 2978 :         RESIDUAL_CALC (11);

  05e45	c7 44 24 70 0b
	00 00 00	 mov	 DWORD PTR len$[rsp], 11
  05e4d	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05e51	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  05e58	73 10		 jae	 SHORT $LN610@tapedev_ex
  05e5a	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  05e61	89 84 24 94 01
	00 00		 mov	 DWORD PTR tv2740[rsp], eax
  05e68	eb 0b		 jmp	 SHORT $LN611@tapedev_ex
$LN610@tapedev_ex:
  05e6a	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05e6e	89 84 24 94 01
	00 00		 mov	 DWORD PTR tv2740[rsp], eax
$LN611@tapedev_ex:
  05e75	8b 84 24 94 01
	00 00		 mov	 eax, DWORD PTR tv2740[rsp]
  05e7c	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  05e80	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  05e84	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  05e8b	2b c8		 sub	 ecx, eax
  05e8d	8b c1		 mov	 eax, ecx
  05e8f	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  05e97	89 01		 mov	 DWORD PTR [rcx], eax
  05e99	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05e9d	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  05ea4	73 0b		 jae	 SHORT $LN339@tapedev_ex
  05ea6	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  05eae	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN339@tapedev_ex:

; 2979 : 
; 2980 :         /* Control information length must be at least 11 bytes */
; 2981 :         if (count < len)

  05eb1	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05eb5	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  05ebc	73 28		 jae	 SHORT $LN340@tapedev_ex

; 2982 :         {
; 2983 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  05ebe	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05ec7	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05ecf	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05ed7	b9 04 00 00 00	 mov	 ecx, 4
  05edc	e8 00 00 00 00	 call	 build_senseX

; 2984 :             break;

  05ee1	e9 e3 09 00 00	 jmp	 $LN13@tapedev_ex
$LN340@tapedev_ex:

; 2985 :         }
; 2986 : 
; 2987 :         /* Reset to All Implicitly enabled */
; 2988 :         dev->pgstat=0;

  05ee6	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05eee	c6 80 ac 05 00
	00 00		 mov	 BYTE PTR [rax+1452], 0

; 2989 : 
; 2990 :         /* Reset Path group ID password */
; 2991 :         memset(dev->pgid, 0, 11);

  05ef5	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05efd	48 05 ad 05 00
	00		 add	 rax, 1453		; 000005adH
  05f03	48 8b f8	 mov	 rdi, rax
  05f06	33 c0		 xor	 eax, eax
  05f08	b9 0b 00 00 00	 mov	 ecx, 11
  05f0d	f3 aa		 rep stosb

; 2992 : 
; 2993 :         /* Reset drive password */
; 2994 :         memset(dev->drvpwd, 0, sizeof(dev->drvpwd));

  05f0f	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05f17	48 05 e8 05 00
	00		 add	 rax, 1512		; 000005e8H
  05f1d	48 8b f8	 mov	 rdi, rax
  05f20	33 c0		 xor	 eax, eax
  05f22	b9 0b 00 00 00	 mov	 ecx, 11
  05f27	f3 aa		 rep stosb

; 2995 : 
; 2996 :         /* Return unit status */
; 2997 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  05f29	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05f32	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05f3a	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05f42	b9 0d 00 00 00	 mov	 ecx, 13
  05f47	e8 00 00 00 00	 call	 build_senseX

; 2998 :         break;

  05f4c	e9 78 09 00 00	 jmp	 $LN13@tapedev_ex
$LN341@tapedev_ex:

; 2999 :     }
; 3000 : 
; 3001 :     /*---------------------------------------------------------------*/
; 3002 :     /* ???????????? (3590)       (MODE SELECT maybe?)                */
; 3003 :     /*---------------------------------------------------------------*/
; 3004 :     case 0xCB:
; 3005 :     {
; 3006 :         // ZZ FIXME: not written yet. (No available documentation!)
; 3007 : 
; 3008 :         /* Not currently supported; treat as no-op */
; 3009 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  05f51	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05f5a	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05f62	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05f6a	b9 0d 00 00 00	 mov	 ecx, 13
  05f6f	e8 00 00 00 00	 call	 build_senseX

; 3010 :         break;

  05f74	e9 50 09 00 00	 jmp	 $LN13@tapedev_ex
$LN342@tapedev_ex:

; 3011 :     }
; 3012 : 
; 3013 :     /*---------------------------------------------------------------*/
; 3014 :     /* ???????????? (3590)       (MODE SENSE maybe?)                 */
; 3015 :     /*---------------------------------------------------------------*/
; 3016 :     case 0xCF:
; 3017 :     {
; 3018 :         /*     ANSI INCITS 131-1994 (R1999) SCSI-2 Reference
; 3019 : 
; 3020 :         The MODE SENSE command provides a means for a target to
; 3021 :         report parameters to the initiator. It is a complementary
; 3022 :         command to the MODE SELECT command.
; 3023 :         */
; 3024 : 
; 3025 :         /*      GA32-0331 IBM 3590 Hardware Reference
; 3026 : 
; 3027 :         The 3590 Hardware Reference manual lists many different
; 3028 :         "Mode Sense" Pages that the 3590 supports.
; 3029 :         */
; 3030 : 
; 3031 :         // ZZ FIXME: not written yet. (No available documentation!)
; 3032 : 
; 3033 :         /* Not currently supported; treat as no-op */
; 3034 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  05f79	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05f82	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05f8a	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05f92	b9 0d 00 00 00	 mov	 ecx, 13
  05f97	e8 00 00 00 00	 call	 build_senseX

; 3035 :         break;

  05f9c	e9 28 09 00 00	 jmp	 $LN13@tapedev_ex
$LN343@tapedev_ex:

; 3036 :     }
; 3037 : 
; 3038 :     /*---------------------------------------------------------------*/
; 3039 :     /* MODE SET  (3480 or later)                                     */
; 3040 :     /*---------------------------------------------------------------*/
; 3041 :     case 0xDB:
; 3042 :     {
; 3043 :         /*          GA32-0127 IBM 3490E Hardware Reference
; 3044 : 
; 3045 :         Mode Set (X'DB')
; 3046 : 
; 3047 :         The Mode Set command controls specific aspects of command
; 3048 :         processing within a given command chain.
; 3049 : 
; 3050 :         The Mode Set command requires one byte of information from the channel.
; 3051 :         The format of the byte is:
; 3052 : 
; 3053 :          ________ __________________________________________________________
; 3054 :         | Bit    | Description                                              |
; 3055 :         |________|__________________________________________________________|
; 3056 :         | 0,1    | Reserved                                                 |
; 3057 :         |________|__________________________________________________________|
; 3058 :         | 2      | Tape-Write-Immediate Mode                                |
; 3059 :         |        |                                                          |
; 3060 :         |        | If active, any subsequent Write commands within the      |
; 3061 :         |        | current command chain are processed in tape-write-       |
; 3062 :         |        | immediate mode if no other conditions preclude this      |
; 3063 :         |        | mode.  If inactive, Write commands are processed in      |
; 3064 :         |        | buffered mode if no other conditions preclude this       |
; 3065 :         |        | mode.  The default is inactivate.                        |
; 3066 :         |________|__________________________________________________________|
; 3067 :         | 3      | Supervisor Inhibit                                       |
; 3068 :         |        |                                                          |
; 3069 :         |        | If active, any subsequent supervisor command within      |
; 3070 :         |        | the current command chain is presented unit check        |
; 3071 :         |        | status with associated sense data indicating ERA code    |
; 3072 :         |        | 27.  The supervisor inhibit control also determines      |
; 3073 :         |        | if pending buffered log data is reset when a Read        |
; 3074 :         |        | Buffered Log command is issued.  The default is          |
; 3075 :         |        | inactivate.                                              |
; 3076 :         |________|__________________________________________________________|
; 3077 :         | 4      | Improved Data Recording Capability (IDRC)                |
; 3078 :         |        |                                                          |
; 3079 :         |        | If active, IDRC is invoked for any subsequent Write      |
; 3080 :         |        | commands within the current command chain.  See Table    |
; 3081 :         |        | 7 in topic 1.16.6 for the default settings.              |
; 3082 :         |________|__________________________________________________________|
; 3083 :         | 5-7    | Reserved                                                 |
; 3084 :         |________|__________________________________________________________|
; 3085 : 
; 3086 :         The Mode Set command is a supervisor command and cannot be performed
; 3087 :         if preceded by a Mode Set command that inhibits supervisor commands.
; 3088 :         */
; 3089 : 
; 3090 :         /* Command reject if the volume is currently fenced */
; 3091 :         if (dev->fenced)

  05fa1	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  05fa9	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  05faf	83 e0 01	 and	 eax, 1
  05fb2	85 c0		 test	 eax, eax
  05fb4	74 28		 je	 SHORT $LN344@tapedev_ex

; 3092 :         {
; 3093 :             build_senseX (TAPE_BSENSE_FENCED, dev, unitstat, code);

  05fb6	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  05fbf	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  05fc7	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  05fcf	b9 0a 00 00 00	 mov	 ecx, 10
  05fd4	e8 00 00 00 00	 call	 build_senseX

; 3094 :             break;

  05fd9	e9 eb 08 00 00	 jmp	 $LN13@tapedev_ex
$LN344@tapedev_ex:

; 3095 :         }
; 3096 : 
; 3097 :         /* Calculate residual byte count */
; 3098 :         RESIDUAL_CALC (1);

  05fde	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR len$[rsp], 1
  05fe6	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  05fea	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  05ff1	73 10		 jae	 SHORT $LN612@tapedev_ex
  05ff3	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  05ffa	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv2779[rsp], eax
  06001	eb 0b		 jmp	 SHORT $LN613@tapedev_ex
$LN612@tapedev_ex:
  06003	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  06007	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv2779[rsp], eax
$LN613@tapedev_ex:
  0600e	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv2779[rsp]
  06015	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  06019	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  0601d	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  06024	2b c8		 sub	 ecx, eax
  06026	8b c1		 mov	 eax, ecx
  06028	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  06030	89 01		 mov	 DWORD PTR [rcx], eax
  06032	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  06036	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  0603d	73 0b		 jae	 SHORT $LN345@tapedev_ex
  0603f	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  06047	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN345@tapedev_ex:

; 3099 : 
; 3100 :         /* Check for count field of at least 1 byte, and that
; 3101 :            supvr-inhibit mode hasn't already been established */
; 3102 :         if (0
; 3103 :             || count < len
; 3104 :             || dev->supvr_inhibit

  0604a	33 c0		 xor	 eax, eax
  0604c	85 c0		 test	 eax, eax
  0604e	75 25		 jne	 SHORT $LN347@tapedev_ex
  06050	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  06054	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  0605b	72 18		 jb	 SHORT $LN347@tapedev_ex
  0605d	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  06065	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0606b	c1 e8 07	 shr	 eax, 7
  0606e	83 e0 01	 and	 eax, 1
  06071	85 c0		 test	 eax, eax
  06073	74 28		 je	 SHORT $LN346@tapedev_ex
$LN347@tapedev_ex:

; 3105 :         )
; 3106 :         {
; 3107 :             build_senseX(TAPE_BSENSE_BADCOMMAND,dev,unitstat,code);

  06075	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0607e	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  06086	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0608e	b9 04 00 00 00	 mov	 ecx, 4
  06093	e8 00 00 00 00	 call	 build_senseX

; 3108 :             break;

  06098	e9 2c 08 00 00	 jmp	 $LN13@tapedev_ex
$LN346@tapedev_ex:

; 3109 :         }
; 3110 : 
; 3111 :         /* Assign a unique Message Id for this I/O if needed */
; 3112 :         INCREMENT_MESSAGEID(dev);

  0609d	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  060a5	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  060ab	c1 e8 03	 shr	 eax, 3
  060ae	83 e0 01	 and	 eax, 1
  060b1	85 c0		 test	 eax, eax
  060b3	74 1e		 je	 SHORT $LN348@tapedev_ex
  060b5	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  060bd	8b 80 d8 10 00
	00		 mov	 eax, DWORD PTR [rax+4312]
  060c3	ff c0		 inc	 eax
  060c5	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  060cd	89 81 d8 10 00
	00		 mov	 DWORD PTR [rcx+4312], eax
$LN348@tapedev_ex:

; 3113 : 
; 3114 :         /* Process request */
; 3115 :         if (iobuf[0] & MSET_SUPVR_INHIBIT)

  060d3	b8 01 00 00 00	 mov	 eax, 1
  060d8	48 6b c0 00	 imul	 rax, rax, 0
  060dc	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  060e4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  060e8	83 e0 10	 and	 eax, 16
  060eb	85 c0		 test	 eax, eax
  060ed	74 20		 je	 SHORT $LN349@tapedev_ex

; 3116 :             dev->supvr_inhibit = 1;         /* set supvr-inhibit mode*/

  060ef	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  060f7	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  060fd	0f ba e8 07	 bts	 eax, 7
  06101	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  06109	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax
$LN349@tapedev_ex:

; 3117 : 
; 3118 :         if (iobuf[0] & MSET_WRITE_IMMED)

  0610f	b8 01 00 00 00	 mov	 eax, 1
  06114	48 6b c0 00	 imul	 rax, rax, 0
  06118	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  06120	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  06124	83 e0 20	 and	 eax, 32			; 00000020H
  06127	85 c0		 test	 eax, eax
  06129	74 20		 je	 SHORT $LN350@tapedev_ex

; 3119 :             dev->write_immed = 1;           /* set write-immed. mode */

  0612b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  06133	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  06139	0f ba e8 08	 bts	 eax, 8
  0613d	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  06145	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax
$LN350@tapedev_ex:

; 3120 : 
; 3121 :         if (iobuf[0] & MSET_IDRC)           /* set compression mode  */

  0614b	b8 01 00 00 00	 mov	 eax, 1
  06150	48 6b c0 00	 imul	 rax, rax, 0
  06154	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  0615c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  06160	83 e0 08	 and	 eax, 8
  06163	85 c0		 test	 eax, eax
  06165	74 55		 je	 SHORT $LN351@tapedev_ex

; 3122 :         {
; 3123 :             if (!IDR_SUPPORTED())           /* Reject if unsupported */

  06167	b8 01 00 00 00	 mov	 eax, 1
  0616c	48 6b c0 00	 imul	 rax, rax, 0
  06170	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  06178	48 8d 84 01 72
	05 00 00	 lea	 rax, QWORD PTR [rcx+rax+1394]
  06180	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  06185	48 8b c8	 mov	 rcx, rax
  06188	e8 00 00 00 00	 call	 is_tape_feat
  0618d	0f b6 c0	 movzx	 eax, al
  06190	85 c0		 test	 eax, eax
  06192	75 28		 jne	 SHORT $LN352@tapedev_ex

; 3124 :             {
; 3125 :                 build_senseX(TAPE_BSENSE_BADCOMMAND,dev,unitstat,code);

  06194	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0619d	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  061a5	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  061ad	b9 04 00 00 00	 mov	 ecx, 4
  061b2	e8 00 00 00 00	 call	 build_senseX

; 3126 :                 break;

  061b7	e9 0d 07 00 00	 jmp	 $LN13@tapedev_ex
$LN352@tapedev_ex:
$LN351@tapedev_ex:

; 3127 :             }
; 3128 :         }
; 3129 : 
; 3130 :         build_senseX(TAPE_BSENSE_STATUSONLY,dev,unitstat,code);

  061bc	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  061c5	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  061cd	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  061d5	b9 0d 00 00 00	 mov	 ecx, 13
  061da	e8 00 00 00 00	 call	 build_senseX

; 3131 :         break;

  061df	e9 e5 06 00 00	 jmp	 $LN13@tapedev_ex
$LN353@tapedev_ex:

; 3132 : 
; 3133 :     } /* End case 0xDB: MODE SET */
; 3134 : 
; 3135 :     /*---------------------------------------------------------------*/
; 3136 :     /* CONTROL ACCESS                                                */
; 3137 :     /*---------------------------------------------------------------*/
; 3138 :     case 0xE3:
; 3139 :     {
; 3140 :         /*          GA32-0127 IBM 3490E Hardware Reference
; 3141 : 
; 3142 :         Control Access (X'E3')
; 3143 : 
; 3144 :         The Control Access command is used to perform the set-password,
; 3145 :         conditional-enable, and conditional-disable functions of dynamic
; 3146 :         partitioning.
; 3147 : 
; 3148 :         The command requires 12 bytes of data to be transferred from the
; 3149 :         channel to the control unit which is defined as follows:
; 3150 : 
; 3151 :          ________ ________ ___________________________________________
; 3152 :         | Byte   | Bit    | Description                               |
; 3153 :         |________|________|___________________________________________|
; 3154 :         | 0      |        | Function Control                          |
; 3155 :         |________|________|___________________________________________|
; 3156 :         |        | 0,1    | 0  (x'00')  Set Password                  |
; 3157 :         |        |        | 1  (x'40')  Conditional Disable           |
; 3158 :         |        |        | 2  (x'80')  Conditional Enable            |
; 3159 :         |        |        | 3  (x'C0')  Reserved (Invalid)            |
; 3160 :         |________|________|___________________________________________|
; 3161 :         |        | 2-7    | Reserved (must be B'0')                   |
; 3162 :         |________|________|___________________________________________|
; 3163 :         | 1-11   |        | Password                                  |
; 3164 :         |________|________|___________________________________________|
; 3165 :         */
; 3166 : 
; 3167 :         /* Command Reject if Supervisor-Inhibit */
; 3168 :         if (dev->supvr_inhibit)

  061e4	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  061ec	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  061f2	c1 e8 07	 shr	 eax, 7
  061f5	83 e0 01	 and	 eax, 1
  061f8	85 c0		 test	 eax, eax
  061fa	74 28		 je	 SHORT $LN354@tapedev_ex

; 3169 :         {
; 3170 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  061fc	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  06205	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0620d	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  06215	b9 04 00 00 00	 mov	 ecx, 4
  0621a	e8 00 00 00 00	 call	 build_senseX

; 3171 :             break;

  0621f	e9 a5 06 00 00	 jmp	 $LN13@tapedev_ex
$LN354@tapedev_ex:

; 3172 :         }
; 3173 : 
; 3174 :         /* Calculate residual byte count */
; 3175 :         RESIDUAL_CALC (12);

  06224	c7 44 24 70 0c
	00 00 00	 mov	 DWORD PTR len$[rsp], 12
  0622c	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  06230	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  06237	73 10		 jae	 SHORT $LN614@tapedev_ex
  06239	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  06240	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv2847[rsp], eax
  06247	eb 0b		 jmp	 SHORT $LN615@tapedev_ex
$LN614@tapedev_ex:
  06249	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0624d	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv2847[rsp], eax
$LN615@tapedev_ex:
  06254	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv2847[rsp]
  0625b	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  0625f	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  06263	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  0626a	2b c8		 sub	 ecx, eax
  0626c	8b c1		 mov	 eax, ecx
  0626e	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  06276	89 01		 mov	 DWORD PTR [rcx], eax
  06278	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0627c	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  06283	73 0b		 jae	 SHORT $LN355@tapedev_ex
  06285	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  0628d	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN355@tapedev_ex:

; 3176 : 
; 3177 :         /* Control information length must be at least 12 bytes */
; 3178 :         if (count < len)

  06290	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  06294	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  0629b	73 28		 jae	 SHORT $LN356@tapedev_ex

; 3179 :         {
; 3180 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  0629d	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  062a6	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  062ae	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  062b6	b9 04 00 00 00	 mov	 ecx, 4
  062bb	e8 00 00 00 00	 call	 build_senseX

; 3181 :             break;

  062c0	e9 04 06 00 00	 jmp	 $LN13@tapedev_ex
$LN356@tapedev_ex:

; 3182 :         }
; 3183 : 
; 3184 :         /* Byte 0 is the CAC mode-of-use */
; 3185 :         switch (iobuf[0])

  062c5	b8 01 00 00 00	 mov	 eax, 1
  062ca	48 6b c0 00	 imul	 rax, rax, 0
  062ce	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  062d6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  062da	88 84 24 ac 00
	00 00		 mov	 BYTE PTR tv2858[rsp], al
  062e1	80 bc 24 ac 00
	00 00 00	 cmp	 BYTE PTR tv2858[rsp], 0
  062e9	74 21		 je	 SHORT $LN357@tapedev_ex
  062eb	80 bc 24 ac 00
	00 00 40	 cmp	 BYTE PTR tv2858[rsp], 64 ; 00000040H
  062f3	0f 84 eb 01 00
	00		 je	 $LN366@tapedev_ex
  062f9	80 bc 24 ac 00
	00 00 80	 cmp	 BYTE PTR tv2858[rsp], 128 ; 00000080H
  06301	0f 84 34 01 00
	00		 je	 $LN363@tapedev_ex
  06307	e9 7c 02 00 00	 jmp	 $LN368@tapedev_ex
$LN357@tapedev_ex:

; 3186 :         {
; 3187 :         /*-----------------------------------------------------------*/
; 3188 :         /* Set Password                                              */
; 3189 :         /* 0x00nnnnnnnnnnnnnnnnnnnnnn                                */
; 3190 :         /*-----------------------------------------------------------*/
; 3191 :         case CAC_SET_PASSWORD:
; 3192 :         {
; 3193 :             /* Password must not be zero
; 3194 :                and the device path must be Explicitly Enabled */
; 3195 :             if (0
; 3196 :                 || memcmp( iobuf+1, "\00\00\00\00\00\00\00\00\00\00\00", 11 ) == 0
; 3197 :                 || (dev->pgstat & SPG_PARTSTAT_XENABLED) == 0

  0630c	33 c0		 xor	 eax, eax
  0630e	85 c0		 test	 eax, eax
  06310	75 3a		 jne	 SHORT $LN359@tapedev_ex
  06312	48 8b 84 24 c8
	07 00 00	 mov	 rax, QWORD PTR iobuf$[rsp]
  0631a	48 ff c0	 inc	 rax
  0631d	41 b8 0b 00 00
	00		 mov	 r8d, 11
  06323	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169828
  0632a	48 8b c8	 mov	 rcx, rax
  0632d	e8 00 00 00 00	 call	 memcmp
  06332	85 c0		 test	 eax, eax
  06334	74 16		 je	 SHORT $LN359@tapedev_ex
  06336	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0633e	0f b6 80 ac 05
	00 00		 movzx	 eax, BYTE PTR [rax+1452]
  06345	83 e0 30	 and	 eax, 48			; 00000030H
  06348	85 c0		 test	 eax, eax
  0634a	75 28		 jne	 SHORT $LN358@tapedev_ex
$LN359@tapedev_ex:

; 3198 :             )
; 3199 :             {
; 3200 :                 build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  0634c	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  06355	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0635d	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  06365	b9 04 00 00 00	 mov	 ecx, 4
  0636a	e8 00 00 00 00	 call	 build_senseX

; 3201 :                 break;

  0636f	e9 37 02 00 00	 jmp	 $LN33@tapedev_ex
$LN358@tapedev_ex:

; 3202 :             }
; 3203 : 
; 3204 :             /* Set Password if none set yet */
; 3205 :             if (memcmp( dev->drvpwd, "\00\00\00\00\00\00\00\00\00\00\00", 11 ) == 0)

  06374	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0637c	48 05 e8 05 00
	00		 add	 rax, 1512		; 000005e8H
  06382	41 b8 0b 00 00
	00		 mov	 r8d, 11
  06388	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169831
  0638f	48 8b c8	 mov	 rcx, rax
  06392	e8 00 00 00 00	 call	 memcmp
  06397	85 c0		 test	 eax, eax
  06399	75 24		 jne	 SHORT $LN360@tapedev_ex

; 3206 :             {
; 3207 :                 memcpy (dev->drvpwd, iobuf+1, 11);

  0639b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  063a3	48 8b 8c 24 c8
	07 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  063ab	48 8d b8 e8 05
	00 00		 lea	 rdi, QWORD PTR [rax+1512]
  063b2	48 8d 71 01	 lea	 rsi, QWORD PTR [rcx+1]
  063b6	b9 0b 00 00 00	 mov	 ecx, 11
  063bb	f3 a4		 rep movsb

; 3208 :             }

  063bd	eb 54		 jmp	 SHORT $LN361@tapedev_ex
$LN360@tapedev_ex:

; 3209 :             else /* Password already set - they must match */
; 3210 :             {
; 3211 :                 if (memcmp( dev->drvpwd, iobuf+1, 11 ) != 0)

  063bf	48 8b 84 24 c8
	07 00 00	 mov	 rax, QWORD PTR iobuf$[rsp]
  063c7	48 ff c0	 inc	 rax
  063ca	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  063d2	48 81 c1 e8 05
	00 00		 add	 rcx, 1512		; 000005e8H
  063d9	41 b8 0b 00 00
	00		 mov	 r8d, 11
  063df	48 8b d0	 mov	 rdx, rax
  063e2	e8 00 00 00 00	 call	 memcmp
  063e7	85 c0		 test	 eax, eax
  063e9	74 28		 je	 SHORT $LN362@tapedev_ex

; 3212 :                 {
; 3213 :                     build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  063eb	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  063f4	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  063fc	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  06404	b9 04 00 00 00	 mov	 ecx, 4
  06409	e8 00 00 00 00	 call	 build_senseX

; 3214 :                     break;

  0640e	e9 98 01 00 00	 jmp	 $LN33@tapedev_ex
$LN362@tapedev_ex:
$LN361@tapedev_ex:

; 3215 :                 }
; 3216 :             }
; 3217 :             build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  06413	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0641c	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  06424	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0642c	b9 0d 00 00 00	 mov	 ecx, 13
  06431	e8 00 00 00 00	 call	 build_senseX

; 3218 :             break;

  06436	e9 70 01 00 00	 jmp	 $LN33@tapedev_ex
$LN363@tapedev_ex:

; 3219 :         }
; 3220 : 
; 3221 :         /*-----------------------------------------------------------*/
; 3222 :         /* Conditional Enable                                        */
; 3223 :         /* 0x80nnnnnnnnnnnnnnnnnnnnnn                                */
; 3224 :         /*-----------------------------------------------------------*/
; 3225 :         case CAC_COND_ENABLE:
; 3226 :         {
; 3227 :             /* A drive password must be set and it must match the one given as input */
; 3228 :             if (0
; 3229 :                 || memcmp( dev->drvpwd, "\00\00\00\00\00\00\00\00\00\00\00", 11 ) == 0
; 3230 :                 || memcmp( dev->drvpwd, iobuf+1, 11 ) != 0

  0643b	33 c0		 xor	 eax, eax
  0643d	85 c0		 test	 eax, eax
  0643f	75 53		 jne	 SHORT $LN365@tapedev_ex
  06441	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  06449	48 05 e8 05 00
	00		 add	 rax, 1512		; 000005e8H
  0644f	41 b8 0b 00 00
	00		 mov	 r8d, 11
  06455	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169836
  0645c	48 8b c8	 mov	 rcx, rax
  0645f	e8 00 00 00 00	 call	 memcmp
  06464	85 c0		 test	 eax, eax
  06466	74 2c		 je	 SHORT $LN365@tapedev_ex
  06468	48 8b 84 24 c8
	07 00 00	 mov	 rax, QWORD PTR iobuf$[rsp]
  06470	48 ff c0	 inc	 rax
  06473	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0647b	48 81 c1 e8 05
	00 00		 add	 rcx, 1512		; 000005e8H
  06482	41 b8 0b 00 00
	00		 mov	 r8d, 11
  06488	48 8b d0	 mov	 rdx, rax
  0648b	e8 00 00 00 00	 call	 memcmp
  06490	85 c0		 test	 eax, eax
  06492	74 28		 je	 SHORT $LN364@tapedev_ex
$LN365@tapedev_ex:

; 3231 :             )
; 3232 :             {
; 3233 :                 build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  06494	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0649d	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  064a5	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  064ad	b9 04 00 00 00	 mov	 ecx, 4
  064b2	e8 00 00 00 00	 call	 build_senseX

; 3234 :                 break;

  064b7	e9 ef 00 00 00	 jmp	 $LN33@tapedev_ex
$LN364@tapedev_ex:

; 3235 :             }
; 3236 :             build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  064bc	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  064c5	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  064cd	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  064d5	b9 0d 00 00 00	 mov	 ecx, 13
  064da	e8 00 00 00 00	 call	 build_senseX

; 3237 :             break;

  064df	e9 c7 00 00 00	 jmp	 $LN33@tapedev_ex
$LN366@tapedev_ex:

; 3238 :         }
; 3239 : 
; 3240 :         /*-----------------------------------------------------------*/
; 3241 :         /* Conditional Disable                                       */
; 3242 :         /* 0x40nnnnnnnnnnnnnnnnnnnnnn                                */
; 3243 :         /*-----------------------------------------------------------*/
; 3244 :         case CAC_COND_DISABLE:
; 3245 :         {
; 3246 :             /* A drive password is set, it must match the one given as input */
; 3247 :             if (1
; 3248 :                 && memcmp (dev->drvpwd, "\00\00\00\00\00\00\00\00\00\00\00", 11) != 0
; 3249 :                 && memcmp (dev->drvpwd, iobuf+1, 11) != 0

  064e4	33 c0		 xor	 eax, eax
  064e6	83 f8 01	 cmp	 eax, 1
  064e9	74 78		 je	 SHORT $LN367@tapedev_ex
  064eb	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  064f3	48 05 e8 05 00
	00		 add	 rax, 1512		; 000005e8H
  064f9	41 b8 0b 00 00
	00		 mov	 r8d, 11
  064ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169839
  06506	48 8b c8	 mov	 rcx, rax
  06509	e8 00 00 00 00	 call	 memcmp
  0650e	85 c0		 test	 eax, eax
  06510	74 51		 je	 SHORT $LN367@tapedev_ex
  06512	48 8b 84 24 c8
	07 00 00	 mov	 rax, QWORD PTR iobuf$[rsp]
  0651a	48 ff c0	 inc	 rax
  0651d	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  06525	48 81 c1 e8 05
	00 00		 add	 rcx, 1512		; 000005e8H
  0652c	41 b8 0b 00 00
	00		 mov	 r8d, 11
  06532	48 8b d0	 mov	 rdx, rax
  06535	e8 00 00 00 00	 call	 memcmp
  0653a	85 c0		 test	 eax, eax
  0653c	74 25		 je	 SHORT $LN367@tapedev_ex

; 3250 :             )
; 3251 :             {
; 3252 :                 build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  0653e	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  06547	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0654f	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  06557	b9 04 00 00 00	 mov	 ecx, 4
  0655c	e8 00 00 00 00	 call	 build_senseX

; 3253 :                 break;

  06561	eb 48		 jmp	 SHORT $LN33@tapedev_ex
$LN367@tapedev_ex:

; 3254 :             }
; 3255 : 
; 3256 :             build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  06563	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0656c	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  06574	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0657c	b9 0d 00 00 00	 mov	 ecx, 13
  06581	e8 00 00 00 00	 call	 build_senseX

; 3257 :             break;

  06586	eb 23		 jmp	 SHORT $LN33@tapedev_ex
$LN368@tapedev_ex:

; 3258 :         }
; 3259 : 
; 3260 :         default:    /* Unsupported Control Access Function */
; 3261 :         {
; 3262 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  06588	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  06591	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  06599	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  065a1	b9 04 00 00 00	 mov	 ecx, 4
  065a6	e8 00 00 00 00	 call	 build_senseX
$LN33@tapedev_ex:

; 3263 :             break;
; 3264 :         }
; 3265 : 
; 3266 :         } /* End switch (iobuf[0]) */
; 3267 : 
; 3268 :         break;

  065ab	e9 19 03 00 00	 jmp	 $LN13@tapedev_ex
$LN369@tapedev_ex:

; 3269 : 
; 3270 :     } /* End case 0xE3 CONTROL ACCESS */
; 3271 : 
; 3272 :     /*---------------------------------------------------------------*/
; 3273 :     /* SENSE ID    (3422 and later)                                  */
; 3274 :     /*---------------------------------------------------------------*/
; 3275 :     case 0xE4:
; 3276 :     {
; 3277 :         /* AUTOMOUNT QUERY - part 2 (if command-chained from prior 0x4B) */
; 3278 :         if (1
; 3279 :             && dev->tapedevt != TAPEDEVT_SCSITAPE
; 3280 :             && sysblk.tamdir != NULL
; 3281 :             && !dev->noautomount
; 3282 :             && (chained & CCW_FLAGS_CC)
; 3283 :             && 0x4B == prevcode

  065b0	33 c0		 xor	 eax, eax
  065b2	83 f8 01	 cmp	 eax, 1
  065b5	0f 84 37 01 00
	00		 je	 $LN370@tapedev_ex
  065bb	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  065c3	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  065ca	83 f8 03	 cmp	 eax, 3
  065cd	0f 84 1f 01 00
	00		 je	 $LN370@tapedev_ex
  065d3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  065da	48 83 b8 80 12
	00 00 00	 cmp	 QWORD PTR [rax+4736], 0
  065e2	0f 84 0a 01 00
	00		 je	 $LN370@tapedev_ex
  065e8	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  065f0	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  065f6	c1 e8 06	 shr	 eax, 6
  065f9	83 e0 01	 and	 eax, 1
  065fc	85 c0		 test	 eax, eax
  065fe	0f 85 ee 00 00
	00		 jne	 $LN370@tapedev_ex
  06604	0f b6 84 24 a8
	07 00 00	 movzx	 eax, BYTE PTR chained$[rsp]
  0660c	83 e0 40	 and	 eax, 64			; 00000040H
  0660f	85 c0		 test	 eax, eax
  06611	0f 84 db 00 00
	00		 je	 $LN370@tapedev_ex
  06617	0f b6 84 24 b8
	07 00 00	 movzx	 eax, BYTE PTR prevcode$[rsp]
  0661f	83 f8 4b	 cmp	 eax, 75			; 0000004bH
  06622	0f 85 ca 00 00
	00		 jne	 $LN370@tapedev_ex

; 3284 :         )
; 3285 :         {
; 3286 :             /* Calculate residual byte count */
; 3287 :             RESIDUAL_CALC ((int)strlen(dev->filename));

  06628	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  06630	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  06636	48 8b c8	 mov	 rcx, rax
  06639	e8 00 00 00 00	 call	 strlen
  0663e	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  06642	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  06646	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  0664d	73 10		 jae	 SHORT $LN616@tapedev_ex
  0664f	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  06656	89 84 24 a0 01
	00 00		 mov	 DWORD PTR tv3023[rsp], eax
  0665d	eb 0b		 jmp	 SHORT $LN617@tapedev_ex
$LN616@tapedev_ex:
  0665f	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  06663	89 84 24 a0 01
	00 00		 mov	 DWORD PTR tv3023[rsp], eax
$LN617@tapedev_ex:
  0666a	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv3023[rsp]
  06671	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  06675	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  06679	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  06680	2b c8		 sub	 ecx, eax
  06682	8b c1		 mov	 eax, ecx
  06684	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  0668c	89 01		 mov	 DWORD PTR [rcx], eax
  0668e	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  06692	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  06699	73 0b		 jae	 SHORT $LN371@tapedev_ex
  0669b	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  066a3	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN371@tapedev_ex:

; 3288 : 
; 3289 :             /* Copy device filename to guest storage */
; 3290 :             str_host_to_guest( (const BYTE*)dev->filename, iobuf, num );

  066a6	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  066ae	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  066b4	44 8b 44 24 74	 mov	 r8d, DWORD PTR num$[rsp]
  066b9	48 8b 94 24 c8
	07 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  066c1	48 8b c8	 mov	 rcx, rax
  066c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_str_host_to_guest

; 3291 : 
; 3292 :             /* Return normal status */
; 3293 :             build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  066ca	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  066d3	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  066db	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  066e3	b9 0d 00 00 00	 mov	 ecx, 13
  066e8	e8 00 00 00 00	 call	 build_senseX

; 3294 :             break;

  066ed	e9 d7 01 00 00	 jmp	 $LN13@tapedev_ex
$LN370@tapedev_ex:

; 3295 :         }
; 3296 : 
; 3297 :         /* SENSE ID did not exist on the 3803 */
; 3298 :         /* If numdevid is 0, then 0xE4 not supported */
; 3299 :         if (dev->numdevid==0)

  066f2	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  066fa	83 b8 64 04 00
	00 00		 cmp	 DWORD PTR [rax+1124], 0
  06701	75 28		 jne	 SHORT $LN372@tapedev_ex

; 3300 :         {
; 3301 :             build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  06703	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0670c	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  06714	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0671c	b9 04 00 00 00	 mov	 ecx, 4
  06721	e8 00 00 00 00	 call	 build_senseX

; 3302 :             break;

  06726	e9 9e 01 00 00	 jmp	 $LN13@tapedev_ex
$LN372@tapedev_ex:

; 3303 :         }
; 3304 : 
; 3305 :         /* Calculate residual byte count */
; 3306 :         RESIDUAL_CALC (dev->numdevid);

  0672b	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  06733	8b 80 64 04 00
	00		 mov	 eax, DWORD PTR [rax+1124]
  06739	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  0673d	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  06741	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  06748	73 10		 jae	 SHORT $LN618@tapedev_ex
  0674a	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  06751	89 84 24 a4 01
	00 00		 mov	 DWORD PTR tv3042[rsp], eax
  06758	eb 0b		 jmp	 SHORT $LN619@tapedev_ex
$LN618@tapedev_ex:
  0675a	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0675e	89 84 24 a4 01
	00 00		 mov	 DWORD PTR tv3042[rsp], eax
$LN619@tapedev_ex:
  06765	8b 84 24 a4 01
	00 00		 mov	 eax, DWORD PTR tv3042[rsp]
  0676c	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  06770	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  06774	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  0677b	2b c8		 sub	 ecx, eax
  0677d	8b c1		 mov	 eax, ecx
  0677f	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  06787	89 01		 mov	 DWORD PTR [rcx], eax
  06789	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0678d	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  06794	73 0b		 jae	 SHORT $LN373@tapedev_ex
  06796	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  0679e	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN373@tapedev_ex:

; 3307 : 
; 3308 :         /* Copy device identifier bytes to channel I/O buffer */
; 3309 :         memcpy (iobuf, dev->devid, num);

  067a1	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  067a5	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  067ad	48 81 c1 68 04
	00 00		 add	 rcx, 1128		; 00000468H
  067b4	48 8b bc 24 c8
	07 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  067bc	48 8b f1	 mov	 rsi, rcx
  067bf	8b c8		 mov	 ecx, eax
  067c1	f3 a4		 rep movsb

; 3310 : 
; 3311 :         /* Return unit status */
; 3312 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  067c3	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  067cc	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  067d4	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  067dc	b9 0d 00 00 00	 mov	 ecx, 13
  067e1	e8 00 00 00 00	 call	 build_senseX

; 3313 :         break;

  067e6	e9 de 00 00 00	 jmp	 $LN13@tapedev_ex
$LN374@tapedev_ex:

; 3314 :     }
; 3315 : 
; 3316 :     /*---------------------------------------------------------------*/
; 3317 :     /* READ CONFIGURATION DATA   (3490 and later)                    */
; 3318 :     /*---------------------------------------------------------------*/
; 3319 :     case 0xFA:
; 3320 :     {
; 3321 :         /* Build the configuration data area */
; 3322 :         len = dev->rcd (dev, iobuf, count);

  067eb	44 8b 84 24 b0
	07 00 00	 mov	 r8d, DWORD PTR count$[rsp]
  067f3	48 8b 94 24 c8
	07 00 00	 mov	 rdx, QWORD PTR iobuf$[rsp]
  067fb	48 8b 8c 24 90
	07 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  06803	48 8b 84 24 90
	07 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0680b	ff 90 b8 02 00
	00		 call	 QWORD PTR [rax+696]
  06811	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax

; 3323 : 
; 3324 :         /* Calculate residual byte count */
; 3325 :         RESIDUAL_CALC (len);

  06815	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  06819	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax
  0681d	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  06821	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  06828	73 10		 jae	 SHORT $LN620@tapedev_ex
  0682a	8b 84 24 b0 07
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  06831	89 84 24 a8 01
	00 00		 mov	 DWORD PTR tv3062[rsp], eax
  06838	eb 0b		 jmp	 SHORT $LN621@tapedev_ex
$LN620@tapedev_ex:
  0683a	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0683e	89 84 24 a8 01
	00 00		 mov	 DWORD PTR tv3062[rsp], eax
$LN621@tapedev_ex:
  06845	8b 84 24 a8 01
	00 00		 mov	 eax, DWORD PTR tv3062[rsp]
  0684c	89 44 24 74	 mov	 DWORD PTR num$[rsp], eax
  06850	8b 44 24 74	 mov	 eax, DWORD PTR num$[rsp]
  06854	8b 8c 24 b0 07
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  0685b	2b c8		 sub	 ecx, eax
  0685d	8b c1		 mov	 eax, ecx
  0685f	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  06867	89 01		 mov	 DWORD PTR [rcx], eax
  06869	8b 44 24 70	 mov	 eax, DWORD PTR len$[rsp]
  0686d	39 84 24 b0 07
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  06874	73 0b		 jae	 SHORT $LN375@tapedev_ex
  06876	48 8b 84 24 d0
	07 00 00	 mov	 rax, QWORD PTR more$[rsp]
  0687e	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN375@tapedev_ex:

; 3326 : 
; 3327 :         /* Return normal status */
; 3328 :         build_senseX (TAPE_BSENSE_STATUSONLY, dev, unitstat, code);

  06881	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0688a	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  06892	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0689a	b9 0d 00 00 00	 mov	 ecx, 13
  0689f	e8 00 00 00 00	 call	 build_senseX

; 3329 :         break;

  068a4	eb 23		 jmp	 SHORT $LN13@tapedev_ex
$LN376@tapedev_ex:

; 3330 :     }
; 3331 : 
; 3332 :     /*---------------------------------------------------------------*/
; 3333 :     /* INVALID OPERATION                                             */
; 3334 :     /*---------------------------------------------------------------*/
; 3335 :     default:
; 3336 :     {
; 3337 :         /* Set command reject sense byte, and unit check status */
; 3338 :         build_senseX (TAPE_BSENSE_BADCOMMAND, dev, unitstat, code);

  068a6	44 0f b6 8c 24
	98 07 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  068af	4c 8b 84 24 d8
	07 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  068b7	48 8b 94 24 90
	07 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  068bf	b9 04 00 00 00	 mov	 ecx, 4
  068c4	e8 00 00 00 00	 call	 build_senseX
$LN13@tapedev_ex:
$LN1@tapedev_ex:
$LN377@tapedev_ex:

; 3339 :     }
; 3340 : 
; 3341 :     } /* end switch (code) */
; 3342 : 
; 3343 : } /* end function tapedev_execute_ccw */

  068c9	48 8b 8c 24 60
	07 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  068d1	48 33 cc	 xor	 rcx, rsp
  068d4	e8 00 00 00 00	 call	 __security_check_cookie
  068d9	48 81 c4 78 07
	00 00		 add	 rsp, 1912		; 00000778H
  068e0	5f		 pop	 rdi
  068e1	5e		 pop	 rsi
  068e2	c3		 ret	 0
  068e3	90		 npad	 1
$LN626@tapedev_ex:
  068e4	00 00 00 00	 DD	 $LN46@tapedev_ex
  068e8	00 00 00 00	 DD	 $LN47@tapedev_ex
  068ec	00 00 00 00	 DD	 $LN48@tapedev_ex
  068f0	00 00 00 00	 DD	 $LN49@tapedev_ex
  068f4	00 00 00 00	 DD	 $LN51@tapedev_ex
  068f8	00 00 00 00	 DD	 $LN54@tapedev_ex
$LN625@tapedev_ex:
  068fc	00 00 00 00	 DD	 $LN77@tapedev_ex
  06900	00 00 00 00	 DD	 $LN88@tapedev_ex
  06904	00 00 00 00	 DD	 $LN96@tapedev_ex
  06908	00 00 00 00	 DD	 $LN98@tapedev_ex
  0690c	00 00 00 00	 DD	 $LN86@tapedev_ex
  06910	00 00 00 00	 DD	 $LN101@tapedev_ex
  06914	00 00 00 00	 DD	 $LN108@tapedev_ex
  06918	00 00 00 00	 DD	 $LN109@tapedev_ex
  0691c	00 00 00 00	 DD	 $LN117@tapedev_ex
  06920	00 00 00 00	 DD	 $LN131@tapedev_ex
  06924	00 00 00 00	 DD	 $LN62@tapedev_ex
  06928	00 00 00 00	 DD	 $LN136@tapedev_ex
  0692c	00 00 00 00	 DD	 $LN145@tapedev_ex
  06930	00 00 00 00	 DD	 $LN154@tapedev_ex
  06934	00 00 00 00	 DD	 $LN63@tapedev_ex
  06938	00 00 00 00	 DD	 $LN160@tapedev_ex
  0693c	00 00 00 00	 DD	 $LN162@tapedev_ex
  06940	00 00 00 00	 DD	 $LN168@tapedev_ex
  06944	00 00 00 00	 DD	 $LN64@tapedev_ex
  06948	00 00 00 00	 DD	 $LN173@tapedev_ex
  0694c	00 00 00 00	 DD	 $LN178@tapedev_ex
  06950	00 00 00 00	 DD	 $LN65@tapedev_ex
  06954	00 00 00 00	 DD	 $LN184@tapedev_ex
  06958	00 00 00 00	 DD	 $LN189@tapedev_ex
  0695c	00 00 00 00	 DD	 $LN194@tapedev_ex
  06960	00 00 00 00	 DD	 $LN199@tapedev_ex
  06964	00 00 00 00	 DD	 $LN224@tapedev_ex
  06968	00 00 00 00	 DD	 $LN228@tapedev_ex
  0696c	00 00 00 00	 DD	 $LN66@tapedev_ex
  06970	00 00 00 00	 DD	 $LN244@tapedev_ex
  06974	00 00 00 00	 DD	 $LN246@tapedev_ex
  06978	00 00 00 00	 DD	 $LN67@tapedev_ex
  0697c	00 00 00 00	 DD	 $LN247@tapedev_ex
  06980	00 00 00 00	 DD	 $LN68@tapedev_ex
  06984	00 00 00 00	 DD	 $LN250@tapedev_ex
  06988	00 00 00 00	 DD	 $LN69@tapedev_ex
  0698c	00 00 00 00	 DD	 $LN70@tapedev_ex
  06990	00 00 00 00	 DD	 $LN294@tapedev_ex
  06994	00 00 00 00	 DD	 $LN307@tapedev_ex
  06998	00 00 00 00	 DD	 $LN71@tapedev_ex
  0699c	00 00 00 00	 DD	 $LN310@tapedev_ex
  069a0	00 00 00 00	 DD	 $LN72@tapedev_ex
  069a4	00 00 00 00	 DD	 $LN312@tapedev_ex
  069a8	00 00 00 00	 DD	 $LN73@tapedev_ex
  069ac	00 00 00 00	 DD	 $LN322@tapedev_ex
  069b0	00 00 00 00	 DD	 $LN74@tapedev_ex
  069b4	00 00 00 00	 DD	 $LN329@tapedev_ex
  069b8	00 00 00 00	 DD	 $LN333@tapedev_ex
  069bc	00 00 00 00	 DD	 $LN337@tapedev_ex
  069c0	00 00 00 00	 DD	 $LN341@tapedev_ex
  069c4	00 00 00 00	 DD	 $LN342@tapedev_ex
  069c8	00 00 00 00	 DD	 $LN75@tapedev_ex
  069cc	00 00 00 00	 DD	 $LN343@tapedev_ex
  069d0	00 00 00 00	 DD	 $LN353@tapedev_ex
  069d4	00 00 00 00	 DD	 $LN369@tapedev_ex
  069d8	00 00 00 00	 DD	 $LN76@tapedev_ex
  069dc	00 00 00 00	 DD	 $LN374@tapedev_ex
  069e0	00 00 00 00	 DD	 $LN376@tapedev_ex
$LN624@tapedev_ex:
  069e4	00		 DB	 0
  069e5	01		 DB	 1
  069e6	02		 DB	 2
  069e7	03		 DB	 3
  069e8	39		 DB	 57			; 00000039H
  069e9	04		 DB	 4
  069ea	05		 DB	 5
  069eb	39		 DB	 57			; 00000039H
  069ec	39		 DB	 57			; 00000039H
  069ed	06		 DB	 6
  069ee	39		 DB	 57			; 00000039H
  069ef	07		 DB	 7
  069f0	39		 DB	 57			; 00000039H
  069f1	39		 DB	 57			; 00000039H
  069f2	08		 DB	 8
  069f3	39		 DB	 57			; 00000039H
  069f4	39		 DB	 57			; 00000039H
  069f5	09		 DB	 9
  069f6	0a		 DB	 10
  069f7	39		 DB	 57			; 00000039H
  069f8	39		 DB	 57			; 00000039H
  069f9	39		 DB	 57			; 00000039H
  069fa	0b		 DB	 11
  069fb	39		 DB	 57			; 00000039H
  069fc	39		 DB	 57			; 00000039H
  069fd	39		 DB	 57			; 00000039H
  069fe	39		 DB	 57			; 00000039H
  069ff	39		 DB	 57			; 00000039H
  06a00	39		 DB	 57			; 00000039H
  06a01	39		 DB	 57			; 00000039H
  06a02	0c		 DB	 12
  06a03	39		 DB	 57			; 00000039H
  06a04	39		 DB	 57			; 00000039H
  06a05	0d		 DB	 13
  06a06	0e		 DB	 14
  06a07	0f		 DB	 15
  06a08	39		 DB	 57			; 00000039H
  06a09	39		 DB	 57			; 00000039H
  06a0a	10		 DB	 16
  06a0b	39		 DB	 57			; 00000039H
  06a0c	39		 DB	 57			; 00000039H
  06a0d	39		 DB	 57			; 00000039H
  06a0e	39		 DB	 57			; 00000039H
  06a0f	39		 DB	 57			; 00000039H
  06a10	39		 DB	 57			; 00000039H
  06a11	39		 DB	 57			; 00000039H
  06a12	11		 DB	 17
  06a13	39		 DB	 57			; 00000039H
  06a14	39		 DB	 57			; 00000039H
  06a15	39		 DB	 57			; 00000039H
  06a16	12		 DB	 18
  06a17	13		 DB	 19
  06a18	39		 DB	 57			; 00000039H
  06a19	39		 DB	 57			; 00000039H
  06a1a	14		 DB	 20
  06a1b	39		 DB	 57			; 00000039H
  06a1c	39		 DB	 57			; 00000039H
  06a1d	39		 DB	 57			; 00000039H
  06a1e	15		 DB	 21
  06a1f	39		 DB	 57			; 00000039H
  06a20	39		 DB	 57			; 00000039H
  06a21	16		 DB	 22
  06a22	17		 DB	 23
  06a23	39		 DB	 57			; 00000039H
  06a24	39		 DB	 57			; 00000039H
  06a25	39		 DB	 57			; 00000039H
  06a26	18		 DB	 24
  06a27	39		 DB	 57			; 00000039H
  06a28	39		 DB	 57			; 00000039H
  06a29	39		 DB	 57			; 00000039H
  06a2a	39		 DB	 57			; 00000039H
  06a2b	39		 DB	 57			; 00000039H
  06a2c	39		 DB	 57			; 00000039H
  06a2d	39		 DB	 57			; 00000039H
  06a2e	19		 DB	 25
  06a2f	39		 DB	 57			; 00000039H
  06a30	39		 DB	 57			; 00000039H
  06a31	1a		 DB	 26
  06a32	1b		 DB	 27
  06a33	39		 DB	 57			; 00000039H
  06a34	39		 DB	 57			; 00000039H
  06a35	39		 DB	 57			; 00000039H
  06a36	1c		 DB	 28
  06a37	39		 DB	 57			; 00000039H
  06a38	39		 DB	 57			; 00000039H
  06a39	39		 DB	 57			; 00000039H
  06a3a	39		 DB	 57			; 00000039H
  06a3b	39		 DB	 57			; 00000039H
  06a3c	39		 DB	 57			; 00000039H
  06a3d	39		 DB	 57			; 00000039H
  06a3e	1d		 DB	 29
  06a3f	39		 DB	 57			; 00000039H
  06a40	39		 DB	 57			; 00000039H
  06a41	39		 DB	 57			; 00000039H
  06a42	39		 DB	 57			; 00000039H
  06a43	39		 DB	 57			; 00000039H
  06a44	39		 DB	 57			; 00000039H
  06a45	1e		 DB	 30
  06a46	1f		 DB	 31
  06a47	20		 DB	 32			; 00000020H
  06a48	39		 DB	 57			; 00000039H
  06a49	39		 DB	 57			; 00000039H
  06a4a	39		 DB	 57			; 00000039H
  06a4b	39		 DB	 57			; 00000039H
  06a4c	39		 DB	 57			; 00000039H
  06a4d	39		 DB	 57			; 00000039H
  06a4e	21		 DB	 33			; 00000021H
  06a4f	39		 DB	 57			; 00000039H
  06a50	39		 DB	 57			; 00000039H
  06a51	39		 DB	 57			; 00000039H
  06a52	39		 DB	 57			; 00000039H
  06a53	39		 DB	 57			; 00000039H
  06a54	39		 DB	 57			; 00000039H
  06a55	39		 DB	 57			; 00000039H
  06a56	39		 DB	 57			; 00000039H
  06a57	39		 DB	 57			; 00000039H
  06a58	39		 DB	 57			; 00000039H
  06a59	39		 DB	 57			; 00000039H
  06a5a	22		 DB	 34			; 00000022H
  06a5b	39		 DB	 57			; 00000039H
  06a5c	39		 DB	 57			; 00000039H
  06a5d	39		 DB	 57			; 00000039H
  06a5e	23		 DB	 35			; 00000023H
  06a5f	39		 DB	 57			; 00000039H
  06a60	39		 DB	 57			; 00000039H
  06a61	39		 DB	 57			; 00000039H
  06a62	39		 DB	 57			; 00000039H
  06a63	39		 DB	 57			; 00000039H
  06a64	39		 DB	 57			; 00000039H
  06a65	39		 DB	 57			; 00000039H
  06a66	39		 DB	 57			; 00000039H
  06a67	39		 DB	 57			; 00000039H
  06a68	39		 DB	 57			; 00000039H
  06a69	39		 DB	 57			; 00000039H
  06a6a	39		 DB	 57			; 00000039H
  06a6b	39		 DB	 57			; 00000039H
  06a6c	39		 DB	 57			; 00000039H
  06a6d	39		 DB	 57			; 00000039H
  06a6e	39		 DB	 57			; 00000039H
  06a6f	39		 DB	 57			; 00000039H
  06a70	39		 DB	 57			; 00000039H
  06a71	39		 DB	 57			; 00000039H
  06a72	39		 DB	 57			; 00000039H
  06a73	39		 DB	 57			; 00000039H
  06a74	39		 DB	 57			; 00000039H
  06a75	39		 DB	 57			; 00000039H
  06a76	24		 DB	 36			; 00000024H
  06a77	39		 DB	 57			; 00000039H
  06a78	39		 DB	 57			; 00000039H
  06a79	39		 DB	 57			; 00000039H
  06a7a	25		 DB	 37			; 00000025H
  06a7b	39		 DB	 57			; 00000039H
  06a7c	39		 DB	 57			; 00000039H
  06a7d	39		 DB	 57			; 00000039H
  06a7e	39		 DB	 57			; 00000039H
  06a7f	39		 DB	 57			; 00000039H
  06a80	39		 DB	 57			; 00000039H
  06a81	39		 DB	 57			; 00000039H
  06a82	26		 DB	 38			; 00000026H
  06a83	39		 DB	 57			; 00000039H
  06a84	39		 DB	 57			; 00000039H
  06a85	39		 DB	 57			; 00000039H
  06a86	27		 DB	 39			; 00000027H
  06a87	28		 DB	 40			; 00000028H
  06a88	39		 DB	 57			; 00000039H
  06a89	39		 DB	 57			; 00000039H
  06a8a	39		 DB	 57			; 00000039H
  06a8b	39		 DB	 57			; 00000039H
  06a8c	39		 DB	 57			; 00000039H
  06a8d	39		 DB	 57			; 00000039H
  06a8e	29		 DB	 41			; 00000029H
  06a8f	39		 DB	 57			; 00000039H
  06a90	39		 DB	 57			; 00000039H
  06a91	39		 DB	 57			; 00000039H
  06a92	2a		 DB	 42			; 0000002aH
  06a93	39		 DB	 57			; 00000039H
  06a94	39		 DB	 57			; 00000039H
  06a95	39		 DB	 57			; 00000039H
  06a96	2b		 DB	 43			; 0000002bH
  06a97	39		 DB	 57			; 00000039H
  06a98	39		 DB	 57			; 00000039H
  06a99	39		 DB	 57			; 00000039H
  06a9a	2c		 DB	 44			; 0000002cH
  06a9b	39		 DB	 57			; 00000039H
  06a9c	39		 DB	 57			; 00000039H
  06a9d	39		 DB	 57			; 00000039H
  06a9e	2d		 DB	 45			; 0000002dH
  06a9f	39		 DB	 57			; 00000039H
  06aa0	39		 DB	 57			; 00000039H
  06aa1	39		 DB	 57			; 00000039H
  06aa2	39		 DB	 57			; 00000039H
  06aa3	39		 DB	 57			; 00000039H
  06aa4	39		 DB	 57			; 00000039H
  06aa5	2e		 DB	 46			; 0000002eH
  06aa6	2f		 DB	 47			; 0000002fH
  06aa7	39		 DB	 57			; 00000039H
  06aa8	39		 DB	 57			; 00000039H
  06aa9	39		 DB	 57			; 00000039H
  06aaa	30		 DB	 48			; 00000030H
  06aab	39		 DB	 57			; 00000039H
  06aac	39		 DB	 57			; 00000039H
  06aad	39		 DB	 57			; 00000039H
  06aae	31		 DB	 49			; 00000031H
  06aaf	39		 DB	 57			; 00000039H
  06ab0	39		 DB	 57			; 00000039H
  06ab1	39		 DB	 57			; 00000039H
  06ab2	32		 DB	 50			; 00000032H
  06ab3	39		 DB	 57			; 00000039H
  06ab4	39		 DB	 57			; 00000039H
  06ab5	39		 DB	 57			; 00000039H
  06ab6	33		 DB	 51			; 00000033H
  06ab7	39		 DB	 57			; 00000039H
  06ab8	39		 DB	 57			; 00000039H
  06ab9	39		 DB	 57			; 00000039H
  06aba	39		 DB	 57			; 00000039H
  06abb	39		 DB	 57			; 00000039H
  06abc	39		 DB	 57			; 00000039H
  06abd	39		 DB	 57			; 00000039H
  06abe	34		 DB	 52			; 00000034H
  06abf	39		 DB	 57			; 00000039H
  06ac0	39		 DB	 57			; 00000039H
  06ac1	39		 DB	 57			; 00000039H
  06ac2	39		 DB	 57			; 00000039H
  06ac3	39		 DB	 57			; 00000039H
  06ac4	39		 DB	 57			; 00000039H
  06ac5	39		 DB	 57			; 00000039H
  06ac6	35		 DB	 53			; 00000035H
  06ac7	36		 DB	 54			; 00000036H
  06ac8	39		 DB	 57			; 00000039H
  06ac9	39		 DB	 57			; 00000039H
  06aca	39		 DB	 57			; 00000039H
  06acb	39		 DB	 57			; 00000039H
  06acc	39		 DB	 57			; 00000039H
  06acd	39		 DB	 57			; 00000039H
  06ace	37		 DB	 55			; 00000037H
  06acf	39		 DB	 57			; 00000039H
  06ad0	39		 DB	 57			; 00000039H
  06ad1	39		 DB	 57			; 00000039H
  06ad2	39		 DB	 57			; 00000039H
  06ad3	39		 DB	 57			; 00000039H
  06ad4	39		 DB	 57			; 00000039H
  06ad5	39		 DB	 57			; 00000039H
  06ad6	39		 DB	 57			; 00000039H
  06ad7	39		 DB	 57			; 00000039H
  06ad8	39		 DB	 57			; 00000039H
  06ad9	39		 DB	 57			; 00000039H
  06ada	39		 DB	 57			; 00000039H
  06adb	39		 DB	 57			; 00000039H
  06adc	39		 DB	 57			; 00000039H
  06add	38		 DB	 56			; 00000038H
  06ade	66 90		 npad	 2
$LN623@tapedev_ex:
  06ae0	00 00 00 00	 DD	 $LN278@tapedev_ex
  06ae4	00 00 00 00	 DD	 $LN285@tapedev_ex
  06ae8	00 00 00 00	 DD	 $LN288@tapedev_ex
  06aec	00 00 00 00	 DD	 $LN253@tapedev_ex
  06af0	00 00 00 00	 DD	 $LN254@tapedev_ex
  06af4	00 00 00 00	 DD	 $LN258@tapedev_ex
  06af8	00 00 00 00	 DD	 $LN259@tapedev_ex
  06afc	00 00 00 00	 DD	 $LN268@tapedev_ex
  06b00	00 00 00 00	 DD	 $LN271@tapedev_ex
  06b04	00 00 00 00	 DD	 $LN275@tapedev_ex
  06b08	00 00 00 00	 DD	 $LN293@tapedev_ex
$LN622@tapedev_ex:
  06b0c	00		 DB	 0
  06b0d	0a		 DB	 10
  06b0e	0a		 DB	 10
  06b0f	01		 DB	 1
  06b10	02		 DB	 2
  06b11	0a		 DB	 10
  06b12	0a		 DB	 10
  06b13	0a		 DB	 10
  06b14	0a		 DB	 10
  06b15	0a		 DB	 10
  06b16	0a		 DB	 10
  06b17	0a		 DB	 10
  06b18	0a		 DB	 10
  06b19	0a		 DB	 10
  06b1a	0a		 DB	 10
  06b1b	0a		 DB	 10
  06b1c	0a		 DB	 10
  06b1d	0a		 DB	 10
  06b1e	0a		 DB	 10
  06b1f	0a		 DB	 10
  06b20	0a		 DB	 10
  06b21	0a		 DB	 10
  06b22	0a		 DB	 10
  06b23	0a		 DB	 10
  06b24	0a		 DB	 10
  06b25	0a		 DB	 10
  06b26	0a		 DB	 10
  06b27	0a		 DB	 10
  06b28	0a		 DB	 10
  06b29	0a		 DB	 10
  06b2a	0a		 DB	 10
  06b2b	0a		 DB	 10
  06b2c	0a		 DB	 10
  06b2d	0a		 DB	 10
  06b2e	0a		 DB	 10
  06b2f	0a		 DB	 10
  06b30	0a		 DB	 10
  06b31	0a		 DB	 10
  06b32	0a		 DB	 10
  06b33	0a		 DB	 10
  06b34	0a		 DB	 10
  06b35	0a		 DB	 10
  06b36	0a		 DB	 10
  06b37	0a		 DB	 10
  06b38	0a		 DB	 10
  06b39	0a		 DB	 10
  06b3a	0a		 DB	 10
  06b3b	0a		 DB	 10
  06b3c	0a		 DB	 10
  06b3d	0a		 DB	 10
  06b3e	0a		 DB	 10
  06b3f	0a		 DB	 10
  06b40	0a		 DB	 10
  06b41	0a		 DB	 10
  06b42	0a		 DB	 10
  06b43	0a		 DB	 10
  06b44	0a		 DB	 10
  06b45	0a		 DB	 10
  06b46	0a		 DB	 10
  06b47	0a		 DB	 10
  06b48	0a		 DB	 10
  06b49	0a		 DB	 10
  06b4a	0a		 DB	 10
  06b4b	0a		 DB	 10
  06b4c	0a		 DB	 10
  06b4d	0a		 DB	 10
  06b4e	0a		 DB	 10
  06b4f	0a		 DB	 10
  06b50	0a		 DB	 10
  06b51	0a		 DB	 10
  06b52	0a		 DB	 10
  06b53	0a		 DB	 10
  06b54	0a		 DB	 10
  06b55	0a		 DB	 10
  06b56	0a		 DB	 10
  06b57	0a		 DB	 10
  06b58	0a		 DB	 10
  06b59	0a		 DB	 10
  06b5a	0a		 DB	 10
  06b5b	0a		 DB	 10
  06b5c	0a		 DB	 10
  06b5d	0a		 DB	 10
  06b5e	0a		 DB	 10
  06b5f	0a		 DB	 10
  06b60	0a		 DB	 10
  06b61	0a		 DB	 10
  06b62	0a		 DB	 10
  06b63	0a		 DB	 10
  06b64	0a		 DB	 10
  06b65	0a		 DB	 10
  06b66	0a		 DB	 10
  06b67	0a		 DB	 10
  06b68	0a		 DB	 10
  06b69	0a		 DB	 10
  06b6a	0a		 DB	 10
  06b6b	0a		 DB	 10
  06b6c	0a		 DB	 10
  06b6d	0a		 DB	 10
  06b6e	0a		 DB	 10
  06b6f	0a		 DB	 10
  06b70	0a		 DB	 10
  06b71	0a		 DB	 10
  06b72	0a		 DB	 10
  06b73	0a		 DB	 10
  06b74	03		 DB	 3
  06b75	04		 DB	 4
  06b76	05		 DB	 5
  06b77	06		 DB	 6
  06b78	0a		 DB	 10
  06b79	0a		 DB	 10
  06b7a	0a		 DB	 10
  06b7b	0a		 DB	 10
  06b7c	0a		 DB	 10
  06b7d	0a		 DB	 10
  06b7e	0a		 DB	 10
  06b7f	0a		 DB	 10
  06b80	0a		 DB	 10
  06b81	0a		 DB	 10
  06b82	0a		 DB	 10
  06b83	0a		 DB	 10
  06b84	07		 DB	 7
  06b85	0a		 DB	 10
  06b86	0a		 DB	 10
  06b87	0a		 DB	 10
  06b88	0a		 DB	 10
  06b89	0a		 DB	 10
  06b8a	0a		 DB	 10
  06b8b	0a		 DB	 10
  06b8c	0a		 DB	 10
  06b8d	0a		 DB	 10
  06b8e	0a		 DB	 10
  06b8f	0a		 DB	 10
  06b90	0a		 DB	 10
  06b91	0a		 DB	 10
  06b92	0a		 DB	 10
  06b93	0a		 DB	 10
  06b94	0a		 DB	 10
  06b95	08		 DB	 8
  06b96	09		 DB	 9
tapedev_execute_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapeccws.c
_TEXT	SEGMENT
i$ = 0
devtfound$ = 4
tix$ = 8
rc$ = 12
code$ = 32
devtype$ = 40
rustat$ = 48
TapeCommandIsValid PROC

; 397  : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000a	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000e	48 83 ec 18	 sub	 rsp, 24

; 398  : int i, rc, tix = 0, devtfound = 0;

  00012	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR tix$[rsp], 0
  0001a	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR devtfound$[rsp], 0

; 399  : 
; 400  :     /*
; 401  :     **  Find the D/T in the table
; 402  :     **  If not found, treat as invalid CCW code
; 403  :     */
; 404  : 
; 405  :     *rustat = 0;

  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR rustat$[rsp]
  00027	c6 00 00	 mov	 BYTE PTR [rax], 0

; 406  : 
; 407  :     for (i = 0; TapeDevtypeList[i] != 0; i += TAPEDEVTYPELIST_ENTRYSIZE)

  0002a	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00031	eb 09		 jmp	 SHORT $LN4@TapeComman
$LN2@TapeComman:
  00033	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00036	83 c0 05	 add	 eax, 5
  00039	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@TapeComman:
  0003c	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:TapeDevtypeList
  00047	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  0004b	0f 84 87 00 00
	00		 je	 $LN3@TapeComman

; 408  :     {
; 409  :         if (TapeDevtypeList[i] == devtype)

  00051	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:TapeDevtypeList
  0005c	0f b7 54 24 28	 movzx	 edx, WORD PTR devtype$[rsp]
  00061	39 14 81	 cmp	 DWORD PTR [rcx+rax*4], edx
  00064	75 6d		 jne	 SHORT $LN5@TapeComman

; 410  :         {
; 411  :            devtfound = 1;

  00066	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR devtfound$[rsp], 1

; 412  :            tix = TapeDevtypeList[i+1];

  0006e	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00071	ff c0		 inc	 eax
  00073	48 98		 cdqe
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:TapeDevtypeList
  0007c	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0007f	89 44 24 08	 mov	 DWORD PTR tix$[rsp], eax

; 413  : 
; 414  :            if (TapeDevtypeList[i+2])

  00083	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00086	83 c0 02	 add	 eax, 2
  00089	48 98		 cdqe
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:TapeDevtypeList
  00092	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  00096	74 12		 je	 SHORT $LN6@TapeComman

; 415  :            {
; 416  :                *rustat |= CSW_UC;

  00098	48 8b 44 24 30	 mov	 rax, QWORD PTR rustat$[rsp]
  0009d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000a0	83 c8 02	 or	 eax, 2
  000a3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rustat$[rsp]
  000a8	88 01		 mov	 BYTE PTR [rcx], al
$LN6@TapeComman:

; 417  :            }
; 418  :            if (TapeDevtypeList[i+3])

  000aa	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  000ad	83 c0 03	 add	 eax, 3
  000b0	48 98		 cdqe
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:TapeDevtypeList
  000b9	83 3c 81 00	 cmp	 DWORD PTR [rcx+rax*4], 0
  000bd	74 12		 je	 SHORT $LN7@TapeComman

; 419  :            {
; 420  :                *rustat |= CSW_CUE;

  000bf	48 8b 44 24 30	 mov	 rax, QWORD PTR rustat$[rsp]
  000c4	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000c7	83 c8 20	 or	 eax, 32			; 00000020H
  000ca	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rustat$[rsp]
  000cf	88 01		 mov	 BYTE PTR [rcx], al
$LN7@TapeComman:

; 421  :            }
; 422  :            break;

  000d1	eb 05		 jmp	 SHORT $LN3@TapeComman
$LN5@TapeComman:

; 423  :         }
; 424  :     }

  000d3	e9 5b ff ff ff	 jmp	 $LN2@TapeComman
$LN3@TapeComman:

; 425  : 
; 426  :     if (!devtfound)

  000d8	83 7c 24 04 00	 cmp	 DWORD PTR devtfound$[rsp], 0
  000dd	75 04		 jne	 SHORT $LN8@TapeComman

; 427  :         return 0;

  000df	33 c0		 xor	 eax, eax
  000e1	eb 21		 jmp	 SHORT $LN1@TapeComman
$LN8@TapeComman:

; 428  : 
; 429  :     rc = TapeCommandTable[tix][code];

  000e3	48 63 44 24 08	 movsxd	 rax, DWORD PTR tix$[rsp]
  000e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:TapeCommandTable
  000ef	0f b6 54 24 20	 movzx	 edx, BYTE PTR code$[rsp]
  000f4	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  000f8	0f b6 04 10	 movzx	 eax, BYTE PTR [rax+rdx]
  000fc	89 44 24 0c	 mov	 DWORD PTR rc$[rsp], eax

; 430  : 
; 431  :     return rc;

  00100	8b 44 24 0c	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@TapeComman:

; 432  : 
; 433  : } /* end function TapeCommandIsValid */

  00104	48 83 c4 18	 add	 rsp, 24
  00108	c3		 ret	 0
TapeCommandIsValid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.h
_TEXT	SEGMENT
tv75 = 32
tv77 = 36
work$ = 40
feats$ = 64
flags$ = 72
is_tape_feat PROC

; 194  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 195  :     U32 work;
; 196  :     memcpy( &work, feats, sizeof( U32 ));

  0000d	48 8b 44 24 40	 mov	 rax, QWORD PTR feats$[rsp]
  00012	8b 00		 mov	 eax, DWORD PTR [rax]
  00014	89 44 24 28	 mov	 DWORD PTR work$[rsp], eax

; 197  :     return (CSWAP32( work ) & flags) ? true : false;

  00018	8b 4c 24 28	 mov	 ecx, DWORD PTR work$[rsp]
  0001c	e8 00 00 00 00	 call	 _byteswap_ulong
  00021	23 44 24 48	 and	 eax, DWORD PTR flags$[rsp]
  00025	85 c0		 test	 eax, eax
  00027	74 0a		 je	 SHORT $LN3@is_tape_fe
  00029	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  00031	eb 08		 jmp	 SHORT $LN4@is_tape_fe
$LN3@is_tape_fe:
  00033	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN4@is_tape_fe:
  0003b	83 7c 24 20 00	 cmp	 DWORD PTR tv75[rsp], 0
  00040	75 0a		 jne	 SHORT $LN5@is_tape_fe
  00042	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
  0004a	eb 08		 jmp	 SHORT $LN6@is_tape_fe
$LN5@is_tape_fe:
  0004c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
$LN6@is_tape_fe:
  00054	0f b6 44 24 24	 movzx	 eax, BYTE PTR tv77[rsp]

; 198  : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
is_tape_feat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_fw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_fw_noswap PROC					; COMDAT

; 764  :     inline void store_fw_noswap(void *ptr, U32 value) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 765  :       memcpy((BYTE *)ptr, (BYTE *)&value, 4);

  00009	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 4c 24 10	 mov	 ecx, DWORD PTR value$[rsp]
  00012	89 08		 mov	 DWORD PTR [rax], ecx

; 766  :     }

  00014	c3		 ret	 0
store_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_fw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_fw_noswap PROC					; COMDAT

; 746  :     inline U32 fetch_fw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 747  :       U32 value;
; 748  :       memcpy(&value, (BYTE *)ptr, 4);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR value$[rsp], eax

; 749  :       return value;

  00013	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]

; 750  :     }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
fetch_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_hw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_hw_noswap PROC					; COMDAT

; 730  :     inline void store_hw_noswap(void *ptr, U16 value) {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 731  :       memcpy((BYTE *)ptr, (BYTE *)&value, 2);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	0f b7 4c 24 10	 movzx	 ecx, WORD PTR value$[rsp]
  00014	66 89 08	 mov	 WORD PTR [rax], cx

; 732  :     }

  00017	c3		 ret	 0
store_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
