; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
VOL1_KEYA DB	056H
	DB	04fH
	DB	04cH
	DB	031H
VOL1_KEY DB	0e5H
	DB	0d6H
	DB	0d3H
	DB	0f1H
IPL1_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f1H
IPL2_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f2H
iplpsw	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
iplccw1	DB	06H
	DB	00H
	DB	03aH
	DB	098H
	DB	060H
	DB	00H
	DB	00H
	DB	060H
iplccw2	DB	08H
	DB	00H
	DB	03aH
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
noiplpsw DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
noiplccw1 DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
noiplccw2 DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
ipl2data DB	07H
	DB	00H
	DB	03aH
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	06H
	DB	031H
	DB	00H
	DB	03aH
	DB	0beH
	DB	040H
	DB	00H
	DB	00H
	DB	05H
	DB	08H
	DB	00H
	DB	03aH
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	07fH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
CONST	ENDS
PUBLIC	syntax
PUBLIC	main
EXTRN	__imp__errno:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_cckd64_comp:PROC
EXTRN	__imp_cckd64_chkdsk:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_is_dh_devid_typ:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$syntax DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$syntax
$pdata$main DD	imagerel $LN56
	DD	imagerel $LN56+2741
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
$SG159619 DB	'CCKD64 Compression Utility', 00H
	ORG $+5
$SG159620 DB	'cckdcomp64', 00H
	ORG $+1
$SG159632 DB	'open()', 00H
	ORG $+1
$SG159633 DB	'E', 00H
	ORG $+2
$SG159634 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG159635 DB	'main', 00H
	ORG $+3
$SG159640 DB	'read()', 00H
	ORG $+1
$SG159641 DB	'E', 00H
	ORG $+2
$SG159636 DB	'cckdcomp64.c', 00H
	ORG $+3
$SG159638 DB	'CKD header incomplete', 00H
	ORG $+2
$SG159642 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG159643 DB	'main', 00H
	ORG $+3
$SG159646 DB	'E', 00H
	ORG $+2
$SG159644 DB	'cckdcomp64.c', 00H
	ORG $+3
$SG159648 DB	'main', 00H
	ORG $+3
$SG159647 DB	'HHC02424%s Dasd image file format unsupported or unrecog'
	DB	'nized: %s', 0aH, 00H
	ORG $+1
$SG159653 DB	'E', 00H
	ORG $+2
$SG159649 DB	'cckdcomp64.c', 00H
	ORG $+3
$SG159652 DB	'lseek()', 00H
$SG159654 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159655 DB	'main', 00H
	ORG $+3
$SG159659 DB	'read()', 00H
	ORG $+1
$SG159660 DB	'E', 00H
	ORG $+2
$SG159656 DB	'cckdcomp64.c', 00H
	ORG $+3
$SG159658 DB	'incomplete', 00H
	ORG $+1
$SG159662 DB	'main', 00H
	ORG $+7
$SG159661 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159665 DB	'E', 00H
	ORG $+2
$SG159663 DB	'cckdcomp64.c', 00H
	ORG $+3
$SG159666 DB	'HHC00352%s %1d:%04X CCKD file %s: opened bit is on, use '
	DB	'-f', 0aH, 00H
$SG159667 DB	'main', 00H
	ORG $+3
$SG159670 DB	'E', 00H
	ORG $+2
$SG159668 DB	'cckdcomp64.c', 00H
	ORG $+3
$SG159671 DB	'HHC00353%s %1d:%04X CCKD file %s: check disk errors', 0aH
	DB	00H
	ORG $+3
$SG159672 DB	'main', 00H
	ORG $+3
$SG159673 DB	'cckdcomp64.c', 00H
	ORG $+3
$SG159677 DB	'I', 00H
	ORG $+2
$SG159679 DB	'syntax', 00H
	ORG $+5
$SG159678 DB	'HHC02497%s Usage: %s [-f] [-level] file1 [file2 ... ]', 0aH
	DB	'HHC02497I   file    name of CCKD file', 0aH, 'HHC02497I Optio'
	DB	'ns:', 0aH, 'HHC02497I   -f      force check even if OPENED bi'
	DB	't is on', 0aH, 'HHC02497I   -0      minimal checking (default'
	DB	')', 0aH, 'HHC02497I   -1      normal  checking', 0aH, 'HHC024'
	DB	'97I   -2      intermediate checking', 0aH, 'HHC02497I   -3   '
	DB	'   maximal checking', 0aH, 00H
	ORG $+4
$SG159680 DB	'cckdcomp64.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	021H
	DD	0a9cH
voltbl	ENDS
xdata	SEGMENT
$unwind$syntax DD 010901H
	DD	08209H
$unwind$main DD	032919H
	DD	041a0117H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	020c0H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdcomp64.c
_TEXT	SEGMENT
dev$ = 112
rc$ = 120
tv83 = 124
i$ = 128
tv189 = 132
tv217 = 136
tv223 = 140
force$ = 144
tv275 = 148
tv281 = 152
tv314 = 156
tv320 = 160
tv341 = 164
tv347 = 168
level$ = 172
tv369 = 176
tv375 = 180
tv183 = 184
pgm$ = 192
emsg$1 = 200
tv305 = 208
tv173 = 216
tv178 = 224
tv212 = 232
tv241 = 240
tv264 = 248
tv270 = 256
tv309 = 264
tv336 = 272
tv364 = 280
devhdr$ = 288
cdevhdr$ = 800
devblk$ = 1312
__$ArrayPad$ = 8384
argc$ = 8416
argv$ = 8424
main	PROC

; 28   : {

$LN56:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	b8 d0 20 00 00	 mov	 eax, 8400		; 000020d0H
  0000f	e8 00 00 00 00	 call	 __chkstk
  00014	48 2b e0	 sub	 rsp, rax
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 c0
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 29   : char           *pgm;                    /* less any extension (.ext) */
; 30   : int             i;                      /* Index                     */
; 31   : int             rc;                     /* Return code               */
; 32   : int             level=-1;               /* Level for chkdsk          */

  00029	c7 84 24 ac 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR level$[rsp], -1

; 33   : int             force=0;                /* 1=Compress if OPENED set  */

  00034	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR force$[rsp], 0

; 34   : CKD_DEVHDR      devhdr;                 /* CKD device header         */
; 35   : CCKD64_DEVHDR   cdevhdr;                /* Compressed CKD device hdr */
; 36   : DEVBLK          devblk;                 /* DEVBLK                    */
; 37   : DEVBLK         *dev=&devblk;            /* -> DEVBLK                 */

  0003f	48 8d 84 24 20
	05 00 00	 lea	 rax, QWORD PTR devblk$[rsp]
  00047	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax

; 38   : 
; 39   :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  0004c	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR pgm$[rsp]
  00054	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00059	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159619
  00060	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159620
  00067	48 8b 94 24 e8
	20 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0006f	8b 8c 24 e0 20
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  0007c	89 84 24 e0 20
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 40   : 
; 41   :     /* parse the arguments */
; 42   :     for (argc--, argv++ ; argc > 0 ; argc--, argv++)

  00083	8b 84 24 e0 20
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  0008a	ff c8		 dec	 eax
  0008c	89 84 24 e0 20
	00 00		 mov	 DWORD PTR argc$[rsp], eax
  00093	48 8b 84 24 e8
	20 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0009b	48 83 c0 08	 add	 rax, 8
  0009f	48 89 84 24 e8
	20 00 00	 mov	 QWORD PTR argv$[rsp], rax
  000a7	eb 24		 jmp	 SHORT $LN4@main
$LN2@main:
  000a9	8b 84 24 e0 20
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  000b0	ff c8		 dec	 eax
  000b2	89 84 24 e0 20
	00 00		 mov	 DWORD PTR argc$[rsp], eax
  000b9	48 8b 84 24 e8
	20 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000c1	48 83 c0 08	 add	 rax, 8
  000c5	48 89 84 24 e8
	20 00 00	 mov	 QWORD PTR argv$[rsp], rax
$LN4@main:
  000cd	83 bc 24 e0 20
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  000d5	0f 8e 28 01 00
	00		 jle	 $LN3@main

; 43   :     {
; 44   :         if(**argv != '-') break;

  000db	48 8b 84 24 e8
	20 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e6	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000e9	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  000ec	74 05		 je	 SHORT $LN10@main
  000ee	e9 10 01 00 00	 jmp	 $LN3@main
$LN10@main:

; 45   : 
; 46   :         switch(argv[0][1])

  000f3	b8 08 00 00 00	 mov	 eax, 8
  000f8	48 6b c0 00	 imul	 rax, rax, 0
  000fc	b9 01 00 00 00	 mov	 ecx, 1
  00101	48 6b c9 01	 imul	 rcx, rcx, 1
  00105	48 8b 94 24 e8
	20 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0010d	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00111	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00115	88 44 24 7c	 mov	 BYTE PTR tv83[rsp], al
  00119	80 7c 24 7c 30	 cmp	 BYTE PTR tv83[rsp], 48	; 00000030H
  0011e	74 21		 je	 SHORT $LN11@main
  00120	80 7c 24 7c 31	 cmp	 BYTE PTR tv83[rsp], 49	; 00000031H
  00125	74 1a		 je	 SHORT $LN12@main
  00127	80 7c 24 7c 32	 cmp	 BYTE PTR tv83[rsp], 50	; 00000032H
  0012c	74 13		 je	 SHORT $LN13@main
  0012e	80 7c 24 7c 33	 cmp	 BYTE PTR tv83[rsp], 51	; 00000033H
  00133	74 0c		 je	 SHORT $LN14@main
  00135	80 7c 24 7c 66	 cmp	 BYTE PTR tv83[rsp], 102	; 00000066H
  0013a	74 6b		 je	 SHORT $LN16@main
  0013c	e9 ab 00 00 00	 jmp	 $LN18@main
$LN11@main:
$LN12@main:
$LN13@main:
$LN14@main:

; 47   :         {
; 48   :             case '0':
; 49   :             case '1':
; 50   :             case '2':
; 51   :             case '3':  if (argv[0][2] != '\0') return syntax( pgm );

  00141	b8 08 00 00 00	 mov	 eax, 8
  00146	48 6b c0 00	 imul	 rax, rax, 0
  0014a	b9 01 00 00 00	 mov	 ecx, 1
  0014f	48 6b c9 02	 imul	 rcx, rcx, 2
  00153	48 8b 94 24 e8
	20 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0015b	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  0015f	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00163	85 c0		 test	 eax, eax
  00165	74 12		 je	 SHORT $LN15@main
  00167	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  0016f	e8 00 00 00 00	 call	 syntax
  00174	e9 23 09 00 00	 jmp	 $LN1@main
$LN15@main:

; 52   :                        level = (argv[0][1] & 0xf);

  00179	b8 08 00 00 00	 mov	 eax, 8
  0017e	48 6b c0 00	 imul	 rax, rax, 0
  00182	b9 01 00 00 00	 mov	 ecx, 1
  00187	48 6b c9 01	 imul	 rcx, rcx, 1
  0018b	48 8b 94 24 e8
	20 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00193	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00197	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0019b	83 e0 0f	 and	 eax, 15
  0019e	89 84 24 ac 00
	00 00		 mov	 DWORD PTR level$[rsp], eax

; 53   :                        break;

  001a5	eb 57		 jmp	 SHORT $LN5@main
$LN16@main:

; 54   :             case 'f':  if (argv[0][2] != '\0') return syntax( pgm );

  001a7	b8 08 00 00 00	 mov	 eax, 8
  001ac	48 6b c0 00	 imul	 rax, rax, 0
  001b0	b9 01 00 00 00	 mov	 ecx, 1
  001b5	48 6b c9 02	 imul	 rcx, rcx, 2
  001b9	48 8b 94 24 e8
	20 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001c1	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001c5	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  001c9	85 c0		 test	 eax, eax
  001cb	74 12		 je	 SHORT $LN17@main
  001cd	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  001d5	e8 00 00 00 00	 call	 syntax
  001da	e9 bd 08 00 00	 jmp	 $LN1@main
$LN17@main:

; 55   :                        force = 1;

  001df	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR force$[rsp], 1

; 56   :                        break;

  001ea	eb 12		 jmp	 SHORT $LN5@main
$LN18@main:

; 57   :             default:   return syntax( pgm );

  001ec	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  001f4	e8 00 00 00 00	 call	 syntax
  001f9	e9 9e 08 00 00	 jmp	 $LN1@main
$LN5@main:

; 58   :         }
; 59   :     }

  001fe	e9 a6 fe ff ff	 jmp	 $LN2@main
$LN3@main:

; 60   : 
; 61   :     if (argc < 1) return syntax( pgm );

  00203	83 bc 24 e0 20
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0020b	7d 12		 jge	 SHORT $LN19@main
  0020d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00215	e8 00 00 00 00	 call	 syntax
  0021a	e9 7d 08 00 00	 jmp	 $LN1@main
$LN19@main:

; 62   : 
; 63   :     for (i = 0; i < argc; i++)

  0021f	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  0022a	eb 10		 jmp	 SHORT $LN9@main
$LN7@main:
  0022c	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00233	ff c0		 inc	 eax
  00235	89 84 24 80 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN9@main:
  0023c	8b 84 24 e0 20
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00243	39 84 24 80 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  0024a	0f 8d 4a 08 00
	00		 jge	 $LN8@main

; 64   :     {
; 65   :         memset (dev, 0, sizeof(DEVBLK));

  00250	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dev$[rsp]
  00255	33 c0		 xor	 eax, eax
  00257	b9 a0 1b 00 00	 mov	 ecx, 7072		; 00001ba0H
  0025c	f3 aa		 rep stosb

; 66   :         dev->batch = 1;

  0025e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00263	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00269	0f ba e8 0a	 bts	 eax, 10
  0026d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00272	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 67   : 
; 68   :         /* open the file */
; 69   :         hostpath(dev->filename, argv[i], sizeof(dev->filename));

  00278	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00280	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00285	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0028c	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00292	48 8b 94 24 e8
	20 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0029a	48 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+rax*8]
  0029e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 70   :         dev->fd = HOPEN (dev->filename, O_RDWR|O_BINARY);

  002a4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002a9	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  002af	ba 02 80 00 00	 mov	 edx, 32770		; 00008002H
  002b4	48 8b c8	 mov	 rcx, rax
  002b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  002bd	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  002c2	89 81 ac 01 00
	00		 mov	 DWORD PTR [rcx+428], eax

; 71   :         if (dev->fd < 0)

  002c8	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002cd	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  002d4	0f 8d fe 00 00
	00		 jge	 $LN20@main

; 72   :         {
; 73   :             // "%1d:%04X CCKD file %s: error in function %s: %s"
; 74   :             FWRMSG( stderr, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  002da	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  002e0	74 12		 je	 SHORT $LN30@main
  002e2	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  002e7	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  002eb	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv183[rsp], eax
  002f2	eb 0b		 jmp	 SHORT $LN31@main
$LN30@main:
  002f4	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv183[rsp], 0
$LN31@main:
  002ff	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00305	74 14		 je	 SHORT $LN32@main
  00307	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0030c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00310	d1 f8		 sar	 eax, 1
  00312	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv189[rsp], eax
  00319	eb 0b		 jmp	 SHORT $LN33@main
$LN32@main:
  0031b	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv189[rsp], 0
$LN33@main:
  00326	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0032c	8b 08		 mov	 ecx, DWORD PTR [rax]
  0032e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00334	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv173[rsp], rax
  0033c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00341	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00348	48 89 8c 24 e0
	00 00 00	 mov	 QWORD PTR tv178[rsp], rcx
  00350	b9 02 00 00 00	 mov	 ecx, 2
  00355	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0035b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv173[rsp]
  00363	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00368	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159632
  0036f	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00374	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv178[rsp]
  0037c	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00381	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv183[rsp]
  00388	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0038c	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv189[rsp]
  00393	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00397	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159633
  0039e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159634
  003aa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003af	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003b4	41 b9 03 00 00
	00		 mov	 r9d, 3
  003ba	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159635
  003c1	ba 4b 00 00 00	 mov	 edx, 75			; 0000004bH
  003c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159636
  003cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 75   :                     "open()", strerror( errno ));
; 76   :             continue;

  003d3	e9 54 fe ff ff	 jmp	 $LN7@main
$LN20@main:

; 77   :         }
; 78   : 
; 79   :         /* Read the device header */
; 80   :         rc = read (dev->fd, &devhdr, CKD_DEVHDR_SIZE);

  003d8	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  003de	48 8d 94 24 20
	01 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  003e6	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  003eb	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  003f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  003f7	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 81   :         if (rc < (int)CKD_DEVHDR_SIZE)

  003fb	81 7c 24 78 00
	02 00 00	 cmp	 DWORD PTR rc$[rsp], 512	; 00000200H
  00403	0f 8d 24 01 00
	00		 jge	 $LN21@main

; 82   :         {
; 83   :             const char* emsg = "CKD header incomplete";

  00409	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159638
  00410	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR emsg$1[rsp], rax

; 84   :             if (rc < 0)

  00418	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0041d	7d 16		 jge	 SHORT $LN22@main

; 85   :                 emsg = strerror( errno );

  0041f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00425	8b 08		 mov	 ecx, DWORD PTR [rax]
  00427	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0042d	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR emsg$1[rsp], rax
$LN22@main:

; 86   : 
; 87   :             // "%1d:%04X CCKD file %s: error in function %s: %s"
; 88   :             FWRMSG( stderr, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  00435	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0043b	74 12		 je	 SHORT $LN34@main
  0043d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00442	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00446	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv217[rsp], eax
  0044d	eb 0b		 jmp	 SHORT $LN35@main
$LN34@main:
  0044f	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv217[rsp], 0
$LN35@main:
  0045a	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00460	74 14		 je	 SHORT $LN36@main
  00462	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00467	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0046b	d1 f8		 sar	 eax, 1
  0046d	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv223[rsp], eax
  00474	eb 0b		 jmp	 SHORT $LN37@main
$LN36@main:
  00476	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv223[rsp], 0
$LN37@main:
  00481	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00486	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0048c	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv212[rsp], rax
  00494	b9 02 00 00 00	 mov	 ecx, 2
  00499	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0049f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR emsg$1[rsp]
  004a7	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  004ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159640
  004b3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  004b8	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv212[rsp]
  004c0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  004c5	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv217[rsp]
  004cc	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  004d0	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv223[rsp]
  004d7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  004db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159641
  004e2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159642
  004ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004f8	41 b9 03 00 00
	00		 mov	 r9d, 3
  004fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159643
  00505	ba 59 00 00 00	 mov	 edx, 89			; 00000059H
  0050a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159644
  00511	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 89   :                     "read()", emsg );
; 90   :             close( dev->fd );

  00517	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0051c	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00522	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 91   :             continue;

  00528	e9 ff fc ff ff	 jmp	 $LN7@main
$LN21@main:

; 92   :         }
; 93   : 
; 94   :         /* Check the device header identifier */
; 95   :         if (!is_dh_devid_typ( devhdr.dh_devid, ANY64_CMP_OR_SF_TYP ))

  0052d	ba 60 00 60 00	 mov	 edx, 6291552		; 00600060H
  00532	48 8d 8c 24 20
	01 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  0053a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_dh_devid_typ
  00540	0f b6 c0	 movzx	 eax, al
  00543	85 c0		 test	 eax, eax
  00545	75 7d		 jne	 SHORT $LN23@main

; 96   :         {
; 97   :             // "Dasd image file format unsupported or unrecognized: %s"
; 98   :             FWRMSG( stderr, HHC02424, "E", dev->filename );

  00547	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0054c	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00552	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv241[rsp], rax
  0055a	b9 02 00 00 00	 mov	 ecx, 2
  0055f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00565	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv241[rsp]
  0056d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00572	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159646
  00579	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0057e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159647
  00585	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0058a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0058f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00595	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159648
  0059c	ba 62 00 00 00	 mov	 edx, 98			; 00000062H
  005a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159649
  005a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 99   :             close( dev->fd );

  005ae	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  005b3	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  005b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 100  :             continue;

  005bf	e9 68 fc ff ff	 jmp	 $LN7@main
$LN23@main:

; 101  :         }
; 102  :         dev->cckd64 = 1;

  005c4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  005c9	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  005d0	0c 01		 or	 al, 1
  005d2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  005d7	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 103  : 
; 104  :         /* Check CCKD_OPT_OPENED bit if -f not specified */
; 105  :         if (!force)

  005dd	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR force$[rsp], 0
  005e5	0f 85 91 03 00
	00		 jne	 $LN24@main

; 106  :         {
; 107  :             if (lseek (dev->fd, CCKD64_DEVHDR_POS, SEEK_SET) < 0)

  005eb	45 33 c0	 xor	 r8d, r8d
  005ee	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  005f3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  005f8	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  005fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00604	48 85 c0	 test	 rax, rax
  00607	0f 8d 18 01 00
	00		 jge	 $LN25@main

; 108  :             {
; 109  :                 // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 110  :                 FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0060d	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00613	74 12		 je	 SHORT $LN38@main
  00615	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0061a	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0061e	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv275[rsp], eax
  00625	eb 0b		 jmp	 SHORT $LN39@main
$LN38@main:
  00627	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv275[rsp], 0
$LN39@main:
  00632	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00638	74 14		 je	 SHORT $LN40@main
  0063a	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0063f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00643	d1 f8		 sar	 eax, 1
  00645	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv281[rsp], eax
  0064c	eb 0b		 jmp	 SHORT $LN41@main
$LN40@main:
  0064e	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv281[rsp], 0
$LN41@main:
  00659	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0065f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00661	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00667	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv264[rsp], rax
  0066f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00674	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0067b	48 89 8c 24 00
	01 00 00	 mov	 QWORD PTR tv270[rsp], rcx
  00683	b9 02 00 00 00	 mov	 ecx, 2
  00688	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0068e	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv264[rsp]
  00696	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0069b	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  006a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159652
  006ab	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  006b0	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv270[rsp]
  006b8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  006bd	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv275[rsp]
  006c4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  006c8	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv281[rsp]
  006cf	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  006d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159653
  006da	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159654
  006e6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006eb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006f0	41 b9 03 00 00
	00		 mov	 r9d, 3
  006f6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159655
  006fd	ba 6f 00 00 00	 mov	 edx, 111		; 0000006fH
  00702	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159656
  00709	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 111  :                         "lseek()", (U64)CCKD64_DEVHDR_POS, strerror( errno ));
; 112  :                 close (dev->fd);

  0070f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00714	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0071a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 113  :                 continue;

  00720	e9 07 fb ff ff	 jmp	 $LN7@main
$LN25@main:

; 114  :             }
; 115  :             if ((rc = read (dev->fd, &cdevhdr, CCKD64_DEVHDR_SIZE)) < CCKD64_DEVHDR_SIZE)

  00725	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  0072b	48 8d 94 24 20
	03 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  00733	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00738	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0073e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00744	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00748	48 63 44 24 78	 movsxd	 rax, DWORD PTR rc$[rsp]
  0074d	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  00753	0f 8d 2f 01 00
	00		 jge	 $LN26@main

; 116  :             {
; 117  :                 // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 118  :                 FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  00759	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  0075e	7d 18		 jge	 SHORT $LN42@main
  00760	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00766	8b 08		 mov	 ecx, DWORD PTR [rax]
  00768	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0076e	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv305[rsp], rax
  00776	eb 0f		 jmp	 SHORT $LN43@main
$LN42@main:
  00778	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159658
  0077f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv305[rsp], rax
$LN43@main:
  00787	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0078d	74 12		 je	 SHORT $LN44@main
  0078f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00794	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00798	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv314[rsp], eax
  0079f	eb 0b		 jmp	 SHORT $LN45@main
$LN44@main:
  007a1	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv314[rsp], 0
$LN45@main:
  007ac	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  007b2	74 14		 je	 SHORT $LN46@main
  007b4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007b9	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  007bd	d1 f8		 sar	 eax, 1
  007bf	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv320[rsp], eax
  007c6	eb 0b		 jmp	 SHORT $LN47@main
$LN46@main:
  007c8	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv320[rsp], 0
$LN47@main:
  007d3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007d8	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  007de	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv309[rsp], rax
  007e6	b9 02 00 00 00	 mov	 ecx, 2
  007eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007f1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv305[rsp]
  007f9	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  007fe	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  00807	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159659
  0080e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00813	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv309[rsp]
  0081b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00820	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv314[rsp]
  00827	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0082b	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv320[rsp]
  00832	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00836	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159660
  0083d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00842	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159661
  00849	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0084e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00853	41 b9 03 00 00
	00		 mov	 r9d, 3
  00859	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159662
  00860	ba 77 00 00 00	 mov	 edx, 119		; 00000077H
  00865	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159663
  0086c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 119  :                         "read()", (U64)CCKD64_DEVHDR_POS, rc < 0 ? strerror( errno ) : "incomplete" );
; 120  :                 close (dev->fd);

  00872	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00877	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0087d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 121  :                 continue;

  00883	e9 a4 f9 ff ff	 jmp	 $LN7@main
$LN26@main:

; 122  :             }
; 123  :             if (cdevhdr.cdh_opts & CCKD_OPT_OPENED)

  00888	0f b6 84 24 23
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  00890	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00895	85 c0		 test	 eax, eax
  00897	0f 84 df 00 00
	00		 je	 $LN27@main

; 124  :             {
; 125  :                 // "%1d:%04X CCKD file %s: opened bit is on, use -f"
; 126  :                 FWRMSG( stderr, HHC00352, "E", LCSS_DEVNUM, dev->filename );

  0089d	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  008a3	74 12		 je	 SHORT $LN48@main
  008a5	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  008aa	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  008ae	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv341[rsp], eax
  008b5	eb 0b		 jmp	 SHORT $LN49@main
$LN48@main:
  008b7	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv341[rsp], 0
$LN49@main:
  008c2	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  008c8	74 14		 je	 SHORT $LN50@main
  008ca	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  008cf	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  008d3	d1 f8		 sar	 eax, 1
  008d5	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv347[rsp], eax
  008dc	eb 0b		 jmp	 SHORT $LN51@main
$LN50@main:
  008de	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv347[rsp], 0
$LN51@main:
  008e9	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  008ee	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  008f4	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv336[rsp], rax
  008fc	b9 02 00 00 00	 mov	 ecx, 2
  00901	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00907	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv336[rsp]
  0090f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00914	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv341[rsp]
  0091b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0091f	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv347[rsp]
  00926	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0092a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159665
  00931	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00936	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159666
  0093d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00942	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00947	41 b9 03 00 00
	00		 mov	 r9d, 3
  0094d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159667
  00954	ba 7e 00 00 00	 mov	 edx, 126		; 0000007eH
  00959	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159668
  00960	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 127  :                 close (dev->fd);

  00966	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0096b	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00971	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 128  :                 continue;

  00977	e9 b0 f8 ff ff	 jmp	 $LN7@main
$LN27@main:
$LN24@main:

; 129  :             }
; 130  :         } /* if (!force) */
; 131  : 
; 132  :         /* call chkdsk */
; 133  :         if (cckd64_chkdsk (dev, level) < 0)

  0097c	8b 94 24 ac 00
	00 00		 mov	 edx, DWORD PTR level$[rsp]
  00983	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00988	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd64_chkdsk
  0098e	85 c0		 test	 eax, eax
  00990	0f 8d df 00 00
	00		 jge	 $LN28@main

; 134  :         {
; 135  :             FWRMSG( stderr, HHC00353, "E", LCSS_DEVNUM, dev->filename );

  00996	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0099c	74 12		 je	 SHORT $LN52@main
  0099e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009a3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  009a7	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv369[rsp], eax
  009ae	eb 0b		 jmp	 SHORT $LN53@main
$LN52@main:
  009b0	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv369[rsp], 0
$LN53@main:
  009bb	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  009c1	74 14		 je	 SHORT $LN54@main
  009c3	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009c8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  009cc	d1 f8		 sar	 eax, 1
  009ce	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv375[rsp], eax
  009d5	eb 0b		 jmp	 SHORT $LN55@main
$LN54@main:
  009d7	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv375[rsp], 0
$LN55@main:
  009e2	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009e7	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  009ed	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv364[rsp], rax
  009f5	b9 02 00 00 00	 mov	 ecx, 2
  009fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00a00	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv364[rsp]
  00a08	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00a0d	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv369[rsp]
  00a14	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00a18	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv375[rsp]
  00a1f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00a23	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159670
  00a2a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a2f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159671
  00a36	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a3b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a40	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a46	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159672
  00a4d	ba 87 00 00 00	 mov	 edx, 135		; 00000087H
  00a52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159673
  00a59	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 136  :             close (dev->fd);

  00a5f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a64	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00a6a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 137  :             continue;

  00a70	e9 b7 f7 ff ff	 jmp	 $LN7@main
$LN28@main:

; 138  :         }
; 139  : 
; 140  :         /* call compress */
; 141  :         rc = cckd64_comp (dev);

  00a75	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00a7a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd64_comp
  00a80	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 142  : 
; 143  :         close (dev->fd);

  00a84	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a89	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00a8f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 144  : 
; 145  :     } /* for each arg */

  00a95	e9 92 f7 ff ff	 jmp	 $LN7@main
$LN8@main:

; 146  : 
; 147  :     return 0;

  00a9a	33 c0		 xor	 eax, eax
$LN1@main:

; 148  : }

  00a9c	48 8b 8c 24 c0
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00aa4	48 33 cc	 xor	 rcx, rsp
  00aa7	e8 00 00 00 00	 call	 __security_check_cookie
  00aac	48 81 c4 d0 20
	00 00		 add	 rsp, 8400		; 000020d0H
  00ab3	5f		 pop	 rdi
  00ab4	c3		 ret	 0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdcomp64.c
_TEXT	SEGMENT
pgm$ = 80
syntax	PROC

; 155  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 156  :     WRMSG( HHC02497, "I", pgm );

  00009	b9 01 00 00 00	 mov	 ecx, 1
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00014	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pgm$[rsp]
  00019	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159677
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159678
  00031	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00036	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00041	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159679
  00048	ba 9c 00 00 00	 mov	 edx, 156		; 0000009cH
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159680
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 157  :     return -1;

  0005a	b8 ff ff ff ff	 mov	 eax, -1

; 158  : }

  0005f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00063	c3		 ret	 0
syntax	ENDP
_TEXT	ENDS
END
