; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	_get_storekey_ptr
PUBLIC	_get_dev_storekey_ptr
PUBLIC	_get_storekey1_ptr
PUBLIC	_get_storekey2_ptr
PUBLIC	_get_dev_storekey1_ptr
PUBLIC	_get_dev_storekey2_ptr
PUBLIC	s370__get_storage_key
PUBLIC	s370__get_dev_storage_key
PUBLIC	s370__put_storage_key
PUBLIC	s370__and_storage_key
PUBLIC	s370__or_storage_key
PUBLIC	s370__or_dev_storage_key
PUBLIC	s370_get_ptr_to_2K_storekey
PUBLIC	s370_get_2K_storage_key
PUBLIC	s370_put_2K_storage_key
PUBLIC	s370_and_2K_storage_key
PUBLIC	s370_or_2K_storage_key
PUBLIC	s370_get_dev_2K_storage_key
PUBLIC	s370_or_dev_2K_storage_key
PUBLIC	s370_get_ptr_to_4K_storekey
PUBLIC	s370_get_4K_storage_key
PUBLIC	s370_put_4K_storage_key
PUBLIC	s370_and_4K_storage_key
PUBLIC	s370_or_4K_storage_key
PUBLIC	s370_get_dev_4K_storage_key
PUBLIC	s370_or_dev_4K_storage_key
PUBLIC	s370_get_storage_key
PUBLIC	s370_get_dev_storage_key
PUBLIC	s370_put_storage_key
PUBLIC	s370_and_storage_key
PUBLIC	s370_or_storage_key
PUBLIC	s370_or_dev_storage_key
PUBLIC	s370_get_ptr_to_storekey
PUBLIC	s370_get_storekey_by_ptr
PUBLIC	s370_or_storage_key_by_ptr
PUBLIC	bypass_skey_update
PUBLIC	s390__get_storage_key
PUBLIC	s390__get_dev_storage_key
PUBLIC	s390__put_storage_key
PUBLIC	s390__and_storage_key
PUBLIC	s390__or_storage_key
PUBLIC	s390__or_dev_storage_key
PUBLIC	s390_get_ptr_to_4K_storekey
PUBLIC	s390_get_4K_storage_key
PUBLIC	s390_put_4K_storage_key
PUBLIC	s390_and_4K_storage_key
PUBLIC	s390_or_4K_storage_key
PUBLIC	s390_get_dev_4K_storage_key
PUBLIC	s390_or_dev_4K_storage_key
PUBLIC	s390_get_storage_key
PUBLIC	s390_get_dev_storage_key
PUBLIC	s390_put_storage_key
PUBLIC	s390_and_storage_key
PUBLIC	s390_or_storage_key
PUBLIC	s390_or_dev_storage_key
PUBLIC	s390_get_ptr_to_storekey
PUBLIC	s390_get_storekey_by_ptr
PUBLIC	s390_or_storage_key_by_ptr
PUBLIC	z900__get_storage_key
PUBLIC	z900__get_dev_storage_key
PUBLIC	z900__put_storage_key
PUBLIC	z900__and_storage_key
PUBLIC	z900__or_storage_key
PUBLIC	z900__or_dev_storage_key
PUBLIC	z900_get_ptr_to_4K_storekey
PUBLIC	z900_get_4K_storage_key
PUBLIC	z900_put_4K_storage_key
PUBLIC	z900_and_4K_storage_key
PUBLIC	z900_or_4K_storage_key
PUBLIC	z900_get_dev_4K_storage_key
PUBLIC	z900_or_dev_4K_storage_key
PUBLIC	z900_get_storage_key
PUBLIC	z900_get_dev_storage_key
PUBLIC	z900_put_storage_key
PUBLIC	z900_and_storage_key
PUBLIC	z900_or_storage_key
PUBLIC	z900_or_dev_storage_key
PUBLIC	z900_get_ptr_to_storekey
PUBLIC	z900_get_storekey_by_ptr
PUBLIC	z900_or_storage_key_by_ptr
EXTRN	__imp_sysblk:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_get_storekey_ptr DD imagerel $LN5
	DD	imagerel $LN5+104
	DD	imagerel $unwind$_get_storekey_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_get_dev_storekey_ptr DD imagerel $LN5
	DD	imagerel $LN5+106
	DD	imagerel $unwind$_get_dev_storekey_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370__get_storage_key DD imagerel $LN8
	DD	imagerel $LN8+118
	DD	imagerel $unwind$s370__get_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370__get_dev_storage_key DD imagerel $LN8
	DD	imagerel $LN8+140
	DD	imagerel $unwind$s370__get_dev_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370__put_storage_key DD imagerel $LN8
	DD	imagerel $LN8+104
	DD	imagerel $unwind$s370__put_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370__and_storage_key DD imagerel $LN8
	DD	imagerel $LN8+176
	DD	imagerel $unwind$s370__and_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370__or_storage_key DD imagerel $LN8
	DD	imagerel $LN8+170
	DD	imagerel $unwind$s370__or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370__or_dev_storage_key DD imagerel $LN8
	DD	imagerel $LN8+192
	DD	imagerel $unwind$s370__or_dev_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_get_ptr_to_2K_storekey DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$s370_get_ptr_to_2K_storekey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_get_2K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$s370_get_2K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_put_2K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$s370_put_2K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_and_2K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$s370_and_2K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_or_2K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$s370_or_2K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_get_dev_2K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$s370_get_dev_2K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_or_dev_2K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$s370_or_dev_2K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_get_ptr_to_4K_storekey DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$s370_get_ptr_to_4K_storekey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_get_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$s370_get_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_put_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$s370_put_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_and_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$s370_and_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_or_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$s370_or_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_get_dev_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$s370_get_dev_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_or_dev_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$s370_or_dev_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_get_storage_key DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$s370_get_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_get_dev_storage_key DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_get_dev_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_put_storage_key DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$s370_put_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_and_storage_key DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$s370_and_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_or_storage_key DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$s370_or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_or_dev_storage_key DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$s370_or_dev_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_get_ptr_to_storekey DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$s370_get_ptr_to_storekey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_get_storekey_by_ptr DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$s370_get_storekey_by_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_or_storage_key_by_ptr DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$s370_or_storage_key_by_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390__get_storage_key DD imagerel $LN8
	DD	imagerel $LN8+107
	DD	imagerel $unwind$s390__get_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390__get_dev_storage_key DD imagerel $LN8
	DD	imagerel $LN8+129
	DD	imagerel $unwind$s390__get_dev_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390__put_storage_key DD imagerel $LN8
	DD	imagerel $LN8+93
	DD	imagerel $unwind$s390__put_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390__and_storage_key DD imagerel $LN8
	DD	imagerel $LN8+165
	DD	imagerel $unwind$s390__and_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390__or_storage_key DD imagerel $LN8
	DD	imagerel $LN8+159
	DD	imagerel $unwind$s390__or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390__or_dev_storage_key DD imagerel $LN8
	DD	imagerel $LN8+181
	DD	imagerel $unwind$s390__or_dev_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_get_ptr_to_4K_storekey DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$s390_get_ptr_to_4K_storekey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_get_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$s390_get_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_put_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$s390_put_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_and_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$s390_and_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_or_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$s390_or_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_get_dev_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$s390_get_dev_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_or_dev_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$s390_or_dev_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_get_storage_key DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$s390_get_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_get_dev_storage_key DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_get_dev_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_put_storage_key DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$s390_put_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_and_storage_key DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$s390_and_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_or_storage_key DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$s390_or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_or_dev_storage_key DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$s390_or_dev_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_get_ptr_to_storekey DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$s390_get_ptr_to_storekey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_get_storekey_by_ptr DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$s390_get_storekey_by_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_or_storage_key_by_ptr DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$s390_or_storage_key_by_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900__get_storage_key DD imagerel $LN8
	DD	imagerel $LN8+107
	DD	imagerel $unwind$z900__get_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900__get_dev_storage_key DD imagerel $LN8
	DD	imagerel $LN8+129
	DD	imagerel $unwind$z900__get_dev_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900__put_storage_key DD imagerel $LN8
	DD	imagerel $LN8+93
	DD	imagerel $unwind$z900__put_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900__and_storage_key DD imagerel $LN8
	DD	imagerel $LN8+165
	DD	imagerel $unwind$z900__and_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900__or_storage_key DD imagerel $LN8
	DD	imagerel $LN8+159
	DD	imagerel $unwind$z900__or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900__or_dev_storage_key DD imagerel $LN8
	DD	imagerel $LN8+181
	DD	imagerel $unwind$z900__or_dev_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_get_ptr_to_4K_storekey DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$z900_get_ptr_to_4K_storekey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_get_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$z900_get_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_put_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$z900_put_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_and_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$z900_and_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_or_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$z900_or_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_get_dev_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$z900_get_dev_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_or_dev_4K_storage_key DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$z900_or_dev_4K_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_get_storage_key DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$z900_get_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_get_dev_storage_key DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_get_dev_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_put_storage_key DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$z900_put_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_and_storage_key DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$z900_and_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_or_storage_key DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$z900_or_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_or_dev_storage_key DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$z900_or_dev_storage_key
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_get_ptr_to_storekey DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$z900_get_ptr_to_storekey
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_get_storekey_by_ptr DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$z900_get_storekey_by_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_or_storage_key_by_ptr DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$z900_or_storage_key_by_ptr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_or_storage_key_by_ptr DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_get_storekey_by_ptr DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_get_ptr_to_storekey DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_or_dev_storage_key DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_or_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_and_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_put_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_get_dev_storage_key DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_get_storage_key DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_or_dev_4K_storage_key DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_get_dev_4K_storage_key DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_or_4K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_and_4K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_put_4K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_get_4K_storage_key DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_get_ptr_to_4K_storekey DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900__or_dev_storage_key DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900__or_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900__and_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900__put_storage_key DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900__get_dev_storage_key DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900__get_storage_key DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_or_storage_key_by_ptr DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_get_storekey_by_ptr DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_get_ptr_to_storekey DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_or_dev_storage_key DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_or_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_and_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_put_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_get_dev_storage_key DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_get_storage_key DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_or_dev_4K_storage_key DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_get_dev_4K_storage_key DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_or_4K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_and_4K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_put_4K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_get_4K_storage_key DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_get_ptr_to_4K_storekey DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390__or_dev_storage_key DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390__or_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390__and_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390__put_storage_key DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390__get_dev_storage_key DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390__get_storage_key DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_or_storage_key_by_ptr DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_get_storekey_by_ptr DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_get_ptr_to_storekey DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_or_dev_storage_key DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_or_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_and_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_put_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_get_dev_storage_key DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_get_storage_key DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_or_dev_4K_storage_key DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_get_dev_4K_storage_key DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_or_4K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_and_4K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_put_4K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_get_4K_storage_key DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_get_ptr_to_4K_storekey DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_or_dev_2K_storage_key DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_get_dev_2K_storage_key DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_or_2K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_and_2K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_put_2K_storage_key DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_get_2K_storage_key DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_get_ptr_to_2K_storekey DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370__or_dev_storage_key DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370__or_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370__and_storage_key DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370__put_storage_key DD 011201H
	DD	04212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370__get_dev_storage_key DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370__get_storage_key DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_get_dev_storekey_ptr DD 011301H
	DD	02213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_get_storekey_ptr DD 010d01H
	DD	0220dH
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_or_storage_key_by_ptr
_TEXT	SEGMENT
abs$ = 32
skey_ptr$ = 64
bits$ = 72
z900_or_storage_key_by_ptr PROC				; COMDAT

; 328  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 329  :     U64 abs = (skey_ptr - sysblk.storkeys) << _STORKEY_ARRAY_SHIFTAMT;

  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00014	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0001b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR skey_ptr$[rsp]
  00020	48 2b c8	 sub	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx
  00026	48 c1 e0 0b	 shl	 rax, 11
  0002a	48 89 44 24 20	 mov	 QWORD PTR abs$[rsp], rax

; 330  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 331  :     ARCH_DEP( or_2K_storage_key )( abs, bits );
; 332  : #else
; 333  :     ARCH_DEP( or_4K_storage_key )( abs, bits );

  0002f	0f b6 54 24 48	 movzx	 edx, BYTE PTR bits$[rsp]
  00034	48 8b 4c 24 20	 mov	 rcx, QWORD PTR abs$[rsp]
  00039	e8 00 00 00 00	 call	 z900_or_4K_storage_key

; 334  : #endif
; 335  : }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
z900_or_storage_key_by_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_get_storekey_by_ptr
_TEXT	SEGMENT
abs$ = 32
skey_ptr$ = 64
z900_get_storekey_by_ptr PROC				; COMDAT

; 317  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 318  :     U64 abs = (skey_ptr - sysblk.storkeys) << _STORKEY_ARRAY_SHIFTAMT;

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00010	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR skey_ptr$[rsp]
  0001c	48 2b c8	 sub	 rcx, rax
  0001f	48 8b c1	 mov	 rax, rcx
  00022	48 c1 e0 0b	 shl	 rax, 11
  00026	48 89 44 24 20	 mov	 QWORD PTR abs$[rsp], rax

; 319  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 320  :     return ARCH_DEP( get_2K_storage_key )( abs );
; 321  : #else
; 322  :     return ARCH_DEP( get_4K_storage_key )( abs );

  0002b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR abs$[rsp]
  00030	e8 00 00 00 00	 call	 z900_get_4K_storage_key

; 323  : #endif
; 324  : }

  00035	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00039	c3		 ret	 0
z900_get_storekey_by_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_get_ptr_to_storekey
_TEXT	SEGMENT
abs$ = 48
z900_get_ptr_to_storekey PROC				; COMDAT

; 308  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 309  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 310  :     return ARCH_DEP( get_ptr_to_2K_storekey )( abs );
; 311  : #else
; 312  :     return ARCH_DEP( get_ptr_to_4K_storekey )( abs );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  0000e	e8 00 00 00 00	 call	 z900_get_ptr_to_4K_storekey

; 313  : #endif
; 314  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
z900_get_ptr_to_storekey ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_or_dev_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
bits$ = 64
z900_or_dev_storage_key PROC				; COMDAT

; 299  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 300  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 301  :     ARCH_DEP( or_dev_2K_storage_key )( dev, abs, bits );
; 302  : #else
; 303  :     ARCH_DEP( or_dev_4K_storage_key )( dev, abs, bits );

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR bits$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00023	e8 00 00 00 00	 call	 z900_or_dev_4K_storage_key

; 304  : #endif
; 305  : }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
z900_or_dev_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_or_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
z900_or_storage_key PROC				; COMDAT

; 290  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 291  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 292  :     ARCH_DEP( or_2K_storage_key )( abs, bits );
; 293  : #else
; 294  :     ARCH_DEP( or_4K_storage_key )( abs, bits );

  0000d	0f b6 54 24 38	 movzx	 edx, BYTE PTR bits$[rsp]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00017	e8 00 00 00 00	 call	 z900_or_4K_storage_key

; 295  : #endif
; 296  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
z900_or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_and_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
z900_and_storage_key PROC				; COMDAT

; 281  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 282  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 283  :     ARCH_DEP( and_2K_storage_key )( abs, bits );
; 284  : #else
; 285  :     ARCH_DEP( and_4K_storage_key )( abs, bits );

  0000d	0f b6 54 24 38	 movzx	 edx, BYTE PTR bits$[rsp]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00017	e8 00 00 00 00	 call	 z900_and_4K_storage_key

; 286  : #endif
; 287  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
z900_and_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_put_storage_key
_TEXT	SEGMENT
abs$ = 48
key$ = 56
z900_put_storage_key PROC				; COMDAT

; 272  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 273  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 274  :     ARCH_DEP( put_2K_storage_key )( abs, key );
; 275  : #else
; 276  :     ARCH_DEP( put_4K_storage_key )( abs, key );

  0000d	0f b6 54 24 38	 movzx	 edx, BYTE PTR key$[rsp]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00017	e8 00 00 00 00	 call	 z900_put_4K_storage_key

; 277  : #endif
; 278  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
z900_put_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_get_dev_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
z900_get_dev_storage_key PROC				; COMDAT

; 263  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 264  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 265  :     return ARCH_DEP( get_dev_2K_storage_key )( dev, abs );
; 266  : #else
; 267  :     return ARCH_DEP( get_dev_4K_storage_key )( dev, abs );

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00018	e8 00 00 00 00	 call	 z900_get_dev_4K_storage_key

; 268  : #endif
; 269  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_get_dev_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_get_storage_key
_TEXT	SEGMENT
abs$ = 48
z900_get_storage_key PROC				; COMDAT

; 254  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 255  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 256  :     return ARCH_DEP( get_2K_storage_key )( abs );
; 257  : #else
; 258  :     return ARCH_DEP( get_4K_storage_key )( abs );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  0000e	e8 00 00 00 00	 call	 z900_get_4K_storage_key

; 259  : #endif
; 260  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
z900_get_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_or_dev_4K_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
bits$ = 64
z900_or_dev_4K_storage_key PROC				; COMDAT

; 246  :   inline void  ARCH_DEP( or_dev_4K_storage_key )  ( DEVBLK* dev, U64 abs, BYTE bits ) {        ARCH_DEP( _or_dev_storage_key  )( dev, abs, bits & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	0f b6 44 24 40	 movzx	 eax, BYTE PTR bits$[rsp]
  00018	83 e0 fe	 and	 eax, -2
  0001b	41 b1 04	 mov	 r9b, 4
  0001e	44 0f b6 c0	 movzx	 r8d, al
  00022	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0002c	e8 00 00 00 00	 call	 z900__or_dev_storage_key
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
z900_or_dev_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_get_dev_4K_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
z900_get_dev_4K_storage_key PROC			; COMDAT

; 244  :   inline BYTE  ARCH_DEP( get_dev_4K_storage_key ) ( DEVBLK* dev, U64 abs            ) { return ARCH_DEP( _get_dev_storage_key )( dev, abs, 4 )  & ~STORKEY_BADFRM;      }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	41 b0 04	 mov	 r8b, 4
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0001b	e8 00 00 00 00	 call	 z900__get_dev_storage_key
  00020	0f b6 c0	 movzx	 eax, al
  00023	83 e0 fe	 and	 eax, -2
  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
z900_get_dev_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_or_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
z900_or_4K_storage_key PROC				; COMDAT

; 242  :   inline void  ARCH_DEP( or_4K_storage_key )      (              U64 abs, BYTE bits ) {        ARCH_DEP( _or_storage_key      )(      abs, bits & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR bits$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 04	 mov	 r8b, 4
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 z900__or_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
z900_or_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_and_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
z900_and_4K_storage_key PROC				; COMDAT

; 241  :   inline void  ARCH_DEP( and_4K_storage_key )     (              U64 abs, BYTE bits ) {        ARCH_DEP( _and_storage_key     )(      abs, bits & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR bits$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 04	 mov	 r8b, 4
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 z900__and_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
z900_and_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_put_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
key$ = 56
z900_put_4K_storage_key PROC				; COMDAT

; 240  :   inline void  ARCH_DEP( put_4K_storage_key )     (              U64 abs, BYTE key  ) {        ARCH_DEP( _put_storage_key     )(      abs, key  & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR key$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 04	 mov	 r8b, 4
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 z900__put_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
z900_put_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_get_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
z900_get_4K_storage_key PROC				; COMDAT

; 239  :   inline BYTE  ARCH_DEP( get_4K_storage_key )     (              U64 abs            ) { return ARCH_DEP( _get_storage_key     )(      abs, 4 )  & ~STORKEY_BADFRM;      }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b2 04		 mov	 dl, 4
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00010	e8 00 00 00 00	 call	 z900__get_storage_key
  00015	0f b6 c0	 movzx	 eax, al
  00018	83 e0 fe	 and	 eax, -2
  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
z900_get_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900_get_ptr_to_4K_storekey
_TEXT	SEGMENT
abs$ = 48
z900_get_ptr_to_4K_storekey PROC			; COMDAT

; 238  :   inline BYTE* ARCH_DEP( get_ptr_to_4K_storekey ) (              U64 abs            ) { return           _get_storekey_ptr     (      abs, 4 );                         }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b2 04		 mov	 dl, 4
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00010	e8 00 00 00 00	 call	 _get_storekey_ptr
  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
z900_get_ptr_to_4K_storekey ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900__or_dev_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
dev$ = 80
abs$ = 88
bits$ = 96
K$ = 104
z900__or_dev_storage_key PROC				; COMDAT

; 206  : {

$LN8:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@z900__or_d:

; 207  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN4@z900__or_d

; 208  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  0001e	33 c0		 xor	 eax, eax
  00020	85 c0		 test	 eax, eax
  00022	74 5a		 je	 SHORT $LN5@z900__or_d

; 209  :     {
; 210  :         BYTE* skey1_ptr = _get_dev_storekey1_ptr( dev, abs );

  00024	48 8b 54 24 58	 mov	 rdx, QWORD PTR abs$[rsp]
  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  0002e	e8 00 00 00 00	 call	 _get_dev_storekey1_ptr
  00033	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 211  :         BYTE* skey2_ptr = _get_dev_storekey2_ptr( dev, abs );

  00038	48 8b 54 24 58	 mov	 rdx, QWORD PTR abs$[rsp]
  0003d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00042	e8 00 00 00 00	 call	 _get_dev_storekey2_ptr
  00047	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 212  :         OR_SKEY( skey1_ptr, bits );

  0004c	0f b6 44 24 60	 movzx	 eax, BYTE PTR bits$[rsp]
  00051	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00056	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00062	88 01		 mov	 BYTE PTR [rcx], al

; 213  :         OR_SKEY( skey2_ptr, bits );

  00064	0f b6 44 24 60	 movzx	 eax, BYTE PTR bits$[rsp]
  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006e	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00071	0b c8		 or	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0007a	88 01		 mov	 BYTE PTR [rcx], al

; 214  :     }

  0007c	eb 32		 jmp	 SHORT $LN6@z900__or_d
$LN5@z900__or_d:

; 215  :     else
; 216  :     {
; 217  :         BYTE* skey_ptr  = _get_dev_storekey_ptr(  dev, abs, K );

  0007e	44 0f b6 44 24
	68		 movzx	 r8d, BYTE PTR K$[rsp]
  00084	48 8b 54 24 58	 mov	 rdx, QWORD PTR abs$[rsp]
  00089	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  0008e	e8 00 00 00 00	 call	 _get_dev_storekey_ptr
  00093	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 218  :         OR_SKEY( skey_ptr, bits );

  00098	0f b6 44 24 60	 movzx	 eax, BYTE PTR bits$[rsp]
  0009d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  000a2	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000a5	0b c8		 or	 ecx, eax
  000a7	8b c1		 mov	 eax, ecx
  000a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  000ae	88 01		 mov	 BYTE PTR [rcx], al
$LN6@z900__or_d:

; 219  :     }
; 220  : }

  000b0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b4	c3		 ret	 0
z900__or_dev_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900__or_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
z900__or_storage_key PROC				; COMDAT

; 189  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@z900__or_s:

; 190  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@z900__or_s

; 191  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 50		 je	 SHORT $LN5@z900__or_s

; 192  :     {
; 193  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00023	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00028	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 194  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00032	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00037	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 195  :         OR_SKEY( skey1_ptr, bits );

  0003c	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00046	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00049	0b c8		 or	 ecx, eax
  0004b	8b c1		 mov	 eax, ecx
  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00052	88 01		 mov	 BYTE PTR [rcx], al

; 196  :         OR_SKEY( skey2_ptr, bits );

  00054	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00059	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0005e	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00061	0b c8		 or	 ecx, eax
  00063	8b c1		 mov	 eax, ecx
  00065	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006a	88 01		 mov	 BYTE PTR [rcx], al

; 197  :     }

  0006c	eb 2c		 jmp	 SHORT $LN6@z900__or_s
$LN5@z900__or_s:

; 198  :     else
; 199  :     {
; 200  :         BYTE* skey_ptr  = _get_storekey_ptr( abs, K );

  0006e	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  00073	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00078	e8 00 00 00 00	 call	 _get_storekey_ptr
  0007d	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 201  :         OR_SKEY( skey_ptr, bits );

  00082	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00087	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  0008c	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0008f	0b c8		 or	 ecx, eax
  00091	8b c1		 mov	 eax, ecx
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00098	88 01		 mov	 BYTE PTR [rcx], al
$LN6@z900__or_s:

; 202  :     }
; 203  : }

  0009a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009e	c3		 ret	 0
z900__or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900__and_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
z900__and_storage_key PROC				; COMDAT

; 172  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@z900__and_:

; 173  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@z900__and_

; 174  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 54		 je	 SHORT $LN5@z900__and_

; 175  :     {
; 176  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00023	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00028	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 177  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00032	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00037	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 178  :         AND_SKEY( skey1_ptr, ~bits );

  0003c	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00041	f7 d0		 not	 eax
  00043	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00048	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0004b	23 c8		 and	 ecx, eax
  0004d	8b c1		 mov	 eax, ecx
  0004f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00054	88 01		 mov	 BYTE PTR [rcx], al

; 179  :         AND_SKEY( skey2_ptr, ~bits );

  00056	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0005b	f7 d0		 not	 eax
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00062	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00065	23 c8		 and	 ecx, eax
  00067	8b c1		 mov	 eax, ecx
  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006e	88 01		 mov	 BYTE PTR [rcx], al

; 180  :     }

  00070	eb 2e		 jmp	 SHORT $LN6@z900__and_
$LN5@z900__and_:

; 181  :     else
; 182  :     {
; 183  :         BYTE* skey_ptr  = _get_storekey_ptr(  abs, K );

  00072	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  00077	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0007c	e8 00 00 00 00	 call	 _get_storekey_ptr
  00081	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 184  :         AND_SKEY( skey_ptr, ~bits );

  00086	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0008b	f7 d0		 not	 eax
  0008d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00092	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00095	23 c8		 and	 ecx, eax
  00097	8b c1		 mov	 eax, ecx
  00099	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  0009e	88 01		 mov	 BYTE PTR [rcx], al
$LN6@z900__and_:

; 185  :     }
; 186  : }

  000a0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a4	c3		 ret	 0
z900__and_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900__put_storage_key
_TEXT	SEGMENT
abs$ = 48
key$ = 56
K$ = 64
z900__put_storage_key PROC				; COMDAT

; 158  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@z900__put_:

; 159  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@z900__put_

; 160  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 24		 je	 SHORT $LN5@z900__put_

; 161  :     {
; 162  :         *_get_storekey1_ptr( abs ) = key;

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00023	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00028	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR key$[rsp]
  0002d	88 08		 mov	 BYTE PTR [rax], cl

; 163  :         *_get_storekey2_ptr( abs ) = key;

  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00034	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00039	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR key$[rsp]
  0003e	88 08		 mov	 BYTE PTR [rax], cl

; 164  :     }

  00040	eb 16		 jmp	 SHORT $LN6@z900__put_
$LN5@z900__put_:

; 165  :     else
; 166  :     {
; 167  :         *_get_storekey_ptr(  abs, K ) = key;

  00042	0f b6 54 24 40	 movzx	 edx, BYTE PTR K$[rsp]
  00047	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  0004c	e8 00 00 00 00	 call	 _get_storekey_ptr
  00051	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR key$[rsp]
  00056	88 08		 mov	 BYTE PTR [rax], cl
$LN6@z900__put_:

; 168  :     }
; 169  : }

  00058	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005c	c3		 ret	 0
z900__put_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900__get_dev_storage_key
_TEXT	SEGMENT
skey$ = 32
dev$ = 64
abs$ = 72
K$ = 80
z900__get_dev_storage_key PROC				; COMDAT

; 144  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900__get_:

; 145  :     BYTE skey;
; 146  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00013	33 c0		 xor	 eax, eax
  00015	85 c0		 test	 eax, eax
  00017	75 fa		 jne	 SHORT $LN4@z900__get_

; 147  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00019	33 c0		 xor	 eax, eax
  0001b	85 c0		 test	 eax, eax
  0001d	74 3c		 je	 SHORT $LN5@z900__get_

; 148  :     {
; 149  :         skey  = *_get_dev_storekey1_ptr( dev, abs );

  0001f	48 8b 54 24 48	 mov	 rdx, QWORD PTR abs$[rsp]
  00024	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00029	e8 00 00 00 00	 call	 _get_dev_storekey1_ptr
  0002e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00031	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 150  :         skey |= *_get_dev_storekey2_ptr( dev, abs ) & ~(STORKEY_KEY);

  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR abs$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0003f	e8 00 00 00 00	 call	 _get_dev_storekey2_ptr
  00044	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00047	25 0f ff ff ff	 and	 eax, -241		; ffffffffffffff0fH
  0004c	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR skey$[rsp]
  00051	0b c8		 or	 ecx, eax
  00053	8b c1		 mov	 eax, ecx
  00055	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 151  :     }

  00059	eb 1c		 jmp	 SHORT $LN6@z900__get_
$LN5@z900__get_:

; 152  :     else
; 153  :         skey  = *_get_dev_storekey_ptr(  dev, abs, K );

  0005b	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR K$[rsp]
  00061	48 8b 54 24 48	 mov	 rdx, QWORD PTR abs$[rsp]
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0006b	e8 00 00 00 00	 call	 _get_dev_storekey_ptr
  00070	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00073	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al
$LN6@z900__get_:

; 154  :     return skey;

  00077	0f b6 44 24 20	 movzx	 eax, BYTE PTR skey$[rsp]

; 155  : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
z900__get_dev_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT z900__get_storage_key
_TEXT	SEGMENT
skey$ = 32
abs$ = 64
K$ = 72
z900__get_storage_key PROC				; COMDAT

; 130  : {

$LN8:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@z900__get_:

; 131  :     BYTE skey;
; 132  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  0000d	33 c0		 xor	 eax, eax
  0000f	85 c0		 test	 eax, eax
  00011	75 fa		 jne	 SHORT $LN4@z900__get_

; 133  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00013	33 c0		 xor	 eax, eax
  00015	85 c0		 test	 eax, eax
  00017	74 32		 je	 SHORT $LN5@z900__get_

; 134  :     {
; 135  :         skey  = *_get_storekey1_ptr( abs );

  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  0001e	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00023	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00026	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 136  :         skey |= *_get_storekey2_ptr( abs ) & ~(STORKEY_KEY);

  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  0002f	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00034	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00037	25 0f ff ff ff	 and	 eax, -241		; ffffffffffffff0fH
  0003c	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR skey$[rsp]
  00041	0b c8		 or	 ecx, eax
  00043	8b c1		 mov	 eax, ecx
  00045	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 137  :     }

  00049	eb 16		 jmp	 SHORT $LN6@z900__get_
$LN5@z900__get_:

; 138  :     else
; 139  :         skey  = *_get_storekey_ptr(  abs, K );

  0004b	0f b6 54 24 48	 movzx	 edx, BYTE PTR K$[rsp]
  00050	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  00055	e8 00 00 00 00	 call	 _get_storekey_ptr
  0005a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0005d	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al
$LN6@z900__get_:

; 140  :     return skey;

  00061	0f b6 44 24 20	 movzx	 eax, BYTE PTR skey$[rsp]

; 141  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
z900__get_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_or_storage_key_by_ptr
_TEXT	SEGMENT
abs$ = 32
skey_ptr$ = 64
bits$ = 72
s390_or_storage_key_by_ptr PROC				; COMDAT

; 328  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 329  :     U64 abs = (skey_ptr - sysblk.storkeys) << _STORKEY_ARRAY_SHIFTAMT;

  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00014	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0001b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR skey_ptr$[rsp]
  00020	48 2b c8	 sub	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx
  00026	48 c1 e0 0b	 shl	 rax, 11
  0002a	48 89 44 24 20	 mov	 QWORD PTR abs$[rsp], rax

; 330  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 331  :     ARCH_DEP( or_2K_storage_key )( abs, bits );
; 332  : #else
; 333  :     ARCH_DEP( or_4K_storage_key )( abs, bits );

  0002f	0f b6 54 24 48	 movzx	 edx, BYTE PTR bits$[rsp]
  00034	48 8b 4c 24 20	 mov	 rcx, QWORD PTR abs$[rsp]
  00039	e8 00 00 00 00	 call	 s390_or_4K_storage_key

; 334  : #endif
; 335  : }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
s390_or_storage_key_by_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_get_storekey_by_ptr
_TEXT	SEGMENT
abs$ = 32
skey_ptr$ = 64
s390_get_storekey_by_ptr PROC				; COMDAT

; 317  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 318  :     U64 abs = (skey_ptr - sysblk.storkeys) << _STORKEY_ARRAY_SHIFTAMT;

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00010	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR skey_ptr$[rsp]
  0001c	48 2b c8	 sub	 rcx, rax
  0001f	48 8b c1	 mov	 rax, rcx
  00022	48 c1 e0 0b	 shl	 rax, 11
  00026	48 89 44 24 20	 mov	 QWORD PTR abs$[rsp], rax

; 319  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 320  :     return ARCH_DEP( get_2K_storage_key )( abs );
; 321  : #else
; 322  :     return ARCH_DEP( get_4K_storage_key )( abs );

  0002b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR abs$[rsp]
  00030	e8 00 00 00 00	 call	 s390_get_4K_storage_key

; 323  : #endif
; 324  : }

  00035	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00039	c3		 ret	 0
s390_get_storekey_by_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_get_ptr_to_storekey
_TEXT	SEGMENT
abs$ = 48
s390_get_ptr_to_storekey PROC				; COMDAT

; 308  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 309  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 310  :     return ARCH_DEP( get_ptr_to_2K_storekey )( abs );
; 311  : #else
; 312  :     return ARCH_DEP( get_ptr_to_4K_storekey )( abs );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  0000e	e8 00 00 00 00	 call	 s390_get_ptr_to_4K_storekey

; 313  : #endif
; 314  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
s390_get_ptr_to_storekey ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_or_dev_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
bits$ = 64
s390_or_dev_storage_key PROC				; COMDAT

; 299  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 300  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 301  :     ARCH_DEP( or_dev_2K_storage_key )( dev, abs, bits );
; 302  : #else
; 303  :     ARCH_DEP( or_dev_4K_storage_key )( dev, abs, bits );

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR bits$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00023	e8 00 00 00 00	 call	 s390_or_dev_4K_storage_key

; 304  : #endif
; 305  : }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
s390_or_dev_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_or_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s390_or_storage_key PROC				; COMDAT

; 290  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 291  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 292  :     ARCH_DEP( or_2K_storage_key )( abs, bits );
; 293  : #else
; 294  :     ARCH_DEP( or_4K_storage_key )( abs, bits );

  0000d	0f b6 54 24 38	 movzx	 edx, BYTE PTR bits$[rsp]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00017	e8 00 00 00 00	 call	 s390_or_4K_storage_key

; 295  : #endif
; 296  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
s390_or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_and_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s390_and_storage_key PROC				; COMDAT

; 281  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 282  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 283  :     ARCH_DEP( and_2K_storage_key )( abs, bits );
; 284  : #else
; 285  :     ARCH_DEP( and_4K_storage_key )( abs, bits );

  0000d	0f b6 54 24 38	 movzx	 edx, BYTE PTR bits$[rsp]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00017	e8 00 00 00 00	 call	 s390_and_4K_storage_key

; 286  : #endif
; 287  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
s390_and_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_put_storage_key
_TEXT	SEGMENT
abs$ = 48
key$ = 56
s390_put_storage_key PROC				; COMDAT

; 272  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 273  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 274  :     ARCH_DEP( put_2K_storage_key )( abs, key );
; 275  : #else
; 276  :     ARCH_DEP( put_4K_storage_key )( abs, key );

  0000d	0f b6 54 24 38	 movzx	 edx, BYTE PTR key$[rsp]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00017	e8 00 00 00 00	 call	 s390_put_4K_storage_key

; 277  : #endif
; 278  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
s390_put_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_get_dev_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
s390_get_dev_storage_key PROC				; COMDAT

; 263  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 264  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 265  :     return ARCH_DEP( get_dev_2K_storage_key )( dev, abs );
; 266  : #else
; 267  :     return ARCH_DEP( get_dev_4K_storage_key )( dev, abs );

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00018	e8 00 00 00 00	 call	 s390_get_dev_4K_storage_key

; 268  : #endif
; 269  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_get_dev_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_get_storage_key
_TEXT	SEGMENT
abs$ = 48
s390_get_storage_key PROC				; COMDAT

; 254  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 255  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 256  :     return ARCH_DEP( get_2K_storage_key )( abs );
; 257  : #else
; 258  :     return ARCH_DEP( get_4K_storage_key )( abs );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  0000e	e8 00 00 00 00	 call	 s390_get_4K_storage_key

; 259  : #endif
; 260  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
s390_get_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_or_dev_4K_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
bits$ = 64
s390_or_dev_4K_storage_key PROC				; COMDAT

; 246  :   inline void  ARCH_DEP( or_dev_4K_storage_key )  ( DEVBLK* dev, U64 abs, BYTE bits ) {        ARCH_DEP( _or_dev_storage_key  )( dev, abs, bits & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	0f b6 44 24 40	 movzx	 eax, BYTE PTR bits$[rsp]
  00018	83 e0 fe	 and	 eax, -2
  0001b	41 b1 04	 mov	 r9b, 4
  0001e	44 0f b6 c0	 movzx	 r8d, al
  00022	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0002c	e8 00 00 00 00	 call	 s390__or_dev_storage_key
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
s390_or_dev_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_get_dev_4K_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
s390_get_dev_4K_storage_key PROC			; COMDAT

; 244  :   inline BYTE  ARCH_DEP( get_dev_4K_storage_key ) ( DEVBLK* dev, U64 abs            ) { return ARCH_DEP( _get_dev_storage_key )( dev, abs, 4 )  & ~STORKEY_BADFRM;      }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	41 b0 04	 mov	 r8b, 4
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0001b	e8 00 00 00 00	 call	 s390__get_dev_storage_key
  00020	0f b6 c0	 movzx	 eax, al
  00023	83 e0 fe	 and	 eax, -2
  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
s390_get_dev_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_or_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s390_or_4K_storage_key PROC				; COMDAT

; 242  :   inline void  ARCH_DEP( or_4K_storage_key )      (              U64 abs, BYTE bits ) {        ARCH_DEP( _or_storage_key      )(      abs, bits & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR bits$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 04	 mov	 r8b, 4
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 s390__or_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
s390_or_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_and_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s390_and_4K_storage_key PROC				; COMDAT

; 241  :   inline void  ARCH_DEP( and_4K_storage_key )     (              U64 abs, BYTE bits ) {        ARCH_DEP( _and_storage_key     )(      abs, bits & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR bits$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 04	 mov	 r8b, 4
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 s390__and_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
s390_and_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_put_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
key$ = 56
s390_put_4K_storage_key PROC				; COMDAT

; 240  :   inline void  ARCH_DEP( put_4K_storage_key )     (              U64 abs, BYTE key  ) {        ARCH_DEP( _put_storage_key     )(      abs, key  & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR key$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 04	 mov	 r8b, 4
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 s390__put_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
s390_put_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_get_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
s390_get_4K_storage_key PROC				; COMDAT

; 239  :   inline BYTE  ARCH_DEP( get_4K_storage_key )     (              U64 abs            ) { return ARCH_DEP( _get_storage_key     )(      abs, 4 )  & ~STORKEY_BADFRM;      }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b2 04		 mov	 dl, 4
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00010	e8 00 00 00 00	 call	 s390__get_storage_key
  00015	0f b6 c0	 movzx	 eax, al
  00018	83 e0 fe	 and	 eax, -2
  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
s390_get_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390_get_ptr_to_4K_storekey
_TEXT	SEGMENT
abs$ = 48
s390_get_ptr_to_4K_storekey PROC			; COMDAT

; 238  :   inline BYTE* ARCH_DEP( get_ptr_to_4K_storekey ) (              U64 abs            ) { return           _get_storekey_ptr     (      abs, 4 );                         }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b2 04		 mov	 dl, 4
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00010	e8 00 00 00 00	 call	 _get_storekey_ptr
  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
s390_get_ptr_to_4K_storekey ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390__or_dev_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
dev$ = 80
abs$ = 88
bits$ = 96
K$ = 104
s390__or_dev_storage_key PROC				; COMDAT

; 206  : {

$LN8:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s390__or_d:

; 207  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN4@s390__or_d

; 208  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  0001e	33 c0		 xor	 eax, eax
  00020	85 c0		 test	 eax, eax
  00022	74 5a		 je	 SHORT $LN5@s390__or_d

; 209  :     {
; 210  :         BYTE* skey1_ptr = _get_dev_storekey1_ptr( dev, abs );

  00024	48 8b 54 24 58	 mov	 rdx, QWORD PTR abs$[rsp]
  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  0002e	e8 00 00 00 00	 call	 _get_dev_storekey1_ptr
  00033	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 211  :         BYTE* skey2_ptr = _get_dev_storekey2_ptr( dev, abs );

  00038	48 8b 54 24 58	 mov	 rdx, QWORD PTR abs$[rsp]
  0003d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00042	e8 00 00 00 00	 call	 _get_dev_storekey2_ptr
  00047	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 212  :         OR_SKEY( skey1_ptr, bits );

  0004c	0f b6 44 24 60	 movzx	 eax, BYTE PTR bits$[rsp]
  00051	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00056	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00059	0b c8		 or	 ecx, eax
  0005b	8b c1		 mov	 eax, ecx
  0005d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00062	88 01		 mov	 BYTE PTR [rcx], al

; 213  :         OR_SKEY( skey2_ptr, bits );

  00064	0f b6 44 24 60	 movzx	 eax, BYTE PTR bits$[rsp]
  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006e	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00071	0b c8		 or	 ecx, eax
  00073	8b c1		 mov	 eax, ecx
  00075	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0007a	88 01		 mov	 BYTE PTR [rcx], al

; 214  :     }

  0007c	eb 32		 jmp	 SHORT $LN6@s390__or_d
$LN5@s390__or_d:

; 215  :     else
; 216  :     {
; 217  :         BYTE* skey_ptr  = _get_dev_storekey_ptr(  dev, abs, K );

  0007e	44 0f b6 44 24
	68		 movzx	 r8d, BYTE PTR K$[rsp]
  00084	48 8b 54 24 58	 mov	 rdx, QWORD PTR abs$[rsp]
  00089	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  0008e	e8 00 00 00 00	 call	 _get_dev_storekey_ptr
  00093	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 218  :         OR_SKEY( skey_ptr, bits );

  00098	0f b6 44 24 60	 movzx	 eax, BYTE PTR bits$[rsp]
  0009d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  000a2	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000a5	0b c8		 or	 ecx, eax
  000a7	8b c1		 mov	 eax, ecx
  000a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  000ae	88 01		 mov	 BYTE PTR [rcx], al
$LN6@s390__or_d:

; 219  :     }
; 220  : }

  000b0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b4	c3		 ret	 0
s390__or_dev_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390__or_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
s390__or_storage_key PROC				; COMDAT

; 189  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s390__or_s:

; 190  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@s390__or_s

; 191  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 50		 je	 SHORT $LN5@s390__or_s

; 192  :     {
; 193  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00023	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00028	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 194  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00032	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00037	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 195  :         OR_SKEY( skey1_ptr, bits );

  0003c	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00046	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00049	0b c8		 or	 ecx, eax
  0004b	8b c1		 mov	 eax, ecx
  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00052	88 01		 mov	 BYTE PTR [rcx], al

; 196  :         OR_SKEY( skey2_ptr, bits );

  00054	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00059	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0005e	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00061	0b c8		 or	 ecx, eax
  00063	8b c1		 mov	 eax, ecx
  00065	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006a	88 01		 mov	 BYTE PTR [rcx], al

; 197  :     }

  0006c	eb 2c		 jmp	 SHORT $LN6@s390__or_s
$LN5@s390__or_s:

; 198  :     else
; 199  :     {
; 200  :         BYTE* skey_ptr  = _get_storekey_ptr( abs, K );

  0006e	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  00073	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00078	e8 00 00 00 00	 call	 _get_storekey_ptr
  0007d	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 201  :         OR_SKEY( skey_ptr, bits );

  00082	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00087	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  0008c	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0008f	0b c8		 or	 ecx, eax
  00091	8b c1		 mov	 eax, ecx
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00098	88 01		 mov	 BYTE PTR [rcx], al
$LN6@s390__or_s:

; 202  :     }
; 203  : }

  0009a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009e	c3		 ret	 0
s390__or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390__and_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
s390__and_storage_key PROC				; COMDAT

; 172  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s390__and_:

; 173  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@s390__and_

; 174  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 54		 je	 SHORT $LN5@s390__and_

; 175  :     {
; 176  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  0001e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00023	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00028	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 177  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00032	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00037	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 178  :         AND_SKEY( skey1_ptr, ~bits );

  0003c	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00041	f7 d0		 not	 eax
  00043	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00048	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0004b	23 c8		 and	 ecx, eax
  0004d	8b c1		 mov	 eax, ecx
  0004f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00054	88 01		 mov	 BYTE PTR [rcx], al

; 179  :         AND_SKEY( skey2_ptr, ~bits );

  00056	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0005b	f7 d0		 not	 eax
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00062	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00065	23 c8		 and	 ecx, eax
  00067	8b c1		 mov	 eax, ecx
  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006e	88 01		 mov	 BYTE PTR [rcx], al

; 180  :     }

  00070	eb 2e		 jmp	 SHORT $LN6@s390__and_
$LN5@s390__and_:

; 181  :     else
; 182  :     {
; 183  :         BYTE* skey_ptr  = _get_storekey_ptr(  abs, K );

  00072	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  00077	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0007c	e8 00 00 00 00	 call	 _get_storekey_ptr
  00081	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 184  :         AND_SKEY( skey_ptr, ~bits );

  00086	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0008b	f7 d0		 not	 eax
  0008d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00092	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00095	23 c8		 and	 ecx, eax
  00097	8b c1		 mov	 eax, ecx
  00099	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  0009e	88 01		 mov	 BYTE PTR [rcx], al
$LN6@s390__and_:

; 185  :     }
; 186  : }

  000a0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a4	c3		 ret	 0
s390__and_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390__put_storage_key
_TEXT	SEGMENT
abs$ = 48
key$ = 56
K$ = 64
s390__put_storage_key PROC				; COMDAT

; 158  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@s390__put_:

; 159  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@s390__put_

; 160  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	74 24		 je	 SHORT $LN5@s390__put_

; 161  :     {
; 162  :         *_get_storekey1_ptr( abs ) = key;

  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00023	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00028	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR key$[rsp]
  0002d	88 08		 mov	 BYTE PTR [rax], cl

; 163  :         *_get_storekey2_ptr( abs ) = key;

  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00034	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00039	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR key$[rsp]
  0003e	88 08		 mov	 BYTE PTR [rax], cl

; 164  :     }

  00040	eb 16		 jmp	 SHORT $LN6@s390__put_
$LN5@s390__put_:

; 165  :     else
; 166  :     {
; 167  :         *_get_storekey_ptr(  abs, K ) = key;

  00042	0f b6 54 24 40	 movzx	 edx, BYTE PTR K$[rsp]
  00047	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  0004c	e8 00 00 00 00	 call	 _get_storekey_ptr
  00051	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR key$[rsp]
  00056	88 08		 mov	 BYTE PTR [rax], cl
$LN6@s390__put_:

; 168  :     }
; 169  : }

  00058	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005c	c3		 ret	 0
s390__put_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390__get_dev_storage_key
_TEXT	SEGMENT
skey$ = 32
dev$ = 64
abs$ = 72
K$ = 80
s390__get_dev_storage_key PROC				; COMDAT

; 144  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390__get_:

; 145  :     BYTE skey;
; 146  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00013	33 c0		 xor	 eax, eax
  00015	85 c0		 test	 eax, eax
  00017	75 fa		 jne	 SHORT $LN4@s390__get_

; 147  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00019	33 c0		 xor	 eax, eax
  0001b	85 c0		 test	 eax, eax
  0001d	74 3c		 je	 SHORT $LN5@s390__get_

; 148  :     {
; 149  :         skey  = *_get_dev_storekey1_ptr( dev, abs );

  0001f	48 8b 54 24 48	 mov	 rdx, QWORD PTR abs$[rsp]
  00024	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00029	e8 00 00 00 00	 call	 _get_dev_storekey1_ptr
  0002e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00031	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 150  :         skey |= *_get_dev_storekey2_ptr( dev, abs ) & ~(STORKEY_KEY);

  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR abs$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0003f	e8 00 00 00 00	 call	 _get_dev_storekey2_ptr
  00044	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00047	25 0f ff ff ff	 and	 eax, -241		; ffffffffffffff0fH
  0004c	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR skey$[rsp]
  00051	0b c8		 or	 ecx, eax
  00053	8b c1		 mov	 eax, ecx
  00055	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 151  :     }

  00059	eb 1c		 jmp	 SHORT $LN6@s390__get_
$LN5@s390__get_:

; 152  :     else
; 153  :         skey  = *_get_dev_storekey_ptr(  dev, abs, K );

  0005b	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR K$[rsp]
  00061	48 8b 54 24 48	 mov	 rdx, QWORD PTR abs$[rsp]
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0006b	e8 00 00 00 00	 call	 _get_dev_storekey_ptr
  00070	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00073	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al
$LN6@s390__get_:

; 154  :     return skey;

  00077	0f b6 44 24 20	 movzx	 eax, BYTE PTR skey$[rsp]

; 155  : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
s390__get_dev_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s390__get_storage_key
_TEXT	SEGMENT
skey$ = 32
abs$ = 64
K$ = 72
s390__get_storage_key PROC				; COMDAT

; 130  : {

$LN8:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s390__get_:

; 131  :     BYTE skey;
; 132  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  0000d	33 c0		 xor	 eax, eax
  0000f	85 c0		 test	 eax, eax
  00011	75 fa		 jne	 SHORT $LN4@s390__get_

; 133  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00013	33 c0		 xor	 eax, eax
  00015	85 c0		 test	 eax, eax
  00017	74 32		 je	 SHORT $LN5@s390__get_

; 134  :     {
; 135  :         skey  = *_get_storekey1_ptr( abs );

  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  0001e	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00023	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00026	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 136  :         skey |= *_get_storekey2_ptr( abs ) & ~(STORKEY_KEY);

  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  0002f	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00034	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00037	25 0f ff ff ff	 and	 eax, -241		; ffffffffffffff0fH
  0003c	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR skey$[rsp]
  00041	0b c8		 or	 ecx, eax
  00043	8b c1		 mov	 eax, ecx
  00045	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 137  :     }

  00049	eb 16		 jmp	 SHORT $LN6@s390__get_
$LN5@s390__get_:

; 138  :     else
; 139  :         skey  = *_get_storekey_ptr(  abs, K );

  0004b	0f b6 54 24 48	 movzx	 edx, BYTE PTR K$[rsp]
  00050	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  00055	e8 00 00 00 00	 call	 _get_storekey_ptr
  0005a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0005d	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al
$LN6@s390__get_:

; 140  :     return skey;

  00061	0f b6 44 24 20	 movzx	 eax, BYTE PTR skey$[rsp]

; 141  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
s390__get_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT bypass_skey_update
_TEXT	SEGMENT
regs$ = 8
m3$ = 16
oldkey$ = 24
r1key$ = 32
bypass_skey_update PROC					; COMDAT

; 386  : {

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 387  :     /* If the Conditional-SSKE Facility is not installed, or if both
; 388  :        the MR and MC bits are both zero, OR if storage key and fetch
; 389  :        bits are not the same as the values in R1 register bits 56-60,
; 390  :        then update the key normally (i.e. do NOT bypass updating key).
; 391  :     */
; 392  :     if (0
; 393  :         || !FACILITY_ENABLED( 010_CONDITIONAL_SSKE, regs )
; 394  :         || (m3 & (SSKE_MASK_MR | SSKE_MASK_MC)) == 0
; 395  :         || (oldkey & (STORKEY_KEY | STORKEY_FETCH)) !=

  00013	33 c0		 xor	 eax, eax
  00015	85 c0		 test	 eax, eax
  00017	75 42		 jne	 SHORT $LN3@bypass_ske
  00019	b8 01 00 00 00	 mov	 eax, 1
  0001e	48 6b c0 01	 imul	 rax, rax, 1
  00022	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  00027	0f b6 84 01 28
	0d 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3368]
  0002f	83 e0 20	 and	 eax, 32			; 00000020H
  00032	85 c0		 test	 eax, eax
  00034	74 25		 je	 SHORT $LN3@bypass_ske
  00036	0f b6 44 24 10	 movzx	 eax, BYTE PTR m3$[rsp]
  0003b	83 e0 06	 and	 eax, 6
  0003e	85 c0		 test	 eax, eax
  00040	74 19		 je	 SHORT $LN3@bypass_ske
  00042	0f b6 44 24 18	 movzx	 eax, BYTE PTR oldkey$[rsp]
  00047	25 f8 00 00 00	 and	 eax, 248		; 000000f8H
  0004c	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR r1key$[rsp]
  00051	81 e1 f8 00 00
	00		 and	 ecx, 248		; 000000f8H
  00057	3b c1		 cmp	 eax, ecx
  00059	74 04		 je	 SHORT $LN2@bypass_ske
$LN3@bypass_ske:

; 396  :            (r1key  & (STORKEY_KEY | STORKEY_FETCH))
; 397  :     )
; 398  :         return false; /* (DON'T bypass updating this page's key) */

  0005b	32 c0		 xor	 al, al
  0005d	eb 59		 jmp	 SHORT $LN1@bypass_ske
$LN2@bypass_ske:

; 399  : 
; 400  :     /* If both the MR and MC mask bits are both one, or the MR bit is
; 401  :        zero and the reference bit is equal to bit 61 of register r1,
; 402  :        or the MC bit is zero and the change bit is equal to bit 62 of
; 403  :        register r1, then BYPASS updating (do NOT update) storage key.
; 404  :     */
; 405  :     if (0
; 406  :         || ((m3 & (SSKE_MASK_MR | SSKE_MASK_MC))
; 407  :               ==  (SSKE_MASK_MR | SSKE_MASK_MC))
; 408  :         || ((m3 & SSKE_MASK_MR) == 0 && (oldkey & STORKEY_REF   ) == (r1key & STORKEY_REF   ))
; 409  :         || ((m3 & SSKE_MASK_MC) == 0 && (oldkey & STORKEY_CHANGE) == (r1key & STORKEY_CHANGE))

  0005f	33 c0		 xor	 eax, eax
  00061	85 c0		 test	 eax, eax
  00063	75 4d		 jne	 SHORT $LN5@bypass_ske
  00065	0f b6 44 24 10	 movzx	 eax, BYTE PTR m3$[rsp]
  0006a	83 e0 06	 and	 eax, 6
  0006d	83 f8 06	 cmp	 eax, 6
  00070	74 40		 je	 SHORT $LN5@bypass_ske
  00072	0f b6 44 24 10	 movzx	 eax, BYTE PTR m3$[rsp]
  00077	83 e0 04	 and	 eax, 4
  0007a	85 c0		 test	 eax, eax
  0007c	75 14		 jne	 SHORT $LN6@bypass_ske
  0007e	0f b6 44 24 18	 movzx	 eax, BYTE PTR oldkey$[rsp]
  00083	83 e0 04	 and	 eax, 4
  00086	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR r1key$[rsp]
  0008b	83 e1 04	 and	 ecx, 4
  0008e	3b c1		 cmp	 eax, ecx
  00090	74 20		 je	 SHORT $LN5@bypass_ske
$LN6@bypass_ske:
  00092	0f b6 44 24 10	 movzx	 eax, BYTE PTR m3$[rsp]
  00097	83 e0 02	 and	 eax, 2
  0009a	85 c0		 test	 eax, eax
  0009c	75 18		 jne	 SHORT $LN4@bypass_ske
  0009e	0f b6 44 24 18	 movzx	 eax, BYTE PTR oldkey$[rsp]
  000a3	83 e0 02	 and	 eax, 2
  000a6	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR r1key$[rsp]
  000ab	83 e1 02	 and	 ecx, 2
  000ae	3b c1		 cmp	 eax, ecx
  000b0	75 04		 jne	 SHORT $LN4@bypass_ske
$LN5@bypass_ske:

; 410  :     )
; 411  :         return true; /***>>  BYPASS updating this page's key <<***/

  000b2	b0 01		 mov	 al, 1
  000b4	eb 02		 jmp	 SHORT $LN1@bypass_ske
$LN4@bypass_ske:

; 412  : 
; 413  :     return false;     /* (DON'T bypass updating this page's key) */

  000b6	32 c0		 xor	 al, al
$LN1@bypass_ske:

; 414  : }

  000b8	c3		 ret	 0
bypass_skey_update ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_or_storage_key_by_ptr
_TEXT	SEGMENT
abs$ = 32
skey_ptr$ = 64
bits$ = 72
s370_or_storage_key_by_ptr PROC				; COMDAT

; 328  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 329  :     U64 abs = (skey_ptr - sysblk.storkeys) << _STORKEY_ARRAY_SHIFTAMT;

  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00014	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0001b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR skey_ptr$[rsp]
  00020	48 2b c8	 sub	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx
  00026	48 c1 e0 0b	 shl	 rax, 11
  0002a	48 89 44 24 20	 mov	 QWORD PTR abs$[rsp], rax

; 330  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 331  :     ARCH_DEP( or_2K_storage_key )( abs, bits );

  0002f	0f b6 54 24 48	 movzx	 edx, BYTE PTR bits$[rsp]
  00034	48 8b 4c 24 20	 mov	 rcx, QWORD PTR abs$[rsp]
  00039	e8 00 00 00 00	 call	 s370_or_2K_storage_key

; 332  : #else
; 333  :     ARCH_DEP( or_4K_storage_key )( abs, bits );
; 334  : #endif
; 335  : }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
s370_or_storage_key_by_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_get_storekey_by_ptr
_TEXT	SEGMENT
abs$ = 32
skey_ptr$ = 64
s370_get_storekey_by_ptr PROC				; COMDAT

; 317  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 318  :     U64 abs = (skey_ptr - sysblk.storkeys) << _STORKEY_ARRAY_SHIFTAMT;

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00010	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR skey_ptr$[rsp]
  0001c	48 2b c8	 sub	 rcx, rax
  0001f	48 8b c1	 mov	 rax, rcx
  00022	48 c1 e0 0b	 shl	 rax, 11
  00026	48 89 44 24 20	 mov	 QWORD PTR abs$[rsp], rax

; 319  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 320  :     return ARCH_DEP( get_2K_storage_key )( abs );

  0002b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR abs$[rsp]
  00030	e8 00 00 00 00	 call	 s370_get_2K_storage_key

; 321  : #else
; 322  :     return ARCH_DEP( get_4K_storage_key )( abs );
; 323  : #endif
; 324  : }

  00035	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00039	c3		 ret	 0
s370_get_storekey_by_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_get_ptr_to_storekey
_TEXT	SEGMENT
abs$ = 48
s370_get_ptr_to_storekey PROC				; COMDAT

; 308  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 309  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 310  :     return ARCH_DEP( get_ptr_to_2K_storekey )( abs );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  0000e	e8 00 00 00 00	 call	 s370_get_ptr_to_2K_storekey

; 311  : #else
; 312  :     return ARCH_DEP( get_ptr_to_4K_storekey )( abs );
; 313  : #endif
; 314  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
s370_get_ptr_to_storekey ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_or_dev_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
bits$ = 64
s370_or_dev_storage_key PROC				; COMDAT

; 299  : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 300  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 301  :     ARCH_DEP( or_dev_2K_storage_key )( dev, abs, bits );

  00013	44 0f b6 44 24
	40		 movzx	 r8d, BYTE PTR bits$[rsp]
  00019	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  0001e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00023	e8 00 00 00 00	 call	 s370_or_dev_2K_storage_key

; 302  : #else
; 303  :     ARCH_DEP( or_dev_4K_storage_key )( dev, abs, bits );
; 304  : #endif
; 305  : }

  00028	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002c	c3		 ret	 0
s370_or_dev_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_or_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s370_or_storage_key PROC				; COMDAT

; 290  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 291  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 292  :     ARCH_DEP( or_2K_storage_key )( abs, bits );

  0000d	0f b6 54 24 38	 movzx	 edx, BYTE PTR bits$[rsp]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00017	e8 00 00 00 00	 call	 s370_or_2K_storage_key

; 293  : #else
; 294  :     ARCH_DEP( or_4K_storage_key )( abs, bits );
; 295  : #endif
; 296  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
s370_or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_and_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s370_and_storage_key PROC				; COMDAT

; 281  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 282  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 283  :     ARCH_DEP( and_2K_storage_key )( abs, bits );

  0000d	0f b6 54 24 38	 movzx	 edx, BYTE PTR bits$[rsp]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00017	e8 00 00 00 00	 call	 s370_and_2K_storage_key

; 284  : #else
; 285  :     ARCH_DEP( and_4K_storage_key )( abs, bits );
; 286  : #endif
; 287  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
s370_and_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_put_storage_key
_TEXT	SEGMENT
abs$ = 48
key$ = 56
s370_put_storage_key PROC				; COMDAT

; 272  : {

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 273  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 274  :     ARCH_DEP( put_2K_storage_key )( abs, key );

  0000d	0f b6 54 24 38	 movzx	 edx, BYTE PTR key$[rsp]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00017	e8 00 00 00 00	 call	 s370_put_2K_storage_key

; 275  : #else
; 276  :     ARCH_DEP( put_4K_storage_key )( abs, key );
; 277  : #endif
; 278  : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
s370_put_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_get_dev_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
s370_get_dev_storage_key PROC				; COMDAT

; 263  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 264  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 265  :     return ARCH_DEP( get_dev_2K_storage_key )( dev, abs );

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00018	e8 00 00 00 00	 call	 s370_get_dev_2K_storage_key

; 266  : #else
; 267  :     return ARCH_DEP( get_dev_4K_storage_key )( dev, abs );
; 268  : #endif
; 269  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_get_dev_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_get_storage_key
_TEXT	SEGMENT
abs$ = 48
s370_get_storage_key PROC				; COMDAT

; 254  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 255  : #if defined( FEATURE_2K_STORAGE_KEYS )
; 256  :     return ARCH_DEP( get_2K_storage_key )( abs );

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  0000e	e8 00 00 00 00	 call	 s370_get_2K_storage_key

; 257  : #else
; 258  :     return ARCH_DEP( get_4K_storage_key )( abs );
; 259  : #endif
; 260  : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
s370_get_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_or_dev_4K_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
bits$ = 64
s370_or_dev_4K_storage_key PROC				; COMDAT

; 246  :   inline void  ARCH_DEP( or_dev_4K_storage_key )  ( DEVBLK* dev, U64 abs, BYTE bits ) {        ARCH_DEP( _or_dev_storage_key  )( dev, abs, bits & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	0f b6 44 24 40	 movzx	 eax, BYTE PTR bits$[rsp]
  00018	83 e0 fe	 and	 eax, -2
  0001b	41 b1 04	 mov	 r9b, 4
  0001e	44 0f b6 c0	 movzx	 r8d, al
  00022	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0002c	e8 00 00 00 00	 call	 s370__or_dev_storage_key
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
s370_or_dev_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_get_dev_4K_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
s370_get_dev_4K_storage_key PROC			; COMDAT

; 244  :   inline BYTE  ARCH_DEP( get_dev_4K_storage_key ) ( DEVBLK* dev, U64 abs            ) { return ARCH_DEP( _get_dev_storage_key )( dev, abs, 4 )  & ~STORKEY_BADFRM;      }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	41 b0 04	 mov	 r8b, 4
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0001b	e8 00 00 00 00	 call	 s370__get_dev_storage_key
  00020	0f b6 c0	 movzx	 eax, al
  00023	83 e0 fe	 and	 eax, -2
  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
s370_get_dev_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_or_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s370_or_4K_storage_key PROC				; COMDAT

; 242  :   inline void  ARCH_DEP( or_4K_storage_key )      (              U64 abs, BYTE bits ) {        ARCH_DEP( _or_storage_key      )(      abs, bits & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR bits$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 04	 mov	 r8b, 4
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 s370__or_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
s370_or_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_and_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s370_and_4K_storage_key PROC				; COMDAT

; 241  :   inline void  ARCH_DEP( and_4K_storage_key )     (              U64 abs, BYTE bits ) {        ARCH_DEP( _and_storage_key     )(      abs, bits & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR bits$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 04	 mov	 r8b, 4
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 s370__and_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
s370_and_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_put_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
key$ = 56
s370_put_4K_storage_key PROC				; COMDAT

; 240  :   inline void  ARCH_DEP( put_4K_storage_key )     (              U64 abs, BYTE key  ) {        ARCH_DEP( _put_storage_key     )(      abs, key  & ~STORKEY_BADFRM, 4 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR key$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 04	 mov	 r8b, 4
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 s370__put_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
s370_put_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_get_4K_storage_key
_TEXT	SEGMENT
abs$ = 48
s370_get_4K_storage_key PROC				; COMDAT

; 239  :   inline BYTE  ARCH_DEP( get_4K_storage_key )     (              U64 abs            ) { return ARCH_DEP( _get_storage_key     )(      abs, 4 )  & ~STORKEY_BADFRM;      }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b2 04		 mov	 dl, 4
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00010	e8 00 00 00 00	 call	 s370__get_storage_key
  00015	0f b6 c0	 movzx	 eax, al
  00018	83 e0 fe	 and	 eax, -2
  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
s370_get_4K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_get_ptr_to_4K_storekey
_TEXT	SEGMENT
abs$ = 48
s370_get_ptr_to_4K_storekey PROC			; COMDAT

; 238  :   inline BYTE* ARCH_DEP( get_ptr_to_4K_storekey ) (              U64 abs            ) { return           _get_storekey_ptr     (      abs, 4 );                         }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b2 04		 mov	 dl, 4
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00010	e8 00 00 00 00	 call	 _get_storekey_ptr
  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
s370_get_ptr_to_4K_storekey ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_or_dev_2K_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
bits$ = 64
s370_or_dev_2K_storage_key PROC				; COMDAT

; 235  :   inline void  ARCH_DEP( or_dev_2K_storage_key )  ( DEVBLK* dev, U64 abs, BYTE bits ) {        ARCH_DEP( _or_dev_storage_key  )( dev, abs, bits & ~STORKEY_BADFRM, 2 ); }

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	0f b6 44 24 40	 movzx	 eax, BYTE PTR bits$[rsp]
  00018	83 e0 fe	 and	 eax, -2
  0001b	41 b1 02	 mov	 r9b, 2
  0001e	44 0f b6 c0	 movzx	 r8d, al
  00022	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0002c	e8 00 00 00 00	 call	 s370__or_dev_storage_key
  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
s370_or_dev_2K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_get_dev_2K_storage_key
_TEXT	SEGMENT
dev$ = 48
abs$ = 56
s370_get_dev_2K_storage_key PROC			; COMDAT

; 233  :   inline BYTE  ARCH_DEP( get_dev_2K_storage_key ) ( DEVBLK* dev, U64 abs            ) { return ARCH_DEP( _get_dev_storage_key )( dev, abs, 2 )  & ~STORKEY_BADFRM;      }

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	41 b0 02	 mov	 r8b, 2
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR abs$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0001b	e8 00 00 00 00	 call	 s370__get_dev_storage_key
  00020	0f b6 c0	 movzx	 eax, al
  00023	83 e0 fe	 and	 eax, -2
  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
s370_get_dev_2K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_or_2K_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s370_or_2K_storage_key PROC				; COMDAT

; 231  :   inline void  ARCH_DEP( or_2K_storage_key )      (              U64 abs, BYTE bits ) {        ARCH_DEP( _or_storage_key      )(      abs, bits & ~STORKEY_BADFRM, 2 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR bits$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 02	 mov	 r8b, 2
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 s370__or_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
s370_or_2K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_and_2K_storage_key
_TEXT	SEGMENT
abs$ = 48
bits$ = 56
s370_and_2K_storage_key PROC				; COMDAT

; 230  :   inline void  ARCH_DEP( and_2K_storage_key )     (              U64 abs, BYTE bits ) {        ARCH_DEP( _and_storage_key     )(      abs, bits & ~STORKEY_BADFRM, 2 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR bits$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 02	 mov	 r8b, 2
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 s370__and_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
s370_and_2K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_put_2K_storage_key
_TEXT	SEGMENT
abs$ = 48
key$ = 56
s370_put_2K_storage_key PROC				; COMDAT

; 229  :   inline void  ARCH_DEP( put_2K_storage_key )     (              U64 abs, BYTE key  ) {        ARCH_DEP( _put_storage_key     )(      abs, key  & ~STORKEY_BADFRM, 2 ); }

$LN3:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000d	0f b6 44 24 38	 movzx	 eax, BYTE PTR key$[rsp]
  00012	83 e0 fe	 and	 eax, -2
  00015	41 b0 02	 mov	 r8b, 2
  00018	0f b6 d0	 movzx	 edx, al
  0001b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00020	e8 00 00 00 00	 call	 s370__put_storage_key
  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
s370_put_2K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_get_2K_storage_key
_TEXT	SEGMENT
abs$ = 48
s370_get_2K_storage_key PROC				; COMDAT

; 228  :   inline BYTE  ARCH_DEP( get_2K_storage_key )     (              U64 abs            ) { return ARCH_DEP( _get_storage_key     )(      abs, 2 )  & ~STORKEY_BADFRM;      }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b2 02		 mov	 dl, 2
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00010	e8 00 00 00 00	 call	 s370__get_storage_key
  00015	0f b6 c0	 movzx	 eax, al
  00018	83 e0 fe	 and	 eax, -2
  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
s370_get_2K_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370_get_ptr_to_2K_storekey
_TEXT	SEGMENT
abs$ = 48
s370_get_ptr_to_2K_storekey PROC			; COMDAT

; 227  :   inline BYTE* ARCH_DEP( get_ptr_to_2K_storekey ) (              U64 abs            ) { return           _get_storekey_ptr     (      abs, 2 );                         }

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b2 02		 mov	 dl, 2
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00010	e8 00 00 00 00	 call	 _get_storekey_ptr
  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
s370_get_ptr_to_2K_storekey ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370__or_dev_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
dev$ = 80
abs$ = 88
bits$ = 96
K$ = 104
s370__or_dev_storage_key PROC				; COMDAT

; 206  : {

$LN8:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s370__or_d:

; 207  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN4@s370__or_d

; 208  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  0001e	0f b6 44 24 68	 movzx	 eax, BYTE PTR K$[rsp]
  00023	83 f8 04	 cmp	 eax, 4
  00026	75 61		 jne	 SHORT $LN5@s370__or_d
  00028	33 c0		 xor	 eax, eax
  0002a	83 f8 01	 cmp	 eax, 1
  0002d	74 5a		 je	 SHORT $LN5@s370__or_d

; 209  :     {
; 210  :         BYTE* skey1_ptr = _get_dev_storekey1_ptr( dev, abs );

  0002f	48 8b 54 24 58	 mov	 rdx, QWORD PTR abs$[rsp]
  00034	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00039	e8 00 00 00 00	 call	 _get_dev_storekey1_ptr
  0003e	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 211  :         BYTE* skey2_ptr = _get_dev_storekey2_ptr( dev, abs );

  00043	48 8b 54 24 58	 mov	 rdx, QWORD PTR abs$[rsp]
  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  0004d	e8 00 00 00 00	 call	 _get_dev_storekey2_ptr
  00052	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 212  :         OR_SKEY( skey1_ptr, bits );

  00057	0f b6 44 24 60	 movzx	 eax, BYTE PTR bits$[rsp]
  0005c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00061	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00064	0b c8		 or	 ecx, eax
  00066	8b c1		 mov	 eax, ecx
  00068	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  0006d	88 01		 mov	 BYTE PTR [rcx], al

; 213  :         OR_SKEY( skey2_ptr, bits );

  0006f	0f b6 44 24 60	 movzx	 eax, BYTE PTR bits$[rsp]
  00074	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00079	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0007c	0b c8		 or	 ecx, eax
  0007e	8b c1		 mov	 eax, ecx
  00080	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00085	88 01		 mov	 BYTE PTR [rcx], al

; 214  :     }

  00087	eb 32		 jmp	 SHORT $LN6@s370__or_d
$LN5@s370__or_d:

; 215  :     else
; 216  :     {
; 217  :         BYTE* skey_ptr  = _get_dev_storekey_ptr(  dev, abs, K );

  00089	44 0f b6 44 24
	68		 movzx	 r8d, BYTE PTR K$[rsp]
  0008f	48 8b 54 24 58	 mov	 rdx, QWORD PTR abs$[rsp]
  00094	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00099	e8 00 00 00 00	 call	 _get_dev_storekey_ptr
  0009e	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 218  :         OR_SKEY( skey_ptr, bits );

  000a3	0f b6 44 24 60	 movzx	 eax, BYTE PTR bits$[rsp]
  000a8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  000ad	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000b0	0b c8		 or	 ecx, eax
  000b2	8b c1		 mov	 eax, ecx
  000b4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  000b9	88 01		 mov	 BYTE PTR [rcx], al
$LN6@s370__or_d:

; 219  :     }
; 220  : }

  000bb	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000bf	c3		 ret	 0
s370__or_dev_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370__or_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
s370__or_storage_key PROC				; COMDAT

; 189  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s370__or_s:

; 190  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@s370__or_s

; 191  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	0f b6 44 24 60	 movzx	 eax, BYTE PTR K$[rsp]
  0001d	83 f8 04	 cmp	 eax, 4
  00020	75 57		 jne	 SHORT $LN5@s370__or_s
  00022	33 c0		 xor	 eax, eax
  00024	83 f8 01	 cmp	 eax, 1
  00027	74 50		 je	 SHORT $LN5@s370__or_s

; 192  :     {
; 193  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0002e	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00033	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 194  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  00038	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0003d	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00042	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 195  :         OR_SKEY( skey1_ptr, bits );

  00047	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00051	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00054	0b c8		 or	 ecx, eax
  00056	8b c1		 mov	 eax, ecx
  00058	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  0005d	88 01		 mov	 BYTE PTR [rcx], al

; 196  :         OR_SKEY( skey2_ptr, bits );

  0005f	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00064	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00069	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0006c	0b c8		 or	 ecx, eax
  0006e	8b c1		 mov	 eax, ecx
  00070	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00075	88 01		 mov	 BYTE PTR [rcx], al

; 197  :     }

  00077	eb 2c		 jmp	 SHORT $LN6@s370__or_s
$LN5@s370__or_s:

; 198  :     else
; 199  :     {
; 200  :         BYTE* skey_ptr  = _get_storekey_ptr( abs, K );

  00079	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  0007e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00083	e8 00 00 00 00	 call	 _get_storekey_ptr
  00088	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 201  :         OR_SKEY( skey_ptr, bits );

  0008d	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00092	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  00097	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0009a	0b c8		 or	 ecx, eax
  0009c	8b c1		 mov	 eax, ecx
  0009e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  000a3	88 01		 mov	 BYTE PTR [rcx], al
$LN6@s370__or_s:

; 202  :     }
; 203  : }

  000a5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a9	c3		 ret	 0
s370__or_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370__and_storage_key
_TEXT	SEGMENT
skey1_ptr$1 = 32
skey2_ptr$2 = 40
skey_ptr$3 = 48
abs$ = 80
bits$ = 88
K$ = 96
s370__and_storage_key PROC				; COMDAT

; 172  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s370__and_:

; 173  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@s370__and_

; 174  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	0f b6 44 24 60	 movzx	 eax, BYTE PTR K$[rsp]
  0001d	83 f8 04	 cmp	 eax, 4
  00020	75 5b		 jne	 SHORT $LN5@s370__and_
  00022	33 c0		 xor	 eax, eax
  00024	83 f8 01	 cmp	 eax, 1
  00027	74 54		 je	 SHORT $LN5@s370__and_

; 175  :     {
; 176  :         BYTE* skey1_ptr = _get_storekey1_ptr( abs );

  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0002e	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00033	48 89 44 24 20	 mov	 QWORD PTR skey1_ptr$1[rsp], rax

; 177  :         BYTE* skey2_ptr = _get_storekey2_ptr( abs );

  00038	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  0003d	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00042	48 89 44 24 28	 mov	 QWORD PTR skey2_ptr$2[rsp], rax

; 178  :         AND_SKEY( skey1_ptr, ~bits );

  00047	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  0004c	f7 d0		 not	 eax
  0004e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  00053	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00056	23 c8		 and	 ecx, eax
  00058	8b c1		 mov	 eax, ecx
  0005a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR skey1_ptr$1[rsp]
  0005f	88 01		 mov	 BYTE PTR [rcx], al

; 179  :         AND_SKEY( skey2_ptr, ~bits );

  00061	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00066	f7 d0		 not	 eax
  00068	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  0006d	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00070	23 c8		 and	 ecx, eax
  00072	8b c1		 mov	 eax, ecx
  00074	48 8b 4c 24 28	 mov	 rcx, QWORD PTR skey2_ptr$2[rsp]
  00079	88 01		 mov	 BYTE PTR [rcx], al

; 180  :     }

  0007b	eb 2e		 jmp	 SHORT $LN6@s370__and_
$LN5@s370__and_:

; 181  :     else
; 182  :     {
; 183  :         BYTE* skey_ptr  = _get_storekey_ptr(  abs, K );

  0007d	0f b6 54 24 60	 movzx	 edx, BYTE PTR K$[rsp]
  00082	48 8b 4c 24 50	 mov	 rcx, QWORD PTR abs$[rsp]
  00087	e8 00 00 00 00	 call	 _get_storekey_ptr
  0008c	48 89 44 24 30	 mov	 QWORD PTR skey_ptr$3[rsp], rax

; 184  :         AND_SKEY( skey_ptr, ~bits );

  00091	0f b6 44 24 58	 movzx	 eax, BYTE PTR bits$[rsp]
  00096	f7 d0		 not	 eax
  00098	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  0009d	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000a0	23 c8		 and	 ecx, eax
  000a2	8b c1		 mov	 eax, ecx
  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR skey_ptr$3[rsp]
  000a9	88 01		 mov	 BYTE PTR [rcx], al
$LN6@s370__and_:

; 185  :     }
; 186  : }

  000ab	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000af	c3		 ret	 0
s370__and_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370__put_storage_key
_TEXT	SEGMENT
abs$ = 48
key$ = 56
K$ = 64
s370__put_storage_key PROC				; COMDAT

; 158  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@s370__put_:

; 159  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@s370__put_

; 160  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00018	0f b6 44 24 40	 movzx	 eax, BYTE PTR K$[rsp]
  0001d	83 f8 04	 cmp	 eax, 4
  00020	75 2b		 jne	 SHORT $LN5@s370__put_
  00022	33 c0		 xor	 eax, eax
  00024	83 f8 01	 cmp	 eax, 1
  00027	74 24		 je	 SHORT $LN5@s370__put_

; 161  :     {
; 162  :         *_get_storekey1_ptr( abs ) = key;

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  0002e	e8 00 00 00 00	 call	 _get_storekey1_ptr
  00033	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR key$[rsp]
  00038	88 08		 mov	 BYTE PTR [rax], cl

; 163  :         *_get_storekey2_ptr( abs ) = key;

  0003a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  0003f	e8 00 00 00 00	 call	 _get_storekey2_ptr
  00044	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR key$[rsp]
  00049	88 08		 mov	 BYTE PTR [rax], cl

; 164  :     }

  0004b	eb 16		 jmp	 SHORT $LN6@s370__put_
$LN5@s370__put_:

; 165  :     else
; 166  :     {
; 167  :         *_get_storekey_ptr(  abs, K ) = key;

  0004d	0f b6 54 24 40	 movzx	 edx, BYTE PTR K$[rsp]
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abs$[rsp]
  00057	e8 00 00 00 00	 call	 _get_storekey_ptr
  0005c	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR key$[rsp]
  00061	88 08		 mov	 BYTE PTR [rax], cl
$LN6@s370__put_:

; 168  :     }
; 169  : }

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
s370__put_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370__get_dev_storage_key
_TEXT	SEGMENT
skey$ = 32
dev$ = 64
abs$ = 72
K$ = 80
s370__get_dev_storage_key PROC				; COMDAT

; 144  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370__get_:

; 145  :     BYTE skey;
; 146  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  00013	33 c0		 xor	 eax, eax
  00015	85 c0		 test	 eax, eax
  00017	75 fa		 jne	 SHORT $LN4@s370__get_

; 147  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00019	0f b6 44 24 50	 movzx	 eax, BYTE PTR K$[rsp]
  0001e	83 f8 04	 cmp	 eax, 4
  00021	75 43		 jne	 SHORT $LN5@s370__get_
  00023	33 c0		 xor	 eax, eax
  00025	83 f8 01	 cmp	 eax, 1
  00028	74 3c		 je	 SHORT $LN5@s370__get_

; 148  :     {
; 149  :         skey  = *_get_dev_storekey1_ptr( dev, abs );

  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR abs$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00034	e8 00 00 00 00	 call	 _get_dev_storekey1_ptr
  00039	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0003c	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 150  :         skey |= *_get_dev_storekey2_ptr( dev, abs ) & ~(STORKEY_KEY);

  00040	48 8b 54 24 48	 mov	 rdx, QWORD PTR abs$[rsp]
  00045	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0004a	e8 00 00 00 00	 call	 _get_dev_storekey2_ptr
  0004f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00052	25 0f ff ff ff	 and	 eax, -241		; ffffffffffffff0fH
  00057	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR skey$[rsp]
  0005c	0b c8		 or	 ecx, eax
  0005e	8b c1		 mov	 eax, ecx
  00060	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 151  :     }

  00064	eb 1c		 jmp	 SHORT $LN6@s370__get_
$LN5@s370__get_:

; 152  :     else
; 153  :         skey  = *_get_dev_storekey_ptr(  dev, abs, K );

  00066	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR K$[rsp]
  0006c	48 8b 54 24 48	 mov	 rdx, QWORD PTR abs$[rsp]
  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00076	e8 00 00 00 00	 call	 _get_dev_storekey_ptr
  0007b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0007e	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al
$LN6@s370__get_:

; 154  :     return skey;

  00082	0f b6 44 24 20	 movzx	 eax, BYTE PTR skey$[rsp]

; 155  : }

  00087	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008b	c3		 ret	 0
s370__get_dev_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT s370__get_storage_key
_TEXT	SEGMENT
skey$ = 32
abs$ = 64
K$ = 72
s370__get_storage_key PROC				; COMDAT

; 130  : {

$LN8:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@s370__get_:

; 131  :     BYTE skey;
; 132  :     UNREFERENCED( K ); // (for FEATURE_4K_STORAGE_KEYS case)

  0000d	33 c0		 xor	 eax, eax
  0000f	85 c0		 test	 eax, eax
  00011	75 fa		 jne	 SHORT $LN4@s370__get_

; 133  :     if (IS_DOUBLE_KEYED_4K_BYTE_BLOCK( K ))

  00013	0f b6 44 24 48	 movzx	 eax, BYTE PTR K$[rsp]
  00018	83 f8 04	 cmp	 eax, 4
  0001b	75 39		 jne	 SHORT $LN5@s370__get_
  0001d	33 c0		 xor	 eax, eax
  0001f	83 f8 01	 cmp	 eax, 1
  00022	74 32		 je	 SHORT $LN5@s370__get_

; 134  :     {
; 135  :         skey  = *_get_storekey1_ptr( abs );

  00024	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  00029	e8 00 00 00 00	 call	 _get_storekey1_ptr
  0002e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00031	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 136  :         skey |= *_get_storekey2_ptr( abs ) & ~(STORKEY_KEY);

  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  0003a	e8 00 00 00 00	 call	 _get_storekey2_ptr
  0003f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00042	25 0f ff ff ff	 and	 eax, -241		; ffffffffffffff0fH
  00047	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR skey$[rsp]
  0004c	0b c8		 or	 ecx, eax
  0004e	8b c1		 mov	 eax, ecx
  00050	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al

; 137  :     }

  00054	eb 16		 jmp	 SHORT $LN6@s370__get_
$LN5@s370__get_:

; 138  :     else
; 139  :         skey  = *_get_storekey_ptr(  abs, K );

  00056	0f b6 54 24 48	 movzx	 edx, BYTE PTR K$[rsp]
  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs$[rsp]
  00060	e8 00 00 00 00	 call	 _get_storekey_ptr
  00065	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00068	88 44 24 20	 mov	 BYTE PTR skey$[rsp], al
$LN6@s370__get_:

; 140  :     return skey;

  0006c	0f b6 44 24 20	 movzx	 eax, BYTE PTR skey$[rsp]

; 141  : }

  00071	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00075	c3		 ret	 0
s370__get_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_dev_storekey2_ptr
_TEXT	SEGMENT
dev$ = 8
abs$ = 16
_get_dev_storekey2_ptr PROC				; COMDAT

; 72   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 73   :     ABS_CHECK( abs );
; 74   :     return &STOREKEY2( abs, dev );

  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR abs$[rsp]
  0000f	48 c1 e8 0b	 shr	 rax, 11
  00013	48 83 c8 01	 or	 rax, 1
  00017	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  0001c	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00023	48 03 c8	 add	 rcx, rax
  00026	48 8b c1	 mov	 rax, rcx

; 75   : }

  00029	c3		 ret	 0
_get_dev_storekey2_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_dev_storekey1_ptr
_TEXT	SEGMENT
dev$ = 8
abs$ = 16
_get_dev_storekey1_ptr PROC				; COMDAT

; 66   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 67   :     ABS_CHECK( abs );
; 68   :     return &STOREKEY1( abs, dev );

  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR abs$[rsp]
  0000f	48 c1 e8 0b	 shr	 rax, 11
  00013	48 83 e0 fe	 and	 rax, -2
  00017	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  0001c	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00023	48 03 c8	 add	 rcx, rax
  00026	48 8b c1	 mov	 rax, rcx

; 69   : }

  00029	c3		 ret	 0
_get_dev_storekey1_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_storekey2_ptr
_TEXT	SEGMENT
abs$ = 8
_get_storekey2_ptr PROC					; COMDAT

; 60   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 61   :     ABS_CHECK( abs );
; 62   :     return &STOREKEY2( abs, &sysblk );

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR abs$[rsp]
  0000a	48 c1 e8 0b	 shr	 rax, 11
  0000e	48 83 c8 01	 or	 rax, 1
  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00019	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00020	48 03 c8	 add	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx

; 63   : }

  00026	c3		 ret	 0
_get_storekey2_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_storekey1_ptr
_TEXT	SEGMENT
abs$ = 8
_get_storekey1_ptr PROC					; COMDAT

; 54   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 55   :     ABS_CHECK( abs );
; 56   :     return &STOREKEY1( abs, &sysblk );

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR abs$[rsp]
  0000a	48 c1 e8 0b	 shr	 rax, 11
  0000e	48 83 e0 fe	 and	 rax, -2
  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00019	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00020	48 03 c8	 add	 rcx, rax
  00023	48 8b c1	 mov	 rax, rcx

; 57   : }

  00026	c3		 ret	 0
_get_storekey1_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_dev_storekey_ptr
_TEXT	SEGMENT
tv75 = 0
dev$ = 32
abs$ = 40
K$ = 48
_get_dev_storekey_ptr PROC				; COMDAT

; 47   : {

$LN5:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 48   :     ABS_CHECK( abs );
; 49   :     return (4 == K) ? &STOREKEY1( abs, dev ) // (see feature.h PROGRAMMING NOTE)

  00013	0f b6 44 24 30	 movzx	 eax, BYTE PTR K$[rsp]
  00018	83 f8 04	 cmp	 eax, 4
  0001b	75 25		 jne	 SHORT $LN3@get_dev_st
  0001d	48 8b 44 24 28	 mov	 rax, QWORD PTR abs$[rsp]
  00022	48 c1 e8 0b	 shr	 rax, 11
  00026	48 83 e0 fe	 and	 rax, -2
  0002a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dev$[rsp]
  0002f	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00036	48 03 c8	 add	 rcx, rax
  00039	48 8b c1	 mov	 rax, rcx
  0003c	48 89 04 24	 mov	 QWORD PTR tv75[rsp], rax
  00040	eb 1f		 jmp	 SHORT $LN4@get_dev_st
$LN3@get_dev_st:
  00042	48 8b 44 24 28	 mov	 rax, QWORD PTR abs$[rsp]
  00047	48 c1 e8 0b	 shr	 rax, 11
  0004b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dev$[rsp]
  00050	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00057	48 03 c8	 add	 rcx, rax
  0005a	48 8b c1	 mov	 rax, rcx
  0005d	48 89 04 24	 mov	 QWORD PTR tv75[rsp], rax
$LN4@get_dev_st:
  00061	48 8b 04 24	 mov	 rax, QWORD PTR tv75[rsp]

; 50   :                     : &STOREKEY(  abs, dev );
; 51   : }

  00065	48 83 c4 18	 add	 rsp, 24
  00069	c3		 ret	 0
_get_dev_storekey_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\skey.h
;	COMDAT _get_storekey_ptr
_TEXT	SEGMENT
tv75 = 0
abs$ = 32
K$ = 40
_get_storekey_ptr PROC					; COMDAT

; 40   : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 41   :     ABS_CHECK( abs );
; 42   :     return (4 == K) ? &STOREKEY1( abs, &sysblk ) // (see feature.h PROGRAMMING NOTE)

  0000d	0f b6 44 24 28	 movzx	 eax, BYTE PTR K$[rsp]
  00012	83 f8 04	 cmp	 eax, 4
  00015	75 27		 jne	 SHORT $LN3@get_storek
  00017	48 8b 44 24 20	 mov	 rax, QWORD PTR abs$[rsp]
  0001c	48 c1 e8 0b	 shr	 rax, 11
  00020	48 83 e0 fe	 and	 rax, -2
  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0002b	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00032	48 03 c8	 add	 rcx, rax
  00035	48 8b c1	 mov	 rax, rcx
  00038	48 89 04 24	 mov	 QWORD PTR tv75[rsp], rax
  0003c	eb 21		 jmp	 SHORT $LN4@get_storek
$LN3@get_storek:
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR abs$[rsp]
  00043	48 c1 e8 0b	 shr	 rax, 11
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004e	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00055	48 03 c8	 add	 rcx, rax
  00058	48 8b c1	 mov	 rax, rcx
  0005b	48 89 04 24	 mov	 QWORD PTR tv75[rsp], rax
$LN4@get_storek:
  0005f	48 8b 04 24	 mov	 rax, QWORD PTR tv75[rsp]

; 43   :                     : &STOREKEY(  abs, &sysblk );
; 44   : }

  00063	48 83 c4 18	 add	 rsp, 24
  00067	c3		 ret	 0
_get_storekey_ptr ENDP
_TEXT	ENDS
END
