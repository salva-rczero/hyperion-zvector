; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
VOL1_KEYA DB	056H
	DB	04fH
	DB	04cH
	DB	031H
VOL1_KEY DB	0e5H
	DB	0d6H
	DB	0d3H
	DB	0f1H
IPL1_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f1H
IPL2_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f2H
iplpsw	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
iplccw1	DB	06H
	DB	00H
	DB	03aH
	DB	098H
	DB	060H
	DB	00H
	DB	00H
	DB	060H
iplccw2	DB	08H
	DB	00H
	DB	03aH
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
noiplpsw DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
noiplccw1 DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
noiplccw2 DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
ipl2data DB	07H
	DB	00H
	DB	03aH
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	06H
	DB	031H
	DB	00H
	DB	03aH
	DB	0beH
	DB	040H
	DB	00H
	DB	00H
	DB	05H
	DB	08H
	DB	00H
	DB	03aH
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	07fH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
CONST	ENDS
PUBLIC	syntax
PUBLIC	main
EXTRN	__imp__errno:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_cckd64_chkdsk:PROC
EXTRN	__imp_cckd_chkdsk:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_is_dh_devid_typ:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
$SG159676 DB	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$syntax DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$syntax
$pdata$main DD	imagerel $LN76
	DD	imagerel $LN76+3435
	DD	imagerel $unwind$main
pdata	ENDS
_DATA	SEGMENT
$SG159621 DB	'CCKD64 dasd image verification', 00H
	ORG $+1
$SG159622 DB	'cckdcdsk64', 00H
	ORG $+1
$SG159638 DB	'open()', 00H
	ORG $+1
$SG159639 DB	'E', 00H
	ORG $+2
$SG159640 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG159641 DB	'main', 00H
	ORG $+3
$SG159646 DB	'read()', 00H
	ORG $+1
$SG159647 DB	'E', 00H
	ORG $+2
$SG159642 DB	'cckdcdsk64.c', 00H
	ORG $+3
$SG159644 DB	'CKD header incomplete', 00H
	ORG $+2
$SG159648 DB	'HHC00354%s %1d:%04X CCKD file %s: error in function %s: '
	DB	'%s', 0aH, 00H
$SG159649 DB	'main', 00H
	ORG $+3
$SG159652 DB	'E', 00H
	ORG $+2
$SG159650 DB	'cckdcdsk64.c', 00H
	ORG $+3
$SG159654 DB	'main', 00H
	ORG $+3
$SG159653 DB	'HHC02424%s Dasd image file format unsupported or unrecog'
	DB	'nized: %s', 0aH, 00H
	ORG $+1
$SG159659 DB	'E', 00H
	ORG $+2
$SG159655 DB	'cckdcdsk64.c', 00H
	ORG $+3
$SG159658 DB	'lseek()', 00H
$SG159660 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159661 DB	'main', 00H
	ORG $+3
$SG159665 DB	'read()', 00H
	ORG $+1
$SG159666 DB	'E', 00H
	ORG $+2
$SG159662 DB	'cckdcdsk64.c', 00H
	ORG $+3
$SG159664 DB	'incomplete', 00H
	ORG $+1
$SG159668 DB	'main', 00H
	ORG $+7
$SG159667 DB	'HHC00355%s %1d:%04X CCKD file %s: error in function %s a'
	DB	't offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+2
$SG159671 DB	'E', 00H
	ORG $+2
$SG159669 DB	'cckdcdsk64.c', 00H
	ORG $+3
$SG159672 DB	'HHC00352%s %1d:%04X CCKD file %s: opened bit is on, use '
	DB	'-f', 0aH, 00H
$SG159673 DB	'main', 00H
	ORG $+3
$SG159677 DB	'I', 00H
	ORG $+2
$SG159674 DB	'cckdcdsk64.c', 00H
	ORG $+3
$SG159675 DB	' (read-only)', 00H
	ORG $+3
$SG159678 DB	'HHC00379%s %1d:%04X CCKD file %s: starting %s level %d%s'
	DB	'...', 0aH, 00H
	ORG $+3
$SG159679 DB	'main', 00H
	ORG $+3
$SG159680 DB	'cckdcdsk64.c', 00H
	ORG $+3
$SG159683 DB	'W', 00H
	ORG $+2
$SG159684 DB	'I', 00H
	ORG $+2
$SG159685 DB	'HHC00380%s %1d:%04X CCKD file %s: %s level %d complete; '
	DB	'rc=%d', 0aH, 00H
	ORG $+1
$SG159686 DB	'main', 00H
	ORG $+3
$SG159687 DB	'cckdcdsk64.c', 00H
	ORG $+3
$SG159694 DB	'I', 00H
	ORG $+6
$SG159695 DB	'HHC02411%s Usage: %s [-f] [-level] [-ro] file1 [file2 ..'
	DB	'.]', 0aH, 'HHC02410I   file    name of DASD image file', 0aH, 'H'
	DB	'HC02411I options:', 0aH, 'HHC02411I   -f      force check eve'
	DB	'n if OPENED bit is on', 0aH, 'HHC02411I   -ro     open file r'
	DB	'eadonly, no repairs', 0aH, 'HHC02411I   -0      minimal check'
	DB	'ing (hdr, chdr, l1tab, l2tabs)', 0aH, 'HHC02411I   -1      no'
	DB	'rmal  checking (hdr, chdr, l1tab, l2tabs, free spaces)', 0aH, 'H'
	DB	'HC02411I   -2      extra   checking (hdr, chdr, l1tab, l2tabs'
	DB	', free spaces, trkhdrs)', 0aH, 'HHC02411I   -3      maximal c'
	DB	'hecking (hdr, chdr, l1tab, l2tabs, free spaces, trkimgs)', 0aH
	DB	'HHC02411I   -4      recover everything without using meta-dat'
	DB	'a', 0aH, 00H
	ORG $+1
$SG159696 DB	'syntax', 00H
	ORG $+1
$SG159697 DB	'cckdcdsk64.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	021H
	DD	0cecH
voltbl	ENDS
xdata	SEGMENT
$unwind$syntax DD 010901H
	DD	08209H
$unwind$main DD	032919H
	DD	04200117H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	020f0H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdcdsk64.c
_TEXT	SEGMENT
dev$ = 112
rc$ = 120
level$ = 124
tv83 = 128
i$ = 132
maxrc$ = 136
ro$ = 140
pgm$ = 144
tv200 = 152
tv228 = 156
tv234 = 160
force$ = 164
tv286 = 168
tv292 = 172
tv325 = 176
tv331 = 180
tv352 = 184
tv358 = 188
tv381 = 192
tv419 = 196
tv451 = 200
tv457 = 204
tv178 = 208
tv194 = 212
emsg$1 = 216
tv316 = 224
tv372 = 232
tv460 = 240
tv184 = 248
tv189 = 256
tv223 = 264
tv252 = 272
tv275 = 280
tv281 = 288
tv320 = 296
tv347 = 304
tv376 = 312
tv446 = 320
devhdr$ = 336
cdevhdr$ = 848
devblk$ = 1360
__$ArrayPad$ = 8432
argc$ = 8464
argv$ = 8472
main	PROC

; 27   : {

$LN76:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	b8 00 21 00 00	 mov	 eax, 8448		; 00002100H
  0000f	e8 00 00 00 00	 call	 __chkstk
  00014	48 2b e0	 sub	 rsp, rax
  00017	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001e	48 33 c4	 xor	 rax, rsp
  00021	48 89 84 24 f0
	20 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 28   : char           *pgm;                    /* less any extension (.ext) */
; 29   : int             i;                      /* Index                     */
; 30   : int             rc;                     /* Return code               */
; 31   : int             maxrc=0;                /* Worst return code         */

  00029	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR maxrc$[rsp], 0

; 32   : int             level=1;                /* Chkdsk level checking     */

  00034	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR level$[rsp], 1

; 33   : int             ro=0;                   /* 1=Open readonly           */

  0003c	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ro$[rsp], 0

; 34   : int             force=0;                /* 1=Check if OPENED bit on  */

  00047	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR force$[rsp], 0

; 35   : CKD_DEVHDR      devhdr;                 /* CKD device header         */
; 36   : CCKD64_DEVHDR   cdevhdr;                /* Compressed CKD device hdr */
; 37   : DEVBLK          devblk;                 /* DEVBLK                    */
; 38   : DEVBLK         *dev;                    /* DEVBLK pointer            */
; 39   : 
; 40   :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  00052	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR pgm$[rsp]
  0005a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159621
  00066	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159622
  0006d	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00075	8b 8c 24 10 21
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  00082	89 84 24 10 21
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 41   : 
; 42   :     /* parse the arguments */
; 43   :     for (argc--, argv++ ; argc > 0 ; argc--, argv++)

  00089	8b 84 24 10 21
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00090	ff c8		 dec	 eax
  00092	89 84 24 10 21
	00 00		 mov	 DWORD PTR argc$[rsp], eax
  00099	48 8b 84 24 18
	21 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000a1	48 83 c0 08	 add	 rax, 8
  000a5	48 89 84 24 18
	21 00 00	 mov	 QWORD PTR argv$[rsp], rax
  000ad	eb 24		 jmp	 SHORT $LN4@main
$LN2@main:
  000af	8b 84 24 10 21
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  000b6	ff c8		 dec	 eax
  000b8	89 84 24 10 21
	00 00		 mov	 DWORD PTR argc$[rsp], eax
  000bf	48 8b 84 24 18
	21 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000c7	48 83 c0 08	 add	 rax, 8
  000cb	48 89 84 24 18
	21 00 00	 mov	 QWORD PTR argv$[rsp], rax
$LN4@main:
  000d3	83 bc 24 10 21
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  000db	0f 8e b6 01 00
	00		 jle	 $LN3@main

; 44   :     {
; 45   :         if(**argv != '-') break;

  000e1	48 8b 84 24 18
	21 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  000e9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ec	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ef	83 f8 2d	 cmp	 eax, 45			; 0000002dH
  000f2	74 05		 je	 SHORT $LN10@main
  000f4	e9 9e 01 00 00	 jmp	 $LN3@main
$LN10@main:

; 46   : 
; 47   :         switch(argv[0][1])

  000f9	b8 08 00 00 00	 mov	 eax, 8
  000fe	48 6b c0 00	 imul	 rax, rax, 0
  00102	b9 01 00 00 00	 mov	 ecx, 1
  00107	48 6b c9 01	 imul	 rcx, rcx, 1
  0010b	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00113	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00117	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0011b	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv83[rsp], eax
  00122	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv83[rsp]
  00129	83 e8 30	 sub	 eax, 48			; 00000030H
  0012c	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv83[rsp], eax
  00133	83 bc 24 80 00
	00 00 42	 cmp	 DWORD PTR tv83[rsp], 66	; 00000042H
  0013b	0f 87 3f 01 00
	00		 ja	 $LN22@main
  00141	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR tv83[rsp]
  00149	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00150	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN74@main[rcx+rax]
  00158	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN75@main[rcx+rax*4]
  0015f	48 03 c1	 add	 rax, rcx
  00162	ff e0		 jmp	 rax
$LN11@main:
$LN12@main:
$LN13@main:
$LN14@main:
$LN15@main:

; 48   :         {
; 49   :             case '0':
; 50   :             case '1':
; 51   :             case '2':
; 52   :             case '3':
; 53   :             case '4':  if (argv[0][2] != '\0') return syntax( pgm );

  00164	b8 08 00 00 00	 mov	 eax, 8
  00169	48 6b c0 00	 imul	 rax, rax, 0
  0016d	b9 01 00 00 00	 mov	 ecx, 1
  00172	48 6b c9 02	 imul	 rcx, rcx, 2
  00176	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0017e	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00182	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00186	85 c0		 test	 eax, eax
  00188	74 12		 je	 SHORT $LN16@main
  0018a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00192	e8 00 00 00 00	 call	 syntax
  00197	e9 50 0b 00 00	 jmp	 $LN1@main
$LN16@main:

; 54   :                        level = (argv[0][1] & 0xf);

  0019c	b8 08 00 00 00	 mov	 eax, 8
  001a1	48 6b c0 00	 imul	 rax, rax, 0
  001a5	b9 01 00 00 00	 mov	 ecx, 1
  001aa	48 6b c9 01	 imul	 rcx, rcx, 1
  001ae	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001b6	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001ba	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  001be	83 e0 0f	 and	 eax, 15
  001c1	89 44 24 7c	 mov	 DWORD PTR level$[rsp], eax

; 55   :                        break;

  001c5	e9 c8 00 00 00	 jmp	 $LN5@main
$LN17@main:

; 56   :             case 'f':  if (argv[0][2] != '\0') return syntax( pgm );

  001ca	b8 08 00 00 00	 mov	 eax, 8
  001cf	48 6b c0 00	 imul	 rax, rax, 0
  001d3	b9 01 00 00 00	 mov	 ecx, 1
  001d8	48 6b c9 02	 imul	 rcx, rcx, 2
  001dc	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001e4	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  001e8	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  001ec	85 c0		 test	 eax, eax
  001ee	74 12		 je	 SHORT $LN18@main
  001f0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  001f8	e8 00 00 00 00	 call	 syntax
  001fd	e9 ea 0a 00 00	 jmp	 $LN1@main
$LN18@main:

; 57   :                        force = 1;

  00202	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR force$[rsp], 1

; 58   :                        break;

  0020d	e9 80 00 00 00	 jmp	 $LN5@main
$LN19@main:

; 59   :             case 'r':  if (argv[0][2] == 'o' && argv[0][3] == '\0')

  00212	b8 08 00 00 00	 mov	 eax, 8
  00217	48 6b c0 00	 imul	 rax, rax, 0
  0021b	b9 01 00 00 00	 mov	 ecx, 1
  00220	48 6b c9 02	 imul	 rcx, rcx, 2
  00224	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0022c	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00230	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  00234	83 f8 6f	 cmp	 eax, 111		; 0000006fH
  00237	75 33		 jne	 SHORT $LN20@main
  00239	b8 08 00 00 00	 mov	 eax, 8
  0023e	48 6b c0 00	 imul	 rax, rax, 0
  00242	b9 01 00 00 00	 mov	 ecx, 1
  00247	48 6b c9 03	 imul	 rcx, rcx, 3
  0024b	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00253	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00257	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0025b	85 c0		 test	 eax, eax
  0025d	75 0d		 jne	 SHORT $LN20@main

; 60   :                            ro = 1;

  0025f	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ro$[rsp], 1
  0026a	eb 12		 jmp	 SHORT $LN21@main
$LN20@main:

; 61   :                        else return syntax( pgm );

  0026c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00274	e8 00 00 00 00	 call	 syntax
  00279	e9 6e 0a 00 00	 jmp	 $LN1@main
$LN21@main:

; 62   :                        break;

  0027e	eb 12		 jmp	 SHORT $LN5@main
$LN22@main:

; 63   :             default:   return syntax( pgm );

  00280	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00288	e8 00 00 00 00	 call	 syntax
  0028d	e9 5a 0a 00 00	 jmp	 $LN1@main
$LN5@main:

; 64   :         }
; 65   :     }

  00292	e9 18 fe ff ff	 jmp	 $LN2@main
$LN3@main:

; 66   : 
; 67   :     if (argc < 1) return syntax( pgm );

  00297	83 bc 24 10 21
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  0029f	7d 12		 jge	 SHORT $LN23@main
  002a1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  002a9	e8 00 00 00 00	 call	 syntax
  002ae	e9 39 0a 00 00	 jmp	 $LN1@main
$LN23@main:

; 68   : 
; 69   :     dev = &devblk;

  002b3	48 8d 84 24 50
	05 00 00	 lea	 rax, QWORD PTR devblk$[rsp]
  002bb	48 89 44 24 70	 mov	 QWORD PTR dev$[rsp], rax

; 70   : 
; 71   :     for (i = 0; i < argc; i++)

  002c0	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  002cb	eb 10		 jmp	 SHORT $LN9@main
$LN7@main:
  002cd	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  002d4	ff c0		 inc	 eax
  002d6	89 84 24 84 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN9@main:
  002dd	8b 84 24 10 21
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  002e4	39 84 24 84 00
	00 00		 cmp	 DWORD PTR i$[rsp], eax
  002eb	0f 8d f4 09 00
	00		 jge	 $LN8@main

; 72   :     {
; 73   :         memset (dev, 0, sizeof(DEVBLK));

  002f1	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dev$[rsp]
  002f6	33 c0		 xor	 eax, eax
  002f8	b9 a0 1b 00 00	 mov	 ecx, 7072		; 00001ba0H
  002fd	f3 aa		 rep stosb

; 74   :         dev->batch = 1;

  002ff	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00304	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0030a	0f ba e8 0a	 bts	 eax, 10
  0030e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00313	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 75   : 
; 76   :         /* open the file */
; 77   :         hostpath(dev->filename, argv[i], sizeof(dev->filename));

  00319	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00321	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00326	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0032d	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00333	48 8b 94 24 18
	21 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0033b	48 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+rax*8]
  0033f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 78   :         dev->fd = HOPEN (dev->filename, ro ? O_RDONLY|O_BINARY : O_RDWR|O_BINARY);

  00345	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  0034d	74 0d		 je	 SHORT $LN38@main
  0034f	c7 84 24 d0 00
	00 00 00 80 00
	00		 mov	 DWORD PTR tv178[rsp], 32768 ; 00008000H
  0035a	eb 0b		 jmp	 SHORT $LN39@main
$LN38@main:
  0035c	c7 84 24 d0 00
	00 00 02 80 00
	00		 mov	 DWORD PTR tv178[rsp], 32770 ; 00008002H
$LN39@main:
  00367	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0036c	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00372	8b 94 24 d0 00
	00 00		 mov	 edx, DWORD PTR tv178[rsp]
  00379	48 8b c8	 mov	 rcx, rax
  0037c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  00382	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00387	89 81 ac 01 00
	00		 mov	 DWORD PTR [rcx+428], eax

; 79   :         if (dev->fd < 0)

  0038d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00392	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00399	0f 8d fe 00 00
	00		 jge	 $LN24@main

; 80   :         {
; 81   :             // "%1d:%04X CCKD file %s: error in function %s: %s"
; 82   :             FWRMSG( stderr, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  0039f	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  003a5	74 12		 je	 SHORT $LN40@main
  003a7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  003ac	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  003b0	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv194[rsp], eax
  003b7	eb 0b		 jmp	 SHORT $LN41@main
$LN40@main:
  003b9	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv194[rsp], 0
$LN41@main:
  003c4	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  003ca	74 14		 je	 SHORT $LN42@main
  003cc	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  003d1	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  003d5	d1 f8		 sar	 eax, 1
  003d7	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv200[rsp], eax
  003de	eb 0b		 jmp	 SHORT $LN43@main
$LN42@main:
  003e0	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv200[rsp], 0
$LN43@main:
  003eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  003f1	8b 08		 mov	 ecx, DWORD PTR [rax]
  003f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  003f9	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv184[rsp], rax
  00401	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00406	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0040d	48 89 8c 24 00
	01 00 00	 mov	 QWORD PTR tv189[rsp], rcx
  00415	b9 02 00 00 00	 mov	 ecx, 2
  0041a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00420	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv184[rsp]
  00428	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0042d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159638
  00434	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00439	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv189[rsp]
  00441	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00446	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv194[rsp]
  0044d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00451	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv200[rsp]
  00458	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0045c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159639
  00463	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00468	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159640
  0046f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00474	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00479	41 b9 03 00 00
	00		 mov	 r9d, 3
  0047f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159641
  00486	ba 53 00 00 00	 mov	 edx, 83			; 00000053H
  0048b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159642
  00492	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 83   :                     "open()", strerror( errno ));
; 84   :             continue;

  00498	e9 30 fe ff ff	 jmp	 $LN7@main
$LN24@main:

; 85   :         }
; 86   : 
; 87   :         /* Read the device header */
; 88   :         rc = read (dev->fd, &devhdr, CKD_DEVHDR_SIZE);

  0049d	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  004a3	48 8d 94 24 50
	01 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  004ab	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  004b0	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  004b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  004bc	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 89   :         if (rc < (int)CKD_DEVHDR_SIZE)

  004c0	81 7c 24 78 00
	02 00 00	 cmp	 DWORD PTR rc$[rsp], 512	; 00000200H
  004c8	0f 8d 24 01 00
	00		 jge	 $LN25@main

; 90   :         {
; 91   :             const char* emsg = "CKD header incomplete";

  004ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159644
  004d5	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR emsg$1[rsp], rax

; 92   :             if (rc < 0)

  004dd	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  004e2	7d 16		 jge	 SHORT $LN26@main

; 93   :                 emsg = strerror( errno );

  004e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  004ea	8b 08		 mov	 ecx, DWORD PTR [rax]
  004ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  004f2	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR emsg$1[rsp], rax
$LN26@main:

; 94   : 
; 95   :             // "%1d:%04X CCKD file %s: error in function %s: %s"
; 96   :             FWRMSG( stderr, HHC00354, "E", LCSS_DEVNUM, dev->filename,

  004fa	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00500	74 12		 je	 SHORT $LN44@main
  00502	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00507	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0050b	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv228[rsp], eax
  00512	eb 0b		 jmp	 SHORT $LN45@main
$LN44@main:
  00514	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv228[rsp], 0
$LN45@main:
  0051f	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00525	74 14		 je	 SHORT $LN46@main
  00527	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0052c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00530	d1 f8		 sar	 eax, 1
  00532	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv234[rsp], eax
  00539	eb 0b		 jmp	 SHORT $LN47@main
$LN46@main:
  0053b	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv234[rsp], 0
$LN47@main:
  00546	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0054b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00551	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv223[rsp], rax
  00559	b9 02 00 00 00	 mov	 ecx, 2
  0055e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00564	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR emsg$1[rsp]
  0056c	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00571	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159646
  00578	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0057d	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv223[rsp]
  00585	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0058a	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv228[rsp]
  00591	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00595	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv234[rsp]
  0059c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  005a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159647
  005a7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159648
  005b3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005b8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005bd	41 b9 03 00 00
	00		 mov	 r9d, 3
  005c3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159649
  005ca	ba 61 00 00 00	 mov	 edx, 97			; 00000061H
  005cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159650
  005d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 97   :                     "read()", emsg );
; 98   :             close( dev->fd );

  005dc	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  005e1	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  005e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 99   :             continue;

  005ed	e9 db fc ff ff	 jmp	 $LN7@main
$LN25@main:

; 100  :         }
; 101  : 
; 102  :         /* Check the device header identifier */
; 103  :         if (!is_dh_devid_typ( devhdr.dh_devid, ANY_CMP_OR_SF_TYP ))

  005f2	ba 60 60 60 60	 mov	 edx, 1616928864		; 60606060H
  005f7	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  005ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_dh_devid_typ
  00605	0f b6 c0	 movzx	 eax, al
  00608	85 c0		 test	 eax, eax
  0060a	75 7d		 jne	 SHORT $LN27@main

; 104  :         {
; 105  :             // "Dasd image file format unsupported or unrecognized: %s"
; 106  :             FWRMSG( stderr, HHC02424, "E", dev->filename );

  0060c	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00611	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00617	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv252[rsp], rax
  0061f	b9 02 00 00 00	 mov	 ecx, 2
  00624	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0062a	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv252[rsp]
  00632	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00637	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159652
  0063e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00643	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159653
  0064a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0064f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00654	41 b9 03 00 00
	00		 mov	 r9d, 3
  0065a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159654
  00661	ba 6a 00 00 00	 mov	 edx, 106		; 0000006aH
  00666	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159655
  0066d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 107  :             close( dev->fd );

  00673	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00678	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0067e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 108  :             continue;

  00684	e9 44 fc ff ff	 jmp	 $LN7@main
$LN27@main:

; 109  :         }
; 110  :         dev->cckd64 = 1;

  00689	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0068e	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  00695	0c 01		 or	 al, 1
  00697	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0069c	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 111  : 
; 112  :         /* Check CCKD_OPT_OPENED bit if -f not specified */
; 113  :         if (!force)

  006a2	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR force$[rsp], 0
  006aa	0f 85 91 03 00
	00		 jne	 $LN28@main

; 114  :         {
; 115  :             /* PROGRAMMING NOTE: even though we're reading a CKD64
; 116  :                "CCKD64_DEVHDR" compressed device header here (and
; 117  :                not a regular "CCKD_DEVHDR" compressed device header)
; 118  :                (even though our input file might NOT be a CKD64 file),
; 119  :                the following is still safe to do since the ONLY field
; 120  :                we are interested in is the 'cdh_opts' options flags
; 121  :                field, which is identical for both structs.
; 122  :             */
; 123  :             if (lseek (dev->fd, CCKD64_DEVHDR_POS, SEEK_SET) < 0)

  006b0	45 33 c0	 xor	 r8d, r8d
  006b3	ba 00 02 00 00	 mov	 edx, 512		; 00000200H
  006b8	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  006bd	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  006c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  006c9	48 85 c0	 test	 rax, rax
  006cc	0f 8d 18 01 00
	00		 jge	 $LN29@main

; 124  :             {
; 125  :                 // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 126  :                 FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  006d2	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  006d8	74 12		 je	 SHORT $LN48@main
  006da	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  006df	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  006e3	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv286[rsp], eax
  006ea	eb 0b		 jmp	 SHORT $LN49@main
$LN48@main:
  006ec	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv286[rsp], 0
$LN49@main:
  006f7	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  006fd	74 14		 je	 SHORT $LN50@main
  006ff	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00704	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00708	d1 f8		 sar	 eax, 1
  0070a	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv292[rsp], eax
  00711	eb 0b		 jmp	 SHORT $LN51@main
$LN50@main:
  00713	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv292[rsp], 0
$LN51@main:
  0071e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00724	8b 08		 mov	 ecx, DWORD PTR [rax]
  00726	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0072c	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv275[rsp], rax
  00734	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00739	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00740	48 89 8c 24 20
	01 00 00	 mov	 QWORD PTR tv281[rsp], rcx
  00748	b9 02 00 00 00	 mov	 ecx, 2
  0074d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00753	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv275[rsp]
  0075b	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00760	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  00769	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159658
  00770	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00775	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv281[rsp]
  0077d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00782	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv286[rsp]
  00789	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0078d	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv292[rsp]
  00794	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00798	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159659
  0079f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159660
  007ab	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007b5	41 b9 03 00 00
	00		 mov	 r9d, 3
  007bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159661
  007c2	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  007c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159662
  007ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 127  :                         "lseek()", (U64)CCKD64_DEVHDR_POS, strerror( errno ));
; 128  :                 close (dev->fd);

  007d4	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007d9	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  007df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 129  :                 continue;

  007e5	e9 e3 fa ff ff	 jmp	 $LN7@main
$LN29@main:

; 130  :             }
; 131  :             if ((rc = read (dev->fd, &cdevhdr, CCKD64_DEVHDR_SIZE)) < CCKD64_DEVHDR_SIZE)

  007ea	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  007f0	48 8d 94 24 50
	03 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  007f8	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  007fd	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00803	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  00809	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  0080d	48 63 44 24 78	 movsxd	 rax, DWORD PTR rc$[rsp]
  00812	48 3d 00 02 00
	00		 cmp	 rax, 512		; 00000200H
  00818	0f 8d 2f 01 00
	00		 jge	 $LN30@main

; 132  :             {
; 133  :                 // "%1d:%04X CCKD file %s: error in function %s at offset 0x%16.16"PRIX64": %s"
; 134  :                 FWRMSG( stderr, HHC00355, "E", LCSS_DEVNUM, dev->filename,

  0081e	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00823	7d 18		 jge	 SHORT $LN52@main
  00825	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0082b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0082d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00833	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv316[rsp], rax
  0083b	eb 0f		 jmp	 SHORT $LN53@main
$LN52@main:
  0083d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159664
  00844	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv316[rsp], rax
$LN53@main:
  0084c	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00852	74 12		 je	 SHORT $LN54@main
  00854	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00859	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0085d	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv325[rsp], eax
  00864	eb 0b		 jmp	 SHORT $LN55@main
$LN54@main:
  00866	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN55@main:
  00871	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00877	74 14		 je	 SHORT $LN56@main
  00879	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0087e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00882	d1 f8		 sar	 eax, 1
  00884	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv331[rsp], eax
  0088b	eb 0b		 jmp	 SHORT $LN57@main
$LN56@main:
  0088d	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv331[rsp], 0
$LN57@main:
  00898	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0089d	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  008a3	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv320[rsp], rax
  008ab	b9 02 00 00 00	 mov	 ecx, 2
  008b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008b6	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv316[rsp]
  008be	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  008c3	48 c7 44 24 58
	00 02 00 00	 mov	 QWORD PTR [rsp+88], 512	; 00000200H
  008cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159665
  008d3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  008d8	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv320[rsp]
  008e0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  008e5	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv325[rsp]
  008ec	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  008f0	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv331[rsp]
  008f7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  008fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159666
  00902	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00907	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159667
  0090e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00913	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00918	41 b9 03 00 00
	00		 mov	 r9d, 3
  0091e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159668
  00925	ba 87 00 00 00	 mov	 edx, 135		; 00000087H
  0092a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159669
  00931	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 135  :                         "read()", (U64)CCKD64_DEVHDR_POS, rc < 0 ? strerror( errno ) : "incomplete" );
; 136  :                 close (dev->fd);

  00937	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0093c	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00942	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 137  :                 continue;

  00948	e9 80 f9 ff ff	 jmp	 $LN7@main
$LN30@main:

; 138  :             }
; 139  :             if (cdevhdr.cdh_opts & CCKD_OPT_OPENED)

  0094d	0f b6 84 24 53
	03 00 00	 movzx	 eax, BYTE PTR cdevhdr$[rsp+3]
  00955	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0095a	85 c0		 test	 eax, eax
  0095c	0f 84 df 00 00
	00		 je	 $LN31@main

; 140  :             {
; 141  :                 // "%1d:%04X CCKD file %s: opened bit is on, use -f"
; 142  :                 FWRMSG( stderr, HHC00352, "E", LCSS_DEVNUM, dev->filename );

  00962	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00968	74 12		 je	 SHORT $LN58@main
  0096a	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0096f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00973	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv352[rsp], eax
  0097a	eb 0b		 jmp	 SHORT $LN59@main
$LN58@main:
  0097c	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv352[rsp], 0
$LN59@main:
  00987	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  0098d	74 14		 je	 SHORT $LN60@main
  0098f	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00994	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00998	d1 f8		 sar	 eax, 1
  0099a	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv358[rsp], eax
  009a1	eb 0b		 jmp	 SHORT $LN61@main
$LN60@main:
  009a3	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv358[rsp], 0
$LN61@main:
  009ae	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  009b3	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  009b9	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv347[rsp], rax
  009c1	b9 02 00 00 00	 mov	 ecx, 2
  009c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009cc	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv347[rsp]
  009d4	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  009d9	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv352[rsp]
  009e0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  009e4	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv358[rsp]
  009eb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  009ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159671
  009f6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159672
  00a02	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a07	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a0c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a12	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159673
  00a19	ba 8e 00 00 00	 mov	 edx, 142		; 0000008eH
  00a1e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159674
  00a25	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 143  :                 close (dev->fd);

  00a2b	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a30	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00a36	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 144  :                 continue;

  00a3c	e9 8c f8 ff ff	 jmp	 $LN7@main
$LN31@main:
$LN28@main:

; 145  :             }
; 146  :         } /* if (!force) */
; 147  : 
; 148  :         // "%1d:%04X CCKD file %s: starting %s level %d%s..."
; 149  :         WRMSG( HHC00379, "I", LCSS_DEVNUM, dev->filename,

  00a41	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR ro$[rsp], 0
  00a49	74 11		 je	 SHORT $LN62@main
  00a4b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159675
  00a52	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv372[rsp], rax
  00a5a	eb 0f		 jmp	 SHORT $LN63@main
$LN62@main:
  00a5c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159676
  00a63	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv372[rsp], rax
$LN63@main:
  00a6b	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00a71	74 12		 je	 SHORT $LN64@main
  00a73	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a78	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00a7c	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv381[rsp], eax
  00a83	eb 0b		 jmp	 SHORT $LN65@main
$LN64@main:
  00a85	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv381[rsp], 0
$LN65@main:
  00a90	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00a96	74 14		 je	 SHORT $LN66@main
  00a98	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00a9d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00aa1	d1 f8		 sar	 eax, 1
  00aa3	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv419[rsp], eax
  00aaa	eb 0b		 jmp	 SHORT $LN67@main
$LN66@main:
  00aac	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv419[rsp], 0
$LN67@main:
  00ab7	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00abc	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00ac2	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv376[rsp], rax
  00aca	b9 01 00 00 00	 mov	 ecx, 1
  00acf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ad5	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv372[rsp]
  00add	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00ae2	8b 4c 24 7c	 mov	 ecx, DWORD PTR level$[rsp]
  00ae6	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00aea	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00af2	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00af7	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv376[rsp]
  00aff	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00b04	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv381[rsp]
  00b0b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00b0f	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv419[rsp]
  00b16	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00b1a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159677
  00b21	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b26	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159678
  00b2d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b32	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b37	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b3d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159679
  00b44	ba 96 00 00 00	 mov	 edx, 150		; 00000096H
  00b49	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159680
  00b50	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 150  :             pgm, level, ro ? " (read-only)" : "" );
; 151  : 
; 152  :         if (is_dh_devid_typ( devhdr.dh_devid, ANY64_CMP_OR_SF_TYP ))

  00b56	ba 60 00 60 00	 mov	 edx, 6291552		; 00600060H
  00b5b	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  00b63	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_is_dh_devid_typ
  00b69	0f b6 c0	 movzx	 eax, al
  00b6c	85 c0		 test	 eax, eax
  00b6e	74 15		 je	 SHORT $LN32@main

; 153  :             rc = cckd64_chkdsk( dev, level );

  00b70	8b 54 24 7c	 mov	 edx, DWORD PTR level$[rsp]
  00b74	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00b79	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd64_chkdsk
  00b7f	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
  00b83	eb 13		 jmp	 SHORT $LN33@main
$LN32@main:

; 154  :         else
; 155  :             rc = cckd_chkdsk( dev, level );

  00b85	8b 54 24 7c	 mov	 edx, DWORD PTR level$[rsp]
  00b89	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00b8e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_cckd_chkdsk
  00b94	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax
$LN33@main:

; 156  : 
; 157  :         close (dev->fd);

  00b98	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00b9d	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00ba3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 158  : 
; 159  :         // "%1d:%04X CCKD file %s: %s level %d complete: rc=%d"
; 160  :         WRMSG( HHC00380, rc ? "W" : "I", LCSS_DEVNUM, dev->filename,

  00ba9	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00baf	74 12		 je	 SHORT $LN68@main
  00bb1	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00bb6	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00bba	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv451[rsp], eax
  00bc1	eb 0b		 jmp	 SHORT $LN69@main
$LN68@main:
  00bc3	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv451[rsp], 0
$LN69@main:
  00bce	48 83 7c 24 70
	00		 cmp	 QWORD PTR dev$[rsp], 0
  00bd4	74 14		 je	 SHORT $LN70@main
  00bd6	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00bdb	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00bdf	d1 f8		 sar	 eax, 1
  00be1	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv457[rsp], eax
  00be8	eb 0b		 jmp	 SHORT $LN71@main
$LN70@main:
  00bea	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv457[rsp], 0
$LN71@main:
  00bf5	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00bfa	74 11		 je	 SHORT $LN72@main
  00bfc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159683
  00c03	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv460[rsp], rax
  00c0b	eb 0f		 jmp	 SHORT $LN73@main
$LN72@main:
  00c0d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159684
  00c14	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv460[rsp], rax
$LN73@main:
  00c1c	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00c21	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00c27	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv446[rsp], rax
  00c2f	b9 01 00 00 00	 mov	 ecx, 1
  00c34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c3a	8b 4c 24 78	 mov	 ecx, DWORD PTR rc$[rsp]
  00c3e	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  00c42	8b 4c 24 7c	 mov	 ecx, DWORD PTR level$[rsp]
  00c46	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00c4a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  00c52	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00c57	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv446[rsp]
  00c5f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00c64	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv451[rsp]
  00c6b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00c6f	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv457[rsp]
  00c76	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00c7a	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv460[rsp]
  00c82	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c87	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159685
  00c8e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c93	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c98	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c9e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159686
  00ca5	ba a1 00 00 00	 mov	 edx, 161		; 000000a1H
  00caa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159687
  00cb1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 161  :             pgm, level, rc );
; 162  : 
; 163  :         /* Save worst return code */
; 164  :         if (maxrc >= 0)

  00cb7	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR maxrc$[rsp], 0
  00cbf	7c 1f		 jl	 SHORT $LN34@main

; 165  :             if (rc < 0 || rc > maxrc)

  00cc1	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00cc6	7c 0d		 jl	 SHORT $LN36@main
  00cc8	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR maxrc$[rsp]
  00ccf	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00cd3	7e 0b		 jle	 SHORT $LN35@main
$LN36@main:

; 166  :                 maxrc = rc;

  00cd5	8b 44 24 78	 mov	 eax, DWORD PTR rc$[rsp]
  00cd9	89 84 24 88 00
	00 00		 mov	 DWORD PTR maxrc$[rsp], eax
$LN35@main:
$LN34@main:

; 167  : 
; 168  :     } /* for each arg */

  00ce0	e9 e8 f5 ff ff	 jmp	 $LN7@main
$LN8@main:

; 169  : 
; 170  :     return maxrc;

  00ce5	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR maxrc$[rsp]
$LN1@main:

; 171  : }

  00cec	48 8b 8c 24 f0
	20 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00cf4	48 33 cc	 xor	 rcx, rsp
  00cf7	e8 00 00 00 00	 call	 __security_check_cookie
  00cfc	48 81 c4 00 21
	00 00		 add	 rsp, 8448		; 00002100H
  00d03	5f		 pop	 rdi
  00d04	c3		 ret	 0
  00d05	0f 1f 00	 npad	 3
$LN75@main:
  00d08	00 00 00 00	 DD	 $LN11@main
  00d0c	00 00 00 00	 DD	 $LN12@main
  00d10	00 00 00 00	 DD	 $LN13@main
  00d14	00 00 00 00	 DD	 $LN14@main
  00d18	00 00 00 00	 DD	 $LN15@main
  00d1c	00 00 00 00	 DD	 $LN17@main
  00d20	00 00 00 00	 DD	 $LN19@main
  00d24	00 00 00 00	 DD	 $LN22@main
$LN74@main:
  00d28	00		 DB	 0
  00d29	01		 DB	 1
  00d2a	02		 DB	 2
  00d2b	03		 DB	 3
  00d2c	04		 DB	 4
  00d2d	07		 DB	 7
  00d2e	07		 DB	 7
  00d2f	07		 DB	 7
  00d30	07		 DB	 7
  00d31	07		 DB	 7
  00d32	07		 DB	 7
  00d33	07		 DB	 7
  00d34	07		 DB	 7
  00d35	07		 DB	 7
  00d36	07		 DB	 7
  00d37	07		 DB	 7
  00d38	07		 DB	 7
  00d39	07		 DB	 7
  00d3a	07		 DB	 7
  00d3b	07		 DB	 7
  00d3c	07		 DB	 7
  00d3d	07		 DB	 7
  00d3e	07		 DB	 7
  00d3f	07		 DB	 7
  00d40	07		 DB	 7
  00d41	07		 DB	 7
  00d42	07		 DB	 7
  00d43	07		 DB	 7
  00d44	07		 DB	 7
  00d45	07		 DB	 7
  00d46	07		 DB	 7
  00d47	07		 DB	 7
  00d48	07		 DB	 7
  00d49	07		 DB	 7
  00d4a	07		 DB	 7
  00d4b	07		 DB	 7
  00d4c	07		 DB	 7
  00d4d	07		 DB	 7
  00d4e	07		 DB	 7
  00d4f	07		 DB	 7
  00d50	07		 DB	 7
  00d51	07		 DB	 7
  00d52	07		 DB	 7
  00d53	07		 DB	 7
  00d54	07		 DB	 7
  00d55	07		 DB	 7
  00d56	07		 DB	 7
  00d57	07		 DB	 7
  00d58	07		 DB	 7
  00d59	07		 DB	 7
  00d5a	07		 DB	 7
  00d5b	07		 DB	 7
  00d5c	07		 DB	 7
  00d5d	07		 DB	 7
  00d5e	05		 DB	 5
  00d5f	07		 DB	 7
  00d60	07		 DB	 7
  00d61	07		 DB	 7
  00d62	07		 DB	 7
  00d63	07		 DB	 7
  00d64	07		 DB	 7
  00d65	07		 DB	 7
  00d66	07		 DB	 7
  00d67	07		 DB	 7
  00d68	07		 DB	 7
  00d69	07		 DB	 7
  00d6a	06		 DB	 6
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cckdcdsk64.c
_TEXT	SEGMENT
pgm$ = 80
syntax	PROC

; 177  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 178  :     WRMSG( HHC02411, "I", pgm );

  00009	b9 01 00 00 00	 mov	 ecx, 1
  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00014	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pgm$[rsp]
  00019	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159694
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159695
  00031	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00036	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00041	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159696
  00048	ba b2 00 00 00	 mov	 edx, 178		; 000000b2H
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159697
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 179  :     return -1;

  0005a	b8 ff ff ff ff	 mov	 eax, -1

; 180  : }

  0005f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00063	c3		 ret	 0
syntax	ENDP
_TEXT	ENDS
END
