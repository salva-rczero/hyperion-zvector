; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
z900_facs_tab DQ 0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190813
	DQ	0000000000000000H
	DD	00H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190814
	DQ	0000000000000000H
	DD	01H
	DD	060H
	DD	060H
	DD	060H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190815
	DQ	0000000000000000H
	DD	02H
	DD	020H
	DD	020H
	DD	020H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190816
	DQ	0000000000000000H
	DD	03H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190817
	DQ	0000000000000000H
	DD	06H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190818
	DQ	0000000000000000H
	DD	07H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190819
	DQ	0000000000000000H
	DD	08H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190820
	DQ	0000000000000000H
	DD	09H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190821
	DQ	0000000000000000H
	DD	0aH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190822
	DQ	0000000000000000H
	DD	0bH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190823
	DQ	0000000000000000H
	DD	0cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190824
	DQ	0000000000000000H
	DD	0dH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190825
	DQ	0000000000000000H
	DD	0eH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190826
	DQ	0000000000000000H
	DD	0fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190827
	DQ	0000000000000000H
	DD	010H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190828
	DQ	0000000000000000H
	DD	011H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190829
	DQ	0000000000000000H
	DD	012H
	DD	020H
	DD	020H
	DD	020H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190830
	DQ	0000000000000000H
	DD	013H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190831
	DQ	0000000000000000H
	DD	014H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190832
	DQ	0000000000000000H
	DD	015H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190833
	DQ	0000000000000000H
	DD	016H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190834
	DQ	0000000000000000H
	DD	017H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190835
	DQ	0000000000000000H
	DD	018H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190836
	DQ	0000000000000000H
	DD	019H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190837
	DQ	0000000000000000H
	DD	01aH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190838
	DQ	0000000000000000H
	DD	01bH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190839
	DQ	0000000000000000H
	DD	01cH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190840
	DQ	0000000000000000H
	DD	01dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190841
	DQ	0000000000000000H
	DD	01eH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190842
	DQ	0000000000000000H
	DD	01fH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190843
	DQ	0000000000000000H
	DD	020H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190844
	DQ	0000000000000000H
	DD	021H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190845
	DQ	0000000000000000H
	DD	022H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190846
	DQ	0000000000000000H
	DD	023H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190847
	DQ	0000000000000000H
	DD	024H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190848
	DQ	0000000000000000H
	DD	025H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190849
	DQ	0000000000000000H
	DD	027H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190850
	DQ	0000000000000000H
	DD	028H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190851
	DQ	0000000000000000H
	DD	029H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190852
	DQ	0000000000000000H
	DD	029H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190853
	DQ	0000000000000000H
	DD	029H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190854
	DQ	0000000000000000H
	DD	029H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190855
	DQ	0000000000000000H
	DD	029H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190856
	DQ	0000000000000000H
	DD	02aH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190857
	DQ	0000000000000000H
	DD	02bH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190858
	DQ	0000000000000000H
	DD	02cH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190859
	DQ	0000000000000000H
	DD	02dH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190860
	DQ	0000000000000000H
	DD	02dH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190861
	DQ	0000000000000000H
	DD	02dH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190862
	DQ	0000000000000000H
	DD	02dH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190863
	DQ	0000000000000000H
	DD	02dH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190864
	DQ	0000000000000000H
	DD	02dH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190865
	DQ	0000000000000000H
	DD	02eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190866
	DQ	0000000000000000H
	DD	02fH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190867
	DQ	0000000000000000H
	DD	030H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190868
	DQ	0000000000000000H
	DD	031H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190869
	DQ	0000000000000000H
	DD	031H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190870
	DQ	0000000000000000H
	DD	031H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190871
	DQ	0000000000000000H
	DD	031H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190872
	DQ	0000000000000000H
	DD	032H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190873
	DQ	0000000000000000H
	DD	033H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190874
	DQ	0000000000000000H
	DD	034H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190875
	DQ	0000000000000000H
	DD	035H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190876
	DQ	0000000000000000H
	DD	035H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190877
	DQ	0000000000000000H
	DD	037H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190878
	DQ	0000000000000000H
	DD	038H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190879
	DQ	0000000000000000H
	DD	03aH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190880
	DQ	0000000000000000H
	DD	03bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190881
	DQ	0000000000000000H
	DD	03cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190882
	DQ	0000000000000000H
	DD	03dH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190883
	DQ	0000000000000000H
	DD	03eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190884
	DQ	0000000000000000H
	DD	03fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190885
	DQ	0000000000000000H
	DD	040H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190886
	DQ	0000000000000000H
	DD	041H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190887
	DQ	0000000000000000H
	DD	042H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190888
	DQ	0000000000000000H
	DD	045H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190889
	DQ	0000000000000000H
	DD	046H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190890
	DQ	0000000000000000H
	DD	047H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190891
	DQ	0000000000000000H
	DD	048H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190892
	DQ	0000000000000000H
	DD	049H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190893
	DQ	0000000000000000H
	DD	04aH
	DD	020H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190894
	DQ	0000000000000000H
	DD	04bH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190895
	DQ	0000000000000000H
	DD	04cH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190896
	DQ	0000000000000000H
	DD	04dH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190897
	DQ	0000000000000000H
	DD	04fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190898
	DQ	0000000000000000H
	DD	050H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190899
	DQ	0000000000000000H
	DD	051H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190900
	DQ	0000000000000000H
	DD	052H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190901
	DQ	0000000000000000H
	DD	053H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190902
	DQ	0000000000000000H
	DD	054H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190903
	DQ	0000000000000000H
	DD	055H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190904
	DQ	0000000000000000H
	DD	056H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190905
	DQ	0000000000000000H
	DD	057H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190906
	DQ	0000000000000000H
	DD	058H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190907
	DQ	0000000000000000H
	DD	059H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190908
	DQ	0000000000000000H
	DD	05aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190909
	DQ	0000000000000000H
	DD	05bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190910
	DQ	0000000000000000H
	DD	05cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190911
	DQ	0000000000000000H
	DD	05dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190912
	DQ	0000000000000000H
	DD	05eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190913
	DQ	0000000000000000H
	DD	05fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190914
	DQ	0000000000000000H
	DD	060H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190915
	DQ	0000000000000000H
	DD	061H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190916
	DQ	0000000000000000H
	DD	062H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190917
	DQ	0000000000000000H
	DD	063H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190918
	DQ	0000000000000000H
	DD	064H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190919
	DQ	0000000000000000H
	DD	065H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190920
	DQ	0000000000000000H
	DD	066H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190921
	DQ	0000000000000000H
	DD	067H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190922
	DQ	0000000000000000H
	DD	068H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190923
	DQ	0000000000000000H
	DD	069H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190924
	DQ	0000000000000000H
	DD	06aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190925
	DQ	0000000000000000H
	DD	06bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190926
	DQ	0000000000000000H
	DD	06cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190927
	DQ	0000000000000000H
	DD	06dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190928
	DQ	0000000000000000H
	DD	06eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190929
	DQ	0000000000000000H
	DD	06fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190930
	DQ	0000000000000000H
	DD	070H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190931
	DQ	0000000000000000H
	DD	071H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190932
	DQ	0000000000000000H
	DD	072H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190933
	DQ	0000000000000000H
	DD	073H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190934
	DQ	0000000000000000H
	DD	074H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190935
	DQ	0000000000000000H
	DD	075H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190936
	DQ	0000000000000000H
	DD	076H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190937
	DQ	0000000000000000H
	DD	077H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190938
	DQ	0000000000000000H
	DD	078H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190939
	DQ	0000000000000000H
	DD	079H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190940
	DQ	0000000000000000H
	DD	07aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190941
	DQ	0000000000000000H
	DD	07bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190942
	DQ	0000000000000000H
	DD	07cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190943
	DQ	0000000000000000H
	DD	07dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190944
	DQ	0000000000000000H
	DD	07eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190945
	DQ	0000000000000000H
	DD	07fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190946
	DQ	0000000000000000H
	DD	080H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190947
	DQ	0000000000000000H
	DD	081H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190948
	DQ	0000000000000000H
	DD	084H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190949
	DQ	0000000000000000H
	DD	088H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190950
	DQ	0000000000000000H
	DD	089H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190951
	DQ	0000000000000000H
	DD	08cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190952
	DQ	0000000000000000H
	DD	08dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190953
	DQ	0000000000000000H
	DD	08fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190954
	DQ	0000000000000000H
	DD	091H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190955
	DQ	0000000000000000H
	DD	093H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190956
	DQ	0000000000000000H
	DD	099H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190957
	DQ	0000000000000000H
	DD	09aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190958
	DQ	0000000000000000H
	DD	09cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190959
	DQ	0000000000000000H
	DD	09dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190960
	DQ	0000000000000000H
	DD	09fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190961
	DQ	0000000000000000H
	DD	0a0H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190962
	DQ	0000000000000000H
	DD	0a2H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190963
	DQ	0000000000000000H
	DD	0a3H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190964
	DQ	0000000000000000H
	DD	0a4H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190965
	DQ	0000000000000000H
	DD	0a6H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190966
	DQ	0000000000000000H
	DD	0a7H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190967
	DQ	0000000000000000H
	DD	0aaH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190968
	DQ	0000000000000000H
	DD	0abH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190969
	DQ	0000000000000000H
	DD	0acH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190970
	DQ	0000000000000000H
	DD	0adH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190971
	DQ	0000000000000000H
	DD	0aeH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190972
	DQ	0000000000000000H
	DD	0afH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190973
	DQ	0000000000000000H
	DD	0b0H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190974
	DQ	0000000000000000H
	DD	0b1H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190975
	DQ	0000000000000000H
	DD	0b2H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190976
	DQ	0000000000000000H
	DD	0b3H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190977
	DQ	0000000000000000H
	DD	0b4H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190978
	DQ	0000000000000000H
	DD	0b5H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190979
	DQ	0000000000000000H
	DD	0b6H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190980
	DQ	0000000000000000H
	DD	0b7H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190981
	DQ	0000000000000000H
	DD	0b8H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190982
	DQ	0000000000000000H
	DD	0b9H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190983
	DQ	0000000000000000H
	DD	0baH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190984
	DQ	0000000000000000H
	DD	0bbH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190985
	DQ	0000000000000000H
	DD	0bcH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190986
	DQ	0000000000000000H
	DD	0bdH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190987
	DQ	0000000000000000H
	DD	0beH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190988
	DQ	0000000000000000H
	DD	0bfH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190989
	DQ	0000000000000000H
	DD	0c1H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190990
	DQ	0000000000000000H
	DD	0c3H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190991
	DQ	0000000000000000H
	DD	0c6H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190992
	DQ	0000000000000000H
	DD	0c7H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190993
	DQ	0000000000000000H
	DD	0c8H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190994
	DQ	0000000000000000H
	DD	0101H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190995
	DQ	0000000000000000H
	DD	0102H
	DD	020H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190996
	DQ	0000000000000000H
	DD	0104H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190997
	DQ	0000000000000000H
	DD	0105H
	DD	020H
	DD	020H
	DD	020H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190998
	DQ	0000000000000000H
	DD	0106H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG190999
	DQ	0000000000000000H
	DD	0107H
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG191000
	DQ	0000000000000000H
	DD	0108H
	DD	020H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG191001
	DQ	0000000000000000H
	DD	0109H
	DD	020H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG191002
	DQ	0000000000000000H
	DD	010aH
	DD	020H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG191003
	DQ	0000000000000000H
	DD	010bH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG191004
	DQ	0000000000000000H
	DD	010cH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG191005
	DQ	0000000000000000H
	DD	010dH
	DD	020H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG191006
	DQ	0000000000000000H
	DD	010eH
	DD	020H
	DD	020H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG191007
	DQ	0000000000000000H
	DD	010fH
	DD	020H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG191008
	DQ	0000000000000000H
	DD	0112H
	DD	020H
	DD	00H
	DD	00H
$SG190813 DB	'000_N3_INSTR', 00H
	ORG $+3
$SG190814 DB	'001_ZARCH_INSTALLED', 00H
	ORG $+4
$SG190815 DB	'002_ZARCH_ACTIVE', 00H
	ORG $+7
$SG190816 DB	'003_DAT_ENHANCE_1', 00H
	ORG $+6
$SG190817 DB	'006_ASN_LX_REUSE', 00H
	ORG $+7
$SG190818 DB	'007_STFL_EXTENDED', 00H
	ORG $+6
$SG190819 DB	'008_EDAT_1', 00H
	ORG $+5
$SG190820 DB	'009_SENSE_RUN_STATUS', 00H
	ORG $+3
$SG190821 DB	'010_CONDITIONAL_SSKE', 00H
	ORG $+3
$SG190822 DB	'011_CONFIG_TOPOLOGY', 00H
	ORG $+4
$SG190823 DB	'012_IBM_INTERNAL', 00H
	ORG $+7
$SG190824 DB	'013_IPTE_RANGE', 00H
	ORG $+1
$SG190825 DB	'014_NONQ_KEY_SET', 00H
	ORG $+7
$SG190826 DB	'015_IBM_INTERNAL', 00H
	ORG $+7
$SG190827 DB	'016_EXT_TRANSL_2', 00H
	ORG $+7
$SG190828 DB	'017_MSA', 00H
$SG190829 DB	'018_LONG_DISPL_INST', 00H
	ORG $+4
$SG190830 DB	'019_LONG_DISPL_HPERF', 00H
	ORG $+3
$SG190831 DB	'020_HFP_MULT_ADD_SUB', 00H
	ORG $+3
$SG190832 DB	'021_EXTENDED_IMMED', 00H
	ORG $+5
$SG190833 DB	'022_EXT_TRANSL_3', 00H
	ORG $+7
$SG190834 DB	'023_HFP_UNNORM_EXT', 00H
	ORG $+5
$SG190835 DB	'024_ETF2_ENHANCEMENT', 00H
	ORG $+3
$SG190836 DB	'025_STORE_CLOCK_FAST', 00H
	ORG $+3
$SG190837 DB	'026_PARSING_ENHANCE', 00H
	ORG $+4
$SG190838 DB	'027_MVCOS', 00H
	ORG $+6
$SG190839 DB	'028_TOD_CLOCK_STEER', 00H
	ORG $+4
$SG190840 DB	'029_UNDEFINED', 00H
	ORG $+2
$SG190841 DB	'030_ETF3_ENHANCEMENT', 00H
	ORG $+3
$SG190842 DB	'031_EXTRACT_CPU_TIME', 00H
	ORG $+3
$SG190843 DB	'032_CSSF', 00H
	ORG $+7
$SG190844 DB	'033_CSSF2', 00H
	ORG $+6
$SG190845 DB	'034_GEN_INST_EXTN', 00H
	ORG $+6
$SG190846 DB	'035_EXECUTE_EXTN', 00H
	ORG $+7
$SG190847 DB	'036_ENH_MONITOR', 00H
$SG190848 DB	'037_FP_EXTENSION', 00H
	ORG $+7
$SG190849 DB	'039_IBM_INTERNAL', 00H
	ORG $+7
$SG190850 DB	'040_LOAD_PROG_PARAM', 00H
	ORG $+4
$SG190851 DB	'041_FPS_ENHANCEMENT', 00H
	ORG $+4
$SG190852 DB	'041_DFP_ROUNDING', 00H
	ORG $+7
$SG190853 DB	'041_FPR_GR_TRANSFER', 00H
	ORG $+4
$SG190854 DB	'041_FPS_SIGN_HANDLING', 00H
	ORG $+2
$SG190855 DB	'041_IEEE_EXCEPT_SIM', 00H
	ORG $+4
$SG190856 DB	'042_DFP', 00H
$SG190857 DB	'043_DFP_HPERF', 00H
	ORG $+2
$SG190858 DB	'044_PFPO', 00H
	ORG $+7
$SG190859 DB	'045_DISTINCT_OPERANDS', 00H
	ORG $+2
$SG190860 DB	'045_FAST_BCR_SERIAL', 00H
	ORG $+4
$SG190861 DB	'045_HIGH_WORD', 00H
	ORG $+2
$SG190862 DB	'045_INTERLOCKED_ACCESS_1', 00H
	ORG $+7
$SG190863 DB	'045_LOAD_STORE_ON_COND_1', 00H
	ORG $+7
$SG190864 DB	'045_POPULATION_COUNT', 00H
	ORG $+3
$SG190865 DB	'046_IBM_INTERNAL', 00H
	ORG $+7
$SG190866 DB	'047_CMPSC_ENH', 00H
	ORG $+2
$SG190867 DB	'048_DFP_ZONE_CONV', 00H
	ORG $+6
$SG190868 DB	'049_EXECUTION_HINT', 00H
	ORG $+5
$SG190869 DB	'049_LOAD_AND_TRAP', 00H
	ORG $+6
$SG190870 DB	'049_PROCESSOR_ASSIST', 00H
	ORG $+3
$SG190871 DB	'049_MISC_INSTR_EXT_1', 00H
	ORG $+3
$SG190872 DB	'050_CONSTR_TRANSACT', 00H
	ORG $+4
$SG190873 DB	'051_LOCAL_TLB_CLEARING', 00H
	ORG $+1
$SG190874 DB	'052_INTERLOCKED_ACCESS_2', 00H
	ORG $+7
$SG190875 DB	'053_LOAD_STORE_ON_COND_2', 00H
	ORG $+7
$SG190876 DB	'053_LOAD_ZERO_RIGHTMOST', 00H
$SG190877 DB	'055_IBM_INTERNAL', 00H
	ORG $+7
$SG190878 DB	'056_UNDEFINED', 00H
	ORG $+2
$SG190879 DB	'058_MISC_INSTR_EXT_2', 00H
	ORG $+3
$SG190880 DB	'059_IBM_INTERNAL', 00H
	ORG $+7
$SG190881 DB	'060_IBM_INTERNAL', 00H
	ORG $+7
$SG190882 DB	'061_MISC_INSTR_EXT_3', 00H
	ORG $+3
$SG190883 DB	'062_IBM_INTERNAL', 00H
	ORG $+7
$SG190884 DB	'063_IBM_INTERNAL', 00H
	ORG $+7
$SG190885 DB	'064_IBM_INTERNAL', 00H
	ORG $+7
$SG190886 DB	'065_IBM_INTERNAL', 00H
	ORG $+7
$SG190887 DB	'066_RES_REF_BITS_MULT', 00H
	ORG $+2
$SG190888 DB	'069_IBM_INTERNAL', 00H
	ORG $+7
$SG190889 DB	'070_IBM_INTERNAL', 00H
	ORG $+7
$SG190890 DB	'071_IBM_INTERNAL', 00H
	ORG $+7
$SG190891 DB	'072_IBM_INTERNAL', 00H
	ORG $+7
$SG190892 DB	'073_TRANSACT_EXEC', 00H
	ORG $+6
$SG190893 DB	'074_STORE_HYPER_INFO', 00H
	ORG $+3
$SG190894 DB	'075_ACC_EX_FS_INDIC', 00H
	ORG $+4
$SG190895 DB	'076_MSA_EXTENSION_3', 00H
	ORG $+4
$SG190896 DB	'077_MSA_EXTENSION_4', 00H
	ORG $+4
$SG190897 DB	'079_UNDEFINED', 00H
	ORG $+2
$SG190898 DB	'080_DFP_PACK_CONV', 00H
	ORG $+6
$SG190899 DB	'081_PPA_IN_ORDER', 00H
	ORG $+7
$SG190900 DB	'082_IBM_INTERNAL', 00H
	ORG $+7
$SG190901 DB	'083_UNDEFINED', 00H
	ORG $+2
$SG190902 DB	'084_UNDEFINED', 00H
	ORG $+2
$SG190903 DB	'085_UNDEFINED', 00H
	ORG $+2
$SG190904 DB	'086_UNDEFINED', 00H
	ORG $+2
$SG190905 DB	'087_UNDEFINED', 00H
	ORG $+2
$SG190906 DB	'088_UNDEFINED', 00H
	ORG $+2
$SG190907 DB	'089_UNDEFINED', 00H
	ORG $+2
$SG190908 DB	'090_UNDEFINED', 00H
	ORG $+2
$SG190909 DB	'091_UNDEFINED', 00H
	ORG $+2
$SG190910 DB	'092_UNDEFINED', 00H
	ORG $+2
$SG190911 DB	'093_UNDEFINED', 00H
	ORG $+2
$SG190912 DB	'094_UNDEFINED', 00H
	ORG $+2
$SG190913 DB	'095_UNDEFINED', 00H
	ORG $+2
$SG190914 DB	'096_UNDEFINED', 00H
	ORG $+2
$SG190915 DB	'097_UNDEFINED', 00H
	ORG $+2
$SG190916 DB	'098_UNDEFINED', 00H
	ORG $+2
$SG190917 DB	'099_UNDEFINED', 00H
	ORG $+2
$SG190918 DB	'100_UNDEFINED', 00H
	ORG $+2
$SG190919 DB	'101_UNDEFINED', 00H
	ORG $+2
$SG190920 DB	'102_UNDEFINED', 00H
	ORG $+2
$SG190921 DB	'103_UNDEFINED', 00H
	ORG $+2
$SG190922 DB	'104_UNDEFINED', 00H
	ORG $+2
$SG190923 DB	'105_UNDEFINED', 00H
	ORG $+2
$SG190924 DB	'106_UNDEFINED', 00H
	ORG $+2
$SG190925 DB	'107_UNDEFINED', 00H
	ORG $+2
$SG190926 DB	'108_UNDEFINED', 00H
	ORG $+2
$SG190927 DB	'109_UNDEFINED', 00H
	ORG $+2
$SG190928 DB	'110_UNDEFINED', 00H
	ORG $+2
$SG190929 DB	'111_UNDEFINED', 00H
	ORG $+2
$SG190930 DB	'112_UNDEFINED', 00H
	ORG $+2
$SG190931 DB	'113_UNDEFINED', 00H
	ORG $+2
$SG190932 DB	'114_UNDEFINED', 00H
	ORG $+2
$SG190933 DB	'115_UNDEFINED', 00H
	ORG $+2
$SG190934 DB	'116_UNDEFINED', 00H
	ORG $+2
$SG190935 DB	'117_UNDEFINED', 00H
	ORG $+2
$SG190936 DB	'118_UNDEFINED', 00H
	ORG $+2
$SG190937 DB	'119_UNDEFINED', 00H
	ORG $+2
$SG190938 DB	'120_UNDEFINED', 00H
	ORG $+2
$SG190939 DB	'121_UNDEFINED', 00H
	ORG $+2
$SG190940 DB	'122_UNDEFINED', 00H
	ORG $+2
$SG190941 DB	'123_UNDEFINED', 00H
	ORG $+2
$SG190942 DB	'124_UNDEFINED', 00H
	ORG $+2
$SG190943 DB	'125_UNDEFINED', 00H
	ORG $+2
$SG190944 DB	'126_UNDEFINED', 00H
	ORG $+2
$SG190945 DB	'127_UNDEFINED', 00H
	ORG $+2
$SG190946 DB	'128_IBM_INTERNAL', 00H
	ORG $+7
$SG190947 DB	'129_ZVECTOR', 00H
	ORG $+4
$SG190948 DB	'132_UNDEFINED', 00H
	ORG $+2
$SG190949 DB	'136_UNDEFINED', 00H
	ORG $+2
$SG190950 DB	'137_UNDEFINED', 00H
	ORG $+2
$SG190951 DB	'140_IBM_INTERNAL', 00H
	ORG $+7
$SG190952 DB	'141_IBM_INTERNAL', 00H
	ORG $+7
$SG190953 DB	'143_UNDEFINED', 00H
	ORG $+2
$SG190954 DB	'145_INS_REF_BITS_MULT', 00H
	ORG $+2
$SG190955 DB	'147_IBM_RESERVED', 00H
	ORG $+7
$SG190956 DB	'153_IBM_INTERNAL', 00H
	ORG $+7
$SG190957 DB	'154_UNDEFINED', 00H
	ORG $+2
$SG190958 DB	'156_IBM_INTERNAL', 00H
	ORG $+7
$SG190959 DB	'157_UNDEFINED', 00H
	ORG $+2
$SG190960 DB	'159_UNDEFINED', 00H
	ORG $+2
$SG190961 DB	'160_UNDEFINED', 00H
	ORG $+2
$SG190962 DB	'162_UNDEFINED', 00H
	ORG $+2
$SG190963 DB	'163_UNDEFINED', 00H
	ORG $+2
$SG190964 DB	'164_UNDEFINED', 00H
	ORG $+2
$SG190965 DB	'166_UNDEFINED', 00H
	ORG $+2
$SG190966 DB	'167_UNDEFINED', 00H
	ORG $+2
$SG190967 DB	'170_UNDEFINED', 00H
	ORG $+2
$SG190968 DB	'171_UNDEFINED', 00H
	ORG $+2
$SG190969 DB	'172_UNDEFINED', 00H
	ORG $+2
$SG190970 DB	'173_UNDEFINED', 00H
	ORG $+2
$SG190971 DB	'174_UNDEFINED', 00H
	ORG $+2
$SG190972 DB	'175_UNDEFINED', 00H
	ORG $+2
$SG190973 DB	'176_UNDEFINED', 00H
	ORG $+2
$SG190974 DB	'177_UNDEFINED', 00H
	ORG $+2
$SG190975 DB	'178_UNDEFINED', 00H
	ORG $+2
$SG190976 DB	'179_UNDEFINED', 00H
	ORG $+2
$SG190977 DB	'180_UNDEFINED', 00H
	ORG $+2
$SG190978 DB	'181_UNDEFINED', 00H
	ORG $+2
$SG190979 DB	'182_UNDEFINED', 00H
	ORG $+2
$SG190980 DB	'183_UNDEFINED', 00H
	ORG $+2
$SG190981 DB	'184_UNDEFINED', 00H
	ORG $+2
$SG190982 DB	'185_UNDEFINED', 00H
	ORG $+2
$SG190983 DB	'186_UNDEFINED', 00H
	ORG $+2
$SG190984 DB	'187_UNDEFINED', 00H
	ORG $+2
$SG190985 DB	'188_UNDEFINED', 00H
	ORG $+2
$SG190986 DB	'189_UNDEFINED', 00H
	ORG $+2
$SG190987 DB	'190_UNDEFINED', 00H
	ORG $+2
$SG190988 DB	'191_UNDEFINED', 00H
	ORG $+2
$SG190989 DB	'193_BEAR_ENH', 00H
	ORG $+3
$SG190990 DB	'195_UNDEFINED', 00H
	ORG $+2
$SG190991 DB	'198_UNDEFINED', 00H
	ORG $+2
$SG190992 DB	'199_UNDEFINED', 00H
	ORG $+2
$SG190993 DB	'200_UNDEFINED', 00H
	ORG $+2
$SG190994 DB	'HERC_DETECT_PGMINTLOOP', 00H
	ORG $+1
$SG190995 DB	'HERC_HOST_RESOURCE_ACCESS', 00H
	ORG $+6
$SG190996 DB	'HERC_LOGICAL_PARTITION', 00H
	ORG $+1
$SG190997 DB	'HERC_MOVE_INVERSE', 00H
	ORG $+6
$SG190998 DB	'HERC_MSA_EXTENSION_1', 00H
	ORG $+3
$SG190999 DB	'HERC_MSA_EXTENSION_2', 00H
	ORG $+3
$SG191000 DB	'HERC_PROBSTATE_DIAGF08', 00H
	ORG $+1
$SG191001 DB	'HERC_QDIO_ASSIST', 00H
	ORG $+7
$SG191002 DB	'HERC_QDIO_TDD', 00H
	ORG $+2
$SG191003 DB	'HERC_QDIO_THININT', 00H
	ORG $+6
$SG191004 DB	'HERC_QEBSM', 00H
	ORG $+5
$SG191005 DB	'HERC_SIGP_SETARCH_S370', 00H
	ORG $+1
$SG191006 DB	'HERC_SVS', 00H
	ORG $+7
$SG191007 DB	'HERC_VIRTUAL_MACHINE', 00H
	ORG $+3
$SG191008 DB	'HERC_ZVM_ESSA', 00H
	ORG $+2
$SG192546 DB	'000_N3_INSTR', 00H
	ORG $+3
$SG192547 DB	'N3 Instructions are installed', 00H
	ORG $+2
$SG192548 DB	'001_ZARCH_INSTALLED', 00H
	ORG $+4
$SG192549 DB	'z/Architecture architectural mode is installed', 00H
	ORG $+1
$SG192550 DB	'002_ZARCH_ACTIVE', 00H
	ORG $+7
$SG192551 DB	'z/Architecture architectural mode is active', 00H
	ORG $+4
$SG192552 DB	'003_DAT_ENHANCE_1', 00H
	ORG $+6
$SG192553 DB	'DAT-Enhancement Facility 1', 00H
	ORG $+5
$SG192554 DB	'004_IDTE_SC_SEGTAB', 00H
	ORG $+5
$SG192555 DB	'IDTE selective clearing when segment-table invalidated', 00H
	ORG $+1
$SG192556 DB	'005_IDTE_SC_REGTAB', 00H
	ORG $+5
$SG192557 DB	'IDTE selective clearing when region-table invalidated', 00H
	ORG $+2
$SG192558 DB	'006_ASN_LX_REUSE', 00H
	ORG $+7
$SG192559 DB	'ASN-and-LX-Reuse Facility', 00H
	ORG $+6
$SG192560 DB	'007_STFL_EXTENDED', 00H
	ORG $+6
$SG192561 DB	'Store-Facility-List-Extended Facility', 00H
	ORG $+2
$SG192562 DB	'008_EDAT_1', 00H
	ORG $+5
$SG192563 DB	'Enhanced-DAT Facility 1', 00H
$SG192564 DB	'009_SENSE_RUN_STATUS', 00H
	ORG $+3
$SG192565 DB	'Sense-Running-Status Facility', 00H
	ORG $+2
$SG192566 DB	'010_CONDITIONAL_SSKE', 00H
	ORG $+3
$SG192567 DB	'Conditional-SSKE Facility', 00H
	ORG $+6
$SG192568 DB	'011_CONFIG_TOPOLOGY', 00H
	ORG $+4
$SG192569 DB	'Configuration-Topology Facility', 00H
$SG192570 DB	'012_IBM_INTERNAL', 00H
	ORG $+7
$SG192571 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192572 DB	'013_IPTE_RANGE', 00H
	ORG $+1
$SG192573 DB	'IPTE-Range Facility', 00H
	ORG $+4
$SG192574 DB	'014_NONQ_KEY_SET', 00H
	ORG $+7
$SG192575 DB	'Nonquiescing Key-Setting Facility', 00H
	ORG $+6
$SG192576 DB	'015_IBM_INTERNAL', 00H
	ORG $+7
$SG192577 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192578 DB	'016_EXT_TRANSL_2', 00H
	ORG $+7
$SG192579 DB	'Extended-Translation Facility 2', 00H
$SG192580 DB	'017_MSA', 00H
$SG192581 DB	'Message-Security Assist', 00H
$SG192582 DB	'018_LONG_DISPL_INST', 00H
	ORG $+4
$SG192583 DB	'Long-Displacement Facility', 00H
	ORG $+5
$SG192584 DB	'019_LONG_DISPL_HPERF', 00H
	ORG $+3
$SG192585 DB	'Long-Displacement Facility Has High Performance', 00H
$SG192586 DB	'020_HFP_MULT_ADD_SUB', 00H
	ORG $+3
$SG192587 DB	'HFP-Multiply-and-Add/Subtract Facility', 00H
	ORG $+1
$SG192588 DB	'021_EXTENDED_IMMED', 00H
	ORG $+5
$SG192589 DB	'Extended-Immediate Facility', 00H
	ORG $+4
$SG192590 DB	'022_EXT_TRANSL_3', 00H
	ORG $+7
$SG192591 DB	'Extended-Translation Facility 3', 00H
$SG192592 DB	'023_HFP_UNNORM_EXT', 00H
	ORG $+5
$SG192593 DB	'HFP-Unnormalized-Extensions Facility', 00H
	ORG $+3
$SG192594 DB	'024_ETF2_ENHANCEMENT', 00H
	ORG $+3
$SG192595 DB	'ETF2-Enhancement Facility', 00H
	ORG $+6
$SG192596 DB	'025_STORE_CLOCK_FAST', 00H
	ORG $+3
$SG192597 DB	'Store-Clock-Fast Facility', 00H
	ORG $+6
$SG192598 DB	'026_PARSING_ENHANCE', 00H
	ORG $+4
$SG192599 DB	'Parsing-Enhancement Facility', 00H
	ORG $+3
$SG192600 DB	'027_MVCOS', 00H
	ORG $+6
$SG192601 DB	'Move-with-Optional-Specifications Facility', 00H
	ORG $+5
$SG192602 DB	'028_TOD_CLOCK_STEER', 00H
	ORG $+4
$SG192603 DB	'TOD-Clock-Steering Facility', 00H
	ORG $+4
$SG192604 DB	'029_UNDEFINED', 00H
	ORG $+2
$SG192605 DB	'Undefined', 00H
	ORG $+6
$SG192606 DB	'030_ETF3_ENHANCEMENT', 00H
	ORG $+3
$SG192607 DB	'ETF3-Enhancement Facility', 00H
	ORG $+6
$SG192608 DB	'031_EXTRACT_CPU_TIME', 00H
	ORG $+3
$SG192609 DB	'Extract-CPU-Time Facility', 00H
	ORG $+6
$SG192610 DB	'032_CSSF', 00H
	ORG $+7
$SG192611 DB	'Compare-and-Swap-and-Store Facility 1', 00H
	ORG $+2
$SG192612 DB	'033_CSSF2', 00H
	ORG $+6
$SG192613 DB	'Compare-and-Swap-and-Store Facility 2', 00H
	ORG $+2
$SG192614 DB	'034_GEN_INST_EXTN', 00H
	ORG $+6
$SG192615 DB	'General-Instructions-Extension Facility', 00H
$SG192616 DB	'035_EXECUTE_EXTN', 00H
	ORG $+7
$SG192617 DB	'Execute-Extensions Facility', 00H
	ORG $+4
$SG192618 DB	'036_ENH_MONITOR', 00H
$SG192619 DB	'Enhanced-Monitor Facility', 00H
	ORG $+6
$SG192620 DB	'037_FP_EXTENSION', 00H
	ORG $+7
$SG192621 DB	'Floating-Point-Extension Facility', 00H
	ORG $+6
$SG192622 DB	'038_OP_CMPSC', 00H
	ORG $+3
$SG192623 DB	'Order-Preserving-Compression Facility', 00H
	ORG $+2
$SG192624 DB	'039_IBM_INTERNAL', 00H
	ORG $+7
$SG192625 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192626 DB	'040_LOAD_PROG_PARAM', 00H
	ORG $+4
$SG192627 DB	'Load-Program-Parameter Facility', 00H
$SG192628 DB	'041_FPS_ENHANCEMENT', 00H
	ORG $+4
$SG192629 DB	'Floating-Point-Support-Enhancement Facility', 00H
	ORG $+4
$SG192630 DB	'041_DFP_ROUNDING', 00H
	ORG $+7
$SG192631 DB	'Decimal-Floating-Point-Rounding Facility', 00H
	ORG $+7
$SG192632 DB	'041_FPR_GR_TRANSFER', 00H
	ORG $+4
$SG192633 DB	'FPR-GR-Transfer Facility', 00H
	ORG $+7
$SG192634 DB	'041_FPS_SIGN_HANDLING', 00H
	ORG $+2
$SG192635 DB	'Floating-Point-Support-Sign-Handling Facility', 00H
	ORG $+2
$SG192636 DB	'041_IEEE_EXCEPT_SIM', 00H
	ORG $+4
$SG192637 DB	'IEEE-Exception-Simulation Facility', 00H
	ORG $+5
$SG192638 DB	'042_DFP', 00H
$SG192639 DB	'Decimal-Floating-Point Facility', 00H
$SG192640 DB	'043_DFP_HPERF', 00H
	ORG $+2
$SG192641 DB	'Decimal-Floating-Point Facility Has High Performance', 00H
	ORG $+3
$SG192642 DB	'044_PFPO', 00H
	ORG $+7
$SG192643 DB	'PFPO (Perform Floating-Point Operation) Facility', 00H
	ORG $+7
$SG192644 DB	'045_DISTINCT_OPERANDS', 00H
	ORG $+2
$SG192645 DB	'Distinct-Operands Facility', 00H
	ORG $+5
$SG192646 DB	'045_FAST_BCR_SERIAL', 00H
	ORG $+4
$SG192647 DB	'Fast-BCR-Serialization Facility', 00H
$SG192648 DB	'045_HIGH_WORD', 00H
	ORG $+2
$SG192649 DB	'High-Word Facility', 00H
	ORG $+5
$SG192650 DB	'045_INTERLOCKED_ACCESS_1', 00H
	ORG $+7
$SG192651 DB	'Interlocked-Access Facility 1', 00H
	ORG $+2
$SG192652 DB	'045_LOAD_STORE_ON_COND_1', 00H
	ORG $+7
$SG192653 DB	'Load/Store-on-Condition Facility 1', 00H
	ORG $+5
$SG192654 DB	'045_POPULATION_COUNT', 00H
	ORG $+3
$SG192655 DB	'Population-Count Facility', 00H
	ORG $+6
$SG192656 DB	'046_IBM_INTERNAL', 00H
	ORG $+7
$SG192657 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192658 DB	'047_CMPSC_ENH', 00H
	ORG $+2
$SG192659 DB	'CMPSC-Enhancement Facility', 00H
	ORG $+5
$SG192660 DB	'048_DFP_ZONE_CONV', 00H
	ORG $+6
$SG192661 DB	'Decimal-Floating-Point-Zoned-Conversion Facility', 00H
	ORG $+7
$SG192662 DB	'049_EXECUTION_HINT', 00H
	ORG $+5
$SG192663 DB	'Execution-Hint Facility', 00H
$SG192664 DB	'049_LOAD_AND_TRAP', 00H
	ORG $+6
$SG192665 DB	'Load-and-Trap Facility', 00H
	ORG $+1
$SG192666 DB	'049_PROCESSOR_ASSIST', 00H
	ORG $+3
$SG192667 DB	'Processor-Assist Facility', 00H
	ORG $+6
$SG192668 DB	'049_MISC_INSTR_EXT_1', 00H
	ORG $+3
$SG192669 DB	'Miscellaneous-Instruction-Extensions Facility 1', 00H
$SG192670 DB	'050_CONSTR_TRANSACT', 00H
	ORG $+4
$SG192671 DB	'Constrained-Transactional-Execution Facility', 00H
	ORG $+3
$SG192672 DB	'051_LOCAL_TLB_CLEARING', 00H
	ORG $+1
$SG192673 DB	'Local-TLB-Clearing Facility', 00H
	ORG $+4
$SG192674 DB	'052_INTERLOCKED_ACCESS_2', 00H
	ORG $+7
$SG192675 DB	'Interlocked-Access Facility 2', 00H
	ORG $+2
$SG192676 DB	'053_LOAD_STORE_ON_COND_2', 00H
	ORG $+7
$SG192677 DB	'Load/Store-on-Condition Facility 2', 00H
	ORG $+5
$SG192678 DB	'053_LOAD_ZERO_RIGHTMOST', 00H
$SG192679 DB	'Load-and-Zero-Rightmost-Byte Facility', 00H
	ORG $+2
$SG192680 DB	'054_EE_CMPSC', 00H
	ORG $+3
$SG192681 DB	'Entropy-Encoding-Compression Facility', 00H
	ORG $+2
$SG192682 DB	'055_IBM_INTERNAL', 00H
	ORG $+7
$SG192683 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192684 DB	'056_UNDEFINED', 00H
	ORG $+2
$SG192685 DB	'Undefined', 00H
	ORG $+6
$SG192686 DB	'057_MSA_EXTENSION_5', 00H
	ORG $+4
$SG192687 DB	'Message-Security-Assist Extension 5', 00H
	ORG $+4
$SG192688 DB	'058_MISC_INSTR_EXT_2', 00H
	ORG $+3
$SG192689 DB	'Miscellaneous-Instruction-Extensions Facility 2', 00H
$SG192690 DB	'059_IBM_INTERNAL', 00H
	ORG $+7
$SG192691 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192692 DB	'060_IBM_INTERNAL', 00H
	ORG $+7
s370_facs_tab DQ 0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168651
	DQ	0000000000000000H
	DD	00H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168652
	DQ	0000000000000000H
	DD	01H
	DD	060H
	DD	060H
	DD	060H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168653
	DQ	0000000000000000H
	DD	0cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168654
	DQ	0000000000000000H
	DD	0fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168655
	DQ	0000000000000000H
	DD	010H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168656
	DQ	0000000000000000H
	DD	011H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168657
	DQ	0000000000000000H
	DD	012H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168658
	DQ	0000000000000000H
	DD	014H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168659
	DQ	0000000000000000H
	DD	015H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168660
	DQ	0000000000000000H
	DD	016H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168661
	DQ	0000000000000000H
	DD	017H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168662
	DQ	0000000000000000H
	DD	018H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168663
	DQ	0000000000000000H
	DD	01aH
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168664
	DQ	0000000000000000H
	DD	01dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168665
	DQ	0000000000000000H
	DD	01eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168666
	DQ	0000000000000000H
	DD	020H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168667
	DQ	0000000000000000H
	DD	022H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168668
	DQ	0000000000000000H
	DD	023H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168669
	DQ	0000000000000000H
	DD	025H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168670
	DQ	0000000000000000H
	DD	027H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168671
	DQ	0000000000000000H
	DD	029H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168672
	DQ	0000000000000000H
	DD	029H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168673
	DQ	0000000000000000H
	DD	029H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168674
	DQ	0000000000000000H
	DD	029H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168675
	DQ	0000000000000000H
	DD	029H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168676
	DQ	0000000000000000H
	DD	02aH
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168677
	DQ	0000000000000000H
	DD	02dH
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168678
	DQ	0000000000000000H
	DD	02dH
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168679
	DQ	0000000000000000H
	DD	02dH
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168680
	DQ	0000000000000000H
	DD	02dH
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168681
	DQ	0000000000000000H
	DD	02dH
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168682
	DQ	0000000000000000H
	DD	02dH
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168683
	DQ	0000000000000000H
	DD	02eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168684
	DQ	0000000000000000H
	DD	037H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168685
	DQ	0000000000000000H
	DD	038H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168686
	DQ	0000000000000000H
	DD	03bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168687
	DQ	0000000000000000H
	DD	03cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168688
	DQ	0000000000000000H
	DD	03eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168689
	DQ	0000000000000000H
	DD	03fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168690
	DQ	0000000000000000H
	DD	040H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168691
	DQ	0000000000000000H
	DD	041H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168692
	DQ	0000000000000000H
	DD	045H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168693
	DQ	0000000000000000H
	DD	046H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168694
	DQ	0000000000000000H
	DD	047H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168695
	DQ	0000000000000000H
	DD	048H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168696
	DQ	0000000000000000H
	DD	04cH
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168697
	DQ	0000000000000000H
	DD	04dH
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168698
	DQ	0000000000000000H
	DD	04fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168699
	DQ	0000000000000000H
	DD	052H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168700
	DQ	0000000000000000H
	DD	053H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168701
	DQ	0000000000000000H
	DD	054H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168702
	DQ	0000000000000000H
	DD	055H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168703
	DQ	0000000000000000H
	DD	056H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168704
	DQ	0000000000000000H
	DD	057H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168705
	DQ	0000000000000000H
	DD	058H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168706
	DQ	0000000000000000H
	DD	059H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168707
	DQ	0000000000000000H
	DD	05aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168708
	DQ	0000000000000000H
	DD	05bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168709
	DQ	0000000000000000H
	DD	05cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168710
	DQ	0000000000000000H
	DD	05dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168711
	DQ	0000000000000000H
	DD	05eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168712
	DQ	0000000000000000H
	DD	05fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168713
	DQ	0000000000000000H
	DD	060H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168714
	DQ	0000000000000000H
	DD	061H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168715
	DQ	0000000000000000H
	DD	062H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168716
	DQ	0000000000000000H
	DD	063H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168717
	DQ	0000000000000000H
	DD	064H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168718
	DQ	0000000000000000H
	DD	065H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168719
	DQ	0000000000000000H
	DD	066H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168720
	DQ	0000000000000000H
	DD	067H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168721
	DQ	0000000000000000H
	DD	068H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168722
	DQ	0000000000000000H
	DD	069H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168723
	DQ	0000000000000000H
	DD	06aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168724
	DQ	0000000000000000H
	DD	06bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168725
	DQ	0000000000000000H
	DD	06cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168726
	DQ	0000000000000000H
	DD	06dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168727
	DQ	0000000000000000H
	DD	06eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168728
	DQ	0000000000000000H
	DD	06fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168729
	DQ	0000000000000000H
	DD	070H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168730
	DQ	0000000000000000H
	DD	071H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168731
	DQ	0000000000000000H
	DD	072H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168732
	DQ	0000000000000000H
	DD	073H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168733
	DQ	0000000000000000H
	DD	074H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168734
	DQ	0000000000000000H
	DD	075H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168735
	DQ	0000000000000000H
	DD	076H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168736
	DQ	0000000000000000H
	DD	077H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168737
	DQ	0000000000000000H
	DD	078H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168738
	DQ	0000000000000000H
	DD	079H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168739
	DQ	0000000000000000H
	DD	07aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168740
	DQ	0000000000000000H
	DD	07bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168741
	DQ	0000000000000000H
	DD	07cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168742
	DQ	0000000000000000H
	DD	07dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168743
	DQ	0000000000000000H
	DD	07eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168744
	DQ	0000000000000000H
	DD	07fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168745
	DQ	0000000000000000H
	DD	080H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168746
	DQ	0000000000000000H
	DD	084H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168747
	DQ	0000000000000000H
	DD	088H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168748
	DQ	0000000000000000H
	DD	089H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168749
	DQ	0000000000000000H
	DD	08cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168750
	DQ	0000000000000000H
	DD	08dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168751
	DQ	0000000000000000H
	DD	08fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168752
	DQ	0000000000000000H
	DD	093H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168753
	DQ	0000000000000000H
	DD	099H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168754
	DQ	0000000000000000H
	DD	09aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168755
	DQ	0000000000000000H
	DD	09cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168756
	DQ	0000000000000000H
	DD	09dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168757
	DQ	0000000000000000H
	DD	09fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168758
	DQ	0000000000000000H
	DD	0a0H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168759
	DQ	0000000000000000H
	DD	0a2H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168760
	DQ	0000000000000000H
	DD	0a3H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168761
	DQ	0000000000000000H
	DD	0a4H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168762
	DQ	0000000000000000H
	DD	0a6H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168763
	DQ	0000000000000000H
	DD	0a7H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168764
	DQ	0000000000000000H
	DD	0aaH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168765
	DQ	0000000000000000H
	DD	0abH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168766
	DQ	0000000000000000H
	DD	0acH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168767
	DQ	0000000000000000H
	DD	0adH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168768
	DQ	0000000000000000H
	DD	0aeH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168769
	DQ	0000000000000000H
	DD	0afH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168770
	DQ	0000000000000000H
	DD	0b0H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168771
	DQ	0000000000000000H
	DD	0b1H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168772
	DQ	0000000000000000H
	DD	0b2H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168773
	DQ	0000000000000000H
	DD	0b3H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168774
	DQ	0000000000000000H
	DD	0b4H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168775
	DQ	0000000000000000H
	DD	0b5H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168776
	DQ	0000000000000000H
	DD	0b6H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168777
	DQ	0000000000000000H
	DD	0b7H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168778
	DQ	0000000000000000H
	DD	0b8H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168779
	DQ	0000000000000000H
	DD	0b9H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168780
	DQ	0000000000000000H
	DD	0baH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168781
	DQ	0000000000000000H
	DD	0bbH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168782
	DQ	0000000000000000H
	DD	0bcH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168783
	DQ	0000000000000000H
	DD	0bdH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168784
	DQ	0000000000000000H
	DD	0beH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168785
	DQ	0000000000000000H
	DD	0bfH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168786
	DQ	0000000000000000H
	DD	0c3H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168787
	DQ	0000000000000000H
	DD	0c6H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168788
	DQ	0000000000000000H
	DD	0c7H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168789
	DQ	0000000000000000H
	DD	0c8H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168790
	DQ	0000000000000000H
	DD	0100H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168791
	DQ	0000000000000000H
	DD	0101H
	DD	080H
	DD	080H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168792
	DQ	0000000000000000H
	DD	0102H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168793
	DQ	0000000000000000H
	DD	0103H
	DD	080H
	DD	080H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168794
	DQ	0000000000000000H
	DD	0105H
	DD	080H
	DD	080H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168795
	DQ	0000000000000000H
	DD	0106H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168796
	DQ	0000000000000000H
	DD	0107H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168797
	DQ	0000000000000000H
	DD	0108H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168798
	DQ	0000000000000000H
	DD	0109H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168799
	DQ	0000000000000000H
	DD	010dH
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168800
	DQ	0000000000000000H
	DD	010fH
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168801
	DQ	0000000000000000H
	DD	0110H
	DD	080H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG168802
	DQ	0000000000000000H
	DD	0111H
	DD	080H
	DD	00H
	DD	00H
$SG192693 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192694 DB	'061_MISC_INSTR_EXT_3', 00H
	ORG $+3
$SG192695 DB	'Miscellaneous-Instruction-Extensions Facility 3', 00H
$SG192696 DB	'062_IBM_INTERNAL', 00H
	ORG $+7
$SG192697 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192698 DB	'063_IBM_INTERNAL', 00H
	ORG $+7
$SG192699 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192700 DB	'064_IBM_INTERNAL', 00H
	ORG $+7
$SG192701 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192702 DB	'065_IBM_INTERNAL', 00H
	ORG $+7
$SG192703 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192704 DB	'066_RES_REF_BITS_MULT', 00H
	ORG $+2
$SG192705 DB	'Reset-Reference-Bits-Multiple Facility', 00H
	ORG $+1
$SG192706 DB	'067_CPU_MEAS_COUNTER', 00H
	ORG $+3
$SG192707 DB	'CPU-Measurement Counter Facility', 00H
	ORG $+7
$SG192708 DB	'068_CPU_MEAS_SAMPLNG', 00H
	ORG $+3
$SG192709 DB	'CPU-Measurement Sampling Facility', 00H
	ORG $+6
$SG192710 DB	'069_IBM_INTERNAL', 00H
	ORG $+7
$SG192711 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192712 DB	'070_IBM_INTERNAL', 00H
	ORG $+7
$SG192713 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192714 DB	'071_IBM_INTERNAL', 00H
	ORG $+7
$SG192715 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192716 DB	'072_IBM_INTERNAL', 00H
	ORG $+7
$SG192717 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192718 DB	'073_TRANSACT_EXEC', 00H
	ORG $+6
$SG192719 DB	'Transactional-Execution Facility', 00H
	ORG $+7
$SG192720 DB	'074_STORE_HYPER_INFO', 00H
	ORG $+3
$SG192721 DB	'Store-Hypervisor-Information Facility', 00H
	ORG $+2
$SG192722 DB	'075_ACC_EX_FS_INDIC', 00H
	ORG $+4
$SG192723 DB	'Access-Exception-Fetch/Store-Indication Facility', 00H
	ORG $+7
$SG192724 DB	'076_MSA_EXTENSION_3', 00H
	ORG $+4
$SG192725 DB	'Message-Security-Assist Extension 3', 00H
	ORG $+4
$SG192726 DB	'077_MSA_EXTENSION_4', 00H
	ORG $+4
$SG192727 DB	'Message-Security-Assist Extension 4', 00H
	ORG $+4
$SG192728 DB	'078_EDAT_2', 00H
	ORG $+5
$SG192729 DB	'Enhanced-DAT Facility 2', 00H
$SG192730 DB	'079_UNDEFINED', 00H
	ORG $+2
$SG192731 DB	'Undefined', 00H
	ORG $+6
$SG192732 DB	'080_DFP_PACK_CONV', 00H
	ORG $+6
$SG192733 DB	'Decimal-Floating-Point-Packed-Conversion Facility', 00H
	ORG $+6
$SG192734 DB	'081_PPA_IN_ORDER', 00H
	ORG $+7
$SG192735 DB	'PPA-in-order Facility', 00H
	ORG $+2
$SG192736 DB	'082_IBM_INTERNAL', 00H
	ORG $+7
$SG192737 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192738 DB	'083_UNDEFINED', 00H
	ORG $+2
$SG192739 DB	'Undefined', 00H
	ORG $+6
$SG192740 DB	'084_UNDEFINED', 00H
	ORG $+2
$SG192741 DB	'Undefined', 00H
	ORG $+6
$SG192742 DB	'085_UNDEFINED', 00H
	ORG $+2
$SG192743 DB	'Undefined', 00H
	ORG $+6
$SG192744 DB	'086_UNDEFINED', 00H
	ORG $+2
$SG192745 DB	'Undefined', 00H
	ORG $+6
$SG192746 DB	'087_UNDEFINED', 00H
	ORG $+2
$SG192747 DB	'Undefined', 00H
	ORG $+6
$SG192748 DB	'088_UNDEFINED', 00H
	ORG $+2
$SG192749 DB	'Undefined', 00H
	ORG $+6
$SG192750 DB	'089_UNDEFINED', 00H
	ORG $+2
$SG192751 DB	'Undefined', 00H
	ORG $+6
$SG192752 DB	'090_UNDEFINED', 00H
	ORG $+2
$SG192753 DB	'Undefined', 00H
	ORG $+6
$SG192754 DB	'091_UNDEFINED', 00H
	ORG $+2
$SG192755 DB	'Undefined', 00H
	ORG $+6
$SG192756 DB	'092_UNDEFINED', 00H
	ORG $+2
$SG192757 DB	'Undefined', 00H
	ORG $+6
$SG192758 DB	'093_UNDEFINED', 00H
	ORG $+2
$SG192759 DB	'Undefined', 00H
	ORG $+6
$SG192760 DB	'094_UNDEFINED', 00H
	ORG $+2
$SG192761 DB	'Undefined', 00H
	ORG $+6
$SG192762 DB	'095_UNDEFINED', 00H
	ORG $+2
$SG192763 DB	'Undefined', 00H
	ORG $+6
$SG192764 DB	'096_UNDEFINED', 00H
	ORG $+2
$SG192765 DB	'Undefined', 00H
	ORG $+6
$SG192766 DB	'097_UNDEFINED', 00H
	ORG $+2
$SG192767 DB	'Undefined', 00H
	ORG $+6
$SG192768 DB	'098_UNDEFINED', 00H
	ORG $+2
$SG192769 DB	'Undefined', 00H
	ORG $+6
$SG192770 DB	'099_UNDEFINED', 00H
	ORG $+2
$SG192771 DB	'Undefined', 00H
	ORG $+6
$SG192772 DB	'100_UNDEFINED', 00H
	ORG $+2
$SG192773 DB	'Undefined', 00H
	ORG $+6
$SG192774 DB	'101_UNDEFINED', 00H
	ORG $+2
$SG192775 DB	'Undefined', 00H
	ORG $+6
$SG192776 DB	'102_UNDEFINED', 00H
	ORG $+2
$SG192777 DB	'Undefined', 00H
	ORG $+6
$SG192778 DB	'103_UNDEFINED', 00H
	ORG $+2
$SG192779 DB	'Undefined', 00H
	ORG $+6
$SG192780 DB	'104_UNDEFINED', 00H
	ORG $+2
$SG192781 DB	'Undefined', 00H
	ORG $+6
$SG192782 DB	'105_UNDEFINED', 00H
	ORG $+2
$SG192783 DB	'Undefined', 00H
	ORG $+6
$SG192784 DB	'106_UNDEFINED', 00H
	ORG $+2
$SG192785 DB	'Undefined', 00H
	ORG $+6
$SG192786 DB	'107_UNDEFINED', 00H
	ORG $+2
$SG192787 DB	'Undefined', 00H
	ORG $+6
$SG192788 DB	'108_UNDEFINED', 00H
	ORG $+2
$SG192789 DB	'Undefined', 00H
	ORG $+6
$SG192790 DB	'109_UNDEFINED', 00H
	ORG $+2
$SG192791 DB	'Undefined', 00H
	ORG $+6
$SG192792 DB	'110_UNDEFINED', 00H
	ORG $+2
$SG192793 DB	'Undefined', 00H
	ORG $+6
$SG192794 DB	'111_UNDEFINED', 00H
	ORG $+2
$SG192795 DB	'Undefined', 00H
	ORG $+6
$SG192796 DB	'112_UNDEFINED', 00H
	ORG $+2
$SG192797 DB	'Undefined', 00H
	ORG $+6
$SG192798 DB	'113_UNDEFINED', 00H
	ORG $+2
$SG192799 DB	'Undefined', 00H
	ORG $+6
$SG192800 DB	'114_UNDEFINED', 00H
	ORG $+2
$SG192801 DB	'Undefined', 00H
	ORG $+6
$SG192802 DB	'115_UNDEFINED', 00H
	ORG $+2
$SG192803 DB	'Undefined', 00H
	ORG $+6
$SG192804 DB	'116_UNDEFINED', 00H
	ORG $+2
$SG192805 DB	'Undefined', 00H
	ORG $+6
$SG192806 DB	'117_UNDEFINED', 00H
	ORG $+2
$SG192807 DB	'Undefined', 00H
	ORG $+6
$SG192808 DB	'118_UNDEFINED', 00H
	ORG $+2
$SG192809 DB	'Undefined', 00H
	ORG $+6
$SG192810 DB	'119_UNDEFINED', 00H
	ORG $+2
$SG192811 DB	'Undefined', 00H
	ORG $+6
$SG192812 DB	'120_UNDEFINED', 00H
	ORG $+2
$SG192813 DB	'Undefined', 00H
	ORG $+6
$SG192814 DB	'121_UNDEFINED', 00H
	ORG $+2
$SG192815 DB	'Undefined', 00H
	ORG $+6
$SG192816 DB	'122_UNDEFINED', 00H
	ORG $+2
$SG192817 DB	'Undefined', 00H
	ORG $+6
$SG192818 DB	'123_UNDEFINED', 00H
	ORG $+2
$SG192819 DB	'Undefined', 00H
	ORG $+6
$SG192820 DB	'124_UNDEFINED', 00H
	ORG $+2
$SG192821 DB	'Undefined', 00H
	ORG $+6
$SG192822 DB	'125_UNDEFINED', 00H
	ORG $+2
$SG192823 DB	'Undefined', 00H
	ORG $+6
$SG192824 DB	'126_UNDEFINED', 00H
	ORG $+2
$SG192825 DB	'Undefined', 00H
	ORG $+6
$SG192826 DB	'127_UNDEFINED', 00H
	ORG $+2
$SG192827 DB	'Undefined', 00H
	ORG $+6
$SG192828 DB	'128_IBM_INTERNAL', 00H
	ORG $+7
$SG192829 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192830 DB	'129_ZVECTOR', 00H
	ORG $+4
$SG192831 DB	'Vector Facility for z/Architecture', 00H
	ORG $+5
$SG192832 DB	'130_INSTR_EXEC_PROT', 00H
	ORG $+4
$SG192833 DB	'Instruction-Execution-Protection Facility', 00H
	ORG $+6
$SG192834 DB	'131_SIDE_EFFECT_ACCESS', 00H
	ORG $+1
$SG192835 DB	'Side-Effect-Access Facility', 00H
	ORG $+4
$SG192836 DB	'131_ENH_SUPP_ON_PROT_2', 00H
	ORG $+1
$SG192837 DB	'Enhanced-Suppression-on-Protection Facility 2', 00H
	ORG $+2
$SG192838 DB	'132_UNDEFINED', 00H
	ORG $+2
$SG192839 DB	'Undefined', 00H
	ORG $+6
$SG192840 DB	'133_GUARDED_STORAGE', 00H
	ORG $+4
$SG192841 DB	'Guarded-Storage Facility', 00H
	ORG $+7
$SG192842 DB	'134_ZVECTOR_PACK_DEC', 00H
	ORG $+3
$SG192843 DB	'Vector Packed-Decimal Facility', 00H
	ORG $+1
$SG192844 DB	'135_ZVECTOR_ENH_1', 00H
	ORG $+6
$SG192845 DB	'Vector-Enhancements Facility 1', 00H
	ORG $+1
$SG192846 DB	'136_UNDEFINED', 00H
	ORG $+2
$SG192847 DB	'Undefined', 00H
	ORG $+6
$SG192848 DB	'137_UNDEFINED', 00H
	ORG $+2
$SG192849 DB	'Undefined', 00H
	ORG $+6
$SG192850 DB	'138_CONFIG_ZARCH_MODE', 00H
	ORG $+2
$SG192851 DB	'CZAM Facility (Configuration-z/Architecture-Architectura'
	DB	'l-Mode)', 00H
$SG192852 DB	'139_MULTIPLE_EPOCH', 00H
	ORG $+5
$SG192853 DB	'Multiple-Epoch Facility', 00H
$SG192854 DB	'140_IBM_INTERNAL', 00H
	ORG $+7
$SG192855 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192856 DB	'141_IBM_INTERNAL', 00H
	ORG $+7
$SG192857 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192858 DB	'142_ST_CPU_COUNTER_MULT', 00H
$SG192859 DB	'Store-CPU-Counter-Multiple Facility', 00H
	ORG $+4
$SG192860 DB	'143_UNDEFINED', 00H
	ORG $+2
$SG192861 DB	'Undefined', 00H
	ORG $+6
$SG192862 DB	'144_TEST_PEND_EXTERNAL', 00H
	ORG $+1
$SG192863 DB	'Test-Pending-External-Interruption Facility', 00H
	ORG $+4
$SG192864 DB	'145_INS_REF_BITS_MULT', 00H
	ORG $+2
$SG192865 DB	'Insert-Reference-Bits-Multiple Facility', 00H
$SG192866 DB	'146_MSA_EXTENSION_8', 00H
	ORG $+4
$SG192867 DB	'Message-Security-Assist Extension 8', 00H
	ORG $+4
$SG192868 DB	'147_IBM_RESERVED', 00H
	ORG $+7
$SG192869 DB	'Reserved for IBM use', 00H
	ORG $+3
$SG192870 DB	'148_VECTOR_ENH_2', 00H
	ORG $+7
$SG192871 DB	'Vector-Enhancements Facility 2', 00H
	ORG $+1
$SG192872 DB	'149_MOVEPAGE_SETKEY', 00H
	ORG $+4
$SG192873 DB	'Move-Page-and-Set-Key Facility', 00H
	ORG $+1
$SG192874 DB	'150_ENH_SORT', 00H
	ORG $+3
$SG192875 DB	'Enhanced-Sort Facility', 00H
	ORG $+1
$SG192876 DB	'151_DEFLATE_CONV', 00H
	ORG $+7
$SG192877 DB	'DEFLATE-Conversion Facility', 00H
	ORG $+4
$SG192878 DB	'152_VECT_PACKDEC_ENH', 00H
	ORG $+3
$SG192879 DB	'Vector-Packed-Decimal-Enhancement Facility', 00H
	ORG $+5
$SG192880 DB	'153_IBM_INTERNAL', 00H
	ORG $+7
$SG192881 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192882 DB	'154_UNDEFINED', 00H
	ORG $+2
$SG192883 DB	'Undefined', 00H
	ORG $+6
$SG192884 DB	'155_MSA_EXTENSION_9', 00H
	ORG $+4
$SG192885 DB	'Message-Security-Assist Extension 9', 00H
	ORG $+4
$SG192886 DB	'156_IBM_INTERNAL', 00H
	ORG $+7
$SG192887 DB	'Assigned to IBM internal use', 00H
	ORG $+3
$SG192888 DB	'157_UNDEFINED', 00H
	ORG $+2
$SG192889 DB	'Undefined', 00H
	ORG $+6
$SG192890 DB	'158_ULTRAV_CALL', 00H
$SG192891 DB	'Ultravisor-Call facility', 00H
	ORG $+7
$SG192892 DB	'159_UNDEFINED', 00H
	ORG $+2
$SG192893 DB	'Undefined', 00H
	ORG $+6
$SG192894 DB	'160_UNDEFINED', 00H
	ORG $+2
$SG192895 DB	'Undefined', 00H
	ORG $+6
$SG192896 DB	'161_SEC_EXE_UNPK', 00H
	ORG $+7
$SG192897 DB	'Secure-Execution-Unpack Facility', 00H
	ORG $+7
$SG192898 DB	'162_UNDEFINED', 00H
	ORG $+2
$SG192899 DB	'Undefined', 00H
	ORG $+6
$SG192900 DB	'163_UNDEFINED', 00H
	ORG $+2
$SG192901 DB	'Undefined', 00H
	ORG $+6
$SG192902 DB	'164_UNDEFINED', 00H
	ORG $+2
$SG192903 DB	'Undefined', 00H
	ORG $+6
$SG192904 DB	'165_NNET_ASSIST', 00H
$SG192905 DB	'Neural-Network-Processing-Assist Facility', 00H
	ORG $+6
$SG192906 DB	'166_UNDEFINED', 00H
	ORG $+2
$SG192907 DB	'Undefined', 00H
	ORG $+6
$SG192908 DB	'167_UNDEFINED', 00H
	ORG $+2
$SG192909 DB	'Undefined', 00H
	ORG $+6
$SG192910 DB	'168_ESA390_COMPAT_MODE', 00H
	ORG $+1
$SG192911 DB	'ESA/390-Compatibility-Mode Facility', 00H
	ORG $+4
$SG192912 DB	'169_SKEY_REMOVAL', 00H
	ORG $+7
$SG192913 DB	'Storage-Key-Removal Facility', 00H
	ORG $+3
$SG192914 DB	'170_UNDEFINED', 00H
	ORG $+2
$SG192915 DB	'Undefined', 00H
	ORG $+6
$SG192916 DB	'171_UNDEFINED', 00H
	ORG $+2
$SG192917 DB	'Undefined', 00H
	ORG $+6
$SG192918 DB	'172_UNDEFINED', 00H
	ORG $+2
$SG192919 DB	'Undefined', 00H
	ORG $+6
$SG192920 DB	'173_UNDEFINED', 00H
	ORG $+2
$SG192921 DB	'Undefined', 00H
	ORG $+6
$SG192922 DB	'174_UNDEFINED', 00H
	ORG $+2
$SG192923 DB	'Undefined', 00H
	ORG $+6
$SG192924 DB	'175_UNDEFINED', 00H
	ORG $+2
$SG192925 DB	'Undefined', 00H
	ORG $+6
$SG192926 DB	'176_UNDEFINED', 00H
	ORG $+2
$SG192927 DB	'Undefined', 00H
	ORG $+6
$SG192928 DB	'177_UNDEFINED', 00H
	ORG $+2
$SG192929 DB	'Undefined', 00H
	ORG $+6
$SG192930 DB	'178_UNDEFINED', 00H
	ORG $+2
$SG192931 DB	'Undefined', 00H
	ORG $+6
$SG192932 DB	'179_UNDEFINED', 00H
	ORG $+2
$SG192933 DB	'Undefined', 00H
	ORG $+6
$SG192934 DB	'180_UNDEFINED', 00H
	ORG $+2
$SG192935 DB	'Undefined', 00H
	ORG $+6
$SG192936 DB	'181_UNDEFINED', 00H
	ORG $+2
$SG192937 DB	'Undefined', 00H
	ORG $+6
$SG192938 DB	'182_UNDEFINED', 00H
	ORG $+2
$SG192939 DB	'Undefined', 00H
	ORG $+6
$SG192940 DB	'183_UNDEFINED', 00H
	ORG $+2
$SG192941 DB	'Undefined', 00H
	ORG $+6
$SG192942 DB	'184_UNDEFINED', 00H
	ORG $+2
$SG192943 DB	'Undefined', 00H
	ORG $+6
$SG192944 DB	'185_UNDEFINED', 00H
	ORG $+2
$SG192945 DB	'Undefined', 00H
	ORG $+6
$SG192946 DB	'186_UNDEFINED', 00H
	ORG $+2
$SG192947 DB	'Undefined', 00H
	ORG $+6
$SG192948 DB	'187_UNDEFINED', 00H
	ORG $+2
$SG192949 DB	'Undefined', 00H
	ORG $+6
$SG192950 DB	'188_UNDEFINED', 00H
	ORG $+2
$SG192951 DB	'Undefined', 00H
	ORG $+6
$SG192952 DB	'189_UNDEFINED', 00H
	ORG $+2
$SG192953 DB	'Undefined', 00H
	ORG $+6
$SG192954 DB	'190_UNDEFINED', 00H
	ORG $+2
$SG192955 DB	'Undefined', 00H
	ORG $+6
$SG192956 DB	'191_UNDEFINED', 00H
	ORG $+2
$SG192957 DB	'Undefined', 00H
	ORG $+6
$SG192958 DB	'192_VECT_PACKDEC_ENH_2', 00H
	ORG $+1
$SG192959 DB	'Vector-Packed-Decimal-Enhancement Facility 2', 00H
	ORG $+3
$SG192960 DB	'193_BEAR_ENH', 00H
	ORG $+3
$SG192961 DB	'BEAR-Enhancement Facility', 00H
	ORG $+6
$SG192962 DB	'194_RESET_DAT_PROT', 00H
	ORG $+5
$SG192963 DB	'Reset-DAT-Protection Facility', 00H
	ORG $+2
$SG192964 DB	'195_UNDEFINED', 00H
	ORG $+2
$SG192965 DB	'Undefined', 00H
	ORG $+6
$SG192966 DB	'196_PROC_ACT', 00H
	ORG $+3
$SG192967 DB	'Processor-Activity-Instrumentation Facility', 00H
	ORG $+4
$SG192968 DB	'197_PROC_ACT_EXT_1', 00H
	ORG $+5
$SG192969 DB	'Processor-Activity-Instrumentation Extension 1 Facility', 00H
$SG192970 DB	'198_UNDEFINED', 00H
	ORG $+2
$SG192971 DB	'Undefined', 00H
	ORG $+6
$SG192972 DB	'199_UNDEFINED', 00H
	ORG $+2
$SG192973 DB	'Undefined', 00H
	ORG $+6
$SG192974 DB	'200_UNDEFINED', 00H
	ORG $+2
$SG192975 DB	'Undefined', 00H
	ORG $+6
$SG192976 DB	'HERC_370_EXTENSION', 00H
	ORG $+5
$SG192977 DB	'Hercules S/370 Instruction Extension Facility', 00H
	ORG $+2
$SG192978 DB	'HERC_DETECT_PGMINTLOOP', 00H
	ORG $+1
$SG192979 DB	'Hercules Detect-Program-Interrupt-Loop Support', 00H
	ORG $+1
$SG192980 DB	'HERC_HOST_RESOURCE_ACCESS', 00H
	ORG $+6
$SG192981 DB	'Hercules Host Resource Access Support', 00H
	ORG $+2
$SG192982 DB	'HERC_INTERVAL_TIMER', 00H
	ORG $+4
$SG192983 DB	'Hercules Interval Timer Support', 00H
$SG192984 DB	'HERC_LOGICAL_PARTITION', 00H
	ORG $+1
$SG192985 DB	'Hercules Logical Partition (LPAR) Support', 00H
	ORG $+6
$SG192986 DB	'HERC_MOVE_INVERSE', 00H
	ORG $+6
$SG192987 DB	'Hercules MVCIN Move Inverse Instruction Support', 00H
$SG192988 DB	'HERC_MSA_EXTENSION_1', 00H
	ORG $+3
$SG192989 DB	'Hercules Message-Security-Assist Extension 1 Support', 00H
	ORG $+3
$SG192990 DB	'HERC_MSA_EXTENSION_2', 00H
	ORG $+3
$SG192991 DB	'Hercules Message-Security-Assist Extension 2 Support', 00H
	ORG $+3
$SG192992 DB	'HERC_PROBSTATE_DIAGF08', 00H
	ORG $+1
$SG192993 DB	'Hercules Problem-State Diagnose X''F08'' Support', 00H
	ORG $+1
$SG192994 DB	'HERC_QDIO_ASSIST', 00H
	ORG $+7
$SG192995 DB	'Hercules QDIO-Assist Support', 00H
	ORG $+3
$SG192996 DB	'HERC_QDIO_TDD', 00H
	ORG $+2
$SG192997 DB	'Hercules QDIO Time-Delayed-Dispatching Support', 00H
	ORG $+1
$SG192998 DB	'HERC_QDIO_THININT', 00H
	ORG $+6
$SG192999 DB	'Hercules QDIO Thin-Interrupts Support', 00H
	ORG $+2
$SG193000 DB	'HERC_QEBSM', 00H
	ORG $+5
$SG193001 DB	'Hercules QDIO Enhanced Buffer-State Management Support', 00H
	ORG $+1
$SG193002 DB	'HERC_SIGP_SETARCH_S370', 00H
	ORG $+1
$SG193003 DB	'Hercules SIGP Set Architecture S/370 Support', 00H
	ORG $+3
$SG193004 DB	'HERC_SVS', 00H
	ORG $+7
$SG193005 DB	'Hercules SVS Set Vector Summary Instruction Support', 00H
	ORG $+4
$SG193006 DB	'HERC_VIRTUAL_MACHINE', 00H
	ORG $+3
$SG193007 DB	'Hercules Emulate Virtual Machine Support', 00H
	ORG $+7
$SG193008 DB	'HERC_TCPIP_EXTENSION', 00H
	ORG $+3
$SG193009 DB	'Hercules Access Host TCP/IP Stack Through X''75'' Instru'
	DB	'ction', 00H
	ORG $+4
$SG193010 DB	'HERC_TCPIP_PROB_STATE', 00H
	ORG $+2
$SG193011 DB	'Hercules Enable X''75'' As Problem State Instruction', 00H
	ORG $+5
$SG193012 DB	'HERC_ZVM_ESSA', 00H
	ORG $+2
$SG193013 DB	'Hercules z/VM ESSA Extract and Set Storage Attributes in'
	DB	'struction', 00H
	ORG $+6
$SG168651 DB	'000_N3_INSTR', 00H
	ORG $+3
$SG168652 DB	'001_ZARCH_INSTALLED', 00H
	ORG $+4
$SG168653 DB	'012_IBM_INTERNAL', 00H
	ORG $+7
$SG168654 DB	'015_IBM_INTERNAL', 00H
	ORG $+7
$SG168655 DB	'016_EXT_TRANSL_2', 00H
	ORG $+7
$SG168656 DB	'017_MSA', 00H
$SG168657 DB	'018_LONG_DISPL_INST', 00H
	ORG $+4
$SG168658 DB	'020_HFP_MULT_ADD_SUB', 00H
	ORG $+3
$SG168659 DB	'021_EXTENDED_IMMED', 00H
	ORG $+5
$SG168660 DB	'022_EXT_TRANSL_3', 00H
	ORG $+7
$SG168661 DB	'023_HFP_UNNORM_EXT', 00H
	ORG $+5
$SG168662 DB	'024_ETF2_ENHANCEMENT', 00H
	ORG $+3
$SG168663 DB	'026_PARSING_ENHANCE', 00H
	ORG $+4
$SG168664 DB	'029_UNDEFINED', 00H
	ORG $+2
$SG168665 DB	'030_ETF3_ENHANCEMENT', 00H
	ORG $+3
$SG168666 DB	'032_CSSF', 00H
	ORG $+7
$SG168667 DB	'034_GEN_INST_EXTN', 00H
	ORG $+6
$SG168668 DB	'035_EXECUTE_EXTN', 00H
	ORG $+7
$SG168669 DB	'037_FP_EXTENSION', 00H
	ORG $+7
$SG168670 DB	'039_IBM_INTERNAL', 00H
	ORG $+7
$SG168671 DB	'041_FPS_ENHANCEMENT', 00H
	ORG $+4
$SG168672 DB	'041_DFP_ROUNDING', 00H
	ORG $+7
$SG168673 DB	'041_FPR_GR_TRANSFER', 00H
	ORG $+4
$SG168674 DB	'041_FPS_SIGN_HANDLING', 00H
	ORG $+2
$SG168675 DB	'041_IEEE_EXCEPT_SIM', 00H
	ORG $+4
$SG168676 DB	'042_DFP', 00H
$SG168677 DB	'045_DISTINCT_OPERANDS', 00H
	ORG $+2
$SG168678 DB	'045_FAST_BCR_SERIAL', 00H
	ORG $+4
$SG168679 DB	'045_HIGH_WORD', 00H
	ORG $+2
$SG168680 DB	'045_INTERLOCKED_ACCESS_1', 00H
	ORG $+7
$SG168681 DB	'045_LOAD_STORE_ON_COND_1', 00H
	ORG $+7
$SG168682 DB	'045_POPULATION_COUNT', 00H
	ORG $+3
$SG168683 DB	'046_IBM_INTERNAL', 00H
	ORG $+7
$SG168684 DB	'055_IBM_INTERNAL', 00H
	ORG $+7
$SG168685 DB	'056_UNDEFINED', 00H
	ORG $+2
$SG168686 DB	'059_IBM_INTERNAL', 00H
	ORG $+7
$SG168687 DB	'060_IBM_INTERNAL', 00H
	ORG $+7
$SG168688 DB	'062_IBM_INTERNAL', 00H
	ORG $+7
$SG168689 DB	'063_IBM_INTERNAL', 00H
	ORG $+7
$SG168690 DB	'064_IBM_INTERNAL', 00H
	ORG $+7
$SG168691 DB	'065_IBM_INTERNAL', 00H
	ORG $+7
$SG168692 DB	'069_IBM_INTERNAL', 00H
	ORG $+7
$SG168693 DB	'070_IBM_INTERNAL', 00H
	ORG $+7
$SG168694 DB	'071_IBM_INTERNAL', 00H
	ORG $+7
$SG168695 DB	'072_IBM_INTERNAL', 00H
	ORG $+7
$SG168696 DB	'076_MSA_EXTENSION_3', 00H
	ORG $+4
$SG168697 DB	'077_MSA_EXTENSION_4', 00H
	ORG $+4
$SG168698 DB	'079_UNDEFINED', 00H
	ORG $+2
$SG168699 DB	'082_IBM_INTERNAL', 00H
	ORG $+7
$SG168700 DB	'083_UNDEFINED', 00H
	ORG $+2
$SG168701 DB	'084_UNDEFINED', 00H
	ORG $+2
$SG168702 DB	'085_UNDEFINED', 00H
	ORG $+2
$SG168703 DB	'086_UNDEFINED', 00H
	ORG $+2
$SG168704 DB	'087_UNDEFINED', 00H
	ORG $+2
$SG168705 DB	'088_UNDEFINED', 00H
	ORG $+2
$SG168706 DB	'089_UNDEFINED', 00H
	ORG $+2
$SG168707 DB	'090_UNDEFINED', 00H
	ORG $+2
$SG168708 DB	'091_UNDEFINED', 00H
	ORG $+2
$SG168709 DB	'092_UNDEFINED', 00H
	ORG $+2
$SG168710 DB	'093_UNDEFINED', 00H
	ORG $+2
$SG168711 DB	'094_UNDEFINED', 00H
	ORG $+2
$SG168712 DB	'095_UNDEFINED', 00H
	ORG $+2
$SG168713 DB	'096_UNDEFINED', 00H
	ORG $+2
$SG168714 DB	'097_UNDEFINED', 00H
	ORG $+2
$SG168715 DB	'098_UNDEFINED', 00H
	ORG $+2
$SG168716 DB	'099_UNDEFINED', 00H
	ORG $+2
$SG168717 DB	'100_UNDEFINED', 00H
	ORG $+2
$SG168718 DB	'101_UNDEFINED', 00H
	ORG $+2
$SG168719 DB	'102_UNDEFINED', 00H
	ORG $+2
$SG168720 DB	'103_UNDEFINED', 00H
	ORG $+2
$SG168721 DB	'104_UNDEFINED', 00H
	ORG $+2
$SG168722 DB	'105_UNDEFINED', 00H
	ORG $+2
$SG168723 DB	'106_UNDEFINED', 00H
	ORG $+2
$SG168724 DB	'107_UNDEFINED', 00H
	ORG $+2
$SG168725 DB	'108_UNDEFINED', 00H
	ORG $+2
$SG168726 DB	'109_UNDEFINED', 00H
	ORG $+2
$SG168727 DB	'110_UNDEFINED', 00H
	ORG $+2
$SG168728 DB	'111_UNDEFINED', 00H
	ORG $+2
$SG168729 DB	'112_UNDEFINED', 00H
	ORG $+2
$SG168730 DB	'113_UNDEFINED', 00H
	ORG $+2
$SG168731 DB	'114_UNDEFINED', 00H
	ORG $+2
$SG168732 DB	'115_UNDEFINED', 00H
	ORG $+2
$SG168733 DB	'116_UNDEFINED', 00H
	ORG $+2
$SG168734 DB	'117_UNDEFINED', 00H
	ORG $+2
$SG168735 DB	'118_UNDEFINED', 00H
	ORG $+2
$SG168736 DB	'119_UNDEFINED', 00H
	ORG $+2
$SG168737 DB	'120_UNDEFINED', 00H
	ORG $+2
$SG168738 DB	'121_UNDEFINED', 00H
	ORG $+2
$SG168739 DB	'122_UNDEFINED', 00H
	ORG $+2
$SG168740 DB	'123_UNDEFINED', 00H
	ORG $+2
$SG168741 DB	'124_UNDEFINED', 00H
	ORG $+2
$SG168742 DB	'125_UNDEFINED', 00H
	ORG $+2
$SG168743 DB	'126_UNDEFINED', 00H
	ORG $+2
$SG168744 DB	'127_UNDEFINED', 00H
	ORG $+2
$SG168745 DB	'128_IBM_INTERNAL', 00H
	ORG $+7
$SG168746 DB	'132_UNDEFINED', 00H
	ORG $+2
$SG168747 DB	'136_UNDEFINED', 00H
	ORG $+2
$SG168748 DB	'137_UNDEFINED', 00H
	ORG $+2
$SG168749 DB	'140_IBM_INTERNAL', 00H
	ORG $+7
$SG168750 DB	'141_IBM_INTERNAL', 00H
	ORG $+7
$SG168751 DB	'143_UNDEFINED', 00H
	ORG $+2
$SG168752 DB	'147_IBM_RESERVED', 00H
	ORG $+7
$SG168753 DB	'153_IBM_INTERNAL', 00H
	ORG $+7
$SG168754 DB	'154_UNDEFINED', 00H
	ORG $+2
$SG168755 DB	'156_IBM_INTERNAL', 00H
	ORG $+7
$SG168756 DB	'157_UNDEFINED', 00H
	ORG $+2
$SG168757 DB	'159_UNDEFINED', 00H
	ORG $+2
$SG168758 DB	'160_UNDEFINED', 00H
	ORG $+2
$SG168759 DB	'162_UNDEFINED', 00H
	ORG $+2
$SG168760 DB	'163_UNDEFINED', 00H
	ORG $+2
$SG168761 DB	'164_UNDEFINED', 00H
	ORG $+2
$SG168762 DB	'166_UNDEFINED', 00H
	ORG $+2
$SG168763 DB	'167_UNDEFINED', 00H
	ORG $+2
$SG168764 DB	'170_UNDEFINED', 00H
	ORG $+2
$SG168765 DB	'171_UNDEFINED', 00H
	ORG $+2
$SG168766 DB	'172_UNDEFINED', 00H
	ORG $+2
$SG168767 DB	'173_UNDEFINED', 00H
	ORG $+2
$SG168768 DB	'174_UNDEFINED', 00H
	ORG $+2
$SG168769 DB	'175_UNDEFINED', 00H
	ORG $+2
$SG168770 DB	'176_UNDEFINED', 00H
	ORG $+2
$SG168771 DB	'177_UNDEFINED', 00H
	ORG $+2
$SG168772 DB	'178_UNDEFINED', 00H
	ORG $+2
$SG168773 DB	'179_UNDEFINED', 00H
	ORG $+2
$SG168774 DB	'180_UNDEFINED', 00H
	ORG $+2
$SG168775 DB	'181_UNDEFINED', 00H
	ORG $+2
$SG168776 DB	'182_UNDEFINED', 00H
	ORG $+2
$SG168777 DB	'183_UNDEFINED', 00H
	ORG $+2
$SG168778 DB	'184_UNDEFINED', 00H
	ORG $+2
$SG168779 DB	'185_UNDEFINED', 00H
	ORG $+2
$SG168780 DB	'186_UNDEFINED', 00H
	ORG $+2
$SG168781 DB	'187_UNDEFINED', 00H
	ORG $+2
$SG168782 DB	'188_UNDEFINED', 00H
	ORG $+2
$SG168783 DB	'189_UNDEFINED', 00H
	ORG $+2
$SG168784 DB	'190_UNDEFINED', 00H
	ORG $+2
$SG168785 DB	'191_UNDEFINED', 00H
	ORG $+2
$SG168786 DB	'195_UNDEFINED', 00H
	ORG $+2
$SG168787 DB	'198_UNDEFINED', 00H
	ORG $+2
$SG168788 DB	'199_UNDEFINED', 00H
	ORG $+2
$SG168789 DB	'200_UNDEFINED', 00H
	ORG $+2
$SG168790 DB	'HERC_370_EXTENSION', 00H
	ORG $+5
$SG168791 DB	'HERC_DETECT_PGMINTLOOP', 00H
	ORG $+1
$SG168792 DB	'HERC_HOST_RESOURCE_ACCESS', 00H
	ORG $+6
$SG168793 DB	'HERC_INTERVAL_TIMER', 00H
	ORG $+4
$SG168794 DB	'HERC_MOVE_INVERSE', 00H
	ORG $+6
$SG168795 DB	'HERC_MSA_EXTENSION_1', 00H
	ORG $+3
$SG168796 DB	'HERC_MSA_EXTENSION_2', 00H
	ORG $+3
$SG168797 DB	'HERC_PROBSTATE_DIAGF08', 00H
	ORG $+1
$SG168798 DB	'HERC_QDIO_ASSIST', 00H
	ORG $+7
$SG168799 DB	'HERC_SIGP_SETARCH_S370', 00H
	ORG $+1
$SG168800 DB	'HERC_VIRTUAL_MACHINE', 00H
	ORG $+3
$SG168801 DB	'HERC_TCPIP_EXTENSION', 00H
	ORG $+3
$SG168802 DB	'HERC_TCPIP_PROB_STATE', 00H
	ORG $+2
s390_facs_tab DQ 0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178228
	DQ	0000000000000000H
	DD	00H
	DD	040H
	DD	040H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178229
	DQ	0000000000000000H
	DD	01H
	DD	060H
	DD	060H
	DD	060H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178230
	DQ	0000000000000000H
	DD	07H
	DD	040H
	DD	040H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178231
	DQ	0000000000000000H
	DD	0cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178232
	DQ	0000000000000000H
	DD	0eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178233
	DQ	0000000000000000H
	DD	0fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178234
	DQ	0000000000000000H
	DD	010H
	DD	040H
	DD	040H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178235
	DQ	0000000000000000H
	DD	011H
	DD	040H
	DD	040H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178236
	DQ	0000000000000000H
	DD	014H
	DD	040H
	DD	040H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178237
	DQ	0000000000000000H
	DD	018H
	DD	040H
	DD	040H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178238
	DQ	0000000000000000H
	DD	01dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178239
	DQ	0000000000000000H
	DD	027H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178240
	DQ	0000000000000000H
	DD	02eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178241
	DQ	0000000000000000H
	DD	034H
	DD	040H
	DD	040H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178242
	DQ	0000000000000000H
	DD	037H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178243
	DQ	0000000000000000H
	DD	038H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178244
	DQ	0000000000000000H
	DD	03bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178245
	DQ	0000000000000000H
	DD	03cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178246
	DQ	0000000000000000H
	DD	03eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178247
	DQ	0000000000000000H
	DD	03fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178248
	DQ	0000000000000000H
	DD	040H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178249
	DQ	0000000000000000H
	DD	041H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178250
	DQ	0000000000000000H
	DD	045H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178251
	DQ	0000000000000000H
	DD	046H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178252
	DQ	0000000000000000H
	DD	047H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178253
	DQ	0000000000000000H
	DD	048H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178254
	DQ	0000000000000000H
	DD	04fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178255
	DQ	0000000000000000H
	DD	052H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178256
	DQ	0000000000000000H
	DD	053H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178257
	DQ	0000000000000000H
	DD	054H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178258
	DQ	0000000000000000H
	DD	055H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178259
	DQ	0000000000000000H
	DD	056H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178260
	DQ	0000000000000000H
	DD	057H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178261
	DQ	0000000000000000H
	DD	058H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178262
	DQ	0000000000000000H
	DD	059H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178263
	DQ	0000000000000000H
	DD	05aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178264
	DQ	0000000000000000H
	DD	05bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178265
	DQ	0000000000000000H
	DD	05cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178266
	DQ	0000000000000000H
	DD	05dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178267
	DQ	0000000000000000H
	DD	05eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178268
	DQ	0000000000000000H
	DD	05fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178269
	DQ	0000000000000000H
	DD	060H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178270
	DQ	0000000000000000H
	DD	061H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178271
	DQ	0000000000000000H
	DD	062H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178272
	DQ	0000000000000000H
	DD	063H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178273
	DQ	0000000000000000H
	DD	064H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178274
	DQ	0000000000000000H
	DD	065H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178275
	DQ	0000000000000000H
	DD	066H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178276
	DQ	0000000000000000H
	DD	067H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178277
	DQ	0000000000000000H
	DD	068H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178278
	DQ	0000000000000000H
	DD	069H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178279
	DQ	0000000000000000H
	DD	06aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178280
	DQ	0000000000000000H
	DD	06bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178281
	DQ	0000000000000000H
	DD	06cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178282
	DQ	0000000000000000H
	DD	06dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178283
	DQ	0000000000000000H
	DD	06eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178284
	DQ	0000000000000000H
	DD	06fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178285
	DQ	0000000000000000H
	DD	070H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178286
	DQ	0000000000000000H
	DD	071H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178287
	DQ	0000000000000000H
	DD	072H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178288
	DQ	0000000000000000H
	DD	073H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178289
	DQ	0000000000000000H
	DD	074H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178290
	DQ	0000000000000000H
	DD	075H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178291
	DQ	0000000000000000H
	DD	076H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178292
	DQ	0000000000000000H
	DD	077H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178293
	DQ	0000000000000000H
	DD	078H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178294
	DQ	0000000000000000H
	DD	079H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178295
	DQ	0000000000000000H
	DD	07aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178296
	DQ	0000000000000000H
	DD	07bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178297
	DQ	0000000000000000H
	DD	07cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178298
	DQ	0000000000000000H
	DD	07dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178299
	DQ	0000000000000000H
	DD	07eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178300
	DQ	0000000000000000H
	DD	07fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178301
	DQ	0000000000000000H
	DD	080H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178302
	DQ	0000000000000000H
	DD	084H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178303
	DQ	0000000000000000H
	DD	088H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178304
	DQ	0000000000000000H
	DD	089H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178305
	DQ	0000000000000000H
	DD	08cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178306
	DQ	0000000000000000H
	DD	08dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178307
	DQ	0000000000000000H
	DD	08fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178308
	DQ	0000000000000000H
	DD	093H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178309
	DQ	0000000000000000H
	DD	099H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178310
	DQ	0000000000000000H
	DD	09aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178311
	DQ	0000000000000000H
	DD	09cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178312
	DQ	0000000000000000H
	DD	09dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178313
	DQ	0000000000000000H
	DD	09fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178314
	DQ	0000000000000000H
	DD	0a0H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178315
	DQ	0000000000000000H
	DD	0a2H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178316
	DQ	0000000000000000H
	DD	0a3H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178317
	DQ	0000000000000000H
	DD	0a4H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178318
	DQ	0000000000000000H
	DD	0a6H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178319
	DQ	0000000000000000H
	DD	0a7H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178320
	DQ	0000000000000000H
	DD	0aaH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178321
	DQ	0000000000000000H
	DD	0abH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178322
	DQ	0000000000000000H
	DD	0acH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178323
	DQ	0000000000000000H
	DD	0adH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178324
	DQ	0000000000000000H
	DD	0aeH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178325
	DQ	0000000000000000H
	DD	0afH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178326
	DQ	0000000000000000H
	DD	0b0H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178327
	DQ	0000000000000000H
	DD	0b1H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178328
	DQ	0000000000000000H
	DD	0b2H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178329
	DQ	0000000000000000H
	DD	0b3H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178330
	DQ	0000000000000000H
	DD	0b4H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178331
	DQ	0000000000000000H
	DD	0b5H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178332
	DQ	0000000000000000H
	DD	0b6H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178333
	DQ	0000000000000000H
	DD	0b7H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178334
	DQ	0000000000000000H
	DD	0b8H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178335
	DQ	0000000000000000H
	DD	0b9H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178336
	DQ	0000000000000000H
	DD	0baH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178337
	DQ	0000000000000000H
	DD	0bbH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178338
	DQ	0000000000000000H
	DD	0bcH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178339
	DQ	0000000000000000H
	DD	0bdH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178340
	DQ	0000000000000000H
	DD	0beH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178341
	DQ	0000000000000000H
	DD	0bfH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178342
	DQ	0000000000000000H
	DD	0c3H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178343
	DQ	0000000000000000H
	DD	0c6H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178344
	DQ	0000000000000000H
	DD	0c7H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178345
	DQ	0000000000000000H
	DD	0c8H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178346
	DQ	0000000000000000H
	DD	0101H
	DD	040H
	DD	040H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178347
	DQ	0000000000000000H
	DD	0102H
	DD	040H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178348
	DQ	0000000000000000H
	DD	0104H
	DD	040H
	DD	040H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178349
	DQ	0000000000000000H
	DD	0105H
	DD	040H
	DD	040H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178350
	DQ	0000000000000000H
	DD	0106H
	DD	040H
	DD	040H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178351
	DQ	0000000000000000H
	DD	0107H
	DD	040H
	DD	040H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178352
	DQ	0000000000000000H
	DD	0108H
	DD	040H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178353
	DQ	0000000000000000H
	DD	0109H
	DD	040H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178354
	DQ	0000000000000000H
	DD	010dH
	DD	040H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG178355
	DQ	0000000000000000H
	DD	010fH
	DD	040H
	DD	00H
	DD	00H
$SG178228 DB	'000_N3_INSTR', 00H
	ORG $+3
$SG178229 DB	'001_ZARCH_INSTALLED', 00H
	ORG $+4
$SG178230 DB	'007_STFL_EXTENDED', 00H
	ORG $+6
$SG178231 DB	'012_IBM_INTERNAL', 00H
	ORG $+7
$SG178232 DB	'014_NONQ_KEY_SET', 00H
	ORG $+7
$SG178233 DB	'015_IBM_INTERNAL', 00H
	ORG $+7
$SG178234 DB	'016_EXT_TRANSL_2', 00H
	ORG $+7
$SG178235 DB	'017_MSA', 00H
$SG178236 DB	'020_HFP_MULT_ADD_SUB', 00H
	ORG $+3
$SG178237 DB	'024_ETF2_ENHANCEMENT', 00H
	ORG $+3
$SG178238 DB	'029_UNDEFINED', 00H
	ORG $+2
$SG178239 DB	'039_IBM_INTERNAL', 00H
	ORG $+7
$SG178240 DB	'046_IBM_INTERNAL', 00H
	ORG $+7
$SG178241 DB	'052_INTERLOCKED_ACCESS_2', 00H
	ORG $+7
$SG178242 DB	'055_IBM_INTERNAL', 00H
	ORG $+7
$SG178243 DB	'056_UNDEFINED', 00H
	ORG $+2
$SG178244 DB	'059_IBM_INTERNAL', 00H
	ORG $+7
$SG178245 DB	'060_IBM_INTERNAL', 00H
	ORG $+7
$SG178246 DB	'062_IBM_INTERNAL', 00H
	ORG $+7
$SG178247 DB	'063_IBM_INTERNAL', 00H
	ORG $+7
$SG178248 DB	'064_IBM_INTERNAL', 00H
	ORG $+7
$SG178249 DB	'065_IBM_INTERNAL', 00H
	ORG $+7
$SG178250 DB	'069_IBM_INTERNAL', 00H
	ORG $+7
$SG178251 DB	'070_IBM_INTERNAL', 00H
	ORG $+7
$SG178252 DB	'071_IBM_INTERNAL', 00H
	ORG $+7
$SG178253 DB	'072_IBM_INTERNAL', 00H
	ORG $+7
$SG178254 DB	'079_UNDEFINED', 00H
	ORG $+2
$SG178255 DB	'082_IBM_INTERNAL', 00H
	ORG $+7
$SG178256 DB	'083_UNDEFINED', 00H
	ORG $+2
$SG178257 DB	'084_UNDEFINED', 00H
	ORG $+2
$SG178258 DB	'085_UNDEFINED', 00H
	ORG $+2
$SG178259 DB	'086_UNDEFINED', 00H
	ORG $+2
$SG178260 DB	'087_UNDEFINED', 00H
	ORG $+2
$SG178261 DB	'088_UNDEFINED', 00H
	ORG $+2
$SG178262 DB	'089_UNDEFINED', 00H
	ORG $+2
$SG178263 DB	'090_UNDEFINED', 00H
	ORG $+2
$SG178264 DB	'091_UNDEFINED', 00H
	ORG $+2
$SG178265 DB	'092_UNDEFINED', 00H
	ORG $+2
$SG178266 DB	'093_UNDEFINED', 00H
	ORG $+2
$SG178267 DB	'094_UNDEFINED', 00H
	ORG $+2
$SG178268 DB	'095_UNDEFINED', 00H
	ORG $+2
$SG178269 DB	'096_UNDEFINED', 00H
	ORG $+2
$SG178270 DB	'097_UNDEFINED', 00H
	ORG $+2
$SG178271 DB	'098_UNDEFINED', 00H
	ORG $+2
$SG178272 DB	'099_UNDEFINED', 00H
	ORG $+2
$SG178273 DB	'100_UNDEFINED', 00H
	ORG $+2
$SG178274 DB	'101_UNDEFINED', 00H
	ORG $+2
$SG178275 DB	'102_UNDEFINED', 00H
	ORG $+2
$SG178276 DB	'103_UNDEFINED', 00H
	ORG $+2
$SG178277 DB	'104_UNDEFINED', 00H
	ORG $+2
$SG178278 DB	'105_UNDEFINED', 00H
	ORG $+2
$SG178279 DB	'106_UNDEFINED', 00H
	ORG $+2
$SG178280 DB	'107_UNDEFINED', 00H
	ORG $+2
$SG178281 DB	'108_UNDEFINED', 00H
	ORG $+2
$SG178282 DB	'109_UNDEFINED', 00H
	ORG $+2
$SG178283 DB	'110_UNDEFINED', 00H
	ORG $+2
$SG178284 DB	'111_UNDEFINED', 00H
	ORG $+2
$SG178285 DB	'112_UNDEFINED', 00H
	ORG $+2
$SG178286 DB	'113_UNDEFINED', 00H
	ORG $+2
$SG178287 DB	'114_UNDEFINED', 00H
	ORG $+2
$SG178288 DB	'115_UNDEFINED', 00H
	ORG $+2
$SG178289 DB	'116_UNDEFINED', 00H
	ORG $+2
$SG178290 DB	'117_UNDEFINED', 00H
	ORG $+2
$SG178291 DB	'118_UNDEFINED', 00H
	ORG $+2
$SG178292 DB	'119_UNDEFINED', 00H
	ORG $+2
$SG178293 DB	'120_UNDEFINED', 00H
	ORG $+2
$SG178294 DB	'121_UNDEFINED', 00H
	ORG $+2
$SG178295 DB	'122_UNDEFINED', 00H
	ORG $+2
$SG178296 DB	'123_UNDEFINED', 00H
	ORG $+2
$SG178297 DB	'124_UNDEFINED', 00H
	ORG $+2
$SG178298 DB	'125_UNDEFINED', 00H
	ORG $+2
$SG178299 DB	'126_UNDEFINED', 00H
	ORG $+2
$SG178300 DB	'127_UNDEFINED', 00H
	ORG $+2
$SG178301 DB	'128_IBM_INTERNAL', 00H
	ORG $+7
$SG178302 DB	'132_UNDEFINED', 00H
	ORG $+2
$SG178303 DB	'136_UNDEFINED', 00H
	ORG $+2
$SG178304 DB	'137_UNDEFINED', 00H
	ORG $+2
$SG178305 DB	'140_IBM_INTERNAL', 00H
	ORG $+7
$SG178306 DB	'141_IBM_INTERNAL', 00H
	ORG $+7
$SG178307 DB	'143_UNDEFINED', 00H
	ORG $+2
$SG178308 DB	'147_IBM_RESERVED', 00H
	ORG $+7
$SG178309 DB	'153_IBM_INTERNAL', 00H
	ORG $+7
$SG178310 DB	'154_UNDEFINED', 00H
	ORG $+2
$SG178311 DB	'156_IBM_INTERNAL', 00H
	ORG $+7
$SG178312 DB	'157_UNDEFINED', 00H
	ORG $+2
$SG178313 DB	'159_UNDEFINED', 00H
	ORG $+2
$SG178314 DB	'160_UNDEFINED', 00H
	ORG $+2
$SG178315 DB	'162_UNDEFINED', 00H
	ORG $+2
$SG178316 DB	'163_UNDEFINED', 00H
	ORG $+2
$SG178317 DB	'164_UNDEFINED', 00H
	ORG $+2
$SG178318 DB	'166_UNDEFINED', 00H
	ORG $+2
$SG178319 DB	'167_UNDEFINED', 00H
	ORG $+2
$SG178320 DB	'170_UNDEFINED', 00H
	ORG $+2
$SG178321 DB	'171_UNDEFINED', 00H
	ORG $+2
$SG178322 DB	'172_UNDEFINED', 00H
	ORG $+2
$SG178323 DB	'173_UNDEFINED', 00H
	ORG $+2
$SG178324 DB	'174_UNDEFINED', 00H
	ORG $+2
$SG178325 DB	'175_UNDEFINED', 00H
	ORG $+2
$SG178326 DB	'176_UNDEFINED', 00H
	ORG $+2
$SG178327 DB	'177_UNDEFINED', 00H
	ORG $+2
$SG178328 DB	'178_UNDEFINED', 00H
	ORG $+2
$SG178329 DB	'179_UNDEFINED', 00H
	ORG $+2
$SG178330 DB	'180_UNDEFINED', 00H
	ORG $+2
$SG178331 DB	'181_UNDEFINED', 00H
	ORG $+2
$SG178332 DB	'182_UNDEFINED', 00H
	ORG $+2
$SG178333 DB	'183_UNDEFINED', 00H
	ORG $+2
$SG178334 DB	'184_UNDEFINED', 00H
	ORG $+2
$SG178335 DB	'185_UNDEFINED', 00H
	ORG $+2
$SG178336 DB	'186_UNDEFINED', 00H
	ORG $+2
$SG178337 DB	'187_UNDEFINED', 00H
	ORG $+2
$SG178338 DB	'188_UNDEFINED', 00H
	ORG $+2
$SG178339 DB	'189_UNDEFINED', 00H
	ORG $+2
$SG178340 DB	'190_UNDEFINED', 00H
	ORG $+2
$SG178341 DB	'191_UNDEFINED', 00H
	ORG $+2
$SG178342 DB	'195_UNDEFINED', 00H
	ORG $+2
$SG178343 DB	'198_UNDEFINED', 00H
	ORG $+2
$SG178344 DB	'199_UNDEFINED', 00H
	ORG $+2
$SG178345 DB	'200_UNDEFINED', 00H
	ORG $+2
$SG178346 DB	'HERC_DETECT_PGMINTLOOP', 00H
	ORG $+1
$SG178347 DB	'HERC_HOST_RESOURCE_ACCESS', 00H
	ORG $+6
$SG178348 DB	'HERC_LOGICAL_PARTITION', 00H
	ORG $+1
$SG178349 DB	'HERC_MOVE_INVERSE', 00H
	ORG $+6
$SG178350 DB	'HERC_MSA_EXTENSION_1', 00H
	ORG $+3
$SG178351 DB	'HERC_MSA_EXTENSION_2', 00H
	ORG $+3
$SG178352 DB	'HERC_PROBSTATE_DIAGF08', 00H
	ORG $+1
$SG178353 DB	'HERC_QDIO_ASSIST', 00H
	ORG $+7
$SG178354 DB	'HERC_SIGP_SETARCH_S370', 00H
	ORG $+1
$SG178355 DB	'HERC_VIRTUAL_MACHINE', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
num_arch_ft_entries DQ 0000000000000098H
	DQ	0000000000000080H
	DQ	00000000000000c4H
?pgmck_instr_func_tab@?1??dis_fac_ins@@9@9 DQ FLAT:s370_facility_not_enabled ; `dis_fac_ins'::`2'::pgmck_instr_func_tab
	DQ	FLAT:s390_facility_not_enabled
	DQ	FLAT:z900_facility_not_enabled
?arch_to_hdl_arch_tab@?1??dis_fac_ins@@9@9 DD 080000000H ; `dis_fac_ins'::`2'::arch_to_hdl_arch_tab
	DD	040000000H
	DD	020000000H
	ORG $+12
?facils@?1??enable_disable_herc37X@@9@9 DD 00H		; `enable_disable_herc37X'::`2'::facils
	DD	010H
	DD	011H
	DD	012H
	DD	014H
	DD	015H
	DD	016H
	DD	017H
	DD	01aH
	DD	020H
	DD	022H
	DD	023H
	DD	02aH
	DD	025H
	DD	029H
	DD	029H
	DD	029H
	DD	029H
	DD	029H
	DD	02dH
	DD	02dH
	DD	02dH
	DD	02dH
	DD	02dH
	DD	02dH
	DD	04cH
	DD	04dH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	init_facilities_lists
PUBLIC	init_cpu_facilities
PUBLIC	facility_query
PUBLIC	facility_enable_disable
PUBLIC	facility_cmd
EXTRN	__imp_isdigit:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	__imp__strnicmp:PROC
EXTRN	__imp_strdup:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_qsort:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_hthread_signal_condition:PROC
EXTRN	__imp_hthread_wait_condition:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_rtrim:PROC
EXTRN	__imp_parse_args:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_hdl_repins:PROC
EXTRN	s370_operation_exception:PROC
EXTRN	txf_model_warning:PROC
EXTRN	txf_set_timerint:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	get_arch_name_by_arch:PROC
EXTRN	get_archtab_by_arch:PROC
EXTRN	get_archtab_by_name:PROC
EXTRN	s390_operation_exception:PROC
EXTRN	z900_operation_exception:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
$SG193401 DB	01H DUP (?)
	ALIGN	8

?hdl_ins@?1??instr0@@9@9 DQ 03H DUP (?)			; `instr0'::`2'::hdl_ins
?hdl_ins@?1??instr3@@9@9 DQ 03H DUP (?)			; `instr3'::`2'::hdl_ins
?hdl_ins@?1??instr6@@9@9 DQ 03H DUP (?)			; `instr6'::`2'::hdl_ins
?hdl_ins@?1??instr7@@9@9 DQ 03H DUP (?)			; `instr7'::`2'::hdl_ins
?hdl_ins@?1??instr8@@9@9 DQ 03H DUP (?)			; `instr8'::`2'::hdl_ins
?hdl_ins@?1??instr11@@9@9 DQ 03H DUP (?)		; `instr11'::`2'::hdl_ins
?hdl_ins@?1??instr16@@9@9 DQ 03H DUP (?)		; `instr16'::`2'::hdl_ins
?hdl_ins@?1??instr17@@9@9 DQ 03H DUP (?)		; `instr17'::`2'::hdl_ins
?hdl_ins@?1??instr18@@9@9 DQ 03H DUP (?)		; `instr18'::`2'::hdl_ins
?hdl_ins@?1??instr20@@9@9 DQ 03H DUP (?)		; `instr20'::`2'::hdl_ins
?hdl_ins@?1??instr21@@9@9 DQ 03H DUP (?)		; `instr21'::`2'::hdl_ins
?hdl_ins@?1??instr22@@9@9 DQ 03H DUP (?)		; `instr22'::`2'::hdl_ins
?hdl_ins@?1??instr23@@9@9 DQ 03H DUP (?)		; `instr23'::`2'::hdl_ins
?hdl_ins@?1??instr25@@9@9 DQ 03H DUP (?)		; `instr25'::`2'::hdl_ins
?hdl_ins@?1??instr26@@9@9 DQ 03H DUP (?)		; `instr26'::`2'::hdl_ins
?hdl_ins@?1??instr27@@9@9 DQ 03H DUP (?)		; `instr27'::`2'::hdl_ins
?hdl_ins@?1??instr28@@9@9 DQ 03H DUP (?)		; `instr28'::`2'::hdl_ins
?hdl_ins@?1??instr31@@9@9 DQ 03H DUP (?)		; `instr31'::`2'::hdl_ins
?hdl_ins@?1??instr32@@9@9 DQ 03H DUP (?)		; `instr32'::`2'::hdl_ins
?hdl_ins@?1??instr34@@9@9 DQ 03H DUP (?)		; `instr34'::`2'::hdl_ins
?hdl_ins@?1??instr35@@9@9 DQ 03H DUP (?)		; `instr35'::`2'::hdl_ins
?hdl_ins@?1??instr37@@9@9 DQ 03H DUP (?)		; `instr37'::`2'::hdl_ins
?hdl_ins@?1??instr40@@9@9 DQ 03H DUP (?)		; `instr40'::`2'::hdl_ins
?hdl_ins@?1??instr41@@9@9 DQ 03H DUP (?)		; `instr41'::`2'::hdl_ins
?hdl_ins@?1??instr42@@9@9 DQ 03H DUP (?)		; `instr42'::`2'::hdl_ins
?hdl_ins@?1??instr44@@9@9 DQ 03H DUP (?)		; `instr44'::`2'::hdl_ins
?hdl_ins@?1??instr45@@9@9 DQ 03H DUP (?)		; `instr45'::`2'::hdl_ins
?hdl_ins@?1??instr48@@9@9 DQ 03H DUP (?)		; `instr48'::`2'::hdl_ins
?hdl_ins@?1??instr49@@9@9 DQ 03H DUP (?)		; `instr49'::`2'::hdl_ins
?hdl_ins@?1??instr50@@9@9 DQ 03H DUP (?)		; `instr50'::`2'::hdl_ins
?hdl_ins@?1??instr53@@9@9 DQ 03H DUP (?)		; `instr53'::`2'::hdl_ins
?hdl_ins@?1??instr57@@9@9 DQ 03H DUP (?)		; `instr57'::`2'::hdl_ins
?hdl_ins@?1??instr58@@9@9 DQ 03H DUP (?)		; `instr58'::`2'::hdl_ins
?hdl_ins@?1??instr61@@9@9 DQ 03H DUP (?)		; `instr61'::`2'::hdl_ins
?hdl_ins@?1??instr66@@9@9 DQ 03H DUP (?)		; `instr66'::`2'::hdl_ins
?hdl_ins@?1??instr67@@9@9 DQ 03H DUP (?)		; `instr67'::`2'::hdl_ins
?hdl_ins@?1??instr68@@9@9 DQ 03H DUP (?)		; `instr68'::`2'::hdl_ins
?hdl_ins@?1??instr73@@9@9 DQ 03H DUP (?)		; `instr73'::`2'::hdl_ins
?hdl_ins@?1??instr74@@9@9 DQ 03H DUP (?)		; `instr74'::`2'::hdl_ins
?hdl_ins@?1??instr76@@9@9 DQ 03H DUP (?)		; `instr76'::`2'::hdl_ins
?hdl_ins@?1??instr77@@9@9 DQ 03H DUP (?)		; `instr77'::`2'::hdl_ins
?hdl_ins@?1??instr78@@9@9 DQ 03H DUP (?)		; `instr78'::`2'::hdl_ins
?hdl_ins@?1??instr80@@9@9 DQ 03H DUP (?)		; `instr80'::`2'::hdl_ins
?hdl_ins@?1??instr129@@9@9 DQ 03H DUP (?)		; `instr129'::`2'::hdl_ins
?hdl_ins@?1??instr133@@9@9 DQ 03H DUP (?)		; `instr133'::`2'::hdl_ins
?hdl_ins@?1??instr134@@9@9 DQ 03H DUP (?)		; `instr134'::`2'::hdl_ins
?hdl_ins@?1??instr142@@9@9 DQ 03H DUP (?)		; `instr142'::`2'::hdl_ins
?hdl_ins@?1??instr144@@9@9 DQ 03H DUP (?)		; `instr144'::`2'::hdl_ins
?hdl_ins@?1??instr145@@9@9 DQ 03H DUP (?)		; `instr145'::`2'::hdl_ins
?hdl_ins@?1??instr146@@9@9 DQ 03H DUP (?)		; `instr146'::`2'::hdl_ins
?hdl_ins@?1??instr148@@9@9 DQ 03H DUP (?)		; `instr148'::`2'::hdl_ins
?hdl_ins@?1??instr150@@9@9 DQ 03H DUP (?)		; `instr150'::`2'::hdl_ins
?hdl_ins@?1??instr151@@9@9 DQ 03H DUP (?)		; `instr151'::`2'::hdl_ins
?hdl_ins@?1??instr155@@9@9 DQ 03H DUP (?)		; `instr155'::`2'::hdl_ins
?hdl_ins@?1??instr165@@9@9 DQ 03H DUP (?)		; `instr165'::`2'::hdl_ins
?hdl_ins@?1??instr192@@9@9 DQ 03H DUP (?)		; `instr192'::`2'::hdl_ins
?hdl_ins@?1??instr193@@9@9 DQ 03H DUP (?)		; `instr193'::`2'::hdl_ins
?hdl_ins@?1??instr194@@9@9 DQ 03H DUP (?)		; `instr194'::`2'::hdl_ins
?hdl_ins@?1??instr196@@9@9 DQ 03H DUP (?)		; `instr196'::`2'::hdl_ins
?hdl_ins@?1??hercmvcin@@9@9 DQ 03H DUP (?)		; `hercmvcin'::`2'::hdl_ins
?hdl_ins@?1??hercsvs@@9@9 DQ 03H DUP (?)		; `hercsvs'::`2'::hdl_ins
?hdl_ins@?1??hercessa@@9@9 DQ 03H DUP (?)		; `hercessa'::`2'::hdl_ins
?hdl_ins@?1??herc37X@@9@9 DQ 03H DUP (?)		; `herc37X'::`2'::hdl_ins
?hdl_ins@?1??herctcp@@9@9 DQ 03H DUP (?)		; `herctcp'::`2'::hdl_ins
$SG196359 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
$pdata$strcaseabbrev DD imagerel strcaseabbrev
	DD	imagerel strcaseabbrev+320
	DD	imagerel $unwind$strcaseabbrev
$pdata$strupper DD imagerel strupper
	DD	imagerel strupper+114
	DD	imagerel $unwind$strupper
$pdata$Interrupt_Lock_Obtained DD imagerel Interrupt_Lock_Obtained
	DD	imagerel Interrupt_Lock_Obtained+269
	DD	imagerel $unwind$Interrupt_Lock_Obtained
$pdata$Obtain_Interrupt_Lock DD imagerel Obtain_Interrupt_Lock
	DD	imagerel Obtain_Interrupt_Lock+88
	DD	imagerel $unwind$Obtain_Interrupt_Lock
$pdata$Release_Interrupt_Lock DD imagerel Release_Interrupt_Lock
	DD	imagerel Release_Interrupt_Lock+71
	DD	imagerel $unwind$Release_Interrupt_Lock
$pdata$are_any_cpus_started_intlock_held DD imagerel are_any_cpus_started_intlock_held
	DD	imagerel are_any_cpus_started_intlock_held+118
	DD	imagerel $unwind$are_any_cpus_started_intlock_held
$pdata$are_any_cpus_started DD imagerel are_any_cpus_started
	DD	imagerel are_any_cpus_started+51
	DD	imagerel $unwind$are_any_cpus_started
$pdata$init_facilities_lists DD imagerel $LN51
	DD	imagerel $LN51+1771
	DD	imagerel $unwind$init_facilities_lists
$pdata$init_cpu_facilities DD imagerel $LN6
	DD	imagerel $LN6+92
	DD	imagerel $unwind$init_cpu_facilities
$pdata$facility_query DD imagerel $LN43
	DD	imagerel $LN43+2074
	DD	imagerel $unwind$facility_query
$pdata$facility_enable_disable DD imagerel $LN60
	DD	imagerel $LN60+2929
	DD	imagerel $unwind$facility_enable_disable
$pdata$s370_facility_not_enabled DD imagerel s370_facility_not_enabled
	DD	imagerel s370_facility_not_enabled+34
	DD	imagerel $unwind$s370_facility_not_enabled
$pdata$s390_facility_not_enabled DD imagerel s390_facility_not_enabled
	DD	imagerel s390_facility_not_enabled+34
	DD	imagerel $unwind$s390_facility_not_enabled
$pdata$z900_facility_not_enabled DD imagerel z900_facility_not_enabled
	DD	imagerel z900_facility_not_enabled+34
	DD	imagerel $unwind$z900_facility_not_enabled
$pdata$mod000 DD imagerel mod000
	DD	imagerel mod000+248
	DD	imagerel $unwind$mod000
$pdata$mod002 DD imagerel mod002
	DD	imagerel mod002+250
	DD	imagerel $unwind$mod002
$pdata$mod003 DD imagerel mod003
	DD	imagerel mod003+469
	DD	imagerel $unwind$mod003
$pdata$mod004 DD imagerel mod004
	DD	imagerel mod004+474
	DD	imagerel $unwind$mod004
$pdata$mod005 DD imagerel mod005
	DD	imagerel mod005+469
	DD	imagerel $unwind$mod005
$pdata$mod007 DD imagerel mod007
	DD	imagerel mod007+250
	DD	imagerel $unwind$mod007
$pdata$mod008 DD imagerel mod008
	DD	imagerel mod008+248
	DD	imagerel $unwind$mod008
$pdata$mod010 DD imagerel mod010
	DD	imagerel mod010+248
	DD	imagerel $unwind$mod010
$pdata$mod014 DD imagerel mod014
	DD	imagerel mod014+474
	DD	imagerel $unwind$mod014
$pdata$mod018 DD imagerel mod018
	DD	imagerel mod018+248
	DD	imagerel $unwind$mod018
$pdata$mod019 DD imagerel mod019
	DD	imagerel mod019+248
	DD	imagerel $unwind$mod019
$pdata$mod025 DD imagerel mod025
	DD	imagerel mod025+248
	DD	imagerel $unwind$mod025
$pdata$mod028 DD imagerel mod028
	DD	imagerel mod028+248
	DD	imagerel $unwind$mod028
$pdata$mod037 DD imagerel mod037
	DD	imagerel mod037+248
	DD	imagerel $unwind$mod037
$pdata$mod040 DD imagerel mod040
	DD	imagerel mod040+248
	DD	imagerel $unwind$mod040
$pdata$mod042 DD imagerel mod042
	DD	imagerel mod042+469
	DD	imagerel $unwind$mod042
$pdata$mod043 DD imagerel mod043
	DD	imagerel mod043+248
	DD	imagerel $unwind$mod043
$pdata$mod045 DD imagerel mod045
	DD	imagerel mod045+248
	DD	imagerel $unwind$mod045
$pdata$mod048 DD imagerel mod048
	DD	imagerel mod048+248
	DD	imagerel $unwind$mod048
$pdata$mod049 DD imagerel mod049
	DD	imagerel mod049+469
	DD	imagerel $unwind$mod049
$pdata$mod050 DD imagerel mod050
	DD	imagerel mod050+248
	DD	imagerel $unwind$mod050
$pdata$mod051 DD imagerel mod051
	DD	imagerel mod051+248
	DD	imagerel $unwind$mod051
$pdata$mod061 DD imagerel mod061
	DD	imagerel mod061+248
	DD	imagerel $unwind$mod061
$pdata$mod066 DD imagerel mod066
	DD	imagerel mod066+248
	DD	imagerel $unwind$mod066
$pdata$mod067 DD imagerel mod067
	DD	imagerel mod067+469
	DD	imagerel $unwind$mod067
$pdata$mod068 DD imagerel mod068
	DD	imagerel mod068+471
	DD	imagerel $unwind$mod068
$pdata$mod073 DD imagerel mod073
	DD	imagerel mod073+495
	DD	imagerel $unwind$mod073
$pdata$mod076 DD imagerel mod076
	DD	imagerel mod076+469
	DD	imagerel $unwind$mod076
$pdata$mod077 DD imagerel mod077
	DD	imagerel mod077+248
	DD	imagerel $unwind$mod077
$pdata$mod078 DD imagerel mod078
	DD	imagerel mod078+250
	DD	imagerel $unwind$mod078
$pdata$mod080 DD imagerel mod080
	DD	imagerel mod080+248
	DD	imagerel $unwind$mod080
$pdata$mod081 DD imagerel mod081
	DD	imagerel mod081+248
	DD	imagerel $unwind$mod081
$pdata$mod129 DD imagerel mod129
	DD	imagerel mod129+1366
	DD	imagerel $unwind$mod129
$pdata$mod134 DD imagerel mod134
	DD	imagerel mod134+702
	DD	imagerel $unwind$mod134
$pdata$mod135 DD imagerel mod135
	DD	imagerel mod135+474
	DD	imagerel $unwind$mod135
$pdata$mod139 DD imagerel mod139
	DD	imagerel mod139+469
	DD	imagerel $unwind$mod139
$pdata$mod142 DD imagerel mod142
	DD	imagerel mod142+248
	DD	imagerel $unwind$mod142
$pdata$mod145 DD imagerel mod145
	DD	imagerel mod145+248
	DD	imagerel $unwind$mod145
$pdata$mod146 DD imagerel mod146
	DD	imagerel mod146+248
	DD	imagerel $unwind$mod146
$pdata$mod148 DD imagerel mod148
	DD	imagerel mod148+469
	DD	imagerel $unwind$mod148
$pdata$mod149 DD imagerel mod149
	DD	imagerel mod149+248
	DD	imagerel $unwind$mod149
$pdata$mod152 DD imagerel mod152
	DD	imagerel mod152+700
	DD	imagerel $unwind$mod152
$pdata$mod155 DD imagerel mod155
	DD	imagerel mod155+469
	DD	imagerel $unwind$mod155
$pdata$mod165 DD imagerel mod165
	DD	imagerel mod165+248
	DD	imagerel $unwind$mod165
$pdata$mod168 DD imagerel mod168
	DD	imagerel mod168+248
	DD	imagerel $unwind$mod168
$pdata$mod169 DD imagerel mod169
	DD	imagerel mod169+1129
	DD	imagerel $unwind$mod169
$pdata$mod192 DD imagerel mod192
	DD	imagerel mod192+695
	DD	imagerel $unwind$mod192
$pdata$mod194 DD imagerel mod194
	DD	imagerel mod194+248
	DD	imagerel $unwind$mod194
$pdata$mod196 DD imagerel mod196
	DD	imagerel mod196+248
	DD	imagerel $unwind$mod196
$pdata$mod197 DD imagerel mod197
	DD	imagerel mod197+248
	DD	imagerel $unwind$mod197
$pdata$modtcp DD imagerel modtcp
	DD	imagerel modtcp+510
	DD	imagerel $unwind$modtcp
$pdata$instr0 DD imagerel instr0
	DD	imagerel instr0+972
	DD	imagerel $unwind$instr0
$pdata$instr3 DD imagerel instr3
	DD	imagerel instr3+145
	DD	imagerel $unwind$instr3
$pdata$instr6 DD imagerel instr6
	DD	imagerel instr6+234
	DD	imagerel $unwind$instr6
$pdata$instr7 DD imagerel instr7
	DD	imagerel instr7+104
	DD	imagerel $unwind$instr7
$pdata$instr8 DD imagerel instr8
	DD	imagerel instr8+104
	DD	imagerel $unwind$instr8
$pdata$instr11 DD imagerel instr11
	DD	imagerel instr11+104
	DD	imagerel $unwind$instr11
$pdata$instr16 DD imagerel instr16
	DD	imagerel instr16+521
	DD	imagerel $unwind$instr16
$pdata$instr17 DD imagerel instr17
	DD	imagerel instr17+275
	DD	imagerel $unwind$instr17
$pdata$instr18 DD imagerel instr18
	DD	imagerel instr18+1874
	DD	imagerel $unwind$instr18
$pdata$instr20 DD imagerel instr20
	DD	imagerel instr20+398
	DD	imagerel $unwind$instr20
$pdata$instr21 DD imagerel instr21
	DD	imagerel instr21+1464
	DD	imagerel $unwind$instr21
$pdata$instr22 DD imagerel instr22
	DD	imagerel instr22+316
	DD	imagerel $unwind$instr22
$pdata$instr23 DD imagerel instr23
	DD	imagerel instr23+562
	DD	imagerel $unwind$instr23
$pdata$instr25 DD imagerel instr25
	DD	imagerel instr25+104
	DD	imagerel $unwind$instr25
$pdata$instr26 DD imagerel instr26
	DD	imagerel instr26+145
	DD	imagerel $unwind$instr26
$pdata$instr27 DD imagerel instr27
	DD	imagerel instr27+104
	DD	imagerel $unwind$instr27
$pdata$instr28 DD imagerel instr28
	DD	imagerel instr28+104
	DD	imagerel $unwind$instr28
$pdata$instr31 DD imagerel instr31
	DD	imagerel instr31+104
	DD	imagerel $unwind$instr31
$pdata$instr32 DD imagerel instr32
	DD	imagerel instr32+104
	DD	imagerel $unwind$instr32
$pdata$instr34 DD imagerel instr34
	DD	imagerel instr34+3022
	DD	imagerel $unwind$instr34
$pdata$instr35 DD imagerel instr35
	DD	imagerel instr35+104
	DD	imagerel $unwind$instr35
$pdata$instr37 DD imagerel instr37
	DD	imagerel instr37+1095
	DD	imagerel $unwind$instr37
$pdata$instr40 DD imagerel instr40
	DD	imagerel instr40+104
	DD	imagerel $unwind$instr40
$pdata$instr41 DD imagerel instr41
	DD	imagerel instr41+439
	DD	imagerel $unwind$instr41
$pdata$instr42 DD imagerel instr42
	DD	imagerel instr42+2284
	DD	imagerel $unwind$instr42
$pdata$instr44 DD imagerel instr44
	DD	imagerel instr44+104
	DD	imagerel $unwind$instr44
$pdata$instr45 DD imagerel instr45
	DD	imagerel instr45+2981
	DD	imagerel $unwind$instr45
$pdata$instr48 DD imagerel instr48
	DD	imagerel instr48+234
	DD	imagerel $unwind$instr48
$pdata$instr49 DD imagerel instr49
	DD	imagerel instr49+562
	DD	imagerel $unwind$instr49
$pdata$instr50 DD imagerel instr50
	DD	imagerel instr50+104
	DD	imagerel $unwind$instr50
$pdata$instr53 DD imagerel instr53
	DD	imagerel instr53+439
	DD	imagerel $unwind$instr53
$pdata$instr57 DD imagerel instr57
	DD	imagerel instr57+104
	DD	imagerel $unwind$instr57
$pdata$instr58 DD imagerel instr58
	DD	imagerel instr58+480
	DD	imagerel $unwind$instr58
$pdata$instr61 DD imagerel instr61
	DD	imagerel instr61+644
	DD	imagerel $unwind$instr61
$pdata$instr66 DD imagerel instr66
	DD	imagerel instr66+104
	DD	imagerel $unwind$instr66
$pdata$instr67 DD imagerel instr67
	DD	imagerel instr67+398
	DD	imagerel $unwind$instr67
$pdata$instr68 DD imagerel instr68
	DD	imagerel instr68+145
	DD	imagerel $unwind$instr68
$pdata$instr73 DD imagerel instr73
	DD	imagerel instr73+275
	DD	imagerel $unwind$instr73
$pdata$instr74 DD imagerel instr74
	DD	imagerel instr74+104
	DD	imagerel $unwind$instr74
$pdata$instr76 DD imagerel instr76
	DD	imagerel instr76+104
	DD	imagerel $unwind$instr76
$pdata$instr77 DD imagerel instr77
	DD	imagerel instr77+234
	DD	imagerel $unwind$instr77
$pdata$instr78 DD imagerel instr78
	DD	imagerel instr78+104
	DD	imagerel $unwind$instr78
$pdata$instr80 DD imagerel instr80
	DD	imagerel instr80+234
	DD	imagerel $unwind$instr80
$pdata$instr129 DD imagerel instr129
	DD	imagerel instr129+5769
	DD	imagerel $unwind$instr129
$pdata$instr133 DD imagerel instr133
	DD	imagerel instr133+234
	DD	imagerel $unwind$instr133
$pdata$instr134 DD imagerel instr134
	DD	imagerel instr134+972
	DD	imagerel $unwind$instr134
$pdata$instr142 DD imagerel instr142
	DD	imagerel instr142+104
	DD	imagerel $unwind$instr142
$pdata$instr144 DD imagerel instr144
	DD	imagerel instr144+104
	DD	imagerel $unwind$instr144
$pdata$instr145 DD imagerel instr145
	DD	imagerel instr145+104
	DD	imagerel $unwind$instr145
$pdata$instr146 DD imagerel instr146
	DD	imagerel instr146+104
	DD	imagerel $unwind$instr146
$pdata$instr148 DD imagerel instr148
	DD	imagerel instr148+439
	DD	imagerel $unwind$instr148
$pdata$instr150 DD imagerel instr150
	DD	imagerel instr150+104
	DD	imagerel $unwind$instr150
$pdata$instr151 DD imagerel instr151
	DD	imagerel instr151+104
	DD	imagerel $unwind$instr151
$pdata$instr155 DD imagerel instr155
	DD	imagerel instr155+104
	DD	imagerel $unwind$instr155
$pdata$instr165 DD imagerel instr165
	DD	imagerel instr165+316
	DD	imagerel $unwind$instr165
$pdata$instr192 DD imagerel instr192
	DD	imagerel instr192+398
	DD	imagerel $unwind$instr192
$pdata$instr193 DD imagerel instr193
	DD	imagerel instr193+189
	DD	imagerel $unwind$instr193
$pdata$instr194 DD imagerel instr194
	DD	imagerel instr194+104
	DD	imagerel $unwind$instr194
$pdata$instr196 DD imagerel instr196
	DD	imagerel instr196+104
	DD	imagerel $unwind$instr196
$pdata$hercmvcin DD imagerel hercmvcin
	DD	imagerel hercmvcin+104
	DD	imagerel $unwind$hercmvcin
$pdata$hercsvs DD imagerel hercsvs
	DD	imagerel hercsvs+104
	DD	imagerel $unwind$hercsvs
$pdata$herc37X DD imagerel herc37X
	DD	imagerel herc37X+6589
	DD	imagerel $unwind$herc37X
$pdata$herctcp DD imagerel herctcp
	DD	imagerel herctcp+104
	DD	imagerel $unwind$herctcp
$pdata$hercessa DD imagerel hercessa
	DD	imagerel hercessa+104
	DD	imagerel $unwind$hercessa
$pdata$get_factab_by_bitno DD imagerel get_factab_by_bitno
	DD	imagerel get_factab_by_bitno+117
	DD	imagerel $unwind$get_factab_by_bitno
$pdata$get_factab_by_name DD imagerel get_factab_by_name
	DD	imagerel get_factab_by_name+107
	DD	imagerel $unwind$get_factab_by_name
$pdata$get_facname_by_bitno DD imagerel get_facname_by_bitno
	DD	imagerel get_facname_by_bitno+79
	DD	imagerel $unwind$get_facname_by_bitno
$pdata$sort_ftpp_by_bit_number DD imagerel sort_ftpp_by_bit_number
	DD	imagerel sort_ftpp_by_bit_number+116
	DD	imagerel $unwind$sort_ftpp_by_bit_number
$pdata$sort_ftpp_by_long_name DD imagerel sort_ftpp_by_long_name
	DD	imagerel sort_ftpp_by_long_name+116
	DD	imagerel $unwind$sort_ftpp_by_long_name
$pdata$facility_query_all DD imagerel facility_query_all
	DD	imagerel facility_query_all+2081
	DD	imagerel $unwind$facility_query_all
$pdata$facility_query_raw DD imagerel facility_query_raw
	DD	imagerel facility_query_raw+1148
	DD	imagerel $unwind$facility_query_raw
$pdata$_hhc00890e DD imagerel _hhc00890e
	DD	imagerel _hhc00890e+204
	DD	imagerel $unwind$_hhc00890e
$pdata$ena_fac_ins DD imagerel ena_fac_ins
	DD	imagerel ena_fac_ins+144
	DD	imagerel $unwind$ena_fac_ins
$pdata$dis_fac_ins DD imagerel dis_fac_ins
	DD	imagerel dis_fac_ins+197
	DD	imagerel $unwind$dis_fac_ins
$pdata$enable_disable_herc37X DD imagerel enable_disable_herc37X
	DD	imagerel enable_disable_herc37X+590
	DD	imagerel $unwind$enable_disable_herc37X
$pdata$facility_cmd DD imagerel $LN19
	DD	imagerel $LN19+749
	DD	imagerel $unwind$facility_cmd
pdata	ENDS
_DATA	SEGMENT
	ORG $+3
$SG158966 DB	'C:\papa\MyGit\hyperion-zvector\hinlines.h:534', 00H
	ORG $+2
$SG158967 DB	'C:\papa\MyGit\hyperion-zvector\hinlines.h:538', 00H
	ORG $+2
factab	DQ	FLAT:mod000
	DQ	FLAT:instr0
	DQ	FLAT:$SG192546
	DQ	FLAT:$SG192547
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192548
	DQ	FLAT:$SG192549
	DD	01H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod002
	DQ	0000000000000000H
	DQ	FLAT:$SG192550
	DQ	FLAT:$SG192551
	DD	02H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod003
	DQ	FLAT:instr3
	DQ	FLAT:$SG192552
	DQ	FLAT:$SG192553
	DD	03H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod004
	DQ	0000000000000000H
	DQ	FLAT:$SG192554
	DQ	FLAT:$SG192555
	DD	04H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod005
	DQ	0000000000000000H
	DQ	FLAT:$SG192556
	DQ	FLAT:$SG192557
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr6
	DQ	FLAT:$SG192558
	DQ	FLAT:$SG192559
	DD	06H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod007
	DQ	FLAT:instr7
	DQ	FLAT:$SG192560
	DQ	FLAT:$SG192561
	DD	07H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod008
	DQ	FLAT:instr8
	DQ	FLAT:$SG192562
	DQ	FLAT:$SG192563
	DD	08H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192564
	DQ	FLAT:$SG192565
	DD	09H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod010
	DQ	0000000000000000H
	DQ	FLAT:$SG192566
	DQ	FLAT:$SG192567
	DD	0aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr11
	DQ	FLAT:$SG192568
	DQ	FLAT:$SG192569
	DD	0bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192570
	DQ	FLAT:$SG192571
	DD	0cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192572
	DQ	FLAT:$SG192573
	DD	0dH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod014
	DQ	0000000000000000H
	DQ	FLAT:$SG192574
	DQ	FLAT:$SG192575
	DD	0eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192576
	DQ	FLAT:$SG192577
	DD	0fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr16
	DQ	FLAT:$SG192578
	DQ	FLAT:$SG192579
	DD	010H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr17
	DQ	FLAT:$SG192580
	DQ	FLAT:$SG192581
	DD	011H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod018
	DQ	FLAT:instr18
	DQ	FLAT:$SG192582
	DQ	FLAT:$SG192583
	DD	012H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod019
	DQ	0000000000000000H
	DQ	FLAT:$SG192584
	DQ	FLAT:$SG192585
	DD	013H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr20
	DQ	FLAT:$SG192586
	DQ	FLAT:$SG192587
	DD	014H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr21
	DQ	FLAT:$SG192588
	DQ	FLAT:$SG192589
	DD	015H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr22
	DQ	FLAT:$SG192590
	DQ	FLAT:$SG192591
	DD	016H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr23
	DQ	FLAT:$SG192592
	DQ	FLAT:$SG192593
	DD	017H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192594
	DQ	FLAT:$SG192595
	DD	018H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod025
	DQ	FLAT:instr25
	DQ	FLAT:$SG192596
	DQ	FLAT:$SG192597
	DD	019H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr26
	DQ	FLAT:$SG192598
	DQ	FLAT:$SG192599
	DD	01aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr27
	DQ	FLAT:$SG192600
	DQ	FLAT:$SG192601
	DD	01bH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod028
	DQ	FLAT:instr28
	DQ	FLAT:$SG192602
	DQ	FLAT:$SG192603
	DD	01cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192604
	DQ	FLAT:$SG192605
	DD	01dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192606
	DQ	FLAT:$SG192607
	DD	01eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr31
	DQ	FLAT:$SG192608
	DQ	FLAT:$SG192609
	DD	01fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr32
	DQ	FLAT:$SG192610
	DQ	FLAT:$SG192611
	DD	020H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192612
	DQ	FLAT:$SG192613
	DD	021H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr34
	DQ	FLAT:$SG192614
	DQ	FLAT:$SG192615
	DD	022H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr35
	DQ	FLAT:$SG192616
	DQ	FLAT:$SG192617
	DD	023H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192618
	DQ	FLAT:$SG192619
	DD	024H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod037
	DQ	FLAT:instr37
	DQ	FLAT:$SG192620
	DQ	FLAT:$SG192621
	DD	025H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192622
	DQ	FLAT:$SG192623
	DD	026H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192624
	DQ	FLAT:$SG192625
	DD	027H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod040
	DQ	FLAT:instr40
	DQ	FLAT:$SG192626
	DQ	FLAT:$SG192627
	DD	028H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr41
	DQ	FLAT:$SG192628
	DQ	FLAT:$SG192629
	DD	029H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr41
	DQ	FLAT:$SG192630
	DQ	FLAT:$SG192631
	DD	029H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr41
	DQ	FLAT:$SG192632
	DQ	FLAT:$SG192633
	DD	029H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr41
	DQ	FLAT:$SG192634
	DQ	FLAT:$SG192635
	DD	029H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr41
	DQ	FLAT:$SG192636
	DQ	FLAT:$SG192637
	DD	029H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod042
	DQ	FLAT:instr42
	DQ	FLAT:$SG192638
	DQ	FLAT:$SG192639
	DD	02aH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod043
	DQ	0000000000000000H
	DQ	FLAT:$SG192640
	DQ	FLAT:$SG192641
	DD	02bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr44
	DQ	FLAT:$SG192642
	DQ	FLAT:$SG192643
	DD	02cH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod045
	DQ	FLAT:instr45
	DQ	FLAT:$SG192644
	DQ	FLAT:$SG192645
	DD	02dH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod045
	DQ	FLAT:instr45
	DQ	FLAT:$SG192646
	DQ	FLAT:$SG192647
	DD	02dH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod045
	DQ	FLAT:instr45
	DQ	FLAT:$SG192648
	DQ	FLAT:$SG192649
	DD	02dH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod045
	DQ	FLAT:instr45
	DQ	FLAT:$SG192650
	DQ	FLAT:$SG192651
	DD	02dH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod045
	DQ	FLAT:instr45
	DQ	FLAT:$SG192652
	DQ	FLAT:$SG192653
	DD	02dH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod045
	DQ	FLAT:instr45
	DQ	FLAT:$SG192654
	DQ	FLAT:$SG192655
	DD	02dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192656
	DQ	FLAT:$SG192657
	DD	02eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192658
	DQ	FLAT:$SG192659
	DD	02fH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod048
	DQ	FLAT:instr48
	DQ	FLAT:$SG192660
	DQ	FLAT:$SG192661
	DD	030H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod049
	DQ	FLAT:instr49
	DQ	FLAT:$SG192662
	DQ	FLAT:$SG192663
	DD	031H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod049
	DQ	FLAT:instr49
	DQ	FLAT:$SG192664
	DQ	FLAT:$SG192665
	DD	031H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod049
	DQ	FLAT:instr49
	DQ	FLAT:$SG192666
	DQ	FLAT:$SG192667
	DD	031H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod049
	DQ	FLAT:instr49
	DQ	FLAT:$SG192668
	DQ	FLAT:$SG192669
	DD	031H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod050
	DQ	FLAT:instr50
	DQ	FLAT:$SG192670
	DQ	FLAT:$SG192671
	DD	032H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod051
	DQ	0000000000000000H
	DQ	FLAT:$SG192672
	DQ	FLAT:$SG192673
	DD	033H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192674
	DQ	FLAT:$SG192675
	DD	034H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr53
	DQ	FLAT:$SG192676
	DQ	FLAT:$SG192677
	DD	035H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr53
	DQ	FLAT:$SG192678
	DQ	FLAT:$SG192679
	DD	035H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192680
	DQ	FLAT:$SG192681
	DD	036H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192682
	DQ	FLAT:$SG192683
	DD	037H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192684
	DQ	FLAT:$SG192685
	DD	038H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr57
	DQ	FLAT:$SG192686
	DQ	FLAT:$SG192687
	DD	039H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr58
	DQ	FLAT:$SG192688
	DQ	FLAT:$SG192689
	DD	03aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192690
	DQ	FLAT:$SG192691
	DD	03bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192692
	DQ	FLAT:$SG192693
	DD	03cH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod061
	DQ	FLAT:instr61
	DQ	FLAT:$SG192694
	DQ	FLAT:$SG192695
	DD	03dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192696
	DQ	FLAT:$SG192697
	DD	03eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192698
	DQ	FLAT:$SG192699
	DD	03fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192700
	DQ	FLAT:$SG192701
	DD	040H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192702
	DQ	FLAT:$SG192703
	DD	041H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod066
	DQ	FLAT:instr66
	DQ	FLAT:$SG192704
	DQ	FLAT:$SG192705
	DD	042H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod067
	DQ	FLAT:instr67
	DQ	FLAT:$SG192706
	DQ	FLAT:$SG192707
	DD	043H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod068
	DQ	FLAT:instr68
	DQ	FLAT:$SG192708
	DQ	FLAT:$SG192709
	DD	044H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192710
	DQ	FLAT:$SG192711
	DD	045H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192712
	DQ	FLAT:$SG192713
	DD	046H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192714
	DQ	FLAT:$SG192715
	DD	047H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192716
	DQ	FLAT:$SG192717
	DD	048H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod073
	DQ	FLAT:instr73
	DQ	FLAT:$SG192718
	DQ	FLAT:$SG192719
	DD	049H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr74
	DQ	FLAT:$SG192720
	DQ	FLAT:$SG192721
	DD	04aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192722
	DQ	FLAT:$SG192723
	DD	04bH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod076
	DQ	FLAT:instr76
	DQ	FLAT:$SG192724
	DQ	FLAT:$SG192725
	DD	04cH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod077
	DQ	FLAT:instr77
	DQ	FLAT:$SG192726
	DQ	FLAT:$SG192727
	DD	04dH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod078
	DQ	FLAT:instr78
	DQ	FLAT:$SG192728
	DQ	FLAT:$SG192729
	DD	04eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192730
	DQ	FLAT:$SG192731
	DD	04fH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod080
	DQ	FLAT:instr80
	DQ	FLAT:$SG192732
	DQ	FLAT:$SG192733
	DD	050H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod081
	DQ	0000000000000000H
	DQ	FLAT:$SG192734
	DQ	FLAT:$SG192735
	DD	051H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192736
	DQ	FLAT:$SG192737
	DD	052H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192738
	DQ	FLAT:$SG192739
	DD	053H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192740
	DQ	FLAT:$SG192741
	DD	054H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192742
	DQ	FLAT:$SG192743
	DD	055H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192744
	DQ	FLAT:$SG192745
	DD	056H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192746
	DQ	FLAT:$SG192747
	DD	057H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192748
	DQ	FLAT:$SG192749
	DD	058H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192750
	DQ	FLAT:$SG192751
	DD	059H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192752
	DQ	FLAT:$SG192753
	DD	05aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192754
	DQ	FLAT:$SG192755
	DD	05bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192756
	DQ	FLAT:$SG192757
	DD	05cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192758
	DQ	FLAT:$SG192759
	DD	05dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192760
	DQ	FLAT:$SG192761
	DD	05eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192762
	DQ	FLAT:$SG192763
	DD	05fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192764
	DQ	FLAT:$SG192765
	DD	060H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192766
	DQ	FLAT:$SG192767
	DD	061H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192768
	DQ	FLAT:$SG192769
	DD	062H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192770
	DQ	FLAT:$SG192771
	DD	063H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192772
	DQ	FLAT:$SG192773
	DD	064H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192774
	DQ	FLAT:$SG192775
	DD	065H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192776
	DQ	FLAT:$SG192777
	DD	066H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192778
	DQ	FLAT:$SG192779
	DD	067H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192780
	DQ	FLAT:$SG192781
	DD	068H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192782
	DQ	FLAT:$SG192783
	DD	069H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192784
	DQ	FLAT:$SG192785
	DD	06aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192786
	DQ	FLAT:$SG192787
	DD	06bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192788
	DQ	FLAT:$SG192789
	DD	06cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192790
	DQ	FLAT:$SG192791
	DD	06dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192792
	DQ	FLAT:$SG192793
	DD	06eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192794
	DQ	FLAT:$SG192795
	DD	06fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192796
	DQ	FLAT:$SG192797
	DD	070H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192798
	DQ	FLAT:$SG192799
	DD	071H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192800
	DQ	FLAT:$SG192801
	DD	072H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192802
	DQ	FLAT:$SG192803
	DD	073H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192804
	DQ	FLAT:$SG192805
	DD	074H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192806
	DQ	FLAT:$SG192807
	DD	075H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192808
	DQ	FLAT:$SG192809
	DD	076H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192810
	DQ	FLAT:$SG192811
	DD	077H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192812
	DQ	FLAT:$SG192813
	DD	078H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192814
	DQ	FLAT:$SG192815
	DD	079H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192816
	DQ	FLAT:$SG192817
	DD	07aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192818
	DQ	FLAT:$SG192819
	DD	07bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192820
	DQ	FLAT:$SG192821
	DD	07cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192822
	DQ	FLAT:$SG192823
	DD	07dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192824
	DQ	FLAT:$SG192825
	DD	07eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192826
	DQ	FLAT:$SG192827
	DD	07fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192828
	DQ	FLAT:$SG192829
	DD	080H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod129
	DQ	FLAT:instr129
	DQ	FLAT:$SG192830
	DQ	FLAT:$SG192831
	DD	081H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192832
	DQ	FLAT:$SG192833
	DD	082H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192834
	DQ	FLAT:$SG192835
	DD	083H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192836
	DQ	FLAT:$SG192837
	DD	083H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192838
	DQ	FLAT:$SG192839
	DD	084H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr133
	DQ	FLAT:$SG192840
	DQ	FLAT:$SG192841
	DD	085H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod134
	DQ	FLAT:instr134
	DQ	FLAT:$SG192842
	DQ	FLAT:$SG192843
	DD	086H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod135
	DQ	0000000000000000H
	DQ	FLAT:$SG192844
	DQ	FLAT:$SG192845
	DD	087H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192846
	DQ	FLAT:$SG192847
	DD	088H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192848
	DQ	FLAT:$SG192849
	DD	089H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192850
	DQ	FLAT:$SG192851
	DD	08aH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod139
	DQ	0000000000000000H
	DQ	FLAT:$SG192852
	DQ	FLAT:$SG192853
	DD	08bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192854
	DQ	FLAT:$SG192855
	DD	08cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192856
	DQ	FLAT:$SG192857
	DD	08dH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod142
	DQ	FLAT:instr142
	DQ	FLAT:$SG192858
	DQ	FLAT:$SG192859
	DD	08eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192860
	DQ	FLAT:$SG192861
	DD	08fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr144
	DQ	FLAT:$SG192862
	DQ	FLAT:$SG192863
	DD	090H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod145
	DQ	FLAT:instr145
	DQ	FLAT:$SG192864
	DQ	FLAT:$SG192865
	DD	091H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod146
	DQ	FLAT:instr146
	DQ	FLAT:$SG192866
	DQ	FLAT:$SG192867
	DD	092H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192868
	DQ	FLAT:$SG192869
	DD	093H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod148
	DQ	FLAT:instr148
	DQ	FLAT:$SG192870
	DQ	FLAT:$SG192871
	DD	094H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod149
	DQ	0000000000000000H
	DQ	FLAT:$SG192872
	DQ	FLAT:$SG192873
	DD	095H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr150
	DQ	FLAT:$SG192874
	DQ	FLAT:$SG192875
	DD	096H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr151
	DQ	FLAT:$SG192876
	DQ	FLAT:$SG192877
	DD	097H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod152
	DQ	0000000000000000H
	DQ	FLAT:$SG192878
	DQ	FLAT:$SG192879
	DD	098H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192880
	DQ	FLAT:$SG192881
	DD	099H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192882
	DQ	FLAT:$SG192883
	DD	09aH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod155
	DQ	FLAT:instr155
	DQ	FLAT:$SG192884
	DQ	FLAT:$SG192885
	DD	09bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192886
	DQ	FLAT:$SG192887
	DD	09cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192888
	DQ	FLAT:$SG192889
	DD	09dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192890
	DQ	FLAT:$SG192891
	DD	09eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192892
	DQ	FLAT:$SG192893
	DD	09fH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192894
	DQ	FLAT:$SG192895
	DD	0a0H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192896
	DQ	FLAT:$SG192897
	DD	0a1H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192898
	DQ	FLAT:$SG192899
	DD	0a2H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192900
	DQ	FLAT:$SG192901
	DD	0a3H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192902
	DQ	FLAT:$SG192903
	DD	0a4H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod165
	DQ	FLAT:instr165
	DQ	FLAT:$SG192904
	DQ	FLAT:$SG192905
	DD	0a5H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192906
	DQ	FLAT:$SG192907
	DD	0a6H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192908
	DQ	FLAT:$SG192909
	DD	0a7H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod168
	DQ	0000000000000000H
	DQ	FLAT:$SG192910
	DQ	FLAT:$SG192911
	DD	0a8H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod169
	DQ	0000000000000000H
	DQ	FLAT:$SG192912
	DQ	FLAT:$SG192913
	DD	0a9H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192914
	DQ	FLAT:$SG192915
	DD	0aaH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192916
	DQ	FLAT:$SG192917
	DD	0abH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192918
	DQ	FLAT:$SG192919
	DD	0acH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192920
	DQ	FLAT:$SG192921
	DD	0adH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192922
	DQ	FLAT:$SG192923
	DD	0aeH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192924
	DQ	FLAT:$SG192925
	DD	0afH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192926
	DQ	FLAT:$SG192927
	DD	0b0H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192928
	DQ	FLAT:$SG192929
	DD	0b1H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192930
	DQ	FLAT:$SG192931
	DD	0b2H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192932
	DQ	FLAT:$SG192933
	DD	0b3H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192934
	DQ	FLAT:$SG192935
	DD	0b4H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192936
	DQ	FLAT:$SG192937
	DD	0b5H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192938
	DQ	FLAT:$SG192939
	DD	0b6H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192940
	DQ	FLAT:$SG192941
	DD	0b7H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192942
	DQ	FLAT:$SG192943
	DD	0b8H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192944
	DQ	FLAT:$SG192945
	DD	0b9H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192946
	DQ	FLAT:$SG192947
	DD	0baH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192948
	DQ	FLAT:$SG192949
	DD	0bbH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192950
	DQ	FLAT:$SG192951
	DD	0bcH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192952
	DQ	FLAT:$SG192953
	DD	0bdH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192954
	DQ	FLAT:$SG192955
	DD	0beH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192956
	DQ	FLAT:$SG192957
	DD	0bfH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod192
	DQ	FLAT:instr192
	DQ	FLAT:$SG192958
	DQ	FLAT:$SG192959
	DD	0c0H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:instr193
	DQ	FLAT:$SG192960
	DQ	FLAT:$SG192961
	DD	0c1H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod194
	DQ	FLAT:instr194
	DQ	FLAT:$SG192962
	DQ	FLAT:$SG192963
	DD	0c2H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192964
	DQ	FLAT:$SG192965
	DD	0c3H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod196
	DQ	FLAT:instr196
	DQ	FLAT:$SG192966
	DQ	FLAT:$SG192967
	DD	0c4H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:mod197
	DQ	0000000000000000H
	DQ	FLAT:$SG192968
	DQ	FLAT:$SG192969
	DD	0c5H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192970
	DQ	FLAT:$SG192971
	DD	0c6H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192972
	DQ	FLAT:$SG192973
	DD	0c7H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192974
	DQ	FLAT:$SG192975
	DD	0c8H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:herc37X
	DQ	FLAT:$SG192976
	DQ	FLAT:$SG192977
	DD	0100H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192978
	DQ	FLAT:$SG192979
	DD	0101H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192980
	DQ	FLAT:$SG192981
	DD	0102H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192982
	DQ	FLAT:$SG192983
	DD	0103H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192984
	DQ	FLAT:$SG192985
	DD	0104H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:hercmvcin
	DQ	FLAT:$SG192986
	DQ	FLAT:$SG192987
	DD	0105H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192988
	DQ	FLAT:$SG192989
	DD	0106H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192990
	DQ	FLAT:$SG192991
	DD	0107H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192992
	DQ	FLAT:$SG192993
	DD	0108H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192994
	DQ	FLAT:$SG192995
	DD	0109H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192996
	DQ	FLAT:$SG192997
	DD	010aH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG192998
	DQ	FLAT:$SG192999
	DD	010bH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG193000
	DQ	FLAT:$SG193001
	DD	010cH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG193002
	DQ	FLAT:$SG193003
	DD	010dH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:hercsvs
	DQ	FLAT:$SG193004
	DQ	FLAT:$SG193005
	DD	010eH
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG193006
	DQ	FLAT:$SG193007
	DD	010fH
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:modtcp
	DQ	FLAT:herctcp
	DQ	FLAT:$SG193008
	DQ	FLAT:$SG193009
	DD	0110H
	DD	00H
	DD	00H
	DD	00H
	DQ	FLAT:modtcp
	DQ	0000000000000000H
	DQ	FLAT:$SG193010
	DQ	FLAT:$SG193011
	DD	0111H
	DD	00H
	DD	00H
	DD	00H
	DQ	0000000000000000H
	DQ	FLAT:hercessa
	DQ	FLAT:$SG193012
	DQ	FLAT:$SG193013
	DD	0112H
	DD	00H
	DD	00H
	DD	00H
arch_factab DQ	FLAT:s370_facs_tab
	DQ	FLAT:s390_facs_tab
	DQ	FLAT:z900_facs_tab
$SG193098 DB	'S', 00H
	ORG $+2
$SG193221 DB	'E', 00H
	ORG $+2
$SG193099 DB	'HHC00899%s %s facility %s fails consistency check', 0aH, 00H
	ORG $+1
$SG193251 DB	'W', 00H
	ORG $+2
$SG193100 DB	'init_facilities_lists', 00H
	ORG $+2
$SG193101 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193252 DB	'I', 00H
	ORG $+2
$SG193222 DB	'HHC00152%s Out of memory', 0aH, 00H
	ORG $+2
$SG193329 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG193333 DB	'I', 00H
	ORG $+2
$SG193223 DB	'facility_query_all', 00H
	ORG $+1
$SG193363 DB	'E', 00H
	ORG $+2
$SG193224 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193332 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG193370 DB	'ALL', 00H
$SG193225 DB	'HHC00891I', 0aH, 00H
	ORG $+1
$SG193380 DB	'RAW', 00H
$SG193226 DB	'facility_query_all', 00H
	ORG $+1
$SG193382 DB	'BIT', 00H
$SG193227 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193387 DB	'E', 00H
	ORG $+2
$SG193228 DB	'HHC00891I                             %s Facility Table', 0aH
	DB	00H
	ORG $+3
$SG193371 DB	'SHORT', 00H
	ORG $+2
$SG193392 DB	'E', 00H
	ORG $+2
$SG193229 DB	'facility_query_all', 00H
	ORG $+1
$SG193396 DB	'W', 00H
	ORG $+2
$SG193230 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193397 DB	'I', 00H
	ORG $+2
$SG193231 DB	'HHC00891I', 0aH, 00H
	ORG $+1
$SG193400 DB	'*', 00H
	ORG $+2
$SG193232 DB	'facility_query_all', 00H
	ORG $+1
$SG193424 DB	'E', 00H
	ORG $+2
$SG193233 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193235 DB	'facility_query_all', 00H
	ORG $+5
$SG193234 DB	'HHC00891I           SRDC* = Supported, Required, Default'
	DB	', Current, Modified.', 0aH, 00H
	ORG $+2
$SG193236 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193446 DB	'mod000', 00H
	ORG $+1
$SG196287 DB	'E', 00H
	ORG $+2
$SG193237 DB	'HHC00891I', 0aH, 00H
	ORG $+1
$SG196298 DB	'E', 00H
	ORG $+2
$SG193238 DB	'facility_query_all', 00H
	ORG $+1
$SG196303 DB	'E', 00H
	ORG $+2
$SG193239 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193240 DB	'HHC00891I Bit By Bi SRDC* Facility                    De'
	DB	'scription', 0aH, 00H
	ORG $+1
$SG196309 DB	'E', 00H
	ORG $+2
$SG193241 DB	'facility_query_all', 00H
	ORG $+1
$SG196316 DB	'E', 00H
	ORG $+2
$SG193242 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193243 DB	'HHC00891I --- -- -- ----- --------------------------- --'
	DB	'-------------------------------------------------------', 0aH
	DB	00H
	ORG $+3
$SG193468 DB	'mod002', 00H
	ORG $+1
$SG196323 DB	'BIT', 00H
$SG193244 DB	'facility_query_all', 00H
	ORG $+1
$SG196327 DB	'E', 00H
	ORG $+2
$SG193245 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193490 DB	'mod003', 00H
	ORG $+1
$SG196332 DB	'E', 00H
	ORG $+2
$SG193246 DB	'HHC00891I', 0aH, 00H
	ORG $+1
$SG196345 DB	'E', 00H
	ORG $+2
$SG193247 DB	'facility_query_all', 00H
	ORG $+1
$SG196354 DB	'W', 00H
	ORG $+2
$SG193248 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193493 DB	'mod003', 00H
	ORG $+1
$SG196355 DB	'I', 00H
	ORG $+2
$SG193253 DB	'HHC00891%s %3d %02X %02X %c%c%c%c%c %-27s%c%s', 0aH, 00H
	ORG $+1
$SG193254 DB	'facility_query_all', 00H
	ORG $+1
$SG196358 DB	'*', 00H
	ORG $+2
$SG193255 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193516 DB	'mod004', 00H
	ORG $+1
$SG196381 DB	'E', 00H
	ORG $+2
$SG193256 DB	'HHC00891I', 0aH, 00H
	ORG $+1
$SG196392 DB	'E', 00H
	ORG $+2
$SG193257 DB	'facility_query_all', 00H
	ORG $+1
$SG196398 DB	'E', 00H
	ORG $+2
$SG193258 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193260 DB	'facility_query_all', 00H
	ORG $+5
$SG193259 DB	'HHC00891I           SRDC* = Supported, Required, Default'
	DB	', Current, Modified.', 0aH, 00H
	ORG $+2
$SG193261 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193519 DB	'mod004', 00H
	ORG $+1
$SG196402 DB	'E', 00H
	ORG $+2
$SG193262 DB	'HHC00891I', 0aH, 00H
	ORG $+5
$SG193263 DB	'facility_query_all', 00H
	ORG $+5
$SG193264 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193328 DB	'%02X%02X%02X%02X %02X%02X%02X%02X ', 00H
	ORG $+5
$SG193330 DB	', HERC: ', 00H
	ORG $+7
$SG193331 DB	'%02X%02X%02X%02X %02X%02X%02X%02X ', 00H
	ORG $+5
$SG193334 DB	'HHC00894%s %s facility list: %s', 0aH, 00H
	ORG $+7
$SG193335 DB	'facility_query_raw', 00H
	ORG $+5
$SG193336 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193364 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+6
$SG193365 DB	'facility_query', 00H
	ORG $+1
$SG193366 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193372 DB	'LONG', 00H
	ORG $+7
$SG193373 DB	'ENABLED', 00H
$SG193374 DB	'DISABLED', 00H
	ORG $+7
$SG193375 DB	'ENABLED', 00H
$SG193376 DB	'DISABLED', 00H
	ORG $+3
$SG193377 DB	'LONG', 00H
	ORG $+3
$SG193378 DB	'LONG', 00H
	ORG $+3
$SG193385 DB	'%d%c', 00H
	ORG $+7
$SG193388 DB	'HHC00892%s Facility( %s ) does not exist for %s', 0aH, 00H
	ORG $+7
$SG193389 DB	'facility_query', 00H
	ORG $+1
$SG193390 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193393 DB	'HHC00893%s Facility( %s ) not supported for %s', 0aH, 00H
$SG193394 DB	'facility_query', 00H
	ORG $+1
$SG193395 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193398 DB	'Enabled', 00H
$SG193399 DB	'Disabled', 00H
	ORG $+7
$SG193402 DB	'HHC00898%s Facility( %s ) %s%s for %s', 0aH, 00H
	ORG $+1
$SG193403 DB	'facility_query', 00H
	ORG $+1
$SG193404 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193425 DB	'HHC00890%s Cannot %s facility %s without first %s facili'
	DB	'ty %s', 0aH, 00H
	ORG $+1
$SG193447 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193469 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193491 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193494 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193517 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG193520 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193541 DB	'mod005', 00H
	ORG $+5
$SG193542 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193544 DB	'mod005', 00H
	ORG $+5
$SG193545 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193566 DB	'mod007', 00H
	ORG $+5
$SG193567 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193588 DB	'mod008', 00H
	ORG $+5
$SG193589 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193610 DB	'mod010', 00H
	ORG $+5
$SG193611 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193633 DB	'mod014', 00H
	ORG $+5
$SG193634 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193636 DB	'mod014', 00H
	ORG $+5
$SG193637 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193658 DB	'mod018', 00H
	ORG $+5
$SG193659 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193680 DB	'mod019', 00H
	ORG $+5
$SG193681 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193702 DB	'mod025', 00H
	ORG $+5
$SG193703 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193724 DB	'mod028', 00H
	ORG $+5
$SG193725 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193746 DB	'mod037', 00H
	ORG $+5
$SG193747 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193768 DB	'mod040', 00H
	ORG $+5
$SG193769 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193790 DB	'mod042', 00H
	ORG $+5
$SG193791 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193793 DB	'mod042', 00H
	ORG $+5
$SG193794 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193815 DB	'mod043', 00H
	ORG $+5
$SG193816 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193837 DB	'mod045', 00H
	ORG $+5
$SG193838 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193859 DB	'mod048', 00H
	ORG $+5
$SG193860 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193881 DB	'mod049', 00H
	ORG $+5
$SG193882 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193884 DB	'mod049', 00H
	ORG $+5
$SG193885 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193906 DB	'mod050', 00H
	ORG $+5
$SG193907 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193928 DB	'mod051', 00H
	ORG $+5
$SG193929 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193950 DB	'mod061', 00H
	ORG $+5
$SG193951 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193972 DB	'mod066', 00H
	ORG $+5
$SG193973 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193994 DB	'mod067', 00H
	ORG $+5
$SG193995 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG193997 DB	'mod067', 00H
	ORG $+5
$SG193998 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194019 DB	'mod068', 00H
	ORG $+5
$SG194020 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194022 DB	'mod068', 00H
	ORG $+5
$SG194023 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194045 DB	'mod073', 00H
	ORG $+5
$SG194046 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194048 DB	'mod073', 00H
	ORG $+5
$SG194049 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194070 DB	'mod076', 00H
	ORG $+5
$SG194071 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194073 DB	'mod076', 00H
	ORG $+5
$SG194074 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194095 DB	'mod077', 00H
	ORG $+5
$SG194096 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194117 DB	'mod078', 00H
	ORG $+5
$SG194118 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194139 DB	'mod080', 00H
	ORG $+5
$SG194140 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194161 DB	'mod081', 00H
	ORG $+5
$SG194162 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194183 DB	'mod129', 00H
	ORG $+5
$SG194184 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194186 DB	'mod129', 00H
	ORG $+5
$SG194187 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194189 DB	'mod129', 00H
	ORG $+5
$SG194190 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194192 DB	'mod129', 00H
	ORG $+5
$SG194193 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194195 DB	'mod129', 00H
	ORG $+5
$SG194196 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194198 DB	'mod129', 00H
	ORG $+5
$SG194199 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194221 DB	'mod134', 00H
	ORG $+5
$SG194222 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194224 DB	'mod134', 00H
	ORG $+5
$SG194225 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194227 DB	'mod134', 00H
	ORG $+5
$SG194228 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194250 DB	'mod135', 00H
	ORG $+5
$SG194251 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194253 DB	'mod135', 00H
	ORG $+5
$SG194254 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194275 DB	'mod139', 00H
	ORG $+5
$SG194276 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194278 DB	'mod139', 00H
	ORG $+5
$SG194279 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194300 DB	'mod142', 00H
	ORG $+5
$SG194301 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194322 DB	'mod145', 00H
	ORG $+5
$SG194323 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194344 DB	'mod146', 00H
	ORG $+5
$SG194345 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194366 DB	'mod148', 00H
	ORG $+5
$SG194367 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194369 DB	'mod148', 00H
	ORG $+5
$SG194370 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194391 DB	'mod149', 00H
	ORG $+5
$SG194392 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194414 DB	'mod152', 00H
	ORG $+5
$SG194415 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194417 DB	'mod152', 00H
	ORG $+5
$SG194418 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194420 DB	'mod152', 00H
	ORG $+5
$SG194421 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194442 DB	'mod155', 00H
	ORG $+5
$SG194443 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194445 DB	'mod155', 00H
	ORG $+5
$SG194446 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194467 DB	'mod165', 00H
	ORG $+5
$SG194468 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194489 DB	'mod168', 00H
	ORG $+5
$SG194490 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194511 DB	'mod169', 00H
	ORG $+5
$SG194512 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194514 DB	'mod169', 00H
	ORG $+5
$SG194515 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194517 DB	'mod169', 00H
	ORG $+5
$SG194518 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194520 DB	'mod169', 00H
	ORG $+5
$SG194521 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194523 DB	'mod169', 00H
	ORG $+5
$SG194524 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194545 DB	'mod192', 00H
	ORG $+5
$SG194546 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194548 DB	'mod192', 00H
	ORG $+5
$SG194549 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194551 DB	'mod192', 00H
	ORG $+5
$SG194552 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194573 DB	'mod194', 00H
	ORG $+5
$SG194574 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194595 DB	'mod196', 00H
	ORG $+5
$SG194596 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194617 DB	'mod197', 00H
	ORG $+5
$SG194618 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194689 DB	'modtcp', 00H
	ORG $+5
$SG194690 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG194693 DB	'modtcp', 00H
	ORG $+5
$SG194694 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG194732 DB	'ALCR    B998  ADD LOGICAL WITH CARRY (32)', 00H
	ORG $+6
$SG194733 DB	'ALC     E398  ADD LOGICAL WITH CARRY (32)', 00H
	ORG $+6
$SG194734 DB	'BRASL   C005  BRANCH RELATIVE AND SAVE LONG', 00H
	ORG $+4
$SG194735 DB	'BRCL    C004  BRANCH RELATIVE ON CONDITION LONG', 00H
$SG194736 DB	'DLR     B997  DIVIDE LOGICAL (32 <- 64)', 00H
$SG194737 DB	'DL      E397  DIVIDE LOGICAL (32 <- 64)', 00H
$SG194738 DB	'EPSW    B98D  EXTRACT PSW', 00H
	ORG $+6
$SG194739 DB	'LARL    C000  LOAD ADDRESS RELATIVE LONG', 00H
	ORG $+7
$SG194740 DB	'LRVR    B91F  LOAD REVERSED (32)', 00H
	ORG $+7
$SG194741 DB	'LRV     E31E  LOAD REVERSED (32)', 00H
	ORG $+7
$SG194742 DB	'LRVH    E31F  LOAD REVERSED (16)', 00H
	ORG $+7
$SG194743 DB	'MLR     B996  MULTIPLY LOGICAL (64 <- 32)', 00H
	ORG $+6
$SG194744 DB	'ML      E396  MULTIPLY LOGICAL (64 <- 32)', 00H
	ORG $+6
$SG194745 DB	'RLL     EB1D  ROTATE LEFT SINGLE LOGICAL (32)', 00H
	ORG $+2
$SG194746 DB	'SAM24   010C  SET ADDRESSING MODE (24)', 00H
	ORG $+1
$SG194747 DB	'SAM31   010D  SET ADDRESSING MODE (31)', 00H
	ORG $+1
$SG194748 DB	'STFL    B2B1  STORE FACILITY LIST', 00H
	ORG $+6
$SG194749 DB	'STRV    E33E  STORE REVERSED (32)', 00H
	ORG $+6
$SG194750 DB	'STRVH   E33F  STORE REVERSED (16)', 00H
	ORG $+6
$SG194751 DB	'SLBR    B999  SUBTRACT LOGICAL WITH BORROW (32)', 00H
$SG194752 DB	'SLB     E399  SUBTRACT LOGICAL WITH BORROW (32)', 00H
$SG194753 DB	'TAM     010B  TEST ADDRESSING MODE', 00H
	ORG $+5
$SG194764 DB	'CSPG    B98A  COMPARE AND SWAP AND PURGE (64)', 00H
	ORG $+2
$SG194765 DB	'IDTE    B98E  INVALIDATE DAT TABLE ENTRY', 00H
	ORG $+7
$SG194776 DB	'EPAIR   B99A  EXTRACT PRIMARY ASN AND INSTANCE', 00H
	ORG $+1
$SG194777 DB	'ESAIR   B99B  EXTRACT SECONDARY ASN AND INSTANCE', 00H
	ORG $+7
$SG194778 DB	'PTI     B99E  PROGRAM TRANSFER WITH INSTANCE', 00H
	ORG $+3
$SG194779 DB	'SSAIR   B99F  SET SECONDARY ASN WITH INSTANCE', 00H
	ORG $+2
$SG194790 DB	'STFLE   B2B0  STORE FACILITY LIST EXTENDED', 00H
	ORG $+5
$SG194801 DB	'PFMF    B9AF  PERFORM FRAME MANAGEMENT FUNCTION', 00H
$SG194812 DB	'PTF     B9A2  PERFORM TOPOLOGY FUNCTION', 00H
$SG194823 DB	'CLCLU   EB8F  COMPARE LOGICAL LONG UNICODE', 00H
	ORG $+5
$SG194824 DB	'MVCLU   EB8E  MOVE LONG UNICODE', 00H
$SG194825 DB	'PKA     E9    PACK ASCII', 00H
	ORG $+7
$SG194826 DB	'PKU     E1    PACK UNICODE', 00H
	ORG $+5
$SG194827 DB	'TP      EBC0  TEST DECIMAL', 00H
	ORG $+5
$SG194828 DB	'TROO    B993  TRANSLATE ONE TO ONE', 00H
	ORG $+5
$SG194829 DB	'TROT    B992  TRANSLATE ONE TO TWO', 00H
	ORG $+5
$SG194830 DB	'TRTO    B991  TRANSLATE TWO TO ONE', 00H
	ORG $+5
$SG194831 DB	'TRTT    B990  TRANSLATE TWO TO TWO', 00H
	ORG $+5
$SG194832 DB	'UNPKA   EA    UNPACK ASCII', 00H
	ORG $+5
$SG194833 DB	'UNPKU   E2    UNPACK UNICODE', 00H
	ORG $+3
$SG194844 DB	'KM      B92E  CIPHER MESSAGE', 00H
	ORG $+3
$SG194845 DB	'KMC     B92F  CIPHER MESSAGE WITH CHAINING', 00H
	ORG $+5
$SG194846 DB	'KIMD    B93E  COMPUTE INTERMEDIATE MESSAGE DIGEST', 00H
	ORG $+6
$SG194847 DB	'KLMD    B93F  COMPUTE LAST MESSAGE DIGEST', 00H
	ORG $+6
$SG194848 DB	'KMAC    B91E  COMPUTE MESSAGE AUTHENTICATION CODE', 00H
	ORG $+6
$SG194859 DB	'AY      E35A  ADD (32)', 00H
	ORG $+1
$SG194860 DB	'AHY     E37A  ADD HALFWORD (32 <- 16)', 00H
	ORG $+2
$SG194861 DB	'ALY     E35E  ADD LOGICAL (32)', 00H
	ORG $+1
$SG194862 DB	'NY      E354  AND (32)', 00H
	ORG $+1
$SG194863 DB	'NIY     EB54  AND (immediate)', 00H
	ORG $+2
$SG194864 DB	'CY      E359  COMPARE (32)', 00H
	ORG $+5
$SG194865 DB	'CSY     EB14  COMPARE AND SWAP (32)', 00H
	ORG $+4
$SG194866 DB	'CDSY    EB31  COMPARE DOUBLE AND SWAP (32)', 00H
	ORG $+5
$SG194867 DB	'CHY     E379  COMPARE HALFWORD (32 <- 16)', 00H
	ORG $+6
$SG194868 DB	'CLY     E355  COMPARE LOGICAL (32)', 00H
	ORG $+5
$SG194869 DB	'CLIY    EB55  COMPARE LOGICAL (immediate)', 00H
	ORG $+6
$SG194870 DB	'CLMY    EB21  COMPARE LOGICAL CHAR. UNDER MASK (low)', 00H
	ORG $+3
$SG194871 DB	'CVBY    E306  CONVERT TO BINARY (32)', 00H
	ORG $+3
$SG194872 DB	'CVDY    E326  CONVERT TO DECIMAL (32)', 00H
	ORG $+2
$SG194873 DB	'XY      E357  EXCLUSIVE OR (32)', 00H
$SG194874 DB	'XIY     EB57  EXCLUSIVE OR (immediate)', 00H
	ORG $+1
$SG194875 DB	'ICY     E373  INSERT CHARACTER', 00H
	ORG $+1
$SG194876 DB	'ICMY    EB81  INSERT CHARACTERS UNDER MASK (low)', 00H
	ORG $+7
$SG194877 DB	'LY      E358  LOAD (32)', 00H
$SG194878 DB	'LEY     ED64  LOAD (short)', 00H
	ORG $+5
$SG194879 DB	'LDY     ED65  LOAD (long)', 00H
	ORG $+6
$SG194880 DB	'LAMY    EB9A  LOAD ACCESS MULTIPLE', 00H
	ORG $+5
$SG194881 DB	'LAY     E371  LOAD ADDRESS', 00H
	ORG $+5
$SG194882 DB	'LB      E376  LOAD BYTE (32 <- 8)', 00H
	ORG $+6
$SG194883 DB	'LGB     E377  LOAD BYTE (64 <- 8)', 00H
	ORG $+6
$SG194884 DB	'LHY     E378  LOAD HALFWORD (32 <- 16)', 00H
	ORG $+1
$SG194885 DB	'LMY     EB98  LOAD MULTIPLE (32)', 00H
	ORG $+7
$SG194886 DB	'LRAY    E313  LOAD REAL ADDRESS (32)', 00H
	ORG $+3
$SG194887 DB	'MVIY    EB52  MOVE (immediate)', 00H
	ORG $+1
$SG194888 DB	'MSY     E351  MULTIPLY SINGLE (32)', 00H
	ORG $+5
$SG194889 DB	'OY      E356  OR (32)', 00H
	ORG $+2
$SG194890 DB	'OIY     EB56  OR (immediate)', 00H
	ORG $+3
$SG194891 DB	'STY     E350  STORE (32)', 00H
	ORG $+7
$SG194892 DB	'STEY    ED66  STORE (short)', 00H
	ORG $+4
$SG194893 DB	'STDY    ED67  STORE (long)', 00H
	ORG $+5
$SG194894 DB	'STAMY   EB9B  STORE ACCESS MULTIPLE', 00H
	ORG $+4
$SG194895 DB	'STCY    E372  STORE CHARACTER', 00H
	ORG $+2
$SG194896 DB	'STCMY   EB2D  STORE CHARACTERS UNDER MASK (low)', 00H
$SG194897 DB	'STHY    E370  STORE HALFWORD (16)', 00H
	ORG $+6
$SG194898 DB	'STMY    EB90  STORE MULTIPLE (32)', 00H
	ORG $+6
$SG194899 DB	'SY      E35B  SUBTRACT (32)', 00H
	ORG $+4
$SG194900 DB	'SHY     E37B  SUBTRACT HALFWORD (32 <- 16)', 00H
	ORG $+5
$SG194901 DB	'SLY     E35F  SUBTRACT LOGICAL (32)', 00H
	ORG $+4
$SG194902 DB	'TMY     EB51  TEST UNDER MASK', 00H
	ORG $+2
$SG194913 DB	'MAER    B32E  MULTIPLY AND ADD (short HFP)', 00H
	ORG $+5
$SG194914 DB	'MADR    B33E  MULTIPLY AND ADD (long HFP)', 00H
	ORG $+6
$SG194915 DB	'MAE     ED2E  MULTIPLY AND ADD (short HFP)', 00H
	ORG $+5
$SG194916 DB	'MAD     ED3E  MULTIPLY AND ADD (long HFP)', 00H
	ORG $+6
$SG194917 DB	'MSER    B32F  MULTIPLY AND SUBTRACT (short HFP)', 00H
$SG194918 DB	'MSDR    B33F  MULTIPLY AND SUBTRACT (long HFP)', 00H
	ORG $+1
$SG194919 DB	'MSE     ED2F  MULTIPLY AND SUBTRACT (short HFP)', 00H
$SG194920 DB	'MSD     ED3F  MULTIPLY AND SUBTRACT (long HFP)', 00H
	ORG $+1
$SG194931 DB	'AGFI    C208  ADD IMMEDIATE (64 <- 32)', 00H
	ORG $+1
$SG194932 DB	'AFI     C209  ADD IMMEDIATE (32)', 00H
	ORG $+7
$SG194933 DB	'ALGFI   C20A  ADD LOGICAL IMMEDIATE (64 <- 32)', 00H
	ORG $+1
$SG194934 DB	'ALFI    C20B  ADD LOGICAL IMMEDIATE (32)', 00H
	ORG $+7
$SG194935 DB	'NIHF    C00A  AND IMMEDIATE (high)', 00H
	ORG $+5
$SG194936 DB	'NILF    C00B  AND IMMEDIATE (low)', 00H
	ORG $+6
$SG194937 DB	'CGFI    C20C  COMPARE IMMEDIATE (64 <- 32)', 00H
	ORG $+5
$SG194938 DB	'CFI     C20D  COMPARE IMMEDIATE (32)', 00H
	ORG $+3
$SG194939 DB	'CLGFI   C20E  COMPARE LOGICAL IMMEDIATE (64 <- 32)', 00H
	ORG $+5
$SG194940 DB	'CLFI    C20F  COMPARE LOGICAL IMMEDIATE (32)', 00H
	ORG $+3
$SG194941 DB	'XIHF    C006  EXCLUSIVE OR IMMEDIATE (high)', 00H
	ORG $+4
$SG194942 DB	'XILF    C007  EXCLUSIVE OR IMMEDIATE (low)', 00H
	ORG $+5
$SG194943 DB	'FLOGR   B983  FIND LEFTMOST ONE', 00H
$SG194944 DB	'IIHF    C008  INSERT IMMEDIATE (high)', 00H
	ORG $+2
$SG194945 DB	'IILF    C009  INSERT IMMEDIATE (low)', 00H
	ORG $+3
$SG194946 DB	'LTG     E302  LOAD AND TEST (64)', 00H
	ORG $+7
$SG194947 DB	'LT      E312  LOAD AND TEST (32)', 00H
	ORG $+7
$SG194948 DB	'LGBR    B906  LOAD BYTE (64 <- 8)', 00H
	ORG $+6
$SG194949 DB	'LBR     B926  LOAD BYTE (32 <- 8)', 00H
	ORG $+6
$SG194950 DB	'LGHR    B907  LOAD HALFWORD (64 <- 16)', 00H
	ORG $+1
$SG194951 DB	'LHR     B927  LOAD HALFWORD (32 <- 16)', 00H
	ORG $+1
$SG194952 DB	'LGFI    C001  LOAD IMMEDIATE (64 <- 32)', 00H
$SG194953 DB	'LLGCR   B984  LOAD LOGICAL CHARACTER (64 <- 8)', 00H
	ORG $+1
$SG194954 DB	'LLCR    B994  LOAD LOGICAL CHARACTER (32 <- 8)', 00H
	ORG $+1
$SG194955 DB	'LLC     E394  LOAD LOGICAL CHARACTER (32 <- 8)', 00H
	ORG $+1
$SG194956 DB	'LLGHR   B985  LOAD LOGICAL HALFWORD (64 <- 16)', 00H
	ORG $+1
$SG194957 DB	'LLHR    B995  LOAD LOGICAL HALFWORD (32 <- 16)', 00H
	ORG $+1
$SG194958 DB	'LLH     E395  LOAD LOGICAL HALFWORD (32 <- 16)', 00H
	ORG $+1
$SG194959 DB	'LLIHF   C00E  LOAD LOGICAL IMMEDIATE (high)', 00H
	ORG $+4
$SG194960 DB	'LLILF   C00F  LOAD LOGICAL IMMEDIATE (low)', 00H
	ORG $+5
$SG194961 DB	'OIHF    C00C  OR IMMEDIATE (high)', 00H
	ORG $+6
$SG194962 DB	'OILF    C00D  OR IMMEDIATE (low)', 00H
	ORG $+7
$SG194963 DB	'SLGFI   C204  SUBTRACT LOGICAL IMMEDIATE (64 <- 32)', 00H
	ORG $+4
$SG194964 DB	'SLFI    C205  SUBTRACT LOGICAL IMMEDIATE (32)', 00H
	ORG $+2
$SG194975 DB	'CU24    B9B1  CONVERT UTF-16 TO UTF-32', 00H
	ORG $+1
$SG194976 DB	'CU42    B9B3  CONVERT UTF-32 TO UTF-16', 00H
	ORG $+1
$SG194977 DB	'CU41    B9B2  CONVERT UTF-32 TO UTF-8', 00H
	ORG $+2
$SG194978 DB	'CU14    B9B0  CONVERT UTF-8 TO UTF-32', 00H
	ORG $+2
$SG194979 DB	'SRSTU   B9BE  SEARCH STRING UNICODE', 00H
	ORG $+4
$SG194980 DB	'TRTR    D0    TRANSLATE AND TEST REVERSE', 00H
	ORG $+7
$SG194991 DB	'MAYR    B33A  MULTIPLY & ADD UNNORMALIZED (long to ext. '
	DB	'HFP)', 00H
	ORG $+3
$SG194992 DB	'MAY     ED3A  MULTIPLY & ADD UNNORMALIZED (long to ext. '
	DB	'HFP)', 00H
	ORG $+3
$SG194993 DB	'MAYLR   B338  MULTIPLY AND ADD UNNRM. (long to ext. low '
	DB	'HFP)', 00H
	ORG $+3
$SG194994 DB	'MAYHR   B33C  MULTIPLY AND ADD UNNRM. (long to ext. high'
	DB	' HFP)', 00H
	ORG $+2
$SG194995 DB	'MAYL    ED38  MULTIPLY AND ADD UNNRM. (long to ext. low '
	DB	'HFP)', 00H
	ORG $+3
$SG194996 DB	'MAYH    ED3C  MULTIPLY AND ADD UNNRM. (long to ext. high'
	DB	' HFP)', 00H
	ORG $+2
$SG194997 DB	'MYLR    B339  MULTIPLY UNNORM. (long to ext. low HFP)', 00H
	ORG $+2
$SG194998 DB	'MYHR    B33D  MULTIPLY UNNORM. (long to ext. high HFP)', 00H
	ORG $+1
$SG194999 DB	'MYL     ED39  MULTIPLY UNNORM. (long to ext. low HFP)', 00H
	ORG $+2
$SG195000 DB	'MYH     ED3D  MULTIPLY UNNORM. (long to ext. high HFP)', 00H
	ORG $+1
$SG195001 DB	'MYR     B33B  MULTIPLY UNNORMALIZED (long to ext. HFP)', 00H
	ORG $+1
$SG195002 DB	'MY      ED3B  MULTIPLY UNNORMALIZED (long to ext. HFP)', 00H
	ORG $+1
$SG195013 DB	'STCKF   B27C  STORE CLOCK FAST', 00H
	ORG $+1
$SG195024 DB	'TRTE    B9BF  TRANSLATE AND TEST EXTENDED', 00H
	ORG $+6
$SG195025 DB	'TRTRE   B9BD  TRANSLATE AND TEST REVERSE EXTENDED', 00H
	ORG $+6
$SG195036 DB	'MVCOS   C800  MOVE WITH OPTIONAL SPECIFICATIONS', 00H
$SG195047 DB	'PTFF    0104  PERFORM TIMING FACILITY FUNCTION', 00H
	ORG $+1
$SG195058 DB	'ECTG    C801  EXTRACT CPU TIME', 00H
	ORG $+1
$SG195069 DB	'CSST    C802  COMPARE AND SWAP AND STORE', 00H
	ORG $+7
$SG195080 DB	'ASI     EB6A  ADD IMMEDIATE (32 <- 8)', 00H
	ORG $+2
$SG195081 DB	'AGSI    EB7A  ADD IMMEDIATE (64 <- 8)', 00H
	ORG $+2
$SG195082 DB	'ALSI    EB6E  ADD LOGICAL WITH SIGNED IMMEDIATE (32 <- 8'
	DB	')', 00H
	ORG $+6
$SG195083 DB	'ALGSI   EB7E  ADD LOGICAL WITH SIGNED IMMEDIATE (64 <- 8'
	DB	')', 00H
	ORG $+6
$SG195084 DB	'CGRB    ECE4  COMPARE AND BRANCH (64)', 00H
	ORG $+2
$SG195085 DB	'CRB     ECF6  COMPARE AND BRANCH (32)', 00H
	ORG $+2
$SG195086 DB	'CGRJ    EC64  COMPARE AND BRANCH RELATIVE (64)', 00H
	ORG $+1
$SG195087 DB	'CRJ     EC76  COMPARE AND BRANCH RELATIVE (32)', 00H
	ORG $+1
$SG195088 DB	'CGRT    B960  COMPARE AND TRAP (64)', 00H
	ORG $+4
$SG195089 DB	'CRT     B972  COMPARE AND TRAP (32)', 00H
	ORG $+4
$SG195090 DB	'CGH     E334  COMPARE HALFWORD (64 <- 16)', 00H
	ORG $+6
$SG195091 DB	'CHHSI   E554  COMPARE HALFWORD IMMEDIATE (16 <- 16)', 00H
	ORG $+4
$SG195092 DB	'CGHSI   E558  COMPARE HALFWORD IMMEDIATE (64 <- 16)', 00H
	ORG $+4
$SG195093 DB	'CHSI    E55C  COMPARE HALFWORD IMMEDIATE (32 <- 16)', 00H
	ORG $+4
$SG195094 DB	'CGHRL   C604  COMPARE HALFWORD RELATIVE LONG (64 <- 16)', 00H
$SG195095 DB	'CHRL    C605  COMPARE HALFWORD RELATIVE LONG (32 <- 16)', 00H
$SG195096 DB	'CGIB    ECFC  COMPARE IMMEDIATE AND BRANCH (64 <- 8)', 00H
	ORG $+3
$SG195097 DB	'CIB     ECFE  COMPARE IMMEDIATE AND BRANCH (32 <- 8)', 00H
	ORG $+3
$SG195098 DB	'CGIJ    EC7C  COMPARE IMMEDIATE AND BRANCH RELATIVE (64 '
	DB	'<- 8)', 00H
	ORG $+2
$SG195099 DB	'CIJ     EC7E  COMPARE IMMEDIATE AND BRANCH RELATIVE (32 '
	DB	'<- 8)', 00H
	ORG $+2
$SG195100 DB	'CGIT    EC70  COMPARE IMMEDIATE AND TRAP (64 <- 16)', 00H
	ORG $+4
$SG195101 DB	'CIT     EC72  COMPARE IMMEDIATE AND TRAP (32 <- 16)', 00H
	ORG $+4
$SG195102 DB	'CLGRB   ECE5  COMPARE LOGICAL AND BRANCH (64)', 00H
	ORG $+2
$SG195103 DB	'CLRB    ECF7  COMPARE LOGICAL AND BRANCH (32)', 00H
	ORG $+2
$SG195104 DB	'CLGRJ   EC65  COMPARE LOGICAL AND BRANCH RELATIVE (64)', 00H
	ORG $+1
$SG195105 DB	'CLRJ    EC77  COMPARE LOGICAL AND BRANCH RELATIVE (32)', 00H
	ORG $+1
$SG195106 DB	'CLGRT   B961  COMPARE LOGICAL AND TRAP (64)', 00H
	ORG $+4
$SG195107 DB	'CLRT    B973  COMPARE LOGICAL AND TRAP (32)', 00H
	ORG $+4
$SG195108 DB	'CLHHSI  E555  COMPARE LOGICAL IMMEDIATE (16 <- 16)', 00H
	ORG $+5
$SG195109 DB	'CLGHSI  E559  COMPARE LOGICAL IMMEDIATE (64 <- 16)', 00H
	ORG $+5
$SG195110 DB	'CLFHSI  E55D  COMPARE LOGICAL IMMEDIATE (32 <- 16)', 00H
	ORG $+5
$SG195111 DB	'CLGIB   ECFD  COMPARE LOGICAL IMMEDIATE AND BRANCH (64 <'
	DB	'- 8)', 00H
	ORG $+3
$SG195112 DB	'CLIB    ECFF  COMPARE LOGICAL IMMEDIATE AND BRANCH (32 <'
	DB	'- 8)', 00H
	ORG $+3
$SG195117 DB	'CLGHRL  C606  COMPARE LOGICAL RELATIVE LONG (64 <- 16)', 00H
	ORG $+1
$SG195113 DB	'CLGIJ   EC7D  COMPARE LOGICAL IMMEDIATE AND BRANCH RELAT'
	DB	'IVE (64 <- 8)', 00H
	ORG $+2
$SG195118 DB	'CLHRL   C607  COMPARE LOGICAL RELATIVE LONG (32 <- 16)', 00H
	ORG $+1
$SG195114 DB	'CLIJ    EC7F  COMPARE LOGICAL IMMEDIATE AND BRANCH RELAT'
	DB	'IVE (32 <- 8)', 00H
	ORG $+2
$SG195115 DB	'CLGIT   EC71  COMPARE LOGICAL IMMEDIATE AND TRAP (64 <- '
	DB	'16)', 00H
	ORG $+4
$SG195116 DB	'CLFIT   EC73  COMPARE LOGICAL IMMEDIATE AND TRAP (32 <- '
	DB	'16)', 00H
	ORG $+4
$SG195119 DB	'CLGRL   C60A  COMPARE LOGICAL RELATIVE LONG (64)', 00H
	ORG $+7
$SG195120 DB	'CLGFRL  C60E  COMPARE LOGICAL RELATIVE LONG (64 <- 32)', 00H
	ORG $+1
$SG195121 DB	'CLRL    C60F  COMPARE LOGICAL RELATIVE LONG (32)', 00H
	ORG $+7
$SG195122 DB	'CGRL    C608  COMPARE RELATIVE LONG (64)', 00H
	ORG $+7
$SG195123 DB	'CGFRL   C60C  COMPARE RELATIVE LONG (64 <- 32)', 00H
	ORG $+1
$SG195124 DB	'CRL     C60D  COMPARE RELATIVE LONG (32)', 00H
	ORG $+7
$SG195125 DB	'ECAG    EB4C  EXTRACT CPU ATTRIBUTE', 00H
	ORG $+4
$SG195126 DB	'LAEY    E375  LOAD ADDRESS EXTENDED', 00H
	ORG $+4
$SG195127 DB	'LTGF    E332  LOAD AND TEST (64 <- 32)', 00H
	ORG $+1
$SG195128 DB	'LGHRL   C404  LOAD HALFWORD RELATIVE LONG (64 <- 16)', 00H
	ORG $+3
$SG195129 DB	'LHRL    C405  LOAD HALFWORD RELATIVE LONG (32 <- 16)', 00H
	ORG $+3
$SG195130 DB	'LLHRL   C402  LOAD LOGICAL HALFWORD RELATIVE LONG (32 <-'
	DB	' 16)', 00H
	ORG $+3
$SG195131 DB	'LLGHRL  C406  LOAD LOGICAL HALFWORD RELATIVE LONG (64 <-'
	DB	' 16)', 00H
	ORG $+3
$SG195132 DB	'LLGFRL  C40E  LOAD LOGICAL RELATIVE LONG (64 <- 32)', 00H
	ORG $+4
$SG195133 DB	'LGRL    C408  LOAD RELATIVE LONG (64)', 00H
	ORG $+2
$SG195134 DB	'LGFRL   C40C  LOAD RELATIVE LONG (64 <- 32)', 00H
	ORG $+4
$SG195135 DB	'LRL     C40D  LOAD RELATIVE LONG (32)', 00H
	ORG $+2
$SG195136 DB	'MVHHI   E544  MOVE (16 <- 16)', 00H
	ORG $+2
$SG195137 DB	'MVGHI   E548  MOVE (64 <- 16)', 00H
	ORG $+2
$SG195138 DB	'MVHI    E54C  MOVE (32 <- 16)', 00H
	ORG $+2
$SG195139 DB	'MFY     E35C  MULTIPLY (64 <- 32)', 00H
	ORG $+6
$SG195140 DB	'MHY     E37C  MULTIPLY HALFWORD (32 <- 16)', 00H
	ORG $+5
$SG195141 DB	'MSGFI   C200  MULTIPLY SINGLE IMMEDIATE (64 <- 32)', 00H
	ORG $+5
$SG195142 DB	'MSFI    C201  MULTIPLY SINGLE IMMEDIATE (32)', 00H
	ORG $+3
$SG195143 DB	'PFD     E336  PREFETCH DATA', 00H
	ORG $+4
$SG195144 DB	'PFDRL   C602  PREFETCH DATA RELATIVE LONG', 00H
	ORG $+6
$SG195145 DB	'RNSBG   EC54  ROTATE THEN AND SELECTED BITS (64)', 00H
	ORG $+7
$SG195146 DB	'RXSBG   EC57  ROTATE THEN EXCLUSIVE OR SELECT. BITS (64)'
	DB	00H
	ORG $+7
$SG195147 DB	'RISBG   EC55  ROTATE THEN INSERT SELECTED BITS (64)', 00H
	ORG $+4
$SG195148 DB	'ROSBG   EC56  ROTATE THEN OR SELECTED BITS (64)', 00H
$SG195149 DB	'STHRL   C407  STORE HALFWORD RELATIVE LONG (16)', 00H
$SG195150 DB	'STGRL   C40B  STORE RELATIVE LONG (64)', 00H
	ORG $+1
$SG195151 DB	'STRL    C40F  STORE RELATIVE LONG (32)', 00H
	ORG $+1
$SG195162 DB	'EXRL    C600  EXECUTE RELATIVE LONG', 00H
	ORG $+4
$SG195173 DB	'CDFTR   B951  CONVERT FROM FIXED (32 to long DFP)', 00H
	ORG $+6
$SG195174 DB	'CXFTR   B959  CONVERT FROM FIXED (32 to extended DFP)', 00H
	ORG $+2
$SG195175 DB	'CELFBR  B390  CONVERT FROM LOGICAL (32 to short BFP)', 00H
	ORG $+3
$SG195176 DB	'CDLFBR  B391  CONVERT FROM LOGICAL (32 to long BFP)', 00H
	ORG $+4
$SG195177 DB	'CXLFBR  B392  CONVERT FROM LOGICAL (32 to extended BFP)', 00H
$SG195178 DB	'CELGBR  B3A0  CONVERT FROM LOGICAL (64 to short BFP)', 00H
	ORG $+3
$SG195179 DB	'CDLGBR  B3A1  CONVERT FROM LOGICAL (64 to long BFP)', 00H
	ORG $+4
$SG195180 DB	'CXLGBR  B3A2  CONVERT FROM LOGICAL (64 to extended BFP)', 00H
$SG195181 DB	'CDLGTR  B952  CONVERT FROM LOGICAL (64 to long DFP)', 00H
	ORG $+4
$SG195182 DB	'CDLFTR  B953  CONVERT FROM LOGICAL (32 to long DFP)', 00H
	ORG $+4
$SG195183 DB	'CXLGTR  B95A  CONVERT FROM LOGICAL (64 to extended DFP)', 00H
$SG195184 DB	'CXLFTR  B95B  CONVERT FROM LOGICAL (32 to extended DFP)', 00H
$SG195185 DB	'CFDTR   B941  CONVERT TO FIXED (long DFP to 32)', 00H
$SG195186 DB	'CFXTR   B949  CONVERT TO FIXED (extended DFP to 32)', 00H
	ORG $+4
$SG195187 DB	'CLFEBR  B39C  CONVERT TO LOGICAL (short BFP to 32)', 00H
	ORG $+5
$SG195188 DB	'CLFDBR  B39D  CONVERT TO LOGICAL (long BFP to 32)', 00H
	ORG $+6
$SG195189 DB	'CLFXBR  B39E  CONVERT TO LOGICAL (extended BFP to 32)', 00H
	ORG $+2
$SG195190 DB	'CLGEBR  B3AC  CONVERT TO LOGICAL (short BFP to 64)', 00H
	ORG $+5
$SG195191 DB	'CLGDBR  B3AD  CONVERT TO LOGICAL (long BFP to 64)', 00H
	ORG $+6
$SG195192 DB	'CLGXBR  B3AE  CONVERT TO LOGICAL (extended BFP to 64)', 00H
	ORG $+2
$SG195193 DB	'CLGDTR  B942  CONVERT TO LOGICAL (long DFP to 64)', 00H
	ORG $+6
$SG195194 DB	'CLFDTR  B943  CONVERT TO LOGICAL (long DFP to 32)', 00H
	ORG $+6
$SG195195 DB	'CLGXTR  B94A  CONVERT TO LOGICAL (extended DFP to 64)', 00H
	ORG $+2
$SG195196 DB	'CLFXTR  B94B  CONVERT TO LOGICAL (extended DFP to 32)', 00H
	ORG $+2
$SG195197 DB	'SRNMB   B2B8  SET BFP ROUNDING MODE (3 bit)', 00H
	ORG $+4
$SG195208 DB	'LPP     B280  LOAD PROGRAM PARAMETER', 00H
	ORG $+3
$SG195219 DB	'SRNMT   B2B9  SET DFP ROUNDING MODE', 00H
	ORG $+4
$SG195220 DB	'LDGR    B3C1  LOAD FPR FROM GR (64 to long)', 00H
	ORG $+4
$SG195221 DB	'LGDR    B3CD  LOAD GR FROM FPR (long to 64)', 00H
	ORG $+4
$SG195222 DB	'CPSDR   B372  COPY SIGN (long)', 00H
	ORG $+1
$SG195223 DB	'LCDFR   B373  LOAD COMPLEMENT (long)', 00H
	ORG $+3
$SG195224 DB	'LNDFR   B371  LOAD NEGATIVE (long)', 00H
	ORG $+5
$SG195225 DB	'LPDFR   B370  LOAD POSITIVE (long)', 00H
	ORG $+5
$SG195226 DB	'LFAS    B2BD  LOAD FPC AND SIGNAL', 00H
	ORG $+6
$SG195227 DB	'SFASR   B385  SET FPC AND SIGNAL', 00H
	ORG $+7
$SG195238 DB	'ADTRA   B3D2  ADD (long DFP)', 00H
	ORG $+3
$SG195239 DB	'AXTRA   B3DA  ADD (extended DFP)', 00H
	ORG $+7
$SG195240 DB	'CDTR    B3E4  COMPARE (long DFP)', 00H
	ORG $+7
$SG195241 DB	'CXTR    B3EC  COMPARE (extended DFP)', 00H
	ORG $+3
$SG195242 DB	'KDTR    B3E0  COMPARE AND SIGNAL (long DFP)', 00H
	ORG $+4
$SG195243 DB	'KXTR    B3E8  COMPARE AND SIGNAL (extended DFP)', 00H
$SG195244 DB	'CEDTR   B3F4  COMPARE BIASED EXPONENT (long DFP)', 00H
	ORG $+7
$SG195245 DB	'CEXTR   B3FC  COMPARE BIASED EXPONENT (extended DFP)', 00H
	ORG $+3
$SG195246 DB	'CDGTRA  B3F1  CONVERT FROM FIXED (64 to long DFP)', 00H
	ORG $+6
$SG195247 DB	'CXGTRA  B3F9  CONVERT FROM FIXED (64 to extended DFP)', 00H
	ORG $+2
$SG195248 DB	'CDSTR   B3F3  CONVERT FROM SIGNED PACKED (64 to long DFP'
	DB	')', 00H
	ORG $+6
$SG195249 DB	'CXSTR   B3FB  CONVERT FROM SIGNED PACKED (128 to extende'
	DB	'd DFP)', 00H
	ORG $+1
$SG195250 DB	'CDUTR   B3F2  CONVERT FROM UNSIGNED PACKED (64 to long D'
	DB	'FP)', 00H
	ORG $+4
$SG195251 DB	'CXUTR   B3FA  CONVERT FROM UNSIGNED PACKED (128 to ext. '
	DB	'DFP)', 00H
	ORG $+3
$SG195252 DB	'CGDTRA  B3E1  CONVERT TO FIXED (long DFP to 64)', 00H
$SG195253 DB	'CGXTRA  B3E9  CONVERT TO FIXED (extended DFP to 64)', 00H
	ORG $+4
$SG195254 DB	'CSDTR   B3E3  CONVERT TO SIGNED PACKED (long DFP to 64)', 00H
$SG195255 DB	'CSXTR   B3EB  CONVERT TO SIGNED PACKED (extended DFP to1'
	DB	'28)', 00H
	ORG $+4
$SG195256 DB	'CUDTR   B3E2  CONVERT TO UNSIGNED PACKED (long DFP to64)'
	DB	00H
	ORG $+7
$SG195257 DB	'CUXTR   B3EA  CONVERT TO UNSIGNED PACKED (extended DFP t'
	DB	'o 128)', 00H
	ORG $+1
$SG195258 DB	'DDTRA   B3D1  DIVIDE (long DFP)', 00H
$SG195259 DB	'DXTRA   B3D9  DIVIDE (extended DFP)', 00H
	ORG $+4
$SG195260 DB	'EEDTR   B3E5  EXTRACT BIASED EXPONENT (long DFP to 64)', 00H
	ORG $+1
$SG195261 DB	'EEXTR   B3ED  EXTRACT BIASED EXPONENT (extended DFP to64'
	DB	')', 00H
	ORG $+6
$SG195262 DB	'ESDTR   B3E7  EXTRACT SIGNIFICANCE (long DFP to 64)', 00H
	ORG $+4
$SG195263 DB	'ESXTR   B3EF  EXTRACT SIGNIFICANCE (extended DFP to 64)', 00H
$SG195264 DB	'IEDTR   B3F6  INSERT BIASED EXPONENT (64 to long DFP)', 00H
	ORG $+2
$SG195265 DB	'IEXTR   B3FE  INSERT BIASED EXPONENT (64 to extended DFP'
	DB	')', 00H
	ORG $+6
$SG195266 DB	'LTDTR   B3D6  LOAD AND TEST (long DFP)', 00H
	ORG $+1
$SG195267 DB	'LTXTR   B3DE  LOAD AND TEST (extended DFP)', 00H
	ORG $+5
$SG195268 DB	'FIDTR   B3D7  LOAD FP INTEGER (long DFP)', 00H
	ORG $+7
$SG195269 DB	'FIXTR   B3DF  LOAD FP INTEGER (extended DFP)', 00H
	ORG $+3
$SG195270 DB	'LDETR   B3D4  LOAD LENGTHENED (short to long DFP)', 00H
	ORG $+6
$SG195271 DB	'LXDTR   B3DC  LOAD LENGTHENED (long to extended DFP)', 00H
	ORG $+3
$SG195272 DB	'LEDTR   B3D5  LOAD ROUNDED (long to short DFP)', 00H
	ORG $+1
$SG195273 DB	'LDXTR   B3DD  LOAD ROUNDED (extended to long DFP)', 00H
	ORG $+6
$SG195274 DB	'MDTRA   B3D0  MULTIPLY (long DFP)', 00H
	ORG $+6
$SG195275 DB	'MXTRA   B3D8  MULTIPLY (extended DFP)', 00H
	ORG $+2
$SG195276 DB	'QADTR   B3F5  QUANTIZE (long DFP)', 00H
	ORG $+6
$SG195277 DB	'QAXTR   B3FD  QUANTIZE (extended DFP)', 00H
	ORG $+2
$SG195278 DB	'RRDTR   B3F7  REROUND (long DFP)', 00H
	ORG $+7
$SG195279 DB	'RRXTR   B3FF  REROUND (extended DFP)', 00H
	ORG $+3
$SG195280 DB	'SLDT    ED40  SHIFT SIGNIFICAND LEFT (long DFP)', 00H
$SG195281 DB	'SLXT    ED48  SHIFT SIGNIFICAND LEFT (extended DFP)', 00H
	ORG $+4
$SG195282 DB	'SRDT    ED41  SHIFT SIGNIFICAND RIGHT (long DFP)', 00H
	ORG $+7
$SG195283 DB	'SRXT    ED49  SHIFT SIGNIFICAND RIGHT (extended DFP)', 00H
	ORG $+3
$SG195284 DB	'SDTRA   B3D3  SUBTRACT (long DFP)', 00H
	ORG $+6
$SG195285 DB	'SXTRA   B3DB  SUBTRACT (extended DFP)', 00H
	ORG $+2
$SG195286 DB	'TDCET   ED50  TEST DATA CLASS (short DFP)', 00H
	ORG $+6
$SG195287 DB	'TDCDT   ED54  TEST DATA CLASS (long DFP)', 00H
	ORG $+7
$SG195288 DB	'TDCXT   ED58  TEST DATA CLASS (extended DFP)', 00H
	ORG $+3
$SG195289 DB	'TDGET   ED51  TEST DATA GROUP (short DFP)', 00H
	ORG $+6
$SG195290 DB	'TDGDT   ED55  TEST DATA GROUP (long DFP)', 00H
	ORG $+7
$SG195291 DB	'TDGXT   ED59  TEST DATA GROUP (extended DFP)', 00H
	ORG $+3
$SG195302 DB	'PFPO    010A  PERFORM FLOATING-POINT OPERATION', 00H
	ORG $+1
$SG195313 DB	'AGRK    B9E8  ADD (64)', 00H
	ORG $+1
$SG195314 DB	'ARK     B9F8  ADD (32)', 00H
	ORG $+1
$SG195315 DB	'AHIK    ECD8  ADD IMMEDIATE (32 <- 16)', 00H
	ORG $+1
$SG195316 DB	'AGHIK   ECD9  ADD IMMEDIATE (64 <- 16)', 00H
	ORG $+1
$SG195317 DB	'ALGRK   B9EA  ADD LOGICAL (64)', 00H
	ORG $+1
$SG195318 DB	'ALRK    B9FA  ADD LOGICAL (32)', 00H
	ORG $+1
$SG195319 DB	'ALHSIK  ECDA  ADD LOGICAL WITH SIGNED IMMEDIATE (32 <- 1'
	DB	'6)', 00H
	ORG $+5
$SG195320 DB	'ALGHSIK ECDB  ADD LOGICAL WITH SIGNED IMMEDIATE (64 <- 1'
	DB	'6)', 00H
	ORG $+5
$SG195321 DB	'NGRK    B9E4  AND (64)', 00H
	ORG $+1
$SG195322 DB	'NRK     B9F4  AND (32)', 00H
	ORG $+1
$SG195323 DB	'XGRK    B9E7  EXCLUSIVE OR (64)', 00H
$SG195324 DB	'XRK     B9F7  EXCLUSIVE OR (32)', 00H
$SG195325 DB	'OGRK    B9E6  OR (64)', 00H
	ORG $+2
$SG195326 DB	'ORK     B9F6  OR (32)', 00H
	ORG $+2
$SG195327 DB	'SLAK    EBDD  SHIFT LEFT SINGLE (32)', 00H
	ORG $+3
$SG195328 DB	'SLLK    EBDF  SHIFT LEFT SINGLE LOGICAL (32)', 00H
	ORG $+3
$SG195329 DB	'SRAK    EBDC  SHIFT RIGHT SINGLE (32)', 00H
	ORG $+2
$SG195330 DB	'SRLK    EBDE  SHIFT RIGHT SINGLE LOGICAL (32)', 00H
	ORG $+2
$SG195331 DB	'SGRK    B9E9  SUBTRACT (64)', 00H
	ORG $+4
$SG195332 DB	'SRK     B9F9  SUBTRACT (32)', 00H
	ORG $+4
$SG195333 DB	'SLGRK   B9EB  SUBTRACT LOGICAL (64)', 00H
	ORG $+4
$SG195334 DB	'SLRK    B9FB  SUBTRACT LOGICAL (32)', 00H
	ORG $+4
$SG195335 DB	'AHHHR   B9C8  ADD HIGH (32)', 00H
	ORG $+4
$SG195336 DB	'AHHLR   B9D8  ADD HIGH (32)', 00H
	ORG $+4
$SG195337 DB	'AIH     CC08  ADD IMMEDIATE HIGH (32)', 00H
	ORG $+2
$SG195338 DB	'ALHHHR  B9CA  ADD LOGICAL HIGH (32)', 00H
	ORG $+4
$SG195339 DB	'ALHHLR  B9DA  ADD LOGICAL HIGH (32)', 00H
	ORG $+4
$SG195340 DB	'ALSIH   CC0A  ADD LOGICAL WITH SIGNED IMMEDIATE HIGH (32'
	DB	')', 00H
	ORG $+6
$SG195341 DB	'ALSIHN  CC0B  ADD LOGICAL WITH SIGNED IMMEDIATE HIGH (32'
	DB	')', 00H
	ORG $+6
$SG195342 DB	'BRCTH   CC06  BRANCH RELATIVE ON COUNT HIGH (32)', 00H
	ORG $+7
$SG195343 DB	'CHHR    B9CD  COMPARE HIGH (32)', 00H
$SG195344 DB	'CHLR    B9DD  COMPARE HIGH (32)', 00H
$SG195345 DB	'CHF     E3CD  COMPARE HIGH (32)', 00H
$SG195346 DB	'CIH     CC0D  COMPARE IMMEDIATE HIGH (32)', 00H
	ORG $+6
$SG195347 DB	'CLHHR   B9CF  COMPARE LOGICAL HIGH (32)', 00H
$SG195348 DB	'CLHLR   B9DF  COMPARE LOGICAL HIGH (32)', 00H
$SG195349 DB	'CLHF    E3CF  COMPARE LOGICAL HIGH (32)', 00H
$SG195350 DB	'CLIH    CC0F  COMPARE LOGICAL IMMEDIATE HIGH (32)', 00H
	ORG $+6
$SG195351 DB	'LBH     E3C0  LOAD BYTE HIGH (32 <- 8)', 00H
	ORG $+1
$SG195352 DB	'LHH     E3C4  LOAD HALFWORD HIGH (32 <- 16)', 00H
	ORG $+4
$SG195353 DB	'LFH     E3CA  LOAD HIGH (32)', 00H
	ORG $+3
$SG195354 DB	'LLCH    E3C2  LOAD LOGICAL CHARACTER HIGH (32 <- 8)', 00H
	ORG $+4
$SG195355 DB	'LLHH    E3C6  LOAD LOGICAL HALFWORD HIGH (32 <- 16)', 00H
	ORG $+4
$SG195356 DB	'RISBHG  EC5D  ROTATE THEN INSERT SELECTED BITS HIGH (64)'
	DB	00H
	ORG $+7
$SG195357 DB	'RISBLG  EC51  ROTATE THEN INSERT SELECTED BITS LOW (64)', 00H
$SG195358 DB	'STCH    E3C3  STORE CHARACTER HIGH (8)', 00H
	ORG $+1
$SG195359 DB	'STHH    E3C7  STORE HALFWORD HIGH (16)', 00H
	ORG $+1
$SG195360 DB	'STFH    E3CB  STORE HIGH (32)', 00H
	ORG $+2
$SG195361 DB	'SHHHR   B9C9  SUBTRACT HIGH (32)', 00H
	ORG $+7
$SG195362 DB	'SHHLR   B9D9  SUBTRACT HIGH (32)', 00H
	ORG $+7
$SG195363 DB	'SLHHHR  B9CB  SUBTRACT LOGICAL HIGH (32)', 00H
	ORG $+7
$SG195364 DB	'SLHHLR  B9DB  SUBTRACT LOGICAL HIGH (32)', 00H
	ORG $+7
$SG195365 DB	'LAAG    EBE8  LOAD AND ADD (64)', 00H
$SG195366 DB	'LAA     EBF8  LOAD AND ADD (32)', 00H
$SG195367 DB	'LAALG   EBEA  LOAD AND ADD LOGICAL (64)', 00H
$SG195368 DB	'LAAL    EBFA  LOAD AND ADD LOGICAL (32)', 00H
$SG195369 DB	'LANG    EBE4  LOAD AND AND (64)', 00H
$SG195370 DB	'LAN     EBF4  LOAD AND AND (32)', 00H
$SG195371 DB	'LAXG    EBE7  LOAD AND EXCLUSIVE OR (64)', 00H
	ORG $+7
$SG195372 DB	'LAX     EBF7  LOAD AND EXCLUSIVE OR (32)', 00H
	ORG $+7
$SG195373 DB	'LAOG    EBE6  LOAD AND OR (64)', 00H
	ORG $+1
$SG195374 DB	'LAO     EBF6  LOAD AND OR (32)', 00H
	ORG $+1
$SG195375 DB	'LPD     C804  LOAD PAIR DISJOINT (32)', 00H
	ORG $+2
$SG195376 DB	'LPDG    C805  LOAD PAIR DISJOINT (64)', 00H
	ORG $+2
$SG195377 DB	'LOCGR   B9E2  LOAD ON CONDITION (64)', 00H
	ORG $+3
$SG195378 DB	'LOCR    B9F2  LOAD ON CONDITION (32)', 00H
	ORG $+3
$SG195379 DB	'LOCG    EBE2  LOAD ON CONDITION (64)', 00H
	ORG $+3
$SG195380 DB	'LOC     EBF2  LOAD ON CONDITION (32)', 00H
	ORG $+3
$SG195381 DB	'STOCG   EBE3  STORE ON CONDITION (64)', 00H
	ORG $+2
$SG195382 DB	'STOC    EBF3  STORE ON CONDITION (32)', 00H
	ORG $+2
$SG195383 DB	'POPCNT  B9E1  POPULATION COUNT', 00H
	ORG $+1
$SG195394 DB	'CDZT    EDAA  CONVERT FROM ZONED (to long DFP)', 00H
	ORG $+1
$SG195395 DB	'CXZT    EDAB  CONVERT FROM ZONED (to extended DFP)', 00H
	ORG $+5
$SG195396 DB	'CZDT    EDA8  CONVERT TO ZONED (from long DFP)', 00H
	ORG $+1
$SG195397 DB	'CZXT    EDA9  CONVERT TO ZONED (from extended DFP)', 00H
	ORG $+5
$SG195408 DB	'BPP     C7    BRANCH PREDICTION PRELOAD', 00H
$SG195409 DB	'BPRP    C5    BRANCH PREDICTION RELATIVE PRELOAD', 00H
	ORG $+7
$SG195410 DB	'NIAI    B2FA  NEXT INSTRUCTION ACCESS INTENT', 00H
	ORG $+3
$SG195411 DB	'LGAT    E385  LOAD AND TRAP (64)', 00H
	ORG $+7
$SG195412 DB	'LAT     E39F  LOAD AND TRAP (32L <- 32)', 00H
$SG195413 DB	'LFHAT   E3C8  LOAD HIGH AND TRAP (32H <- 32)', 00H
	ORG $+3
$SG195414 DB	'LLGFAT  E39D  LOAD LOGICAL AND TRAP (64 <- 32)', 00H
	ORG $+1
$SG195415 DB	'LLGTAT  E39C  LOAD LOGICAL THIRTY ONE BITS AND TRAP (64 '
	DB	'<- 31)', 00H
	ORG $+1
$SG195416 DB	'CLT     EB23  COMPARE LOGICAL AND TRAP (32)', 00H
	ORG $+4
$SG195417 DB	'CLGT    EB2B  COMPARE LOGICAL AND TRAP (64)', 00H
	ORG $+4
$SG195418 DB	'RISBGN  EC59  ROTATE THEN INSERT SELECTED BITS (64)', 00H
	ORG $+4
$SG195419 DB	'PPA     B2E8  PERFORM PROCESSOR ASSIST', 00H
	ORG $+1
$SG195430 DB	'TBEGINC E561  TRANSACTION BEGIN (CONSTRAINED)', 00H
	ORG $+2
$SG195441 DB	'LZRG    E32A  LOAD AND ZERO RIGHTMOST BYTE (64)', 00H
$SG195442 DB	'LZRF    E33B  LOAD AND ZERO RIGHTMOST BYTE (32)', 00H
$SG195443 DB	'LLZRGF  E33A  LOAD LOGICAL AND ZERO RIGHTMOST BYTE (64 <'
	DB	'- 32)', 00H
	ORG $+2
$SG195444 DB	'LOCHHI  EC4E  LOAD HALFWORD HIGH IMMEDIATE ON CONDITION '
	DB	'(32 <- 16)', 00H
	ORG $+5
$SG195445 DB	'LOCHI   EC42  LOAD HALFWORD IMMEDIATE ON CONDITION (32 <'
	DB	'- 16)', 00H
	ORG $+2
$SG195446 DB	'LOCGHI  EC46  LOAD HALFWORD IMMEDIATE ON CONDITION (64 <'
	DB	'- 16)', 00H
	ORG $+2
$SG195447 DB	'LOCFHR  B9E0  LOAD HIGH ON CONDITION (32)', 00H
	ORG $+6
$SG195448 DB	'LOCFH   EBE0  LOAD HIGH ON CONDITION (32)', 00H
	ORG $+6
$SG195449 DB	'STOCFH  EBE1  STORE HIGH ON CONDITION', 00H
	ORG $+2
$SG195460 DB	'PRNO    B93C  PERFORM RANDOM NUMBER OPERATION', 00H
	ORG $+2
$SG195471 DB	'AGH     E338  ADD HALFWORD (64 <- 16)', 00H
	ORG $+2
$SG195472 DB	'BIC     E347  BRANCH INDIRECT ON CONDITION', 00H
	ORG $+5
$SG195473 DB	'MGRK    B9EC  MULTIPLY (128 <- 64)', 00H
	ORG $+5
$SG195474 DB	'MG      E384  MULTIPLY (128 <- 64)', 00H
	ORG $+5
$SG195475 DB	'MGH     E33C  MULTIPLY HALFWORD (64 <- 16)', 00H
	ORG $+5
$SG195476 DB	'MSGRKC  B9ED  MULTIPLY SINGLE (64)', 00H
	ORG $+5
$SG195477 DB	'MSRKC   B9FD  MULTIPLY SINGLE (32)', 00H
	ORG $+5
$SG195478 DB	'MSC     E353  MULTIPLY SINGLE (32)', 00H
	ORG $+5
$SG195479 DB	'MSGC    E383  MULTIPLY SINGLE (64)', 00H
	ORG $+5
$SG195480 DB	'SGH     E339  SUBTRACT HALFWORD (64 <- 16)', 00H
	ORG $+5
$SG195491 DB	'NCRK    B9F5  AND WITH COMPLEMENT (32)', 00H
	ORG $+1
$SG195492 DB	'NCGRK   B9E5  AND WITH COMPLEMENT (64)', 00H
	ORG $+1
$SG195493 DB	'MVCRL   E50A  MOVE RIGHT TO LEFT', 00H
	ORG $+7
$SG195494 DB	'NNRK    B974  NAND (32)', 00H
$SG195495 DB	'NNGRK   B964  NAND (64)', 00H
$SG195496 DB	'NXRK    B977  NOT EXCLUSIVE OR (32)', 00H
	ORG $+4
$SG195497 DB	'NXGRK   B967  NOT EXCLUSIVE OR (64)', 00H
	ORG $+4
$SG195498 DB	'NORK    B976  NOR (32)', 00H
	ORG $+1
$SG195499 DB	'NOGRK   B966  NOR (64)', 00H
	ORG $+1
$SG195500 DB	'OCRK    B975  OR WITH COMPLEMENT (32)', 00H
	ORG $+2
$SG195501 DB	'OCGRK   B965  OR WITH COMPLEMENT (64)', 00H
	ORG $+2
$SG195502 DB	'SELR    B9F0  SELECT (32)', 00H
	ORG $+6
$SG195503 DB	'SELGR   B9E3  SELECT (64)', 00H
	ORG $+6
$SG195504 DB	'SELFHR  B9C0  SELECT HIGH', 00H
	ORG $+6
$SG195515 DB	'RRBM    B9AE  RESET REFERENCE BITS MULTIPLE', 00H
	ORG $+4
$SG195526 DB	'ECPGA   B2ED  EXTRACT COPROCESSOR-GROUP ADDRESS', 00H
$SG195527 DB	'ECCTR   B2E4  EXTRACT CPU COUNTER', 00H
	ORG $+6
$SG195528 DB	'EPCTR   B2E5  EXTRACT PERIPHERAL COUNTER', 00H
	ORG $+7
$SG195529 DB	'LCCTL   B284  LOAD CPU-COUNTER-SET CONTROLS', 00H
	ORG $+4
$SG195530 DB	'LPCTL   B285  LOAD PERIPHERAL-COUNTER-SET CONTROLS', 00H
	ORG $+5
$SG195531 DB	'QCTRI   B28E  QUERY COUNTER INFORMATION', 00H
$SG195532 DB	'SCCTR   B2E0  SET CPU COUNTER', 00H
	ORG $+2
$SG195533 DB	'SPCTR   B2E1  SET PERIPHERAL COUNTER', 00H
	ORG $+3
$SG195544 DB	'LSCTL   B287  LOAD SAMPLING CONTROLS', 00H
	ORG $+3
$SG195545 DB	'QSI     B286  QUERY SAMPLING INFORMATION', 00H
	ORG $+7
$SG195556 DB	'ETND    B2EC  EXTRACT TRANSACTION NESTING DEPTH', 00H
$SG195557 DB	'NTSTG   E325  NONTRANSACTIONAL STORE (64)', 00H
	ORG $+6
$SG195558 DB	'TABORT  B2FC  TRANSACTION ABORT', 00H
$SG195559 DB	'TBEGIN  E560  TRANSACTION BEGIN (unconstrained)', 00H
$SG195560 DB	'TEND    B2F8  TRANSACTION END', 00H
	ORG $+2
$SG195571 DB	'STHYI   B256  STORE HYPERVISOR INFORMATION', 00H
	ORG $+5
$SG195582 DB	'PCKMO   B928  PERFORM CRYPTOGRAPHIC KEY MGMT. OPERATIONS'
	DB	00H
	ORG $+7
$SG195593 DB	'KMF     B92A  CIPHER MESSAGE WITH CIPHER FEEDBACK', 00H
	ORG $+6
$SG195594 DB	'KMCTR   B92D  CIPHER MESSAGE WITH COUNTER', 00H
	ORG $+6
$SG195595 DB	'KMO     B92B  CIPHER MESSAGE WITH OUTPUT FEEDBACK', 00H
	ORG $+6
$SG195596 DB	'PCC     B92C  PERFORM CRYPTOGRAPHIC COMPUTATION', 00H
$SG195607 DB	'CRDTE   B98F  COMPARE AND REPLACE DAT TABLE ENTRY', 00H
	ORG $+6
$SG195618 DB	'CDPT    EDAE  CONVERT FROM PACKED (to long DFP)', 00H
$SG195619 DB	'CXPT    EDAF  CONVERT FROM PACKED (to extended DFP)', 00H
	ORG $+4
$SG195620 DB	'CPDT    EDAC  CONVERT TO PACKED (from long DFP)', 00H
$SG195621 DB	'CPXT    EDAD  CONVERT TO PACKED (from extended DFP)', 00H
	ORG $+4
$SG195632 DB	'LCBB    E727  LOAD COUNT TO BLOCK BOUNDARY', 00H
	ORG $+5
$SG195633 DB	'VA      E7F3  VECTOR ADD', 00H
	ORG $+7
$SG195634 DB	'VACC    E7F1  VECTOR ADD COMPUTE CARRY', 00H
	ORG $+1
$SG195635 DB	'VAC     E7BB  VECTOR ADD WITH CARRY', 00H
	ORG $+4
$SG195636 DB	'VACCC   E7B9  VECTOR ADD WITH CARRY COMPUTE CARRY', 00H
	ORG $+6
$SG195637 DB	'VN      E768  VECTOR AND', 00H
	ORG $+7
$SG195638 DB	'VNC     E769  VECTOR AND WITH COMPLEMENT', 00H
	ORG $+7
$SG195639 DB	'VAVG    E7F2  VECTOR AVERAGE', 00H
	ORG $+3
$SG195640 DB	'VAVGL   E7F0  VECTOR AVERAGE LOGICAL', 00H
	ORG $+3
$SG195641 DB	'VCKSM   E766  VECTOR CHECKSUM', 00H
	ORG $+2
$SG195642 DB	'VCEQ    E7F8  VECTOR COMPARE EQUAL', 00H
	ORG $+5
$SG195643 DB	'VCH     E7FB  VECTOR COMPARE HIGH', 00H
	ORG $+6
$SG195644 DB	'VCHL    E7F9  VECTOR COMPARE HIGH LOGICAL', 00H
	ORG $+6
$SG195645 DB	'VCLZ    E753  VECTOR COUNT LEADING ZEROS', 00H
	ORG $+7
$SG195646 DB	'VCTZ    E752  VECTOR COUNT TRAILING ZEROS', 00H
	ORG $+6
$SG195647 DB	'VEC     E7DB  VECTOR ELEMENT COMPARE', 00H
	ORG $+3
$SG195648 DB	'VECL    E7D9  VECTOR ELEMENT COMPARE LOGICAL', 00H
	ORG $+3
$SG195649 DB	'VERIM   E772  VECTOR ELEMENT ROTATE AND INSERT UNDER MAS'
	DB	'K', 00H
	ORG $+6
$SG195650 DB	'VERLL   E733  VECTOR ELEMENT ROTATE LEFT LOGICAL', 00H
	ORG $+7
$SG195651 DB	'VERLLV  E773  VECTOR ELEMENT ROTATE LEFT LOGICAL', 00H
	ORG $+7
$SG195652 DB	'VESL    E730  VECTOR ELEMENT SHIFT LEFT', 00H
$SG195653 DB	'VESLV   E770  VECTOR ELEMENT SHIFT LEFT', 00H
$SG195654 DB	'VESRA   E73A  VECTOR ELEMENT SHIFT RIGHT ARITHMETIC', 00H
	ORG $+4
$SG195655 DB	'VESRAV  E77A  VECTOR ELEMENT SHIFT RIGHT ARITHMETIC', 00H
	ORG $+4
$SG195656 DB	'VESRL   E738  VECTOR ELEMENT SHIFT RIGHT LOGICAL', 00H
	ORG $+7
$SG195657 DB	'VESRLV  E778  VECTOR ELEMENT SHIFT RIGHT LOGICAL', 00H
	ORG $+7
$SG195658 DB	'VX      E76D  VECTOR EXCLUSIVE OR', 00H
	ORG $+6
$SG195659 DB	'VFAE    E782  VECTOR FIND ANY ELEMENT EQUAL', 00H
	ORG $+4
$SG195660 DB	'VFEE    E780  VECTOR FIND ELEMENT EQUAL', 00H
$SG195661 DB	'VFENE   E781  VECTOR FIND ELEMENT NOT EQUAL', 00H
	ORG $+4
$SG195662 DB	'VFA     E7E3  VECTOR FP ADD', 00H
	ORG $+4
$SG195663 DB	'WFK     E7CA  VECTOR FP COMPARE AND SIGNAL SCALAR', 00H
	ORG $+6
$SG195664 DB	'VFCE    E7E8  VECTOR FP COMPARE EQUAL', 00H
	ORG $+2
$SG195665 DB	'VFCH    E7EB  VECTOR FP COMPARE HIGH', 00H
	ORG $+3
$SG195666 DB	'VFCHE   E7EA  VECTOR FP COMPARE HIGH OR EQUAL', 00H
	ORG $+2
$SG195667 DB	'WFC     E7CB  VECTOR FP COMPARE SCALAR', 00H
	ORG $+1
$SG195668 DB	'VCDG    E7C3  VECTOR FP CONVERT FROM FIXED 64-BIT', 00H
	ORG $+6
$SG195669 DB	'VCDLG   E7C1  VECTOR FP CONVERT FROM LOGICAL 64-BIT', 00H
	ORG $+4
$SG195670 DB	'VCGD    E7C2  VECTOR FP CONVERT TO FIXED 64-BIT', 00H
$SG195671 DB	'VCLGD   E7C0  VECTOR FP CONVERT TO LOGICAL 64-BIT', 00H
	ORG $+6
$SG195672 DB	'VFD     E7E5  VECTOR FP DIVIDE', 00H
	ORG $+1
$SG195673 DB	'VFLL    E7C4  VECTOR FP LOAD LENGTHENED', 00H
$SG195674 DB	'VFLR    E7C5  VECTOR FP LOAD ROUNDED', 00H
	ORG $+3
$SG195675 DB	'VFM     E7E7  VECTOR FP MULTIPLY', 00H
	ORG $+7
$SG195676 DB	'VFMA    E78F  VECTOR FP MULTIPLY AND ADD', 00H
	ORG $+7
$SG195677 DB	'VFMS    E78E  VECTOR FP MULTIPLY AND SUBTRACT', 00H
	ORG $+2
$SG195678 DB	'VFPSO   E7CC  VECTOR FP PERFORM SIGN OPERATION', 00H
	ORG $+1
$SG195679 DB	'VFSQ    E7CE  VECTOR FP SQUARE ROOT', 00H
	ORG $+4
$SG195680 DB	'VFS     E7E2  VECTOR FP SUBTRACT', 00H
	ORG $+7
$SG195681 DB	'VFTCI   E74A  VECTOR FP TEST DATA CLASS IMMEDIATE', 00H
	ORG $+6
$SG195682 DB	'VGFM    E7B4  VECTOR GALOIS FIELD MULTIPLY SUM', 00H
	ORG $+1
$SG195683 DB	'VGFMA   E7BC  VECTOR GALOIS FIELD MULTIPLY SUM AND ACCUM'
	DB	'ULATE', 00H
	ORG $+2
$SG195684 DB	'VGEG    E712  VECTOR GATHER ELEMENT (64)', 00H
	ORG $+7
$SG195685 DB	'VGEF    E713  VECTOR GATHER ELEMENT (32)', 00H
	ORG $+7
$SG195686 DB	'VGBM    E744  VECTOR GENERATE BYTE MASK', 00H
$SG195687 DB	'VGM     E746  VECTOR GENERATE MASK', 00H
	ORG $+5
$SG195688 DB	'VISTR   E75C  VECTOR ISOLATE STRING', 00H
	ORG $+4
$SG195689 DB	'VL      E706  VECTOR LOAD', 00H
	ORG $+6
$SG195690 DB	'VLR     E756  VECTOR LOAD', 00H
	ORG $+6
$SG195691 DB	'VLREP   E705  VECTOR LOAD AND REPLICATE', 00H
$SG195692 DB	'VLC     E7DE  VECTOR LOAD COMPLEMENT', 00H
	ORG $+3
$SG195693 DB	'VLEB    E700  VECTOR LOAD ELEMENT (8)', 00H
	ORG $+2
$SG195694 DB	'VLEH    E701  VECTOR LOAD ELEMENT (16)', 00H
	ORG $+1
$SG195695 DB	'VLEG    E702  VECTOR LOAD ELEMENT (64)', 00H
	ORG $+1
$SG195696 DB	'VLEF    E703  VECTOR LOAD ELEMENT (32)', 00H
	ORG $+1
$SG195697 DB	'VLEIB   E740  VECTOR LOAD ELEMENT IMMEDIATE (8)', 00H
$SG195698 DB	'VLEIH   E741  VECTOR LOAD ELEMENT IMMEDIATE (16)', 00H
	ORG $+7
$SG195699 DB	'VLEIG   E742  VECTOR LOAD ELEMENT IMMEDIATE (64)', 00H
	ORG $+7
$SG195700 DB	'VLEIF   E743  VECTOR LOAD ELEMENT IMMEDIATE (32)', 00H
	ORG $+7
$SG195701 DB	'VFI     E7C7  VECTOR LOAD FP INTEGER', 00H
	ORG $+3
$SG195702 DB	'VLGV    E721  VECTOR LOAD GR FROM VR ELEMENT', 00H
	ORG $+3
$SG195703 DB	'VLLEZ   E704  VECTOR LOAD LOGICAL ELEMENT AND ZERO', 00H
	ORG $+5
$SG195704 DB	'VLM     E736  VECTOR LOAD MULTIPLE', 00H
	ORG $+5
$SG195705 DB	'VLP     E7DF  VECTOR LOAD POSITIVE', 00H
	ORG $+5
$SG195706 DB	'VLBB    E707  VECTOR LOAD TO BLOCK BOUNDARY', 00H
	ORG $+4
$SG195707 DB	'VLVG    E722  VECTOR LOAD VR ELEMENT FROM GR', 00H
	ORG $+3
$SG195708 DB	'VLVGP   E762  VECTOR LOAD VR FROM GRS DISJOINT', 00H
	ORG $+1
$SG195709 DB	'VLL     E737  VECTOR LOAD WITH LENGTH', 00H
	ORG $+2
$SG195710 DB	'VMX     E7FF  VECTOR MAXIMUM', 00H
	ORG $+3
$SG195711 DB	'VMXL    E7FD  VECTOR MAXIMUM LOGICAL', 00H
	ORG $+3
$SG195712 DB	'VMRH    E761  VECTOR MERGE HIGH', 00H
$SG195713 DB	'VMRL    E760  VECTOR MERGE LOW', 00H
	ORG $+1
$SG195714 DB	'VMN     E7FE  VECTOR MINIMUM', 00H
	ORG $+3
$SG195715 DB	'VMNL    E7FC  VECTOR MINIMUM LOGICAL', 00H
	ORG $+3
$SG195716 DB	'VMAE    E7AE  VECTOR MULTIPLY AND ADD EVEN', 00H
	ORG $+5
$SG195717 DB	'VMAH    E7AB  VECTOR MULTIPLY AND ADD HIGH', 00H
	ORG $+5
$SG195718 DB	'VMALE   E7AC  VECTOR MULTIPLY AND ADD LOGICAL EVEN', 00H
	ORG $+5
$SG195719 DB	'VMALH   E7A9  VECTOR MULTIPLY AND ADD LOGICAL HIGH', 00H
	ORG $+5
$SG195720 DB	'VMALO   E7AD  VECTOR MULTIPLY AND ADD LOGICAL ODD', 00H
	ORG $+6
$SG195721 DB	'VMAL    E7AA  VECTOR MULTIPLY AND ADD LOW', 00H
	ORG $+6
$SG195722 DB	'VMAO    E7AF  VECTOR MULTIPLY AND ADD ODD', 00H
	ORG $+6
$SG195723 DB	'VME     E7A6  VECTOR MULTIPLY EVEN', 00H
	ORG $+5
$SG195724 DB	'VMH     E7A3  VECTOR MULTIPLY HIGH', 00H
	ORG $+5
$SG195725 DB	'VMLE    E7A4  VECTOR MULTIPLY LOGICAL EVEN', 00H
	ORG $+5
$SG195726 DB	'VMLH    E7A1  VECTOR MULTIPLY LOGICAL HIGH', 00H
	ORG $+5
$SG195727 DB	'VMLO    E7A5  VECTOR MULTIPLY LOGICAL ODD', 00H
	ORG $+6
$SG195728 DB	'VML     E7A2  VECTOR MULTIPLY LOW', 00H
	ORG $+6
$SG195729 DB	'VMO     E7A7  VECTOR MULTIPLY ODD', 00H
	ORG $+6
$SG195730 DB	'VNO     E76B  VECTOR NOR', 00H
	ORG $+7
$SG195731 DB	'VO      E76A  VECTOR OR', 00H
$SG195732 DB	'VPK     E794  VECTOR PACK', 00H
	ORG $+6
$SG195733 DB	'VPKLS   E795  VECTOR PACK LOGICAL SATURATE', 00H
	ORG $+5
$SG195734 DB	'VPKS    E797  VECTOR PACK SATURATE', 00H
	ORG $+5
$SG195735 DB	'VPERM   E78C  VECTOR PERMUTE', 00H
	ORG $+3
$SG195736 DB	'VPDI    E784  VECTOR PERMUTE DOUBLEWORD IMMEDIATE', 00H
	ORG $+6
$SG195737 DB	'VPOPCT  E750  VECTOR POPULATION COUNT', 00H
	ORG $+2
$SG195738 DB	'VREP    E74D  VECTOR REPLICATE', 00H
	ORG $+1
$SG195739 DB	'VREPI   E745  VECTOR REPLICATE IMMEDIATE', 00H
	ORG $+7
$SG195740 DB	'VSCEG   E71A  VECTOR SCATTER ELEMENT (64)', 00H
	ORG $+6
$SG195741 DB	'VSCEF   E71B  VECTOR SCATTER ELEMENT (32)', 00H
	ORG $+6
$SG195742 DB	'VSEL    E78D  VECTOR SELECT', 00H
	ORG $+4
$SG195743 DB	'VSL     E774  VECTOR SHIFT LEFT', 00H
$SG195744 DB	'VSLB    E775  VECTOR SHIFT LEFT BY BYTE', 00H
$SG195745 DB	'VSLDB   E777  VECTOR SHIFT LEFT DOUBLE BY BYTE', 00H
	ORG $+1
$SG195746 DB	'VSRA    E77E  VECTOR SHIFT RIGHT ARITHMETIC', 00H
	ORG $+4
$SG195747 DB	'VSRAB   E77F  VECTOR SHIFT RIGHT ARITHMETIC BY BYTE', 00H
	ORG $+4
$SG195748 DB	'VSRL    E77C  VECTOR SHIFT RIGHT LOGICAL', 00H
	ORG $+7
$SG195749 DB	'VSRLB   E77D  VECTOR SHIFT RIGHT LOGICAL BY BYTE', 00H
	ORG $+7
$SG195750 DB	'VSEG    E75F  VECTOR SIGN EXTEND TO DOUBLEWORD', 00H
	ORG $+1
$SG195751 DB	'VST     E70E  VECTOR STORE', 00H
	ORG $+5
$SG195752 DB	'VSTEB   E708  VECTOR STORE ELEMENT (8)', 00H
	ORG $+1
$SG195753 DB	'VSTEH   E709  VECTOR STORE ELEMENT (16)', 00H
$SG195754 DB	'VSTEG   E70A  VECTOR STORE ELEMENT (64)', 00H
$SG195755 DB	'VSTEF   E70B  VECTOR STORE ELEMENT (32)', 00H
$SG195756 DB	'VSTM    E73E  VECTOR STORE MULTIPLE', 00H
	ORG $+4
$SG195757 DB	'VSTL    E73F  VECTOR STORE WITH LENGTH', 00H
	ORG $+1
$SG195758 DB	'VSTRC   E78A  VECTOR STRING RANGE COMPARE', 00H
	ORG $+6
$SG195759 DB	'VS      E7F7  VECTOR SUBTRACT', 00H
	ORG $+2
$SG195760 DB	'VSCBI   E7F5  VECTOR SUBTRACT COMPUTE BORROW INDICATION', 00H
$SG195761 DB	'VSBCBI  E7BD  VECTOR SUBTRACT WITH BORROW COMPUTE BORROW'
	DB	' INDICATION', 00H
	ORG $+4
$SG195762 DB	'VSBI    E7BF  VECTOR SUBTRACT WITH BORROW INDICATION', 00H
	ORG $+3
$SG195763 DB	'VSUMG   E765  VECTOR SUM ACROSS DOUBLEWORD', 00H
	ORG $+5
$SG195764 DB	'VSUMQ   E767  VECTOR SUM ACROSS QUADWORD', 00H
	ORG $+7
$SG195765 DB	'VSUM    E764  VECTOR SUM ACROSS WORD', 00H
	ORG $+3
$SG195766 DB	'VTM     E7D8  VECTOR TEST UNDER MASK', 00H
	ORG $+3
$SG195767 DB	'VUPH    E7D7  VECTOR UNPACK HIGH', 00H
	ORG $+7
$SG195768 DB	'VUPLH   E7D5  VECTOR UNPACK LOGICAL HIGH', 00H
	ORG $+7
$SG195769 DB	'VUPLL   E7D4  VECTOR UNPACK LOGICAL LOW', 00H
$SG195770 DB	'VUPL    E7D6  VECTOR UNPACK LOW', 00H
$SG195781 DB	'LGG     E34C  LOAD GUARDED (64)', 00H
$SG195782 DB	'LGSC    E34D  LOAD GUARDED STORAGE CONTROLS', 00H
	ORG $+4
$SG195783 DB	'LLGFSG  E348  LOAD LOGICAL AND SHIFT GUARDED (64 <- 32)', 00H
$SG195784 DB	'STGSC   E349  STORE GUARDED STORAGE CONTROLS', 00H
	ORG $+3
$SG195795 DB	'VAP     E671  VECTOR ADD DECIMAL', 00H
	ORG $+7
$SG195796 DB	'VCP     E677  VECTOR COMPARE DECIMAL', 00H
	ORG $+3
$SG195797 DB	'VCVB    E650  VECTOR CONVERT TO BINARY', 00H
	ORG $+1
$SG195798 DB	'VCVBG   E652  VECTOR CONVERT TO BINARY', 00H
	ORG $+1
$SG195799 DB	'VCVD    E658  VECTOR CONVERT TO DECIMAL', 00H
$SG195800 DB	'VCVDG   E65A  VECTOR CONVERT TO DECIMAL', 00H
$SG195801 DB	'VDP     E67A  VECTOR DIVIDE DECIMAL', 00H
	ORG $+4
$SG195802 DB	'VLIP    E649  VECTOR LOAD IMMEDIATE DECIMAL', 00H
	ORG $+4
$SG195803 DB	'VLRL    E635  VECTOR LOAD RIGHTMOST WITH LENGTH', 00H
$SG195804 DB	'VLRLR   E637  VECTOR LOAD RIGHTMOST WITH LENGTH', 00H
$SG195805 DB	'VMSP    E679  VECTOR MULTIPLY AND SHIFT DECIMAL', 00H
$SG195806 DB	'VMP     E678  VECTOR MULTIPLY DECIMAL', 00H
	ORG $+2
$SG195807 DB	'VPKZ    E634  VECTOR PACK ZONED', 00H
$SG195808 DB	'VPSOP   E65B  VECTOR PERFORM SIGN OPERATION DECIMAL', 00H
	ORG $+4
$SG195809 DB	'VRP     E67B  VECTOR REMAINDER DECIMAL', 00H
	ORG $+1
$SG195810 DB	'VSDP    E67E  VECTOR SHIFT AND DIVIDE DECIMAL', 00H
	ORG $+2
$SG195811 DB	'VSRP    E659  VECTOR SHIFT AND ROUND DECIMAL', 00H
	ORG $+3
$SG195812 DB	'VSTRL   E63D  VECTOR STORE RIGHTMOST WITH LENGTH', 00H
	ORG $+7
$SG195813 DB	'VSTRLR  E63F  VECTOR STORE RIGHTMOST WITH LENGTH', 00H
	ORG $+7
$SG195814 DB	'VSP     E673  VECTOR SUBTRACT DECIMAL', 00H
	ORG $+2
$SG195815 DB	'VTP     E65F  VECTOR TEST DECIMAL', 00H
	ORG $+6
$SG195816 DB	'VUPKZ   E63C  VECTOR UNPACK ZONED', 00H
	ORG $+6
$SG195827 DB	'STCCTM  EB17  STORE CPU COUNTER MULTIPLE', 00H
	ORG $+7
$SG195838 DB	'TPEI    B9A1  TEST PENDING EXTERNAL INTERRUPTION', 00H
	ORG $+7
$SG195849 DB	'IRBM    B9AC  INSERT REFERENCE BITS MULTIPLE', 00H
	ORG $+3
$SG195860 DB	'KMA     B929  CIPHER MESSAGE WITH AUTHENTICATION', 00H
	ORG $+7
$SG195871 DB	'VBPERM  E785  VECTOR BIT PERMUTE', 00H
	ORG $+7
$SG195872 DB	'VFMAX   E7EF  VECTOR FP MAXIMUM', 00H
$SG195873 DB	'VFMIN   E7EE  VECTOR FP MINIMUM', 00H
$SG195874 DB	'VFNMA   E79F  VECTOR FP NEGATIVE MULTIPLY AND ADD', 00H
	ORG $+6
$SG195875 DB	'VFNMS   E79E  VECTOR FP NEGATIVE MULTIPLY AND SUBTRACT', 00H
	ORG $+1
$SG195876 DB	'VMSL    E7B8  VECTOR MULTIPLY SUM LOGICAL', 00H
	ORG $+6
$SG195877 DB	'VNN     E76E  VECTOR NAND', 00H
	ORG $+6
$SG195878 DB	'VNX     E76C  VECTOR NOT EXCLUSIVE OR', 00H
	ORG $+2
$SG195879 DB	'VOC     E76F  VECTOR OR WITH COMPLEMENT', 00H
$SG195890 DB	'SORTL   B938   SORT LISTS', 00H
	ORG $+6
$SG195901 DB	'DFLTCC  B939  DEFLATE CONVERSION CALL', 00H
	ORG $+2
$SG195912 DB	'KDSA    B93A  COMPUTE DIGITAL SIGNATURE AUTHENTICATION', 00H
	ORG $+1
$SG195923 DB	'NNPA    B93B  NEURAL NETWORK PROCESSING ASSIST', 00H
	ORG $+1
$SG195924 DB	'VCLFNH  E656  VECTOR FP CONVERT AND LENGTHEN FROM NNP HI'
	DB	'GH', 00H
	ORG $+5
$SG195925 DB	'VCLFNL  E65E  VECTOR FP CONVERT AND LENGTHEN FROM NNP LO'
	DB	'W', 00H
	ORG $+6
$SG195926 DB	'VCRNF   E675  VECTOR FP CONVERT AND ROUND TO NNP', 00H
	ORG $+7
$SG195927 DB	'VCFN    E65D  VECTOR FP CONVERT FROM NNP', 00H
	ORG $+7
$SG195928 DB	'VCNF    E655  VECTOR FP CONVERT TO NNP', 00H
	ORG $+1
$SG195939 DB	'VSCSHP  E67C  DECIMAL SCALE AND CONVERT AND SPLIT TO HFP'
	DB	00H
	ORG $+7
$SG195940 DB	'VSCHP   E674  DECIMAL SCALE AND CONVERT TO HFP', 00H
	ORG $+1
$SG195941 DB	'VCSPH   E67D  VECTOR CONVERT HFP TO SCALED DECIMAL', 00H
	ORG $+5
$SG195942 DB	'VCLZDP  E651  VECTOR COUNT LEADING ZERO DIGITS', 00H
	ORG $+1
$SG195943 DB	'VPKZR   E670  VECTOR PACK ZONED REGISTER', 00H
	ORG $+7
$SG195944 DB	'VSRPR   E672  VECTOR SHIFT AND ROUND DECIMAL REGISTER', 00H
	ORG $+2
$SG195945 DB	'VUPKZH  E654  VECTOR UNPACK ZONED HIGH', 00H
	ORG $+1
$SG195946 DB	'VUPKZL  E65C  VECTOR UNPACK ZONED LOW', 00H
	ORG $+2
$SG195957 DB	'LBEAR   B200  LOAD BEAR', 00H
$SG195958 DB	'LPSWEY  EB71  LOAD PSW EXTENDED', 00H
$SG195959 DB	'STBEAR  B201  STORE BEAR', 00H
	ORG $+7
$SG195970 DB	'RDP     B98B  RESET DAT PROTECTION', 00H
	ORG $+5
$SG195981 DB	'QPACI   B28F  QUERY PROCESSOR ACTIVITY COUNTER INFORMATI'
	DB	'ON', 00H
	ORG $+5
$SG195992 DB	'MVCIN E8 MOVE INVERSE', 00H
	ORG $+2
$SG196003 DB	'SVS B265 Set Vector Summary', 00H
	ORG $+4
$SG196014 DB	'ESSA    B9AB  EXTRACT AND SET STORAGE ATTRIBUTES', 00H
	ORG $+7
$SG196025 DB	'branch_and_set_mode', 00H
	ORG $+4
$SG196026 DB	'branch_and_save_and_set_mode', 00H
	ORG $+3
$SG196027 DB	'update_tree', 00H
	ORG $+4
$SG196028 DB	'compare_and_form_codeword', 00H
	ORG $+6
$SG196029 DB	'multiply_single', 00H
$SG196030 DB	'branch_relative_on_index_high', 00H
	ORG $+2
$SG196031 DB	'branch_relative_on_index_low_or_equal', 00H
	ORG $+2
$SG196032 DB	'move_long_extended', 00H
	ORG $+5
$SG196033 DB	'compare_logical_long_extended', 00H
	ORG $+2
$SG196034 DB	'insert_immediate_low_high', 00H
	ORG $+6
$SG196035 DB	'insert_immediate_low_low', 00H
	ORG $+7
$SG196036 DB	'and_immediate_low_high', 00H
	ORG $+1
$SG196037 DB	'and_immediate_low_low', 00H
	ORG $+2
$SG196038 DB	'or_immediate_low_high', 00H
	ORG $+2
$SG196039 DB	'or_immediate_low_low', 00H
	ORG $+3
$SG196040 DB	'load_logical_immediate_low_high', 00H
$SG196041 DB	'load_logical_immediate_low_low', 00H
	ORG $+1
$SG196042 DB	'test_under_mask_high', 00H
	ORG $+3
$SG196043 DB	'test_under_mask_low', 00H
	ORG $+4
$SG196044 DB	'branch_relative_on_condition', 00H
	ORG $+3
$SG196045 DB	'branch_relative_and_save', 00H
	ORG $+7
$SG196046 DB	'branch_relative_on_count', 00H
	ORG $+7
$SG196047 DB	'load_halfword_immediate', 00H
$SG196048 DB	'add_halfword_immediate', 00H
	ORG $+1
$SG196049 DB	'multiply_halfword_immediate', 00H
	ORG $+4
$SG196050 DB	'compare_halfword_immediate', 00H
	ORG $+5
$SG196051 DB	'checksum', 00H
	ORG $+7
$SG196052 DB	'squareroot_float_long_reg', 00H
	ORG $+6
$SG196053 DB	'squareroot_float_short_reg', 00H
	ORG $+5
$SG196054 DB	'multiply_single_register', 00H
	ORG $+7
$SG196055 DB	'move_string', 00H
	ORG $+4
$SG196056 DB	'compare_until_substring_equal', 00H
	ORG $+2
$SG196057 DB	'compare_logical_string', 00H
	ORG $+1
$SG196058 DB	'search_string', 00H
	ORG $+2
$SG196059 DB	'cmpsc_2012', 00H
	ORG $+5
$SG196060 DB	'set_bfp_rounding_mode_2bit', 00H
	ORG $+5
$SG196061 DB	'store_fpc', 00H
	ORG $+6
$SG196062 DB	'load_fpc', 00H
	ORG $+7
$SG196063 DB	'translate_extended', 00H
	ORG $+5
$SG196064 DB	'convert_utf16_to_utf8', 00H
	ORG $+2
$SG196065 DB	'convert_utf8_to_utf16', 00H
	ORG $+2
$SG196066 DB	'load_positive_bfp_short_reg', 00H
	ORG $+4
$SG196067 DB	'load_negative_bfp_short_reg', 00H
	ORG $+4
$SG196068 DB	'load_and_test_bfp_short_reg', 00H
	ORG $+4
$SG196069 DB	'load_complement_bfp_short_reg', 00H
	ORG $+2
$SG196070 DB	'load_lengthened_bfp_short_to_long_reg', 00H
	ORG $+2
$SG196071 DB	'load_lengthened_bfp_long_to_ext_reg', 00H
	ORG $+4
$SG196072 DB	'load_lengthened_bfp_short_to_ext_reg', 00H
	ORG $+3
$SG196073 DB	'multiply_bfp_long_to_ext_reg', 00H
	ORG $+3
$SG196074 DB	'compare_and_signal_bfp_short_reg', 00H
	ORG $+7
$SG196075 DB	'compare_bfp_short_reg', 00H
	ORG $+2
$SG196076 DB	'add_bfp_short_reg', 00H
	ORG $+6
$SG196077 DB	'subtract_bfp_short_reg', 00H
	ORG $+1
$SG196078 DB	'multiply_bfp_short_to_long_reg', 00H
	ORG $+1
$SG196079 DB	'divide_bfp_short_reg', 00H
	ORG $+3
$SG196080 DB	'multiply_add_bfp_short_reg', 00H
	ORG $+5
$SG196081 DB	'multiply_subtract_bfp_short_reg', 00H
$SG196082 DB	'load_positive_bfp_long_reg', 00H
	ORG $+5
$SG196083 DB	'load_negative_bfp_long_reg', 00H
	ORG $+5
$SG196084 DB	'load_and_test_bfp_long_reg', 00H
	ORG $+5
$SG196085 DB	'load_complement_bfp_long_reg', 00H
	ORG $+3
$SG196086 DB	'squareroot_bfp_short_reg', 00H
	ORG $+7
$SG196087 DB	'squareroot_bfp_long_reg', 00H
$SG196088 DB	'squareroot_bfp_ext_reg', 00H
	ORG $+1
$SG196089 DB	'multiply_bfp_short_reg', 00H
	ORG $+1
$SG196090 DB	'compare_and_signal_bfp_long_reg', 00H
$SG196091 DB	'compare_bfp_long_reg', 00H
	ORG $+3
$SG196092 DB	'add_bfp_long_reg', 00H
	ORG $+7
$SG196093 DB	'subtract_bfp_long_reg', 00H
	ORG $+2
$SG196094 DB	'multiply_bfp_long_reg', 00H
	ORG $+2
$SG196095 DB	'divide_bfp_long_reg', 00H
	ORG $+4
$SG196096 DB	'multiply_add_bfp_long_reg', 00H
	ORG $+6
$SG196097 DB	'multiply_subtract_bfp_long_reg', 00H
	ORG $+1
$SG196098 DB	'load_lengthened_float_short_to_long_reg', 00H
$SG196099 DB	'load_lengthened_float_long_to_ext_reg', 00H
	ORG $+2
$SG196100 DB	'load_lengthened_float_short_to_ext_reg', 00H
	ORG $+1
$SG196101 DB	'squareroot_float_ext_reg', 00H
	ORG $+7
$SG196102 DB	'multiply_float_short_reg', 00H
	ORG $+7
$SG196103 DB	'load_positive_bfp_ext_reg', 00H
	ORG $+6
$SG196104 DB	'load_negative_bfp_ext_reg', 00H
	ORG $+6
$SG196105 DB	'load_and_test_bfp_ext_reg', 00H
	ORG $+6
$SG196106 DB	'load_complement_bfp_ext_reg', 00H
	ORG $+4
$SG196107 DB	'load_rounded_bfp_long_to_short_reg', 00H
	ORG $+5
$SG196108 DB	'load_rounded_bfp_ext_to_long_reg', 00H
	ORG $+7
$SG196109 DB	'load_rounded_bfp_ext_to_short_reg', 00H
	ORG $+6
$SG196110 DB	'load_fp_int_bfp_ext_reg', 00H
$SG196111 DB	'compare_and_signal_bfp_ext_reg', 00H
	ORG $+1
$SG196112 DB	'compare_bfp_ext_reg', 00H
	ORG $+4
$SG196113 DB	'add_bfp_ext_reg', 00H
$SG196114 DB	'subtract_bfp_ext_reg', 00H
	ORG $+3
$SG196115 DB	'multiply_bfp_ext_reg', 00H
	ORG $+3
$SG196116 DB	'divide_bfp_ext_reg', 00H
	ORG $+5
$SG196117 DB	'convert_float_long_to_bfp_short_reg', 00H
	ORG $+4
$SG196118 DB	'convert_float_long_to_bfp_long_reg', 00H
	ORG $+5
$SG196119 DB	'divide_integer_bfp_short_reg', 00H
	ORG $+3
$SG196120 DB	'load_fp_int_bfp_short_reg', 00H
	ORG $+6
$SG196121 DB	'convert_bfp_short_to_float_long_reg', 00H
	ORG $+4
$SG196122 DB	'convert_bfp_long_to_float_long_reg', 00H
	ORG $+5
$SG196123 DB	'divide_integer_bfp_long_reg', 00H
	ORG $+4
$SG196124 DB	'load_fp_int_bfp_long_reg', 00H
	ORG $+7
$SG196125 DB	'load_positive_float_ext_reg', 00H
	ORG $+4
$SG196126 DB	'load_negative_float_ext_reg', 00H
	ORG $+4
$SG196127 DB	'load_and_test_float_ext_reg', 00H
	ORG $+4
$SG196128 DB	'load_complement_float_ext_reg', 00H
	ORG $+2
$SG196129 DB	'load_float_ext_reg', 00H
	ORG $+5
$SG196130 DB	'load_rounded_float_ext_to_short_reg', 00H
	ORG $+4
$SG196131 DB	'load_fp_int_float_ext_reg', 00H
	ORG $+6
$SG196132 DB	'compare_float_ext_reg', 00H
	ORG $+2
$SG196133 DB	'load_zero_float_short_reg', 00H
	ORG $+6
$SG196134 DB	'load_zero_float_long_reg', 00H
	ORG $+7
$SG196135 DB	'load_zero_float_ext_reg', 00H
$SG196136 DB	'load_fp_int_float_short_reg', 00H
	ORG $+4
$SG196137 DB	'load_fp_int_float_long_reg', 00H
	ORG $+5
$SG196138 DB	'set_fpc', 00H
$SG196139 DB	'extract_fpc', 00H
	ORG $+4
$SG196140 DB	'convert_fix32_to_bfp_short_reg', 00H
	ORG $+1
$SG196141 DB	'convert_fix32_to_bfp_long_reg', 00H
	ORG $+2
$SG196142 DB	'convert_fix32_to_bfp_ext_reg', 00H
	ORG $+3
$SG196143 DB	'convert_bfp_short_to_fix32_reg', 00H
	ORG $+1
$SG196144 DB	'convert_bfp_long_to_fix32_reg', 00H
	ORG $+2
$SG196145 DB	'convert_bfp_ext_to_fix32_reg', 00H
	ORG $+3
$SG196146 DB	'convert_fixed_to_float_short_reg', 00H
	ORG $+7
$SG196147 DB	'convert_fixed_to_float_long_reg', 00H
$SG196148 DB	'convert_fixed_to_float_ext_reg', 00H
	ORG $+1
$SG196149 DB	'convert_float_short_to_fixed_reg', 00H
	ORG $+7
$SG196150 DB	'convert_float_long_to_fixed_reg', 00H
$SG196151 DB	'convert_float_ext_to_fixed_reg', 00H
	ORG $+1
$SG196152 DB	'load_lengthened_bfp_short_to_long', 00H
	ORG $+6
$SG196153 DB	'load_lengthened_bfp_long_to_ext', 00H
$SG196154 DB	'load_lengthened_bfp_short_to_ext', 00H
	ORG $+7
$SG196155 DB	'multiply_bfp_long_to_ext', 00H
	ORG $+7
$SG196156 DB	'compare_and_signal_bfp_short', 00H
	ORG $+3
$SG196157 DB	'compare_bfp_short', 00H
	ORG $+6
$SG196158 DB	'add_bfp_short', 00H
	ORG $+2
$SG196159 DB	'subtract_bfp_short', 00H
	ORG $+5
$SG196160 DB	'multiply_bfp_short_to_long', 00H
	ORG $+5
$SG196161 DB	'divide_bfp_short', 00H
	ORG $+7
$SG196162 DB	'multiply_add_bfp_short', 00H
	ORG $+1
$SG196163 DB	'multiply_subtract_bfp_short', 00H
	ORG $+4
$SG196164 DB	'test_data_class_bfp_short', 00H
	ORG $+6
$SG196165 DB	'test_data_class_bfp_long', 00H
	ORG $+7
$SG196166 DB	'test_data_class_bfp_ext', 00H
$SG196167 DB	'squareroot_bfp_short', 00H
	ORG $+3
$SG196168 DB	'squareroot_bfp_long', 00H
	ORG $+4
$SG196169 DB	'multiply_bfp_short', 00H
	ORG $+5
$SG196170 DB	'compare_and_signal_bfp_long', 00H
	ORG $+4
$SG196171 DB	'compare_bfp_long', 00H
	ORG $+7
$SG196172 DB	'add_bfp_long', 00H
	ORG $+3
$SG196173 DB	'subtract_bfp_long', 00H
	ORG $+6
$SG196174 DB	'multiply_bfp_long', 00H
	ORG $+6
$SG196175 DB	'divide_bfp_long', 00H
$SG196176 DB	'multiply_add_bfp_long', 00H
	ORG $+2
$SG196177 DB	'multiply_subtract_bfp_long', 00H
	ORG $+5
$SG196178 DB	'load_lengthened_float_short_to_long', 00H
	ORG $+4
$SG196179 DB	'load_lengthened_float_long_to_ext', 00H
	ORG $+6
$SG196180 DB	'load_lengthened_float_short_to_ext', 00H
	ORG $+5
$SG196181 DB	'squareroot_float_short', 00H
	ORG $+1
$SG196182 DB	'squareroot_float_long', 00H
	ORG $+2
$SG196183 DB	'multiply_float_short', 00H
	ORG $+3
$SG196194 DB	'TCPIP   75    TCPIP', 00H
	ORG $+4
$SG196227 DB	'facility enable %d', 00H
	ORG $+5
$SG196229 DB	'enable_disable_herc37X', 00H
	ORG $+1
$SG196230 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG196233 DB	'enable_disable_herc37X', 00H
	ORG $+1
$SG196231 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG196234 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG196237 DB	'facility disable %d', 00H
	ORG $+4
$SG196235 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG196239 DB	'enable_disable_herc37X', 00H
	ORG $+1
$SG196240 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG196241 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG196243 DB	'enable_disable_herc37X', 00H
	ORG $+1
$SG196244 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG196245 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG196289 DB	'facility_enable_disable', 00H
$SG196288 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+6
$SG196290 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG196293 DB	'ENABLE', 00H
	ORG $+5
$SG196296 DB	'DISABLE', 00H
$SG196297 DB	'; use ''ENABLE'' or ''DISABLE''', 00H
	ORG $+4
$SG196299 DB	'HHC02205%s Invalid argument %s%s', 0aH, 00H
	ORG $+6
$SG196300 DB	'facility_enable_disable', 00H
$SG196301 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG196305 DB	'facility_enable_disable', 00H
$SG196304 DB	'HHC00889%s Available facilities cannot be changed once s'
	DB	'ystem is IPLed', 0aH, 00H
$SG196306 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG196308 DB	'to ENABLE or DISABLE a facility', 00H
$SG196310 DB	'HHC02253%s All CPU''s must be stopped %s', 0aH, 00H
	ORG $+7
$SG196311 DB	'facility_enable_disable', 00H
$SG196312 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG196317 DB	'HHC00895%s ARCHLVL ''%s'' is invalid', 0aH, 00H
	ORG $+4
$SG196318 DB	'facility_enable_disable', 00H
$SG196319 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG196326 DB	'%d%c', 00H
	ORG $+7
$SG196328 DB	'HHC00892%s Facility( %s ) does not exist for %s', 0aH, 00H
	ORG $+7
$SG196329 DB	'facility_enable_disable', 00H
$SG196330 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG196333 DB	'HHC00896%s Facility( %s ) not supported for %s', 0aH, 00H
$SG196334 DB	'facility_enable_disable', 00H
$SG196335 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG196337 DB	'enable', 00H
	ORG $+5
$SG196338 DB	'disable', 00H
$SG196339 DB	'enabling', 00H
	ORG $+7
$SG196340 DB	'disabling', 00H
	ORG $+6
$SG196341 DB	'DISABLING', 00H
	ORG $+6
$SG196342 DB	'ENABLING', 00H
	ORG $+7
$SG196346 DB	'HHC00897%s Facility( %s ) is required for %s', 0aH, 00H
	ORG $+2
$SG196347 DB	'facility_enable_disable', 00H
$SG196348 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG196356 DB	'Enabled', 00H
$SG196357 DB	'Disabled', 00H
	ORG $+7
$SG196360 DB	'HHC00898%s Facility( %s ) %s%s for %s', 0aH, 00H
	ORG $+1
$SG196361 DB	'facility_enable_disable', 00H
$SG196362 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG196382 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+6
$SG196383 DB	'facility_cmd', 00H
	ORG $+3
$SG196384 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+2
$SG196386 DB	'QUERY', 00H
	ORG $+2
$SG196389 DB	'ENABLE', 00H
	ORG $+5
$SG196390 DB	'DISABLE', 00H
$SG196393 DB	'HHC00889%s Available facilities cannot be changed once s'
	DB	'ystem is IPLed', 0aH, 00H
$SG196394 DB	'facility_cmd', 00H
	ORG $+3
$SG196395 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG196397 DB	'to modify a facility', 00H
	ORG $+3
$SG196399 DB	'HHC02253%s All CPU''s must be stopped %s', 0aH, 00H
	ORG $+7
$SG196400 DB	'facility_cmd', 00H
	ORG $+3
$SG196401 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
	ORG $+6
$SG196403 DB	'HHC02299%s Invalid command usage. Type ''help %s'' for a'
	DB	'ssistance.', 0aH, 00H
	ORG $+6
$SG196404 DB	'facility_cmd', 00H
	ORG $+3
$SG196405 DB	'C:\papa\MyGit\hyperion-zvector\facility.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:enable_disable_herc37X
	DD	01bH
	DD	0236H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:facility_query_raw
	DD	018H
	DD	0462H
voltbl	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$strcaseabbrev DD 011301H
	DD	08213H
$unwind$strupper DD 010e01H
	DD	0620eH
$unwind$Interrupt_Lock_Obtained DD 010e01H
	DD	0420eH
$unwind$Obtain_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$Release_Interrupt_Lock DD 010e01H
	DD	0420eH
$unwind$are_any_cpus_started_intlock_held DD 010401H
	DD	02204H
$unwind$are_any_cpus_started DD 010401H
	DD	06204H
$unwind$init_facilities_lists DD 020701H
	DD	0190107H
$unwind$init_cpu_facilities DD 010901H
	DD	02209H
$unwind$facility_query DD 021001H
	DD	0210110H
$unwind$facility_enable_disable DD 021001H
	DD	0270110H
$unwind$s370_facility_not_enabled DD 010e01H
	DD	0420eH
$unwind$s390_facility_not_enabled DD 010e01H
	DD	0420eH
$unwind$z900_facility_not_enabled DD 010e01H
	DD	0420eH
$unwind$mod000 DD 011601H
	DD	0a216H
$unwind$mod002 DD 011601H
	DD	0a216H
$unwind$mod003 DD 011601H
	DD	0c216H
$unwind$mod004 DD 011601H
	DD	0c216H
$unwind$mod005 DD 011601H
	DD	0c216H
$unwind$mod007 DD 011601H
	DD	0a216H
$unwind$mod008 DD 011601H
	DD	0a216H
$unwind$mod010 DD 011601H
	DD	0a216H
$unwind$mod014 DD 011601H
	DD	0c216H
$unwind$mod018 DD 011601H
	DD	0a216H
$unwind$mod019 DD 011601H
	DD	0a216H
$unwind$mod025 DD 011601H
	DD	0a216H
$unwind$mod028 DD 011601H
	DD	0a216H
$unwind$mod037 DD 011601H
	DD	0a216H
$unwind$mod040 DD 011601H
	DD	0a216H
$unwind$mod042 DD 011601H
	DD	0c216H
$unwind$mod043 DD 011601H
	DD	0a216H
$unwind$mod045 DD 011601H
	DD	0a216H
$unwind$mod048 DD 011601H
	DD	0a216H
$unwind$mod049 DD 011601H
	DD	0c216H
$unwind$mod050 DD 011601H
	DD	0a216H
$unwind$mod051 DD 011601H
	DD	0a216H
$unwind$mod061 DD 011601H
	DD	0a216H
$unwind$mod066 DD 011601H
	DD	0a216H
$unwind$mod067 DD 011601H
	DD	0c216H
$unwind$mod068 DD 011601H
	DD	0c216H
$unwind$mod073 DD 011601H
	DD	0c216H
$unwind$mod076 DD 011601H
	DD	0c216H
$unwind$mod077 DD 011601H
	DD	0a216H
$unwind$mod078 DD 011601H
	DD	0a216H
$unwind$mod080 DD 011601H
	DD	0a216H
$unwind$mod081 DD 011601H
	DD	0a216H
$unwind$mod129 DD 021901H
	DD	0130119H
$unwind$mod134 DD 011601H
	DD	0e216H
$unwind$mod135 DD 011601H
	DD	0c216H
$unwind$mod139 DD 011601H
	DD	0c216H
$unwind$mod142 DD 011601H
	DD	0a216H
$unwind$mod145 DD 011601H
	DD	0a216H
$unwind$mod146 DD 011601H
	DD	0a216H
$unwind$mod148 DD 011601H
	DD	0c216H
$unwind$mod149 DD 011601H
	DD	0a216H
$unwind$mod152 DD 011601H
	DD	0e216H
$unwind$mod155 DD 011601H
	DD	0c216H
$unwind$mod165 DD 011601H
	DD	0a216H
$unwind$mod168 DD 011601H
	DD	0a216H
$unwind$mod169 DD 021901H
	DD	0110119H
$unwind$mod192 DD 011601H
	DD	0e216H
$unwind$mod194 DD 011601H
	DD	0a216H
$unwind$mod196 DD 011601H
	DD	0a216H
$unwind$mod197 DD 011601H
	DD	0a216H
$unwind$modtcp DD 011601H
	DD	0c216H
$unwind$instr0 DD 010c01H
	DD	0420cH
$unwind$instr3 DD 010c01H
	DD	0420cH
$unwind$instr6 DD 010c01H
	DD	0420cH
$unwind$instr7 DD 010c01H
	DD	0420cH
$unwind$instr8 DD 010c01H
	DD	0420cH
$unwind$instr11 DD 010c01H
	DD	0420cH
$unwind$instr16 DD 010c01H
	DD	0420cH
$unwind$instr17 DD 010c01H
	DD	0420cH
$unwind$instr18 DD 010c01H
	DD	0420cH
$unwind$instr20 DD 010c01H
	DD	0420cH
$unwind$instr21 DD 010c01H
	DD	0420cH
$unwind$instr22 DD 010c01H
	DD	0420cH
$unwind$instr23 DD 010c01H
	DD	0420cH
$unwind$instr25 DD 010c01H
	DD	0420cH
$unwind$instr26 DD 010c01H
	DD	0420cH
$unwind$instr27 DD 010c01H
	DD	0420cH
$unwind$instr28 DD 010c01H
	DD	0420cH
$unwind$instr31 DD 010c01H
	DD	0420cH
$unwind$instr32 DD 010c01H
	DD	0420cH
$unwind$instr34 DD 010c01H
	DD	0420cH
$unwind$instr35 DD 010c01H
	DD	0420cH
$unwind$instr37 DD 010c01H
	DD	0420cH
$unwind$instr40 DD 010c01H
	DD	0420cH
$unwind$instr41 DD 010c01H
	DD	0420cH
$unwind$instr42 DD 010c01H
	DD	0420cH
$unwind$instr44 DD 010c01H
	DD	0420cH
$unwind$instr45 DD 010c01H
	DD	0420cH
$unwind$instr48 DD 010c01H
	DD	0420cH
$unwind$instr49 DD 010c01H
	DD	0420cH
$unwind$instr50 DD 010c01H
	DD	0420cH
$unwind$instr53 DD 010c01H
	DD	0420cH
$unwind$instr57 DD 010c01H
	DD	0420cH
$unwind$instr58 DD 010c01H
	DD	0420cH
$unwind$instr61 DD 010c01H
	DD	0420cH
$unwind$instr66 DD 010c01H
	DD	0420cH
$unwind$instr67 DD 010c01H
	DD	0420cH
$unwind$instr68 DD 010c01H
	DD	0420cH
$unwind$instr73 DD 010c01H
	DD	0420cH
$unwind$instr74 DD 010c01H
	DD	0420cH
$unwind$instr76 DD 010c01H
	DD	0420cH
$unwind$instr77 DD 010c01H
	DD	0420cH
$unwind$instr78 DD 010c01H
	DD	0420cH
$unwind$instr80 DD 010c01H
	DD	0420cH
$unwind$instr129 DD 010c01H
	DD	0420cH
$unwind$instr133 DD 010c01H
	DD	0420cH
$unwind$instr134 DD 010c01H
	DD	0420cH
$unwind$instr142 DD 010c01H
	DD	0420cH
$unwind$instr144 DD 010c01H
	DD	0420cH
$unwind$instr145 DD 010c01H
	DD	0420cH
$unwind$instr146 DD 010c01H
	DD	0420cH
$unwind$instr148 DD 010c01H
	DD	0420cH
$unwind$instr150 DD 010c01H
	DD	0420cH
$unwind$instr151 DD 010c01H
	DD	0420cH
$unwind$instr155 DD 010c01H
	DD	0420cH
$unwind$instr165 DD 010c01H
	DD	0420cH
$unwind$instr192 DD 010c01H
	DD	0420cH
$unwind$instr193 DD 010c01H
	DD	0420cH
$unwind$instr194 DD 010c01H
	DD	0420cH
$unwind$instr196 DD 010c01H
	DD	0420cH
$unwind$hercmvcin DD 010c01H
	DD	0420cH
$unwind$hercsvs DD 010c01H
	DD	0420cH
$unwind$herc37X DD 010c01H
	DD	0420cH
$unwind$herctcp DD 010c01H
	DD	0420cH
$unwind$hercessa DD 010c01H
	DD	0420cH
$unwind$get_factab_by_bitno DD 010801H
	DD	02208H
$unwind$get_factab_by_name DD 010901H
	DD	06209H
$unwind$get_facname_by_bitno DD 010d01H
	DD	0620dH
$unwind$sort_ftpp_by_bit_number DD 010e01H
	DD	0820eH
$unwind$sort_ftpp_by_long_name DD 010e01H
	DD	0820eH
$unwind$facility_query_all DD 021501H
	DD	0230115H
$unwind$facility_query_raw DD 042019H
	DD	025010eH
	DD	030067007H
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$_hhc00890e DD 021a01H
	DD	011011aH
$unwind$ena_fac_ins DD 010d01H
	DD	0620dH
$unwind$dis_fac_ins DD 011701H
	DD	06217H
$unwind$enable_disable_herc37X DD 022319H
	DD	04290111H
	DD	imagerel __GSHandlerCheck
	DD	02130H
$unwind$facility_cmd DD 011201H
	DD	0c212H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv134 = 64
rc$1 = 68
tv78 = 72
tv179 = 80
argc$ = 112
argv$ = 120
cmdline$ = 128
facility_cmd PROC

; 4629 : {

$LN19:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@facility_c:

; 4630 :     UNREFERENCED( cmdline );

  00012	33 c0		 xor	 eax, eax
  00014	85 c0		 test	 eax, eax
  00016	75 fa		 jne	 SHORT $LN4@facility_c
$LN7@facility_c:

; 4631 : 
; 4632 :     UPPER_ARGV_0( argv );

  00018	48 83 7c 24 78
	00		 cmp	 QWORD PTR argv$[rsp], 0
  0001e	74 3e		 je	 SHORT $LN8@facility_c
  00020	b8 08 00 00 00	 mov	 eax, 8
  00025	48 6b c0 00	 imul	 rax, rax, 0
  00029	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0002e	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00033	74 29		 je	 SHORT $LN8@facility_c
  00035	b8 08 00 00 00	 mov	 eax, 8
  0003a	48 6b c0 00	 imul	 rax, rax, 0
  0003e	b9 08 00 00 00	 mov	 ecx, 8
  00043	48 6b c9 00	 imul	 rcx, rcx, 0
  00047	48 8b 54 24 78	 mov	 rdx, QWORD PTR argv$[rsp]
  0004c	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00050	48 8b 44 24 78	 mov	 rax, QWORD PTR argv$[rsp]
  00055	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00059	e8 00 00 00 00	 call	 strupper
$LN8@facility_c:
  0005e	33 c0		 xor	 eax, eax
  00060	85 c0		 test	 eax, eax
  00062	75 b4		 jne	 SHORT $LN7@facility_c

; 4633 : 
; 4634 :     /* Correct number of arguments? */
; 4635 : 
; 4636 :     if (argc < 3 || argc > 4)

  00064	83 7c 24 70 03	 cmp	 DWORD PTR argc$[rsp], 3
  00069	7c 07		 jl	 SHORT $LN10@facility_c
  0006b	83 7c 24 70 04	 cmp	 DWORD PTR argc$[rsp], 4
  00070	7e 72		 jle	 SHORT $LN9@facility_c
$LN10@facility_c:

; 4637 :     {
; 4638 :         // "Invalid command usage. Type 'help %s' for assistance."
; 4639 :         WRMSG( HHC02299, "E", argv[0] );

  00072	b8 08 00 00 00	 mov	 eax, 8
  00077	48 6b c0 00	 imul	 rax, rax, 0
  0007b	48 89 44 24 48	 mov	 QWORD PTR tv78[rsp], rax
  00080	b9 01 00 00 00	 mov	 ecx, 1
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0008b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00090	48 8b 54 24 48	 mov	 rdx, QWORD PTR tv78[rsp]
  00095	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00099	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196381
  000a5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196382
  000b1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000b6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000bb	41 b9 03 00 00
	00		 mov	 r9d, 3
  000c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196383
  000c8	ba 1f 12 00 00	 mov	 edx, 4639		; 0000121fH
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196384
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4640 :         return -1;

  000da	b8 ff ff ff ff	 mov	 eax, -1
  000df	e9 04 02 00 00	 jmp	 $LN1@facility_c
$LN9@facility_c:

; 4641 :     }
; 4642 : 
; 4643 :     /*-----------------------------------------------------*/
; 4644 :     /*                Query Facility?                      */
; 4645 :     /*-----------------------------------------------------*/
; 4646 : 
; 4647 :     if (CMD( argv[1], QUERY, 1 ))

  000e4	b8 08 00 00 00	 mov	 eax, 8
  000e9	48 6b c0 01	 imul	 rax, rax, 1
  000ed	41 b8 01 00 00
	00		 mov	 r8d, 1
  000f3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  000f8	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196386
  00103	e8 00 00 00 00	 call	 strcaseabbrev
  00108	85 c0		 test	 eax, eax
  0010a	74 38		 je	 SHORT $LN11@facility_c

; 4648 :     {
; 4649 :         int rc = facility_query( argc, argv ) ? 0 : -1;

  0010c	48 8b 54 24 78	 mov	 rdx, QWORD PTR argv$[rsp]
  00111	8b 4c 24 70	 mov	 ecx, DWORD PTR argc$[rsp]
  00115	e8 00 00 00 00	 call	 facility_query
  0011a	0f b6 c0	 movzx	 eax, al
  0011d	85 c0		 test	 eax, eax
  0011f	74 0a		 je	 SHORT $LN17@facility_c
  00121	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv134[rsp], 0
  00129	eb 08		 jmp	 SHORT $LN18@facility_c
$LN17@facility_c:
  0012b	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR tv134[rsp], -1
$LN18@facility_c:
  00133	8b 44 24 40	 mov	 eax, DWORD PTR tv134[rsp]
  00137	89 44 24 44	 mov	 DWORD PTR rc$1[rsp], eax

; 4650 :         return rc;

  0013b	8b 44 24 44	 mov	 eax, DWORD PTR rc$1[rsp]
  0013f	e9 a4 01 00 00	 jmp	 $LN1@facility_c
$LN11@facility_c:

; 4651 :     }
; 4652 : 
; 4653 :     /*-----------------------------------------------------*/
; 4654 :     /*             Enable/Disable Facility?                */
; 4655 :     /*-----------------------------------------------------*/
; 4656 : 
; 4657 :     if (0
; 4658 :         || CMD( argv[1], ENABLE,  3 )
; 4659 :         || CMD( argv[1], DISABLE, 3 )

  00144	33 c0		 xor	 eax, eax
  00146	85 c0		 test	 eax, eax
  00148	75 54		 jne	 SHORT $LN13@facility_c
  0014a	b8 08 00 00 00	 mov	 eax, 8
  0014f	48 6b c0 01	 imul	 rax, rax, 1
  00153	41 b8 03 00 00
	00		 mov	 r8d, 3
  00159	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  0015e	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196389
  00169	e8 00 00 00 00	 call	 strcaseabbrev
  0016e	85 c0		 test	 eax, eax
  00170	75 2c		 jne	 SHORT $LN13@facility_c
  00172	b8 08 00 00 00	 mov	 eax, 8
  00177	48 6b c0 01	 imul	 rax, rax, 1
  0017b	41 b8 03 00 00
	00		 mov	 r8d, 3
  00181	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00186	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0018a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196390
  00191	e8 00 00 00 00	 call	 strcaseabbrev
  00196	85 c0		 test	 eax, eax
  00198	0f 84 dd 00 00
	00		 je	 $LN12@facility_c
$LN13@facility_c:

; 4660 :     )
; 4661 :     {
; 4662 :         if (sysblk.ipled)

  0019e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001a5	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  001ab	d1 e8		 shr	 eax, 1
  001ad	83 e0 01	 and	 eax, 1
  001b0	85 c0		 test	 eax, eax
  001b2	74 51		 je	 SHORT $LN14@facility_c

; 4663 :         {
; 4664 :             // "Available facilities cannot be changed once system is IPLed"
; 4665 :             WRMSG( HHC00889, "E" );

  001b4	b9 01 00 00 00	 mov	 ecx, 1
  001b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196392
  001c6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196393
  001d2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001d7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001dc	41 b9 03 00 00
	00		 mov	 r9d, 3
  001e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196394
  001e9	ba 39 12 00 00	 mov	 edx, 4665		; 00001239H
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196395
  001f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4666 :             return -1;

  001fb	b8 ff ff ff ff	 mov	 eax, -1
  00200	e9 e3 00 00 00	 jmp	 $LN1@facility_c
$LN14@facility_c:

; 4667 :         }
; 4668 : 
; 4669 :         if (are_any_cpus_started())

  00205	e8 00 00 00 00	 call	 are_any_cpus_started
  0020a	0f b6 c0	 movzx	 eax, al
  0020d	85 c0		 test	 eax, eax
  0020f	74 5a		 je	 SHORT $LN15@facility_c

; 4670 :         {
; 4671 :             // "All CPU's must be stopped %s"
; 4672 :             WRMSG( HHC02253, "E", "to modify a facility" );

  00211	b9 01 00 00 00	 mov	 ecx, 1
  00216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0021c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196397
  00223	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00228	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196398
  0022f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00234	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196399
  0023b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00240	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00245	41 b9 03 00 00
	00		 mov	 r9d, 3
  0024b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196400
  00252	ba 40 12 00 00	 mov	 edx, 4672		; 00001240H
  00257	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196401
  0025e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4673 :             return HERRCPUONL;

  00264	b8 fd ff ff ff	 mov	 eax, -3
  00269	eb 7d		 jmp	 SHORT $LN1@facility_c
$LN15@facility_c:

; 4674 :         }
; 4675 :         return facility_enable_disable( argc, argv );

  0026b	48 8b 54 24 78	 mov	 rdx, QWORD PTR argv$[rsp]
  00270	8b 4c 24 70	 mov	 ecx, DWORD PTR argc$[rsp]
  00274	e8 00 00 00 00	 call	 facility_enable_disable
  00279	eb 6d		 jmp	 SHORT $LN1@facility_c
$LN12@facility_c:

; 4676 :     }
; 4677 : 
; 4678 :     // "Invalid command usage. Type 'help %s' for assistance."
; 4679 :     WRMSG( HHC02299, "E", argv[0] );

  0027b	b8 08 00 00 00	 mov	 eax, 8
  00280	48 6b c0 00	 imul	 rax, rax, 0
  00284	48 89 44 24 50	 mov	 QWORD PTR tv179[rsp], rax
  00289	b9 01 00 00 00	 mov	 ecx, 1
  0028e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00294	48 8b 4c 24 78	 mov	 rcx, QWORD PTR argv$[rsp]
  00299	48 8b 54 24 50	 mov	 rdx, QWORD PTR tv179[rsp]
  0029e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  002a2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196402
  002ae	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196403
  002ba	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002bf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002c4	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196404
  002d1	ba 47 12 00 00	 mov	 edx, 4679		; 00001247H
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196405
  002dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4680 :     return -1;

  002e3	b8 ff ff ff ff	 mov	 eax, -1
$LN1@facility_c:

; 4681 : }

  002e8	48 83 c4 68	 add	 rsp, 104		; 00000068H
  002ec	c3		 ret	 0
facility_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
i$ = 32
argc$ = 36
orig_msglvl$ = 40
argv$ = 48
cmdbuf$ = 8240
__$ArrayPad$ = 8496
enable$ = 8528
enable_disable_herc37X PROC

; 4375 : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	b8 48 21 00 00	 mov	 eax, 8520		; 00002148H
  00009	e8 00 00 00 00	 call	 __chkstk
  0000e	48 2b e0	 sub	 rsp, rax
  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00018	48 33 c4	 xor	 rax, rsp
  0001b	48 89 84 24 30
	21 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 4376 :     unsigned int orig_msglvl;
; 4377 :     char   cmdbuf[ 256 ];
; 4378 :     char*  argv[ MAX_ARGS ];
; 4379 :     int    argc, i;
; 4380 :     static const int facils[] =      /* List of dependent facilities */
; 4381 :     {
; 4382 :         STFL_000_N3_INSTR,
; 4383 :         STFL_016_EXT_TRANSL_2,
; 4384 :         STFL_017_MSA,
; 4385 :         STFL_018_LONG_DISPL_INST,
; 4386 :         STFL_020_HFP_MULT_ADD_SUB,
; 4387 :         STFL_021_EXTENDED_IMMED,
; 4388 :         STFL_022_EXT_TRANSL_3,
; 4389 :         STFL_023_HFP_UNNORM_EXT,
; 4390 :         STFL_026_PARSING_ENHANCE,
; 4391 :         STFL_032_CSSF,
; 4392 :         STFL_034_GEN_INST_EXTN,
; 4393 :         STFL_035_EXECUTE_EXTN,
; 4394 : 
; 4395 :         // 42 must be enabled BEFORE 37 or disabled AFTER 37
; 4396 :         STFL_042_DFP,
; 4397 :         STFL_037_FP_EXTENSION,
; 4398 : 
; 4399 :         STFL_041_FPS_ENHANCEMENT,
; 4400 :         STFL_041_DFP_ROUNDING,
; 4401 :         STFL_041_FPR_GR_TRANSFER,
; 4402 :         STFL_041_FPS_SIGN_HANDLING,
; 4403 :         STFL_041_IEEE_EXCEPT_SIM,
; 4404 : //      STFL_042_DFP,
; 4405 :         STFL_045_DISTINCT_OPERANDS,
; 4406 :         STFL_045_FAST_BCR_SERIAL,
; 4407 :         STFL_045_HIGH_WORD,
; 4408 :         STFL_045_INTERLOCKED_ACCESS_1,
; 4409 :         STFL_045_LOAD_STORE_ON_COND_1,
; 4410 :         STFL_045_POPULATION_COUNT,
; 4411 :         STFL_076_MSA_EXTENSION_3,
; 4412 :         STFL_077_MSA_EXTENSION_4,
; 4413 :     };
; 4414 : 
; 4415 :     /* Temporarily suppress logging */
; 4416 :     orig_msglvl = sysblk.msglvl;

  00023	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002a	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00030	89 44 24 28	 mov	 DWORD PTR orig_msglvl$[rsp], eax

; 4417 :     sysblk.msglvl &= ~MLVL_VERBOSE;

  00034	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0003b	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00041	0f ba f0 1f	 btr	 eax, 31
  00045	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004c	89 81 80 75 01
	00		 mov	 DWORD PTR [rcx+95616], eax

; 4418 : 
; 4419 :     /* Enable / disable all dependent facilities in the proper order */
; 4420 :     if (enable)

  00052	0f b6 84 24 50
	21 00 00	 movzx	 eax, BYTE PTR enable$[rsp]
  0005a	85 c0		 test	 eax, eax
  0005c	0f 84 e4 00 00
	00		 je	 $LN20@enable_dis

; 4421 :     {
; 4422 :         for (i=0; i < (int) _countof( facils ); ++i)

  00062	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0006a	eb 0a		 jmp	 SHORT $LN4@enable_dis
$LN2@enable_dis:
  0006c	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00070	ff c0		 inc	 eax
  00072	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@enable_dis:
  00076	83 7c 24 20 1b	 cmp	 DWORD PTR i$[rsp], 27
  0007b	0f 8d c0 00 00
	00		 jge	 $LN3@enable_dis

; 4423 :         {
; 4424 :             MSGBUF( cmdbuf, "facility enable %d", facils[i] );

  00081	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?facils@?1??enable_disable_herc37X@@9@9
  0008d	44 8b 0c 81	 mov	 r9d, DWORD PTR [rcx+rax*4]
  00091	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196227
  00098	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0009d	48 8d 8c 24 30
	20 00 00	 lea	 rcx, QWORD PTR cmdbuf$[rsp]
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4425 :             parse_args( cmdbuf, MAX_ARGS, argv, &argc );

  000ab	4c 8d 4c 24 24	 lea	 r9, QWORD PTR argc$[rsp]
  000b0	4c 8d 44 24 30	 lea	 r8, QWORD PTR argv$[rsp]
  000b5	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  000ba	48 8d 8c 24 30
	20 00 00	 lea	 rcx, QWORD PTR cmdbuf$[rsp]
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_parse_args
$LN7@enable_dis:

; 4426 :             VERIFY( facility_enable_disable( argc, argv ) == 0);

  000c8	48 8d 54 24 30	 lea	 rdx, QWORD PTR argv$[rsp]
  000cd	8b 4c 24 24	 mov	 ecx, DWORD PTR argc$[rsp]
  000d1	e8 00 00 00 00	 call	 facility_enable_disable
  000d6	85 c0		 test	 eax, eax
  000d8	74 5c		 je	 SHORT $LN22@enable_dis
$LN10@enable_dis:
  000da	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196229
  000e1	41 b8 4a 11 00
	00		 mov	 r8d, 4426		; 0000114aH
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG196230
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196231
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00101	85 c0		 test	 eax, eax
  00103	74 20		 je	 SHORT $LN23@enable_dis
  00105	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196233
  0010c	41 b8 4a 11 00
	00		 mov	 r8d, 4426		; 0000114aH
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG196234
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196235
  00120	e8 00 00 00 00	 call	 DebuggerTrace
$LN23@enable_dis:
  00125	33 c0		 xor	 eax, eax
  00127	85 c0		 test	 eax, eax
  00129	75 af		 jne	 SHORT $LN10@enable_dis
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00131	85 c0		 test	 eax, eax
  00133	74 01		 je	 SHORT $LN24@enable_dis
  00135	cc		 int	 3
$LN24@enable_dis:
$LN22@enable_dis:
  00136	33 c0		 xor	 eax, eax
  00138	85 c0		 test	 eax, eax
  0013a	75 8c		 jne	 SHORT $LN7@enable_dis

; 4427 :         }

  0013c	e9 2b ff ff ff	 jmp	 $LN2@enable_dis
$LN3@enable_dis:

; 4428 :     }

  00141	e9 df 00 00 00	 jmp	 $LN21@enable_dis
$LN20@enable_dis:

; 4429 :     else // disable
; 4430 :     {
; 4431 :         for (i = _countof( facils ) - 1; i >= 0; --i)

  00146	c7 44 24 20 1a
	00 00 00	 mov	 DWORD PTR i$[rsp], 26
  0014e	eb 0a		 jmp	 SHORT $LN13@enable_dis
$LN11@enable_dis:
  00150	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00154	ff c8		 dec	 eax
  00156	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN13@enable_dis:
  0015a	83 7c 24 20 00	 cmp	 DWORD PTR i$[rsp], 0
  0015f	0f 8c c0 00 00
	00		 jl	 $LN12@enable_dis

; 4432 :         {
; 4433 :             MSGBUF( cmdbuf, "facility disable %d", facils[i] );

  00165	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0016a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?facils@?1??enable_disable_herc37X@@9@9
  00171	44 8b 0c 81	 mov	 r9d, DWORD PTR [rcx+rax*4]
  00175	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196237
  0017c	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00181	48 8d 8c 24 30
	20 00 00	 lea	 rcx, QWORD PTR cmdbuf$[rsp]
  00189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 4434 :             parse_args( cmdbuf, MAX_ARGS, argv, &argc );

  0018f	4c 8d 4c 24 24	 lea	 r9, QWORD PTR argc$[rsp]
  00194	4c 8d 44 24 30	 lea	 r8, QWORD PTR argv$[rsp]
  00199	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  0019e	48 8d 8c 24 30
	20 00 00	 lea	 rcx, QWORD PTR cmdbuf$[rsp]
  001a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_parse_args
$LN16@enable_dis:

; 4435 :             VERIFY( facility_enable_disable( argc, argv ) == 0);

  001ac	48 8d 54 24 30	 lea	 rdx, QWORD PTR argv$[rsp]
  001b1	8b 4c 24 24	 mov	 ecx, DWORD PTR argc$[rsp]
  001b5	e8 00 00 00 00	 call	 facility_enable_disable
  001ba	85 c0		 test	 eax, eax
  001bc	74 5c		 je	 SHORT $LN25@enable_dis
$LN19@enable_dis:
  001be	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196239
  001c5	41 b8 53 11 00
	00		 mov	 r8d, 4435		; 00001153H
  001cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG196240
  001d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196241
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  001df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001e5	85 c0		 test	 eax, eax
  001e7	74 20		 je	 SHORT $LN26@enable_dis
  001e9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196243
  001f0	41 b8 53 11 00
	00		 mov	 r8d, 4435		; 00001153H
  001f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG196244
  001fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196245
  00204	e8 00 00 00 00	 call	 DebuggerTrace
$LN26@enable_dis:
  00209	33 c0		 xor	 eax, eax
  0020b	85 c0		 test	 eax, eax
  0020d	75 af		 jne	 SHORT $LN19@enable_dis
  0020f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00215	85 c0		 test	 eax, eax
  00217	74 01		 je	 SHORT $LN27@enable_dis
  00219	cc		 int	 3
$LN27@enable_dis:
$LN25@enable_dis:
  0021a	33 c0		 xor	 eax, eax
  0021c	85 c0		 test	 eax, eax
  0021e	75 8c		 jne	 SHORT $LN16@enable_dis

; 4436 :         }

  00220	e9 2b ff ff ff	 jmp	 $LN11@enable_dis
$LN12@enable_dis:
$LN21@enable_dis:

; 4437 :     }
; 4438 : 
; 4439 :     /* Restore original msglevel */
; 4440 :     sysblk.msglvl = orig_msglvl;

  00225	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0022c	8b 4c 24 28	 mov	 ecx, DWORD PTR orig_msglvl$[rsp]
  00230	89 88 80 75 01
	00		 mov	 DWORD PTR [rax+95616], ecx

; 4441 : }

  00236	48 8b 8c 24 30
	21 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0023e	48 33 cc	 xor	 rcx, rsp
  00241	e8 00 00 00 00	 call	 __security_check_cookie
  00246	48 81 c4 48 21
	00 00		 add	 rsp, 8520		; 00002148H
  0024d	c3		 ret	 0
enable_disable_herc37X ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv79 = 32
newins$ = 40
arch$ = 64
ppHDLINS$ = 72
opcode$ = 80
instname$ = 88
dis_fac_ins PROC

; 2915 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2916 :     static const INSTR_FUNC pgmck_instr_func_tab[ NUM_GEN_ARCHS ] =
; 2917 :     {
; 2918 : #if defined(       _ARCH_NUM_0 )
; 2919 :    #if      370 == _ARCH_NUM_0
; 2920 :           &s370_facility_not_enabled,
; 2921 : 
; 2922 :    #elif    390 == _ARCH_NUM_0
; 2923 :           &s390_facility_not_enabled,
; 2924 : 
; 2925 :    #else // 900 == _ARCH_NUM_0
; 2926 :           &z900_facility_not_enabled,
; 2927 :    #endif
; 2928 : #endif
; 2929 : #if defined(       _ARCH_NUM_1 )
; 2930 :    #if      370 == _ARCH_NUM_1
; 2931 :           &s370_facility_not_enabled,
; 2932 : 
; 2933 :    #elif    390 == _ARCH_NUM_1
; 2934 :           &s390_facility_not_enabled,
; 2935 : 
; 2936 :    #else // 900 == _ARCH_NUM_1
; 2937 :           &z900_facility_not_enabled,
; 2938 :    #endif
; 2939 : #endif
; 2940 : #if defined(       _ARCH_NUM_2 )
; 2941 :    #if      370 == _ARCH_NUM_2
; 2942 :           &s370_facility_not_enabled,
; 2943 : 
; 2944 :    #elif    390 == _ARCH_NUM_2
; 2945 :           &s390_facility_not_enabled,
; 2946 : 
; 2947 :    #else // 900 == _ARCH_NUM_2
; 2948 :           &z900_facility_not_enabled,
; 2949 :    #endif
; 2950 : #endif
; 2951 :     };
; 2952 : 
; 2953 :     static const int arch_to_hdl_arch_tab[ NUM_GEN_ARCHS ] =
; 2954 :     {
; 2955 : #if defined( _ARCH_NUM_0 )
; 2956 :   #if        _ARCH_NUM_0 == 370
; 2957 :                HDL_INSTARCH_370,
; 2958 : 
; 2959 :   #elif      _ARCH_NUM_0 == 390
; 2960 :                HDL_INSTARCH_390,
; 2961 : 
; 2962 :   #else //   _ARCH_NUM_0 == 900
; 2963 :                HDL_INSTARCH_900,
; 2964 :   #endif
; 2965 : #endif
; 2966 : #if defined( _ARCH_NUM_1 )
; 2967 :   #if        _ARCH_NUM_1 == 370
; 2968 :                HDL_INSTARCH_370,
; 2969 : 
; 2970 :   #elif      _ARCH_NUM_1 == 390
; 2971 :                HDL_INSTARCH_390,
; 2972 : 
; 2973 :   #else //   _ARCH_NUM_1 == 900
; 2974 :                HDL_INSTARCH_900,
; 2975 :   #endif
; 2976 : #endif
; 2977 : #if defined( _ARCH_NUM_2 )
; 2978 :   #if        _ARCH_NUM_2 == 370
; 2979 :                HDL_INSTARCH_370,
; 2980 : 
; 2981 :   #elif      _ARCH_NUM_2 == 390
; 2982 :                HDL_INSTARCH_390,
; 2983 : 
; 2984 :   #else //   _ARCH_NUM_2 == 900
; 2985 :                HDL_INSTARCH_900,
; 2986 :   #endif
; 2987 : #endif
; 2988 :     };
; 2989 : 
; 2990 :     /* Allocate a new HDLINS entry for this instruction */
; 2991 :     HDLINS* newins = malloc( sizeof( HDLINS ));

  00017	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  0001c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00022	48 89 44 24 28	 mov	 QWORD PTR newins$[rsp], rax

; 2992 : 
; 2993 :     /* Initialize the entry for this instruction */
; 2994 :     newins->instname  =  strdup( instname );

  00027	48 8b 4c 24 58	 mov	 rcx, QWORD PTR instname$[rsp]
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00032	48 8b 4c 24 28	 mov	 rcx, QWORD PTR newins$[rsp]
  00037	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2995 :     newins->hdl_arch  =  arch_to_hdl_arch_tab[ arch ];

  0003a	48 63 44 24 40	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?arch_to_hdl_arch_tab@?1??dis_fac_ins@@9@9
  00046	48 8b 54 24 28	 mov	 rdx, QWORD PTR newins$[rsp]
  0004b	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0004e	89 42 1c	 mov	 DWORD PTR [rdx+28], eax

; 2996 :     newins->opcode    =  opcode > 0xff ? opcode : (opcode << 8);

  00051	81 7c 24 50 ff
	00 00 00	 cmp	 DWORD PTR opcode$[rsp], 255 ; 000000ffH
  00059	7e 0a		 jle	 SHORT $LN3@dis_fac_in
  0005b	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  0005f	89 44 24 20	 mov	 DWORD PTR tv79[rsp], eax
  00063	eb 0b		 jmp	 SHORT $LN4@dis_fac_in
$LN3@dis_fac_in:
  00065	8b 44 24 50	 mov	 eax, DWORD PTR opcode$[rsp]
  00069	c1 e0 08	 shl	 eax, 8
  0006c	89 44 24 20	 mov	 DWORD PTR tv79[rsp], eax
$LN4@dis_fac_in:
  00070	48 8b 44 24 28	 mov	 rax, QWORD PTR newins$[rsp]
  00075	8b 4c 24 20	 mov	 ecx, DWORD PTR tv79[rsp]
  00079	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 2997 :     newins->instfunc  =  pgmck_instr_func_tab[ arch ];

  0007c	48 63 44 24 40	 movsxd	 rax, DWORD PTR arch$[rsp]
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?pgmck_instr_func_tab@?1??dis_fac_ins@@9@9
  00088	48 8b 54 24 28	 mov	 rdx, QWORD PTR newins$[rsp]
  0008d	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00091	48 89 42 08	 mov	 QWORD PTR [rdx+8], rax

; 2998 : 
; 2999 :     /* Insert it at the head of the chain */
; 3000 :     newins->next = *ppHDLINS;

  00095	48 8b 44 24 28	 mov	 rax, QWORD PTR newins$[rsp]
  0009a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ppHDLINS$[rsp]
  0009f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a2	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 3001 :     *ppHDLINS = newins;

  000a6	48 8b 44 24 48	 mov	 rax, QWORD PTR ppHDLINS$[rsp]
  000ab	48 8b 4c 24 28	 mov	 rcx, QWORD PTR newins$[rsp]
  000b0	48 89 08	 mov	 QWORD PTR [rax], rcx

; 3002 : 
; 3003 :     /* Call HDL's 'replace_opcode' helper that does our grunt work */
; 3004 :     hdl_repins( true, newins );

  000b3	48 8b 54 24 28	 mov	 rdx, QWORD PTR newins$[rsp]
  000b8	b1 01		 mov	 cl, 1
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_repins

; 3005 : }

  000c0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c4	c3		 ret	 0
dis_fac_ins ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
next_ins$ = 32
arch$ = 64
hdl_ins$ = 72
ena_fac_ins PROC

; 2889 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@ena_fac_in:

; 2890 :     HDLINS* next_ins;
; 2891 : 
; 2892 :     /* Restore original function for each instruction disabled */
; 2893 :     while (hdl_ins[ arch ])

  0000d	48 63 44 24 40	 movsxd	 rax, DWORD PTR arch$[rsp]
  00012	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hdl_ins$[rsp]
  00017	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0001c	74 6d		 je	 SHORT $LN3@ena_fac_in

; 2894 :     {
; 2895 :         /* (restore original function) */
; 2896 :         hdl_repins( false, hdl_ins[ arch ] );

  0001e	48 63 44 24 40	 movsxd	 rax, DWORD PTR arch$[rsp]
  00023	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hdl_ins$[rsp]
  00028	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0002c	33 c9		 xor	 ecx, ecx
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hdl_repins

; 2897 : 
; 2898 :         /* (discard HDLINS entry) */
; 2899 :         free( hdl_ins[ arch ]->instname );

  00034	48 63 44 24 40	 movsxd	 rax, DWORD PTR arch$[rsp]
  00039	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hdl_ins$[rsp]
  0003e	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2900 :         next_ins = hdl_ins[ arch ]->next;

  0004b	48 63 44 24 40	 movsxd	 rax, DWORD PTR arch$[rsp]
  00050	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hdl_ins$[rsp]
  00055	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00059	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0005d	48 89 44 24 20	 mov	 QWORD PTR next_ins$[rsp], rax

; 2901 :         free( hdl_ins[ arch ] );

  00062	48 63 44 24 40	 movsxd	 rax, DWORD PTR arch$[rsp]
  00067	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hdl_ins$[rsp]
  0006c	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2902 :         hdl_ins[ arch ] = next_ins;

  00076	48 63 44 24 40	 movsxd	 rax, DWORD PTR arch$[rsp]
  0007b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR hdl_ins$[rsp]
  00080	48 8b 54 24 20	 mov	 rdx, QWORD PTR next_ins$[rsp]
  00085	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 2903 :     }

  00089	eb 82		 jmp	 SHORT $LN2@ena_fac_in
$LN3@ena_fac_in:

; 2904 : }

  0008b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008f	c3		 ret	 0
ena_fac_ins ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv64 = 96
tv69 = 104
prerequisite_facname$ = 112
target_bit$ = 144
target_facname$ = 152
action$ = 160
actioning$ = 168
prerequisite_bit$ = 176
file$ = 184
line$ = 192
func$ = 200
_hhc00890e PROC

; 1834 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1835 :     const char* prerequisite_facname;
; 1836 : 
; 1837 :     fwritemsg( file, line, func, WRMSG_NORMAL, stdout, MSG( HHC00890, "E",

  0001a	48 8d 54 24 70	 lea	 rdx, QWORD PTR prerequisite_facname$[rsp]
  0001f	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR prerequisite_bit$[rsp]
  00026	e8 00 00 00 00	 call	 get_facname_by_bitno
  0002b	48 89 44 24 60	 mov	 QWORD PTR tv64[rsp], rax
  00030	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR target_facname$[rsp]
  00038	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR target_bit$[rsp]
  0003f	e8 00 00 00 00	 call	 get_facname_by_bitno
  00044	48 89 44 24 68	 mov	 QWORD PTR tv69[rsp], rax
  00049	b9 01 00 00 00	 mov	 ecx, 1
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00054	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv64[rsp]
  00059	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0005e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR actioning$[rsp]
  00066	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0006b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv69[rsp]
  00070	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00075	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR action$[rsp]
  0007d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193424
  00089	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193425
  00095	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0009a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009f	41 b9 03 00 00
	00		 mov	 r9d, 3
  000a5	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR func$[rsp]
  000ad	8b 94 24 c0 00
	00 00		 mov	 edx, DWORD PTR line$[rsp]
  000b4	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR file$[rsp]
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1838 :         action,    get_facname_by_bitno( target_bit,       &target_facname       ),
; 1839 :         actioning, get_facname_by_bitno( prerequisite_bit, &prerequisite_facname )));
; 1840 : 
; 1841 :     return false;

  000c2	32 c0		 xor	 al, al

; 1842 : }

  000c4	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  000cb	c3		 ret	 0
_hhc00890e ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
i$ = 96
tv203 = 104
wrk$ = 112
buf$ = 144
__$ArrayPad$ = 272
at$ = 320
facility_query_raw PROC

; 1649 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	53		 push	 rbx
  00006	57		 push	 rdi
  00007	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1650 :     char buf[ 128 ] = {0};

  00020	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR buf$[rsp]
  00028	48 8b f8	 mov	 rdi, rax
  0002b	33 c0		 xor	 eax, eax
  0002d	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00032	f3 aa		 rep stosb

; 1651 :     char wrk[  20 ];
; 1652 :     size_t i;
; 1653 : 
; 1654 :     for (i=0; i < STFL_IBM_DW_SIZE; i++)

  00034	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0003d	eb 0d		 jmp	 SHORT $LN4@facility_q
$LN2@facility_q:
  0003f	48 8b 44 24 60	 mov	 rax, QWORD PTR i$[rsp]
  00044	48 ff c0	 inc	 rax
  00047	48 89 44 24 60	 mov	 QWORD PTR i$[rsp], rax
$LN4@facility_q:
  0004c	48 83 7c 24 60
	04		 cmp	 QWORD PTR i$[rsp], 4
  00052	0f 83 a3 01 00
	00		 jae	 $LN3@facility_q

; 1655 :     {
; 1656 :         MSGBUF( wrk, "%02X%02X%02X%02X %02X%02X%02X%02X "

  00058	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR at$[rsp]
  00060	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00064	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00068	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0006f	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00077	48 8b 4c 24 60	 mov	 rcx, QWORD PTR i$[rsp]
  0007c	0f b6 44 c8 07	 movzx	 eax, BYTE PTR [rax+rcx*8+7]
  00081	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR at$[rsp]
  00089	48 63 49 08	 movsxd	 rcx, DWORD PTR [rcx+8]
  0008d	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  00091	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00098	48 8d 8c 0a a0
	0d 00 00	 lea	 rcx, QWORD PTR [rdx+rcx+3488]
  000a0	48 8b 54 24 60	 mov	 rdx, QWORD PTR i$[rsp]
  000a5	0f b6 4c d1 06	 movzx	 ecx, BYTE PTR [rcx+rdx*8+6]
  000aa	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR at$[rsp]
  000b2	48 63 52 08	 movsxd	 rdx, DWORD PTR [rdx+8]
  000b6	48 6b d2 28	 imul	 rdx, rdx, 40		; 00000028H
  000ba	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR __imp_sysblk
  000c1	48 8d 94 17 a0
	0d 00 00	 lea	 rdx, QWORD PTR [rdi+rdx+3488]
  000c9	48 8b 7c 24 60	 mov	 rdi, QWORD PTR i$[rsp]
  000ce	0f b6 54 fa 05	 movzx	 edx, BYTE PTR [rdx+rdi*8+5]
  000d3	48 8b bc 24 40
	01 00 00	 mov	 rdi, QWORD PTR at$[rsp]
  000db	48 63 7f 08	 movsxd	 rdi, DWORD PTR [rdi+8]
  000df	48 6b ff 28	 imul	 rdi, rdi, 40		; 00000028H
  000e3	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  000ea	49 8d bc 38 a0
	0d 00 00	 lea	 rdi, QWORD PTR [r8+rdi+3488]
  000f2	4c 8b 44 24 60	 mov	 r8, QWORD PTR i$[rsp]
  000f7	42 0f b6 7c c7
	04		 movzx	 edi, BYTE PTR [rdi+r8*8+4]
  000fd	4c 8b 84 24 40
	01 00 00	 mov	 r8, QWORD PTR at$[rsp]
  00105	4d 63 40 08	 movsxd	 r8, DWORD PTR [r8+8]
  00109	4d 6b c0 28	 imul	 r8, r8, 40		; 00000028H
  0010d	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR __imp_sysblk
  00114	4f 8d 84 01 a0
	0d 00 00	 lea	 r8, QWORD PTR [r9+r8+3488]
  0011c	4c 8b 4c 24 60	 mov	 r9, QWORD PTR i$[rsp]
  00121	47 0f b6 44 c8
	03		 movzx	 r8d, BYTE PTR [r8+r9*8+3]
  00127	4c 8b 8c 24 40
	01 00 00	 mov	 r9, QWORD PTR at$[rsp]
  0012f	4d 63 49 08	 movsxd	 r9, DWORD PTR [r9+8]
  00133	4d 6b c9 28	 imul	 r9, r9, 40		; 00000028H
  00137	4c 8b 15 00 00
	00 00		 mov	 r10, QWORD PTR __imp_sysblk
  0013e	4f 8d 8c 0a a0
	0d 00 00	 lea	 r9, QWORD PTR [r10+r9+3488]
  00146	4c 8b 54 24 60	 mov	 r10, QWORD PTR i$[rsp]
  0014b	47 0f b6 4c d1
	02		 movzx	 r9d, BYTE PTR [r9+r10*8+2]
  00151	4c 8b 94 24 40
	01 00 00	 mov	 r10, QWORD PTR at$[rsp]
  00159	4d 63 52 08	 movsxd	 r10, DWORD PTR [r10+8]
  0015d	4d 6b d2 28	 imul	 r10, r10, 40		; 00000028H
  00161	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR __imp_sysblk
  00168	4f 8d 94 13 a0
	0d 00 00	 lea	 r10, QWORD PTR [r11+r10+3488]
  00170	4c 8b 5c 24 60	 mov	 r11, QWORD PTR i$[rsp]
  00175	47 0f b6 54 da
	01		 movzx	 r10d, BYTE PTR [r10+r11*8+1]
  0017b	4c 8b 9c 24 40
	01 00 00	 mov	 r11, QWORD PTR at$[rsp]
  00183	4d 63 5b 08	 movsxd	 r11, DWORD PTR [r11+8]
  00187	4d 6b db 28	 imul	 r11, r11, 40		; 00000028H
  0018b	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR __imp_sysblk
  00192	4a 8d 9c 1b a0
	0d 00 00	 lea	 rbx, QWORD PTR [rbx+r11+3488]
  0019a	4c 8b 5c 24 60	 mov	 r11, QWORD PTR i$[rsp]
  0019f	42 0f b6 1c db	 movzx	 ebx, BYTE PTR [rbx+r11*8]
  001a4	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  001a8	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  001ac	89 54 24 40	 mov	 DWORD PTR [rsp+64], edx
  001b0	89 7c 24 38	 mov	 DWORD PTR [rsp+56], edi
  001b4	44 89 44 24 30	 mov	 DWORD PTR [rsp+48], r8d
  001b9	44 89 4c 24 28	 mov	 DWORD PTR [rsp+40], r9d
  001be	44 89 54 24 20	 mov	 DWORD PTR [rsp+32], r10d
  001c3	44 8b cb	 mov	 r9d, ebx
  001c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193328
  001cd	ba 14 00 00 00	 mov	 edx, 20
  001d2	48 8d 4c 24 70	 lea	 rcx, QWORD PTR wrk$[rsp]
  001d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1657 : 
; 1658 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 0 ]
; 1659 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 1 ]
; 1660 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 2 ]
; 1661 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 3 ]
; 1662 : 
; 1663 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 4 ]
; 1664 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 5 ]
; 1665 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 6 ]
; 1666 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 7 ]
; 1667 :         );
; 1668 :         STRLCAT( buf, wrk );

  001dd	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  001e3	48 8d 54 24 70	 lea	 rdx, QWORD PTR wrk$[rsp]
  001e8	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 1669 :     }

  001f6	e9 44 fe ff ff	 jmp	 $LN2@facility_q
$LN3@facility_q:

; 1670 : 
; 1671 :     RTRIM( buf );

  001fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG193329
  00202	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0020a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim

; 1672 :     STRLCAT( buf, ", HERC: " );

  00210	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00216	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG193330
  0021d	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00225	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 1673 : 
; 1674 :     for (; i < STFL_HERC_DW_SIZE; i++)

  0022b	eb 0d		 jmp	 SHORT $LN7@facility_q
$LN5@facility_q:
  0022d	48 8b 44 24 60	 mov	 rax, QWORD PTR i$[rsp]
  00232	48 ff c0	 inc	 rax
  00235	48 89 44 24 60	 mov	 QWORD PTR i$[rsp], rax
$LN7@facility_q:
  0023a	48 83 7c 24 60
	05		 cmp	 QWORD PTR i$[rsp], 5
  00240	0f 83 a1 01 00
	00		 jae	 $LN6@facility_q

; 1675 :     {
; 1676 :         MSGBUF( wrk, "%02X%02X%02X%02X %02X%02X%02X%02X "

  00246	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR at$[rsp]
  0024e	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00252	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00256	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0025d	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00265	48 8b 4c 24 60	 mov	 rcx, QWORD PTR i$[rsp]
  0026a	0f b6 44 c8 07	 movzx	 eax, BYTE PTR [rax+rcx*8+7]
  0026f	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR at$[rsp]
  00277	48 63 49 08	 movsxd	 rcx, DWORD PTR [rcx+8]
  0027b	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  0027f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __imp_sysblk
  00286	48 8d 8c 0a a0
	0d 00 00	 lea	 rcx, QWORD PTR [rdx+rcx+3488]
  0028e	48 8b 54 24 60	 mov	 rdx, QWORD PTR i$[rsp]
  00293	0f b6 4c d1 06	 movzx	 ecx, BYTE PTR [rcx+rdx*8+6]
  00298	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR at$[rsp]
  002a0	48 63 52 08	 movsxd	 rdx, DWORD PTR [rdx+8]
  002a4	48 6b d2 28	 imul	 rdx, rdx, 40		; 00000028H
  002a8	48 8b 1d 00 00
	00 00		 mov	 rbx, QWORD PTR __imp_sysblk
  002af	48 8d 94 13 a0
	0d 00 00	 lea	 rdx, QWORD PTR [rbx+rdx+3488]
  002b7	48 8b 5c 24 60	 mov	 rbx, QWORD PTR i$[rsp]
  002bc	0f b6 54 da 05	 movzx	 edx, BYTE PTR [rdx+rbx*8+5]
  002c1	48 8b 9c 24 40
	01 00 00	 mov	 rbx, QWORD PTR at$[rsp]
  002c9	48 63 5b 08	 movsxd	 rbx, DWORD PTR [rbx+8]
  002cd	48 6b db 28	 imul	 rbx, rbx, 40		; 00000028H
  002d1	48 8b 3d 00 00
	00 00		 mov	 rdi, QWORD PTR __imp_sysblk
  002d8	48 8d 9c 1f a0
	0d 00 00	 lea	 rbx, QWORD PTR [rdi+rbx+3488]
  002e0	48 8b 7c 24 60	 mov	 rdi, QWORD PTR i$[rsp]
  002e5	0f b6 5c fb 04	 movzx	 ebx, BYTE PTR [rbx+rdi*8+4]
  002ea	48 8b bc 24 40
	01 00 00	 mov	 rdi, QWORD PTR at$[rsp]
  002f2	48 63 7f 08	 movsxd	 rdi, DWORD PTR [rdi+8]
  002f6	48 6b ff 28	 imul	 rdi, rdi, 40		; 00000028H
  002fa	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  00301	49 8d bc 38 a0
	0d 00 00	 lea	 rdi, QWORD PTR [r8+rdi+3488]
  00309	4c 8b 44 24 60	 mov	 r8, QWORD PTR i$[rsp]
  0030e	42 0f b6 7c c7
	03		 movzx	 edi, BYTE PTR [rdi+r8*8+3]
  00314	4c 8b 84 24 40
	01 00 00	 mov	 r8, QWORD PTR at$[rsp]
  0031c	4d 63 40 08	 movsxd	 r8, DWORD PTR [r8+8]
  00320	4d 6b c0 28	 imul	 r8, r8, 40		; 00000028H
  00324	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR __imp_sysblk
  0032b	4f 8d 84 01 a0
	0d 00 00	 lea	 r8, QWORD PTR [r9+r8+3488]
  00333	4c 8b 4c 24 60	 mov	 r9, QWORD PTR i$[rsp]
  00338	47 0f b6 44 c8
	02		 movzx	 r8d, BYTE PTR [r8+r9*8+2]
  0033e	4c 8b 8c 24 40
	01 00 00	 mov	 r9, QWORD PTR at$[rsp]
  00346	4d 63 49 08	 movsxd	 r9, DWORD PTR [r9+8]
  0034a	4d 6b c9 28	 imul	 r9, r9, 40		; 00000028H
  0034e	4c 8b 15 00 00
	00 00		 mov	 r10, QWORD PTR __imp_sysblk
  00355	4f 8d 8c 0a a0
	0d 00 00	 lea	 r9, QWORD PTR [r10+r9+3488]
  0035d	4c 8b 54 24 60	 mov	 r10, QWORD PTR i$[rsp]
  00362	47 0f b6 4c d1
	01		 movzx	 r9d, BYTE PTR [r9+r10*8+1]
  00368	4c 8b 94 24 40
	01 00 00	 mov	 r10, QWORD PTR at$[rsp]
  00370	4d 63 52 08	 movsxd	 r10, DWORD PTR [r10+8]
  00374	4d 6b d2 28	 imul	 r10, r10, 40		; 00000028H
  00378	4c 8b 1d 00 00
	00 00		 mov	 r11, QWORD PTR __imp_sysblk
  0037f	4f 8d 94 13 a0
	0d 00 00	 lea	 r10, QWORD PTR [r11+r10+3488]
  00387	4c 8b 5c 24 60	 mov	 r11, QWORD PTR i$[rsp]
  0038c	47 0f b6 14 da	 movzx	 r10d, BYTE PTR [r10+r11*8]
  00391	89 44 24 50	 mov	 DWORD PTR [rsp+80], eax
  00395	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00399	89 54 24 40	 mov	 DWORD PTR [rsp+64], edx
  0039d	89 5c 24 38	 mov	 DWORD PTR [rsp+56], ebx
  003a1	89 7c 24 30	 mov	 DWORD PTR [rsp+48], edi
  003a5	44 89 44 24 28	 mov	 DWORD PTR [rsp+40], r8d
  003aa	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  003af	45 8b ca	 mov	 r9d, r10d
  003b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193331
  003b9	ba 14 00 00 00	 mov	 edx, 20
  003be	48 8d 4c 24 70	 lea	 rcx, QWORD PTR wrk$[rsp]
  003c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1677 : 
; 1678 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 0 ]
; 1679 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 1 ]
; 1680 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 2 ]
; 1681 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 3 ]
; 1682 : 
; 1683 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 4 ]
; 1684 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 5 ]
; 1685 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 6 ]
; 1686 :             , sysblk.facility_list[ at->num ][ (i * sizeof( DW )) + 7 ]
; 1687 :         );
; 1688 :         STRLCAT( buf, wrk );

  003c9	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  003cf	48 8d 54 24 70	 lea	 rdx, QWORD PTR wrk$[rsp]
  003d4	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  003dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 1689 :     }

  003e2	e9 46 fe ff ff	 jmp	 $LN5@facility_q
$LN6@facility_q:

; 1690 : 
; 1691 :     // "%s facility list: %s"
; 1692 :     WRMSG( HHC00894, "I", at->name, RTRIM( buf ));

  003e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG193332
  003ee	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  003f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  003fc	48 89 44 24 68	 mov	 QWORD PTR tv203[rsp], rax
  00401	b9 01 00 00 00	 mov	 ecx, 1
  00406	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0040c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv203[rsp]
  00411	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00416	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR at$[rsp]
  0041e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00421	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00426	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193333
  0042d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00432	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193334
  00439	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0043e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00443	41 b9 03 00 00
	00		 mov	 r9d, 3
  00449	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193335
  00450	ba 9c 06 00 00	 mov	 edx, 1692		; 0000069cH
  00455	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193336
  0045c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1693 : }

  00462	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0046a	48 33 cc	 xor	 rcx, rsp
  0046d	e8 00 00 00 00	 call	 __security_check_cookie
  00472	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  00479	5f		 pop	 rdi
  0047a	5b		 pop	 rbx
  0047b	c3		 ret	 0
facility_query_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
enabled$ = 144
mod$ = 145
cur$ = 146
def$ = 147
req$ = 148
sup$ = 149
ft$ = 152
num$ = 160
ftpp$ = 168
tv207 = 176
tv219 = 180
tv225 = 184
tv231 = 188
tv235 = 192
tv245 = 196
fbit$ = 200
fbyte$ = 204
ptr_array$ = 208
tv399 = 216
tv252 = 220
tv288 = 224
tv290 = 228
tv292 = 232
tv294 = 236
tv296 = 240
tv85 = 248
tv249 = 256
sev$ = 264
at$ = 288
eQType$ = 296
sort_by_long$ = 304
facility_query_all PROC

; 1558 : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H

; 1559 :     const FACTAB*   ft;         // ptr to FACTAB entry
; 1560 :     const FACTAB**  ftpp;       // ptr to ptr to FACTAB entry
; 1561 :     void*           ptr_array;  // ptr to array of FACTAB entry ptrs
; 1562 :     size_t  num;
; 1563 :     int     fbyte, fbit;
; 1564 :     bool    enabled;
; 1565 :     char    sup, def, req, cur, mod;
; 1566 :     const char* sev;
; 1567 : 
; 1568 :     /* Allocate an array of FACTAB entry pointers */
; 1569 : 
; 1570 :     if (!(ptr_array = malloc( sizeof( const FACTAB* ) * _countof( factab ))))

  00015	b9 50 07 00 00	 mov	 ecx, 1872		; 00000750H
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00020	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR ptr_array$[rsp], rax
  00028	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR ptr_array$[rsp], 0
  00031	75 4e		 jne	 SHORT $LN8@facility_q

; 1571 :     {
; 1572 :         // "Out of memory"
; 1573 :         WRMSG( HHC00152, "E" );

  00033	b9 01 00 00 00	 mov	 ecx, 1
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193221
  00045	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193222
  00051	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00056	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00061	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193223
  00068	ba 25 06 00 00	 mov	 edx, 1573		; 00000625H
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193224
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1574 :         return false;

  0007a	32 c0		 xor	 al, al
  0007c	e9 98 07 00 00	 jmp	 $LN1@facility_q
$LN8@facility_q:

; 1575 :     }
; 1576 : 
; 1577 :     /* Populate array of FACTAB entry pointers */
; 1578 : 
; 1579 :     for (num = _countof( factab ), ftpp = ptr_array, ft = factab; num; num--, ftpp++, ft++)

  00081	48 c7 84 24 a0
	00 00 00 ea 00
	00 00		 mov	 QWORD PTR num$[rsp], 234 ; 000000eaH
  0008d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ptr_array$[rsp]
  00095	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ftpp$[rsp], rax
  0009d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:factab
  000a4	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR ft$[rsp], rax
  000ac	eb 3b		 jmp	 SHORT $LN4@facility_q
$LN2@facility_q:
  000ae	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR num$[rsp]
  000b6	48 ff c8	 dec	 rax
  000b9	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR num$[rsp], rax
  000c1	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ftpp$[rsp]
  000c9	48 83 c0 08	 add	 rax, 8
  000cd	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ftpp$[rsp], rax
  000d5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR ft$[rsp]
  000dd	48 83 c0 30	 add	 rax, 48			; 00000030H
  000e1	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR ft$[rsp], rax
$LN4@facility_q:
  000e9	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR num$[rsp], 0
  000f2	74 15		 je	 SHORT $LN3@facility_q

; 1580 :         *ftpp = ft;

  000f4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ftpp$[rsp]
  000fc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR ft$[rsp]
  00104	48 89 08	 mov	 QWORD PTR [rax], rcx
  00107	eb a5		 jmp	 SHORT $LN2@facility_q
$LN3@facility_q:

; 1581 : 
; 1582 :     /* Sort the array into the desired sequence */
; 1583 : 
; 1584 :     qsort( ptr_array, _countof( factab ), sizeof( FACTAB* ),

  00109	0f b6 84 24 30
	01 00 00	 movzx	 eax, BYTE PTR sort_by_long$[rsp]
  00111	85 c0		 test	 eax, eax
  00113	74 11		 je	 SHORT $LN12@facility_q
  00115	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:sort_ftpp_by_long_name
  0011c	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv85[rsp], rax
  00124	eb 0f		 jmp	 SHORT $LN13@facility_q
$LN12@facility_q:
  00126	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:sort_ftpp_by_bit_number
  0012d	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv85[rsp], rax
$LN13@facility_q:
  00135	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR tv85[rsp]
  0013d	41 b8 08 00 00
	00		 mov	 r8d, 8
  00143	ba ea 00 00 00	 mov	 edx, 234		; 000000eaH
  00148	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ptr_array$[rsp]
  00150	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_qsort

; 1585 :         sort_by_long ? sort_ftpp_by_long_name
; 1586 :                      : sort_ftpp_by_bit_number );
; 1587 : 
; 1588 :     /* Display column headers... */
; 1589 : 
; 1590 :     LOGMSG( "HHC00891I\n" );

  00156	b9 01 00 00 00	 mov	 ecx, 1
  0015b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193225
  00168	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0016d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00172	41 b9 03 00 00
	00		 mov	 r9d, 3
  00178	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193226
  0017f	ba 36 06 00 00	 mov	 edx, 1590		; 00000636H
  00184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193227
  0018b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1591 :     LOGMSG( "HHC00891I                             %s Facility Table\n", at->name );

  00191	b9 01 00 00 00	 mov	 ecx, 1
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0019c	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR at$[rsp]
  001a4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001a7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193228
  001b3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001b8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001bd	41 b9 03 00 00
	00		 mov	 r9d, 3
  001c3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193229
  001ca	ba 37 06 00 00	 mov	 edx, 1591		; 00000637H
  001cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193230
  001d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1592 :     LOGMSG( "HHC00891I\n" );

  001dc	b9 01 00 00 00	 mov	 ecx, 1
  001e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193231
  001ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f8	41 b9 03 00 00
	00		 mov	 r9d, 3
  001fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193232
  00205	ba 38 06 00 00	 mov	 edx, 1592		; 00000638H
  0020a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193233
  00211	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1593 :     LOGMSG( "HHC00891I           SRDC* = Supported, Required, Default, Current, Modified.\n" );

  00217	b9 01 00 00 00	 mov	 ecx, 1
  0021c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00222	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193234
  00229	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0022e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00233	41 b9 03 00 00
	00		 mov	 r9d, 3
  00239	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193235
  00240	ba 39 06 00 00	 mov	 edx, 1593		; 00000639H
  00245	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193236
  0024c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1594 :     LOGMSG( "HHC00891I\n" );

  00252	b9 01 00 00 00	 mov	 ecx, 1
  00257	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0025d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193237
  00264	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00269	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00274	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193238
  0027b	ba 3a 06 00 00	 mov	 edx, 1594		; 0000063aH
  00280	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193239
  00287	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1595 :     LOGMSG( "HHC00891I Bit By Bi SRDC* Facility                    Description\n" );

  0028d	b9 01 00 00 00	 mov	 ecx, 1
  00292	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00298	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193240
  0029f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002a4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002a9	41 b9 03 00 00
	00		 mov	 r9d, 3
  002af	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193241
  002b6	ba 3b 06 00 00	 mov	 edx, 1595		; 0000063bH
  002bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193242
  002c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1596 :     LOGMSG( "HHC00891I --- -- -- ----- --------------------------- ---------------------------------------------------------\n" );

  002c8	b9 01 00 00 00	 mov	 ecx, 1
  002cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193243
  002da	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002df	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e4	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193244
  002f1	ba 3c 06 00 00	 mov	 edx, 1596		; 0000063cH
  002f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193245
  002fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1597 :     LOGMSG( "HHC00891I\n" );

  00303	b9 01 00 00 00	 mov	 ecx, 1
  00308	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0030e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193246
  00315	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0031a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0031f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00325	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193247
  0032c	ba 3d 06 00 00	 mov	 edx, 1597		; 0000063dH
  00331	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193248
  00338	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1598 : 
; 1599 :     /* Display FACTAB entries for current architecture */
; 1600 : 
; 1601 :     for (num = _countof( factab ), ftpp = ptr_array; num; num--, ftpp++)

  0033e	48 c7 84 24 a0
	00 00 00 ea 00
	00 00		 mov	 QWORD PTR num$[rsp], 234 ; 000000eaH
  0034a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ptr_array$[rsp]
  00352	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ftpp$[rsp], rax
  0035a	eb 27		 jmp	 SHORT $LN7@facility_q
$LN5@facility_q:
  0035c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR num$[rsp]
  00364	48 ff c8	 dec	 rax
  00367	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR num$[rsp], rax
  0036f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ftpp$[rsp]
  00377	48 83 c0 08	 add	 rax, 8
  0037b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR ftpp$[rsp], rax
$LN7@facility_q:
  00383	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR num$[rsp], 0
  0038c	0f 84 c6 03 00
	00		 je	 $LN6@facility_q

; 1602 :     {
; 1603 :         ft = *ftpp;

  00392	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR ftpp$[rsp]
  0039a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0039d	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR ft$[rsp], rax

; 1604 : 
; 1605 :         fbyte =         (ft->bitno / 8);

  003a5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR ft$[rsp]
  003ad	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  003b0	99		 cdq
  003b1	83 e2 07	 and	 edx, 7
  003b4	03 c2		 add	 eax, edx
  003b6	c1 f8 03	 sar	 eax, 3
  003b9	89 84 24 cc 00
	00 00		 mov	 DWORD PTR fbyte$[rsp], eax

; 1606 :         fbit  = 0x80 >> (ft->bitno % 8);

  003c0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR ft$[rsp]
  003c8	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  003cb	99		 cdq
  003cc	83 e2 07	 and	 edx, 7
  003cf	03 c2		 add	 eax, edx
  003d1	83 e0 07	 and	 eax, 7
  003d4	2b c2		 sub	 eax, edx
  003d6	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  003db	89 8c 24 d8 00
	00 00		 mov	 DWORD PTR tv399[rsp], ecx
  003e2	0f b6 c8	 movzx	 ecx, al
  003e5	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR tv399[rsp]
  003ec	d3 f8		 sar	 eax, cl
  003ee	89 84 24 c8 00
	00 00		 mov	 DWORD PTR fbit$[rsp], eax

; 1607 : 
; 1608 :         enabled = sysblk.facility_list[ at->num ][ fbyte ] & fbit;

  003f5	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR at$[rsp]
  003fd	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00401	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00405	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0040c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00414	48 63 8c 24 cc
	00 00 00	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  0041c	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00420	23 84 24 c8 00
	00 00		 and	 eax, DWORD PTR fbit$[rsp]
  00427	85 c0		 test	 eax, eax
  00429	75 0d		 jne	 SHORT $LN14@facility_q
  0042b	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv207[rsp], 0
  00436	eb 0b		 jmp	 SHORT $LN15@facility_q
$LN14@facility_q:
  00438	c7 84 24 b0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv207[rsp], 1
$LN15@facility_q:
  00443	0f b6 84 24 b0
	00 00 00	 movzx	 eax, BYTE PTR tv207[rsp]
  0044b	88 84 24 90 00
	00 00		 mov	 BYTE PTR enabled$[rsp], al

; 1609 : 
; 1610 :         if (QUERY_ENABLED ( eQType ) && !enabled) continue;

  00452	83 bc 24 28 01
	00 00 01	 cmp	 DWORD PTR eQType$[rsp], 1
  0045a	75 11		 jne	 SHORT $LN9@facility_q
  0045c	0f b6 84 24 90
	00 00 00	 movzx	 eax, BYTE PTR enabled$[rsp]
  00464	85 c0		 test	 eax, eax
  00466	75 05		 jne	 SHORT $LN9@facility_q
  00468	e9 ef fe ff ff	 jmp	 $LN5@facility_q
$LN9@facility_q:

; 1611 :         if (QUERY_DISABLED( eQType ) &&  enabled) continue;

  0046d	83 bc 24 28 01
	00 00 02	 cmp	 DWORD PTR eQType$[rsp], 2
  00475	75 11		 jne	 SHORT $LN10@facility_q
  00477	0f b6 84 24 90
	00 00 00	 movzx	 eax, BYTE PTR enabled$[rsp]
  0047f	85 c0		 test	 eax, eax
  00481	74 05		 je	 SHORT $LN10@facility_q
  00483	e9 d4 fe ff ff	 jmp	 $LN5@facility_q
$LN10@facility_q:

; 1612 : 
; 1613 :         sup = (ft->supmask & at->amask)     ? 'Y' : '-';

  00488	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR ft$[rsp]
  00490	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR at$[rsp]
  00498	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  0049b	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  0049e	23 c1		 and	 eax, ecx
  004a0	85 c0		 test	 eax, eax
  004a2	74 0d		 je	 SHORT $LN16@facility_q
  004a4	c7 84 24 b4 00
	00 00 59 00 00
	00		 mov	 DWORD PTR tv219[rsp], 89 ; 00000059H
  004af	eb 0b		 jmp	 SHORT $LN17@facility_q
$LN16@facility_q:
  004b1	c7 84 24 b4 00
	00 00 2d 00 00
	00		 mov	 DWORD PTR tv219[rsp], 45 ; 0000002dH
$LN17@facility_q:
  004bc	0f b6 84 24 b4
	00 00 00	 movzx	 eax, BYTE PTR tv219[rsp]
  004c4	88 84 24 95 00
	00 00		 mov	 BYTE PTR sup$[rsp], al

; 1614 :         req = (ft->reqmask & at->amask)     ? 'Y' : '-';

  004cb	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR ft$[rsp]
  004d3	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR at$[rsp]
  004db	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  004de	8b 40 2c	 mov	 eax, DWORD PTR [rax+44]
  004e1	23 c1		 and	 eax, ecx
  004e3	85 c0		 test	 eax, eax
  004e5	74 0d		 je	 SHORT $LN18@facility_q
  004e7	c7 84 24 b8 00
	00 00 59 00 00
	00		 mov	 DWORD PTR tv225[rsp], 89 ; 00000059H
  004f2	eb 0b		 jmp	 SHORT $LN19@facility_q
$LN18@facility_q:
  004f4	c7 84 24 b8 00
	00 00 2d 00 00
	00		 mov	 DWORD PTR tv225[rsp], 45 ; 0000002dH
$LN19@facility_q:
  004ff	0f b6 84 24 b8
	00 00 00	 movzx	 eax, BYTE PTR tv225[rsp]
  00507	88 84 24 94 00
	00 00		 mov	 BYTE PTR req$[rsp], al

; 1615 :         def = (ft->defmask & at->amask)     ? '1' : '0';

  0050e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR ft$[rsp]
  00516	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR at$[rsp]
  0051e	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00521	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00524	23 c1		 and	 eax, ecx
  00526	85 c0		 test	 eax, eax
  00528	74 0d		 je	 SHORT $LN20@facility_q
  0052a	c7 84 24 bc 00
	00 00 31 00 00
	00		 mov	 DWORD PTR tv231[rsp], 49 ; 00000031H
  00535	eb 0b		 jmp	 SHORT $LN21@facility_q
$LN20@facility_q:
  00537	c7 84 24 bc 00
	00 00 30 00 00
	00		 mov	 DWORD PTR tv231[rsp], 48 ; 00000030H
$LN21@facility_q:
  00542	0f b6 84 24 bc
	00 00 00	 movzx	 eax, BYTE PTR tv231[rsp]
  0054a	88 84 24 93 00
	00 00		 mov	 BYTE PTR def$[rsp], al

; 1616 :         cur = (enabled)                     ? '1' : '0';

  00551	0f b6 84 24 90
	00 00 00	 movzx	 eax, BYTE PTR enabled$[rsp]
  00559	85 c0		 test	 eax, eax
  0055b	74 0d		 je	 SHORT $LN22@facility_q
  0055d	c7 84 24 c0 00
	00 00 31 00 00
	00		 mov	 DWORD PTR tv235[rsp], 49 ; 00000031H
  00568	eb 0b		 jmp	 SHORT $LN23@facility_q
$LN22@facility_q:
  0056a	c7 84 24 c0 00
	00 00 30 00 00
	00		 mov	 DWORD PTR tv235[rsp], 48 ; 00000030H
$LN23@facility_q:
  00575	0f b6 84 24 c0
	00 00 00	 movzx	 eax, BYTE PTR tv235[rsp]
  0057d	88 84 24 92 00
	00 00		 mov	 BYTE PTR cur$[rsp], al

; 1617 :         mod = (def == '1' && cur == '0') ||

  00584	0f be 84 24 93
	00 00 00	 movsx	 eax, BYTE PTR def$[rsp]
  0058c	83 f8 31	 cmp	 eax, 49			; 00000031H
  0058f	75 0d		 jne	 SHORT $LN24@facility_q
  00591	0f be 84 24 92
	00 00 00	 movsx	 eax, BYTE PTR cur$[rsp]
  00599	83 f8 30	 cmp	 eax, 48			; 00000030H
  0059c	74 27		 je	 SHORT $LN26@facility_q
$LN24@facility_q:
  0059e	0f be 84 24 93
	00 00 00	 movsx	 eax, BYTE PTR def$[rsp]
  005a6	83 f8 30	 cmp	 eax, 48			; 00000030H
  005a9	75 0d		 jne	 SHORT $LN25@facility_q
  005ab	0f be 84 24 92
	00 00 00	 movsx	 eax, BYTE PTR cur$[rsp]
  005b3	83 f8 31	 cmp	 eax, 49			; 00000031H
  005b6	74 0d		 je	 SHORT $LN26@facility_q
$LN25@facility_q:
  005b8	c7 84 24 c4 00
	00 00 20 00 00
	00		 mov	 DWORD PTR tv245[rsp], 32 ; 00000020H
  005c3	eb 0b		 jmp	 SHORT $LN27@facility_q
$LN26@facility_q:
  005c5	c7 84 24 c4 00
	00 00 2a 00 00
	00		 mov	 DWORD PTR tv245[rsp], 42 ; 0000002aH
$LN27@facility_q:
  005d0	0f b6 84 24 c4
	00 00 00	 movzx	 eax, BYTE PTR tv245[rsp]
  005d8	88 84 24 91 00
	00 00		 mov	 BYTE PTR mod$[rsp], al

; 1618 :               (def == '0' && cur == '1')    ? '*' : ' ';
; 1619 :         sev = (mod == '*')                  ? "W" : "I";

  005df	0f be 84 24 91
	00 00 00	 movsx	 eax, BYTE PTR mod$[rsp]
  005e7	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  005ea	75 11		 jne	 SHORT $LN28@facility_q
  005ec	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193251
  005f3	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv249[rsp], rax
  005fb	eb 0f		 jmp	 SHORT $LN29@facility_q
$LN28@facility_q:
  005fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193252
  00604	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv249[rsp], rax
$LN29@facility_q:
  0060c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR tv249[rsp]
  00614	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR sev$[rsp], rax

; 1620 : 
; 1621 :         // "%3d %02X %02X %c%c%c%c%c %-27s%c%s"
; 1622 :         WRMSG( HHC00891, sev,

  0061c	0f be 84 24 91
	00 00 00	 movsx	 eax, BYTE PTR mod$[rsp]
  00624	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv252[rsp], eax
  0062b	0f be 8c 24 91
	00 00 00	 movsx	 ecx, BYTE PTR mod$[rsp]
  00633	89 8c 24 e0 00
	00 00		 mov	 DWORD PTR tv288[rsp], ecx
  0063a	0f be 94 24 92
	00 00 00	 movsx	 edx, BYTE PTR cur$[rsp]
  00642	89 94 24 e4 00
	00 00		 mov	 DWORD PTR tv290[rsp], edx
  00649	44 0f be 84 24
	93 00 00 00	 movsx	 r8d, BYTE PTR def$[rsp]
  00652	44 89 84 24 e8
	00 00 00	 mov	 DWORD PTR tv292[rsp], r8d
  0065a	44 0f be 8c 24
	94 00 00 00	 movsx	 r9d, BYTE PTR req$[rsp]
  00663	44 89 8c 24 ec
	00 00 00	 mov	 DWORD PTR tv294[rsp], r9d
  0066b	44 0f be 94 24
	95 00 00 00	 movsx	 r10d, BYTE PTR sup$[rsp]
  00674	44 89 94 24 f0
	00 00 00	 mov	 DWORD PTR tv296[rsp], r10d
  0067c	b9 01 00 00 00	 mov	 ecx, 1
  00681	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00687	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR ft$[rsp]
  0068f	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00693	48 89 8c 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rcx
  0069b	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR tv252[rsp]
  006a2	89 8c 24 80 00
	00 00		 mov	 DWORD PTR [rsp+128], ecx
  006a9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR ft$[rsp]
  006b1	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  006b5	48 89 4c 24 78	 mov	 QWORD PTR [rsp+120], rcx
  006ba	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv288[rsp]
  006c1	89 4c 24 70	 mov	 DWORD PTR [rsp+112], ecx
  006c5	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv290[rsp]
  006cc	89 4c 24 68	 mov	 DWORD PTR [rsp+104], ecx
  006d0	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv292[rsp]
  006d7	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  006db	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv294[rsp]
  006e2	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  006e6	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv296[rsp]
  006ed	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  006f1	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR fbit$[rsp]
  006f8	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  006fc	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR fbyte$[rsp]
  00703	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00707	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR ft$[rsp]
  0070f	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00712	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00716	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR sev$[rsp]
  0071e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00723	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193253
  0072a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0072f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00734	41 b9 03 00 00
	00		 mov	 r9d, 3
  0073a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193254
  00741	ba 62 06 00 00	 mov	 edx, 1634		; 00000662H
  00746	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193255
  0074d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1623 :             ft->bitno,
; 1624 :             fbyte,
; 1625 :             fbit,
; 1626 :             sup,
; 1627 :             req,
; 1628 :             def,
; 1629 :             cur,
; 1630 :             mod,
; 1631 :             ft->name,
; 1632 :             mod,
; 1633 :             ft->long_name
; 1634 :         );
; 1635 :     }

  00753	e9 04 fc ff ff	 jmp	 $LN5@facility_q
$LN6@facility_q:

; 1636 : 
; 1637 :     LOGMSG( "HHC00891I\n" );

  00758	b9 01 00 00 00	 mov	 ecx, 1
  0075d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00763	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193256
  0076a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0076f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00774	41 b9 03 00 00
	00		 mov	 r9d, 3
  0077a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193257
  00781	ba 65 06 00 00	 mov	 edx, 1637		; 00000665H
  00786	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193258
  0078d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1638 :     LOGMSG( "HHC00891I           SRDC* = Supported, Required, Default, Current, Modified.\n" );

  00793	b9 01 00 00 00	 mov	 ecx, 1
  00798	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0079e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193259
  007a5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007aa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007af	41 b9 03 00 00
	00		 mov	 r9d, 3
  007b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193260
  007bc	ba 66 06 00 00	 mov	 edx, 1638		; 00000666H
  007c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193261
  007c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1639 :     LOGMSG( "HHC00891I\n" );

  007ce	b9 01 00 00 00	 mov	 ecx, 1
  007d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193262
  007e0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007e5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007ea	41 b9 03 00 00
	00		 mov	 r9d, 3
  007f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193263
  007f7	ba 67 06 00 00	 mov	 edx, 1639		; 00000667H
  007fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193264
  00803	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1640 : 
; 1641 :     free( ptr_array );

  00809	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ptr_array$[rsp]
  00811	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1642 :     return true;

  00817	b0 01		 mov	 al, 1
$LN1@facility_q:

; 1643 : }

  00819	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  00820	c3		 ret	 0
facility_query_all ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
rc$ = 32
tv73 = 36
f1$ = 40
f2$ = 48
p1$ = 80
p2$ = 88
sort_ftpp_by_long_name PROC

; 1530 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1531 :     const FACTAB* f1 = *((const FACTAB**) p1);

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 44 24 28	 mov	 QWORD PTR f1$[rsp], rax

; 1532 :     const FACTAB* f2 = *((const FACTAB**) p2);

  0001b	48 8b 44 24 58	 mov	 rax, QWORD PTR p2$[rsp]
  00020	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00023	48 89 44 24 30	 mov	 QWORD PTR f2$[rsp], rax

; 1533 :     int rc = strcasecmp( f1->long_name, f2->long_name );

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR f2$[rsp]
  0002d	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00031	48 8b 44 24 28	 mov	 rax, QWORD PTR f1$[rsp]
  00036	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00040	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 1534 :     return rc ? rc : (f1->bitno - f2->bitno);

  00044	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  00049	74 0a		 je	 SHORT $LN3@sort_ftpp_
  0004b	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]
  0004f	89 44 24 24	 mov	 DWORD PTR tv73[rsp], eax
  00053	eb 16		 jmp	 SHORT $LN4@sort_ftpp_
$LN3@sort_ftpp_:
  00055	48 8b 44 24 28	 mov	 rax, QWORD PTR f1$[rsp]
  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f2$[rsp]
  0005f	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00062	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00065	2b c1		 sub	 eax, ecx
  00067	89 44 24 24	 mov	 DWORD PTR tv73[rsp], eax
$LN4@sort_ftpp_:
  0006b	8b 44 24 24	 mov	 eax, DWORD PTR tv73[rsp]

; 1535 : }

  0006f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00073	c3		 ret	 0
sort_ftpp_by_long_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
rc$ = 32
tv73 = 36
f2$ = 40
f1$ = 48
p1$ = 80
p2$ = 88
sort_ftpp_by_bit_number PROC

; 1523 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1524 :     const FACTAB* f1 = *((const FACTAB**) p1);

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR p1$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 89 44 24 30	 mov	 QWORD PTR f1$[rsp], rax

; 1525 :     const FACTAB* f2 = *((const FACTAB**) p2);

  0001b	48 8b 44 24 58	 mov	 rax, QWORD PTR p2$[rsp]
  00020	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00023	48 89 44 24 28	 mov	 QWORD PTR f2$[rsp], rax

; 1526 :     int rc = (f1->bitno - f2->bitno);

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR f1$[rsp]
  0002d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR f2$[rsp]
  00032	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00035	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00038	2b c1		 sub	 eax, ecx
  0003a	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 1527 :     return rc ? rc : strcasecmp( f1->name, f2->name );

  0003e	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  00043	74 0a		 je	 SHORT $LN3@sort_ftpp_
  00045	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]
  00049	89 44 24 24	 mov	 DWORD PTR tv73[rsp], eax
  0004d	eb 1c		 jmp	 SHORT $LN4@sort_ftpp_
$LN3@sort_ftpp_:
  0004f	48 8b 44 24 28	 mov	 rax, QWORD PTR f2$[rsp]
  00054	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00058	48 8b 44 24 30	 mov	 rax, QWORD PTR f1$[rsp]
  0005d	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00067	89 44 24 24	 mov	 DWORD PTR tv73[rsp], eax
$LN4@sort_ftpp_:
  0006b	8b 44 24 24	 mov	 eax, DWORD PTR tv73[rsp]

; 1528 : }

  0006f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00073	c3		 ret	 0
sort_ftpp_by_bit_number ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
ft$ = 32
bitno$ = 64
name$ = 72
get_facname_by_bitno PROC

; 1510 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1511 :     const FACTAB*  ft;
; 1512 :     if (!(ft = get_factab_by_bitno( bitno )))

  0000d	8b 4c 24 40	 mov	 ecx, DWORD PTR bitno$[rsp]
  00011	e8 00 00 00 00	 call	 get_factab_by_bitno
  00016	48 89 44 24 20	 mov	 QWORD PTR ft$[rsp], rax
  0001b	48 83 7c 24 20
	00		 cmp	 QWORD PTR ft$[rsp], 0
  00021	75 0e		 jne	 SHORT $LN2@get_facnam

; 1513 :         *name = NULL;

  00023	48 8b 44 24 48	 mov	 rax, QWORD PTR name$[rsp]
  00028	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  0002f	eb 11		 jmp	 SHORT $LN3@get_facnam
$LN2@get_facnam:

; 1514 :     else
; 1515 :         *name = ft->name;

  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR name$[rsp]
  00036	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ft$[rsp]
  0003b	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0003f	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN3@get_facnam:

; 1516 :     return *name;

  00042	48 8b 44 24 48	 mov	 rax, QWORD PTR name$[rsp]
  00047	48 8b 00	 mov	 rax, QWORD PTR [rax]

; 1517 : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
get_facname_by_bitno ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
i$ = 32
name$ = 64
get_factab_by_name PROC

; 1479 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1480 :     size_t i;
; 1481 :     for (i=0; i < _countof( factab ); i++)

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00012	eb 0d		 jmp	 SHORT $LN4@get_factab
$LN2@get_factab:
  00014	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00019	48 ff c0	 inc	 rax
  0001c	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN4@get_factab:
  00021	48 81 7c 24 20
	ea 00 00 00	 cmp	 QWORD PTR i$[rsp], 234	; 000000eaH
  0002a	73 38		 jae	 SHORT $LN3@get_factab

; 1482 :         if (strcasecmp( factab[i].name, name ) == 0)

  0002c	48 6b 44 24 20
	30		 imul	 rax, QWORD PTR i$[rsp], 48 ; 00000030H
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factab
  00039	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  0003e	48 8b 4c 01 10	 mov	 rcx, QWORD PTR [rcx+rax+16]
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00049	85 c0		 test	 eax, eax
  0004b	75 15		 jne	 SHORT $LN5@get_factab

; 1483 :             return &factab[i];

  0004d	48 6b 44 24 20
	30		 imul	 rax, QWORD PTR i$[rsp], 48 ; 00000030H
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factab
  0005a	48 03 c8	 add	 rcx, rax
  0005d	48 8b c1	 mov	 rax, rcx
  00060	eb 04		 jmp	 SHORT $LN1@get_factab
$LN5@get_factab:
  00062	eb b0		 jmp	 SHORT $LN2@get_factab
$LN3@get_factab:

; 1484 :     return NULL;

  00064	33 c0		 xor	 eax, eax
$LN1@get_factab:

; 1485 : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
get_factab_by_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
i$ = 0
bitno$ = 32
get_factab_by_bitno PROC

; 1491 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 1492 :     size_t i;
; 1493 : 
; 1494 :     if (0
; 1495 :         || bitno < 0
; 1496 :         || bitno > (int) STFL_HERC_LAST_BIT

  00008	33 c0		 xor	 eax, eax
  0000a	85 c0		 test	 eax, eax
  0000c	75 11		 jne	 SHORT $LN6@get_factab
  0000e	83 7c 24 20 00	 cmp	 DWORD PTR bitno$[rsp], 0
  00013	7c 0a		 jl	 SHORT $LN6@get_factab
  00015	81 7c 24 20 12
	01 00 00	 cmp	 DWORD PTR bitno$[rsp], 274 ; 00000112H
  0001d	7e 04		 jle	 SHORT $LN5@get_factab
$LN6@get_factab:

; 1497 :     )
; 1498 :         return NULL;

  0001f	33 c0		 xor	 eax, eax
  00021	eb 4d		 jmp	 SHORT $LN1@get_factab
$LN5@get_factab:

; 1499 : 
; 1500 :     for (i=0; i < _countof( factab ); i++)

  00023	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0002b	eb 0b		 jmp	 SHORT $LN4@get_factab
$LN2@get_factab:
  0002d	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  00031	48 ff c0	 inc	 rax
  00034	48 89 04 24	 mov	 QWORD PTR i$[rsp], rax
$LN4@get_factab:
  00038	48 81 3c 24 ea
	00 00 00	 cmp	 QWORD PTR i$[rsp], 234	; 000000eaH
  00040	73 2c		 jae	 SHORT $LN3@get_factab

; 1501 :         if (factab[i].bitno == bitno)

  00042	48 6b 04 24 30	 imul	 rax, QWORD PTR i$[rsp], 48 ; 00000030H
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factab
  0004e	8b 54 24 20	 mov	 edx, DWORD PTR bitno$[rsp]
  00052	39 54 01 20	 cmp	 DWORD PTR [rcx+rax+32], edx
  00056	75 14		 jne	 SHORT $LN7@get_factab

; 1502 :             return &factab[i];

  00058	48 6b 04 24 30	 imul	 rax, QWORD PTR i$[rsp], 48 ; 00000030H
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factab
  00064	48 03 c8	 add	 rcx, rax
  00067	48 8b c1	 mov	 rax, rcx
  0006a	eb 04		 jmp	 SHORT $LN1@get_factab
$LN7@get_factab:
  0006c	eb bf		 jmp	 SHORT $LN2@get_factab
$LN3@get_factab:

; 1503 :     return NULL;

  0006e	33 c0		 xor	 eax, eax
$LN1@get_factab:

; 1504 : }

  00070	48 83 c4 18	 add	 rsp, 24
  00074	c3		 ret	 0
get_factab_by_bitno ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
hercessa PROC

; 4168 : BEG_DIS_FAC_INS_FUNC( hercessa )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@hercessa
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??hercessa@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@hercessa
$LN2@hercessa:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??hercessa@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@hercessa

; 4169 : {
; 4170 :     DIS_FAC_INS( B9AB, "ESSA    B9AB  EXTRACT AND SET STORAGE ATTRIBUTES" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??hercessa@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196014
  00051	41 b8 ab b9 00
	00		 mov	 r8d, 47531		; 0000b9abH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@hercessa:
$LN3@hercessa:

; 4171 : }
; 4172 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
hercessa ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
herctcp	PROC

; 4365 : BEG_DIS_FAC_INS_FUNC( herctcp )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@herctcp
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??herctcp@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@herctcp
$LN2@herctcp:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herctcp@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@herctcp

; 4366 : {
; 4367 :     DIS_FAC_INS( 75,   "TCPIP   75    TCPIP" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herctcp@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196194
  00051	41 b8 75 00 00
	00		 mov	 r8d, 117		; 00000075H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@herctcp:
$LN3@herctcp:

; 4368 : }
; 4369 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
herctcp	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
herc37X	PROC

; 4176 : BEG_DIS_FAC_INS_FUNC( herc37X )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@herc37X
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 8e 19 00 00	 jmp	 $LN3@herc37X
$LN2@herc37X:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 77 19 00
	00		 jne	 $LN4@herc37X

; 4177 : {
; 4178 :     DIS_FAC_INS( 0B,   "branch_and_set_mode" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196025
  00058	41 b8 0b 00 00
	00		 mov	 r8d, 11
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 4179 :     DIS_FAC_INS( 0C,   "branch_and_save_and_set_mode" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196026
  00081	41 b8 0c 00 00
	00		 mov	 r8d, 12
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 4180 :     DIS_FAC_INS( 0102, "update_tree" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196027
  000aa	41 b8 02 01 00
	00		 mov	 r8d, 258		; 00000102H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 4181 :     DIS_FAC_INS( B21A, "compare_and_form_codeword" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196028
  000d3	41 b8 1a b2 00
	00		 mov	 r8d, 45594		; 0000b21aH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 4182 : 
; 4183 :     DIS_FAC_INS( 71,   "multiply_single" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196029
  000fc	41 b8 71 00 00
	00		 mov	 r8d, 113		; 00000071H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 4184 :     DIS_FAC_INS( 84,   "branch_relative_on_index_high" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196030
  00125	41 b8 84 00 00
	00		 mov	 r8d, 132		; 00000084H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 4185 :     DIS_FAC_INS( 85,   "branch_relative_on_index_low_or_equal" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196031
  0014e	41 b8 85 00 00
	00		 mov	 r8d, 133		; 00000085H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 4186 :     DIS_FAC_INS( A8,   "move_long_extended" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196032
  00177	41 b8 a8 00 00
	00		 mov	 r8d, 168		; 000000a8H
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 4187 :     DIS_FAC_INS( A9,   "compare_logical_long_extended" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196033
  001a0	41 b8 a9 00 00
	00		 mov	 r8d, 169		; 000000a9H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 4188 : 
; 4189 :     DIS_FAC_INS( A502, "insert_immediate_low_high" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196034
  001c9	41 b8 02 a5 00
	00		 mov	 r8d, 42242		; 0000a502H
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 4190 :     DIS_FAC_INS( A503, "insert_immediate_low_low" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196035
  001f2	41 b8 03 a5 00
	00		 mov	 r8d, 42243		; 0000a503H
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 4191 :     DIS_FAC_INS( A506, "and_immediate_low_high" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196036
  0021b	41 b8 06 a5 00
	00		 mov	 r8d, 42246		; 0000a506H
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins

; 4192 :     DIS_FAC_INS( A507, "and_immediate_low_low" );

  0022d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00239	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0023d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196037
  00244	41 b8 07 a5 00
	00		 mov	 r8d, 42247		; 0000a507H
  0024a	48 8b d0	 mov	 rdx, rax
  0024d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00251	e8 00 00 00 00	 call	 dis_fac_ins

; 4193 :     DIS_FAC_INS( A50A, "or_immediate_low_high" );

  00256	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00262	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00266	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196038
  0026d	41 b8 0a a5 00
	00		 mov	 r8d, 42250		; 0000a50aH
  00273	48 8b d0	 mov	 rdx, rax
  00276	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0027a	e8 00 00 00 00	 call	 dis_fac_ins

; 4194 :     DIS_FAC_INS( A50B, "or_immediate_low_low" );

  0027f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0028b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0028f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196039
  00296	41 b8 0b a5 00
	00		 mov	 r8d, 42251		; 0000a50bH
  0029c	48 8b d0	 mov	 rdx, rax
  0029f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002a3	e8 00 00 00 00	 call	 dis_fac_ins

; 4195 :     DIS_FAC_INS( A50E, "load_logical_immediate_low_high" );

  002a8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  002b4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002b8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196040
  002bf	41 b8 0e a5 00
	00		 mov	 r8d, 42254		; 0000a50eH
  002c5	48 8b d0	 mov	 rdx, rax
  002c8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002cc	e8 00 00 00 00	 call	 dis_fac_ins

; 4196 :     DIS_FAC_INS( A50F, "load_logical_immediate_low_low" );

  002d1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  002dd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002e1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196041
  002e8	41 b8 0f a5 00
	00		 mov	 r8d, 42255		; 0000a50fH
  002ee	48 8b d0	 mov	 rdx, rax
  002f1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002f5	e8 00 00 00 00	 call	 dis_fac_ins

; 4197 : 
; 4198 :     DIS_FAC_INS( A700, "test_under_mask_high" );

  002fa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00306	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0030a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196042
  00311	41 b8 00 a7 00
	00		 mov	 r8d, 42752		; 0000a700H
  00317	48 8b d0	 mov	 rdx, rax
  0031a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0031e	e8 00 00 00 00	 call	 dis_fac_ins

; 4199 :     DIS_FAC_INS( A701, "test_under_mask_low" );

  00323	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0032f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00333	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196043
  0033a	41 b8 01 a7 00
	00		 mov	 r8d, 42753		; 0000a701H
  00340	48 8b d0	 mov	 rdx, rax
  00343	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00347	e8 00 00 00 00	 call	 dis_fac_ins

; 4200 :     DIS_FAC_INS( A704, "branch_relative_on_condition" );

  0034c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00358	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0035c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196044
  00363	41 b8 04 a7 00
	00		 mov	 r8d, 42756		; 0000a704H
  00369	48 8b d0	 mov	 rdx, rax
  0036c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00370	e8 00 00 00 00	 call	 dis_fac_ins

; 4201 :     DIS_FAC_INS( A705, "branch_relative_and_save" );

  00375	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00381	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00385	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196045
  0038c	41 b8 05 a7 00
	00		 mov	 r8d, 42757		; 0000a705H
  00392	48 8b d0	 mov	 rdx, rax
  00395	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00399	e8 00 00 00 00	 call	 dis_fac_ins

; 4202 :     DIS_FAC_INS( A706, "branch_relative_on_count" );

  0039e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  003aa	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196046
  003b5	41 b8 06 a7 00
	00		 mov	 r8d, 42758		; 0000a706H
  003bb	48 8b d0	 mov	 rdx, rax
  003be	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003c2	e8 00 00 00 00	 call	 dis_fac_ins

; 4203 :     DIS_FAC_INS( A708, "load_halfword_immediate" );

  003c7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  003d3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196047
  003de	41 b8 08 a7 00
	00		 mov	 r8d, 42760		; 0000a708H
  003e4	48 8b d0	 mov	 rdx, rax
  003e7	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003eb	e8 00 00 00 00	 call	 dis_fac_ins

; 4204 :     DIS_FAC_INS( A70A, "add_halfword_immediate" );

  003f0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  003fc	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00400	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196048
  00407	41 b8 0a a7 00
	00		 mov	 r8d, 42762		; 0000a70aH
  0040d	48 8b d0	 mov	 rdx, rax
  00410	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00414	e8 00 00 00 00	 call	 dis_fac_ins

; 4205 :     DIS_FAC_INS( A70C, "multiply_halfword_immediate" );

  00419	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0041e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00425	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00429	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196049
  00430	41 b8 0c a7 00
	00		 mov	 r8d, 42764		; 0000a70cH
  00436	48 8b d0	 mov	 rdx, rax
  00439	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0043d	e8 00 00 00 00	 call	 dis_fac_ins

; 4206 :     DIS_FAC_INS( A70E, "compare_halfword_immediate" );

  00442	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00447	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0044e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00452	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196050
  00459	41 b8 0e a7 00
	00		 mov	 r8d, 42766		; 0000a70eH
  0045f	48 8b d0	 mov	 rdx, rax
  00462	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00466	e8 00 00 00 00	 call	 dis_fac_ins

; 4207 : 
; 4208 :     DIS_FAC_INS( B241, "checksum" );

  0046b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00470	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00477	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0047b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196051
  00482	41 b8 41 b2 00
	00		 mov	 r8d, 45633		; 0000b241H
  00488	48 8b d0	 mov	 rdx, rax
  0048b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0048f	e8 00 00 00 00	 call	 dis_fac_ins

; 4209 :     DIS_FAC_INS( B244, "squareroot_float_long_reg" );

  00494	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00499	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  004a0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004a4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196052
  004ab	41 b8 44 b2 00
	00		 mov	 r8d, 45636		; 0000b244H
  004b1	48 8b d0	 mov	 rdx, rax
  004b4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004b8	e8 00 00 00 00	 call	 dis_fac_ins

; 4210 :     DIS_FAC_INS( B245, "squareroot_float_short_reg" );

  004bd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  004c9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004cd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196053
  004d4	41 b8 45 b2 00
	00		 mov	 r8d, 45637		; 0000b245H
  004da	48 8b d0	 mov	 rdx, rax
  004dd	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004e1	e8 00 00 00 00	 call	 dis_fac_ins

; 4211 : 
; 4212 :     DIS_FAC_INS( B252, "multiply_single_register" );

  004e6	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  004f2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004f6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196054
  004fd	41 b8 52 b2 00
	00		 mov	 r8d, 45650		; 0000b252H
  00503	48 8b d0	 mov	 rdx, rax
  00506	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0050a	e8 00 00 00 00	 call	 dis_fac_ins

; 4213 :     DIS_FAC_INS( B255, "move_string" );

  0050f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0051b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0051f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196055
  00526	41 b8 55 b2 00
	00		 mov	 r8d, 45653		; 0000b255H
  0052c	48 8b d0	 mov	 rdx, rax
  0052f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00533	e8 00 00 00 00	 call	 dis_fac_ins

; 4214 :     DIS_FAC_INS( B257, "compare_until_substring_equal" );

  00538	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0053d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00544	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00548	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196056
  0054f	41 b8 57 b2 00
	00		 mov	 r8d, 45655		; 0000b257H
  00555	48 8b d0	 mov	 rdx, rax
  00558	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0055c	e8 00 00 00 00	 call	 dis_fac_ins

; 4215 :     DIS_FAC_INS( B25D, "compare_logical_string" );

  00561	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00566	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0056d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00571	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196057
  00578	41 b8 5d b2 00
	00		 mov	 r8d, 45661		; 0000b25dH
  0057e	48 8b d0	 mov	 rdx, rax
  00581	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00585	e8 00 00 00 00	 call	 dis_fac_ins

; 4216 :     DIS_FAC_INS( B25E, "search_string" );

  0058a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0058f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00596	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0059a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196058
  005a1	41 b8 5e b2 00
	00		 mov	 r8d, 45662		; 0000b25eH
  005a7	48 8b d0	 mov	 rdx, rax
  005aa	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005ae	e8 00 00 00 00	 call	 dis_fac_ins

; 4217 : 
; 4218 :     DIS_FAC_INS( B263, "cmpsc_2012" );

  005b3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  005b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  005bf	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005c3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196059
  005ca	41 b8 63 b2 00
	00		 mov	 r8d, 45667		; 0000b263H
  005d0	48 8b d0	 mov	 rdx, rax
  005d3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005d7	e8 00 00 00 00	 call	 dis_fac_ins

; 4219 : 
; 4220 :     DIS_FAC_INS( B299, "set_bfp_rounding_mode_2bit" );

  005dc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  005e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  005e8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005ec	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196060
  005f3	41 b8 99 b2 00
	00		 mov	 r8d, 45721		; 0000b299H
  005f9	48 8b d0	 mov	 rdx, rax
  005fc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00600	e8 00 00 00 00	 call	 dis_fac_ins

; 4221 :     DIS_FAC_INS( B29C, "store_fpc" );

  00605	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0060a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00611	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00615	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196061
  0061c	41 b8 9c b2 00
	00		 mov	 r8d, 45724		; 0000b29cH
  00622	48 8b d0	 mov	 rdx, rax
  00625	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00629	e8 00 00 00 00	 call	 dis_fac_ins

; 4222 :     DIS_FAC_INS( B29D, "load_fpc" );

  0062e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00633	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0063a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0063e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196062
  00645	41 b8 9d b2 00
	00		 mov	 r8d, 45725		; 0000b29dH
  0064b	48 8b d0	 mov	 rdx, rax
  0064e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00652	e8 00 00 00 00	 call	 dis_fac_ins

; 4223 : 
; 4224 :     DIS_FAC_INS( B2A5, "translate_extended" );

  00657	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0065c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00663	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00667	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196063
  0066e	41 b8 a5 b2 00
	00		 mov	 r8d, 45733		; 0000b2a5H
  00674	48 8b d0	 mov	 rdx, rax
  00677	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0067b	e8 00 00 00 00	 call	 dis_fac_ins

; 4225 :     DIS_FAC_INS( B2A6, "convert_utf16_to_utf8" );

  00680	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00685	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0068c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00690	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196064
  00697	41 b8 a6 b2 00
	00		 mov	 r8d, 45734		; 0000b2a6H
  0069d	48 8b d0	 mov	 rdx, rax
  006a0	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006a4	e8 00 00 00 00	 call	 dis_fac_ins

; 4226 :     DIS_FAC_INS( B2A7, "convert_utf8_to_utf16" );

  006a9	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  006ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  006b5	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006b9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196065
  006c0	41 b8 a7 b2 00
	00		 mov	 r8d, 45735		; 0000b2a7H
  006c6	48 8b d0	 mov	 rdx, rax
  006c9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006cd	e8 00 00 00 00	 call	 dis_fac_ins

; 4227 : 
; 4228 :     DIS_FAC_INS( B300, "load_positive_bfp_short_reg" );

  006d2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  006d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  006de	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006e2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196066
  006e9	41 b8 00 b3 00
	00		 mov	 r8d, 45824		; 0000b300H
  006ef	48 8b d0	 mov	 rdx, rax
  006f2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006f6	e8 00 00 00 00	 call	 dis_fac_ins

; 4229 :     DIS_FAC_INS( B301, "load_negative_bfp_short_reg" );

  006fb	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00700	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00707	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0070b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196067
  00712	41 b8 01 b3 00
	00		 mov	 r8d, 45825		; 0000b301H
  00718	48 8b d0	 mov	 rdx, rax
  0071b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0071f	e8 00 00 00 00	 call	 dis_fac_ins

; 4230 :     DIS_FAC_INS( B302, "load_and_test_bfp_short_reg" );

  00724	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00729	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00730	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00734	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196068
  0073b	41 b8 02 b3 00
	00		 mov	 r8d, 45826		; 0000b302H
  00741	48 8b d0	 mov	 rdx, rax
  00744	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00748	e8 00 00 00 00	 call	 dis_fac_ins

; 4231 :     DIS_FAC_INS( B303, "load_complement_bfp_short_reg" );

  0074d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00752	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00759	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0075d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196069
  00764	41 b8 03 b3 00
	00		 mov	 r8d, 45827		; 0000b303H
  0076a	48 8b d0	 mov	 rdx, rax
  0076d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00771	e8 00 00 00 00	 call	 dis_fac_ins

; 4232 :     DIS_FAC_INS( B304, "load_lengthened_bfp_short_to_long_reg" );

  00776	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0077b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00782	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00786	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196070
  0078d	41 b8 04 b3 00
	00		 mov	 r8d, 45828		; 0000b304H
  00793	48 8b d0	 mov	 rdx, rax
  00796	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0079a	e8 00 00 00 00	 call	 dis_fac_ins

; 4233 :     DIS_FAC_INS( B305, "load_lengthened_bfp_long_to_ext_reg" );

  0079f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  007ab	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  007af	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196071
  007b6	41 b8 05 b3 00
	00		 mov	 r8d, 45829		; 0000b305H
  007bc	48 8b d0	 mov	 rdx, rax
  007bf	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  007c3	e8 00 00 00 00	 call	 dis_fac_ins

; 4234 :     DIS_FAC_INS( B306, "load_lengthened_bfp_short_to_ext_reg" );

  007c8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  007d4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  007d8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196072
  007df	41 b8 06 b3 00
	00		 mov	 r8d, 45830		; 0000b306H
  007e5	48 8b d0	 mov	 rdx, rax
  007e8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  007ec	e8 00 00 00 00	 call	 dis_fac_ins

; 4235 :     DIS_FAC_INS( B307, "multiply_bfp_long_to_ext_reg" );

  007f1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  007fd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00801	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196073
  00808	41 b8 07 b3 00
	00		 mov	 r8d, 45831		; 0000b307H
  0080e	48 8b d0	 mov	 rdx, rax
  00811	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00815	e8 00 00 00 00	 call	 dis_fac_ins

; 4236 :     DIS_FAC_INS( B308, "compare_and_signal_bfp_short_reg" );

  0081a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0081f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00826	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0082a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196074
  00831	41 b8 08 b3 00
	00		 mov	 r8d, 45832		; 0000b308H
  00837	48 8b d0	 mov	 rdx, rax
  0083a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0083e	e8 00 00 00 00	 call	 dis_fac_ins

; 4237 :     DIS_FAC_INS( B309, "compare_bfp_short_reg" );

  00843	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00848	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0084f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00853	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196075
  0085a	41 b8 09 b3 00
	00		 mov	 r8d, 45833		; 0000b309H
  00860	48 8b d0	 mov	 rdx, rax
  00863	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00867	e8 00 00 00 00	 call	 dis_fac_ins

; 4238 :     DIS_FAC_INS( B30A, "add_bfp_short_reg" );

  0086c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00871	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00878	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0087c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196076
  00883	41 b8 0a b3 00
	00		 mov	 r8d, 45834		; 0000b30aH
  00889	48 8b d0	 mov	 rdx, rax
  0088c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00890	e8 00 00 00 00	 call	 dis_fac_ins

; 4239 :     DIS_FAC_INS( B30B, "subtract_bfp_short_reg" );

  00895	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0089a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  008a1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008a5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196077
  008ac	41 b8 0b b3 00
	00		 mov	 r8d, 45835		; 0000b30bH
  008b2	48 8b d0	 mov	 rdx, rax
  008b5	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  008b9	e8 00 00 00 00	 call	 dis_fac_ins

; 4240 :     DIS_FAC_INS( B30C, "multiply_bfp_short_to_long_reg" );

  008be	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  008c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  008ca	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008ce	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196078
  008d5	41 b8 0c b3 00
	00		 mov	 r8d, 45836		; 0000b30cH
  008db	48 8b d0	 mov	 rdx, rax
  008de	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  008e2	e8 00 00 00 00	 call	 dis_fac_ins

; 4241 :     DIS_FAC_INS( B30D, "divide_bfp_short_reg" );

  008e7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  008ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  008f3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008f7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196079
  008fe	41 b8 0d b3 00
	00		 mov	 r8d, 45837		; 0000b30dH
  00904	48 8b d0	 mov	 rdx, rax
  00907	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0090b	e8 00 00 00 00	 call	 dis_fac_ins

; 4242 :     DIS_FAC_INS( B30E, "multiply_add_bfp_short_reg" );

  00910	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00915	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0091c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00920	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196080
  00927	41 b8 0e b3 00
	00		 mov	 r8d, 45838		; 0000b30eH
  0092d	48 8b d0	 mov	 rdx, rax
  00930	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00934	e8 00 00 00 00	 call	 dis_fac_ins

; 4243 :     DIS_FAC_INS( B30F, "multiply_subtract_bfp_short_reg" );

  00939	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0093e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00945	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00949	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196081
  00950	41 b8 0f b3 00
	00		 mov	 r8d, 45839		; 0000b30fH
  00956	48 8b d0	 mov	 rdx, rax
  00959	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0095d	e8 00 00 00 00	 call	 dis_fac_ins

; 4244 : 
; 4245 :     DIS_FAC_INS( B310, "load_positive_bfp_long_reg" );

  00962	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00967	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0096e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00972	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196082
  00979	41 b8 10 b3 00
	00		 mov	 r8d, 45840		; 0000b310H
  0097f	48 8b d0	 mov	 rdx, rax
  00982	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00986	e8 00 00 00 00	 call	 dis_fac_ins

; 4246 :     DIS_FAC_INS( B311, "load_negative_bfp_long_reg" );

  0098b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00990	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00997	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0099b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196083
  009a2	41 b8 11 b3 00
	00		 mov	 r8d, 45841		; 0000b311H
  009a8	48 8b d0	 mov	 rdx, rax
  009ab	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  009af	e8 00 00 00 00	 call	 dis_fac_ins

; 4247 :     DIS_FAC_INS( B312, "load_and_test_bfp_long_reg" );

  009b4	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  009b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  009c0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  009c4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196084
  009cb	41 b8 12 b3 00
	00		 mov	 r8d, 45842		; 0000b312H
  009d1	48 8b d0	 mov	 rdx, rax
  009d4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  009d8	e8 00 00 00 00	 call	 dis_fac_ins

; 4248 :     DIS_FAC_INS( B313, "load_complement_bfp_long_reg" );

  009dd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  009e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  009e9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  009ed	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196085
  009f4	41 b8 13 b3 00
	00		 mov	 r8d, 45843		; 0000b313H
  009fa	48 8b d0	 mov	 rdx, rax
  009fd	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a01	e8 00 00 00 00	 call	 dis_fac_ins

; 4249 :     DIS_FAC_INS( B314, "squareroot_bfp_short_reg" );

  00a06	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00a12	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a16	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196086
  00a1d	41 b8 14 b3 00
	00		 mov	 r8d, 45844		; 0000b314H
  00a23	48 8b d0	 mov	 rdx, rax
  00a26	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a2a	e8 00 00 00 00	 call	 dis_fac_ins

; 4250 :     DIS_FAC_INS( B315, "squareroot_bfp_long_reg" );

  00a2f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00a3b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a3f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196087
  00a46	41 b8 15 b3 00
	00		 mov	 r8d, 45845		; 0000b315H
  00a4c	48 8b d0	 mov	 rdx, rax
  00a4f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a53	e8 00 00 00 00	 call	 dis_fac_ins

; 4251 :     DIS_FAC_INS( B316, "squareroot_bfp_ext_reg" );

  00a58	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00a64	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a68	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196088
  00a6f	41 b8 16 b3 00
	00		 mov	 r8d, 45846		; 0000b316H
  00a75	48 8b d0	 mov	 rdx, rax
  00a78	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a7c	e8 00 00 00 00	 call	 dis_fac_ins

; 4252 :     DIS_FAC_INS( B317, "multiply_bfp_short_reg" );

  00a81	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a86	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00a8d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a91	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196089
  00a98	41 b8 17 b3 00
	00		 mov	 r8d, 45847		; 0000b317H
  00a9e	48 8b d0	 mov	 rdx, rax
  00aa1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00aa5	e8 00 00 00 00	 call	 dis_fac_ins

; 4253 :     DIS_FAC_INS( B318, "compare_and_signal_bfp_long_reg" );

  00aaa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00aaf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00ab6	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00aba	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196090
  00ac1	41 b8 18 b3 00
	00		 mov	 r8d, 45848		; 0000b318H
  00ac7	48 8b d0	 mov	 rdx, rax
  00aca	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00ace	e8 00 00 00 00	 call	 dis_fac_ins

; 4254 :     DIS_FAC_INS( B319, "compare_bfp_long_reg" );

  00ad3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ad8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00adf	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00ae3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196091
  00aea	41 b8 19 b3 00
	00		 mov	 r8d, 45849		; 0000b319H
  00af0	48 8b d0	 mov	 rdx, rax
  00af3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00af7	e8 00 00 00 00	 call	 dis_fac_ins

; 4255 :     DIS_FAC_INS( B31A, "add_bfp_long_reg" );

  00afc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00b08	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b0c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196092
  00b13	41 b8 1a b3 00
	00		 mov	 r8d, 45850		; 0000b31aH
  00b19	48 8b d0	 mov	 rdx, rax
  00b1c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b20	e8 00 00 00 00	 call	 dis_fac_ins

; 4256 :     DIS_FAC_INS( B31B, "subtract_bfp_long_reg" );

  00b25	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00b31	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b35	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196093
  00b3c	41 b8 1b b3 00
	00		 mov	 r8d, 45851		; 0000b31bH
  00b42	48 8b d0	 mov	 rdx, rax
  00b45	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b49	e8 00 00 00 00	 call	 dis_fac_ins

; 4257 :     DIS_FAC_INS( B31C, "multiply_bfp_long_reg" );

  00b4e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00b5a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b5e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196094
  00b65	41 b8 1c b3 00
	00		 mov	 r8d, 45852		; 0000b31cH
  00b6b	48 8b d0	 mov	 rdx, rax
  00b6e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b72	e8 00 00 00 00	 call	 dis_fac_ins

; 4258 :     DIS_FAC_INS( B31D, "divide_bfp_long_reg" );

  00b77	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00b83	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b87	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196095
  00b8e	41 b8 1d b3 00
	00		 mov	 r8d, 45853		; 0000b31dH
  00b94	48 8b d0	 mov	 rdx, rax
  00b97	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b9b	e8 00 00 00 00	 call	 dis_fac_ins

; 4259 :     DIS_FAC_INS( B31E, "multiply_add_bfp_long_reg" );

  00ba0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ba5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00bac	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00bb0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196096
  00bb7	41 b8 1e b3 00
	00		 mov	 r8d, 45854		; 0000b31eH
  00bbd	48 8b d0	 mov	 rdx, rax
  00bc0	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00bc4	e8 00 00 00 00	 call	 dis_fac_ins

; 4260 :     DIS_FAC_INS( B31F, "multiply_subtract_bfp_long_reg" );

  00bc9	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00bce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00bd5	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00bd9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196097
  00be0	41 b8 1f b3 00
	00		 mov	 r8d, 45855		; 0000b31fH
  00be6	48 8b d0	 mov	 rdx, rax
  00be9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00bed	e8 00 00 00 00	 call	 dis_fac_ins

; 4261 : 
; 4262 :     DIS_FAC_INS( B324, "load_lengthened_float_short_to_long_reg" );

  00bf2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00bf7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00bfe	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00c02	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196098
  00c09	41 b8 24 b3 00
	00		 mov	 r8d, 45860		; 0000b324H
  00c0f	48 8b d0	 mov	 rdx, rax
  00c12	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00c16	e8 00 00 00 00	 call	 dis_fac_ins

; 4263 :     DIS_FAC_INS( B325, "load_lengthened_float_long_to_ext_reg" );

  00c1b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00c20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00c27	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00c2b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196099
  00c32	41 b8 25 b3 00
	00		 mov	 r8d, 45861		; 0000b325H
  00c38	48 8b d0	 mov	 rdx, rax
  00c3b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00c3f	e8 00 00 00 00	 call	 dis_fac_ins

; 4264 :     DIS_FAC_INS( B326, "load_lengthened_float_short_to_ext_reg" );

  00c44	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00c49	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00c50	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00c54	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196100
  00c5b	41 b8 26 b3 00
	00		 mov	 r8d, 45862		; 0000b326H
  00c61	48 8b d0	 mov	 rdx, rax
  00c64	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00c68	e8 00 00 00 00	 call	 dis_fac_ins

; 4265 : 
; 4266 :     DIS_FAC_INS( B336, "squareroot_float_ext_reg" );

  00c6d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00c72	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00c79	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00c7d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196101
  00c84	41 b8 36 b3 00
	00		 mov	 r8d, 45878		; 0000b336H
  00c8a	48 8b d0	 mov	 rdx, rax
  00c8d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00c91	e8 00 00 00 00	 call	 dis_fac_ins

; 4267 :     DIS_FAC_INS( B337, "multiply_float_short_reg" );

  00c96	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00c9b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00ca2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00ca6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196102
  00cad	41 b8 37 b3 00
	00		 mov	 r8d, 45879		; 0000b337H
  00cb3	48 8b d0	 mov	 rdx, rax
  00cb6	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00cba	e8 00 00 00 00	 call	 dis_fac_ins

; 4268 : 
; 4269 :     DIS_FAC_INS( B340, "load_positive_bfp_ext_reg" );

  00cbf	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00cc4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00ccb	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00ccf	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196103
  00cd6	41 b8 40 b3 00
	00		 mov	 r8d, 45888		; 0000b340H
  00cdc	48 8b d0	 mov	 rdx, rax
  00cdf	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00ce3	e8 00 00 00 00	 call	 dis_fac_ins

; 4270 :     DIS_FAC_INS( B341, "load_negative_bfp_ext_reg" );

  00ce8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ced	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00cf4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00cf8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196104
  00cff	41 b8 41 b3 00
	00		 mov	 r8d, 45889		; 0000b341H
  00d05	48 8b d0	 mov	 rdx, rax
  00d08	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00d0c	e8 00 00 00 00	 call	 dis_fac_ins

; 4271 :     DIS_FAC_INS( B342, "load_and_test_bfp_ext_reg" );

  00d11	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00d16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00d1d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00d21	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196105
  00d28	41 b8 42 b3 00
	00		 mov	 r8d, 45890		; 0000b342H
  00d2e	48 8b d0	 mov	 rdx, rax
  00d31	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00d35	e8 00 00 00 00	 call	 dis_fac_ins

; 4272 :     DIS_FAC_INS( B343, "load_complement_bfp_ext_reg" );

  00d3a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00d3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00d46	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00d4a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196106
  00d51	41 b8 43 b3 00
	00		 mov	 r8d, 45891		; 0000b343H
  00d57	48 8b d0	 mov	 rdx, rax
  00d5a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00d5e	e8 00 00 00 00	 call	 dis_fac_ins

; 4273 :     DIS_FAC_INS( B344, "load_rounded_bfp_long_to_short_reg" );

  00d63	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00d68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00d6f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00d73	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196107
  00d7a	41 b8 44 b3 00
	00		 mov	 r8d, 45892		; 0000b344H
  00d80	48 8b d0	 mov	 rdx, rax
  00d83	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00d87	e8 00 00 00 00	 call	 dis_fac_ins

; 4274 :     DIS_FAC_INS( B345, "load_rounded_bfp_ext_to_long_reg" );

  00d8c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00d91	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00d98	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00d9c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196108
  00da3	41 b8 45 b3 00
	00		 mov	 r8d, 45893		; 0000b345H
  00da9	48 8b d0	 mov	 rdx, rax
  00dac	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00db0	e8 00 00 00 00	 call	 dis_fac_ins

; 4275 :     DIS_FAC_INS( B346, "load_rounded_bfp_ext_to_short_reg" );

  00db5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00dba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00dc1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00dc5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196109
  00dcc	41 b8 46 b3 00
	00		 mov	 r8d, 45894		; 0000b346H
  00dd2	48 8b d0	 mov	 rdx, rax
  00dd5	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00dd9	e8 00 00 00 00	 call	 dis_fac_ins

; 4276 :     DIS_FAC_INS( B347, "load_fp_int_bfp_ext_reg" );

  00dde	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00de3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00dea	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00dee	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196110
  00df5	41 b8 47 b3 00
	00		 mov	 r8d, 45895		; 0000b347H
  00dfb	48 8b d0	 mov	 rdx, rax
  00dfe	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00e02	e8 00 00 00 00	 call	 dis_fac_ins

; 4277 :     DIS_FAC_INS( B348, "compare_and_signal_bfp_ext_reg" );

  00e07	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00e0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00e13	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00e17	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196111
  00e1e	41 b8 48 b3 00
	00		 mov	 r8d, 45896		; 0000b348H
  00e24	48 8b d0	 mov	 rdx, rax
  00e27	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00e2b	e8 00 00 00 00	 call	 dis_fac_ins

; 4278 :     DIS_FAC_INS( B349, "compare_bfp_ext_reg" );

  00e30	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00e35	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00e3c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00e40	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196112
  00e47	41 b8 49 b3 00
	00		 mov	 r8d, 45897		; 0000b349H
  00e4d	48 8b d0	 mov	 rdx, rax
  00e50	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00e54	e8 00 00 00 00	 call	 dis_fac_ins

; 4279 :     DIS_FAC_INS( B34A, "add_bfp_ext_reg" );

  00e59	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00e5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00e65	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00e69	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196113
  00e70	41 b8 4a b3 00
	00		 mov	 r8d, 45898		; 0000b34aH
  00e76	48 8b d0	 mov	 rdx, rax
  00e79	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00e7d	e8 00 00 00 00	 call	 dis_fac_ins

; 4280 :     DIS_FAC_INS( B34B, "subtract_bfp_ext_reg" );

  00e82	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00e87	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00e8e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00e92	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196114
  00e99	41 b8 4b b3 00
	00		 mov	 r8d, 45899		; 0000b34bH
  00e9f	48 8b d0	 mov	 rdx, rax
  00ea2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00ea6	e8 00 00 00 00	 call	 dis_fac_ins

; 4281 :     DIS_FAC_INS( B34C, "multiply_bfp_ext_reg" );

  00eab	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00eb0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00eb7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00ebb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196115
  00ec2	41 b8 4c b3 00
	00		 mov	 r8d, 45900		; 0000b34cH
  00ec8	48 8b d0	 mov	 rdx, rax
  00ecb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00ecf	e8 00 00 00 00	 call	 dis_fac_ins

; 4282 :     DIS_FAC_INS( B34D, "divide_bfp_ext_reg" );

  00ed4	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ed9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00ee0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00ee4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196116
  00eeb	41 b8 4d b3 00
	00		 mov	 r8d, 45901		; 0000b34dH
  00ef1	48 8b d0	 mov	 rdx, rax
  00ef4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00ef8	e8 00 00 00 00	 call	 dis_fac_ins

; 4283 : 
; 4284 :     DIS_FAC_INS( B350, "convert_float_long_to_bfp_short_reg" );

  00efd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00f02	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00f09	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00f0d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196117
  00f14	41 b8 50 b3 00
	00		 mov	 r8d, 45904		; 0000b350H
  00f1a	48 8b d0	 mov	 rdx, rax
  00f1d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00f21	e8 00 00 00 00	 call	 dis_fac_ins

; 4285 :     DIS_FAC_INS( B351, "convert_float_long_to_bfp_long_reg" );

  00f26	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00f2b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00f32	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00f36	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196118
  00f3d	41 b8 51 b3 00
	00		 mov	 r8d, 45905		; 0000b351H
  00f43	48 8b d0	 mov	 rdx, rax
  00f46	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00f4a	e8 00 00 00 00	 call	 dis_fac_ins

; 4286 :     DIS_FAC_INS( B353, "divide_integer_bfp_short_reg" );

  00f4f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00f54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00f5b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00f5f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196119
  00f66	41 b8 53 b3 00
	00		 mov	 r8d, 45907		; 0000b353H
  00f6c	48 8b d0	 mov	 rdx, rax
  00f6f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00f73	e8 00 00 00 00	 call	 dis_fac_ins

; 4287 :     DIS_FAC_INS( B357, "load_fp_int_bfp_short_reg" );

  00f78	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00f7d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00f84	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00f88	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196120
  00f8f	41 b8 57 b3 00
	00		 mov	 r8d, 45911		; 0000b357H
  00f95	48 8b d0	 mov	 rdx, rax
  00f98	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00f9c	e8 00 00 00 00	 call	 dis_fac_ins

; 4288 :     DIS_FAC_INS( B358, "convert_bfp_short_to_float_long_reg" );

  00fa1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00fa6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00fad	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00fb1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196121
  00fb8	41 b8 58 b3 00
	00		 mov	 r8d, 45912		; 0000b358H
  00fbe	48 8b d0	 mov	 rdx, rax
  00fc1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00fc5	e8 00 00 00 00	 call	 dis_fac_ins

; 4289 :     DIS_FAC_INS( B359, "convert_bfp_long_to_float_long_reg" );

  00fca	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00fcf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00fd6	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00fda	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196122
  00fe1	41 b8 59 b3 00
	00		 mov	 r8d, 45913		; 0000b359H
  00fe7	48 8b d0	 mov	 rdx, rax
  00fea	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00fee	e8 00 00 00 00	 call	 dis_fac_ins

; 4290 :     DIS_FAC_INS( B35B, "divide_integer_bfp_long_reg" );

  00ff3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ff8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  00fff	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01003	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196123
  0100a	41 b8 5b b3 00
	00		 mov	 r8d, 45915		; 0000b35bH
  01010	48 8b d0	 mov	 rdx, rax
  01013	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01017	e8 00 00 00 00	 call	 dis_fac_ins

; 4291 :     DIS_FAC_INS( B35F, "load_fp_int_bfp_long_reg" );

  0101c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01028	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0102c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196124
  01033	41 b8 5f b3 00
	00		 mov	 r8d, 45919		; 0000b35fH
  01039	48 8b d0	 mov	 rdx, rax
  0103c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01040	e8 00 00 00 00	 call	 dis_fac_ins

; 4292 : 
; 4293 :     DIS_FAC_INS( B360, "load_positive_float_ext_reg" );

  01045	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0104a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01051	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01055	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196125
  0105c	41 b8 60 b3 00
	00		 mov	 r8d, 45920		; 0000b360H
  01062	48 8b d0	 mov	 rdx, rax
  01065	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01069	e8 00 00 00 00	 call	 dis_fac_ins

; 4294 :     DIS_FAC_INS( B361, "load_negative_float_ext_reg" );

  0106e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0107a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0107e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196126
  01085	41 b8 61 b3 00
	00		 mov	 r8d, 45921		; 0000b361H
  0108b	48 8b d0	 mov	 rdx, rax
  0108e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01092	e8 00 00 00 00	 call	 dis_fac_ins

; 4295 :     DIS_FAC_INS( B362, "load_and_test_float_ext_reg" );

  01097	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0109c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  010a3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  010a7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196127
  010ae	41 b8 62 b3 00
	00		 mov	 r8d, 45922		; 0000b362H
  010b4	48 8b d0	 mov	 rdx, rax
  010b7	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  010bb	e8 00 00 00 00	 call	 dis_fac_ins

; 4296 :     DIS_FAC_INS( B363, "load_complement_float_ext_reg" );

  010c0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  010c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  010cc	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  010d0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196128
  010d7	41 b8 63 b3 00
	00		 mov	 r8d, 45923		; 0000b363H
  010dd	48 8b d0	 mov	 rdx, rax
  010e0	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  010e4	e8 00 00 00 00	 call	 dis_fac_ins

; 4297 :     DIS_FAC_INS( B365, "load_float_ext_reg" );

  010e9	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  010ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  010f5	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  010f9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196129
  01100	41 b8 65 b3 00
	00		 mov	 r8d, 45925		; 0000b365H
  01106	48 8b d0	 mov	 rdx, rax
  01109	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0110d	e8 00 00 00 00	 call	 dis_fac_ins

; 4298 :     DIS_FAC_INS( B366, "load_rounded_float_ext_to_short_reg" );

  01112	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0111e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01122	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196130
  01129	41 b8 66 b3 00
	00		 mov	 r8d, 45926		; 0000b366H
  0112f	48 8b d0	 mov	 rdx, rax
  01132	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01136	e8 00 00 00 00	 call	 dis_fac_ins

; 4299 :     DIS_FAC_INS( B367, "load_fp_int_float_ext_reg" );

  0113b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01147	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0114b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196131
  01152	41 b8 67 b3 00
	00		 mov	 r8d, 45927		; 0000b367H
  01158	48 8b d0	 mov	 rdx, rax
  0115b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0115f	e8 00 00 00 00	 call	 dis_fac_ins

; 4300 :     DIS_FAC_INS( B369, "compare_float_ext_reg" );

  01164	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01170	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01174	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196132
  0117b	41 b8 69 b3 00
	00		 mov	 r8d, 45929		; 0000b369H
  01181	48 8b d0	 mov	 rdx, rax
  01184	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01188	e8 00 00 00 00	 call	 dis_fac_ins

; 4301 : 
; 4302 :     DIS_FAC_INS( B374, "load_zero_float_short_reg" );

  0118d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01199	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0119d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196133
  011a4	41 b8 74 b3 00
	00		 mov	 r8d, 45940		; 0000b374H
  011aa	48 8b d0	 mov	 rdx, rax
  011ad	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  011b1	e8 00 00 00 00	 call	 dis_fac_ins

; 4303 :     DIS_FAC_INS( B375, "load_zero_float_long_reg" );

  011b6	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  011bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  011c2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  011c6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196134
  011cd	41 b8 75 b3 00
	00		 mov	 r8d, 45941		; 0000b375H
  011d3	48 8b d0	 mov	 rdx, rax
  011d6	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  011da	e8 00 00 00 00	 call	 dis_fac_ins

; 4304 :     DIS_FAC_INS( B376, "load_zero_float_ext_reg" );

  011df	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  011e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  011eb	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  011ef	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196135
  011f6	41 b8 76 b3 00
	00		 mov	 r8d, 45942		; 0000b376H
  011fc	48 8b d0	 mov	 rdx, rax
  011ff	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01203	e8 00 00 00 00	 call	 dis_fac_ins

; 4305 :     DIS_FAC_INS( B377, "load_fp_int_float_short_reg" );

  01208	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0120d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01214	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01218	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196136
  0121f	41 b8 77 b3 00
	00		 mov	 r8d, 45943		; 0000b377H
  01225	48 8b d0	 mov	 rdx, rax
  01228	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0122c	e8 00 00 00 00	 call	 dis_fac_ins

; 4306 :     DIS_FAC_INS( B37F, "load_fp_int_float_long_reg" );

  01231	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01236	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0123d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01241	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196137
  01248	41 b8 7f b3 00
	00		 mov	 r8d, 45951		; 0000b37fH
  0124e	48 8b d0	 mov	 rdx, rax
  01251	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01255	e8 00 00 00 00	 call	 dis_fac_ins

; 4307 : 
; 4308 :     DIS_FAC_INS( B384, "set_fpc" );

  0125a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0125f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01266	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0126a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196138
  01271	41 b8 84 b3 00
	00		 mov	 r8d, 45956		; 0000b384H
  01277	48 8b d0	 mov	 rdx, rax
  0127a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0127e	e8 00 00 00 00	 call	 dis_fac_ins

; 4309 :     DIS_FAC_INS( B38C, "extract_fpc" );

  01283	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01288	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0128f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01293	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196139
  0129a	41 b8 8c b3 00
	00		 mov	 r8d, 45964		; 0000b38cH
  012a0	48 8b d0	 mov	 rdx, rax
  012a3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  012a7	e8 00 00 00 00	 call	 dis_fac_ins

; 4310 : 
; 4311 :     DIS_FAC_INS( B394, "convert_fix32_to_bfp_short_reg" );

  012ac	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  012b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  012b8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  012bc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196140
  012c3	41 b8 94 b3 00
	00		 mov	 r8d, 45972		; 0000b394H
  012c9	48 8b d0	 mov	 rdx, rax
  012cc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  012d0	e8 00 00 00 00	 call	 dis_fac_ins

; 4312 :     DIS_FAC_INS( B395, "convert_fix32_to_bfp_long_reg" );

  012d5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  012da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  012e1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  012e5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196141
  012ec	41 b8 95 b3 00
	00		 mov	 r8d, 45973		; 0000b395H
  012f2	48 8b d0	 mov	 rdx, rax
  012f5	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  012f9	e8 00 00 00 00	 call	 dis_fac_ins

; 4313 :     DIS_FAC_INS( B396, "convert_fix32_to_bfp_ext_reg" );

  012fe	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0130a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0130e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196142
  01315	41 b8 96 b3 00
	00		 mov	 r8d, 45974		; 0000b396H
  0131b	48 8b d0	 mov	 rdx, rax
  0131e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01322	e8 00 00 00 00	 call	 dis_fac_ins

; 4314 :     DIS_FAC_INS( B398, "convert_bfp_short_to_fix32_reg" );

  01327	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0132c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01333	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01337	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196143
  0133e	41 b8 98 b3 00
	00		 mov	 r8d, 45976		; 0000b398H
  01344	48 8b d0	 mov	 rdx, rax
  01347	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0134b	e8 00 00 00 00	 call	 dis_fac_ins

; 4315 :     DIS_FAC_INS( B399, "convert_bfp_long_to_fix32_reg" );

  01350	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01355	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0135c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01360	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196144
  01367	41 b8 99 b3 00
	00		 mov	 r8d, 45977		; 0000b399H
  0136d	48 8b d0	 mov	 rdx, rax
  01370	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01374	e8 00 00 00 00	 call	 dis_fac_ins

; 4316 :     DIS_FAC_INS( B39A, "convert_bfp_ext_to_fix32_reg" );

  01379	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0137e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01385	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01389	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196145
  01390	41 b8 9a b3 00
	00		 mov	 r8d, 45978		; 0000b39aH
  01396	48 8b d0	 mov	 rdx, rax
  01399	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0139d	e8 00 00 00 00	 call	 dis_fac_ins

; 4317 : 
; 4318 :     DIS_FAC_INS( B3B4, "convert_fixed_to_float_short_reg" );

  013a2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  013a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  013ae	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  013b2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196146
  013b9	41 b8 b4 b3 00
	00		 mov	 r8d, 46004		; 0000b3b4H
  013bf	48 8b d0	 mov	 rdx, rax
  013c2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  013c6	e8 00 00 00 00	 call	 dis_fac_ins

; 4319 :     DIS_FAC_INS( B3B5, "convert_fixed_to_float_long_reg" );

  013cb	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  013d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  013d7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  013db	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196147
  013e2	41 b8 b5 b3 00
	00		 mov	 r8d, 46005		; 0000b3b5H
  013e8	48 8b d0	 mov	 rdx, rax
  013eb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  013ef	e8 00 00 00 00	 call	 dis_fac_ins

; 4320 :     DIS_FAC_INS( B3B6, "convert_fixed_to_float_ext_reg" );

  013f4	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  013f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01400	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01404	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196148
  0140b	41 b8 b6 b3 00
	00		 mov	 r8d, 46006		; 0000b3b6H
  01411	48 8b d0	 mov	 rdx, rax
  01414	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01418	e8 00 00 00 00	 call	 dis_fac_ins

; 4321 :     DIS_FAC_INS( B3B8, "convert_float_short_to_fixed_reg" );

  0141d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01422	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01429	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0142d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196149
  01434	41 b8 b8 b3 00
	00		 mov	 r8d, 46008		; 0000b3b8H
  0143a	48 8b d0	 mov	 rdx, rax
  0143d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01441	e8 00 00 00 00	 call	 dis_fac_ins

; 4322 :     DIS_FAC_INS( B3B9, "convert_float_long_to_fixed_reg" );

  01446	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0144b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01452	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01456	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196150
  0145d	41 b8 b9 b3 00
	00		 mov	 r8d, 46009		; 0000b3b9H
  01463	48 8b d0	 mov	 rdx, rax
  01466	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0146a	e8 00 00 00 00	 call	 dis_fac_ins

; 4323 :     DIS_FAC_INS( B3BA, "convert_float_ext_to_fixed_reg" );

  0146f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01474	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0147b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0147f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196151
  01486	41 b8 ba b3 00
	00		 mov	 r8d, 46010		; 0000b3baH
  0148c	48 8b d0	 mov	 rdx, rax
  0148f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01493	e8 00 00 00 00	 call	 dis_fac_ins

; 4324 : 
; 4325 :     DIS_FAC_INS( ED04, "load_lengthened_bfp_short_to_long" );

  01498	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0149d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  014a4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  014a8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196152
  014af	41 b8 04 ed 00
	00		 mov	 r8d, 60676		; 0000ed04H
  014b5	48 8b d0	 mov	 rdx, rax
  014b8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  014bc	e8 00 00 00 00	 call	 dis_fac_ins

; 4326 :     DIS_FAC_INS( ED05, "load_lengthened_bfp_long_to_ext" );

  014c1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  014c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  014cd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  014d1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196153
  014d8	41 b8 05 ed 00
	00		 mov	 r8d, 60677		; 0000ed05H
  014de	48 8b d0	 mov	 rdx, rax
  014e1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  014e5	e8 00 00 00 00	 call	 dis_fac_ins

; 4327 :     DIS_FAC_INS( ED06, "load_lengthened_bfp_short_to_ext" );

  014ea	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  014ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  014f6	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  014fa	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196154
  01501	41 b8 06 ed 00
	00		 mov	 r8d, 60678		; 0000ed06H
  01507	48 8b d0	 mov	 rdx, rax
  0150a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0150e	e8 00 00 00 00	 call	 dis_fac_ins

; 4328 :     DIS_FAC_INS( ED07, "multiply_bfp_long_to_ext" );

  01513	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01518	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0151f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01523	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196155
  0152a	41 b8 07 ed 00
	00		 mov	 r8d, 60679		; 0000ed07H
  01530	48 8b d0	 mov	 rdx, rax
  01533	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01537	e8 00 00 00 00	 call	 dis_fac_ins

; 4329 :     DIS_FAC_INS( ED08, "compare_and_signal_bfp_short" );

  0153c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01541	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01548	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0154c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196156
  01553	41 b8 08 ed 00
	00		 mov	 r8d, 60680		; 0000ed08H
  01559	48 8b d0	 mov	 rdx, rax
  0155c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01560	e8 00 00 00 00	 call	 dis_fac_ins

; 4330 :     DIS_FAC_INS( ED09, "compare_bfp_short" );

  01565	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0156a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01571	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01575	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196157
  0157c	41 b8 09 ed 00
	00		 mov	 r8d, 60681		; 0000ed09H
  01582	48 8b d0	 mov	 rdx, rax
  01585	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01589	e8 00 00 00 00	 call	 dis_fac_ins

; 4331 :     DIS_FAC_INS( ED0A, "add_bfp_short" );

  0158e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01593	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0159a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0159e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196158
  015a5	41 b8 0a ed 00
	00		 mov	 r8d, 60682		; 0000ed0aH
  015ab	48 8b d0	 mov	 rdx, rax
  015ae	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  015b2	e8 00 00 00 00	 call	 dis_fac_ins

; 4332 :     DIS_FAC_INS( ED0B, "subtract_bfp_short" );

  015b7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  015bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  015c3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  015c7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196159
  015ce	41 b8 0b ed 00
	00		 mov	 r8d, 60683		; 0000ed0bH
  015d4	48 8b d0	 mov	 rdx, rax
  015d7	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  015db	e8 00 00 00 00	 call	 dis_fac_ins

; 4333 :     DIS_FAC_INS( ED0C, "multiply_bfp_short_to_long" );

  015e0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  015e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  015ec	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  015f0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196160
  015f7	41 b8 0c ed 00
	00		 mov	 r8d, 60684		; 0000ed0cH
  015fd	48 8b d0	 mov	 rdx, rax
  01600	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01604	e8 00 00 00 00	 call	 dis_fac_ins

; 4334 :     DIS_FAC_INS( ED0D, "divide_bfp_short" );

  01609	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0160e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01615	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01619	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196161
  01620	41 b8 0d ed 00
	00		 mov	 r8d, 60685		; 0000ed0dH
  01626	48 8b d0	 mov	 rdx, rax
  01629	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0162d	e8 00 00 00 00	 call	 dis_fac_ins

; 4335 :     DIS_FAC_INS( ED0E, "multiply_add_bfp_short" );

  01632	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01637	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0163e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01642	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196162
  01649	41 b8 0e ed 00
	00		 mov	 r8d, 60686		; 0000ed0eH
  0164f	48 8b d0	 mov	 rdx, rax
  01652	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01656	e8 00 00 00 00	 call	 dis_fac_ins

; 4336 :     DIS_FAC_INS( ED0F, "multiply_subtract_bfp_short" );

  0165b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01660	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01667	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0166b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196163
  01672	41 b8 0f ed 00
	00		 mov	 r8d, 60687		; 0000ed0fH
  01678	48 8b d0	 mov	 rdx, rax
  0167b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0167f	e8 00 00 00 00	 call	 dis_fac_ins

; 4337 : 
; 4338 :     DIS_FAC_INS( ED10, "test_data_class_bfp_short" );

  01684	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01689	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01690	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01694	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196164
  0169b	41 b8 10 ed 00
	00		 mov	 r8d, 60688		; 0000ed10H
  016a1	48 8b d0	 mov	 rdx, rax
  016a4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  016a8	e8 00 00 00 00	 call	 dis_fac_ins

; 4339 :     DIS_FAC_INS( ED11, "test_data_class_bfp_long" );

  016ad	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  016b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  016b9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  016bd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196165
  016c4	41 b8 11 ed 00
	00		 mov	 r8d, 60689		; 0000ed11H
  016ca	48 8b d0	 mov	 rdx, rax
  016cd	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  016d1	e8 00 00 00 00	 call	 dis_fac_ins

; 4340 :     DIS_FAC_INS( ED12, "test_data_class_bfp_ext" );

  016d6	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  016db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  016e2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  016e6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196166
  016ed	41 b8 12 ed 00
	00		 mov	 r8d, 60690		; 0000ed12H
  016f3	48 8b d0	 mov	 rdx, rax
  016f6	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  016fa	e8 00 00 00 00	 call	 dis_fac_ins

; 4341 :     DIS_FAC_INS( ED14, "squareroot_bfp_short" );

  016ff	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01704	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0170b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0170f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196167
  01716	41 b8 14 ed 00
	00		 mov	 r8d, 60692		; 0000ed14H
  0171c	48 8b d0	 mov	 rdx, rax
  0171f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01723	e8 00 00 00 00	 call	 dis_fac_ins

; 4342 :     DIS_FAC_INS( ED15, "squareroot_bfp_long" );

  01728	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0172d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01734	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01738	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196168
  0173f	41 b8 15 ed 00
	00		 mov	 r8d, 60693		; 0000ed15H
  01745	48 8b d0	 mov	 rdx, rax
  01748	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0174c	e8 00 00 00 00	 call	 dis_fac_ins

; 4343 :     DIS_FAC_INS( ED17, "multiply_bfp_short" );

  01751	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01756	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0175d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01761	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196169
  01768	41 b8 17 ed 00
	00		 mov	 r8d, 60695		; 0000ed17H
  0176e	48 8b d0	 mov	 rdx, rax
  01771	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01775	e8 00 00 00 00	 call	 dis_fac_ins

; 4344 :     DIS_FAC_INS( ED18, "compare_and_signal_bfp_long" );

  0177a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0177f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01786	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0178a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196170
  01791	41 b8 18 ed 00
	00		 mov	 r8d, 60696		; 0000ed18H
  01797	48 8b d0	 mov	 rdx, rax
  0179a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0179e	e8 00 00 00 00	 call	 dis_fac_ins

; 4345 :     DIS_FAC_INS( ED19, "compare_bfp_long" );

  017a3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  017a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  017af	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  017b3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196171
  017ba	41 b8 19 ed 00
	00		 mov	 r8d, 60697		; 0000ed19H
  017c0	48 8b d0	 mov	 rdx, rax
  017c3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  017c7	e8 00 00 00 00	 call	 dis_fac_ins

; 4346 :     DIS_FAC_INS( ED1A, "add_bfp_long" );

  017cc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  017d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  017d8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  017dc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196172
  017e3	41 b8 1a ed 00
	00		 mov	 r8d, 60698		; 0000ed1aH
  017e9	48 8b d0	 mov	 rdx, rax
  017ec	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  017f0	e8 00 00 00 00	 call	 dis_fac_ins

; 4347 :     DIS_FAC_INS( ED1B, "subtract_bfp_long" );

  017f5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  017fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01801	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01805	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196173
  0180c	41 b8 1b ed 00
	00		 mov	 r8d, 60699		; 0000ed1bH
  01812	48 8b d0	 mov	 rdx, rax
  01815	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01819	e8 00 00 00 00	 call	 dis_fac_ins

; 4348 :     DIS_FAC_INS( ED1C, "multiply_bfp_long" );

  0181e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01823	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0182a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0182e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196174
  01835	41 b8 1c ed 00
	00		 mov	 r8d, 60700		; 0000ed1cH
  0183b	48 8b d0	 mov	 rdx, rax
  0183e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01842	e8 00 00 00 00	 call	 dis_fac_ins

; 4349 :     DIS_FAC_INS( ED1D, "divide_bfp_long" );

  01847	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0184c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01853	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01857	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196175
  0185e	41 b8 1d ed 00
	00		 mov	 r8d, 60701		; 0000ed1dH
  01864	48 8b d0	 mov	 rdx, rax
  01867	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0186b	e8 00 00 00 00	 call	 dis_fac_ins

; 4350 :     DIS_FAC_INS( ED1E, "multiply_add_bfp_long" );

  01870	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01875	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0187c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01880	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196176
  01887	41 b8 1e ed 00
	00		 mov	 r8d, 60702		; 0000ed1eH
  0188d	48 8b d0	 mov	 rdx, rax
  01890	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01894	e8 00 00 00 00	 call	 dis_fac_ins

; 4351 :     DIS_FAC_INS( ED1F, "multiply_subtract_bfp_long" );

  01899	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0189e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  018a5	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  018a9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196177
  018b0	41 b8 1f ed 00
	00		 mov	 r8d, 60703		; 0000ed1fH
  018b6	48 8b d0	 mov	 rdx, rax
  018b9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  018bd	e8 00 00 00 00	 call	 dis_fac_ins

; 4352 : 
; 4353 :     DIS_FAC_INS( ED24, "load_lengthened_float_short_to_long" );

  018c2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  018c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  018ce	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  018d2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196178
  018d9	41 b8 24 ed 00
	00		 mov	 r8d, 60708		; 0000ed24H
  018df	48 8b d0	 mov	 rdx, rax
  018e2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  018e6	e8 00 00 00 00	 call	 dis_fac_ins

; 4354 :     DIS_FAC_INS( ED25, "load_lengthened_float_long_to_ext" );

  018eb	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  018f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  018f7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  018fb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196179
  01902	41 b8 25 ed 00
	00		 mov	 r8d, 60709		; 0000ed25H
  01908	48 8b d0	 mov	 rdx, rax
  0190b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0190f	e8 00 00 00 00	 call	 dis_fac_ins

; 4355 :     DIS_FAC_INS( ED26, "load_lengthened_float_short_to_ext" );

  01914	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01919	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01920	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01924	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196180
  0192b	41 b8 26 ed 00
	00		 mov	 r8d, 60710		; 0000ed26H
  01931	48 8b d0	 mov	 rdx, rax
  01934	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01938	e8 00 00 00 00	 call	 dis_fac_ins

; 4356 : 
; 4357 :     DIS_FAC_INS( ED34, "squareroot_float_short" );

  0193d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01942	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01949	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0194d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196181
  01954	41 b8 34 ed 00
	00		 mov	 r8d, 60724		; 0000ed34H
  0195a	48 8b d0	 mov	 rdx, rax
  0195d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01961	e8 00 00 00 00	 call	 dis_fac_ins

; 4358 :     DIS_FAC_INS( ED35, "squareroot_float_long" );

  01966	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0196b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  01972	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01976	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196182
  0197d	41 b8 35 ed 00
	00		 mov	 r8d, 60725		; 0000ed35H
  01983	48 8b d0	 mov	 rdx, rax
  01986	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0198a	e8 00 00 00 00	 call	 dis_fac_ins

; 4359 :     DIS_FAC_INS( ED37, "multiply_float_short" );

  0198f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01994	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??herc37X@@9@9
  0199b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0199f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196183
  019a6	41 b8 37 ed 00
	00		 mov	 r8d, 60727		; 0000ed37H
  019ac	48 8b d0	 mov	 rdx, rax
  019af	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  019b3	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@herc37X:
$LN3@herc37X:

; 4360 : }
; 4361 : END_DIS_FAC_INS_FUNC()

  019b8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  019bc	c3		 ret	 0
herc37X	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
hercsvs	PROC

; 4160 : BEG_DIS_FAC_INS_FUNC( hercsvs )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@hercsvs
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??hercsvs@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@hercsvs
$LN2@hercsvs:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??hercsvs@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@hercsvs

; 4161 : {
; 4162 :     DIS_FAC_INS( B265, "SVS B265 Set Vector Summary" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??hercsvs@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG196003
  00051	41 b8 65 b2 00
	00		 mov	 r8d, 45669		; 0000b265H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@hercsvs:
$LN3@hercsvs:

; 4163 : }
; 4164 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
hercsvs	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
hercmvcin PROC

; 4152 : BEG_DIS_FAC_INS_FUNC( hercmvcin )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@hercmvcin
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??hercmvcin@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@hercmvcin
$LN2@hercmvcin:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??hercmvcin@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@hercmvcin

; 4153 : {
; 4154 :     DIS_FAC_INS( E8, "MVCIN E8 MOVE INVERSE" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??hercmvcin@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195992
  00051	41 b8 e8 00 00
	00		 mov	 r8d, 232		; 000000e8H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@hercmvcin:
$LN3@hercmvcin:

; 4155 : }
; 4156 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
hercmvcin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr196 PROC

; 4144 : BEG_DIS_FAC_INS_FUNC( instr196 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr196
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr196@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr196
$LN2@instr196:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr196@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr196

; 4145 : {
; 4146 :     DIS_FAC_INS( B28F, "QPACI   B28F  QUERY PROCESSOR ACTIVITY COUNTER INFORMATION" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr196@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195981
  00051	41 b8 8f b2 00
	00		 mov	 r8d, 45711		; 0000b28fH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr196:
$LN3@instr196:

; 4147 : }
; 4148 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr196 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr194 PROC

; 4136 : BEG_DIS_FAC_INS_FUNC( instr194 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr194
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr194@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr194
$LN2@instr194:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr194@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr194

; 4137 : {
; 4138 :     DIS_FAC_INS( B98B, "RDP     B98B  RESET DAT PROTECTION" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr194@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195970
  00051	41 b8 8b b9 00
	00		 mov	 r8d, 47499		; 0000b98bH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr194:
$LN3@instr194:

; 4139 : }
; 4140 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr194 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr193 PROC

; 4126 : BEG_DIS_FAC_INS_FUNC( instr193 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr193
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr193@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 8e 00 00 00	 jmp	 $LN3@instr193
$LN2@instr193:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr193@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	75 7b		 jne	 SHORT $LN4@instr193

; 4127 : {
; 4128 :     DIS_FAC_INS( B200, "LBEAR   B200  LOAD BEAR" );

  0003d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr193@@9@9
  00049	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195957
  00054	41 b8 00 b2 00
	00		 mov	 r8d, 45568		; 0000b200H
  0005a	48 8b d0	 mov	 rdx, rax
  0005d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00061	e8 00 00 00 00	 call	 dis_fac_ins

; 4129 :     DIS_FAC_INS( EB71, "LPSWEY  EB71  LOAD PSW EXTENDED" );

  00066	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr193@@9@9
  00072	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00076	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195958
  0007d	41 b8 71 eb 00
	00		 mov	 r8d, 60273		; 0000eb71H
  00083	48 8b d0	 mov	 rdx, rax
  00086	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008a	e8 00 00 00 00	 call	 dis_fac_ins

; 4130 :     DIS_FAC_INS( B201, "STBEAR  B201  STORE BEAR" );

  0008f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr193@@9@9
  0009b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0009f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195959
  000a6	41 b8 01 b2 00
	00		 mov	 r8d, 45569		; 0000b201H
  000ac	48 8b d0	 mov	 rdx, rax
  000af	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b3	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr193:
$LN3@instr193:

; 4131 : }
; 4132 : END_DIS_FAC_INS_FUNC()

  000b8	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000bc	c3		 ret	 0
instr193 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr192 PROC

; 4111 : BEG_DIS_FAC_INS_FUNC( instr192 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr192
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr192@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 5f 01 00 00	 jmp	 $LN3@instr192
$LN2@instr192:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr192@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 48 01 00
	00		 jne	 $LN4@instr192

; 4112 : {
; 4113 :     DIS_FAC_INS( E67C, "VSCSHP  E67C  DECIMAL SCALE AND CONVERT AND SPLIT TO HFP" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr192@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195939
  00058	41 b8 7c e6 00
	00		 mov	 r8d, 59004		; 0000e67cH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 4114 :     DIS_FAC_INS( E674, "VSCHP   E674  DECIMAL SCALE AND CONVERT TO HFP" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr192@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195940
  00081	41 b8 74 e6 00
	00		 mov	 r8d, 58996		; 0000e674H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 4115 :     DIS_FAC_INS( E67D, "VCSPH   E67D  VECTOR CONVERT HFP TO SCALED DECIMAL" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr192@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195941
  000aa	41 b8 7d e6 00
	00		 mov	 r8d, 59005		; 0000e67dH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 4116 :     DIS_FAC_INS( E651, "VCLZDP  E651  VECTOR COUNT LEADING ZERO DIGITS" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr192@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195942
  000d3	41 b8 51 e6 00
	00		 mov	 r8d, 58961		; 0000e651H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 4117 :     DIS_FAC_INS( E670, "VPKZR   E670  VECTOR PACK ZONED REGISTER" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr192@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195943
  000fc	41 b8 70 e6 00
	00		 mov	 r8d, 58992		; 0000e670H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 4118 :     DIS_FAC_INS( E672, "VSRPR   E672  VECTOR SHIFT AND ROUND DECIMAL REGISTER" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr192@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195944
  00125	41 b8 72 e6 00
	00		 mov	 r8d, 58994		; 0000e672H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 4119 :     DIS_FAC_INS( E654, "VUPKZH  E654  VECTOR UNPACK ZONED HIGH" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr192@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195945
  0014e	41 b8 54 e6 00
	00		 mov	 r8d, 58964		; 0000e654H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 4120 :     DIS_FAC_INS( E65C, "VUPKZL  E65C  VECTOR UNPACK ZONED LOW" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr192@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195946
  00177	41 b8 5c e6 00
	00		 mov	 r8d, 58972		; 0000e65cH
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr192:
$LN3@instr192:

; 4121 : }
; 4122 : END_DIS_FAC_INS_FUNC()

  00189	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0018d	c3		 ret	 0
instr192 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr165 PROC

; 4098 : BEG_DIS_FAC_INS_FUNC( instr165 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr165
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr165@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 0d 01 00 00	 jmp	 $LN3@instr165
$LN2@instr165:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr165@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 f6 00 00
	00		 jne	 $LN4@instr165

; 4099 : {
; 4100 :     DIS_FAC_INS( B93B, "NNPA    B93B  NEURAL NETWORK PROCESSING ASSIST" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr165@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195923
  00058	41 b8 3b b9 00
	00		 mov	 r8d, 47419		; 0000b93bH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 4101 :     DIS_FAC_INS( E656, "VCLFNH  E656  VECTOR FP CONVERT AND LENGTHEN FROM NNP HIGH" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr165@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195924
  00081	41 b8 56 e6 00
	00		 mov	 r8d, 58966		; 0000e656H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 4102 :     DIS_FAC_INS( E65E, "VCLFNL  E65E  VECTOR FP CONVERT AND LENGTHEN FROM NNP LOW" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr165@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195925
  000aa	41 b8 5e e6 00
	00		 mov	 r8d, 58974		; 0000e65eH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 4103 :     DIS_FAC_INS( E675, "VCRNF   E675  VECTOR FP CONVERT AND ROUND TO NNP" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr165@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195926
  000d3	41 b8 75 e6 00
	00		 mov	 r8d, 58997		; 0000e675H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 4104 :     DIS_FAC_INS( E65D, "VCFN    E65D  VECTOR FP CONVERT FROM NNP" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr165@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195927
  000fc	41 b8 5d e6 00
	00		 mov	 r8d, 58973		; 0000e65dH
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 4105 :     DIS_FAC_INS( E655, "VCNF    E655  VECTOR FP CONVERT TO NNP" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr165@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195928
  00125	41 b8 55 e6 00
	00		 mov	 r8d, 58965		; 0000e655H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr165:
$LN3@instr165:

; 4106 : }
; 4107 : END_DIS_FAC_INS_FUNC()

  00137	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0013b	c3		 ret	 0
instr165 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr155 PROC

; 4090 : BEG_DIS_FAC_INS_FUNC( instr155 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr155
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr155@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr155
$LN2@instr155:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr155@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr155

; 4091 : {
; 4092 :     DIS_FAC_INS( B93A, "KDSA    B93A  COMPUTE DIGITAL SIGNATURE AUTHENTICATION" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr155@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195912
  00051	41 b8 3a b9 00
	00		 mov	 r8d, 47418		; 0000b93aH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr155:
$LN3@instr155:

; 4093 : }
; 4094 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr155 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr151 PROC

; 4082 : BEG_DIS_FAC_INS_FUNC( instr151 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr151
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr151@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr151
$LN2@instr151:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr151@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr151

; 4083 : {
; 4084 :     DIS_FAC_INS( B939, "DFLTCC  B939  DEFLATE CONVERSION CALL" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr151@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195901
  00051	41 b8 39 b9 00
	00		 mov	 r8d, 47417		; 0000b939H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr151:
$LN3@instr151:

; 4085 : }
; 4086 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr151 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr150 PROC

; 4074 : BEG_DIS_FAC_INS_FUNC( instr150 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr150
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr150@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr150
$LN2@instr150:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr150@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr150

; 4075 : {
; 4076 :     DIS_FAC_INS( B938, "SORTL   B938   SORT LISTS" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr150@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195890
  00051	41 b8 38 b9 00
	00		 mov	 r8d, 47416		; 0000b938H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr150:
$LN3@instr150:

; 4077 : }
; 4078 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr150 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr148 PROC

; 4058 : BEG_DIS_FAC_INS_FUNC( instr148 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr148
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr148@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 88 01 00 00	 jmp	 $LN3@instr148
$LN2@instr148:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr148@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 71 01 00
	00		 jne	 $LN4@instr148

; 4059 : {
; 4060 :     DIS_FAC_INS( E785, "VBPERM  E785  VECTOR BIT PERMUTE" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr148@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195871
  00058	41 b8 85 e7 00
	00		 mov	 r8d, 59269		; 0000e785H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 4061 :     DIS_FAC_INS( E7EF, "VFMAX   E7EF  VECTOR FP MAXIMUM" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr148@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195872
  00081	41 b8 ef e7 00
	00		 mov	 r8d, 59375		; 0000e7efH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 4062 :     DIS_FAC_INS( E7EE, "VFMIN   E7EE  VECTOR FP MINIMUM" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr148@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195873
  000aa	41 b8 ee e7 00
	00		 mov	 r8d, 59374		; 0000e7eeH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 4063 :     DIS_FAC_INS( E79F, "VFNMA   E79F  VECTOR FP NEGATIVE MULTIPLY AND ADD" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr148@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195874
  000d3	41 b8 9f e7 00
	00		 mov	 r8d, 59295		; 0000e79fH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 4064 :     DIS_FAC_INS( E79E, "VFNMS   E79E  VECTOR FP NEGATIVE MULTIPLY AND SUBTRACT" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr148@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195875
  000fc	41 b8 9e e7 00
	00		 mov	 r8d, 59294		; 0000e79eH
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 4065 :     DIS_FAC_INS( E7B8, "VMSL    E7B8  VECTOR MULTIPLY SUM LOGICAL" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr148@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195876
  00125	41 b8 b8 e7 00
	00		 mov	 r8d, 59320		; 0000e7b8H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 4066 :     DIS_FAC_INS( E76E, "VNN     E76E  VECTOR NAND" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr148@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195877
  0014e	41 b8 6e e7 00
	00		 mov	 r8d, 59246		; 0000e76eH
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 4067 :     DIS_FAC_INS( E76C, "VNX     E76C  VECTOR NOT EXCLUSIVE OR" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr148@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195878
  00177	41 b8 6c e7 00
	00		 mov	 r8d, 59244		; 0000e76cH
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 4068 :     DIS_FAC_INS( E76F, "VOC     E76F  VECTOR OR WITH COMPLEMENT" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr148@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195879
  001a0	41 b8 6f e7 00
	00		 mov	 r8d, 59247		; 0000e76fH
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr148:
$LN3@instr148:

; 4069 : }
; 4070 : END_DIS_FAC_INS_FUNC()

  001b2	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001b6	c3		 ret	 0
instr148 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr146 PROC

; 4050 : BEG_DIS_FAC_INS_FUNC( instr146 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr146
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr146@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr146
$LN2@instr146:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr146@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr146

; 4051 : {
; 4052 :     DIS_FAC_INS( B929, "KMA     B929  CIPHER MESSAGE WITH AUTHENTICATION" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr146@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195860
  00051	41 b8 29 b9 00
	00		 mov	 r8d, 47401		; 0000b929H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr146:
$LN3@instr146:

; 4053 : }
; 4054 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr146 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr145 PROC

; 4042 : BEG_DIS_FAC_INS_FUNC( instr145 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr145
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr145@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr145
$LN2@instr145:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr145@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr145

; 4043 : {
; 4044 :     DIS_FAC_INS( B9AC, "IRBM    B9AC  INSERT REFERENCE BITS MULTIPLE" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr145@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195849
  00051	41 b8 ac b9 00
	00		 mov	 r8d, 47532		; 0000b9acH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr145:
$LN3@instr145:

; 4045 : }
; 4046 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr145 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr144 PROC

; 4034 : BEG_DIS_FAC_INS_FUNC( instr144 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr144
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr144@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr144
$LN2@instr144:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr144@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr144

; 4035 : {
; 4036 :     DIS_FAC_INS( B9A1, "TPEI    B9A1  TEST PENDING EXTERNAL INTERRUPTION" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr144@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195838
  00051	41 b8 a1 b9 00
	00		 mov	 r8d, 47521		; 0000b9a1H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr144:
$LN3@instr144:

; 4037 : }
; 4038 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr144 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr142 PROC

; 4026 : BEG_DIS_FAC_INS_FUNC( instr142 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr142
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr142@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr142
$LN2@instr142:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr142@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr142

; 4027 : {
; 4028 :     DIS_FAC_INS( EB17, "STCCTM  EB17  STORE CPU COUNTER MULTIPLE" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr142@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195827
  00051	41 b8 17 eb 00
	00		 mov	 r8d, 60183		; 0000eb17H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr142:
$LN3@instr142:

; 4029 : }
; 4030 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr142 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr134 PROC

; 3997 : BEG_DIS_FAC_INS_FUNC( instr134 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr134
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 9d 03 00 00	 jmp	 $LN3@instr134
$LN2@instr134:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 86 03 00
	00		 jne	 $LN4@instr134

; 3998 : {
; 3999 :     DIS_FAC_INS( E671, "VAP     E671  VECTOR ADD DECIMAL" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195795
  00058	41 b8 71 e6 00
	00		 mov	 r8d, 58993		; 0000e671H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 4000 :     DIS_FAC_INS( E677, "VCP     E677  VECTOR COMPARE DECIMAL" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195796
  00081	41 b8 77 e6 00
	00		 mov	 r8d, 58999		; 0000e677H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 4001 :     DIS_FAC_INS( E650, "VCVB    E650  VECTOR CONVERT TO BINARY" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195797
  000aa	41 b8 50 e6 00
	00		 mov	 r8d, 58960		; 0000e650H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 4002 :     DIS_FAC_INS( E652, "VCVBG   E652  VECTOR CONVERT TO BINARY" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195798
  000d3	41 b8 52 e6 00
	00		 mov	 r8d, 58962		; 0000e652H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 4003 :     DIS_FAC_INS( E658, "VCVD    E658  VECTOR CONVERT TO DECIMAL" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195799
  000fc	41 b8 58 e6 00
	00		 mov	 r8d, 58968		; 0000e658H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 4004 :     DIS_FAC_INS( E65A, "VCVDG   E65A  VECTOR CONVERT TO DECIMAL" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195800
  00125	41 b8 5a e6 00
	00		 mov	 r8d, 58970		; 0000e65aH
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 4005 :     DIS_FAC_INS( E67A, "VDP     E67A  VECTOR DIVIDE DECIMAL" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195801
  0014e	41 b8 7a e6 00
	00		 mov	 r8d, 59002		; 0000e67aH
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 4006 :     DIS_FAC_INS( E649, "VLIP    E649  VECTOR LOAD IMMEDIATE DECIMAL" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195802
  00177	41 b8 49 e6 00
	00		 mov	 r8d, 58953		; 0000e649H
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 4007 :     DIS_FAC_INS( E635, "VLRL    E635  VECTOR LOAD RIGHTMOST WITH LENGTH" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195803
  001a0	41 b8 35 e6 00
	00		 mov	 r8d, 58933		; 0000e635H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 4008 :     DIS_FAC_INS( E637, "VLRLR   E637  VECTOR LOAD RIGHTMOST WITH LENGTH" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195804
  001c9	41 b8 37 e6 00
	00		 mov	 r8d, 58935		; 0000e637H
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 4009 :     DIS_FAC_INS( E679, "VMSP    E679  VECTOR MULTIPLY AND SHIFT DECIMAL" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195805
  001f2	41 b8 79 e6 00
	00		 mov	 r8d, 59001		; 0000e679H
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 4010 :     DIS_FAC_INS( E678, "VMP     E678  VECTOR MULTIPLY DECIMAL" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195806
  0021b	41 b8 78 e6 00
	00		 mov	 r8d, 59000		; 0000e678H
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins

; 4011 :     DIS_FAC_INS( E634, "VPKZ    E634  VECTOR PACK ZONED" );

  0022d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  00239	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0023d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195807
  00244	41 b8 34 e6 00
	00		 mov	 r8d, 58932		; 0000e634H
  0024a	48 8b d0	 mov	 rdx, rax
  0024d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00251	e8 00 00 00 00	 call	 dis_fac_ins

; 4012 :     DIS_FAC_INS( E65B, "VPSOP   E65B  VECTOR PERFORM SIGN OPERATION DECIMAL" );

  00256	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  00262	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00266	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195808
  0026d	41 b8 5b e6 00
	00		 mov	 r8d, 58971		; 0000e65bH
  00273	48 8b d0	 mov	 rdx, rax
  00276	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0027a	e8 00 00 00 00	 call	 dis_fac_ins

; 4013 :     DIS_FAC_INS( E67B, "VRP     E67B  VECTOR REMAINDER DECIMAL" );

  0027f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  0028b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0028f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195809
  00296	41 b8 7b e6 00
	00		 mov	 r8d, 59003		; 0000e67bH
  0029c	48 8b d0	 mov	 rdx, rax
  0029f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002a3	e8 00 00 00 00	 call	 dis_fac_ins

; 4014 :     DIS_FAC_INS( E67E, "VSDP    E67E  VECTOR SHIFT AND DIVIDE DECIMAL" );

  002a8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  002b4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002b8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195810
  002bf	41 b8 7e e6 00
	00		 mov	 r8d, 59006		; 0000e67eH
  002c5	48 8b d0	 mov	 rdx, rax
  002c8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002cc	e8 00 00 00 00	 call	 dis_fac_ins

; 4015 :     DIS_FAC_INS( E659, "VSRP    E659  VECTOR SHIFT AND ROUND DECIMAL" );

  002d1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  002dd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002e1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195811
  002e8	41 b8 59 e6 00
	00		 mov	 r8d, 58969		; 0000e659H
  002ee	48 8b d0	 mov	 rdx, rax
  002f1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002f5	e8 00 00 00 00	 call	 dis_fac_ins

; 4016 :     DIS_FAC_INS( E63D, "VSTRL   E63D  VECTOR STORE RIGHTMOST WITH LENGTH" );

  002fa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  00306	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0030a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195812
  00311	41 b8 3d e6 00
	00		 mov	 r8d, 58941		; 0000e63dH
  00317	48 8b d0	 mov	 rdx, rax
  0031a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0031e	e8 00 00 00 00	 call	 dis_fac_ins

; 4017 :     DIS_FAC_INS( E63F, "VSTRLR  E63F  VECTOR STORE RIGHTMOST WITH LENGTH" );

  00323	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  0032f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00333	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195813
  0033a	41 b8 3f e6 00
	00		 mov	 r8d, 58943		; 0000e63fH
  00340	48 8b d0	 mov	 rdx, rax
  00343	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00347	e8 00 00 00 00	 call	 dis_fac_ins

; 4018 :     DIS_FAC_INS( E673, "VSP     E673  VECTOR SUBTRACT DECIMAL" );

  0034c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  00358	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0035c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195814
  00363	41 b8 73 e6 00
	00		 mov	 r8d, 58995		; 0000e673H
  00369	48 8b d0	 mov	 rdx, rax
  0036c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00370	e8 00 00 00 00	 call	 dis_fac_ins

; 4019 :     DIS_FAC_INS( E65F, "VTP     E65F  VECTOR TEST DECIMAL" );

  00375	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  00381	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00385	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195815
  0038c	41 b8 5f e6 00
	00		 mov	 r8d, 58975		; 0000e65fH
  00392	48 8b d0	 mov	 rdx, rax
  00395	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00399	e8 00 00 00 00	 call	 dis_fac_ins

; 4020 :     DIS_FAC_INS( E63C, "VUPKZ   E63C  VECTOR UNPACK ZONED" );

  0039e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr134@@9@9
  003aa	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195816
  003b5	41 b8 3c e6 00
	00		 mov	 r8d, 58940		; 0000e63cH
  003bb	48 8b d0	 mov	 rdx, rax
  003be	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003c2	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr134:
$LN3@instr134:

; 4021 : }
; 4022 : END_DIS_FAC_INS_FUNC()

  003c7	48 83 c4 28	 add	 rsp, 40			; 00000028H
  003cb	c3		 ret	 0
instr134 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr133 PROC

; 3986 : BEG_DIS_FAC_INS_FUNC( instr133 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr133
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr133@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 bb 00 00 00	 jmp	 $LN3@instr133
$LN2@instr133:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr133@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 a4 00 00
	00		 jne	 $LN4@instr133

; 3987 : {
; 3988 :     DIS_FAC_INS( E34C, "LGG     E34C  LOAD GUARDED (64)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr133@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195781
  00058	41 b8 4c e3 00
	00		 mov	 r8d, 58188		; 0000e34cH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3989 :     DIS_FAC_INS( E34D, "LGSC    E34D  LOAD GUARDED STORAGE CONTROLS" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr133@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195782
  00081	41 b8 4d e3 00
	00		 mov	 r8d, 58189		; 0000e34dH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3990 :     DIS_FAC_INS( E348, "LLGFSG  E348  LOAD LOGICAL AND SHIFT GUARDED (64 <- 32)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr133@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195783
  000aa	41 b8 48 e3 00
	00		 mov	 r8d, 58184		; 0000e348H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3991 :     DIS_FAC_INS( E349, "STGSC   E349  STORE GUARDED STORAGE CONTROLS" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr133@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195784
  000d3	41 b8 49 e3 00
	00		 mov	 r8d, 58185		; 0000e349H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr133:
$LN3@instr133:

; 3992 : }
; 3993 : END_DIS_FAC_INS_FUNC()

  000e5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e9	c3		 ret	 0
instr133 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr129 PROC

; 3840 : BEG_DIS_FAC_INS_FUNC( instr129 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr129
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 5a 16 00 00	 jmp	 $LN3@instr129
$LN2@instr129:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 43 16 00
	00		 jne	 $LN4@instr129

; 3841 : {
; 3842 :     DIS_FAC_INS( E727, "LCBB    E727  LOAD COUNT TO BLOCK BOUNDARY" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195632
  00058	41 b8 27 e7 00
	00		 mov	 r8d, 59175		; 0000e727H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3843 :     DIS_FAC_INS( E7F3, "VA      E7F3  VECTOR ADD" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195633
  00081	41 b8 f3 e7 00
	00		 mov	 r8d, 59379		; 0000e7f3H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3844 :     DIS_FAC_INS( E7F1, "VACC    E7F1  VECTOR ADD COMPUTE CARRY" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195634
  000aa	41 b8 f1 e7 00
	00		 mov	 r8d, 59377		; 0000e7f1H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3845 :     DIS_FAC_INS( E7BB, "VAC     E7BB  VECTOR ADD WITH CARRY" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195635
  000d3	41 b8 bb e7 00
	00		 mov	 r8d, 59323		; 0000e7bbH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3846 :     DIS_FAC_INS( E7B9, "VACCC   E7B9  VECTOR ADD WITH CARRY COMPUTE CARRY" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195636
  000fc	41 b8 b9 e7 00
	00		 mov	 r8d, 59321		; 0000e7b9H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3847 :     DIS_FAC_INS( E768, "VN      E768  VECTOR AND" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195637
  00125	41 b8 68 e7 00
	00		 mov	 r8d, 59240		; 0000e768H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3848 :     DIS_FAC_INS( E769, "VNC     E769  VECTOR AND WITH COMPLEMENT" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195638
  0014e	41 b8 69 e7 00
	00		 mov	 r8d, 59241		; 0000e769H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3849 :     DIS_FAC_INS( E7F2, "VAVG    E7F2  VECTOR AVERAGE" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195639
  00177	41 b8 f2 e7 00
	00		 mov	 r8d, 59378		; 0000e7f2H
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3850 :     DIS_FAC_INS( E7F0, "VAVGL   E7F0  VECTOR AVERAGE LOGICAL" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195640
  001a0	41 b8 f0 e7 00
	00		 mov	 r8d, 59376		; 0000e7f0H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3851 :     DIS_FAC_INS( E766, "VCKSM   E766  VECTOR CHECKSUM" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195641
  001c9	41 b8 66 e7 00
	00		 mov	 r8d, 59238		; 0000e766H
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 3852 :     DIS_FAC_INS( E7F8, "VCEQ    E7F8  VECTOR COMPARE EQUAL" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195642
  001f2	41 b8 f8 e7 00
	00		 mov	 r8d, 59384		; 0000e7f8H
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 3853 :     DIS_FAC_INS( E7FB, "VCH     E7FB  VECTOR COMPARE HIGH" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195643
  0021b	41 b8 fb e7 00
	00		 mov	 r8d, 59387		; 0000e7fbH
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins

; 3854 :     DIS_FAC_INS( E7F9, "VCHL    E7F9  VECTOR COMPARE HIGH LOGICAL" );

  0022d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00239	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0023d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195644
  00244	41 b8 f9 e7 00
	00		 mov	 r8d, 59385		; 0000e7f9H
  0024a	48 8b d0	 mov	 rdx, rax
  0024d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00251	e8 00 00 00 00	 call	 dis_fac_ins

; 3855 :     DIS_FAC_INS( E753, "VCLZ    E753  VECTOR COUNT LEADING ZEROS" );

  00256	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00262	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00266	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195645
  0026d	41 b8 53 e7 00
	00		 mov	 r8d, 59219		; 0000e753H
  00273	48 8b d0	 mov	 rdx, rax
  00276	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0027a	e8 00 00 00 00	 call	 dis_fac_ins

; 3856 :     DIS_FAC_INS( E752, "VCTZ    E752  VECTOR COUNT TRAILING ZEROS" );

  0027f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0028b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0028f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195646
  00296	41 b8 52 e7 00
	00		 mov	 r8d, 59218		; 0000e752H
  0029c	48 8b d0	 mov	 rdx, rax
  0029f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002a3	e8 00 00 00 00	 call	 dis_fac_ins

; 3857 :     DIS_FAC_INS( E7DB, "VEC     E7DB  VECTOR ELEMENT COMPARE" );

  002a8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  002b4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002b8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195647
  002bf	41 b8 db e7 00
	00		 mov	 r8d, 59355		; 0000e7dbH
  002c5	48 8b d0	 mov	 rdx, rax
  002c8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002cc	e8 00 00 00 00	 call	 dis_fac_ins

; 3858 :     DIS_FAC_INS( E7D9, "VECL    E7D9  VECTOR ELEMENT COMPARE LOGICAL" );

  002d1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  002dd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002e1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195648
  002e8	41 b8 d9 e7 00
	00		 mov	 r8d, 59353		; 0000e7d9H
  002ee	48 8b d0	 mov	 rdx, rax
  002f1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002f5	e8 00 00 00 00	 call	 dis_fac_ins

; 3859 :     DIS_FAC_INS( E772, "VERIM   E772  VECTOR ELEMENT ROTATE AND INSERT UNDER MASK" );

  002fa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00306	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0030a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195649
  00311	41 b8 72 e7 00
	00		 mov	 r8d, 59250		; 0000e772H
  00317	48 8b d0	 mov	 rdx, rax
  0031a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0031e	e8 00 00 00 00	 call	 dis_fac_ins

; 3860 :     DIS_FAC_INS( E733, "VERLL   E733  VECTOR ELEMENT ROTATE LEFT LOGICAL" );

  00323	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0032f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00333	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195650
  0033a	41 b8 33 e7 00
	00		 mov	 r8d, 59187		; 0000e733H
  00340	48 8b d0	 mov	 rdx, rax
  00343	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00347	e8 00 00 00 00	 call	 dis_fac_ins

; 3861 :     DIS_FAC_INS( E773, "VERLLV  E773  VECTOR ELEMENT ROTATE LEFT LOGICAL" );

  0034c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00358	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0035c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195651
  00363	41 b8 73 e7 00
	00		 mov	 r8d, 59251		; 0000e773H
  00369	48 8b d0	 mov	 rdx, rax
  0036c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00370	e8 00 00 00 00	 call	 dis_fac_ins

; 3862 :     DIS_FAC_INS( E730, "VESL    E730  VECTOR ELEMENT SHIFT LEFT" );

  00375	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00381	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00385	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195652
  0038c	41 b8 30 e7 00
	00		 mov	 r8d, 59184		; 0000e730H
  00392	48 8b d0	 mov	 rdx, rax
  00395	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00399	e8 00 00 00 00	 call	 dis_fac_ins

; 3863 :     DIS_FAC_INS( E770, "VESLV   E770  VECTOR ELEMENT SHIFT LEFT" );

  0039e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  003aa	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195653
  003b5	41 b8 70 e7 00
	00		 mov	 r8d, 59248		; 0000e770H
  003bb	48 8b d0	 mov	 rdx, rax
  003be	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003c2	e8 00 00 00 00	 call	 dis_fac_ins

; 3864 :     DIS_FAC_INS( E73A, "VESRA   E73A  VECTOR ELEMENT SHIFT RIGHT ARITHMETIC" );

  003c7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  003d3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195654
  003de	41 b8 3a e7 00
	00		 mov	 r8d, 59194		; 0000e73aH
  003e4	48 8b d0	 mov	 rdx, rax
  003e7	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003eb	e8 00 00 00 00	 call	 dis_fac_ins

; 3865 :     DIS_FAC_INS( E77A, "VESRAV  E77A  VECTOR ELEMENT SHIFT RIGHT ARITHMETIC" );

  003f0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  003fc	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00400	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195655
  00407	41 b8 7a e7 00
	00		 mov	 r8d, 59258		; 0000e77aH
  0040d	48 8b d0	 mov	 rdx, rax
  00410	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00414	e8 00 00 00 00	 call	 dis_fac_ins

; 3866 :     DIS_FAC_INS( E738, "VESRL   E738  VECTOR ELEMENT SHIFT RIGHT LOGICAL" );

  00419	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0041e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00425	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00429	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195656
  00430	41 b8 38 e7 00
	00		 mov	 r8d, 59192		; 0000e738H
  00436	48 8b d0	 mov	 rdx, rax
  00439	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0043d	e8 00 00 00 00	 call	 dis_fac_ins

; 3867 :     DIS_FAC_INS( E778, "VESRLV  E778  VECTOR ELEMENT SHIFT RIGHT LOGICAL" );

  00442	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00447	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0044e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00452	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195657
  00459	41 b8 78 e7 00
	00		 mov	 r8d, 59256		; 0000e778H
  0045f	48 8b d0	 mov	 rdx, rax
  00462	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00466	e8 00 00 00 00	 call	 dis_fac_ins

; 3868 :     DIS_FAC_INS( E76D, "VX      E76D  VECTOR EXCLUSIVE OR" );

  0046b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00470	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00477	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0047b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195658
  00482	41 b8 6d e7 00
	00		 mov	 r8d, 59245		; 0000e76dH
  00488	48 8b d0	 mov	 rdx, rax
  0048b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0048f	e8 00 00 00 00	 call	 dis_fac_ins

; 3869 :     DIS_FAC_INS( E782, "VFAE    E782  VECTOR FIND ANY ELEMENT EQUAL" );

  00494	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00499	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  004a0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004a4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195659
  004ab	41 b8 82 e7 00
	00		 mov	 r8d, 59266		; 0000e782H
  004b1	48 8b d0	 mov	 rdx, rax
  004b4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004b8	e8 00 00 00 00	 call	 dis_fac_ins

; 3870 :     DIS_FAC_INS( E780, "VFEE    E780  VECTOR FIND ELEMENT EQUAL" );

  004bd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  004c9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004cd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195660
  004d4	41 b8 80 e7 00
	00		 mov	 r8d, 59264		; 0000e780H
  004da	48 8b d0	 mov	 rdx, rax
  004dd	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004e1	e8 00 00 00 00	 call	 dis_fac_ins

; 3871 :     DIS_FAC_INS( E781, "VFENE   E781  VECTOR FIND ELEMENT NOT EQUAL" );

  004e6	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  004f2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004f6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195661
  004fd	41 b8 81 e7 00
	00		 mov	 r8d, 59265		; 0000e781H
  00503	48 8b d0	 mov	 rdx, rax
  00506	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0050a	e8 00 00 00 00	 call	 dis_fac_ins

; 3872 :     DIS_FAC_INS( E7E3, "VFA     E7E3  VECTOR FP ADD" );

  0050f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0051b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0051f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195662
  00526	41 b8 e3 e7 00
	00		 mov	 r8d, 59363		; 0000e7e3H
  0052c	48 8b d0	 mov	 rdx, rax
  0052f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00533	e8 00 00 00 00	 call	 dis_fac_ins

; 3873 :     DIS_FAC_INS( E7CA, "WFK     E7CA  VECTOR FP COMPARE AND SIGNAL SCALAR" );

  00538	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0053d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00544	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00548	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195663
  0054f	41 b8 ca e7 00
	00		 mov	 r8d, 59338		; 0000e7caH
  00555	48 8b d0	 mov	 rdx, rax
  00558	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0055c	e8 00 00 00 00	 call	 dis_fac_ins

; 3874 :     DIS_FAC_INS( E7E8, "VFCE    E7E8  VECTOR FP COMPARE EQUAL" );

  00561	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00566	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0056d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00571	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195664
  00578	41 b8 e8 e7 00
	00		 mov	 r8d, 59368		; 0000e7e8H
  0057e	48 8b d0	 mov	 rdx, rax
  00581	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00585	e8 00 00 00 00	 call	 dis_fac_ins

; 3875 :     DIS_FAC_INS( E7EB, "VFCH    E7EB  VECTOR FP COMPARE HIGH" );

  0058a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0058f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00596	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0059a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195665
  005a1	41 b8 eb e7 00
	00		 mov	 r8d, 59371		; 0000e7ebH
  005a7	48 8b d0	 mov	 rdx, rax
  005aa	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005ae	e8 00 00 00 00	 call	 dis_fac_ins

; 3876 :     DIS_FAC_INS( E7EA, "VFCHE   E7EA  VECTOR FP COMPARE HIGH OR EQUAL" );

  005b3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  005b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  005bf	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005c3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195666
  005ca	41 b8 ea e7 00
	00		 mov	 r8d, 59370		; 0000e7eaH
  005d0	48 8b d0	 mov	 rdx, rax
  005d3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005d7	e8 00 00 00 00	 call	 dis_fac_ins

; 3877 :     DIS_FAC_INS( E7CB, "WFC     E7CB  VECTOR FP COMPARE SCALAR" );

  005dc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  005e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  005e8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005ec	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195667
  005f3	41 b8 cb e7 00
	00		 mov	 r8d, 59339		; 0000e7cbH
  005f9	48 8b d0	 mov	 rdx, rax
  005fc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00600	e8 00 00 00 00	 call	 dis_fac_ins

; 3878 :     DIS_FAC_INS( E7C3, "VCDG    E7C3  VECTOR FP CONVERT FROM FIXED 64-BIT" );

  00605	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0060a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00611	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00615	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195668
  0061c	41 b8 c3 e7 00
	00		 mov	 r8d, 59331		; 0000e7c3H
  00622	48 8b d0	 mov	 rdx, rax
  00625	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00629	e8 00 00 00 00	 call	 dis_fac_ins

; 3879 :     DIS_FAC_INS( E7C1, "VCDLG   E7C1  VECTOR FP CONVERT FROM LOGICAL 64-BIT" );

  0062e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00633	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0063a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0063e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195669
  00645	41 b8 c1 e7 00
	00		 mov	 r8d, 59329		; 0000e7c1H
  0064b	48 8b d0	 mov	 rdx, rax
  0064e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00652	e8 00 00 00 00	 call	 dis_fac_ins

; 3880 :     DIS_FAC_INS( E7C2, "VCGD    E7C2  VECTOR FP CONVERT TO FIXED 64-BIT" );

  00657	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0065c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00663	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00667	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195670
  0066e	41 b8 c2 e7 00
	00		 mov	 r8d, 59330		; 0000e7c2H
  00674	48 8b d0	 mov	 rdx, rax
  00677	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0067b	e8 00 00 00 00	 call	 dis_fac_ins

; 3881 :     DIS_FAC_INS( E7C0, "VCLGD   E7C0  VECTOR FP CONVERT TO LOGICAL 64-BIT" );

  00680	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00685	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0068c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00690	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195671
  00697	41 b8 c0 e7 00
	00		 mov	 r8d, 59328		; 0000e7c0H
  0069d	48 8b d0	 mov	 rdx, rax
  006a0	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006a4	e8 00 00 00 00	 call	 dis_fac_ins

; 3882 :     DIS_FAC_INS( E7E5, "VFD     E7E5  VECTOR FP DIVIDE" );

  006a9	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  006ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  006b5	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006b9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195672
  006c0	41 b8 e5 e7 00
	00		 mov	 r8d, 59365		; 0000e7e5H
  006c6	48 8b d0	 mov	 rdx, rax
  006c9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006cd	e8 00 00 00 00	 call	 dis_fac_ins

; 3883 :     DIS_FAC_INS( E7C4, "VFLL    E7C4  VECTOR FP LOAD LENGTHENED" );

  006d2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  006d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  006de	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006e2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195673
  006e9	41 b8 c4 e7 00
	00		 mov	 r8d, 59332		; 0000e7c4H
  006ef	48 8b d0	 mov	 rdx, rax
  006f2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006f6	e8 00 00 00 00	 call	 dis_fac_ins

; 3884 :     DIS_FAC_INS( E7C5, "VFLR    E7C5  VECTOR FP LOAD ROUNDED" );

  006fb	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00700	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00707	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0070b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195674
  00712	41 b8 c5 e7 00
	00		 mov	 r8d, 59333		; 0000e7c5H
  00718	48 8b d0	 mov	 rdx, rax
  0071b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0071f	e8 00 00 00 00	 call	 dis_fac_ins

; 3885 :     DIS_FAC_INS( E7E7, "VFM     E7E7  VECTOR FP MULTIPLY" );

  00724	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00729	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00730	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00734	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195675
  0073b	41 b8 e7 e7 00
	00		 mov	 r8d, 59367		; 0000e7e7H
  00741	48 8b d0	 mov	 rdx, rax
  00744	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00748	e8 00 00 00 00	 call	 dis_fac_ins

; 3886 :     DIS_FAC_INS( E78F, "VFMA    E78F  VECTOR FP MULTIPLY AND ADD" );

  0074d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00752	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00759	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0075d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195676
  00764	41 b8 8f e7 00
	00		 mov	 r8d, 59279		; 0000e78fH
  0076a	48 8b d0	 mov	 rdx, rax
  0076d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00771	e8 00 00 00 00	 call	 dis_fac_ins

; 3887 :     DIS_FAC_INS( E78E, "VFMS    E78E  VECTOR FP MULTIPLY AND SUBTRACT" );

  00776	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0077b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00782	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00786	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195677
  0078d	41 b8 8e e7 00
	00		 mov	 r8d, 59278		; 0000e78eH
  00793	48 8b d0	 mov	 rdx, rax
  00796	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0079a	e8 00 00 00 00	 call	 dis_fac_ins

; 3888 :     DIS_FAC_INS( E7CC, "VFPSO   E7CC  VECTOR FP PERFORM SIGN OPERATION" );

  0079f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  007ab	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  007af	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195678
  007b6	41 b8 cc e7 00
	00		 mov	 r8d, 59340		; 0000e7ccH
  007bc	48 8b d0	 mov	 rdx, rax
  007bf	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  007c3	e8 00 00 00 00	 call	 dis_fac_ins

; 3889 :     DIS_FAC_INS( E7CE, "VFSQ    E7CE  VECTOR FP SQUARE ROOT" );

  007c8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  007d4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  007d8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195679
  007df	41 b8 ce e7 00
	00		 mov	 r8d, 59342		; 0000e7ceH
  007e5	48 8b d0	 mov	 rdx, rax
  007e8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  007ec	e8 00 00 00 00	 call	 dis_fac_ins

; 3890 :     DIS_FAC_INS( E7E2, "VFS     E7E2  VECTOR FP SUBTRACT" );

  007f1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  007fd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00801	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195680
  00808	41 b8 e2 e7 00
	00		 mov	 r8d, 59362		; 0000e7e2H
  0080e	48 8b d0	 mov	 rdx, rax
  00811	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00815	e8 00 00 00 00	 call	 dis_fac_ins

; 3891 :     DIS_FAC_INS( E74A, "VFTCI   E74A  VECTOR FP TEST DATA CLASS IMMEDIATE" );

  0081a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0081f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00826	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0082a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195681
  00831	41 b8 4a e7 00
	00		 mov	 r8d, 59210		; 0000e74aH
  00837	48 8b d0	 mov	 rdx, rax
  0083a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0083e	e8 00 00 00 00	 call	 dis_fac_ins

; 3892 :     DIS_FAC_INS( E7B4, "VGFM    E7B4  VECTOR GALOIS FIELD MULTIPLY SUM" );

  00843	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00848	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0084f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00853	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195682
  0085a	41 b8 b4 e7 00
	00		 mov	 r8d, 59316		; 0000e7b4H
  00860	48 8b d0	 mov	 rdx, rax
  00863	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00867	e8 00 00 00 00	 call	 dis_fac_ins

; 3893 :     DIS_FAC_INS( E7BC, "VGFMA   E7BC  VECTOR GALOIS FIELD MULTIPLY SUM AND ACCUMULATE" );

  0086c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00871	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00878	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0087c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195683
  00883	41 b8 bc e7 00
	00		 mov	 r8d, 59324		; 0000e7bcH
  00889	48 8b d0	 mov	 rdx, rax
  0088c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00890	e8 00 00 00 00	 call	 dis_fac_ins

; 3894 :     DIS_FAC_INS( E712, "VGEG    E712  VECTOR GATHER ELEMENT (64)" );

  00895	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0089a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  008a1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008a5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195684
  008ac	41 b8 12 e7 00
	00		 mov	 r8d, 59154		; 0000e712H
  008b2	48 8b d0	 mov	 rdx, rax
  008b5	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  008b9	e8 00 00 00 00	 call	 dis_fac_ins

; 3895 :     DIS_FAC_INS( E713, "VGEF    E713  VECTOR GATHER ELEMENT (32)" );

  008be	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  008c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  008ca	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008ce	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195685
  008d5	41 b8 13 e7 00
	00		 mov	 r8d, 59155		; 0000e713H
  008db	48 8b d0	 mov	 rdx, rax
  008de	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  008e2	e8 00 00 00 00	 call	 dis_fac_ins

; 3896 :     DIS_FAC_INS( E744, "VGBM    E744  VECTOR GENERATE BYTE MASK" );

  008e7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  008ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  008f3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008f7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195686
  008fe	41 b8 44 e7 00
	00		 mov	 r8d, 59204		; 0000e744H
  00904	48 8b d0	 mov	 rdx, rax
  00907	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0090b	e8 00 00 00 00	 call	 dis_fac_ins

; 3897 :     DIS_FAC_INS( E746, "VGM     E746  VECTOR GENERATE MASK" );

  00910	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00915	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0091c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00920	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195687
  00927	41 b8 46 e7 00
	00		 mov	 r8d, 59206		; 0000e746H
  0092d	48 8b d0	 mov	 rdx, rax
  00930	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00934	e8 00 00 00 00	 call	 dis_fac_ins

; 3898 :     DIS_FAC_INS( E75C, "VISTR   E75C  VECTOR ISOLATE STRING" );

  00939	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0093e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00945	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00949	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195688
  00950	41 b8 5c e7 00
	00		 mov	 r8d, 59228		; 0000e75cH
  00956	48 8b d0	 mov	 rdx, rax
  00959	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0095d	e8 00 00 00 00	 call	 dis_fac_ins

; 3899 :     DIS_FAC_INS( E706, "VL      E706  VECTOR LOAD" );

  00962	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00967	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0096e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00972	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195689
  00979	41 b8 06 e7 00
	00		 mov	 r8d, 59142		; 0000e706H
  0097f	48 8b d0	 mov	 rdx, rax
  00982	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00986	e8 00 00 00 00	 call	 dis_fac_ins

; 3900 :     DIS_FAC_INS( E756, "VLR     E756  VECTOR LOAD" );

  0098b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00990	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00997	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0099b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195690
  009a2	41 b8 56 e7 00
	00		 mov	 r8d, 59222		; 0000e756H
  009a8	48 8b d0	 mov	 rdx, rax
  009ab	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  009af	e8 00 00 00 00	 call	 dis_fac_ins

; 3901 :     DIS_FAC_INS( E705, "VLREP   E705  VECTOR LOAD AND REPLICATE" );

  009b4	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  009b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  009c0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  009c4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195691
  009cb	41 b8 05 e7 00
	00		 mov	 r8d, 59141		; 0000e705H
  009d1	48 8b d0	 mov	 rdx, rax
  009d4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  009d8	e8 00 00 00 00	 call	 dis_fac_ins

; 3902 :     DIS_FAC_INS( E7DE, "VLC     E7DE  VECTOR LOAD COMPLEMENT" );

  009dd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  009e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  009e9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  009ed	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195692
  009f4	41 b8 de e7 00
	00		 mov	 r8d, 59358		; 0000e7deH
  009fa	48 8b d0	 mov	 rdx, rax
  009fd	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a01	e8 00 00 00 00	 call	 dis_fac_ins

; 3903 :     DIS_FAC_INS( E700, "VLEB    E700  VECTOR LOAD ELEMENT (8)" );

  00a06	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00a12	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a16	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195693
  00a1d	41 b8 00 e7 00
	00		 mov	 r8d, 59136		; 0000e700H
  00a23	48 8b d0	 mov	 rdx, rax
  00a26	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a2a	e8 00 00 00 00	 call	 dis_fac_ins

; 3904 :     DIS_FAC_INS( E701, "VLEH    E701  VECTOR LOAD ELEMENT (16)" );

  00a2f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00a3b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a3f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195694
  00a46	41 b8 01 e7 00
	00		 mov	 r8d, 59137		; 0000e701H
  00a4c	48 8b d0	 mov	 rdx, rax
  00a4f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a53	e8 00 00 00 00	 call	 dis_fac_ins

; 3905 :     DIS_FAC_INS( E702, "VLEG    E702  VECTOR LOAD ELEMENT (64)" );

  00a58	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00a64	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a68	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195695
  00a6f	41 b8 02 e7 00
	00		 mov	 r8d, 59138		; 0000e702H
  00a75	48 8b d0	 mov	 rdx, rax
  00a78	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a7c	e8 00 00 00 00	 call	 dis_fac_ins

; 3906 :     DIS_FAC_INS( E703, "VLEF    E703  VECTOR LOAD ELEMENT (32)" );

  00a81	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a86	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00a8d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a91	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195696
  00a98	41 b8 03 e7 00
	00		 mov	 r8d, 59139		; 0000e703H
  00a9e	48 8b d0	 mov	 rdx, rax
  00aa1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00aa5	e8 00 00 00 00	 call	 dis_fac_ins

; 3907 :     DIS_FAC_INS( E740, "VLEIB   E740  VECTOR LOAD ELEMENT IMMEDIATE (8)" );

  00aaa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00aaf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00ab6	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00aba	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195697
  00ac1	41 b8 40 e7 00
	00		 mov	 r8d, 59200		; 0000e740H
  00ac7	48 8b d0	 mov	 rdx, rax
  00aca	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00ace	e8 00 00 00 00	 call	 dis_fac_ins

; 3908 :     DIS_FAC_INS( E741, "VLEIH   E741  VECTOR LOAD ELEMENT IMMEDIATE (16)" );

  00ad3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ad8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00adf	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00ae3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195698
  00aea	41 b8 41 e7 00
	00		 mov	 r8d, 59201		; 0000e741H
  00af0	48 8b d0	 mov	 rdx, rax
  00af3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00af7	e8 00 00 00 00	 call	 dis_fac_ins

; 3909 :     DIS_FAC_INS( E742, "VLEIG   E742  VECTOR LOAD ELEMENT IMMEDIATE (64)" );

  00afc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00b08	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b0c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195699
  00b13	41 b8 42 e7 00
	00		 mov	 r8d, 59202		; 0000e742H
  00b19	48 8b d0	 mov	 rdx, rax
  00b1c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b20	e8 00 00 00 00	 call	 dis_fac_ins

; 3910 :     DIS_FAC_INS( E743, "VLEIF   E743  VECTOR LOAD ELEMENT IMMEDIATE (32)" );

  00b25	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00b31	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b35	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195700
  00b3c	41 b8 43 e7 00
	00		 mov	 r8d, 59203		; 0000e743H
  00b42	48 8b d0	 mov	 rdx, rax
  00b45	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b49	e8 00 00 00 00	 call	 dis_fac_ins

; 3911 :     DIS_FAC_INS( E7C7, "VFI     E7C7  VECTOR LOAD FP INTEGER" );

  00b4e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00b5a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b5e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195701
  00b65	41 b8 c7 e7 00
	00		 mov	 r8d, 59335		; 0000e7c7H
  00b6b	48 8b d0	 mov	 rdx, rax
  00b6e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b72	e8 00 00 00 00	 call	 dis_fac_ins

; 3912 :     DIS_FAC_INS( E721, "VLGV    E721  VECTOR LOAD GR FROM VR ELEMENT" );

  00b77	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00b83	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b87	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195702
  00b8e	41 b8 21 e7 00
	00		 mov	 r8d, 59169		; 0000e721H
  00b94	48 8b d0	 mov	 rdx, rax
  00b97	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b9b	e8 00 00 00 00	 call	 dis_fac_ins

; 3913 :     DIS_FAC_INS( E704, "VLLEZ   E704  VECTOR LOAD LOGICAL ELEMENT AND ZERO" );

  00ba0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ba5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00bac	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00bb0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195703
  00bb7	41 b8 04 e7 00
	00		 mov	 r8d, 59140		; 0000e704H
  00bbd	48 8b d0	 mov	 rdx, rax
  00bc0	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00bc4	e8 00 00 00 00	 call	 dis_fac_ins

; 3914 :     DIS_FAC_INS( E736, "VLM     E736  VECTOR LOAD MULTIPLE" );

  00bc9	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00bce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00bd5	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00bd9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195704
  00be0	41 b8 36 e7 00
	00		 mov	 r8d, 59190		; 0000e736H
  00be6	48 8b d0	 mov	 rdx, rax
  00be9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00bed	e8 00 00 00 00	 call	 dis_fac_ins

; 3915 :     DIS_FAC_INS( E7DF, "VLP     E7DF  VECTOR LOAD POSITIVE" );

  00bf2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00bf7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00bfe	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00c02	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195705
  00c09	41 b8 df e7 00
	00		 mov	 r8d, 59359		; 0000e7dfH
  00c0f	48 8b d0	 mov	 rdx, rax
  00c12	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00c16	e8 00 00 00 00	 call	 dis_fac_ins

; 3916 :     DIS_FAC_INS( E707, "VLBB    E707  VECTOR LOAD TO BLOCK BOUNDARY" );

  00c1b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00c20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00c27	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00c2b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195706
  00c32	41 b8 07 e7 00
	00		 mov	 r8d, 59143		; 0000e707H
  00c38	48 8b d0	 mov	 rdx, rax
  00c3b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00c3f	e8 00 00 00 00	 call	 dis_fac_ins

; 3917 :     DIS_FAC_INS( E722, "VLVG    E722  VECTOR LOAD VR ELEMENT FROM GR" );

  00c44	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00c49	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00c50	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00c54	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195707
  00c5b	41 b8 22 e7 00
	00		 mov	 r8d, 59170		; 0000e722H
  00c61	48 8b d0	 mov	 rdx, rax
  00c64	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00c68	e8 00 00 00 00	 call	 dis_fac_ins

; 3918 :     DIS_FAC_INS( E762, "VLVGP   E762  VECTOR LOAD VR FROM GRS DISJOINT" );

  00c6d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00c72	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00c79	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00c7d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195708
  00c84	41 b8 62 e7 00
	00		 mov	 r8d, 59234		; 0000e762H
  00c8a	48 8b d0	 mov	 rdx, rax
  00c8d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00c91	e8 00 00 00 00	 call	 dis_fac_ins

; 3919 :     DIS_FAC_INS( E737, "VLL     E737  VECTOR LOAD WITH LENGTH" );

  00c96	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00c9b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00ca2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00ca6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195709
  00cad	41 b8 37 e7 00
	00		 mov	 r8d, 59191		; 0000e737H
  00cb3	48 8b d0	 mov	 rdx, rax
  00cb6	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00cba	e8 00 00 00 00	 call	 dis_fac_ins

; 3920 :     DIS_FAC_INS( E7FF, "VMX     E7FF  VECTOR MAXIMUM" );

  00cbf	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00cc4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00ccb	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00ccf	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195710
  00cd6	41 b8 ff e7 00
	00		 mov	 r8d, 59391		; 0000e7ffH
  00cdc	48 8b d0	 mov	 rdx, rax
  00cdf	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00ce3	e8 00 00 00 00	 call	 dis_fac_ins

; 3921 :     DIS_FAC_INS( E7FD, "VMXL    E7FD  VECTOR MAXIMUM LOGICAL" );

  00ce8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ced	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00cf4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00cf8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195711
  00cff	41 b8 fd e7 00
	00		 mov	 r8d, 59389		; 0000e7fdH
  00d05	48 8b d0	 mov	 rdx, rax
  00d08	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00d0c	e8 00 00 00 00	 call	 dis_fac_ins

; 3922 :     DIS_FAC_INS( E761, "VMRH    E761  VECTOR MERGE HIGH" );

  00d11	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00d16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00d1d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00d21	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195712
  00d28	41 b8 61 e7 00
	00		 mov	 r8d, 59233		; 0000e761H
  00d2e	48 8b d0	 mov	 rdx, rax
  00d31	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00d35	e8 00 00 00 00	 call	 dis_fac_ins

; 3923 :     DIS_FAC_INS( E760, "VMRL    E760  VECTOR MERGE LOW" );

  00d3a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00d3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00d46	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00d4a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195713
  00d51	41 b8 60 e7 00
	00		 mov	 r8d, 59232		; 0000e760H
  00d57	48 8b d0	 mov	 rdx, rax
  00d5a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00d5e	e8 00 00 00 00	 call	 dis_fac_ins

; 3924 :     DIS_FAC_INS( E7FE, "VMN     E7FE  VECTOR MINIMUM" );

  00d63	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00d68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00d6f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00d73	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195714
  00d7a	41 b8 fe e7 00
	00		 mov	 r8d, 59390		; 0000e7feH
  00d80	48 8b d0	 mov	 rdx, rax
  00d83	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00d87	e8 00 00 00 00	 call	 dis_fac_ins

; 3925 :     DIS_FAC_INS( E7FC, "VMNL    E7FC  VECTOR MINIMUM LOGICAL" );

  00d8c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00d91	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00d98	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00d9c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195715
  00da3	41 b8 fc e7 00
	00		 mov	 r8d, 59388		; 0000e7fcH
  00da9	48 8b d0	 mov	 rdx, rax
  00dac	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00db0	e8 00 00 00 00	 call	 dis_fac_ins

; 3926 :     DIS_FAC_INS( E7AE, "VMAE    E7AE  VECTOR MULTIPLY AND ADD EVEN" );

  00db5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00dba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00dc1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00dc5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195716
  00dcc	41 b8 ae e7 00
	00		 mov	 r8d, 59310		; 0000e7aeH
  00dd2	48 8b d0	 mov	 rdx, rax
  00dd5	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00dd9	e8 00 00 00 00	 call	 dis_fac_ins

; 3927 :     DIS_FAC_INS( E7AB, "VMAH    E7AB  VECTOR MULTIPLY AND ADD HIGH" );

  00dde	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00de3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00dea	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00dee	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195717
  00df5	41 b8 ab e7 00
	00		 mov	 r8d, 59307		; 0000e7abH
  00dfb	48 8b d0	 mov	 rdx, rax
  00dfe	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00e02	e8 00 00 00 00	 call	 dis_fac_ins

; 3928 :     DIS_FAC_INS( E7AC, "VMALE   E7AC  VECTOR MULTIPLY AND ADD LOGICAL EVEN" );

  00e07	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00e0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00e13	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00e17	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195718
  00e1e	41 b8 ac e7 00
	00		 mov	 r8d, 59308		; 0000e7acH
  00e24	48 8b d0	 mov	 rdx, rax
  00e27	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00e2b	e8 00 00 00 00	 call	 dis_fac_ins

; 3929 :     DIS_FAC_INS( E7A9, "VMALH   E7A9  VECTOR MULTIPLY AND ADD LOGICAL HIGH" );

  00e30	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00e35	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00e3c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00e40	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195719
  00e47	41 b8 a9 e7 00
	00		 mov	 r8d, 59305		; 0000e7a9H
  00e4d	48 8b d0	 mov	 rdx, rax
  00e50	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00e54	e8 00 00 00 00	 call	 dis_fac_ins

; 3930 :     DIS_FAC_INS( E7AD, "VMALO   E7AD  VECTOR MULTIPLY AND ADD LOGICAL ODD" );

  00e59	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00e5e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00e65	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00e69	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195720
  00e70	41 b8 ad e7 00
	00		 mov	 r8d, 59309		; 0000e7adH
  00e76	48 8b d0	 mov	 rdx, rax
  00e79	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00e7d	e8 00 00 00 00	 call	 dis_fac_ins

; 3931 :     DIS_FAC_INS( E7AA, "VMAL    E7AA  VECTOR MULTIPLY AND ADD LOW" );

  00e82	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00e87	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00e8e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00e92	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195721
  00e99	41 b8 aa e7 00
	00		 mov	 r8d, 59306		; 0000e7aaH
  00e9f	48 8b d0	 mov	 rdx, rax
  00ea2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00ea6	e8 00 00 00 00	 call	 dis_fac_ins

; 3932 :     DIS_FAC_INS( E7AF, "VMAO    E7AF  VECTOR MULTIPLY AND ADD ODD" );

  00eab	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00eb0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00eb7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00ebb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195722
  00ec2	41 b8 af e7 00
	00		 mov	 r8d, 59311		; 0000e7afH
  00ec8	48 8b d0	 mov	 rdx, rax
  00ecb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00ecf	e8 00 00 00 00	 call	 dis_fac_ins

; 3933 :     DIS_FAC_INS( E7A6, "VME     E7A6  VECTOR MULTIPLY EVEN" );

  00ed4	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ed9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00ee0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00ee4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195723
  00eeb	41 b8 a6 e7 00
	00		 mov	 r8d, 59302		; 0000e7a6H
  00ef1	48 8b d0	 mov	 rdx, rax
  00ef4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00ef8	e8 00 00 00 00	 call	 dis_fac_ins

; 3934 :     DIS_FAC_INS( E7A3, "VMH     E7A3  VECTOR MULTIPLY HIGH" );

  00efd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00f02	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00f09	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00f0d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195724
  00f14	41 b8 a3 e7 00
	00		 mov	 r8d, 59299		; 0000e7a3H
  00f1a	48 8b d0	 mov	 rdx, rax
  00f1d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00f21	e8 00 00 00 00	 call	 dis_fac_ins

; 3935 :     DIS_FAC_INS( E7A4, "VMLE    E7A4  VECTOR MULTIPLY LOGICAL EVEN" );

  00f26	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00f2b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00f32	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00f36	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195725
  00f3d	41 b8 a4 e7 00
	00		 mov	 r8d, 59300		; 0000e7a4H
  00f43	48 8b d0	 mov	 rdx, rax
  00f46	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00f4a	e8 00 00 00 00	 call	 dis_fac_ins

; 3936 :     DIS_FAC_INS( E7A1, "VMLH    E7A1  VECTOR MULTIPLY LOGICAL HIGH" );

  00f4f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00f54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00f5b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00f5f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195726
  00f66	41 b8 a1 e7 00
	00		 mov	 r8d, 59297		; 0000e7a1H
  00f6c	48 8b d0	 mov	 rdx, rax
  00f6f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00f73	e8 00 00 00 00	 call	 dis_fac_ins

; 3937 :     DIS_FAC_INS( E7A5, "VMLO    E7A5  VECTOR MULTIPLY LOGICAL ODD" );

  00f78	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00f7d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00f84	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00f88	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195727
  00f8f	41 b8 a5 e7 00
	00		 mov	 r8d, 59301		; 0000e7a5H
  00f95	48 8b d0	 mov	 rdx, rax
  00f98	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00f9c	e8 00 00 00 00	 call	 dis_fac_ins

; 3938 :     DIS_FAC_INS( E7A2, "VML     E7A2  VECTOR MULTIPLY LOW" );

  00fa1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00fa6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00fad	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00fb1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195728
  00fb8	41 b8 a2 e7 00
	00		 mov	 r8d, 59298		; 0000e7a2H
  00fbe	48 8b d0	 mov	 rdx, rax
  00fc1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00fc5	e8 00 00 00 00	 call	 dis_fac_ins

; 3939 :     DIS_FAC_INS( E7A7, "VMO     E7A7  VECTOR MULTIPLY ODD" );

  00fca	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00fcf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00fd6	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00fda	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195729
  00fe1	41 b8 a7 e7 00
	00		 mov	 r8d, 59303		; 0000e7a7H
  00fe7	48 8b d0	 mov	 rdx, rax
  00fea	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00fee	e8 00 00 00 00	 call	 dis_fac_ins

; 3940 :     DIS_FAC_INS( E76B, "VNO     E76B  VECTOR NOR" );

  00ff3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ff8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  00fff	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01003	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195730
  0100a	41 b8 6b e7 00
	00		 mov	 r8d, 59243		; 0000e76bH
  01010	48 8b d0	 mov	 rdx, rax
  01013	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01017	e8 00 00 00 00	 call	 dis_fac_ins

; 3941 :     DIS_FAC_INS( E76A, "VO      E76A  VECTOR OR" );

  0101c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01028	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0102c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195731
  01033	41 b8 6a e7 00
	00		 mov	 r8d, 59242		; 0000e76aH
  01039	48 8b d0	 mov	 rdx, rax
  0103c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01040	e8 00 00 00 00	 call	 dis_fac_ins

; 3942 :     DIS_FAC_INS( E794, "VPK     E794  VECTOR PACK" );

  01045	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0104a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01051	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01055	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195732
  0105c	41 b8 94 e7 00
	00		 mov	 r8d, 59284		; 0000e794H
  01062	48 8b d0	 mov	 rdx, rax
  01065	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01069	e8 00 00 00 00	 call	 dis_fac_ins

; 3943 :     DIS_FAC_INS( E795, "VPKLS   E795  VECTOR PACK LOGICAL SATURATE" );

  0106e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0107a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0107e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195733
  01085	41 b8 95 e7 00
	00		 mov	 r8d, 59285		; 0000e795H
  0108b	48 8b d0	 mov	 rdx, rax
  0108e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01092	e8 00 00 00 00	 call	 dis_fac_ins

; 3944 :     DIS_FAC_INS( E797, "VPKS    E797  VECTOR PACK SATURATE" );

  01097	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0109c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  010a3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  010a7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195734
  010ae	41 b8 97 e7 00
	00		 mov	 r8d, 59287		; 0000e797H
  010b4	48 8b d0	 mov	 rdx, rax
  010b7	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  010bb	e8 00 00 00 00	 call	 dis_fac_ins

; 3945 :     DIS_FAC_INS( E78C, "VPERM   E78C  VECTOR PERMUTE" );

  010c0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  010c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  010cc	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  010d0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195735
  010d7	41 b8 8c e7 00
	00		 mov	 r8d, 59276		; 0000e78cH
  010dd	48 8b d0	 mov	 rdx, rax
  010e0	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  010e4	e8 00 00 00 00	 call	 dis_fac_ins

; 3946 :     DIS_FAC_INS( E784, "VPDI    E784  VECTOR PERMUTE DOUBLEWORD IMMEDIATE" );

  010e9	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  010ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  010f5	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  010f9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195736
  01100	41 b8 84 e7 00
	00		 mov	 r8d, 59268		; 0000e784H
  01106	48 8b d0	 mov	 rdx, rax
  01109	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0110d	e8 00 00 00 00	 call	 dis_fac_ins

; 3947 :     DIS_FAC_INS( E750, "VPOPCT  E750  VECTOR POPULATION COUNT" );

  01112	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0111e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01122	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195737
  01129	41 b8 50 e7 00
	00		 mov	 r8d, 59216		; 0000e750H
  0112f	48 8b d0	 mov	 rdx, rax
  01132	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01136	e8 00 00 00 00	 call	 dis_fac_ins

; 3948 :     DIS_FAC_INS( E74D, "VREP    E74D  VECTOR REPLICATE" );

  0113b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01147	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0114b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195738
  01152	41 b8 4d e7 00
	00		 mov	 r8d, 59213		; 0000e74dH
  01158	48 8b d0	 mov	 rdx, rax
  0115b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0115f	e8 00 00 00 00	 call	 dis_fac_ins

; 3949 :     DIS_FAC_INS( E745, "VREPI   E745  VECTOR REPLICATE IMMEDIATE" );

  01164	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01170	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01174	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195739
  0117b	41 b8 45 e7 00
	00		 mov	 r8d, 59205		; 0000e745H
  01181	48 8b d0	 mov	 rdx, rax
  01184	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01188	e8 00 00 00 00	 call	 dis_fac_ins

; 3950 :     DIS_FAC_INS( E71A, "VSCEG   E71A  VECTOR SCATTER ELEMENT (64)" );

  0118d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01199	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0119d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195740
  011a4	41 b8 1a e7 00
	00		 mov	 r8d, 59162		; 0000e71aH
  011aa	48 8b d0	 mov	 rdx, rax
  011ad	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  011b1	e8 00 00 00 00	 call	 dis_fac_ins

; 3951 :     DIS_FAC_INS( E71B, "VSCEF   E71B  VECTOR SCATTER ELEMENT (32)" );

  011b6	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  011bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  011c2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  011c6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195741
  011cd	41 b8 1b e7 00
	00		 mov	 r8d, 59163		; 0000e71bH
  011d3	48 8b d0	 mov	 rdx, rax
  011d6	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  011da	e8 00 00 00 00	 call	 dis_fac_ins

; 3952 :     DIS_FAC_INS( E78D, "VSEL    E78D  VECTOR SELECT" );

  011df	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  011e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  011eb	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  011ef	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195742
  011f6	41 b8 8d e7 00
	00		 mov	 r8d, 59277		; 0000e78dH
  011fc	48 8b d0	 mov	 rdx, rax
  011ff	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01203	e8 00 00 00 00	 call	 dis_fac_ins

; 3953 :     DIS_FAC_INS( E774, "VSL     E774  VECTOR SHIFT LEFT" );

  01208	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0120d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01214	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01218	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195743
  0121f	41 b8 74 e7 00
	00		 mov	 r8d, 59252		; 0000e774H
  01225	48 8b d0	 mov	 rdx, rax
  01228	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0122c	e8 00 00 00 00	 call	 dis_fac_ins

; 3954 :     DIS_FAC_INS( E775, "VSLB    E775  VECTOR SHIFT LEFT BY BYTE" );

  01231	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01236	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0123d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01241	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195744
  01248	41 b8 75 e7 00
	00		 mov	 r8d, 59253		; 0000e775H
  0124e	48 8b d0	 mov	 rdx, rax
  01251	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01255	e8 00 00 00 00	 call	 dis_fac_ins

; 3955 :     DIS_FAC_INS( E777, "VSLDB   E777  VECTOR SHIFT LEFT DOUBLE BY BYTE" );

  0125a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0125f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01266	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0126a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195745
  01271	41 b8 77 e7 00
	00		 mov	 r8d, 59255		; 0000e777H
  01277	48 8b d0	 mov	 rdx, rax
  0127a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0127e	e8 00 00 00 00	 call	 dis_fac_ins

; 3956 :     DIS_FAC_INS( E77E, "VSRA    E77E  VECTOR SHIFT RIGHT ARITHMETIC" );

  01283	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01288	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0128f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01293	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195746
  0129a	41 b8 7e e7 00
	00		 mov	 r8d, 59262		; 0000e77eH
  012a0	48 8b d0	 mov	 rdx, rax
  012a3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  012a7	e8 00 00 00 00	 call	 dis_fac_ins

; 3957 :     DIS_FAC_INS( E77F, "VSRAB   E77F  VECTOR SHIFT RIGHT ARITHMETIC BY BYTE" );

  012ac	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  012b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  012b8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  012bc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195747
  012c3	41 b8 7f e7 00
	00		 mov	 r8d, 59263		; 0000e77fH
  012c9	48 8b d0	 mov	 rdx, rax
  012cc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  012d0	e8 00 00 00 00	 call	 dis_fac_ins

; 3958 :     DIS_FAC_INS( E77C, "VSRL    E77C  VECTOR SHIFT RIGHT LOGICAL" );

  012d5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  012da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  012e1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  012e5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195748
  012ec	41 b8 7c e7 00
	00		 mov	 r8d, 59260		; 0000e77cH
  012f2	48 8b d0	 mov	 rdx, rax
  012f5	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  012f9	e8 00 00 00 00	 call	 dis_fac_ins

; 3959 :     DIS_FAC_INS( E77D, "VSRLB   E77D  VECTOR SHIFT RIGHT LOGICAL BY BYTE" );

  012fe	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0130a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0130e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195749
  01315	41 b8 7d e7 00
	00		 mov	 r8d, 59261		; 0000e77dH
  0131b	48 8b d0	 mov	 rdx, rax
  0131e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01322	e8 00 00 00 00	 call	 dis_fac_ins

; 3960 :     DIS_FAC_INS( E75F, "VSEG    E75F  VECTOR SIGN EXTEND TO DOUBLEWORD" );

  01327	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0132c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01333	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01337	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195750
  0133e	41 b8 5f e7 00
	00		 mov	 r8d, 59231		; 0000e75fH
  01344	48 8b d0	 mov	 rdx, rax
  01347	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0134b	e8 00 00 00 00	 call	 dis_fac_ins

; 3961 :     DIS_FAC_INS( E70E, "VST     E70E  VECTOR STORE" );

  01350	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01355	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0135c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01360	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195751
  01367	41 b8 0e e7 00
	00		 mov	 r8d, 59150		; 0000e70eH
  0136d	48 8b d0	 mov	 rdx, rax
  01370	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01374	e8 00 00 00 00	 call	 dis_fac_ins

; 3962 :     DIS_FAC_INS( E708, "VSTEB   E708  VECTOR STORE ELEMENT (8)" );

  01379	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0137e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01385	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01389	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195752
  01390	41 b8 08 e7 00
	00		 mov	 r8d, 59144		; 0000e708H
  01396	48 8b d0	 mov	 rdx, rax
  01399	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0139d	e8 00 00 00 00	 call	 dis_fac_ins

; 3963 :     DIS_FAC_INS( E709, "VSTEH   E709  VECTOR STORE ELEMENT (16)" );

  013a2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  013a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  013ae	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  013b2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195753
  013b9	41 b8 09 e7 00
	00		 mov	 r8d, 59145		; 0000e709H
  013bf	48 8b d0	 mov	 rdx, rax
  013c2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  013c6	e8 00 00 00 00	 call	 dis_fac_ins

; 3964 :     DIS_FAC_INS( E70A, "VSTEG   E70A  VECTOR STORE ELEMENT (64)" );

  013cb	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  013d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  013d7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  013db	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195754
  013e2	41 b8 0a e7 00
	00		 mov	 r8d, 59146		; 0000e70aH
  013e8	48 8b d0	 mov	 rdx, rax
  013eb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  013ef	e8 00 00 00 00	 call	 dis_fac_ins

; 3965 :     DIS_FAC_INS( E70B, "VSTEF   E70B  VECTOR STORE ELEMENT (32)" );

  013f4	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  013f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01400	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01404	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195755
  0140b	41 b8 0b e7 00
	00		 mov	 r8d, 59147		; 0000e70bH
  01411	48 8b d0	 mov	 rdx, rax
  01414	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01418	e8 00 00 00 00	 call	 dis_fac_ins

; 3966 :     DIS_FAC_INS( E73E, "VSTM    E73E  VECTOR STORE MULTIPLE" );

  0141d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01422	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01429	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0142d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195756
  01434	41 b8 3e e7 00
	00		 mov	 r8d, 59198		; 0000e73eH
  0143a	48 8b d0	 mov	 rdx, rax
  0143d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01441	e8 00 00 00 00	 call	 dis_fac_ins

; 3967 :     DIS_FAC_INS( E73F, "VSTL    E73F  VECTOR STORE WITH LENGTH" );

  01446	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0144b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01452	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01456	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195757
  0145d	41 b8 3f e7 00
	00		 mov	 r8d, 59199		; 0000e73fH
  01463	48 8b d0	 mov	 rdx, rax
  01466	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0146a	e8 00 00 00 00	 call	 dis_fac_ins

; 3968 :     DIS_FAC_INS( E78A, "VSTRC   E78A  VECTOR STRING RANGE COMPARE" );

  0146f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01474	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0147b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0147f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195758
  01486	41 b8 8a e7 00
	00		 mov	 r8d, 59274		; 0000e78aH
  0148c	48 8b d0	 mov	 rdx, rax
  0148f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01493	e8 00 00 00 00	 call	 dis_fac_ins

; 3969 :     DIS_FAC_INS( E7F7, "VS      E7F7  VECTOR SUBTRACT" );

  01498	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0149d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  014a4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  014a8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195759
  014af	41 b8 f7 e7 00
	00		 mov	 r8d, 59383		; 0000e7f7H
  014b5	48 8b d0	 mov	 rdx, rax
  014b8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  014bc	e8 00 00 00 00	 call	 dis_fac_ins

; 3970 :     DIS_FAC_INS( E7F5, "VSCBI   E7F5  VECTOR SUBTRACT COMPUTE BORROW INDICATION" );

  014c1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  014c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  014cd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  014d1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195760
  014d8	41 b8 f5 e7 00
	00		 mov	 r8d, 59381		; 0000e7f5H
  014de	48 8b d0	 mov	 rdx, rax
  014e1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  014e5	e8 00 00 00 00	 call	 dis_fac_ins

; 3971 :     DIS_FAC_INS( E7BD, "VSBCBI  E7BD  VECTOR SUBTRACT WITH BORROW COMPUTE BORROW INDICATION" );

  014ea	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  014ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  014f6	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  014fa	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195761
  01501	41 b8 bd e7 00
	00		 mov	 r8d, 59325		; 0000e7bdH
  01507	48 8b d0	 mov	 rdx, rax
  0150a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0150e	e8 00 00 00 00	 call	 dis_fac_ins

; 3972 :     DIS_FAC_INS( E7BF, "VSBI    E7BF  VECTOR SUBTRACT WITH BORROW INDICATION" );

  01513	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01518	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0151f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01523	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195762
  0152a	41 b8 bf e7 00
	00		 mov	 r8d, 59327		; 0000e7bfH
  01530	48 8b d0	 mov	 rdx, rax
  01533	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01537	e8 00 00 00 00	 call	 dis_fac_ins

; 3973 :     DIS_FAC_INS( E765, "VSUMG   E765  VECTOR SUM ACROSS DOUBLEWORD" );

  0153c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01541	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01548	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0154c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195763
  01553	41 b8 65 e7 00
	00		 mov	 r8d, 59237		; 0000e765H
  01559	48 8b d0	 mov	 rdx, rax
  0155c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01560	e8 00 00 00 00	 call	 dis_fac_ins

; 3974 :     DIS_FAC_INS( E767, "VSUMQ   E767  VECTOR SUM ACROSS QUADWORD" );

  01565	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0156a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01571	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01575	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195764
  0157c	41 b8 67 e7 00
	00		 mov	 r8d, 59239		; 0000e767H
  01582	48 8b d0	 mov	 rdx, rax
  01585	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01589	e8 00 00 00 00	 call	 dis_fac_ins

; 3975 :     DIS_FAC_INS( E764, "VSUM    E764  VECTOR SUM ACROSS WORD" );

  0158e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01593	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0159a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0159e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195765
  015a5	41 b8 64 e7 00
	00		 mov	 r8d, 59236		; 0000e764H
  015ab	48 8b d0	 mov	 rdx, rax
  015ae	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  015b2	e8 00 00 00 00	 call	 dis_fac_ins

; 3976 :     DIS_FAC_INS( E7D8, "VTM     E7D8  VECTOR TEST UNDER MASK" );

  015b7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  015bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  015c3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  015c7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195766
  015ce	41 b8 d8 e7 00
	00		 mov	 r8d, 59352		; 0000e7d8H
  015d4	48 8b d0	 mov	 rdx, rax
  015d7	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  015db	e8 00 00 00 00	 call	 dis_fac_ins

; 3977 :     DIS_FAC_INS( E7D7, "VUPH    E7D7  VECTOR UNPACK HIGH" );

  015e0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  015e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  015ec	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  015f0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195767
  015f7	41 b8 d7 e7 00
	00		 mov	 r8d, 59351		; 0000e7d7H
  015fd	48 8b d0	 mov	 rdx, rax
  01600	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01604	e8 00 00 00 00	 call	 dis_fac_ins

; 3978 :     DIS_FAC_INS( E7D5, "VUPLH   E7D5  VECTOR UNPACK LOGICAL HIGH" );

  01609	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0160e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01615	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01619	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195768
  01620	41 b8 d5 e7 00
	00		 mov	 r8d, 59349		; 0000e7d5H
  01626	48 8b d0	 mov	 rdx, rax
  01629	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0162d	e8 00 00 00 00	 call	 dis_fac_ins

; 3979 :     DIS_FAC_INS( E7D4, "VUPLL   E7D4  VECTOR UNPACK LOGICAL LOW" );

  01632	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01637	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  0163e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  01642	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195769
  01649	41 b8 d4 e7 00
	00		 mov	 r8d, 59348		; 0000e7d4H
  0164f	48 8b d0	 mov	 rdx, rax
  01652	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  01656	e8 00 00 00 00	 call	 dis_fac_ins

; 3980 :     DIS_FAC_INS( E7D6, "VUPL    E7D6  VECTOR UNPACK LOW" );

  0165b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  01660	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr129@@9@9
  01667	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0166b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195770
  01672	41 b8 d6 e7 00
	00		 mov	 r8d, 59350		; 0000e7d6H
  01678	48 8b d0	 mov	 rdx, rax
  0167b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0167f	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr129:
$LN3@instr129:

; 3981 : }
; 3982 : END_DIS_FAC_INS_FUNC()

  01684	48 83 c4 28	 add	 rsp, 40			; 00000028H
  01688	c3		 ret	 0
instr129 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr80	PROC

; 3829 : BEG_DIS_FAC_INS_FUNC( instr80 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr80
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr80@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 bb 00 00 00	 jmp	 $LN3@instr80
$LN2@instr80:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr80@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 a4 00 00
	00		 jne	 $LN4@instr80

; 3830 : {
; 3831 :     DIS_FAC_INS( EDAE, "CDPT    EDAE  CONVERT FROM PACKED (to long DFP)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr80@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195618
  00058	41 b8 ae ed 00
	00		 mov	 r8d, 60846		; 0000edaeH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3832 :     DIS_FAC_INS( EDAF, "CXPT    EDAF  CONVERT FROM PACKED (to extended DFP)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr80@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195619
  00081	41 b8 af ed 00
	00		 mov	 r8d, 60847		; 0000edafH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3833 :     DIS_FAC_INS( EDAC, "CPDT    EDAC  CONVERT TO PACKED (from long DFP)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr80@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195620
  000aa	41 b8 ac ed 00
	00		 mov	 r8d, 60844		; 0000edacH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3834 :     DIS_FAC_INS( EDAD, "CPXT    EDAD  CONVERT TO PACKED (from extended DFP)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr80@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195621
  000d3	41 b8 ad ed 00
	00		 mov	 r8d, 60845		; 0000edadH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr80:
$LN3@instr80:

; 3835 : }
; 3836 : END_DIS_FAC_INS_FUNC()

  000e5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e9	c3		 ret	 0
instr80	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr78	PROC

; 3821 : BEG_DIS_FAC_INS_FUNC( instr78 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr78
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr78@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr78
$LN2@instr78:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr78@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr78

; 3822 : {
; 3823 :     DIS_FAC_INS( B98F, "CRDTE   B98F  COMPARE AND REPLACE DAT TABLE ENTRY" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr78@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195607
  00051	41 b8 8f b9 00
	00		 mov	 r8d, 47503		; 0000b98fH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr78:
$LN3@instr78:

; 3824 : }
; 3825 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr78	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr77	PROC

; 3810 : BEG_DIS_FAC_INS_FUNC( instr77 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr77
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr77@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 bb 00 00 00	 jmp	 $LN3@instr77
$LN2@instr77:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr77@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 a4 00 00
	00		 jne	 $LN4@instr77

; 3811 : {
; 3812 :     DIS_FAC_INS( B92A, "KMF     B92A  CIPHER MESSAGE WITH CIPHER FEEDBACK" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr77@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195593
  00058	41 b8 2a b9 00
	00		 mov	 r8d, 47402		; 0000b92aH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3813 :     DIS_FAC_INS( B92D, "KMCTR   B92D  CIPHER MESSAGE WITH COUNTER" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr77@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195594
  00081	41 b8 2d b9 00
	00		 mov	 r8d, 47405		; 0000b92dH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3814 :     DIS_FAC_INS( B92B, "KMO     B92B  CIPHER MESSAGE WITH OUTPUT FEEDBACK" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr77@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195595
  000aa	41 b8 2b b9 00
	00		 mov	 r8d, 47403		; 0000b92bH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3815 :     DIS_FAC_INS( B92C, "PCC     B92C  PERFORM CRYPTOGRAPHIC COMPUTATION" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr77@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195596
  000d3	41 b8 2c b9 00
	00		 mov	 r8d, 47404		; 0000b92cH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr77:
$LN3@instr77:

; 3816 : }
; 3817 : END_DIS_FAC_INS_FUNC()

  000e5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e9	c3		 ret	 0
instr77	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr76	PROC

; 3802 : BEG_DIS_FAC_INS_FUNC( instr76 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr76
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr76@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr76
$LN2@instr76:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr76@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr76

; 3803 : {
; 3804 :     DIS_FAC_INS( B928, "PCKMO   B928  PERFORM CRYPTOGRAPHIC KEY MGMT. OPERATIONS" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr76@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195582
  00051	41 b8 28 b9 00
	00		 mov	 r8d, 47400		; 0000b928H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr76:
$LN3@instr76:

; 3805 : }
; 3806 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr76	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr74	PROC

; 3794 : BEG_DIS_FAC_INS_FUNC( instr74 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr74
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr74@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr74
$LN2@instr74:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr74@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr74

; 3795 : {
; 3796 :     DIS_FAC_INS( B256, "STHYI   B256  STORE HYPERVISOR INFORMATION" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr74@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195571
  00051	41 b8 56 b2 00
	00		 mov	 r8d, 45654		; 0000b256H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr74:
$LN3@instr74:

; 3797 : }
; 3798 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr74	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr73	PROC

; 3782 : BEG_DIS_FAC_INS_FUNC( instr73 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr73
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr73@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 e4 00 00 00	 jmp	 $LN3@instr73
$LN2@instr73:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr73@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 cd 00 00
	00		 jne	 $LN4@instr73

; 3783 : {
; 3784 :     DIS_FAC_INS( B2EC, "ETND    B2EC  EXTRACT TRANSACTION NESTING DEPTH" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr73@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195556
  00058	41 b8 ec b2 00
	00		 mov	 r8d, 45804		; 0000b2ecH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3785 :     DIS_FAC_INS( E325, "NTSTG   E325  NONTRANSACTIONAL STORE (64)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr73@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195557
  00081	41 b8 25 e3 00
	00		 mov	 r8d, 58149		; 0000e325H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3786 :     DIS_FAC_INS( B2FC, "TABORT  B2FC  TRANSACTION ABORT" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr73@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195558
  000aa	41 b8 fc b2 00
	00		 mov	 r8d, 45820		; 0000b2fcH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3787 :     DIS_FAC_INS( E560, "TBEGIN  E560  TRANSACTION BEGIN (unconstrained)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr73@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195559
  000d3	41 b8 60 e5 00
	00		 mov	 r8d, 58720		; 0000e560H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3788 :     DIS_FAC_INS( B2F8, "TEND    B2F8  TRANSACTION END" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr73@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195560
  000fc	41 b8 f8 b2 00
	00		 mov	 r8d, 45816		; 0000b2f8H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr73:
$LN3@instr73:

; 3789 : }
; 3790 : END_DIS_FAC_INS_FUNC()

  0010e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00112	c3		 ret	 0
instr73	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr68	PROC

; 3773 : BEG_DIS_FAC_INS_FUNC( instr68 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr68
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr68@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 65		 jmp	 SHORT $LN3@instr68
$LN2@instr68:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr68@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 52		 jne	 SHORT $LN4@instr68

; 3774 : {
; 3775 :     DIS_FAC_INS( B287, "LSCTL   B287  LOAD SAMPLING CONTROLS" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr68@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195544
  00051	41 b8 87 b2 00
	00		 mov	 r8d, 45703		; 0000b287H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins

; 3776 :     DIS_FAC_INS( B286, "QSI     B286  QUERY SAMPLING INFORMATION" );

  00063	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr68@@9@9
  0006f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00073	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195545
  0007a	41 b8 86 b2 00
	00		 mov	 r8d, 45702		; 0000b286H
  00080	48 8b d0	 mov	 rdx, rax
  00083	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00087	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr68:
$LN3@instr68:

; 3777 : }
; 3778 : END_DIS_FAC_INS_FUNC()

  0008c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00090	c3		 ret	 0
instr68	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr67	PROC

; 3758 : BEG_DIS_FAC_INS_FUNC( instr67 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr67
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr67@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 5f 01 00 00	 jmp	 $LN3@instr67
$LN2@instr67:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr67@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 48 01 00
	00		 jne	 $LN4@instr67

; 3759 : {
; 3760 :     DIS_FAC_INS( B2ED, "ECPGA   B2ED  EXTRACT COPROCESSOR-GROUP ADDRESS" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr67@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195526
  00058	41 b8 ed b2 00
	00		 mov	 r8d, 45805		; 0000b2edH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3761 :     DIS_FAC_INS( B2E4, "ECCTR   B2E4  EXTRACT CPU COUNTER" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr67@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195527
  00081	41 b8 e4 b2 00
	00		 mov	 r8d, 45796		; 0000b2e4H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3762 :     DIS_FAC_INS( B2E5, "EPCTR   B2E5  EXTRACT PERIPHERAL COUNTER" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr67@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195528
  000aa	41 b8 e5 b2 00
	00		 mov	 r8d, 45797		; 0000b2e5H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3763 :     DIS_FAC_INS( B284, "LCCTL   B284  LOAD CPU-COUNTER-SET CONTROLS" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr67@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195529
  000d3	41 b8 84 b2 00
	00		 mov	 r8d, 45700		; 0000b284H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3764 :     DIS_FAC_INS( B285, "LPCTL   B285  LOAD PERIPHERAL-COUNTER-SET CONTROLS" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr67@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195530
  000fc	41 b8 85 b2 00
	00		 mov	 r8d, 45701		; 0000b285H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3765 :     DIS_FAC_INS( B28E, "QCTRI   B28E  QUERY COUNTER INFORMATION" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr67@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195531
  00125	41 b8 8e b2 00
	00		 mov	 r8d, 45710		; 0000b28eH
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3766 :     DIS_FAC_INS( B2E0, "SCCTR   B2E0  SET CPU COUNTER" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr67@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195532
  0014e	41 b8 e0 b2 00
	00		 mov	 r8d, 45792		; 0000b2e0H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3767 :     DIS_FAC_INS( B2E1, "SPCTR   B2E1  SET PERIPHERAL COUNTER" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr67@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195533
  00177	41 b8 e1 b2 00
	00		 mov	 r8d, 45793		; 0000b2e1H
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr67:
$LN3@instr67:

; 3768 : }
; 3769 : END_DIS_FAC_INS_FUNC()

  00189	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0018d	c3		 ret	 0
instr67	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr66	PROC

; 3750 : BEG_DIS_FAC_INS_FUNC( instr66 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr66
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr66@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr66
$LN2@instr66:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr66@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr66

; 3751 : {
; 3752 :     DIS_FAC_INS( B9AE, "RRBM    B9AE  RESET REFERENCE BITS MULTIPLE" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr66@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195515
  00051	41 b8 ae b9 00
	00		 mov	 r8d, 47534		; 0000b9aeH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr66:
$LN3@instr66:

; 3753 : }
; 3754 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr66	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr61	PROC

; 3729 : BEG_DIS_FAC_INS_FUNC( instr61 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr61
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 55 02 00 00	 jmp	 $LN3@instr61
$LN2@instr61:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 3e 02 00
	00		 jne	 $LN4@instr61

; 3730 : {
; 3731 :     DIS_FAC_INS( B9F5, "NCRK    B9F5  AND WITH COMPLEMENT (32)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195491
  00058	41 b8 f5 b9 00
	00		 mov	 r8d, 47605		; 0000b9f5H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3732 :     DIS_FAC_INS( B9E5, "NCGRK   B9E5  AND WITH COMPLEMENT (64)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195492
  00081	41 b8 e5 b9 00
	00		 mov	 r8d, 47589		; 0000b9e5H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3733 :     DIS_FAC_INS( E50A, "MVCRL   E50A  MOVE RIGHT TO LEFT" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195493
  000aa	41 b8 0a e5 00
	00		 mov	 r8d, 58634		; 0000e50aH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3734 :     DIS_FAC_INS( B974, "NNRK    B974  NAND (32)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195494
  000d3	41 b8 74 b9 00
	00		 mov	 r8d, 47476		; 0000b974H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3735 :     DIS_FAC_INS( B964, "NNGRK   B964  NAND (64)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195495
  000fc	41 b8 64 b9 00
	00		 mov	 r8d, 47460		; 0000b964H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3736 :     DIS_FAC_INS( B977, "NXRK    B977  NOT EXCLUSIVE OR (32)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195496
  00125	41 b8 77 b9 00
	00		 mov	 r8d, 47479		; 0000b977H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3737 :     DIS_FAC_INS( B967, "NXGRK   B967  NOT EXCLUSIVE OR (64)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195497
  0014e	41 b8 67 b9 00
	00		 mov	 r8d, 47463		; 0000b967H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3738 :     DIS_FAC_INS( B976, "NORK    B976  NOR (32)" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195498
  00177	41 b8 76 b9 00
	00		 mov	 r8d, 47478		; 0000b976H
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3739 :     DIS_FAC_INS( B966, "NOGRK   B966  NOR (64)" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195499
  001a0	41 b8 66 b9 00
	00		 mov	 r8d, 47462		; 0000b966H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3740 :     DIS_FAC_INS( B975, "OCRK    B975  OR WITH COMPLEMENT (32)" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195500
  001c9	41 b8 75 b9 00
	00		 mov	 r8d, 47477		; 0000b975H
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 3741 :     DIS_FAC_INS( B965, "OCGRK   B965  OR WITH COMPLEMENT (64)" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195501
  001f2	41 b8 65 b9 00
	00		 mov	 r8d, 47461		; 0000b965H
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 3742 :     DIS_FAC_INS( B9F0, "SELR    B9F0  SELECT (32)" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195502
  0021b	41 b8 f0 b9 00
	00		 mov	 r8d, 47600		; 0000b9f0H
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins

; 3743 :     DIS_FAC_INS( B9E3, "SELGR   B9E3  SELECT (64)" );

  0022d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  00239	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0023d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195503
  00244	41 b8 e3 b9 00
	00		 mov	 r8d, 47587		; 0000b9e3H
  0024a	48 8b d0	 mov	 rdx, rax
  0024d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00251	e8 00 00 00 00	 call	 dis_fac_ins

; 3744 :     DIS_FAC_INS( B9C0, "SELFHR  B9C0  SELECT HIGH" );

  00256	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr61@@9@9
  00262	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00266	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195504
  0026d	41 b8 c0 b9 00
	00		 mov	 r8d, 47552		; 0000b9c0H
  00273	48 8b d0	 mov	 rdx, rax
  00276	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0027a	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr61:
$LN3@instr61:

; 3745 : }
; 3746 : END_DIS_FAC_INS_FUNC()

  0027f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00283	c3		 ret	 0
instr61	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr58	PROC

; 3712 : BEG_DIS_FAC_INS_FUNC( instr58 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr58
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr58@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 b1 01 00 00	 jmp	 $LN3@instr58
$LN2@instr58:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr58@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 9a 01 00
	00		 jne	 $LN4@instr58

; 3713 : {
; 3714 :     DIS_FAC_INS( E338, "AGH     E338  ADD HALFWORD (64 <- 16)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr58@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195471
  00058	41 b8 38 e3 00
	00		 mov	 r8d, 58168		; 0000e338H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3715 :     DIS_FAC_INS( E347, "BIC     E347  BRANCH INDIRECT ON CONDITION" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr58@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195472
  00081	41 b8 47 e3 00
	00		 mov	 r8d, 58183		; 0000e347H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3716 :     DIS_FAC_INS( B9EC, "MGRK    B9EC  MULTIPLY (128 <- 64)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr58@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195473
  000aa	41 b8 ec b9 00
	00		 mov	 r8d, 47596		; 0000b9ecH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3717 :     DIS_FAC_INS( E384, "MG      E384  MULTIPLY (128 <- 64)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr58@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195474
  000d3	41 b8 84 e3 00
	00		 mov	 r8d, 58244		; 0000e384H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3718 :     DIS_FAC_INS( E33C, "MGH     E33C  MULTIPLY HALFWORD (64 <- 16)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr58@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195475
  000fc	41 b8 3c e3 00
	00		 mov	 r8d, 58172		; 0000e33cH
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3719 :     DIS_FAC_INS( B9ED, "MSGRKC  B9ED  MULTIPLY SINGLE (64)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr58@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195476
  00125	41 b8 ed b9 00
	00		 mov	 r8d, 47597		; 0000b9edH
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3720 :     DIS_FAC_INS( B9FD, "MSRKC   B9FD  MULTIPLY SINGLE (32)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr58@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195477
  0014e	41 b8 fd b9 00
	00		 mov	 r8d, 47613		; 0000b9fdH
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3721 :     DIS_FAC_INS( E353, "MSC     E353  MULTIPLY SINGLE (32)" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr58@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195478
  00177	41 b8 53 e3 00
	00		 mov	 r8d, 58195		; 0000e353H
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3722 :     DIS_FAC_INS( E383, "MSGC    E383  MULTIPLY SINGLE (64)" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr58@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195479
  001a0	41 b8 83 e3 00
	00		 mov	 r8d, 58243		; 0000e383H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3723 :     DIS_FAC_INS( E339, "SGH     E339  SUBTRACT HALFWORD (64 <- 16)" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr58@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195480
  001c9	41 b8 39 e3 00
	00		 mov	 r8d, 58169		; 0000e339H
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr58:
$LN3@instr58:

; 3724 : }
; 3725 : END_DIS_FAC_INS_FUNC()

  001db	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001df	c3		 ret	 0
instr58	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr57	PROC

; 3704 : BEG_DIS_FAC_INS_FUNC( instr57 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr57
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr57@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr57
$LN2@instr57:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr57@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr57

; 3705 : {
; 3706 :     DIS_FAC_INS( B93C, "PRNO    B93C  PERFORM RANDOM NUMBER OPERATION" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr57@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195460
  00051	41 b8 3c b9 00
	00		 mov	 r8d, 47420		; 0000b93cH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr57:
$LN3@instr57:

; 3707 : }
; 3708 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr57	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr53	PROC

; 3687 : BEG_DIS_FAC_INS_FUNC( instr53 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr53
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr53@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 88 01 00 00	 jmp	 $LN3@instr53
$LN2@instr53:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr53@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 71 01 00
	00		 jne	 $LN4@instr53

; 3688 : {
; 3689 :     DIS_FAC_INS( E32A, "LZRG    E32A  LOAD AND ZERO RIGHTMOST BYTE (64)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr53@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195441
  00058	41 b8 2a e3 00
	00		 mov	 r8d, 58154		; 0000e32aH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3690 :     DIS_FAC_INS( E33B, "LZRF    E33B  LOAD AND ZERO RIGHTMOST BYTE (32)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr53@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195442
  00081	41 b8 3b e3 00
	00		 mov	 r8d, 58171		; 0000e33bH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3691 :     DIS_FAC_INS( E33A, "LLZRGF  E33A  LOAD LOGICAL AND ZERO RIGHTMOST BYTE (64 <- 32)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr53@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195443
  000aa	41 b8 3a e3 00
	00		 mov	 r8d, 58170		; 0000e33aH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3692 : 
; 3693 :     DIS_FAC_INS( EC4E, "LOCHHI  EC4E  LOAD HALFWORD HIGH IMMEDIATE ON CONDITION (32 <- 16)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr53@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195444
  000d3	41 b8 4e ec 00
	00		 mov	 r8d, 60494		; 0000ec4eH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3694 :     DIS_FAC_INS( EC42, "LOCHI   EC42  LOAD HALFWORD IMMEDIATE ON CONDITION (32 <- 16)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr53@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195445
  000fc	41 b8 42 ec 00
	00		 mov	 r8d, 60482		; 0000ec42H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3695 :     DIS_FAC_INS( EC46, "LOCGHI  EC46  LOAD HALFWORD IMMEDIATE ON CONDITION (64 <- 16)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr53@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195446
  00125	41 b8 46 ec 00
	00		 mov	 r8d, 60486		; 0000ec46H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3696 :     DIS_FAC_INS( B9E0, "LOCFHR  B9E0  LOAD HIGH ON CONDITION (32)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr53@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195447
  0014e	41 b8 e0 b9 00
	00		 mov	 r8d, 47584		; 0000b9e0H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3697 :     DIS_FAC_INS( EBE0, "LOCFH   EBE0  LOAD HIGH ON CONDITION (32)" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr53@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195448
  00177	41 b8 e0 eb 00
	00		 mov	 r8d, 60384		; 0000ebe0H
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3698 :     DIS_FAC_INS( EBE1, "STOCFH  EBE1  STORE HIGH ON CONDITION" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr53@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195449
  001a0	41 b8 e1 eb 00
	00		 mov	 r8d, 60385		; 0000ebe1H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr53:
$LN3@instr53:

; 3699 : }
; 3700 : END_DIS_FAC_INS_FUNC()

  001b2	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001b6	c3		 ret	 0
instr53	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr50	PROC

; 3679 : BEG_DIS_FAC_INS_FUNC( instr50 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr50
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr50@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr50
$LN2@instr50:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr50@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr50

; 3680 : {
; 3681 :     DIS_FAC_INS( E561, "TBEGINC E561  TRANSACTION BEGIN (CONSTRAINED)" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr50@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195430
  00051	41 b8 61 e5 00
	00		 mov	 r8d, 58721		; 0000e561H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr50:
$LN3@instr50:

; 3682 : }
; 3683 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr50	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr49	PROC

; 3657 : BEG_DIS_FAC_INS_FUNC( instr49 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr49
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 03 02 00 00	 jmp	 $LN3@instr49
$LN2@instr49:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 ec 01 00
	00		 jne	 $LN4@instr49

; 3658 : {
; 3659 :     DIS_FAC_INS( C7,   "BPP     C7    BRANCH PREDICTION PRELOAD" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195408
  00058	41 b8 c7 00 00
	00		 mov	 r8d, 199		; 000000c7H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3660 :     DIS_FAC_INS( C5,   "BPRP    C5    BRANCH PREDICTION RELATIVE PRELOAD" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195409
  00081	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3661 :     DIS_FAC_INS( B2FA, "NIAI    B2FA  NEXT INSTRUCTION ACCESS INTENT" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195410
  000aa	41 b8 fa b2 00
	00		 mov	 r8d, 45818		; 0000b2faH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3662 : 
; 3663 :     DIS_FAC_INS( E385, "LGAT    E385  LOAD AND TRAP (64)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195411
  000d3	41 b8 85 e3 00
	00		 mov	 r8d, 58245		; 0000e385H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3664 :     DIS_FAC_INS( E39F, "LAT     E39F  LOAD AND TRAP (32L <- 32)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195412
  000fc	41 b8 9f e3 00
	00		 mov	 r8d, 58271		; 0000e39fH
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3665 :     DIS_FAC_INS( E3C8, "LFHAT   E3C8  LOAD HIGH AND TRAP (32H <- 32)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195413
  00125	41 b8 c8 e3 00
	00		 mov	 r8d, 58312		; 0000e3c8H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3666 :     DIS_FAC_INS( E39D, "LLGFAT  E39D  LOAD LOGICAL AND TRAP (64 <- 32)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195414
  0014e	41 b8 9d e3 00
	00		 mov	 r8d, 58269		; 0000e39dH
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3667 :     DIS_FAC_INS( E39C, "LLGTAT  E39C  LOAD LOGICAL THIRTY ONE BITS AND TRAP (64 <- 31)" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195415
  00177	41 b8 9c e3 00
	00		 mov	 r8d, 58268		; 0000e39cH
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3668 : 
; 3669 :     DIS_FAC_INS( EB23, "CLT     EB23  COMPARE LOGICAL AND TRAP (32)" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195416
  001a0	41 b8 23 eb 00
	00		 mov	 r8d, 60195		; 0000eb23H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3670 :     DIS_FAC_INS( EB2B, "CLGT    EB2B  COMPARE LOGICAL AND TRAP (64)" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195417
  001c9	41 b8 2b eb 00
	00		 mov	 r8d, 60203		; 0000eb2bH
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 3671 :     DIS_FAC_INS( EC59, "RISBGN  EC59  ROTATE THEN INSERT SELECTED BITS (64)" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195418
  001f2	41 b8 59 ec 00
	00		 mov	 r8d, 60505		; 0000ec59H
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 3672 : 
; 3673 :     DIS_FAC_INS( B2E8, "PPA     B2E8  PERFORM PROCESSOR ASSIST" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr49@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195419
  0021b	41 b8 e8 b2 00
	00		 mov	 r8d, 45800		; 0000b2e8H
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr49:
$LN3@instr49:

; 3674 : }
; 3675 : END_DIS_FAC_INS_FUNC()

  0022d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00231	c3		 ret	 0
instr49	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr48	PROC

; 3646 : BEG_DIS_FAC_INS_FUNC( instr48 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr48
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr48@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 bb 00 00 00	 jmp	 $LN3@instr48
$LN2@instr48:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr48@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 a4 00 00
	00		 jne	 $LN4@instr48

; 3647 : {
; 3648 :     DIS_FAC_INS( EDAA, "CDZT    EDAA  CONVERT FROM ZONED (to long DFP)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr48@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195394
  00058	41 b8 aa ed 00
	00		 mov	 r8d, 60842		; 0000edaaH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3649 :     DIS_FAC_INS( EDAB, "CXZT    EDAB  CONVERT FROM ZONED (to extended DFP)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr48@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195395
  00081	41 b8 ab ed 00
	00		 mov	 r8d, 60843		; 0000edabH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3650 :     DIS_FAC_INS( EDA8, "CZDT    EDA8  CONVERT TO ZONED (from long DFP)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr48@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195396
  000aa	41 b8 a8 ed 00
	00		 mov	 r8d, 60840		; 0000eda8H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3651 :     DIS_FAC_INS( EDA9, "CZXT    EDA9  CONVERT TO ZONED (from extended DFP)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr48@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195397
  000d3	41 b8 a9 ed 00
	00		 mov	 r8d, 60841		; 0000eda9H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr48:
$LN3@instr48:

; 3652 : }
; 3653 : END_DIS_FAC_INS_FUNC()

  000e5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e9	c3		 ret	 0
instr48	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr45	PROC

; 3564 : BEG_DIS_FAC_INS_FUNC( instr45 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr45
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 76 0b 00 00	 jmp	 $LN3@instr45
$LN2@instr45:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 5f 0b 00
	00		 jne	 $LN4@instr45

; 3565 : {
; 3566 :     DIS_FAC_INS( B9E8, "AGRK    B9E8  ADD (64)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195313
  00058	41 b8 e8 b9 00
	00		 mov	 r8d, 47592		; 0000b9e8H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3567 :     DIS_FAC_INS( B9F8, "ARK     B9F8  ADD (32)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195314
  00081	41 b8 f8 b9 00
	00		 mov	 r8d, 47608		; 0000b9f8H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3568 :     DIS_FAC_INS( ECD8, "AHIK    ECD8  ADD IMMEDIATE (32 <- 16)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195315
  000aa	41 b8 d8 ec 00
	00		 mov	 r8d, 60632		; 0000ecd8H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3569 :     DIS_FAC_INS( ECD9, "AGHIK   ECD9  ADD IMMEDIATE (64 <- 16)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195316
  000d3	41 b8 d9 ec 00
	00		 mov	 r8d, 60633		; 0000ecd9H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3570 :     DIS_FAC_INS( B9EA, "ALGRK   B9EA  ADD LOGICAL (64)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195317
  000fc	41 b8 ea b9 00
	00		 mov	 r8d, 47594		; 0000b9eaH
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3571 :     DIS_FAC_INS( B9FA, "ALRK    B9FA  ADD LOGICAL (32)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195318
  00125	41 b8 fa b9 00
	00		 mov	 r8d, 47610		; 0000b9faH
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3572 :     DIS_FAC_INS( ECDA, "ALHSIK  ECDA  ADD LOGICAL WITH SIGNED IMMEDIATE (32 <- 16)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195319
  0014e	41 b8 da ec 00
	00		 mov	 r8d, 60634		; 0000ecdaH
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3573 :     DIS_FAC_INS( ECDB, "ALGHSIK ECDB  ADD LOGICAL WITH SIGNED IMMEDIATE (64 <- 16)" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195320
  00177	41 b8 db ec 00
	00		 mov	 r8d, 60635		; 0000ecdbH
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3574 :     DIS_FAC_INS( B9E4, "NGRK    B9E4  AND (64)" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195321
  001a0	41 b8 e4 b9 00
	00		 mov	 r8d, 47588		; 0000b9e4H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3575 :     DIS_FAC_INS( B9F4, "NRK     B9F4  AND (32)" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195322
  001c9	41 b8 f4 b9 00
	00		 mov	 r8d, 47604		; 0000b9f4H
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 3576 :     DIS_FAC_INS( B9E7, "XGRK    B9E7  EXCLUSIVE OR (64)" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195323
  001f2	41 b8 e7 b9 00
	00		 mov	 r8d, 47591		; 0000b9e7H
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 3577 :     DIS_FAC_INS( B9F7, "XRK     B9F7  EXCLUSIVE OR (32)" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195324
  0021b	41 b8 f7 b9 00
	00		 mov	 r8d, 47607		; 0000b9f7H
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins

; 3578 :     DIS_FAC_INS( B9E6, "OGRK    B9E6  OR (64)" );

  0022d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00239	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0023d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195325
  00244	41 b8 e6 b9 00
	00		 mov	 r8d, 47590		; 0000b9e6H
  0024a	48 8b d0	 mov	 rdx, rax
  0024d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00251	e8 00 00 00 00	 call	 dis_fac_ins

; 3579 :     DIS_FAC_INS( B9F6, "ORK     B9F6  OR (32)" );

  00256	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00262	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00266	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195326
  0026d	41 b8 f6 b9 00
	00		 mov	 r8d, 47606		; 0000b9f6H
  00273	48 8b d0	 mov	 rdx, rax
  00276	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0027a	e8 00 00 00 00	 call	 dis_fac_ins

; 3580 :     DIS_FAC_INS( EBDD, "SLAK    EBDD  SHIFT LEFT SINGLE (32)" );

  0027f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0028b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0028f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195327
  00296	41 b8 dd eb 00
	00		 mov	 r8d, 60381		; 0000ebddH
  0029c	48 8b d0	 mov	 rdx, rax
  0029f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002a3	e8 00 00 00 00	 call	 dis_fac_ins

; 3581 :     DIS_FAC_INS( EBDF, "SLLK    EBDF  SHIFT LEFT SINGLE LOGICAL (32)" );

  002a8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  002b4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002b8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195328
  002bf	41 b8 df eb 00
	00		 mov	 r8d, 60383		; 0000ebdfH
  002c5	48 8b d0	 mov	 rdx, rax
  002c8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002cc	e8 00 00 00 00	 call	 dis_fac_ins

; 3582 :     DIS_FAC_INS( EBDC, "SRAK    EBDC  SHIFT RIGHT SINGLE (32)" );

  002d1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  002dd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002e1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195329
  002e8	41 b8 dc eb 00
	00		 mov	 r8d, 60380		; 0000ebdcH
  002ee	48 8b d0	 mov	 rdx, rax
  002f1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002f5	e8 00 00 00 00	 call	 dis_fac_ins

; 3583 :     DIS_FAC_INS( EBDE, "SRLK    EBDE  SHIFT RIGHT SINGLE LOGICAL (32)" );

  002fa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00306	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0030a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195330
  00311	41 b8 de eb 00
	00		 mov	 r8d, 60382		; 0000ebdeH
  00317	48 8b d0	 mov	 rdx, rax
  0031a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0031e	e8 00 00 00 00	 call	 dis_fac_ins

; 3584 :     DIS_FAC_INS( B9E9, "SGRK    B9E9  SUBTRACT (64)" );

  00323	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0032f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00333	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195331
  0033a	41 b8 e9 b9 00
	00		 mov	 r8d, 47593		; 0000b9e9H
  00340	48 8b d0	 mov	 rdx, rax
  00343	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00347	e8 00 00 00 00	 call	 dis_fac_ins

; 3585 :     DIS_FAC_INS( B9F9, "SRK     B9F9  SUBTRACT (32)" );

  0034c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00358	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0035c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195332
  00363	41 b8 f9 b9 00
	00		 mov	 r8d, 47609		; 0000b9f9H
  00369	48 8b d0	 mov	 rdx, rax
  0036c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00370	e8 00 00 00 00	 call	 dis_fac_ins

; 3586 :     DIS_FAC_INS( B9EB, "SLGRK   B9EB  SUBTRACT LOGICAL (64)" );

  00375	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00381	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00385	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195333
  0038c	41 b8 eb b9 00
	00		 mov	 r8d, 47595		; 0000b9ebH
  00392	48 8b d0	 mov	 rdx, rax
  00395	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00399	e8 00 00 00 00	 call	 dis_fac_ins

; 3587 :     DIS_FAC_INS( B9FB, "SLRK    B9FB  SUBTRACT LOGICAL (32)" );

  0039e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  003aa	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195334
  003b5	41 b8 fb b9 00
	00		 mov	 r8d, 47611		; 0000b9fbH
  003bb	48 8b d0	 mov	 rdx, rax
  003be	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003c2	e8 00 00 00 00	 call	 dis_fac_ins

; 3588 : 
; 3589 :     DIS_FAC_INS( B9C8, "AHHHR   B9C8  ADD HIGH (32)" );

  003c7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  003d3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195335
  003de	41 b8 c8 b9 00
	00		 mov	 r8d, 47560		; 0000b9c8H
  003e4	48 8b d0	 mov	 rdx, rax
  003e7	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003eb	e8 00 00 00 00	 call	 dis_fac_ins

; 3590 :     DIS_FAC_INS( B9D8, "AHHLR   B9D8  ADD HIGH (32)" );

  003f0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  003fc	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00400	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195336
  00407	41 b8 d8 b9 00
	00		 mov	 r8d, 47576		; 0000b9d8H
  0040d	48 8b d0	 mov	 rdx, rax
  00410	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00414	e8 00 00 00 00	 call	 dis_fac_ins

; 3591 :     DIS_FAC_INS( CC08, "AIH     CC08  ADD IMMEDIATE HIGH (32)" );

  00419	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0041e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00425	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00429	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195337
  00430	41 b8 08 cc 00
	00		 mov	 r8d, 52232		; 0000cc08H
  00436	48 8b d0	 mov	 rdx, rax
  00439	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0043d	e8 00 00 00 00	 call	 dis_fac_ins

; 3592 :     DIS_FAC_INS( B9CA, "ALHHHR  B9CA  ADD LOGICAL HIGH (32)" );

  00442	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00447	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0044e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00452	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195338
  00459	41 b8 ca b9 00
	00		 mov	 r8d, 47562		; 0000b9caH
  0045f	48 8b d0	 mov	 rdx, rax
  00462	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00466	e8 00 00 00 00	 call	 dis_fac_ins

; 3593 :     DIS_FAC_INS( B9DA, "ALHHLR  B9DA  ADD LOGICAL HIGH (32)" );

  0046b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00470	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00477	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0047b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195339
  00482	41 b8 da b9 00
	00		 mov	 r8d, 47578		; 0000b9daH
  00488	48 8b d0	 mov	 rdx, rax
  0048b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0048f	e8 00 00 00 00	 call	 dis_fac_ins

; 3594 :     DIS_FAC_INS( CC0A, "ALSIH   CC0A  ADD LOGICAL WITH SIGNED IMMEDIATE HIGH (32)" );

  00494	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00499	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  004a0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004a4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195340
  004ab	41 b8 0a cc 00
	00		 mov	 r8d, 52234		; 0000cc0aH
  004b1	48 8b d0	 mov	 rdx, rax
  004b4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004b8	e8 00 00 00 00	 call	 dis_fac_ins

; 3595 :     DIS_FAC_INS( CC0B, "ALSIHN  CC0B  ADD LOGICAL WITH SIGNED IMMEDIATE HIGH (32)" );

  004bd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  004c9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004cd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195341
  004d4	41 b8 0b cc 00
	00		 mov	 r8d, 52235		; 0000cc0bH
  004da	48 8b d0	 mov	 rdx, rax
  004dd	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004e1	e8 00 00 00 00	 call	 dis_fac_ins

; 3596 :     DIS_FAC_INS( CC06, "BRCTH   CC06  BRANCH RELATIVE ON COUNT HIGH (32)" );

  004e6	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  004f2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004f6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195342
  004fd	41 b8 06 cc 00
	00		 mov	 r8d, 52230		; 0000cc06H
  00503	48 8b d0	 mov	 rdx, rax
  00506	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0050a	e8 00 00 00 00	 call	 dis_fac_ins

; 3597 :     DIS_FAC_INS( B9CD, "CHHR    B9CD  COMPARE HIGH (32)" );

  0050f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0051b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0051f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195343
  00526	41 b8 cd b9 00
	00		 mov	 r8d, 47565		; 0000b9cdH
  0052c	48 8b d0	 mov	 rdx, rax
  0052f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00533	e8 00 00 00 00	 call	 dis_fac_ins

; 3598 :     DIS_FAC_INS( B9DD, "CHLR    B9DD  COMPARE HIGH (32)" );

  00538	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0053d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00544	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00548	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195344
  0054f	41 b8 dd b9 00
	00		 mov	 r8d, 47581		; 0000b9ddH
  00555	48 8b d0	 mov	 rdx, rax
  00558	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0055c	e8 00 00 00 00	 call	 dis_fac_ins

; 3599 :     DIS_FAC_INS( E3CD, "CHF     E3CD  COMPARE HIGH (32)" );

  00561	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00566	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0056d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00571	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195345
  00578	41 b8 cd e3 00
	00		 mov	 r8d, 58317		; 0000e3cdH
  0057e	48 8b d0	 mov	 rdx, rax
  00581	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00585	e8 00 00 00 00	 call	 dis_fac_ins

; 3600 :     DIS_FAC_INS( CC0D, "CIH     CC0D  COMPARE IMMEDIATE HIGH (32)" );

  0058a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0058f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00596	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0059a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195346
  005a1	41 b8 0d cc 00
	00		 mov	 r8d, 52237		; 0000cc0dH
  005a7	48 8b d0	 mov	 rdx, rax
  005aa	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005ae	e8 00 00 00 00	 call	 dis_fac_ins

; 3601 :     DIS_FAC_INS( B9CF, "CLHHR   B9CF  COMPARE LOGICAL HIGH (32)" );

  005b3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  005b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  005bf	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005c3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195347
  005ca	41 b8 cf b9 00
	00		 mov	 r8d, 47567		; 0000b9cfH
  005d0	48 8b d0	 mov	 rdx, rax
  005d3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005d7	e8 00 00 00 00	 call	 dis_fac_ins

; 3602 :     DIS_FAC_INS( B9DF, "CLHLR   B9DF  COMPARE LOGICAL HIGH (32)" );

  005dc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  005e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  005e8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005ec	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195348
  005f3	41 b8 df b9 00
	00		 mov	 r8d, 47583		; 0000b9dfH
  005f9	48 8b d0	 mov	 rdx, rax
  005fc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00600	e8 00 00 00 00	 call	 dis_fac_ins

; 3603 :     DIS_FAC_INS( E3CF, "CLHF    E3CF  COMPARE LOGICAL HIGH (32)" );

  00605	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0060a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00611	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00615	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195349
  0061c	41 b8 cf e3 00
	00		 mov	 r8d, 58319		; 0000e3cfH
  00622	48 8b d0	 mov	 rdx, rax
  00625	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00629	e8 00 00 00 00	 call	 dis_fac_ins

; 3604 :     DIS_FAC_INS( CC0F, "CLIH    CC0F  COMPARE LOGICAL IMMEDIATE HIGH (32)" );

  0062e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00633	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0063a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0063e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195350
  00645	41 b8 0f cc 00
	00		 mov	 r8d, 52239		; 0000cc0fH
  0064b	48 8b d0	 mov	 rdx, rax
  0064e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00652	e8 00 00 00 00	 call	 dis_fac_ins

; 3605 :     DIS_FAC_INS( E3C0, "LBH     E3C0  LOAD BYTE HIGH (32 <- 8)" );

  00657	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0065c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00663	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00667	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195351
  0066e	41 b8 c0 e3 00
	00		 mov	 r8d, 58304		; 0000e3c0H
  00674	48 8b d0	 mov	 rdx, rax
  00677	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0067b	e8 00 00 00 00	 call	 dis_fac_ins

; 3606 :     DIS_FAC_INS( E3C4, "LHH     E3C4  LOAD HALFWORD HIGH (32 <- 16)" );

  00680	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00685	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0068c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00690	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195352
  00697	41 b8 c4 e3 00
	00		 mov	 r8d, 58308		; 0000e3c4H
  0069d	48 8b d0	 mov	 rdx, rax
  006a0	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006a4	e8 00 00 00 00	 call	 dis_fac_ins

; 3607 :     DIS_FAC_INS( E3CA, "LFH     E3CA  LOAD HIGH (32)" );

  006a9	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  006ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  006b5	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006b9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195353
  006c0	41 b8 ca e3 00
	00		 mov	 r8d, 58314		; 0000e3caH
  006c6	48 8b d0	 mov	 rdx, rax
  006c9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006cd	e8 00 00 00 00	 call	 dis_fac_ins

; 3608 :     DIS_FAC_INS( E3C2, "LLCH    E3C2  LOAD LOGICAL CHARACTER HIGH (32 <- 8)" );

  006d2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  006d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  006de	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006e2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195354
  006e9	41 b8 c2 e3 00
	00		 mov	 r8d, 58306		; 0000e3c2H
  006ef	48 8b d0	 mov	 rdx, rax
  006f2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006f6	e8 00 00 00 00	 call	 dis_fac_ins

; 3609 :     DIS_FAC_INS( E3C6, "LLHH    E3C6  LOAD LOGICAL HALFWORD HIGH (32 <- 16)" );

  006fb	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00700	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00707	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0070b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195355
  00712	41 b8 c6 e3 00
	00		 mov	 r8d, 58310		; 0000e3c6H
  00718	48 8b d0	 mov	 rdx, rax
  0071b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0071f	e8 00 00 00 00	 call	 dis_fac_ins

; 3610 :     DIS_FAC_INS( EC5D, "RISBHG  EC5D  ROTATE THEN INSERT SELECTED BITS HIGH (64)" );

  00724	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00729	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00730	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00734	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195356
  0073b	41 b8 5d ec 00
	00		 mov	 r8d, 60509		; 0000ec5dH
  00741	48 8b d0	 mov	 rdx, rax
  00744	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00748	e8 00 00 00 00	 call	 dis_fac_ins

; 3611 :     DIS_FAC_INS( EC51, "RISBLG  EC51  ROTATE THEN INSERT SELECTED BITS LOW (64)" );

  0074d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00752	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00759	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0075d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195357
  00764	41 b8 51 ec 00
	00		 mov	 r8d, 60497		; 0000ec51H
  0076a	48 8b d0	 mov	 rdx, rax
  0076d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00771	e8 00 00 00 00	 call	 dis_fac_ins

; 3612 :     DIS_FAC_INS( E3C3, "STCH    E3C3  STORE CHARACTER HIGH (8)" );

  00776	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0077b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00782	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00786	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195358
  0078d	41 b8 c3 e3 00
	00		 mov	 r8d, 58307		; 0000e3c3H
  00793	48 8b d0	 mov	 rdx, rax
  00796	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0079a	e8 00 00 00 00	 call	 dis_fac_ins

; 3613 :     DIS_FAC_INS( E3C7, "STHH    E3C7  STORE HALFWORD HIGH (16)" );

  0079f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  007ab	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  007af	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195359
  007b6	41 b8 c7 e3 00
	00		 mov	 r8d, 58311		; 0000e3c7H
  007bc	48 8b d0	 mov	 rdx, rax
  007bf	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  007c3	e8 00 00 00 00	 call	 dis_fac_ins

; 3614 :     DIS_FAC_INS( E3CB, "STFH    E3CB  STORE HIGH (32)" );

  007c8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  007d4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  007d8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195360
  007df	41 b8 cb e3 00
	00		 mov	 r8d, 58315		; 0000e3cbH
  007e5	48 8b d0	 mov	 rdx, rax
  007e8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  007ec	e8 00 00 00 00	 call	 dis_fac_ins

; 3615 :     DIS_FAC_INS( B9C9, "SHHHR   B9C9  SUBTRACT HIGH (32)" );

  007f1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  007fd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00801	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195361
  00808	41 b8 c9 b9 00
	00		 mov	 r8d, 47561		; 0000b9c9H
  0080e	48 8b d0	 mov	 rdx, rax
  00811	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00815	e8 00 00 00 00	 call	 dis_fac_ins

; 3616 :     DIS_FAC_INS( B9D9, "SHHLR   B9D9  SUBTRACT HIGH (32)" );

  0081a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0081f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00826	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0082a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195362
  00831	41 b8 d9 b9 00
	00		 mov	 r8d, 47577		; 0000b9d9H
  00837	48 8b d0	 mov	 rdx, rax
  0083a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0083e	e8 00 00 00 00	 call	 dis_fac_ins

; 3617 :     DIS_FAC_INS( B9CB, "SLHHHR  B9CB  SUBTRACT LOGICAL HIGH (32)" );

  00843	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00848	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0084f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00853	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195363
  0085a	41 b8 cb b9 00
	00		 mov	 r8d, 47563		; 0000b9cbH
  00860	48 8b d0	 mov	 rdx, rax
  00863	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00867	e8 00 00 00 00	 call	 dis_fac_ins

; 3618 :     DIS_FAC_INS( B9DB, "SLHHLR  B9DB  SUBTRACT LOGICAL HIGH (32)" );

  0086c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00871	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00878	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0087c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195364
  00883	41 b8 db b9 00
	00		 mov	 r8d, 47579		; 0000b9dbH
  00889	48 8b d0	 mov	 rdx, rax
  0088c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00890	e8 00 00 00 00	 call	 dis_fac_ins

; 3619 : 
; 3620 :     DIS_FAC_INS( EBE8, "LAAG    EBE8  LOAD AND ADD (64)" );

  00895	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0089a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  008a1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008a5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195365
  008ac	41 b8 e8 eb 00
	00		 mov	 r8d, 60392		; 0000ebe8H
  008b2	48 8b d0	 mov	 rdx, rax
  008b5	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  008b9	e8 00 00 00 00	 call	 dis_fac_ins

; 3621 :     DIS_FAC_INS( EBF8, "LAA     EBF8  LOAD AND ADD (32)" );

  008be	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  008c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  008ca	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008ce	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195366
  008d5	41 b8 f8 eb 00
	00		 mov	 r8d, 60408		; 0000ebf8H
  008db	48 8b d0	 mov	 rdx, rax
  008de	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  008e2	e8 00 00 00 00	 call	 dis_fac_ins

; 3622 :     DIS_FAC_INS( EBEA, "LAALG   EBEA  LOAD AND ADD LOGICAL (64)" );

  008e7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  008ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  008f3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008f7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195367
  008fe	41 b8 ea eb 00
	00		 mov	 r8d, 60394		; 0000ebeaH
  00904	48 8b d0	 mov	 rdx, rax
  00907	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0090b	e8 00 00 00 00	 call	 dis_fac_ins

; 3623 :     DIS_FAC_INS( EBFA, "LAAL    EBFA  LOAD AND ADD LOGICAL (32)" );

  00910	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00915	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0091c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00920	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195368
  00927	41 b8 fa eb 00
	00		 mov	 r8d, 60410		; 0000ebfaH
  0092d	48 8b d0	 mov	 rdx, rax
  00930	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00934	e8 00 00 00 00	 call	 dis_fac_ins

; 3624 :     DIS_FAC_INS( EBE4, "LANG    EBE4  LOAD AND AND (64)" );

  00939	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0093e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00945	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00949	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195369
  00950	41 b8 e4 eb 00
	00		 mov	 r8d, 60388		; 0000ebe4H
  00956	48 8b d0	 mov	 rdx, rax
  00959	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0095d	e8 00 00 00 00	 call	 dis_fac_ins

; 3625 :     DIS_FAC_INS( EBF4, "LAN     EBF4  LOAD AND AND (32)" );

  00962	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00967	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  0096e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00972	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195370
  00979	41 b8 f4 eb 00
	00		 mov	 r8d, 60404		; 0000ebf4H
  0097f	48 8b d0	 mov	 rdx, rax
  00982	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00986	e8 00 00 00 00	 call	 dis_fac_ins

; 3626 :     DIS_FAC_INS( EBE7, "LAXG    EBE7  LOAD AND EXCLUSIVE OR (64)" );

  0098b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00990	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00997	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0099b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195371
  009a2	41 b8 e7 eb 00
	00		 mov	 r8d, 60391		; 0000ebe7H
  009a8	48 8b d0	 mov	 rdx, rax
  009ab	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  009af	e8 00 00 00 00	 call	 dis_fac_ins

; 3627 :     DIS_FAC_INS( EBF7, "LAX     EBF7  LOAD AND EXCLUSIVE OR (32)" );

  009b4	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  009b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  009c0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  009c4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195372
  009cb	41 b8 f7 eb 00
	00		 mov	 r8d, 60407		; 0000ebf7H
  009d1	48 8b d0	 mov	 rdx, rax
  009d4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  009d8	e8 00 00 00 00	 call	 dis_fac_ins

; 3628 :     DIS_FAC_INS( EBE6, "LAOG    EBE6  LOAD AND OR (64)" );

  009dd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  009e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  009e9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  009ed	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195373
  009f4	41 b8 e6 eb 00
	00		 mov	 r8d, 60390		; 0000ebe6H
  009fa	48 8b d0	 mov	 rdx, rax
  009fd	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a01	e8 00 00 00 00	 call	 dis_fac_ins

; 3629 :     DIS_FAC_INS( EBF6, "LAO     EBF6  LOAD AND OR (32)" );

  00a06	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00a12	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a16	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195374
  00a1d	41 b8 f6 eb 00
	00		 mov	 r8d, 60406		; 0000ebf6H
  00a23	48 8b d0	 mov	 rdx, rax
  00a26	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a2a	e8 00 00 00 00	 call	 dis_fac_ins

; 3630 :     DIS_FAC_INS( C804, "LPD     C804  LOAD PAIR DISJOINT (32)" );

  00a2f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00a3b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a3f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195375
  00a46	41 b8 04 c8 00
	00		 mov	 r8d, 51204		; 0000c804H
  00a4c	48 8b d0	 mov	 rdx, rax
  00a4f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a53	e8 00 00 00 00	 call	 dis_fac_ins

; 3631 :     DIS_FAC_INS( C805, "LPDG    C805  LOAD PAIR DISJOINT (64)" );

  00a58	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00a64	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a68	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195376
  00a6f	41 b8 05 c8 00
	00		 mov	 r8d, 51205		; 0000c805H
  00a75	48 8b d0	 mov	 rdx, rax
  00a78	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a7c	e8 00 00 00 00	 call	 dis_fac_ins

; 3632 : 
; 3633 :     DIS_FAC_INS( B9E2, "LOCGR   B9E2  LOAD ON CONDITION (64)" );

  00a81	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a86	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00a8d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a91	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195377
  00a98	41 b8 e2 b9 00
	00		 mov	 r8d, 47586		; 0000b9e2H
  00a9e	48 8b d0	 mov	 rdx, rax
  00aa1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00aa5	e8 00 00 00 00	 call	 dis_fac_ins

; 3634 :     DIS_FAC_INS( B9F2, "LOCR    B9F2  LOAD ON CONDITION (32)" );

  00aaa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00aaf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00ab6	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00aba	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195378
  00ac1	41 b8 f2 b9 00
	00		 mov	 r8d, 47602		; 0000b9f2H
  00ac7	48 8b d0	 mov	 rdx, rax
  00aca	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00ace	e8 00 00 00 00	 call	 dis_fac_ins

; 3635 :     DIS_FAC_INS( EBE2, "LOCG    EBE2  LOAD ON CONDITION (64)" );

  00ad3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ad8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00adf	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00ae3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195379
  00aea	41 b8 e2 eb 00
	00		 mov	 r8d, 60386		; 0000ebe2H
  00af0	48 8b d0	 mov	 rdx, rax
  00af3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00af7	e8 00 00 00 00	 call	 dis_fac_ins

; 3636 :     DIS_FAC_INS( EBF2, "LOC     EBF2  LOAD ON CONDITION (32)" );

  00afc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00b08	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b0c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195380
  00b13	41 b8 f2 eb 00
	00		 mov	 r8d, 60402		; 0000ebf2H
  00b19	48 8b d0	 mov	 rdx, rax
  00b1c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b20	e8 00 00 00 00	 call	 dis_fac_ins

; 3637 :     DIS_FAC_INS( EBE3, "STOCG   EBE3  STORE ON CONDITION (64)" );

  00b25	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00b31	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b35	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195381
  00b3c	41 b8 e3 eb 00
	00		 mov	 r8d, 60387		; 0000ebe3H
  00b42	48 8b d0	 mov	 rdx, rax
  00b45	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b49	e8 00 00 00 00	 call	 dis_fac_ins

; 3638 :     DIS_FAC_INS( EBF3, "STOC    EBF3  STORE ON CONDITION (32)" );

  00b4e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00b5a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b5e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195382
  00b65	41 b8 f3 eb 00
	00		 mov	 r8d, 60403		; 0000ebf3H
  00b6b	48 8b d0	 mov	 rdx, rax
  00b6e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b72	e8 00 00 00 00	 call	 dis_fac_ins

; 3639 : 
; 3640 :     DIS_FAC_INS( B9E1, "POPCNT  B9E1  POPULATION COUNT" );

  00b77	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr45@@9@9
  00b83	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b87	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195383
  00b8e	41 b8 e1 b9 00
	00		 mov	 r8d, 47585		; 0000b9e1H
  00b94	48 8b d0	 mov	 rdx, rax
  00b97	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b9b	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr45:
$LN3@instr45:

; 3641 : }
; 3642 : END_DIS_FAC_INS_FUNC()

  00ba0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00ba4	c3		 ret	 0
instr45	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr44	PROC

; 3556 : BEG_DIS_FAC_INS_FUNC( instr44 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr44
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr44@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr44
$LN2@instr44:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr44@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr44

; 3557 : {
; 3558 :     DIS_FAC_INS( 010A, "PFPO    010A  PERFORM FLOATING-POINT OPERATION" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr44@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195302
  00051	41 b8 0a 01 00
	00		 mov	 r8d, 266		; 0000010aH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr44:
$LN3@instr44:

; 3559 : }
; 3560 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr44	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr42	PROC

; 3495 : BEG_DIS_FAC_INS_FUNC( instr42 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr42
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 bd 08 00 00	 jmp	 $LN3@instr42
$LN2@instr42:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 a6 08 00
	00		 jne	 $LN4@instr42

; 3496 : {
; 3497 :     DIS_FAC_INS( B3D2, "ADTRA   B3D2  ADD (long DFP)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195238
  00058	41 b8 d2 b3 00
	00		 mov	 r8d, 46034		; 0000b3d2H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3498 :     DIS_FAC_INS( B3DA, "AXTRA   B3DA  ADD (extended DFP)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195239
  00081	41 b8 da b3 00
	00		 mov	 r8d, 46042		; 0000b3daH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3499 :     DIS_FAC_INS( B3E4, "CDTR    B3E4  COMPARE (long DFP)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195240
  000aa	41 b8 e4 b3 00
	00		 mov	 r8d, 46052		; 0000b3e4H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3500 :     DIS_FAC_INS( B3EC, "CXTR    B3EC  COMPARE (extended DFP)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195241
  000d3	41 b8 ec b3 00
	00		 mov	 r8d, 46060		; 0000b3ecH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3501 :     DIS_FAC_INS( B3E0, "KDTR    B3E0  COMPARE AND SIGNAL (long DFP)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195242
  000fc	41 b8 e0 b3 00
	00		 mov	 r8d, 46048		; 0000b3e0H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3502 :     DIS_FAC_INS( B3E8, "KXTR    B3E8  COMPARE AND SIGNAL (extended DFP)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195243
  00125	41 b8 e8 b3 00
	00		 mov	 r8d, 46056		; 0000b3e8H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3503 :     DIS_FAC_INS( B3F4, "CEDTR   B3F4  COMPARE BIASED EXPONENT (long DFP)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195244
  0014e	41 b8 f4 b3 00
	00		 mov	 r8d, 46068		; 0000b3f4H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3504 :     DIS_FAC_INS( B3FC, "CEXTR   B3FC  COMPARE BIASED EXPONENT (extended DFP)" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195245
  00177	41 b8 fc b3 00
	00		 mov	 r8d, 46076		; 0000b3fcH
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3505 :     DIS_FAC_INS( B3F1, "CDGTRA  B3F1  CONVERT FROM FIXED (64 to long DFP)" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195246
  001a0	41 b8 f1 b3 00
	00		 mov	 r8d, 46065		; 0000b3f1H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3506 :     DIS_FAC_INS( B3F9, "CXGTRA  B3F9  CONVERT FROM FIXED (64 to extended DFP)" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195247
  001c9	41 b8 f9 b3 00
	00		 mov	 r8d, 46073		; 0000b3f9H
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 3507 :     DIS_FAC_INS( B3F3, "CDSTR   B3F3  CONVERT FROM SIGNED PACKED (64 to long DFP)" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195248
  001f2	41 b8 f3 b3 00
	00		 mov	 r8d, 46067		; 0000b3f3H
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 3508 :     DIS_FAC_INS( B3FB, "CXSTR   B3FB  CONVERT FROM SIGNED PACKED (128 to extended DFP)" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195249
  0021b	41 b8 fb b3 00
	00		 mov	 r8d, 46075		; 0000b3fbH
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins

; 3509 :     DIS_FAC_INS( B3F2, "CDUTR   B3F2  CONVERT FROM UNSIGNED PACKED (64 to long DFP)" );

  0022d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00239	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0023d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195250
  00244	41 b8 f2 b3 00
	00		 mov	 r8d, 46066		; 0000b3f2H
  0024a	48 8b d0	 mov	 rdx, rax
  0024d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00251	e8 00 00 00 00	 call	 dis_fac_ins

; 3510 :     DIS_FAC_INS( B3FA, "CXUTR   B3FA  CONVERT FROM UNSIGNED PACKED (128 to ext. DFP)" );

  00256	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00262	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00266	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195251
  0026d	41 b8 fa b3 00
	00		 mov	 r8d, 46074		; 0000b3faH
  00273	48 8b d0	 mov	 rdx, rax
  00276	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0027a	e8 00 00 00 00	 call	 dis_fac_ins

; 3511 :     DIS_FAC_INS( B3E1, "CGDTRA  B3E1  CONVERT TO FIXED (long DFP to 64)" );

  0027f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0028b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0028f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195252
  00296	41 b8 e1 b3 00
	00		 mov	 r8d, 46049		; 0000b3e1H
  0029c	48 8b d0	 mov	 rdx, rax
  0029f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002a3	e8 00 00 00 00	 call	 dis_fac_ins

; 3512 :     DIS_FAC_INS( B3E9, "CGXTRA  B3E9  CONVERT TO FIXED (extended DFP to 64)" );

  002a8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  002b4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002b8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195253
  002bf	41 b8 e9 b3 00
	00		 mov	 r8d, 46057		; 0000b3e9H
  002c5	48 8b d0	 mov	 rdx, rax
  002c8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002cc	e8 00 00 00 00	 call	 dis_fac_ins

; 3513 :     DIS_FAC_INS( B3E3, "CSDTR   B3E3  CONVERT TO SIGNED PACKED (long DFP to 64)" );

  002d1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  002dd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002e1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195254
  002e8	41 b8 e3 b3 00
	00		 mov	 r8d, 46051		; 0000b3e3H
  002ee	48 8b d0	 mov	 rdx, rax
  002f1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002f5	e8 00 00 00 00	 call	 dis_fac_ins

; 3514 :     DIS_FAC_INS( B3EB, "CSXTR   B3EB  CONVERT TO SIGNED PACKED (extended DFP to128)" );

  002fa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00306	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0030a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195255
  00311	41 b8 eb b3 00
	00		 mov	 r8d, 46059		; 0000b3ebH
  00317	48 8b d0	 mov	 rdx, rax
  0031a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0031e	e8 00 00 00 00	 call	 dis_fac_ins

; 3515 :     DIS_FAC_INS( B3E2, "CUDTR   B3E2  CONVERT TO UNSIGNED PACKED (long DFP to64)" );

  00323	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0032f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00333	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195256
  0033a	41 b8 e2 b3 00
	00		 mov	 r8d, 46050		; 0000b3e2H
  00340	48 8b d0	 mov	 rdx, rax
  00343	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00347	e8 00 00 00 00	 call	 dis_fac_ins

; 3516 :     DIS_FAC_INS( B3EA, "CUXTR   B3EA  CONVERT TO UNSIGNED PACKED (extended DFP to 128)" );

  0034c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00358	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0035c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195257
  00363	41 b8 ea b3 00
	00		 mov	 r8d, 46058		; 0000b3eaH
  00369	48 8b d0	 mov	 rdx, rax
  0036c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00370	e8 00 00 00 00	 call	 dis_fac_ins

; 3517 :     DIS_FAC_INS( B3D1, "DDTRA   B3D1  DIVIDE (long DFP)" );

  00375	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00381	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00385	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195258
  0038c	41 b8 d1 b3 00
	00		 mov	 r8d, 46033		; 0000b3d1H
  00392	48 8b d0	 mov	 rdx, rax
  00395	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00399	e8 00 00 00 00	 call	 dis_fac_ins

; 3518 :     DIS_FAC_INS( B3D9, "DXTRA   B3D9  DIVIDE (extended DFP)" );

  0039e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  003aa	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195259
  003b5	41 b8 d9 b3 00
	00		 mov	 r8d, 46041		; 0000b3d9H
  003bb	48 8b d0	 mov	 rdx, rax
  003be	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003c2	e8 00 00 00 00	 call	 dis_fac_ins

; 3519 :     DIS_FAC_INS( B3E5, "EEDTR   B3E5  EXTRACT BIASED EXPONENT (long DFP to 64)" );

  003c7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  003d3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195260
  003de	41 b8 e5 b3 00
	00		 mov	 r8d, 46053		; 0000b3e5H
  003e4	48 8b d0	 mov	 rdx, rax
  003e7	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003eb	e8 00 00 00 00	 call	 dis_fac_ins

; 3520 :     DIS_FAC_INS( B3ED, "EEXTR   B3ED  EXTRACT BIASED EXPONENT (extended DFP to64)" );

  003f0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  003fc	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00400	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195261
  00407	41 b8 ed b3 00
	00		 mov	 r8d, 46061		; 0000b3edH
  0040d	48 8b d0	 mov	 rdx, rax
  00410	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00414	e8 00 00 00 00	 call	 dis_fac_ins

; 3521 :     DIS_FAC_INS( B3E7, "ESDTR   B3E7  EXTRACT SIGNIFICANCE (long DFP to 64)" );

  00419	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0041e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00425	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00429	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195262
  00430	41 b8 e7 b3 00
	00		 mov	 r8d, 46055		; 0000b3e7H
  00436	48 8b d0	 mov	 rdx, rax
  00439	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0043d	e8 00 00 00 00	 call	 dis_fac_ins

; 3522 :     DIS_FAC_INS( B3EF, "ESXTR   B3EF  EXTRACT SIGNIFICANCE (extended DFP to 64)" );

  00442	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00447	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0044e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00452	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195263
  00459	41 b8 ef b3 00
	00		 mov	 r8d, 46063		; 0000b3efH
  0045f	48 8b d0	 mov	 rdx, rax
  00462	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00466	e8 00 00 00 00	 call	 dis_fac_ins

; 3523 :     DIS_FAC_INS( B3F6, "IEDTR   B3F6  INSERT BIASED EXPONENT (64 to long DFP)" );

  0046b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00470	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00477	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0047b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195264
  00482	41 b8 f6 b3 00
	00		 mov	 r8d, 46070		; 0000b3f6H
  00488	48 8b d0	 mov	 rdx, rax
  0048b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0048f	e8 00 00 00 00	 call	 dis_fac_ins

; 3524 :     DIS_FAC_INS( B3FE, "IEXTR   B3FE  INSERT BIASED EXPONENT (64 to extended DFP)" );

  00494	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00499	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  004a0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004a4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195265
  004ab	41 b8 fe b3 00
	00		 mov	 r8d, 46078		; 0000b3feH
  004b1	48 8b d0	 mov	 rdx, rax
  004b4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004b8	e8 00 00 00 00	 call	 dis_fac_ins

; 3525 :     DIS_FAC_INS( B3D6, "LTDTR   B3D6  LOAD AND TEST (long DFP)" );

  004bd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  004c9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004cd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195266
  004d4	41 b8 d6 b3 00
	00		 mov	 r8d, 46038		; 0000b3d6H
  004da	48 8b d0	 mov	 rdx, rax
  004dd	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004e1	e8 00 00 00 00	 call	 dis_fac_ins

; 3526 :     DIS_FAC_INS( B3DE, "LTXTR   B3DE  LOAD AND TEST (extended DFP)" );

  004e6	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  004f2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004f6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195267
  004fd	41 b8 de b3 00
	00		 mov	 r8d, 46046		; 0000b3deH
  00503	48 8b d0	 mov	 rdx, rax
  00506	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0050a	e8 00 00 00 00	 call	 dis_fac_ins

; 3527 :     DIS_FAC_INS( B3D7, "FIDTR   B3D7  LOAD FP INTEGER (long DFP)" );

  0050f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0051b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0051f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195268
  00526	41 b8 d7 b3 00
	00		 mov	 r8d, 46039		; 0000b3d7H
  0052c	48 8b d0	 mov	 rdx, rax
  0052f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00533	e8 00 00 00 00	 call	 dis_fac_ins

; 3528 :     DIS_FAC_INS( B3DF, "FIXTR   B3DF  LOAD FP INTEGER (extended DFP)" );

  00538	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0053d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00544	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00548	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195269
  0054f	41 b8 df b3 00
	00		 mov	 r8d, 46047		; 0000b3dfH
  00555	48 8b d0	 mov	 rdx, rax
  00558	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0055c	e8 00 00 00 00	 call	 dis_fac_ins

; 3529 :     DIS_FAC_INS( B3D4, "LDETR   B3D4  LOAD LENGTHENED (short to long DFP)" );

  00561	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00566	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0056d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00571	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195270
  00578	41 b8 d4 b3 00
	00		 mov	 r8d, 46036		; 0000b3d4H
  0057e	48 8b d0	 mov	 rdx, rax
  00581	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00585	e8 00 00 00 00	 call	 dis_fac_ins

; 3530 :     DIS_FAC_INS( B3DC, "LXDTR   B3DC  LOAD LENGTHENED (long to extended DFP)" );

  0058a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0058f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00596	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0059a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195271
  005a1	41 b8 dc b3 00
	00		 mov	 r8d, 46044		; 0000b3dcH
  005a7	48 8b d0	 mov	 rdx, rax
  005aa	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005ae	e8 00 00 00 00	 call	 dis_fac_ins

; 3531 :     DIS_FAC_INS( B3D5, "LEDTR   B3D5  LOAD ROUNDED (long to short DFP)" );

  005b3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  005b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  005bf	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005c3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195272
  005ca	41 b8 d5 b3 00
	00		 mov	 r8d, 46037		; 0000b3d5H
  005d0	48 8b d0	 mov	 rdx, rax
  005d3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005d7	e8 00 00 00 00	 call	 dis_fac_ins

; 3532 :     DIS_FAC_INS( B3DD, "LDXTR   B3DD  LOAD ROUNDED (extended to long DFP)" );

  005dc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  005e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  005e8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005ec	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195273
  005f3	41 b8 dd b3 00
	00		 mov	 r8d, 46045		; 0000b3ddH
  005f9	48 8b d0	 mov	 rdx, rax
  005fc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00600	e8 00 00 00 00	 call	 dis_fac_ins

; 3533 :     DIS_FAC_INS( B3D0, "MDTRA   B3D0  MULTIPLY (long DFP)" );

  00605	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0060a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00611	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00615	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195274
  0061c	41 b8 d0 b3 00
	00		 mov	 r8d, 46032		; 0000b3d0H
  00622	48 8b d0	 mov	 rdx, rax
  00625	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00629	e8 00 00 00 00	 call	 dis_fac_ins

; 3534 :     DIS_FAC_INS( B3D8, "MXTRA   B3D8  MULTIPLY (extended DFP)" );

  0062e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00633	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0063a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0063e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195275
  00645	41 b8 d8 b3 00
	00		 mov	 r8d, 46040		; 0000b3d8H
  0064b	48 8b d0	 mov	 rdx, rax
  0064e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00652	e8 00 00 00 00	 call	 dis_fac_ins

; 3535 :     DIS_FAC_INS( B3F5, "QADTR   B3F5  QUANTIZE (long DFP)" );

  00657	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0065c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00663	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00667	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195276
  0066e	41 b8 f5 b3 00
	00		 mov	 r8d, 46069		; 0000b3f5H
  00674	48 8b d0	 mov	 rdx, rax
  00677	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0067b	e8 00 00 00 00	 call	 dis_fac_ins

; 3536 :     DIS_FAC_INS( B3FD, "QAXTR   B3FD  QUANTIZE (extended DFP)" );

  00680	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00685	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0068c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00690	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195277
  00697	41 b8 fd b3 00
	00		 mov	 r8d, 46077		; 0000b3fdH
  0069d	48 8b d0	 mov	 rdx, rax
  006a0	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006a4	e8 00 00 00 00	 call	 dis_fac_ins

; 3537 :     DIS_FAC_INS( B3F7, "RRDTR   B3F7  REROUND (long DFP)" );

  006a9	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  006ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  006b5	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006b9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195278
  006c0	41 b8 f7 b3 00
	00		 mov	 r8d, 46071		; 0000b3f7H
  006c6	48 8b d0	 mov	 rdx, rax
  006c9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006cd	e8 00 00 00 00	 call	 dis_fac_ins

; 3538 :     DIS_FAC_INS( B3FF, "RRXTR   B3FF  REROUND (extended DFP)" );

  006d2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  006d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  006de	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006e2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195279
  006e9	41 b8 ff b3 00
	00		 mov	 r8d, 46079		; 0000b3ffH
  006ef	48 8b d0	 mov	 rdx, rax
  006f2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006f6	e8 00 00 00 00	 call	 dis_fac_ins

; 3539 :     DIS_FAC_INS( ED40, "SLDT    ED40  SHIFT SIGNIFICAND LEFT (long DFP)" );

  006fb	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00700	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00707	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0070b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195280
  00712	41 b8 40 ed 00
	00		 mov	 r8d, 60736		; 0000ed40H
  00718	48 8b d0	 mov	 rdx, rax
  0071b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0071f	e8 00 00 00 00	 call	 dis_fac_ins

; 3540 :     DIS_FAC_INS( ED48, "SLXT    ED48  SHIFT SIGNIFICAND LEFT (extended DFP)" );

  00724	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00729	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00730	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00734	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195281
  0073b	41 b8 48 ed 00
	00		 mov	 r8d, 60744		; 0000ed48H
  00741	48 8b d0	 mov	 rdx, rax
  00744	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00748	e8 00 00 00 00	 call	 dis_fac_ins

; 3541 :     DIS_FAC_INS( ED41, "SRDT    ED41  SHIFT SIGNIFICAND RIGHT (long DFP)" );

  0074d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00752	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00759	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0075d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195282
  00764	41 b8 41 ed 00
	00		 mov	 r8d, 60737		; 0000ed41H
  0076a	48 8b d0	 mov	 rdx, rax
  0076d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00771	e8 00 00 00 00	 call	 dis_fac_ins

; 3542 :     DIS_FAC_INS( ED49, "SRXT    ED49  SHIFT SIGNIFICAND RIGHT (extended DFP)" );

  00776	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0077b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00782	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00786	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195283
  0078d	41 b8 49 ed 00
	00		 mov	 r8d, 60745		; 0000ed49H
  00793	48 8b d0	 mov	 rdx, rax
  00796	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0079a	e8 00 00 00 00	 call	 dis_fac_ins

; 3543 :     DIS_FAC_INS( B3D3, "SDTRA   B3D3  SUBTRACT (long DFP)" );

  0079f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  007ab	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  007af	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195284
  007b6	41 b8 d3 b3 00
	00		 mov	 r8d, 46035		; 0000b3d3H
  007bc	48 8b d0	 mov	 rdx, rax
  007bf	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  007c3	e8 00 00 00 00	 call	 dis_fac_ins

; 3544 :     DIS_FAC_INS( B3DB, "SXTRA   B3DB  SUBTRACT (extended DFP)" );

  007c8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  007d4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  007d8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195285
  007df	41 b8 db b3 00
	00		 mov	 r8d, 46043		; 0000b3dbH
  007e5	48 8b d0	 mov	 rdx, rax
  007e8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  007ec	e8 00 00 00 00	 call	 dis_fac_ins

; 3545 :     DIS_FAC_INS( ED50, "TDCET   ED50  TEST DATA CLASS (short DFP)" );

  007f1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  007fd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00801	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195286
  00808	41 b8 50 ed 00
	00		 mov	 r8d, 60752		; 0000ed50H
  0080e	48 8b d0	 mov	 rdx, rax
  00811	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00815	e8 00 00 00 00	 call	 dis_fac_ins

; 3546 :     DIS_FAC_INS( ED54, "TDCDT   ED54  TEST DATA CLASS (long DFP)" );

  0081a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0081f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00826	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0082a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195287
  00831	41 b8 54 ed 00
	00		 mov	 r8d, 60756		; 0000ed54H
  00837	48 8b d0	 mov	 rdx, rax
  0083a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0083e	e8 00 00 00 00	 call	 dis_fac_ins

; 3547 :     DIS_FAC_INS( ED58, "TDCXT   ED58  TEST DATA CLASS (extended DFP)" );

  00843	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00848	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  0084f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00853	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195288
  0085a	41 b8 58 ed 00
	00		 mov	 r8d, 60760		; 0000ed58H
  00860	48 8b d0	 mov	 rdx, rax
  00863	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00867	e8 00 00 00 00	 call	 dis_fac_ins

; 3548 :     DIS_FAC_INS( ED51, "TDGET   ED51  TEST DATA GROUP (short DFP)" );

  0086c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00871	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  00878	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0087c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195289
  00883	41 b8 51 ed 00
	00		 mov	 r8d, 60753		; 0000ed51H
  00889	48 8b d0	 mov	 rdx, rax
  0088c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00890	e8 00 00 00 00	 call	 dis_fac_ins

; 3549 :     DIS_FAC_INS( ED55, "TDGDT   ED55  TEST DATA GROUP (long DFP)" );

  00895	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0089a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  008a1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008a5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195290
  008ac	41 b8 55 ed 00
	00		 mov	 r8d, 60757		; 0000ed55H
  008b2	48 8b d0	 mov	 rdx, rax
  008b5	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  008b9	e8 00 00 00 00	 call	 dis_fac_ins

; 3550 :     DIS_FAC_INS( ED59, "TDGXT   ED59  TEST DATA GROUP (extended DFP)" );

  008be	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  008c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr42@@9@9
  008ca	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008ce	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195291
  008d5	41 b8 59 ed 00
	00		 mov	 r8d, 60761		; 0000ed59H
  008db	48 8b d0	 mov	 rdx, rax
  008de	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  008e2	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr42:
$LN3@instr42:

; 3551 : }
; 3552 : END_DIS_FAC_INS_FUNC()

  008e7	48 83 c4 28	 add	 rsp, 40			; 00000028H
  008eb	c3		 ret	 0
instr42	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr41	PROC

; 3476 : BEG_DIS_FAC_INS_FUNC( instr41 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr41
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr41@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 88 01 00 00	 jmp	 $LN3@instr41
$LN2@instr41:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr41@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 71 01 00
	00		 jne	 $LN4@instr41

; 3477 : {
; 3478 :     DIS_FAC_INS( B2B9, "SRNMT   B2B9  SET DFP ROUNDING MODE" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr41@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195219
  00058	41 b8 b9 b2 00
	00		 mov	 r8d, 45753		; 0000b2b9H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3479 : 
; 3480 :     DIS_FAC_INS( B3C1, "LDGR    B3C1  LOAD FPR FROM GR (64 to long)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr41@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195220
  00081	41 b8 c1 b3 00
	00		 mov	 r8d, 46017		; 0000b3c1H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3481 :     DIS_FAC_INS( B3CD, "LGDR    B3CD  LOAD GR FROM FPR (long to 64)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr41@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195221
  000aa	41 b8 cd b3 00
	00		 mov	 r8d, 46029		; 0000b3cdH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3482 : 
; 3483 :     DIS_FAC_INS( B372, "CPSDR   B372  COPY SIGN (long)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr41@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195222
  000d3	41 b8 72 b3 00
	00		 mov	 r8d, 45938		; 0000b372H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3484 :     DIS_FAC_INS( B373, "LCDFR   B373  LOAD COMPLEMENT (long)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr41@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195223
  000fc	41 b8 73 b3 00
	00		 mov	 r8d, 45939		; 0000b373H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3485 :     DIS_FAC_INS( B371, "LNDFR   B371  LOAD NEGATIVE (long)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr41@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195224
  00125	41 b8 71 b3 00
	00		 mov	 r8d, 45937		; 0000b371H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3486 :     DIS_FAC_INS( B370, "LPDFR   B370  LOAD POSITIVE (long)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr41@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195225
  0014e	41 b8 70 b3 00
	00		 mov	 r8d, 45936		; 0000b370H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3487 : 
; 3488 :     DIS_FAC_INS( B2BD, "LFAS    B2BD  LOAD FPC AND SIGNAL" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr41@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195226
  00177	41 b8 bd b2 00
	00		 mov	 r8d, 45757		; 0000b2bdH
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3489 :     DIS_FAC_INS( B385, "SFASR   B385  SET FPC AND SIGNAL" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr41@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195227
  001a0	41 b8 85 b3 00
	00		 mov	 r8d, 45957		; 0000b385H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr41:
$LN3@instr41:

; 3490 : }
; 3491 : END_DIS_FAC_INS_FUNC()

  001b2	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001b6	c3		 ret	 0
instr41	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr40	PROC

; 3468 : BEG_DIS_FAC_INS_FUNC( instr40 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr40
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr40@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr40
$LN2@instr40:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr40@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr40

; 3469 : {
; 3470 :     DIS_FAC_INS( B280, "LPP     B280  LOAD PROGRAM PARAMETER" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr40@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195208
  00051	41 b8 80 b2 00
	00		 mov	 r8d, 45696		; 0000b280H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr40:
$LN3@instr40:

; 3471 : }
; 3472 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr40	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr37	PROC

; 3436 : BEG_DIS_FAC_INS_FUNC( instr37 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr37
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 18 04 00 00	 jmp	 $LN3@instr37
$LN2@instr37:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 01 04 00
	00		 jne	 $LN4@instr37

; 3437 : {
; 3438 :     DIS_FAC_INS( B951, "CDFTR   B951  CONVERT FROM FIXED (32 to long DFP)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195173
  00058	41 b8 51 b9 00
	00		 mov	 r8d, 47441		; 0000b951H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3439 :     DIS_FAC_INS( B959, "CXFTR   B959  CONVERT FROM FIXED (32 to extended DFP)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195174
  00081	41 b8 59 b9 00
	00		 mov	 r8d, 47449		; 0000b959H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3440 :     DIS_FAC_INS( B390, "CELFBR  B390  CONVERT FROM LOGICAL (32 to short BFP)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195175
  000aa	41 b8 90 b3 00
	00		 mov	 r8d, 45968		; 0000b390H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3441 :     DIS_FAC_INS( B391, "CDLFBR  B391  CONVERT FROM LOGICAL (32 to long BFP)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195176
  000d3	41 b8 91 b3 00
	00		 mov	 r8d, 45969		; 0000b391H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3442 :     DIS_FAC_INS( B392, "CXLFBR  B392  CONVERT FROM LOGICAL (32 to extended BFP)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195177
  000fc	41 b8 92 b3 00
	00		 mov	 r8d, 45970		; 0000b392H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3443 :     DIS_FAC_INS( B3A0, "CELGBR  B3A0  CONVERT FROM LOGICAL (64 to short BFP)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195178
  00125	41 b8 a0 b3 00
	00		 mov	 r8d, 45984		; 0000b3a0H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3444 :     DIS_FAC_INS( B3A1, "CDLGBR  B3A1  CONVERT FROM LOGICAL (64 to long BFP)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195179
  0014e	41 b8 a1 b3 00
	00		 mov	 r8d, 45985		; 0000b3a1H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3445 :     DIS_FAC_INS( B3A2, "CXLGBR  B3A2  CONVERT FROM LOGICAL (64 to extended BFP)" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195180
  00177	41 b8 a2 b3 00
	00		 mov	 r8d, 45986		; 0000b3a2H
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3446 :     DIS_FAC_INS( B952, "CDLGTR  B952  CONVERT FROM LOGICAL (64 to long DFP)" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195181
  001a0	41 b8 52 b9 00
	00		 mov	 r8d, 47442		; 0000b952H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3447 :     DIS_FAC_INS( B953, "CDLFTR  B953  CONVERT FROM LOGICAL (32 to long DFP)" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195182
  001c9	41 b8 53 b9 00
	00		 mov	 r8d, 47443		; 0000b953H
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 3448 :     DIS_FAC_INS( B95A, "CXLGTR  B95A  CONVERT FROM LOGICAL (64 to extended DFP)" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195183
  001f2	41 b8 5a b9 00
	00		 mov	 r8d, 47450		; 0000b95aH
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 3449 :     DIS_FAC_INS( B95B, "CXLFTR  B95B  CONVERT FROM LOGICAL (32 to extended DFP)" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195184
  0021b	41 b8 5b b9 00
	00		 mov	 r8d, 47451		; 0000b95bH
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins

; 3450 :     DIS_FAC_INS( B941, "CFDTR   B941  CONVERT TO FIXED (long DFP to 32)" );

  0022d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  00239	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0023d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195185
  00244	41 b8 41 b9 00
	00		 mov	 r8d, 47425		; 0000b941H
  0024a	48 8b d0	 mov	 rdx, rax
  0024d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00251	e8 00 00 00 00	 call	 dis_fac_ins

; 3451 :     DIS_FAC_INS( B949, "CFXTR   B949  CONVERT TO FIXED (extended DFP to 32)" );

  00256	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  00262	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00266	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195186
  0026d	41 b8 49 b9 00
	00		 mov	 r8d, 47433		; 0000b949H
  00273	48 8b d0	 mov	 rdx, rax
  00276	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0027a	e8 00 00 00 00	 call	 dis_fac_ins

; 3452 :     DIS_FAC_INS( B39C, "CLFEBR  B39C  CONVERT TO LOGICAL (short BFP to 32)" );

  0027f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  0028b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0028f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195187
  00296	41 b8 9c b3 00
	00		 mov	 r8d, 45980		; 0000b39cH
  0029c	48 8b d0	 mov	 rdx, rax
  0029f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002a3	e8 00 00 00 00	 call	 dis_fac_ins

; 3453 :     DIS_FAC_INS( B39D, "CLFDBR  B39D  CONVERT TO LOGICAL (long BFP to 32)" );

  002a8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  002b4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002b8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195188
  002bf	41 b8 9d b3 00
	00		 mov	 r8d, 45981		; 0000b39dH
  002c5	48 8b d0	 mov	 rdx, rax
  002c8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002cc	e8 00 00 00 00	 call	 dis_fac_ins

; 3454 :     DIS_FAC_INS( B39E, "CLFXBR  B39E  CONVERT TO LOGICAL (extended BFP to 32)" );

  002d1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  002dd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002e1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195189
  002e8	41 b8 9e b3 00
	00		 mov	 r8d, 45982		; 0000b39eH
  002ee	48 8b d0	 mov	 rdx, rax
  002f1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002f5	e8 00 00 00 00	 call	 dis_fac_ins

; 3455 :     DIS_FAC_INS( B3AC, "CLGEBR  B3AC  CONVERT TO LOGICAL (short BFP to 64)" );

  002fa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  00306	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0030a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195190
  00311	41 b8 ac b3 00
	00		 mov	 r8d, 45996		; 0000b3acH
  00317	48 8b d0	 mov	 rdx, rax
  0031a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0031e	e8 00 00 00 00	 call	 dis_fac_ins

; 3456 :     DIS_FAC_INS( B3AD, "CLGDBR  B3AD  CONVERT TO LOGICAL (long BFP to 64)" );

  00323	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  0032f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00333	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195191
  0033a	41 b8 ad b3 00
	00		 mov	 r8d, 45997		; 0000b3adH
  00340	48 8b d0	 mov	 rdx, rax
  00343	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00347	e8 00 00 00 00	 call	 dis_fac_ins

; 3457 :     DIS_FAC_INS( B3AE, "CLGXBR  B3AE  CONVERT TO LOGICAL (extended BFP to 64)" );

  0034c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  00358	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0035c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195192
  00363	41 b8 ae b3 00
	00		 mov	 r8d, 45998		; 0000b3aeH
  00369	48 8b d0	 mov	 rdx, rax
  0036c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00370	e8 00 00 00 00	 call	 dis_fac_ins

; 3458 :     DIS_FAC_INS( B942, "CLGDTR  B942  CONVERT TO LOGICAL (long DFP to 64)" );

  00375	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  00381	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00385	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195193
  0038c	41 b8 42 b9 00
	00		 mov	 r8d, 47426		; 0000b942H
  00392	48 8b d0	 mov	 rdx, rax
  00395	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00399	e8 00 00 00 00	 call	 dis_fac_ins

; 3459 :     DIS_FAC_INS( B943, "CLFDTR  B943  CONVERT TO LOGICAL (long DFP to 32)" );

  0039e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  003aa	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195194
  003b5	41 b8 43 b9 00
	00		 mov	 r8d, 47427		; 0000b943H
  003bb	48 8b d0	 mov	 rdx, rax
  003be	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003c2	e8 00 00 00 00	 call	 dis_fac_ins

; 3460 :     DIS_FAC_INS( B94A, "CLGXTR  B94A  CONVERT TO LOGICAL (extended DFP to 64)" );

  003c7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  003d3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195195
  003de	41 b8 4a b9 00
	00		 mov	 r8d, 47434		; 0000b94aH
  003e4	48 8b d0	 mov	 rdx, rax
  003e7	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003eb	e8 00 00 00 00	 call	 dis_fac_ins

; 3461 :     DIS_FAC_INS( B94B, "CLFXTR  B94B  CONVERT TO LOGICAL (extended DFP to 32)" );

  003f0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  003fc	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00400	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195196
  00407	41 b8 4b b9 00
	00		 mov	 r8d, 47435		; 0000b94bH
  0040d	48 8b d0	 mov	 rdx, rax
  00410	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00414	e8 00 00 00 00	 call	 dis_fac_ins

; 3462 :     DIS_FAC_INS( B2B8, "SRNMB   B2B8  SET BFP ROUNDING MODE (3 bit)" );

  00419	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0041e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr37@@9@9
  00425	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00429	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195197
  00430	41 b8 b8 b2 00
	00		 mov	 r8d, 45752		; 0000b2b8H
  00436	48 8b d0	 mov	 rdx, rax
  00439	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0043d	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr37:
$LN3@instr37:

; 3463 : }
; 3464 : END_DIS_FAC_INS_FUNC()

  00442	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00446	c3		 ret	 0
instr37	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr35	PROC

; 3428 : BEG_DIS_FAC_INS_FUNC( instr35 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr35
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr35@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr35
$LN2@instr35:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr35@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr35

; 3429 : {
; 3430 :     DIS_FAC_INS( C600, "EXRL    C600  EXECUTE RELATIVE LONG" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr35@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195162
  00051	41 b8 00 c6 00
	00		 mov	 r8d, 50688		; 0000c600H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr35:
$LN3@instr35:

; 3431 : }
; 3432 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr35	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr34	PROC

; 3349 : BEG_DIS_FAC_INS_FUNC( instr34 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr34
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 9f 0b 00 00	 jmp	 $LN3@instr34
$LN2@instr34:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 88 0b 00
	00		 jne	 $LN4@instr34

; 3350 : {
; 3351 :     DIS_FAC_INS( EB6A, "ASI     EB6A  ADD IMMEDIATE (32 <- 8)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195080
  00058	41 b8 6a eb 00
	00		 mov	 r8d, 60266		; 0000eb6aH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3352 :     DIS_FAC_INS( EB7A, "AGSI    EB7A  ADD IMMEDIATE (64 <- 8)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195081
  00081	41 b8 7a eb 00
	00		 mov	 r8d, 60282		; 0000eb7aH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3353 :     DIS_FAC_INS( EB6E, "ALSI    EB6E  ADD LOGICAL WITH SIGNED IMMEDIATE (32 <- 8)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195082
  000aa	41 b8 6e eb 00
	00		 mov	 r8d, 60270		; 0000eb6eH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3354 :     DIS_FAC_INS( EB7E, "ALGSI   EB7E  ADD LOGICAL WITH SIGNED IMMEDIATE (64 <- 8)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195083
  000d3	41 b8 7e eb 00
	00		 mov	 r8d, 60286		; 0000eb7eH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3355 :     DIS_FAC_INS( ECE4, "CGRB    ECE4  COMPARE AND BRANCH (64)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195084
  000fc	41 b8 e4 ec 00
	00		 mov	 r8d, 60644		; 0000ece4H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3356 :     DIS_FAC_INS( ECF6, "CRB     ECF6  COMPARE AND BRANCH (32)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195085
  00125	41 b8 f6 ec 00
	00		 mov	 r8d, 60662		; 0000ecf6H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3357 :     DIS_FAC_INS( EC64, "CGRJ    EC64  COMPARE AND BRANCH RELATIVE (64)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195086
  0014e	41 b8 64 ec 00
	00		 mov	 r8d, 60516		; 0000ec64H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3358 :     DIS_FAC_INS( EC76, "CRJ     EC76  COMPARE AND BRANCH RELATIVE (32)" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195087
  00177	41 b8 76 ec 00
	00		 mov	 r8d, 60534		; 0000ec76H
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3359 :     DIS_FAC_INS( B960, "CGRT    B960  COMPARE AND TRAP (64)" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195088
  001a0	41 b8 60 b9 00
	00		 mov	 r8d, 47456		; 0000b960H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3360 :     DIS_FAC_INS( B972, "CRT     B972  COMPARE AND TRAP (32)" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195089
  001c9	41 b8 72 b9 00
	00		 mov	 r8d, 47474		; 0000b972H
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 3361 :     DIS_FAC_INS( E334, "CGH     E334  COMPARE HALFWORD (64 <- 16)" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195090
  001f2	41 b8 34 e3 00
	00		 mov	 r8d, 58164		; 0000e334H
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 3362 :     DIS_FAC_INS( E554, "CHHSI   E554  COMPARE HALFWORD IMMEDIATE (16 <- 16)" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195091
  0021b	41 b8 54 e5 00
	00		 mov	 r8d, 58708		; 0000e554H
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins

; 3363 :     DIS_FAC_INS( E558, "CGHSI   E558  COMPARE HALFWORD IMMEDIATE (64 <- 16)" );

  0022d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00239	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0023d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195092
  00244	41 b8 58 e5 00
	00		 mov	 r8d, 58712		; 0000e558H
  0024a	48 8b d0	 mov	 rdx, rax
  0024d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00251	e8 00 00 00 00	 call	 dis_fac_ins

; 3364 :     DIS_FAC_INS( E55C, "CHSI    E55C  COMPARE HALFWORD IMMEDIATE (32 <- 16)" );

  00256	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00262	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00266	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195093
  0026d	41 b8 5c e5 00
	00		 mov	 r8d, 58716		; 0000e55cH
  00273	48 8b d0	 mov	 rdx, rax
  00276	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0027a	e8 00 00 00 00	 call	 dis_fac_ins

; 3365 :     DIS_FAC_INS( C604, "CGHRL   C604  COMPARE HALFWORD RELATIVE LONG (64 <- 16)" );

  0027f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0028b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0028f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195094
  00296	41 b8 04 c6 00
	00		 mov	 r8d, 50692		; 0000c604H
  0029c	48 8b d0	 mov	 rdx, rax
  0029f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002a3	e8 00 00 00 00	 call	 dis_fac_ins

; 3366 :     DIS_FAC_INS( C605, "CHRL    C605  COMPARE HALFWORD RELATIVE LONG (32 <- 16)" );

  002a8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  002b4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002b8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195095
  002bf	41 b8 05 c6 00
	00		 mov	 r8d, 50693		; 0000c605H
  002c5	48 8b d0	 mov	 rdx, rax
  002c8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002cc	e8 00 00 00 00	 call	 dis_fac_ins

; 3367 :     DIS_FAC_INS( ECFC, "CGIB    ECFC  COMPARE IMMEDIATE AND BRANCH (64 <- 8)" );

  002d1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  002dd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002e1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195096
  002e8	41 b8 fc ec 00
	00		 mov	 r8d, 60668		; 0000ecfcH
  002ee	48 8b d0	 mov	 rdx, rax
  002f1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002f5	e8 00 00 00 00	 call	 dis_fac_ins

; 3368 :     DIS_FAC_INS( ECFE, "CIB     ECFE  COMPARE IMMEDIATE AND BRANCH (32 <- 8)" );

  002fa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00306	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0030a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195097
  00311	41 b8 fe ec 00
	00		 mov	 r8d, 60670		; 0000ecfeH
  00317	48 8b d0	 mov	 rdx, rax
  0031a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0031e	e8 00 00 00 00	 call	 dis_fac_ins

; 3369 :     DIS_FAC_INS( EC7C, "CGIJ    EC7C  COMPARE IMMEDIATE AND BRANCH RELATIVE (64 <- 8)" );

  00323	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0032f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00333	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195098
  0033a	41 b8 7c ec 00
	00		 mov	 r8d, 60540		; 0000ec7cH
  00340	48 8b d0	 mov	 rdx, rax
  00343	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00347	e8 00 00 00 00	 call	 dis_fac_ins

; 3370 :     DIS_FAC_INS( EC7E, "CIJ     EC7E  COMPARE IMMEDIATE AND BRANCH RELATIVE (32 <- 8)" );

  0034c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00358	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0035c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195099
  00363	41 b8 7e ec 00
	00		 mov	 r8d, 60542		; 0000ec7eH
  00369	48 8b d0	 mov	 rdx, rax
  0036c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00370	e8 00 00 00 00	 call	 dis_fac_ins

; 3371 :     DIS_FAC_INS( EC70, "CGIT    EC70  COMPARE IMMEDIATE AND TRAP (64 <- 16)" );

  00375	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00381	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00385	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195100
  0038c	41 b8 70 ec 00
	00		 mov	 r8d, 60528		; 0000ec70H
  00392	48 8b d0	 mov	 rdx, rax
  00395	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00399	e8 00 00 00 00	 call	 dis_fac_ins

; 3372 :     DIS_FAC_INS( EC72, "CIT     EC72  COMPARE IMMEDIATE AND TRAP (32 <- 16)" );

  0039e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  003aa	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195101
  003b5	41 b8 72 ec 00
	00		 mov	 r8d, 60530		; 0000ec72H
  003bb	48 8b d0	 mov	 rdx, rax
  003be	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003c2	e8 00 00 00 00	 call	 dis_fac_ins

; 3373 :     DIS_FAC_INS( ECE5, "CLGRB   ECE5  COMPARE LOGICAL AND BRANCH (64)" );

  003c7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  003d3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195102
  003de	41 b8 e5 ec 00
	00		 mov	 r8d, 60645		; 0000ece5H
  003e4	48 8b d0	 mov	 rdx, rax
  003e7	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003eb	e8 00 00 00 00	 call	 dis_fac_ins

; 3374 :     DIS_FAC_INS( ECF7, "CLRB    ECF7  COMPARE LOGICAL AND BRANCH (32)" );

  003f0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  003fc	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00400	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195103
  00407	41 b8 f7 ec 00
	00		 mov	 r8d, 60663		; 0000ecf7H
  0040d	48 8b d0	 mov	 rdx, rax
  00410	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00414	e8 00 00 00 00	 call	 dis_fac_ins

; 3375 :     DIS_FAC_INS( EC65, "CLGRJ   EC65  COMPARE LOGICAL AND BRANCH RELATIVE (64)" );

  00419	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0041e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00425	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00429	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195104
  00430	41 b8 65 ec 00
	00		 mov	 r8d, 60517		; 0000ec65H
  00436	48 8b d0	 mov	 rdx, rax
  00439	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0043d	e8 00 00 00 00	 call	 dis_fac_ins

; 3376 :     DIS_FAC_INS( EC77, "CLRJ    EC77  COMPARE LOGICAL AND BRANCH RELATIVE (32)" );

  00442	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00447	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0044e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00452	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195105
  00459	41 b8 77 ec 00
	00		 mov	 r8d, 60535		; 0000ec77H
  0045f	48 8b d0	 mov	 rdx, rax
  00462	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00466	e8 00 00 00 00	 call	 dis_fac_ins

; 3377 :     DIS_FAC_INS( B961, "CLGRT   B961  COMPARE LOGICAL AND TRAP (64)" );

  0046b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00470	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00477	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0047b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195106
  00482	41 b8 61 b9 00
	00		 mov	 r8d, 47457		; 0000b961H
  00488	48 8b d0	 mov	 rdx, rax
  0048b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0048f	e8 00 00 00 00	 call	 dis_fac_ins

; 3378 :     DIS_FAC_INS( B973, "CLRT    B973  COMPARE LOGICAL AND TRAP (32)" );

  00494	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00499	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  004a0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004a4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195107
  004ab	41 b8 73 b9 00
	00		 mov	 r8d, 47475		; 0000b973H
  004b1	48 8b d0	 mov	 rdx, rax
  004b4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004b8	e8 00 00 00 00	 call	 dis_fac_ins

; 3379 :     DIS_FAC_INS( E555, "CLHHSI  E555  COMPARE LOGICAL IMMEDIATE (16 <- 16)" );

  004bd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  004c9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004cd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195108
  004d4	41 b8 55 e5 00
	00		 mov	 r8d, 58709		; 0000e555H
  004da	48 8b d0	 mov	 rdx, rax
  004dd	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004e1	e8 00 00 00 00	 call	 dis_fac_ins

; 3380 :     DIS_FAC_INS( E559, "CLGHSI  E559  COMPARE LOGICAL IMMEDIATE (64 <- 16)" );

  004e6	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  004f2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004f6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195109
  004fd	41 b8 59 e5 00
	00		 mov	 r8d, 58713		; 0000e559H
  00503	48 8b d0	 mov	 rdx, rax
  00506	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0050a	e8 00 00 00 00	 call	 dis_fac_ins

; 3381 :     DIS_FAC_INS( E55D, "CLFHSI  E55D  COMPARE LOGICAL IMMEDIATE (32 <- 16)" );

  0050f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0051b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0051f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195110
  00526	41 b8 5d e5 00
	00		 mov	 r8d, 58717		; 0000e55dH
  0052c	48 8b d0	 mov	 rdx, rax
  0052f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00533	e8 00 00 00 00	 call	 dis_fac_ins

; 3382 :     DIS_FAC_INS( ECFD, "CLGIB   ECFD  COMPARE LOGICAL IMMEDIATE AND BRANCH (64 <- 8)" );

  00538	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0053d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00544	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00548	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195111
  0054f	41 b8 fd ec 00
	00		 mov	 r8d, 60669		; 0000ecfdH
  00555	48 8b d0	 mov	 rdx, rax
  00558	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0055c	e8 00 00 00 00	 call	 dis_fac_ins

; 3383 :     DIS_FAC_INS( ECFF, "CLIB    ECFF  COMPARE LOGICAL IMMEDIATE AND BRANCH (32 <- 8)" );

  00561	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00566	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0056d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00571	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195112
  00578	41 b8 ff ec 00
	00		 mov	 r8d, 60671		; 0000ecffH
  0057e	48 8b d0	 mov	 rdx, rax
  00581	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00585	e8 00 00 00 00	 call	 dis_fac_ins

; 3384 :     DIS_FAC_INS( EC7D, "CLGIJ   EC7D  COMPARE LOGICAL IMMEDIATE AND BRANCH RELATIVE (64 <- 8)" );

  0058a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0058f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00596	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0059a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195113
  005a1	41 b8 7d ec 00
	00		 mov	 r8d, 60541		; 0000ec7dH
  005a7	48 8b d0	 mov	 rdx, rax
  005aa	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005ae	e8 00 00 00 00	 call	 dis_fac_ins

; 3385 :     DIS_FAC_INS( EC7F, "CLIJ    EC7F  COMPARE LOGICAL IMMEDIATE AND BRANCH RELATIVE (32 <- 8)" );

  005b3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  005b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  005bf	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005c3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195114
  005ca	41 b8 7f ec 00
	00		 mov	 r8d, 60543		; 0000ec7fH
  005d0	48 8b d0	 mov	 rdx, rax
  005d3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005d7	e8 00 00 00 00	 call	 dis_fac_ins

; 3386 :     DIS_FAC_INS( EC71, "CLGIT   EC71  COMPARE LOGICAL IMMEDIATE AND TRAP (64 <- 16)" );

  005dc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  005e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  005e8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005ec	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195115
  005f3	41 b8 71 ec 00
	00		 mov	 r8d, 60529		; 0000ec71H
  005f9	48 8b d0	 mov	 rdx, rax
  005fc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00600	e8 00 00 00 00	 call	 dis_fac_ins

; 3387 :     DIS_FAC_INS( EC73, "CLFIT   EC73  COMPARE LOGICAL IMMEDIATE AND TRAP (32 <- 16)" );

  00605	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0060a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00611	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00615	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195116
  0061c	41 b8 73 ec 00
	00		 mov	 r8d, 60531		; 0000ec73H
  00622	48 8b d0	 mov	 rdx, rax
  00625	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00629	e8 00 00 00 00	 call	 dis_fac_ins

; 3388 :     DIS_FAC_INS( C606, "CLGHRL  C606  COMPARE LOGICAL RELATIVE LONG (64 <- 16)" );

  0062e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00633	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0063a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0063e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195117
  00645	41 b8 06 c6 00
	00		 mov	 r8d, 50694		; 0000c606H
  0064b	48 8b d0	 mov	 rdx, rax
  0064e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00652	e8 00 00 00 00	 call	 dis_fac_ins

; 3389 :     DIS_FAC_INS( C607, "CLHRL   C607  COMPARE LOGICAL RELATIVE LONG (32 <- 16)" );

  00657	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0065c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00663	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00667	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195118
  0066e	41 b8 07 c6 00
	00		 mov	 r8d, 50695		; 0000c607H
  00674	48 8b d0	 mov	 rdx, rax
  00677	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0067b	e8 00 00 00 00	 call	 dis_fac_ins

; 3390 :     DIS_FAC_INS( C60A, "CLGRL   C60A  COMPARE LOGICAL RELATIVE LONG (64)" );

  00680	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00685	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0068c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00690	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195119
  00697	41 b8 0a c6 00
	00		 mov	 r8d, 50698		; 0000c60aH
  0069d	48 8b d0	 mov	 rdx, rax
  006a0	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006a4	e8 00 00 00 00	 call	 dis_fac_ins

; 3391 :     DIS_FAC_INS( C60E, "CLGFRL  C60E  COMPARE LOGICAL RELATIVE LONG (64 <- 32)" );

  006a9	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  006ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  006b5	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006b9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195120
  006c0	41 b8 0e c6 00
	00		 mov	 r8d, 50702		; 0000c60eH
  006c6	48 8b d0	 mov	 rdx, rax
  006c9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006cd	e8 00 00 00 00	 call	 dis_fac_ins

; 3392 :     DIS_FAC_INS( C60F, "CLRL    C60F  COMPARE LOGICAL RELATIVE LONG (32)" );

  006d2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  006d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  006de	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006e2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195121
  006e9	41 b8 0f c6 00
	00		 mov	 r8d, 50703		; 0000c60fH
  006ef	48 8b d0	 mov	 rdx, rax
  006f2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006f6	e8 00 00 00 00	 call	 dis_fac_ins

; 3393 :     DIS_FAC_INS( C608, "CGRL    C608  COMPARE RELATIVE LONG (64)" );

  006fb	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00700	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00707	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0070b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195122
  00712	41 b8 08 c6 00
	00		 mov	 r8d, 50696		; 0000c608H
  00718	48 8b d0	 mov	 rdx, rax
  0071b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0071f	e8 00 00 00 00	 call	 dis_fac_ins

; 3394 :     DIS_FAC_INS( C60C, "CGFRL   C60C  COMPARE RELATIVE LONG (64 <- 32)" );

  00724	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00729	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00730	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00734	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195123
  0073b	41 b8 0c c6 00
	00		 mov	 r8d, 50700		; 0000c60cH
  00741	48 8b d0	 mov	 rdx, rax
  00744	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00748	e8 00 00 00 00	 call	 dis_fac_ins

; 3395 :     DIS_FAC_INS( C60D, "CRL     C60D  COMPARE RELATIVE LONG (32)" );

  0074d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00752	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00759	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0075d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195124
  00764	41 b8 0d c6 00
	00		 mov	 r8d, 50701		; 0000c60dH
  0076a	48 8b d0	 mov	 rdx, rax
  0076d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00771	e8 00 00 00 00	 call	 dis_fac_ins

; 3396 :     DIS_FAC_INS( EB4C, "ECAG    EB4C  EXTRACT CPU ATTRIBUTE" );

  00776	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0077b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00782	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00786	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195125
  0078d	41 b8 4c eb 00
	00		 mov	 r8d, 60236		; 0000eb4cH
  00793	48 8b d0	 mov	 rdx, rax
  00796	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0079a	e8 00 00 00 00	 call	 dis_fac_ins

; 3397 :     DIS_FAC_INS( E375, "LAEY    E375  LOAD ADDRESS EXTENDED" );

  0079f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  007ab	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  007af	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195126
  007b6	41 b8 75 e3 00
	00		 mov	 r8d, 58229		; 0000e375H
  007bc	48 8b d0	 mov	 rdx, rax
  007bf	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  007c3	e8 00 00 00 00	 call	 dis_fac_ins

; 3398 :     DIS_FAC_INS( E332, "LTGF    E332  LOAD AND TEST (64 <- 32)" );

  007c8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  007d4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  007d8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195127
  007df	41 b8 32 e3 00
	00		 mov	 r8d, 58162		; 0000e332H
  007e5	48 8b d0	 mov	 rdx, rax
  007e8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  007ec	e8 00 00 00 00	 call	 dis_fac_ins

; 3399 :     DIS_FAC_INS( C404, "LGHRL   C404  LOAD HALFWORD RELATIVE LONG (64 <- 16)" );

  007f1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  007f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  007fd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00801	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195128
  00808	41 b8 04 c4 00
	00		 mov	 r8d, 50180		; 0000c404H
  0080e	48 8b d0	 mov	 rdx, rax
  00811	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00815	e8 00 00 00 00	 call	 dis_fac_ins

; 3400 :     DIS_FAC_INS( C405, "LHRL    C405  LOAD HALFWORD RELATIVE LONG (32 <- 16)" );

  0081a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0081f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00826	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0082a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195129
  00831	41 b8 05 c4 00
	00		 mov	 r8d, 50181		; 0000c405H
  00837	48 8b d0	 mov	 rdx, rax
  0083a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0083e	e8 00 00 00 00	 call	 dis_fac_ins

; 3401 :     DIS_FAC_INS( C402, "LLHRL   C402  LOAD LOGICAL HALFWORD RELATIVE LONG (32 <- 16)" );

  00843	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00848	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0084f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00853	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195130
  0085a	41 b8 02 c4 00
	00		 mov	 r8d, 50178		; 0000c402H
  00860	48 8b d0	 mov	 rdx, rax
  00863	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00867	e8 00 00 00 00	 call	 dis_fac_ins

; 3402 :     DIS_FAC_INS( C406, "LLGHRL  C406  LOAD LOGICAL HALFWORD RELATIVE LONG (64 <- 16)" );

  0086c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00871	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00878	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0087c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195131
  00883	41 b8 06 c4 00
	00		 mov	 r8d, 50182		; 0000c406H
  00889	48 8b d0	 mov	 rdx, rax
  0088c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00890	e8 00 00 00 00	 call	 dis_fac_ins

; 3403 :     DIS_FAC_INS( C40E, "LLGFRL  C40E  LOAD LOGICAL RELATIVE LONG (64 <- 32)" );

  00895	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0089a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  008a1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008a5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195132
  008ac	41 b8 0e c4 00
	00		 mov	 r8d, 50190		; 0000c40eH
  008b2	48 8b d0	 mov	 rdx, rax
  008b5	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  008b9	e8 00 00 00 00	 call	 dis_fac_ins

; 3404 :     DIS_FAC_INS( C408, "LGRL    C408  LOAD RELATIVE LONG (64)" );

  008be	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  008c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  008ca	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008ce	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195133
  008d5	41 b8 08 c4 00
	00		 mov	 r8d, 50184		; 0000c408H
  008db	48 8b d0	 mov	 rdx, rax
  008de	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  008e2	e8 00 00 00 00	 call	 dis_fac_ins

; 3405 :     DIS_FAC_INS( C40C, "LGFRL   C40C  LOAD RELATIVE LONG (64 <- 32)" );

  008e7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  008ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  008f3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  008f7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195134
  008fe	41 b8 0c c4 00
	00		 mov	 r8d, 50188		; 0000c40cH
  00904	48 8b d0	 mov	 rdx, rax
  00907	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0090b	e8 00 00 00 00	 call	 dis_fac_ins

; 3406 :     DIS_FAC_INS( C40D, "LRL     C40D  LOAD RELATIVE LONG (32)" );

  00910	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00915	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0091c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00920	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195135
  00927	41 b8 0d c4 00
	00		 mov	 r8d, 50189		; 0000c40dH
  0092d	48 8b d0	 mov	 rdx, rax
  00930	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00934	e8 00 00 00 00	 call	 dis_fac_ins

; 3407 :     DIS_FAC_INS( E544, "MVHHI   E544  MOVE (16 <- 16)" );

  00939	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0093e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00945	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00949	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195136
  00950	41 b8 44 e5 00
	00		 mov	 r8d, 58692		; 0000e544H
  00956	48 8b d0	 mov	 rdx, rax
  00959	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0095d	e8 00 00 00 00	 call	 dis_fac_ins

; 3408 :     DIS_FAC_INS( E548, "MVGHI   E548  MOVE (64 <- 16)" );

  00962	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00967	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  0096e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00972	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195137
  00979	41 b8 48 e5 00
	00		 mov	 r8d, 58696		; 0000e548H
  0097f	48 8b d0	 mov	 rdx, rax
  00982	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00986	e8 00 00 00 00	 call	 dis_fac_ins

; 3409 :     DIS_FAC_INS( E54C, "MVHI    E54C  MOVE (32 <- 16)" );

  0098b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00990	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00997	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0099b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195138
  009a2	41 b8 4c e5 00
	00		 mov	 r8d, 58700		; 0000e54cH
  009a8	48 8b d0	 mov	 rdx, rax
  009ab	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  009af	e8 00 00 00 00	 call	 dis_fac_ins

; 3410 :     DIS_FAC_INS( E35C, "MFY     E35C  MULTIPLY (64 <- 32)" );

  009b4	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  009b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  009c0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  009c4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195139
  009cb	41 b8 5c e3 00
	00		 mov	 r8d, 58204		; 0000e35cH
  009d1	48 8b d0	 mov	 rdx, rax
  009d4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  009d8	e8 00 00 00 00	 call	 dis_fac_ins

; 3411 :     DIS_FAC_INS( E37C, "MHY     E37C  MULTIPLY HALFWORD (32 <- 16)" );

  009dd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  009e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  009e9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  009ed	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195140
  009f4	41 b8 7c e3 00
	00		 mov	 r8d, 58236		; 0000e37cH
  009fa	48 8b d0	 mov	 rdx, rax
  009fd	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a01	e8 00 00 00 00	 call	 dis_fac_ins

; 3412 :     DIS_FAC_INS( C200, "MSGFI   C200  MULTIPLY SINGLE IMMEDIATE (64 <- 32)" );

  00a06	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00a12	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a16	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195141
  00a1d	41 b8 00 c2 00
	00		 mov	 r8d, 49664		; 0000c200H
  00a23	48 8b d0	 mov	 rdx, rax
  00a26	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a2a	e8 00 00 00 00	 call	 dis_fac_ins

; 3413 :     DIS_FAC_INS( C201, "MSFI    C201  MULTIPLY SINGLE IMMEDIATE (32)" );

  00a2f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00a3b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a3f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195142
  00a46	41 b8 01 c2 00
	00		 mov	 r8d, 49665		; 0000c201H
  00a4c	48 8b d0	 mov	 rdx, rax
  00a4f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a53	e8 00 00 00 00	 call	 dis_fac_ins

; 3414 :     DIS_FAC_INS( E336, "PFD     E336  PREFETCH DATA" );

  00a58	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00a64	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a68	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195143
  00a6f	41 b8 36 e3 00
	00		 mov	 r8d, 58166		; 0000e336H
  00a75	48 8b d0	 mov	 rdx, rax
  00a78	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00a7c	e8 00 00 00 00	 call	 dis_fac_ins

; 3415 :     DIS_FAC_INS( C602, "PFDRL   C602  PREFETCH DATA RELATIVE LONG" );

  00a81	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00a86	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00a8d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00a91	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195144
  00a98	41 b8 02 c6 00
	00		 mov	 r8d, 50690		; 0000c602H
  00a9e	48 8b d0	 mov	 rdx, rax
  00aa1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00aa5	e8 00 00 00 00	 call	 dis_fac_ins

; 3416 :     DIS_FAC_INS( EC54, "RNSBG   EC54  ROTATE THEN AND SELECTED BITS (64)" );

  00aaa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00aaf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00ab6	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00aba	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195145
  00ac1	41 b8 54 ec 00
	00		 mov	 r8d, 60500		; 0000ec54H
  00ac7	48 8b d0	 mov	 rdx, rax
  00aca	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00ace	e8 00 00 00 00	 call	 dis_fac_ins

; 3417 :     DIS_FAC_INS( EC57, "RXSBG   EC57  ROTATE THEN EXCLUSIVE OR SELECT. BITS (64)" );

  00ad3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ad8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00adf	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00ae3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195146
  00aea	41 b8 57 ec 00
	00		 mov	 r8d, 60503		; 0000ec57H
  00af0	48 8b d0	 mov	 rdx, rax
  00af3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00af7	e8 00 00 00 00	 call	 dis_fac_ins

; 3418 :     DIS_FAC_INS( EC55, "RISBG   EC55  ROTATE THEN INSERT SELECTED BITS (64)" );

  00afc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00b08	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b0c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195147
  00b13	41 b8 55 ec 00
	00		 mov	 r8d, 60501		; 0000ec55H
  00b19	48 8b d0	 mov	 rdx, rax
  00b1c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b20	e8 00 00 00 00	 call	 dis_fac_ins

; 3419 :     DIS_FAC_INS( EC56, "ROSBG   EC56  ROTATE THEN OR SELECTED BITS (64)" );

  00b25	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00b31	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b35	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195148
  00b3c	41 b8 56 ec 00
	00		 mov	 r8d, 60502		; 0000ec56H
  00b42	48 8b d0	 mov	 rdx, rax
  00b45	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b49	e8 00 00 00 00	 call	 dis_fac_ins

; 3420 :     DIS_FAC_INS( C407, "STHRL   C407  STORE HALFWORD RELATIVE LONG (16)" );

  00b4e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00b5a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b5e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195149
  00b65	41 b8 07 c4 00
	00		 mov	 r8d, 50183		; 0000c407H
  00b6b	48 8b d0	 mov	 rdx, rax
  00b6e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b72	e8 00 00 00 00	 call	 dis_fac_ins

; 3421 :     DIS_FAC_INS( C40B, "STGRL   C40B  STORE RELATIVE LONG (64)" );

  00b77	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00b7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00b83	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00b87	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195150
  00b8e	41 b8 0b c4 00
	00		 mov	 r8d, 50187		; 0000c40bH
  00b94	48 8b d0	 mov	 rdx, rax
  00b97	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00b9b	e8 00 00 00 00	 call	 dis_fac_ins

; 3422 :     DIS_FAC_INS( C40F, "STRL    C40F  STORE RELATIVE LONG (32)" );

  00ba0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00ba5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr34@@9@9
  00bac	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00bb0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195151
  00bb7	41 b8 0f c4 00
	00		 mov	 r8d, 50191		; 0000c40fH
  00bbd	48 8b d0	 mov	 rdx, rax
  00bc0	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00bc4	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr34:
$LN3@instr34:

; 3423 : }
; 3424 : END_DIS_FAC_INS_FUNC()

  00bc9	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00bcd	c3		 ret	 0
instr34	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr32	PROC

; 3341 : BEG_DIS_FAC_INS_FUNC( instr32 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr32
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr32@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr32
$LN2@instr32:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr32@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr32

; 3342 : {
; 3343 :     DIS_FAC_INS( C802, "CSST    C802  COMPARE AND SWAP AND STORE" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr32@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195069
  00051	41 b8 02 c8 00
	00		 mov	 r8d, 51202		; 0000c802H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr32:
$LN3@instr32:

; 3344 : }
; 3345 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr32	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr31	PROC

; 3333 : BEG_DIS_FAC_INS_FUNC( instr31 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr31
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr31@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr31
$LN2@instr31:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr31@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr31

; 3334 : {
; 3335 :     DIS_FAC_INS( C801, "ECTG    C801  EXTRACT CPU TIME" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr31@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195058
  00051	41 b8 01 c8 00
	00		 mov	 r8d, 51201		; 0000c801H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr31:
$LN3@instr31:

; 3336 : }
; 3337 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr31	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr28	PROC

; 3325 : BEG_DIS_FAC_INS_FUNC( instr28 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr28
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr28@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr28
$LN2@instr28:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr28@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr28

; 3326 : {
; 3327 :     DIS_FAC_INS( 0104, "PTFF    0104  PERFORM TIMING FACILITY FUNCTION" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr28@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195047
  00051	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr28:
$LN3@instr28:

; 3328 : }
; 3329 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr28	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr27	PROC

; 3317 : BEG_DIS_FAC_INS_FUNC( instr27 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr27
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr27@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr27
$LN2@instr27:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr27@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr27

; 3318 : {
; 3319 :     DIS_FAC_INS( C800, "MVCOS   C800  MOVE WITH OPTIONAL SPECIFICATIONS" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr27@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195036
  00051	41 b8 00 c8 00
	00		 mov	 r8d, 51200		; 0000c800H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr27:
$LN3@instr27:

; 3320 : }
; 3321 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr27	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr26	PROC

; 3308 : BEG_DIS_FAC_INS_FUNC( instr26 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr26
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr26@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 65		 jmp	 SHORT $LN3@instr26
$LN2@instr26:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr26@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 52		 jne	 SHORT $LN4@instr26

; 3309 : {
; 3310 :     DIS_FAC_INS( B9BF, "TRTE    B9BF  TRANSLATE AND TEST EXTENDED" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr26@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195024
  00051	41 b8 bf b9 00
	00		 mov	 r8d, 47551		; 0000b9bfH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins

; 3311 :     DIS_FAC_INS( B9BD, "TRTRE   B9BD  TRANSLATE AND TEST REVERSE EXTENDED" );

  00063	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr26@@9@9
  0006f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00073	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195025
  0007a	41 b8 bd b9 00
	00		 mov	 r8d, 47549		; 0000b9bdH
  00080	48 8b d0	 mov	 rdx, rax
  00083	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00087	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr26:
$LN3@instr26:

; 3312 : }
; 3313 : END_DIS_FAC_INS_FUNC()

  0008c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00090	c3		 ret	 0
instr26	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr25	PROC

; 3300 : BEG_DIS_FAC_INS_FUNC( instr25 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr25
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr25@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr25
$LN2@instr25:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr25@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr25

; 3301 : {
; 3302 :     DIS_FAC_INS( B27C, "STCKF   B27C  STORE CLOCK FAST" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr25@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195013
  00051	41 b8 7c b2 00
	00		 mov	 r8d, 45692		; 0000b27cH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr25:
$LN3@instr25:

; 3303 : }
; 3304 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr25	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr23	PROC

; 3281 : BEG_DIS_FAC_INS_FUNC( instr23 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr23
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 03 02 00 00	 jmp	 $LN3@instr23
$LN2@instr23:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 ec 01 00
	00		 jne	 $LN4@instr23

; 3282 : {
; 3283 :     DIS_FAC_INS( B33A, "MAYR    B33A  MULTIPLY & ADD UNNORMALIZED (long to ext. HFP)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194991
  00058	41 b8 3a b3 00
	00		 mov	 r8d, 45882		; 0000b33aH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3284 :     DIS_FAC_INS( ED3A, "MAY     ED3A  MULTIPLY & ADD UNNORMALIZED (long to ext. HFP)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194992
  00081	41 b8 3a ed 00
	00		 mov	 r8d, 60730		; 0000ed3aH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3285 :     DIS_FAC_INS( B338, "MAYLR   B338  MULTIPLY AND ADD UNNRM. (long to ext. low HFP)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194993
  000aa	41 b8 38 b3 00
	00		 mov	 r8d, 45880		; 0000b338H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3286 :     DIS_FAC_INS( B33C, "MAYHR   B33C  MULTIPLY AND ADD UNNRM. (long to ext. high HFP)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194994
  000d3	41 b8 3c b3 00
	00		 mov	 r8d, 45884		; 0000b33cH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3287 :     DIS_FAC_INS( ED38, "MAYL    ED38  MULTIPLY AND ADD UNNRM. (long to ext. low HFP)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194995
  000fc	41 b8 38 ed 00
	00		 mov	 r8d, 60728		; 0000ed38H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3288 :     DIS_FAC_INS( ED3C, "MAYH    ED3C  MULTIPLY AND ADD UNNRM. (long to ext. high HFP)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194996
  00125	41 b8 3c ed 00
	00		 mov	 r8d, 60732		; 0000ed3cH
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3289 :     DIS_FAC_INS( B339, "MYLR    B339  MULTIPLY UNNORM. (long to ext. low HFP)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194997
  0014e	41 b8 39 b3 00
	00		 mov	 r8d, 45881		; 0000b339H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3290 :     DIS_FAC_INS( B33D, "MYHR    B33D  MULTIPLY UNNORM. (long to ext. high HFP)" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194998
  00177	41 b8 3d b3 00
	00		 mov	 r8d, 45885		; 0000b33dH
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3291 :     DIS_FAC_INS( ED39, "MYL     ED39  MULTIPLY UNNORM. (long to ext. low HFP)" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194999
  001a0	41 b8 39 ed 00
	00		 mov	 r8d, 60729		; 0000ed39H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3292 :     DIS_FAC_INS( ED3D, "MYH     ED3D  MULTIPLY UNNORM. (long to ext. high HFP)" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195000
  001c9	41 b8 3d ed 00
	00		 mov	 r8d, 60733		; 0000ed3dH
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 3293 :     DIS_FAC_INS( B33B, "MYR     B33B  MULTIPLY UNNORMALIZED (long to ext. HFP)" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195001
  001f2	41 b8 3b b3 00
	00		 mov	 r8d, 45883		; 0000b33bH
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 3294 :     DIS_FAC_INS( ED3B, "MY      ED3B  MULTIPLY UNNORMALIZED (long to ext. HFP)" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr23@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG195002
  0021b	41 b8 3b ed 00
	00		 mov	 r8d, 60731		; 0000ed3bH
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr23:
$LN3@instr23:

; 3295 : }
; 3296 : END_DIS_FAC_INS_FUNC()

  0022d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00231	c3		 ret	 0
instr23	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr22	PROC

; 3268 : BEG_DIS_FAC_INS_FUNC( instr22 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr22
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr22@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 0d 01 00 00	 jmp	 $LN3@instr22
$LN2@instr22:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr22@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 f6 00 00
	00		 jne	 $LN4@instr22

; 3269 : {
; 3270 :     DIS_FAC_INS( B9B1, "CU24    B9B1  CONVERT UTF-16 TO UTF-32" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr22@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194975
  00058	41 b8 b1 b9 00
	00		 mov	 r8d, 47537		; 0000b9b1H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3271 :     DIS_FAC_INS( B9B3, "CU42    B9B3  CONVERT UTF-32 TO UTF-16" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr22@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194976
  00081	41 b8 b3 b9 00
	00		 mov	 r8d, 47539		; 0000b9b3H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3272 :     DIS_FAC_INS( B9B2, "CU41    B9B2  CONVERT UTF-32 TO UTF-8" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr22@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194977
  000aa	41 b8 b2 b9 00
	00		 mov	 r8d, 47538		; 0000b9b2H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3273 :     DIS_FAC_INS( B9B0, "CU14    B9B0  CONVERT UTF-8 TO UTF-32" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr22@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194978
  000d3	41 b8 b0 b9 00
	00		 mov	 r8d, 47536		; 0000b9b0H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3274 :     DIS_FAC_INS( B9BE, "SRSTU   B9BE  SEARCH STRING UNICODE" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr22@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194979
  000fc	41 b8 be b9 00
	00		 mov	 r8d, 47550		; 0000b9beH
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3275 :     DIS_FAC_INS( D0,   "TRTR    D0    TRANSLATE AND TEST REVERSE" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr22@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194980
  00125	41 b8 d0 00 00
	00		 mov	 r8d, 208		; 000000d0H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr22:
$LN3@instr22:

; 3276 : }
; 3277 : END_DIS_FAC_INS_FUNC()

  00137	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0013b	c3		 ret	 0
instr22	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr21	PROC

; 3227 : BEG_DIS_FAC_INS_FUNC( instr21 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr21
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 89 05 00 00	 jmp	 $LN3@instr21
$LN2@instr21:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 72 05 00
	00		 jne	 $LN4@instr21

; 3228 : {
; 3229 :     DIS_FAC_INS( C208, "AGFI    C208  ADD IMMEDIATE (64 <- 32)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194931
  00058	41 b8 08 c2 00
	00		 mov	 r8d, 49672		; 0000c208H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3230 :     DIS_FAC_INS( C209, "AFI     C209  ADD IMMEDIATE (32)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194932
  00081	41 b8 09 c2 00
	00		 mov	 r8d, 49673		; 0000c209H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3231 :     DIS_FAC_INS( C20A, "ALGFI   C20A  ADD LOGICAL IMMEDIATE (64 <- 32)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194933
  000aa	41 b8 0a c2 00
	00		 mov	 r8d, 49674		; 0000c20aH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3232 :     DIS_FAC_INS( C20B, "ALFI    C20B  ADD LOGICAL IMMEDIATE (32)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194934
  000d3	41 b8 0b c2 00
	00		 mov	 r8d, 49675		; 0000c20bH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3233 :     DIS_FAC_INS( C00A, "NIHF    C00A  AND IMMEDIATE (high)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194935
  000fc	41 b8 0a c0 00
	00		 mov	 r8d, 49162		; 0000c00aH
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3234 :     DIS_FAC_INS( C00B, "NILF    C00B  AND IMMEDIATE (low)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194936
  00125	41 b8 0b c0 00
	00		 mov	 r8d, 49163		; 0000c00bH
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3235 :     DIS_FAC_INS( C20C, "CGFI    C20C  COMPARE IMMEDIATE (64 <- 32)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194937
  0014e	41 b8 0c c2 00
	00		 mov	 r8d, 49676		; 0000c20cH
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3236 :     DIS_FAC_INS( C20D, "CFI     C20D  COMPARE IMMEDIATE (32)" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194938
  00177	41 b8 0d c2 00
	00		 mov	 r8d, 49677		; 0000c20dH
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3237 :     DIS_FAC_INS( C20E, "CLGFI   C20E  COMPARE LOGICAL IMMEDIATE (64 <- 32)" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194939
  001a0	41 b8 0e c2 00
	00		 mov	 r8d, 49678		; 0000c20eH
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3238 :     DIS_FAC_INS( C20F, "CLFI    C20F  COMPARE LOGICAL IMMEDIATE (32)" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194940
  001c9	41 b8 0f c2 00
	00		 mov	 r8d, 49679		; 0000c20fH
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 3239 :     DIS_FAC_INS( C006, "XIHF    C006  EXCLUSIVE OR IMMEDIATE (high)" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194941
  001f2	41 b8 06 c0 00
	00		 mov	 r8d, 49158		; 0000c006H
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 3240 :     DIS_FAC_INS( C007, "XILF    C007  EXCLUSIVE OR IMMEDIATE (low)" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194942
  0021b	41 b8 07 c0 00
	00		 mov	 r8d, 49159		; 0000c007H
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins

; 3241 :     DIS_FAC_INS( B983, "FLOGR   B983  FIND LEFTMOST ONE" );

  0022d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00239	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0023d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194943
  00244	41 b8 83 b9 00
	00		 mov	 r8d, 47491		; 0000b983H
  0024a	48 8b d0	 mov	 rdx, rax
  0024d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00251	e8 00 00 00 00	 call	 dis_fac_ins

; 3242 :     DIS_FAC_INS( C008, "IIHF    C008  INSERT IMMEDIATE (high)" );

  00256	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00262	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00266	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194944
  0026d	41 b8 08 c0 00
	00		 mov	 r8d, 49160		; 0000c008H
  00273	48 8b d0	 mov	 rdx, rax
  00276	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0027a	e8 00 00 00 00	 call	 dis_fac_ins

; 3243 :     DIS_FAC_INS( C009, "IILF    C009  INSERT IMMEDIATE (low)" );

  0027f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  0028b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0028f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194945
  00296	41 b8 09 c0 00
	00		 mov	 r8d, 49161		; 0000c009H
  0029c	48 8b d0	 mov	 rdx, rax
  0029f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002a3	e8 00 00 00 00	 call	 dis_fac_ins

; 3244 :     DIS_FAC_INS( E302, "LTG     E302  LOAD AND TEST (64)" );

  002a8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  002b4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002b8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194946
  002bf	41 b8 02 e3 00
	00		 mov	 r8d, 58114		; 0000e302H
  002c5	48 8b d0	 mov	 rdx, rax
  002c8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002cc	e8 00 00 00 00	 call	 dis_fac_ins

; 3245 :     DIS_FAC_INS( E312, "LT      E312  LOAD AND TEST (32)" );

  002d1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  002dd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002e1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194947
  002e8	41 b8 12 e3 00
	00		 mov	 r8d, 58130		; 0000e312H
  002ee	48 8b d0	 mov	 rdx, rax
  002f1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002f5	e8 00 00 00 00	 call	 dis_fac_ins

; 3246 :     DIS_FAC_INS( B906, "LGBR    B906  LOAD BYTE (64 <- 8)" );

  002fa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00306	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0030a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194948
  00311	41 b8 06 b9 00
	00		 mov	 r8d, 47366		; 0000b906H
  00317	48 8b d0	 mov	 rdx, rax
  0031a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0031e	e8 00 00 00 00	 call	 dis_fac_ins

; 3247 :     DIS_FAC_INS( B926, "LBR     B926  LOAD BYTE (32 <- 8)" );

  00323	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  0032f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00333	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194949
  0033a	41 b8 26 b9 00
	00		 mov	 r8d, 47398		; 0000b926H
  00340	48 8b d0	 mov	 rdx, rax
  00343	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00347	e8 00 00 00 00	 call	 dis_fac_ins

; 3248 :     DIS_FAC_INS( B907, "LGHR    B907  LOAD HALFWORD (64 <- 16)" );

  0034c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00358	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0035c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194950
  00363	41 b8 07 b9 00
	00		 mov	 r8d, 47367		; 0000b907H
  00369	48 8b d0	 mov	 rdx, rax
  0036c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00370	e8 00 00 00 00	 call	 dis_fac_ins

; 3249 :     DIS_FAC_INS( B927, "LHR     B927  LOAD HALFWORD (32 <- 16)" );

  00375	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00381	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00385	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194951
  0038c	41 b8 27 b9 00
	00		 mov	 r8d, 47399		; 0000b927H
  00392	48 8b d0	 mov	 rdx, rax
  00395	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00399	e8 00 00 00 00	 call	 dis_fac_ins

; 3250 :     DIS_FAC_INS( C001, "LGFI    C001  LOAD IMMEDIATE (64 <- 32)" );

  0039e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  003aa	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194952
  003b5	41 b8 01 c0 00
	00		 mov	 r8d, 49153		; 0000c001H
  003bb	48 8b d0	 mov	 rdx, rax
  003be	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003c2	e8 00 00 00 00	 call	 dis_fac_ins

; 3251 :     DIS_FAC_INS( B984, "LLGCR   B984  LOAD LOGICAL CHARACTER (64 <- 8)" );

  003c7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  003d3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194953
  003de	41 b8 84 b9 00
	00		 mov	 r8d, 47492		; 0000b984H
  003e4	48 8b d0	 mov	 rdx, rax
  003e7	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003eb	e8 00 00 00 00	 call	 dis_fac_ins

; 3252 :     DIS_FAC_INS( B994, "LLCR    B994  LOAD LOGICAL CHARACTER (32 <- 8)" );

  003f0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  003fc	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00400	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194954
  00407	41 b8 94 b9 00
	00		 mov	 r8d, 47508		; 0000b994H
  0040d	48 8b d0	 mov	 rdx, rax
  00410	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00414	e8 00 00 00 00	 call	 dis_fac_ins

; 3253 :     DIS_FAC_INS( E394, "LLC     E394  LOAD LOGICAL CHARACTER (32 <- 8)" );

  00419	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0041e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00425	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00429	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194955
  00430	41 b8 94 e3 00
	00		 mov	 r8d, 58260		; 0000e394H
  00436	48 8b d0	 mov	 rdx, rax
  00439	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0043d	e8 00 00 00 00	 call	 dis_fac_ins

; 3254 :     DIS_FAC_INS( B985, "LLGHR   B985  LOAD LOGICAL HALFWORD (64 <- 16)" );

  00442	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00447	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  0044e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00452	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194956
  00459	41 b8 85 b9 00
	00		 mov	 r8d, 47493		; 0000b985H
  0045f	48 8b d0	 mov	 rdx, rax
  00462	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00466	e8 00 00 00 00	 call	 dis_fac_ins

; 3255 :     DIS_FAC_INS( B995, "LLHR    B995  LOAD LOGICAL HALFWORD (32 <- 16)" );

  0046b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00470	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00477	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0047b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194957
  00482	41 b8 95 b9 00
	00		 mov	 r8d, 47509		; 0000b995H
  00488	48 8b d0	 mov	 rdx, rax
  0048b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0048f	e8 00 00 00 00	 call	 dis_fac_ins

; 3256 :     DIS_FAC_INS( E395, "LLH     E395  LOAD LOGICAL HALFWORD (32 <- 16)" );

  00494	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00499	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  004a0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004a4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194958
  004ab	41 b8 95 e3 00
	00		 mov	 r8d, 58261		; 0000e395H
  004b1	48 8b d0	 mov	 rdx, rax
  004b4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004b8	e8 00 00 00 00	 call	 dis_fac_ins

; 3257 :     DIS_FAC_INS( C00E, "LLIHF   C00E  LOAD LOGICAL IMMEDIATE (high)" );

  004bd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  004c9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004cd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194959
  004d4	41 b8 0e c0 00
	00		 mov	 r8d, 49166		; 0000c00eH
  004da	48 8b d0	 mov	 rdx, rax
  004dd	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004e1	e8 00 00 00 00	 call	 dis_fac_ins

; 3258 :     DIS_FAC_INS( C00F, "LLILF   C00F  LOAD LOGICAL IMMEDIATE (low)" );

  004e6	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  004f2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004f6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194960
  004fd	41 b8 0f c0 00
	00		 mov	 r8d, 49167		; 0000c00fH
  00503	48 8b d0	 mov	 rdx, rax
  00506	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0050a	e8 00 00 00 00	 call	 dis_fac_ins

; 3259 :     DIS_FAC_INS( C00C, "OIHF    C00C  OR IMMEDIATE (high)" );

  0050f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  0051b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0051f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194961
  00526	41 b8 0c c0 00
	00		 mov	 r8d, 49164		; 0000c00cH
  0052c	48 8b d0	 mov	 rdx, rax
  0052f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00533	e8 00 00 00 00	 call	 dis_fac_ins

; 3260 :     DIS_FAC_INS( C00D, "OILF    C00D  OR IMMEDIATE (low)" );

  00538	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0053d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00544	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00548	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194962
  0054f	41 b8 0d c0 00
	00		 mov	 r8d, 49165		; 0000c00dH
  00555	48 8b d0	 mov	 rdx, rax
  00558	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0055c	e8 00 00 00 00	 call	 dis_fac_ins

; 3261 :     DIS_FAC_INS( C204, "SLGFI   C204  SUBTRACT LOGICAL IMMEDIATE (64 <- 32)" );

  00561	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00566	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  0056d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00571	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194963
  00578	41 b8 04 c2 00
	00		 mov	 r8d, 49668		; 0000c204H
  0057e	48 8b d0	 mov	 rdx, rax
  00581	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00585	e8 00 00 00 00	 call	 dis_fac_ins

; 3262 :     DIS_FAC_INS( C205, "SLFI    C205  SUBTRACT LOGICAL IMMEDIATE (32)" );

  0058a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0058f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr21@@9@9
  00596	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0059a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194964
  005a1	41 b8 05 c2 00
	00		 mov	 r8d, 49669		; 0000c205H
  005a7	48 8b d0	 mov	 rdx, rax
  005aa	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005ae	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr21:
$LN3@instr21:

; 3263 : }
; 3264 : END_DIS_FAC_INS_FUNC()

  005b3	48 83 c4 28	 add	 rsp, 40			; 00000028H
  005b7	c3		 ret	 0
instr21	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr20	PROC

; 3212 : BEG_DIS_FAC_INS_FUNC( instr20 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr20
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr20@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 5f 01 00 00	 jmp	 $LN3@instr20
$LN2@instr20:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr20@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 48 01 00
	00		 jne	 $LN4@instr20

; 3213 : {
; 3214 :     DIS_FAC_INS( B32E, "MAER    B32E  MULTIPLY AND ADD (short HFP)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr20@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194913
  00058	41 b8 2e b3 00
	00		 mov	 r8d, 45870		; 0000b32eH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3215 :     DIS_FAC_INS( B33E, "MADR    B33E  MULTIPLY AND ADD (long HFP)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr20@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194914
  00081	41 b8 3e b3 00
	00		 mov	 r8d, 45886		; 0000b33eH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3216 :     DIS_FAC_INS( ED2E, "MAE     ED2E  MULTIPLY AND ADD (short HFP)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr20@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194915
  000aa	41 b8 2e ed 00
	00		 mov	 r8d, 60718		; 0000ed2eH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3217 :     DIS_FAC_INS( ED3E, "MAD     ED3E  MULTIPLY AND ADD (long HFP)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr20@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194916
  000d3	41 b8 3e ed 00
	00		 mov	 r8d, 60734		; 0000ed3eH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3218 :     DIS_FAC_INS( B32F, "MSER    B32F  MULTIPLY AND SUBTRACT (short HFP)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr20@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194917
  000fc	41 b8 2f b3 00
	00		 mov	 r8d, 45871		; 0000b32fH
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3219 :     DIS_FAC_INS( B33F, "MSDR    B33F  MULTIPLY AND SUBTRACT (long HFP)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr20@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194918
  00125	41 b8 3f b3 00
	00		 mov	 r8d, 45887		; 0000b33fH
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3220 :     DIS_FAC_INS( ED2F, "MSE     ED2F  MULTIPLY AND SUBTRACT (short HFP)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr20@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194919
  0014e	41 b8 2f ed 00
	00		 mov	 r8d, 60719		; 0000ed2fH
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3221 :     DIS_FAC_INS( ED3F, "MSD     ED3F  MULTIPLY AND SUBTRACT (long HFP)" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr20@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194920
  00177	41 b8 3f ed 00
	00		 mov	 r8d, 60735		; 0000ed3fH
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr20:
$LN3@instr20:

; 3222 : }
; 3223 : END_DIS_FAC_INS_FUNC()

  00189	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0018d	c3		 ret	 0
instr20	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr18	PROC

; 3161 : BEG_DIS_FAC_INS_FUNC( instr18 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr18
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 23 07 00 00	 jmp	 $LN3@instr18
$LN2@instr18:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 0c 07 00
	00		 jne	 $LN4@instr18

; 3162 : {
; 3163 :     DIS_FAC_INS( E35A, "AY      E35A  ADD (32)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194859
  00058	41 b8 5a e3 00
	00		 mov	 r8d, 58202		; 0000e35aH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3164 :     DIS_FAC_INS( E37A, "AHY     E37A  ADD HALFWORD (32 <- 16)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194860
  00081	41 b8 7a e3 00
	00		 mov	 r8d, 58234		; 0000e37aH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3165 :     DIS_FAC_INS( E35E, "ALY     E35E  ADD LOGICAL (32)" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194861
  000aa	41 b8 5e e3 00
	00		 mov	 r8d, 58206		; 0000e35eH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3166 :     DIS_FAC_INS( E354, "NY      E354  AND (32)" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194862
  000d3	41 b8 54 e3 00
	00		 mov	 r8d, 58196		; 0000e354H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3167 :     DIS_FAC_INS( EB54, "NIY     EB54  AND (immediate)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194863
  000fc	41 b8 54 eb 00
	00		 mov	 r8d, 60244		; 0000eb54H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3168 :     DIS_FAC_INS( E359, "CY      E359  COMPARE (32)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194864
  00125	41 b8 59 e3 00
	00		 mov	 r8d, 58201		; 0000e359H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3169 :     DIS_FAC_INS( EB14, "CSY     EB14  COMPARE AND SWAP (32)" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194865
  0014e	41 b8 14 eb 00
	00		 mov	 r8d, 60180		; 0000eb14H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3170 :     DIS_FAC_INS( EB31, "CDSY    EB31  COMPARE DOUBLE AND SWAP (32)" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194866
  00177	41 b8 31 eb 00
	00		 mov	 r8d, 60209		; 0000eb31H
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3171 :     DIS_FAC_INS( E379, "CHY     E379  COMPARE HALFWORD (32 <- 16)" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194867
  001a0	41 b8 79 e3 00
	00		 mov	 r8d, 58233		; 0000e379H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3172 :     DIS_FAC_INS( E355, "CLY     E355  COMPARE LOGICAL (32)" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194868
  001c9	41 b8 55 e3 00
	00		 mov	 r8d, 58197		; 0000e355H
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 3173 :     DIS_FAC_INS( EB55, "CLIY    EB55  COMPARE LOGICAL (immediate)" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194869
  001f2	41 b8 55 eb 00
	00		 mov	 r8d, 60245		; 0000eb55H
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 3174 :     DIS_FAC_INS( EB21, "CLMY    EB21  COMPARE LOGICAL CHAR. UNDER MASK (low)" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194870
  0021b	41 b8 21 eb 00
	00		 mov	 r8d, 60193		; 0000eb21H
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins

; 3175 :     DIS_FAC_INS( E306, "CVBY    E306  CONVERT TO BINARY (32)" );

  0022d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00239	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0023d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194871
  00244	41 b8 06 e3 00
	00		 mov	 r8d, 58118		; 0000e306H
  0024a	48 8b d0	 mov	 rdx, rax
  0024d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00251	e8 00 00 00 00	 call	 dis_fac_ins

; 3176 :     DIS_FAC_INS( E326, "CVDY    E326  CONVERT TO DECIMAL (32)" );

  00256	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00262	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00266	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194872
  0026d	41 b8 26 e3 00
	00		 mov	 r8d, 58150		; 0000e326H
  00273	48 8b d0	 mov	 rdx, rax
  00276	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0027a	e8 00 00 00 00	 call	 dis_fac_ins

; 3177 :     DIS_FAC_INS( E357, "XY      E357  EXCLUSIVE OR (32)" );

  0027f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  0028b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0028f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194873
  00296	41 b8 57 e3 00
	00		 mov	 r8d, 58199		; 0000e357H
  0029c	48 8b d0	 mov	 rdx, rax
  0029f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002a3	e8 00 00 00 00	 call	 dis_fac_ins

; 3178 :     DIS_FAC_INS( EB57, "XIY     EB57  EXCLUSIVE OR (immediate)" );

  002a8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  002b4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002b8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194874
  002bf	41 b8 57 eb 00
	00		 mov	 r8d, 60247		; 0000eb57H
  002c5	48 8b d0	 mov	 rdx, rax
  002c8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002cc	e8 00 00 00 00	 call	 dis_fac_ins

; 3179 :     DIS_FAC_INS( E373, "ICY     E373  INSERT CHARACTER" );

  002d1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  002dd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002e1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194875
  002e8	41 b8 73 e3 00
	00		 mov	 r8d, 58227		; 0000e373H
  002ee	48 8b d0	 mov	 rdx, rax
  002f1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002f5	e8 00 00 00 00	 call	 dis_fac_ins

; 3180 :     DIS_FAC_INS( EB81, "ICMY    EB81  INSERT CHARACTERS UNDER MASK (low)" );

  002fa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00306	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0030a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194876
  00311	41 b8 81 eb 00
	00		 mov	 r8d, 60289		; 0000eb81H
  00317	48 8b d0	 mov	 rdx, rax
  0031a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0031e	e8 00 00 00 00	 call	 dis_fac_ins

; 3181 :     DIS_FAC_INS( E358, "LY      E358  LOAD (32)" );

  00323	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  0032f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00333	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194877
  0033a	41 b8 58 e3 00
	00		 mov	 r8d, 58200		; 0000e358H
  00340	48 8b d0	 mov	 rdx, rax
  00343	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00347	e8 00 00 00 00	 call	 dis_fac_ins

; 3182 :     DIS_FAC_INS( ED64, "LEY     ED64  LOAD (short)" );

  0034c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00358	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0035c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194878
  00363	41 b8 64 ed 00
	00		 mov	 r8d, 60772		; 0000ed64H
  00369	48 8b d0	 mov	 rdx, rax
  0036c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00370	e8 00 00 00 00	 call	 dis_fac_ins

; 3183 :     DIS_FAC_INS( ED65, "LDY     ED65  LOAD (long)" );

  00375	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00381	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00385	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194879
  0038c	41 b8 65 ed 00
	00		 mov	 r8d, 60773		; 0000ed65H
  00392	48 8b d0	 mov	 rdx, rax
  00395	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00399	e8 00 00 00 00	 call	 dis_fac_ins

; 3184 :     DIS_FAC_INS( EB9A, "LAMY    EB9A  LOAD ACCESS MULTIPLE" );

  0039e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  003aa	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194880
  003b5	41 b8 9a eb 00
	00		 mov	 r8d, 60314		; 0000eb9aH
  003bb	48 8b d0	 mov	 rdx, rax
  003be	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003c2	e8 00 00 00 00	 call	 dis_fac_ins

; 3185 :     DIS_FAC_INS( E371, "LAY     E371  LOAD ADDRESS" );

  003c7	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  003d3	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194881
  003de	41 b8 71 e3 00
	00		 mov	 r8d, 58225		; 0000e371H
  003e4	48 8b d0	 mov	 rdx, rax
  003e7	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003eb	e8 00 00 00 00	 call	 dis_fac_ins

; 3186 :     DIS_FAC_INS( E376, "LB      E376  LOAD BYTE (32 <- 8)" );

  003f0	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  003fc	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00400	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194882
  00407	41 b8 76 e3 00
	00		 mov	 r8d, 58230		; 0000e376H
  0040d	48 8b d0	 mov	 rdx, rax
  00410	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00414	e8 00 00 00 00	 call	 dis_fac_ins

; 3187 :     DIS_FAC_INS( E377, "LGB     E377  LOAD BYTE (64 <- 8)" );

  00419	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0041e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00425	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00429	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194883
  00430	41 b8 77 e3 00
	00		 mov	 r8d, 58231		; 0000e377H
  00436	48 8b d0	 mov	 rdx, rax
  00439	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0043d	e8 00 00 00 00	 call	 dis_fac_ins

; 3188 :     DIS_FAC_INS( E378, "LHY     E378  LOAD HALFWORD (32 <- 16)" );

  00442	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00447	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  0044e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00452	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194884
  00459	41 b8 78 e3 00
	00		 mov	 r8d, 58232		; 0000e378H
  0045f	48 8b d0	 mov	 rdx, rax
  00462	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00466	e8 00 00 00 00	 call	 dis_fac_ins

; 3189 :     DIS_FAC_INS( EB98, "LMY     EB98  LOAD MULTIPLE (32)" );

  0046b	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00470	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00477	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0047b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194885
  00482	41 b8 98 eb 00
	00		 mov	 r8d, 60312		; 0000eb98H
  00488	48 8b d0	 mov	 rdx, rax
  0048b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0048f	e8 00 00 00 00	 call	 dis_fac_ins

; 3190 :     DIS_FAC_INS( E313, "LRAY    E313  LOAD REAL ADDRESS (32)" );

  00494	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00499	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  004a0	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004a4	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194886
  004ab	41 b8 13 e3 00
	00		 mov	 r8d, 58131		; 0000e313H
  004b1	48 8b d0	 mov	 rdx, rax
  004b4	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004b8	e8 00 00 00 00	 call	 dis_fac_ins

; 3191 :     DIS_FAC_INS( EB52, "MVIY    EB52  MOVE (immediate)" );

  004bd	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  004c9	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004cd	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194887
  004d4	41 b8 52 eb 00
	00		 mov	 r8d, 60242		; 0000eb52H
  004da	48 8b d0	 mov	 rdx, rax
  004dd	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  004e1	e8 00 00 00 00	 call	 dis_fac_ins

; 3192 :     DIS_FAC_INS( E351, "MSY     E351  MULTIPLY SINGLE (32)" );

  004e6	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  004eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  004f2	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  004f6	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194888
  004fd	41 b8 51 e3 00
	00		 mov	 r8d, 58193		; 0000e351H
  00503	48 8b d0	 mov	 rdx, rax
  00506	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0050a	e8 00 00 00 00	 call	 dis_fac_ins

; 3193 :     DIS_FAC_INS( E356, "OY      E356  OR (32)" );

  0050f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  0051b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0051f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194889
  00526	41 b8 56 e3 00
	00		 mov	 r8d, 58198		; 0000e356H
  0052c	48 8b d0	 mov	 rdx, rax
  0052f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00533	e8 00 00 00 00	 call	 dis_fac_ins

; 3194 :     DIS_FAC_INS( EB56, "OIY     EB56  OR (immediate)" );

  00538	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0053d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00544	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00548	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194890
  0054f	41 b8 56 eb 00
	00		 mov	 r8d, 60246		; 0000eb56H
  00555	48 8b d0	 mov	 rdx, rax
  00558	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0055c	e8 00 00 00 00	 call	 dis_fac_ins

; 3195 :     DIS_FAC_INS( E350, "STY     E350  STORE (32)" );

  00561	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00566	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  0056d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00571	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194891
  00578	41 b8 50 e3 00
	00		 mov	 r8d, 58192		; 0000e350H
  0057e	48 8b d0	 mov	 rdx, rax
  00581	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00585	e8 00 00 00 00	 call	 dis_fac_ins

; 3196 :     DIS_FAC_INS( ED66, "STEY    ED66  STORE (short)" );

  0058a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0058f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00596	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0059a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194892
  005a1	41 b8 66 ed 00
	00		 mov	 r8d, 60774		; 0000ed66H
  005a7	48 8b d0	 mov	 rdx, rax
  005aa	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005ae	e8 00 00 00 00	 call	 dis_fac_ins

; 3197 :     DIS_FAC_INS( ED67, "STDY    ED67  STORE (long)" );

  005b3	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  005b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  005bf	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005c3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194893
  005ca	41 b8 67 ed 00
	00		 mov	 r8d, 60775		; 0000ed67H
  005d0	48 8b d0	 mov	 rdx, rax
  005d3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  005d7	e8 00 00 00 00	 call	 dis_fac_ins

; 3198 :     DIS_FAC_INS( EB9B, "STAMY   EB9B  STORE ACCESS MULTIPLE" );

  005dc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  005e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  005e8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  005ec	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194894
  005f3	41 b8 9b eb 00
	00		 mov	 r8d, 60315		; 0000eb9bH
  005f9	48 8b d0	 mov	 rdx, rax
  005fc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00600	e8 00 00 00 00	 call	 dis_fac_ins

; 3199 :     DIS_FAC_INS( E372, "STCY    E372  STORE CHARACTER" );

  00605	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0060a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00611	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00615	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194895
  0061c	41 b8 72 e3 00
	00		 mov	 r8d, 58226		; 0000e372H
  00622	48 8b d0	 mov	 rdx, rax
  00625	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00629	e8 00 00 00 00	 call	 dis_fac_ins

; 3200 :     DIS_FAC_INS( EB2D, "STCMY   EB2D  STORE CHARACTERS UNDER MASK (low)" );

  0062e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00633	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  0063a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0063e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194896
  00645	41 b8 2d eb 00
	00		 mov	 r8d, 60205		; 0000eb2dH
  0064b	48 8b d0	 mov	 rdx, rax
  0064e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00652	e8 00 00 00 00	 call	 dis_fac_ins

; 3201 :     DIS_FAC_INS( E370, "STHY    E370  STORE HALFWORD (16)" );

  00657	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0065c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00663	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00667	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194897
  0066e	41 b8 70 e3 00
	00		 mov	 r8d, 58224		; 0000e370H
  00674	48 8b d0	 mov	 rdx, rax
  00677	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0067b	e8 00 00 00 00	 call	 dis_fac_ins

; 3202 :     DIS_FAC_INS( EB90, "STMY    EB90  STORE MULTIPLE (32)" );

  00680	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00685	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  0068c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00690	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194898
  00697	41 b8 90 eb 00
	00		 mov	 r8d, 60304		; 0000eb90H
  0069d	48 8b d0	 mov	 rdx, rax
  006a0	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006a4	e8 00 00 00 00	 call	 dis_fac_ins

; 3203 :     DIS_FAC_INS( E35B, "SY      E35B  SUBTRACT (32)" );

  006a9	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  006ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  006b5	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006b9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194899
  006c0	41 b8 5b e3 00
	00		 mov	 r8d, 58203		; 0000e35bH
  006c6	48 8b d0	 mov	 rdx, rax
  006c9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006cd	e8 00 00 00 00	 call	 dis_fac_ins

; 3204 :     DIS_FAC_INS( E37B, "SHY     E37B  SUBTRACT HALFWORD (32 <- 16)" );

  006d2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  006d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  006de	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  006e2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194900
  006e9	41 b8 7b e3 00
	00		 mov	 r8d, 58235		; 0000e37bH
  006ef	48 8b d0	 mov	 rdx, rax
  006f2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  006f6	e8 00 00 00 00	 call	 dis_fac_ins

; 3205 :     DIS_FAC_INS( E35F, "SLY     E35F  SUBTRACT LOGICAL (32)" );

  006fb	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00700	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00707	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0070b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194901
  00712	41 b8 5f e3 00
	00		 mov	 r8d, 58207		; 0000e35fH
  00718	48 8b d0	 mov	 rdx, rax
  0071b	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0071f	e8 00 00 00 00	 call	 dis_fac_ins

; 3206 :     DIS_FAC_INS( EB51, "TMY     EB51  TEST UNDER MASK" );

  00724	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00729	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr18@@9@9
  00730	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00734	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194902
  0073b	41 b8 51 eb 00
	00		 mov	 r8d, 60241		; 0000eb51H
  00741	48 8b d0	 mov	 rdx, rax
  00744	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00748	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr18:
$LN3@instr18:

; 3207 : }
; 3208 : END_DIS_FAC_INS_FUNC()

  0074d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00751	c3		 ret	 0
instr18	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr17	PROC

; 3149 : BEG_DIS_FAC_INS_FUNC( instr17 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr17
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr17@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 e4 00 00 00	 jmp	 $LN3@instr17
$LN2@instr17:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr17@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 cd 00 00
	00		 jne	 $LN4@instr17

; 3150 : {
; 3151 :     DIS_FAC_INS( B92E, "KM      B92E  CIPHER MESSAGE" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr17@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194844
  00058	41 b8 2e b9 00
	00		 mov	 r8d, 47406		; 0000b92eH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3152 :     DIS_FAC_INS( B92F, "KMC     B92F  CIPHER MESSAGE WITH CHAINING" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr17@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194845
  00081	41 b8 2f b9 00
	00		 mov	 r8d, 47407		; 0000b92fH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3153 :     DIS_FAC_INS( B93E, "KIMD    B93E  COMPUTE INTERMEDIATE MESSAGE DIGEST" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr17@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194846
  000aa	41 b8 3e b9 00
	00		 mov	 r8d, 47422		; 0000b93eH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3154 :     DIS_FAC_INS( B93F, "KLMD    B93F  COMPUTE LAST MESSAGE DIGEST" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr17@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194847
  000d3	41 b8 3f b9 00
	00		 mov	 r8d, 47423		; 0000b93fH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3155 :     DIS_FAC_INS( B91E, "KMAC    B91E  COMPUTE MESSAGE AUTHENTICATION CODE" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr17@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194848
  000fc	41 b8 1e b9 00
	00		 mov	 r8d, 47390		; 0000b91eH
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr17:
$LN3@instr17:

; 3156 : }
; 3157 : END_DIS_FAC_INS_FUNC()

  0010e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00112	c3		 ret	 0
instr17	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr16	PROC

; 3131 : BEG_DIS_FAC_INS_FUNC( instr16 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr16
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 da 01 00 00	 jmp	 $LN3@instr16
$LN2@instr16:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 c3 01 00
	00		 jne	 $LN4@instr16

; 3132 : {
; 3133 :     DIS_FAC_INS( EB8F, "CLCLU   EB8F  COMPARE LOGICAL LONG UNICODE" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194823
  00058	41 b8 8f eb 00
	00		 mov	 r8d, 60303		; 0000eb8fH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3134 :     DIS_FAC_INS( EB8E, "MVCLU   EB8E  MOVE LONG UNICODE" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194824
  00081	41 b8 8e eb 00
	00		 mov	 r8d, 60302		; 0000eb8eH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3135 :     DIS_FAC_INS( E9,   "PKA     E9    PACK ASCII" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194825
  000aa	41 b8 e9 00 00
	00		 mov	 r8d, 233		; 000000e9H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3136 :     DIS_FAC_INS( E1,   "PKU     E1    PACK UNICODE" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194826
  000d3	41 b8 e1 00 00
	00		 mov	 r8d, 225		; 000000e1H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3137 :     DIS_FAC_INS( EBC0, "TP      EBC0  TEST DECIMAL" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194827
  000fc	41 b8 c0 eb 00
	00		 mov	 r8d, 60352		; 0000ebc0H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3138 :     DIS_FAC_INS( B993, "TROO    B993  TRANSLATE ONE TO ONE" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194828
  00125	41 b8 93 b9 00
	00		 mov	 r8d, 47507		; 0000b993H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3139 :     DIS_FAC_INS( B992, "TROT    B992  TRANSLATE ONE TO TWO" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194829
  0014e	41 b8 92 b9 00
	00		 mov	 r8d, 47506		; 0000b992H
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3140 :     DIS_FAC_INS( B991, "TRTO    B991  TRANSLATE TWO TO ONE" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194830
  00177	41 b8 91 b9 00
	00		 mov	 r8d, 47505		; 0000b991H
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3141 :     DIS_FAC_INS( B990, "TRTT    B990  TRANSLATE TWO TO TWO" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194831
  001a0	41 b8 90 b9 00
	00		 mov	 r8d, 47504		; 0000b990H
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3142 :     DIS_FAC_INS( EA,   "UNPKA   EA    UNPACK ASCII" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194832
  001c9	41 b8 ea 00 00
	00		 mov	 r8d, 234		; 000000eaH
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 3143 :     DIS_FAC_INS( E2,   "UNPKU   E2    UNPACK UNICODE" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr16@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194833
  001f2	41 b8 e2 00 00
	00		 mov	 r8d, 226		; 000000e2H
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr16:
$LN3@instr16:

; 3144 : }
; 3145 : END_DIS_FAC_INS_FUNC()

  00204	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00208	c3		 ret	 0
instr16	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr11	PROC

; 3123 : BEG_DIS_FAC_INS_FUNC( instr11 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr11
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr11@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr11
$LN2@instr11:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr11@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr11

; 3124 : {
; 3125 :     DIS_FAC_INS( B9A2, "PTF     B9A2  PERFORM TOPOLOGY FUNCTION" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr11@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194812
  00051	41 b8 a2 b9 00
	00		 mov	 r8d, 47522		; 0000b9a2H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr11:
$LN3@instr11:

; 3126 : }
; 3127 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr11	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr8	PROC

; 3115 : BEG_DIS_FAC_INS_FUNC( instr8 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr8
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr8@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr8
$LN2@instr8:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr8@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr8

; 3116 : {
; 3117 :     DIS_FAC_INS( B9AF, "PFMF    B9AF  PERFORM FRAME MANAGEMENT FUNCTION" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr8@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194801
  00051	41 b8 af b9 00
	00		 mov	 r8d, 47535		; 0000b9afH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr8:
$LN3@instr8:

; 3118 : }
; 3119 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr8	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr7	PROC

; 3107 : BEG_DIS_FAC_INS_FUNC( instr7 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr7
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr7@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 3c		 jmp	 SHORT $LN3@instr7
$LN2@instr7:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr7@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 29		 jne	 SHORT $LN4@instr7

; 3108 : {
; 3109 :     DIS_FAC_INS( B2B0, "STFLE   B2B0  STORE FACILITY LIST EXTENDED" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr7@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194790
  00051	41 b8 b0 b2 00
	00		 mov	 r8d, 45744		; 0000b2b0H
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr7:
$LN3@instr7:

; 3110 : }
; 3111 : END_DIS_FAC_INS_FUNC()

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
instr7	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr6	PROC

; 3096 : BEG_DIS_FAC_INS_FUNC( instr6 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr6
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr6@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 bb 00 00 00	 jmp	 $LN3@instr6
$LN2@instr6:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr6@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 a4 00 00
	00		 jne	 $LN4@instr6

; 3097 : {
; 3098 :     DIS_FAC_INS( B99A, "EPAIR   B99A  EXTRACT PRIMARY ASN AND INSTANCE" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr6@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194776
  00058	41 b8 9a b9 00
	00		 mov	 r8d, 47514		; 0000b99aH
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3099 :     DIS_FAC_INS( B99B, "ESAIR   B99B  EXTRACT SECONDARY ASN AND INSTANCE" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr6@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194777
  00081	41 b8 9b b9 00
	00		 mov	 r8d, 47515		; 0000b99bH
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3100 :     DIS_FAC_INS( B99E, "PTI     B99E  PROGRAM TRANSFER WITH INSTANCE" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr6@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194778
  000aa	41 b8 9e b9 00
	00		 mov	 r8d, 47518		; 0000b99eH
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3101 :     DIS_FAC_INS( B99F, "SSAIR   B99F  SET SECONDARY ASN WITH INSTANCE" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr6@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194779
  000d3	41 b8 9f b9 00
	00		 mov	 r8d, 47519		; 0000b99fH
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr6:
$LN3@instr6:

; 3102 : }
; 3103 : END_DIS_FAC_INS_FUNC()

  000e5	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000e9	c3		 ret	 0
instr6	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr3	PROC

; 3087 : BEG_DIS_FAC_INS_FUNC( instr3 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 12		 je	 SHORT $LN2@instr3
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr3@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	eb 65		 jmp	 SHORT $LN3@instr3
$LN2@instr3:
  00027	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr3@@9@9
  00033	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00038	75 52		 jne	 SHORT $LN4@instr3

; 3088 : {
; 3089 :     DIS_FAC_INS( B98A, "CSPG    B98A  COMPARE AND SWAP AND PURGE (64)" );

  0003a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr3@@9@9
  00046	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194764
  00051	41 b8 8a b9 00
	00		 mov	 r8d, 47498		; 0000b98aH
  00057	48 8b d0	 mov	 rdx, rax
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0005e	e8 00 00 00 00	 call	 dis_fac_ins

; 3090 :     DIS_FAC_INS( B98E, "IDTE    B98E  INVALIDATE DAT TABLE ENTRY" );

  00063	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr3@@9@9
  0006f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00073	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194765
  0007a	41 b8 8e b9 00
	00		 mov	 r8d, 47502		; 0000b98eH
  00080	48 8b d0	 mov	 rdx, rax
  00083	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00087	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr3:
$LN3@instr3:

; 3091 : }
; 3092 : END_DIS_FAC_INS_FUNC()

  0008c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00090	c3		 ret	 0
instr3	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 48
enable$ = 56
instr0	PROC

; 3058 : BEG_DIS_FAC_INS_FUNC( instr0 )

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000c	0f b6 44 24 38	 movzx	 eax, BYTE PTR enable$[rsp]
  00011	85 c0		 test	 eax, eax
  00013	74 15		 je	 SHORT $LN2@instr0
  00015	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  0001c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00020	e8 00 00 00 00	 call	 ena_fac_ins
  00025	e9 9d 03 00 00	 jmp	 $LN3@instr0
$LN2@instr0:
  0002a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  00036	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0003b	0f 85 86 03 00
	00		 jne	 $LN4@instr0

; 3059 : {
; 3060 :     DIS_FAC_INS( B998, "ALCR    B998  ADD LOGICAL WITH CARRY (32)" );

  00041	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  0004d	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00051	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194732
  00058	41 b8 98 b9 00
	00		 mov	 r8d, 47512		; 0000b998H
  0005e	48 8b d0	 mov	 rdx, rax
  00061	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00065	e8 00 00 00 00	 call	 dis_fac_ins

; 3061 :     DIS_FAC_INS( E398, "ALC     E398  ADD LOGICAL WITH CARRY (32)" );

  0006a	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  00076	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0007a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194733
  00081	41 b8 98 e3 00
	00		 mov	 r8d, 58264		; 0000e398H
  00087	48 8b d0	 mov	 rdx, rax
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 dis_fac_ins

; 3062 :     DIS_FAC_INS( C005, "BRASL   C005  BRANCH RELATIVE AND SAVE LONG" );

  00093	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  0009f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194734
  000aa	41 b8 05 c0 00
	00		 mov	 r8d, 49157		; 0000c005H
  000b0	48 8b d0	 mov	 rdx, rax
  000b3	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000b7	e8 00 00 00 00	 call	 dis_fac_ins

; 3063 :     DIS_FAC_INS( C004, "BRCL    C004  BRANCH RELATIVE ON CONDITION LONG" );

  000bc	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  000c8	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000cc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194735
  000d3	41 b8 04 c0 00
	00		 mov	 r8d, 49156		; 0000c004H
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  000e0	e8 00 00 00 00	 call	 dis_fac_ins

; 3064 :     DIS_FAC_INS( B997, "DLR     B997  DIVIDE LOGICAL (32 <- 64)" );

  000e5	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  000f1	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  000f5	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194736
  000fc	41 b8 97 b9 00
	00		 mov	 r8d, 47511		; 0000b997H
  00102	48 8b d0	 mov	 rdx, rax
  00105	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00109	e8 00 00 00 00	 call	 dis_fac_ins

; 3065 :     DIS_FAC_INS( E397, "DL      E397  DIVIDE LOGICAL (32 <- 64)" );

  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00113	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  0011a	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0011e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194737
  00125	41 b8 97 e3 00
	00		 mov	 r8d, 58263		; 0000e397H
  0012b	48 8b d0	 mov	 rdx, rax
  0012e	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00132	e8 00 00 00 00	 call	 dis_fac_ins

; 3066 :     DIS_FAC_INS( B98D, "EPSW    B98D  EXTRACT PSW" );

  00137	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  00143	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00147	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194738
  0014e	41 b8 8d b9 00
	00		 mov	 r8d, 47501		; 0000b98dH
  00154	48 8b d0	 mov	 rdx, rax
  00157	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0015b	e8 00 00 00 00	 call	 dis_fac_ins

; 3067 :     DIS_FAC_INS( C000, "LARL    C000  LOAD ADDRESS RELATIVE LONG" );

  00160	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  0016c	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00170	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194739
  00177	41 b8 00 c0 00
	00		 mov	 r8d, 49152		; 0000c000H
  0017d	48 8b d0	 mov	 rdx, rax
  00180	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00184	e8 00 00 00 00	 call	 dis_fac_ins

; 3068 :     DIS_FAC_INS( B91F, "LRVR    B91F  LOAD REVERSED (32)" );

  00189	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  00195	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00199	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194740
  001a0	41 b8 1f b9 00
	00		 mov	 r8d, 47391		; 0000b91fH
  001a6	48 8b d0	 mov	 rdx, rax
  001a9	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ad	e8 00 00 00 00	 call	 dis_fac_ins

; 3069 :     DIS_FAC_INS( E31E, "LRV     E31E  LOAD REVERSED (32)" );

  001b2	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  001be	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194741
  001c9	41 b8 1e e3 00
	00		 mov	 r8d, 58142		; 0000e31eH
  001cf	48 8b d0	 mov	 rdx, rax
  001d2	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001d6	e8 00 00 00 00	 call	 dis_fac_ins

; 3070 :     DIS_FAC_INS( E31F, "LRVH    E31F  LOAD REVERSED (16)" );

  001db	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  001e7	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194742
  001f2	41 b8 1f e3 00
	00		 mov	 r8d, 58143		; 0000e31fH
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  001ff	e8 00 00 00 00	 call	 dis_fac_ins

; 3071 :     DIS_FAC_INS( B996, "MLR     B996  MULTIPLY LOGICAL (64 <- 32)" );

  00204	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  00210	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00214	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194743
  0021b	41 b8 96 b9 00
	00		 mov	 r8d, 47510		; 0000b996H
  00221	48 8b d0	 mov	 rdx, rax
  00224	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00228	e8 00 00 00 00	 call	 dis_fac_ins

; 3072 :     DIS_FAC_INS( E396, "ML      E396  MULTIPLY LOGICAL (64 <- 32)" );

  0022d	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00232	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  00239	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0023d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194744
  00244	41 b8 96 e3 00
	00		 mov	 r8d, 58262		; 0000e396H
  0024a	48 8b d0	 mov	 rdx, rax
  0024d	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00251	e8 00 00 00 00	 call	 dis_fac_ins

; 3073 :     DIS_FAC_INS( EB1D, "RLL     EB1D  ROTATE LEFT SINGLE LOGICAL (32)" );

  00256	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  00262	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00266	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194745
  0026d	41 b8 1d eb 00
	00		 mov	 r8d, 60189		; 0000eb1dH
  00273	48 8b d0	 mov	 rdx, rax
  00276	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0027a	e8 00 00 00 00	 call	 dis_fac_ins

; 3074 :     DIS_FAC_INS( 010C, "SAM24   010C  SET ADDRESSING MODE (24)" );

  0027f	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00284	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  0028b	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0028f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194746
  00296	41 b8 0c 01 00
	00		 mov	 r8d, 268		; 0000010cH
  0029c	48 8b d0	 mov	 rdx, rax
  0029f	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002a3	e8 00 00 00 00	 call	 dis_fac_ins

; 3075 :     DIS_FAC_INS( 010D, "SAM31   010D  SET ADDRESSING MODE (31)" );

  002a8	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  002b4	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002b8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194747
  002bf	41 b8 0d 01 00
	00		 mov	 r8d, 269		; 0000010dH
  002c5	48 8b d0	 mov	 rdx, rax
  002c8	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002cc	e8 00 00 00 00	 call	 dis_fac_ins

; 3076 :     DIS_FAC_INS( B2B1, "STFL    B2B1  STORE FACILITY LIST" );

  002d1	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  002dd	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  002e1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194748
  002e8	41 b8 b1 b2 00
	00		 mov	 r8d, 45745		; 0000b2b1H
  002ee	48 8b d0	 mov	 rdx, rax
  002f1	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  002f5	e8 00 00 00 00	 call	 dis_fac_ins

; 3077 :     DIS_FAC_INS( E33E, "STRV    E33E  STORE REVERSED (32)" );

  002fa	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  002ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  00306	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0030a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194749
  00311	41 b8 3e e3 00
	00		 mov	 r8d, 58174		; 0000e33eH
  00317	48 8b d0	 mov	 rdx, rax
  0031a	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  0031e	e8 00 00 00 00	 call	 dis_fac_ins

; 3078 :     DIS_FAC_INS( E33F, "STRVH   E33F  STORE REVERSED (16)" );

  00323	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  0032f	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00333	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194750
  0033a	41 b8 3f e3 00
	00		 mov	 r8d, 58175		; 0000e33fH
  00340	48 8b d0	 mov	 rdx, rax
  00343	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00347	e8 00 00 00 00	 call	 dis_fac_ins

; 3079 :     DIS_FAC_INS( B999, "SLBR    B999  SUBTRACT LOGICAL WITH BORROW (32)" );

  0034c	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  00351	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  00358	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0035c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194751
  00363	41 b8 99 b9 00
	00		 mov	 r8d, 47513		; 0000b999H
  00369	48 8b d0	 mov	 rdx, rax
  0036c	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00370	e8 00 00 00 00	 call	 dis_fac_ins

; 3080 :     DIS_FAC_INS( E399, "SLB     E399  SUBTRACT LOGICAL WITH BORROW (32)" );

  00375	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  00381	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00385	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194752
  0038c	41 b8 99 e3 00
	00		 mov	 r8d, 58265		; 0000e399H
  00392	48 8b d0	 mov	 rdx, rax
  00395	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  00399	e8 00 00 00 00	 call	 dis_fac_ins

; 3081 :     DIS_FAC_INS( 010B, "TAM     010B  TEST ADDRESSING MODE" );

  0039e	48 63 44 24 30	 movsxd	 rax, DWORD PTR arch$[rsp]
  003a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?hdl_ins@?1??instr0@@9@9
  003aa	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  003ae	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG194753
  003b5	41 b8 0b 01 00
	00		 mov	 r8d, 267		; 0000010bH
  003bb	48 8b d0	 mov	 rdx, rax
  003be	8b 4c 24 30	 mov	 ecx, DWORD PTR arch$[rsp]
  003c2	e8 00 00 00 00	 call	 dis_fac_ins
$LN4@instr0:
$LN3@instr0:

; 3082 : }
; 3083 : END_DIS_FAC_INS_FUNC()

  003c7	48 83 c4 28	 add	 rsp, 40			; 00000028H
  003cb	c3		 ret	 0
instr0	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv79 = 64
tv91 = 68
tv93 = 72
tv139 = 76
tv151 = 80
tv153 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
modtcp	PROC

; 2858 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@modtcp:

; 2859 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@modtcp

; 2860 : 
; 2861 :     if (enable)

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 ec 00 00
	00		 je	 $LN5@modtcp

; 2862 :     {
; 2863 :         if (bitno == STFL_HERC_TCPIP_PROB_STATE)

  00029	48 63 44 24 78	 movsxd	 rax, DWORD PTR bitno$[rsp]
  0002e	48 3d 11 01 00
	00		 cmp	 rax, 273		; 00000111H
  00034	0f 85 d6 00 00
	00		 jne	 $LN7@modtcp

; 2864 :         {
; 2865 :             if (!FACILITY_ENABLED_ARCH( HERC_TCPIP_EXTENSION, archnum ))

  0003a	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00042	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00046	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004d	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00055	b9 01 00 00 00	 mov	 ecx, 1
  0005a	48 6b c9 22	 imul	 rcx, rcx, 34		; 00000022H
  0005e	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00062	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00067	85 c0		 test	 eax, eax
  00069	0f 85 a1 00 00
	00		 jne	 $LN8@modtcp

; 2866 :                 return HHC00890E(  STFL_HERC_TCPIP_EXTENSION );

  0006f	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00078	75 0a		 jne	 SHORT $LN12@modtcp
  0007a	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
  00082	eb 08		 jmp	 SHORT $LN13@modtcp
$LN12@modtcp:
  00084	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
$LN13@modtcp:
  0008c	83 7c 24 40 00	 cmp	 DWORD PTR tv79[rsp], 0
  00091	74 0a		 je	 SHORT $LN14@modtcp
  00093	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  0009b	eb 50		 jmp	 SHORT $LN15@modtcp
$LN14@modtcp:
  0009d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194689
  000a4	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000a9	c7 44 24 30 32
	0b 00 00	 mov	 DWORD PTR [rsp+48], 2866 ; 00000b32H
  000b1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194690
  000b8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000bd	c7 44 24 20 10
	01 00 00	 mov	 DWORD PTR [rsp+32], 272	; 00000110H
  000c5	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000cd	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000d5	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000dd	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000e1	e8 00 00 00 00	 call	 _hhc00890e
  000e6	0f b6 c0	 movzx	 eax, al
  000e9	89 44 24 44	 mov	 DWORD PTR tv91[rsp], eax
$LN15@modtcp:
  000ed	83 7c 24 44 00	 cmp	 DWORD PTR tv91[rsp], 0
  000f2	75 0a		 jne	 SHORT $LN16@modtcp
  000f4	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv93[rsp], 0
  000fc	eb 08		 jmp	 SHORT $LN17@modtcp
$LN16@modtcp:
  000fe	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv93[rsp], 1
$LN17@modtcp:
  00106	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv93[rsp]
  0010b	e9 e9 00 00 00	 jmp	 $LN1@modtcp
$LN8@modtcp:
$LN7@modtcp:

; 2867 :         }
; 2868 :     }

  00110	e9 e2 00 00 00	 jmp	 $LN6@modtcp
$LN5@modtcp:

; 2869 :     else // disabling
; 2870 :     {
; 2871 :         if (bitno == STFL_HERC_TCPIP_EXTENSION)

  00115	48 63 44 24 78	 movsxd	 rax, DWORD PTR bitno$[rsp]
  0011a	48 3d 10 01 00
	00		 cmp	 rax, 272		; 00000110H
  00120	0f 85 d1 00 00
	00		 jne	 $LN9@modtcp

; 2872 :         {
; 2873 :             if (FACILITY_ENABLED_ARCH( HERC_TCPIP_PROB_STATE, archnum ))

  00126	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0012e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00132	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00139	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00141	b9 01 00 00 00	 mov	 ecx, 1
  00146	48 6b c9 22	 imul	 rcx, rcx, 34		; 00000022H
  0014a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0014e	83 e0 40	 and	 eax, 64			; 00000040H
  00151	85 c0		 test	 eax, eax
  00153	0f 84 9e 00 00
	00		 je	 $LN10@modtcp

; 2874 :                 return HHC00890E( STFL_HERC_TCPIP_PROB_STATE );

  00159	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00162	75 0a		 jne	 SHORT $LN18@modtcp
  00164	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv139[rsp], 1
  0016c	eb 08		 jmp	 SHORT $LN19@modtcp
$LN18@modtcp:
  0016e	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv139[rsp], 0
$LN19@modtcp:
  00176	83 7c 24 4c 00	 cmp	 DWORD PTR tv139[rsp], 0
  0017b	74 0a		 je	 SHORT $LN20@modtcp
  0017d	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv151[rsp], 0
  00185	eb 50		 jmp	 SHORT $LN21@modtcp
$LN20@modtcp:
  00187	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194693
  0018e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00193	c7 44 24 30 3a
	0b 00 00	 mov	 DWORD PTR [rsp+48], 2874 ; 00000b3aH
  0019b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194694
  001a2	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001a7	c7 44 24 20 11
	01 00 00	 mov	 DWORD PTR [rsp+32], 273	; 00000111H
  001af	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  001b7	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  001bf	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  001c7	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001cb	e8 00 00 00 00	 call	 _hhc00890e
  001d0	0f b6 c0	 movzx	 eax, al
  001d3	89 44 24 50	 mov	 DWORD PTR tv151[rsp], eax
$LN21@modtcp:
  001d7	83 7c 24 50 00	 cmp	 DWORD PTR tv151[rsp], 0
  001dc	75 0a		 jne	 SHORT $LN22@modtcp
  001de	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv153[rsp], 0
  001e6	eb 08		 jmp	 SHORT $LN23@modtcp
$LN22@modtcp:
  001e8	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv153[rsp], 1
$LN23@modtcp:
  001f0	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv153[rsp]
  001f5	eb 02		 jmp	 SHORT $LN1@modtcp
$LN10@modtcp:
$LN9@modtcp:
$LN6@modtcp:

; 2875 :         }
; 2876 :     }
; 2877 :     return true;

  001f7	b0 01		 mov	 al, 1
$LN1@modtcp:

; 2878 : }

  001f9	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001fd	c3		 ret	 0
modtcp	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod197	PROC

; 2841 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod197:

; 2842 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod197

; 2843 : 
; 2844 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod197

; 2845 :     {
; 2846 :         if (!FACILITY_ENABLED_ARCH( 196_PROC_ACT, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 18	 imul	 rcx, rcx, 24
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 08	 and	 eax, 8
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod197

; 2847 :             return HHC00890E(  STFL_196_PROC_ACT );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod197
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod197
$LN8@mod197:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod197:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod197
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod197
$LN10@mod197:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194617
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 1f
	0b 00 00	 mov	 DWORD PTR [rsp+48], 2847 ; 00000b1fH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194618
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 c4
	00 00 00	 mov	 DWORD PTR [rsp+32], 196	; 000000c4H
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod197:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod197
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod197
$LN12@mod197:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod197:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod197
$LN6@mod197:
$LN5@mod197:

; 2848 :     }
; 2849 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod197:

; 2850 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod197	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod196	PROC

; 2824 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod196:

; 2825 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod196

; 2826 : 
; 2827 :     if (!enable) // disabling

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 c8 00 00
	00		 jne	 $LN5@mod196

; 2828 :     {
; 2829 :         if (FACILITY_ENABLED_ARCH( 197_PROC_ACT_EXT_1, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 18	 imul	 rcx, rcx, 24
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 04	 and	 eax, 4
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod196

; 2830 :             return HHC00890E( STFL_197_PROC_ACT_EXT_1 );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod196
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod196
$LN8@mod196:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod196:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod196
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod196
$LN10@mod196:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194595
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 0e
	0b 00 00	 mov	 DWORD PTR [rsp+48], 2830 ; 00000b0eH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194596
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 c5
	00 00 00	 mov	 DWORD PTR [rsp+32], 197	; 000000c5H
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod196:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod196
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod196
$LN12@mod196:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod196:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod196
$LN6@mod196:
$LN5@mod196:

; 2831 :     }
; 2832 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod196:

; 2833 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod196	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod194	PROC

; 2807 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod194:

; 2808 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod194

; 2809 : 
; 2810 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod194

; 2811 :     {
; 2812 :         if (!FACILITY_ENABLED_ARCH( 051_LOCAL_TLB_CLEARING, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 06	 imul	 rcx, rcx, 6
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 10	 and	 eax, 16
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod194

; 2813 :             return HHC00890E(  STFL_051_LOCAL_TLB_CLEARING );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod194
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod194
$LN8@mod194:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod194:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod194
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod194
$LN10@mod194:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194573
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 fd
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2813 ; 00000afdH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194574
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 33
	00 00 00	 mov	 DWORD PTR [rsp+32], 51	; 00000033H
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod194:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod194
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod194
$LN12@mod194:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod194:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod194
$LN6@mod194:
$LN5@mod194:

; 2814 :     }
; 2815 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod194:

; 2816 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod194	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
tv161 = 88
tv173 = 92
tv175 = 96
enable$ = 128
bitno$ = 136
archnum$ = 144
action$ = 152
actioning$ = 160
opp_actioning$ = 168
target_facname$ = 176
mod192	PROC

; 2784 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 78	 sub	 rsp, 120		; 00000078H
$LN4@mod192:

; 2785 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod192

; 2786 : 
; 2787 :     if (enable)

  0001c	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR enable$[rsp]
  00024	85 c0		 test	 eax, eax
  00026	0f 84 84 02 00
	00		 je	 $LN5@mod192

; 2788 :     {
; 2789 :         if (!FACILITY_ENABLED_ARCH( 129_ZVECTOR , archnum ))

  0002c	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00034	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00038	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003f	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00047	b9 01 00 00 00	 mov	 ecx, 1
  0004c	48 6b c9 10	 imul	 rcx, rcx, 16
  00050	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00054	83 e0 40	 and	 eax, 64			; 00000040H
  00057	85 c0		 test	 eax, eax
  00059	0f 85 a4 00 00
	00		 jne	 $LN6@mod192

; 2790 :             return HHC00890E(  STFL_129_ZVECTOR );

  0005f	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00068	75 0a		 jne	 SHORT $LN10@mod192
  0006a	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00072	eb 08		 jmp	 SHORT $LN11@mod192
$LN10@mod192:
  00074	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN11@mod192:
  0007c	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00081	74 0a		 je	 SHORT $LN12@mod192
  00083	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  0008b	eb 53		 jmp	 SHORT $LN13@mod192
$LN12@mod192:
  0008d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194545
  00094	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00099	c7 44 24 30 e6
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2790 ; 00000ae6H
  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194546
  000a8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ad	c7 44 24 20 81
	00 00 00	 mov	 DWORD PTR [rsp+32], 129	; 00000081H
  000b5	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000bd	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c5	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000cd	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  000d4	e8 00 00 00 00	 call	 _hhc00890e
  000d9	0f b6 c0	 movzx	 eax, al
  000dc	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN13@mod192:
  000e0	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000e5	75 0a		 jne	 SHORT $LN14@mod192
  000e7	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000ef	eb 08		 jmp	 SHORT $LN15@mod192
$LN14@mod192:
  000f1	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN15@mod192:
  000f9	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000fe	e9 af 01 00 00	 jmp	 $LN1@mod192
$LN6@mod192:

; 2791 : 
; 2792 :         if (!FACILITY_ENABLED_ARCH( 134_ZVECTOR_PACK_DEC, archnum ))

  00103	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0010b	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0010f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00116	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0011e	b9 01 00 00 00	 mov	 ecx, 1
  00123	48 6b c9 10	 imul	 rcx, rcx, 16
  00127	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0012b	83 e0 02	 and	 eax, 2
  0012e	85 c0		 test	 eax, eax
  00130	0f 85 a4 00 00
	00		 jne	 $LN7@mod192

; 2793 :             return HHC00890E(  STFL_134_ZVECTOR_PACK_DEC );

  00136	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  0013f	75 0a		 jne	 SHORT $LN16@mod192
  00141	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00149	eb 08		 jmp	 SHORT $LN17@mod192
$LN16@mod192:
  0014b	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN17@mod192:
  00153	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00158	74 0a		 je	 SHORT $LN18@mod192
  0015a	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  00162	eb 53		 jmp	 SHORT $LN19@mod192
$LN18@mod192:
  00164	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194548
  0016b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00170	c7 44 24 30 e9
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2793 ; 00000ae9H
  00178	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194549
  0017f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00184	c7 44 24 20 86
	00 00 00	 mov	 DWORD PTR [rsp+32], 134	; 00000086H
  0018c	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  00194	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  0019c	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  001a4	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  001ab	e8 00 00 00 00	 call	 _hhc00890e
  001b0	0f b6 c0	 movzx	 eax, al
  001b3	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN19@mod192:
  001b7	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001bc	75 0a		 jne	 SHORT $LN20@mod192
  001be	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001c6	eb 08		 jmp	 SHORT $LN21@mod192
$LN20@mod192:
  001c8	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN21@mod192:
  001d0	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001d5	e9 d8 00 00 00	 jmp	 $LN1@mod192
$LN7@mod192:

; 2794 : 
; 2795 :         if (!FACILITY_ENABLED_ARCH( 152_VECT_PACKDEC_ENH, archnum ))

  001da	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  001e2	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  001e6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001ed	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  001f5	b9 01 00 00 00	 mov	 ecx, 1
  001fa	48 6b c9 13	 imul	 rcx, rcx, 19
  001fe	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00202	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00207	85 c0		 test	 eax, eax
  00209	0f 85 a1 00 00
	00		 jne	 $LN8@mod192

; 2796 :             return HHC00890E(  STFL_152_VECT_PACKDEC_ENH );

  0020f	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00218	75 0a		 jne	 SHORT $LN22@mod192
  0021a	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv161[rsp], 1
  00222	eb 08		 jmp	 SHORT $LN23@mod192
$LN22@mod192:
  00224	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv161[rsp], 0
$LN23@mod192:
  0022c	83 7c 24 58 00	 cmp	 DWORD PTR tv161[rsp], 0
  00231	74 0a		 je	 SHORT $LN24@mod192
  00233	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv173[rsp], 0
  0023b	eb 53		 jmp	 SHORT $LN25@mod192
$LN24@mod192:
  0023d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194551
  00244	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00249	c7 44 24 30 ec
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2796 ; 00000aecH
  00251	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194552
  00258	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0025d	c7 44 24 20 98
	00 00 00	 mov	 DWORD PTR [rsp+32], 152	; 00000098H
  00265	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0026d	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00275	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0027d	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  00284	e8 00 00 00 00	 call	 _hhc00890e
  00289	0f b6 c0	 movzx	 eax, al
  0028c	89 44 24 5c	 mov	 DWORD PTR tv173[rsp], eax
$LN25@mod192:
  00290	83 7c 24 5c 00	 cmp	 DWORD PTR tv173[rsp], 0
  00295	75 0a		 jne	 SHORT $LN26@mod192
  00297	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv175[rsp], 0
  0029f	eb 08		 jmp	 SHORT $LN27@mod192
$LN26@mod192:
  002a1	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv175[rsp], 1
$LN27@mod192:
  002a9	0f b6 44 24 60	 movzx	 eax, BYTE PTR tv175[rsp]
  002ae	eb 02		 jmp	 SHORT $LN1@mod192
$LN8@mod192:
$LN5@mod192:

; 2797 :     }
; 2798 :     return true;

  002b0	b0 01		 mov	 al, 1
$LN1@mod192:

; 2799 : }

  002b2	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002b6	c3		 ret	 0
mod192	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
tv161 = 88
tv173 = 92
tv175 = 96
tv187 = 100
tv199 = 104
tv201 = 108
tv213 = 112
tv225 = 116
tv227 = 120
enable$ = 144
bitno$ = 152
archnum$ = 160
action$ = 168
actioning$ = 176
opp_actioning$ = 184
target_facname$ = 192
mod169	PROC

; 2755 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H
$LN4@mod169:

; 2756 :     UNREFERENCED( actioning );

  00019	33 c0		 xor	 eax, eax
  0001b	85 c0		 test	 eax, eax
  0001d	75 fa		 jne	 SHORT $LN4@mod169

; 2757 : 
; 2758 :     if (enable)

  0001f	0f b6 84 24 90
	00 00 00	 movzx	 eax, BYTE PTR enable$[rsp]
  00027	85 c0		 test	 eax, eax
  00029	0f 84 30 04 00
	00		 je	 $LN5@mod169

; 2759 :     {
; 2760 :         if (FACILITY_ENABLED_ARCH(     010_CONDITIONAL_SSKE, archnum ))

  0002f	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00037	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00042	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0004a	b9 01 00 00 00	 mov	 ecx, 1
  0004f	48 6b c9 01	 imul	 rcx, rcx, 1
  00053	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00057	83 e0 20	 and	 eax, 32			; 00000020H
  0005a	85 c0		 test	 eax, eax
  0005c	0f 84 a4 00 00
	00		 je	 $LN6@mod169

; 2761 :             return HHC00890E_OPP( STFL_010_CONDITIONAL_SSKE );

  00062	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  0006b	75 0a		 jne	 SHORT $LN12@mod169
  0006d	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00075	eb 08		 jmp	 SHORT $LN13@mod169
$LN12@mod169:
  00077	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN13@mod169:
  0007f	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00084	74 0a		 je	 SHORT $LN14@mod169
  00086	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  0008e	eb 53		 jmp	 SHORT $LN15@mod169
$LN14@mod169:
  00090	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194511
  00097	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0009c	c7 44 24 30 c9
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2761 ; 00000ac9H
  000a4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194512
  000ab	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000b0	c7 44 24 20 0a
	00 00 00	 mov	 DWORD PTR [rsp+32], 10
  000b8	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR opp_actioning$[rsp]
  000c0	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c8	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000d0	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  000d7	e8 00 00 00 00	 call	 _hhc00890e
  000dc	0f b6 c0	 movzx	 eax, al
  000df	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN15@mod169:
  000e3	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000e8	75 0a		 jne	 SHORT $LN16@mod169
  000ea	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000f2	eb 08		 jmp	 SHORT $LN17@mod169
$LN16@mod169:
  000f4	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN17@mod169:
  000fc	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  00101	e9 5b 03 00 00	 jmp	 $LN1@mod169
$LN6@mod169:

; 2762 : 
; 2763 :         if (FACILITY_ENABLED_ARCH(     014_NONQ_KEY_SET, archnum ))

  00106	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0010e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00112	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00119	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00121	b9 01 00 00 00	 mov	 ecx, 1
  00126	48 6b c9 01	 imul	 rcx, rcx, 1
  0012a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0012e	83 e0 02	 and	 eax, 2
  00131	85 c0		 test	 eax, eax
  00133	0f 84 a4 00 00
	00		 je	 $LN7@mod169

; 2764 :             return HHC00890E_OPP( STFL_014_NONQ_KEY_SET );

  00139	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00142	75 0a		 jne	 SHORT $LN18@mod169
  00144	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  0014c	eb 08		 jmp	 SHORT $LN19@mod169
$LN18@mod169:
  0014e	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN19@mod169:
  00156	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  0015b	74 0a		 je	 SHORT $LN20@mod169
  0015d	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  00165	eb 53		 jmp	 SHORT $LN21@mod169
$LN20@mod169:
  00167	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194514
  0016e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00173	c7 44 24 30 cc
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2764 ; 00000accH
  0017b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194515
  00182	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00187	c7 44 24 20 0e
	00 00 00	 mov	 DWORD PTR [rsp+32], 14
  0018f	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR opp_actioning$[rsp]
  00197	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  0019f	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  001a7	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  001ae	e8 00 00 00 00	 call	 _hhc00890e
  001b3	0f b6 c0	 movzx	 eax, al
  001b6	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN21@mod169:
  001ba	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001bf	75 0a		 jne	 SHORT $LN22@mod169
  001c1	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001c9	eb 08		 jmp	 SHORT $LN23@mod169
$LN22@mod169:
  001cb	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN23@mod169:
  001d3	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001d8	e9 84 02 00 00	 jmp	 $LN1@mod169
$LN7@mod169:

; 2765 : 
; 2766 :         if (FACILITY_ENABLED_ARCH(     066_RES_REF_BITS_MULT, archnum ))

  001dd	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  001e5	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  001e9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001f0	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  001f8	b9 01 00 00 00	 mov	 ecx, 1
  001fd	48 6b c9 08	 imul	 rcx, rcx, 8
  00201	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00205	83 e0 20	 and	 eax, 32			; 00000020H
  00208	85 c0		 test	 eax, eax
  0020a	0f 84 a4 00 00
	00		 je	 $LN8@mod169

; 2767 :             return HHC00890E_OPP( STFL_066_RES_REF_BITS_MULT );

  00210	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00219	75 0a		 jne	 SHORT $LN24@mod169
  0021b	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv161[rsp], 1
  00223	eb 08		 jmp	 SHORT $LN25@mod169
$LN24@mod169:
  00225	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv161[rsp], 0
$LN25@mod169:
  0022d	83 7c 24 58 00	 cmp	 DWORD PTR tv161[rsp], 0
  00232	74 0a		 je	 SHORT $LN26@mod169
  00234	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv173[rsp], 0
  0023c	eb 53		 jmp	 SHORT $LN27@mod169
$LN26@mod169:
  0023e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194517
  00245	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0024a	c7 44 24 30 cf
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2767 ; 00000acfH
  00252	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194518
  00259	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0025e	c7 44 24 20 42
	00 00 00	 mov	 DWORD PTR [rsp+32], 66	; 00000042H
  00266	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR opp_actioning$[rsp]
  0026e	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00276	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0027e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  00285	e8 00 00 00 00	 call	 _hhc00890e
  0028a	0f b6 c0	 movzx	 eax, al
  0028d	89 44 24 5c	 mov	 DWORD PTR tv173[rsp], eax
$LN27@mod169:
  00291	83 7c 24 5c 00	 cmp	 DWORD PTR tv173[rsp], 0
  00296	75 0a		 jne	 SHORT $LN28@mod169
  00298	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv175[rsp], 0
  002a0	eb 08		 jmp	 SHORT $LN29@mod169
$LN28@mod169:
  002a2	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv175[rsp], 1
$LN29@mod169:
  002aa	0f b6 44 24 60	 movzx	 eax, BYTE PTR tv175[rsp]
  002af	e9 ad 01 00 00	 jmp	 $LN1@mod169
$LN8@mod169:

; 2768 : 
; 2769 :         if (FACILITY_ENABLED_ARCH(     145_INS_REF_BITS_MULT, archnum ))

  002b4	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  002bc	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  002c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002c7	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  002cf	b9 01 00 00 00	 mov	 ecx, 1
  002d4	48 6b c9 12	 imul	 rcx, rcx, 18
  002d8	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  002dc	83 e0 40	 and	 eax, 64			; 00000040H
  002df	85 c0		 test	 eax, eax
  002e1	0f 84 a4 00 00
	00		 je	 $LN9@mod169

; 2770 :             return HHC00890E_OPP( STFL_145_INS_REF_BITS_MULT );

  002e7	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  002f0	75 0a		 jne	 SHORT $LN30@mod169
  002f2	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv187[rsp], 1
  002fa	eb 08		 jmp	 SHORT $LN31@mod169
$LN30@mod169:
  002fc	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv187[rsp], 0
$LN31@mod169:
  00304	83 7c 24 64 00	 cmp	 DWORD PTR tv187[rsp], 0
  00309	74 0a		 je	 SHORT $LN32@mod169
  0030b	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv199[rsp], 0
  00313	eb 53		 jmp	 SHORT $LN33@mod169
$LN32@mod169:
  00315	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194520
  0031c	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00321	c7 44 24 30 d2
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2770 ; 00000ad2H
  00329	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194521
  00330	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00335	c7 44 24 20 91
	00 00 00	 mov	 DWORD PTR [rsp+32], 145	; 00000091H
  0033d	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR opp_actioning$[rsp]
  00345	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  0034d	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  00355	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  0035c	e8 00 00 00 00	 call	 _hhc00890e
  00361	0f b6 c0	 movzx	 eax, al
  00364	89 44 24 68	 mov	 DWORD PTR tv199[rsp], eax
$LN33@mod169:
  00368	83 7c 24 68 00	 cmp	 DWORD PTR tv199[rsp], 0
  0036d	75 0a		 jne	 SHORT $LN34@mod169
  0036f	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv201[rsp], 0
  00377	eb 08		 jmp	 SHORT $LN35@mod169
$LN34@mod169:
  00379	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv201[rsp], 1
$LN35@mod169:
  00381	0f b6 44 24 6c	 movzx	 eax, BYTE PTR tv201[rsp]
  00386	e9 d6 00 00 00	 jmp	 $LN1@mod169
$LN9@mod169:

; 2771 : 
; 2772 :         if (FACILITY_ENABLED_ARCH(     149_MOVEPAGE_SETKEY, archnum ))

  0038b	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00393	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00397	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0039e	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  003a6	b9 01 00 00 00	 mov	 ecx, 1
  003ab	48 6b c9 12	 imul	 rcx, rcx, 18
  003af	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  003b3	83 e0 04	 and	 eax, 4
  003b6	85 c0		 test	 eax, eax
  003b8	0f 84 a1 00 00
	00		 je	 $LN10@mod169

; 2773 :             return HHC00890E_OPP( STFL_149_MOVEPAGE_SETKEY );

  003be	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  003c7	75 0a		 jne	 SHORT $LN36@mod169
  003c9	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv213[rsp], 1
  003d1	eb 08		 jmp	 SHORT $LN37@mod169
$LN36@mod169:
  003d3	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv213[rsp], 0
$LN37@mod169:
  003db	83 7c 24 70 00	 cmp	 DWORD PTR tv213[rsp], 0
  003e0	74 0a		 je	 SHORT $LN38@mod169
  003e2	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv225[rsp], 0
  003ea	eb 53		 jmp	 SHORT $LN39@mod169
$LN38@mod169:
  003ec	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194523
  003f3	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  003f8	c7 44 24 30 d5
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2773 ; 00000ad5H
  00400	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194524
  00407	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0040c	c7 44 24 20 95
	00 00 00	 mov	 DWORD PTR [rsp+32], 149	; 00000095H
  00414	4c 8b 8c 24 b8
	00 00 00	 mov	 r9, QWORD PTR opp_actioning$[rsp]
  0041c	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00424	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0042c	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  00433	e8 00 00 00 00	 call	 _hhc00890e
  00438	0f b6 c0	 movzx	 eax, al
  0043b	89 44 24 74	 mov	 DWORD PTR tv225[rsp], eax
$LN39@mod169:
  0043f	83 7c 24 74 00	 cmp	 DWORD PTR tv225[rsp], 0
  00444	75 0a		 jne	 SHORT $LN40@mod169
  00446	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv227[rsp], 0
  0044e	eb 08		 jmp	 SHORT $LN41@mod169
$LN40@mod169:
  00450	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv227[rsp], 1
$LN41@mod169:
  00458	0f b6 44 24 78	 movzx	 eax, BYTE PTR tv227[rsp]
  0045d	eb 02		 jmp	 SHORT $LN1@mod169
$LN10@mod169:
$LN5@mod169:

; 2774 :     }
; 2775 :     return true;

  0045f	b0 01		 mov	 al, 1
$LN1@mod169:

; 2776 : }

  00461	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00468	c3		 ret	 0
mod169	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod168	PROC

; 2738 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod168:

; 2739 :     UNREFERENCED( actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod168

; 2740 : 
; 2741 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod168

; 2742 :     {
; 2743 :         if (FACILITY_ENABLED_ARCH(     002_ZARCH_ACTIVE, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 00	 imul	 rcx, rcx, 0
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 20	 and	 eax, 32			; 00000020H
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod168

; 2744 :             return HHC00890E_OPP( STFL_002_ZARCH_ACTIVE );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod168
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod168
$LN8@mod168:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod168:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod168
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod168
$LN10@mod168:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194489
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 b8
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2744 ; 00000ab8H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194490
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ac	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR opp_actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod168:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod168
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod168
$LN12@mod168:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod168:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod168
$LN6@mod168:
$LN5@mod168:

; 2745 :     }
; 2746 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod168:

; 2747 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod168	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod165	PROC

; 2718 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod165:

; 2719 :     UNREFERENCED( actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod165

; 2720 : 
; 2721 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod165

; 2722 :     {
; 2723 :         if (!FACILITY_ENABLED_ARCH(    129_ZVECTOR, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 10	 imul	 rcx, rcx, 16
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 40	 and	 eax, 64			; 00000040H
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod165

; 2724 :             return HHC00890E_OPP( STFL_129_ZVECTOR );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod165
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod165
$LN8@mod165:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod165:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod165
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod165
$LN10@mod165:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194467
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 a4
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2724 ; 00000aa4H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194468
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 81
	00 00 00	 mov	 DWORD PTR [rsp+32], 129	; 00000081H
  000ac	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR opp_actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod165:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod165
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod165
$LN12@mod165:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod165:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod165
$LN6@mod165:
$LN5@mod165:

; 2725 :     }
; 2726 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod165:

; 2727 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod165	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod155	PROC

; 2698 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod155:

; 2699 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod155

; 2700 : 
; 2701 :     if (enable)

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 a5 01 00
	00		 je	 $LN5@mod155

; 2702 :     {
; 2703 :         if (!FACILITY_ENABLED_ARCH( 076_MSA_EXTENSION_3, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 09	 imul	 rcx, rcx, 9
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 08	 and	 eax, 8
  00054	85 c0		 test	 eax, eax
  00056	0f 85 a1 00 00
	00		 jne	 $LN6@mod155

; 2704 :             return HHC00890E(  STFL_076_MSA_EXTENSION_3 );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN9@mod155
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN10@mod155
$LN9@mod155:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN10@mod155:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN11@mod155
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN12@mod155
$LN11@mod155:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194442
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 90
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2704 ; 00000a90H
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194443
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 4c
	00 00 00	 mov	 DWORD PTR [rsp+32], 76	; 0000004cH
  000b2	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN12@mod155:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN13@mod155
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN14@mod155
$LN13@mod155:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN14@mod155:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 d3 00 00 00	 jmp	 $LN1@mod155
$LN6@mod155:

; 2705 : 
; 2706 :         if (!FACILITY_ENABLED_ARCH( 077_MSA_EXTENSION_4, archnum ))

  000fd	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00105	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	48 6b c9 09	 imul	 rcx, rcx, 9
  00121	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00125	83 e0 04	 and	 eax, 4
  00128	85 c0		 test	 eax, eax
  0012a	0f 85 9e 00 00
	00		 jne	 $LN7@mod155

; 2707 :             return HHC00890E(  STFL_077_MSA_EXTENSION_4 );

  00130	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00139	75 0a		 jne	 SHORT $LN15@mod155
  0013b	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00143	eb 08		 jmp	 SHORT $LN16@mod155
$LN15@mod155:
  00145	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN16@mod155:
  0014d	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00152	74 0a		 je	 SHORT $LN17@mod155
  00154	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  0015c	eb 50		 jmp	 SHORT $LN18@mod155
$LN17@mod155:
  0015e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194445
  00165	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016a	c7 44 24 30 93
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2707 ; 00000a93H
  00172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194446
  00179	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0017e	c7 44 24 20 4d
	00 00 00	 mov	 DWORD PTR [rsp+32], 77	; 0000004dH
  00186	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0018e	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00196	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0019e	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a2	e8 00 00 00 00	 call	 _hhc00890e
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN18@mod155:
  001ae	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b3	75 0a		 jne	 SHORT $LN19@mod155
  001b5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001bd	eb 08		 jmp	 SHORT $LN20@mod155
$LN19@mod155:
  001bf	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN20@mod155:
  001c7	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001cc	eb 02		 jmp	 SHORT $LN1@mod155
$LN7@mod155:
$LN5@mod155:

; 2708 :     }
; 2709 :     return true;

  001ce	b0 01		 mov	 al, 1
$LN1@mod155:

; 2710 : }

  001d0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d4	c3		 ret	 0
mod155	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
tv161 = 88
tv173 = 92
tv175 = 96
enable$ = 128
bitno$ = 136
archnum$ = 144
action$ = 152
actioning$ = 160
opp_actioning$ = 168
target_facname$ = 176
mod152	PROC

; 2673 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 78	 sub	 rsp, 120		; 00000078H
$LN4@mod152:

; 2674 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod152

; 2675 : 
; 2676 :     if (enable)

  0001c	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR enable$[rsp]
  00024	85 c0		 test	 eax, eax
  00026	0f 84 b3 01 00
	00		 je	 $LN5@mod152

; 2677 :     {
; 2678 :         if (!FACILITY_ENABLED_ARCH( 129_ZVECTOR, archnum ))

  0002c	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00034	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00038	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003f	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00047	b9 01 00 00 00	 mov	 ecx, 1
  0004c	48 6b c9 10	 imul	 rcx, rcx, 16
  00050	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00054	83 e0 40	 and	 eax, 64			; 00000040H
  00057	85 c0		 test	 eax, eax
  00059	0f 85 a4 00 00
	00		 jne	 $LN7@mod152

; 2679 :             return HHC00890E(  STFL_129_ZVECTOR );

  0005f	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00068	75 0a		 jne	 SHORT $LN11@mod152
  0006a	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00072	eb 08		 jmp	 SHORT $LN12@mod152
$LN11@mod152:
  00074	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN12@mod152:
  0007c	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00081	74 0a		 je	 SHORT $LN13@mod152
  00083	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  0008b	eb 53		 jmp	 SHORT $LN14@mod152
$LN13@mod152:
  0008d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194414
  00094	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00099	c7 44 24 30 77
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2679 ; 00000a77H
  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194415
  000a8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ad	c7 44 24 20 81
	00 00 00	 mov	 DWORD PTR [rsp+32], 129	; 00000081H
  000b5	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000bd	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c5	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000cd	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  000d4	e8 00 00 00 00	 call	 _hhc00890e
  000d9	0f b6 c0	 movzx	 eax, al
  000dc	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN14@mod152:
  000e0	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000e5	75 0a		 jne	 SHORT $LN15@mod152
  000e7	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000ef	eb 08		 jmp	 SHORT $LN16@mod152
$LN15@mod152:
  000f1	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN16@mod152:
  000f9	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000fe	e9 b4 01 00 00	 jmp	 $LN1@mod152
$LN7@mod152:

; 2680 : 
; 2681 :         if (!FACILITY_ENABLED_ARCH( 134_ZVECTOR_PACK_DEC, archnum ))

  00103	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0010b	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0010f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00116	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0011e	b9 01 00 00 00	 mov	 ecx, 1
  00123	48 6b c9 10	 imul	 rcx, rcx, 16
  00127	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0012b	83 e0 02	 and	 eax, 2
  0012e	85 c0		 test	 eax, eax
  00130	0f 85 a4 00 00
	00		 jne	 $LN8@mod152

; 2682 :             return HHC00890E(  STFL_134_ZVECTOR_PACK_DEC );

  00136	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  0013f	75 0a		 jne	 SHORT $LN17@mod152
  00141	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00149	eb 08		 jmp	 SHORT $LN18@mod152
$LN17@mod152:
  0014b	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN18@mod152:
  00153	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00158	74 0a		 je	 SHORT $LN19@mod152
  0015a	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  00162	eb 53		 jmp	 SHORT $LN20@mod152
$LN19@mod152:
  00164	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194417
  0016b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00170	c7 44 24 30 7a
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2682 ; 00000a7aH
  00178	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194418
  0017f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00184	c7 44 24 20 86
	00 00 00	 mov	 DWORD PTR [rsp+32], 134	; 00000086H
  0018c	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  00194	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  0019c	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  001a4	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  001ab	e8 00 00 00 00	 call	 _hhc00890e
  001b0	0f b6 c0	 movzx	 eax, al
  001b3	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN20@mod152:
  001b7	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001bc	75 0a		 jne	 SHORT $LN21@mod152
  001be	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001c6	eb 08		 jmp	 SHORT $LN22@mod152
$LN21@mod152:
  001c8	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN22@mod152:
  001d0	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001d5	e9 dd 00 00 00	 jmp	 $LN1@mod152
$LN8@mod152:

; 2683 :     }

  001da	e9 d6 00 00 00	 jmp	 $LN6@mod152
$LN5@mod152:

; 2684 :     else // disabling
; 2685 :     {
; 2686 :         if (FACILITY_ENABLED_ARCH( 192_VECT_PACKDEC_ENH_2, archnum ))

  001df	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  001e7	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  001eb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001f2	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  001fa	b9 01 00 00 00	 mov	 ecx, 1
  001ff	48 6b c9 18	 imul	 rcx, rcx, 24
  00203	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00207	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0020c	85 c0		 test	 eax, eax
  0020e	0f 84 a1 00 00
	00		 je	 $LN9@mod152

; 2687 :             return HHC00890E(  STFL_192_VECT_PACKDEC_ENH_2 );

  00214	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  0021d	75 0a		 jne	 SHORT $LN23@mod152
  0021f	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv161[rsp], 1
  00227	eb 08		 jmp	 SHORT $LN24@mod152
$LN23@mod152:
  00229	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv161[rsp], 0
$LN24@mod152:
  00231	83 7c 24 58 00	 cmp	 DWORD PTR tv161[rsp], 0
  00236	74 0a		 je	 SHORT $LN25@mod152
  00238	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv173[rsp], 0
  00240	eb 53		 jmp	 SHORT $LN26@mod152
$LN25@mod152:
  00242	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194420
  00249	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0024e	c7 44 24 30 7f
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2687 ; 00000a7fH
  00256	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194421
  0025d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00262	c7 44 24 20 c0
	00 00 00	 mov	 DWORD PTR [rsp+32], 192	; 000000c0H
  0026a	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  00272	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  0027a	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  00282	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  00289	e8 00 00 00 00	 call	 _hhc00890e
  0028e	0f b6 c0	 movzx	 eax, al
  00291	89 44 24 5c	 mov	 DWORD PTR tv173[rsp], eax
$LN26@mod152:
  00295	83 7c 24 5c 00	 cmp	 DWORD PTR tv173[rsp], 0
  0029a	75 0a		 jne	 SHORT $LN27@mod152
  0029c	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv175[rsp], 0
  002a4	eb 08		 jmp	 SHORT $LN28@mod152
$LN27@mod152:
  002a6	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv175[rsp], 1
$LN28@mod152:
  002ae	0f b6 44 24 60	 movzx	 eax, BYTE PTR tv175[rsp]
  002b3	eb 02		 jmp	 SHORT $LN1@mod152
$LN9@mod152:
$LN6@mod152:

; 2688 :     }
; 2689 :     return true;

  002b5	b0 01		 mov	 al, 1
$LN1@mod152:

; 2690 : }

  002b7	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002bb	c3		 ret	 0
mod152	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod149	PROC

; 2656 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod149:

; 2657 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod149

; 2658 : 
; 2659 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod149

; 2660 :     {
; 2661 :         if (!FACILITY_ENABLED_ARCH( 014_NONQ_KEY_SET, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 01	 imul	 rcx, rcx, 1
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 02	 and	 eax, 2
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod149

; 2662 :             return HHC00890E(  STFL_014_NONQ_KEY_SET );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod149
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod149
$LN8@mod149:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod149:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod149
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod149
$LN10@mod149:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194391
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 66
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2662 ; 00000a66H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194392
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 0e
	00 00 00	 mov	 DWORD PTR [rsp+32], 14
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod149:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod149
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod149
$LN12@mod149:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod149:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod149
$LN6@mod149:
$LN5@mod149:

; 2663 :     }
; 2664 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod149:

; 2665 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod149	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod148	PROC

; 2636 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod148:

; 2637 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod148

; 2638 : 
; 2639 :     if (enable)

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 a5 01 00
	00		 je	 $LN5@mod148

; 2640 :     {
; 2641 :         if (!FACILITY_ENABLED_ARCH( 129_ZVECTOR, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 10	 imul	 rcx, rcx, 16
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 40	 and	 eax, 64			; 00000040H
  00054	85 c0		 test	 eax, eax
  00056	0f 85 a1 00 00
	00		 jne	 $LN6@mod148

; 2642 :             return HHC00890E(  STFL_129_ZVECTOR );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN9@mod148
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN10@mod148
$LN9@mod148:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN10@mod148:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN11@mod148
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN12@mod148
$LN11@mod148:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194366
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 52
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2642 ; 00000a52H
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194367
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 81
	00 00 00	 mov	 DWORD PTR [rsp+32], 129	; 00000081H
  000b2	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN12@mod148:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN13@mod148
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN14@mod148
$LN13@mod148:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN14@mod148:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 d3 00 00 00	 jmp	 $LN1@mod148
$LN6@mod148:

; 2643 : 
; 2644 :         if (!FACILITY_ENABLED_ARCH( 135_ZVECTOR_ENH_1, archnum ))

  000fd	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00105	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	48 6b c9 10	 imul	 rcx, rcx, 16
  00121	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00125	83 e0 01	 and	 eax, 1
  00128	85 c0		 test	 eax, eax
  0012a	0f 85 9e 00 00
	00		 jne	 $LN7@mod148

; 2645 :             return HHC00890E(  STFL_135_ZVECTOR_ENH_1 );

  00130	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00139	75 0a		 jne	 SHORT $LN15@mod148
  0013b	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00143	eb 08		 jmp	 SHORT $LN16@mod148
$LN15@mod148:
  00145	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN16@mod148:
  0014d	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00152	74 0a		 je	 SHORT $LN17@mod148
  00154	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  0015c	eb 50		 jmp	 SHORT $LN18@mod148
$LN17@mod148:
  0015e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194369
  00165	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016a	c7 44 24 30 55
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2645 ; 00000a55H
  00172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194370
  00179	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0017e	c7 44 24 20 87
	00 00 00	 mov	 DWORD PTR [rsp+32], 135	; 00000087H
  00186	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0018e	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00196	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0019e	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a2	e8 00 00 00 00	 call	 _hhc00890e
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN18@mod148:
  001ae	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b3	75 0a		 jne	 SHORT $LN19@mod148
  001b5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001bd	eb 08		 jmp	 SHORT $LN20@mod148
$LN19@mod148:
  001bf	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN20@mod148:
  001c7	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001cc	eb 02		 jmp	 SHORT $LN1@mod148
$LN7@mod148:
$LN5@mod148:

; 2646 :     }
; 2647 :     return true;

  001ce	b0 01		 mov	 al, 1
$LN1@mod148:

; 2648 : }

  001d0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d4	c3		 ret	 0
mod148	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod146	PROC

; 2619 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod146:

; 2620 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod146

; 2621 : 
; 2622 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod146

; 2623 :     {
; 2624 :         if (!FACILITY_ENABLED_ARCH( 076_MSA_EXTENSION_3, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 09	 imul	 rcx, rcx, 9
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 08	 and	 eax, 8
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod146

; 2625 :             return HHC00890E(  STFL_076_MSA_EXTENSION_3 );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod146
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod146
$LN8@mod146:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod146:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod146
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod146
$LN10@mod146:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194344
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 41
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2625 ; 00000a41H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194345
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 4c
	00 00 00	 mov	 DWORD PTR [rsp+32], 76	; 0000004cH
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod146:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod146
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod146
$LN12@mod146:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod146:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod146
$LN6@mod146:
$LN5@mod146:

; 2626 :     }
; 2627 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod146:

; 2628 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod146	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod145	PROC

; 2602 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod145:

; 2603 :     UNREFERENCED( actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod145

; 2604 : 
; 2605 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod145

; 2606 :     {
; 2607 :         if (FACILITY_ENABLED_ARCH(     169_SKEY_REMOVAL, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 15	 imul	 rcx, rcx, 21
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 40	 and	 eax, 64			; 00000040H
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod145

; 2608 :             return HHC00890E_OPP( STFL_169_SKEY_REMOVAL );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod145
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod145
$LN8@mod145:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod145:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod145
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod145
$LN10@mod145:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194322
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 30
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2608 ; 00000a30H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194323
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 a9
	00 00 00	 mov	 DWORD PTR [rsp+32], 169	; 000000a9H
  000ac	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR opp_actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod145:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod145
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod145
$LN12@mod145:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod145:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod145
$LN6@mod145:
$LN5@mod145:

; 2609 :     }
; 2610 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod145:

; 2611 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod145	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod142	PROC

; 2585 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod142:

; 2586 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod142

; 2587 : 
; 2588 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod142

; 2589 :     {
; 2590 :         if (!FACILITY_ENABLED_ARCH( 067_CPU_MEAS_COUNTER, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 08	 imul	 rcx, rcx, 8
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 10	 and	 eax, 16
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod142

; 2591 :             return HHC00890E(  STFL_067_CPU_MEAS_COUNTER );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod142
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod142
$LN8@mod142:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod142:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod142
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod142
$LN10@mod142:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194300
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 1f
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2591 ; 00000a1fH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194301
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 43
	00 00 00	 mov	 DWORD PTR [rsp+32], 67	; 00000043H
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod142:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod142
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod142
$LN12@mod142:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod142:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod142
$LN6@mod142:
$LN5@mod142:

; 2592 :     }
; 2593 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod142:

; 2594 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod142	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod139	PROC

; 2565 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod139:

; 2566 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod139

; 2567 : 
; 2568 :     if (enable)

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 a5 01 00
	00		 je	 $LN5@mod139

; 2569 :     {
; 2570 :         if (!FACILITY_ENABLED_ARCH( 025_STORE_CLOCK_FAST, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 03	 imul	 rcx, rcx, 3
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 40	 and	 eax, 64			; 00000040H
  00054	85 c0		 test	 eax, eax
  00056	0f 85 a1 00 00
	00		 jne	 $LN6@mod139

; 2571 :             return HHC00890E(  STFL_025_STORE_CLOCK_FAST );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN9@mod139
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN10@mod139
$LN9@mod139:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN10@mod139:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN11@mod139
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN12@mod139
$LN11@mod139:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194275
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 0b
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2571 ; 00000a0bH
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194276
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 19
	00 00 00	 mov	 DWORD PTR [rsp+32], 25
  000b2	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN12@mod139:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN13@mod139
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN14@mod139
$LN13@mod139:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN14@mod139:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 d3 00 00 00	 jmp	 $LN1@mod139
$LN6@mod139:

; 2572 : 
; 2573 :         if (!FACILITY_ENABLED_ARCH( 028_TOD_CLOCK_STEER, archnum ))

  000fd	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00105	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	48 6b c9 03	 imul	 rcx, rcx, 3
  00121	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00125	83 e0 08	 and	 eax, 8
  00128	85 c0		 test	 eax, eax
  0012a	0f 85 9e 00 00
	00		 jne	 $LN7@mod139

; 2574 :             return HHC00890E(  STFL_028_TOD_CLOCK_STEER );

  00130	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00139	75 0a		 jne	 SHORT $LN15@mod139
  0013b	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00143	eb 08		 jmp	 SHORT $LN16@mod139
$LN15@mod139:
  00145	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN16@mod139:
  0014d	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00152	74 0a		 je	 SHORT $LN17@mod139
  00154	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  0015c	eb 50		 jmp	 SHORT $LN18@mod139
$LN17@mod139:
  0015e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194278
  00165	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016a	c7 44 24 30 0e
	0a 00 00	 mov	 DWORD PTR [rsp+48], 2574 ; 00000a0eH
  00172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194279
  00179	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0017e	c7 44 24 20 1c
	00 00 00	 mov	 DWORD PTR [rsp+32], 28
  00186	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0018e	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00196	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0019e	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a2	e8 00 00 00 00	 call	 _hhc00890e
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN18@mod139:
  001ae	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b3	75 0a		 jne	 SHORT $LN19@mod139
  001b5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001bd	eb 08		 jmp	 SHORT $LN20@mod139
$LN19@mod139:
  001bf	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN20@mod139:
  001c7	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001cc	eb 02		 jmp	 SHORT $LN1@mod139
$LN7@mod139:
$LN5@mod139:

; 2575 :     }
; 2576 :     return true;

  001ce	b0 01		 mov	 al, 1
$LN1@mod139:

; 2577 : }

  001d0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d4	c3		 ret	 0
mod139	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod135	PROC

; 2543 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod135:

; 2544 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod135

; 2545 : 
; 2546 :     if (enable)

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 d9 00 00
	00		 je	 $LN5@mod135

; 2547 :     {
; 2548 :         if (!FACILITY_ENABLED_ARCH( 129_ZVECTOR, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 10	 imul	 rcx, rcx, 16
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 40	 and	 eax, 64			; 00000040H
  00054	85 c0		 test	 eax, eax
  00056	0f 85 a1 00 00
	00		 jne	 $LN7@mod135

; 2549 :             return HHC00890E(  STFL_129_ZVECTOR );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN10@mod135
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN11@mod135
$LN10@mod135:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN11@mod135:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN12@mod135
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN13@mod135
$LN12@mod135:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194250
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 f5
	09 00 00	 mov	 DWORD PTR [rsp+48], 2549 ; 000009f5H
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194251
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 81
	00 00 00	 mov	 DWORD PTR [rsp+32], 129	; 00000081H
  000b2	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN13@mod135:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN14@mod135
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN15@mod135
$LN14@mod135:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN15@mod135:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 d8 00 00 00	 jmp	 $LN1@mod135
$LN7@mod135:

; 2550 :     }

  000fd	e9 d1 00 00 00	 jmp	 $LN6@mod135
$LN5@mod135:

; 2551 :     else // disabling
; 2552 :     {
; 2553 :         if (FACILITY_ENABLED_ARCH( 148_VECTOR_ENH_2, archnum ))

  00102	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0010a	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0010e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00115	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0011d	b9 01 00 00 00	 mov	 ecx, 1
  00122	48 6b c9 12	 imul	 rcx, rcx, 18
  00126	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0012a	83 e0 08	 and	 eax, 8
  0012d	85 c0		 test	 eax, eax
  0012f	0f 84 9e 00 00
	00		 je	 $LN8@mod135

; 2554 :             return HHC00890E( STFL_148_VECTOR_ENH_2 );

  00135	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  0013e	75 0a		 jne	 SHORT $LN16@mod135
  00140	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00148	eb 08		 jmp	 SHORT $LN17@mod135
$LN16@mod135:
  0014a	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN17@mod135:
  00152	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00157	74 0a		 je	 SHORT $LN18@mod135
  00159	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  00161	eb 50		 jmp	 SHORT $LN19@mod135
$LN18@mod135:
  00163	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194253
  0016a	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016f	c7 44 24 30 fa
	09 00 00	 mov	 DWORD PTR [rsp+48], 2554 ; 000009faH
  00177	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194254
  0017e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00183	c7 44 24 20 94
	00 00 00	 mov	 DWORD PTR [rsp+32], 148	; 00000094H
  0018b	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  00193	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  0019b	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  001a3	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a7	e8 00 00 00 00	 call	 _hhc00890e
  001ac	0f b6 c0	 movzx	 eax, al
  001af	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN19@mod135:
  001b3	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b8	75 0a		 jne	 SHORT $LN20@mod135
  001ba	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001c2	eb 08		 jmp	 SHORT $LN21@mod135
$LN20@mod135:
  001c4	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN21@mod135:
  001cc	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001d1	eb 02		 jmp	 SHORT $LN1@mod135
$LN8@mod135:
$LN6@mod135:

; 2555 :     }
; 2556 :     return true;

  001d3	b0 01		 mov	 al, 1
$LN1@mod135:

; 2557 : }

  001d5	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d9	c3		 ret	 0
mod135	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
tv161 = 88
tv173 = 92
tv175 = 96
enable$ = 128
bitno$ = 136
archnum$ = 144
action$ = 152
actioning$ = 160
opp_actioning$ = 168
target_facname$ = 176
mod134	PROC

; 2518 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 78	 sub	 rsp, 120		; 00000078H
$LN4@mod134:

; 2519 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod134

; 2520 : 
; 2521 :     if (enable)

  0001c	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR enable$[rsp]
  00024	85 c0		 test	 eax, eax
  00026	0f 84 dc 00 00
	00		 je	 $LN5@mod134

; 2522 :     {
; 2523 :         if (!FACILITY_ENABLED_ARCH( 129_ZVECTOR, archnum ))

  0002c	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00034	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00038	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003f	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00047	b9 01 00 00 00	 mov	 ecx, 1
  0004c	48 6b c9 10	 imul	 rcx, rcx, 16
  00050	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00054	83 e0 40	 and	 eax, 64			; 00000040H
  00057	85 c0		 test	 eax, eax
  00059	0f 85 a4 00 00
	00		 jne	 $LN7@mod134

; 2524 :             return HHC00890E(  STFL_129_ZVECTOR );

  0005f	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00068	75 0a		 jne	 SHORT $LN11@mod134
  0006a	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00072	eb 08		 jmp	 SHORT $LN12@mod134
$LN11@mod134:
  00074	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN12@mod134:
  0007c	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00081	74 0a		 je	 SHORT $LN13@mod134
  00083	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  0008b	eb 53		 jmp	 SHORT $LN14@mod134
$LN13@mod134:
  0008d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194221
  00094	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00099	c7 44 24 30 dc
	09 00 00	 mov	 DWORD PTR [rsp+48], 2524 ; 000009dcH
  000a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194222
  000a8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ad	c7 44 24 20 81
	00 00 00	 mov	 DWORD PTR [rsp+32], 129	; 00000081H
  000b5	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000bd	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c5	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000cd	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  000d4	e8 00 00 00 00	 call	 _hhc00890e
  000d9	0f b6 c0	 movzx	 eax, al
  000dc	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN14@mod134:
  000e0	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000e5	75 0a		 jne	 SHORT $LN15@mod134
  000e7	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000ef	eb 08		 jmp	 SHORT $LN16@mod134
$LN15@mod134:
  000f1	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN16@mod134:
  000f9	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000fe	e9 b6 01 00 00	 jmp	 $LN1@mod134
$LN7@mod134:

; 2525 :     }

  00103	e9 af 01 00 00	 jmp	 $LN6@mod134
$LN5@mod134:

; 2526 :     else // disabling
; 2527 :     {
; 2528 :         if (FACILITY_ENABLED_ARCH( 152_VECT_PACKDEC_ENH, archnum ))

  00108	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00110	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00114	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0011b	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00123	b9 01 00 00 00	 mov	 ecx, 1
  00128	48 6b c9 13	 imul	 rcx, rcx, 19
  0012c	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00130	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00135	85 c0		 test	 eax, eax
  00137	0f 84 a4 00 00
	00		 je	 $LN8@mod134

; 2529 :             return HHC00890E( STFL_152_VECT_PACKDEC_ENH );

  0013d	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00146	75 0a		 jne	 SHORT $LN17@mod134
  00148	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00150	eb 08		 jmp	 SHORT $LN18@mod134
$LN17@mod134:
  00152	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN18@mod134:
  0015a	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  0015f	74 0a		 je	 SHORT $LN19@mod134
  00161	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  00169	eb 53		 jmp	 SHORT $LN20@mod134
$LN19@mod134:
  0016b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194224
  00172	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00177	c7 44 24 30 e1
	09 00 00	 mov	 DWORD PTR [rsp+48], 2529 ; 000009e1H
  0017f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194225
  00186	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0018b	c7 44 24 20 98
	00 00 00	 mov	 DWORD PTR [rsp+32], 152	; 00000098H
  00193	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0019b	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  001a3	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  001ab	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  001b2	e8 00 00 00 00	 call	 _hhc00890e
  001b7	0f b6 c0	 movzx	 eax, al
  001ba	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN20@mod134:
  001be	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001c3	75 0a		 jne	 SHORT $LN21@mod134
  001c5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001cd	eb 08		 jmp	 SHORT $LN22@mod134
$LN21@mod134:
  001cf	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN22@mod134:
  001d7	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001dc	e9 d8 00 00 00	 jmp	 $LN1@mod134
$LN8@mod134:

; 2530 : 
; 2531 :         if (FACILITY_ENABLED_ARCH( 192_VECT_PACKDEC_ENH_2, archnum ))

  001e1	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  001e9	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  001ed	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001f4	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  001fc	b9 01 00 00 00	 mov	 ecx, 1
  00201	48 6b c9 18	 imul	 rcx, rcx, 24
  00205	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00209	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0020e	85 c0		 test	 eax, eax
  00210	0f 84 a1 00 00
	00		 je	 $LN9@mod134

; 2532 :             return HHC00890E( STFL_192_VECT_PACKDEC_ENH_2 );

  00216	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  0021f	75 0a		 jne	 SHORT $LN23@mod134
  00221	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv161[rsp], 1
  00229	eb 08		 jmp	 SHORT $LN24@mod134
$LN23@mod134:
  0022b	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv161[rsp], 0
$LN24@mod134:
  00233	83 7c 24 58 00	 cmp	 DWORD PTR tv161[rsp], 0
  00238	74 0a		 je	 SHORT $LN25@mod134
  0023a	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv173[rsp], 0
  00242	eb 53		 jmp	 SHORT $LN26@mod134
$LN25@mod134:
  00244	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194227
  0024b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00250	c7 44 24 30 e4
	09 00 00	 mov	 DWORD PTR [rsp+48], 2532 ; 000009e4H
  00258	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194228
  0025f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00264	c7 44 24 20 c0
	00 00 00	 mov	 DWORD PTR [rsp+32], 192	; 000000c0H
  0026c	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  00274	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  0027c	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  00284	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  0028b	e8 00 00 00 00	 call	 _hhc00890e
  00290	0f b6 c0	 movzx	 eax, al
  00293	89 44 24 5c	 mov	 DWORD PTR tv173[rsp], eax
$LN26@mod134:
  00297	83 7c 24 5c 00	 cmp	 DWORD PTR tv173[rsp], 0
  0029c	75 0a		 jne	 SHORT $LN27@mod134
  0029e	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv175[rsp], 0
  002a6	eb 08		 jmp	 SHORT $LN28@mod134
$LN27@mod134:
  002a8	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv175[rsp], 1
$LN28@mod134:
  002b0	0f b6 44 24 60	 movzx	 eax, BYTE PTR tv175[rsp]
  002b5	eb 02		 jmp	 SHORT $LN1@mod134
$LN9@mod134:
$LN6@mod134:

; 2533 :     }
; 2534 :     return true;

  002b7	b0 01		 mov	 al, 1
$LN1@mod134:

; 2535 : }

  002b9	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002bd	c3		 ret	 0
mod134	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
tv161 = 88
tv173 = 92
tv175 = 96
tv187 = 100
tv199 = 104
tv201 = 108
tv213 = 112
tv225 = 116
tv227 = 120
tv239 = 124
tv251 = 128
tv253 = 132
enable$ = 160
bitno$ = 168
archnum$ = 176
action$ = 184
actioning$ = 192
opp_actioning$ = 200
target_facname$ = 208
mod129	PROC

; 2486 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
$LN4@mod129:

; 2487 :     UNREFERENCED( opp_actioning );

  00019	33 c0		 xor	 eax, eax
  0001b	85 c0		 test	 eax, eax
  0001d	75 fa		 jne	 SHORT $LN4@mod129

; 2488 : 
; 2489 :     if (!enable) // disabling

  0001f	0f b6 84 24 a0
	00 00 00	 movzx	 eax, BYTE PTR enable$[rsp]
  00027	85 c0		 test	 eax, eax
  00029	0f 85 1d 05 00
	00		 jne	 $LN5@mod129

; 2490 :     {
; 2491 :         if (FACILITY_ENABLED_ARCH( 134_ZVECTOR_PACK_DEC, archnum ))

  0002f	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00037	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00042	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0004a	b9 01 00 00 00	 mov	 ecx, 1
  0004f	48 6b c9 10	 imul	 rcx, rcx, 16
  00053	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00057	83 e0 02	 and	 eax, 2
  0005a	85 c0		 test	 eax, eax
  0005c	0f 84 a4 00 00
	00		 je	 $LN6@mod129

; 2492 :             return HHC00890E( STFL_134_ZVECTOR_PACK_DEC );

  00062	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  0006b	75 0a		 jne	 SHORT $LN13@mod129
  0006d	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00075	eb 08		 jmp	 SHORT $LN14@mod129
$LN13@mod129:
  00077	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN14@mod129:
  0007f	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00084	74 0a		 je	 SHORT $LN15@mod129
  00086	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  0008e	eb 53		 jmp	 SHORT $LN16@mod129
$LN15@mod129:
  00090	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194183
  00097	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0009c	c7 44 24 30 bc
	09 00 00	 mov	 DWORD PTR [rsp+48], 2492 ; 000009bcH
  000a4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194184
  000ab	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000b0	c7 44 24 20 86
	00 00 00	 mov	 DWORD PTR [rsp+32], 134	; 00000086H
  000b8	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000c0	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c8	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000d0	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  000d7	e8 00 00 00 00	 call	 _hhc00890e
  000dc	0f b6 c0	 movzx	 eax, al
  000df	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN16@mod129:
  000e3	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000e8	75 0a		 jne	 SHORT $LN17@mod129
  000ea	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000f2	eb 08		 jmp	 SHORT $LN18@mod129
$LN17@mod129:
  000f4	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN18@mod129:
  000fc	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  00101	e9 48 04 00 00	 jmp	 $LN1@mod129
$LN6@mod129:

; 2493 : 
; 2494 :         if (FACILITY_ENABLED_ARCH( 135_ZVECTOR_ENH_1, archnum ))

  00106	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0010e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00112	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00119	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00121	b9 01 00 00 00	 mov	 ecx, 1
  00126	48 6b c9 10	 imul	 rcx, rcx, 16
  0012a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0012e	83 e0 01	 and	 eax, 1
  00131	85 c0		 test	 eax, eax
  00133	0f 84 a4 00 00
	00		 je	 $LN7@mod129

; 2495 :             return HHC00890E( STFL_135_ZVECTOR_ENH_1 );

  00139	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00142	75 0a		 jne	 SHORT $LN19@mod129
  00144	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  0014c	eb 08		 jmp	 SHORT $LN20@mod129
$LN19@mod129:
  0014e	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN20@mod129:
  00156	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  0015b	74 0a		 je	 SHORT $LN21@mod129
  0015d	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  00165	eb 53		 jmp	 SHORT $LN22@mod129
$LN21@mod129:
  00167	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194186
  0016e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00173	c7 44 24 30 bf
	09 00 00	 mov	 DWORD PTR [rsp+48], 2495 ; 000009bfH
  0017b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194187
  00182	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00187	c7 44 24 20 87
	00 00 00	 mov	 DWORD PTR [rsp+32], 135	; 00000087H
  0018f	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  00197	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  0019f	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  001a7	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  001ae	e8 00 00 00 00	 call	 _hhc00890e
  001b3	0f b6 c0	 movzx	 eax, al
  001b6	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN22@mod129:
  001ba	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001bf	75 0a		 jne	 SHORT $LN23@mod129
  001c1	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001c9	eb 08		 jmp	 SHORT $LN24@mod129
$LN23@mod129:
  001cb	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN24@mod129:
  001d3	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001d8	e9 71 03 00 00	 jmp	 $LN1@mod129
$LN7@mod129:

; 2496 : 
; 2497 :         if (FACILITY_ENABLED_ARCH( 148_VECTOR_ENH_2, archnum ))

  001dd	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  001e5	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  001e9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001f0	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  001f8	b9 01 00 00 00	 mov	 ecx, 1
  001fd	48 6b c9 12	 imul	 rcx, rcx, 18
  00201	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00205	83 e0 08	 and	 eax, 8
  00208	85 c0		 test	 eax, eax
  0020a	0f 84 a4 00 00
	00		 je	 $LN8@mod129

; 2498 :             return HHC00890E( STFL_148_VECTOR_ENH_2 );

  00210	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00219	75 0a		 jne	 SHORT $LN25@mod129
  0021b	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv161[rsp], 1
  00223	eb 08		 jmp	 SHORT $LN26@mod129
$LN25@mod129:
  00225	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv161[rsp], 0
$LN26@mod129:
  0022d	83 7c 24 58 00	 cmp	 DWORD PTR tv161[rsp], 0
  00232	74 0a		 je	 SHORT $LN27@mod129
  00234	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv173[rsp], 0
  0023c	eb 53		 jmp	 SHORT $LN28@mod129
$LN27@mod129:
  0023e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194189
  00245	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0024a	c7 44 24 30 c2
	09 00 00	 mov	 DWORD PTR [rsp+48], 2498 ; 000009c2H
  00252	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194190
  00259	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0025e	c7 44 24 20 94
	00 00 00	 mov	 DWORD PTR [rsp+32], 148	; 00000094H
  00266	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0026e	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00276	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0027e	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  00285	e8 00 00 00 00	 call	 _hhc00890e
  0028a	0f b6 c0	 movzx	 eax, al
  0028d	89 44 24 5c	 mov	 DWORD PTR tv173[rsp], eax
$LN28@mod129:
  00291	83 7c 24 5c 00	 cmp	 DWORD PTR tv173[rsp], 0
  00296	75 0a		 jne	 SHORT $LN29@mod129
  00298	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv175[rsp], 0
  002a0	eb 08		 jmp	 SHORT $LN30@mod129
$LN29@mod129:
  002a2	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv175[rsp], 1
$LN30@mod129:
  002aa	0f b6 44 24 60	 movzx	 eax, BYTE PTR tv175[rsp]
  002af	e9 9a 02 00 00	 jmp	 $LN1@mod129
$LN8@mod129:

; 2499 : 
; 2500 :         if (FACILITY_ENABLED_ARCH( 152_VECT_PACKDEC_ENH, archnum ))

  002b4	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  002bc	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  002c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  002c7	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  002cf	b9 01 00 00 00	 mov	 ecx, 1
  002d4	48 6b c9 13	 imul	 rcx, rcx, 19
  002d8	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  002dc	25 80 00 00 00	 and	 eax, 128		; 00000080H
  002e1	85 c0		 test	 eax, eax
  002e3	0f 84 a4 00 00
	00		 je	 $LN9@mod129

; 2501 :             return HHC00890E( STFL_152_VECT_PACKDEC_ENH );

  002e9	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  002f2	75 0a		 jne	 SHORT $LN31@mod129
  002f4	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv187[rsp], 1
  002fc	eb 08		 jmp	 SHORT $LN32@mod129
$LN31@mod129:
  002fe	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv187[rsp], 0
$LN32@mod129:
  00306	83 7c 24 64 00	 cmp	 DWORD PTR tv187[rsp], 0
  0030b	74 0a		 je	 SHORT $LN33@mod129
  0030d	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv199[rsp], 0
  00315	eb 53		 jmp	 SHORT $LN34@mod129
$LN33@mod129:
  00317	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194192
  0031e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00323	c7 44 24 30 c5
	09 00 00	 mov	 DWORD PTR [rsp+48], 2501 ; 000009c5H
  0032b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194193
  00332	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00337	c7 44 24 20 98
	00 00 00	 mov	 DWORD PTR [rsp+32], 152	; 00000098H
  0033f	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  00347	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  0034f	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  00357	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  0035e	e8 00 00 00 00	 call	 _hhc00890e
  00363	0f b6 c0	 movzx	 eax, al
  00366	89 44 24 68	 mov	 DWORD PTR tv199[rsp], eax
$LN34@mod129:
  0036a	83 7c 24 68 00	 cmp	 DWORD PTR tv199[rsp], 0
  0036f	75 0a		 jne	 SHORT $LN35@mod129
  00371	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv201[rsp], 0
  00379	eb 08		 jmp	 SHORT $LN36@mod129
$LN35@mod129:
  0037b	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv201[rsp], 1
$LN36@mod129:
  00383	0f b6 44 24 6c	 movzx	 eax, BYTE PTR tv201[rsp]
  00388	e9 c1 01 00 00	 jmp	 $LN1@mod129
$LN9@mod129:

; 2502 : 
; 2503 :         if (FACILITY_ENABLED_ARCH( 165_NNET_ASSIST, archnum ))

  0038d	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00395	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00399	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  003a0	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  003a8	b9 01 00 00 00	 mov	 ecx, 1
  003ad	48 6b c9 14	 imul	 rcx, rcx, 20
  003b1	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  003b5	83 e0 04	 and	 eax, 4
  003b8	85 c0		 test	 eax, eax
  003ba	0f 84 a4 00 00
	00		 je	 $LN10@mod129

; 2504 :             return HHC00890E( STFL_165_NNET_ASSIST );

  003c0	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  003c9	75 0a		 jne	 SHORT $LN37@mod129
  003cb	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv213[rsp], 1
  003d3	eb 08		 jmp	 SHORT $LN38@mod129
$LN37@mod129:
  003d5	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv213[rsp], 0
$LN38@mod129:
  003dd	83 7c 24 70 00	 cmp	 DWORD PTR tv213[rsp], 0
  003e2	74 0a		 je	 SHORT $LN39@mod129
  003e4	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv225[rsp], 0
  003ec	eb 53		 jmp	 SHORT $LN40@mod129
$LN39@mod129:
  003ee	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194195
  003f5	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  003fa	c7 44 24 30 c8
	09 00 00	 mov	 DWORD PTR [rsp+48], 2504 ; 000009c8H
  00402	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194196
  00409	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0040e	c7 44 24 20 a5
	00 00 00	 mov	 DWORD PTR [rsp+32], 165	; 000000a5H
  00416	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0041e	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00426	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0042e	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  00435	e8 00 00 00 00	 call	 _hhc00890e
  0043a	0f b6 c0	 movzx	 eax, al
  0043d	89 44 24 74	 mov	 DWORD PTR tv225[rsp], eax
$LN40@mod129:
  00441	83 7c 24 74 00	 cmp	 DWORD PTR tv225[rsp], 0
  00446	75 0a		 jne	 SHORT $LN41@mod129
  00448	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv227[rsp], 0
  00450	eb 08		 jmp	 SHORT $LN42@mod129
$LN41@mod129:
  00452	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv227[rsp], 1
$LN42@mod129:
  0045a	0f b6 44 24 78	 movzx	 eax, BYTE PTR tv227[rsp]
  0045f	e9 ea 00 00 00	 jmp	 $LN1@mod129
$LN10@mod129:

; 2505 : 
; 2506 :         if (FACILITY_ENABLED_ARCH( 192_VECT_PACKDEC_ENH_2, archnum ))

  00464	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0046c	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00470	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00477	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0047f	b9 01 00 00 00	 mov	 ecx, 1
  00484	48 6b c9 18	 imul	 rcx, rcx, 24
  00488	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0048c	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00491	85 c0		 test	 eax, eax
  00493	0f 84 b3 00 00
	00		 je	 $LN11@mod129

; 2507 :             return HHC00890E( STFL_192_VECT_PACKDEC_ENH_2 );

  00499	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  004a2	75 0a		 jne	 SHORT $LN43@mod129
  004a4	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR tv239[rsp], 1
  004ac	eb 08		 jmp	 SHORT $LN44@mod129
$LN43@mod129:
  004ae	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv239[rsp], 0
$LN44@mod129:
  004b6	83 7c 24 7c 00	 cmp	 DWORD PTR tv239[rsp], 0
  004bb	74 0d		 je	 SHORT $LN45@mod129
  004bd	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv251[rsp], 0
  004c8	eb 56		 jmp	 SHORT $LN46@mod129
$LN45@mod129:
  004ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194198
  004d1	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  004d6	c7 44 24 30 cb
	09 00 00	 mov	 DWORD PTR [rsp+48], 2507 ; 000009cbH
  004de	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194199
  004e5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  004ea	c7 44 24 20 c0
	00 00 00	 mov	 DWORD PTR [rsp+32], 192	; 000000c0H
  004f2	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  004fa	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00502	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0050a	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR bitno$[rsp]
  00511	e8 00 00 00 00	 call	 _hhc00890e
  00516	0f b6 c0	 movzx	 eax, al
  00519	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv251[rsp], eax
$LN46@mod129:
  00520	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR tv251[rsp], 0
  00528	75 0d		 jne	 SHORT $LN47@mod129
  0052a	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv253[rsp], 0
  00535	eb 0b		 jmp	 SHORT $LN48@mod129
$LN47@mod129:
  00537	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv253[rsp], 1
$LN48@mod129:
  00542	0f b6 84 24 84
	00 00 00	 movzx	 eax, BYTE PTR tv253[rsp]
  0054a	eb 02		 jmp	 SHORT $LN1@mod129
$LN11@mod129:
$LN5@mod129:

; 2508 :     }
; 2509 :     return true;

  0054c	b0 01		 mov	 al, 1
$LN1@mod129:

; 2510 : }

  0054e	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00555	c3		 ret	 0
mod129	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod081	PROC

; 2469 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod081:

; 2470 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod081

; 2471 : 
; 2472 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod081

; 2473 :     {
; 2474 :         if (!FACILITY_ENABLED_ARCH( 049_PROCESSOR_ASSIST, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 06	 imul	 rcx, rcx, 6
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 40	 and	 eax, 64			; 00000040H
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod081

; 2475 :             return HHC00890E(  STFL_049_PROCESSOR_ASSIST );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod081
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod081
$LN8@mod081:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod081:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod081
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod081
$LN10@mod081:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194161
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 ab
	09 00 00	 mov	 DWORD PTR [rsp+48], 2475 ; 000009abH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194162
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 31
	00 00 00	 mov	 DWORD PTR [rsp+32], 49	; 00000031H
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod081:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod081
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod081
$LN12@mod081:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod081:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod081
$LN6@mod081:
$LN5@mod081:

; 2476 :     }
; 2477 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod081:

; 2478 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod081	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod080	PROC

; 2452 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod080:

; 2453 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod080

; 2454 : 
; 2455 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod080

; 2456 :     {
; 2457 :         if (!FACILITY_ENABLED_ARCH( 042_DFP, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 05	 imul	 rcx, rcx, 5
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 20	 and	 eax, 32			; 00000020H
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod080

; 2458 :             return HHC00890E(  STFL_042_DFP );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod080
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod080
$LN8@mod080:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod080:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod080
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod080
$LN10@mod080:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194139
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 9a
	09 00 00	 mov	 DWORD PTR [rsp+48], 2458 ; 0000099aH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194140
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 2a
	00 00 00	 mov	 DWORD PTR [rsp+32], 42	; 0000002aH
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod080:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod080
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod080
$LN12@mod080:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod080:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod080
$LN6@mod080:
$LN5@mod080:

; 2459 :     }
; 2460 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod080:

; 2461 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod080	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod078	PROC

; 2435 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod078:

; 2436 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod078

; 2437 : 
; 2438 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 ca 00 00
	00		 je	 $LN5@mod078

; 2439 :     {
; 2440 :         if (!FACILITY_ENABLED_ARCH( 008_EDAT_1, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 01	 imul	 rcx, rcx, 1
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00053	85 c0		 test	 eax, eax
  00055	0f 85 98 00 00
	00		 jne	 $LN6@mod078

; 2441 :             return HHC00890E(  STFL_008_EDAT_1 );

  0005b	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  00061	75 0a		 jne	 SHORT $LN8@mod078
  00063	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006b	eb 08		 jmp	 SHORT $LN9@mod078
$LN8@mod078:
  0006d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod078:
  00075	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007a	74 0a		 je	 SHORT $LN10@mod078
  0007c	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00084	eb 4d		 jmp	 SHORT $LN11@mod078
$LN10@mod078:
  00086	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194117
  0008d	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00092	c7 44 24 30 89
	09 00 00	 mov	 DWORD PTR [rsp+48], 2441 ; 00000989H
  0009a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194118
  000a1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a6	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR [rsp+32], 8
  000ae	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b6	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000bb	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c3	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c7	e8 00 00 00 00	 call	 _hhc00890e
  000cc	0f b6 c0	 movzx	 eax, al
  000cf	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod078:
  000d3	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d8	75 0a		 jne	 SHORT $LN12@mod078
  000da	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e2	eb 08		 jmp	 SHORT $LN13@mod078
$LN12@mod078:
  000e4	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod078:
  000ec	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f1	eb 02		 jmp	 SHORT $LN1@mod078
$LN6@mod078:
$LN5@mod078:

; 2442 :     }
; 2443 :     return true;

  000f3	b0 01		 mov	 al, 1
$LN1@mod078:

; 2444 : }

  000f5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f9	c3		 ret	 0
mod078	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod077	PROC

; 2418 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod077:

; 2419 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod077

; 2420 : 
; 2421 :     if (!enable) // disabling

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 c8 00 00
	00		 jne	 $LN5@mod077

; 2422 :     {
; 2423 :         if (FACILITY_ENABLED_ARCH( 155_MSA_EXTENSION_9, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 13	 imul	 rcx, rcx, 19
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 10	 and	 eax, 16
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod077

; 2424 :             return HHC00890E( STFL_155_MSA_EXTENSION_9 );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod077
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod077
$LN8@mod077:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod077:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod077
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod077
$LN10@mod077:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194095
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 78
	09 00 00	 mov	 DWORD PTR [rsp+48], 2424 ; 00000978H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194096
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 9b
	00 00 00	 mov	 DWORD PTR [rsp+32], 155	; 0000009bH
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod077:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod077
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod077
$LN12@mod077:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod077:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod077
$LN6@mod077:
$LN5@mod077:

; 2425 :     }
; 2426 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod077:

; 2427 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod077	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod076	PROC

; 2398 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod076:

; 2399 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod076

; 2400 : 
; 2401 :     if (!enable) // disabling

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 a5 01 00
	00		 jne	 $LN5@mod076

; 2402 :     {
; 2403 :         if (FACILITY_ENABLED_ARCH( 146_MSA_EXTENSION_8, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 12	 imul	 rcx, rcx, 18
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 20	 and	 eax, 32			; 00000020H
  00054	85 c0		 test	 eax, eax
  00056	0f 84 a1 00 00
	00		 je	 $LN6@mod076

; 2404 :             return HHC00890E( STFL_146_MSA_EXTENSION_8 );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN9@mod076
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN10@mod076
$LN9@mod076:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN10@mod076:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN11@mod076
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN12@mod076
$LN11@mod076:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194070
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 64
	09 00 00	 mov	 DWORD PTR [rsp+48], 2404 ; 00000964H
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194071
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 92
	00 00 00	 mov	 DWORD PTR [rsp+32], 146	; 00000092H
  000b2	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN12@mod076:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN13@mod076
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN14@mod076
$LN13@mod076:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN14@mod076:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 d3 00 00 00	 jmp	 $LN1@mod076
$LN6@mod076:

; 2405 : 
; 2406 :         if (FACILITY_ENABLED_ARCH( 155_MSA_EXTENSION_9, archnum ))

  000fd	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00105	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	48 6b c9 13	 imul	 rcx, rcx, 19
  00121	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00125	83 e0 10	 and	 eax, 16
  00128	85 c0		 test	 eax, eax
  0012a	0f 84 9e 00 00
	00		 je	 $LN7@mod076

; 2407 :             return HHC00890E( STFL_155_MSA_EXTENSION_9 );

  00130	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00139	75 0a		 jne	 SHORT $LN15@mod076
  0013b	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00143	eb 08		 jmp	 SHORT $LN16@mod076
$LN15@mod076:
  00145	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN16@mod076:
  0014d	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00152	74 0a		 je	 SHORT $LN17@mod076
  00154	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  0015c	eb 50		 jmp	 SHORT $LN18@mod076
$LN17@mod076:
  0015e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194073
  00165	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016a	c7 44 24 30 67
	09 00 00	 mov	 DWORD PTR [rsp+48], 2407 ; 00000967H
  00172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194074
  00179	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0017e	c7 44 24 20 9b
	00 00 00	 mov	 DWORD PTR [rsp+32], 155	; 0000009bH
  00186	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0018e	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00196	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0019e	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a2	e8 00 00 00 00	 call	 _hhc00890e
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN18@mod076:
  001ae	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b3	75 0a		 jne	 SHORT $LN19@mod076
  001b5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001bd	eb 08		 jmp	 SHORT $LN20@mod076
$LN19@mod076:
  001bf	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN20@mod076:
  001c7	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001cc	eb 02		 jmp	 SHORT $LN1@mod076
$LN7@mod076:
$LN5@mod076:

; 2408 :     }
; 2409 :     return true;

  001ce	b0 01		 mov	 al, 1
$LN1@mod076:

; 2410 : }

  001d0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d4	c3		 ret	 0
mod076	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv137 = 76
tv149 = 80
tv151 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod073	PROC

; 2371 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod073:

; 2372 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod073

; 2373 : 
; 2374 :     if (enable)

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 e7 00 00
	00		 je	 $LN5@mod073

; 2375 :     {
; 2376 :         if (!FACILITY_ENABLED_ARCH( 049_PROCESSOR_ASSIST, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 06	 imul	 rcx, rcx, 6
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 40	 and	 eax, 64			; 00000040H
  00054	85 c0		 test	 eax, eax
  00056	0f 85 a1 00 00
	00		 jne	 $LN7@mod073

; 2377 :             return HHC00890E(  STFL_049_PROCESSOR_ASSIST );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN10@mod073
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN11@mod073
$LN10@mod073:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN11@mod073:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN12@mod073
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN13@mod073
$LN12@mod073:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194045
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 49
	09 00 00	 mov	 DWORD PTR [rsp+48], 2377 ; 00000949H
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194046
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 31
	00 00 00	 mov	 DWORD PTR [rsp+32], 49	; 00000031H
  000b2	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN13@mod073:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN14@mod073
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN15@mod073
$LN14@mod073:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN15@mod073:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 ed 00 00 00	 jmp	 $LN1@mod073
$LN7@mod073:

; 2378 : 
; 2379 :         txf_model_warning( true );

  000fd	b1 01		 mov	 cl, 1
  000ff	e8 00 00 00 00	 call	 txf_model_warning

; 2380 :         txf_set_timerint( true );

  00104	b1 01		 mov	 cl, 1
  00106	e8 00 00 00 00	 call	 txf_set_timerint

; 2381 :     }

  0010b	e9 d8 00 00 00	 jmp	 $LN6@mod073
$LN5@mod073:

; 2382 :     else // disabling
; 2383 :     {
; 2384 :         if (FACILITY_ENABLED_ARCH( 050_CONSTR_TRANSACT, archnum ))

  00110	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00118	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0011c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00123	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0012b	b9 01 00 00 00	 mov	 ecx, 1
  00130	48 6b c9 06	 imul	 rcx, rcx, 6
  00134	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00138	83 e0 20	 and	 eax, 32			; 00000020H
  0013b	85 c0		 test	 eax, eax
  0013d	0f 84 9e 00 00
	00		 je	 $LN8@mod073

; 2385 :             return HHC00890E( STFL_050_CONSTR_TRANSACT );

  00143	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  0014c	75 0a		 jne	 SHORT $LN16@mod073
  0014e	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv137[rsp], 1
  00156	eb 08		 jmp	 SHORT $LN17@mod073
$LN16@mod073:
  00158	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv137[rsp], 0
$LN17@mod073:
  00160	83 7c 24 4c 00	 cmp	 DWORD PTR tv137[rsp], 0
  00165	74 0a		 je	 SHORT $LN18@mod073
  00167	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  0016f	eb 50		 jmp	 SHORT $LN19@mod073
$LN18@mod073:
  00171	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194048
  00178	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0017d	c7 44 24 30 51
	09 00 00	 mov	 DWORD PTR [rsp+48], 2385 ; 00000951H
  00185	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194049
  0018c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00191	c7 44 24 20 32
	00 00 00	 mov	 DWORD PTR [rsp+32], 50	; 00000032H
  00199	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  001a1	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  001a9	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  001b1	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001b5	e8 00 00 00 00	 call	 _hhc00890e
  001ba	0f b6 c0	 movzx	 eax, al
  001bd	89 44 24 50	 mov	 DWORD PTR tv149[rsp], eax
$LN19@mod073:
  001c1	83 7c 24 50 00	 cmp	 DWORD PTR tv149[rsp], 0
  001c6	75 0a		 jne	 SHORT $LN20@mod073
  001c8	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv151[rsp], 0
  001d0	eb 08		 jmp	 SHORT $LN21@mod073
$LN20@mod073:
  001d2	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv151[rsp], 1
$LN21@mod073:
  001da	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv151[rsp]
  001df	eb 09		 jmp	 SHORT $LN1@mod073
$LN8@mod073:

; 2386 : 
; 2387 :         txf_set_timerint( false );

  001e1	33 c9		 xor	 ecx, ecx
  001e3	e8 00 00 00 00	 call	 txf_set_timerint
$LN6@mod073:

; 2388 :     }
; 2389 :     return true;

  001e8	b0 01		 mov	 al, 1
$LN1@mod073:

; 2390 : }

  001ea	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001ee	c3		 ret	 0
mod073	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod068	PROC

; 2351 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod068:

; 2352 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod068

; 2353 : 
; 2354 :     if (enable)

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 a7 01 00
	00		 je	 $LN5@mod068

; 2355 :     {
; 2356 :         if (!FACILITY_ENABLED_ARCH( 040_LOAD_PROG_PARAM, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 05	 imul	 rcx, rcx, 5
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00056	85 c0		 test	 eax, eax
  00058	0f 85 a1 00 00
	00		 jne	 $LN6@mod068

; 2357 :             return HHC00890E(  STFL_040_LOAD_PROG_PARAM );

  0005e	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00067	75 0a		 jne	 SHORT $LN9@mod068
  00069	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00071	eb 08		 jmp	 SHORT $LN10@mod068
$LN9@mod068:
  00073	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN10@mod068:
  0007b	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00080	74 0a		 je	 SHORT $LN11@mod068
  00082	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  0008a	eb 50		 jmp	 SHORT $LN12@mod068
$LN11@mod068:
  0008c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194019
  00093	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00098	c7 44 24 30 35
	09 00 00	 mov	 DWORD PTR [rsp+48], 2357 ; 00000935H
  000a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194020
  000a7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000ac	c7 44 24 20 28
	00 00 00	 mov	 DWORD PTR [rsp+32], 40	; 00000028H
  000b4	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000bc	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c4	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000cc	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000d0	e8 00 00 00 00	 call	 _hhc00890e
  000d5	0f b6 c0	 movzx	 eax, al
  000d8	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN12@mod068:
  000dc	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000e1	75 0a		 jne	 SHORT $LN13@mod068
  000e3	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000eb	eb 08		 jmp	 SHORT $LN14@mod068
$LN13@mod068:
  000ed	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN14@mod068:
  000f5	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000fa	e9 d3 00 00 00	 jmp	 $LN1@mod068
$LN6@mod068:

; 2358 : 
; 2359 :         if (!FACILITY_ENABLED_ARCH( 067_CPU_MEAS_COUNTER, archnum ))

  000ff	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00107	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0010b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00112	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0011a	b9 01 00 00 00	 mov	 ecx, 1
  0011f	48 6b c9 08	 imul	 rcx, rcx, 8
  00123	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00127	83 e0 10	 and	 eax, 16
  0012a	85 c0		 test	 eax, eax
  0012c	0f 85 9e 00 00
	00		 jne	 $LN7@mod068

; 2360 :             return HHC00890E(  STFL_067_CPU_MEAS_COUNTER );

  00132	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  0013b	75 0a		 jne	 SHORT $LN15@mod068
  0013d	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00145	eb 08		 jmp	 SHORT $LN16@mod068
$LN15@mod068:
  00147	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN16@mod068:
  0014f	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00154	74 0a		 je	 SHORT $LN17@mod068
  00156	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  0015e	eb 50		 jmp	 SHORT $LN18@mod068
$LN17@mod068:
  00160	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194022
  00167	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016c	c7 44 24 30 38
	09 00 00	 mov	 DWORD PTR [rsp+48], 2360 ; 00000938H
  00174	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG194023
  0017b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00180	c7 44 24 20 43
	00 00 00	 mov	 DWORD PTR [rsp+32], 67	; 00000043H
  00188	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  00190	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00198	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  001a0	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a4	e8 00 00 00 00	 call	 _hhc00890e
  001a9	0f b6 c0	 movzx	 eax, al
  001ac	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN18@mod068:
  001b0	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b5	75 0a		 jne	 SHORT $LN19@mod068
  001b7	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001bf	eb 08		 jmp	 SHORT $LN20@mod068
$LN19@mod068:
  001c1	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN20@mod068:
  001c9	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001ce	eb 02		 jmp	 SHORT $LN1@mod068
$LN7@mod068:
$LN5@mod068:

; 2361 :     }
; 2362 :     return true;

  001d0	b0 01		 mov	 al, 1
$LN1@mod068:

; 2363 : }

  001d2	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d6	c3		 ret	 0
mod068	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod067	PROC

; 2330 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod067:

; 2331 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod067

; 2332 : 
; 2333 :     if (!enable) // disabling

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 a5 01 00
	00		 jne	 $LN5@mod067

; 2334 :     {
; 2335 :         if (FACILITY_ENABLED_ARCH( 068_CPU_MEAS_SAMPLNG, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 08	 imul	 rcx, rcx, 8
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 08	 and	 eax, 8
  00054	85 c0		 test	 eax, eax
  00056	0f 84 a1 00 00
	00		 je	 $LN6@mod067

; 2336 :             return HHC00890E( STFL_068_CPU_MEAS_SAMPLNG );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN9@mod067
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN10@mod067
$LN9@mod067:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN10@mod067:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN11@mod067
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN12@mod067
$LN11@mod067:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193994
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 20
	09 00 00	 mov	 DWORD PTR [rsp+48], 2336 ; 00000920H
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193995
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 44
	00 00 00	 mov	 DWORD PTR [rsp+32], 68	; 00000044H
  000b2	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN12@mod067:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN13@mod067
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN14@mod067
$LN13@mod067:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN14@mod067:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 d3 00 00 00	 jmp	 $LN1@mod067
$LN6@mod067:

; 2337 : 
; 2338 :         if (FACILITY_ENABLED_ARCH( 142_ST_CPU_COUNTER_MULT, archnum ))

  000fd	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00105	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	48 6b c9 11	 imul	 rcx, rcx, 17
  00121	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00125	83 e0 02	 and	 eax, 2
  00128	85 c0		 test	 eax, eax
  0012a	0f 84 9e 00 00
	00		 je	 $LN7@mod067

; 2339 :             return HHC00890E( STFL_142_ST_CPU_COUNTER_MULT );

  00130	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00139	75 0a		 jne	 SHORT $LN15@mod067
  0013b	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00143	eb 08		 jmp	 SHORT $LN16@mod067
$LN15@mod067:
  00145	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN16@mod067:
  0014d	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00152	74 0a		 je	 SHORT $LN17@mod067
  00154	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  0015c	eb 50		 jmp	 SHORT $LN18@mod067
$LN17@mod067:
  0015e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193997
  00165	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016a	c7 44 24 30 23
	09 00 00	 mov	 DWORD PTR [rsp+48], 2339 ; 00000923H
  00172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193998
  00179	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0017e	c7 44 24 20 8e
	00 00 00	 mov	 DWORD PTR [rsp+32], 142	; 0000008eH
  00186	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0018e	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00196	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0019e	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a2	e8 00 00 00 00	 call	 _hhc00890e
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN18@mod067:
  001ae	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b3	75 0a		 jne	 SHORT $LN19@mod067
  001b5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001bd	eb 08		 jmp	 SHORT $LN20@mod067
$LN19@mod067:
  001bf	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN20@mod067:
  001c7	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001cc	eb 02		 jmp	 SHORT $LN1@mod067
$LN7@mod067:
$LN5@mod067:

; 2340 :     }
; 2341 : 
; 2342 :     return true;

  001ce	b0 01		 mov	 al, 1
$LN1@mod067:

; 2343 : }

  001d0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d4	c3		 ret	 0
mod067	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod066	PROC

; 2313 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod066:

; 2314 :     UNREFERENCED( actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod066

; 2315 : 
; 2316 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod066

; 2317 :     {
; 2318 :         if (FACILITY_ENABLED_ARCH(     169_SKEY_REMOVAL, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 15	 imul	 rcx, rcx, 21
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 40	 and	 eax, 64			; 00000040H
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod066

; 2319 :             return HHC00890E_OPP( STFL_169_SKEY_REMOVAL );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod066
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod066
$LN8@mod066:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod066:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod066
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod066
$LN10@mod066:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193972
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 0f
	09 00 00	 mov	 DWORD PTR [rsp+48], 2319 ; 0000090fH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193973
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 a9
	00 00 00	 mov	 DWORD PTR [rsp+32], 169	; 000000a9H
  000ac	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR opp_actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod066:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod066
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod066
$LN12@mod066:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod066:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod066
$LN6@mod066:
$LN5@mod066:

; 2320 :     }
; 2321 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod066:

; 2322 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod066	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod061	PROC

; 2296 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod061:

; 2297 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod061

; 2298 : 
; 2299 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod061

; 2300 :     {
; 2301 :         if (!FACILITY_ENABLED_ARCH( 045_POPULATION_COUNT, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 05	 imul	 rcx, rcx, 5
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 04	 and	 eax, 4
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod061

; 2302 :             return HHC00890E(  STFL_045_POPULATION_COUNT );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod061
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod061
$LN8@mod061:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod061:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod061
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod061
$LN10@mod061:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193950
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 fe
	08 00 00	 mov	 DWORD PTR [rsp+48], 2302 ; 000008feH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193951
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 2d
	00 00 00	 mov	 DWORD PTR [rsp+32], 45	; 0000002dH
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod061:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod061
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod061
$LN12@mod061:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod061:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod061
$LN6@mod061:
$LN5@mod061:

; 2303 :     }
; 2304 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod061:

; 2305 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod061	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod051	PROC

; 2279 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod051:

; 2280 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod051

; 2281 : 
; 2282 :     if (!enable) // disabling

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 c8 00 00
	00		 jne	 $LN5@mod051

; 2283 :     {
; 2284 :         if (FACILITY_ENABLED_ARCH( 194_RESET_DAT_PROT, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 18	 imul	 rcx, rcx, 24
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 20	 and	 eax, 32			; 00000020H
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod051

; 2285 :             return HHC00890E( STFL_194_RESET_DAT_PROT );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod051
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod051
$LN8@mod051:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod051:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod051
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod051
$LN10@mod051:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193928
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 ed
	08 00 00	 mov	 DWORD PTR [rsp+48], 2285 ; 000008edH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193929
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 c2
	00 00 00	 mov	 DWORD PTR [rsp+32], 194	; 000000c2H
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod051:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod051
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod051
$LN12@mod051:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod051:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod051
$LN6@mod051:
$LN5@mod051:

; 2286 :     }
; 2287 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod051:

; 2288 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod051	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod050	PROC

; 2262 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod050:

; 2263 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod050

; 2264 : 
; 2265 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod050

; 2266 :     {
; 2267 :         if (!FACILITY_ENABLED_ARCH( 073_TRANSACT_EXEC, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 09	 imul	 rcx, rcx, 9
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 40	 and	 eax, 64			; 00000040H
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod050

; 2268 :             return HHC00890E(  STFL_073_TRANSACT_EXEC );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod050
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod050
$LN8@mod050:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod050:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod050
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod050
$LN10@mod050:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193906
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 dc
	08 00 00	 mov	 DWORD PTR [rsp+48], 2268 ; 000008dcH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193907
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 49
	00 00 00	 mov	 DWORD PTR [rsp+32], 73	; 00000049H
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod050:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod050
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod050
$LN12@mod050:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod050:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod050
$LN6@mod050:
$LN5@mod050:

; 2269 :     }
; 2270 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod050:

; 2271 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod050	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod049	PROC

; 2242 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod049:

; 2243 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod049

; 2244 : 
; 2245 :     if (!enable) // disabling

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 a5 01 00
	00		 jne	 $LN5@mod049

; 2246 :     {
; 2247 :         if (FACILITY_ENABLED_ARCH( 073_TRANSACT_EXEC, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 09	 imul	 rcx, rcx, 9
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 40	 and	 eax, 64			; 00000040H
  00054	85 c0		 test	 eax, eax
  00056	0f 84 a1 00 00
	00		 je	 $LN6@mod049

; 2248 :             return HHC00890E( STFL_073_TRANSACT_EXEC );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN9@mod049
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN10@mod049
$LN9@mod049:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN10@mod049:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN11@mod049
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN12@mod049
$LN11@mod049:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193881
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 c8
	08 00 00	 mov	 DWORD PTR [rsp+48], 2248 ; 000008c8H
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193882
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 49
	00 00 00	 mov	 DWORD PTR [rsp+32], 73	; 00000049H
  000b2	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN12@mod049:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN13@mod049
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN14@mod049
$LN13@mod049:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN14@mod049:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 d3 00 00 00	 jmp	 $LN1@mod049
$LN6@mod049:

; 2249 : 
; 2250 :         if (FACILITY_ENABLED_ARCH( 081_PPA_IN_ORDER, archnum ))

  000fd	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00105	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	48 6b c9 0a	 imul	 rcx, rcx, 10
  00121	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00125	83 e0 40	 and	 eax, 64			; 00000040H
  00128	85 c0		 test	 eax, eax
  0012a	0f 84 9e 00 00
	00		 je	 $LN7@mod049

; 2251 :             return HHC00890E( STFL_081_PPA_IN_ORDER );

  00130	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00139	75 0a		 jne	 SHORT $LN15@mod049
  0013b	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00143	eb 08		 jmp	 SHORT $LN16@mod049
$LN15@mod049:
  00145	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN16@mod049:
  0014d	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00152	74 0a		 je	 SHORT $LN17@mod049
  00154	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  0015c	eb 50		 jmp	 SHORT $LN18@mod049
$LN17@mod049:
  0015e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193884
  00165	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016a	c7 44 24 30 cb
	08 00 00	 mov	 DWORD PTR [rsp+48], 2251 ; 000008cbH
  00172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193885
  00179	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0017e	c7 44 24 20 51
	00 00 00	 mov	 DWORD PTR [rsp+32], 81	; 00000051H
  00186	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0018e	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00196	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0019e	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a2	e8 00 00 00 00	 call	 _hhc00890e
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN18@mod049:
  001ae	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b3	75 0a		 jne	 SHORT $LN19@mod049
  001b5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001bd	eb 08		 jmp	 SHORT $LN20@mod049
$LN19@mod049:
  001bf	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN20@mod049:
  001c7	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001cc	eb 02		 jmp	 SHORT $LN1@mod049
$LN7@mod049:
$LN5@mod049:

; 2252 :     }
; 2253 :     return true;

  001ce	b0 01		 mov	 al, 1
$LN1@mod049:

; 2254 : }

  001d0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d4	c3		 ret	 0
mod049	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod048	PROC

; 2225 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod048:

; 2226 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod048

; 2227 : 
; 2228 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod048

; 2229 :     {
; 2230 :         if (!FACILITY_ENABLED_ARCH( 042_DFP, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 05	 imul	 rcx, rcx, 5
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 20	 and	 eax, 32			; 00000020H
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod048

; 2231 :             return HHC00890E(  STFL_042_DFP );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod048
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod048
$LN8@mod048:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod048:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod048
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod048
$LN10@mod048:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193859
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 b7
	08 00 00	 mov	 DWORD PTR [rsp+48], 2231 ; 000008b7H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193860
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 2a
	00 00 00	 mov	 DWORD PTR [rsp+32], 42	; 0000002aH
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod048:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod048
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod048
$LN12@mod048:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod048:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod048
$LN6@mod048:
$LN5@mod048:

; 2232 :     }
; 2233 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod048:

; 2234 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod048	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod045	PROC

; 2208 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod045:

; 2209 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod045

; 2210 : 
; 2211 :     if (!enable) // disabling

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 c8 00 00
	00		 jne	 $LN5@mod045

; 2212 :     {
; 2213 :         if (FACILITY_ENABLED_ARCH( 061_MISC_INSTR_EXT_3, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 07	 imul	 rcx, rcx, 7
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 04	 and	 eax, 4
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod045

; 2214 :             return HHC00890E( STFL_061_MISC_INSTR_EXT_3 );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod045
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod045
$LN8@mod045:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod045:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod045
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod045
$LN10@mod045:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193837
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 a6
	08 00 00	 mov	 DWORD PTR [rsp+48], 2214 ; 000008a6H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193838
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 3d
	00 00 00	 mov	 DWORD PTR [rsp+32], 61	; 0000003dH
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod045:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod045
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod045
$LN12@mod045:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod045:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod045
$LN6@mod045:
$LN5@mod045:

; 2215 :     }
; 2216 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod045:

; 2217 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod045	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod043	PROC

; 2191 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod043:

; 2192 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod043

; 2193 : 
; 2194 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod043

; 2195 :     {
; 2196 :         if (!FACILITY_ENABLED_ARCH( 042_DFP, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 05	 imul	 rcx, rcx, 5
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 20	 and	 eax, 32			; 00000020H
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod043

; 2197 :             return HHC00890E(  STFL_042_DFP );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod043
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod043
$LN8@mod043:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod043:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod043
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod043
$LN10@mod043:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193815
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 95
	08 00 00	 mov	 DWORD PTR [rsp+48], 2197 ; 00000895H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193816
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 2a
	00 00 00	 mov	 DWORD PTR [rsp+32], 42	; 0000002aH
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod043:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod043
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod043
$LN12@mod043:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod043:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod043
$LN6@mod043:
$LN5@mod043:

; 2198 :     }
; 2199 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod043:

; 2200 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod043	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod042	PROC

; 2171 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod042:

; 2172 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod042

; 2173 : 
; 2174 :     if (!enable) // disabling

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 a5 01 00
	00		 jne	 $LN5@mod042

; 2175 :     {
; 2176 :         if (FACILITY_ENABLED_ARCH( 037_FP_EXTENSION, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 04	 imul	 rcx, rcx, 4
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 04	 and	 eax, 4
  00054	85 c0		 test	 eax, eax
  00056	0f 84 a1 00 00
	00		 je	 $LN6@mod042

; 2177 :             return HHC00890E( STFL_037_FP_EXTENSION );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN9@mod042
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN10@mod042
$LN9@mod042:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN10@mod042:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN11@mod042
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN12@mod042
$LN11@mod042:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193790
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 81
	08 00 00	 mov	 DWORD PTR [rsp+48], 2177 ; 00000881H
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193791
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 25
	00 00 00	 mov	 DWORD PTR [rsp+32], 37	; 00000025H
  000b2	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN12@mod042:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN13@mod042
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN14@mod042
$LN13@mod042:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN14@mod042:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 d3 00 00 00	 jmp	 $LN1@mod042
$LN6@mod042:

; 2178 : 
; 2179 :         if (FACILITY_ENABLED_ARCH( 043_DFP_HPERF, archnum ))

  000fd	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00105	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	48 6b c9 05	 imul	 rcx, rcx, 5
  00121	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00125	83 e0 10	 and	 eax, 16
  00128	85 c0		 test	 eax, eax
  0012a	0f 84 9e 00 00
	00		 je	 $LN7@mod042

; 2180 :             return HHC00890E( STFL_043_DFP_HPERF );

  00130	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00139	75 0a		 jne	 SHORT $LN15@mod042
  0013b	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00143	eb 08		 jmp	 SHORT $LN16@mod042
$LN15@mod042:
  00145	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN16@mod042:
  0014d	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00152	74 0a		 je	 SHORT $LN17@mod042
  00154	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  0015c	eb 50		 jmp	 SHORT $LN18@mod042
$LN17@mod042:
  0015e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193793
  00165	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016a	c7 44 24 30 84
	08 00 00	 mov	 DWORD PTR [rsp+48], 2180 ; 00000884H
  00172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193794
  00179	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0017e	c7 44 24 20 2b
	00 00 00	 mov	 DWORD PTR [rsp+32], 43	; 0000002bH
  00186	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0018e	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00196	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0019e	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a2	e8 00 00 00 00	 call	 _hhc00890e
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN18@mod042:
  001ae	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b3	75 0a		 jne	 SHORT $LN19@mod042
  001b5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001bd	eb 08		 jmp	 SHORT $LN20@mod042
$LN19@mod042:
  001bf	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN20@mod042:
  001c7	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001cc	eb 02		 jmp	 SHORT $LN1@mod042
$LN7@mod042:
$LN5@mod042:

; 2181 :     }
; 2182 :     return true;

  001ce	b0 01		 mov	 al, 1
$LN1@mod042:

; 2183 : }

  001d0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d4	c3		 ret	 0
mod042	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod040	PROC

; 2154 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod040:

; 2155 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod040

; 2156 : 
; 2157 :     if (!enable) // disabling

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 c8 00 00
	00		 jne	 $LN5@mod040

; 2158 :     {
; 2159 :         if (FACILITY_ENABLED_ARCH( 068_CPU_MEAS_SAMPLNG, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 08	 imul	 rcx, rcx, 8
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 08	 and	 eax, 8
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod040

; 2160 :             return HHC00890E( STFL_068_CPU_MEAS_SAMPLNG );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod040
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod040
$LN8@mod040:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod040:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod040
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod040
$LN10@mod040:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193768
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 70
	08 00 00	 mov	 DWORD PTR [rsp+48], 2160 ; 00000870H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193769
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 44
	00 00 00	 mov	 DWORD PTR [rsp+32], 68	; 00000044H
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod040:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod040
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod040
$LN12@mod040:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod040:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod040
$LN6@mod040:
$LN5@mod040:

; 2161 :     }
; 2162 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod040:

; 2163 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod040	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod037	PROC

; 2137 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod037:

; 2138 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod037

; 2139 : 
; 2140 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod037

; 2141 :     {
; 2142 :         if (!FACILITY_ENABLED_ARCH( 042_DFP, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 05	 imul	 rcx, rcx, 5
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 20	 and	 eax, 32			; 00000020H
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod037

; 2143 :             return HHC00890E(  STFL_042_DFP );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod037
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod037
$LN8@mod037:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod037:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod037
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod037
$LN10@mod037:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193746
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 5f
	08 00 00	 mov	 DWORD PTR [rsp+48], 2143 ; 0000085fH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193747
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 2a
	00 00 00	 mov	 DWORD PTR [rsp+32], 42	; 0000002aH
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod037:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod037
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod037
$LN12@mod037:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod037:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod037
$LN6@mod037:
$LN5@mod037:

; 2144 :     }
; 2145 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod037:

; 2146 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod037	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod028	PROC

; 2119 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod028:

; 2120 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod028

; 2121 : 
; 2122 :     if (!enable) // disabling

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 c8 00 00
	00		 jne	 $LN5@mod028

; 2123 :     {
; 2124 :         if (FACILITY_ENABLED_ARCH( 139_MULTIPLE_EPOCH, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 11	 imul	 rcx, rcx, 17
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 10	 and	 eax, 16
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod028

; 2125 :             return HHC00890E( STFL_139_MULTIPLE_EPOCH );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod028
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod028
$LN8@mod028:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod028:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod028
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod028
$LN10@mod028:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193724
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 4d
	08 00 00	 mov	 DWORD PTR [rsp+48], 2125 ; 0000084dH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193725
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 8b
	00 00 00	 mov	 DWORD PTR [rsp+32], 139	; 0000008bH
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod028:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod028
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod028
$LN12@mod028:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod028:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod028
$LN6@mod028:
$LN5@mod028:

; 2126 :     }
; 2127 : 
; 2128 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod028:

; 2129 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod028	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod025	PROC

; 2101 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod025:

; 2102 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod025

; 2103 : 
; 2104 :     if (!enable) // disabling

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 c8 00 00
	00		 jne	 $LN5@mod025

; 2105 :     {
; 2106 :         if (FACILITY_ENABLED_ARCH( 139_MULTIPLE_EPOCH, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 11	 imul	 rcx, rcx, 17
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 10	 and	 eax, 16
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod025

; 2107 :             return HHC00890E( STFL_139_MULTIPLE_EPOCH );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod025
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod025
$LN8@mod025:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod025:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod025
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod025
$LN10@mod025:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193702
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 3b
	08 00 00	 mov	 DWORD PTR [rsp+48], 2107 ; 0000083bH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193703
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 8b
	00 00 00	 mov	 DWORD PTR [rsp+32], 139	; 0000008bH
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod025:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod025
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod025
$LN12@mod025:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod025:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod025
$LN6@mod025:
$LN5@mod025:

; 2108 :     }
; 2109 : 
; 2110 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod025:

; 2111 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod025	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod019	PROC

; 2084 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod019:

; 2085 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod019

; 2086 : 
; 2087 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod019

; 2088 :     {
; 2089 :         if (!FACILITY_ENABLED_ARCH( 018_LONG_DISPL_INST, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 02	 imul	 rcx, rcx, 2
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 20	 and	 eax, 32			; 00000020H
  00051	85 c0		 test	 eax, eax
  00053	0f 85 98 00 00
	00		 jne	 $LN6@mod019

; 2090 :             return HHC00890E(  STFL_018_LONG_DISPL_INST );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod019
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod019
$LN8@mod019:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod019:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod019
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod019
$LN10@mod019:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193680
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 2a
	08 00 00	 mov	 DWORD PTR [rsp+48], 2090 ; 0000082aH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193681
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 12
	00 00 00	 mov	 DWORD PTR [rsp+32], 18
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod019:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod019
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod019
$LN12@mod019:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod019:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod019
$LN6@mod019:
$LN5@mod019:

; 2091 :     }
; 2092 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod019:

; 2093 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod019	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod018	PROC

; 2067 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod018:

; 2068 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod018

; 2069 : 
; 2070 :     if (!enable) // disabling

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 c8 00 00
	00		 jne	 $LN5@mod018

; 2071 :     {
; 2072 :         if (FACILITY_ENABLED_ARCH( 019_LONG_DISPL_HPERF, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 02	 imul	 rcx, rcx, 2
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 10	 and	 eax, 16
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod018

; 2073 :             return HHC00890E( STFL_019_LONG_DISPL_HPERF );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod018
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod018
$LN8@mod018:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod018:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod018
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod018
$LN10@mod018:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193658
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 19
	08 00 00	 mov	 DWORD PTR [rsp+48], 2073 ; 00000819H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193659
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 13
	00 00 00	 mov	 DWORD PTR [rsp+32], 19
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod018:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod018
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod018
$LN12@mod018:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod018:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod018
$LN6@mod018:
$LN5@mod018:

; 2074 :     }
; 2075 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod018:

; 2076 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod018	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod014	PROC

; 2045 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod014:

; 2046 :     UNREFERENCED( actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod014

; 2047 : 
; 2048 :     if (enable)

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 d9 00 00
	00		 je	 $LN5@mod014

; 2049 :     {
; 2050 :         if (FACILITY_ENABLED_ARCH(     169_SKEY_REMOVAL, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 15	 imul	 rcx, rcx, 21
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 40	 and	 eax, 64			; 00000040H
  00054	85 c0		 test	 eax, eax
  00056	0f 84 a1 00 00
	00		 je	 $LN7@mod014

; 2051 :             return HHC00890E_OPP( STFL_169_SKEY_REMOVAL );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN10@mod014
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN11@mod014
$LN10@mod014:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN11@mod014:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN12@mod014
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN13@mod014
$LN12@mod014:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193633
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 03
	08 00 00	 mov	 DWORD PTR [rsp+48], 2051 ; 00000803H
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193634
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 a9
	00 00 00	 mov	 DWORD PTR [rsp+32], 169	; 000000a9H
  000b2	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR opp_actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN13@mod014:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN14@mod014
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN15@mod014
$LN14@mod014:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN15@mod014:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 d8 00 00 00	 jmp	 $LN1@mod014
$LN7@mod014:

; 2052 :     }

  000fd	e9 d1 00 00 00	 jmp	 $LN6@mod014
$LN5@mod014:

; 2053 :     else // disabling
; 2054 :     {
; 2055 :         if (FACILITY_ENABLED_ARCH( 149_MOVEPAGE_SETKEY, archnum ))

  00102	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0010a	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0010e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00115	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0011d	b9 01 00 00 00	 mov	 ecx, 1
  00122	48 6b c9 12	 imul	 rcx, rcx, 18
  00126	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0012a	83 e0 04	 and	 eax, 4
  0012d	85 c0		 test	 eax, eax
  0012f	0f 84 9e 00 00
	00		 je	 $LN8@mod014

; 2056 :             return HHC00890E( STFL_149_MOVEPAGE_SETKEY );

  00135	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  0013e	75 0a		 jne	 SHORT $LN16@mod014
  00140	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00148	eb 08		 jmp	 SHORT $LN17@mod014
$LN16@mod014:
  0014a	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN17@mod014:
  00152	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00157	74 0a		 je	 SHORT $LN18@mod014
  00159	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  00161	eb 50		 jmp	 SHORT $LN19@mod014
$LN18@mod014:
  00163	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193636
  0016a	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016f	c7 44 24 30 08
	08 00 00	 mov	 DWORD PTR [rsp+48], 2056 ; 00000808H
  00177	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193637
  0017e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00183	c7 44 24 20 95
	00 00 00	 mov	 DWORD PTR [rsp+32], 149	; 00000095H
  0018b	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  00193	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  0019b	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  001a3	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a7	e8 00 00 00 00	 call	 _hhc00890e
  001ac	0f b6 c0	 movzx	 eax, al
  001af	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN19@mod014:
  001b3	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b8	75 0a		 jne	 SHORT $LN20@mod014
  001ba	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001c2	eb 08		 jmp	 SHORT $LN21@mod014
$LN20@mod014:
  001c4	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN21@mod014:
  001cc	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001d1	eb 02		 jmp	 SHORT $LN1@mod014
$LN8@mod014:
$LN6@mod014:

; 2057 :     }
; 2058 :     return true;

  001d3	b0 01		 mov	 al, 1
$LN1@mod014:

; 2059 : }

  001d5	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d9	c3		 ret	 0
mod014	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod010	PROC

; 2028 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod010:

; 2029 :     UNREFERENCED( actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod010

; 2030 : 
; 2031 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 c8 00 00
	00		 je	 $LN5@mod010

; 2032 :     {
; 2033 :         if (FACILITY_ENABLED_ARCH(     169_SKEY_REMOVAL, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 15	 imul	 rcx, rcx, 21
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 40	 and	 eax, 64			; 00000040H
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod010

; 2034 :             return HHC00890E_OPP( STFL_169_SKEY_REMOVAL );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod010
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod010
$LN8@mod010:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod010:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod010
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod010
$LN10@mod010:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193610
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 f2
	07 00 00	 mov	 DWORD PTR [rsp+48], 2034 ; 000007f2H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193611
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 a9
	00 00 00	 mov	 DWORD PTR [rsp+32], 169	; 000000a9H
  000ac	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR opp_actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod010:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod010
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod010
$LN12@mod010:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod010:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod010
$LN6@mod010:
$LN5@mod010:

; 2035 :     }
; 2036 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod010:

; 2037 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod010	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod008	PROC

; 2011 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod008:

; 2012 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod008

; 2013 : 
; 2014 :     if (!enable) // disabling

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 c8 00 00
	00		 jne	 $LN5@mod008

; 2015 :     {
; 2016 :         if (FACILITY_ENABLED_ARCH( 078_EDAT_2, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 09	 imul	 rcx, rcx, 9
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 02	 and	 eax, 2
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod008

; 2017 :             return HHC00890E( STFL_078_EDAT_2 );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod008
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod008
$LN8@mod008:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod008:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod008
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod008
$LN10@mod008:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193588
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 e1
	07 00 00	 mov	 DWORD PTR [rsp+48], 2017 ; 000007e1H
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193589
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 4e
	00 00 00	 mov	 DWORD PTR [rsp+32], 78	; 0000004eH
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod008:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod008
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod008
$LN12@mod008:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod008:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod008
$LN6@mod008:
$LN5@mod008:

; 2018 :     }
; 2019 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod008:

; 2020 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod008	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod007	PROC

; 1994 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod007:

; 1995 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod007

; 1996 : 
; 1997 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 ca 00 00
	00		 je	 $LN5@mod007

; 1998 :     {
; 1999 :         if (!FACILITY_ENABLED_ARCH( 000_N3_INSTR, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 00	 imul	 rcx, rcx, 0
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00053	85 c0		 test	 eax, eax
  00055	0f 85 98 00 00
	00		 jne	 $LN6@mod007

; 2000 :             return HHC00890E(  STFL_000_N3_INSTR );

  0005b	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  00061	75 0a		 jne	 SHORT $LN8@mod007
  00063	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006b	eb 08		 jmp	 SHORT $LN9@mod007
$LN8@mod007:
  0006d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod007:
  00075	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007a	74 0a		 je	 SHORT $LN10@mod007
  0007c	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00084	eb 4d		 jmp	 SHORT $LN11@mod007
$LN10@mod007:
  00086	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193566
  0008d	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00092	c7 44 24 30 d0
	07 00 00	 mov	 DWORD PTR [rsp+48], 2000 ; 000007d0H
  0009a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193567
  000a1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000ae	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b6	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000bb	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c3	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c7	e8 00 00 00 00	 call	 _hhc00890e
  000cc	0f b6 c0	 movzx	 eax, al
  000cf	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod007:
  000d3	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d8	75 0a		 jne	 SHORT $LN12@mod007
  000da	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e2	eb 08		 jmp	 SHORT $LN13@mod007
$LN12@mod007:
  000e4	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod007:
  000ec	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f1	eb 02		 jmp	 SHORT $LN1@mod007
$LN6@mod007:
$LN5@mod007:

; 2001 :     }
; 2002 :     return true;

  000f3	b0 01		 mov	 al, 1
$LN1@mod007:

; 2003 : }

  000f5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f9	c3		 ret	 0
mod007	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod005	PROC

; 1973 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod005:

; 1974 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod005

; 1975 : 
; 1976 :     if (enable)

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 a5 01 00
	00		 je	 $LN5@mod005

; 1977 :     {
; 1978 :         if (!FACILITY_ENABLED_ARCH( 003_DAT_ENHANCE_1, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 00	 imul	 rcx, rcx, 0
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 10	 and	 eax, 16
  00054	85 c0		 test	 eax, eax
  00056	0f 85 a1 00 00
	00		 jne	 $LN6@mod005

; 1979 :             return HHC00890E(  STFL_003_DAT_ENHANCE_1 );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN9@mod005
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN10@mod005
$LN9@mod005:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN10@mod005:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN11@mod005
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN12@mod005
$LN11@mod005:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193541
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 bb
	07 00 00	 mov	 DWORD PTR [rsp+48], 1979 ; 000007bbH
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193542
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  000b2	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN12@mod005:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN13@mod005
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN14@mod005
$LN13@mod005:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN14@mod005:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 d3 00 00 00	 jmp	 $LN1@mod005
$LN6@mod005:

; 1980 : 
; 1981 :         if (!FACILITY_ENABLED_ARCH( 004_IDTE_SC_SEGTAB, archnum ))

  000fd	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00105	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	48 6b c9 00	 imul	 rcx, rcx, 0
  00121	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00125	83 e0 08	 and	 eax, 8
  00128	85 c0		 test	 eax, eax
  0012a	0f 85 9e 00 00
	00		 jne	 $LN7@mod005

; 1982 :             return HHC00890E(  STFL_004_IDTE_SC_SEGTAB );

  00130	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00139	75 0a		 jne	 SHORT $LN15@mod005
  0013b	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00143	eb 08		 jmp	 SHORT $LN16@mod005
$LN15@mod005:
  00145	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN16@mod005:
  0014d	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00152	74 0a		 je	 SHORT $LN17@mod005
  00154	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  0015c	eb 50		 jmp	 SHORT $LN18@mod005
$LN17@mod005:
  0015e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193544
  00165	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016a	c7 44 24 30 be
	07 00 00	 mov	 DWORD PTR [rsp+48], 1982 ; 000007beH
  00172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193545
  00179	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0017e	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00186	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0018e	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00196	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0019e	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a2	e8 00 00 00 00	 call	 _hhc00890e
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN18@mod005:
  001ae	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b3	75 0a		 jne	 SHORT $LN19@mod005
  001b5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001bd	eb 08		 jmp	 SHORT $LN20@mod005
$LN19@mod005:
  001bf	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN20@mod005:
  001c7	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001cc	eb 02		 jmp	 SHORT $LN1@mod005
$LN7@mod005:
$LN5@mod005:

; 1983 :     }
; 1984 :     return true;

  001ce	b0 01		 mov	 al, 1
$LN1@mod005:

; 1985 : }

  001d0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d4	c3		 ret	 0
mod005	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod004	PROC

; 1951 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod004:

; 1952 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod004

; 1953 : 
; 1954 :     if (enable)

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 d9 00 00
	00		 je	 $LN5@mod004

; 1955 :     {
; 1956 :         if (!FACILITY_ENABLED_ARCH( 003_DAT_ENHANCE_1, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 00	 imul	 rcx, rcx, 0
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 10	 and	 eax, 16
  00054	85 c0		 test	 eax, eax
  00056	0f 85 a1 00 00
	00		 jne	 $LN7@mod004

; 1957 :             return HHC00890E(  STFL_003_DAT_ENHANCE_1 );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN10@mod004
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN11@mod004
$LN10@mod004:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN11@mod004:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN12@mod004
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN13@mod004
$LN12@mod004:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193516
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 a5
	07 00 00	 mov	 DWORD PTR [rsp+48], 1957 ; 000007a5H
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193517
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  000b2	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN13@mod004:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN14@mod004
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN15@mod004
$LN14@mod004:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN15@mod004:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 d8 00 00 00	 jmp	 $LN1@mod004
$LN7@mod004:

; 1958 :     }

  000fd	e9 d1 00 00 00	 jmp	 $LN6@mod004
$LN5@mod004:

; 1959 :     else // disabling
; 1960 :     {
; 1961 :         if (FACILITY_ENABLED_ARCH( 005_IDTE_SC_REGTAB, archnum ))

  00102	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0010a	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0010e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00115	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0011d	b9 01 00 00 00	 mov	 ecx, 1
  00122	48 6b c9 00	 imul	 rcx, rcx, 0
  00126	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0012a	83 e0 04	 and	 eax, 4
  0012d	85 c0		 test	 eax, eax
  0012f	0f 84 9e 00 00
	00		 je	 $LN8@mod004

; 1962 :             return HHC00890E( STFL_005_IDTE_SC_REGTAB );

  00135	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  0013e	75 0a		 jne	 SHORT $LN16@mod004
  00140	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00148	eb 08		 jmp	 SHORT $LN17@mod004
$LN16@mod004:
  0014a	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN17@mod004:
  00152	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00157	74 0a		 je	 SHORT $LN18@mod004
  00159	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  00161	eb 50		 jmp	 SHORT $LN19@mod004
$LN18@mod004:
  00163	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193519
  0016a	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016f	c7 44 24 30 aa
	07 00 00	 mov	 DWORD PTR [rsp+48], 1962 ; 000007aaH
  00177	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193520
  0017e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00183	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR [rsp+32], 5
  0018b	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  00193	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  0019b	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  001a3	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a7	e8 00 00 00 00	 call	 _hhc00890e
  001ac	0f b6 c0	 movzx	 eax, al
  001af	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN19@mod004:
  001b3	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b8	75 0a		 jne	 SHORT $LN20@mod004
  001ba	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001c2	eb 08		 jmp	 SHORT $LN21@mod004
$LN20@mod004:
  001c4	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN21@mod004:
  001cc	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001d1	eb 02		 jmp	 SHORT $LN1@mod004
$LN8@mod004:
$LN6@mod004:

; 1963 :     }
; 1964 :     return true;

  001d3	b0 01		 mov	 al, 1
$LN1@mod004:

; 1965 : }

  001d5	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d9	c3		 ret	 0
mod004	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
tv135 = 76
tv147 = 80
tv149 = 84
enable$ = 112
bitno$ = 120
archnum$ = 128
action$ = 136
actioning$ = 144
opp_actioning$ = 152
target_facname$ = 160
mod003	PROC

; 1931 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 68	 sub	 rsp, 104		; 00000068H
$LN4@mod003:

; 1932 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod003

; 1933 : 
; 1934 :     if (!enable) // disabling

  0001c	0f b6 44 24 70	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 a5 01 00
	00		 jne	 $LN5@mod003

; 1935 :     {
; 1936 :         if (FACILITY_ENABLED_ARCH( 004_IDTE_SC_SEGTAB, archnum ))

  00029	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00031	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0003c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00044	b9 01 00 00 00	 mov	 ecx, 1
  00049	48 6b c9 00	 imul	 rcx, rcx, 0
  0004d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00051	83 e0 08	 and	 eax, 8
  00054	85 c0		 test	 eax, eax
  00056	0f 84 a1 00 00
	00		 je	 $LN6@mod003

; 1937 :             return HHC00890E( STFL_004_IDTE_SC_SEGTAB );

  0005c	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00065	75 0a		 jne	 SHORT $LN9@mod003
  00067	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006f	eb 08		 jmp	 SHORT $LN10@mod003
$LN9@mod003:
  00071	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN10@mod003:
  00079	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007e	74 0a		 je	 SHORT $LN11@mod003
  00080	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00088	eb 50		 jmp	 SHORT $LN12@mod003
$LN11@mod003:
  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193490
  00091	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00096	c7 44 24 30 91
	07 00 00	 mov	 DWORD PTR [rsp+48], 1937 ; 00000791H
  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193491
  000a5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000aa	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000b2	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000ba	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  000c2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000ca	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  000ce	e8 00 00 00 00	 call	 _hhc00890e
  000d3	0f b6 c0	 movzx	 eax, al
  000d6	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN12@mod003:
  000da	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	75 0a		 jne	 SHORT $LN13@mod003
  000e1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e9	eb 08		 jmp	 SHORT $LN14@mod003
$LN13@mod003:
  000eb	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN14@mod003:
  000f3	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f8	e9 d3 00 00 00	 jmp	 $LN1@mod003
$LN6@mod003:

; 1938 : 
; 1939 :         if (FACILITY_ENABLED_ARCH( 005_IDTE_SC_REGTAB, archnum ))

  000fd	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR archnum$[rsp]
  00105	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00110	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00118	b9 01 00 00 00	 mov	 ecx, 1
  0011d	48 6b c9 00	 imul	 rcx, rcx, 0
  00121	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00125	83 e0 04	 and	 eax, 4
  00128	85 c0		 test	 eax, eax
  0012a	0f 84 9e 00 00
	00		 je	 $LN7@mod003

; 1940 :             return HHC00890E( STFL_005_IDTE_SC_REGTAB );

  00130	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR action$[rsp], 0
  00139	75 0a		 jne	 SHORT $LN15@mod003
  0013b	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00143	eb 08		 jmp	 SHORT $LN16@mod003
$LN15@mod003:
  00145	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN16@mod003:
  0014d	83 7c 24 4c 00	 cmp	 DWORD PTR tv135[rsp], 0
  00152	74 0a		 je	 SHORT $LN17@mod003
  00154	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  0015c	eb 50		 jmp	 SHORT $LN18@mod003
$LN17@mod003:
  0015e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193493
  00165	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0016a	c7 44 24 30 94
	07 00 00	 mov	 DWORD PTR [rsp+48], 1940 ; 00000794H
  00172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193494
  00179	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0017e	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR [rsp+32], 5
  00186	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  0018e	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR action$[rsp]
  00196	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  0019e	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  001a2	e8 00 00 00 00	 call	 _hhc00890e
  001a7	0f b6 c0	 movzx	 eax, al
  001aa	89 44 24 50	 mov	 DWORD PTR tv147[rsp], eax
$LN18@mod003:
  001ae	83 7c 24 50 00	 cmp	 DWORD PTR tv147[rsp], 0
  001b3	75 0a		 jne	 SHORT $LN19@mod003
  001b5	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
  001bd	eb 08		 jmp	 SHORT $LN20@mod003
$LN19@mod003:
  001bf	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
$LN20@mod003:
  001c7	0f b6 44 24 54	 movzx	 eax, BYTE PTR tv149[rsp]
  001cc	eb 02		 jmp	 SHORT $LN1@mod003
$LN7@mod003:
$LN5@mod003:

; 1941 :     }
; 1942 :     return true;

  001ce	b0 01		 mov	 al, 1
$LN1@mod003:

; 1943 : }

  001d0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d4	c3		 ret	 0
mod003	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod002	PROC

; 1914 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod002:

; 1915 :     UNREFERENCED( actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod002

; 1916 : 
; 1917 :     if (enable)

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 84 ca 00 00
	00		 je	 $LN5@mod002

; 1918 :     {
; 1919 :         if (FACILITY_ENABLED_ARCH(     168_ESA390_COMPAT_MODE, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 15	 imul	 rcx, rcx, 21
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00053	85 c0		 test	 eax, eax
  00055	0f 84 98 00 00
	00		 je	 $LN6@mod002

; 1920 :             return HHC00890E_OPP( STFL_168_ESA390_COMPAT_MODE );

  0005b	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  00061	75 0a		 jne	 SHORT $LN8@mod002
  00063	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  0006b	eb 08		 jmp	 SHORT $LN9@mod002
$LN8@mod002:
  0006d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod002:
  00075	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  0007a	74 0a		 je	 SHORT $LN10@mod002
  0007c	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00084	eb 4d		 jmp	 SHORT $LN11@mod002
$LN10@mod002:
  00086	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193468
  0008d	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00092	c7 44 24 30 80
	07 00 00	 mov	 DWORD PTR [rsp+48], 1920 ; 00000780H
  0009a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193469
  000a1	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a6	c7 44 24 20 a8
	00 00 00	 mov	 DWORD PTR [rsp+32], 168	; 000000a8H
  000ae	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR opp_actioning$[rsp]
  000b6	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000bb	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c3	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c7	e8 00 00 00 00	 call	 _hhc00890e
  000cc	0f b6 c0	 movzx	 eax, al
  000cf	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod002:
  000d3	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d8	75 0a		 jne	 SHORT $LN12@mod002
  000da	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e2	eb 08		 jmp	 SHORT $LN13@mod002
$LN12@mod002:
  000e4	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod002:
  000ec	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000f1	eb 02		 jmp	 SHORT $LN1@mod002
$LN6@mod002:
$LN5@mod002:

; 1921 :     }
; 1922 :     return true;

  000f3	b0 01		 mov	 al, 1
$LN1@mod002:

; 1923 : }

  000f5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f9	c3		 ret	 0
mod002	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
tv77 = 64
tv89 = 68
tv91 = 72
enable$ = 96
bitno$ = 104
archnum$ = 112
action$ = 120
actioning$ = 128
opp_actioning$ = 136
target_facname$ = 144
mod000	PROC

; 1894 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00012	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN4@mod000:

; 1895 :     UNREFERENCED( opp_actioning );

  00016	33 c0		 xor	 eax, eax
  00018	85 c0		 test	 eax, eax
  0001a	75 fa		 jne	 SHORT $LN4@mod000

; 1896 : 
; 1897 :     if (!enable) // disabling

  0001c	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00021	85 c0		 test	 eax, eax
  00023	0f 85 c8 00 00
	00		 jne	 $LN5@mod000

; 1898 :     {
; 1899 :         if (FACILITY_ENABLED_ARCH( 007_STFL_EXTENDED, archnum ))

  00029	48 63 44 24 70	 movsxd	 rax, DWORD PTR archnum$[rsp]
  0002e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00039	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00041	b9 01 00 00 00	 mov	 ecx, 1
  00046	48 6b c9 00	 imul	 rcx, rcx, 0
  0004a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004e	83 e0 01	 and	 eax, 1
  00051	85 c0		 test	 eax, eax
  00053	0f 84 98 00 00
	00		 je	 $LN6@mod000

; 1900 :             return HHC00890E( STFL_007_STFL_EXTENDED );

  00059	48 83 7c 24 78
	00		 cmp	 QWORD PTR action$[rsp], 0
  0005f	75 0a		 jne	 SHORT $LN8@mod000
  00061	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN9@mod000
$LN8@mod000:
  0006b	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN9@mod000:
  00073	83 7c 24 40 00	 cmp	 DWORD PTR tv77[rsp], 0
  00078	74 0a		 je	 SHORT $LN10@mod000
  0007a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  00082	eb 4d		 jmp	 SHORT $LN11@mod000
$LN10@mod000:
  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193446
  0008b	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00090	c7 44 24 30 6c
	07 00 00	 mov	 DWORD PTR [rsp+48], 1900 ; 0000076cH
  00098	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193447
  0009f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000a4	c7 44 24 20 07
	00 00 00	 mov	 DWORD PTR [rsp+32], 7
  000ac	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR actioning$[rsp]
  000b4	4c 8b 44 24 78	 mov	 r8, QWORD PTR action$[rsp]
  000b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR target_facname$[rsp]
  000c1	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  000c5	e8 00 00 00 00	 call	 _hhc00890e
  000ca	0f b6 c0	 movzx	 eax, al
  000cd	89 44 24 44	 mov	 DWORD PTR tv89[rsp], eax
$LN11@mod000:
  000d1	83 7c 24 44 00	 cmp	 DWORD PTR tv89[rsp], 0
  000d6	75 0a		 jne	 SHORT $LN12@mod000
  000d8	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv91[rsp], 0
  000e0	eb 08		 jmp	 SHORT $LN13@mod000
$LN12@mod000:
  000e2	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv91[rsp], 1
$LN13@mod000:
  000ea	0f b6 44 24 48	 movzx	 eax, BYTE PTR tv91[rsp]
  000ef	eb 02		 jmp	 SHORT $LN1@mod000
$LN6@mod000:
$LN5@mod000:

; 1901 :     }
; 1902 :     return true;

  000f1	b0 01		 mov	 al, 1
$LN1@mod000:

; 1903 : }

  000f3	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f7	c3		 ret	 0
mod000	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_facility_not_enabled PROC

; 844  : static DEF_INST( facility_not_enabled ) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 845  :        ARCH_DEP( operation_exception )( inst, regs ); }

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_facility_not_enabled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_facility_not_enabled PROC

; 844  : static DEF_INST( facility_not_enabled ) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 845  :        ARCH_DEP( operation_exception )( inst, regs ); }

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_facility_not_enabled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_facility_not_enabled PROC

; 844  : static DEF_INST( facility_not_enabled ) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 845  :        ARCH_DEP( operation_exception )( inst, regs ); }

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_facility_not_enabled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
enable$ = 96
enabled$ = 97
modified$ = 98
forced$ = 99
at$ = 104
ft$ = 112
bitno$ = 120
fbyte$ = 124
fbit$ = 128
c$1 = 132
tv253 = 136
tv267 = 140
tv269 = 144
tv426 = 148
tv440 = 152
tv442 = 156
p$2 = 160
tv577 = 168
tv329 = 176
tv332 = 184
tv335 = 192
target_facname$3 = 200
tv455 = 208
tv460 = 216
tv464 = 224
tv77 = 232
tv136 = 240
tv183 = 248
tv226 = 256
opp_actioning$4 = 264
actioning$5 = 272
action$6 = 280
sev$ = 288
argc$ = 320
argv$ = 328
facility_enable_disable PROC

; 4451 : {

$LN60:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H

; 4452 :     const ARCHTAB*  at;
; 4453 :     const FACTAB*   ft;
; 4454 :     const char*     sev;
; 4455 : 
; 4456 :     int   bitno, fbyte, fbit;
; 4457 :     bool  enable, forced = false;

  00010	c6 44 24 63 00	 mov	 BYTE PTR forced$[rsp], 0
$LN4@facility_e:

; 4458 :     bool  enabled, modified;
; 4459 : 
; 4460 :     UPPER_ARGV_0( argv );

  00015	48 83 bc 24 48
	01 00 00 00	 cmp	 QWORD PTR argv$[rsp], 0
  0001e	74 47		 je	 SHORT $LN5@facility_e
  00020	b8 08 00 00 00	 mov	 eax, 8
  00025	48 6b c0 00	 imul	 rax, rax, 0
  00029	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00031	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00036	74 2f		 je	 SHORT $LN5@facility_e
  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	b9 08 00 00 00	 mov	 ecx, 8
  00046	48 6b c9 00	 imul	 rcx, rcx, 0
  0004a	48 8b 94 24 48
	01 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00052	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00056	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0005e	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00062	e8 00 00 00 00	 call	 strupper
$LN5@facility_e:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a8		 jne	 SHORT $LN4@facility_e

; 4461 : 
; 4462 :     if (argc < 3 || argc > 4)

  0006d	83 bc 24 40 01
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00075	7c 0a		 jl	 SHORT $LN7@facility_e
  00077	83 bc 24 40 01
	00 00 04	 cmp	 DWORD PTR argc$[rsp], 4
  0007f	7e 7b		 jle	 SHORT $LN6@facility_e
$LN7@facility_e:

; 4463 :     {
; 4464 :         // "Invalid command usage. Type 'help %s' for assistance."
; 4465 :         WRMSG( HHC02299, "E", argv[0] );

  00081	b8 08 00 00 00	 mov	 eax, 8
  00086	48 6b c0 00	 imul	 rax, rax, 0
  0008a	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv77[rsp], rax
  00092	b9 01 00 00 00	 mov	 ecx, 1
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009d	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000a5	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR tv77[rsp]
  000ad	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  000b1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196287
  000bd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196288
  000c9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000ce	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196289
  000e0	ba 71 11 00 00	 mov	 edx, 4465		; 00001171H
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196290
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4466 :         return -1;

  000f2	b8 ff ff ff ff	 mov	 eax, -1
  000f7	e9 6d 0a 00 00	 jmp	 $LN1@facility_e
$LN6@facility_e:

; 4467 :     }
; 4468 : 
; 4469 :     if      (CMD( argv[1], ENABLE,  1 )) enable = true;

  000fc	b8 08 00 00 00	 mov	 eax, 8
  00101	48 6b c0 01	 imul	 rax, rax, 1
  00105	41 b8 01 00 00
	00		 mov	 r8d, 1
  0010b	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00113	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196293
  0011e	e8 00 00 00 00	 call	 strcaseabbrev
  00123	85 c0		 test	 eax, eax
  00125	74 0a		 je	 SHORT $LN8@facility_e
  00127	c6 44 24 60 01	 mov	 BYTE PTR enable$[rsp], 1
  0012c	e9 bc 00 00 00	 jmp	 $LN9@facility_e
$LN8@facility_e:

; 4470 :     else if (CMD( argv[1], DISABLE, 1 )) enable = false;

  00131	b8 08 00 00 00	 mov	 eax, 8
  00136	48 6b c0 01	 imul	 rax, rax, 1
  0013a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00140	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00148	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0014c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196296
  00153	e8 00 00 00 00	 call	 strcaseabbrev
  00158	85 c0		 test	 eax, eax
  0015a	74 0a		 je	 SHORT $LN10@facility_e
  0015c	c6 44 24 60 00	 mov	 BYTE PTR enable$[rsp], 0
  00161	e9 87 00 00 00	 jmp	 $LN11@facility_e
$LN10@facility_e:

; 4471 :     else
; 4472 :     {
; 4473 :         // "Invalid argument %s%s"
; 4474 :         WRMSG( HHC02205, "E", argv[1], "; use 'ENABLE' or 'DISABLE'" );

  00166	b8 08 00 00 00	 mov	 eax, 8
  0016b	48 6b c0 01	 imul	 rax, rax, 1
  0016f	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv136[rsp], rax
  00177	b9 01 00 00 00	 mov	 ecx, 1
  0017c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196297
  00189	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0018e	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00196	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR tv136[rsp]
  0019e	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001a2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196298
  001ae	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196299
  001ba	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001bf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c4	41 b9 03 00 00
	00		 mov	 r9d, 3
  001ca	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196300
  001d1	ba 7a 11 00 00	 mov	 edx, 4474		; 0000117aH
  001d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196301
  001dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4475 :         return -1;

  001e3	b8 ff ff ff ff	 mov	 eax, -1
  001e8	e9 7c 09 00 00	 jmp	 $LN1@facility_e
$LN11@facility_e:
$LN9@facility_e:

; 4476 :     }
; 4477 : 
; 4478 :     /* The facility list cannot be updated once system is IPLed */
; 4479 :     if (sysblk.ipled)

  001ed	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  001f4	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  001fa	d1 e8		 shr	 eax, 1
  001fc	83 e0 01	 and	 eax, 1
  001ff	85 c0		 test	 eax, eax
  00201	74 51		 je	 SHORT $LN12@facility_e

; 4480 :     {
; 4481 :         // "Available facilities cannot be changed once system is IPLed"
; 4482 :         WRMSG( HHC00889, "E" );

  00203	b9 01 00 00 00	 mov	 ecx, 1
  00208	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0020e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196303
  00215	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0021a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196304
  00221	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00226	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0022b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00231	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196305
  00238	ba 82 11 00 00	 mov	 edx, 4482		; 00001182H
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196306
  00244	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4483 :         return -1;

  0024a	b8 ff ff ff ff	 mov	 eax, -1
  0024f	e9 15 09 00 00	 jmp	 $LN1@facility_e
$LN12@facility_e:

; 4484 :     }
; 4485 : 
; 4486 :     /* Make sure all CPUs are deconfigured or stopped */
; 4487 :     if (are_any_cpus_started())

  00254	e8 00 00 00 00	 call	 are_any_cpus_started
  00259	0f b6 c0	 movzx	 eax, al
  0025c	85 c0		 test	 eax, eax
  0025e	74 5d		 je	 SHORT $LN13@facility_e

; 4488 :     {
; 4489 :         // "All CPU's must be stopped %s"
; 4490 :         WRMSG( HHC02253, "E", "to ENABLE or DISABLE a facility" );

  00260	b9 01 00 00 00	 mov	 ecx, 1
  00265	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0026b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196308
  00272	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00277	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196309
  0027e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00283	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196310
  0028a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0028f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00294	41 b9 03 00 00
	00		 mov	 r9d, 3
  0029a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196311
  002a1	ba 8a 11 00 00	 mov	 edx, 4490		; 0000118aH
  002a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196312
  002ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4491 :         return HERRCPUONL;

  002b3	b8 fd ff ff ff	 mov	 eax, -3
  002b8	e9 ac 08 00 00	 jmp	 $LN1@facility_e
$LN13@facility_e:

; 4492 :     }
; 4493 : 
; 4494 :     /* Get pointer to Architecture Table entry */
; 4495 :     if (argc < 4)

  002bd	83 bc 24 40 01
	00 00 04	 cmp	 DWORD PTR argc$[rsp], 4
  002c5	7d 1c		 jge	 SHORT $LN14@facility_e

; 4496 :     {
; 4497 :         at = get_archtab_by_arch( sysblk.arch_mode );

  002c7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  002ce	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [rax+136]
  002d4	e8 00 00 00 00	 call	 get_archtab_by_arch
  002d9	48 89 44 24 68	 mov	 QWORD PTR at$[rsp], rax

; 4498 :     }

  002de	e9 a2 00 00 00	 jmp	 $LN15@facility_e
$LN14@facility_e:

; 4499 :     else // (argc == 4)
; 4500 :     {
; 4501 :         if (!(at = get_archtab_by_name( argv[3] )))

  002e3	b8 08 00 00 00	 mov	 eax, 8
  002e8	48 6b c0 03	 imul	 rax, rax, 3
  002ec	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002f4	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  002f8	e8 00 00 00 00	 call	 get_archtab_by_name
  002fd	48 89 44 24 68	 mov	 QWORD PTR at$[rsp], rax
  00302	48 83 7c 24 68
	00		 cmp	 QWORD PTR at$[rsp], 0
  00308	75 7b		 jne	 SHORT $LN16@facility_e

; 4502 :         {
; 4503 :             // "ARCHLVL '%s' is invalid"
; 4504 :             WRMSG( HHC00895, "E", argv[3] );

  0030a	b8 08 00 00 00	 mov	 eax, 8
  0030f	48 6b c0 03	 imul	 rax, rax, 3
  00313	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv183[rsp], rax
  0031b	b9 01 00 00 00	 mov	 ecx, 1
  00320	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00326	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0032e	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR tv183[rsp]
  00336	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0033a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0033f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196316
  00346	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0034b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196317
  00352	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00357	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0035c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00362	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196318
  00369	ba 98 11 00 00	 mov	 edx, 4504		; 00001198H
  0036e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196319
  00375	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4505 :             return -1;

  0037b	b8 ff ff ff ff	 mov	 eax, -1
  00380	e9 e4 07 00 00	 jmp	 $LN1@facility_e
$LN16@facility_e:
$LN15@facility_e:

; 4506 :         }
; 4507 :     }
; 4508 : 
; 4509 :     /* Get pointer to specified Facility Table entry */
; 4510 :     if (!(ft = get_factab_by_name( argv[2] )))

  00385	b8 08 00 00 00	 mov	 eax, 8
  0038a	48 6b c0 02	 imul	 rax, rax, 2
  0038e	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00396	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0039a	e8 00 00 00 00	 call	 get_factab_by_name
  0039f	48 89 44 24 70	 mov	 QWORD PTR ft$[rsp], rax
  003a4	48 83 7c 24 70
	00		 cmp	 QWORD PTR ft$[rsp], 0
  003aa	0f 85 4d 01 00
	00		 jne	 $LN17@facility_e

; 4511 :     {
; 4512 :         const char* p;
; 4513 :         char  c;
; 4514 : 
; 4515 :         if (strncasecmp( "BIT", p = argv[2], 3 ) == 0)

  003b0	b8 08 00 00 00	 mov	 eax, 8
  003b5	48 6b c0 02	 imul	 rax, rax, 2
  003b9	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003c1	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  003c5	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR p$2[rsp], rax
  003cd	41 b8 03 00 00
	00		 mov	 r8d, 3
  003d3	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR p$2[rsp]
  003db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196323
  003e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  003e8	85 c0		 test	 eax, eax
  003ea	75 14		 jne	 SHORT $LN19@facility_e

; 4516 :             p += 3;

  003ec	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR p$2[rsp]
  003f4	48 83 c0 03	 add	 rax, 3
  003f8	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR p$2[rsp], rax
$LN19@facility_e:

; 4517 : 
; 4518 :         if (0
; 4519 :             || !isdigit( *p )
; 4520 :             || sscanf( p, "%d%c", &bitno, &c ) != 1
; 4521 :             || bitno < 0
; 4522 :             || bitno > (int) STFL_HERC_LAST_BIT
; 4523 :             || !(ft = get_factab_by_bitno( bitno ))

  00400	33 c0		 xor	 eax, eax
  00402	85 c0		 test	 eax, eax
  00404	75 68		 jne	 SHORT $LN21@facility_e
  00406	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR p$2[rsp]
  0040e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00411	8b c8		 mov	 ecx, eax
  00413	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  00419	85 c0		 test	 eax, eax
  0041b	74 51		 je	 SHORT $LN21@facility_e
  0041d	4c 8d 8c 24 84
	00 00 00	 lea	 r9, QWORD PTR c$1[rsp]
  00425	4c 8d 44 24 78	 lea	 r8, QWORD PTR bitno$[rsp]
  0042a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG196326
  00431	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR p$2[rsp]
  00439	e8 00 00 00 00	 call	 sscanf
  0043e	83 f8 01	 cmp	 eax, 1
  00441	75 2b		 jne	 SHORT $LN21@facility_e
  00443	83 7c 24 78 00	 cmp	 DWORD PTR bitno$[rsp], 0
  00448	7c 24		 jl	 SHORT $LN21@facility_e
  0044a	81 7c 24 78 12
	01 00 00	 cmp	 DWORD PTR bitno$[rsp], 274 ; 00000112H
  00452	7f 1a		 jg	 SHORT $LN21@facility_e
  00454	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  00458	e8 00 00 00 00	 call	 get_factab_by_bitno
  0045d	48 89 44 24 70	 mov	 QWORD PTR ft$[rsp], rax
  00462	48 83 7c 24 70
	00		 cmp	 QWORD PTR ft$[rsp], 0
  00468	0f 85 88 00 00
	00		 jne	 $LN20@facility_e
$LN21@facility_e:

; 4524 :         )
; 4525 :         {
; 4526 :             // "Facility( %s ) does not exist for %s"
; 4527 :             WRMSG( HHC00892, "E", argv[2], at->name );

  0046e	b8 08 00 00 00	 mov	 eax, 8
  00473	48 6b c0 02	 imul	 rax, rax, 2
  00477	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv226[rsp], rax
  0047f	b9 01 00 00 00	 mov	 ecx, 1
  00484	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0048a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  0048f	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00492	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00497	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0049f	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR tv226[rsp]
  004a7	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  004ab	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  004b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196327
  004b7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196328
  004c3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004c8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004cd	41 b9 03 00 00
	00		 mov	 r9d, 3
  004d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196329
  004da	ba af 11 00 00	 mov	 edx, 4527		; 000011afH
  004df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196330
  004e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4528 :             return -1;

  004ec	b8 ff ff ff ff	 mov	 eax, -1
  004f1	e9 73 06 00 00	 jmp	 $LN1@facility_e
$LN20@facility_e:

; 4529 :         }
; 4530 : 
; 4531 :         forced = true;  // (bypass "supported" check)

  004f6	c6 44 24 63 01	 mov	 BYTE PTR forced$[rsp], 1

; 4532 :     }

  004fb	eb 0c		 jmp	 SHORT $LN18@facility_e
$LN17@facility_e:

; 4533 :     else
; 4534 :         bitno = ft->bitno;

  004fd	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  00502	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00505	89 44 24 78	 mov	 DWORD PTR bitno$[rsp], eax
$LN18@facility_e:

; 4535 : 
; 4536 :     /* Get the bit and byte number */
; 4537 :     fbyte  =         (bitno / 8);

  00509	8b 44 24 78	 mov	 eax, DWORD PTR bitno$[rsp]
  0050d	99		 cdq
  0050e	83 e2 07	 and	 edx, 7
  00511	03 c2		 add	 eax, edx
  00513	c1 f8 03	 sar	 eax, 3
  00516	89 44 24 7c	 mov	 DWORD PTR fbyte$[rsp], eax

; 4538 :     fbit   = 0x80 >> (bitno % 8);

  0051a	8b 44 24 78	 mov	 eax, DWORD PTR bitno$[rsp]
  0051e	99		 cdq
  0051f	83 e2 07	 and	 edx, 7
  00522	03 c2		 add	 eax, edx
  00524	83 e0 07	 and	 eax, 7
  00527	2b c2		 sub	 eax, edx
  00529	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  0052e	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR tv577[rsp], ecx
  00535	0f b6 c8	 movzx	 ecx, al
  00538	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv577[rsp]
  0053f	d3 f8		 sar	 eax, cl
  00541	89 84 24 80 00
	00 00		 mov	 DWORD PTR fbit$[rsp], eax

; 4539 : 
; 4540 :     /* Set some flags */
; 4541 :     enabled  = sysblk.facility_list[ at->num ][ fbyte ] & fbit;

  00548	48 8b 44 24 68	 mov	 rax, QWORD PTR at$[rsp]
  0054d	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00551	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00555	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0055c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00564	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  00569	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0056d	23 84 24 80 00
	00 00		 and	 eax, DWORD PTR fbit$[rsp]
  00574	85 c0		 test	 eax, eax
  00576	75 0d		 jne	 SHORT $LN32@facility_e
  00578	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv253[rsp], 0
  00583	eb 0b		 jmp	 SHORT $LN33@facility_e
$LN32@facility_e:
  00585	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv253[rsp], 1
$LN33@facility_e:
  00590	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR tv253[rsp]
  00598	88 44 24 61	 mov	 BYTE PTR enabled$[rsp], al

; 4542 : 
; 4543 :     modified = ( (ft->defmask & at->amask) && !enabled) ||

  0059c	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  005a1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  005a6	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  005a9	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  005ac	23 c1		 and	 eax, ecx
  005ae	85 c0		 test	 eax, eax
  005b0	74 09		 je	 SHORT $LN34@facility_e
  005b2	0f b6 44 24 61	 movzx	 eax, BYTE PTR enabled$[rsp]
  005b7	85 c0		 test	 eax, eax
  005b9	74 2c		 je	 SHORT $LN36@facility_e
$LN34@facility_e:
  005bb	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  005c0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  005c5	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  005c8	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  005cb	23 c1		 and	 eax, ecx
  005cd	85 c0		 test	 eax, eax
  005cf	75 09		 jne	 SHORT $LN35@facility_e
  005d1	0f b6 44 24 61	 movzx	 eax, BYTE PTR enabled$[rsp]
  005d6	85 c0		 test	 eax, eax
  005d8	75 0d		 jne	 SHORT $LN36@facility_e
$LN35@facility_e:
  005da	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv267[rsp], 0
  005e5	eb 0b		 jmp	 SHORT $LN37@facility_e
$LN36@facility_e:
  005e7	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv267[rsp], 1
$LN37@facility_e:
  005f2	83 bc 24 8c 00
	00 00 00	 cmp	 DWORD PTR tv267[rsp], 0
  005fa	75 0d		 jne	 SHORT $LN38@facility_e
  005fc	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv269[rsp], 0
  00607	eb 0b		 jmp	 SHORT $LN39@facility_e
$LN38@facility_e:
  00609	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv269[rsp], 1
$LN39@facility_e:
  00614	0f b6 84 24 90
	00 00 00	 movzx	 eax, BYTE PTR tv269[rsp]
  0061c	88 44 24 62	 mov	 BYTE PTR modified$[rsp], al

; 4544 :                (!(ft->defmask & at->amask) &&  enabled);
; 4545 : 
; 4546 :     /* Verify facility is supported for this architecture */
; 4547 :     if (1
; 4548 :         && !forced
; 4549 :         && !modified
; 4550 :         && !(ft->supmask & at->amask)   // (supported?)

  00620	33 c0		 xor	 eax, eax
  00622	83 f8 01	 cmp	 eax, 1
  00625	0f 84 9c 00 00
	00		 je	 $LN22@facility_e
  0062b	0f b6 44 24 63	 movzx	 eax, BYTE PTR forced$[rsp]
  00630	85 c0		 test	 eax, eax
  00632	0f 85 8f 00 00
	00		 jne	 $LN22@facility_e
  00638	0f b6 44 24 62	 movzx	 eax, BYTE PTR modified$[rsp]
  0063d	85 c0		 test	 eax, eax
  0063f	0f 85 82 00 00
	00		 jne	 $LN22@facility_e
  00645	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  0064a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  0064f	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00652	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  00655	23 c1		 and	 eax, ecx
  00657	85 c0		 test	 eax, eax
  00659	75 6c		 jne	 SHORT $LN22@facility_e

; 4551 :     )
; 4552 :     {
; 4553 :         // "Facility( %s ) not supported for %s"
; 4554 :         WRMSG( HHC00896, "E", ft->name, at->name );

  0065b	b9 01 00 00 00	 mov	 ecx, 1
  00660	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00666	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  0066b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0066e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00673	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ft$[rsp]
  00678	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0067c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00681	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196332
  00688	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0068d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196333
  00694	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00699	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0069e	41 b9 03 00 00
	00		 mov	 r9d, 3
  006a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196334
  006ab	ba ca 11 00 00	 mov	 edx, 4554		; 000011caH
  006b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196335
  006b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4555 :         return -1;

  006bd	b8 ff ff ff ff	 mov	 eax, -1
  006c2	e9 a2 04 00 00	 jmp	 $LN1@facility_e
$LN22@facility_e:

; 4556 :     }
; 4557 : 
; 4558 :     /* Check for facility enable/disable pre-requisite violation */
; 4559 :     if (ft->modokfunc)

  006c7	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  006cc	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  006d0	0f 84 21 01 00
	00		 je	 $LN23@facility_e

; 4560 :     {
; 4561 :         const char*  action          = enable? "enable"    : "disable";

  006d6	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  006db	85 c0		 test	 eax, eax
  006dd	74 11		 je	 SHORT $LN40@facility_e
  006df	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG196337
  006e6	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv329[rsp], rax
  006ee	eb 0f		 jmp	 SHORT $LN41@facility_e
$LN40@facility_e:
  006f0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG196338
  006f7	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv329[rsp], rax
$LN41@facility_e:
  006ff	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv329[rsp]
  00707	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR action$6[rsp], rax

; 4562 :         const char*  actioning       = enable? "enabling"  : "disabling";

  0070f	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00714	85 c0		 test	 eax, eax
  00716	74 11		 je	 SHORT $LN42@facility_e
  00718	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG196339
  0071f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv332[rsp], rax
  00727	eb 0f		 jmp	 SHORT $LN43@facility_e
$LN42@facility_e:
  00729	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG196340
  00730	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv332[rsp], rax
$LN43@facility_e:
  00738	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv332[rsp]
  00740	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR actioning$5[rsp], rax

; 4563 :         const char*  opp_actioning   = enable? "DISABLING" : "ENABLING";

  00748	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  0074d	85 c0		 test	 eax, eax
  0074f	74 11		 je	 SHORT $LN44@facility_e
  00751	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG196341
  00758	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv335[rsp], rax
  00760	eb 0f		 jmp	 SHORT $LN45@facility_e
$LN44@facility_e:
  00762	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG196342
  00769	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv335[rsp], rax
$LN45@facility_e:
  00771	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tv335[rsp]
  00779	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR opp_actioning$4[rsp], rax

; 4564 :         const char*  target_facname  = get_facname_by_bitno( bitno,

  00781	48 8d 94 24 c8
	00 00 00	 lea	 rdx, QWORD PTR target_facname$3[rsp]
  00789	8b 4c 24 78	 mov	 ecx, DWORD PTR bitno$[rsp]
  0078d	e8 00 00 00 00	 call	 get_facname_by_bitno
  00792	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR target_facname$3[rsp], rax

; 4565 :                                                       &target_facname );
; 4566 : 
; 4567 :         if (!ft->modokfunc( enable, ft->bitno, at->num,

  0079a	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR target_facname$3[rsp]
  007a2	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  007a7	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR opp_actioning$4[rsp]
  007af	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  007b4	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR actioning$5[rsp]
  007bc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007c1	4c 8b 8c 24 18
	01 00 00	 mov	 r9, QWORD PTR action$6[rsp]
  007c9	48 8b 44 24 68	 mov	 rax, QWORD PTR at$[rsp]
  007ce	44 8b 40 08	 mov	 r8d, DWORD PTR [rax+8]
  007d2	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  007d7	8b 50 20	 mov	 edx, DWORD PTR [rax+32]
  007da	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR enable$[rsp]
  007df	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  007e4	ff 10		 call	 QWORD PTR [rax]
  007e6	0f b6 c0	 movzx	 eax, al
  007e9	85 c0		 test	 eax, eax
  007eb	75 0a		 jne	 SHORT $LN24@facility_e

; 4568 :             action, actioning, opp_actioning, target_facname ))
; 4569 :             return -1; // (error msg already issued)

  007ed	b8 ff ff ff ff	 mov	 eax, -1
  007f2	e9 72 03 00 00	 jmp	 $LN1@facility_e
$LN24@facility_e:
$LN23@facility_e:

; 4570 :     }
; 4571 : 
; 4572 :     /* If disabling, don't allow if required */
; 4573 :     if (!enable && (ft->reqmask & at->amask))

  007f7	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  007fc	85 c0		 test	 eax, eax
  007fe	0f 85 82 00 00
	00		 jne	 $LN25@facility_e
  00804	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  00809	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  0080e	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00811	8b 40 2c	 mov	 eax, DWORD PTR [rax+44]
  00814	23 c1		 and	 eax, ecx
  00816	85 c0		 test	 eax, eax
  00818	74 6c		 je	 SHORT $LN25@facility_e

; 4574 :     {
; 4575 :         // "Facility( %s ) is required for %s"
; 4576 :         WRMSG( HHC00897, "E", ft->name, at->name );

  0081a	b9 01 00 00 00	 mov	 ecx, 1
  0081f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00825	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  0082a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0082d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00832	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ft$[rsp]
  00837	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0083b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00840	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196345
  00847	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0084c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196346
  00853	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00858	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0085d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00863	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196347
  0086a	ba e0 11 00 00	 mov	 edx, 4576		; 000011e0H
  0086f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196348
  00876	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 4577 :         return -1;

  0087c	b8 ff ff ff ff	 mov	 eax, -1
  00881	e9 e3 02 00 00	 jmp	 $LN1@facility_e
$LN25@facility_e:

; 4578 :     }
; 4579 : 
; 4580 :     /* Special handling for HERC_370_EXTENSION pseudo-facility */
; 4581 :     if (STFL_HERC_370_EXTENSION == bitno)

  00886	48 63 44 24 78	 movsxd	 rax, DWORD PTR bitno$[rsp]
  0088b	48 3d 00 01 00
	00		 cmp	 rax, 256		; 00000100H
  00891	75 0a		 jne	 SHORT $LN26@facility_e

; 4582 :     {
; 4583 :         /* Enable/disable all dependent facilities first */
; 4584 :         enable_disable_herc37X( enable );

  00893	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR enable$[rsp]
  00898	e8 00 00 00 00	 call	 enable_disable_herc37X
$LN26@facility_e:

; 4585 :         /* Then fall through to enable/disable 370X itself */
; 4586 :     }
; 4587 : 
; 4588 :     /* Enable or disable the requested facility */
; 4589 :     if (enable)

  0089d	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  008a2	85 c0		 test	 eax, eax
  008a4	74 52		 je	 SHORT $LN27@facility_e

; 4590 :         sysblk.facility_list[ at->num ][ fbyte ] |= fbit;

  008a6	48 8b 44 24 68	 mov	 rax, QWORD PTR at$[rsp]
  008ab	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  008af	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  008b3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  008ba	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  008c2	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  008c7	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  008cb	0b 84 24 80 00
	00 00		 or	 eax, DWORD PTR fbit$[rsp]
  008d2	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  008d7	48 8b 54 24 68	 mov	 rdx, QWORD PTR at$[rsp]
  008dc	48 63 52 08	 movsxd	 rdx, DWORD PTR [rdx+8]
  008e0	48 6b d2 28	 imul	 rdx, rdx, 40		; 00000028H
  008e4	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  008eb	49 8d 94 10 a0
	0d 00 00	 lea	 rdx, QWORD PTR [r8+rdx+3488]
  008f3	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  008f6	eb 54		 jmp	 SHORT $LN28@facility_e
$LN27@facility_e:

; 4591 :     else
; 4592 :         sysblk.facility_list[ at->num ][ fbyte ] &= ~fbit;

  008f8	48 8b 44 24 68	 mov	 rax, QWORD PTR at$[rsp]
  008fd	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00901	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00905	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0090c	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00914	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  00919	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR fbit$[rsp]
  00920	f7 d2		 not	 edx
  00922	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00926	23 c2		 and	 eax, edx
  00928	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  0092d	48 8b 54 24 68	 mov	 rdx, QWORD PTR at$[rsp]
  00932	48 63 52 08	 movsxd	 rdx, DWORD PTR [rdx+8]
  00936	48 6b d2 28	 imul	 rdx, rdx, 40		; 00000028H
  0093a	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  00941	49 8d 94 10 a0
	0d 00 00	 lea	 rdx, QWORD PTR [r8+rdx+3488]
  00949	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN28@facility_e:

; 4593 : 
; 4594 :     /* Update flags */
; 4595 :     enabled  = sysblk.facility_list[ at->num ][ fbyte ] & fbit;

  0094c	48 8b 44 24 68	 mov	 rax, QWORD PTR at$[rsp]
  00951	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00955	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00959	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00960	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00968	48 63 4c 24 7c	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  0096d	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00971	23 84 24 80 00
	00 00		 and	 eax, DWORD PTR fbit$[rsp]
  00978	85 c0		 test	 eax, eax
  0097a	75 0d		 jne	 SHORT $LN46@facility_e
  0097c	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv426[rsp], 0
  00987	eb 0b		 jmp	 SHORT $LN47@facility_e
$LN46@facility_e:
  00989	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv426[rsp], 1
$LN47@facility_e:
  00994	0f b6 84 24 94
	00 00 00	 movzx	 eax, BYTE PTR tv426[rsp]
  0099c	88 44 24 61	 mov	 BYTE PTR enabled$[rsp], al

; 4596 : 
; 4597 :     modified = ( (ft->defmask & at->amask) && !enabled) ||

  009a0	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  009a5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  009aa	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  009ad	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  009b0	23 c1		 and	 eax, ecx
  009b2	85 c0		 test	 eax, eax
  009b4	74 09		 je	 SHORT $LN48@facility_e
  009b6	0f b6 44 24 61	 movzx	 eax, BYTE PTR enabled$[rsp]
  009bb	85 c0		 test	 eax, eax
  009bd	74 2c		 je	 SHORT $LN50@facility_e
$LN48@facility_e:
  009bf	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  009c4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  009c9	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  009cc	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  009cf	23 c1		 and	 eax, ecx
  009d1	85 c0		 test	 eax, eax
  009d3	75 09		 jne	 SHORT $LN49@facility_e
  009d5	0f b6 44 24 61	 movzx	 eax, BYTE PTR enabled$[rsp]
  009da	85 c0		 test	 eax, eax
  009dc	75 0d		 jne	 SHORT $LN50@facility_e
$LN49@facility_e:
  009de	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv440[rsp], 0
  009e9	eb 0b		 jmp	 SHORT $LN51@facility_e
$LN50@facility_e:
  009eb	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv440[rsp], 1
$LN51@facility_e:
  009f6	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR tv440[rsp], 0
  009fe	75 0d		 jne	 SHORT $LN52@facility_e
  00a00	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv442[rsp], 0
  00a0b	eb 0b		 jmp	 SHORT $LN53@facility_e
$LN52@facility_e:
  00a0d	c7 84 24 9c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv442[rsp], 1
$LN53@facility_e:
  00a18	0f b6 84 24 9c
	00 00 00	 movzx	 eax, BYTE PTR tv442[rsp]
  00a20	88 44 24 62	 mov	 BYTE PTR modified$[rsp], al

; 4598 :                (!(ft->defmask & at->amask) &&  enabled);
; 4599 : 
; 4600 :     /* Enable/disable instructions associated with this facility */
; 4601 :     if (ft->updinstrs)

  00a24	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  00a29	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00a2e	74 15		 je	 SHORT $LN29@facility_e

; 4602 :         ft->updinstrs( at->num, enable );

  00a30	0f b6 54 24 60	 movzx	 edx, BYTE PTR enable$[rsp]
  00a35	48 8b 44 24 68	 mov	 rax, QWORD PTR at$[rsp]
  00a3a	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  00a3d	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  00a42	ff 50 08	 call	 QWORD PTR [rax+8]
$LN29@facility_e:

; 4603 : 
; 4604 :     /* Show results if requested */
; 4605 :     if (MLVL( VERBOSE ))

  00a45	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00a4c	8b 80 80 75 01
	00		 mov	 eax, DWORD PTR [rax+95616]
  00a52	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  00a57	85 c0		 test	 eax, eax
  00a59	0f 84 08 01 00
	00		 je	 $LN30@facility_e

; 4606 :     {
; 4607 :         sev = modified ? "W" : "I";

  00a5f	0f b6 44 24 62	 movzx	 eax, BYTE PTR modified$[rsp]
  00a64	85 c0		 test	 eax, eax
  00a66	74 11		 je	 SHORT $LN54@facility_e
  00a68	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG196354
  00a6f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv455[rsp], rax
  00a77	eb 0f		 jmp	 SHORT $LN55@facility_e
$LN54@facility_e:
  00a79	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG196355
  00a80	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv455[rsp], rax
$LN55@facility_e:
  00a88	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv455[rsp]
  00a90	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR sev$[rsp], rax

; 4608 : 
; 4609 :         // "Facility( %s ) %s%s for %s"
; 4610 :         WRMSG( HHC00898, sev, ft->name, modified ? "*" : "",

  00a98	0f b6 44 24 60	 movzx	 eax, BYTE PTR enable$[rsp]
  00a9d	85 c0		 test	 eax, eax
  00a9f	74 11		 je	 SHORT $LN56@facility_e
  00aa1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG196356
  00aa8	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv460[rsp], rax
  00ab0	eb 0f		 jmp	 SHORT $LN57@facility_e
$LN56@facility_e:
  00ab2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG196357
  00ab9	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv460[rsp], rax
$LN57@facility_e:
  00ac1	0f b6 44 24 62	 movzx	 eax, BYTE PTR modified$[rsp]
  00ac6	85 c0		 test	 eax, eax
  00ac8	74 11		 je	 SHORT $LN58@facility_e
  00aca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG196358
  00ad1	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv464[rsp], rax
  00ad9	eb 0f		 jmp	 SHORT $LN59@facility_e
$LN58@facility_e:
  00adb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG196359
  00ae2	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv464[rsp], rax
$LN59@facility_e:
  00aea	b9 01 00 00 00	 mov	 ecx, 1
  00aef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00af5	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  00afa	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00afd	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00b02	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv460[rsp]
  00b0a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00b0f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv464[rsp]
  00b17	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00b1c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ft$[rsp]
  00b21	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00b25	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00b2a	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR sev$[rsp]
  00b32	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b37	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196360
  00b3e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b43	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b48	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b4e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG196361
  00b55	ba 03 12 00 00	 mov	 edx, 4611		; 00001203H
  00b5a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG196362
  00b61	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN30@facility_e:

; 4611 :             enable ? "Enabled" : "Disabled", at->name );
; 4612 :     }
; 4613 : 
; 4614 :     return 0;

  00b67	33 c0		 xor	 eax, eax
$LN1@facility_e:

; 4615 : }

  00b69	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  00b70	c3		 ret	 0
facility_enable_disable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
enabled$ = 96
modified$ = 97
forced$ = 98
sort_by_long$1 = 99
at$ = 104
ft$ = 112
c$ = 120
bitno$ = 124
tv164 = 128
tv166 = 132
tv167 = 136
tv183 = 140
tv184 = 144
tv186 = 148
tv187 = 152
tv189 = 156
tv262 = 160
tv276 = 164
tv278 = 168
p$ = 176
eQType$2 = 184
tv456 = 188
fbyte$ = 192
fbit$ = 196
tv304 = 200
tv309 = 208
tv313 = 216
tv65 = 224
tv234 = 232
sev$ = 240
argc$ = 272
argv$ = 280
facility_query PROC

; 1706 : {

$LN43:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H

; 1707 :     const ARCHTAB*  at;
; 1708 :     const FACTAB*   ft;
; 1709 :     const char*     p;
; 1710 :     const char*     sev;
; 1711 :     int             bitno, fbyte, fbit;
; 1712 :     bool            forced, enabled, modified;
; 1713 :     char            c;
; 1714 : 
; 1715 :     /* Note: we know argc >= 2, otherwise why would we be called? */
; 1716 : 
; 1717 :     if (argc > 4)

  00010	83 bc 24 10 01
	00 00 04	 cmp	 DWORD PTR argc$[rsp], 4
  00018	7e 78		 jle	 SHORT $LN2@facility_q

; 1718 :     {
; 1719 :         // "Invalid command usage. Type 'help %s' for assistance."
; 1720 :         WRMSG( HHC02299, "E", argv[0] );

  0001a	b8 08 00 00 00	 mov	 eax, 8
  0001f	48 6b c0 00	 imul	 rax, rax, 0
  00023	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv65[rsp], rax
  0002b	b9 01 00 00 00	 mov	 ecx, 1
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00036	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0003e	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR tv65[rsp]
  00046	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0004a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193363
  00056	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193364
  00062	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00067	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00072	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193365
  00079	ba b8 06 00 00	 mov	 edx, 1720		; 000006b8H
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193366
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1721 :         return false;

  0008b	32 c0		 xor	 al, al
  0008d	e9 80 07 00 00	 jmp	 $LN1@facility_q
$LN2@facility_q:

; 1722 :     }
; 1723 : 
; 1724 :     /* Get pointer to ARCHTAB entry for current architecture */
; 1725 :     at = get_archtab_by_arch( sysblk.arch_mode );

  00092	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00099	8b 88 88 00 00
	00		 mov	 ecx, DWORD PTR [rax+136]
  0009f	e8 00 00 00 00	 call	 get_archtab_by_arch
  000a4	48 89 44 24 68	 mov	 QWORD PTR at$[rsp], rax

; 1726 : 
; 1727 :     /* Query ALL/SHORT/LONG/ENABLED/DISABLED? */
; 1728 : 
; 1729 :     if (argc == 2 ||                                  // (implicit ALL)

  000a9	83 bc 24 10 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000b1	0f 84 fb 00 00
	00		 je	 $LN4@facility_q
  000b7	83 bc 24 10 01
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  000bf	0f 8c cc 02 00
	00		 jl	 $LN3@facility_q
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	0f 85 e3 00 00
	00		 jne	 $LN5@facility_q
  000cf	b8 08 00 00 00	 mov	 eax, 8
  000d4	48 6b c0 02	 imul	 rax, rax, 2
  000d8	41 b8 01 00 00
	00		 mov	 r8d, 1
  000de	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000e6	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193370
  000f1	e8 00 00 00 00	 call	 strcaseabbrev
  000f6	85 c0		 test	 eax, eax
  000f8	0f 85 b4 00 00
	00		 jne	 $LN5@facility_q
  000fe	b8 08 00 00 00	 mov	 eax, 8
  00103	48 6b c0 02	 imul	 rax, rax, 2
  00107	41 b8 01 00 00
	00		 mov	 r8d, 1
  0010d	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00115	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193371
  00120	e8 00 00 00 00	 call	 strcaseabbrev
  00125	85 c0		 test	 eax, eax
  00127	0f 85 85 00 00
	00		 jne	 $LN5@facility_q
  0012d	b8 08 00 00 00	 mov	 eax, 8
  00132	48 6b c0 02	 imul	 rax, rax, 2
  00136	41 b8 01 00 00
	00		 mov	 r8d, 1
  0013c	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00144	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00148	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193372
  0014f	e8 00 00 00 00	 call	 strcaseabbrev
  00154	85 c0		 test	 eax, eax
  00156	75 5a		 jne	 SHORT $LN5@facility_q
  00158	b8 08 00 00 00	 mov	 eax, 8
  0015d	48 6b c0 02	 imul	 rax, rax, 2
  00161	41 b8 01 00 00
	00		 mov	 r8d, 1
  00167	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0016f	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193373
  0017a	e8 00 00 00 00	 call	 strcaseabbrev
  0017f	85 c0		 test	 eax, eax
  00181	75 2f		 jne	 SHORT $LN5@facility_q
  00183	b8 08 00 00 00	 mov	 eax, 8
  00188	48 6b c0 02	 imul	 rax, rax, 2
  0018c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00192	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0019a	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193374
  001a5	e8 00 00 00 00	 call	 strcaseabbrev
  001aa	85 c0		 test	 eax, eax
  001ac	0f 84 df 01 00
	00		 je	 $LN3@facility_q
$LN5@facility_q:
$LN4@facility_q:

; 1730 :        (argc >= 3 && (0
; 1731 :                       || CMD( argv[2], ALL,      1 )  // (explicit ALL)
; 1732 :                       || CMD( argv[2], SHORT,    1 )  // (default sort)
; 1733 :                       || CMD( argv[2], LONG,     1 )  // (by long name)
; 1734 :                       || CMD( argv[2], ENABLED,  1 )  // (only enabled)
; 1735 :                       || CMD( argv[2], DISABLED, 1 )  // (only disabled)
; 1736 :                      )
; 1737 :     ))
; 1738 :     {
; 1739 :         const EQUERY eQType      = argc  <   3                   ? eQueryAll

  001b2	83 bc 24 10 01
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  001ba	7d 10		 jge	 SHORT $LN17@facility_q
  001bc	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv167[rsp], 0
  001c7	e9 97 00 00 00	 jmp	 $LN18@facility_q
$LN17@facility_q:
  001cc	b8 08 00 00 00	 mov	 eax, 8
  001d1	48 6b c0 02	 imul	 rax, rax, 2
  001d5	41 b8 01 00 00
	00		 mov	 r8d, 1
  001db	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001e3	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  001e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193375
  001ee	e8 00 00 00 00	 call	 strcaseabbrev
  001f3	85 c0		 test	 eax, eax
  001f5	74 0d		 je	 SHORT $LN15@facility_q
  001f7	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv166[rsp], 1
  00202	eb 51		 jmp	 SHORT $LN16@facility_q
$LN15@facility_q:
  00204	b8 08 00 00 00	 mov	 eax, 8
  00209	48 6b c0 02	 imul	 rax, rax, 2
  0020d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00213	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0021b	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  0021f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193376
  00226	e8 00 00 00 00	 call	 strcaseabbrev
  0022b	85 c0		 test	 eax, eax
  0022d	74 0d		 je	 SHORT $LN13@facility_q
  0022f	c7 84 24 80 00
	00 00 02 00 00
	00		 mov	 DWORD PTR tv164[rsp], 2
  0023a	eb 0b		 jmp	 SHORT $LN14@facility_q
$LN13@facility_q:
  0023c	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv164[rsp], 0
$LN14@facility_q:
  00247	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv164[rsp]
  0024e	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv166[rsp], eax
$LN16@facility_q:
  00255	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR tv166[rsp]
  0025c	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv167[rsp], eax
$LN18@facility_q:
  00263	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv167[rsp]
  0026a	89 84 24 b8 00
	00 00		 mov	 DWORD PTR eQType$2[rsp], eax

; 1740 :                                  : CMD( argv[3-1], ENABLED,  1 ) ? eQueryEnabled
; 1741 :                                  : CMD( argv[3-1], DISABLED, 1 ) ? eQueryDisabled : eQueryAll;
; 1742 : 
; 1743 :         const bool sort_by_long  = argc  <   3               ? false

  00271	83 bc 24 10 01
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00279	7d 10		 jge	 SHORT $LN25@facility_q
  0027b	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv187[rsp], 0
  00286	e9 bc 00 00 00	 jmp	 $LN26@facility_q
$LN25@facility_q:
  0028b	b8 08 00 00 00	 mov	 eax, 8
  00290	48 6b c0 02	 imul	 rax, rax, 2
  00294	41 b8 01 00 00
	00		 mov	 r8d, 1
  0029a	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002a2	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  002a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193377
  002ad	e8 00 00 00 00	 call	 strcaseabbrev
  002b2	85 c0		 test	 eax, eax
  002b4	74 0d		 je	 SHORT $LN23@facility_q
  002b6	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv186[rsp], 1
  002c1	eb 76		 jmp	 SHORT $LN24@facility_q
$LN23@facility_q:
  002c3	83 bc 24 10 01
	00 00 04	 cmp	 DWORD PTR argc$[rsp], 4
  002cb	7d 0d		 jge	 SHORT $LN21@facility_q
  002cd	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv184[rsp], 0
  002d8	eb 51		 jmp	 SHORT $LN22@facility_q
$LN21@facility_q:
  002da	b8 08 00 00 00	 mov	 eax, 8
  002df	48 6b c0 03	 imul	 rax, rax, 3
  002e3	41 b8 01 00 00
	00		 mov	 r8d, 1
  002e9	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  002f1	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  002f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193378
  002fc	e8 00 00 00 00	 call	 strcaseabbrev
  00301	85 c0		 test	 eax, eax
  00303	74 0d		 je	 SHORT $LN19@facility_q
  00305	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv183[rsp], 1
  00310	eb 0b		 jmp	 SHORT $LN20@facility_q
$LN19@facility_q:
  00312	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv183[rsp], 0
$LN20@facility_q:
  0031d	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv183[rsp]
  00324	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
$LN22@facility_q:
  0032b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv184[rsp]
  00332	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv186[rsp], eax
$LN24@facility_q:
  00339	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv186[rsp]
  00340	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv187[rsp], eax
$LN26@facility_q:
  00347	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR tv187[rsp], 0
  0034f	75 0d		 jne	 SHORT $LN27@facility_q
  00351	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv189[rsp], 0
  0035c	eb 0b		 jmp	 SHORT $LN28@facility_q
$LN27@facility_q:
  0035e	c7 84 24 9c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv189[rsp], 1
$LN28@facility_q:
  00369	0f b6 84 24 9c
	00 00 00	 movzx	 eax, BYTE PTR tv189[rsp]
  00371	88 44 24 63	 mov	 BYTE PTR sort_by_long$1[rsp], al

; 1744 :                                  : CMD( argv[3-1], LONG, 1 ) ? true
; 1745 :                                  : argc  <   4               ? false
; 1746 :                                  : CMD( argv[4-1], LONG, 1 ) ? true : false;
; 1747 : 
; 1748 :         return facility_query_all( at, eQType, sort_by_long );

  00375	44 0f b6 44 24
	63		 movzx	 r8d, BYTE PTR sort_by_long$1[rsp]
  0037b	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR eQType$2[rsp]
  00382	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  00387	e8 00 00 00 00	 call	 facility_query_all
  0038c	e9 81 04 00 00	 jmp	 $LN1@facility_q
$LN3@facility_q:

; 1749 :     }
; 1750 : 
; 1751 :     /* Query RAW? */
; 1752 : 
; 1753 :     if (argc == 3 && CMD( argv[2], RAW, 1 ))

  00391	83 bc 24 10 01
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  00399	75 3c		 jne	 SHORT $LN6@facility_q
  0039b	b8 08 00 00 00	 mov	 eax, 8
  003a0	48 6b c0 02	 imul	 rax, rax, 2
  003a4	41 b8 01 00 00
	00		 mov	 r8d, 1
  003aa	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003b2	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  003b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193380
  003bd	e8 00 00 00 00	 call	 strcaseabbrev
  003c2	85 c0		 test	 eax, eax
  003c4	74 11		 je	 SHORT $LN6@facility_q

; 1754 :     {
; 1755 :         facility_query_raw( at );

  003c6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  003cb	e8 00 00 00 00	 call	 facility_query_raw

; 1756 :         return true;

  003d0	b0 01		 mov	 al, 1
  003d2	e9 3b 04 00 00	 jmp	 $LN1@facility_q
$LN6@facility_q:

; 1757 :     }
; 1758 : 
; 1759 :     /* Get pointer to requested facility table entry */
; 1760 : 
; 1761 :     if (strncasecmp( "BIT", p = argv[2], 3 ) == 0)

  003d7	b8 08 00 00 00	 mov	 eax, 8
  003dc	48 6b c0 02	 imul	 rax, rax, 2
  003e0	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  003e8	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  003ec	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax
  003f4	41 b8 03 00 00
	00		 mov	 r8d, 3
  003fa	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  00402	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193382
  00409	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  0040f	85 c0		 test	 eax, eax
  00411	75 14		 jne	 SHORT $LN7@facility_q

; 1762 :         p += 3;

  00413	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  0041b	48 83 c0 03	 add	 rax, 3
  0041f	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR p$[rsp], rax
$LN7@facility_q:

; 1763 : 
; 1764 :     if (1
; 1765 :         && isdigit( *p )
; 1766 :         && sscanf( p, "%d%c", &bitno, &c ) == 1
; 1767 :         && bitno >= 0
; 1768 :         && bitno <= (int) STFL_HERC_LAST_BIT

  00427	33 c0		 xor	 eax, eax
  00429	83 f8 01	 cmp	 eax, 1
  0042c	74 60		 je	 SHORT $LN8@facility_q
  0042e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00436	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00439	8b c8		 mov	 ecx, eax
  0043b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  00441	85 c0		 test	 eax, eax
  00443	74 49		 je	 SHORT $LN8@facility_q
  00445	4c 8d 4c 24 78	 lea	 r9, QWORD PTR c$[rsp]
  0044a	4c 8d 44 24 7c	 lea	 r8, QWORD PTR bitno$[rsp]
  0044f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG193385
  00456	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  0045e	e8 00 00 00 00	 call	 sscanf
  00463	83 f8 01	 cmp	 eax, 1
  00466	75 26		 jne	 SHORT $LN8@facility_q
  00468	83 7c 24 7c 00	 cmp	 DWORD PTR bitno$[rsp], 0
  0046d	7c 1f		 jl	 SHORT $LN8@facility_q
  0046f	81 7c 24 7c 12
	01 00 00	 cmp	 DWORD PTR bitno$[rsp], 274 ; 00000112H
  00477	7f 15		 jg	 SHORT $LN8@facility_q

; 1769 :     )
; 1770 :     {
; 1771 :         ft = get_factab_by_bitno( bitno );

  00479	8b 4c 24 7c	 mov	 ecx, DWORD PTR bitno$[rsp]
  0047d	e8 00 00 00 00	 call	 get_factab_by_bitno
  00482	48 89 44 24 70	 mov	 QWORD PTR ft$[rsp], rax

; 1772 :         forced = true;

  00487	c6 44 24 62 01	 mov	 BYTE PTR forced$[rsp], 1

; 1773 :     }

  0048c	eb 24		 jmp	 SHORT $LN9@facility_q
$LN8@facility_q:

; 1774 :     else
; 1775 :     {
; 1776 :         ft = get_factab_by_name( argv[2] );

  0048e	b8 08 00 00 00	 mov	 eax, 8
  00493	48 6b c0 02	 imul	 rax, rax, 2
  00497	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0049f	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  004a3	e8 00 00 00 00	 call	 get_factab_by_name
  004a8	48 89 44 24 70	 mov	 QWORD PTR ft$[rsp], rax

; 1777 :         forced = false;

  004ad	c6 44 24 62 00	 mov	 BYTE PTR forced$[rsp], 0
$LN9@facility_q:

; 1778 :     }
; 1779 : 
; 1780 :     /* Does this facility exist for the current architecture? */
; 1781 : 
; 1782 :     if (!ft)

  004b2	48 83 7c 24 70
	00		 cmp	 QWORD PTR ft$[rsp], 0
  004b8	0f 85 85 00 00
	00		 jne	 $LN10@facility_q

; 1783 :     {
; 1784 :         // "Facility( %s ) does not exist for %s"
; 1785 :         WRMSG( HHC00892, "E", argv[2], at->name );

  004be	b8 08 00 00 00	 mov	 eax, 8
  004c3	48 6b c0 02	 imul	 rax, rax, 2
  004c7	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv234[rsp], rax
  004cf	b9 01 00 00 00	 mov	 ecx, 1
  004d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004da	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  004df	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  004e2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  004e7	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004ef	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR tv234[rsp]
  004f7	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  004fb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00500	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193387
  00507	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0050c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193388
  00513	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00518	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0051d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00523	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193389
  0052a	ba f9 06 00 00	 mov	 edx, 1785		; 000006f9H
  0052f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193390
  00536	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1786 :         return false;

  0053c	32 c0		 xor	 al, al
  0053e	e9 cf 02 00 00	 jmp	 $LN1@facility_q
$LN10@facility_q:

; 1787 :     }
; 1788 : 
; 1789 :     /* Get byte and bit number */
; 1790 : 
; 1791 :     fbyte =         (ft->bitno / 8);

  00543	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  00548	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  0054b	99		 cdq
  0054c	83 e2 07	 and	 edx, 7
  0054f	03 c2		 add	 eax, edx
  00551	c1 f8 03	 sar	 eax, 3
  00554	89 84 24 c0 00
	00 00		 mov	 DWORD PTR fbyte$[rsp], eax

; 1792 :     fbit  = 0x80 >> (ft->bitno % 8);

  0055b	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  00560	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00563	99		 cdq
  00564	83 e2 07	 and	 edx, 7
  00567	03 c2		 add	 eax, edx
  00569	83 e0 07	 and	 eax, 7
  0056c	2b c2		 sub	 eax, edx
  0056e	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00573	89 8c 24 bc 00
	00 00		 mov	 DWORD PTR tv456[rsp], ecx
  0057a	0f b6 c8	 movzx	 ecx, al
  0057d	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR tv456[rsp]
  00584	d3 f8		 sar	 eax, cl
  00586	89 84 24 c4 00
	00 00		 mov	 DWORD PTR fbit$[rsp], eax

; 1793 : 
; 1794 :     /* Set some flags */
; 1795 : 
; 1796 :     enabled  = sysblk.facility_list[ at->num ][ fbyte ] & fbit;

  0058d	48 8b 44 24 68	 mov	 rax, QWORD PTR at$[rsp]
  00592	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  00596	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0059a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  005a1	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  005a9	48 63 8c 24 c0
	00 00 00	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  005b1	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  005b5	23 84 24 c4 00
	00 00		 and	 eax, DWORD PTR fbit$[rsp]
  005bc	85 c0		 test	 eax, eax
  005be	75 0d		 jne	 SHORT $LN29@facility_q
  005c0	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv262[rsp], 0
  005cb	eb 0b		 jmp	 SHORT $LN30@facility_q
$LN29@facility_q:
  005cd	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv262[rsp], 1
$LN30@facility_q:
  005d8	0f b6 84 24 a0
	00 00 00	 movzx	 eax, BYTE PTR tv262[rsp]
  005e0	88 44 24 60	 mov	 BYTE PTR enabled$[rsp], al

; 1797 : 
; 1798 :     modified = ( (ft->defmask & at->amask) && !enabled) ||

  005e4	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  005e9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  005ee	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  005f1	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  005f4	23 c1		 and	 eax, ecx
  005f6	85 c0		 test	 eax, eax
  005f8	74 09		 je	 SHORT $LN31@facility_q
  005fa	0f b6 44 24 60	 movzx	 eax, BYTE PTR enabled$[rsp]
  005ff	85 c0		 test	 eax, eax
  00601	74 2c		 je	 SHORT $LN33@facility_q
$LN31@facility_q:
  00603	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  00608	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  0060d	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00610	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00613	23 c1		 and	 eax, ecx
  00615	85 c0		 test	 eax, eax
  00617	75 09		 jne	 SHORT $LN32@facility_q
  00619	0f b6 44 24 60	 movzx	 eax, BYTE PTR enabled$[rsp]
  0061e	85 c0		 test	 eax, eax
  00620	75 0d		 jne	 SHORT $LN33@facility_q
$LN32@facility_q:
  00622	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv276[rsp], 0
  0062d	eb 0b		 jmp	 SHORT $LN34@facility_q
$LN33@facility_q:
  0062f	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv276[rsp], 1
$LN34@facility_q:
  0063a	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR tv276[rsp], 0
  00642	75 0d		 jne	 SHORT $LN35@facility_q
  00644	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv278[rsp], 0
  0064f	eb 0b		 jmp	 SHORT $LN36@facility_q
$LN35@facility_q:
  00651	c7 84 24 a8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv278[rsp], 1
$LN36@facility_q:
  0065c	0f b6 84 24 a8
	00 00 00	 movzx	 eax, BYTE PTR tv278[rsp]
  00664	88 44 24 61	 mov	 BYTE PTR modified$[rsp], al

; 1799 :                (!(ft->defmask & at->amask) &&  enabled);
; 1800 : 
; 1801 :     /* Is this facility supported for the current architecture? */
; 1802 : 
; 1803 :     if (1
; 1804 :         && !forced
; 1805 :         && !modified
; 1806 :         && !(ft->supmask & at->amask)

  00668	33 c0		 xor	 eax, eax
  0066a	83 f8 01	 cmp	 eax, 1
  0066d	0f 84 95 00 00
	00		 je	 $LN11@facility_q
  00673	0f b6 44 24 62	 movzx	 eax, BYTE PTR forced$[rsp]
  00678	85 c0		 test	 eax, eax
  0067a	0f 85 88 00 00
	00		 jne	 $LN11@facility_q
  00680	0f b6 44 24 61	 movzx	 eax, BYTE PTR modified$[rsp]
  00685	85 c0		 test	 eax, eax
  00687	75 7f		 jne	 SHORT $LN11@facility_q
  00689	48 8b 44 24 70	 mov	 rax, QWORD PTR ft$[rsp]
  0068e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  00693	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  00696	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  00699	23 c1		 and	 eax, ecx
  0069b	85 c0		 test	 eax, eax
  0069d	75 69		 jne	 SHORT $LN11@facility_q

; 1807 :     )
; 1808 :     {
; 1809 :         // "Facility( %s ) not supported for %s"
; 1810 :         WRMSG( HHC00893, "E", ft->name, at->name );

  0069f	b9 01 00 00 00	 mov	 ecx, 1
  006a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006aa	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  006af	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  006b2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  006b7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ft$[rsp]
  006bc	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  006c0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193392
  006cc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193393
  006d8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006e2	41 b9 03 00 00
	00		 mov	 r9d, 3
  006e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193394
  006ef	ba 12 07 00 00	 mov	 edx, 1810		; 00000712H
  006f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193395
  006fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1811 :         return false;

  00701	32 c0		 xor	 al, al
  00703	e9 0a 01 00 00	 jmp	 $LN1@facility_q
$LN11@facility_q:

; 1812 :     }
; 1813 : 
; 1814 :     /* Display facility setting */
; 1815 : 
; 1816 :     sev = modified ? "W" : "I";

  00708	0f b6 44 24 61	 movzx	 eax, BYTE PTR modified$[rsp]
  0070d	85 c0		 test	 eax, eax
  0070f	74 11		 je	 SHORT $LN37@facility_q
  00711	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193396
  00718	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv304[rsp], rax
  00720	eb 0f		 jmp	 SHORT $LN38@facility_q
$LN37@facility_q:
  00722	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193397
  00729	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv304[rsp], rax
$LN38@facility_q:
  00731	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv304[rsp]
  00739	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR sev$[rsp], rax

; 1817 : 
; 1818 :     // "Facility( %s ) %s%s for %s"
; 1819 :     WRMSG( HHC00898, sev, ft->name, modified ? "*" : "",

  00741	0f b6 44 24 60	 movzx	 eax, BYTE PTR enabled$[rsp]
  00746	85 c0		 test	 eax, eax
  00748	74 11		 je	 SHORT $LN39@facility_q
  0074a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193398
  00751	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv309[rsp], rax
  00759	eb 0f		 jmp	 SHORT $LN40@facility_q
$LN39@facility_q:
  0075b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193399
  00762	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv309[rsp], rax
$LN40@facility_q:
  0076a	0f b6 44 24 61	 movzx	 eax, BYTE PTR modified$[rsp]
  0076f	85 c0		 test	 eax, eax
  00771	74 11		 je	 SHORT $LN41@facility_q
  00773	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193400
  0077a	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv313[rsp], rax
  00782	eb 0f		 jmp	 SHORT $LN42@facility_q
$LN41@facility_q:
  00784	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG193401
  0078b	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv313[rsp], rax
$LN42@facility_q:
  00793	b9 01 00 00 00	 mov	 ecx, 1
  00798	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0079e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR at$[rsp]
  007a3	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  007a6	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  007ab	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv309[rsp]
  007b3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  007b8	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv313[rsp]
  007c0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  007c5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ft$[rsp]
  007ca	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  007ce	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  007d3	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR sev$[rsp]
  007db	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193402
  007e7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007ec	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007f1	41 b9 03 00 00
	00		 mov	 r9d, 3
  007f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193403
  007fe	ba 1c 07 00 00	 mov	 edx, 1820		; 0000071cH
  00803	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193404
  0080a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1820 :         enabled ? "Enabled" : "Disabled", at->name );
; 1821 : 
; 1822 :     return true;

  00810	b0 01		 mov	 al, 1
$LN1@facility_q:

; 1823 : }

  00812	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00819	c3		 ret	 0
facility_query ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
fbyte$ = 0
regs$ = 32
init_cpu_facilities PROC

; 1466 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 1467 :     // Called by ipl.c 'cpu_reset' and cpu.c 'run_cpu'.
; 1468 : 
; 1469 :     int  fbyte;
; 1470 :     for (fbyte = 0; fbyte < (int) STFL_HERC_BY_SIZE; fbyte++)

  00009	c7 04 24 00 00
	00 00		 mov	 DWORD PTR fbyte$[rsp], 0
  00010	eb 08		 jmp	 SHORT $LN4@init_cpu_f
$LN2@init_cpu_f:
  00012	8b 04 24	 mov	 eax, DWORD PTR fbyte$[rsp]
  00015	ff c0		 inc	 eax
  00017	89 04 24	 mov	 DWORD PTR fbyte$[rsp], eax
$LN4@init_cpu_f:
  0001a	83 3c 24 23	 cmp	 DWORD PTR fbyte$[rsp], 35 ; 00000023H
  0001e	7d 37		 jge	 SHORT $LN3@init_cpu_f

; 1471 :         regs->facility_list[ fbyte ] =

  00020	48 8b 44 24 20	 mov	 rax, QWORD PTR regs$[rsp]
  00025	48 63 40 64	 movsxd	 rax, DWORD PTR [rax+100]
  00029	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0002d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00034	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0003c	48 63 0c 24	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  00040	48 63 14 24	 movsxd	 rdx, DWORD PTR fbyte$[rsp]
  00044	4c 8b 44 24 20	 mov	 r8, QWORD PTR regs$[rsp]
  00049	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0004d	41 88 84 10 28
	0d 00 00	 mov	 BYTE PTR [r8+rdx+3368], al
  00055	eb bb		 jmp	 SHORT $LN2@init_cpu_f
$LN3@init_cpu_f:

; 1472 :             sysblk.facility_list[ regs->arch_mode ][ fbyte ];
; 1473 : }

  00057	48 83 c4 18	 add	 rsp, 24
  0005b	c3		 ret	 0
init_cpu_facilities ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\facility.c
_TEXT	SEGMENT
arch$ = 80
rc$ = 84
enable$ = 85
fbyte$ = 88
i$ = 96
bitno$ = 104
fbit$ = 112
ft$ = 120
n$ = 128
tv243 = 136
tv245 = 140
tv302 = 144
tv304 = 148
at$ = 152
tv386 = 160
tv400 = 164
tv424 = 168
archname$ = 176
init_facilities_lists PROC

; 1334 : {

$LN51:
  00000	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 1335 :     /* Called ONCE by bldcfg.c 'build_config' during system startup. */
; 1336 : 
; 1337 :     const ARCHTAB* at;
; 1338 :     const FACTAB* ft;
; 1339 :     const char* archname;
; 1340 :     size_t i, n, bitno;
; 1341 :     int arch, fbyte, fbit;
; 1342 :     bool enable, rc = true;

  00007	c6 44 24 54 01	 mov	 BYTE PTR rc$[rsp], 1

; 1343 : 
; 1344 :     /* Merge each individual ARCH_DEP table entry into system factab */
; 1345 : 
; 1346 :     for (i=0; i < _countof( factab ); i++)

  0000c	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00015	eb 0d		 jmp	 SHORT $LN4@init_facil
$LN2@init_facil:
  00017	48 8b 44 24 60	 mov	 rax, QWORD PTR i$[rsp]
  0001c	48 ff c0	 inc	 rax
  0001f	48 89 44 24 60	 mov	 QWORD PTR i$[rsp], rax
$LN4@init_facil:
  00024	48 81 7c 24 60
	ea 00 00 00	 cmp	 QWORD PTR i$[rsp], 234	; 000000eaH
  0002d	0f 83 68 01 00
	00		 jae	 $LN3@init_facil

; 1347 :     {
; 1348 :         for (arch=0; arch < NUM_GEN_ARCHS; arch++)

  00033	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR arch$[rsp], 0
  0003b	eb 0a		 jmp	 SHORT $LN7@init_facil
$LN5@init_facil:
  0003d	8b 44 24 50	 mov	 eax, DWORD PTR arch$[rsp]
  00041	ff c0		 inc	 eax
  00043	89 44 24 50	 mov	 DWORD PTR arch$[rsp], eax
$LN7@init_facil:
  00047	83 7c 24 50 03	 cmp	 DWORD PTR arch$[rsp], 3
  0004c	0f 8d 44 01 00
	00		 jge	 $LN6@init_facil

; 1349 :         {
; 1350 :             for (n=0; n < num_arch_ft_entries[ arch ]; n++)

  00052	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR n$[rsp], 0
  0005e	eb 13		 jmp	 SHORT $LN10@init_facil
$LN8@init_facil:
  00060	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  00068	48 ff c0	 inc	 rax
  0006b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR n$[rsp], rax
$LN10@init_facil:
  00073	48 63 44 24 50	 movsxd	 rax, DWORD PTR arch$[rsp]
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:num_arch_ft_entries
  0007f	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00083	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR n$[rsp], rax
  0008b	0f 83 00 01 00
	00		 jae	 $LN9@init_facil

; 1351 :             {
; 1352 :                 if (arch_factab[ arch ][n].bitno == factab[i].bitno)

  00091	48 63 44 24 50	 movsxd	 rax, DWORD PTR arch$[rsp]
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:arch_factab
  0009d	48 6b 94 24 80
	00 00 00 30	 imul	 rdx, QWORD PTR n$[rsp], 48 ; 00000030H
  000a6	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  000aa	48 6b 4c 24 60
	30		 imul	 rcx, QWORD PTR i$[rsp], 48 ; 00000030H
  000b0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:factab
  000b7	41 8b 4c 08 20	 mov	 ecx, DWORD PTR [r8+rcx+32]
  000bc	39 4c 10 20	 cmp	 DWORD PTR [rax+rdx+32], ecx
  000c0	0f 85 c6 00 00
	00		 jne	 $LN35@init_facil

; 1353 :                 {
; 1354 :                     /* Merge this arch's masks into system factab */
; 1355 :                     factab[i].supmask |= arch_factab[ arch ][n].supmask;

  000c6	48 6b 44 24 60
	30		 imul	 rax, QWORD PTR i$[rsp], 48 ; 00000030H
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factab
  000d3	48 63 54 24 50	 movsxd	 rdx, DWORD PTR arch$[rsp]
  000d8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:arch_factab
  000df	4c 6b 8c 24 80
	00 00 00 30	 imul	 r9, QWORD PTR n$[rsp], 48 ; 00000030H
  000e8	49 8b 14 d0	 mov	 rdx, QWORD PTR [r8+rdx*8]
  000ec	42 8b 54 0a 24	 mov	 edx, DWORD PTR [rdx+r9+36]
  000f1	8b 44 01 24	 mov	 eax, DWORD PTR [rcx+rax+36]
  000f5	0b c2		 or	 eax, edx
  000f7	48 6b 4c 24 60
	30		 imul	 rcx, QWORD PTR i$[rsp], 48 ; 00000030H
  000fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:factab
  00104	89 44 0a 24	 mov	 DWORD PTR [rdx+rcx+36], eax

; 1356 :                     factab[i].defmask |= arch_factab[ arch ][n].defmask;

  00108	48 6b 44 24 60
	30		 imul	 rax, QWORD PTR i$[rsp], 48 ; 00000030H
  0010e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factab
  00115	48 63 54 24 50	 movsxd	 rdx, DWORD PTR arch$[rsp]
  0011a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:arch_factab
  00121	4c 6b 8c 24 80
	00 00 00 30	 imul	 r9, QWORD PTR n$[rsp], 48 ; 00000030H
  0012a	49 8b 14 d0	 mov	 rdx, QWORD PTR [r8+rdx*8]
  0012e	42 8b 54 0a 28	 mov	 edx, DWORD PTR [rdx+r9+40]
  00133	8b 44 01 28	 mov	 eax, DWORD PTR [rcx+rax+40]
  00137	0b c2		 or	 eax, edx
  00139	48 6b 4c 24 60
	30		 imul	 rcx, QWORD PTR i$[rsp], 48 ; 00000030H
  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:factab
  00146	89 44 0a 28	 mov	 DWORD PTR [rdx+rcx+40], eax

; 1357 :                     factab[i].reqmask |= arch_factab[ arch ][n].reqmask;

  0014a	48 6b 44 24 60
	30		 imul	 rax, QWORD PTR i$[rsp], 48 ; 00000030H
  00150	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factab
  00157	48 63 54 24 50	 movsxd	 rdx, DWORD PTR arch$[rsp]
  0015c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:arch_factab
  00163	4c 6b 8c 24 80
	00 00 00 30	 imul	 r9, QWORD PTR n$[rsp], 48 ; 00000030H
  0016c	49 8b 14 d0	 mov	 rdx, QWORD PTR [r8+rdx*8]
  00170	42 8b 54 0a 2c	 mov	 edx, DWORD PTR [rdx+r9+44]
  00175	8b 44 01 2c	 mov	 eax, DWORD PTR [rcx+rax+44]
  00179	0b c2		 or	 eax, edx
  0017b	48 6b 4c 24 60
	30		 imul	 rcx, QWORD PTR i$[rsp], 48 ; 00000030H
  00181	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:factab
  00188	89 44 0a 2c	 mov	 DWORD PTR [rdx+rcx+44], eax
$LN35@init_facil:

; 1358 :                 }
; 1359 :             }

  0018c	e9 cf fe ff ff	 jmp	 $LN8@init_facil
$LN9@init_facil:

; 1360 :         }

  00191	e9 a7 fe ff ff	 jmp	 $LN5@init_facil
$LN6@init_facil:

; 1361 :     }

  00196	e9 7c fe ff ff	 jmp	 $LN2@init_facil
$LN3@init_facil:

; 1362 : 
; 1363 :     /* Clear each architectures' sysblk facilities lists to ZEROS */
; 1364 : 
; 1365 :     for (arch = 0; arch < NUM_GEN_ARCHS; arch++)

  0019b	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR arch$[rsp], 0
  001a3	eb 0a		 jmp	 SHORT $LN13@init_facil
$LN11@init_facil:
  001a5	8b 44 24 50	 mov	 eax, DWORD PTR arch$[rsp]
  001a9	ff c0		 inc	 eax
  001ab	89 44 24 50	 mov	 DWORD PTR arch$[rsp], eax
$LN13@init_facil:
  001af	83 7c 24 50 03	 cmp	 DWORD PTR arch$[rsp], 3
  001b4	7d 40		 jge	 SHORT $LN12@init_facil

; 1366 :         for (fbyte = 0; fbyte < (int) STFL_HERC_BY_SIZE; fbyte++)

  001b6	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR fbyte$[rsp], 0
  001be	eb 0a		 jmp	 SHORT $LN16@init_facil
$LN14@init_facil:
  001c0	8b 44 24 58	 mov	 eax, DWORD PTR fbyte$[rsp]
  001c4	ff c0		 inc	 eax
  001c6	89 44 24 58	 mov	 DWORD PTR fbyte$[rsp], eax
$LN16@init_facil:
  001ca	83 7c 24 58 23	 cmp	 DWORD PTR fbyte$[rsp], 35 ; 00000023H
  001cf	7d 23		 jge	 SHORT $LN15@init_facil

; 1367 :             sysblk.facility_list[ arch ][ fbyte ] = 0;

  001d1	48 63 44 24 50	 movsxd	 rax, DWORD PTR arch$[rsp]
  001d6	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  001da	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  001e1	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  001e9	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  001ee	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0
  001f2	eb cc		 jmp	 SHORT $LN14@init_facil
$LN15@init_facil:
  001f4	eb af		 jmp	 SHORT $LN11@init_facil
$LN12@init_facil:

; 1368 : 
; 1369 :     /* Init each architectures' sysblk facilities to their default */
; 1370 : 
; 1371 :     for (arch = 0; arch < NUM_GEN_ARCHS; arch++)

  001f6	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR arch$[rsp], 0
  001fe	eb 0a		 jmp	 SHORT $LN19@init_facil
$LN17@init_facil:
  00200	8b 44 24 50	 mov	 eax, DWORD PTR arch$[rsp]
  00204	ff c0		 inc	 eax
  00206	89 44 24 50	 mov	 DWORD PTR arch$[rsp], eax
$LN19@init_facil:
  0020a	83 7c 24 50 03	 cmp	 DWORD PTR arch$[rsp], 3
  0020f	0f 8d 5c 01 00
	00		 jge	 $LN18@init_facil

; 1372 :     {
; 1373 :         at = get_archtab_by_arch( arch );

  00215	8b 4c 24 50	 mov	 ecx, DWORD PTR arch$[rsp]
  00219	e8 00 00 00 00	 call	 get_archtab_by_arch
  0021e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR at$[rsp], rax

; 1374 : 
; 1375 :         for (i=0; i < _countof( factab ); i++)

  00226	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0022f	eb 0d		 jmp	 SHORT $LN22@init_facil
$LN20@init_facil:
  00231	48 8b 44 24 60	 mov	 rax, QWORD PTR i$[rsp]
  00236	48 ff c0	 inc	 rax
  00239	48 89 44 24 60	 mov	 QWORD PTR i$[rsp], rax
$LN22@init_facil:
  0023e	48 81 7c 24 60
	ea 00 00 00	 cmp	 QWORD PTR i$[rsp], 234	; 000000eaH
  00247	0f 83 1f 01 00
	00		 jae	 $LN21@init_facil

; 1376 :         {
; 1377 :             /*  Initialize this architecture's facility bit only if
; 1378 :             **  this facility applies to this architecture and it's
; 1379 :             **  either a required facility or defaults to enabled.
; 1380 :             */
; 1381 :             if (1
; 1382 :                 && (factab[i].supmask & at->amask)      // (applies?)
; 1383 :                 && (0

  0024d	33 c0		 xor	 eax, eax
  0024f	83 f8 01	 cmp	 eax, 1
  00252	0f 84 0f 01 00
	00		 je	 $LN36@init_facil
  00258	48 6b 44 24 60
	30		 imul	 rax, QWORD PTR i$[rsp], 48 ; 00000030H
  0025e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factab
  00265	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR at$[rsp]
  0026d	8b 52 0c	 mov	 edx, DWORD PTR [rdx+12]
  00270	8b 44 01 24	 mov	 eax, DWORD PTR [rcx+rax+36]
  00274	23 c2		 and	 eax, edx
  00276	85 c0		 test	 eax, eax
  00278	0f 84 e9 00 00
	00		 je	 $LN36@init_facil
  0027e	33 c0		 xor	 eax, eax
  00280	85 c0		 test	 eax, eax
  00282	75 48		 jne	 SHORT $LN37@init_facil
  00284	48 6b 44 24 60
	30		 imul	 rax, QWORD PTR i$[rsp], 48 ; 00000030H
  0028a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factab
  00291	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR at$[rsp]
  00299	8b 52 0c	 mov	 edx, DWORD PTR [rdx+12]
  0029c	8b 44 01 2c	 mov	 eax, DWORD PTR [rcx+rax+44]
  002a0	23 c2		 and	 eax, edx
  002a2	85 c0		 test	 eax, eax
  002a4	75 26		 jne	 SHORT $LN37@init_facil
  002a6	48 6b 44 24 60
	30		 imul	 rax, QWORD PTR i$[rsp], 48 ; 00000030H
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factab
  002b3	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR at$[rsp]
  002bb	8b 52 0c	 mov	 edx, DWORD PTR [rdx+12]
  002be	8b 44 01 28	 mov	 eax, DWORD PTR [rcx+rax+40]
  002c2	23 c2		 and	 eax, edx
  002c4	85 c0		 test	 eax, eax
  002c6	0f 84 9b 00 00
	00		 je	 $LN36@init_facil
$LN37@init_facil:

; 1384 :                     || (factab[i].reqmask & at->amask)  // (required?)
; 1385 :                     || (factab[i].defmask & at->amask)  // (default?)
; 1386 :                    )
; 1387 :             )
; 1388 :             {
; 1389 :                 fbyte =         (factab[i].bitno / 8);

  002cc	48 6b 44 24 60
	30		 imul	 rax, QWORD PTR i$[rsp], 48 ; 00000030H
  002d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factab
  002d9	8b 44 01 20	 mov	 eax, DWORD PTR [rcx+rax+32]
  002dd	99		 cdq
  002de	83 e2 07	 and	 edx, 7
  002e1	03 c2		 add	 eax, edx
  002e3	c1 f8 03	 sar	 eax, 3
  002e6	89 44 24 58	 mov	 DWORD PTR fbyte$[rsp], eax

; 1390 :                 fbit  = 0x80 >> (factab[i].bitno % 8);

  002ea	48 6b 44 24 60
	30		 imul	 rax, QWORD PTR i$[rsp], 48 ; 00000030H
  002f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:factab
  002f7	8b 44 01 20	 mov	 eax, DWORD PTR [rcx+rax+32]
  002fb	99		 cdq
  002fc	83 e2 07	 and	 edx, 7
  002ff	03 c2		 add	 eax, edx
  00301	83 e0 07	 and	 eax, 7
  00304	2b c2		 sub	 eax, edx
  00306	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  0030b	89 8c 24 a0 00
	00 00		 mov	 DWORD PTR tv386[rsp], ecx
  00312	0f b6 c8	 movzx	 ecx, al
  00315	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv386[rsp]
  0031c	d3 f8		 sar	 eax, cl
  0031e	89 44 24 70	 mov	 DWORD PTR fbit$[rsp], eax

; 1391 : 
; 1392 :                 sysblk.facility_list[ arch ][ fbyte ] |= fbit;

  00322	48 63 44 24 50	 movsxd	 rax, DWORD PTR arch$[rsp]
  00327	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0032b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00332	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0033a	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  0033f	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00343	0b 44 24 70	 or	 eax, DWORD PTR fbit$[rsp]
  00347	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  0034c	48 63 54 24 50	 movsxd	 rdx, DWORD PTR arch$[rsp]
  00351	48 6b d2 28	 imul	 rdx, rdx, 40		; 00000028H
  00355	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR __imp_sysblk
  0035c	49 8d 94 10 a0
	0d 00 00	 lea	 rdx, QWORD PTR [r8+rdx+3488]
  00364	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
$LN36@init_facil:

; 1393 :             }
; 1394 :         }

  00367	e9 c5 fe ff ff	 jmp	 $LN20@init_facil
$LN21@init_facil:

; 1395 :     }

  0036c	e9 8f fe ff ff	 jmp	 $LN17@init_facil
$LN18@init_facil:

; 1396 : 
; 1397 :     /* Sanity check each architectures' sysblk facilities list */
; 1398 : 
; 1399 :     for (arch = 0; arch < NUM_GEN_ARCHS; arch++)

  00371	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR arch$[rsp], 0
  00379	eb 0a		 jmp	 SHORT $LN25@init_facil
$LN23@init_facil:
  0037b	8b 44 24 50	 mov	 eax, DWORD PTR arch$[rsp]
  0037f	ff c0		 inc	 eax
  00381	89 44 24 50	 mov	 DWORD PTR arch$[rsp], eax
$LN25@init_facil:
  00385	83 7c 24 50 03	 cmp	 DWORD PTR arch$[rsp], 3
  0038a	0f 8d c7 01 00
	00		 jge	 $LN24@init_facil

; 1400 :     {
; 1401 :         archname = get_arch_name_by_arch( arch );

  00390	8b 4c 24 50	 mov	 ecx, DWORD PTR arch$[rsp]
  00394	e8 00 00 00 00	 call	 get_arch_name_by_arch
  00399	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR archname$[rsp], rax

; 1402 : 
; 1403 :         for (bitno = 0; bitno <= STFL_HERC_LAST_BIT; bitno++)

  003a1	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR bitno$[rsp], 0
  003aa	eb 0d		 jmp	 SHORT $LN28@init_facil
$LN26@init_facil:
  003ac	48 8b 44 24 68	 mov	 rax, QWORD PTR bitno$[rsp]
  003b1	48 ff c0	 inc	 rax
  003b4	48 89 44 24 68	 mov	 QWORD PTR bitno$[rsp], rax
$LN28@init_facil:
  003b9	48 81 7c 24 68
	12 01 00 00	 cmp	 QWORD PTR bitno$[rsp], 274 ; 00000112H
  003c2	0f 87 8a 01 00
	00		 ja	 $LN27@init_facil

; 1404 :         {
; 1405 :             /* Does a sanity check function exist for this facility? */
; 1406 :             if (1
; 1407 :                 && (ft = get_factab_by_bitno( bitno ))
; 1408 :                 && (ft->modokfunc)

  003c8	33 c0		 xor	 eax, eax
  003ca	83 f8 01	 cmp	 eax, 1
  003cd	0f 84 7a 01 00
	00		 je	 $LN38@init_facil
  003d3	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  003d7	e8 00 00 00 00	 call	 get_factab_by_bitno
  003dc	48 89 44 24 78	 mov	 QWORD PTR ft$[rsp], rax
  003e1	48 83 7c 24 78
	00		 cmp	 QWORD PTR ft$[rsp], 0
  003e7	0f 84 60 01 00
	00		 je	 $LN38@init_facil
  003ed	48 8b 44 24 78	 mov	 rax, QWORD PTR ft$[rsp]
  003f2	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  003f6	0f 84 51 01 00
	00		 je	 $LN38@init_facil

; 1409 :             )
; 1410 :             {
; 1411 :                 fbyte =         (bitno / 8);

  003fc	33 d2		 xor	 edx, edx
  003fe	48 8b 44 24 68	 mov	 rax, QWORD PTR bitno$[rsp]
  00403	b9 08 00 00 00	 mov	 ecx, 8
  00408	48 f7 f1	 div	 rcx
  0040b	89 44 24 58	 mov	 DWORD PTR fbyte$[rsp], eax

; 1412 :                 fbit  = 0x80 >> (bitno % 8);

  0040f	33 d2		 xor	 edx, edx
  00411	48 8b 44 24 68	 mov	 rax, QWORD PTR bitno$[rsp]
  00416	b9 08 00 00 00	 mov	 ecx, 8
  0041b	48 f7 f1	 div	 rcx
  0041e	48 8b c2	 mov	 rax, rdx
  00421	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00426	89 8c 24 a4 00
	00 00		 mov	 DWORD PTR tv400[rsp], ecx
  0042d	0f b6 c8	 movzx	 ecx, al
  00430	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv400[rsp]
  00437	d3 f8		 sar	 eax, cl
  00439	89 44 24 70	 mov	 DWORD PTR fbit$[rsp], eax

; 1413 : 
; 1414 :                 enable = (sysblk.facility_list[ arch ][ fbyte ] & fbit) ?

  0043d	48 63 44 24 50	 movsxd	 rax, DWORD PTR arch$[rsp]
  00442	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00446	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0044d	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  00455	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  0045a	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0045e	23 44 24 70	 and	 eax, DWORD PTR fbit$[rsp]
  00462	85 c0		 test	 eax, eax
  00464	74 0d		 je	 SHORT $LN43@init_facil
  00466	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv243[rsp], 1
  00471	eb 0b		 jmp	 SHORT $LN44@init_facil
$LN43@init_facil:
  00473	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv243[rsp], 0
$LN44@init_facil:
  0047e	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR tv243[rsp], 0
  00486	75 0d		 jne	 SHORT $LN45@init_facil
  00488	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv245[rsp], 0
  00493	eb 0b		 jmp	 SHORT $LN46@init_facil
$LN45@init_facil:
  00495	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv245[rsp], 1
$LN46@init_facil:
  004a0	0f b6 84 24 8c
	00 00 00	 movzx	 eax, BYTE PTR tv245[rsp]
  004a8	88 44 24 55	 mov	 BYTE PTR enable$[rsp], al

; 1415 :                     true : false;
; 1416 : 
; 1417 :                 /* Sanity check this facility's setting */
; 1418 :                 if (!ft->modokfunc( enable, bitno, arch, NULL, NULL, NULL, NULL ))

  004ac	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  004b5	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  004be	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  004c7	45 33 c9	 xor	 r9d, r9d
  004ca	44 8b 44 24 50	 mov	 r8d, DWORD PTR arch$[rsp]
  004cf	8b 54 24 68	 mov	 edx, DWORD PTR bitno$[rsp]
  004d3	0f b6 4c 24 55	 movzx	 ecx, BYTE PTR enable$[rsp]
  004d8	48 8b 44 24 78	 mov	 rax, QWORD PTR ft$[rsp]
  004dd	ff 10		 call	 QWORD PTR [rax]
  004df	0f b6 c0	 movzx	 eax, al
  004e2	85 c0		 test	 eax, eax
  004e4	75 67		 jne	 SHORT $LN39@init_facil

; 1419 :                 {
; 1420 :                     // "%s facility %s fails consistency check"
; 1421 :                     WRMSG( HHC00899, "S", archname, ft->name );

  004e6	b9 01 00 00 00	 mov	 ecx, 1
  004eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004f1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR ft$[rsp]
  004f6	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  004fa	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  004ff	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR archname$[rsp]
  00507	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0050c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193098
  00513	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00518	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193099
  0051f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00524	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00529	41 b9 03 00 00
	00		 mov	 r9d, 3
  0052f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG193100
  00536	ba 8d 05 00 00	 mov	 edx, 1421		; 0000058dH
  0053b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG193101
  00542	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1422 :                     rc = false;

  00548	c6 44 24 54 00	 mov	 BYTE PTR rc$[rsp], 0
$LN39@init_facil:
$LN38@init_facil:

; 1423 :                 }
; 1424 :             }
; 1425 :         }

  0054d	e9 5a fe ff ff	 jmp	 $LN26@init_facil
$LN27@init_facil:

; 1426 :     }

  00552	e9 24 fe ff ff	 jmp	 $LN23@init_facil
$LN24@init_facil:

; 1427 : 
; 1428 :     /* Exit immediately if any sanity/consistency checks failed */
; 1429 :     if (!rc)

  00557	0f b6 44 24 54	 movzx	 eax, BYTE PTR rc$[rsp]
  0055c	85 c0		 test	 eax, eax
  0055e	75 0a		 jne	 SHORT $LN40@init_facil

; 1430 :         return rc;

  00560	0f b6 44 24 54	 movzx	 eax, BYTE PTR rc$[rsp]
  00565	e9 79 01 00 00	 jmp	 $LN1@init_facil
$LN40@init_facil:

; 1431 : 
; 1432 :     /* Enable or disable each facility's instructions as needed */
; 1433 : 
; 1434 :     for (arch = 0; arch < NUM_GEN_ARCHS; arch++)

  0056a	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR arch$[rsp], 0
  00572	eb 0a		 jmp	 SHORT $LN31@init_facil
$LN29@init_facil:
  00574	8b 44 24 50	 mov	 eax, DWORD PTR arch$[rsp]
  00578	ff c0		 inc	 eax
  0057a	89 44 24 50	 mov	 DWORD PTR arch$[rsp], eax
$LN31@init_facil:
  0057e	83 7c 24 50 03	 cmp	 DWORD PTR arch$[rsp], 3
  00583	0f 8d 55 01 00
	00		 jge	 $LN30@init_facil

; 1435 :     {
; 1436 :         at = get_archtab_by_arch( arch );

  00589	8b 4c 24 50	 mov	 ecx, DWORD PTR arch$[rsp]
  0058d	e8 00 00 00 00	 call	 get_archtab_by_arch
  00592	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR at$[rsp], rax

; 1437 : 
; 1438 :         for (bitno = 0; bitno <= STFL_HERC_LAST_BIT; bitno++)

  0059a	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR bitno$[rsp], 0
  005a3	eb 0d		 jmp	 SHORT $LN34@init_facil
$LN32@init_facil:
  005a5	48 8b 44 24 68	 mov	 rax, QWORD PTR bitno$[rsp]
  005aa	48 ff c0	 inc	 rax
  005ad	48 89 44 24 68	 mov	 QWORD PTR bitno$[rsp], rax
$LN34@init_facil:
  005b2	48 81 7c 24 68
	12 01 00 00	 cmp	 QWORD PTR bitno$[rsp], 274 ; 00000112H
  005bb	0f 87 18 01 00
	00		 ja	 $LN33@init_facil

; 1439 :         {
; 1440 :             /* Are there instructions associated with this facility? */
; 1441 :             if (1
; 1442 :                 && (ft = get_factab_by_bitno( bitno ))
; 1443 :                 && (ft->supmask & at->amask) // (applies to this arch?)
; 1444 :                 && (ft->updinstrs)

  005c1	33 c0		 xor	 eax, eax
  005c3	83 f8 01	 cmp	 eax, 1
  005c6	0f 84 08 01 00
	00		 je	 $LN41@init_facil
  005cc	8b 4c 24 68	 mov	 ecx, DWORD PTR bitno$[rsp]
  005d0	e8 00 00 00 00	 call	 get_factab_by_bitno
  005d5	48 89 44 24 78	 mov	 QWORD PTR ft$[rsp], rax
  005da	48 83 7c 24 78
	00		 cmp	 QWORD PTR ft$[rsp], 0
  005e0	0f 84 ee 00 00
	00		 je	 $LN41@init_facil
  005e6	48 8b 44 24 78	 mov	 rax, QWORD PTR ft$[rsp]
  005eb	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR at$[rsp]
  005f3	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  005f6	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  005f9	23 c1		 and	 eax, ecx
  005fb	85 c0		 test	 eax, eax
  005fd	0f 84 d1 00 00
	00		 je	 $LN41@init_facil
  00603	48 8b 44 24 78	 mov	 rax, QWORD PTR ft$[rsp]
  00608	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0060d	0f 84 c1 00 00
	00		 je	 $LN41@init_facil

; 1445 :             )
; 1446 :             {
; 1447 :                 fbyte =         (bitno / 8);

  00613	33 d2		 xor	 edx, edx
  00615	48 8b 44 24 68	 mov	 rax, QWORD PTR bitno$[rsp]
  0061a	b9 08 00 00 00	 mov	 ecx, 8
  0061f	48 f7 f1	 div	 rcx
  00622	89 44 24 58	 mov	 DWORD PTR fbyte$[rsp], eax

; 1448 :                 fbit  = 0x80 >> (bitno % 8);

  00626	33 d2		 xor	 edx, edx
  00628	48 8b 44 24 68	 mov	 rax, QWORD PTR bitno$[rsp]
  0062d	b9 08 00 00 00	 mov	 ecx, 8
  00632	48 f7 f1	 div	 rcx
  00635	48 8b c2	 mov	 rax, rdx
  00638	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  0063d	89 8c 24 a8 00
	00 00		 mov	 DWORD PTR tv424[rsp], ecx
  00644	0f b6 c8	 movzx	 ecx, al
  00647	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv424[rsp]
  0064e	d3 f8		 sar	 eax, cl
  00650	89 44 24 70	 mov	 DWORD PTR fbit$[rsp], eax

; 1449 : 
; 1450 :                 enable = (sysblk.facility_list[ arch ][ fbyte ] & fbit) ?

  00654	48 63 44 24 50	 movsxd	 rax, DWORD PTR arch$[rsp]
  00659	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0065d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00664	48 8d 84 01 a0
	0d 00 00	 lea	 rax, QWORD PTR [rcx+rax+3488]
  0066c	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR fbyte$[rsp]
  00671	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00675	23 44 24 70	 and	 eax, DWORD PTR fbit$[rsp]
  00679	85 c0		 test	 eax, eax
  0067b	74 0d		 je	 SHORT $LN47@init_facil
  0067d	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv302[rsp], 1
  00688	eb 0b		 jmp	 SHORT $LN48@init_facil
$LN47@init_facil:
  0068a	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv302[rsp], 0
$LN48@init_facil:
  00695	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR tv302[rsp], 0
  0069d	75 0d		 jne	 SHORT $LN49@init_facil
  0069f	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv304[rsp], 0
  006aa	eb 0b		 jmp	 SHORT $LN50@init_facil
$LN49@init_facil:
  006ac	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv304[rsp], 1
$LN50@init_facil:
  006b7	0f b6 84 24 94
	00 00 00	 movzx	 eax, BYTE PTR tv304[rsp]
  006bf	88 44 24 55	 mov	 BYTE PTR enable$[rsp], al

; 1451 :                     true : false;
; 1452 : 
; 1453 :                 /* Enable or disable this facility's instructions */
; 1454 :                 ft->updinstrs( arch, enable );

  006c3	0f b6 54 24 55	 movzx	 edx, BYTE PTR enable$[rsp]
  006c8	8b 4c 24 50	 mov	 ecx, DWORD PTR arch$[rsp]
  006cc	48 8b 44 24 78	 mov	 rax, QWORD PTR ft$[rsp]
  006d1	ff 50 08	 call	 QWORD PTR [rax+8]
$LN41@init_facil:

; 1455 :             }
; 1456 :         }

  006d4	e9 cc fe ff ff	 jmp	 $LN32@init_facil
$LN33@init_facil:

; 1457 :     }

  006d9	e9 96 fe ff ff	 jmp	 $LN29@init_facil
$LN30@init_facil:

; 1458 : 
; 1459 :     return rc;  // (true or false, success or failure)

  006de	0f b6 44 24 54	 movzx	 eax, BYTE PTR rc$[rsp]
$LN1@init_facil:

; 1460 : }

  006e3	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  006ea	c3		 ret	 0
init_facilities_lists ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
any_started$ = 32
are_any_cpus_started PROC

; 531  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 532  :     bool any_started;
; 533  : 
; 534  :     OBTAIN_INTLOCK( NULL );

  00004	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG158966
  0000b	33 c9		 xor	 ecx, ecx
  0000d	e8 00 00 00 00	 call	 Obtain_Interrupt_Lock

; 535  :     {
; 536  :         any_started = are_any_cpus_started_intlock_held();

  00012	e8 00 00 00 00	 call	 are_any_cpus_started_intlock_held
  00017	88 44 24 20	 mov	 BYTE PTR any_started$[rsp], al

; 537  :     }
; 538  :     RELEASE_INTLOCK( NULL );

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG158967
  00022	33 c9		 xor	 ecx, ecx
  00024	e8 00 00 00 00	 call	 Release_Interrupt_Lock

; 539  :     return any_started;

  00029	0f b6 44 24 20	 movzx	 eax, BYTE PTR any_started$[rsp]

; 540  : }

  0002e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00032	c3		 ret	 0
are_any_cpus_started ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
cpu$ = 0
are_any_cpus_started_intlock_held PROC

; 501  : {

  00000	48 83 ec 18	 sub	 rsp, 24

; 502  :     int cpu;
; 503  : 
; 504  :     if (sysblk.cpus)

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0000b	83 b8 04 01 00
	00 00		 cmp	 DWORD PTR [rax+260], 0
  00012	74 5b		 je	 SHORT $LN5@are_any_cp

; 505  :         for (cpu = 0; cpu < sysblk.hicpu; cpu++)

  00014	c7 04 24 00 00
	00 00		 mov	 DWORD PTR cpu$[rsp], 0
  0001b	eb 08		 jmp	 SHORT $LN4@are_any_cp
$LN2@are_any_cp:
  0001d	8b 04 24	 mov	 eax, DWORD PTR cpu$[rsp]
  00020	ff c0		 inc	 eax
  00022	89 04 24	 mov	 DWORD PTR cpu$[rsp], eax
$LN4@are_any_cp:
  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002c	8b 80 08 01 00
	00		 mov	 eax, DWORD PTR [rax+264]
  00032	39 04 24	 cmp	 DWORD PTR cpu$[rsp], eax
  00035	7d 38		 jge	 SHORT $LN3@are_any_cp

; 506  :             if (IS_CPU_ONLINE( cpu ))

  00037	48 63 04 24	 movsxd	 rax, DWORD PTR cpu$[rsp]
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00042	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  0004b	74 20		 je	 SHORT $LN6@are_any_cp

; 507  :                 if (sysblk.regs[ cpu ]->cpustate == CPUSTATE_STARTED)

  0004d	48 63 04 24	 movsxd	 rax, DWORD PTR cpu$[rsp]
  00051	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00058	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  00060	0f b6 40 60	 movzx	 eax, BYTE PTR [rax+96]
  00064	83 f8 01	 cmp	 eax, 1
  00067	75 04		 jne	 SHORT $LN7@are_any_cp

; 508  :                     return true;

  00069	b0 01		 mov	 al, 1
  0006b	eb 04		 jmp	 SHORT $LN1@are_any_cp
$LN7@are_any_cp:
$LN6@are_any_cp:
  0006d	eb ae		 jmp	 SHORT $LN2@are_any_cp
$LN3@are_any_cp:
$LN5@are_any_cp:

; 509  :     return false;

  0006f	32 c0		 xor	 al, al
$LN1@are_any_cp:

; 510  : }

  00071	48 83 c4 18	 add	 rsp, 24
  00075	c3		 ret	 0
are_any_cpus_started_intlock_held ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Release_Interrupt_Lock PROC

; 403  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@Release_In:

; 404  :     UNREFERENCED( regs );

  0000e	33 c0		 xor	 eax, eax
  00010	85 c0		 test	 eax, eax
  00012	75 fa		 jne	 SHORT $LN4@Release_In

; 405  :     sysblk.intowner = LOCK_OWNER_NONE;

  00014	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00019	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00020	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 406  :     hthread_release_lock( &sysblk.intlock, location );

  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0002e	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00034	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00039	48 8b c8	 mov	 rcx, rax
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 407  : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
Release_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Obtain_Interrupt_Lock PROC

; 379  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 380  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	74 13		 je	 SHORT $LN2@Obtain_Int

; 381  :         HOSTREGS->intwait = true;

  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  0001b	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  00022	c6 80 f0 08 00
	00 01		 mov	 BYTE PTR [rax+2288], 1
$LN2@Obtain_Int:

; 382  :     hthread_obtain_lock( &sysblk.intlock, location );

  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00030	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  00036	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  0003b	48 8b c8	 mov	 rcx, rax
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 383  :     Interrupt_Lock_Obtained( regs, location );

  00044	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR regs$[rsp]
  0004e	e8 00 00 00 00	 call	 Interrupt_Lock_Obtained

; 384  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
Obtain_Interrupt_Lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hinlines.h
_TEXT	SEGMENT
regs$ = 48
location$ = 56
Interrupt_Lock_Obtained PROC

; 347  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 348  :     if (regs)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR regs$[rsp], 0
  00014	0f 84 db 00 00
	00		 je	 $LN4@Interrupt_
$LN2@Interrupt_:

; 349  :     {
; 350  :         /* Wait for any SYNCHRONIZE_CPUS to finish before proceeding */
; 351  :         while (sysblk.syncing)

  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00021	0f b6 80 7c 13
	00 00		 movzx	 eax, BYTE PTR [rax+4988]
  00028	85 c0		 test	 eax, eax
  0002a	0f 84 8f 00 00
	00		 je	 $LN3@Interrupt_

; 352  :         {
; 353  :             /* Indicate we have reached the sync point */
; 354  :             sysblk.sync_mask &= ~HOSTREGS->cpubit;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  00035	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  0003c	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00040	48 f7 d0	 not	 rax
  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0004a	48 8b 89 80 13
	00 00		 mov	 rcx, QWORD PTR [rcx+4992]
  00051	48 23 c8	 and	 rcx, rax
  00054	48 8b c1	 mov	 rax, rcx
  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0005e	48 89 81 80 13
	00 00		 mov	 QWORD PTR [rcx+4992], rax

; 355  : 
; 356  :             /* If we're the last CPU to reach this sync point,
; 357  :                signal the CPU that requested the sync that it
; 358  :                may now safely proceed with its exclusive logic.
; 359  :             */
; 360  :             if (!sysblk.sync_mask)

  00065	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0006c	48 83 b8 80 13
	00 00 00	 cmp	 QWORD PTR [rax+4992], 0
  00074	75 1b		 jne	 SHORT $LN6@Interrupt_

; 361  :                 hthread_signal_condition( &sysblk.all_synced_cond, location );

  00076	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007d	48 05 88 13 00
	00		 add	 rax, 5000		; 00001388H
  00083	48 8b 54 24 38	 mov	 rdx, QWORD PTR location$[rsp]
  00088	48 8b c8	 mov	 rcx, rax
  0008b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition
$LN6@Interrupt_:

; 362  : 
; 363  :             /* Wait for CPU that requested the sync to indicate
; 364  :                it's done and thus is now safe for us to proceed.
; 365  :             */
; 366  :             hthread_wait_condition( &sysblk.sync_done_cond, &sysblk.intlock, location );

  00091	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00098	48 05 70 10 00
	00		 add	 rax, 4208		; 00001070H
  0009e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000a5	48 81 c1 90 13
	00 00		 add	 rcx, 5008		; 00001390H
  000ac	4c 8b 44 24 38	 mov	 r8, QWORD PTR location$[rsp]
  000b1	48 8b d0	 mov	 rdx, rax
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition

; 367  :         }

  000ba	e9 5b ff ff ff	 jmp	 $LN2@Interrupt_
$LN3@Interrupt_:

; 368  : 
; 369  :         HOSTREGS->intwait = false;

  000bf	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000c4	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000cb	c6 80 f0 08 00
	00 00		 mov	 BYTE PTR [rax+2288], 0

; 370  :         sysblk.intowner = HOSTREGS->cpuad;

  000d2	48 8b 44 24 30	 mov	 rax, QWORD PTR regs$[rsp]
  000d7	48 8b 80 68 08
	00 00		 mov	 rax, QWORD PTR [rax+2152]
  000de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000e5	0f b7 80 3c 08
	00 00		 movzx	 eax, WORD PTR [rax+2108]
  000ec	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax

; 371  :     }

  000f3	eb 13		 jmp	 SHORT $LN5@Interrupt_
$LN4@Interrupt_:

; 372  :     else
; 373  :         sysblk.intowner = LOCK_OWNER_OTHER;

  000f5	b8 fe ff 00 00	 mov	 eax, 65534		; 0000fffeH
  000fa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00101	66 89 81 62 10
	00 00		 mov	 WORD PTR [rcx+4194], ax
$LN5@Interrupt_:

; 374  : }

  00108	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0010c	c3		 ret	 0
Interrupt_Lock_Obtained ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
s$ = 32
r$ = 40
result$ = 64
string$ = 72
strupper PROC

; 157  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 158  :     register char *r = result;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax

; 159  :     register char *s = string;

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR string$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 160  :     for (; *s; r++, s++)

  00022	eb 1a		 jmp	 SHORT $LN4@strupper
$LN2@strupper:
  00024	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
  00029	48 ff c0	 inc	 rax
  0002c	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax
  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00036	48 ff c0	 inc	 rax
  00039	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax
$LN4@strupper:
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00043	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00046	85 c0		 test	 eax, eax
  00048	74 16		 je	 SHORT $LN3@strupper

; 161  :     {
; 162  :         *r = asciitoupper(*s);

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004f	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00052	e8 00 00 00 00	 call	 asciitoupper
  00057	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$[rsp]
  0005c	88 01		 mov	 BYTE PTR [rcx], al

; 163  :     }

  0005e	eb c4		 jmp	 SHORT $LN2@strupper
$LN3@strupper:

; 164  :     *r = 0;

  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR r$[rsp]
  00065	c6 00 00	 mov	 BYTE PTR [rax], 0

; 165  :     return result;

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]

; 166  : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
strupper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
tv84 = 32
tv73 = 36
tv93 = 40
a$ = 48
s$ = 56
string$ = 80
abbrev$ = 88
n$ = 96
strcaseabbrev PROC

; 91   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 92   :     register const char *s = string;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR string$[rsp]
  00018	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 93   :     register const char *a = abbrev;

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR abbrev$[rsp]
  00022	48 89 44 24 30	 mov	 QWORD PTR a$[rsp], rax

; 94   :     if (*a &&
; 95   :         *s &&

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0002c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0002f	85 c0		 test	 eax, eax
  00031	0f 84 02 01 00
	00		 je	 $LN5@strcaseabb
  00037	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  0003c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003f	85 c0		 test	 eax, eax
  00041	0f 84 f2 00 00
	00		 je	 $LN5@strcaseabb
  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0004c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0004f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00054	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00057	3b c1		 cmp	 eax, ecx
  00059	74 30		 je	 SHORT $LN6@strcaseabb
  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00060	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00063	e8 00 00 00 00	 call	 asciitoupper
  00068	0f be c0	 movsx	 eax, al
  0006b	89 44 24 24	 mov	 DWORD PTR tv73[rsp], eax
  0006f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00074	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00077	e8 00 00 00 00	 call	 asciitoupper
  0007c	0f be c0	 movsx	 eax, al
  0007f	8b 4c 24 24	 mov	 ecx, DWORD PTR tv73[rsp]
  00083	3b c8		 cmp	 ecx, eax
  00085	0f 85 ae 00 00
	00		 jne	 $LN5@strcaseabb
$LN6@strcaseabb:
$LN2@strcaseabb:

; 96   :         (*a == *s ||
; 97   :         asciitoupper(*a) == asciitoupper(*s)))
; 98   :     {
; 99   :         for (;;)
; 100  :         {
; 101  :             a++;

  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00090	48 ff c0	 inc	 rax
  00093	48 89 44 24 30	 mov	 QWORD PTR a$[rsp], rax

; 102  :             if (!*a)

  00098	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0009d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000a0	85 c0		 test	 eax, eax
  000a2	75 31		 jne	 SHORT $LN7@strcaseabb

; 103  :                 return (((uintptr_t)a - (uintptr_t)abbrev) >= n);

  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR abbrev$[rsp]
  000a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a$[rsp]
  000ae	48 2b c8	 sub	 rcx, rax
  000b1	48 8b c1	 mov	 rax, rcx
  000b4	8b 4c 24 60	 mov	 ecx, DWORD PTR n$[rsp]
  000b8	48 3b c1	 cmp	 rax, rcx
  000bb	72 0a		 jb	 SHORT $LN12@strcaseabb
  000bd	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  000c5	eb 08		 jmp	 SHORT $LN13@strcaseabb
$LN12@strcaseabb:
  000c7	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN13@strcaseabb:
  000cf	8b 44 24 20	 mov	 eax, DWORD PTR tv84[rsp]
  000d3	eb 66		 jmp	 SHORT $LN1@strcaseabb
$LN7@strcaseabb:

; 104  :             s++;

  000d5	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000da	48 ff c0	 inc	 rax
  000dd	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 105  :             if (!*s)

  000e2	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000e7	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ea	85 c0		 test	 eax, eax
  000ec	75 02		 jne	 SHORT $LN8@strcaseabb

; 106  :                 break;

  000ee	eb 49		 jmp	 SHORT $LN3@strcaseabb
$LN8@strcaseabb:

; 107  :             if (*a == *s)

  000f0	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  000f5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000f8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  000fd	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00100	3b c1		 cmp	 eax, ecx
  00102	75 02		 jne	 SHORT $LN9@strcaseabb

; 108  :                 continue;

  00104	eb 85		 jmp	 SHORT $LN2@strcaseabb
$LN9@strcaseabb:

; 109  :             if (asciitoupper(*a) != asciitoupper(*s))

  00106	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0010b	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0010e	e8 00 00 00 00	 call	 asciitoupper
  00113	0f be c0	 movsx	 eax, al
  00116	89 44 24 28	 mov	 DWORD PTR tv93[rsp], eax
  0011a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  0011f	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  00122	e8 00 00 00 00	 call	 asciitoupper
  00127	0f be c0	 movsx	 eax, al
  0012a	8b 4c 24 28	 mov	 ecx, DWORD PTR tv93[rsp]
  0012e	3b c8		 cmp	 ecx, eax
  00130	74 02		 je	 SHORT $LN10@strcaseabb

; 110  :                 break;

  00132	eb 05		 jmp	 SHORT $LN3@strcaseabb
$LN10@strcaseabb:

; 111  :         }

  00134	e9 52 ff ff ff	 jmp	 $LN2@strcaseabb
$LN3@strcaseabb:
$LN5@strcaseabb:

; 112  :     }
; 113  :     return 0;

  00139	33 c0		 xor	 eax, eax
$LN1@strcaseabb:

; 114  : }

  0013b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013f	c3		 ret	 0
strcaseabbrev ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\extstring.h
_TEXT	SEGMENT
c$ = 8
asciitoupper PROC

; 29   : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 30   :   if (c < 'a' || c > 'z')

  00004	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00009	83 f8 61	 cmp	 eax, 97			; 00000061H
  0000c	7c 0a		 jl	 SHORT $LN3@asciitoupp
  0000e	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00013	83 f8 7a	 cmp	 eax, 122		; 0000007aH
  00016	7e 07		 jle	 SHORT $LN2@asciitoupp
$LN3@asciitoupp:

; 31   :       return c;

  00018	0f b6 44 24 08	 movzx	 eax, BYTE PTR c$[rsp]
  0001d	eb 08		 jmp	 SHORT $LN1@asciitoupp
$LN2@asciitoupp:

; 32   :   return (c - 32);

  0001f	0f be 44 24 08	 movsx	 eax, BYTE PTR c$[rsp]
  00024	83 e8 20	 sub	 eax, 32			; 00000020H
$LN1@asciitoupp:

; 33   : }

  00027	c3		 ret	 0
asciitoupper ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
