; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	return_false1
PUBLIC	write_READONLY5
PUBLIC	is_tapeloaded_filename
PUBLIC	write_READONLY
PUBLIC	no_operation
PUBLIC	readblkid_virtual
PUBLIC	locateblk_virtual
PUBLIC	generic_tmhcall
PUBLIC	tape_other_devhnd
PUBLIC	tape_3590_devhnd
PUBLIC	tmh_aws
PUBLIC	tmh_het
PUBLIC	tmh_fake
PUBLIC	tmh_oma
PUBLIC	tmh_scsi
PUBLIC	DevInitTab
PUBLIC	fmttab
PUBLIC	ptab
EXTRN	open_scsitape:PROC
EXTRN	close_scsitape:PROC
EXTRN	read_scsitape:PROC
EXTRN	write_scsitape:PROC
EXTRN	rewind_scsitape:PROC
EXTRN	bsb_scsitape:PROC
EXTRN	fsb_scsitape:PROC
EXTRN	bsf_scsitape:PROC
EXTRN	fsf_scsitape:PROC
EXTRN	write_scsimark:PROC
EXTRN	sync_scsitape:PROC
EXTRN	dse_scsitape:PROC
EXTRN	erg_scsitape:PROC
EXTRN	is_tape_mounted_scsitape:PROC
EXTRN	passedeot_scsitape:PROC
EXTRN	readblkid_scsitape:PROC
EXTRN	locateblk_scsitape:PROC
EXTRN	TapeImmedOther:BYTE
EXTRN	TapeImmed3590:BYTE
EXTRN	tapedev_execute_ccw:PROC
EXTRN	open_faketape:PROC
EXTRN	close_faketape:PROC
EXTRN	passedeot_faketape:PROC
EXTRN	rewind_faketape:PROC
EXTRN	write_fakemark:PROC
EXTRN	sync_faketape:PROC
EXTRN	fsb_faketape:PROC
EXTRN	bsb_faketape:PROC
EXTRN	fsf_faketape:PROC
EXTRN	bsf_faketape:PROC
EXTRN	read_faketape:PROC
EXTRN	write_faketape:PROC
EXTRN	open_omatape:PROC
EXTRN	close_omatape:PROC
EXTRN	rewind_omatape:PROC
EXTRN	fsb_omatape:PROC
EXTRN	bsb_omatape:PROC
EXTRN	fsf_omatape:PROC
EXTRN	bsf_omatape:PROC
EXTRN	read_omatape:PROC
EXTRN	passedeot_het:PROC
EXTRN	sync_het:PROC
EXTRN	write_hetmark:PROC
EXTRN	fsf_het:PROC
EXTRN	bsf_het:PROC
EXTRN	fsb_het:PROC
EXTRN	bsb_het:PROC
EXTRN	rewind_het:PROC
EXTRN	write_het:PROC
EXTRN	read_het:PROC
EXTRN	close_het:PROC
EXTRN	open_het:PROC
EXTRN	passedeot_awstape:PROC
EXTRN	sync_awstape:PROC
EXTRN	write_awsmark:PROC
EXTRN	fsf_awstape:PROC
EXTRN	bsf_awstape:PROC
EXTRN	fsb_awstape:PROC
EXTRN	bsb_awstape:PROC
EXTRN	rewind_awstape:PROC
EXTRN	write_awstape:PROC
EXTRN	read_awstape:PROC
EXTRN	close_awstape:PROC
EXTRN	open_awstape:PROC
_DATA	SEGMENT
tape_other_devhnd DQ FLAT:tapedev_init_handler
	DQ	FLAT:tapedev_execute_ccw
	DQ	FLAT:tapedev_close_device
	DQ	FLAT:tapedev_query_device
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:TapeImmedOther
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG169455 DB	'\.aws$', 00H
	ORG $+1
tape_3590_devhnd DQ FLAT:tapedev_init_handler
	DQ	FLAT:tapedev_execute_ccw
	DQ	FLAT:tapedev_close_device
	DQ	FLAT:tapedev_query_device
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:TapeImmed3590
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG169456 DB	'AWS Format tape file', 00H
	ORG $+3
tmh_aws	DQ	FLAT:generic_tmhcall
	DQ	FLAT:open_awstape
	DQ	FLAT:close_awstape
	DQ	FLAT:read_awstape
	DQ	FLAT:write_awstape
	DQ	FLAT:rewind_awstape
	DQ	FLAT:bsb_awstape
	DQ	FLAT:fsb_awstape
	DQ	FLAT:bsf_awstape
	DQ	FLAT:fsf_awstape
	DQ	FLAT:write_awsmark
	DQ	FLAT:sync_awstape
	DQ	FLAT:no_operation
	DQ	FLAT:no_operation
	DQ	FLAT:is_tapeloaded_filename
	DQ	FLAT:passedeot_awstape
	DQ	FLAT:readblkid_virtual
	DQ	FLAT:locateblk_virtual
tmh_het	DQ	FLAT:generic_tmhcall
	DQ	FLAT:open_het
	DQ	FLAT:close_het
	DQ	FLAT:read_het
	DQ	FLAT:write_het
	DQ	FLAT:rewind_het
	DQ	FLAT:bsb_het
	DQ	FLAT:fsb_het
	DQ	FLAT:bsf_het
	DQ	FLAT:fsf_het
	DQ	FLAT:write_hetmark
	DQ	FLAT:sync_het
	DQ	FLAT:no_operation
	DQ	FLAT:no_operation
	DQ	FLAT:is_tapeloaded_filename
	DQ	FLAT:passedeot_het
	DQ	FLAT:readblkid_virtual
	DQ	FLAT:locateblk_virtual
tmh_fake DQ	FLAT:generic_tmhcall
	DQ	FLAT:open_faketape
	DQ	FLAT:close_faketape
	DQ	FLAT:read_faketape
	DQ	FLAT:write_faketape
	DQ	FLAT:rewind_faketape
	DQ	FLAT:bsb_faketape
	DQ	FLAT:fsb_faketape
	DQ	FLAT:bsf_faketape
	DQ	FLAT:fsf_faketape
	DQ	FLAT:write_fakemark
	DQ	FLAT:sync_faketape
	DQ	FLAT:no_operation
	DQ	FLAT:no_operation
	DQ	FLAT:is_tapeloaded_filename
	DQ	FLAT:passedeot_faketape
	DQ	FLAT:readblkid_virtual
	DQ	FLAT:locateblk_virtual
tmh_oma	DQ	FLAT:generic_tmhcall
	DQ	FLAT:open_omatape
	DQ	FLAT:close_omatape
	DQ	FLAT:read_omatape
	DQ	FLAT:write_READONLY5
	DQ	FLAT:rewind_omatape
	DQ	FLAT:bsb_omatape
	DQ	FLAT:fsb_omatape
	DQ	FLAT:bsf_omatape
	DQ	FLAT:fsf_omatape
	DQ	FLAT:write_READONLY
	DQ	FLAT:write_READONLY
	DQ	FLAT:write_READONLY
	DQ	FLAT:write_READONLY
	DQ	FLAT:is_tapeloaded_filename
	DQ	FLAT:return_false1
	DQ	FLAT:readblkid_virtual
	DQ	FLAT:locateblk_virtual
tmh_scsi DQ	FLAT:generic_tmhcall
	DQ	FLAT:open_scsitape
	DQ	FLAT:close_scsitape
	DQ	FLAT:read_scsitape
	DQ	FLAT:write_scsitape
	DQ	FLAT:rewind_scsitape
	DQ	FLAT:bsb_scsitape
	DQ	FLAT:fsb_scsitape
	DQ	FLAT:bsf_scsitape
	DQ	FLAT:fsf_scsitape
	DQ	FLAT:write_scsimark
	DQ	FLAT:sync_scsitape
	DQ	FLAT:dse_scsitape
	DQ	FLAT:erg_scsitape
	DQ	FLAT:is_tape_mounted_scsitape
	DQ	FLAT:passedeot_scsitape
	DQ	FLAT:readblkid_scsitape
	DQ	FLAT:locateblk_scsitape
DevInitTab DW	03410H
	DB	01H
	ORG $+1
	DW	03115H
	DB	01H
	ORG $+1
	DD	00H
	DD	00H
	DD	0ffffH
	DD	0ffffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	09H
	DD	00H
	DD	00H
	DW	03411H
	DB	01H
	ORG $+1
	DW	03115H
	DB	01H
	ORG $+1
	DD	00H
	DD	00H
	DD	0ffffH
	DD	0ffffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	09H
	DD	00H
	DD	00H
	DW	03420H
	DB	06H
	ORG $+1
	DW	03803H
	DB	02H
	ORG $+1
	DD	00H
	DD	00H
	DD	0ffffH
	DD	0ffffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	018H
	DD	00H
	DD	00H
	DW	03422H
	DB	01H
	ORG $+1
	DW	03422H
	DB	01H
	ORG $+1
	DD	00H
	DD	00H
	DD	0ffffH
	DD	0ffffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
	DD	07H
	DD	020H
	DD	00H
	DD	00H
	DW	03430H
	DB	01H
	ORG $+1
	DW	03422H
	DB	01H
	ORG $+1
	DD	00H
	DD	00H
	DD	0ffffH
	DD	0ffffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
	DD	07H
	DD	020H
	DD	00H
	DD	00H
	DW	08809H
	DB	01H
	ORG $+1
	DW	08809H
	DB	01H
	ORG $+1
	DD	00H
	DD	00H
	DD	0ffffH
	DD	0ffffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	020H
	DD	00H
	DD	00H
	DW	09347H
	DB	01H
	ORG $+1
	DW	09347H
	DB	01H
	ORG $+1
	DD	00H
	DD	00H
	DD	0ffffH
	DD	0ffffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
	DD	07H
	DD	020H
	DD	00H
	DD	00H
	DW	09348H
	DB	01H
	ORG $+1
	DW	09348H
	DB	01H
	ORG $+1
	DD	00H
	DD	00H
	DD	0ffffH
	DD	0ffffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
	DD	07H
	DD	020H
	DD	00H
	DD	00H
	DW	03480H
	DB	031H
	ORG $+1
	DW	03480H
	DB	031H
	ORG $+1
	DD	02c0H
	DD	00H
	DD	0ffffH
	DD	0ffffH
	DB	041H
	DB	080H
	DB	00H
	DB	080H
	DB	080H
	ORG $+3
	DD	07H
	DD	018H
	DD	01H
	DD	01H
	DW	03490H
	DB	050H
	ORG $+1
	DW	03490H
	DB	050H
	ORG $+1
	DD	02c0H
	DD	00H
	DD	0ffffH
	DD	0ffffH
	DB	042H
	DB	081H
	DB	00H
	DB	080H
	DB	080H
	ORG $+3
	DD	07H
	DD	020H
	DD	01H
	DD	01H
	DW	03590H
	DB	060H
	ORG $+1
	DW	03590H
	DB	011H
	ORG $+1
	DD	01004ec0H
	DD	0900400H
	DD	040000H
	DD	040000H
	DB	046H
	DB	083H
	DB	080H
	DB	00H
	DB	00H
	ORG $+3
	DD	07H
	DD	020H
	DD	01H
	DD	01H
	DW	0ffffH
	DB	0ffH
	ORG $+1
	DW	0ffffH
	DB	0ffH
	ORG $+1
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	ORG $+3
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DD	0ffffffffH
	DW	03420H
	DB	06H
	ORG $+1
	DW	03803H
	DB	02H
	ORG $+1
	DD	00H
	DD	00H
	DD	0ffffH
	DD	0ffffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+3
	DD	00H
	DD	018H
	DD	00H
	DD	00H
fmttab	DQ	FLAT:$SG169455
	DD	01H
	ORG $+4
	DQ	FLAT:tmh_aws
	DQ	FLAT:$SG169456
	DQ	FLAT:$SG169457
	DQ	FLAT:$SG169458
	DD	04H
	ORG $+4
	DQ	FLAT:tmh_het
	DQ	FLAT:$SG169459
	DQ	FLAT:$SG169460
	DQ	FLAT:$SG169461
	DD	02H
	ORG $+4
	DQ	FLAT:tmh_oma
	DQ	FLAT:$SG169462
	DQ	FLAT:$SG169463
	DQ	FLAT:$SG169464
	DD	05H
	ORG $+4
	DQ	FLAT:tmh_fake
	DQ	FLAT:$SG169465
	DQ	FLAT:$SG169466
	DQ	FLAT:$SG169467
	DD	03H
	ORG $+4
	DQ	FLAT:tmh_scsi
	DQ	FLAT:$SG169468
	DQ	FLAT:$SG169469
	DQ	FLAT:$SG169470
	DD	03H
	ORG $+4
	DQ	FLAT:tmh_scsi
	DQ	FLAT:$SG169471
	DQ	FLAT:$SG169472
$SG169457 DB	'AWS tape', 00H
	ORG $+3
$SG169458 DB	'\.het$', 00H
	ORG $+1
$SG169565 DB	'-d', 00H
	ORG $+1
$SG169459 DB	'Hercules Emulated Tape file', 00H
$SG169568 DB	'%d', 00H
	ORG $+1
$SG169460 DB	'HET tape', 00H
	ORG $+3
$SG169461 DB	'\.tdf$', 00H
	ORG $+1
$SG169570 DB	'%d', 00H
	ORG $+1
$SG169462 DB	'Optical Media Attachment (OMA) tape', 00H
$SG169572 DB	'%d', 00H
	ORG $+1
$SG169463 DB	'OMA tape', 00H
	ORG $+3
$SG169464 DB	'\.fkt$', 00H
	ORG $+1
$SG169574 DB	'%d', 00H
	ORG $+1
$SG169465 DB	'Flex FakeTape file', 00H
	ORG $+1
$SG169576 DB	'%d', 00H
	ORG $+1
$SG169466 DB	'FakeTape', 00H
	ORG $+3
$SG169467 DB	'^/dev/', 00H
	ORG $+1
$SG169580 DB	'%d', 00H
	ORG $+1
$SG169468 DB	'SCSI attached tape drive', 00H
	ORG $+3
$SG169571 DB	'method', 00H
	ORG $+1
$SG169582 DB	'%d', 00H
	ORG $+1
$SG169469 DB	'SCSI tape', 00H
	ORG $+2
$SG169586 DB	'%d', 00H
	ORG $+1
$SG169470 DB	'^((\\\\\.\\)|(//\./))\w', 00H
$SG169471 DB	'SCSI attached tape drive', 00H
	ORG $+3
$SG169573 DB	'level', 00H
	ORG $+2
$SG169588 DB	'%d', 00H
	ORG $+1
$SG169472 DB	'SCSI tape', 00H
	ORG $+6
$SG169566 DB	'awstape', 00H
ptab	DQ	FLAT:$SG169565
	DQ	0000000000000000H
	DQ	FLAT:$SG169566
	DQ	0000000000000000H
	DQ	FLAT:$SG169567
	DQ	FLAT:$SG169568
	DQ	FLAT:$SG169569
	DQ	FLAT:$SG169570
	DQ	FLAT:$SG169571
	DQ	FLAT:$SG169572
	DQ	FLAT:$SG169573
	DQ	FLAT:$SG169574
	DQ	FLAT:$SG169575
	DQ	FLAT:$SG169576
	DQ	FLAT:$SG169577
	DQ	FLAT:$SG169578
	DQ	FLAT:$SG169579
	DQ	FLAT:$SG169580
	DQ	FLAT:$SG169581
	DQ	FLAT:$SG169582
	DQ	FLAT:$SG169583
	DQ	FLAT:$SG169584
	DQ	FLAT:$SG169585
	DQ	FLAT:$SG169586
	DQ	FLAT:$SG169587
	DQ	FLAT:$SG169588
	DQ	FLAT:$SG169589
	DQ	0000000000000000H
	DQ	FLAT:$SG169590
	DQ	0000000000000000H
	DQ	FLAT:$SG169591
	DQ	0000000000000000H
	DQ	FLAT:$SG169592
	DQ	0000000000000000H
	DQ	FLAT:$SG169593
	DQ	FLAT:$SG169594
	DQ	FLAT:$SG169595
	DQ	0000000000000000H
	DQ	FLAT:$SG169596
	DQ	0000000000000000H
	DQ	FLAT:$SG169597
	DQ	0000000000000000H
	DQ	FLAT:$SG169598
	DQ	0000000000000000H
	DQ	FLAT:$SG169599
	DQ	0000000000000000H
	DQ	FLAT:$SG169600
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG169567 DB	'idrc', 00H
	ORG $+3
$SG169569 DB	'compress', 00H
	ORG $+3
$SG169589 DB	'ro', 00H
	ORG $+1
$SG169575 DB	'chunksize', 00H
	ORG $+2
$SG169590 DB	'noring', 00H
	ORG $+1
$SG169591 DB	'rw', 00H
	ORG $+1
$SG169577 DB	'maxsize', 00H
$SG169578 DB	'%79s', 00H
	ORG $+3
$SG169579 DB	'maxsizeK', 00H
	ORG $+3
$SG169594 DB	'%d', 00H
	ORG $+1
$SG169581 DB	'maxsizeM', 00H
	ORG $+7
$SG169583 DB	'eotmargin', 00H
	ORG $+2
$SG169584 DB	'%79s', 00H
	ORG $+7
$SG169585 DB	'strictsize', 00H
	ORG $+5
$SG169587 DB	'readonly', 00H
	ORG $+3
$SG169592 DB	'ring', 00H
	ORG $+7
$SG169593 DB	'deonirq', 00H
$SG169595 DB	'noautomount', 00H
	ORG $+4
$SG169596 DB	'--blkid-22', 00H
	ORG $+5
$SG169597 DB	'--blkid-24', 00H
	ORG $+5
$SG169598 DB	'--blkid-32', 00H
	ORG $+5
$SG169599 DB	'--no-erg', 00H
	ORG $+7
$SG169600 DB	'--online', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	ORG $+8
cfgdata	DB	0ccH
	DB	01H
	DB	02H
	DB	00H
	DB	0f0H
	DB	0f0H
	DB	0f3H
	DB	0f4H
	DB	0f9H
	DB	0f0H
	DB	0c3H
	DB	0f1H
	DB	0f0H
	DB	0c8H
	DB	0d9H
	DB	0c3H
	DB	0e9H
	DB	0e9H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	00H
	DB	00H
	DB	0c4H
	DB	02H
	DB	00H
	DB	00H
	DB	0f0H
	DB	0f0H
	DB	0f3H
	DB	0f4H
	DB	0f9H
	DB	0f0H
	DB	0c3H
	DB	0f1H
	DB	0f0H
	DB	0c8H
	DB	0d9H
	DB	0c3H
	DB	0e9H
	DB	0e9H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ecH
	DB	00H
	DB	00H
	DB	00H
	DB	0f0H
	DB	0f0H
	DB	0f3H
	DB	0f4H
	DB	0f9H
	DB	0f0H
	DB	0c3H
	DB	0f1H
	DB	0f0H
	DB	0c8H
	DB	0d9H
	DB	0c3H
	DB	0e9H
	DB	0e9H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	0f0H
	DB	00H
	DB	00H
	DB	080H
	DB	080H
	DB	00H
	DB	080H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	store_hw_noswap
PUBLIC	store_fw_noswap
PUBLIC	autoload_init
PUBLIC	autoload_mount_first
PUBLIC	autoload_mount_next
PUBLIC	autoload_close
PUBLIC	autoload_global_parms
PUBLIC	autoload_clean_entry
PUBLIC	autoload_tape_entry
PUBLIC	autoload_mount_tape
PUBLIC	autoload_wait_for_tapemount_thread
PUBLIC	gettapetype
PUBLIC	gettapetype_byname
PUBLIC	gettapetype_bydata
PUBLIC	mountnewtape
PUBLIC	GetDisplayMsg
PUBLIC	IsAtLoadPoint
PUBLIC	ReqAutoMount
PUBLIC	UpdateDisplay
PUBLIC	hdl_check_depends_ep
PUBLIC	hdl_define_devtypes_ep
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_toupper:PROC
EXTRN	__imp__errno:PROC
EXTRN	strchr:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp__strnicmp:PROC
EXTRN	__imp_strncpy:PROC
EXTRN	__imp_strdup:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_calloc:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_realloc:PROC
EXTRN	_byteswap_ushort:PROC
EXTRN	_byteswap_ulong:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_fgets:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_try_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_parse_args:PROC
EXTRN	__imp_sleep:PROC
EXTRN	__imp_sched_yield:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_fclose:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_w32_basename:PROC
EXTRN	__imp_device_attention:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	update_status_scsitape:PROC
EXTRN	int_scsi_status_update:PROC
EXTRN	int_scsi_status_mounted:PROC
EXTRN	__imp_parser:PROC
EXTRN	build_senseX:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
$SG170185 DB	01H DUP (?)
$SG170187 DB	01H DUP (?)
$SG170208 DB	01H DUP (?)
$SG170210 DB	01H DUP (?)
$SG170212 DB	01H DUP (?)
$SG170214 DB	01H DUP (?)
$SG170216 DB	01H DUP (?)
$SG170218 DB	01H DUP (?)
$SG170220 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
$pdata$tapedev_init_handler DD imagerel tapedev_init_handler
	DD	imagerel tapedev_init_handler+2857
	DD	imagerel $unwind$tapedev_init_handler
$pdata$tapedev_close_device DD imagerel tapedev_close_device
	DD	imagerel tapedev_close_device+277
	DD	imagerel $unwind$tapedev_close_device
$pdata$tapedev_query_device DD imagerel tapedev_query_device
	DD	imagerel tapedev_query_device+2685
	DD	imagerel $unwind$tapedev_query_device
$pdata$autoload_init DD imagerel $LN13
	DD	imagerel $LN13+577
	DD	imagerel $unwind$autoload_init
$pdata$autoload_mount_first DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$autoload_mount_first
$pdata$autoload_mount_next DD imagerel $LN4
	DD	imagerel $LN4+100
	DD	imagerel $unwind$autoload_mount_next
$pdata$autoload_close DD imagerel $LN11
	DD	imagerel $LN11+305
	DD	imagerel $unwind$autoload_close
$pdata$autoload_global_parms DD imagerel $LN9
	DD	imagerel $LN9+352
	DD	imagerel $unwind$autoload_global_parms
$pdata$autoload_clean_entry DD imagerel $LN7
	DD	imagerel $LN7+268
	DD	imagerel $unwind$autoload_clean_entry
$pdata$autoload_tape_entry DD imagerel $LN15
	DD	imagerel $LN15+651
	DD	imagerel $unwind$autoload_tape_entry
$pdata$autoload_mount_tape DD imagerel $LN16
	DD	imagerel $LN16+518
	DD	imagerel $unwind$autoload_mount_tape
$pdata$autoload_wait_for_tapemount_thread DD imagerel $LN12
	DD	imagerel $LN12+245
	DD	imagerel $unwind$autoload_wait_for_tapemount_thread
$pdata$gettapetype DD imagerel $LN43
	DD	imagerel $LN43+1503
	DD	imagerel $unwind$gettapetype
$pdata$gettapetype_byname DD imagerel $LN11
	DD	imagerel $LN11+652
	DD	imagerel $unwind$gettapetype_byname
$pdata$gettapetype_bydata DD imagerel $LN12
	DD	imagerel $LN12+426
	DD	imagerel $unwind$gettapetype_bydata
$pdata$mountnewtape DD imagerel $LN542
	DD	imagerel $LN542+19664
	DD	imagerel $unwind$mountnewtape
$pdata$GetDisplayMsg DD imagerel $LN45
	DD	imagerel $LN45+1680
	DD	imagerel $unwind$GetDisplayMsg
$pdata$IsAtLoadPoint DD imagerel $LN19
	DD	imagerel $LN19+322
	DD	imagerel $unwind$IsAtLoadPoint
$pdata$ReqAutoMount DD imagerel $LN87
	DD	imagerel $LN87+2698
	DD	imagerel $unwind$ReqAutoMount
$pdata$UpdateDisplay DD imagerel $LN24
	DD	imagerel $LN24+796
	DD	imagerel $unwind$UpdateDisplay
$pdata$write_READONLY5 DD imagerel $LN9
	DD	imagerel $LN9+72
	DD	imagerel $unwind$write_READONLY5
$pdata$is_tapeloaded_filename DD imagerel $LN11
	DD	imagerel $LN11+88
	DD	imagerel $unwind$is_tapeloaded_filename
$pdata$write_READONLY DD imagerel $LN3
	DD	imagerel $LN3+55
	DD	imagerel $unwind$write_READONLY
$pdata$no_operation DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$no_operation
$pdata$readblkid_virtual DD imagerel $LN7
	DD	imagerel $LN7+320
	DD	imagerel $unwind$readblkid_virtual
$pdata$locateblk_virtual DD imagerel $LN19
	DD	imagerel $LN19+581
	DD	imagerel $unwind$locateblk_virtual
$pdata$generic_tmhcall DD imagerel $LN8
	DD	imagerel $LN8+94
	DD	imagerel $unwind$generic_tmhcall
$pdata$hdl_check_depends_ep DD imagerel $LN15
	DD	imagerel $LN15+152
	DD	imagerel $unwind$hdl_check_depends_ep
$pdata$hdl_define_devtypes_ep DD imagerel $LN3
	DD	imagerel $LN3+212
	DD	imagerel $unwind$hdl_define_devtypes_ep
$pdata$tape_read_configuration_data DD imagerel tape_read_configuration_data
	DD	imagerel tape_read_configuration_data+550
	DD	imagerel $unwind$tape_read_configuration_data
pdata	ENDS
_DATA	SEGMENT
	ORG $+7
$SG169273 DB	'SDL 4.60', 00H
	ORG $+3
$SG169277 DB	'DEVBLK', 00H
	ORG $+1
$SG169337 DB	0f4H, 0f8H, 00H
	ORG $+1
$SG169274 DB	'HERCULES', 00H
	ORG $+3
$SG169280 DB	'SYSBLK', 00H
	ORG $+1
$SG169338 DB	0f4H, 0f8H, 00H
	ORG $+1
$SG169276 DB	'SDL 4.00', 00H
	ORG $+3
$SG169339 DB	0c4H, 0f3H, 0f1H, 00H
$SG169279 DB	'SDL 4.2', 00H
$SG169285 DB	'3410', 00H
	ORG $+3
$SG169286 DB	'3411', 00H
	ORG $+3
$SG169287 DB	'3420', 00H
	ORG $+3
$SG169288 DB	'3422', 00H
	ORG $+3
$SG169289 DB	'3430', 00H
	ORG $+3
$SG169290 DB	'3480', 00H
	ORG $+3
$SG169291 DB	'3490', 00H
	ORG $+3
$SG169292 DB	'3590', 00H
	ORG $+3
$SG169293 DB	'8809', 00H
	ORG $+3
$SG169294 DB	'9347', 00H
	ORG $+3
$SG169295 DB	'9348', 00H
	ORG $+3
$SG169340 DB	0c4H, 0f3H, 0f1H, 00H
$SG169344 DB	0f5H, 0f9H, 00H
	ORG $+1
$SG169345 DB	0f5H, 0f9H, 00H
	ORG $+1
$SG169346 DB	0c2H, 0f1H, 0c1H, 00H
$SG169347 DB	0c1H, 0f5H, 0f0H, 00H
$SG169383 DB	'TAPE', 00H
	ORG $+3
$SG169385 DB	'*', 00H
	ORG $+2
$SG169388 DB	'tapedev_init_handler', 00H
	ORG $+3
$SG169389 DB	'tapedev.c', 00H
	ORG $+6
$SG169390 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169392 DB	'tapedev_init_handler', 00H
	ORG $+3
$SG169393 DB	'tapedev.c', 00H
	ORG $+6
$SG169394 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169397 DB	'E', 00H
	ORG $+2
$SG169402 DB	'%hx', 00H
$SG169398 DB	'HHC02243%s %1d:%04X reinit rejected; drive not empty', 0aH
	DB	00H
	ORG $+2
$SG169399 DB	'tapedev_init_handler', 00H
	ORG $+3
$SG169400 DB	'tapedev.c', 00H
	ORG $+2
$SG169404 DB	'E', 00H
	ORG $+2
$SG169405 DB	'HHC00225%s Unsupported tape device type %04X specified', 0aH
	DB	00H
$SG169406 DB	'tapedev_init_handler', 00H
	ORG $+3
$SG169407 DB	'tapedev.c', 00H
	ORG $+2
$SG169412 DB	'@', 0faH, 00H, 0a0H, 00H
	ORG $+3
$SG169413 DB	'As', 00H, 04H, 00H
	ORG $+3
$SG169414 DB	'B>', 00H, '`', 00H
	ORG $+3
$SG169486 DB	'/dev/', 00H
	ORG $+2
$SG169489 DB	'st', 00H
	ORG $+1
$SG169422 DB	'+++ NOT calling device_attention( 0x%04.4X, CSW_DE )', 0aH
	DB	00H
	ORG $+2
$SG169424 DB	'+++ NOT calling device_attention( 0x%04.4X, CSW_DE )', 0aH
	DB	00H
	ORG $+2
$SG169425 DB	'+++ CALLING device_attention( 0x%04.4X, CSW_DE )', 0aH, 00H
	ORG $+2
$SG169520 DB	'*', 00H
	ORG $+2
$SG169427 DB	'+++ CALLING device_attention( 0x%04.4X, CSW_DE )', 0aH, 00H
	ORG $+2
$SG169525 DB	'*', 00H
	ORG $+2
$SG169428 DB	'tapedev.c:874', 00H
	ORG $+2
$SG169429 DB	'tapedev.c:878', 00H
	ORG $+2
$SG169440 DB	'tapedev_close_device', 00H
	ORG $+3
$SG169441 DB	'tapedev.c', 00H
	ORG $+6
$SG169444 DB	'tapedev_close_device', 00H
	ORG $+3
$SG169442 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169445 DB	'tapedev.c', 00H
	ORG $+2
$SG169478 DB	'.aws', 00H
	ORG $+7
$SG169446 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169480 DB	'.het', 00H
	ORG $+3
$SG169482 DB	'.tdf', 00H
	ORG $+3
$SG169484 DB	'.fkt', 00H
	ORG $+3
$SG169491 DB	'\\.\', 00H
	ORG $+3
$SG169502 DB	'@TDF', 00H
	ORG $+3
$SG169526 DB	'AWS', 00H
$SG169527 DB	'OMA', 00H
$SG169528 DB	'SCSI', 00H
	ORG $+3
$SG169529 DB	'HET', 00H
$SG169530 DB	'FAKE', 00H
	ORG $+3
$SG169531 DB	'DWTVF', 00H
	ORG $+2
$SG169533 DB	'W', 00H
	ORG $+2
$SG169532 DB	'UNKNOWN', 00H
$SG169534 DB	'HHC00220%s %1d:%04X Tape file %s, type %s: format type i'
	DB	's not determinable, presumed %s', 0aH, 00H
	ORG $+3
$SG169538 DB	'*', 00H
	ORG $+2
$SG169535 DB	'gettapetype', 00H
$SG169539 DB	'AWS', 00H
$SG169536 DB	'tapedev.c', 00H
	ORG $+2
$SG169540 DB	'OMA', 00H
$SG169541 DB	'SCSI', 00H
	ORG $+3
$SG169542 DB	'HET', 00H
$SG169543 DB	'FAKE', 00H
	ORG $+3
$SG169544 DB	'DWTVF', 00H
	ORG $+2
$SG169546 DB	'I', 00H
	ORG $+2
$SG169545 DB	'UNKNOWN', 00H
$SG169547 DB	'HHC00221%s %1d:%04X Tape file %s, type %s: format type %'
	DB	's', 0aH, 00H
	ORG $+1
$SG169702 DB	'*', 00H
	ORG $+2
$SG169548 DB	'gettapetype', 00H
$SG169743 DB	'AWS', 00H
$SG169549 DB	'tapedev.c', 00H
	ORG $+2
$SG169744 DB	'OMA', 00H
$SG169695 DB	'tapedev.c:1337', 00H
	ORG $+1
$SG169697 DB	'tapedev.c:1342', 00H
	ORG $+1
$SG169704 DB	'mountnewtape', 00H
	ORG $+3
$SG169705 DB	'tapedev.c', 00H
	ORG $+6
$SG169708 DB	'mountnewtape', 00H
	ORG $+3
$SG169739 DB	'not valid for %s', 00H
	ORG $+7
$SG169706 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169709 DB	'tapedev.c', 00H
	ORG $+6
$SG169713 DB	'mountnewtape', 00H
	ORG $+3
$SG169745 DB	'SCSI', 00H
	ORG $+3
$SG169710 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169714 DB	'tapedev.c', 00H
	ORG $+6
$SG169717 DB	'mountnewtape', 00H
	ORG $+3
$SG169746 DB	'HET', 00H
	ORG $+4
$SG169715 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169718 DB	'tapedev.c', 00H
	ORG $+6
$SG169722 DB	'mountnewtape', 00H
	ORG $+3
$SG169747 DB	'FAKE', 00H
	ORG $+3
$SG169719 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169723 DB	'tapedev.c', 00H
	ORG $+6
$SG169726 DB	'mountnewtape', 00H
	ORG $+3
$SG169748 DB	'DWTVF', 00H
	ORG $+2
$SG169724 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169727 DB	'tapedev.c', 00H
	ORG $+6
$SG169731 DB	'mountnewtape', 00H
	ORG $+3
$SG169749 DB	'UNKNOWN', 00H
$SG169728 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169732 DB	'tapedev.c', 00H
	ORG $+6
$SG169735 DB	'mountnewtape', 00H
	ORG $+3
$SG169750 DB	'E', 00H
	ORG $+6
$SG169733 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169736 DB	'tapedev.c', 00H
	ORG $+6
$SG169742 DB	'unrecognized', 00H
	ORG $+3
$SG169758 DB	'AWS', 00H
	ORG $+4
$SG169737 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG169759 DB	'OMA', 00H
	ORG $+4
$SG169751 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169761 DB	'HET', 00H
$SG169752 DB	'mountnewtape', 00H
	ORG $+3
$SG169753 DB	'tapedev.c', 00H
	ORG $+2
$SG169760 DB	'SCSI', 00H
	ORG $+3
$SG169762 DB	'FAKE', 00H
	ORG $+3
$SG169763 DB	'DWTVF', 00H
	ORG $+2
$SG169765 DB	'E', 00H
	ORG $+2
$SG169764 DB	'UNKNOWN', 00H
$SG169773 DB	'AWS', 00H
	ORG $+4
$SG169766 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169774 DB	'OMA', 00H
$SG169767 DB	'mountnewtape', 00H
	ORG $+3
$SG169768 DB	'tapedev.c', 00H
	ORG $+2
$SG169775 DB	'SCSI', 00H
	ORG $+3
$SG169776 DB	'HET', 00H
$SG169777 DB	'FAKE', 00H
	ORG $+3
$SG169778 DB	'DWTVF', 00H
	ORG $+2
$SG169779 DB	'UNKNOWN', 00H
$SG169780 DB	'E', 00H
	ORG $+6
$SG169781 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169787 DB	'AWS', 00H
$SG169782 DB	'mountnewtape', 00H
	ORG $+3
$SG169783 DB	'tapedev.c', 00H
	ORG $+2
$SG169788 DB	'OMA', 00H
$SG169789 DB	'SCSI', 00H
	ORG $+3
$SG169790 DB	'HET', 00H
$SG169791 DB	'FAKE', 00H
	ORG $+3
$SG169792 DB	'DWTVF', 00H
	ORG $+2
$SG169794 DB	'E', 00H
	ORG $+2
$SG169793 DB	'UNKNOWN', 00H
$SG169795 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169801 DB	'AWS', 00H
$SG169796 DB	'mountnewtape', 00H
	ORG $+3
$SG169797 DB	'tapedev.c', 00H
	ORG $+2
$SG169802 DB	'OMA', 00H
$SG169800 DB	'method out of range', 00H
$SG169803 DB	'SCSI', 00H
	ORG $+3
$SG169804 DB	'HET', 00H
$SG169805 DB	'FAKE', 00H
	ORG $+3
$SG169806 DB	'DWTVF', 00H
	ORG $+2
$SG169807 DB	'UNKNOWN', 00H
$SG169808 DB	'E', 00H
	ORG $+6
$SG169810 DB	'mountnewtape', 00H
	ORG $+3
$SG169815 DB	'AWS', 00H
	ORG $+4
$SG169809 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169816 DB	'OMA', 00H
$SG169811 DB	'tapedev.c', 00H
	ORG $+2
$SG169817 DB	'SCSI', 00H
	ORG $+3
$SG169818 DB	'HET', 00H
$SG169819 DB	'FAKE', 00H
	ORG $+3
$SG169820 DB	'DWTVF', 00H
	ORG $+2
$SG169821 DB	'UNKNOWN', 00H
$SG169822 DB	'E', 00H
	ORG $+6
$SG169823 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169829 DB	'AWS', 00H
$SG169824 DB	'mountnewtape', 00H
	ORG $+3
$SG169825 DB	'tapedev.c', 00H
	ORG $+2
$SG169830 DB	'OMA', 00H
$SG169828 DB	'level out of range', 00H
	ORG $+1
$SG169831 DB	'SCSI', 00H
	ORG $+3
$SG169832 DB	'HET', 00H
$SG169833 DB	'FAKE', 00H
	ORG $+3
$SG169834 DB	'DWTVF', 00H
	ORG $+2
$SG169835 DB	'UNKNOWN', 00H
$SG169836 DB	'E', 00H
	ORG $+6
$SG169838 DB	'mountnewtape', 00H
	ORG $+3
$SG169843 DB	'AWS', 00H
	ORG $+4
$SG169837 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169844 DB	'OMA', 00H
$SG169839 DB	'tapedev.c', 00H
	ORG $+2
$SG169845 DB	'SCSI', 00H
	ORG $+3
$SG169846 DB	'HET', 00H
$SG169847 DB	'FAKE', 00H
	ORG $+3
$SG169848 DB	'DWTVF', 00H
	ORG $+2
$SG169849 DB	'UNKNOWN', 00H
$SG169850 DB	'E', 00H
	ORG $+6
$SG169851 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169857 DB	'AWS', 00H
$SG169852 DB	'mountnewtape', 00H
	ORG $+3
$SG169853 DB	'tapedev.c', 00H
	ORG $+2
$SG169858 DB	'OMA', 00H
$SG169856 DB	'chunksize out of range', 00H
	ORG $+1
$SG169859 DB	'SCSI', 00H
	ORG $+3
$SG169860 DB	'HET', 00H
$SG169861 DB	'FAKE', 00H
	ORG $+3
$SG169862 DB	'DWTVF', 00H
	ORG $+2
$SG169864 DB	'E', 00H
	ORG $+2
$SG169863 DB	'UNKNOWN', 00H
$SG169871 DB	'AWS', 00H
	ORG $+4
$SG169865 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169872 DB	'OMA', 00H
$SG169866 DB	'mountnewtape', 00H
	ORG $+3
$SG169867 DB	'tapedev.c', 00H
	ORG $+2
$SG169873 DB	'SCSI', 00H
	ORG $+3
$SG169874 DB	'HET', 00H
$SG169875 DB	'FAKE', 00H
	ORG $+3
$SG169876 DB	'DWTVF', 00H
	ORG $+2
$SG169877 DB	'UNKNOWN', 00H
$SG169878 DB	'E', 00H
	ORG $+6
$SG169879 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169887 DB	'E', 00H
	ORG $+2
$SG169880 DB	'mountnewtape', 00H
	ORG $+3
$SG169881 DB	'tapedev.c', 00H
	ORG $+2
$SG169899 DB	'E', 00H
	ORG $+2
$SG169882 DB	'%llu%c%c', 00H
	ORG $+3
$SG169906 DB	'AWS', 00H
$SG169886 DB	'maxsize', 00H
$SG169888 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG169889 DB	'mountnewtape', 00H
	ORG $+3
$SG169890 DB	'tapedev.c', 00H
	ORG $+2
$SG169907 DB	'OMA', 00H
$SG169898 DB	'maxsize', 00H
$SG169900 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG169901 DB	'mountnewtape', 00H
	ORG $+3
$SG169902 DB	'tapedev.c', 00H
	ORG $+2
$SG169908 DB	'SCSI', 00H
	ORG $+3
$SG169909 DB	'HET', 00H
$SG169910 DB	'FAKE', 00H
	ORG $+3
$SG169911 DB	'DWTVF', 00H
	ORG $+2
$SG169912 DB	'UNKNOWN', 00H
$SG169913 DB	'E', 00H
	ORG $+6
$SG169914 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169919 DB	'AWS', 00H
$SG169915 DB	'mountnewtape', 00H
	ORG $+3
$SG169916 DB	'tapedev.c', 00H
	ORG $+2
$SG169920 DB	'OMA', 00H
$SG169921 DB	'SCSI', 00H
	ORG $+3
$SG169922 DB	'HET', 00H
$SG169923 DB	'FAKE', 00H
	ORG $+3
$SG169924 DB	'DWTVF', 00H
	ORG $+2
$SG169926 DB	'E', 00H
	ORG $+2
$SG169925 DB	'UNKNOWN', 00H
$SG169927 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169936 DB	'E', 00H
	ORG $+2
$SG169928 DB	'mountnewtape', 00H
	ORG $+3
$SG169929 DB	'tapedev.c', 00H
	ORG $+2
$SG169948 DB	'E', 00H
	ORG $+2
$SG169931 DB	'%llu%c%c', 00H
	ORG $+3
$SG169955 DB	'AWS', 00H
$SG169935 DB	'eotmargin', 00H
	ORG $+2
$SG169956 DB	'OMA', 00H
$SG169937 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG169938 DB	'mountnewtape', 00H
	ORG $+3
$SG169939 DB	'tapedev.c', 00H
	ORG $+2
$SG169958 DB	'HET', 00H
$SG169947 DB	'eotmargin', 00H
	ORG $+2
$SG169962 DB	'E', 00H
	ORG $+2
$SG169949 DB	'HHC01451%s Invalid value %s specified for %s', 0aH, 00H
	ORG $+2
$SG169950 DB	'mountnewtape', 00H
	ORG $+3
$SG169951 DB	'tapedev.c', 00H
	ORG $+2
$SG169957 DB	'SCSI', 00H
	ORG $+3
$SG169959 DB	'FAKE', 00H
	ORG $+3
$SG169960 DB	'DWTVF', 00H
	ORG $+2
$SG169968 DB	'AWS', 00H
$SG169961 DB	'UNKNOWN', 00H
$SG169969 DB	'OMA', 00H
	ORG $+4
$SG169963 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169971 DB	'HET', 00H
$SG169964 DB	'mountnewtape', 00H
	ORG $+3
$SG169965 DB	'tapedev.c', 00H
	ORG $+2
$SG169970 DB	'SCSI', 00H
	ORG $+3
$SG169972 DB	'FAKE', 00H
	ORG $+3
$SG169973 DB	'DWTVF', 00H
	ORG $+2
$SG169975 DB	'E', 00H
	ORG $+2
$SG169974 DB	'UNKNOWN', 00H
$SG169982 DB	'AWS', 00H
	ORG $+4
$SG169976 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169983 DB	'OMA', 00H
$SG169977 DB	'mountnewtape', 00H
	ORG $+3
$SG169978 DB	'tapedev.c', 00H
	ORG $+2
$SG169984 DB	'SCSI', 00H
	ORG $+3
$SG169985 DB	'HET', 00H
$SG169986 DB	'FAKE', 00H
	ORG $+3
$SG169987 DB	'DWTVF', 00H
	ORG $+2
$SG169988 DB	'UNKNOWN', 00H
$SG169989 DB	'E', 00H
	ORG $+6
$SG169990 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG169996 DB	'AWS', 00H
$SG169991 DB	'mountnewtape', 00H
	ORG $+3
$SG169992 DB	'tapedev.c', 00H
	ORG $+2
$SG169997 DB	'OMA', 00H
$SG169998 DB	'SCSI', 00H
	ORG $+3
$SG169999 DB	'HET', 00H
$SG170000 DB	'FAKE', 00H
	ORG $+3
$SG170001 DB	'DWTVF', 00H
	ORG $+2
$SG170003 DB	'E', 00H
	ORG $+2
$SG170002 DB	'UNKNOWN', 00H
$SG170004 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG170009 DB	'AWS', 00H
$SG170005 DB	'mountnewtape', 00H
	ORG $+3
$SG170006 DB	'tapedev.c', 00H
	ORG $+2
$SG170010 DB	'OMA', 00H
$SG170011 DB	'SCSI', 00H
	ORG $+3
$SG170012 DB	'HET', 00H
$SG170013 DB	'FAKE', 00H
	ORG $+3
$SG170014 DB	'DWTVF', 00H
	ORG $+2
$SG170016 DB	'E', 00H
	ORG $+2
$SG170015 DB	'UNKNOWN', 00H
$SG170017 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG170022 DB	'AWS', 00H
$SG170018 DB	'mountnewtape', 00H
	ORG $+3
$SG170019 DB	'tapedev.c', 00H
	ORG $+2
$SG170023 DB	'OMA', 00H
$SG170024 DB	'SCSI', 00H
	ORG $+3
$SG170025 DB	'HET', 00H
$SG170026 DB	'FAKE', 00H
	ORG $+3
$SG170027 DB	'DWTVF', 00H
	ORG $+2
$SG170029 DB	'E', 00H
	ORG $+2
$SG170028 DB	'UNKNOWN', 00H
$SG170030 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG170036 DB	'AWS', 00H
$SG170031 DB	'mountnewtape', 00H
	ORG $+3
$SG170032 DB	'tapedev.c', 00H
	ORG $+2
$SG170037 DB	'OMA', 00H
$SG170038 DB	'SCSI', 00H
	ORG $+3
$SG170039 DB	'HET', 00H
$SG170040 DB	'FAKE', 00H
	ORG $+3
$SG170041 DB	'DWTVF', 00H
	ORG $+2
$SG170043 DB	'E', 00H
	ORG $+2
$SG170042 DB	'UNKNOWN', 00H
$SG170044 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG170049 DB	'AWS', 00H
$SG170045 DB	'mountnewtape', 00H
	ORG $+3
$SG170046 DB	'tapedev.c', 00H
	ORG $+2
$SG170050 DB	'OMA', 00H
$SG170051 DB	'SCSI', 00H
	ORG $+3
$SG170052 DB	'HET', 00H
$SG170053 DB	'FAKE', 00H
	ORG $+3
$SG170054 DB	'DWTVF', 00H
	ORG $+2
$SG170056 DB	'E', 00H
	ORG $+2
$SG170055 DB	'UNKNOWN', 00H
$SG170057 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG170062 DB	'AWS', 00H
$SG170058 DB	'mountnewtape', 00H
	ORG $+3
$SG170059 DB	'tapedev.c', 00H
	ORG $+2
$SG170063 DB	'OMA', 00H
$SG170064 DB	'SCSI', 00H
	ORG $+3
$SG170065 DB	'HET', 00H
$SG170066 DB	'FAKE', 00H
	ORG $+3
$SG170067 DB	'DWTVF', 00H
	ORG $+2
$SG170069 DB	'E', 00H
	ORG $+2
$SG170068 DB	'UNKNOWN', 00H
$SG170070 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG170075 DB	'AWS', 00H
$SG170071 DB	'mountnewtape', 00H
	ORG $+3
$SG170072 DB	'tapedev.c', 00H
	ORG $+2
$SG170076 DB	'OMA', 00H
$SG170077 DB	'SCSI', 00H
	ORG $+3
$SG170078 DB	'HET', 00H
$SG170079 DB	'FAKE', 00H
	ORG $+3
$SG170080 DB	'DWTVF', 00H
	ORG $+2
$SG170082 DB	'E', 00H
	ORG $+2
$SG170081 DB	'UNKNOWN', 00H
$SG170083 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG170088 DB	'AWS', 00H
$SG170084 DB	'mountnewtape', 00H
	ORG $+3
$SG170085 DB	'tapedev.c', 00H
	ORG $+2
$SG170089 DB	'OMA', 00H
$SG170087 DB	'parse error', 00H
$SG170090 DB	'SCSI', 00H
	ORG $+3
$SG170091 DB	'HET', 00H
$SG170092 DB	'FAKE', 00H
	ORG $+3
$SG170093 DB	'DWTVF', 00H
	ORG $+2
$SG170094 DB	'UNKNOWN', 00H
$SG170095 DB	'E', 00H
	ORG $+6
$SG170096 DB	'HHC00223%s %1d:%04X Tape file %s, type %s: option %s rej'
	DB	'ected: %s', 0aH, 00H
	ORG $+1
$SG170101 DB	'AWS', 00H
$SG170097 DB	'mountnewtape', 00H
	ORG $+3
$SG170098 DB	'tapedev.c', 00H
	ORG $+2
$SG170102 DB	'OMA', 00H
$SG170103 DB	'SCSI', 00H
	ORG $+3
$SG170104 DB	'HET', 00H
$SG170105 DB	'FAKE', 00H
	ORG $+3
$SG170106 DB	'DWTVF', 00H
	ORG $+2
$SG170108 DB	'I', 00H
	ORG $+2
$SG170107 DB	'UNKNOWN', 00H
$SG170109 DB	'HHC00222%s %1d:%04X Tape file %s, type %s: option %s acc'
	DB	'epted', 0aH, 00H
	ORG $+1
$SG170110 DB	'mountnewtape', 00H
	ORG $+3
$SG170111 DB	'tapedev.c', 00H
	ORG $+2
$SG170119 DB	'*', 00H
	ORG $+2
$SG170114 DB	'tapedev.c:1739', 00H
	ORG $+1
$SG170124 DB	'tapedev.c:1774', 00H
	ORG $+1
$SG170153 DB	'TAPE', 00H
	ORG $+3
$SG170159 DB	'.', 00H
	ORG $+2
$SG170161 DB	'"', 00H
	ORG $+2
$SG170163 DB	'"', 00H
	ORG $+2
$SG170175 DB	'*', 00H
	ORG $+2
$SG170165 DB	' noautomount', 00H
	ORG $+3
$SG170169 DB	' maxsize=%llu%c', 00H
$SG170172 DB	' eotmargin=%llu%c', 00H
	ORG $+2
$SG170193 DB	'*BOT* ', 00H
	ORG $+1
$SG170211 DB	' ro', 00H
$SG170180 DB	' --blkid-22', 00H
$SG170219 DB	' ro', 00H
$SG170182 DB	' --blkid-32', 00H
$SG170232 DB	'AWS', 00H
$SG170184 DB	' --no-erg', 00H
	ORG $+2
$SG170233 DB	'OMA', 00H
$SG170186 DB	', Display: ', 00H
$SG170235 DB	'HET', 00H
$SG170188 DB	'%s%s%s IO[%llu]%s%s deonirq=%c', 00H
	ORG $+1
$SG170191 DB	'[%d:%08llX] ', 00H
	ORG $+3
$SG170196 DB	'*FP* ', 00H
	ORG $+2
$SG170200 DB	' --blkid-22', 00H
$SG170239 DB	'I', 00H
	ORG $+2
$SG170202 DB	' --blkid-32', 00H
$SG170278 DB	'*', 00H
	ORG $+2
$SG170204 DB	' --no-erg', 00H
	ORG $+2
$SG170310 DB	'SL', 00H
	ORG $+1
$SG170209 DB	'Display: ', 00H
	ORG $+2
$SG170311 DB	'UL', 00H
	ORG $+1
$SG170213 DB	'%s%s %s%s%s IO[%llu]', 00H
	ORG $+3
$SG170215 DB	', Display: ', 00H
$SG170315 DB	'AWS', 00H
$SG170217 DB	'closed; ', 00H
	ORG $+3
$SG170237 DB	'DWTVF', 00H
	ORG $+2
$SG170316 DB	'OMA', 00H
$SG170221 DB	'%s%s (%sNOTAPE)%s%s IO[%llu]', 00H
	ORG $+3
$SG170234 DB	'SCSI', 00H
	ORG $+3
$SG170236 DB	'FAKE', 00H
	ORG $+3
$SG170238 DB	'UNKNOWN', 00H
$SG170240 DB	'HHC00224%s %1d:%04X Tape file %s, type %s: display %s', 0aH
	DB	00H
	ORG $+1
$SG170241 DB	'UpdateDisplay', 00H
	ORG $+2
$SG170242 DB	'tapedev.c', 00H
	ORG $+2
$SG170318 DB	'HET', 00H
$SG170275 DB	'                  ', 00H
	ORG $+1
$SG170322 DB	'I', 00H
	ORG $+2
$SG170282 DB	'ReqAutoMount', 00H
	ORG $+3
$SG170283 DB	'tapedev.c', 00H
	ORG $+6
$SG170286 DB	'ReqAutoMount', 00H
	ORG $+3
$SG170317 DB	'SCSI', 00H
	ORG $+3
$SG170284 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG170287 DB	'tapedev.c', 00H
	ORG $+6
$SG170291 DB	'ReqAutoMount', 00H
	ORG $+3
$SG170319 DB	'FAKE', 00H
	ORG $+3
$SG170288 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG170292 DB	'tapedev.c', 00H
	ORG $+6
$SG170295 DB	'ReqAutoMount', 00H
	ORG $+3
$SG170320 DB	'DWTVF', 00H
	ORG $+2
$SG170293 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG170296 DB	'tapedev.c', 00H
	ORG $+6
$SG170321 DB	'UNKNOWN', 00H
$SG170297 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG170314 DB	'<scratch>', 00H
	ORG $+6
$SG170324 DB	'ReqAutoMount', 00H
	ORG $+3
$SG170328 DB	'AWS', 00H
	ORG $+4
$SG170323 DB	'HHC00226%s %1d:%04X Tape file %s, type %s: %s tape volum'
	DB	'e %s being auto unloaded', 0aH, 00H
	ORG $+2
$SG170329 DB	'OMA', 00H
$SG170325 DB	'tapedev.c', 00H
	ORG $+2
$SG170331 DB	'HET', 00H
$SG170327 DB	'<scratch>', 00H
	ORG $+2
$SG170330 DB	'SCSI', 00H
	ORG $+3
$SG170332 DB	'FAKE', 00H
	ORG $+3
$SG170333 DB	'DWTVF', 00H
	ORG $+2
$SG170335 DB	'I', 00H
	ORG $+2
$SG170334 DB	'UNKNOWN', 00H
$SG170368 DB	'"', 00H
	ORG $+6
$SG170336 DB	'HHC00227%s %1d:%04X Tape file %s, type %s: %s tape volum'
	DB	'e %s being auto loaded', 0aH, 00H
$SG170337 DB	'ReqAutoMount', 00H
	ORG $+3
$SG170338 DB	'tapedev.c', 00H
	ORG $+2
$SG170374 DB	'"', 00H
	ORG $+2
$SG170371 DB	'        ', 00H
	ORG $+3
$SG170373 DB	'" / "', 00H
	ORG $+2
$SG170378 DB	'"', 00H
	ORG $+2
$SG170372 DB	'        ', 00H
	ORG $+3
$SG170383 DB	'"', 00H
	ORG $+2
$SG170375 DB	' (alternating)', 00H
	ORG $+1
$SG170380 DB	' (blinking)', 00H
$SG170411 DB	'"', 00H
	ORG $+2
$SG170382 DB	' (AUTOLOADER)', 00H
	ORG $+2
$SG170388 DB	'        ', 00H
	ORG $+3
$SG170414 DB	' *FP*', 00H
	ORG $+2
$SG170423 DB	'"', 00H
	ORG $+2
$SG170390 DB	'GetDisplayMsg', 00H
	ORG $+2
$SG170391 DB	'tapedev.c', 00H
	ORG $+6
$SG170392 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG170394 DB	'GetDisplayMsg', 00H
	ORG $+2
$SG170395 DB	'tapedev.c', 00H
	ORG $+6
$SG170402 DB	'GetDisplayMsg', 00H
	ORG $+2
$SG170463 DB	'HHC00228%s Tape autoloader: file request fn %s', 0aH, 00H
$SG170444 DB	'*', 00H
	ORG $+6
$SG170396 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG170400 DB	' NT RDY ', 00H
	ORG $+3
$SG170462 DB	'I', 00H
	ORG $+2
$SG170403 DB	'tapedev.c', 00H
	ORG $+6
$SG170406 DB	'GetDisplayMsg', 00H
	ORG $+2
$SG170527 DB	'HHC00229%s Tape autoloader: adding %s value %s', 0aH, 00H
$SG170467 DB	'r', 00H
	ORG $+6
$SG170404 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG170407 DB	'tapedev.c', 00H
	ORG $+6
$SG170464 DB	'autoload_init', 00H
	ORG $+2
$SG170528 DB	'autoload_global_parms', 00H
	ORG $+2
$SG170408 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG170410 DB	' READY  ', 00H
	ORG $+3
$SG170472 DB	'*', 00H
	ORG $+2
$SG170416 DB	' ERASING', 00H
	ORG $+3
$SG170526 DB	'I', 00H
	ORG $+2
$SG170418 DB	'REWINDNG', 00H
	ORG $+3
$SG170554 DB	'I', 00H
	ORG $+2
$SG170420 DB	'UNLOADNG', 00H
	ORG $+3
$SG170627 DB	'*', 00H
	ORG $+2
$SG170422 DB	'*CLEAN  ', 00H
	ORG $+7
$SG170465 DB	'tapedev.c', 00H
	ORG $+6
$SG170525 DB	'global parm', 00H
	ORG $+4
$SG170529 DB	'tapedev.c', 00H
	ORG $+6
$SG170553 DB	'tape entry', 00H
	ORG $+5
$SG170555 DB	'HHC00229%s Tape autoloader: adding %s value %s', 0aH, 00H
$SG170556 DB	'autoload_tape_entry', 00H
	ORG $+4
$SG170557 DB	'tapedev.c', 00H
	ORG $+6
$SG170576 DB	'tapedev.c:2655', 00H
	ORG $+1
$SG170577 DB	'tapedev.c:2664', 00H
	ORG $+1
$SG170579 DB	'tapedev.c:2666', 00H
	ORG $+1
$SG170580 DB	'tapedev.c:2669', 00H
	ORG $+1
$SG170695 DB	'tapedev.c:2879', 00H
	ORG $+1
$SG170699 DB	'tapedev.c:2895', 00H
	ORG $+1
$SG170700 DB	'tapedev.c:2899', 00H
	ORG $+1
$SG170701 DB	'tapedev.c:2905', 00H
	ORG $+1
$SG170704 DB	'tapedev.c:2912', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tape_read_configuration_data
	DD	022H
	DD	020cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:UpdateDisplay
	DD	016H
	DD	0304H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ReqAutoMount
	DD	018H
	DD	0a70H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:GetDisplayMsg
	DD	01dH
	DD	0654H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:mountnewtape
	DD	01fH
	DD	04c51H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:gettapetype_bydata
	DD	016H
	DD	0192H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:autoload_init
	DD	025H
	DD	0229H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:tapedev_query_device
	DD	026H
	DD	0a64H
voltbl	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$tapedev_init_handler DD 031601H
	DD	0120116H
	DD	0700fH
$unwind$tapedev_close_device DD 010901H
	DD	04209H
$unwind$tapedev_query_device DD 032e19H
	DD	0b8011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	05b0H
$unwind$autoload_init DD 022d19H
	DD	0631011bH
	DD	imagerel __GSHandlerCheck
	DD	03170H
$unwind$autoload_mount_first DD 010901H
	DD	04209H
$unwind$autoload_mount_next DD 010901H
	DD	04209H
$unwind$autoload_close DD 010901H
	DD	06209H
$unwind$autoload_global_parms DD 011201H
	DD	0c212H
$unwind$autoload_clean_entry DD 010d01H
	DD	0620dH
$unwind$autoload_tape_entry DD 041701H
	DD	0110117H
	DD	0600f7010H
$unwind$autoload_mount_tape DD 010d01H
	DD	0820dH
$unwind$autoload_wait_for_tapemount_thread DD 010901H
	DD	06209H
$unwind$gettapetype DD 021101H
	DD	0210111H
$unwind$gettapetype_byname DD 010901H
	DD	06209H
$unwind$gettapetype_bydata DD 021e19H
	DD	02b010cH
	DD	imagerel __GSHandlerCheck
	DD	0140H
$unwind$mountnewtape DD 022719H
	DD	01090115H
	DD	imagerel __GSHandlerCheck
	DD	0830H
$unwind$GetDisplayMsg DD 012219H
	DD	0a213H
	DD	imagerel __GSHandlerCheck
	DD	048H
$unwind$IsAtLoadPoint DD 010901H
	DD	06209H
$unwind$ReqAutoMount DD 042019H
	DD	051010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0270H
$unwind$UpdateDisplay DD 021e19H
	DD	037010cH
	DD	imagerel __GSHandlerCheck
	DD	01a0H
$unwind$write_READONLY5 DD 011801H
	DD	04218H
$unwind$is_tapeloaded_filename DD 011301H
	DD	06213H
$unwind$write_READONLY DD 011301H
	DD	04213H
$unwind$no_operation DD 011301H
	DD	04213H
$unwind$readblkid_virtual DD 011301H
	DD	02213H
$unwind$locateblk_virtual DD 011701H
	DD	06217H
$unwind$generic_tmhcall DD 010901H
	DD	06209H
$unwind$hdl_check_depends_ep DD 010901H
	DD	06209H
$unwind$hdl_define_devtypes_ep DD 010901H
	DD	04209H
$unwind$tape_read_configuration_data DD 042a19H
	DD	0190118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0b0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
tv212 = 0
copylen$ = 4
work$ = 16
__$ArrayPad$ = 176
dev$ = 224
buffer$ = 232
bufsz$ = 240
tape_read_configuration_data PROC

; 592  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 593  :     int   copylen;
; 594  :     BYTE  work[ sizeof( cfgdata ) ];
; 595  : 
; 596  :     /* Copy prototype Configuration Data to work area */
; 597  :     memcpy( work, cfgdata, sizeof( work ));

  0002a	48 8d 44 24 10	 lea	 rax, QWORD PTR work$[rsp]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:cfgdata
  00036	48 8b f8	 mov	 rdi, rax
  00039	48 8b f1	 mov	 rsi, rcx
  0003c	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  00041	f3 a4		 rep movsb

; 598  : 
; 599  :     /* Fixup values for this particular device/type...  NOTE: we
; 600  :        only fixup the Device and Control Unit NEDs here. The Token
; 601  :        NED's type/model values come from the Device NED's values.
; 602  :     */
; 603  :     if (0x3480 == dev->devtype)

  00043	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0004b	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  0004f	3d 80 34 00 00	 cmp	 eax, 13440		; 00003480H
  00054	75 6d		 jne	 SHORT $LN2@tape_read_

; 604  :     {
; 605  :         memcpy (&work[7],  "\xF4\xF8",     2);      // '48'

  00056	b8 01 00 00 00	 mov	 eax, 1
  0005b	48 6b c0 07	 imul	 rax, rax, 7
  0005f	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR $SG169337
  00066	66 89 4c 04 10	 mov	 WORD PTR work$[rsp+rax], cx

; 606  :         memcpy (&work[39], "\xF4\xF8",     2);      // '48'

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  00074	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR $SG169338
  0007b	66 89 4c 04 10	 mov	 WORD PTR work$[rsp+rax], cx

; 607  : 
; 608  :         memcpy (&work[10], "\xC4\xF3\xF1", 3);      // 'D31'

  00080	b8 01 00 00 00	 mov	 eax, 1
  00085	48 6b c0 0a	 imul	 rax, rax, 10
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169339
  00090	48 8d 7c 04 10	 lea	 rdi, QWORD PTR work$[rsp+rax]
  00095	48 8b f1	 mov	 rsi, rcx
  00098	b9 03 00 00 00	 mov	 ecx, 3
  0009d	f3 a4		 rep movsb

; 609  :         memcpy (&work[42], "\xC4\xF3\xF1", 3);      // 'D31'

  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169340
  000af	48 8d 7c 04 10	 lea	 rdi, QWORD PTR work$[rsp+rax]
  000b4	48 8b f1	 mov	 rsi, rcx
  000b7	b9 03 00 00 00	 mov	 ecx, 3
  000bc	f3 a4		 rep movsb

; 610  :     }

  000be	e9 90 00 00 00	 jmp	 $LN3@tape_read_
$LN2@tape_read_:

; 611  :     else if (0x3490 == dev->devtype)

  000c3	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000cb	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  000cf	3d 90 34 00 00	 cmp	 eax, 13456		; 00003490H
  000d4	75 02		 jne	 SHORT $LN4@tape_read_

; 612  :     {
; 613  : //      memcpy (&work[7],  "\xF4\xF9",     2);      // '49'
; 614  : //      memcpy (&work[39], "\xF4\xF9",     2);      // '49'
; 615  : 
; 616  : //      memcpy (&work[10], "\xC3\xF1\xF0", 3);      // 'C10'
; 617  : //      memcpy (&work[42], "\xC3\xF1\xF0", 3);      // 'C10'
; 618  :     }

  000d6	eb 7b		 jmp	 SHORT $LN5@tape_read_
$LN4@tape_read_:

; 619  :     else if (0x3590 == dev->devtype)

  000d8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000e0	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  000e4	3d 90 35 00 00	 cmp	 eax, 13712		; 00003590H
  000e9	75 68		 jne	 SHORT $LN6@tape_read_

; 620  :     {
; 621  :         memcpy (&work[7],  "\xF5\xF9",     2);      // '59'

  000eb	b8 01 00 00 00	 mov	 eax, 1
  000f0	48 6b c0 07	 imul	 rax, rax, 7
  000f4	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR $SG169344
  000fb	66 89 4c 04 10	 mov	 WORD PTR work$[rsp+rax], cx

; 622  :         memcpy (&work[39], "\xF5\xF9",     2);      // '59'

  00100	b8 01 00 00 00	 mov	 eax, 1
  00105	48 6b c0 27	 imul	 rax, rax, 39		; 00000027H
  00109	0f b7 0d 00 00
	00 00		 movzx	 ecx, WORD PTR $SG169345
  00110	66 89 4c 04 10	 mov	 WORD PTR work$[rsp+rax], cx

; 623  : 
; 624  :         memcpy (&work[10], "\xC2\xF1\xC1", 3);      // 'B1A'

  00115	b8 01 00 00 00	 mov	 eax, 1
  0011a	48 6b c0 0a	 imul	 rax, rax, 10
  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169346
  00125	48 8d 7c 04 10	 lea	 rdi, QWORD PTR work$[rsp+rax]
  0012a	48 8b f1	 mov	 rsi, rcx
  0012d	b9 03 00 00 00	 mov	 ecx, 3
  00132	f3 a4		 rep movsb

; 625  :         memcpy (&work[42], "\xC1\xF5\xF0", 3);      // 'A50'

  00134	b8 01 00 00 00	 mov	 eax, 1
  00139	48 6b c0 2a	 imul	 rax, rax, 42		; 0000002aH
  0013d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169347
  00144	48 8d 7c 04 10	 lea	 rdi, QWORD PTR work$[rsp+rax]
  00149	48 8b f1	 mov	 rsi, rcx
  0014c	b9 03 00 00 00	 mov	 ecx, 3
  00151	f3 a4		 rep movsb
$LN6@tape_read_:
$LN5@tape_read_:
$LN3@tape_read_:

; 626  :     }
; 627  : 
; 628  :     memcpy (&work[100], &work[4], 9);       // (set Token NED Type/Model from Device NED)

  00153	b8 01 00 00 00	 mov	 eax, 1
  00158	48 6b c0 04	 imul	 rax, rax, 4
  0015c	b9 01 00 00 00	 mov	 ecx, 1
  00161	48 6b c9 64	 imul	 rcx, rcx, 100		; 00000064H
  00165	48 8d 7c 0c 10	 lea	 rdi, QWORD PTR work$[rsp+rcx]
  0016a	48 8d 74 04 10	 lea	 rsi, QWORD PTR work$[rsp+rax]
  0016f	b9 09 00 00 00	 mov	 ecx, 9
  00174	f3 a4		 rep movsb

; 629  : 
; 630  :     work[31] |= (dev->devnum & 0x0F);       // (set Logical Drive Address)

  00176	b8 01 00 00 00	 mov	 eax, 1
  0017b	48 6b c0 1f	 imul	 rax, rax, 31
  0017f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00187	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  0018b	83 e1 0f	 and	 ecx, 15
  0018e	0f b6 44 04 10	 movzx	 eax, BYTE PTR work$[rsp+rax]
  00193	0b c1		 or	 eax, ecx
  00195	b9 01 00 00 00	 mov	 ecx, 1
  0019a	48 6b c9 1f	 imul	 rcx, rcx, 31
  0019e	88 44 0c 10	 mov	 BYTE PTR work$[rsp+rcx], al

; 631  : 
; 632  :     if ((dev->devnum & 0x0F) > 7)

  001a2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001aa	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001ae	83 e0 0f	 and	 eax, 15
  001b1	83 f8 07	 cmp	 eax, 7
  001b4	7e 11		 jle	 SHORT $LN7@tape_read_

; 633  :         work[136] = 0x01;                   // (set Extended Information)

  001b6	b8 01 00 00 00	 mov	 eax, 1
  001bb	48 69 c0 88 00
	00 00		 imul	 rax, rax, 136		; 00000088H
  001c2	c6 44 04 10 01	 mov	 BYTE PTR work$[rsp+rax], 1
$LN7@tape_read_:

; 634  : 
; 635  :     /* Finally, copy the work area into the caller's buffer */
; 636  :     copylen = bufsz < (int) sizeof( work ) ? bufsz : (int) sizeof( work );

  001c7	81 bc 24 f0 00
	00 00 a0 00 00
	00		 cmp	 DWORD PTR bufsz$[rsp], 160 ; 000000a0H
  001d2	7d 0c		 jge	 SHORT $LN9@tape_read_
  001d4	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR bufsz$[rsp]
  001db	89 04 24	 mov	 DWORD PTR tv212[rsp], eax
  001de	eb 07		 jmp	 SHORT $LN10@tape_read_
$LN9@tape_read_:
  001e0	c7 04 24 a0 00
	00 00		 mov	 DWORD PTR tv212[rsp], 160 ; 000000a0H
$LN10@tape_read_:
  001e7	8b 04 24	 mov	 eax, DWORD PTR tv212[rsp]
  001ea	89 44 24 04	 mov	 DWORD PTR copylen$[rsp], eax

; 637  :     memcpy( buffer, work, copylen );

  001ee	48 63 44 24 04	 movsxd	 rax, DWORD PTR copylen$[rsp]
  001f3	48 8d 4c 24 10	 lea	 rcx, QWORD PTR work$[rsp]
  001f8	48 8b bc 24 e8
	00 00 00	 mov	 rdi, QWORD PTR buffer$[rsp]
  00200	48 8b f1	 mov	 rsi, rcx
  00203	48 8b c8	 mov	 rcx, rax
  00206	f3 a4		 rep movsb

; 638  : 
; 639  :     /* Return to them the number of bytes we provided */
; 640  :     return copylen;

  00208	8b 44 24 04	 mov	 eax, DWORD PTR copylen$[rsp]

; 641  : }

  0020c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00214	48 33 cc	 xor	 rcx, rsp
  00217	e8 00 00 00 00	 call	 __security_check_cookie
  0021c	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00223	5f		 pop	 rdi
  00224	5e		 pop	 rsi
  00225	c3		 ret	 0
tape_read_configuration_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
defdev$ = 48
hdl_define_devtypes_ep PROC

; 216  : HDL_DEVICE_SECTION;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 217  : {
; 218  :     HDL_DEVICE ( 3410, tape_other_devhnd );

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tape_other_devhnd
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169285
  00017	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 219  :     HDL_DEVICE ( 3411, tape_other_devhnd );

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tape_other_devhnd
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169286
  00029	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 220  :     HDL_DEVICE ( 3420, tape_other_devhnd );

  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tape_other_devhnd
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169287
  0003b	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 221  :     HDL_DEVICE ( 3422, tape_other_devhnd );

  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tape_other_devhnd
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169288
  0004d	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 222  :     HDL_DEVICE ( 3430, tape_other_devhnd );

  00051	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tape_other_devhnd
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169289
  0005f	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 223  :     HDL_DEVICE ( 3480, tape_other_devhnd );

  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tape_other_devhnd
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169290
  00071	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 224  :     HDL_DEVICE ( 3490, tape_other_devhnd );

  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tape_other_devhnd
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169291
  00083	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 225  :     HDL_DEVICE ( 3590, tape_3590_devhnd );

  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tape_3590_devhnd
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169292
  00095	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 226  :     HDL_DEVICE ( 8809, tape_other_devhnd );

  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tape_other_devhnd
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169293
  000a7	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 227  :     HDL_DEVICE ( 9347, tape_other_devhnd );

  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tape_other_devhnd
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169294
  000b9	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 228  :     HDL_DEVICE ( 9348, tape_other_devhnd );

  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:tape_other_devhnd
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169295
  000cb	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 229  : }
; 230  : END_DEVICE_SECTION

  000cf	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000d3	c3		 ret	 0
hdl_define_devtypes_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
depchk_rc$ = 32
depchk$ = 64
hdl_check_depends_ep PROC

; 206  : HDL_DEPENDENCY_SECTION;

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 0
$LN4@hdl_check_:

; 207  : {
; 208  :     HDL_DEPENDENCY ( HERCULES );

  00011	41 b8 08 00 00
	00		 mov	 r8d, 8
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169273
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169274
  00025	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  00029	85 c0		 test	 eax, eax
  0002b	74 08		 je	 SHORT $LN11@hdl_check_
  0002d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN11@hdl_check_:
  00035	33 c0		 xor	 eax, eax
  00037	85 c0		 test	 eax, eax
  00039	75 d6		 jne	 SHORT $LN4@hdl_check_
$LN7@hdl_check_:

; 209  :     HDL_DEPENDENCY ( DEVBLK   );

  0003b	41 b8 a0 1b 00
	00		 mov	 r8d, 7072		; 00001ba0H
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169276
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169277
  0004f	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN12@hdl_check_
  00057	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN12@hdl_check_:
  0005f	33 c0		 xor	 eax, eax
  00061	85 c0		 test	 eax, eax
  00063	75 d6		 jne	 SHORT $LN7@hdl_check_
$LN10@hdl_check_:

; 210  :     HDL_DEPENDENCY ( SYSBLK   );

  00065	41 b8 00 76 01
	00		 mov	 r8d, 95744		; 00017600H
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169279
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169280
  00079	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  0007d	85 c0		 test	 eax, eax
  0007f	74 08		 je	 SHORT $LN13@hdl_check_
  00081	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN13@hdl_check_:
  00089	33 c0		 xor	 eax, eax
  0008b	85 c0		 test	 eax, eax
  0008d	75 d6		 jne	 SHORT $LN10@hdl_check_

; 211  : }
; 212  : END_DEPENDENCY_SECTION

  0008f	8b 44 24 20	 mov	 eax, DWORD PTR depchk_rc$[rsp]
  00093	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00097	c3		 ret	 0
hdl_check_depends_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
tv67 = 32
pGenParms$ = 64
generic_tmhcall PROC

; 2925 : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2926 :     if (!pGenParms)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR pGenParms$[rsp], 0
  0000f	75 13		 jne	 SHORT $LN4@generic_tm

; 2927 :     {
; 2928 :         errno = EINVAL;             // (invalid arguments)

  00011	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00017	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 2929 :         return -1;                  // (return failure)

  0001d	b8 ff ff ff ff	 mov	 eax, -1
  00022	eb 35		 jmp	 SHORT $LN1@generic_tm
$LN4@generic_tm:

; 2930 :     }
; 2931 : 
; 2932 :     switch (pGenParms->action)

  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR pGenParms$[rsp]
  00029	8b 00		 mov	 eax, DWORD PTR [rax]
  0002b	89 44 24 20	 mov	 DWORD PTR tv67[rsp], eax
  0002f	83 7c 24 20 00	 cmp	 DWORD PTR tv67[rsp], 0
  00034	74 02		 je	 SHORT $LN5@generic_tm
  00036	eb 10		 jmp	 SHORT $LN6@generic_tm
$LN5@generic_tm:

; 2933 :     {
; 2934 : #if defined(OPTION_SCSI_TAPE)
; 2935 :         case GENTMH_SCSI_ACTION_UPDATE_STATUS:
; 2936 :         {
; 2937 :             return update_status_scsitape( pGenParms->dev );

  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR pGenParms$[rsp]
  0003d	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00041	e8 00 00 00 00	 call	 update_status_scsitape
  00046	eb 11		 jmp	 SHORT $LN1@generic_tm
$LN6@generic_tm:

; 2938 :         }
; 2939 : #endif /* defined(OPTION_SCSI_TAPE) */
; 2940 : 
; 2941 :         default:
; 2942 :         {
; 2943 :             errno = EINVAL;         // (invalid arguments)

  00048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0004e	c7 00 16 00 00
	00		 mov	 DWORD PTR [rax], 22

; 2944 :             return -1;              // (return failure)

  00054	b8 ff ff ff ff	 mov	 eax, -1
$LN1@generic_tm:

; 2945 :         }
; 2946 :     }
; 2947 : 
; 2948 :     UNREACHABLE_CODE( return -1 );
; 2949 : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
generic_tmhcall ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
is_het$ = 32
rc$ = 36
tv66 = 40
tv68 = 44
dev$ = 64
blockid$ = 72
unitstat$ = 80
code$ = 88
locateblk_virtual PROC

; 2842 : {

$LN19:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2843 :     // NOTE: 'blockid' passed in host (little-endian) format...
; 2844 : 
; 2845 :     int rc;
; 2846 :     bool is_het = (dev->tmh == &tmh_het);

  00017	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:tmh_het
  0001e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00023	48 39 81 e0 10
	00 00		 cmp	 QWORD PTR [rcx+4320], rax
  0002a	75 0a		 jne	 SHORT $LN15@locateblk_
  0002c	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00034	eb 08		 jmp	 SHORT $LN16@locateblk_
$LN15@locateblk_:
  00036	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN16@locateblk_:
  0003e	83 7c 24 28 00	 cmp	 DWORD PTR tv66[rsp], 0
  00043	75 0a		 jne	 SHORT $LN17@locateblk_
  00045	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
  0004d	eb 08		 jmp	 SHORT $LN18@locateblk_
$LN17@locateblk_:
  0004f	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
$LN18@locateblk_:
  00057	0f b6 44 24 2c	 movzx	 eax, BYTE PTR tv68[rsp]
  0005c	88 44 24 20	 mov	 BYTE PTR is_het$[rsp], al

; 2847 : 
; 2848 :     /* Do it the hard way: rewind to load-point and then
; 2849 :        keep doing fsb, fsb, fsb... until we find our block
; 2850 :     */
; 2851 :     if ((rc = dev->tmh->rewind( dev, unitstat, code)) >= 0)

  00060	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00065	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  0006c	44 0f b6 44 24
	58		 movzx	 r8d, BYTE PTR code$[rsp]
  00072	48 8b 54 24 50	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00077	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0007c	ff 50 28	 call	 QWORD PTR [rax+40]
  0007f	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax
  00083	83 7c 24 24 00	 cmp	 DWORD PTR rc$[rsp], 0
  00088	0f 8c ae 01 00
	00		 jl	 $LN6@locateblk_

; 2852 :     {
; 2853 :         /* Reset position counters to start of file */
; 2854 :         dev->curfilen   =  1;

  0008e	b8 01 00 00 00	 mov	 eax, 1
  00093	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00098	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 2855 :         dev->nxtblkpos  =  0;

  0009f	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000a4	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 2856 :         dev->prvblkpos  = -1;

  000af	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000b4	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 2857 :         dev->blockid    =  0;

  000bf	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000c4	c7 80 04 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4100], 0

; 2858 : 
; 2859 :         /* Keep doing fsb until we find our block... */
; 2860 :         if (!is_het)

  000ce	0f b6 44 24 20	 movzx	 eax, BYTE PTR is_het$[rsp]
  000d3	85 c0		 test	 eax, eax
  000d5	75 42		 jne	 SHORT $LN7@locateblk_
$LN2@locateblk_:

; 2861 :         {
; 2862 :             while (dev->blockid < blockid && (rc >= 0))

  000d7	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000dc	8b 4c 24 48	 mov	 ecx, DWORD PTR blockid$[rsp]
  000e0	39 88 04 10 00
	00		 cmp	 DWORD PTR [rax+4100], ecx
  000e6	73 2c		 jae	 SHORT $LN3@locateblk_
  000e8	83 7c 24 24 00	 cmp	 DWORD PTR rc$[rsp], 0
  000ed	7c 25		 jl	 SHORT $LN3@locateblk_

; 2863 :                 rc = dev->tmh->fsb( dev, unitstat, code );

  000ef	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000f4	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  000fb	44 0f b6 44 24
	58		 movzx	 r8d, BYTE PTR code$[rsp]
  00101	48 8b 54 24 50	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00106	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0010b	ff 50 38	 call	 QWORD PTR [rax+56]
  0010e	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax
  00112	eb c3		 jmp	 SHORT $LN2@locateblk_
$LN3@locateblk_:

; 2864 :         }

  00114	e9 23 01 00 00	 jmp	 $LN8@locateblk_
$LN7@locateblk_:
$LN4@locateblk_:

; 2865 :         else // (special handling for .HET files...)
; 2866 :         {
; 2867 :             while (1)

  00119	33 c0		 xor	 eax, eax
  0011b	83 f8 01	 cmp	 eax, 1
  0011e	0f 84 18 01 00
	00		 je	 $LN5@locateblk_

; 2868 :             {
; 2869 :                 // PROGRAMMING NOTE: We need dev->lock to prevent
; 2870 :                 // "dev->hetb" from going NULL while we're looping
; 2871 :                 // (see GitHub Issue #515 for details), BUT... we
; 2872 :                 // also need to also provide a brief window of
; 2873 :                 // opportunity for I/O instructions to acquire
; 2874 :                 // dev->lock themselves too if they need to, by
; 2875 :                 // periodically releasing dev->lock while we loop.
; 2876 :                 // Inefficient, yes, but it's the only sure way
; 2877 :                 // to prevent GitHub Issue #518 from occurring.
; 2878 : 
; 2879 :                 obtain_lock( &dev->lock );

  00124	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00129	48 83 c0 38	 add	 rax, 56			; 00000038H
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170695
  00134	48 8b c8	 mov	 rcx, rax
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2880 :                 {
; 2881 :                     /* Check for exit condition */
; 2882 :                     if (0
; 2883 :                         || (rc < 0)                 // (error)
; 2884 :                         || !dev->hetb               // (ERROR!!)
; 2885 :                         || dev->blockid >= blockid  // (block located)

  0013d	33 c0		 xor	 eax, eax
  0013f	85 c0		 test	 eax, eax
  00141	75 27		 jne	 SHORT $LN10@locateblk_
  00143	83 7c 24 24 00	 cmp	 DWORD PTR rc$[rsp], 0
  00148	7c 20		 jl	 SHORT $LN10@locateblk_
  0014a	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0014f	48 83 b8 28 10
	00 00 00	 cmp	 QWORD PTR [rax+4136], 0
  00157	74 11		 je	 SHORT $LN10@locateblk_
  00159	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0015e	8b 4c 24 48	 mov	 ecx, DWORD PTR blockid$[rsp]
  00162	39 88 04 10 00
	00		 cmp	 DWORD PTR [rax+4100], ecx
  00168	72 46		 jb	 SHORT $LN9@locateblk_
$LN10@locateblk_:

; 2886 :                     )
; 2887 :                     {
; 2888 :                         // 'hetb' SHOULDN'T suddenly disappear but
; 2889 :                         // apparently sometimes occassionally does!
; 2890 :                         // See GitHub Issue #515!
; 2891 : 
; 2892 :                         if (dev->blockid < blockid && !dev->hetb)

  0016a	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0016f	8b 4c 24 48	 mov	 ecx, DWORD PTR blockid$[rsp]
  00173	39 88 04 10 00
	00		 cmp	 DWORD PTR [rax+4100], ecx
  00179	73 17		 jae	 SHORT $LN11@locateblk_
  0017b	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00180	48 83 b8 28 10
	00 00 00	 cmp	 QWORD PTR [rax+4136], 0
  00188	75 08		 jne	 SHORT $LN11@locateblk_

; 2893 :                             rc = -1; // (hetb disappeared!)

  0018a	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
$LN11@locateblk_:

; 2894 : 
; 2895 :                         release_lock( &dev->lock );

  00192	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00197	48 83 c0 38	 add	 rax, 56			; 00000038H
  0019b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170699
  001a2	48 8b c8	 mov	 rcx, rax
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2896 :                         break; // (block located or error occurred)

  001ab	e9 8c 00 00 00	 jmp	 $LN5@locateblk_
$LN9@locateblk_:

; 2897 :                     }
; 2898 :                 }
; 2899 :                 release_lock( &dev->lock );

  001b0	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  001b5	48 83 c0 38	 add	 rax, 56			; 00000038H
  001b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170700
  001c0	48 8b c8	 mov	 rcx, rax
  001c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2900 : 
; 2901 :                 // Between the above release and the below obtain is
; 2902 :                 // the window of opportunity for I/O instructions to
; 2903 :                 // acquire dev->lock for themselves if they need to.
; 2904 : 
; 2905 :                 obtain_lock( &dev->lock );

  001c9	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  001ce	48 83 c0 38	 add	 rax, 56			; 00000038H
  001d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170701
  001d9	48 8b c8	 mov	 rcx, rax
  001dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2906 :                 {
; 2907 :                     if (!dev->hetb)

  001e2	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  001e7	48 83 b8 28 10
	00 00 00	 cmp	 QWORD PTR [rax+4136], 0
  001ef	75 0a		 jne	 SHORT $LN12@locateblk_

; 2908 :                         rc = -1;

  001f1	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
  001f9	eb 23		 jmp	 SHORT $LN13@locateblk_
$LN12@locateblk_:

; 2909 :                     else
; 2910 :                         rc = dev->tmh->fsb( dev, unitstat, code );

  001fb	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00200	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00207	44 0f b6 44 24
	58		 movzx	 r8d, BYTE PTR code$[rsp]
  0020d	48 8b 54 24 50	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00212	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00217	ff 50 38	 call	 QWORD PTR [rax+56]
  0021a	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax
$LN13@locateblk_:

; 2911 :                 }
; 2912 :                 release_lock( &dev->lock );

  0021e	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00223	48 83 c0 38	 add	 rax, 56			; 00000038H
  00227	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170704
  0022e	48 8b c8	 mov	 rcx, rax
  00231	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2913 : 
; 2914 :             } // end while

  00237	e9 dd fe ff ff	 jmp	 $LN4@locateblk_
$LN5@locateblk_:
$LN8@locateblk_:
$LN6@locateblk_:

; 2915 :         } // end if special .HET file handling
; 2916 :     } // end if rewind success
; 2917 : 
; 2918 :     return rc;

  0023c	8b 44 24 24	 mov	 eax, DWORD PTR rc$[rsp]

; 2919 : }

  00240	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00244	c3		 ret	 0
locateblk_virtual ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
blockid$ = 0
dev$ = 32
logical$ = 40
physical$ = 48
readblkid_virtual PROC

; 2804 : {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 2805 :     // NOTE: returned value is always in guest BIG-ENDIAN format...
; 2806 : 
; 2807 :     BYTE  blockid[4];
; 2808 : 
; 2809 :     if (0x3590 == dev->devtype)

  00013	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  00018	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  0001c	3d 90 35 00 00	 cmp	 eax, 13712		; 00003590H
  00021	75 7b		 jne	 SHORT $LN2@readblkid_

; 2810 :     {
; 2811 :         // Full 32-bit block-id...
; 2812 : 
; 2813 :         blockid[0] = (dev->blockid >> 24) & 0xFF;

  00023	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  00028	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  0002e	c1 e8 18	 shr	 eax, 24
  00031	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00036	b9 01 00 00 00	 mov	 ecx, 1
  0003b	48 6b c9 00	 imul	 rcx, rcx, 0
  0003f	88 04 0c	 mov	 BYTE PTR blockid$[rsp+rcx], al

; 2814 :         blockid[1] = (dev->blockid >> 16) & 0xFF;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  00047	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  0004d	c1 e8 10	 shr	 eax, 16
  00050	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00055	b9 01 00 00 00	 mov	 ecx, 1
  0005a	48 6b c9 01	 imul	 rcx, rcx, 1
  0005e	88 04 0c	 mov	 BYTE PTR blockid$[rsp+rcx], al

; 2815 :         blockid[2] = (dev->blockid >> 8 ) & 0xFF;

  00061	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  00066	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  0006c	c1 e8 08	 shr	 eax, 8
  0006f	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00074	b9 01 00 00 00	 mov	 ecx, 1
  00079	48 6b c9 02	 imul	 rcx, rcx, 2
  0007d	88 04 0c	 mov	 BYTE PTR blockid$[rsp+rcx], al

; 2816 :         blockid[3] = (dev->blockid      ) & 0xFF;

  00080	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  00085	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  0008b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00090	b9 01 00 00 00	 mov	 ecx, 1
  00095	48 6b c9 03	 imul	 rcx, rcx, 3
  00099	88 04 0c	 mov	 BYTE PTR blockid$[rsp+rcx], al

; 2817 :     }

  0009c	eb 65		 jmp	 SHORT $LN3@readblkid_
$LN2@readblkid_:

; 2818 :     else // (3480 et. al)
; 2819 :     {
; 2820 :         // "22-bit" block-id...
; 2821 : 
; 2822 :         blockid[0] = 0x01;  // ("wrap" value)

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	48 6b c0 00	 imul	 rax, rax, 0
  000a7	c6 04 04 01	 mov	 BYTE PTR blockid$[rsp+rax], 1

; 2823 :         blockid[1] = (dev->blockid >> 16) & 0x3F;

  000ab	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  000b0	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  000b6	c1 e8 10	 shr	 eax, 16
  000b9	83 e0 3f	 and	 eax, 63			; 0000003fH
  000bc	b9 01 00 00 00	 mov	 ecx, 1
  000c1	48 6b c9 01	 imul	 rcx, rcx, 1
  000c5	88 04 0c	 mov	 BYTE PTR blockid$[rsp+rcx], al

; 2824 :         blockid[2] = (dev->blockid >> 8 ) & 0xFF;

  000c8	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  000cd	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  000d3	c1 e8 08	 shr	 eax, 8
  000d6	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000db	b9 01 00 00 00	 mov	 ecx, 1
  000e0	48 6b c9 02	 imul	 rcx, rcx, 2
  000e4	88 04 0c	 mov	 BYTE PTR blockid$[rsp+rcx], al

; 2825 :         blockid[3] = (dev->blockid      ) & 0xFF;

  000e7	48 8b 44 24 20	 mov	 rax, QWORD PTR dev$[rsp]
  000ec	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  000f2	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000f7	b9 01 00 00 00	 mov	 ecx, 1
  000fc	48 6b c9 03	 imul	 rcx, rcx, 3
  00100	88 04 0c	 mov	 BYTE PTR blockid$[rsp+rcx], al
$LN3@readblkid_:

; 2826 :     }
; 2827 : 
; 2828 :     // NOTE: For virtual tape devices, we return the same value
; 2829 :     // for both the logical "Channel block ID" value as well as
; 2830 :     // the physical "Device block ID" value...
; 2831 : 
; 2832 :     if (logical)  memcpy( logical,  &blockid[0], 4 );

  00103	48 83 7c 24 28
	00		 cmp	 QWORD PTR logical$[rsp], 0
  00109	74 13		 je	 SHORT $LN4@readblkid_
  0010b	b8 01 00 00 00	 mov	 eax, 1
  00110	48 6b c0 00	 imul	 rax, rax, 0
  00114	48 8b 4c 24 28	 mov	 rcx, QWORD PTR logical$[rsp]
  00119	8b 04 04	 mov	 eax, DWORD PTR blockid$[rsp+rax]
  0011c	89 01		 mov	 DWORD PTR [rcx], eax
$LN4@readblkid_:

; 2833 :     if (physical) memcpy( physical, &blockid[0], 4 );

  0011e	48 83 7c 24 30
	00		 cmp	 QWORD PTR physical$[rsp], 0
  00124	74 13		 je	 SHORT $LN5@readblkid_
  00126	b8 01 00 00 00	 mov	 eax, 1
  0012b	48 6b c0 00	 imul	 rax, rax, 0
  0012f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR physical$[rsp]
  00134	8b 04 04	 mov	 eax, DWORD PTR blockid$[rsp+rax]
  00137	89 01		 mov	 DWORD PTR [rcx], eax
$LN5@readblkid_:

; 2834 : 
; 2835 :     return 0;

  00139	33 c0		 xor	 eax, eax

; 2836 : }

  0013b	48 83 c4 18	 add	 rsp, 24
  0013f	c3		 ret	 0
readblkid_virtual ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
dev$ = 48
unitstat$ = 56
code$ = 64
no_operation PROC

; 2795 : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2796 :     build_senseX( TAPE_BSENSE_STATUSONLY, dev, unitstat, code );

  00013	44 0f b6 4c 24
	40		 movzx	 r9d, BYTE PTR code$[rsp]
  00019	4c 8b 44 24 38	 mov	 r8, QWORD PTR unitstat$[rsp]
  0001e	48 8b 54 24 30	 mov	 rdx, QWORD PTR dev$[rsp]
  00023	b9 0d 00 00 00	 mov	 ecx, 13
  00028	e8 00 00 00 00	 call	 build_senseX

; 2797 :     return 0;

  0002d	33 c0		 xor	 eax, eax

; 2798 : }

  0002f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00033	c3		 ret	 0
no_operation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
dev$ = 48
unitstat$ = 56
code$ = 64
write_READONLY PROC

; 2775 : {

$LN3:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2776 :     build_senseX(TAPE_BSENSE_WRITEPROTECT,dev,unitstat,code);

  00013	44 0f b6 4c 24
	40		 movzx	 r9d, BYTE PTR code$[rsp]
  00019	4c 8b 44 24 38	 mov	 r8, QWORD PTR unitstat$[rsp]
  0001e	48 8b 54 24 30	 mov	 rdx, QWORD PTR dev$[rsp]
  00023	b9 06 00 00 00	 mov	 ecx, 6
  00028	e8 00 00 00 00	 call	 build_senseX

; 2777 :     return -1;

  0002d	b8 ff ff ff ff	 mov	 eax, -1

; 2778 : }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
write_READONLY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
tv71 = 32
dev$ = 64
unitstat$ = 72
code$ = 80
is_tapeloaded_filename PROC

; 2755 : {

$LN11:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@is_tapeloa:

; 2756 :     UNREFERENCED(unitstat);

  00013	33 c0		 xor	 eax, eax
  00015	85 c0		 test	 eax, eax
  00017	75 fa		 jne	 SHORT $LN4@is_tapeloa
$LN7@is_tapeloa:

; 2757 :     UNREFERENCED(code);

  00019	33 c0		 xor	 eax, eax
  0001b	85 c0		 test	 eax, eax
  0001d	75 fa		 jne	 SHORT $LN7@is_tapeloa

; 2758 :     // true 1 == tape loaded, false 0 == tape not loaded
; 2759 :     return strcmp( dev->filename, TAPE_UNLOADED ) != 0 ? 1 : 0;

  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00024	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170627
  00031	48 8b c8	 mov	 rcx, rax
  00034	e8 00 00 00 00	 call	 strcmp
  00039	85 c0		 test	 eax, eax
  0003b	74 0a		 je	 SHORT $LN9@is_tapeloa
  0003d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  00045	eb 08		 jmp	 SHORT $LN10@is_tapeloa
$LN9@is_tapeloa:
  00047	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN10@is_tapeloa:
  0004f	8b 44 24 20	 mov	 eax, DWORD PTR tv71[rsp]

; 2760 : }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
is_tapeloaded_filename ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
dev$ = 48
bfr$ = 56
blklen$ = 64
unitstat$ = 72
code$ = 80
write_READONLY5 PROC

; 2784 : {

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@write_READ:

; 2785 :     UNREFERENCED(bfr);

  00018	33 c0		 xor	 eax, eax
  0001a	85 c0		 test	 eax, eax
  0001c	75 fa		 jne	 SHORT $LN4@write_READ
$LN7@write_READ:

; 2786 :     UNREFERENCED(blklen);

  0001e	33 c0		 xor	 eax, eax
  00020	85 c0		 test	 eax, eax
  00022	75 fa		 jne	 SHORT $LN7@write_READ

; 2787 :     build_senseX(TAPE_BSENSE_WRITEPROTECT,dev,unitstat,code);

  00024	44 0f b6 4c 24
	50		 movzx	 r9d, BYTE PTR code$[rsp]
  0002a	4c 8b 44 24 48	 mov	 r8, QWORD PTR unitstat$[rsp]
  0002f	48 8b 54 24 30	 mov	 rdx, QWORD PTR dev$[rsp]
  00034	b9 06 00 00 00	 mov	 ecx, 6
  00039	e8 00 00 00 00	 call	 build_senseX

; 2788 :     return -1;

  0003e	b8 ff ff ff ff	 mov	 eax, -1

; 2789 : }

  00043	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00047	c3		 ret	 0
write_READONLY5 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
dev$ = 8
return_false1 PROC

; 2766 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@return_fal:

; 2767 :     UNREFERENCED(dev);

  00005	33 c0		 xor	 eax, eax
  00007	85 c0		 test	 eax, eax
  00009	75 fa		 jne	 SHORT $LN4@return_fal

; 2768 :     return 0;

  0000b	33 c0		 xor	 eax, eax

; 2769 : }

  0000d	c3		 ret	 0
return_false1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
tv147 = 96
tv153 = 100
tv135 = 104
tv136 = 112
tv137 = 120
tv138 = 128
tv139 = 136
tv140 = 144
tv142 = 152
msgbfr$1 = 160
__$ArrayPad$ = 416
dev$ = 448
UpdateDisplay PROC

; 1948 : {

$LN24:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1949 :     if ( dev->tdparms.displayfeat )

  0001e	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00026	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  0002c	c1 e8 09	 shr	 eax, 9
  0002f	83 e0 01	 and	 eax, 1
  00032	85 c0		 test	 eax, eax
  00034	0f 84 a4 02 00
	00		 je	 $LN2@UpdateDisp

; 1950 :     {
; 1951 :         char msgbfr[256];
; 1952 : 
; 1953 :         GetDisplayMsg( dev, msgbfr, sizeof(msgbfr) );

  0003a	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00040	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR msgbfr$1[rsp]
  00048	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00050	e8 00 00 00 00	 call	 GetDisplayMsg

; 1954 : 
; 1955 :         if ( dev->prev_tapemsg )

  00055	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0005d	48 83 b8 58 11
	00 00 00	 cmp	 QWORD PTR [rax+4440], 0
  00065	74 4d		 je	 SHORT $LN4@UpdateDisp

; 1956 :         {
; 1957 :             if ( strcmp( msgbfr, dev->prev_tapemsg ) == 0 )

  00067	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0006f	48 8b 90 58 11
	00 00		 mov	 rdx, QWORD PTR [rax+4440]
  00076	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbfr$1[rsp]
  0007e	e8 00 00 00 00	 call	 strcmp
  00083	85 c0		 test	 eax, eax
  00085	75 05		 jne	 SHORT $LN5@UpdateDisp

; 1958 :                 return;

  00087	e9 78 02 00 00	 jmp	 $LN1@UpdateDisp
$LN5@UpdateDisp:

; 1959 :             free( dev->prev_tapemsg );

  0008c	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00094	48 8b 88 58 11
	00 00		 mov	 rcx, QWORD PTR [rax+4440]
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1960 :             dev->prev_tapemsg = NULL;

  000a1	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a9	48 c7 80 58 11
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4440], 0
$LN4@UpdateDisp:

; 1961 :         }
; 1962 : 
; 1963 :         dev->prev_tapemsg = strdup( msgbfr );

  000b4	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbfr$1[rsp]
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000c2	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000ca	48 89 81 58 11
	00 00		 mov	 QWORD PTR [rcx+4440], rax

; 1964 : 
; 1965 :         // "%1d:%04X Tape file '%s', type '%s': display '%s'"
; 1966 :         WRMSG(HHC00224, "I", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), msgbfr );

  000d1	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000d9	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  000e0	83 f8 01	 cmp	 eax, 1
  000e3	75 14		 jne	 SHORT $LN18@UpdateDisp
  000e5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170232
  000ec	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv140[rsp], rax
  000f4	e9 03 01 00 00	 jmp	 $LN19@UpdateDisp
$LN18@UpdateDisp:
  000f9	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00101	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00108	83 f8 02	 cmp	 eax, 2
  0010b	75 14		 jne	 SHORT $LN16@UpdateDisp
  0010d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170233
  00114	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv139[rsp], rax
  0011c	e9 cb 00 00 00	 jmp	 $LN17@UpdateDisp
$LN16@UpdateDisp:
  00121	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00129	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00130	83 f8 03	 cmp	 eax, 3
  00133	75 14		 jne	 SHORT $LN14@UpdateDisp
  00135	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170234
  0013c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv138[rsp], rax
  00144	e9 93 00 00 00	 jmp	 $LN15@UpdateDisp
$LN14@UpdateDisp:
  00149	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00151	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00158	83 f8 04	 cmp	 eax, 4
  0015b	75 0e		 jne	 SHORT $LN12@UpdateDisp
  0015d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170235
  00164	48 89 44 24 78	 mov	 QWORD PTR tv137[rsp], rax
  00169	eb 64		 jmp	 SHORT $LN13@UpdateDisp
$LN12@UpdateDisp:
  0016b	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00173	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0017a	83 f8 05	 cmp	 eax, 5
  0017d	75 0e		 jne	 SHORT $LN10@UpdateDisp
  0017f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170236
  00186	48 89 44 24 70	 mov	 QWORD PTR tv136[rsp], rax
  0018b	eb 38		 jmp	 SHORT $LN11@UpdateDisp
$LN10@UpdateDisp:
  0018d	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00195	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0019c	83 f8 06	 cmp	 eax, 6
  0019f	75 0e		 jne	 SHORT $LN8@UpdateDisp
  001a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170237
  001a8	48 89 44 24 68	 mov	 QWORD PTR tv135[rsp], rax
  001ad	eb 0c		 jmp	 SHORT $LN9@UpdateDisp
$LN8@UpdateDisp:
  001af	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170238
  001b6	48 89 44 24 68	 mov	 QWORD PTR tv135[rsp], rax
$LN9@UpdateDisp:
  001bb	48 8b 44 24 68	 mov	 rax, QWORD PTR tv135[rsp]
  001c0	48 89 44 24 70	 mov	 QWORD PTR tv136[rsp], rax
$LN11@UpdateDisp:
  001c5	48 8b 44 24 70	 mov	 rax, QWORD PTR tv136[rsp]
  001ca	48 89 44 24 78	 mov	 QWORD PTR tv137[rsp], rax
$LN13@UpdateDisp:
  001cf	48 8b 44 24 78	 mov	 rax, QWORD PTR tv137[rsp]
  001d4	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv138[rsp], rax
$LN15@UpdateDisp:
  001dc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv138[rsp]
  001e4	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv139[rsp], rax
$LN17@UpdateDisp:
  001ec	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv139[rsp]
  001f4	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv140[rsp], rax
$LN19@UpdateDisp:
  001fc	48 83 bc 24 c0
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00205	74 12		 je	 SHORT $LN20@UpdateDisp
  00207	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0020f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00213	89 44 24 60	 mov	 DWORD PTR tv147[rsp], eax
  00217	eb 08		 jmp	 SHORT $LN21@UpdateDisp
$LN20@UpdateDisp:
  00219	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
$LN21@UpdateDisp:
  00221	48 83 bc 24 c0
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0022a	74 14		 je	 SHORT $LN22@UpdateDisp
  0022c	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00234	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00238	d1 f8		 sar	 eax, 1
  0023a	89 44 24 64	 mov	 DWORD PTR tv153[rsp], eax
  0023e	eb 08		 jmp	 SHORT $LN23@UpdateDisp
$LN22@UpdateDisp:
  00240	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv153[rsp], 0
$LN23@UpdateDisp:
  00248	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00250	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00256	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv142[rsp], rax
  0025e	b9 01 00 00 00	 mov	 ecx, 1
  00263	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00269	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR msgbfr$1[rsp]
  00271	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00276	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv140[rsp]
  0027e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00283	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv142[rsp]
  0028b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00290	8b 4c 24 60	 mov	 ecx, DWORD PTR tv147[rsp]
  00294	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00298	8b 4c 24 64	 mov	 ecx, DWORD PTR tv153[rsp]
  0029c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170239
  002a7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170240
  002b3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002b8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002bd	41 b9 03 00 00
	00		 mov	 r9d, 3
  002c3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170241
  002ca	ba ae 07 00 00	 mov	 edx, 1966		; 000007aeH
  002cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170242
  002d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1967 :     }

  002dc	eb 26		 jmp	 SHORT $LN3@UpdateDisp
$LN2@UpdateDisp:

; 1968 : #if defined(OPTION_SCSI_TAPE)
; 1969 :     else
; 1970 :         if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  002de	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002e6	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  002ed	83 f8 03	 cmp	 eax, 3
  002f0	75 12		 jne	 SHORT $LN6@UpdateDisp

; 1971 :             int_scsi_status_update( dev, 1 );

  002f2	ba 01 00 00 00	 mov	 edx, 1
  002f7	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002ff	e8 00 00 00 00	 call	 int_scsi_status_update
$LN6@UpdateDisp:
$LN3@UpdateDisp:
$LN1@UpdateDisp:

; 1972 : #endif
; 1973 : }

  00304	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0030c	48 33 cc	 xor	 rcx, rsp
  0030f	e8 00 00 00 00	 call	 __security_check_cookie
  00314	48 81 c4 b8 01
	00 00		 add	 rsp, 440		; 000001b8H
  0031b	c3		 ret	 0
UpdateDisplay ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
autoload$ = 112
unmountreq$ = 113
mountreq$ = 114
scratch$ = 115
rc$ = 116
code$1 = 120
unitstat$2 = 121
tapeloaded$ = 122
stdlbled$ = 123
tapemsg$ = 128
tv190 = 136
tv237 = 140
tv243 = 144
tv249 = 148
tv293 = 152
tv299 = 156
tv347 = 160
tv385 = 164
tv340 = 168
$T3 = 176
tv253 = 184
tv281 = 192
tv282 = 200
tv283 = 208
tv284 = 216
tv285 = 224
tv260 = 232
tv286 = 240
tv335 = 248
tv336 = 256
tv337 = 264
tv338 = 272
tv339 = 280
tv314 = 288
lbltype$ = 296
tv288 = 304
tv342 = 312
gen_parms$4 = 320
volser$ = 352
sensebkup$5 = 368
__$ArrayPad$ = 624
dev$ = 672
ReqAutoMount PROC

; 1980 : {

$LN87:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec 88 02
	00 00		 sub	 rsp, 648		; 00000288H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1981 :     int    rc = 0;

  00020	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 1982 :     char   volser[7];
; 1983 :     BYTE   tapeloaded, autoload, mountreq, unmountreq, stdlbled, scratch;
; 1984 :     char*  lbltype;
; 1985 :     char*  tapemsg = "                  ";

  00028	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170275
  0002f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tapemsg$[rsp], rax

; 1986 : 
; 1987 :     ///////////////////////////////////////////////////////////////////
; 1988 : 
; 1989 :     // The Automatic Cartridge Loader or "ACL" (sometimes also referred
; 1990 :     // to as an "Automatic Cartridge Feeder" (ACF) too) automatically
; 1991 :     // loads the next cartridge [from the magazine] whenever a tape is
; 1992 :     // unloaded, BUT ONLY IF the 'Index Automatic Load' bit (bit 7) of
; 1993 :     // the FCB (Format Control Byte, byte 0) was on whenever the Load
; 1994 :     // Display ccw was sent to the drive. If the bit was not on when
; 1995 :     // the Load Display ccw was issued, then the requested message (if
; 1996 :     // any) is displayed until the next tape mount/dismount and the ACL
; 1997 :     // is NOT activated (i.e. the next tape is NOT automatically loaded).
; 1998 :     // If the bit was on however, then, as stated, the ACF component of
; 1999 :     // the drive will automatically load the next [specified] cartridge.
; 2000 : 
; 2001 :     // Whenever the ACL facility is activated (via bit 7 of byte 0 of
; 2002 :     // the Load Display ccw), then only bytes 1-8 of the "Display Until
; 2003 :     // Mounted" message (or bytes 9-17 of a "Display Until Dismounted
; 2004 :     // Then Mounted" message) are displayed to let the operator know
; 2005 :     // which tape is currently being processed by the autoloader and
; 2006 :     // thus is basically for informational purposes only (the operator
; 2007 :     // does NOT need to do anything since the auto-loader is handling
; 2008 :     // tape mounts for them automatically; i.e. the message is NOT an
; 2009 :     // operator mount/dismount request).
; 2010 : 
; 2011 :     // If the 'Index Automatic Load' bit was not set in the Load Display
; 2012 :     // CCW however, then the specified "Display Until Mounted", "Display
; 2013 :     // Until Unmounted" or "Display Until Unmounted Then Display Until
; 2014 :     // Mounted" message is meant as a mount, unmount, or unmount-then-
; 2015 :     // mount request for the actual [human being] operator, and thus
; 2016 :     // they DO need to take some sort of action (since the ACL automatic
; 2017 :     // loader facility is not active; i.e. the message is a request to
; 2018 :     // the operator to manually unload, load or unload then load a tape).
; 2019 : 
; 2020 :     // THUS... If the TAPEDISPFLG_AUTOLOADER flag is set (indicating
; 2021 :     // the autoloader is (or should be) active), then the message we
; 2022 :     // issue is simply for INFORMATIONAL purposes only (i.e. "FYI: the
; 2023 :     // following tape is being *automatically* loaded; you don't need
; 2024 :     // to actually do anything")
; 2025 : 
; 2026 :     // If the TAPEDISPFLG_AUTOLOADER is flag is NOT set however, then
; 2027 :     // we need to issue a message notifying the operator of what they
; 2028 :     // are *expected* to do (e.g. either unload, load or unload/load
; 2029 :     // the specified tape volume).
; 2030 : 
; 2031 :     // Also please note that while there are no formally established
; 2032 :     // standards regarding the format of the Load Display CCW message
; 2033 :     // text, there are however certain established conventions (estab-
; 2034 :     // lished by IBM naturally). If the first character is an 'M', it
; 2035 :     // means "Please MOUNT the indicated volume". An 'R' [apparently]
; 2036 :     // means "Retain", and, similarly, 'K' means "Keep" (same thing as
; 2037 :     // "Retain"). If the LAST character is an 'S', then it means that
; 2038 :     // a Standard Labeled volume is being requested, whereas an 'N'
; 2039 :     // (or really, anything OTHER than an 'S' (except 'A')) means an
; 2040 :     // unlabeled (or non-labeled) tape volume is being requested. An
; 2041 :     // 'A' as the last character means a Standard Labeled ASCII tape
; 2042 :     // is being requested. If the message is "SCRTCH" (or something
; 2043 :     // similar), then a either a standard labeled or unlabeled scratch
; 2044 :     // tape is obviously being requested (there doesn't seem to be any
; 2045 :     // convention/consensus regarding the format for requesting scratch
; 2046 :     // tapes; some shops for example use 'XXXSCR' to indicate that a
; 2047 :     // scratch tape from tape pool 'XXX' should be mounted).
; 2048 : 
; 2049 :     ///////////////////////////////////////////////////////////////////
; 2050 : 
; 2051 :     /* Open the file/drive if needed (kick off auto-mount if needed) */
; 2052 :     if (dev->fd < 0)

  00037	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0003f	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00046	0f 8d e6 01 00
	00		 jge	 $LN14@ReqAutoMou

; 2053 :     {
; 2054 :         BYTE   unitstat = 0, code = 0;

  0004c	c6 44 24 79 00	 mov	 BYTE PTR unitstat$2[rsp], 0
  00051	c6 44 24 78 00	 mov	 BYTE PTR code$1[rsp], 0

; 2055 :         BYTE   sensebkup[ _countof( dev->sense )];  // (same size)
; 2056 : 
; 2057 :         /* Save any pending sense */
; 2058 :         memcpy( sensebkup, dev->sense, sizeof( sensebkup ));

  00056	48 8d 84 24 70
	01 00 00	 lea	 rax, QWORD PTR sensebkup$5[rsp]
  0005e	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00066	48 8b f8	 mov	 rdi, rax
  00069	48 8d b1 64 03
	00 00		 lea	 rsi, QWORD PTR [rcx+868]
  00070	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00075	f3 a4		 rep movsb

; 2059 : 
; 2060 :         /* Open the file/drive */
; 2061 :         rc = dev->tmh->open( dev, &unitstat, code );

  00077	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007f	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00086	44 0f b6 44 24
	78		 movzx	 r8d, BYTE PTR code$1[rsp]
  0008c	48 8d 54 24 79	 lea	 rdx, QWORD PTR unitstat$2[rsp]
  00091	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00099	ff 50 08	 call	 QWORD PTR [rax+8]
  0009c	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 2062 : 
; 2063 :         /* Ignore open error if no tape being mounted */
; 2064 :         if (strcmp( dev->filename, TAPE_UNLOADED ) == 0)

  000a0	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a8	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170278
  000b5	48 8b c8	 mov	 rcx, rax
  000b8	e8 00 00 00 00	 call	 strcmp
  000bd	85 c0		 test	 eax, eax
  000bf	75 08		 jne	 SHORT $LN15@ReqAutoMou

; 2065 :             rc = 0;

  000c1	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0
$LN15@ReqAutoMou:

; 2066 : 
; 2067 :         /* Restore pending sense */
; 2068 :         // FIXME: (but only if the open succeeded?? Is this right??)
; 2069 :         if (rc >= 0)

  000c9	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  000ce	7c 21		 jl	 SHORT $LN16@ReqAutoMou

; 2070 :             memcpy( dev->sense, sensebkup, sizeof( dev->sense ));

  000d0	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000d8	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR sensebkup$5[rsp]
  000e0	48 8d b8 64 03
	00 00		 lea	 rdi, QWORD PTR [rax+868]
  000e7	48 8b f1	 mov	 rsi, rcx
  000ea	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  000ef	f3 a4		 rep movsb
$LN16@ReqAutoMou:

; 2071 : 
; 2072 : #if defined(OPTION_SCSI_TAPE)
; 2073 :         if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  000f1	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000f9	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00100	83 f8 03	 cmp	 eax, 3
  00103	0f 85 19 01 00
	00		 jne	 $LN17@ReqAutoMou

; 2074 :         {
; 2075 :             // PROGRAMMING NOTE: it's important to do TWO refreshes here
; 2076 :             // to cause the auto-mount thread to get created. Doing only
; 2077 :             // one doesn't work and doing two shouldn't cause any harm.
; 2078 : 
; 2079 :             GENTMH_PARMS  gen_parms;
; 2080 : 
; 2081 :             gen_parms.action  = GENTMH_SCSI_ACTION_UPDATE_STATUS;

  00109	c7 84 24 40 01
	00 00 00 00 00
	00		 mov	 DWORD PTR gen_parms$4[rsp], 0

; 2082 :             gen_parms.dev     = dev;

  00114	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0011c	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR gen_parms$4[rsp+8], rax
$LN4@ReqAutoMou:

; 2083 : 
; 2084 :             // (refresh potentially stale status)
; 2085 :             VERIFY( dev->tmh->generic( &gen_parms ) == 0 );

  00124	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0012c	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00133	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR gen_parms$4[rsp]
  0013b	ff 10		 call	 QWORD PTR [rax]
  0013d	85 c0		 test	 eax, eax
  0013f	74 5c		 je	 SHORT $LN18@ReqAutoMou
$LN7@ReqAutoMou:
  00141	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG170282
  00148	41 b8 25 08 00
	00		 mov	 r8d, 2085		; 00000825H
  0014e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170283
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170284
  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00168	85 c0		 test	 eax, eax
  0016a	74 20		 je	 SHORT $LN19@ReqAutoMou
  0016c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG170286
  00173	41 b8 25 08 00
	00		 mov	 r8d, 2085		; 00000825H
  00179	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170287
  00180	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170288
  00187	e8 00 00 00 00	 call	 DebuggerTrace
$LN19@ReqAutoMou:
  0018c	33 c0		 xor	 eax, eax
  0018e	85 c0		 test	 eax, eax
  00190	75 af		 jne	 SHORT $LN7@ReqAutoMou
  00192	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00198	85 c0		 test	 eax, eax
  0019a	74 01		 je	 SHORT $LN20@ReqAutoMou
  0019c	cc		 int	 3
$LN20@ReqAutoMou:
$LN18@ReqAutoMou:
  0019d	33 c0		 xor	 eax, eax
  0019f	85 c0		 test	 eax, eax
  001a1	75 81		 jne	 SHORT $LN4@ReqAutoMou
$LN10@ReqAutoMou:

; 2086 : 
; 2087 :             // (force auto-mount thread creation)
; 2088 :             VERIFY( dev->tmh->generic( &gen_parms ) == 0 );

  001a3	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001ab	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  001b2	48 8d 8c 24 40
	01 00 00	 lea	 rcx, QWORD PTR gen_parms$4[rsp]
  001ba	ff 10		 call	 QWORD PTR [rax]
  001bc	85 c0		 test	 eax, eax
  001be	74 5c		 je	 SHORT $LN21@ReqAutoMou
$LN13@ReqAutoMou:
  001c0	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG170291
  001c7	41 b8 28 08 00
	00		 mov	 r8d, 2088		; 00000828H
  001cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170292
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170293
  001db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  001e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001e7	85 c0		 test	 eax, eax
  001e9	74 20		 je	 SHORT $LN22@ReqAutoMou
  001eb	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG170295
  001f2	41 b8 28 08 00
	00		 mov	 r8d, 2088		; 00000828H
  001f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170296
  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170297
  00206	e8 00 00 00 00	 call	 DebuggerTrace
$LN22@ReqAutoMou:
  0020b	33 c0		 xor	 eax, eax
  0020d	85 c0		 test	 eax, eax
  0020f	75 af		 jne	 SHORT $LN13@ReqAutoMou
  00211	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00217	85 c0		 test	 eax, eax
  00219	74 01		 je	 SHORT $LN23@ReqAutoMou
  0021b	cc		 int	 3
$LN23@ReqAutoMou:
$LN21@ReqAutoMou:
  0021c	33 c0		 xor	 eax, eax
  0021e	85 c0		 test	 eax, eax
  00220	75 81		 jne	 SHORT $LN10@ReqAutoMou
$LN17@ReqAutoMou:

; 2089 :         }
; 2090 : #endif /* defined(OPTION_SCSI_TAPE) */
; 2091 : 
; 2092 :         /* Return with error if open failed */
; 2093 :         if (rc < 0)

  00222	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00227	7d 09		 jge	 SHORT $LN24@ReqAutoMou

; 2094 :             return rc;

  00229	8b 44 24 74	 mov	 eax, DWORD PTR rc$[rsp]
  0022d	e9 3e 08 00 00	 jmp	 $LN1@ReqAutoMou
$LN24@ReqAutoMou:
$LN14@ReqAutoMou:

; 2095 :     }
; 2096 : 
; 2097 :     /* Disabled when [non-SCSI] ACL in use */
; 2098 :     if (dev->als)

  00232	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0023a	48 83 b8 e8 10
	00 00 00	 cmp	 QWORD PTR [rax+4328], 0
  00242	74 09		 je	 SHORT $LN25@ReqAutoMou

; 2099 :         return rc;

  00244	8b 44 24 74	 mov	 eax, DWORD PTR rc$[rsp]
  00248	e9 23 08 00 00	 jmp	 $LN1@ReqAutoMou
$LN25@ReqAutoMou:

; 2100 : 
; 2101 :     /* Do we actually have any work to do? */
; 2102 :     if (!(dev->tapedispflags & TAPEDISPFLG_REQAUTOMNT))

  0024d	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00255	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  0025c	83 e0 08	 and	 eax, 8
  0025f	85 c0		 test	 eax, eax
  00261	75 09		 jne	 SHORT $LN26@ReqAutoMou

; 2103 :         return rc;     // (nothing to do!)

  00263	8b 44 24 74	 mov	 eax, DWORD PTR rc$[rsp]
  00267	e9 04 08 00 00	 jmp	 $LN1@ReqAutoMou
$LN26@ReqAutoMou:

; 2104 : 
; 2105 :     /* Reset work flag */
; 2106 :     dev->tapedispflags &= ~TAPEDISPFLG_REQAUTOMNT;

  0026c	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00274	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  0027b	83 e0 f7	 and	 eax, -9
  0027e	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00286	88 81 61 11 00
	00		 mov	 BYTE PTR [rcx+4449], al

; 2107 : 
; 2108 :     /* If the drive doesn't have a display,
; 2109 :        then it can't have an auto-loader either */
; 2110 :     if (!dev->tdparms.displayfeat)

  0028c	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00294	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  0029a	c1 e8 09	 shr	 eax, 9
  0029d	83 e0 01	 and	 eax, 1
  002a0	85 c0		 test	 eax, eax
  002a2	75 09		 jne	 SHORT $LN27@ReqAutoMou

; 2111 :         return rc;

  002a4	8b 44 24 74	 mov	 eax, DWORD PTR rc$[rsp]
  002a8	e9 c3 07 00 00	 jmp	 $LN1@ReqAutoMou
$LN27@ReqAutoMou:

; 2112 : 
; 2113 :     /* Determine if mount or unmount request
; 2114 :        and get pointer to correct message */
; 2115 : 
; 2116 :     tapeloaded = dev->tmh->tapeloaded( dev, NULL, 0 ) ? TRUE : FALSE;

  002ad	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002b5	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  002bc	45 33 c0	 xor	 r8d, r8d
  002bf	33 d2		 xor	 edx, edx
  002c1	48 8b 8c 24 a0
	02 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002c9	ff 50 70	 call	 QWORD PTR [rax+112]
  002cc	85 c0		 test	 eax, eax
  002ce	74 0d		 je	 SHORT $LN39@ReqAutoMou
  002d0	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv190[rsp], 1
  002db	eb 0b		 jmp	 SHORT $LN40@ReqAutoMou
$LN39@ReqAutoMou:
  002dd	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv190[rsp], 0
$LN40@ReqAutoMou:
  002e8	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR tv190[rsp]
  002f0	88 44 24 7a	 mov	 BYTE PTR tapeloaded$[rsp], al

; 2117 : 
; 2118 :     mountreq   = FALSE;     // (default)

  002f4	c6 44 24 72 00	 mov	 BYTE PTR mountreq$[rsp], 0

; 2119 :     unmountreq = FALSE;     // (default)

  002f9	c6 44 24 71 00	 mov	 BYTE PTR unmountreq$[rsp], 0

; 2120 : 
; 2121 :     if (tapeloaded)

  002fe	0f b6 44 24 7a	 movzx	 eax, BYTE PTR tapeloaded$[rsp]
  00303	85 c0		 test	 eax, eax
  00305	0f 84 8c 00 00
	00		 je	 $LN28@ReqAutoMou

; 2122 :     {
; 2123 :         // A tape IS already loaded...
; 2124 : 
; 2125 :         // 1st byte of message1 non-blank, *AND*,
; 2126 :         // unmount request,
; 2127 :         // or unmount+mount request and not message2-only flag?
; 2128 : 
; 2129 :         tapemsg = dev->tapemsg1;

  0030b	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00313	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  00319	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tapemsg$[rsp], rax

; 2130 : 
; 2131 :         if (1
; 2132 :             && ' ' != tapemsg[0]
; 2133 :             && (0

  00321	33 c0		 xor	 eax, eax
  00323	83 f8 01	 cmp	 eax, 1
  00326	74 6a		 je	 SHORT $LN30@ReqAutoMou
  00328	b8 01 00 00 00	 mov	 eax, 1
  0032d	48 6b c0 00	 imul	 rax, rax, 0
  00331	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tapemsg$[rsp]
  00339	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0033d	83 f8 20	 cmp	 eax, 32			; 00000020H
  00340	74 50		 je	 SHORT $LN30@ReqAutoMou
  00342	33 c0		 xor	 eax, eax
  00344	85 c0		 test	 eax, eax
  00346	75 45		 jne	 SHORT $LN31@ReqAutoMou
  00348	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00350	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00357	83 f8 07	 cmp	 eax, 7
  0035a	74 31		 je	 SHORT $LN31@ReqAutoMou
  0035c	33 c0		 xor	 eax, eax
  0035e	83 f8 01	 cmp	 eax, 1
  00361	74 2f		 je	 SHORT $LN30@ReqAutoMou
  00363	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0036b	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00372	83 f8 08	 cmp	 eax, 8
  00375	75 1b		 jne	 SHORT $LN30@ReqAutoMou
  00377	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0037f	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  00386	83 e0 20	 and	 eax, 32			; 00000020H
  00389	85 c0		 test	 eax, eax
  0038b	75 05		 jne	 SHORT $LN30@ReqAutoMou
$LN31@ReqAutoMou:

; 2134 :                 || TAPEDISPTYP_UNMOUNT == dev->tapedisptype
; 2135 :                 || (1
; 2136 :                     && TAPEDISPTYP_UMOUNTMOUNT == dev->tapedisptype
; 2137 :                     && !(dev->tapedispflags & TAPEDISPFLG_MESSAGE2)
; 2138 :                    )
; 2139 :                )
; 2140 :         )
; 2141 :             unmountreq = TRUE;

  0038d	c6 44 24 71 01	 mov	 BYTE PTR unmountreq$[rsp], 1
$LN30@ReqAutoMou:

; 2142 :     }

  00392	e9 87 00 00 00	 jmp	 $LN29@ReqAutoMou
$LN28@ReqAutoMou:

; 2143 :     else
; 2144 :     {
; 2145 :         // NO TAPE is loaded yet...
; 2146 : 
; 2147 :         // mount request and 1st byte of msg1 non-blank, *OR*,
; 2148 :         // unmount+mount request and 1st byte of msg2 non-blank?
; 2149 : 
; 2150 :         if ((1
; 2151 :                 && TAPEDISPTYP_MOUNT == dev->tapedisptype
; 2152 :                 && ' ' != *(tapemsg = dev->tapemsg1)
; 2153 :             )
; 2154 :             ||

  00397	33 c0		 xor	 eax, eax
  00399	83 f8 01	 cmp	 eax, 1
  0039c	74 3a		 je	 SHORT $LN34@ReqAutoMou
  0039e	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003a6	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  003ad	83 f8 06	 cmp	 eax, 6
  003b0	75 26		 jne	 SHORT $LN34@ReqAutoMou
  003b2	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003ba	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  003c0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tapemsg$[rsp], rax
  003c8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tapemsg$[rsp]
  003d0	0f be 00	 movsx	 eax, BYTE PTR [rax]
  003d3	83 f8 20	 cmp	 eax, 32			; 00000020H
  003d6	75 41		 jne	 SHORT $LN33@ReqAutoMou
$LN34@ReqAutoMou:
  003d8	33 c0		 xor	 eax, eax
  003da	83 f8 01	 cmp	 eax, 1
  003dd	74 3f		 je	 SHORT $LN32@ReqAutoMou
  003df	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003e7	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  003ee	83 f8 08	 cmp	 eax, 8
  003f1	75 2b		 jne	 SHORT $LN32@ReqAutoMou
  003f3	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003fb	48 05 29 11 00
	00		 add	 rax, 4393		; 00001129H
  00401	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tapemsg$[rsp], rax
  00409	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tapemsg$[rsp]
  00411	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00414	83 f8 20	 cmp	 eax, 32			; 00000020H
  00417	74 05		 je	 SHORT $LN32@ReqAutoMou
$LN33@ReqAutoMou:

; 2155 :             (1
; 2156 :                 && TAPEDISPTYP_UMOUNTMOUNT == dev->tapedisptype
; 2157 :                 && ' ' != *(tapemsg = dev->tapemsg2)
; 2158 :             )
; 2159 :         )
; 2160 :             mountreq = TRUE;

  00419	c6 44 24 72 01	 mov	 BYTE PTR mountreq$[rsp], 1
$LN32@ReqAutoMou:
$LN29@ReqAutoMou:

; 2161 :     }
; 2162 : 
; 2163 :     /* Extract volser from message */
; 2164 :     strncpy( volser, tapemsg+1, 6 );

  0041e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tapemsg$[rsp]
  00426	48 ff c0	 inc	 rax
  00429	41 b8 06 00 00
	00		 mov	 r8d, 6
  0042f	48 8b d0	 mov	 rdx, rax
  00432	48 8d 8c 24 60
	01 00 00	 lea	 rcx, QWORD PTR volser$[rsp]
  0043a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy

; 2165 :     volser[6] = 0;

  00440	b8 01 00 00 00	 mov	 eax, 1
  00445	48 6b c0 06	 imul	 rax, rax, 6
  00449	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR $T3[rsp], rax
  00451	48 83 bc 24 b0
	00 00 00 07	 cmp	 QWORD PTR $T3[rsp], 7
  0045a	73 02		 jae	 SHORT $LN41@ReqAutoMou
  0045c	eb 05		 jmp	 SHORT $LN42@ReqAutoMou
$LN41@ReqAutoMou:
  0045e	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN42@ReqAutoMou:
  00463	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR $T3[rsp]
  0046b	c6 84 04 60 01
	00 00 00	 mov	 BYTE PTR volser$[rsp+rax], 0

; 2166 : 
; 2167 :     /* Set some boolean flags */
; 2168 :     autoload = ( dev->tapedispflags & TAPEDISPFLG_AUTOLOADER )    ?  TRUE  :  FALSE;

  00473	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0047b	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  00482	83 e0 10	 and	 eax, 16
  00485	85 c0		 test	 eax, eax
  00487	74 0d		 je	 SHORT $LN43@ReqAutoMou
  00489	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv237[rsp], 1
  00494	eb 0b		 jmp	 SHORT $LN44@ReqAutoMou
$LN43@ReqAutoMou:
  00496	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv237[rsp], 0
$LN44@ReqAutoMou:
  004a1	0f b6 84 24 8c
	00 00 00	 movzx	 eax, BYTE PTR tv237[rsp]
  004a9	88 44 24 70	 mov	 BYTE PTR autoload$[rsp], al

; 2169 :     stdlbled = ( 'S' == tapemsg[7] )                              ?  TRUE  :  FALSE;

  004ad	b8 01 00 00 00	 mov	 eax, 1
  004b2	48 6b c0 07	 imul	 rax, rax, 7
  004b6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tapemsg$[rsp]
  004be	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  004c2	83 f8 53	 cmp	 eax, 83			; 00000053H
  004c5	75 0d		 jne	 SHORT $LN45@ReqAutoMou
  004c7	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv243[rsp], 1
  004d2	eb 0b		 jmp	 SHORT $LN46@ReqAutoMou
$LN45@ReqAutoMou:
  004d4	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv243[rsp], 0
$LN46@ReqAutoMou:
  004df	0f b6 84 24 90
	00 00 00	 movzx	 eax, BYTE PTR tv243[rsp]
  004e7	88 44 24 7b	 mov	 BYTE PTR stdlbled$[rsp], al

; 2170 : //  ascii    = ( 'A' == tapemsg[7] )                              ?  TRUE  :  FALSE;
; 2171 :     scratch  = ( 'S' == tapemsg[0] )                              ?  TRUE  :  FALSE;

  004eb	b8 01 00 00 00	 mov	 eax, 1
  004f0	48 6b c0 00	 imul	 rax, rax, 0
  004f4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tapemsg$[rsp]
  004fc	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00500	83 f8 53	 cmp	 eax, 83			; 00000053H
  00503	75 0d		 jne	 SHORT $LN47@ReqAutoMou
  00505	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv249[rsp], 1
  00510	eb 0b		 jmp	 SHORT $LN48@ReqAutoMou
$LN47@ReqAutoMou:
  00512	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv249[rsp], 0
$LN48@ReqAutoMou:
  0051d	0f b6 84 24 94
	00 00 00	 movzx	 eax, BYTE PTR tv249[rsp]
  00525	88 44 24 73	 mov	 BYTE PTR scratch$[rsp], al

; 2172 : 
; 2173 :     lbltype = stdlbled ? "SL" : "UL";

  00529	0f b6 44 24 7b	 movzx	 eax, BYTE PTR stdlbled$[rsp]
  0052e	85 c0		 test	 eax, eax
  00530	74 11		 je	 SHORT $LN49@ReqAutoMou
  00532	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170310
  00539	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv253[rsp], rax
  00541	eb 0f		 jmp	 SHORT $LN50@ReqAutoMou
$LN49@ReqAutoMou:
  00543	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170311
  0054a	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv253[rsp], rax
$LN50@ReqAutoMou:
  00552	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv253[rsp]
  0055a	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR lbltype$[rsp], rax

; 2174 : 
; 2175 : #if defined(OPTION_SCSI_TAPE)
; 2176 : #if 1
; 2177 :     // ****************************************************************
; 2178 :     // ZZ FIXME: ZZ TODO:   ***  Programming Note  ***
; 2179 : 
; 2180 :     // Since we currently don't have any way of activating a SCSI tape
; 2181 :     // drive's REAL autoloader mechanism whenever we receive an auto-
; 2182 :     // mount message [from the guest o/s via the Load Display CCW], we
; 2183 :     // leave it to the operator to action the mount message displayed
; 2184 : 
; 2185 :     // Once ASPI code eventually gets added to Herc (and/or something
; 2186 :     // similar for the Linux world), then the following workaround can
; 2187 :     // be safely removed.
; 2188 : 
; 2189 :     autoload = FALSE;       // (temporarily forced; see above)

  00562	c6 44 24 70 00	 mov	 BYTE PTR autoload$[rsp], 0

; 2190 : 
; 2191 :     // ****************************************************************
; 2192 : #endif
; 2193 : #endif /* defined(OPTION_SCSI_TAPE) */
; 2194 : 
; 2195 :     if (autoload)

  00567	0f b6 44 24 70	 movzx	 eax, BYTE PTR autoload$[rsp]
  0056c	85 c0		 test	 eax, eax
  0056e	0f 84 f8 04 00
	00		 je	 $LN35@ReqAutoMou

; 2196 :     {
; 2197 :         // ZZ TODO: Here is where we'd issue i/o (ASPI?) to the actual
; 2198 :         // hardware autoloader facility (i.e. the SCSI medium changer)
; 2199 :         // to unload and/or load the tape(s) if this were a SCSI auto-
; 2200 :         // loading tape drive.
; 2201 : 
; 2202 :         if (unmountreq)

  00574	0f b6 44 24 71	 movzx	 eax, BYTE PTR unmountreq$[rsp]
  00579	85 c0		 test	 eax, eax
  0057b	0f 84 6f 02 00
	00		 je	 $LN36@ReqAutoMou

; 2203 :         {
; 2204 :             // "%1d:%04X Tape file '%s', type '%s': '%s' tape volume '%s' being auto unloaded"
; 2205 :             WRMSG( HHC00226, "I", LCSS_DEVNUM, dev->filename,

  00581	0f b6 44 24 73	 movzx	 eax, BYTE PTR scratch$[rsp]
  00586	85 c0		 test	 eax, eax
  00588	74 11		 je	 SHORT $LN51@ReqAutoMou
  0058a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170314
  00591	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv260[rsp], rax
  00599	eb 10		 jmp	 SHORT $LN52@ReqAutoMou
$LN51@ReqAutoMou:
  0059b	48 8d 84 24 60
	01 00 00	 lea	 rax, QWORD PTR volser$[rsp]
  005a3	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv260[rsp], rax
$LN52@ReqAutoMou:
  005ab	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005b3	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  005ba	83 f8 01	 cmp	 eax, 1
  005bd	75 14		 jne	 SHORT $LN63@ReqAutoMou
  005bf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170315
  005c6	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv286[rsp], rax
  005ce	e9 1e 01 00 00	 jmp	 $LN64@ReqAutoMou
$LN63@ReqAutoMou:
  005d3	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005db	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  005e2	83 f8 02	 cmp	 eax, 2
  005e5	75 14		 jne	 SHORT $LN61@ReqAutoMou
  005e7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170316
  005ee	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv285[rsp], rax
  005f6	e9 e6 00 00 00	 jmp	 $LN62@ReqAutoMou
$LN61@ReqAutoMou:
  005fb	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00603	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0060a	83 f8 03	 cmp	 eax, 3
  0060d	75 14		 jne	 SHORT $LN59@ReqAutoMou
  0060f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170317
  00616	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv284[rsp], rax
  0061e	e9 ae 00 00 00	 jmp	 $LN60@ReqAutoMou
$LN59@ReqAutoMou:
  00623	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0062b	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00632	83 f8 04	 cmp	 eax, 4
  00635	75 11		 jne	 SHORT $LN57@ReqAutoMou
  00637	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170318
  0063e	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv283[rsp], rax
  00646	eb 79		 jmp	 SHORT $LN58@ReqAutoMou
$LN57@ReqAutoMou:
  00648	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00650	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00657	83 f8 05	 cmp	 eax, 5
  0065a	75 11		 jne	 SHORT $LN55@ReqAutoMou
  0065c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170319
  00663	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv282[rsp], rax
  0066b	eb 44		 jmp	 SHORT $LN56@ReqAutoMou
$LN55@ReqAutoMou:
  0066d	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00675	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0067c	83 f8 06	 cmp	 eax, 6
  0067f	75 11		 jne	 SHORT $LN53@ReqAutoMou
  00681	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170320
  00688	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv281[rsp], rax
  00690	eb 0f		 jmp	 SHORT $LN54@ReqAutoMou
$LN53@ReqAutoMou:
  00692	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170321
  00699	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv281[rsp], rax
$LN54@ReqAutoMou:
  006a1	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tv281[rsp]
  006a9	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv282[rsp], rax
$LN56@ReqAutoMou:
  006b1	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv282[rsp]
  006b9	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv283[rsp], rax
$LN58@ReqAutoMou:
  006c1	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv283[rsp]
  006c9	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv284[rsp], rax
$LN60@ReqAutoMou:
  006d1	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv284[rsp]
  006d9	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv285[rsp], rax
$LN62@ReqAutoMou:
  006e1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tv285[rsp]
  006e9	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv286[rsp], rax
$LN64@ReqAutoMou:
  006f1	48 83 bc 24 a0
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  006fa	74 15		 je	 SHORT $LN65@ReqAutoMou
  006fc	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00704	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00708	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv293[rsp], eax
  0070f	eb 0b		 jmp	 SHORT $LN66@ReqAutoMou
$LN65@ReqAutoMou:
  00711	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv293[rsp], 0
$LN66@ReqAutoMou:
  0071c	48 83 bc 24 a0
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00725	74 17		 je	 SHORT $LN67@ReqAutoMou
  00727	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0072f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00733	d1 f8		 sar	 eax, 1
  00735	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv299[rsp], eax
  0073c	eb 0b		 jmp	 SHORT $LN68@ReqAutoMou
$LN67@ReqAutoMou:
  0073e	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv299[rsp], 0
$LN68@ReqAutoMou:
  00749	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00751	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00757	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv288[rsp], rax
  0075f	b9 01 00 00 00	 mov	 ecx, 1
  00764	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0076a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv260[rsp]
  00772	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00777	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR lbltype$[rsp]
  0077f	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00784	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv286[rsp]
  0078c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00791	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv288[rsp]
  00799	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0079e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv293[rsp]
  007a5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  007a9	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv299[rsp]
  007b0	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  007b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170322
  007bb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170323
  007c7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007cc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007d1	41 b9 03 00 00
	00		 mov	 r9d, 3
  007d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170324
  007de	ba 9f 08 00 00	 mov	 edx, 2207		; 0000089fH
  007e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170325
  007ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN36@ReqAutoMou:

; 2206 :                 TTYPSTR( dev->tapedevt ),
; 2207 :                 lbltype, scratch ? "<scratch>" : volser );
; 2208 :         }
; 2209 :         if (mountreq)

  007f0	0f b6 44 24 72	 movzx	 eax, BYTE PTR mountreq$[rsp]
  007f5	85 c0		 test	 eax, eax
  007f7	0f 84 6f 02 00
	00		 je	 $LN37@ReqAutoMou

; 2210 :         {
; 2211 :             // "%1d:%04X Tape file '%s', type '%s': '%s' tape volume '%s' being auto loaded"
; 2212 :             WRMSG( HHC00227, "I", LCSS_DEVNUM, dev->filename,

  007fd	0f b6 44 24 73	 movzx	 eax, BYTE PTR scratch$[rsp]
  00802	85 c0		 test	 eax, eax
  00804	74 11		 je	 SHORT $LN69@ReqAutoMou
  00806	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170327
  0080d	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv314[rsp], rax
  00815	eb 10		 jmp	 SHORT $LN70@ReqAutoMou
$LN69@ReqAutoMou:
  00817	48 8d 84 24 60
	01 00 00	 lea	 rax, QWORD PTR volser$[rsp]
  0081f	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv314[rsp], rax
$LN70@ReqAutoMou:
  00827	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0082f	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00836	83 f8 01	 cmp	 eax, 1
  00839	75 14		 jne	 SHORT $LN81@ReqAutoMou
  0083b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170328
  00842	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv340[rsp], rax
  0084a	e9 1e 01 00 00	 jmp	 $LN82@ReqAutoMou
$LN81@ReqAutoMou:
  0084f	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00857	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0085e	83 f8 02	 cmp	 eax, 2
  00861	75 14		 jne	 SHORT $LN79@ReqAutoMou
  00863	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170329
  0086a	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv339[rsp], rax
  00872	e9 e6 00 00 00	 jmp	 $LN80@ReqAutoMou
$LN79@ReqAutoMou:
  00877	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0087f	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00886	83 f8 03	 cmp	 eax, 3
  00889	75 14		 jne	 SHORT $LN77@ReqAutoMou
  0088b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170330
  00892	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv338[rsp], rax
  0089a	e9 ae 00 00 00	 jmp	 $LN78@ReqAutoMou
$LN77@ReqAutoMou:
  0089f	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008a7	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  008ae	83 f8 04	 cmp	 eax, 4
  008b1	75 11		 jne	 SHORT $LN75@ReqAutoMou
  008b3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170331
  008ba	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv337[rsp], rax
  008c2	eb 79		 jmp	 SHORT $LN76@ReqAutoMou
$LN75@ReqAutoMou:
  008c4	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008cc	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  008d3	83 f8 05	 cmp	 eax, 5
  008d6	75 11		 jne	 SHORT $LN73@ReqAutoMou
  008d8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170332
  008df	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv336[rsp], rax
  008e7	eb 44		 jmp	 SHORT $LN74@ReqAutoMou
$LN73@ReqAutoMou:
  008e9	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008f1	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  008f8	83 f8 06	 cmp	 eax, 6
  008fb	75 11		 jne	 SHORT $LN71@ReqAutoMou
  008fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170333
  00904	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv335[rsp], rax
  0090c	eb 0f		 jmp	 SHORT $LN72@ReqAutoMou
$LN71@ReqAutoMou:
  0090e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170334
  00915	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv335[rsp], rax
$LN72@ReqAutoMou:
  0091d	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv335[rsp]
  00925	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv336[rsp], rax
$LN74@ReqAutoMou:
  0092d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR tv336[rsp]
  00935	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv337[rsp], rax
$LN76@ReqAutoMou:
  0093d	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv337[rsp]
  00945	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv338[rsp], rax
$LN78@ReqAutoMou:
  0094d	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv338[rsp]
  00955	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv339[rsp], rax
$LN80@ReqAutoMou:
  0095d	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv339[rsp]
  00965	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv340[rsp], rax
$LN82@ReqAutoMou:
  0096d	48 83 bc 24 a0
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00976	74 15		 je	 SHORT $LN83@ReqAutoMou
  00978	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00980	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00984	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv347[rsp], eax
  0098b	eb 0b		 jmp	 SHORT $LN84@ReqAutoMou
$LN83@ReqAutoMou:
  0098d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv347[rsp], 0
$LN84@ReqAutoMou:
  00998	48 83 bc 24 a0
	02 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  009a1	74 17		 je	 SHORT $LN85@ReqAutoMou
  009a3	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009ab	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  009af	d1 f8		 sar	 eax, 1
  009b1	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv385[rsp], eax
  009b8	eb 0b		 jmp	 SHORT $LN86@ReqAutoMou
$LN85@ReqAutoMou:
  009ba	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv385[rsp], 0
$LN86@ReqAutoMou:
  009c5	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009cd	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  009d3	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv342[rsp], rax
  009db	b9 01 00 00 00	 mov	 ecx, 1
  009e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009e6	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv314[rsp]
  009ee	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  009f3	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR lbltype$[rsp]
  009fb	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00a00	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv340[rsp]
  00a08	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00a0d	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv342[rsp]
  00a15	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00a1a	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv347[rsp]
  00a21	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00a25	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv385[rsp]
  00a2c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00a30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170335
  00a37	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a3c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170336
  00a43	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a48	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a4d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a53	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170337
  00a5a	ba a6 08 00 00	 mov	 edx, 2214		; 000008a6H
  00a5f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170338
  00a66	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN37@ReqAutoMou:
$LN35@ReqAutoMou:

; 2213 :                 TTYPSTR( dev->tapedevt ),
; 2214 :                 lbltype, scratch ? "<scratch>" : volser );
; 2215 :         }
; 2216 :     }
; 2217 : 
; 2218 :     return rc;

  00a6c	8b 44 24 74	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@ReqAutoMou:
$LN38@ReqAutoMou:

; 2219 : } /* end function ReqAutoMount */

  00a70	48 8b 8c 24 70
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00a78	48 33 cc	 xor	 rcx, rsp
  00a7b	e8 00 00 00 00	 call	 __security_check_cookie
  00a80	48 81 c4 88 02
	00 00		 add	 rsp, 648		; 00000288H
  00a87	5f		 pop	 rdi
  00a88	5e		 pop	 rsi
  00a89	c3		 ret	 0
ReqAutoMount ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
ldpt$ = 32
tv68 = 36
dev$ = 64
IsAtLoadPoint PROC

; 2382 : {

$LN19:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2383 : int ldpt=0;

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR ldpt$[rsp], 0

; 2384 :     if ( dev->fd >= 0 )

  00011	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00016	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  0001d	0f 8c d5 00 00
	00		 jl	 $LN4@IsAtLoadPo

; 2385 :     {
; 2386 :         /* Set load point indicator if tape is at load point */
; 2387 :         switch (dev->tapedevt)

  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00028	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0002f	88 44 24 24	 mov	 BYTE PTR tv68[rsp], al
  00033	80 7c 24 24 01	 cmp	 BYTE PTR tv68[rsp], 1
  00038	74 19		 je	 SHORT $LN7@IsAtLoadPo
  0003a	80 7c 24 24 02	 cmp	 BYTE PTR tv68[rsp], 2
  0003f	0f 84 89 00 00
	00		 je	 $LN13@IsAtLoadPo
  00045	80 7c 24 24 03	 cmp	 BYTE PTR tv68[rsp], 3
  0004a	74 3f		 je	 SHORT $LN11@IsAtLoadPo
  0004c	80 7c 24 24 04	 cmp	 BYTE PTR tv68[rsp], 4
  00051	74 1c		 je	 SHORT $LN9@IsAtLoadPo
$LN7@IsAtLoadPo:

; 2388 :         {
; 2389 :         default:
; 2390 :         case TAPEDEVT_AWSTAPE:
; 2391 :             if (dev->nxtblkpos==0)

  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00058	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  00060	75 08		 jne	 SHORT $LN8@IsAtLoadPo

; 2392 :             {
; 2393 :                 ldpt=1;

  00062	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR ldpt$[rsp], 1
$LN8@IsAtLoadPo:

; 2394 :             }
; 2395 :             break;

  0006a	e9 87 00 00 00	 jmp	 $LN2@IsAtLoadPo
$LN9@IsAtLoadPo:

; 2396 : 
; 2397 :         case TAPEDEVT_HETTAPE:
; 2398 :             if (dev->hetb->cblk == 0)

  0006f	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00074	48 8b 80 28 10
	00 00		 mov	 rax, QWORD PTR [rax+4136]
  0007b	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  0007f	75 08		 jne	 SHORT $LN10@IsAtLoadPo

; 2399 :             {
; 2400 :                 ldpt=1;

  00081	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR ldpt$[rsp], 1
$LN10@IsAtLoadPo:

; 2401 :             }
; 2402 :             break;

  00089	eb 6b		 jmp	 SHORT $LN2@IsAtLoadPo
$LN11@IsAtLoadPo:

; 2403 : 
; 2404 : #if defined(OPTION_SCSI_TAPE)
; 2405 :         case TAPEDEVT_SCSITAPE:
; 2406 :             int_scsi_status_update( dev, 0 );

  0008b	33 d2		 xor	 edx, edx
  0008d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00092	e8 00 00 00 00	 call	 int_scsi_status_update

; 2407 :             if ( STS_BOT( dev ) )

  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0009c	8b 80 88 10 00
	00		 mov	 eax, DWORD PTR [rax+4232]
  000a2	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  000a7	85 c0		 test	 eax, eax
  000a9	74 21		 je	 SHORT $LN12@IsAtLoadPo

; 2408 :             {
; 2409 :                 dev->eotwarning = 0;

  000ab	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000b0	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  000b6	83 e0 df	 and	 eax, -33		; ffffffdfH
  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  000be	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 2410 :                 ldpt=1;

  000c4	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR ldpt$[rsp], 1
$LN12@IsAtLoadPo:

; 2411 :             }
; 2412 :             break;

  000cc	eb 28		 jmp	 SHORT $LN2@IsAtLoadPo
$LN13@IsAtLoadPo:

; 2413 : #endif /* defined(OPTION_SCSI_TAPE) */
; 2414 : 
; 2415 :         case TAPEDEVT_OMATAPE:
; 2416 :             if (dev->nxtblkpos == 0 && dev->curfilen == 1)

  000ce	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000d3	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  000db	75 19		 jne	 SHORT $LN14@IsAtLoadPo
  000dd	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000e2	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  000e9	83 f8 01	 cmp	 eax, 1
  000ec	75 08		 jne	 SHORT $LN14@IsAtLoadPo

; 2417 :             {
; 2418 :                 ldpt=1;

  000ee	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR ldpt$[rsp], 1
$LN14@IsAtLoadPo:
$LN2@IsAtLoadPo:

; 2419 :             }
; 2420 :             break;
; 2421 :         } /* end switch(dev->tapedevt) */
; 2422 :     }

  000f6	eb 41		 jmp	 SHORT $LN5@IsAtLoadPo
$LN4@IsAtLoadPo:

; 2423 :     else // ( dev->fd < 0 )
; 2424 :     {
; 2425 :         if ( TAPEDEVT_SCSITAPE == dev->tapedevt )

  000f8	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000fd	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00104	83 f8 03	 cmp	 eax, 3
  00107	75 0a		 jne	 SHORT $LN15@IsAtLoadPo

; 2426 :             ldpt=0; /* (tape cannot possibly be at loadpoint

  00109	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR ldpt$[rsp], 0
  00111	eb 26		 jmp	 SHORT $LN16@IsAtLoadPo
$LN15@IsAtLoadPo:

; 2427 :                         if the device cannot even be opened!) */
; 2428 :         else if ( strcmp( dev->filename, TAPE_UNLOADED ) != 0 )

  00113	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00118	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0011e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170444
  00125	48 8b c8	 mov	 rcx, rax
  00128	e8 00 00 00 00	 call	 strcmp
  0012d	85 c0		 test	 eax, eax
  0012f	74 08		 je	 SHORT $LN17@IsAtLoadPo

; 2429 :         {
; 2430 :             /* If the tape has a filename but the tape is not yet */
; 2431 :             /* opened, then we are at loadpoint                   */
; 2432 :             ldpt=1;

  00131	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR ldpt$[rsp], 1
$LN17@IsAtLoadPo:
$LN16@IsAtLoadPo:
$LN5@IsAtLoadPo:

; 2433 :         }
; 2434 :     }
; 2435 :     return ldpt;

  00139	8b 44 24 20	 mov	 eax, DWORD PTR ldpt$[rsp]

; 2436 : 
; 2437 : } /* end function IsAtLoadPoint */

  0013d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00141	c3		 ret	 0
IsAtLoadPoint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
tv197 = 32
msg1$1 = 40
msg2$2 = 56
__$ArrayPad$ = 72
dev$ = 96
msgbfr$ = 104
lenbfr$ = 112
GetDisplayMsg PROC

; 2227 : {

$LN45:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 48	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2228 :     msgbfr[0]=0;

  00022	b8 01 00 00 00	 mov	 eax, 1
  00027	48 6b c0 00	 imul	 rax, rax, 0
  0002b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  00030	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 2229 : 
; 2230 :     if ( !dev->tdparms.displayfeat )

  00034	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00039	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  0003f	c1 e8 09	 shr	 eax, 9
  00042	83 e0 01	 and	 eax, 1
  00045	85 c0		 test	 eax, eax
  00047	75 25		 jne	 SHORT $LN16@GetDisplay

; 2231 :     {
; 2232 :         // (drive doesn't have a display)
; 2233 : #if defined(OPTION_SCSI_TAPE)
; 2234 :         if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  00049	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0004e	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00055	83 f8 03	 cmp	 eax, 3
  00058	75 0f		 jne	 SHORT $LN17@GetDisplay

; 2235 :             int_scsi_status_update( dev, 1 );

  0005a	ba 01 00 00 00	 mov	 edx, 1
  0005f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  00064	e8 00 00 00 00	 call	 int_scsi_status_update
$LN17@GetDisplay:

; 2236 : #endif
; 2237 :         return;

  00069	e9 e6 05 00 00	 jmp	 $LN1@GetDisplay
$LN16@GetDisplay:

; 2238 :     }
; 2239 : 
; 2240 :     if ( !IS_TAPEDISPTYP_SYSMSG( dev ) )

  0006e	33 c0		 xor	 eax, eax
  00070	85 c0		 test	 eax, eax
  00072	0f 85 50 02 00
	00		 jne	 $LN18@GetDisplay
  00078	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0007d	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00084	85 c0		 test	 eax, eax
  00086	0f 84 3c 02 00
	00		 je	 $LN18@GetDisplay
  0008c	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00091	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  00098	83 f8 01	 cmp	 eax, 1
  0009b	0f 84 27 02 00
	00		 je	 $LN18@GetDisplay
  000a1	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  000a6	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  000ad	83 f8 02	 cmp	 eax, 2
  000b0	0f 84 12 02 00
	00		 je	 $LN18@GetDisplay
  000b6	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  000bb	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  000c2	83 f8 03	 cmp	 eax, 3
  000c5	0f 84 fd 01 00
	00		 je	 $LN18@GetDisplay
  000cb	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  000d0	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  000d7	83 f8 04	 cmp	 eax, 4
  000da	0f 84 e8 01 00
	00		 je	 $LN18@GetDisplay
  000e0	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  000e5	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  000ec	83 f8 05	 cmp	 eax, 5
  000ef	0f 84 d3 01 00
	00		 je	 $LN18@GetDisplay

; 2241 :     {
; 2242 :         // -------------------------
; 2243 :         //   Display Host message
; 2244 :         // -------------------------
; 2245 : 
; 2246 :         // "When bit 3 (alternate) is set to 1, then
; 2247 :         //  bits 4 (blink) and 5 (low/high) are ignored."
; 2248 : 
; 2249 :         strlcpy( msgbfr, "\"", lenbfr );

  000f5	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170368
  00101	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 2250 : 
; 2251 :         if ( dev->tapedispflags & TAPEDISPFLG_ALTERNATE )

  0010c	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00111	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  00118	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0011d	85 c0		 test	 eax, eax
  0011f	0f 84 e2 00 00
	00		 je	 $LN19@GetDisplay

; 2252 :         {
; 2253 :             char  msg1[9];
; 2254 :             char  msg2[9];
; 2255 : 
; 2256 :             STRLCPY( msg1,   dev->tapemsg1 );

  00125	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0012a	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  00130	41 b8 09 00 00
	00		 mov	 r8d, 9
  00136	48 8b d0	 mov	 rdx, rax
  00139	48 8d 4c 24 28	 lea	 rcx, QWORD PTR msg1$1[rsp]
  0013e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 2257 :             STRLCAT( msg1,   "        "    );

  00144	41 b8 09 00 00
	00		 mov	 r8d, 9
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170371
  00151	48 8d 4c 24 28	 lea	 rcx, QWORD PTR msg1$1[rsp]
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2258 :             STRLCPY( msg2,   dev->tapemsg2 );

  0015c	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00161	48 05 29 11 00
	00		 add	 rax, 4393		; 00001129H
  00167	41 b8 09 00 00
	00		 mov	 r8d, 9
  0016d	48 8b d0	 mov	 rdx, rax
  00170	48 8d 4c 24 38	 lea	 rcx, QWORD PTR msg2$2[rsp]
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 2259 :             STRLCAT( msg2,   "        "    );

  0017b	41 b8 09 00 00
	00		 mov	 r8d, 9
  00181	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170372
  00188	48 8d 4c 24 38	 lea	 rcx, QWORD PTR msg2$2[rsp]
  0018d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2260 : 
; 2261 :             strlcat( msgbfr, msg1,             lenbfr );

  00193	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  00198	48 8d 54 24 28	 lea	 rdx, QWORD PTR msg1$1[rsp]
  0019d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  001a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2262 :             strlcat( msgbfr, "\" / \"",        lenbfr );

  001a8	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170373
  001b4	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  001b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2263 :             strlcat( msgbfr, msg2,             lenbfr );

  001bf	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  001c4	48 8d 54 24 38	 lea	 rdx, QWORD PTR msg2$2[rsp]
  001c9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  001ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2264 :             strlcat( msgbfr, "\"",             lenbfr );

  001d4	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  001d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170374
  001e0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  001e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2265 :             strlcat( msgbfr, " (alternating)", lenbfr );

  001eb	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  001f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170375
  001f7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  001fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2266 :         }

  00202	e9 92 00 00 00	 jmp	 $LN20@GetDisplay
$LN19@GetDisplay:

; 2267 :         else
; 2268 :         {
; 2269 :             if ( dev->tapedispflags & TAPEDISPFLG_MESSAGE2 )

  00207	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0020c	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  00213	83 e0 20	 and	 eax, 32			; 00000020H
  00216	85 c0		 test	 eax, eax
  00218	74 20		 je	 SHORT $LN21@GetDisplay

; 2270 :                 strlcat( msgbfr, dev->tapemsg2, lenbfr );

  0021a	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0021f	48 05 29 11 00
	00		 add	 rax, 4393		; 00001129H
  00225	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  0022a	48 8b d0	 mov	 rdx, rax
  0022d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  00232	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  00238	eb 1e		 jmp	 SHORT $LN22@GetDisplay
$LN21@GetDisplay:

; 2271 :             else
; 2272 :                 strlcat( msgbfr, dev->tapemsg1, lenbfr );

  0023a	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0023f	48 05 20 11 00
	00		 add	 rax, 4384		; 00001120H
  00245	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  0024a	48 8b d0	 mov	 rdx, rax
  0024d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  00252	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN22@GetDisplay:

; 2273 : 
; 2274 :             strlcat ( msgbfr, "\"",          lenbfr );

  00258	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  0025d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170378
  00264	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  00269	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2275 : 
; 2276 :             if ( dev->tapedispflags & TAPEDISPFLG_BLINKING )

  0026f	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00274	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  0027b	83 e0 40	 and	 eax, 64			; 00000040H
  0027e	85 c0		 test	 eax, eax
  00280	74 17		 je	 SHORT $LN23@GetDisplay

; 2277 :                 strlcat ( msgbfr, " (blinking)", lenbfr );

  00282	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  00287	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170380
  0028e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  00293	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN23@GetDisplay:
$LN20@GetDisplay:

; 2278 :         }
; 2279 : 
; 2280 :         if ( dev->tapedispflags & TAPEDISPFLG_AUTOLOADER )

  00299	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0029e	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  002a5	83 e0 10	 and	 eax, 16
  002a8	85 c0		 test	 eax, eax
  002aa	74 17		 je	 SHORT $LN24@GetDisplay

; 2281 :             strlcat( msgbfr, " (AUTOLOADER)", lenbfr );

  002ac	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  002b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170382
  002b8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  002bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN24@GetDisplay:

; 2282 : 
; 2283 :         return;

  002c3	e9 8c 03 00 00	 jmp	 $LN1@GetDisplay
$LN18@GetDisplay:

; 2284 :     }
; 2285 : 
; 2286 :     // ----------------------------------------------
; 2287 :     //   Display SYS message (Unit/Device message)
; 2288 :     // ----------------------------------------------
; 2289 : 
; 2290 :     // First, build the system message, then move it into
; 2291 :     // the caller's buffer...
; 2292 : 
; 2293 :     STRLCPY( dev->tapesysmsg, "\"" );

  002c8	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  002cd	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  002d3	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  002d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170383
  002e0	48 8b c8	 mov	 rcx, rax
  002e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 2294 : 
; 2295 :     switch ( dev->tapedisptype )

  002e9	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  002ee	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  002f5	89 44 24 20	 mov	 DWORD PTR tv197[rsp], eax
  002f9	83 7c 24 20 09	 cmp	 DWORD PTR tv197[rsp], 9
  002fe	77 18		 ja	 SHORT $LN27@GetDisplay
  00300	48 63 44 24 20	 movsxd	 rax, DWORD PTR tv197[rsp]
  00305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0030c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN44@GetDisplay[rcx+rax*4]
  00313	48 03 c1	 add	 rax, rcx
  00316	ff e0		 jmp	 rax
$LN25@GetDisplay:
$LN26@GetDisplay:
$LN27@GetDisplay:

; 2296 :     {
; 2297 :     case TAPEDISPTYP_IDLE:
; 2298 :     case TAPEDISPTYP_WAITACT:
; 2299 :     default:
; 2300 :         // Blank display if no tape loaded...
; 2301 :         if ( !dev->tmh->tapeloaded( dev, NULL, 0 ) )

  00318	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0031d	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00324	45 33 c0	 xor	 r8d, r8d
  00327	33 d2		 xor	 edx, edx
  00329	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  0032e	ff 50 70	 call	 QWORD PTR [rax+112]
  00331	85 c0		 test	 eax, eax
  00333	75 26		 jne	 SHORT $LN28@GetDisplay

; 2302 :         {
; 2303 :             STRLCAT( dev->tapesysmsg, "        " );

  00335	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0033a	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  00340	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00346	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170388
  0034d	48 8b c8	 mov	 rcx, rax
  00350	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2304 :             break;

  00356	e9 ba 02 00 00	 jmp	 $LN2@GetDisplay
$LN28@GetDisplay:
$LN6@GetDisplay:

; 2305 :         }
; 2306 : 
; 2307 :         // " NT RDY " if tape IS loaded, but not ready...
; 2308 :         // (IBM docs say " NT RDY " means "Loaded but not ready")
; 2309 : 
; 2310 :         ASSERT( dev->tmh->tapeloaded( dev, NULL, 0 ) );

  0035b	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00360	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00367	45 33 c0	 xor	 r8d, r8d
  0036a	33 d2		 xor	 edx, edx
  0036c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  00371	ff 50 70	 call	 QWORD PTR [rax+112]
  00374	85 c0		 test	 eax, eax
  00376	75 5c		 jne	 SHORT $LN29@GetDisplay
$LN9@GetDisplay:
  00378	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG170390
  0037f	41 b8 06 09 00
	00		 mov	 r8d, 2310		; 00000906H
  00385	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170391
  0038c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170392
  00393	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00399	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0039f	85 c0		 test	 eax, eax
  003a1	74 20		 je	 SHORT $LN30@GetDisplay
  003a3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG170394
  003aa	41 b8 06 09 00
	00		 mov	 r8d, 2310		; 00000906H
  003b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170395
  003b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170396
  003be	e8 00 00 00 00	 call	 DebuggerTrace
$LN30@GetDisplay:
  003c3	33 c0		 xor	 eax, eax
  003c5	85 c0		 test	 eax, eax
  003c7	75 af		 jne	 SHORT $LN9@GetDisplay
  003c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  003cf	85 c0		 test	 eax, eax
  003d1	74 01		 je	 SHORT $LN31@GetDisplay
  003d3	cc		 int	 3
$LN31@GetDisplay:
$LN29@GetDisplay:
  003d4	33 c0		 xor	 eax, eax
  003d6	85 c0		 test	 eax, eax
  003d8	75 81		 jne	 SHORT $LN6@GetDisplay

; 2311 : 
; 2312 :         if (0
; 2313 :             || dev->fd < 0
; 2314 : #if defined(OPTION_SCSI_TAPE)
; 2315 :             || (1

  003da	33 c0		 xor	 eax, eax
  003dc	85 c0		 test	 eax, eax
  003de	75 3a		 jne	 SHORT $LN33@GetDisplay
  003e0	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  003e5	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  003ec	7c 2c		 jl	 SHORT $LN33@GetDisplay
  003ee	33 c0		 xor	 eax, eax
  003f0	83 f8 01	 cmp	 eax, 1
  003f3	74 4b		 je	 SHORT $LN32@GetDisplay
  003f5	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  003fa	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00401	83 f8 03	 cmp	 eax, 3
  00404	75 3a		 jne	 SHORT $LN32@GetDisplay
  00406	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0040b	8b 80 88 10 00
	00		 mov	 eax, DWORD PTR [rax+4232]
  00411	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00416	85 c0		 test	 eax, eax
  00418	75 26		 jne	 SHORT $LN32@GetDisplay
$LN33@GetDisplay:

; 2316 :                 && TAPEDEVT_SCSITAPE == dev->tapedevt
; 2317 :                 && !STS_ONLINE( dev )
; 2318 :                )
; 2319 : #endif
; 2320 :         )
; 2321 :         {
; 2322 :             STRLCAT( dev->tapesysmsg, " NT RDY " );

  0041a	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0041f	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  00425	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0042b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170400
  00432	48 8b c8	 mov	 rcx, rax
  00435	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2323 :             break;

  0043b	e9 d5 01 00 00	 jmp	 $LN2@GetDisplay
$LN32@GetDisplay:
$LN12@GetDisplay:

; 2324 :         }
; 2325 : 
; 2326 :         // Otherwise tape is loaded and ready  -->  "READY"
; 2327 : 
; 2328 :         ASSERT( dev->tmh->tapeloaded( dev, NULL, 0 ) );

  00440	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00445	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  0044c	45 33 c0	 xor	 r8d, r8d
  0044f	33 d2		 xor	 edx, edx
  00451	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  00456	ff 50 70	 call	 QWORD PTR [rax+112]
  00459	85 c0		 test	 eax, eax
  0045b	75 5c		 jne	 SHORT $LN34@GetDisplay
$LN15@GetDisplay:
  0045d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG170402
  00464	41 b8 18 09 00
	00		 mov	 r8d, 2328		; 00000918H
  0046a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170403
  00471	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170404
  00478	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0047e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00484	85 c0		 test	 eax, eax
  00486	74 20		 je	 SHORT $LN35@GetDisplay
  00488	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG170406
  0048f	41 b8 18 09 00
	00		 mov	 r8d, 2328		; 00000918H
  00495	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170407
  0049c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170408
  004a3	e8 00 00 00 00	 call	 DebuggerTrace
$LN35@GetDisplay:
  004a8	33 c0		 xor	 eax, eax
  004aa	85 c0		 test	 eax, eax
  004ac	75 af		 jne	 SHORT $LN15@GetDisplay
  004ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  004b4	85 c0		 test	 eax, eax
  004b6	74 01		 je	 SHORT $LN36@GetDisplay
  004b8	cc		 int	 3
$LN36@GetDisplay:
$LN34@GetDisplay:
  004b9	33 c0		 xor	 eax, eax
  004bb	85 c0		 test	 eax, eax
  004bd	75 81		 jne	 SHORT $LN12@GetDisplay

; 2329 : 
; 2330 :         STRLCAT( dev->tapesysmsg, " READY  " );

  004bf	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  004c4	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  004ca	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  004d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170410
  004d7	48 8b c8	 mov	 rcx, rax
  004da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2331 :         STRLCAT( dev->tapesysmsg, "\"" );

  004e0	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  004e5	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  004eb	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  004f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170411
  004f8	48 8b c8	 mov	 rcx, rax
  004fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2332 : 
; 2333 :         if (0
; 2334 :             || dev->readonly
; 2335 : #if defined(OPTION_SCSI_TAPE)
; 2336 :             || (1

  00501	33 c0		 xor	 eax, eax
  00503	85 c0		 test	 eax, eax
  00505	75 40		 jne	 SHORT $LN38@GetDisplay
  00507	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0050c	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00512	d1 e8		 shr	 eax, 1
  00514	83 e0 01	 and	 eax, 1
  00517	85 c0		 test	 eax, eax
  00519	75 2c		 jne	 SHORT $LN38@GetDisplay
  0051b	33 c0		 xor	 eax, eax
  0051d	83 f8 01	 cmp	 eax, 1
  00520	74 46		 je	 SHORT $LN37@GetDisplay
  00522	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00527	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0052e	83 f8 03	 cmp	 eax, 3
  00531	75 35		 jne	 SHORT $LN37@GetDisplay
  00533	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00538	8b 80 88 10 00
	00		 mov	 eax, DWORD PTR [rax+4232]
  0053e	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00543	85 c0		 test	 eax, eax
  00545	74 21		 je	 SHORT $LN37@GetDisplay
$LN38@GetDisplay:

; 2337 :                 &&  TAPEDEVT_SCSITAPE == dev->tapedevt
; 2338 :                 &&  STS_WR_PROT( dev )
; 2339 :                )
; 2340 : #endif
; 2341 :         )
; 2342 :             // (append "file protect" indicator)
; 2343 :             STRLCAT( dev->tapesysmsg, " *FP*" );

  00547	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0054c	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  00552	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00558	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170414
  0055f	48 8b c8	 mov	 rcx, rax
  00562	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN37@GetDisplay:

; 2344 : 
; 2345 :         // Copy system message to caller's buffer
; 2346 :         strlcpy( msgbfr, dev->tapesysmsg, lenbfr );

  00568	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0056d	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  00573	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  00578	48 8b d0	 mov	 rdx, rax
  0057b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  00580	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 2347 :         return;

  00586	e9 c9 00 00 00	 jmp	 $LN1@GetDisplay
$LN39@GetDisplay:

; 2348 : 
; 2349 :     case TAPEDISPTYP_ERASING:
; 2350 :         STRLCAT( dev->tapesysmsg, " ERASING" );

  0058b	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00590	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  00596	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0059c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170416
  005a3	48 8b c8	 mov	 rcx, rax
  005a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2351 :         break;

  005ac	eb 67		 jmp	 SHORT $LN2@GetDisplay
$LN40@GetDisplay:

; 2352 : 
; 2353 :     case TAPEDISPTYP_REWINDING:
; 2354 :         STRLCAT( dev->tapesysmsg, "REWINDNG" );

  005ae	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  005b3	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  005b9	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  005bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170418
  005c6	48 8b c8	 mov	 rcx, rax
  005c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2355 :         break;

  005cf	eb 44		 jmp	 SHORT $LN2@GetDisplay
$LN41@GetDisplay:

; 2356 : 
; 2357 :     case TAPEDISPTYP_UNLOADING:
; 2358 :         STRLCAT( dev->tapesysmsg, "UNLOADNG" );

  005d1	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  005d6	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  005dc	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  005e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170420
  005e9	48 8b c8	 mov	 rcx, rax
  005ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2359 :         break;

  005f2	eb 21		 jmp	 SHORT $LN2@GetDisplay
$LN42@GetDisplay:

; 2360 : 
; 2361 :     case TAPEDISPTYP_CLEAN:
; 2362 :         STRLCAT( dev->tapesysmsg, "*CLEAN  " );

  005f4	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  005f9	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  005ff	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00605	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170422
  0060c	48 8b c8	 mov	 rcx, rax
  0060f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN2@GetDisplay:

; 2363 :         break;
; 2364 :     }
; 2365 : 
; 2366 :     STRLCAT( dev->tapesysmsg, "\"" );

  00615	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0061a	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  00620	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00626	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170423
  0062d	48 8b c8	 mov	 rcx, rax
  00630	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 2367 : 
; 2368 :     // Copy system message to caller's buffer
; 2369 :     strlcpy( msgbfr, dev->tapesysmsg, lenbfr );

  00636	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0063b	48 05 32 11 00
	00		 add	 rax, 4402		; 00001132H
  00641	4c 8b 44 24 70	 mov	 r8, QWORD PTR lenbfr$[rsp]
  00646	48 8b d0	 mov	 rdx, rax
  00649	48 8b 4c 24 68	 mov	 rcx, QWORD PTR msgbfr$[rsp]
  0064e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN1@GetDisplay:

; 2370 : 
; 2371 : } /* end function GetDisplayMsg */

  00654	48 8b 4c 24 48	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00659	48 33 cc	 xor	 rcx, rsp
  0065c	e8 00 00 00 00	 call	 __security_check_cookie
  00661	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00665	c3		 ret	 0
  00666	66 90		 npad	 2
$LN44@GetDisplay:
  00668	00 00 00 00	 DD	 $LN25@GetDisplay
  0066c	00 00 00 00	 DD	 $LN27@GetDisplay
  00670	00 00 00 00	 DD	 $LN39@GetDisplay
  00674	00 00 00 00	 DD	 $LN40@GetDisplay
  00678	00 00 00 00	 DD	 $LN41@GetDisplay
  0067c	00 00 00 00	 DD	 $LN42@GetDisplay
  00680	00 00 00 00	 DD	 $LN27@GetDisplay
  00684	00 00 00 00	 DD	 $LN27@GetDisplay
  00688	00 00 00 00	 DD	 $LN27@GetDisplay
  0068c	00 00 00 00	 DD	 $LN26@GetDisplay
GetDisplayMsg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
optrc$ = 112
i$ = 116
lock_obtained$ = 120
f$1 = 121
f$2 = 122
c$3 = 123
c$4 = 124
rc$ = 128
eotmargin$5 = 136
maxsize$6 = 144
rc$7 = 152
tv1000 = 156
rc$8 = 160
tv1195 = 164
tv257 = 168
tv325 = 172
tv331 = 176
tv387 = 180
tv393 = 184
tv450 = 188
tv456 = 192
tv469 = 196
tv548 = 200
tv554 = 204
tv602 = 208
tv608 = 212
tv667 = 216
tv673 = 220
tv753 = 224
tv759 = 228
tv818 = 232
tv824 = 236
tv872 = 240
tv878 = 244
tv960 = 248
tv966 = 252
tv1093 = 256
tv1099 = 260
tv1151 = 264
tv1157 = 268
tv1288 = 272
tv1294 = 276
tv1349 = 280
tv1355 = 284
tv1368 = 288
tv1412 = 292
tv1418 = 296
tv1470 = 300
tv1508 = 304
tv1560 = 308
tv1566 = 312
tv1579 = 316
tv69 = 320
tv1629 = 324
tv1713 = 328
tv1719 = 332
tv1771 = 336
tv1777 = 340
tv1829 = 344
tv1835 = 348
tv1623 = 352
tv1925 = 356
tv1974 = 360
tv1980 = 364
tv2027 = 368
tv2033 = 372
tv2090 = 376
tv71 = 380
tv1887 = 384
short_descr$ = 392
tv281 = 400
tv282 = 408
tv283 = 416
tv284 = 424
tv285 = 432
tv286 = 440
tv375 = 448
tv376 = 456
tv377 = 464
tv378 = 472
tv379 = 480
tv380 = 488
tv438 = 496
tv439 = 504
tv440 = 512
tv441 = 520
tv442 = 528
tv443 = 536
tv504 = 544
tv505 = 552
tv506 = 560
tv507 = 568
tv508 = 576
tv509 = 584
tv590 = 592
tv591 = 600
tv592 = 608
tv593 = 616
tv594 = 624
tv595 = 632
tv655 = 640
tv656 = 648
tv657 = 656
tv658 = 664
tv659 = 672
tv660 = 680
tv741 = 688
tv742 = 696
tv743 = 704
tv744 = 712
tv745 = 720
tv746 = 728
tv806 = 736
tv807 = 744
tv808 = 752
tv809 = 760
tv810 = 768
tv811 = 776
tv860 = 784
tv861 = 792
tv862 = 800
tv863 = 808
tv864 = 816
tv865 = 824
tv948 = 832
tv949 = 840
tv950 = 848
tv951 = 856
tv952 = 864
tv953 = 872
tv1049 = 880
tv1050 = 888
tv1051 = 896
tv1052 = 904
tv1053 = 912
tv1054 = 920
tv1139 = 928
tv1140 = 936
tv1141 = 944
tv1142 = 952
tv1143 = 960
tv1144 = 968
tv1244 = 976
tv1245 = 984
tv1246 = 992
tv1247 = 1000
tv1280 = 1008
tv1281 = 1016
tv1337 = 1024
tv1338 = 1032
tv1339 = 1040
tv1340 = 1048
tv1341 = 1056
tv1342 = 1064
tv1400 = 1072
tv1401 = 1080
tv1402 = 1088
tv1403 = 1096
tv1404 = 1104
tv1405 = 1112
tv1458 = 1120
tv1459 = 1128
tv1460 = 1136
tv1461 = 1144
tv1462 = 1152
tv1463 = 1160
tv1548 = 1168
tv1549 = 1176
tv1550 = 1184
tv1551 = 1192
tv1552 = 1200
tv1553 = 1208
tv1611 = 1216
tv1612 = 1224
tv1613 = 1232
tv1614 = 1240
tv1615 = 1248
tv1616 = 1256
tv1701 = 1264
tv1702 = 1272
tv1703 = 1280
tv1704 = 1288
tv1705 = 1296
tv1706 = 1304
tv1759 = 1312
tv1760 = 1320
tv1761 = 1328
tv1762 = 1336
tv1763 = 1344
tv1764 = 1352
tv1817 = 1360
tv1818 = 1368
tv1819 = 1376
tv1820 = 1384
tv1821 = 1392
tv1822 = 1400
tv1875 = 1408
tv1876 = 1416
tv1877 = 1424
tv1878 = 1432
tv1879 = 1440
tv1880 = 1448
tv1962 = 1456
tv1963 = 1464
tv1964 = 1472
tv1965 = 1480
tv1966 = 1488
tv1967 = 1496
tv2015 = 1504
tv2016 = 1512
tv2017 = 1520
tv2018 = 1528
tv2019 = 1536
tv2020 = 1544
tv259 = 1552
tv320 = 1560
tv353 = 1568
tv382 = 1576
tv416 = 1584
tv445 = 1592
tv482 = 1600
tv511 = 1608
tv568 = 1616
tv597 = 1624
tv633 = 1632
tv662 = 1640
tv687 = 1648
tv748 = 1656
tv784 = 1664
tv813 = 1672
tv838 = 1680
tv867 = 1688
tv894 = 1696
tv955 = 1704
tv1027 = 1712
tv1088 = 1720
tv1117 = 1728
tv1146 = 1736
tv1222 = 1744
tv1283 = 1752
tv1315 = 1760
tv1344 = 1768
tv1378 = 1776
tv1407 = 1784
tv1436 = 1792
tv1465 = 1800
tv1526 = 1808
tv1555 = 1816
tv1589 = 1824
tv1618 = 1832
tv1647 = 1840
tv1708 = 1848
tv1737 = 1856
tv1766 = 1864
tv1795 = 1872
tv1824 = 1880
tv1853 = 1888
tv1882 = 1896
tv1940 = 1904
tv1969 = 1912
tv1993 = 1920
tv2022 = 1928
res$ = 1936
msg$ = 2016
__$ArrayPad$ = 2096
dev$ = 2128
argc$ = 2136
argv$ = 2144
mountnewtape PROC

; 1324 : {

$LN542:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec 48 08
	00 00		 sub	 rsp, 2120		; 00000848H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 30
	08 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1325 :     char*       short_descr;            /* Short descr from fmttab   */
; 1326 :     char        msg[80];
; 1327 :     int         i;                      /* Loop control              */
; 1328 :     int         rc, optrc;              /* various rtns return codes */
; 1329 :     bool        lock_obtained = false;  /* true if WE obtained lock  */

  00027	c6 44 24 78 00	 mov	 BYTE PTR lock_obtained$[rsp], 0

; 1330 : 
; 1331 :     union {                                 /* Parser results        */
; 1332 :         U32  num;                           /* Parser results        */
; 1333 :         BYTE str[ MAX_PARSER_STRLEN + 1 ];  /* Parser results        */
; 1334 :     } res;                                  /* Parser results        */
; 1335 : 
; 1336 :     /* Acquire the device lock before proceeding */
; 1337 :     if (!(lock_obtained = ((rc = try_obtain_lock( &dev->lock )) == 0)))

  0002c	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00034	48 83 c0 38	 add	 rax, 56			; 00000038H
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169695
  0003f	48 8b c8	 mov	 rcx, rax
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_try_obtain_lock
  00048	89 84 24 80 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax
  0004f	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  00057	75 0d		 jne	 SHORT $LN145@mountnewta
  00059	c7 84 24 40 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv69[rsp], 1
  00064	eb 0b		 jmp	 SHORT $LN146@mountnewta
$LN145@mountnewta:
  00066	c7 84 24 40 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv69[rsp], 0
$LN146@mountnewta:
  00071	83 bc 24 40 01
	00 00 00	 cmp	 DWORD PTR tv69[rsp], 0
  00079	75 0d		 jne	 SHORT $LN147@mountnewta
  0007b	c7 84 24 7c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv71[rsp], 0
  00086	eb 0b		 jmp	 SHORT $LN148@mountnewta
$LN147@mountnewta:
  00088	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv71[rsp], 1
$LN148@mountnewta:
  00093	0f b6 84 24 7c
	01 00 00	 movzx	 eax, BYTE PTR tv71[rsp]
  0009b	88 44 24 78	 mov	 BYTE PTR lock_obtained$[rsp], al
  0009f	0f b6 44 24 78	 movzx	 eax, BYTE PTR lock_obtained$[rsp]
  000a4	85 c0		 test	 eax, eax
  000a6	75 2b		 jne	 SHORT $LN35@mountnewta

; 1338 :     {
; 1339 :         /* If some other thread (not us) owns it, then wait for it */
; 1340 :         if (rc != EBUSY)

  000a8	83 bc 24 80 00
	00 00 10	 cmp	 DWORD PTR rc$[rsp], 16
  000b0	74 21		 je	 SHORT $LN36@mountnewta

; 1341 :         {
; 1342 :             obtain_lock( &dev->lock );

  000b2	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ba	48 83 c0 38	 add	 rax, 56			; 00000038H
  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169697
  000c5	48 8b c8	 mov	 rcx, rax
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1343 :             lock_obtained = true; /* (so we know to release it) */

  000ce	c6 44 24 78 01	 mov	 BYTE PTR lock_obtained$[rsp], 1
$LN36@mountnewta:
$LN35@mountnewta:

; 1344 :         }
; 1345 :         /* (else: presume we already owned it) */
; 1346 :     }
; 1347 : 
; 1348 :     /* Release the previous OMA descriptor array if allocated */
; 1349 :     if (dev->omadesc != NULL)

  000d3	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000db	48 83 b8 f8 0f
	00 00 00	 cmp	 QWORD PTR [rax+4088], 0
  000e3	74 28		 je	 SHORT $LN37@mountnewta

; 1350 :     {
; 1351 :         free (dev->omadesc);

  000e5	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ed	48 8b 88 f8 0f
	00 00		 mov	 rcx, QWORD PTR [rax+4088]
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1352 :         dev->omadesc = NULL;

  000fa	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00102	48 c7 80 f8 0f
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4088], 0
$LN37@mountnewta:

; 1353 :     }
; 1354 : 
; 1355 :     /* The first argument is the file name */
; 1356 :     if (argc == 0 || strlen(argv[0]) >= sizeof(dev->filename))

  0010d	83 bc 24 58 08
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  00115	74 22		 je	 SHORT $LN40@mountnewta
  00117	b8 08 00 00 00	 mov	 eax, 8
  0011c	48 6b c0 00	 imul	 rax, rax, 0
  00120	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00128	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0012c	e8 00 00 00 00	 call	 strlen
  00131	48 3d 05 01 00
	00		 cmp	 rax, 261		; 00000105H
  00137	72 26		 jb	 SHORT $LN38@mountnewta
$LN40@mountnewta:

; 1357 :         STRLCPY( dev->filename, TAPE_UNLOADED );

  00139	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00141	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00147	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  0014d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169702
  00154	48 8b c8	 mov	 rcx, rax
  00157	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
  0015d	eb 30		 jmp	 SHORT $LN39@mountnewta
$LN38@mountnewta:

; 1358 :     else
; 1359 :     {
; 1360 :         /* Save the file name in the device block */
; 1361 :         hostpath(dev->filename, argv[0], sizeof(dev->filename));

  0015f	b8 08 00 00 00	 mov	 eax, 8
  00164	48 6b c0 00	 imul	 rax, rax, 0
  00168	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00170	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00177	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  0017d	48 8b 94 24 60
	08 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00185	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath
$LN39@mountnewta:
$LN4@mountnewta:

; 1362 :     }
; 1363 : 
; 1364 :     /* Determine tape device type... (initializes "dev->tapedevt") */
; 1365 :     VERIFY( gettapetype( dev, &short_descr ) == 0 );

  0018f	48 8d 94 24 88
	01 00 00	 lea	 rdx, QWORD PTR short_descr$[rsp]
  00197	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0019f	e8 00 00 00 00	 call	 gettapetype
  001a4	85 c0		 test	 eax, eax
  001a6	74 5c		 je	 SHORT $LN41@mountnewta
$LN7@mountnewta:
  001a8	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169704
  001af	41 b8 55 05 00
	00		 mov	 r8d, 1365		; 00000555H
  001b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169705
  001bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169706
  001c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  001c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001cf	85 c0		 test	 eax, eax
  001d1	74 20		 je	 SHORT $LN42@mountnewta
  001d3	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169708
  001da	41 b8 55 05 00
	00		 mov	 r8d, 1365		; 00000555H
  001e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169709
  001e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169710
  001ee	e8 00 00 00 00	 call	 DebuggerTrace
$LN42@mountnewta:
  001f3	33 c0		 xor	 eax, eax
  001f5	85 c0		 test	 eax, eax
  001f7	75 af		 jne	 SHORT $LN7@mountnewta
  001f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  001ff	85 c0		 test	 eax, eax
  00201	74 01		 je	 SHORT $LN43@mountnewta
  00203	cc		 int	 3
$LN43@mountnewta:
$LN41@mountnewta:
  00204	33 c0		 xor	 eax, eax
  00206	85 c0		 test	 eax, eax
  00208	75 85		 jne	 SHORT $LN4@mountnewta
$LN10@mountnewta:

; 1366 : 
; 1367 :     /* (sanity check) */
; 1368 :     ASSERT(dev->tapedevt != TAPEDEVT_UNKNOWN);

  0020a	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00212	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00219	85 c0		 test	 eax, eax
  0021b	75 5c		 jne	 SHORT $LN44@mountnewta
$LN13@mountnewta:
  0021d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169713
  00224	41 b8 58 05 00
	00		 mov	 r8d, 1368		; 00000558H
  0022a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169714
  00231	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169715
  00238	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0023e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00244	85 c0		 test	 eax, eax
  00246	74 20		 je	 SHORT $LN45@mountnewta
  00248	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169717
  0024f	41 b8 58 05 00
	00		 mov	 r8d, 1368		; 00000558H
  00255	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169718
  0025c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169719
  00263	e8 00 00 00 00	 call	 DebuggerTrace
$LN45@mountnewta:
  00268	33 c0		 xor	 eax, eax
  0026a	85 c0		 test	 eax, eax
  0026c	75 af		 jne	 SHORT $LN13@mountnewta
  0026e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00274	85 c0		 test	 eax, eax
  00276	74 01		 je	 SHORT $LN46@mountnewta
  00278	cc		 int	 3
$LN46@mountnewta:
$LN44@mountnewta:
  00279	33 c0		 xor	 eax, eax
  0027b	85 c0		 test	 eax, eax
  0027d	75 8b		 jne	 SHORT $LN10@mountnewta
$LN16@mountnewta:

; 1369 :     ASSERT(dev->tmh != NULL);

  0027f	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00287	48 83 b8 e0 10
	00 00 00	 cmp	 QWORD PTR [rax+4320], 0
  0028f	75 5c		 jne	 SHORT $LN47@mountnewta
$LN19@mountnewta:
  00291	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169722
  00298	41 b8 59 05 00
	00		 mov	 r8d, 1369		; 00000559H
  0029e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169723
  002a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169724
  002ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  002b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  002b8	85 c0		 test	 eax, eax
  002ba	74 20		 je	 SHORT $LN48@mountnewta
  002bc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169726
  002c3	41 b8 59 05 00
	00		 mov	 r8d, 1369		; 00000559H
  002c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169727
  002d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169728
  002d7	e8 00 00 00 00	 call	 DebuggerTrace
$LN48@mountnewta:
  002dc	33 c0		 xor	 eax, eax
  002de	85 c0		 test	 eax, eax
  002e0	75 af		 jne	 SHORT $LN19@mountnewta
  002e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  002e8	85 c0		 test	 eax, eax
  002ea	74 01		 je	 SHORT $LN49@mountnewta
  002ec	cc		 int	 3
$LN49@mountnewta:
$LN47@mountnewta:
  002ed	33 c0		 xor	 eax, eax
  002ef	85 c0		 test	 eax, eax
  002f1	75 8c		 jne	 SHORT $LN16@mountnewta
$LN22@mountnewta:

; 1370 :     ASSERT(short_descr != NULL);

  002f3	48 83 bc 24 88
	01 00 00 00	 cmp	 QWORD PTR short_descr$[rsp], 0
  002fc	75 5c		 jne	 SHORT $LN50@mountnewta
$LN25@mountnewta:
  002fe	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169731
  00305	41 b8 5a 05 00
	00		 mov	 r8d, 1370		; 0000055aH
  0030b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169732
  00312	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169733
  00319	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0031f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00325	85 c0		 test	 eax, eax
  00327	74 20		 je	 SHORT $LN51@mountnewta
  00329	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169735
  00330	41 b8 5a 05 00
	00		 mov	 r8d, 1370		; 0000055aH
  00336	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169736
  0033d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169737
  00344	e8 00 00 00 00	 call	 DebuggerTrace
$LN51@mountnewta:
  00349	33 c0		 xor	 eax, eax
  0034b	85 c0		 test	 eax, eax
  0034d	75 af		 jne	 SHORT $LN25@mountnewta
  0034f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00355	85 c0		 test	 eax, eax
  00357	74 01		 je	 SHORT $LN52@mountnewta
  00359	cc		 int	 3
$LN52@mountnewta:
$LN50@mountnewta:
  0035a	33 c0		 xor	 eax, eax
  0035c	85 c0		 test	 eax, eax
  0035e	75 93		 jne	 SHORT $LN22@mountnewta

; 1371 :     MSGBUF(msg, "not valid for %s", short_descr);

  00360	4c 8b 8c 24 88
	01 00 00	 mov	 r9, QWORD PTR short_descr$[rsp]
  00368	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169739
  0036f	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  00374	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  0037c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1372 : 
; 1373 :     /* Initialize device dependent fields */
; 1374 :     dev->fd                = -1;

  00382	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0038a	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 1375 :     dev->omadesc           = NULL;

  00394	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0039c	48 c7 80 f8 0f
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4088], 0

; 1376 :     dev->omafiles          = 0;

  003a7	33 c0		 xor	 eax, eax
  003a9	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003b1	66 89 81 00 10
	00 00		 mov	 WORD PTR [rcx+4096], ax

; 1377 :     dev->curfilen          = 1;

  003b8	b8 01 00 00 00	 mov	 eax, 1
  003bd	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003c5	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 1378 :     dev->nxtblkpos         = 0;

  003cc	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003d4	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 1379 :     dev->prvblkpos         = -1;

  003df	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003e7	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 1380 :     dev->curblkrem         = 0;

  003f2	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003fa	c7 80 18 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4120], 0

; 1381 :     dev->curbufoff         = 0;

  00404	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0040c	c7 80 1c 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4124], 0

; 1382 :     dev->readonly          = 0;

  00416	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0041e	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00424	83 e0 fd	 and	 eax, -3			; fffffffdH
  00427	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0042f	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 1383 :     dev->hetb              = NULL;

  00435	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0043d	48 c7 80 28 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4136], 0

; 1384 :     dev->tdparms.compress  = HETDFLT_COMPRESS;

  00448	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00450	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  00456	83 c8 01	 or	 eax, 1
  00459	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00461	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1385 :     dev->tdparms.method    = HETDFLT_METHOD;

  00467	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0046f	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  00475	83 e0 f1	 and	 eax, -15		; fffffff1H
  00478	83 c8 02	 or	 eax, 2
  0047b	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00483	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1386 :     dev->tdparms.level     = HETDFLT_LEVEL;

  00489	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00491	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  00497	25 0f ff ff ff	 and	 eax, -241		; ffffff0fH
  0049c	83 c8 40	 or	 eax, 64			; 00000040H
  0049f	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  004a7	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1387 :     dev->tdparms.chksize   = HETDFLT_CHKSIZE;

  004ad	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  004b2	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  004ba	66 89 81 34 10
	00 00		 mov	 WORD PTR [rcx+4148], ax

; 1388 :     dev->tdparms.maxsize   = 0;        // no max size     (default)

  004c1	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004c9	48 c7 80 38 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4152], 0

; 1389 :     dev->eotmargin         = 128*1024; // 128K EOT margin (default)

  004d4	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004dc	48 c7 80 70 10
	00 00 00 00 02
	00		 mov	 QWORD PTR [rax+4208], 131072 ; 00020000H

; 1390 :     dev->tdparms.logical_readonly = 0; // read/write      (default)

  004e7	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004ef	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  004f5	0f ba f0 0b	 btr	 eax, 11
  004f9	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00501	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1391 :     dev->noautomount       = 0;

  00507	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0050f	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00515	83 e0 bf	 and	 eax, -65		; ffffffbfH
  00518	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00520	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 1392 : 
; 1393 : #if defined(OPTION_SCSI_TAPE)
; 1394 :     // Real 3590's support Erase Gap and use 32-bit blockids.
; 1395 :     // Note that these are just defaults and may be changed
; 1396 :     // further below after processing our remaining options.
; 1397 : 
; 1398 :     if (TAPEDEVT_SCSITAPE == dev->tapedevt
; 1399 :         &&     0x3590     == dev->devtype)

  00526	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0052e	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00535	83 f8 03	 cmp	 eax, 3
  00538	75 51		 jne	 SHORT $LN53@mountnewta
  0053a	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00542	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00546	3d 90 35 00 00	 cmp	 eax, 13712		; 00003590H
  0054b	75 3e		 jne	 SHORT $LN53@mountnewta

; 1400 :     {
; 1401 :         dev->stape_no_erg   = 0;        // (default for 3590 SCSI)

  0054d	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00555	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  0055b	83 e0 fb	 and	 eax, -5			; fffffffbH
  0055e	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00566	89 81 98 10 00
	00		 mov	 DWORD PTR [rcx+4248], eax

; 1402 :         dev->stape_blkid_32 = 1;        // (default for 3590 SCSI)

  0056c	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00574	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  0057a	83 c8 02	 or	 eax, 2
  0057d	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00585	89 81 98 10 00
	00		 mov	 DWORD PTR [rcx+4248], eax
$LN53@mountnewta:

; 1403 :     }
; 1404 : #endif
; 1405 : 
; 1406 : // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1407 : #define  _HHC00223E() WRMSG(HHC00223, "E", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), argv[i], msg)
; 1408 : 
; 1409 :     /* Process remaining options */
; 1410 :     rc = 0;

  0058b	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rc$[rsp], 0

; 1411 :     for (i = 1; i < argc; i++)

  00596	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  0059e	eb 0a		 jmp	 SHORT $LN28@mountnewta
$LN26@mountnewta:
  005a0	8b 44 24 74	 mov	 eax, DWORD PTR i$[rsp]
  005a4	ff c0		 inc	 eax
  005a6	89 44 24 74	 mov	 DWORD PTR i$[rsp], eax
$LN28@mountnewta:
  005aa	8b 84 24 58 08
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  005b1	39 44 24 74	 cmp	 DWORD PTR i$[rsp], eax
  005b5	0f 8d d1 44 00
	00		 jge	 $LN27@mountnewta

; 1412 :     {
; 1413 :         optrc = 0;

  005bb	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR optrc$[rsp], 0

; 1414 :         switch (parser (&ptab[0], argv[i], &res))

  005c3	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  005c8	b9 10 00 00 00	 mov	 ecx, 16
  005cd	48 6b c9 00	 imul	 rcx, rcx, 0
  005d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ptab
  005d8	48 03 d1	 add	 rdx, rcx
  005db	48 8b ca	 mov	 rcx, rdx
  005de	4c 8d 84 24 90
	07 00 00	 lea	 r8, QWORD PTR res$[rsp]
  005e6	48 8b 94 24 60
	08 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  005ee	48 8b 14 c2	 mov	 rdx, QWORD PTR [rdx+rax*8]
  005f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_parser
  005f8	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv257[rsp], eax
  005ff	83 bc 24 a8 00
	00 00 18	 cmp	 DWORD PTR tv257[rsp], 24
  00607	0f 87 ab 3f 00
	00		 ja	 $LN131@mountnewta
  0060d	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR tv257[rsp]
  00615	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0061c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN541@mountnewta[rcx+rax*4]
  00623	48 03 c1	 add	 rax, rcx
  00626	ff e0		 jmp	 rax
$LN54@mountnewta:

; 1415 :         {
; 1416 :         case TDPARM_NONE:
; 1417 :             // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1418 :             WRMSG(HHC00223, "E", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), argv[i], "unrecognized");

  00628	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00630	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00637	83 f8 01	 cmp	 eax, 1
  0063a	75 14		 jne	 SHORT $LN159@mountnewta
  0063c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169743
  00643	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv286[rsp], rax
  0064b	e9 1e 01 00 00	 jmp	 $LN160@mountnewta
$LN159@mountnewta:
  00650	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00658	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0065f	83 f8 02	 cmp	 eax, 2
  00662	75 14		 jne	 SHORT $LN157@mountnewta
  00664	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169744
  0066b	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv285[rsp], rax
  00673	e9 e6 00 00 00	 jmp	 $LN158@mountnewta
$LN157@mountnewta:
  00678	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00680	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00687	83 f8 03	 cmp	 eax, 3
  0068a	75 14		 jne	 SHORT $LN155@mountnewta
  0068c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169745
  00693	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv284[rsp], rax
  0069b	e9 ae 00 00 00	 jmp	 $LN156@mountnewta
$LN155@mountnewta:
  006a0	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006a8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  006af	83 f8 04	 cmp	 eax, 4
  006b2	75 11		 jne	 SHORT $LN153@mountnewta
  006b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169746
  006bb	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR tv283[rsp], rax
  006c3	eb 79		 jmp	 SHORT $LN154@mountnewta
$LN153@mountnewta:
  006c5	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006cd	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  006d4	83 f8 05	 cmp	 eax, 5
  006d7	75 11		 jne	 SHORT $LN151@mountnewta
  006d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169747
  006e0	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv282[rsp], rax
  006e8	eb 44		 jmp	 SHORT $LN152@mountnewta
$LN151@mountnewta:
  006ea	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006f2	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  006f9	83 f8 06	 cmp	 eax, 6
  006fc	75 11		 jne	 SHORT $LN149@mountnewta
  006fe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169748
  00705	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv281[rsp], rax
  0070d	eb 0f		 jmp	 SHORT $LN150@mountnewta
$LN149@mountnewta:
  0070f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169749
  00716	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv281[rsp], rax
$LN150@mountnewta:
  0071e	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR tv281[rsp]
  00726	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv282[rsp], rax
$LN152@mountnewta:
  0072e	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR tv282[rsp]
  00736	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR tv283[rsp], rax
$LN154@mountnewta:
  0073e	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR tv283[rsp]
  00746	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv284[rsp], rax
$LN156@mountnewta:
  0074e	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR tv284[rsp]
  00756	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv285[rsp], rax
$LN158@mountnewta:
  0075e	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR tv285[rsp]
  00766	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv286[rsp], rax
$LN160@mountnewta:
  0076e	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00777	74 15		 je	 SHORT $LN161@mountnewta
  00779	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00781	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00785	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv325[rsp], eax
  0078c	eb 0b		 jmp	 SHORT $LN162@mountnewta
$LN161@mountnewta:
  0078e	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN162@mountnewta:
  00799	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  007a2	74 17		 je	 SHORT $LN163@mountnewta
  007a4	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007ac	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  007b0	d1 f8		 sar	 eax, 1
  007b2	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv331[rsp], eax
  007b9	eb 0b		 jmp	 SHORT $LN164@mountnewta
$LN163@mountnewta:
  007bb	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv331[rsp], 0
$LN164@mountnewta:
  007c6	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  007cb	48 89 84 24 10
	06 00 00	 mov	 QWORD PTR tv259[rsp], rax
  007d3	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  007db	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  007e2	48 89 8c 24 18
	06 00 00	 mov	 QWORD PTR tv320[rsp], rcx
  007ea	b9 01 00 00 00	 mov	 ecx, 1
  007ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  007f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169742
  007fc	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00801	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00809	48 8b 94 24 10
	06 00 00	 mov	 rdx, QWORD PTR tv259[rsp]
  00811	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00815	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0081a	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR tv286[rsp]
  00822	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00827	48 8b 8c 24 18
	06 00 00	 mov	 rcx, QWORD PTR tv320[rsp]
  0082f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00834	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv325[rsp]
  0083b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0083f	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv331[rsp]
  00846	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0084a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169750
  00851	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00856	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169751
  0085d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00862	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00867	41 b9 03 00 00
	00		 mov	 r9d, 3
  0086d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169752
  00874	ba 8a 05 00 00	 mov	 edx, 1418		; 0000058aH
  00879	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169753
  00880	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1419 :             optrc = -1;

  00886	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1

; 1420 :             break;

  0088e	e9 8b 3f 00 00	 jmp	 $LN29@mountnewta
$LN55@mountnewta:

; 1421 : 
; 1422 :         case TDPARM_DEBUG:
; 1423 :             dev->debug = 1;

  00893	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0089b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  008a1	0f ba e8 11	 bts	 eax, 17
  008a5	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  008ad	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 1424 :             break;

  008b3	e9 66 3f 00 00	 jmp	 $LN29@mountnewta
$LN56@mountnewta:

; 1425 : 
; 1426 :         case TDPARM_AWSTAPE:
; 1427 :             if (0
; 1428 :                 || TAPEDEVT_SCSITAPE == dev->tapedevt
; 1429 :                 || TAPEDEVT_FAKETAPE == dev->tapedevt

  008b8	33 c0		 xor	 eax, eax
  008ba	85 c0		 test	 eax, eax
  008bc	75 2c		 jne	 SHORT $LN58@mountnewta
  008be	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008c6	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  008cd	83 f8 03	 cmp	 eax, 3
  008d0	74 18		 je	 SHORT $LN58@mountnewta
  008d2	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008da	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  008e1	83 f8 05	 cmp	 eax, 5
  008e4	0f 85 6c 02 00
	00		 jne	 $LN57@mountnewta
$LN58@mountnewta:

; 1430 :             )
; 1431 :             {
; 1432 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1433 :                 _HHC00223E(); optrc = -1; break;

  008ea	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008f2	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  008f9	83 f8 01	 cmp	 eax, 1
  008fc	75 14		 jne	 SHORT $LN175@mountnewta
  008fe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169758
  00905	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv380[rsp], rax
  0090d	e9 1e 01 00 00	 jmp	 $LN176@mountnewta
$LN175@mountnewta:
  00912	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0091a	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00921	83 f8 02	 cmp	 eax, 2
  00924	75 14		 jne	 SHORT $LN173@mountnewta
  00926	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169759
  0092d	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv379[rsp], rax
  00935	e9 e6 00 00 00	 jmp	 $LN174@mountnewta
$LN173@mountnewta:
  0093a	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00942	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00949	83 f8 03	 cmp	 eax, 3
  0094c	75 14		 jne	 SHORT $LN171@mountnewta
  0094e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169760
  00955	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv378[rsp], rax
  0095d	e9 ae 00 00 00	 jmp	 $LN172@mountnewta
$LN171@mountnewta:
  00962	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0096a	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00971	83 f8 04	 cmp	 eax, 4
  00974	75 11		 jne	 SHORT $LN169@mountnewta
  00976	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169761
  0097d	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv377[rsp], rax
  00985	eb 79		 jmp	 SHORT $LN170@mountnewta
$LN169@mountnewta:
  00987	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0098f	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00996	83 f8 05	 cmp	 eax, 5
  00999	75 11		 jne	 SHORT $LN167@mountnewta
  0099b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169762
  009a2	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv376[rsp], rax
  009aa	eb 44		 jmp	 SHORT $LN168@mountnewta
$LN167@mountnewta:
  009ac	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009b4	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  009bb	83 f8 06	 cmp	 eax, 6
  009be	75 11		 jne	 SHORT $LN165@mountnewta
  009c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169763
  009c7	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv375[rsp], rax
  009cf	eb 0f		 jmp	 SHORT $LN166@mountnewta
$LN165@mountnewta:
  009d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169764
  009d8	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv375[rsp], rax
$LN166@mountnewta:
  009e0	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR tv375[rsp]
  009e8	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR tv376[rsp], rax
$LN168@mountnewta:
  009f0	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR tv376[rsp]
  009f8	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv377[rsp], rax
$LN170@mountnewta:
  00a00	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR tv377[rsp]
  00a08	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv378[rsp], rax
$LN172@mountnewta:
  00a10	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR tv378[rsp]
  00a18	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR tv379[rsp], rax
$LN174@mountnewta:
  00a20	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR tv379[rsp]
  00a28	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv380[rsp], rax
$LN176@mountnewta:
  00a30	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00a39	74 15		 je	 SHORT $LN177@mountnewta
  00a3b	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a43	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00a47	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv387[rsp], eax
  00a4e	eb 0b		 jmp	 SHORT $LN178@mountnewta
$LN177@mountnewta:
  00a50	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv387[rsp], 0
$LN178@mountnewta:
  00a5b	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00a64	74 17		 je	 SHORT $LN179@mountnewta
  00a66	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a6e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00a72	d1 f8		 sar	 eax, 1
  00a74	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv393[rsp], eax
  00a7b	eb 0b		 jmp	 SHORT $LN180@mountnewta
$LN179@mountnewta:
  00a7d	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv393[rsp], 0
$LN180@mountnewta:
  00a88	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  00a8d	48 89 84 24 20
	06 00 00	 mov	 QWORD PTR tv353[rsp], rax
  00a95	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00a9d	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00aa4	48 89 8c 24 28
	06 00 00	 mov	 QWORD PTR tv382[rsp], rcx
  00aac	b9 01 00 00 00	 mov	 ecx, 1
  00ab1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00ab7	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  00abf	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00ac4	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00acc	48 8b 94 24 20
	06 00 00	 mov	 rdx, QWORD PTR tv353[rsp]
  00ad4	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00ad8	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00add	48 8b 8c 24 e8
	01 00 00	 mov	 rcx, QWORD PTR tv380[rsp]
  00ae5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00aea	48 8b 8c 24 28
	06 00 00	 mov	 rcx, QWORD PTR tv382[rsp]
  00af2	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00af7	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv387[rsp]
  00afe	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00b02	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv393[rsp]
  00b09	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00b0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169765
  00b14	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b19	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169766
  00b20	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00b25	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b2a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00b30	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169767
  00b37	ba 99 05 00 00	 mov	 edx, 1433		; 00000599H
  00b3c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169768
  00b43	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00b49	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  00b51	e9 c8 3c 00 00	 jmp	 $LN29@mountnewta
$LN57@mountnewta:

; 1434 :             }
; 1435 :             dev->tdparms.compress = FALSE;

  00b56	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b5e	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  00b64	83 e0 fe	 and	 eax, -2			; fffffffeH
  00b67	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b6f	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1436 :             dev->tdparms.chksize = 4096;

  00b75	b8 00 10 00 00	 mov	 eax, 4096		; 00001000H
  00b7a	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00b82	66 89 81 34 10
	00 00		 mov	 WORD PTR [rcx+4148], ax

; 1437 :             break;

  00b89	e9 90 3c 00 00	 jmp	 $LN29@mountnewta
$LN59@mountnewta:
$LN60@mountnewta:

; 1438 : 
; 1439 :         case TDPARM_IDRC:
; 1440 :         case TDPARM_COMPRESS:
; 1441 :             if (0
; 1442 :                 || TAPEDEVT_SCSITAPE == dev->tapedevt
; 1443 :                 || TAPEDEVT_FAKETAPE == dev->tapedevt

  00b8e	33 c0		 xor	 eax, eax
  00b90	85 c0		 test	 eax, eax
  00b92	75 2c		 jne	 SHORT $LN62@mountnewta
  00b94	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b9c	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00ba3	83 f8 03	 cmp	 eax, 3
  00ba6	74 18		 je	 SHORT $LN62@mountnewta
  00ba8	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00bb0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00bb7	83 f8 05	 cmp	 eax, 5
  00bba	0f 85 6c 02 00
	00		 jne	 $LN61@mountnewta
$LN62@mountnewta:

; 1444 :             )
; 1445 :             {
; 1446 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1447 :                 _HHC00223E(); optrc = -1; break;

  00bc0	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00bc8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00bcf	83 f8 01	 cmp	 eax, 1
  00bd2	75 14		 jne	 SHORT $LN191@mountnewta
  00bd4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169773
  00bdb	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv443[rsp], rax
  00be3	e9 1e 01 00 00	 jmp	 $LN192@mountnewta
$LN191@mountnewta:
  00be8	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00bf0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00bf7	83 f8 02	 cmp	 eax, 2
  00bfa	75 14		 jne	 SHORT $LN189@mountnewta
  00bfc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169774
  00c03	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv442[rsp], rax
  00c0b	e9 e6 00 00 00	 jmp	 $LN190@mountnewta
$LN189@mountnewta:
  00c10	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c18	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00c1f	83 f8 03	 cmp	 eax, 3
  00c22	75 14		 jne	 SHORT $LN187@mountnewta
  00c24	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169775
  00c2b	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR tv441[rsp], rax
  00c33	e9 ae 00 00 00	 jmp	 $LN188@mountnewta
$LN187@mountnewta:
  00c38	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c40	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00c47	83 f8 04	 cmp	 eax, 4
  00c4a	75 11		 jne	 SHORT $LN185@mountnewta
  00c4c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169776
  00c53	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR tv440[rsp], rax
  00c5b	eb 79		 jmp	 SHORT $LN186@mountnewta
$LN185@mountnewta:
  00c5d	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c65	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00c6c	83 f8 05	 cmp	 eax, 5
  00c6f	75 11		 jne	 SHORT $LN183@mountnewta
  00c71	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169777
  00c78	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv439[rsp], rax
  00c80	eb 44		 jmp	 SHORT $LN184@mountnewta
$LN183@mountnewta:
  00c82	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c8a	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00c91	83 f8 06	 cmp	 eax, 6
  00c94	75 11		 jne	 SHORT $LN181@mountnewta
  00c96	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169778
  00c9d	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv438[rsp], rax
  00ca5	eb 0f		 jmp	 SHORT $LN182@mountnewta
$LN181@mountnewta:
  00ca7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169779
  00cae	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv438[rsp], rax
$LN182@mountnewta:
  00cb6	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR tv438[rsp]
  00cbe	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv439[rsp], rax
$LN184@mountnewta:
  00cc6	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR tv439[rsp]
  00cce	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR tv440[rsp], rax
$LN186@mountnewta:
  00cd6	48 8b 84 24 00
	02 00 00	 mov	 rax, QWORD PTR tv440[rsp]
  00cde	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR tv441[rsp], rax
$LN188@mountnewta:
  00ce6	48 8b 84 24 08
	02 00 00	 mov	 rax, QWORD PTR tv441[rsp]
  00cee	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv442[rsp], rax
$LN190@mountnewta:
  00cf6	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR tv442[rsp]
  00cfe	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv443[rsp], rax
$LN192@mountnewta:
  00d06	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00d0f	74 15		 je	 SHORT $LN193@mountnewta
  00d11	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d19	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00d1d	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv450[rsp], eax
  00d24	eb 0b		 jmp	 SHORT $LN194@mountnewta
$LN193@mountnewta:
  00d26	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv450[rsp], 0
$LN194@mountnewta:
  00d31	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00d3a	74 17		 je	 SHORT $LN195@mountnewta
  00d3c	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00d44	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00d48	d1 f8		 sar	 eax, 1
  00d4a	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv456[rsp], eax
  00d51	eb 0b		 jmp	 SHORT $LN196@mountnewta
$LN195@mountnewta:
  00d53	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv456[rsp], 0
$LN196@mountnewta:
  00d5e	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  00d63	48 89 84 24 30
	06 00 00	 mov	 QWORD PTR tv416[rsp], rax
  00d6b	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00d73	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00d7a	48 89 8c 24 38
	06 00 00	 mov	 QWORD PTR tv445[rsp], rcx
  00d82	b9 01 00 00 00	 mov	 ecx, 1
  00d87	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d8d	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  00d95	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00d9a	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00da2	48 8b 94 24 30
	06 00 00	 mov	 rdx, QWORD PTR tv416[rsp]
  00daa	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00dae	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00db3	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR tv443[rsp]
  00dbb	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00dc0	48 8b 8c 24 38
	06 00 00	 mov	 rcx, QWORD PTR tv445[rsp]
  00dc8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00dcd	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv450[rsp]
  00dd4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00dd8	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv456[rsp]
  00ddf	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00de3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169780
  00dea	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00def	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169781
  00df6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00dfb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e00	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e06	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169782
  00e0d	ba a7 05 00 00	 mov	 edx, 1447		; 000005a7H
  00e12	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169783
  00e19	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00e1f	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  00e27	e9 f2 39 00 00	 jmp	 $LN29@mountnewta
$LN61@mountnewta:

; 1448 :             }
; 1449 :             dev->tdparms.compress = (res.num ? TRUE : FALSE);

  00e2c	83 bc 24 90 07
	00 00 00	 cmp	 DWORD PTR res$[rsp], 0
  00e34	74 0d		 je	 SHORT $LN197@mountnewta
  00e36	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv469[rsp], 1
  00e41	eb 0b		 jmp	 SHORT $LN198@mountnewta
$LN197@mountnewta:
  00e43	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv469[rsp], 0
$LN198@mountnewta:
  00e4e	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv469[rsp]
  00e55	83 e0 01	 and	 eax, 1
  00e58	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00e60	8b 89 30 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4144]
  00e66	83 e1 fe	 and	 ecx, -2			; fffffffeH
  00e69	0b c8		 or	 ecx, eax
  00e6b	8b c1		 mov	 eax, ecx
  00e6d	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00e75	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1450 :             break;

  00e7b	e9 9e 39 00 00	 jmp	 $LN29@mountnewta
$LN63@mountnewta:

; 1451 : 
; 1452 :         case TDPARM_METHOD:
; 1453 :             if (0
; 1454 :                 || TAPEDEVT_SCSITAPE == dev->tapedevt
; 1455 :                 || TAPEDEVT_FAKETAPE == dev->tapedevt

  00e80	33 c0		 xor	 eax, eax
  00e82	85 c0		 test	 eax, eax
  00e84	75 2c		 jne	 SHORT $LN65@mountnewta
  00e86	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e8e	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00e95	83 f8 03	 cmp	 eax, 3
  00e98	74 18		 je	 SHORT $LN65@mountnewta
  00e9a	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ea2	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00ea9	83 f8 05	 cmp	 eax, 5
  00eac	0f 85 6c 02 00
	00		 jne	 $LN64@mountnewta
$LN65@mountnewta:

; 1456 :             )
; 1457 :             {
; 1458 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1459 :                 _HHC00223E(); optrc = -1; break;

  00eb2	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00eba	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00ec1	83 f8 01	 cmp	 eax, 1
  00ec4	75 14		 jne	 SHORT $LN209@mountnewta
  00ec6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169787
  00ecd	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR tv509[rsp], rax
  00ed5	e9 1e 01 00 00	 jmp	 $LN210@mountnewta
$LN209@mountnewta:
  00eda	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ee2	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00ee9	83 f8 02	 cmp	 eax, 2
  00eec	75 14		 jne	 SHORT $LN207@mountnewta
  00eee	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169788
  00ef5	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv508[rsp], rax
  00efd	e9 e6 00 00 00	 jmp	 $LN208@mountnewta
$LN207@mountnewta:
  00f02	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f0a	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00f11	83 f8 03	 cmp	 eax, 3
  00f14	75 14		 jne	 SHORT $LN205@mountnewta
  00f16	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169789
  00f1d	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv507[rsp], rax
  00f25	e9 ae 00 00 00	 jmp	 $LN206@mountnewta
$LN205@mountnewta:
  00f2a	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f32	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00f39	83 f8 04	 cmp	 eax, 4
  00f3c	75 11		 jne	 SHORT $LN203@mountnewta
  00f3e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169790
  00f45	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv506[rsp], rax
  00f4d	eb 79		 jmp	 SHORT $LN204@mountnewta
$LN203@mountnewta:
  00f4f	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f57	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00f5e	83 f8 05	 cmp	 eax, 5
  00f61	75 11		 jne	 SHORT $LN201@mountnewta
  00f63	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169791
  00f6a	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv505[rsp], rax
  00f72	eb 44		 jmp	 SHORT $LN202@mountnewta
$LN201@mountnewta:
  00f74	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f7c	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00f83	83 f8 06	 cmp	 eax, 6
  00f86	75 11		 jne	 SHORT $LN199@mountnewta
  00f88	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169792
  00f8f	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR tv504[rsp], rax
  00f97	eb 0f		 jmp	 SHORT $LN200@mountnewta
$LN199@mountnewta:
  00f99	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169793
  00fa0	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR tv504[rsp], rax
$LN200@mountnewta:
  00fa8	48 8b 84 24 20
	02 00 00	 mov	 rax, QWORD PTR tv504[rsp]
  00fb0	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv505[rsp], rax
$LN202@mountnewta:
  00fb8	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR tv505[rsp]
  00fc0	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv506[rsp], rax
$LN204@mountnewta:
  00fc8	48 8b 84 24 30
	02 00 00	 mov	 rax, QWORD PTR tv506[rsp]
  00fd0	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv507[rsp], rax
$LN206@mountnewta:
  00fd8	48 8b 84 24 38
	02 00 00	 mov	 rax, QWORD PTR tv507[rsp]
  00fe0	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv508[rsp], rax
$LN208@mountnewta:
  00fe8	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR tv508[rsp]
  00ff0	48 89 84 24 48
	02 00 00	 mov	 QWORD PTR tv509[rsp], rax
$LN210@mountnewta:
  00ff8	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01001	74 15		 je	 SHORT $LN211@mountnewta
  01003	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0100b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0100f	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv548[rsp], eax
  01016	eb 0b		 jmp	 SHORT $LN212@mountnewta
$LN211@mountnewta:
  01018	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv548[rsp], 0
$LN212@mountnewta:
  01023	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0102c	74 17		 je	 SHORT $LN213@mountnewta
  0102e	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01036	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0103a	d1 f8		 sar	 eax, 1
  0103c	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv554[rsp], eax
  01043	eb 0b		 jmp	 SHORT $LN214@mountnewta
$LN213@mountnewta:
  01045	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv554[rsp], 0
$LN214@mountnewta:
  01050	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  01055	48 89 84 24 40
	06 00 00	 mov	 QWORD PTR tv482[rsp], rax
  0105d	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01065	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0106c	48 89 8c 24 48
	06 00 00	 mov	 QWORD PTR tv511[rsp], rcx
  01074	b9 01 00 00 00	 mov	 ecx, 1
  01079	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0107f	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  01087	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0108c	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01094	48 8b 94 24 40
	06 00 00	 mov	 rdx, QWORD PTR tv482[rsp]
  0109c	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  010a0	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  010a5	48 8b 8c 24 48
	02 00 00	 mov	 rcx, QWORD PTR tv509[rsp]
  010ad	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  010b2	48 8b 8c 24 48
	06 00 00	 mov	 rcx, QWORD PTR tv511[rsp]
  010ba	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  010bf	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv548[rsp]
  010c6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  010ca	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv554[rsp]
  010d1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  010d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169794
  010dc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  010e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169795
  010e8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  010ed	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  010f2	41 b9 03 00 00
	00		 mov	 r9d, 3
  010f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169796
  010ff	ba b3 05 00 00	 mov	 edx, 1459		; 000005b3H
  01104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169797
  0110b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01111	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  01119	e9 00 37 00 00	 jmp	 $LN29@mountnewta
$LN64@mountnewta:

; 1460 :             }
; 1461 :             if (res.num < HETMIN_METHOD || res.num > HETMAX_METHOD)

  0111e	83 bc 24 90 07
	00 00 01	 cmp	 DWORD PTR res$[rsp], 1
  01126	72 0e		 jb	 SHORT $LN67@mountnewta
  01128	83 bc 24 90 07
	00 00 01	 cmp	 DWORD PTR res$[rsp], 1
  01130	0f 86 6b 02 00
	00		 jbe	 $LN66@mountnewta
$LN67@mountnewta:

; 1462 :             {
; 1463 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1464 :                 WRMSG(HHC00223, "E", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), argv[i], "method out of range");

  01136	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0113e	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01145	83 f8 01	 cmp	 eax, 1
  01148	75 14		 jne	 SHORT $LN225@mountnewta
  0114a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169801
  01151	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv595[rsp], rax
  01159	e9 1e 01 00 00	 jmp	 $LN226@mountnewta
$LN225@mountnewta:
  0115e	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01166	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0116d	83 f8 02	 cmp	 eax, 2
  01170	75 14		 jne	 SHORT $LN223@mountnewta
  01172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169802
  01179	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR tv594[rsp], rax
  01181	e9 e6 00 00 00	 jmp	 $LN224@mountnewta
$LN223@mountnewta:
  01186	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0118e	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01195	83 f8 03	 cmp	 eax, 3
  01198	75 14		 jne	 SHORT $LN221@mountnewta
  0119a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169803
  011a1	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv593[rsp], rax
  011a9	e9 ae 00 00 00	 jmp	 $LN222@mountnewta
$LN221@mountnewta:
  011ae	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011b6	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  011bd	83 f8 04	 cmp	 eax, 4
  011c0	75 11		 jne	 SHORT $LN219@mountnewta
  011c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169804
  011c9	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR tv592[rsp], rax
  011d1	eb 79		 jmp	 SHORT $LN220@mountnewta
$LN219@mountnewta:
  011d3	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  011db	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  011e2	83 f8 05	 cmp	 eax, 5
  011e5	75 11		 jne	 SHORT $LN217@mountnewta
  011e7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169805
  011ee	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv591[rsp], rax
  011f6	eb 44		 jmp	 SHORT $LN218@mountnewta
$LN217@mountnewta:
  011f8	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01200	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01207	83 f8 06	 cmp	 eax, 6
  0120a	75 11		 jne	 SHORT $LN215@mountnewta
  0120c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169806
  01213	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv590[rsp], rax
  0121b	eb 0f		 jmp	 SHORT $LN216@mountnewta
$LN215@mountnewta:
  0121d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169807
  01224	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv590[rsp], rax
$LN216@mountnewta:
  0122c	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR tv590[rsp]
  01234	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv591[rsp], rax
$LN218@mountnewta:
  0123c	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR tv591[rsp]
  01244	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR tv592[rsp], rax
$LN220@mountnewta:
  0124c	48 8b 84 24 60
	02 00 00	 mov	 rax, QWORD PTR tv592[rsp]
  01254	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv593[rsp], rax
$LN222@mountnewta:
  0125c	48 8b 84 24 68
	02 00 00	 mov	 rax, QWORD PTR tv593[rsp]
  01264	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR tv594[rsp], rax
$LN224@mountnewta:
  0126c	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR tv594[rsp]
  01274	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv595[rsp], rax
$LN226@mountnewta:
  0127c	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01285	74 15		 je	 SHORT $LN227@mountnewta
  01287	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0128f	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01293	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv602[rsp], eax
  0129a	eb 0b		 jmp	 SHORT $LN228@mountnewta
$LN227@mountnewta:
  0129c	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv602[rsp], 0
$LN228@mountnewta:
  012a7	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  012b0	74 17		 je	 SHORT $LN229@mountnewta
  012b2	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  012ba	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  012be	d1 f8		 sar	 eax, 1
  012c0	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv608[rsp], eax
  012c7	eb 0b		 jmp	 SHORT $LN230@mountnewta
$LN229@mountnewta:
  012c9	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv608[rsp], 0
$LN230@mountnewta:
  012d4	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  012d9	48 89 84 24 50
	06 00 00	 mov	 QWORD PTR tv568[rsp], rax
  012e1	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  012e9	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  012f0	48 89 8c 24 58
	06 00 00	 mov	 QWORD PTR tv597[rsp], rcx
  012f8	b9 01 00 00 00	 mov	 ecx, 1
  012fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169800
  0130a	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0130f	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01317	48 8b 94 24 50
	06 00 00	 mov	 rdx, QWORD PTR tv568[rsp]
  0131f	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  01323	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01328	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR tv595[rsp]
  01330	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01335	48 8b 8c 24 58
	06 00 00	 mov	 rcx, QWORD PTR tv597[rsp]
  0133d	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01342	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR tv602[rsp]
  01349	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0134d	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv608[rsp]
  01354	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01358	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169808
  0135f	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01364	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169809
  0136b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01370	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01375	41 b9 03 00 00
	00		 mov	 r9d, 3
  0137b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169810
  01382	ba b8 05 00 00	 mov	 edx, 1464		; 000005b8H
  01387	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169811
  0138e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1465 :                 optrc = -1;

  01394	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1

; 1466 :                 break;

  0139c	e9 7d 34 00 00	 jmp	 $LN29@mountnewta
$LN66@mountnewta:

; 1467 :             }
; 1468 :             dev->tdparms.method = res.num;

  013a1	8b 84 24 90 07
	00 00		 mov	 eax, DWORD PTR res$[rsp]
  013a8	83 e0 07	 and	 eax, 7
  013ab	d1 e0		 shl	 eax, 1
  013ad	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  013b5	8b 89 30 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4144]
  013bb	83 e1 f1	 and	 ecx, -15		; fffffff1H
  013be	0b c8		 or	 ecx, eax
  013c0	8b c1		 mov	 eax, ecx
  013c2	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  013ca	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1469 :             break;

  013d0	e9 49 34 00 00	 jmp	 $LN29@mountnewta
$LN68@mountnewta:

; 1470 : 
; 1471 :         case TDPARM_LEVEL:
; 1472 :             if (0
; 1473 :                 || TAPEDEVT_SCSITAPE == dev->tapedevt
; 1474 :                 || TAPEDEVT_FAKETAPE == dev->tapedevt

  013d5	33 c0		 xor	 eax, eax
  013d7	85 c0		 test	 eax, eax
  013d9	75 2c		 jne	 SHORT $LN70@mountnewta
  013db	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013e3	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  013ea	83 f8 03	 cmp	 eax, 3
  013ed	74 18		 je	 SHORT $LN70@mountnewta
  013ef	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013f7	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  013fe	83 f8 05	 cmp	 eax, 5
  01401	0f 85 6c 02 00
	00		 jne	 $LN69@mountnewta
$LN70@mountnewta:

; 1475 :             )
; 1476 :             {
; 1477 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1478 :                _HHC00223E(); optrc = -1; break;

  01407	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0140f	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01416	83 f8 01	 cmp	 eax, 1
  01419	75 14		 jne	 SHORT $LN241@mountnewta
  0141b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169815
  01422	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv660[rsp], rax
  0142a	e9 1e 01 00 00	 jmp	 $LN242@mountnewta
$LN241@mountnewta:
  0142f	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01437	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0143e	83 f8 02	 cmp	 eax, 2
  01441	75 14		 jne	 SHORT $LN239@mountnewta
  01443	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169816
  0144a	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR tv659[rsp], rax
  01452	e9 e6 00 00 00	 jmp	 $LN240@mountnewta
$LN239@mountnewta:
  01457	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0145f	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01466	83 f8 03	 cmp	 eax, 3
  01469	75 14		 jne	 SHORT $LN237@mountnewta
  0146b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169817
  01472	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv658[rsp], rax
  0147a	e9 ae 00 00 00	 jmp	 $LN238@mountnewta
$LN237@mountnewta:
  0147f	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01487	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0148e	83 f8 04	 cmp	 eax, 4
  01491	75 11		 jne	 SHORT $LN235@mountnewta
  01493	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169818
  0149a	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv657[rsp], rax
  014a2	eb 79		 jmp	 SHORT $LN236@mountnewta
$LN235@mountnewta:
  014a4	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014ac	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  014b3	83 f8 05	 cmp	 eax, 5
  014b6	75 11		 jne	 SHORT $LN233@mountnewta
  014b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169819
  014bf	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR tv656[rsp], rax
  014c7	eb 44		 jmp	 SHORT $LN234@mountnewta
$LN233@mountnewta:
  014c9	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014d1	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  014d8	83 f8 06	 cmp	 eax, 6
  014db	75 11		 jne	 SHORT $LN231@mountnewta
  014dd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169820
  014e4	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv655[rsp], rax
  014ec	eb 0f		 jmp	 SHORT $LN232@mountnewta
$LN231@mountnewta:
  014ee	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169821
  014f5	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv655[rsp], rax
$LN232@mountnewta:
  014fd	48 8b 84 24 80
	02 00 00	 mov	 rax, QWORD PTR tv655[rsp]
  01505	48 89 84 24 88
	02 00 00	 mov	 QWORD PTR tv656[rsp], rax
$LN234@mountnewta:
  0150d	48 8b 84 24 88
	02 00 00	 mov	 rax, QWORD PTR tv656[rsp]
  01515	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv657[rsp], rax
$LN236@mountnewta:
  0151d	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR tv657[rsp]
  01525	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv658[rsp], rax
$LN238@mountnewta:
  0152d	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR tv658[rsp]
  01535	48 89 84 24 a0
	02 00 00	 mov	 QWORD PTR tv659[rsp], rax
$LN240@mountnewta:
  0153d	48 8b 84 24 a0
	02 00 00	 mov	 rax, QWORD PTR tv659[rsp]
  01545	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv660[rsp], rax
$LN242@mountnewta:
  0154d	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01556	74 15		 je	 SHORT $LN243@mountnewta
  01558	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01560	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01564	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv667[rsp], eax
  0156b	eb 0b		 jmp	 SHORT $LN244@mountnewta
$LN243@mountnewta:
  0156d	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv667[rsp], 0
$LN244@mountnewta:
  01578	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01581	74 17		 je	 SHORT $LN245@mountnewta
  01583	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0158b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0158f	d1 f8		 sar	 eax, 1
  01591	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv673[rsp], eax
  01598	eb 0b		 jmp	 SHORT $LN246@mountnewta
$LN245@mountnewta:
  0159a	c7 84 24 dc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv673[rsp], 0
$LN246@mountnewta:
  015a5	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  015aa	48 89 84 24 60
	06 00 00	 mov	 QWORD PTR tv633[rsp], rax
  015b2	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  015ba	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  015c1	48 89 8c 24 68
	06 00 00	 mov	 QWORD PTR tv662[rsp], rcx
  015c9	b9 01 00 00 00	 mov	 ecx, 1
  015ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  015d4	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  015dc	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  015e1	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  015e9	48 8b 94 24 60
	06 00 00	 mov	 rdx, QWORD PTR tv633[rsp]
  015f1	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  015f5	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  015fa	48 8b 8c 24 a8
	02 00 00	 mov	 rcx, QWORD PTR tv660[rsp]
  01602	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01607	48 8b 8c 24 68
	06 00 00	 mov	 rcx, QWORD PTR tv662[rsp]
  0160f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01614	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv667[rsp]
  0161b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0161f	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR tv673[rsp]
  01626	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0162a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169822
  01631	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01636	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169823
  0163d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01642	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01647	41 b9 03 00 00
	00		 mov	 r9d, 3
  0164d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169824
  01654	ba c6 05 00 00	 mov	 edx, 1478		; 000005c6H
  01659	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169825
  01660	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01666	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  0166e	e9 ab 31 00 00	 jmp	 $LN29@mountnewta
$LN69@mountnewta:

; 1479 :             }
; 1480 :             if (res.num < HETMIN_LEVEL || res.num > HETMAX_LEVEL)

  01673	83 bc 24 90 07
	00 00 01	 cmp	 DWORD PTR res$[rsp], 1
  0167b	72 0e		 jb	 SHORT $LN72@mountnewta
  0167d	83 bc 24 90 07
	00 00 09	 cmp	 DWORD PTR res$[rsp], 9
  01685	0f 86 6b 02 00
	00		 jbe	 $LN71@mountnewta
$LN72@mountnewta:

; 1481 :             {
; 1482 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1483 :                 WRMSG(HHC00223, "E", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), argv[i], "level out of range");

  0168b	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01693	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0169a	83 f8 01	 cmp	 eax, 1
  0169d	75 14		 jne	 SHORT $LN257@mountnewta
  0169f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169829
  016a6	48 89 84 24 d8
	02 00 00	 mov	 QWORD PTR tv746[rsp], rax
  016ae	e9 1e 01 00 00	 jmp	 $LN258@mountnewta
$LN257@mountnewta:
  016b3	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  016bb	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  016c2	83 f8 02	 cmp	 eax, 2
  016c5	75 14		 jne	 SHORT $LN255@mountnewta
  016c7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169830
  016ce	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv745[rsp], rax
  016d6	e9 e6 00 00 00	 jmp	 $LN256@mountnewta
$LN255@mountnewta:
  016db	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  016e3	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  016ea	83 f8 03	 cmp	 eax, 3
  016ed	75 14		 jne	 SHORT $LN253@mountnewta
  016ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169831
  016f6	48 89 84 24 c8
	02 00 00	 mov	 QWORD PTR tv744[rsp], rax
  016fe	e9 ae 00 00 00	 jmp	 $LN254@mountnewta
$LN253@mountnewta:
  01703	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0170b	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01712	83 f8 04	 cmp	 eax, 4
  01715	75 11		 jne	 SHORT $LN251@mountnewta
  01717	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169832
  0171e	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv743[rsp], rax
  01726	eb 79		 jmp	 SHORT $LN252@mountnewta
$LN251@mountnewta:
  01728	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01730	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01737	83 f8 05	 cmp	 eax, 5
  0173a	75 11		 jne	 SHORT $LN249@mountnewta
  0173c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169833
  01743	48 89 84 24 b8
	02 00 00	 mov	 QWORD PTR tv742[rsp], rax
  0174b	eb 44		 jmp	 SHORT $LN250@mountnewta
$LN249@mountnewta:
  0174d	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01755	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0175c	83 f8 06	 cmp	 eax, 6
  0175f	75 11		 jne	 SHORT $LN247@mountnewta
  01761	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169834
  01768	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv741[rsp], rax
  01770	eb 0f		 jmp	 SHORT $LN248@mountnewta
$LN247@mountnewta:
  01772	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169835
  01779	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv741[rsp], rax
$LN248@mountnewta:
  01781	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR tv741[rsp]
  01789	48 89 84 24 b8
	02 00 00	 mov	 QWORD PTR tv742[rsp], rax
$LN250@mountnewta:
  01791	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR tv742[rsp]
  01799	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv743[rsp], rax
$LN252@mountnewta:
  017a1	48 8b 84 24 c0
	02 00 00	 mov	 rax, QWORD PTR tv743[rsp]
  017a9	48 89 84 24 c8
	02 00 00	 mov	 QWORD PTR tv744[rsp], rax
$LN254@mountnewta:
  017b1	48 8b 84 24 c8
	02 00 00	 mov	 rax, QWORD PTR tv744[rsp]
  017b9	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv745[rsp], rax
$LN256@mountnewta:
  017c1	48 8b 84 24 d0
	02 00 00	 mov	 rax, QWORD PTR tv745[rsp]
  017c9	48 89 84 24 d8
	02 00 00	 mov	 QWORD PTR tv746[rsp], rax
$LN258@mountnewta:
  017d1	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  017da	74 15		 je	 SHORT $LN259@mountnewta
  017dc	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  017e4	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  017e8	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv753[rsp], eax
  017ef	eb 0b		 jmp	 SHORT $LN260@mountnewta
$LN259@mountnewta:
  017f1	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv753[rsp], 0
$LN260@mountnewta:
  017fc	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01805	74 17		 je	 SHORT $LN261@mountnewta
  01807	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0180f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01813	d1 f8		 sar	 eax, 1
  01815	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv759[rsp], eax
  0181c	eb 0b		 jmp	 SHORT $LN262@mountnewta
$LN261@mountnewta:
  0181e	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv759[rsp], 0
$LN262@mountnewta:
  01829	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  0182e	48 89 84 24 70
	06 00 00	 mov	 QWORD PTR tv687[rsp], rax
  01836	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0183e	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  01845	48 89 8c 24 78
	06 00 00	 mov	 QWORD PTR tv748[rsp], rcx
  0184d	b9 01 00 00 00	 mov	 ecx, 1
  01852	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01858	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169828
  0185f	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  01864	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0186c	48 8b 94 24 70
	06 00 00	 mov	 rdx, QWORD PTR tv687[rsp]
  01874	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  01878	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0187d	48 8b 8c 24 d8
	02 00 00	 mov	 rcx, QWORD PTR tv746[rsp]
  01885	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0188a	48 8b 8c 24 78
	06 00 00	 mov	 rcx, QWORD PTR tv748[rsp]
  01892	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01897	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv753[rsp]
  0189e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  018a2	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv759[rsp]
  018a9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  018ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169836
  018b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  018b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169837
  018c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  018c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  018ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  018d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169838
  018d7	ba cb 05 00 00	 mov	 edx, 1483		; 000005cbH
  018dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169839
  018e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1484 :                 optrc = -1;

  018e9	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1

; 1485 :                 break;

  018f1	e9 28 2f 00 00	 jmp	 $LN29@mountnewta
$LN71@mountnewta:

; 1486 :             }
; 1487 :             dev->tdparms.level = res.num;

  018f6	8b 84 24 90 07
	00 00		 mov	 eax, DWORD PTR res$[rsp]
  018fd	83 e0 0f	 and	 eax, 15
  01900	c1 e0 04	 shl	 eax, 4
  01903	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0190b	8b 89 30 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4144]
  01911	81 e1 0f ff ff
	ff		 and	 ecx, -241		; ffffff0fH
  01917	0b c8		 or	 ecx, eax
  01919	8b c1		 mov	 eax, ecx
  0191b	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01923	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1488 :             break;

  01929	e9 f0 2e 00 00	 jmp	 $LN29@mountnewta
$LN73@mountnewta:

; 1489 : 
; 1490 :         case TDPARM_CHKSIZE:
; 1491 :             if (0
; 1492 :                 || TAPEDEVT_SCSITAPE == dev->tapedevt
; 1493 :                 || TAPEDEVT_FAKETAPE == dev->tapedevt

  0192e	33 c0		 xor	 eax, eax
  01930	85 c0		 test	 eax, eax
  01932	75 2c		 jne	 SHORT $LN75@mountnewta
  01934	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0193c	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01943	83 f8 03	 cmp	 eax, 3
  01946	74 18		 je	 SHORT $LN75@mountnewta
  01948	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01950	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01957	83 f8 05	 cmp	 eax, 5
  0195a	0f 85 6c 02 00
	00		 jne	 $LN74@mountnewta
$LN75@mountnewta:

; 1494 :             )
; 1495 :             {
; 1496 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1497 :                 _HHC00223E(); optrc = -1; break;

  01960	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01968	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0196f	83 f8 01	 cmp	 eax, 1
  01972	75 14		 jne	 SHORT $LN273@mountnewta
  01974	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169843
  0197b	48 89 84 24 08
	03 00 00	 mov	 QWORD PTR tv811[rsp], rax
  01983	e9 1e 01 00 00	 jmp	 $LN274@mountnewta
$LN273@mountnewta:
  01988	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01990	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01997	83 f8 02	 cmp	 eax, 2
  0199a	75 14		 jne	 SHORT $LN271@mountnewta
  0199c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169844
  019a3	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR tv810[rsp], rax
  019ab	e9 e6 00 00 00	 jmp	 $LN272@mountnewta
$LN271@mountnewta:
  019b0	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  019b8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  019bf	83 f8 03	 cmp	 eax, 3
  019c2	75 14		 jne	 SHORT $LN269@mountnewta
  019c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169845
  019cb	48 89 84 24 f8
	02 00 00	 mov	 QWORD PTR tv809[rsp], rax
  019d3	e9 ae 00 00 00	 jmp	 $LN270@mountnewta
$LN269@mountnewta:
  019d8	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  019e0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  019e7	83 f8 04	 cmp	 eax, 4
  019ea	75 11		 jne	 SHORT $LN267@mountnewta
  019ec	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169846
  019f3	48 89 84 24 f0
	02 00 00	 mov	 QWORD PTR tv808[rsp], rax
  019fb	eb 79		 jmp	 SHORT $LN268@mountnewta
$LN267@mountnewta:
  019fd	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a05	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01a0c	83 f8 05	 cmp	 eax, 5
  01a0f	75 11		 jne	 SHORT $LN265@mountnewta
  01a11	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169847
  01a18	48 89 84 24 e8
	02 00 00	 mov	 QWORD PTR tv807[rsp], rax
  01a20	eb 44		 jmp	 SHORT $LN266@mountnewta
$LN265@mountnewta:
  01a22	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01a2a	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01a31	83 f8 06	 cmp	 eax, 6
  01a34	75 11		 jne	 SHORT $LN263@mountnewta
  01a36	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169848
  01a3d	48 89 84 24 e0
	02 00 00	 mov	 QWORD PTR tv806[rsp], rax
  01a45	eb 0f		 jmp	 SHORT $LN264@mountnewta
$LN263@mountnewta:
  01a47	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169849
  01a4e	48 89 84 24 e0
	02 00 00	 mov	 QWORD PTR tv806[rsp], rax
$LN264@mountnewta:
  01a56	48 8b 84 24 e0
	02 00 00	 mov	 rax, QWORD PTR tv806[rsp]
  01a5e	48 89 84 24 e8
	02 00 00	 mov	 QWORD PTR tv807[rsp], rax
$LN266@mountnewta:
  01a66	48 8b 84 24 e8
	02 00 00	 mov	 rax, QWORD PTR tv807[rsp]
  01a6e	48 89 84 24 f0
	02 00 00	 mov	 QWORD PTR tv808[rsp], rax
$LN268@mountnewta:
  01a76	48 8b 84 24 f0
	02 00 00	 mov	 rax, QWORD PTR tv808[rsp]
  01a7e	48 89 84 24 f8
	02 00 00	 mov	 QWORD PTR tv809[rsp], rax
$LN270@mountnewta:
  01a86	48 8b 84 24 f8
	02 00 00	 mov	 rax, QWORD PTR tv809[rsp]
  01a8e	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR tv810[rsp], rax
$LN272@mountnewta:
  01a96	48 8b 84 24 00
	03 00 00	 mov	 rax, QWORD PTR tv810[rsp]
  01a9e	48 89 84 24 08
	03 00 00	 mov	 QWORD PTR tv811[rsp], rax
$LN274@mountnewta:
  01aa6	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01aaf	74 15		 je	 SHORT $LN275@mountnewta
  01ab1	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ab9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01abd	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv818[rsp], eax
  01ac4	eb 0b		 jmp	 SHORT $LN276@mountnewta
$LN275@mountnewta:
  01ac6	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv818[rsp], 0
$LN276@mountnewta:
  01ad1	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01ada	74 17		 je	 SHORT $LN277@mountnewta
  01adc	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ae4	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01ae8	d1 f8		 sar	 eax, 1
  01aea	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv824[rsp], eax
  01af1	eb 0b		 jmp	 SHORT $LN278@mountnewta
$LN277@mountnewta:
  01af3	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv824[rsp], 0
$LN278@mountnewta:
  01afe	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  01b03	48 89 84 24 80
	06 00 00	 mov	 QWORD PTR tv784[rsp], rax
  01b0b	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01b13	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  01b1a	48 89 8c 24 88
	06 00 00	 mov	 QWORD PTR tv813[rsp], rcx
  01b22	b9 01 00 00 00	 mov	 ecx, 1
  01b27	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01b2d	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  01b35	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  01b3a	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01b42	48 8b 94 24 80
	06 00 00	 mov	 rdx, QWORD PTR tv784[rsp]
  01b4a	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  01b4e	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01b53	48 8b 8c 24 08
	03 00 00	 mov	 rcx, QWORD PTR tv811[rsp]
  01b5b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01b60	48 8b 8c 24 88
	06 00 00	 mov	 rcx, QWORD PTR tv813[rsp]
  01b68	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01b6d	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv818[rsp]
  01b74	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01b78	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv824[rsp]
  01b7f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01b83	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169850
  01b8a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01b8f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169851
  01b96	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01b9b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01ba0	41 b9 03 00 00
	00		 mov	 r9d, 3
  01ba6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169852
  01bad	ba d9 05 00 00	 mov	 edx, 1497		; 000005d9H
  01bb2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169853
  01bb9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  01bbf	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  01bc7	e9 52 2c 00 00	 jmp	 $LN29@mountnewta
$LN74@mountnewta:

; 1498 :             }
; 1499 :             if (res.num < HETMIN_CHUNKSIZE || res.num > HETMAX_CHUNKSIZE)

  01bcc	81 bc 24 90 07
	00 00 00 10 00
	00		 cmp	 DWORD PTR res$[rsp], 4096 ; 00001000H
  01bd7	72 11		 jb	 SHORT $LN77@mountnewta
  01bd9	81 bc 24 90 07
	00 00 ff ff 00
	00		 cmp	 DWORD PTR res$[rsp], 65535 ; 0000ffffH
  01be4	0f 86 6b 02 00
	00		 jbe	 $LN76@mountnewta
$LN77@mountnewta:

; 1500 :             {
; 1501 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1502 :                 WRMSG(HHC00223, "E", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), argv[i], "chunksize out of range");

  01bea	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01bf2	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01bf9	83 f8 01	 cmp	 eax, 1
  01bfc	75 14		 jne	 SHORT $LN289@mountnewta
  01bfe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169857
  01c05	48 89 84 24 38
	03 00 00	 mov	 QWORD PTR tv865[rsp], rax
  01c0d	e9 1e 01 00 00	 jmp	 $LN290@mountnewta
$LN289@mountnewta:
  01c12	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c1a	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01c21	83 f8 02	 cmp	 eax, 2
  01c24	75 14		 jne	 SHORT $LN287@mountnewta
  01c26	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169858
  01c2d	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR tv864[rsp], rax
  01c35	e9 e6 00 00 00	 jmp	 $LN288@mountnewta
$LN287@mountnewta:
  01c3a	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c42	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01c49	83 f8 03	 cmp	 eax, 3
  01c4c	75 14		 jne	 SHORT $LN285@mountnewta
  01c4e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169859
  01c55	48 89 84 24 28
	03 00 00	 mov	 QWORD PTR tv863[rsp], rax
  01c5d	e9 ae 00 00 00	 jmp	 $LN286@mountnewta
$LN285@mountnewta:
  01c62	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c6a	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01c71	83 f8 04	 cmp	 eax, 4
  01c74	75 11		 jne	 SHORT $LN283@mountnewta
  01c76	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169860
  01c7d	48 89 84 24 20
	03 00 00	 mov	 QWORD PTR tv862[rsp], rax
  01c85	eb 79		 jmp	 SHORT $LN284@mountnewta
$LN283@mountnewta:
  01c87	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01c8f	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01c96	83 f8 05	 cmp	 eax, 5
  01c99	75 11		 jne	 SHORT $LN281@mountnewta
  01c9b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169861
  01ca2	48 89 84 24 18
	03 00 00	 mov	 QWORD PTR tv861[rsp], rax
  01caa	eb 44		 jmp	 SHORT $LN282@mountnewta
$LN281@mountnewta:
  01cac	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01cb4	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01cbb	83 f8 06	 cmp	 eax, 6
  01cbe	75 11		 jne	 SHORT $LN279@mountnewta
  01cc0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169862
  01cc7	48 89 84 24 10
	03 00 00	 mov	 QWORD PTR tv860[rsp], rax
  01ccf	eb 0f		 jmp	 SHORT $LN280@mountnewta
$LN279@mountnewta:
  01cd1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169863
  01cd8	48 89 84 24 10
	03 00 00	 mov	 QWORD PTR tv860[rsp], rax
$LN280@mountnewta:
  01ce0	48 8b 84 24 10
	03 00 00	 mov	 rax, QWORD PTR tv860[rsp]
  01ce8	48 89 84 24 18
	03 00 00	 mov	 QWORD PTR tv861[rsp], rax
$LN282@mountnewta:
  01cf0	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR tv861[rsp]
  01cf8	48 89 84 24 20
	03 00 00	 mov	 QWORD PTR tv862[rsp], rax
$LN284@mountnewta:
  01d00	48 8b 84 24 20
	03 00 00	 mov	 rax, QWORD PTR tv862[rsp]
  01d08	48 89 84 24 28
	03 00 00	 mov	 QWORD PTR tv863[rsp], rax
$LN286@mountnewta:
  01d10	48 8b 84 24 28
	03 00 00	 mov	 rax, QWORD PTR tv863[rsp]
  01d18	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR tv864[rsp], rax
$LN288@mountnewta:
  01d20	48 8b 84 24 30
	03 00 00	 mov	 rax, QWORD PTR tv864[rsp]
  01d28	48 89 84 24 38
	03 00 00	 mov	 QWORD PTR tv865[rsp], rax
$LN290@mountnewta:
  01d30	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01d39	74 15		 je	 SHORT $LN291@mountnewta
  01d3b	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d43	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01d47	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv872[rsp], eax
  01d4e	eb 0b		 jmp	 SHORT $LN292@mountnewta
$LN291@mountnewta:
  01d50	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv872[rsp], 0
$LN292@mountnewta:
  01d5b	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01d64	74 17		 je	 SHORT $LN293@mountnewta
  01d66	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01d6e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01d72	d1 f8		 sar	 eax, 1
  01d74	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv878[rsp], eax
  01d7b	eb 0b		 jmp	 SHORT $LN294@mountnewta
$LN293@mountnewta:
  01d7d	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv878[rsp], 0
$LN294@mountnewta:
  01d88	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  01d8d	48 89 84 24 90
	06 00 00	 mov	 QWORD PTR tv838[rsp], rax
  01d95	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01d9d	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  01da4	48 89 8c 24 98
	06 00 00	 mov	 QWORD PTR tv867[rsp], rcx
  01dac	b9 01 00 00 00	 mov	 ecx, 1
  01db1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01db7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169856
  01dbe	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  01dc3	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01dcb	48 8b 94 24 90
	06 00 00	 mov	 rdx, QWORD PTR tv838[rsp]
  01dd3	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  01dd7	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01ddc	48 8b 8c 24 38
	03 00 00	 mov	 rcx, QWORD PTR tv865[rsp]
  01de4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01de9	48 8b 8c 24 98
	06 00 00	 mov	 rcx, QWORD PTR tv867[rsp]
  01df1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01df6	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv872[rsp]
  01dfd	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01e01	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR tv878[rsp]
  01e08	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01e0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169864
  01e13	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01e18	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169865
  01e1f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01e24	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01e29	41 b9 03 00 00
	00		 mov	 r9d, 3
  01e2f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169866
  01e36	ba de 05 00 00	 mov	 edx, 1502		; 000005deH
  01e3b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169867
  01e42	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1503 :                 optrc = -1;

  01e48	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1

; 1504 :                 break;

  01e50	e9 c9 29 00 00	 jmp	 $LN29@mountnewta
$LN76@mountnewta:

; 1505 :             }
; 1506 :             dev->tdparms.chksize = res.num;

  01e55	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e5d	0f b7 8c 24 90
	07 00 00	 movzx	 ecx, WORD PTR res$[rsp]
  01e65	66 89 88 34 10
	00 00		 mov	 WORD PTR [rax+4148], cx

; 1507 :             break;

  01e6c	e9 ad 29 00 00	 jmp	 $LN29@mountnewta
$LN78@mountnewta:

; 1508 : 
; 1509 :         case TDPARM_MAXSIZE:
; 1510 :             if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  01e71	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e79	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01e80	83 f8 03	 cmp	 eax, 3
  01e83	0f 85 71 02 00
	00		 jne	 $LN79@mountnewta

; 1511 :             {
; 1512 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1513 :                 _HHC00223E(); optrc = -1; break;

  01e89	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01e91	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01e98	83 f8 01	 cmp	 eax, 1
  01e9b	75 14		 jne	 SHORT $LN305@mountnewta
  01e9d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169871
  01ea4	48 89 84 24 68
	03 00 00	 mov	 QWORD PTR tv953[rsp], rax
  01eac	e9 1e 01 00 00	 jmp	 $LN306@mountnewta
$LN305@mountnewta:
  01eb1	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01eb9	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01ec0	83 f8 02	 cmp	 eax, 2
  01ec3	75 14		 jne	 SHORT $LN303@mountnewta
  01ec5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169872
  01ecc	48 89 84 24 60
	03 00 00	 mov	 QWORD PTR tv952[rsp], rax
  01ed4	e9 e6 00 00 00	 jmp	 $LN304@mountnewta
$LN303@mountnewta:
  01ed9	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01ee1	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01ee8	83 f8 03	 cmp	 eax, 3
  01eeb	75 14		 jne	 SHORT $LN301@mountnewta
  01eed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169873
  01ef4	48 89 84 24 58
	03 00 00	 mov	 QWORD PTR tv951[rsp], rax
  01efc	e9 ae 00 00 00	 jmp	 $LN302@mountnewta
$LN301@mountnewta:
  01f01	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f09	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01f10	83 f8 04	 cmp	 eax, 4
  01f13	75 11		 jne	 SHORT $LN299@mountnewta
  01f15	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169874
  01f1c	48 89 84 24 50
	03 00 00	 mov	 QWORD PTR tv950[rsp], rax
  01f24	eb 79		 jmp	 SHORT $LN300@mountnewta
$LN299@mountnewta:
  01f26	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f2e	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01f35	83 f8 05	 cmp	 eax, 5
  01f38	75 11		 jne	 SHORT $LN297@mountnewta
  01f3a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169875
  01f41	48 89 84 24 48
	03 00 00	 mov	 QWORD PTR tv949[rsp], rax
  01f49	eb 44		 jmp	 SHORT $LN298@mountnewta
$LN297@mountnewta:
  01f4b	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01f53	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  01f5a	83 f8 06	 cmp	 eax, 6
  01f5d	75 11		 jne	 SHORT $LN295@mountnewta
  01f5f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169876
  01f66	48 89 84 24 40
	03 00 00	 mov	 QWORD PTR tv948[rsp], rax
  01f6e	eb 0f		 jmp	 SHORT $LN296@mountnewta
$LN295@mountnewta:
  01f70	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169877
  01f77	48 89 84 24 40
	03 00 00	 mov	 QWORD PTR tv948[rsp], rax
$LN296@mountnewta:
  01f7f	48 8b 84 24 40
	03 00 00	 mov	 rax, QWORD PTR tv948[rsp]
  01f87	48 89 84 24 48
	03 00 00	 mov	 QWORD PTR tv949[rsp], rax
$LN298@mountnewta:
  01f8f	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR tv949[rsp]
  01f97	48 89 84 24 50
	03 00 00	 mov	 QWORD PTR tv950[rsp], rax
$LN300@mountnewta:
  01f9f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR tv950[rsp]
  01fa7	48 89 84 24 58
	03 00 00	 mov	 QWORD PTR tv951[rsp], rax
$LN302@mountnewta:
  01faf	48 8b 84 24 58
	03 00 00	 mov	 rax, QWORD PTR tv951[rsp]
  01fb7	48 89 84 24 60
	03 00 00	 mov	 QWORD PTR tv952[rsp], rax
$LN304@mountnewta:
  01fbf	48 8b 84 24 60
	03 00 00	 mov	 rax, QWORD PTR tv952[rsp]
  01fc7	48 89 84 24 68
	03 00 00	 mov	 QWORD PTR tv953[rsp], rax
$LN306@mountnewta:
  01fcf	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01fd8	74 15		 je	 SHORT $LN307@mountnewta
  01fda	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01fe2	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01fe6	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv960[rsp], eax
  01fed	eb 0b		 jmp	 SHORT $LN308@mountnewta
$LN307@mountnewta:
  01fef	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv960[rsp], 0
$LN308@mountnewta:
  01ffa	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02003	74 17		 je	 SHORT $LN309@mountnewta
  02005	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0200d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02011	d1 f8		 sar	 eax, 1
  02013	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv966[rsp], eax
  0201a	eb 0b		 jmp	 SHORT $LN310@mountnewta
$LN309@mountnewta:
  0201c	c7 84 24 fc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv966[rsp], 0
$LN310@mountnewta:
  02027	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  0202c	48 89 84 24 a0
	06 00 00	 mov	 QWORD PTR tv894[rsp], rax
  02034	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0203c	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  02043	48 89 8c 24 a8
	06 00 00	 mov	 QWORD PTR tv955[rsp], rcx
  0204b	b9 01 00 00 00	 mov	 ecx, 1
  02050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02056	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  0205e	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  02063	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0206b	48 8b 94 24 a0
	06 00 00	 mov	 rdx, QWORD PTR tv894[rsp]
  02073	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  02077	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0207c	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR tv953[rsp]
  02084	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02089	48 8b 8c 24 a8
	06 00 00	 mov	 rcx, QWORD PTR tv955[rsp]
  02091	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02096	8b 8c 24 f8 00
	00 00		 mov	 ecx, DWORD PTR tv960[rsp]
  0209d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  020a1	8b 8c 24 fc 00
	00 00		 mov	 ecx, DWORD PTR tv966[rsp]
  020a8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  020ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169878
  020b3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  020b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169879
  020bf	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  020c4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  020c9	41 b9 03 00 00
	00		 mov	 r9d, 3
  020cf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169880
  020d6	ba e9 05 00 00	 mov	 edx, 1513		; 000005e9H
  020db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169881
  020e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  020e8	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  020f0	e9 29 27 00 00	 jmp	 $LN29@mountnewta

; 1514 :             }

  020f5	e9 2c 02 00 00	 jmp	 $LN80@mountnewta
$LN79@mountnewta:

; 1515 :             else
; 1516 :             {
; 1517 :                 int     rc      = 0;

  020fa	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rc$7[rsp], 0

; 1518 :                 U64     maxsize = 0;

  02105	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR maxsize$6[rsp], 0

; 1519 :                 BYTE    f       = '\0';

  02111	c6 44 24 79 00	 mov	 BYTE PTR f$1[rsp], 0

; 1520 :                 BYTE    c       = '\0';

  02116	c6 44 24 7b 00	 mov	 BYTE PTR c$3[rsp], 0

; 1521 : 
; 1522 :                 rc = sscanf((const char*)res.str, "%"SCNu64"%c%c", &maxsize, &f, &c);

  0211b	48 8d 44 24 7b	 lea	 rax, QWORD PTR c$3[rsp]
  02120	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02125	4c 8d 4c 24 79	 lea	 r9, QWORD PTR f$1[rsp]
  0212a	4c 8d 84 24 90
	00 00 00	 lea	 r8, QWORD PTR maxsize$6[rsp]
  02132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169882
  02139	48 8d 8c 24 90
	07 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  02141	e8 00 00 00 00	 call	 sscanf
  02146	89 84 24 98 00
	00 00		 mov	 DWORD PTR rc$7[rsp], eax

; 1523 :                 if ( rc < 1 || rc > 2 )

  0214d	83 bc 24 98 00
	00 00 01	 cmp	 DWORD PTR rc$7[rsp], 1
  02155	7c 0a		 jl	 SHORT $LN83@mountnewta
  02157	83 bc 24 98 00
	00 00 02	 cmp	 DWORD PTR rc$7[rsp], 2
  0215f	7e 6d		 jle	 SHORT $LN81@mountnewta
$LN83@mountnewta:

; 1524 :                 {
; 1525 :                     WRMSG( HHC01451, "E", res.str, "maxsize" );

  02161	b9 01 00 00 00	 mov	 ecx, 1
  02166	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0216c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169886
  02173	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  02178	48 8d 8c 24 90
	07 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  02180	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02185	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169887
  0218c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169888
  02198	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0219d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  021a2	41 b9 03 00 00
	00		 mov	 r9d, 3
  021a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169889
  021af	ba f5 05 00 00	 mov	 edx, 1525		; 000005f5H
  021b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169890
  021bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1526 :                     optrc = -1;

  021c1	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1

; 1527 :                 }

  021c9	e9 58 01 00 00	 jmp	 $LN82@mountnewta
$LN81@mountnewta:

; 1528 :                 else if ( rc == 2 )

  021ce	83 bc 24 98 00
	00 00 02	 cmp	 DWORD PTR rc$7[rsp], 2
  021d6	0f 85 33 01 00
	00		 jne	 $LN84@mountnewta

; 1529 :                 {
; 1530 :                     switch (toupper(f))

  021dc	0f b6 44 24 79	 movzx	 eax, BYTE PTR f$1[rsp]
  021e1	8b c8		 mov	 ecx, eax
  021e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  021e9	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv1000[rsp], eax
  021f0	83 bc 24 9c 00
	00 00 47	 cmp	 DWORD PTR tv1000[rsp], 71 ; 00000047H
  021f8	74 52		 je	 SHORT $LN88@mountnewta
  021fa	83 bc 24 9c 00
	00 00 4b	 cmp	 DWORD PTR tv1000[rsp], 75 ; 0000004bH
  02202	74 16		 je	 SHORT $LN86@mountnewta
  02204	83 bc 24 9c 00
	00 00 4d	 cmp	 DWORD PTR tv1000[rsp], 77 ; 0000004dH
  0220c	74 25		 je	 SHORT $LN87@mountnewta
  0220e	83 bc 24 9c 00
	00 00 54	 cmp	 DWORD PTR tv1000[rsp], 84 ; 00000054H
  02216	74 4d		 je	 SHORT $LN89@mountnewta
  02218	eb 61		 jmp	 SHORT $LN90@mountnewta
$LN86@mountnewta:

; 1531 :                     {
; 1532 :                         case 'K':
; 1533 :                             maxsize <<= SHIFT_KIBIBYTE;

  0221a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR maxsize$6[rsp]
  02222	48 c1 e0 0a	 shl	 rax, 10
  02226	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR maxsize$6[rsp], rax

; 1534 :                             break;

  0222e	e9 bc 00 00 00	 jmp	 $LN31@mountnewta
$LN87@mountnewta:

; 1535 :                         case 'M':
; 1536 :                             maxsize <<= SHIFT_MEBIBYTE;

  02233	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR maxsize$6[rsp]
  0223b	48 c1 e0 14	 shl	 rax, 20
  0223f	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR maxsize$6[rsp], rax

; 1537 :                             break;

  02247	e9 a3 00 00 00	 jmp	 $LN31@mountnewta
$LN88@mountnewta:

; 1538 :                         case 'G':
; 1539 :                             maxsize <<= SHIFT_GIBIBYTE;

  0224c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR maxsize$6[rsp]
  02254	48 c1 e0 1e	 shl	 rax, 30
  02258	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR maxsize$6[rsp], rax

; 1540 :                             break;

  02260	e9 8a 00 00 00	 jmp	 $LN31@mountnewta
$LN89@mountnewta:

; 1541 : #if SIZEOF_SIZE_T >= 8
; 1542 :                         case 'T':
; 1543 :                             maxsize <<= SHIFT_TEBIBYTE;

  02265	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR maxsize$6[rsp]
  0226d	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  02271	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR maxsize$6[rsp], rax

; 1544 :                             break;

  02279	eb 74		 jmp	 SHORT $LN31@mountnewta
$LN90@mountnewta:

; 1545 : #endif
; 1546 :                         default:
; 1547 :                             WRMSG( HHC01451, "E", res.str, "maxsize" );

  0227b	b9 01 00 00 00	 mov	 ecx, 1
  02280	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02286	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169898
  0228d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  02292	48 8d 8c 24 90
	07 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  0229a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0229f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169899
  022a6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  022ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169900
  022b2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  022b7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  022bc	41 b9 03 00 00
	00		 mov	 r9d, 3
  022c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169901
  022c9	ba 0b 06 00 00	 mov	 edx, 1547		; 0000060bH
  022ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169902
  022d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1548 :                             maxsize = 0;

  022db	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR maxsize$6[rsp], 0

; 1549 :                             optrc = -1;

  022e7	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
$LN31@mountnewta:

; 1550 :                             break;
; 1551 :                     }
; 1552 :                     if ( optrc != -1 )

  022ef	83 7c 24 70 ff	 cmp	 DWORD PTR optrc$[rsp], -1
  022f4	74 17		 je	 SHORT $LN91@mountnewta

; 1553 :                         dev->tdparms.maxsize = maxsize;

  022f6	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  022fe	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR maxsize$6[rsp]
  02306	48 89 88 38 10
	00 00		 mov	 QWORD PTR [rax+4152], rcx
$LN91@mountnewta:

; 1554 :                 }

  0230d	eb 17		 jmp	 SHORT $LN85@mountnewta
$LN84@mountnewta:

; 1555 :                 else
; 1556 :                     dev->tdparms.maxsize = maxsize;

  0230f	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02317	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR maxsize$6[rsp]
  0231f	48 89 88 38 10
	00 00		 mov	 QWORD PTR [rax+4152], rcx
$LN85@mountnewta:
$LN82@mountnewta:
$LN80@mountnewta:

; 1557 :             }
; 1558 :             break;

  02326	e9 f3 24 00 00	 jmp	 $LN29@mountnewta
$LN92@mountnewta:

; 1559 : 
; 1560 :         case TDPARM_MAXSIZEK:
; 1561 :             if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  0232b	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02333	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0233a	83 f8 03	 cmp	 eax, 3
  0233d	0f 85 6c 02 00
	00		 jne	 $LN93@mountnewta

; 1562 :             {
; 1563 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1564 :                 _HHC00223E(); optrc = -1; break;

  02343	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0234b	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02352	83 f8 01	 cmp	 eax, 1
  02355	75 14		 jne	 SHORT $LN321@mountnewta
  02357	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169906
  0235e	48 89 84 24 98
	03 00 00	 mov	 QWORD PTR tv1054[rsp], rax
  02366	e9 1e 01 00 00	 jmp	 $LN322@mountnewta
$LN321@mountnewta:
  0236b	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02373	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0237a	83 f8 02	 cmp	 eax, 2
  0237d	75 14		 jne	 SHORT $LN319@mountnewta
  0237f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169907
  02386	48 89 84 24 90
	03 00 00	 mov	 QWORD PTR tv1053[rsp], rax
  0238e	e9 e6 00 00 00	 jmp	 $LN320@mountnewta
$LN319@mountnewta:
  02393	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0239b	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  023a2	83 f8 03	 cmp	 eax, 3
  023a5	75 14		 jne	 SHORT $LN317@mountnewta
  023a7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169908
  023ae	48 89 84 24 88
	03 00 00	 mov	 QWORD PTR tv1052[rsp], rax
  023b6	e9 ae 00 00 00	 jmp	 $LN318@mountnewta
$LN317@mountnewta:
  023bb	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  023c3	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  023ca	83 f8 04	 cmp	 eax, 4
  023cd	75 11		 jne	 SHORT $LN315@mountnewta
  023cf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169909
  023d6	48 89 84 24 80
	03 00 00	 mov	 QWORD PTR tv1051[rsp], rax
  023de	eb 79		 jmp	 SHORT $LN316@mountnewta
$LN315@mountnewta:
  023e0	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  023e8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  023ef	83 f8 05	 cmp	 eax, 5
  023f2	75 11		 jne	 SHORT $LN313@mountnewta
  023f4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169910
  023fb	48 89 84 24 78
	03 00 00	 mov	 QWORD PTR tv1050[rsp], rax
  02403	eb 44		 jmp	 SHORT $LN314@mountnewta
$LN313@mountnewta:
  02405	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0240d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02414	83 f8 06	 cmp	 eax, 6
  02417	75 11		 jne	 SHORT $LN311@mountnewta
  02419	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169911
  02420	48 89 84 24 70
	03 00 00	 mov	 QWORD PTR tv1049[rsp], rax
  02428	eb 0f		 jmp	 SHORT $LN312@mountnewta
$LN311@mountnewta:
  0242a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169912
  02431	48 89 84 24 70
	03 00 00	 mov	 QWORD PTR tv1049[rsp], rax
$LN312@mountnewta:
  02439	48 8b 84 24 70
	03 00 00	 mov	 rax, QWORD PTR tv1049[rsp]
  02441	48 89 84 24 78
	03 00 00	 mov	 QWORD PTR tv1050[rsp], rax
$LN314@mountnewta:
  02449	48 8b 84 24 78
	03 00 00	 mov	 rax, QWORD PTR tv1050[rsp]
  02451	48 89 84 24 80
	03 00 00	 mov	 QWORD PTR tv1051[rsp], rax
$LN316@mountnewta:
  02459	48 8b 84 24 80
	03 00 00	 mov	 rax, QWORD PTR tv1051[rsp]
  02461	48 89 84 24 88
	03 00 00	 mov	 QWORD PTR tv1052[rsp], rax
$LN318@mountnewta:
  02469	48 8b 84 24 88
	03 00 00	 mov	 rax, QWORD PTR tv1052[rsp]
  02471	48 89 84 24 90
	03 00 00	 mov	 QWORD PTR tv1053[rsp], rax
$LN320@mountnewta:
  02479	48 8b 84 24 90
	03 00 00	 mov	 rax, QWORD PTR tv1053[rsp]
  02481	48 89 84 24 98
	03 00 00	 mov	 QWORD PTR tv1054[rsp], rax
$LN322@mountnewta:
  02489	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02492	74 15		 je	 SHORT $LN323@mountnewta
  02494	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0249c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  024a0	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv1093[rsp], eax
  024a7	eb 0b		 jmp	 SHORT $LN324@mountnewta
$LN323@mountnewta:
  024a9	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1093[rsp], 0
$LN324@mountnewta:
  024b4	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  024bd	74 17		 je	 SHORT $LN325@mountnewta
  024bf	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  024c7	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  024cb	d1 f8		 sar	 eax, 1
  024cd	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv1099[rsp], eax
  024d4	eb 0b		 jmp	 SHORT $LN326@mountnewta
$LN325@mountnewta:
  024d6	c7 84 24 04 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1099[rsp], 0
$LN326@mountnewta:
  024e1	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  024e6	48 89 84 24 b0
	06 00 00	 mov	 QWORD PTR tv1027[rsp], rax
  024ee	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  024f6	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  024fd	48 89 8c 24 b8
	06 00 00	 mov	 QWORD PTR tv1088[rsp], rcx
  02505	b9 01 00 00 00	 mov	 ecx, 1
  0250a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02510	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  02518	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0251d	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  02525	48 8b 94 24 b0
	06 00 00	 mov	 rdx, QWORD PTR tv1027[rsp]
  0252d	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  02531	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02536	48 8b 8c 24 98
	03 00 00	 mov	 rcx, QWORD PTR tv1054[rsp]
  0253e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02543	48 8b 8c 24 b8
	06 00 00	 mov	 rcx, QWORD PTR tv1088[rsp]
  0254b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02550	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR tv1093[rsp]
  02557	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0255b	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR tv1099[rsp]
  02562	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02566	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169913
  0256d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02572	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169914
  02579	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0257e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02583	41 b9 03 00 00
	00		 mov	 r9d, 3
  02589	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169915
  02590	ba 1c 06 00 00	 mov	 edx, 1564		; 0000061cH
  02595	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169916
  0259c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  025a2	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  025aa	e9 6f 22 00 00	 jmp	 $LN29@mountnewta
$LN93@mountnewta:

; 1565 :             }
; 1566 :             dev->tdparms.maxsize=res.num*1024;

  025af	69 84 24 90 07
	00 00 00 04 00
	00		 imul	 eax, DWORD PTR res$[rsp], 1024 ; 00000400H
  025ba	8b c0		 mov	 eax, eax
  025bc	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  025c4	48 89 81 38 10
	00 00		 mov	 QWORD PTR [rcx+4152], rax

; 1567 :             break;

  025cb	e9 4e 22 00 00	 jmp	 $LN29@mountnewta
$LN94@mountnewta:

; 1568 : 
; 1569 :         case TDPARM_MAXSIZEM:
; 1570 :             if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  025d0	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  025d8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  025df	83 f8 03	 cmp	 eax, 3
  025e2	0f 85 6c 02 00
	00		 jne	 $LN95@mountnewta

; 1571 :             {
; 1572 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1573 :                 _HHC00223E(); optrc = -1; break;

  025e8	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  025f0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  025f7	83 f8 01	 cmp	 eax, 1
  025fa	75 14		 jne	 SHORT $LN337@mountnewta
  025fc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169919
  02603	48 89 84 24 c8
	03 00 00	 mov	 QWORD PTR tv1144[rsp], rax
  0260b	e9 1e 01 00 00	 jmp	 $LN338@mountnewta
$LN337@mountnewta:
  02610	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02618	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0261f	83 f8 02	 cmp	 eax, 2
  02622	75 14		 jne	 SHORT $LN335@mountnewta
  02624	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169920
  0262b	48 89 84 24 c0
	03 00 00	 mov	 QWORD PTR tv1143[rsp], rax
  02633	e9 e6 00 00 00	 jmp	 $LN336@mountnewta
$LN335@mountnewta:
  02638	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02640	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02647	83 f8 03	 cmp	 eax, 3
  0264a	75 14		 jne	 SHORT $LN333@mountnewta
  0264c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169921
  02653	48 89 84 24 b8
	03 00 00	 mov	 QWORD PTR tv1142[rsp], rax
  0265b	e9 ae 00 00 00	 jmp	 $LN334@mountnewta
$LN333@mountnewta:
  02660	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02668	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0266f	83 f8 04	 cmp	 eax, 4
  02672	75 11		 jne	 SHORT $LN331@mountnewta
  02674	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169922
  0267b	48 89 84 24 b0
	03 00 00	 mov	 QWORD PTR tv1141[rsp], rax
  02683	eb 79		 jmp	 SHORT $LN332@mountnewta
$LN331@mountnewta:
  02685	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0268d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02694	83 f8 05	 cmp	 eax, 5
  02697	75 11		 jne	 SHORT $LN329@mountnewta
  02699	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169923
  026a0	48 89 84 24 a8
	03 00 00	 mov	 QWORD PTR tv1140[rsp], rax
  026a8	eb 44		 jmp	 SHORT $LN330@mountnewta
$LN329@mountnewta:
  026aa	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  026b2	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  026b9	83 f8 06	 cmp	 eax, 6
  026bc	75 11		 jne	 SHORT $LN327@mountnewta
  026be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169924
  026c5	48 89 84 24 a0
	03 00 00	 mov	 QWORD PTR tv1139[rsp], rax
  026cd	eb 0f		 jmp	 SHORT $LN328@mountnewta
$LN327@mountnewta:
  026cf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169925
  026d6	48 89 84 24 a0
	03 00 00	 mov	 QWORD PTR tv1139[rsp], rax
$LN328@mountnewta:
  026de	48 8b 84 24 a0
	03 00 00	 mov	 rax, QWORD PTR tv1139[rsp]
  026e6	48 89 84 24 a8
	03 00 00	 mov	 QWORD PTR tv1140[rsp], rax
$LN330@mountnewta:
  026ee	48 8b 84 24 a8
	03 00 00	 mov	 rax, QWORD PTR tv1140[rsp]
  026f6	48 89 84 24 b0
	03 00 00	 mov	 QWORD PTR tv1141[rsp], rax
$LN332@mountnewta:
  026fe	48 8b 84 24 b0
	03 00 00	 mov	 rax, QWORD PTR tv1141[rsp]
  02706	48 89 84 24 b8
	03 00 00	 mov	 QWORD PTR tv1142[rsp], rax
$LN334@mountnewta:
  0270e	48 8b 84 24 b8
	03 00 00	 mov	 rax, QWORD PTR tv1142[rsp]
  02716	48 89 84 24 c0
	03 00 00	 mov	 QWORD PTR tv1143[rsp], rax
$LN336@mountnewta:
  0271e	48 8b 84 24 c0
	03 00 00	 mov	 rax, QWORD PTR tv1143[rsp]
  02726	48 89 84 24 c8
	03 00 00	 mov	 QWORD PTR tv1144[rsp], rax
$LN338@mountnewta:
  0272e	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02737	74 15		 je	 SHORT $LN339@mountnewta
  02739	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02741	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02745	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv1151[rsp], eax
  0274c	eb 0b		 jmp	 SHORT $LN340@mountnewta
$LN339@mountnewta:
  0274e	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1151[rsp], 0
$LN340@mountnewta:
  02759	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02762	74 17		 je	 SHORT $LN341@mountnewta
  02764	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0276c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02770	d1 f8		 sar	 eax, 1
  02772	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv1157[rsp], eax
  02779	eb 0b		 jmp	 SHORT $LN342@mountnewta
$LN341@mountnewta:
  0277b	c7 84 24 0c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1157[rsp], 0
$LN342@mountnewta:
  02786	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  0278b	48 89 84 24 c0
	06 00 00	 mov	 QWORD PTR tv1117[rsp], rax
  02793	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0279b	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  027a2	48 89 8c 24 c8
	06 00 00	 mov	 QWORD PTR tv1146[rsp], rcx
  027aa	b9 01 00 00 00	 mov	 ecx, 1
  027af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  027b5	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  027bd	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  027c2	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  027ca	48 8b 94 24 c0
	06 00 00	 mov	 rdx, QWORD PTR tv1117[rsp]
  027d2	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  027d6	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  027db	48 8b 8c 24 c8
	03 00 00	 mov	 rcx, QWORD PTR tv1144[rsp]
  027e3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  027e8	48 8b 8c 24 c8
	06 00 00	 mov	 rcx, QWORD PTR tv1146[rsp]
  027f0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  027f5	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR tv1151[rsp]
  027fc	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02800	8b 8c 24 0c 01
	00 00		 mov	 ecx, DWORD PTR tv1157[rsp]
  02807	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0280b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169926
  02812	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02817	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169927
  0281e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02823	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02828	41 b9 03 00 00
	00		 mov	 r9d, 3
  0282e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169928
  02835	ba 25 06 00 00	 mov	 edx, 1573		; 00000625H
  0283a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169929
  02841	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02847	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  0284f	e9 ca 1f 00 00	 jmp	 $LN29@mountnewta
$LN95@mountnewta:

; 1574 :             }
; 1575 :             dev->tdparms.maxsize=res.num*1024*1024;

  02854	69 84 24 90 07
	00 00 00 04 00
	00		 imul	 eax, DWORD PTR res$[rsp], 1024 ; 00000400H
  0285f	69 c0 00 04 00
	00		 imul	 eax, eax, 1024		; 00000400H
  02865	8b c0		 mov	 eax, eax
  02867	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0286f	48 89 81 38 10
	00 00		 mov	 QWORD PTR [rcx+4152], rax

; 1576 :             break;

  02876	e9 a3 1f 00 00	 jmp	 $LN29@mountnewta
$LN96@mountnewta:

; 1577 : 
; 1578 :         case TDPARM_EOTMARGIN:
; 1579 :             {
; 1580 :                 int     rc          = 0;

  0287b	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rc$8[rsp], 0

; 1581 :                 U64     eotmargin   = 0;

  02886	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR eotmargin$5[rsp], 0

; 1582 :                 BYTE    f           = '\0';

  02892	c6 44 24 7a 00	 mov	 BYTE PTR f$2[rsp], 0

; 1583 :                 BYTE    c           = '\0';

  02897	c6 44 24 7c 00	 mov	 BYTE PTR c$4[rsp], 0

; 1584 : 
; 1585 :                 rc = sscanf((const char*)res.str, "%"SCNu64"%c%c", &eotmargin, &f, &c);

  0289c	48 8d 44 24 7c	 lea	 rax, QWORD PTR c$4[rsp]
  028a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  028a6	4c 8d 4c 24 7a	 lea	 r9, QWORD PTR f$2[rsp]
  028ab	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR eotmargin$5[rsp]
  028b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169931
  028ba	48 8d 8c 24 90
	07 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  028c2	e8 00 00 00 00	 call	 sscanf
  028c7	89 84 24 a0 00
	00 00		 mov	 DWORD PTR rc$8[rsp], eax

; 1586 :                 if ( rc < 1 || rc > 2 )

  028ce	83 bc 24 a0 00
	00 00 01	 cmp	 DWORD PTR rc$8[rsp], 1
  028d6	7c 0a		 jl	 SHORT $LN99@mountnewta
  028d8	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR rc$8[rsp], 2
  028e0	7e 6d		 jle	 SHORT $LN97@mountnewta
$LN99@mountnewta:

; 1587 :                 {
; 1588 :                     WRMSG( HHC01451, "E", res.str, "eotmargin" );

  028e2	b9 01 00 00 00	 mov	 ecx, 1
  028e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  028ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169935
  028f4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  028f9	48 8d 8c 24 90
	07 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  02901	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02906	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169936
  0290d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02912	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169937
  02919	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0291e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02923	41 b9 03 00 00
	00		 mov	 r9d, 3
  02929	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169938
  02930	ba 34 06 00 00	 mov	 edx, 1588		; 00000634H
  02935	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169939
  0293c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1589 :                     optrc = -1;

  02942	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1

; 1590 :                 }

  0294a	e9 58 01 00 00	 jmp	 $LN98@mountnewta
$LN97@mountnewta:

; 1591 :                 else if ( rc == 2 )

  0294f	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR rc$8[rsp], 2
  02957	0f 85 33 01 00
	00		 jne	 $LN100@mountnewta

; 1592 :                 {
; 1593 :                     switch (toupper(f))

  0295d	0f b6 44 24 7a	 movzx	 eax, BYTE PTR f$2[rsp]
  02962	8b c8		 mov	 ecx, eax
  02964	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_toupper
  0296a	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv1195[rsp], eax
  02971	83 bc 24 a4 00
	00 00 47	 cmp	 DWORD PTR tv1195[rsp], 71 ; 00000047H
  02979	74 52		 je	 SHORT $LN104@mountnewta
  0297b	83 bc 24 a4 00
	00 00 4b	 cmp	 DWORD PTR tv1195[rsp], 75 ; 0000004bH
  02983	74 16		 je	 SHORT $LN102@mountnewta
  02985	83 bc 24 a4 00
	00 00 4d	 cmp	 DWORD PTR tv1195[rsp], 77 ; 0000004dH
  0298d	74 25		 je	 SHORT $LN103@mountnewta
  0298f	83 bc 24 a4 00
	00 00 54	 cmp	 DWORD PTR tv1195[rsp], 84 ; 00000054H
  02997	74 4d		 je	 SHORT $LN105@mountnewta
  02999	eb 61		 jmp	 SHORT $LN106@mountnewta
$LN102@mountnewta:

; 1594 :                     {
; 1595 :                         case 'K':
; 1596 :                             eotmargin <<= SHIFT_KIBIBYTE;

  0299b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR eotmargin$5[rsp]
  029a3	48 c1 e0 0a	 shl	 rax, 10
  029a7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR eotmargin$5[rsp], rax

; 1597 :                             break;

  029af	e9 bc 00 00 00	 jmp	 $LN33@mountnewta
$LN103@mountnewta:

; 1598 :                         case 'M':
; 1599 :                             eotmargin <<= SHIFT_MEBIBYTE;

  029b4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR eotmargin$5[rsp]
  029bc	48 c1 e0 14	 shl	 rax, 20
  029c0	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR eotmargin$5[rsp], rax

; 1600 :                             break;

  029c8	e9 a3 00 00 00	 jmp	 $LN33@mountnewta
$LN104@mountnewta:

; 1601 :                         case 'G':
; 1602 :                             eotmargin <<= SHIFT_GIBIBYTE;

  029cd	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR eotmargin$5[rsp]
  029d5	48 c1 e0 1e	 shl	 rax, 30
  029d9	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR eotmargin$5[rsp], rax

; 1603 :                             break;

  029e1	e9 8a 00 00 00	 jmp	 $LN33@mountnewta
$LN105@mountnewta:

; 1604 : #if SIZEOF_SIZE_T >= 8
; 1605 :                         case 'T':
; 1606 :                             eotmargin <<= SHIFT_TEBIBYTE;

  029e6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR eotmargin$5[rsp]
  029ee	48 c1 e0 28	 shl	 rax, 40			; 00000028H
  029f2	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR eotmargin$5[rsp], rax

; 1607 :                             break;

  029fa	eb 74		 jmp	 SHORT $LN33@mountnewta
$LN106@mountnewta:

; 1608 : #endif
; 1609 :                         default:
; 1610 :                             WRMSG( HHC01451, "E", res.str, "eotmargin" );

  029fc	b9 01 00 00 00	 mov	 ecx, 1
  02a01	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02a07	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169947
  02a0e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  02a13	48 8d 8c 24 90
	07 00 00	 lea	 rcx, QWORD PTR res$[rsp]
  02a1b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  02a20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169948
  02a27	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02a2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169949
  02a33	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02a38	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02a3d	41 b9 03 00 00
	00		 mov	 r9d, 3
  02a43	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169950
  02a4a	ba 4a 06 00 00	 mov	 edx, 1610		; 0000064aH
  02a4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169951
  02a56	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1611 :                             eotmargin = 0;

  02a5c	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR eotmargin$5[rsp], 0

; 1612 :                             optrc = -1;

  02a68	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
$LN33@mountnewta:

; 1613 :                             break;
; 1614 :                     }
; 1615 :                     if ( optrc != -1 )

  02a70	83 7c 24 70 ff	 cmp	 DWORD PTR optrc$[rsp], -1
  02a75	74 17		 je	 SHORT $LN107@mountnewta

; 1616 :                         dev->eotmargin = eotmargin;

  02a77	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02a7f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR eotmargin$5[rsp]
  02a87	48 89 88 70 10
	00 00		 mov	 QWORD PTR [rax+4208], rcx
$LN107@mountnewta:

; 1617 :                 }

  02a8e	eb 17		 jmp	 SHORT $LN101@mountnewta
$LN100@mountnewta:

; 1618 :                 else
; 1619 :                     dev->eotmargin = eotmargin;

  02a90	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02a98	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR eotmargin$5[rsp]
  02aa0	48 89 88 70 10
	00 00		 mov	 QWORD PTR [rax+4208], rcx
$LN101@mountnewta:
$LN98@mountnewta:

; 1620 :             }
; 1621 :             break;

  02aa7	e9 72 1d 00 00	 jmp	 $LN29@mountnewta
$LN108@mountnewta:

; 1622 : 
; 1623 :         case TDPARM_STRICTSIZE:
; 1624 :             if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  02aac	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02ab4	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02abb	83 f8 03	 cmp	 eax, 3
  02abe	0f 85 6c 02 00
	00		 jne	 $LN109@mountnewta

; 1625 :             {
; 1626 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1627 :                 _HHC00223E(); optrc = -1; break;

  02ac4	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02acc	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02ad3	83 f8 01	 cmp	 eax, 1
  02ad6	75 14		 jne	 SHORT $LN353@mountnewta
  02ad8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169955
  02adf	48 89 84 24 f8
	03 00 00	 mov	 QWORD PTR tv1281[rsp], rax
  02ae7	e9 1e 01 00 00	 jmp	 $LN354@mountnewta
$LN353@mountnewta:
  02aec	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02af4	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02afb	83 f8 02	 cmp	 eax, 2
  02afe	75 14		 jne	 SHORT $LN351@mountnewta
  02b00	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169956
  02b07	48 89 84 24 f0
	03 00 00	 mov	 QWORD PTR tv1280[rsp], rax
  02b0f	e9 e6 00 00 00	 jmp	 $LN352@mountnewta
$LN351@mountnewta:
  02b14	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b1c	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02b23	83 f8 03	 cmp	 eax, 3
  02b26	75 14		 jne	 SHORT $LN349@mountnewta
  02b28	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169957
  02b2f	48 89 84 24 e8
	03 00 00	 mov	 QWORD PTR tv1247[rsp], rax
  02b37	e9 ae 00 00 00	 jmp	 $LN350@mountnewta
$LN349@mountnewta:
  02b3c	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b44	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02b4b	83 f8 04	 cmp	 eax, 4
  02b4e	75 11		 jne	 SHORT $LN347@mountnewta
  02b50	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169958
  02b57	48 89 84 24 e0
	03 00 00	 mov	 QWORD PTR tv1246[rsp], rax
  02b5f	eb 79		 jmp	 SHORT $LN348@mountnewta
$LN347@mountnewta:
  02b61	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b69	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02b70	83 f8 05	 cmp	 eax, 5
  02b73	75 11		 jne	 SHORT $LN345@mountnewta
  02b75	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169959
  02b7c	48 89 84 24 d8
	03 00 00	 mov	 QWORD PTR tv1245[rsp], rax
  02b84	eb 44		 jmp	 SHORT $LN346@mountnewta
$LN345@mountnewta:
  02b86	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02b8e	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02b95	83 f8 06	 cmp	 eax, 6
  02b98	75 11		 jne	 SHORT $LN343@mountnewta
  02b9a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169960
  02ba1	48 89 84 24 d0
	03 00 00	 mov	 QWORD PTR tv1244[rsp], rax
  02ba9	eb 0f		 jmp	 SHORT $LN344@mountnewta
$LN343@mountnewta:
  02bab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169961
  02bb2	48 89 84 24 d0
	03 00 00	 mov	 QWORD PTR tv1244[rsp], rax
$LN344@mountnewta:
  02bba	48 8b 84 24 d0
	03 00 00	 mov	 rax, QWORD PTR tv1244[rsp]
  02bc2	48 89 84 24 d8
	03 00 00	 mov	 QWORD PTR tv1245[rsp], rax
$LN346@mountnewta:
  02bca	48 8b 84 24 d8
	03 00 00	 mov	 rax, QWORD PTR tv1245[rsp]
  02bd2	48 89 84 24 e0
	03 00 00	 mov	 QWORD PTR tv1246[rsp], rax
$LN348@mountnewta:
  02bda	48 8b 84 24 e0
	03 00 00	 mov	 rax, QWORD PTR tv1246[rsp]
  02be2	48 89 84 24 e8
	03 00 00	 mov	 QWORD PTR tv1247[rsp], rax
$LN350@mountnewta:
  02bea	48 8b 84 24 e8
	03 00 00	 mov	 rax, QWORD PTR tv1247[rsp]
  02bf2	48 89 84 24 f0
	03 00 00	 mov	 QWORD PTR tv1280[rsp], rax
$LN352@mountnewta:
  02bfa	48 8b 84 24 f0
	03 00 00	 mov	 rax, QWORD PTR tv1280[rsp]
  02c02	48 89 84 24 f8
	03 00 00	 mov	 QWORD PTR tv1281[rsp], rax
$LN354@mountnewta:
  02c0a	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02c13	74 15		 je	 SHORT $LN355@mountnewta
  02c15	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02c1d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02c21	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv1288[rsp], eax
  02c28	eb 0b		 jmp	 SHORT $LN356@mountnewta
$LN355@mountnewta:
  02c2a	c7 84 24 10 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1288[rsp], 0
$LN356@mountnewta:
  02c35	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02c3e	74 17		 je	 SHORT $LN357@mountnewta
  02c40	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02c48	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02c4c	d1 f8		 sar	 eax, 1
  02c4e	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv1294[rsp], eax
  02c55	eb 0b		 jmp	 SHORT $LN358@mountnewta
$LN357@mountnewta:
  02c57	c7 84 24 14 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1294[rsp], 0
$LN358@mountnewta:
  02c62	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  02c67	48 89 84 24 d0
	06 00 00	 mov	 QWORD PTR tv1222[rsp], rax
  02c6f	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02c77	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  02c7e	48 89 8c 24 d8
	06 00 00	 mov	 QWORD PTR tv1283[rsp], rcx
  02c86	b9 01 00 00 00	 mov	 ecx, 1
  02c8b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02c91	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  02c99	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  02c9e	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  02ca6	48 8b 94 24 d0
	06 00 00	 mov	 rdx, QWORD PTR tv1222[rsp]
  02cae	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  02cb2	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02cb7	48 8b 8c 24 f8
	03 00 00	 mov	 rcx, QWORD PTR tv1281[rsp]
  02cbf	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02cc4	48 8b 8c 24 d8
	06 00 00	 mov	 rcx, QWORD PTR tv1283[rsp]
  02ccc	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02cd1	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR tv1288[rsp]
  02cd8	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02cdc	8b 8c 24 14 01
	00 00		 mov	 ecx, DWORD PTR tv1294[rsp]
  02ce3	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02ce7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169962
  02cee	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02cf3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169963
  02cfa	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02cff	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02d04	41 b9 03 00 00
	00		 mov	 r9d, 3
  02d0a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169964
  02d11	ba 5b 06 00 00	 mov	 edx, 1627		; 0000065bH
  02d16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169965
  02d1d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02d23	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  02d2b	e9 ee 1a 00 00	 jmp	 $LN29@mountnewta
$LN109@mountnewta:

; 1628 :             }
; 1629 :             dev->tdparms.strictsize=res.num;

  02d30	8b 84 24 90 07
	00 00		 mov	 eax, DWORD PTR res$[rsp]
  02d37	83 e0 01	 and	 eax, 1
  02d3a	c1 e0 08	 shl	 eax, 8
  02d3d	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02d45	8b 89 30 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4144]
  02d4b	0f ba f1 08	 btr	 ecx, 8
  02d4f	0b c8		 or	 ecx, eax
  02d51	8b c1		 mov	 eax, ecx
  02d53	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02d5b	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1630 :             break;

  02d61	e9 b8 1a 00 00	 jmp	 $LN29@mountnewta
$LN110@mountnewta:

; 1631 : 
; 1632 :         case TDPARM_READONLY:
; 1633 :             if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  02d66	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02d6e	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02d75	83 f8 03	 cmp	 eax, 3
  02d78	0f 85 6c 02 00
	00		 jne	 $LN111@mountnewta

; 1634 :             {
; 1635 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1636 :                 _HHC00223E(); optrc = -1; break;

  02d7e	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02d86	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02d8d	83 f8 01	 cmp	 eax, 1
  02d90	75 14		 jne	 SHORT $LN369@mountnewta
  02d92	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169968
  02d99	48 89 84 24 28
	04 00 00	 mov	 QWORD PTR tv1342[rsp], rax
  02da1	e9 1e 01 00 00	 jmp	 $LN370@mountnewta
$LN369@mountnewta:
  02da6	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02dae	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02db5	83 f8 02	 cmp	 eax, 2
  02db8	75 14		 jne	 SHORT $LN367@mountnewta
  02dba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169969
  02dc1	48 89 84 24 20
	04 00 00	 mov	 QWORD PTR tv1341[rsp], rax
  02dc9	e9 e6 00 00 00	 jmp	 $LN368@mountnewta
$LN367@mountnewta:
  02dce	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02dd6	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02ddd	83 f8 03	 cmp	 eax, 3
  02de0	75 14		 jne	 SHORT $LN365@mountnewta
  02de2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169970
  02de9	48 89 84 24 18
	04 00 00	 mov	 QWORD PTR tv1340[rsp], rax
  02df1	e9 ae 00 00 00	 jmp	 $LN366@mountnewta
$LN365@mountnewta:
  02df6	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02dfe	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02e05	83 f8 04	 cmp	 eax, 4
  02e08	75 11		 jne	 SHORT $LN363@mountnewta
  02e0a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169971
  02e11	48 89 84 24 10
	04 00 00	 mov	 QWORD PTR tv1339[rsp], rax
  02e19	eb 79		 jmp	 SHORT $LN364@mountnewta
$LN363@mountnewta:
  02e1b	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02e23	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02e2a	83 f8 05	 cmp	 eax, 5
  02e2d	75 11		 jne	 SHORT $LN361@mountnewta
  02e2f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169972
  02e36	48 89 84 24 08
	04 00 00	 mov	 QWORD PTR tv1338[rsp], rax
  02e3e	eb 44		 jmp	 SHORT $LN362@mountnewta
$LN361@mountnewta:
  02e40	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02e48	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  02e4f	83 f8 06	 cmp	 eax, 6
  02e52	75 11		 jne	 SHORT $LN359@mountnewta
  02e54	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169973
  02e5b	48 89 84 24 00
	04 00 00	 mov	 QWORD PTR tv1337[rsp], rax
  02e63	eb 0f		 jmp	 SHORT $LN360@mountnewta
$LN359@mountnewta:
  02e65	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169974
  02e6c	48 89 84 24 00
	04 00 00	 mov	 QWORD PTR tv1337[rsp], rax
$LN360@mountnewta:
  02e74	48 8b 84 24 00
	04 00 00	 mov	 rax, QWORD PTR tv1337[rsp]
  02e7c	48 89 84 24 08
	04 00 00	 mov	 QWORD PTR tv1338[rsp], rax
$LN362@mountnewta:
  02e84	48 8b 84 24 08
	04 00 00	 mov	 rax, QWORD PTR tv1338[rsp]
  02e8c	48 89 84 24 10
	04 00 00	 mov	 QWORD PTR tv1339[rsp], rax
$LN364@mountnewta:
  02e94	48 8b 84 24 10
	04 00 00	 mov	 rax, QWORD PTR tv1339[rsp]
  02e9c	48 89 84 24 18
	04 00 00	 mov	 QWORD PTR tv1340[rsp], rax
$LN366@mountnewta:
  02ea4	48 8b 84 24 18
	04 00 00	 mov	 rax, QWORD PTR tv1340[rsp]
  02eac	48 89 84 24 20
	04 00 00	 mov	 QWORD PTR tv1341[rsp], rax
$LN368@mountnewta:
  02eb4	48 8b 84 24 20
	04 00 00	 mov	 rax, QWORD PTR tv1341[rsp]
  02ebc	48 89 84 24 28
	04 00 00	 mov	 QWORD PTR tv1342[rsp], rax
$LN370@mountnewta:
  02ec4	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02ecd	74 15		 je	 SHORT $LN371@mountnewta
  02ecf	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02ed7	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  02edb	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv1349[rsp], eax
  02ee2	eb 0b		 jmp	 SHORT $LN372@mountnewta
$LN371@mountnewta:
  02ee4	c7 84 24 18 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1349[rsp], 0
$LN372@mountnewta:
  02eef	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  02ef8	74 17		 je	 SHORT $LN373@mountnewta
  02efa	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  02f02	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  02f06	d1 f8		 sar	 eax, 1
  02f08	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv1355[rsp], eax
  02f0f	eb 0b		 jmp	 SHORT $LN374@mountnewta
$LN373@mountnewta:
  02f11	c7 84 24 1c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1355[rsp], 0
$LN374@mountnewta:
  02f1c	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  02f21	48 89 84 24 e0
	06 00 00	 mov	 QWORD PTR tv1315[rsp], rax
  02f29	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  02f31	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  02f38	48 89 8c 24 e8
	06 00 00	 mov	 QWORD PTR tv1344[rsp], rcx
  02f40	b9 01 00 00 00	 mov	 ecx, 1
  02f45	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  02f4b	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  02f53	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  02f58	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  02f60	48 8b 94 24 e0
	06 00 00	 mov	 rdx, QWORD PTR tv1315[rsp]
  02f68	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  02f6c	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  02f71	48 8b 8c 24 28
	04 00 00	 mov	 rcx, QWORD PTR tv1342[rsp]
  02f79	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  02f7e	48 8b 8c 24 e8
	06 00 00	 mov	 rcx, QWORD PTR tv1344[rsp]
  02f86	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  02f8b	8b 8c 24 18 01
	00 00		 mov	 ecx, DWORD PTR tv1349[rsp]
  02f92	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  02f96	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR tv1355[rsp]
  02f9d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  02fa1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169975
  02fa8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  02fad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169976
  02fb4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  02fb9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02fbe	41 b9 03 00 00
	00		 mov	 r9d, 3
  02fc4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169977
  02fcb	ba 64 06 00 00	 mov	 edx, 1636		; 00000664H
  02fd0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169978
  02fd7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  02fdd	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  02fe5	e9 34 18 00 00	 jmp	 $LN29@mountnewta
$LN111@mountnewta:

; 1637 :             }
; 1638 :             dev->tdparms.logical_readonly=(res.num ? 1 : 0 );

  02fea	83 bc 24 90 07
	00 00 00	 cmp	 DWORD PTR res$[rsp], 0
  02ff2	74 0d		 je	 SHORT $LN375@mountnewta
  02ff4	c7 84 24 20 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1368[rsp], 1
  02fff	eb 0b		 jmp	 SHORT $LN376@mountnewta
$LN375@mountnewta:
  03001	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1368[rsp], 0
$LN376@mountnewta:
  0300c	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR tv1368[rsp]
  03013	83 e0 01	 and	 eax, 1
  03016	c1 e0 0b	 shl	 eax, 11
  03019	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03021	8b 89 30 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4144]
  03027	0f ba f1 0b	 btr	 ecx, 11
  0302b	0b c8		 or	 ecx, eax
  0302d	8b c1		 mov	 eax, ecx
  0302f	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03037	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1639 :             break;

  0303d	e9 dc 17 00 00	 jmp	 $LN29@mountnewta
$LN112@mountnewta:
$LN113@mountnewta:

; 1640 : 
; 1641 :         case TDPARM_RO:
; 1642 :         case TDPARM_NORING:
; 1643 :             if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  03042	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0304a	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03051	83 f8 03	 cmp	 eax, 3
  03054	0f 85 6c 02 00
	00		 jne	 $LN114@mountnewta

; 1644 :             {
; 1645 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1646 :                 _HHC00223E(); optrc = -1; break;

  0305a	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03062	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03069	83 f8 01	 cmp	 eax, 1
  0306c	75 14		 jne	 SHORT $LN387@mountnewta
  0306e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169982
  03075	48 89 84 24 58
	04 00 00	 mov	 QWORD PTR tv1405[rsp], rax
  0307d	e9 1e 01 00 00	 jmp	 $LN388@mountnewta
$LN387@mountnewta:
  03082	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0308a	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03091	83 f8 02	 cmp	 eax, 2
  03094	75 14		 jne	 SHORT $LN385@mountnewta
  03096	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169983
  0309d	48 89 84 24 50
	04 00 00	 mov	 QWORD PTR tv1404[rsp], rax
  030a5	e9 e6 00 00 00	 jmp	 $LN386@mountnewta
$LN385@mountnewta:
  030aa	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  030b2	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  030b9	83 f8 03	 cmp	 eax, 3
  030bc	75 14		 jne	 SHORT $LN383@mountnewta
  030be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169984
  030c5	48 89 84 24 48
	04 00 00	 mov	 QWORD PTR tv1403[rsp], rax
  030cd	e9 ae 00 00 00	 jmp	 $LN384@mountnewta
$LN383@mountnewta:
  030d2	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  030da	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  030e1	83 f8 04	 cmp	 eax, 4
  030e4	75 11		 jne	 SHORT $LN381@mountnewta
  030e6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169985
  030ed	48 89 84 24 40
	04 00 00	 mov	 QWORD PTR tv1402[rsp], rax
  030f5	eb 79		 jmp	 SHORT $LN382@mountnewta
$LN381@mountnewta:
  030f7	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  030ff	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03106	83 f8 05	 cmp	 eax, 5
  03109	75 11		 jne	 SHORT $LN379@mountnewta
  0310b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169986
  03112	48 89 84 24 38
	04 00 00	 mov	 QWORD PTR tv1401[rsp], rax
  0311a	eb 44		 jmp	 SHORT $LN380@mountnewta
$LN379@mountnewta:
  0311c	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03124	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0312b	83 f8 06	 cmp	 eax, 6
  0312e	75 11		 jne	 SHORT $LN377@mountnewta
  03130	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169987
  03137	48 89 84 24 30
	04 00 00	 mov	 QWORD PTR tv1400[rsp], rax
  0313f	eb 0f		 jmp	 SHORT $LN378@mountnewta
$LN377@mountnewta:
  03141	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169988
  03148	48 89 84 24 30
	04 00 00	 mov	 QWORD PTR tv1400[rsp], rax
$LN378@mountnewta:
  03150	48 8b 84 24 30
	04 00 00	 mov	 rax, QWORD PTR tv1400[rsp]
  03158	48 89 84 24 38
	04 00 00	 mov	 QWORD PTR tv1401[rsp], rax
$LN380@mountnewta:
  03160	48 8b 84 24 38
	04 00 00	 mov	 rax, QWORD PTR tv1401[rsp]
  03168	48 89 84 24 40
	04 00 00	 mov	 QWORD PTR tv1402[rsp], rax
$LN382@mountnewta:
  03170	48 8b 84 24 40
	04 00 00	 mov	 rax, QWORD PTR tv1402[rsp]
  03178	48 89 84 24 48
	04 00 00	 mov	 QWORD PTR tv1403[rsp], rax
$LN384@mountnewta:
  03180	48 8b 84 24 48
	04 00 00	 mov	 rax, QWORD PTR tv1403[rsp]
  03188	48 89 84 24 50
	04 00 00	 mov	 QWORD PTR tv1404[rsp], rax
$LN386@mountnewta:
  03190	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR tv1404[rsp]
  03198	48 89 84 24 58
	04 00 00	 mov	 QWORD PTR tv1405[rsp], rax
$LN388@mountnewta:
  031a0	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  031a9	74 15		 je	 SHORT $LN389@mountnewta
  031ab	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  031b3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  031b7	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv1412[rsp], eax
  031be	eb 0b		 jmp	 SHORT $LN390@mountnewta
$LN389@mountnewta:
  031c0	c7 84 24 24 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1412[rsp], 0
$LN390@mountnewta:
  031cb	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  031d4	74 17		 je	 SHORT $LN391@mountnewta
  031d6	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  031de	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  031e2	d1 f8		 sar	 eax, 1
  031e4	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv1418[rsp], eax
  031eb	eb 0b		 jmp	 SHORT $LN392@mountnewta
$LN391@mountnewta:
  031ed	c7 84 24 28 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1418[rsp], 0
$LN392@mountnewta:
  031f8	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  031fd	48 89 84 24 f0
	06 00 00	 mov	 QWORD PTR tv1378[rsp], rax
  03205	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0320d	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  03214	48 89 8c 24 f8
	06 00 00	 mov	 QWORD PTR tv1407[rsp], rcx
  0321c	b9 01 00 00 00	 mov	 ecx, 1
  03221	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03227	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  0322f	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03234	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0323c	48 8b 94 24 f0
	06 00 00	 mov	 rdx, QWORD PTR tv1378[rsp]
  03244	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  03248	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0324d	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR tv1405[rsp]
  03255	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0325a	48 8b 8c 24 f8
	06 00 00	 mov	 rcx, QWORD PTR tv1407[rsp]
  03262	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03267	8b 8c 24 24 01
	00 00		 mov	 ecx, DWORD PTR tv1412[rsp]
  0326e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03272	8b 8c 24 28 01
	00 00		 mov	 ecx, DWORD PTR tv1418[rsp]
  03279	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0327d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169989
  03284	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03289	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169990
  03290	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03295	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0329a	41 b9 03 00 00
	00		 mov	 r9d, 3
  032a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169991
  032a7	ba 6e 06 00 00	 mov	 edx, 1646		; 0000066eH
  032ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169992
  032b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  032b9	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  032c1	e9 58 15 00 00	 jmp	 $LN29@mountnewta
$LN114@mountnewta:

; 1647 :             }
; 1648 :             dev->tdparms.logical_readonly=1;

  032c6	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  032ce	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  032d4	0f ba e8 0b	 bts	 eax, 11
  032d8	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  032e0	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1649 :             break;

  032e6	e9 33 15 00 00	 jmp	 $LN29@mountnewta
$LN115@mountnewta:
$LN116@mountnewta:

; 1650 : 
; 1651 :         case TDPARM_RW:
; 1652 :         case TDPARM_RING:
; 1653 :             if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  032eb	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  032f3	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  032fa	83 f8 03	 cmp	 eax, 3
  032fd	0f 85 6c 02 00
	00		 jne	 $LN117@mountnewta

; 1654 :             {
; 1655 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1656 :                 _HHC00223E(); optrc = -1; break;

  03303	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0330b	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03312	83 f8 01	 cmp	 eax, 1
  03315	75 14		 jne	 SHORT $LN403@mountnewta
  03317	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169996
  0331e	48 89 84 24 88
	04 00 00	 mov	 QWORD PTR tv1463[rsp], rax
  03326	e9 1e 01 00 00	 jmp	 $LN404@mountnewta
$LN403@mountnewta:
  0332b	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03333	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0333a	83 f8 02	 cmp	 eax, 2
  0333d	75 14		 jne	 SHORT $LN401@mountnewta
  0333f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169997
  03346	48 89 84 24 80
	04 00 00	 mov	 QWORD PTR tv1462[rsp], rax
  0334e	e9 e6 00 00 00	 jmp	 $LN402@mountnewta
$LN401@mountnewta:
  03353	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0335b	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03362	83 f8 03	 cmp	 eax, 3
  03365	75 14		 jne	 SHORT $LN399@mountnewta
  03367	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169998
  0336e	48 89 84 24 78
	04 00 00	 mov	 QWORD PTR tv1461[rsp], rax
  03376	e9 ae 00 00 00	 jmp	 $LN400@mountnewta
$LN399@mountnewta:
  0337b	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03383	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0338a	83 f8 04	 cmp	 eax, 4
  0338d	75 11		 jne	 SHORT $LN397@mountnewta
  0338f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169999
  03396	48 89 84 24 70
	04 00 00	 mov	 QWORD PTR tv1460[rsp], rax
  0339e	eb 79		 jmp	 SHORT $LN398@mountnewta
$LN397@mountnewta:
  033a0	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  033a8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  033af	83 f8 05	 cmp	 eax, 5
  033b2	75 11		 jne	 SHORT $LN395@mountnewta
  033b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170000
  033bb	48 89 84 24 68
	04 00 00	 mov	 QWORD PTR tv1459[rsp], rax
  033c3	eb 44		 jmp	 SHORT $LN396@mountnewta
$LN395@mountnewta:
  033c5	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  033cd	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  033d4	83 f8 06	 cmp	 eax, 6
  033d7	75 11		 jne	 SHORT $LN393@mountnewta
  033d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170001
  033e0	48 89 84 24 60
	04 00 00	 mov	 QWORD PTR tv1458[rsp], rax
  033e8	eb 0f		 jmp	 SHORT $LN394@mountnewta
$LN393@mountnewta:
  033ea	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170002
  033f1	48 89 84 24 60
	04 00 00	 mov	 QWORD PTR tv1458[rsp], rax
$LN394@mountnewta:
  033f9	48 8b 84 24 60
	04 00 00	 mov	 rax, QWORD PTR tv1458[rsp]
  03401	48 89 84 24 68
	04 00 00	 mov	 QWORD PTR tv1459[rsp], rax
$LN396@mountnewta:
  03409	48 8b 84 24 68
	04 00 00	 mov	 rax, QWORD PTR tv1459[rsp]
  03411	48 89 84 24 70
	04 00 00	 mov	 QWORD PTR tv1460[rsp], rax
$LN398@mountnewta:
  03419	48 8b 84 24 70
	04 00 00	 mov	 rax, QWORD PTR tv1460[rsp]
  03421	48 89 84 24 78
	04 00 00	 mov	 QWORD PTR tv1461[rsp], rax
$LN400@mountnewta:
  03429	48 8b 84 24 78
	04 00 00	 mov	 rax, QWORD PTR tv1461[rsp]
  03431	48 89 84 24 80
	04 00 00	 mov	 QWORD PTR tv1462[rsp], rax
$LN402@mountnewta:
  03439	48 8b 84 24 80
	04 00 00	 mov	 rax, QWORD PTR tv1462[rsp]
  03441	48 89 84 24 88
	04 00 00	 mov	 QWORD PTR tv1463[rsp], rax
$LN404@mountnewta:
  03449	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03452	74 15		 je	 SHORT $LN405@mountnewta
  03454	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0345c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03460	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv1470[rsp], eax
  03467	eb 0b		 jmp	 SHORT $LN406@mountnewta
$LN405@mountnewta:
  03469	c7 84 24 2c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1470[rsp], 0
$LN406@mountnewta:
  03474	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0347d	74 17		 je	 SHORT $LN407@mountnewta
  0347f	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03487	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0348b	d1 f8		 sar	 eax, 1
  0348d	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv1508[rsp], eax
  03494	eb 0b		 jmp	 SHORT $LN408@mountnewta
$LN407@mountnewta:
  03496	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1508[rsp], 0
$LN408@mountnewta:
  034a1	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  034a6	48 89 84 24 00
	07 00 00	 mov	 QWORD PTR tv1436[rsp], rax
  034ae	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  034b6	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  034bd	48 89 8c 24 08
	07 00 00	 mov	 QWORD PTR tv1465[rsp], rcx
  034c5	b9 01 00 00 00	 mov	 ecx, 1
  034ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  034d0	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  034d8	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  034dd	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  034e5	48 8b 94 24 00
	07 00 00	 mov	 rdx, QWORD PTR tv1436[rsp]
  034ed	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  034f1	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  034f6	48 8b 8c 24 88
	04 00 00	 mov	 rcx, QWORD PTR tv1463[rsp]
  034fe	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03503	48 8b 8c 24 08
	07 00 00	 mov	 rcx, QWORD PTR tv1465[rsp]
  0350b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03510	8b 8c 24 2c 01
	00 00		 mov	 ecx, DWORD PTR tv1470[rsp]
  03517	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0351b	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR tv1508[rsp]
  03522	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03526	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170003
  0352d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03532	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170004
  03539	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0353e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03543	41 b9 03 00 00
	00		 mov	 r9d, 3
  03549	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170005
  03550	ba 78 06 00 00	 mov	 edx, 1656		; 00000678H
  03555	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170006
  0355c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  03562	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  0356a	e9 af 12 00 00	 jmp	 $LN29@mountnewta
$LN117@mountnewta:

; 1657 :             }
; 1658 :             dev->tdparms.logical_readonly=0;

  0356f	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03577	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  0357d	0f ba f0 0b	 btr	 eax, 11
  03581	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03589	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1659 :             break;

  0358f	e9 8a 12 00 00	 jmp	 $LN29@mountnewta
$LN118@mountnewta:

; 1660 : 
; 1661 :         case TDPARM_DEONIRQ:
; 1662 :             if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  03594	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0359c	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  035a3	83 f8 03	 cmp	 eax, 3
  035a6	0f 85 6c 02 00
	00		 jne	 $LN119@mountnewta

; 1663 :             {
; 1664 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1665 :                 _HHC00223E(); optrc = -1; break;

  035ac	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  035b4	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  035bb	83 f8 01	 cmp	 eax, 1
  035be	75 14		 jne	 SHORT $LN419@mountnewta
  035c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170009
  035c7	48 89 84 24 b8
	04 00 00	 mov	 QWORD PTR tv1553[rsp], rax
  035cf	e9 1e 01 00 00	 jmp	 $LN420@mountnewta
$LN419@mountnewta:
  035d4	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  035dc	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  035e3	83 f8 02	 cmp	 eax, 2
  035e6	75 14		 jne	 SHORT $LN417@mountnewta
  035e8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170010
  035ef	48 89 84 24 b0
	04 00 00	 mov	 QWORD PTR tv1552[rsp], rax
  035f7	e9 e6 00 00 00	 jmp	 $LN418@mountnewta
$LN417@mountnewta:
  035fc	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03604	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0360b	83 f8 03	 cmp	 eax, 3
  0360e	75 14		 jne	 SHORT $LN415@mountnewta
  03610	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170011
  03617	48 89 84 24 a8
	04 00 00	 mov	 QWORD PTR tv1551[rsp], rax
  0361f	e9 ae 00 00 00	 jmp	 $LN416@mountnewta
$LN415@mountnewta:
  03624	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0362c	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03633	83 f8 04	 cmp	 eax, 4
  03636	75 11		 jne	 SHORT $LN413@mountnewta
  03638	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170012
  0363f	48 89 84 24 a0
	04 00 00	 mov	 QWORD PTR tv1550[rsp], rax
  03647	eb 79		 jmp	 SHORT $LN414@mountnewta
$LN413@mountnewta:
  03649	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03651	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03658	83 f8 05	 cmp	 eax, 5
  0365b	75 11		 jne	 SHORT $LN411@mountnewta
  0365d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170013
  03664	48 89 84 24 98
	04 00 00	 mov	 QWORD PTR tv1549[rsp], rax
  0366c	eb 44		 jmp	 SHORT $LN412@mountnewta
$LN411@mountnewta:
  0366e	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03676	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0367d	83 f8 06	 cmp	 eax, 6
  03680	75 11		 jne	 SHORT $LN409@mountnewta
  03682	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170014
  03689	48 89 84 24 90
	04 00 00	 mov	 QWORD PTR tv1548[rsp], rax
  03691	eb 0f		 jmp	 SHORT $LN410@mountnewta
$LN409@mountnewta:
  03693	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170015
  0369a	48 89 84 24 90
	04 00 00	 mov	 QWORD PTR tv1548[rsp], rax
$LN410@mountnewta:
  036a2	48 8b 84 24 90
	04 00 00	 mov	 rax, QWORD PTR tv1548[rsp]
  036aa	48 89 84 24 98
	04 00 00	 mov	 QWORD PTR tv1549[rsp], rax
$LN412@mountnewta:
  036b2	48 8b 84 24 98
	04 00 00	 mov	 rax, QWORD PTR tv1549[rsp]
  036ba	48 89 84 24 a0
	04 00 00	 mov	 QWORD PTR tv1550[rsp], rax
$LN414@mountnewta:
  036c2	48 8b 84 24 a0
	04 00 00	 mov	 rax, QWORD PTR tv1550[rsp]
  036ca	48 89 84 24 a8
	04 00 00	 mov	 QWORD PTR tv1551[rsp], rax
$LN416@mountnewta:
  036d2	48 8b 84 24 a8
	04 00 00	 mov	 rax, QWORD PTR tv1551[rsp]
  036da	48 89 84 24 b0
	04 00 00	 mov	 QWORD PTR tv1552[rsp], rax
$LN418@mountnewta:
  036e2	48 8b 84 24 b0
	04 00 00	 mov	 rax, QWORD PTR tv1552[rsp]
  036ea	48 89 84 24 b8
	04 00 00	 mov	 QWORD PTR tv1553[rsp], rax
$LN420@mountnewta:
  036f2	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  036fb	74 15		 je	 SHORT $LN421@mountnewta
  036fd	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03705	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03709	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv1560[rsp], eax
  03710	eb 0b		 jmp	 SHORT $LN422@mountnewta
$LN421@mountnewta:
  03712	c7 84 24 34 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1560[rsp], 0
$LN422@mountnewta:
  0371d	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03726	74 17		 je	 SHORT $LN423@mountnewta
  03728	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03730	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03734	d1 f8		 sar	 eax, 1
  03736	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv1566[rsp], eax
  0373d	eb 0b		 jmp	 SHORT $LN424@mountnewta
$LN423@mountnewta:
  0373f	c7 84 24 38 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1566[rsp], 0
$LN424@mountnewta:
  0374a	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  0374f	48 89 84 24 10
	07 00 00	 mov	 QWORD PTR tv1526[rsp], rax
  03757	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0375f	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  03766	48 89 8c 24 18
	07 00 00	 mov	 QWORD PTR tv1555[rsp], rcx
  0376e	b9 01 00 00 00	 mov	 ecx, 1
  03773	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03779	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  03781	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03786	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0378e	48 8b 94 24 10
	07 00 00	 mov	 rdx, QWORD PTR tv1526[rsp]
  03796	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  0379a	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0379f	48 8b 8c 24 b8
	04 00 00	 mov	 rcx, QWORD PTR tv1553[rsp]
  037a7	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  037ac	48 8b 8c 24 18
	07 00 00	 mov	 rcx, QWORD PTR tv1555[rsp]
  037b4	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  037b9	8b 8c 24 34 01
	00 00		 mov	 ecx, DWORD PTR tv1560[rsp]
  037c0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  037c4	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR tv1566[rsp]
  037cb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  037cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170016
  037d6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  037db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170017
  037e2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  037e7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  037ec	41 b9 03 00 00
	00		 mov	 r9d, 3
  037f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170018
  037f9	ba 81 06 00 00	 mov	 edx, 1665		; 00000681H
  037fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170019
  03805	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  0380b	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  03813	e9 06 10 00 00	 jmp	 $LN29@mountnewta
$LN119@mountnewta:

; 1666 :             }
; 1667 :             dev->tdparms.deonirq=(res.num ? 1 : 0 );

  03818	83 bc 24 90 07
	00 00 00	 cmp	 DWORD PTR res$[rsp], 0
  03820	74 0d		 je	 SHORT $LN425@mountnewta
  03822	c7 84 24 3c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1579[rsp], 1
  0382d	eb 0b		 jmp	 SHORT $LN426@mountnewta
$LN425@mountnewta:
  0382f	c7 84 24 3c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1579[rsp], 0
$LN426@mountnewta:
  0383a	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR tv1579[rsp]
  03841	83 e0 01	 and	 eax, 1
  03844	c1 e0 0a	 shl	 eax, 10
  03847	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0384f	8b 89 30 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4144]
  03855	0f ba f1 0a	 btr	 ecx, 10
  03859	0b c8		 or	 ecx, eax
  0385b	8b c1		 mov	 eax, ecx
  0385d	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03865	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 1668 :             break;

  0386b	e9 ae 0f 00 00	 jmp	 $LN29@mountnewta
$LN120@mountnewta:

; 1669 : 
; 1670 :         case TDPARM_NOAUTOMOUNT:
; 1671 :             if (TAPEDEVT_SCSITAPE == dev->tapedevt)

  03870	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03878	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0387f	83 f8 03	 cmp	 eax, 3
  03882	0f 85 6c 02 00
	00		 jne	 $LN121@mountnewta

; 1672 :             {
; 1673 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1674 :                 _HHC00223E(); optrc = -1; break;

  03888	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03890	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03897	83 f8 01	 cmp	 eax, 1
  0389a	75 14		 jne	 SHORT $LN437@mountnewta
  0389c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170022
  038a3	48 89 84 24 e8
	04 00 00	 mov	 QWORD PTR tv1616[rsp], rax
  038ab	e9 1e 01 00 00	 jmp	 $LN438@mountnewta
$LN437@mountnewta:
  038b0	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  038b8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  038bf	83 f8 02	 cmp	 eax, 2
  038c2	75 14		 jne	 SHORT $LN435@mountnewta
  038c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170023
  038cb	48 89 84 24 e0
	04 00 00	 mov	 QWORD PTR tv1615[rsp], rax
  038d3	e9 e6 00 00 00	 jmp	 $LN436@mountnewta
$LN435@mountnewta:
  038d8	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  038e0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  038e7	83 f8 03	 cmp	 eax, 3
  038ea	75 14		 jne	 SHORT $LN433@mountnewta
  038ec	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170024
  038f3	48 89 84 24 d8
	04 00 00	 mov	 QWORD PTR tv1614[rsp], rax
  038fb	e9 ae 00 00 00	 jmp	 $LN434@mountnewta
$LN433@mountnewta:
  03900	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03908	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0390f	83 f8 04	 cmp	 eax, 4
  03912	75 11		 jne	 SHORT $LN431@mountnewta
  03914	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170025
  0391b	48 89 84 24 d0
	04 00 00	 mov	 QWORD PTR tv1613[rsp], rax
  03923	eb 79		 jmp	 SHORT $LN432@mountnewta
$LN431@mountnewta:
  03925	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0392d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03934	83 f8 05	 cmp	 eax, 5
  03937	75 11		 jne	 SHORT $LN429@mountnewta
  03939	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170026
  03940	48 89 84 24 c8
	04 00 00	 mov	 QWORD PTR tv1612[rsp], rax
  03948	eb 44		 jmp	 SHORT $LN430@mountnewta
$LN429@mountnewta:
  0394a	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03952	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03959	83 f8 06	 cmp	 eax, 6
  0395c	75 11		 jne	 SHORT $LN427@mountnewta
  0395e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170027
  03965	48 89 84 24 c0
	04 00 00	 mov	 QWORD PTR tv1611[rsp], rax
  0396d	eb 0f		 jmp	 SHORT $LN428@mountnewta
$LN427@mountnewta:
  0396f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170028
  03976	48 89 84 24 c0
	04 00 00	 mov	 QWORD PTR tv1611[rsp], rax
$LN428@mountnewta:
  0397e	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR tv1611[rsp]
  03986	48 89 84 24 c8
	04 00 00	 mov	 QWORD PTR tv1612[rsp], rax
$LN430@mountnewta:
  0398e	48 8b 84 24 c8
	04 00 00	 mov	 rax, QWORD PTR tv1612[rsp]
  03996	48 89 84 24 d0
	04 00 00	 mov	 QWORD PTR tv1613[rsp], rax
$LN432@mountnewta:
  0399e	48 8b 84 24 d0
	04 00 00	 mov	 rax, QWORD PTR tv1613[rsp]
  039a6	48 89 84 24 d8
	04 00 00	 mov	 QWORD PTR tv1614[rsp], rax
$LN434@mountnewta:
  039ae	48 8b 84 24 d8
	04 00 00	 mov	 rax, QWORD PTR tv1614[rsp]
  039b6	48 89 84 24 e0
	04 00 00	 mov	 QWORD PTR tv1615[rsp], rax
$LN436@mountnewta:
  039be	48 8b 84 24 e0
	04 00 00	 mov	 rax, QWORD PTR tv1615[rsp]
  039c6	48 89 84 24 e8
	04 00 00	 mov	 QWORD PTR tv1616[rsp], rax
$LN438@mountnewta:
  039ce	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  039d7	74 15		 je	 SHORT $LN439@mountnewta
  039d9	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  039e1	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  039e5	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv1623[rsp], eax
  039ec	eb 0b		 jmp	 SHORT $LN440@mountnewta
$LN439@mountnewta:
  039ee	c7 84 24 60 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1623[rsp], 0
$LN440@mountnewta:
  039f9	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03a02	74 17		 je	 SHORT $LN441@mountnewta
  03a04	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03a0c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03a10	d1 f8		 sar	 eax, 1
  03a12	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv1629[rsp], eax
  03a19	eb 0b		 jmp	 SHORT $LN442@mountnewta
$LN441@mountnewta:
  03a1b	c7 84 24 44 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1629[rsp], 0
$LN442@mountnewta:
  03a26	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  03a2b	48 89 84 24 20
	07 00 00	 mov	 QWORD PTR tv1589[rsp], rax
  03a33	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03a3b	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  03a42	48 89 8c 24 28
	07 00 00	 mov	 QWORD PTR tv1618[rsp], rcx
  03a4a	b9 01 00 00 00	 mov	 ecx, 1
  03a4f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03a55	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  03a5d	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03a62	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  03a6a	48 8b 94 24 20
	07 00 00	 mov	 rdx, QWORD PTR tv1589[rsp]
  03a72	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  03a76	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  03a7b	48 8b 8c 24 e8
	04 00 00	 mov	 rcx, QWORD PTR tv1616[rsp]
  03a83	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03a88	48 8b 8c 24 28
	07 00 00	 mov	 rcx, QWORD PTR tv1618[rsp]
  03a90	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03a95	8b 8c 24 60 01
	00 00		 mov	 ecx, DWORD PTR tv1623[rsp]
  03a9c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03aa0	8b 8c 24 44 01
	00 00		 mov	 ecx, DWORD PTR tv1629[rsp]
  03aa7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03aab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170029
  03ab2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03ab7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170030
  03abe	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03ac3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03ac8	41 b9 03 00 00
	00		 mov	 r9d, 3
  03ace	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170031
  03ad5	ba 8a 06 00 00	 mov	 edx, 1674		; 0000068aH
  03ada	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170032
  03ae1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  03ae7	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  03aef	e9 2a 0d 00 00	 jmp	 $LN29@mountnewta
$LN121@mountnewta:

; 1675 :             }
; 1676 :             dev->noautomount = 1;

  03af4	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03afc	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  03b02	83 c8 40	 or	 eax, 64			; 00000040H
  03b05	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03b0d	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 1677 :             break;

  03b13	e9 06 0d 00 00	 jmp	 $LN29@mountnewta
$LN122@mountnewta:
$LN123@mountnewta:

; 1678 : 
; 1679 : #if defined(OPTION_SCSI_TAPE)
; 1680 :         case TDPARM_BLKID22:
; 1681 :         case TDPARM_BLKID24:
; 1682 :             if (TAPEDEVT_SCSITAPE != dev->tapedevt)

  03b18	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03b20	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03b27	83 f8 03	 cmp	 eax, 3
  03b2a	0f 84 6c 02 00
	00		 je	 $LN124@mountnewta

; 1683 :             {
; 1684 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1685 :                 _HHC00223E(); optrc = -1; break;

  03b30	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03b38	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03b3f	83 f8 01	 cmp	 eax, 1
  03b42	75 14		 jne	 SHORT $LN453@mountnewta
  03b44	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170036
  03b4b	48 89 84 24 18
	05 00 00	 mov	 QWORD PTR tv1706[rsp], rax
  03b53	e9 1e 01 00 00	 jmp	 $LN454@mountnewta
$LN453@mountnewta:
  03b58	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03b60	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03b67	83 f8 02	 cmp	 eax, 2
  03b6a	75 14		 jne	 SHORT $LN451@mountnewta
  03b6c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170037
  03b73	48 89 84 24 10
	05 00 00	 mov	 QWORD PTR tv1705[rsp], rax
  03b7b	e9 e6 00 00 00	 jmp	 $LN452@mountnewta
$LN451@mountnewta:
  03b80	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03b88	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03b8f	83 f8 03	 cmp	 eax, 3
  03b92	75 14		 jne	 SHORT $LN449@mountnewta
  03b94	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170038
  03b9b	48 89 84 24 08
	05 00 00	 mov	 QWORD PTR tv1704[rsp], rax
  03ba3	e9 ae 00 00 00	 jmp	 $LN450@mountnewta
$LN449@mountnewta:
  03ba8	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03bb0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03bb7	83 f8 04	 cmp	 eax, 4
  03bba	75 11		 jne	 SHORT $LN447@mountnewta
  03bbc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170039
  03bc3	48 89 84 24 00
	05 00 00	 mov	 QWORD PTR tv1703[rsp], rax
  03bcb	eb 79		 jmp	 SHORT $LN448@mountnewta
$LN447@mountnewta:
  03bcd	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03bd5	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03bdc	83 f8 05	 cmp	 eax, 5
  03bdf	75 11		 jne	 SHORT $LN445@mountnewta
  03be1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170040
  03be8	48 89 84 24 f8
	04 00 00	 mov	 QWORD PTR tv1702[rsp], rax
  03bf0	eb 44		 jmp	 SHORT $LN446@mountnewta
$LN445@mountnewta:
  03bf2	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03bfa	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03c01	83 f8 06	 cmp	 eax, 6
  03c04	75 11		 jne	 SHORT $LN443@mountnewta
  03c06	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170041
  03c0d	48 89 84 24 f0
	04 00 00	 mov	 QWORD PTR tv1701[rsp], rax
  03c15	eb 0f		 jmp	 SHORT $LN444@mountnewta
$LN443@mountnewta:
  03c17	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170042
  03c1e	48 89 84 24 f0
	04 00 00	 mov	 QWORD PTR tv1701[rsp], rax
$LN444@mountnewta:
  03c26	48 8b 84 24 f0
	04 00 00	 mov	 rax, QWORD PTR tv1701[rsp]
  03c2e	48 89 84 24 f8
	04 00 00	 mov	 QWORD PTR tv1702[rsp], rax
$LN446@mountnewta:
  03c36	48 8b 84 24 f8
	04 00 00	 mov	 rax, QWORD PTR tv1702[rsp]
  03c3e	48 89 84 24 00
	05 00 00	 mov	 QWORD PTR tv1703[rsp], rax
$LN448@mountnewta:
  03c46	48 8b 84 24 00
	05 00 00	 mov	 rax, QWORD PTR tv1703[rsp]
  03c4e	48 89 84 24 08
	05 00 00	 mov	 QWORD PTR tv1704[rsp], rax
$LN450@mountnewta:
  03c56	48 8b 84 24 08
	05 00 00	 mov	 rax, QWORD PTR tv1704[rsp]
  03c5e	48 89 84 24 10
	05 00 00	 mov	 QWORD PTR tv1705[rsp], rax
$LN452@mountnewta:
  03c66	48 8b 84 24 10
	05 00 00	 mov	 rax, QWORD PTR tv1705[rsp]
  03c6e	48 89 84 24 18
	05 00 00	 mov	 QWORD PTR tv1706[rsp], rax
$LN454@mountnewta:
  03c76	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03c7f	74 15		 je	 SHORT $LN455@mountnewta
  03c81	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03c89	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03c8d	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv1713[rsp], eax
  03c94	eb 0b		 jmp	 SHORT $LN456@mountnewta
$LN455@mountnewta:
  03c96	c7 84 24 48 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1713[rsp], 0
$LN456@mountnewta:
  03ca1	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03caa	74 17		 je	 SHORT $LN457@mountnewta
  03cac	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03cb4	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03cb8	d1 f8		 sar	 eax, 1
  03cba	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv1719[rsp], eax
  03cc1	eb 0b		 jmp	 SHORT $LN458@mountnewta
$LN457@mountnewta:
  03cc3	c7 84 24 4c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1719[rsp], 0
$LN458@mountnewta:
  03cce	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  03cd3	48 89 84 24 30
	07 00 00	 mov	 QWORD PTR tv1647[rsp], rax
  03cdb	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03ce3	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  03cea	48 89 8c 24 38
	07 00 00	 mov	 QWORD PTR tv1708[rsp], rcx
  03cf2	b9 01 00 00 00	 mov	 ecx, 1
  03cf7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03cfd	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  03d05	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03d0a	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  03d12	48 8b 94 24 30
	07 00 00	 mov	 rdx, QWORD PTR tv1647[rsp]
  03d1a	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  03d1e	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  03d23	48 8b 8c 24 18
	05 00 00	 mov	 rcx, QWORD PTR tv1706[rsp]
  03d2b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03d30	48 8b 8c 24 38
	07 00 00	 mov	 rcx, QWORD PTR tv1708[rsp]
  03d38	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03d3d	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR tv1713[rsp]
  03d44	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03d48	8b 8c 24 4c 01
	00 00		 mov	 ecx, DWORD PTR tv1719[rsp]
  03d4f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03d53	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170043
  03d5a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  03d5f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170044
  03d66	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  03d6b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  03d70	41 b9 03 00 00
	00		 mov	 r9d, 3
  03d76	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170045
  03d7d	ba 95 06 00 00	 mov	 edx, 1685		; 00000695H
  03d82	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170046
  03d89	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  03d8f	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  03d97	e9 82 0a 00 00	 jmp	 $LN29@mountnewta
$LN124@mountnewta:

; 1686 :             }
; 1687 :             dev->stape_blkid_32 = 0;

  03d9c	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03da4	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  03daa	83 e0 fd	 and	 eax, -3			; fffffffdH
  03dad	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03db5	89 81 98 10 00
	00		 mov	 DWORD PTR [rcx+4248], eax

; 1688 :             break;

  03dbb	e9 5e 0a 00 00	 jmp	 $LN29@mountnewta
$LN125@mountnewta:

; 1689 : 
; 1690 :         case TDPARM_BLKID32:
; 1691 :             if (TAPEDEVT_SCSITAPE != dev->tapedevt)

  03dc0	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03dc8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03dcf	83 f8 03	 cmp	 eax, 3
  03dd2	0f 84 6c 02 00
	00		 je	 $LN126@mountnewta

; 1692 :             {
; 1693 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1694 :                 _HHC00223E(); optrc = -1; break;

  03dd8	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03de0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03de7	83 f8 01	 cmp	 eax, 1
  03dea	75 14		 jne	 SHORT $LN469@mountnewta
  03dec	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170049
  03df3	48 89 84 24 48
	05 00 00	 mov	 QWORD PTR tv1764[rsp], rax
  03dfb	e9 1e 01 00 00	 jmp	 $LN470@mountnewta
$LN469@mountnewta:
  03e00	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03e08	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03e0f	83 f8 02	 cmp	 eax, 2
  03e12	75 14		 jne	 SHORT $LN467@mountnewta
  03e14	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170050
  03e1b	48 89 84 24 40
	05 00 00	 mov	 QWORD PTR tv1763[rsp], rax
  03e23	e9 e6 00 00 00	 jmp	 $LN468@mountnewta
$LN467@mountnewta:
  03e28	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03e30	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03e37	83 f8 03	 cmp	 eax, 3
  03e3a	75 14		 jne	 SHORT $LN465@mountnewta
  03e3c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170051
  03e43	48 89 84 24 38
	05 00 00	 mov	 QWORD PTR tv1762[rsp], rax
  03e4b	e9 ae 00 00 00	 jmp	 $LN466@mountnewta
$LN465@mountnewta:
  03e50	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03e58	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03e5f	83 f8 04	 cmp	 eax, 4
  03e62	75 11		 jne	 SHORT $LN463@mountnewta
  03e64	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170052
  03e6b	48 89 84 24 30
	05 00 00	 mov	 QWORD PTR tv1761[rsp], rax
  03e73	eb 79		 jmp	 SHORT $LN464@mountnewta
$LN463@mountnewta:
  03e75	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03e7d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03e84	83 f8 05	 cmp	 eax, 5
  03e87	75 11		 jne	 SHORT $LN461@mountnewta
  03e89	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170053
  03e90	48 89 84 24 28
	05 00 00	 mov	 QWORD PTR tv1760[rsp], rax
  03e98	eb 44		 jmp	 SHORT $LN462@mountnewta
$LN461@mountnewta:
  03e9a	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03ea2	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  03ea9	83 f8 06	 cmp	 eax, 6
  03eac	75 11		 jne	 SHORT $LN459@mountnewta
  03eae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170054
  03eb5	48 89 84 24 20
	05 00 00	 mov	 QWORD PTR tv1759[rsp], rax
  03ebd	eb 0f		 jmp	 SHORT $LN460@mountnewta
$LN459@mountnewta:
  03ebf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170055
  03ec6	48 89 84 24 20
	05 00 00	 mov	 QWORD PTR tv1759[rsp], rax
$LN460@mountnewta:
  03ece	48 8b 84 24 20
	05 00 00	 mov	 rax, QWORD PTR tv1759[rsp]
  03ed6	48 89 84 24 28
	05 00 00	 mov	 QWORD PTR tv1760[rsp], rax
$LN462@mountnewta:
  03ede	48 8b 84 24 28
	05 00 00	 mov	 rax, QWORD PTR tv1760[rsp]
  03ee6	48 89 84 24 30
	05 00 00	 mov	 QWORD PTR tv1761[rsp], rax
$LN464@mountnewta:
  03eee	48 8b 84 24 30
	05 00 00	 mov	 rax, QWORD PTR tv1761[rsp]
  03ef6	48 89 84 24 38
	05 00 00	 mov	 QWORD PTR tv1762[rsp], rax
$LN466@mountnewta:
  03efe	48 8b 84 24 38
	05 00 00	 mov	 rax, QWORD PTR tv1762[rsp]
  03f06	48 89 84 24 40
	05 00 00	 mov	 QWORD PTR tv1763[rsp], rax
$LN468@mountnewta:
  03f0e	48 8b 84 24 40
	05 00 00	 mov	 rax, QWORD PTR tv1763[rsp]
  03f16	48 89 84 24 48
	05 00 00	 mov	 QWORD PTR tv1764[rsp], rax
$LN470@mountnewta:
  03f1e	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03f27	74 15		 je	 SHORT $LN471@mountnewta
  03f29	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03f31	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  03f35	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv1771[rsp], eax
  03f3c	eb 0b		 jmp	 SHORT $LN472@mountnewta
$LN471@mountnewta:
  03f3e	c7 84 24 50 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1771[rsp], 0
$LN472@mountnewta:
  03f49	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  03f52	74 17		 je	 SHORT $LN473@mountnewta
  03f54	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  03f5c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  03f60	d1 f8		 sar	 eax, 1
  03f62	89 84 24 54 01
	00 00		 mov	 DWORD PTR tv1777[rsp], eax
  03f69	eb 0b		 jmp	 SHORT $LN474@mountnewta
$LN473@mountnewta:
  03f6b	c7 84 24 54 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1777[rsp], 0
$LN474@mountnewta:
  03f76	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  03f7b	48 89 84 24 40
	07 00 00	 mov	 QWORD PTR tv1737[rsp], rax
  03f83	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  03f8b	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  03f92	48 89 8c 24 48
	07 00 00	 mov	 QWORD PTR tv1766[rsp], rcx
  03f9a	b9 01 00 00 00	 mov	 ecx, 1
  03f9f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  03fa5	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  03fad	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  03fb2	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  03fba	48 8b 94 24 40
	07 00 00	 mov	 rdx, QWORD PTR tv1737[rsp]
  03fc2	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  03fc6	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  03fcb	48 8b 8c 24 48
	05 00 00	 mov	 rcx, QWORD PTR tv1764[rsp]
  03fd3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  03fd8	48 8b 8c 24 48
	07 00 00	 mov	 rcx, QWORD PTR tv1766[rsp]
  03fe0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  03fe5	8b 8c 24 50 01
	00 00		 mov	 ecx, DWORD PTR tv1771[rsp]
  03fec	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  03ff0	8b 8c 24 54 01
	00 00		 mov	 ecx, DWORD PTR tv1777[rsp]
  03ff7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  03ffb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170056
  04002	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  04007	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170057
  0400e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  04013	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04018	41 b9 03 00 00
	00		 mov	 r9d, 3
  0401e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170058
  04025	ba 9e 06 00 00	 mov	 edx, 1694		; 0000069eH
  0402a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170059
  04031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  04037	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  0403f	e9 da 07 00 00	 jmp	 $LN29@mountnewta
$LN126@mountnewta:

; 1695 :             }
; 1696 :             dev->stape_blkid_32 = 1;

  04044	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0404c	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  04052	83 c8 02	 or	 eax, 2
  04055	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0405d	89 81 98 10 00
	00		 mov	 DWORD PTR [rcx+4248], eax

; 1697 :             break;

  04063	e9 b6 07 00 00	 jmp	 $LN29@mountnewta
$LN127@mountnewta:

; 1698 : 
; 1699 :         case TDPARM_NOERG:
; 1700 :             if (TAPEDEVT_SCSITAPE != dev->tapedevt)

  04068	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04070	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04077	83 f8 03	 cmp	 eax, 3
  0407a	0f 84 6c 02 00
	00		 je	 $LN128@mountnewta

; 1701 :             {
; 1702 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1703 :                 _HHC00223E(); optrc = -1; break;

  04080	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04088	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0408f	83 f8 01	 cmp	 eax, 1
  04092	75 14		 jne	 SHORT $LN485@mountnewta
  04094	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170062
  0409b	48 89 84 24 78
	05 00 00	 mov	 QWORD PTR tv1822[rsp], rax
  040a3	e9 1e 01 00 00	 jmp	 $LN486@mountnewta
$LN485@mountnewta:
  040a8	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  040b0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  040b7	83 f8 02	 cmp	 eax, 2
  040ba	75 14		 jne	 SHORT $LN483@mountnewta
  040bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170063
  040c3	48 89 84 24 70
	05 00 00	 mov	 QWORD PTR tv1821[rsp], rax
  040cb	e9 e6 00 00 00	 jmp	 $LN484@mountnewta
$LN483@mountnewta:
  040d0	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  040d8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  040df	83 f8 03	 cmp	 eax, 3
  040e2	75 14		 jne	 SHORT $LN481@mountnewta
  040e4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170064
  040eb	48 89 84 24 68
	05 00 00	 mov	 QWORD PTR tv1820[rsp], rax
  040f3	e9 ae 00 00 00	 jmp	 $LN482@mountnewta
$LN481@mountnewta:
  040f8	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04100	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04107	83 f8 04	 cmp	 eax, 4
  0410a	75 11		 jne	 SHORT $LN479@mountnewta
  0410c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170065
  04113	48 89 84 24 60
	05 00 00	 mov	 QWORD PTR tv1819[rsp], rax
  0411b	eb 79		 jmp	 SHORT $LN480@mountnewta
$LN479@mountnewta:
  0411d	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04125	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0412c	83 f8 05	 cmp	 eax, 5
  0412f	75 11		 jne	 SHORT $LN477@mountnewta
  04131	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170066
  04138	48 89 84 24 58
	05 00 00	 mov	 QWORD PTR tv1818[rsp], rax
  04140	eb 44		 jmp	 SHORT $LN478@mountnewta
$LN477@mountnewta:
  04142	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0414a	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04151	83 f8 06	 cmp	 eax, 6
  04154	75 11		 jne	 SHORT $LN475@mountnewta
  04156	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170067
  0415d	48 89 84 24 50
	05 00 00	 mov	 QWORD PTR tv1817[rsp], rax
  04165	eb 0f		 jmp	 SHORT $LN476@mountnewta
$LN475@mountnewta:
  04167	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170068
  0416e	48 89 84 24 50
	05 00 00	 mov	 QWORD PTR tv1817[rsp], rax
$LN476@mountnewta:
  04176	48 8b 84 24 50
	05 00 00	 mov	 rax, QWORD PTR tv1817[rsp]
  0417e	48 89 84 24 58
	05 00 00	 mov	 QWORD PTR tv1818[rsp], rax
$LN478@mountnewta:
  04186	48 8b 84 24 58
	05 00 00	 mov	 rax, QWORD PTR tv1818[rsp]
  0418e	48 89 84 24 60
	05 00 00	 mov	 QWORD PTR tv1819[rsp], rax
$LN480@mountnewta:
  04196	48 8b 84 24 60
	05 00 00	 mov	 rax, QWORD PTR tv1819[rsp]
  0419e	48 89 84 24 68
	05 00 00	 mov	 QWORD PTR tv1820[rsp], rax
$LN482@mountnewta:
  041a6	48 8b 84 24 68
	05 00 00	 mov	 rax, QWORD PTR tv1820[rsp]
  041ae	48 89 84 24 70
	05 00 00	 mov	 QWORD PTR tv1821[rsp], rax
$LN484@mountnewta:
  041b6	48 8b 84 24 70
	05 00 00	 mov	 rax, QWORD PTR tv1821[rsp]
  041be	48 89 84 24 78
	05 00 00	 mov	 QWORD PTR tv1822[rsp], rax
$LN486@mountnewta:
  041c6	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  041cf	74 15		 je	 SHORT $LN487@mountnewta
  041d1	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  041d9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  041dd	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv1829[rsp], eax
  041e4	eb 0b		 jmp	 SHORT $LN488@mountnewta
$LN487@mountnewta:
  041e6	c7 84 24 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1829[rsp], 0
$LN488@mountnewta:
  041f1	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  041fa	74 17		 je	 SHORT $LN489@mountnewta
  041fc	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04204	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  04208	d1 f8		 sar	 eax, 1
  0420a	89 84 24 5c 01
	00 00		 mov	 DWORD PTR tv1835[rsp], eax
  04211	eb 0b		 jmp	 SHORT $LN490@mountnewta
$LN489@mountnewta:
  04213	c7 84 24 5c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1835[rsp], 0
$LN490@mountnewta:
  0421e	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  04223	48 89 84 24 50
	07 00 00	 mov	 QWORD PTR tv1795[rsp], rax
  0422b	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04233	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0423a	48 89 8c 24 58
	07 00 00	 mov	 QWORD PTR tv1824[rsp], rcx
  04242	b9 01 00 00 00	 mov	 ecx, 1
  04247	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0424d	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  04255	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0425a	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  04262	48 8b 94 24 50
	07 00 00	 mov	 rdx, QWORD PTR tv1795[rsp]
  0426a	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  0426e	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  04273	48 8b 8c 24 78
	05 00 00	 mov	 rcx, QWORD PTR tv1822[rsp]
  0427b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  04280	48 8b 8c 24 58
	07 00 00	 mov	 rcx, QWORD PTR tv1824[rsp]
  04288	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0428d	8b 8c 24 58 01
	00 00		 mov	 ecx, DWORD PTR tv1829[rsp]
  04294	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  04298	8b 8c 24 5c 01
	00 00		 mov	 ecx, DWORD PTR tv1835[rsp]
  0429f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  042a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170069
  042aa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  042af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170070
  042b6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  042bb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  042c0	41 b9 03 00 00
	00		 mov	 r9d, 3
  042c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170071
  042cd	ba a7 06 00 00	 mov	 edx, 1703		; 000006a7H
  042d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170072
  042d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  042df	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  042e7	e9 32 05 00 00	 jmp	 $LN29@mountnewta
$LN128@mountnewta:

; 1704 :             }
; 1705 :             dev->stape_no_erg = 1;

  042ec	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  042f4	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  042fa	83 c8 04	 or	 eax, 4
  042fd	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04305	89 81 98 10 00
	00		 mov	 DWORD PTR [rcx+4248], eax

; 1706 :             break;

  0430b	e9 0e 05 00 00	 jmp	 $LN29@mountnewta
$LN129@mountnewta:

; 1707 : 
; 1708 :         case TDPARM_ONLINE:
; 1709 :             if (TAPEDEVT_SCSITAPE != dev->tapedevt)

  04310	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04318	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0431f	83 f8 03	 cmp	 eax, 3
  04322	0f 84 6c 02 00
	00		 je	 $LN130@mountnewta

; 1710 :             {
; 1711 :                 // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1712 :                 _HHC00223E(); optrc = -1; break;

  04328	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04330	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04337	83 f8 01	 cmp	 eax, 1
  0433a	75 14		 jne	 SHORT $LN501@mountnewta
  0433c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170075
  04343	48 89 84 24 a8
	05 00 00	 mov	 QWORD PTR tv1880[rsp], rax
  0434b	e9 1e 01 00 00	 jmp	 $LN502@mountnewta
$LN501@mountnewta:
  04350	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04358	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0435f	83 f8 02	 cmp	 eax, 2
  04362	75 14		 jne	 SHORT $LN499@mountnewta
  04364	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170076
  0436b	48 89 84 24 a0
	05 00 00	 mov	 QWORD PTR tv1879[rsp], rax
  04373	e9 e6 00 00 00	 jmp	 $LN500@mountnewta
$LN499@mountnewta:
  04378	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04380	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04387	83 f8 03	 cmp	 eax, 3
  0438a	75 14		 jne	 SHORT $LN497@mountnewta
  0438c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170077
  04393	48 89 84 24 98
	05 00 00	 mov	 QWORD PTR tv1878[rsp], rax
  0439b	e9 ae 00 00 00	 jmp	 $LN498@mountnewta
$LN497@mountnewta:
  043a0	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  043a8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  043af	83 f8 04	 cmp	 eax, 4
  043b2	75 11		 jne	 SHORT $LN495@mountnewta
  043b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170078
  043bb	48 89 84 24 90
	05 00 00	 mov	 QWORD PTR tv1877[rsp], rax
  043c3	eb 79		 jmp	 SHORT $LN496@mountnewta
$LN495@mountnewta:
  043c5	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  043cd	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  043d4	83 f8 05	 cmp	 eax, 5
  043d7	75 11		 jne	 SHORT $LN493@mountnewta
  043d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170079
  043e0	48 89 84 24 88
	05 00 00	 mov	 QWORD PTR tv1876[rsp], rax
  043e8	eb 44		 jmp	 SHORT $LN494@mountnewta
$LN493@mountnewta:
  043ea	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  043f2	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  043f9	83 f8 06	 cmp	 eax, 6
  043fc	75 11		 jne	 SHORT $LN491@mountnewta
  043fe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170080
  04405	48 89 84 24 80
	05 00 00	 mov	 QWORD PTR tv1875[rsp], rax
  0440d	eb 0f		 jmp	 SHORT $LN492@mountnewta
$LN491@mountnewta:
  0440f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170081
  04416	48 89 84 24 80
	05 00 00	 mov	 QWORD PTR tv1875[rsp], rax
$LN492@mountnewta:
  0441e	48 8b 84 24 80
	05 00 00	 mov	 rax, QWORD PTR tv1875[rsp]
  04426	48 89 84 24 88
	05 00 00	 mov	 QWORD PTR tv1876[rsp], rax
$LN494@mountnewta:
  0442e	48 8b 84 24 88
	05 00 00	 mov	 rax, QWORD PTR tv1876[rsp]
  04436	48 89 84 24 90
	05 00 00	 mov	 QWORD PTR tv1877[rsp], rax
$LN496@mountnewta:
  0443e	48 8b 84 24 90
	05 00 00	 mov	 rax, QWORD PTR tv1877[rsp]
  04446	48 89 84 24 98
	05 00 00	 mov	 QWORD PTR tv1878[rsp], rax
$LN498@mountnewta:
  0444e	48 8b 84 24 98
	05 00 00	 mov	 rax, QWORD PTR tv1878[rsp]
  04456	48 89 84 24 a0
	05 00 00	 mov	 QWORD PTR tv1879[rsp], rax
$LN500@mountnewta:
  0445e	48 8b 84 24 a0
	05 00 00	 mov	 rax, QWORD PTR tv1879[rsp]
  04466	48 89 84 24 a8
	05 00 00	 mov	 QWORD PTR tv1880[rsp], rax
$LN502@mountnewta:
  0446e	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04477	74 15		 je	 SHORT $LN503@mountnewta
  04479	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04481	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04485	89 84 24 80 01
	00 00		 mov	 DWORD PTR tv1887[rsp], eax
  0448c	eb 0b		 jmp	 SHORT $LN504@mountnewta
$LN503@mountnewta:
  0448e	c7 84 24 80 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1887[rsp], 0
$LN504@mountnewta:
  04499	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  044a2	74 17		 je	 SHORT $LN505@mountnewta
  044a4	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  044ac	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  044b0	d1 f8		 sar	 eax, 1
  044b2	89 84 24 64 01
	00 00		 mov	 DWORD PTR tv1925[rsp], eax
  044b9	eb 0b		 jmp	 SHORT $LN506@mountnewta
$LN505@mountnewta:
  044bb	c7 84 24 64 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1925[rsp], 0
$LN506@mountnewta:
  044c6	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  044cb	48 89 84 24 60
	07 00 00	 mov	 QWORD PTR tv1853[rsp], rax
  044d3	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  044db	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  044e2	48 89 8c 24 68
	07 00 00	 mov	 QWORD PTR tv1882[rsp], rcx
  044ea	b9 01 00 00 00	 mov	 ecx, 1
  044ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  044f5	48 8d 8c 24 e0
	07 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  044fd	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  04502	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0450a	48 8b 94 24 60
	07 00 00	 mov	 rdx, QWORD PTR tv1853[rsp]
  04512	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  04516	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0451b	48 8b 8c 24 a8
	05 00 00	 mov	 rcx, QWORD PTR tv1880[rsp]
  04523	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  04528	48 8b 8c 24 68
	07 00 00	 mov	 rcx, QWORD PTR tv1882[rsp]
  04530	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  04535	8b 8c 24 80 01
	00 00		 mov	 ecx, DWORD PTR tv1887[rsp]
  0453c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  04540	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR tv1925[rsp]
  04547	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0454b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170082
  04552	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  04557	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170083
  0455e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  04563	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04568	41 b9 03 00 00
	00		 mov	 r9d, 3
  0456e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170084
  04575	ba b0 06 00 00	 mov	 edx, 1712		; 000006b0H
  0457a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170085
  04581	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  04587	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
  0458f	e9 8a 02 00 00	 jmp	 $LN29@mountnewta
$LN130@mountnewta:

; 1713 :             }
; 1714 :             dev->stape_online = 1;

  04594	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0459c	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  045a2	83 c8 08	 or	 eax, 8
  045a5	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  045ad	89 81 98 10 00
	00		 mov	 DWORD PTR [rcx+4248], eax

; 1715 :             break;

  045b3	e9 66 02 00 00	 jmp	 $LN29@mountnewta
$LN131@mountnewta:

; 1716 : #endif /* defined(OPTION_SCSI_TAPE) */
; 1717 : 
; 1718 :         default:
; 1719 :             // "%1d:%04X Tape file '%s', type '%s': option '%s' rejected: '%s'"
; 1720 :             WRMSG(HHC00223, "E", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), argv[i], "parse error");

  045b8	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  045c0	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  045c7	83 f8 01	 cmp	 eax, 1
  045ca	75 14		 jne	 SHORT $LN517@mountnewta
  045cc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170088
  045d3	48 89 84 24 d8
	05 00 00	 mov	 QWORD PTR tv1967[rsp], rax
  045db	e9 1e 01 00 00	 jmp	 $LN518@mountnewta
$LN517@mountnewta:
  045e0	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  045e8	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  045ef	83 f8 02	 cmp	 eax, 2
  045f2	75 14		 jne	 SHORT $LN515@mountnewta
  045f4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170089
  045fb	48 89 84 24 d0
	05 00 00	 mov	 QWORD PTR tv1966[rsp], rax
  04603	e9 e6 00 00 00	 jmp	 $LN516@mountnewta
$LN515@mountnewta:
  04608	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04610	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04617	83 f8 03	 cmp	 eax, 3
  0461a	75 14		 jne	 SHORT $LN513@mountnewta
  0461c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170090
  04623	48 89 84 24 c8
	05 00 00	 mov	 QWORD PTR tv1965[rsp], rax
  0462b	e9 ae 00 00 00	 jmp	 $LN514@mountnewta
$LN513@mountnewta:
  04630	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04638	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0463f	83 f8 04	 cmp	 eax, 4
  04642	75 11		 jne	 SHORT $LN511@mountnewta
  04644	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170091
  0464b	48 89 84 24 c0
	05 00 00	 mov	 QWORD PTR tv1964[rsp], rax
  04653	eb 79		 jmp	 SHORT $LN512@mountnewta
$LN511@mountnewta:
  04655	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0465d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04664	83 f8 05	 cmp	 eax, 5
  04667	75 11		 jne	 SHORT $LN509@mountnewta
  04669	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170092
  04670	48 89 84 24 b8
	05 00 00	 mov	 QWORD PTR tv1963[rsp], rax
  04678	eb 44		 jmp	 SHORT $LN510@mountnewta
$LN509@mountnewta:
  0467a	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04682	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04689	83 f8 06	 cmp	 eax, 6
  0468c	75 11		 jne	 SHORT $LN507@mountnewta
  0468e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170093
  04695	48 89 84 24 b0
	05 00 00	 mov	 QWORD PTR tv1962[rsp], rax
  0469d	eb 0f		 jmp	 SHORT $LN508@mountnewta
$LN507@mountnewta:
  0469f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170094
  046a6	48 89 84 24 b0
	05 00 00	 mov	 QWORD PTR tv1962[rsp], rax
$LN508@mountnewta:
  046ae	48 8b 84 24 b0
	05 00 00	 mov	 rax, QWORD PTR tv1962[rsp]
  046b6	48 89 84 24 b8
	05 00 00	 mov	 QWORD PTR tv1963[rsp], rax
$LN510@mountnewta:
  046be	48 8b 84 24 b8
	05 00 00	 mov	 rax, QWORD PTR tv1963[rsp]
  046c6	48 89 84 24 c0
	05 00 00	 mov	 QWORD PTR tv1964[rsp], rax
$LN512@mountnewta:
  046ce	48 8b 84 24 c0
	05 00 00	 mov	 rax, QWORD PTR tv1964[rsp]
  046d6	48 89 84 24 c8
	05 00 00	 mov	 QWORD PTR tv1965[rsp], rax
$LN514@mountnewta:
  046de	48 8b 84 24 c8
	05 00 00	 mov	 rax, QWORD PTR tv1965[rsp]
  046e6	48 89 84 24 d0
	05 00 00	 mov	 QWORD PTR tv1966[rsp], rax
$LN516@mountnewta:
  046ee	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR tv1966[rsp]
  046f6	48 89 84 24 d8
	05 00 00	 mov	 QWORD PTR tv1967[rsp], rax
$LN518@mountnewta:
  046fe	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04707	74 15		 je	 SHORT $LN519@mountnewta
  04709	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04711	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04715	89 84 24 68 01
	00 00		 mov	 DWORD PTR tv1974[rsp], eax
  0471c	eb 0b		 jmp	 SHORT $LN520@mountnewta
$LN519@mountnewta:
  0471e	c7 84 24 68 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1974[rsp], 0
$LN520@mountnewta:
  04729	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04732	74 17		 je	 SHORT $LN521@mountnewta
  04734	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0473c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  04740	d1 f8		 sar	 eax, 1
  04742	89 84 24 6c 01
	00 00		 mov	 DWORD PTR tv1980[rsp], eax
  04749	eb 0b		 jmp	 SHORT $LN522@mountnewta
$LN521@mountnewta:
  0474b	c7 84 24 6c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1980[rsp], 0
$LN522@mountnewta:
  04756	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  0475b	48 89 84 24 70
	07 00 00	 mov	 QWORD PTR tv1940[rsp], rax
  04763	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0476b	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  04772	48 89 8c 24 78
	07 00 00	 mov	 QWORD PTR tv1969[rsp], rcx
  0477a	b9 01 00 00 00	 mov	 ecx, 1
  0477f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04785	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170087
  0478c	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  04791	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  04799	48 8b 94 24 70
	07 00 00	 mov	 rdx, QWORD PTR tv1940[rsp]
  047a1	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  047a5	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  047aa	48 8b 8c 24 d8
	05 00 00	 mov	 rcx, QWORD PTR tv1967[rsp]
  047b2	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  047b7	48 8b 8c 24 78
	07 00 00	 mov	 rcx, QWORD PTR tv1969[rsp]
  047bf	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  047c4	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR tv1974[rsp]
  047cb	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  047cf	8b 8c 24 6c 01
	00 00		 mov	 ecx, DWORD PTR tv1980[rsp]
  047d6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  047da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170095
  047e1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  047e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170096
  047ed	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  047f2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  047f7	41 b9 03 00 00
	00		 mov	 r9d, 3
  047fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170097
  04804	ba b8 06 00 00	 mov	 edx, 1720		; 000006b8H
  04809	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170098
  04810	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1721 :             optrc = -1;

  04816	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR optrc$[rsp], -1
$LN29@mountnewta:

; 1722 :             break;
; 1723 : 
; 1724 :         } // end switch (parser (&ptab[0], argv[i], &res))
; 1725 : 
; 1726 :         if (optrc < 0)

  0481e	83 7c 24 70 00	 cmp	 DWORD PTR optrc$[rsp], 0
  04823	7d 10		 jge	 SHORT $LN132@mountnewta

; 1727 :             rc = -1;

  04825	c7 84 24 80 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR rc$[rsp], -1
  04830	e9 52 02 00 00	 jmp	 $LN133@mountnewta
$LN132@mountnewta:

; 1728 :         else
; 1729 :         {
; 1730 :             // "%1d:%04X Tape file '%s', type '%s': option '%s' accepted"
; 1731 :             WRMSG(HHC00222, "I", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), argv[i]);

  04835	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0483d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04844	83 f8 01	 cmp	 eax, 1
  04847	75 14		 jne	 SHORT $LN533@mountnewta
  04849	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170101
  04850	48 89 84 24 08
	06 00 00	 mov	 QWORD PTR tv2020[rsp], rax
  04858	e9 1e 01 00 00	 jmp	 $LN534@mountnewta
$LN533@mountnewta:
  0485d	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04865	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0486c	83 f8 02	 cmp	 eax, 2
  0486f	75 14		 jne	 SHORT $LN531@mountnewta
  04871	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170102
  04878	48 89 84 24 00
	06 00 00	 mov	 QWORD PTR tv2019[rsp], rax
  04880	e9 e6 00 00 00	 jmp	 $LN532@mountnewta
$LN531@mountnewta:
  04885	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0488d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04894	83 f8 03	 cmp	 eax, 3
  04897	75 14		 jne	 SHORT $LN529@mountnewta
  04899	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170103
  048a0	48 89 84 24 f8
	05 00 00	 mov	 QWORD PTR tv2018[rsp], rax
  048a8	e9 ae 00 00 00	 jmp	 $LN530@mountnewta
$LN529@mountnewta:
  048ad	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  048b5	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  048bc	83 f8 04	 cmp	 eax, 4
  048bf	75 11		 jne	 SHORT $LN527@mountnewta
  048c1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170104
  048c8	48 89 84 24 f0
	05 00 00	 mov	 QWORD PTR tv2017[rsp], rax
  048d0	eb 79		 jmp	 SHORT $LN528@mountnewta
$LN527@mountnewta:
  048d2	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  048da	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  048e1	83 f8 05	 cmp	 eax, 5
  048e4	75 11		 jne	 SHORT $LN525@mountnewta
  048e6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170105
  048ed	48 89 84 24 e8
	05 00 00	 mov	 QWORD PTR tv2016[rsp], rax
  048f5	eb 44		 jmp	 SHORT $LN526@mountnewta
$LN525@mountnewta:
  048f7	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  048ff	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04906	83 f8 06	 cmp	 eax, 6
  04909	75 11		 jne	 SHORT $LN523@mountnewta
  0490b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170106
  04912	48 89 84 24 e0
	05 00 00	 mov	 QWORD PTR tv2015[rsp], rax
  0491a	eb 0f		 jmp	 SHORT $LN524@mountnewta
$LN523@mountnewta:
  0491c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170107
  04923	48 89 84 24 e0
	05 00 00	 mov	 QWORD PTR tv2015[rsp], rax
$LN524@mountnewta:
  0492b	48 8b 84 24 e0
	05 00 00	 mov	 rax, QWORD PTR tv2015[rsp]
  04933	48 89 84 24 e8
	05 00 00	 mov	 QWORD PTR tv2016[rsp], rax
$LN526@mountnewta:
  0493b	48 8b 84 24 e8
	05 00 00	 mov	 rax, QWORD PTR tv2016[rsp]
  04943	48 89 84 24 f0
	05 00 00	 mov	 QWORD PTR tv2017[rsp], rax
$LN528@mountnewta:
  0494b	48 8b 84 24 f0
	05 00 00	 mov	 rax, QWORD PTR tv2017[rsp]
  04953	48 89 84 24 f8
	05 00 00	 mov	 QWORD PTR tv2018[rsp], rax
$LN530@mountnewta:
  0495b	48 8b 84 24 f8
	05 00 00	 mov	 rax, QWORD PTR tv2018[rsp]
  04963	48 89 84 24 00
	06 00 00	 mov	 QWORD PTR tv2019[rsp], rax
$LN532@mountnewta:
  0496b	48 8b 84 24 00
	06 00 00	 mov	 rax, QWORD PTR tv2019[rsp]
  04973	48 89 84 24 08
	06 00 00	 mov	 QWORD PTR tv2020[rsp], rax
$LN534@mountnewta:
  0497b	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  04984	74 15		 je	 SHORT $LN535@mountnewta
  04986	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0498e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  04992	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv2027[rsp], eax
  04999	eb 0b		 jmp	 SHORT $LN536@mountnewta
$LN535@mountnewta:
  0499b	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2027[rsp], 0
$LN536@mountnewta:
  049a6	48 83 bc 24 50
	08 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  049af	74 17		 je	 SHORT $LN537@mountnewta
  049b1	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  049b9	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  049bd	d1 f8		 sar	 eax, 1
  049bf	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv2033[rsp], eax
  049c6	eb 0b		 jmp	 SHORT $LN538@mountnewta
$LN537@mountnewta:
  049c8	c7 84 24 74 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2033[rsp], 0
$LN538@mountnewta:
  049d3	48 63 44 24 74	 movsxd	 rax, DWORD PTR i$[rsp]
  049d8	48 89 84 24 80
	07 00 00	 mov	 QWORD PTR tv1993[rsp], rax
  049e0	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  049e8	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  049ef	48 89 8c 24 88
	07 00 00	 mov	 QWORD PTR tv2022[rsp], rcx
  049f7	b9 01 00 00 00	 mov	 ecx, 1
  049fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  04a02	48 8b 8c 24 60
	08 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  04a0a	48 8b 94 24 80
	07 00 00	 mov	 rdx, QWORD PTR tv1993[rsp]
  04a12	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  04a16	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  04a1b	48 8b 8c 24 08
	06 00 00	 mov	 rcx, QWORD PTR tv2020[rsp]
  04a23	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  04a28	48 8b 8c 24 88
	07 00 00	 mov	 rcx, QWORD PTR tv2022[rsp]
  04a30	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  04a35	8b 8c 24 70 01
	00 00		 mov	 ecx, DWORD PTR tv2027[rsp]
  04a3c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  04a40	8b 8c 24 74 01
	00 00		 mov	 ecx, DWORD PTR tv2033[rsp]
  04a47	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  04a4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170108
  04a52	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  04a57	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170109
  04a5e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  04a63	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  04a68	41 b9 03 00 00
	00		 mov	 r9d, 3
  04a6e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170110
  04a75	ba c3 06 00 00	 mov	 edx, 1731		; 000006c3H
  04a7a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170111
  04a81	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN133@mountnewta:

; 1732 :         }
; 1733 : 
; 1734 :     } // end for (i = 1; i < argc; i++)

  04a87	e9 14 bb ff ff	 jmp	 $LN26@mountnewta
$LN27@mountnewta:

; 1735 : 
; 1736 :     if (0 != rc)

  04a8c	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR rc$[rsp], 0
  04a94	74 2f		 je	 SHORT $LN134@mountnewta

; 1737 :     {
; 1738 :         if (lock_obtained) // (release lock only if WE obtained it)

  04a96	0f b6 44 24 78	 movzx	 eax, BYTE PTR lock_obtained$[rsp]
  04a9b	85 c0		 test	 eax, eax
  04a9d	74 1c		 je	 SHORT $LN135@mountnewta

; 1739 :             release_lock( &dev->lock );

  04a9f	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04aa7	48 83 c0 38	 add	 rax, 56			; 00000038H
  04aab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170114
  04ab2	48 8b c8	 mov	 rcx, rax
  04ab5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
$LN135@mountnewta:

; 1740 :         return -1;

  04abb	b8 ff ff ff ff	 mov	 eax, -1
  04ac0	e9 8c 01 00 00	 jmp	 $LN1@mountnewta
$LN134@mountnewta:

; 1741 :     }
; 1742 : 
; 1743 : #if defined(OPTION_SCSI_TAPE)
; 1744 :     if (dev->tapedevt == TAPEDEVT_SCSITAPE)

  04ac5	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04acd	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  04ad4	83 f8 03	 cmp	 eax, 3
  04ad7	75 45		 jne	 SHORT $LN136@mountnewta

; 1745 :         dev->sstat = dev->stape_online ? 0 : GMT_DR_OPEN( -1 );

  04ad9	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04ae1	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  04ae7	c1 e8 03	 shr	 eax, 3
  04aea	83 e0 01	 and	 eax, 1
  04aed	85 c0		 test	 eax, eax
  04aef	74 0d		 je	 SHORT $LN539@mountnewta
  04af1	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv2090[rsp], 0
  04afc	eb 0b		 jmp	 SHORT $LN540@mountnewta
$LN539@mountnewta:
  04afe	c7 84 24 78 01
	00 00 00 00 04
	00		 mov	 DWORD PTR tv2090[rsp], 262144 ; 00040000H
$LN540@mountnewta:
  04b09	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04b11	8b 8c 24 78 01
	00 00		 mov	 ecx, DWORD PTR tv2090[rsp]
  04b18	89 88 88 10 00
	00		 mov	 DWORD PTR [rax+4232], ecx
$LN136@mountnewta:

; 1746 : #endif
; 1747 : 
; 1748 :     /* Adjust the display if necessary */
; 1749 :     if(dev->tdparms.displayfeat)

  04b1e	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04b26	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  04b2c	c1 e8 09	 shr	 eax, 9
  04b2f	83 e0 01	 and	 eax, 1
  04b32	85 c0		 test	 eax, eax
  04b34	0f 84 ca 00 00
	00		 je	 $LN137@mountnewta

; 1750 :     {
; 1751 :         if(strcmp(dev->filename,TAPE_UNLOADED)==0)

  04b3a	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04b42	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  04b48	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170119
  04b4f	48 8b c8	 mov	 rcx, rax
  04b52	e8 00 00 00 00	 call	 strcmp
  04b57	85 c0		 test	 eax, eax
  04b59	0f 85 96 00 00
	00		 jne	 $LN138@mountnewta

; 1752 :         {
; 1753 :             /* NO tape is loaded */
; 1754 :             if(TAPEDISPTYP_UMOUNTMOUNT == dev->tapedisptype)

  04b5f	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04b67	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  04b6e	83 f8 08	 cmp	 eax, 8
  04b71	75 5d		 jne	 SHORT $LN140@mountnewta

; 1755 :             {
; 1756 :                 /* A new tape SHOULD be mounted */
; 1757 :                 dev->tapedisptype   = TAPEDISPTYP_MOUNT;

  04b73	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04b7b	c6 80 60 11 00
	00 06		 mov	 BYTE PTR [rax+4448], 6

; 1758 :                 dev->tapedispflags |= TAPEDISPFLG_REQAUTOMNT;

  04b82	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04b8a	0f b6 80 61 11
	00 00		 movzx	 eax, BYTE PTR [rax+4449]
  04b91	83 c8 08	 or	 eax, 8
  04b94	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04b9c	88 81 61 11 00
	00		 mov	 BYTE PTR [rcx+4449], al

; 1759 :                 STRLCPY( dev->tapemsg1, dev->tapemsg2 );

  04ba2	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04baa	48 05 29 11 00
	00		 add	 rax, 4393		; 00001129H
  04bb0	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04bb8	48 81 c1 20 11
	00 00		 add	 rcx, 4384		; 00001120H
  04bbf	41 b8 09 00 00
	00		 mov	 r8d, 9
  04bc5	48 8b d0	 mov	 rdx, rax
  04bc8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 1760 :             }

  04bce	eb 23		 jmp	 SHORT $LN141@mountnewta
$LN140@mountnewta:

; 1761 :             else if(TAPEDISPTYP_UNMOUNT == dev->tapedisptype)

  04bd0	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04bd8	0f b6 80 60 11
	00 00		 movzx	 eax, BYTE PTR [rax+4448]
  04bdf	83 f8 07	 cmp	 eax, 7
  04be2	75 0f		 jne	 SHORT $LN142@mountnewta

; 1762 :             {
; 1763 :                 dev->tapedisptype = TAPEDISPTYP_IDLE;

  04be4	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04bec	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0
$LN142@mountnewta:
$LN141@mountnewta:

; 1764 :             }
; 1765 :         }

  04bf3	eb 0f		 jmp	 SHORT $LN139@mountnewta
$LN138@mountnewta:

; 1766 :         else
; 1767 :         {
; 1768 :             /* A tape IS already loaded */
; 1769 :             dev->tapedisptype = TAPEDISPTYP_IDLE;

  04bf5	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04bfd	c6 80 60 11 00
	00 00		 mov	 BYTE PTR [rax+4448], 0
$LN139@mountnewta:
$LN137@mountnewta:

; 1770 :         }
; 1771 :     }
; 1772 : 
; 1773 :     if (lock_obtained) // (release lock only if WE obtained it)

  04c04	0f b6 44 24 78	 movzx	 eax, BYTE PTR lock_obtained$[rsp]
  04c09	85 c0		 test	 eax, eax
  04c0b	74 1c		 je	 SHORT $LN143@mountnewta

; 1774 :         release_lock( &dev->lock );

  04c0d	48 8b 84 24 50
	08 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  04c15	48 83 c0 38	 add	 rax, 56			; 00000038H
  04c19	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170124
  04c20	48 8b c8	 mov	 rcx, rax
  04c23	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
$LN143@mountnewta:

; 1775 : 
; 1776 :     UpdateDisplay(dev);

  04c29	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04c31	e8 00 00 00 00	 call	 UpdateDisplay

; 1777 :     rc = ReqAutoMount(dev);

  04c36	48 8b 8c 24 50
	08 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  04c3e	e8 00 00 00 00	 call	 ReqAutoMount
  04c43	89 84 24 80 00
	00 00		 mov	 DWORD PTR rc$[rsp], eax

; 1778 : 
; 1779 :     return rc;

  04c4a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR rc$[rsp]
$LN1@mountnewta:

; 1780 : 
; 1781 : } /* end function mountnewtape */

  04c51	48 8b 8c 24 30
	08 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  04c59	48 33 cc	 xor	 rcx, rsp
  04c5c	e8 00 00 00 00	 call	 __security_check_cookie
  04c61	48 81 c4 48 08
	00 00		 add	 rsp, 2120		; 00000848H
  04c68	c3		 ret	 0
  04c69	0f 1f 00	 npad	 3
$LN541@mountnewta:
  04c6c	00 00 00 00	 DD	 $LN54@mountnewta
  04c70	00 00 00 00	 DD	 $LN55@mountnewta
  04c74	00 00 00 00	 DD	 $LN56@mountnewta
  04c78	00 00 00 00	 DD	 $LN59@mountnewta
  04c7c	00 00 00 00	 DD	 $LN60@mountnewta
  04c80	00 00 00 00	 DD	 $LN63@mountnewta
  04c84	00 00 00 00	 DD	 $LN68@mountnewta
  04c88	00 00 00 00	 DD	 $LN73@mountnewta
  04c8c	00 00 00 00	 DD	 $LN78@mountnewta
  04c90	00 00 00 00	 DD	 $LN92@mountnewta
  04c94	00 00 00 00	 DD	 $LN94@mountnewta
  04c98	00 00 00 00	 DD	 $LN96@mountnewta
  04c9c	00 00 00 00	 DD	 $LN108@mountnewta
  04ca0	00 00 00 00	 DD	 $LN110@mountnewta
  04ca4	00 00 00 00	 DD	 $LN112@mountnewta
  04ca8	00 00 00 00	 DD	 $LN113@mountnewta
  04cac	00 00 00 00	 DD	 $LN115@mountnewta
  04cb0	00 00 00 00	 DD	 $LN116@mountnewta
  04cb4	00 00 00 00	 DD	 $LN118@mountnewta
  04cb8	00 00 00 00	 DD	 $LN120@mountnewta
  04cbc	00 00 00 00	 DD	 $LN122@mountnewta
  04cc0	00 00 00 00	 DD	 $LN123@mountnewta
  04cc4	00 00 00 00	 DD	 $LN125@mountnewta
  04cc8	00 00 00 00	 DD	 $LN127@mountnewta
  04ccc	00 00 00 00	 DD	 $LN129@mountnewta
mountnewtape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
rc$ = 32
fd$1 = 36
hdr$2 = 40
pathname$ = 48
__$ArrayPad$ = 320
dev$ = 352
gettapetype_bydata PROC

; 1115 : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H
  0000c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00013	48 33 c4	 xor	 rax, rsp
  00016	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1116 :     char        pathname[MAX_PATH];     /* file path in host format  */
; 1117 :     int         rc;                     /* various rtns return codes */
; 1118 : 
; 1119 :     /* Try to determine the type based on actual file contents */
; 1120 :     hostpath( pathname, dev->filename, sizeof(pathname) );

  0001e	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00026	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0002c	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00032	48 8b d0	 mov	 rdx, rax
  00035	48 8d 4c 24 30	 lea	 rcx, QWORD PTR pathname$[rsp]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 1121 :     rc = HOPEN ( pathname, O_RDONLY | O_BINARY );

  00040	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  00045	48 8d 4c 24 30	 lea	 rcx, QWORD PTR pathname$[rsp]
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  00050	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 1122 :     if (rc >= 0)

  00054	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  00059	0f 8c 2e 01 00
	00		 jl	 $LN2@gettapetyp

; 1123 :     {
; 1124 :         BYTE hdr[6];                    /* block header i/o buffer   */
; 1125 :         int fd = rc;                    /* save file descriptor      */

  0005f	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]
  00063	89 44 24 24	 mov	 DWORD PTR fd$1[rsp], eax

; 1126 : 
; 1127 :         /* Read the header. If bytes 0-3 are ASCII "0000", then the
; 1128 :          * tape is likely a Flex FakeTape. Otherwise if bytes 2-3 are
; 1129 :          * binary zero (x'0000'), it's likely an AWS type tape. If byte
; 1130 :          * 4 (first flag byte) has either of the ZLIB or BZIP2 flags on,
; 1131 :          * then it's a HET tape. Otherwise it's just an ordinary AWS tape.
; 1132 :          */
; 1133 :         rc = read (fd, hdr, sizeof(hdr));

  00067	41 b8 06 00 00
	00		 mov	 r8d, 6
  0006d	48 8d 54 24 28	 lea	 rdx, QWORD PTR hdr$2[rsp]
  00072	8b 4c 24 24	 mov	 ecx, DWORD PTR fd$1[rsp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  0007c	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 1134 :              close(fd);

  00080	8b 4c 24 24	 mov	 ecx, DWORD PTR fd$1[rsp]
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 1135 :         if (rc >= 6)

  0008a	83 7c 24 20 06	 cmp	 DWORD PTR rc$[rsp], 6
  0008f	0f 8c f8 00 00
	00		 jl	 $LN3@gettapetyp

; 1136 :         {
; 1137 :             /* Use the data to make the possible determination */
; 1138 :             if (memcmp(hdr, "@TDF", 4) == 0)

  00095	41 b8 04 00 00
	00		 mov	 r8d, 4
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169502
  000a2	48 8d 4c 24 28	 lea	 rcx, QWORD PTR hdr$2[rsp]
  000a7	e8 00 00 00 00	 call	 memcmp
  000ac	85 c0		 test	 eax, eax
  000ae	75 0a		 jne	 SHORT $LN4@gettapetyp

; 1139 :                 return OMATAPE_FMTENTRY;

  000b0	b8 02 00 00 00	 mov	 eax, 2
  000b5	e9 d8 00 00 00	 jmp	 $LN1@gettapetyp
$LN4@gettapetyp:

; 1140 : 
; 1141 :             if (1
; 1142 :                 && hdr[0] == 0x30           /* "ASCII"-zero len prev block? */
; 1143 :                 && hdr[1] == 0x30
; 1144 :                 && hdr[2] == 0x30
; 1145 :                 && hdr[3] == 0x30

  000ba	33 c0		 xor	 eax, eax
  000bc	83 f8 01	 cmp	 eax, 1
  000bf	74 53		 je	 SHORT $LN5@gettapetyp
  000c1	b8 01 00 00 00	 mov	 eax, 1
  000c6	48 6b c0 00	 imul	 rax, rax, 0
  000ca	0f b6 44 04 28	 movzx	 eax, BYTE PTR hdr$2[rsp+rax]
  000cf	83 f8 30	 cmp	 eax, 48			; 00000030H
  000d2	75 40		 jne	 SHORT $LN5@gettapetyp
  000d4	b8 01 00 00 00	 mov	 eax, 1
  000d9	48 6b c0 01	 imul	 rax, rax, 1
  000dd	0f b6 44 04 28	 movzx	 eax, BYTE PTR hdr$2[rsp+rax]
  000e2	83 f8 30	 cmp	 eax, 48			; 00000030H
  000e5	75 2d		 jne	 SHORT $LN5@gettapetyp
  000e7	b8 01 00 00 00	 mov	 eax, 1
  000ec	48 6b c0 02	 imul	 rax, rax, 2
  000f0	0f b6 44 04 28	 movzx	 eax, BYTE PTR hdr$2[rsp+rax]
  000f5	83 f8 30	 cmp	 eax, 48			; 00000030H
  000f8	75 1a		 jne	 SHORT $LN5@gettapetyp
  000fa	b8 01 00 00 00	 mov	 eax, 1
  000ff	48 6b c0 03	 imul	 rax, rax, 3
  00103	0f b6 44 04 28	 movzx	 eax, BYTE PTR hdr$2[rsp+rax]
  00108	83 f8 30	 cmp	 eax, 48			; 00000030H
  0010b	75 07		 jne	 SHORT $LN5@gettapetyp

; 1146 :             )
; 1147 :                 return FAKETAPE_FMTENTRY;   /* Then obviously Flex FakeTape */

  0010d	b8 03 00 00 00	 mov	 eax, 3
  00112	eb 7e		 jmp	 SHORT $LN1@gettapetyp
$LN5@gettapetyp:

; 1148 : 
; 1149 :             if (hdr[2] == 0 && hdr[3] == 0)             /* 0 len prev blk?  */

  00114	b8 01 00 00 00	 mov	 eax, 1
  00119	48 6b c0 02	 imul	 rax, rax, 2
  0011d	0f b6 44 04 28	 movzx	 eax, BYTE PTR hdr$2[rsp+rax]
  00122	85 c0		 test	 eax, eax
  00124	75 67		 jne	 SHORT $LN6@gettapetyp
  00126	b8 01 00 00 00	 mov	 eax, 1
  0012b	48 6b c0 03	 imul	 rax, rax, 3
  0012f	0f b6 44 04 28	 movzx	 eax, BYTE PTR hdr$2[rsp+rax]
  00134	85 c0		 test	 eax, eax
  00136	75 55		 jne	 SHORT $LN6@gettapetyp

; 1150 :             {
; 1151 :                 if (hdr[4] & HETHDR_FLAGS1_TAPEMARK)    /* If tapemark then */

  00138	b8 01 00 00 00	 mov	 eax, 1
  0013d	48 6b c0 04	 imul	 rax, rax, 4
  00141	0f b6 44 04 28	 movzx	 eax, BYTE PTR hdr$2[rsp+rax]
  00146	83 e0 40	 and	 eax, 64			; 00000040H
  00149	85 c0		 test	 eax, eax
  0014b	74 07		 je	 SHORT $LN7@gettapetyp

; 1152 :                     return -1;                          /* can't tell type. */

  0014d	b8 ff ff ff ff	 mov	 eax, -1
  00152	eb 3e		 jmp	 SHORT $LN1@gettapetyp
$LN7@gettapetyp:

; 1153 :                 if (hdr[4] & HETHDR_FLAGS1_COMPRESS ||  /* ZLIB or BZIP2 or */

  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	48 6b c0 04	 imul	 rax, rax, 4
  0015d	0f b6 44 04 28	 movzx	 eax, BYTE PTR hdr$2[rsp+rax]
  00162	83 e0 03	 and	 eax, 3
  00165	85 c0		 test	 eax, eax
  00167	75 17		 jne	 SHORT $LN10@gettapetyp
  00169	b8 01 00 00 00	 mov	 eax, 1
  0016e	48 6b c0 05	 imul	 rax, rax, 5
  00172	0f b6 44 04 28	 movzx	 eax, BYTE PTR hdr$2[rsp+rax]
  00177	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0017c	85 c0		 test	 eax, eax
  0017e	74 09		 je	 SHORT $LN8@gettapetyp
$LN10@gettapetyp:

; 1154 :                     hdr[5] & HETHDR_FLAGS2_COMPRESS)    /* Bus-Tech ZLIB?   */
; 1155 :                     return HETTAPE_FMTENTRY;            /* Then HET format. */

  00180	b8 01 00 00 00	 mov	 eax, 1
  00185	eb 0b		 jmp	 SHORT $LN1@gettapetyp
  00187	eb 04		 jmp	 SHORT $LN9@gettapetyp
$LN8@gettapetyp:

; 1156 :                 else
; 1157 :                     return AWSTAPE_FMTENTRY;            /* Else default AWS */

  00189	33 c0		 xor	 eax, eax
  0018b	eb 05		 jmp	 SHORT $LN1@gettapetyp
$LN9@gettapetyp:
$LN6@gettapetyp:
$LN3@gettapetyp:
$LN2@gettapetyp:

; 1158 :             }
; 1159 :         }
; 1160 :     }
; 1161 :     return -1;      /* -1 == "unable to determine" */

  0018d	b8 ff ff ff ff	 mov	 eax, -1
$LN1@gettapetyp:

; 1162 : 
; 1163 : } /* end function gettapetype_bydata */

  00192	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0019a	48 33 cc	 xor	 rcx, rsp
  0019d	e8 00 00 00 00	 call	 __security_check_cookie
  001a2	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  001a9	c3		 ret	 0
gettapetype_bydata ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
rc$ = 32
dev$ = 64
gettapetype_byname PROC

; 1003 : {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1004 : #if defined(HAVE_REGEX_H) || defined(HAVE_PCRE)
; 1005 :     regex_t     regwrk;                 /* REGEXP work area          */
; 1006 :     regmatch_t  regwrk2;                /* REGEXP match area         */
; 1007 :     char        errbfr[1024];           /* Working storage           */
; 1008 :     int         i;                      /* Loop control              */
; 1009 : #endif // HAVE_REGEX_H
; 1010 :     int         rc;                     /* various rtns return codes */
; 1011 : 
; 1012 :     /* Use the file name to determine the device type */
; 1013 : 
; 1014 : #if defined(HAVE_REGEX_H) || defined(HAVE_PCRE)
; 1015 : 
; 1016 :     for (i=0; i < (int) _countof( fmttab ); i++)
; 1017 :     {
; 1018 :         rc = regcomp (&regwrk, fmttab[i].fmtreg, REG_ICASE);
; 1019 :         if (rc < 0)
; 1020 :         {
; 1021 :             regerror (rc, &regwrk, errbfr, 1024);
; 1022 :             // "%1d:%04X Tape file '%s', type '%s': error in function '%s': '%s'"
; 1023 :             WRMSG(HHC00205, "E", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), "regcomp()", errbfr);
; 1024 :             return -1;
; 1025 :         }
; 1026 : 
; 1027 :         rc = regexec (&regwrk, dev->filename, 1, &regwrk2, 0);
; 1028 :         if (rc < 0)
; 1029 :         {
; 1030 :             regerror (rc, &regwrk, errbfr, 1024);
; 1031 :             regfree ( &regwrk );
; 1032 :             // "%1d:%04X Tape file '%s', type '%s': error in function '%s': '%s'"
; 1033 :             WRMSG(HHC00205, "E", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), "regexec()", errbfr);
; 1034 :             return -1;
; 1035 :         }
; 1036 : 
; 1037 :         regfree (&regwrk);
; 1038 : 
; 1039 :         if (rc == 0)  /* MATCH? */
; 1040 :             return i;
; 1041 : 
; 1042 :         ASSERT( rc == REG_NOMATCH );
; 1043 :     }
; 1044 : 
; 1045 : #else // !HAVE_REGEX_H
; 1046 : 
; 1047 :     if (1
; 1048 :         && (rc = strlen(dev->filename)) > 4
; 1049 :         && (rc = strcasecmp( &dev->filename[rc-4], ".aws" )) == 0

  00009	33 c0		 xor	 eax, eax
  0000b	83 f8 01	 cmp	 eax, 1
  0000e	74 56		 je	 SHORT $LN2@gettapetyp
  00010	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00015	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0001b	48 8b c8	 mov	 rcx, rax
  0001e	e8 00 00 00 00	 call	 strlen
  00023	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  00027	83 7c 24 20 04	 cmp	 DWORD PTR rc$[rsp], 4
  0002c	7e 38		 jle	 SHORT $LN2@gettapetyp
  0002e	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]
  00032	83 e8 04	 sub	 eax, 4
  00035	48 98		 cdqe
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0003c	48 8d 84 01 a4
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+164]
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169478
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00054	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  00058	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  0005d	75 07		 jne	 SHORT $LN2@gettapetyp

; 1050 :     )
; 1051 :     {
; 1052 :         return AWSTAPE_FMTENTRY;

  0005f	33 c0		 xor	 eax, eax
  00061	e9 21 02 00 00	 jmp	 $LN1@gettapetyp
$LN2@gettapetyp:

; 1053 :     }
; 1054 : 
; 1055 :     if (1
; 1056 :         && (rc = strlen(dev->filename)) > 4
; 1057 :         && (rc = strcasecmp( &dev->filename[rc-4], ".het" )) == 0

  00066	33 c0		 xor	 eax, eax
  00068	83 f8 01	 cmp	 eax, 1
  0006b	74 59		 je	 SHORT $LN3@gettapetyp
  0006d	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00072	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00078	48 8b c8	 mov	 rcx, rax
  0007b	e8 00 00 00 00	 call	 strlen
  00080	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  00084	83 7c 24 20 04	 cmp	 DWORD PTR rc$[rsp], 4
  00089	7e 3b		 jle	 SHORT $LN3@gettapetyp
  0008b	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]
  0008f	83 e8 04	 sub	 eax, 4
  00092	48 98		 cdqe
  00094	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00099	48 8d 84 01 a4
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+164]
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169480
  000a8	48 8b c8	 mov	 rcx, rax
  000ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000b1	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  000b5	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  000ba	75 0a		 jne	 SHORT $LN3@gettapetyp

; 1058 :     )
; 1059 :     {
; 1060 :         return HETTAPE_FMTENTRY;

  000bc	b8 01 00 00 00	 mov	 eax, 1
  000c1	e9 c1 01 00 00	 jmp	 $LN1@gettapetyp
$LN3@gettapetyp:

; 1061 :     }
; 1062 : 
; 1063 :     if (1
; 1064 :         && (rc = strlen(dev->filename)) > 4
; 1065 :         && (rc = strcasecmp( &dev->filename[rc-4], ".tdf" )) == 0

  000c6	33 c0		 xor	 eax, eax
  000c8	83 f8 01	 cmp	 eax, 1
  000cb	74 59		 je	 SHORT $LN4@gettapetyp
  000cd	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000d2	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  000d8	48 8b c8	 mov	 rcx, rax
  000db	e8 00 00 00 00	 call	 strlen
  000e0	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  000e4	83 7c 24 20 04	 cmp	 DWORD PTR rc$[rsp], 4
  000e9	7e 3b		 jle	 SHORT $LN4@gettapetyp
  000eb	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]
  000ef	83 e8 04	 sub	 eax, 4
  000f2	48 98		 cdqe
  000f4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  000f9	48 8d 84 01 a4
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+164]
  00101	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169482
  00108	48 8b c8	 mov	 rcx, rax
  0010b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00111	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  00115	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  0011a	75 0a		 jne	 SHORT $LN4@gettapetyp

; 1066 :     )
; 1067 :     {
; 1068 :         return OMATAPE_FMTENTRY;

  0011c	b8 02 00 00 00	 mov	 eax, 2
  00121	e9 61 01 00 00	 jmp	 $LN1@gettapetyp
$LN4@gettapetyp:

; 1069 :     }
; 1070 : 
; 1071 :     if (1
; 1072 :         && (rc = strlen(dev->filename)) > 4
; 1073 :         && (rc = strcasecmp( &dev->filename[rc-4], ".fkt" )) == 0

  00126	33 c0		 xor	 eax, eax
  00128	83 f8 01	 cmp	 eax, 1
  0012b	74 59		 je	 SHORT $LN5@gettapetyp
  0012d	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00132	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00138	48 8b c8	 mov	 rcx, rax
  0013b	e8 00 00 00 00	 call	 strlen
  00140	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  00144	83 7c 24 20 04	 cmp	 DWORD PTR rc$[rsp], 4
  00149	7e 3b		 jle	 SHORT $LN5@gettapetyp
  0014b	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]
  0014f	83 e8 04	 sub	 eax, 4
  00152	48 98		 cdqe
  00154	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00159	48 8d 84 01 a4
	00 00 00	 lea	 rax, QWORD PTR [rcx+rax+164]
  00161	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169484
  00168	48 8b c8	 mov	 rcx, rax
  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00171	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  00175	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  0017a	75 0a		 jne	 SHORT $LN5@gettapetyp

; 1074 :     )
; 1075 :     {
; 1076 :         return FAKETAPE_FMTENTRY;

  0017c	b8 03 00 00 00	 mov	 eax, 3
  00181	e9 01 01 00 00	 jmp	 $LN1@gettapetyp
$LN5@gettapetyp:

; 1077 :     }
; 1078 : 
; 1079 : #if defined(OPTION_SCSI_TAPE)
; 1080 :     if (1
; 1081 :         && (rc = strlen(dev->filename)) > 5
; 1082 :         && (rc = strncasecmp( dev->filename, "/dev/", 5 )) == 0

  00186	33 c0		 xor	 eax, eax
  00188	83 f8 01	 cmp	 eax, 1
  0018b	0f 84 ae 00 00
	00		 je	 $LN6@gettapetyp
  00191	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00196	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0019c	48 8b c8	 mov	 rcx, rax
  0019f	e8 00 00 00 00	 call	 strlen
  001a4	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  001a8	83 7c 24 20 05	 cmp	 DWORD PTR rc$[rsp], 5
  001ad	0f 8e 8c 00 00
	00		 jle	 $LN6@gettapetyp
  001b3	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  001b8	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  001be	41 b8 05 00 00
	00		 mov	 r8d, 5
  001c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169486
  001cb	48 8b c8	 mov	 rcx, rax
  001ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  001d4	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
  001d8	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  001dd	75 60		 jne	 SHORT $LN6@gettapetyp

; 1083 :     )
; 1084 :     {
; 1085 :         if (strncasecmp( dev->filename+5, "st", 2 ) == 0)

  001df	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  001e4	48 05 a9 00 00
	00		 add	 rax, 169		; 000000a9H
  001ea	41 b8 02 00 00
	00		 mov	 r8d, 2
  001f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169489
  001f7	48 8b c8	 mov	 rcx, rax
  001fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  00200	85 c0		 test	 eax, eax
  00202	75 1b		 jne	 SHORT $LN7@gettapetyp

; 1086 :             dev->stape_close_rewinds = 1; // (rewind at close)

  00204	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00209	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  0020f	83 c8 01	 or	 eax, 1
  00212	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00217	89 81 98 10 00
	00		 mov	 DWORD PTR [rcx+4248], eax
  0021d	eb 19		 jmp	 SHORT $LN8@gettapetyp
$LN7@gettapetyp:

; 1087 :         else
; 1088 :             dev->stape_close_rewinds = 0; // (otherwise don't)

  0021f	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00224	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  0022a	83 e0 fe	 and	 eax, -2			; fffffffeH
  0022d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00232	89 81 98 10 00
	00		 mov	 DWORD PTR [rcx+4248], eax
$LN8@gettapetyp:

; 1089 : 
; 1090 :         return SCSITAPE_FMTENTRY;

  00238	b8 05 00 00 00	 mov	 eax, 5
  0023d	eb 48		 jmp	 SHORT $LN1@gettapetyp
$LN6@gettapetyp:

; 1091 :     }
; 1092 : #if defined(_MSVC_)
; 1093 :     if (1
; 1094 :         && strncasecmp(dev->filename, "\\\\.\\", 4) == 0
; 1095 :         &&           *(dev->filename        +    4) != 0

  0023f	33 c0		 xor	 eax, eax
  00241	83 f8 01	 cmp	 eax, 1
  00244	74 3c		 je	 SHORT $LN9@gettapetyp
  00246	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0024b	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00251	41 b8 04 00 00
	00		 mov	 r8d, 4
  00257	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169491
  0025e	48 8b c8	 mov	 rcx, rax
  00261	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  00267	85 c0		 test	 eax, eax
  00269	75 17		 jne	 SHORT $LN9@gettapetyp
  0026b	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00270	0f be 80 a8 00
	00 00		 movsx	 eax, BYTE PTR [rax+168]
  00277	85 c0		 test	 eax, eax
  00279	74 07		 je	 SHORT $LN9@gettapetyp

; 1096 :     )
; 1097 :     {
; 1098 :         return SCSITAPE_FMTENTRY;

  0027b	b8 05 00 00 00	 mov	 eax, 5
  00280	eb 05		 jmp	 SHORT $LN1@gettapetyp
$LN9@gettapetyp:

; 1099 :     }
; 1100 : #endif // _MSVC_
; 1101 : #endif // OPTION_SCSI_TAPE
; 1102 : #endif // HAVE_REGEX_H
; 1103 : 
; 1104 :     return -1;      /* -1 == "unable to determine" */

  00282	b8 ff ff ff ff	 mov	 eax, -1
$LN1@gettapetyp:

; 1105 : 
; 1106 : } /* end function gettapetype_byname */

  00287	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0028b	c3		 ret	 0
gettapetype_byname ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
i$ = 96
i2$1 = 100
tv150 = 104
tv156 = 108
tv221 = 112
tv227 = 116
tv138 = 120
tv139 = 128
tv140 = 136
tv141 = 144
tv142 = 152
tv143 = 160
tv209 = 168
tv210 = 176
tv211 = 184
tv212 = 192
tv213 = 200
tv214 = 208
tv238 = 216
tv84 = 224
tv145 = 232
descr$ = 240
tv216 = 248
dev$ = 272
short_descr$ = 280
gettapetype PROC

; 1172 : {

$LN43:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H

; 1173 :     char*       descr;                  /* Device descr from fmttab  */
; 1174 :     int         i;                      /* fmttab entry#             */
; 1175 : 
; 1176 :     i = gettapetype_byname( dev );      /* Get type based on name    */

  00011	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00019	e8 00 00 00 00	 call	 gettapetype_byname
  0001e	89 44 24 60	 mov	 DWORD PTR i$[rsp], eax

; 1177 : 
; 1178 : #if defined(OPTION_SCSI_TAPE)
; 1179 :     if (i != SCSITAPE_FMTENTRY)         /* If not SCSI tape...       */

  00022	83 7c 24 60 05	 cmp	 DWORD PTR i$[rsp], 5
  00027	74 5a		 je	 SHORT $LN2@gettapetyp

; 1180 : #endif
; 1181 :     {
; 1182 :         if ( !strcasecmp( dev->filename, TAPE_UNLOADED ) )

  00029	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00031	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169520
  0003e	48 8b c8	 mov	 rcx, rax
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00047	85 c0		 test	 eax, eax
  00049	75 0a		 jne	 SHORT $LN3@gettapetyp

; 1183 :         {
; 1184 :             i = DEFAULT_FMTENTRY;

  0004b	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 1185 :         }

  00053	eb 2e		 jmp	 SHORT $LN4@gettapetyp
$LN3@gettapetyp:

; 1186 :         else
; 1187 :         {
; 1188 :             int i2 = gettapetype_bydata( dev ); // Get type based on data..

  00055	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0005d	e8 00 00 00 00	 call	 gettapetype_bydata
  00062	89 44 24 64	 mov	 DWORD PTR i2$1[rsp], eax

; 1189 : 
; 1190 :             if (i2 >= 0 &&                      // If valid type by data, AND

  00066	83 7c 24 64 00	 cmp	 DWORD PTR i2$1[rsp], 0
  0006b	7c 16		 jl	 SHORT $LN5@gettapetyp
  0006d	83 7c 24 64 00	 cmp	 DWORD PTR i2$1[rsp], 0
  00072	75 07		 jne	 SHORT $LN6@gettapetyp
  00074	83 7c 24 60 01	 cmp	 DWORD PTR i$[rsp], 1
  00079	74 08		 je	 SHORT $LN5@gettapetyp
$LN6@gettapetyp:

; 1191 :                 ( i2 != AWSTAPE_FMTENTRY ||     // *not* AWS by data (or if it
; 1192 :                   i  != HETTAPE_FMTENTRY )      // is, if it's not HET by name)..
; 1193 :                )
; 1194 :                 i = i2;                         // ..Use type based on data.

  0007b	8b 44 24 64	 mov	 eax, DWORD PTR i2$1[rsp]
  0007f	89 44 24 60	 mov	 DWORD PTR i$[rsp], eax
$LN5@gettapetyp:
$LN4@gettapetyp:
$LN2@gettapetyp:

; 1195 :         }
; 1196 :     }
; 1197 : 
; 1198 :     /* If file type still unknown, use a reasonable default value... */
; 1199 :     if (i < 0)

  00083	83 7c 24 60 00	 cmp	 DWORD PTR i$[rsp], 0
  00088	0f 8d 78 02 00
	00		 jge	 $LN7@gettapetyp

; 1200 :     {
; 1201 :         i = DEFAULT_FMTENTRY;

  0008e	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 1202 :         if (strcmp (dev->filename, TAPE_UNLOADED) != 0)

  00096	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0009e	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169525
  000ab	48 8b c8	 mov	 rcx, rax
  000ae	e8 00 00 00 00	 call	 strcmp
  000b3	85 c0		 test	 eax, eax
  000b5	0f 84 4b 02 00
	00		 je	 $LN8@gettapetyp

; 1203 :         {
; 1204 :             // "%1d:%04X Tape file '%s', type '%s': format type is not determinable, presumed '%s'"
; 1205 :             WRMSG(HHC00220, "W", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), fmttab[i].short_descr );

  000bb	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000c3	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  000ca	83 f8 01	 cmp	 eax, 1
  000cd	75 14		 jne	 SHORT $LN21@gettapetyp
  000cf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169526
  000d6	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv143[rsp], rax
  000de	e9 15 01 00 00	 jmp	 $LN22@gettapetyp
$LN21@gettapetyp:
  000e3	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000eb	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  000f2	83 f8 02	 cmp	 eax, 2
  000f5	75 14		 jne	 SHORT $LN19@gettapetyp
  000f7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169527
  000fe	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv142[rsp], rax
  00106	e9 dd 00 00 00	 jmp	 $LN20@gettapetyp
$LN19@gettapetyp:
  0010b	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00113	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0011a	83 f8 03	 cmp	 eax, 3
  0011d	75 14		 jne	 SHORT $LN17@gettapetyp
  0011f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169528
  00126	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv141[rsp], rax
  0012e	e9 a5 00 00 00	 jmp	 $LN18@gettapetyp
$LN17@gettapetyp:
  00133	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0013b	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00142	83 f8 04	 cmp	 eax, 4
  00145	75 11		 jne	 SHORT $LN15@gettapetyp
  00147	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169529
  0014e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv140[rsp], rax
  00156	eb 70		 jmp	 SHORT $LN16@gettapetyp
$LN15@gettapetyp:
  00158	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00160	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00167	83 f8 05	 cmp	 eax, 5
  0016a	75 11		 jne	 SHORT $LN13@gettapetyp
  0016c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169530
  00173	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv139[rsp], rax
  0017b	eb 3b		 jmp	 SHORT $LN14@gettapetyp
$LN13@gettapetyp:
  0017d	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00185	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0018c	83 f8 06	 cmp	 eax, 6
  0018f	75 0e		 jne	 SHORT $LN11@gettapetyp
  00191	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169531
  00198	48 89 44 24 78	 mov	 QWORD PTR tv138[rsp], rax
  0019d	eb 0c		 jmp	 SHORT $LN12@gettapetyp
$LN11@gettapetyp:
  0019f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169532
  001a6	48 89 44 24 78	 mov	 QWORD PTR tv138[rsp], rax
$LN12@gettapetyp:
  001ab	48 8b 44 24 78	 mov	 rax, QWORD PTR tv138[rsp]
  001b0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv139[rsp], rax
$LN14@gettapetyp:
  001b8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv139[rsp]
  001c0	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv140[rsp], rax
$LN16@gettapetyp:
  001c8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv140[rsp]
  001d0	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv141[rsp], rax
$LN18@gettapetyp:
  001d8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv141[rsp]
  001e0	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv142[rsp], rax
$LN20@gettapetyp:
  001e8	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv142[rsp]
  001f0	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv143[rsp], rax
$LN22@gettapetyp:
  001f8	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00201	74 12		 je	 SHORT $LN23@gettapetyp
  00203	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0020b	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0020f	89 44 24 68	 mov	 DWORD PTR tv150[rsp], eax
  00213	eb 08		 jmp	 SHORT $LN24@gettapetyp
$LN23@gettapetyp:
  00215	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv150[rsp], 0
$LN24@gettapetyp:
  0021d	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00226	74 14		 je	 SHORT $LN25@gettapetyp
  00228	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00230	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00234	d1 f8		 sar	 eax, 1
  00236	89 44 24 6c	 mov	 DWORD PTR tv156[rsp], eax
  0023a	eb 08		 jmp	 SHORT $LN26@gettapetyp
$LN25@gettapetyp:
  0023c	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv156[rsp], 0
$LN26@gettapetyp:
  00244	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00249	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0024d	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv84[rsp], rax
  00255	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:fmttab
  0025c	48 89 8c 24 d8
	00 00 00	 mov	 QWORD PTR tv238[rsp], rcx
  00264	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0026c	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  00273	48 89 94 24 e8
	00 00 00	 mov	 QWORD PTR tv145[rsp], rdx
  0027b	b9 01 00 00 00	 mov	 ecx, 1
  00280	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00286	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tv238[rsp]
  0028e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv84[rsp]
  00296	48 8b 4c 0a 20	 mov	 rcx, QWORD PTR [rdx+rcx+32]
  0029b	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  002a0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv143[rsp]
  002a8	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  002ad	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv145[rsp]
  002b5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002ba	8b 4c 24 68	 mov	 ecx, DWORD PTR tv150[rsp]
  002be	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002c2	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv156[rsp]
  002c6	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169533
  002d1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169534
  002dd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002e2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e7	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169535
  002f4	ba b5 04 00 00	 mov	 edx, 1205		; 000004b5H
  002f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169536
  00300	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN8@gettapetyp:
$LN7@gettapetyp:

; 1206 :         }
; 1207 :     }
; 1208 : 
; 1209 :     dev->tapedevt = fmttab[i].fmtcode;

  00306	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  0030b	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0030f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:fmttab
  00316	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0031e	0f b6 44 01 08	 movzx	 eax, BYTE PTR [rcx+rax+8]
  00323	88 82 dc 10 00
	00		 mov	 BYTE PTR [rdx+4316], al

; 1210 :     dev->tmh      = fmttab[i].tmh;

  00329	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  0032e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00332	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:fmttab
  00339	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00341	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  00346	48 89 82 e0 10
	00 00		 mov	 QWORD PTR [rdx+4320], rax

; 1211 :     descr         = fmttab[i].descr;

  0034d	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00352	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00356	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:fmttab
  0035d	48 8b 44 01 18	 mov	 rax, QWORD PTR [rcx+rax+24]
  00362	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR descr$[rsp], rax

; 1212 :     *short_descr  = fmttab[i].short_descr;

  0036a	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  0036f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00373	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:fmttab
  0037a	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR short_descr$[rsp]
  00382	48 8b 44 01 20	 mov	 rax, QWORD PTR [rcx+rax+32]
  00387	48 89 02	 mov	 QWORD PTR [rdx], rax

; 1213 : 
; 1214 :     if (strcmp (dev->filename, TAPE_UNLOADED) != 0)

  0038a	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00392	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00398	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169538
  0039f	48 8b c8	 mov	 rcx, rax
  003a2	e8 00 00 00 00	 call	 strcmp
  003a7	85 c0		 test	 eax, eax
  003a9	0f 84 26 02 00
	00		 je	 $LN9@gettapetyp

; 1215 :     {
; 1216 :         // "%1d:%04X Tape file '%s', type '%s': format type '%s'"
; 1217 :         WRMSG(HHC00221, "I", LCSS_DEVNUM, dev->filename, TTYPSTR(dev->tapedevt), descr);

  003af	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003b7	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  003be	83 f8 01	 cmp	 eax, 1
  003c1	75 14		 jne	 SHORT $LN37@gettapetyp
  003c3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169539
  003ca	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv214[rsp], rax
  003d2	e9 1e 01 00 00	 jmp	 $LN38@gettapetyp
$LN37@gettapetyp:
  003d7	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003df	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  003e6	83 f8 02	 cmp	 eax, 2
  003e9	75 14		 jne	 SHORT $LN35@gettapetyp
  003eb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169540
  003f2	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv213[rsp], rax
  003fa	e9 e6 00 00 00	 jmp	 $LN36@gettapetyp
$LN35@gettapetyp:
  003ff	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00407	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0040e	83 f8 03	 cmp	 eax, 3
  00411	75 14		 jne	 SHORT $LN33@gettapetyp
  00413	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169541
  0041a	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv212[rsp], rax
  00422	e9 ae 00 00 00	 jmp	 $LN34@gettapetyp
$LN33@gettapetyp:
  00427	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0042f	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00436	83 f8 04	 cmp	 eax, 4
  00439	75 11		 jne	 SHORT $LN31@gettapetyp
  0043b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169542
  00442	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv211[rsp], rax
  0044a	eb 79		 jmp	 SHORT $LN32@gettapetyp
$LN31@gettapetyp:
  0044c	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00454	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0045b	83 f8 05	 cmp	 eax, 5
  0045e	75 11		 jne	 SHORT $LN29@gettapetyp
  00460	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169543
  00467	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv210[rsp], rax
  0046f	eb 44		 jmp	 SHORT $LN30@gettapetyp
$LN29@gettapetyp:
  00471	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00479	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00480	83 f8 06	 cmp	 eax, 6
  00483	75 11		 jne	 SHORT $LN27@gettapetyp
  00485	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169544
  0048c	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv209[rsp], rax
  00494	eb 0f		 jmp	 SHORT $LN28@gettapetyp
$LN27@gettapetyp:
  00496	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169545
  0049d	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv209[rsp], rax
$LN28@gettapetyp:
  004a5	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv209[rsp]
  004ad	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv210[rsp], rax
$LN30@gettapetyp:
  004b5	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv210[rsp]
  004bd	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv211[rsp], rax
$LN32@gettapetyp:
  004c5	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv211[rsp]
  004cd	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv212[rsp], rax
$LN34@gettapetyp:
  004d5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tv212[rsp]
  004dd	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv213[rsp], rax
$LN36@gettapetyp:
  004e5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv213[rsp]
  004ed	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv214[rsp], rax
$LN38@gettapetyp:
  004f5	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  004fe	74 12		 je	 SHORT $LN39@gettapetyp
  00500	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00508	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0050c	89 44 24 70	 mov	 DWORD PTR tv221[rsp], eax
  00510	eb 08		 jmp	 SHORT $LN40@gettapetyp
$LN39@gettapetyp:
  00512	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv221[rsp], 0
$LN40@gettapetyp:
  0051a	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00523	74 14		 je	 SHORT $LN41@gettapetyp
  00525	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0052d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00531	d1 f8		 sar	 eax, 1
  00533	89 44 24 74	 mov	 DWORD PTR tv227[rsp], eax
  00537	eb 08		 jmp	 SHORT $LN42@gettapetyp
$LN41@gettapetyp:
  00539	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv227[rsp], 0
$LN42@gettapetyp:
  00541	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00549	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0054f	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv216[rsp], rax
  00557	b9 01 00 00 00	 mov	 ecx, 1
  0055c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00562	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  0056a	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0056f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv214[rsp]
  00577	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0057c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv216[rsp]
  00584	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00589	8b 4c 24 70	 mov	 ecx, DWORD PTR tv221[rsp]
  0058d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00591	8b 4c 24 74	 mov	 ecx, DWORD PTR tv227[rsp]
  00595	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00599	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169546
  005a0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169547
  005ac	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005b1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005b6	41 b9 03 00 00
	00		 mov	 r9d, 3
  005bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169548
  005c3	ba c1 04 00 00	 mov	 edx, 1217		; 000004c1H
  005c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169549
  005cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN9@gettapetyp:

; 1218 :     }
; 1219 : 
; 1220 :     return 0;   // (success)

  005d5	33 c0		 xor	 eax, eax

; 1221 : 
; 1222 : } /* end function gettapetype */

  005d7	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  005de	c3		 ret	 0
gettapetype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
rc$1 = 32
rc$ = 36
dev$ = 40
db$ = 64
autoload_wait_for_tapemount_thread PROC

; 2651 : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2652 : int      rc   =  -1;

  00009	c7 44 24 24 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 2653 : DEVBLK  *dev  =  (DEVBLK*) db;

  00011	48 8b 44 24 40	 mov	 rax, QWORD PTR db$[rsp]
  00016	48 89 44 24 28	 mov	 QWORD PTR dev$[rsp], rax

; 2654 : 
; 2655 :     obtain_lock(&dev->lock);

  0001b	48 8b 44 24 28	 mov	 rax, QWORD PTR dev$[rsp]
  00020	48 83 c0 38	 add	 rax, 56			; 00000038H
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170576
  0002b	48 8b c8	 mov	 rcx, rax
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock
$LN2@autoload_w:

; 2656 :     {
; 2657 :         while
; 2658 :         (
; 2659 :             dev->als
; 2660 :             &&

  00034	48 8b 44 24 28	 mov	 rax, QWORD PTR dev$[rsp]
  00039	48 83 b8 e8 10
	00 00 00	 cmp	 QWORD PTR [rax+4328], 0
  00041	74 7e		 je	 SHORT $LN3@autoload_w
  00043	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dev$[rsp]
  00048	e8 00 00 00 00	 call	 autoload_mount_next
  0004d	89 44 24 24	 mov	 DWORD PTR rc$[rsp], eax
  00051	83 7c 24 24 00	 cmp	 DWORD PTR rc$[rsp], 0
  00056	74 69		 je	 SHORT $LN3@autoload_w

; 2661 :             (rc = autoload_mount_next( dev )) != 0
; 2662 :         )
; 2663 :         {
; 2664 :             release_lock( &dev->lock );

  00058	48 8b 44 24 28	 mov	 rax, QWORD PTR dev$[rsp]
  0005d	48 83 c0 38	 add	 rax, 56			; 00000038H
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170577
  00068	48 8b c8	 mov	 rcx, rax
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock
$LN6@autoload_w:

; 2665 :             SLEEP(AUTOLOAD_WAIT_FOR_TAPEMOUNT_INTERVAL_SECS);

  00071	c7 44 24 20 05
	00 00 00	 mov	 DWORD PTR rc$1[rsp], 5
$LN7@autoload_w:
  00079	83 7c 24 20 00	 cmp	 DWORD PTR rc$1[rsp], 0
  0007e	74 1d		 je	 SHORT $LN8@autoload_w
  00080	8b 4c 24 20	 mov	 ecx, DWORD PTR rc$1[rsp]
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sleep
  0008a	89 44 24 20	 mov	 DWORD PTR rc$1[rsp], eax
  0008e	83 7c 24 20 00	 cmp	 DWORD PTR rc$1[rsp], 0
  00093	74 06		 je	 SHORT $LN9@autoload_w
  00095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sched_yield
$LN9@autoload_w:
  0009b	eb dc		 jmp	 SHORT $LN7@autoload_w
$LN8@autoload_w:
  0009d	33 c0		 xor	 eax, eax
  0009f	85 c0		 test	 eax, eax
  000a1	75 ce		 jne	 SHORT $LN6@autoload_w

; 2666 :             obtain_lock( &dev->lock );

  000a3	48 8b 44 24 28	 mov	 rax, QWORD PTR dev$[rsp]
  000a8	48 83 c0 38	 add	 rax, 56			; 00000038H
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170579
  000b3	48 8b c8	 mov	 rcx, rax
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 2667 :         }

  000bc	e9 73 ff ff ff	 jmp	 $LN2@autoload_w
$LN3@autoload_w:

; 2668 :     }
; 2669 :     release_lock(&dev->lock);

  000c1	48 8b 44 24 28	 mov	 rax, QWORD PTR dev$[rsp]
  000c6	48 83 c0 38	 add	 rax, 56			; 00000038H
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170580
  000d1	48 8b c8	 mov	 rcx, rax
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 2670 :     if ( rc == 0 )

  000da	83 7c 24 24 00	 cmp	 DWORD PTR rc$[rsp], 0
  000df	75 0d		 jne	 SHORT $LN10@autoload_w

; 2671 :         device_attention(dev,CSW_DE);

  000e1	b2 04		 mov	 dl, 4
  000e3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dev$[rsp]
  000e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_device_attention
$LN10@autoload_w:

; 2672 :     return NULL;

  000ee	33 c0		 xor	 eax, eax

; 2673 : 
; 2674 : } /* end function autoload_wait_for_tapemount_thread */

  000f0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f4	c3		 ret	 0
autoload_wait_for_tapemount_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
i$ = 32
argc$ = 36
rc$ = 40
argv$ = 48
dev$ = 80
alix$ = 88
autoload_mount_tape PROC

; 2716 : {

$LN16:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2717 : int     argc, i, rc;
; 2718 : char  **argv;
; 2719 : 
; 2720 :     if (alix >= dev->alss)

  0000d	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  00012	8b 80 f0 10 00
	00		 mov	 eax, DWORD PTR [rax+4336]
  00018	39 44 24 58	 cmp	 DWORD PTR alix$[rsp], eax
  0001c	7c 0a		 jl	 SHORT $LN11@autoload_m

; 2721 :         return -1;

  0001e	b8 ff ff ff ff	 mov	 eax, -1
  00023	e9 d9 01 00 00	 jmp	 $LN1@autoload_m
$LN11@autoload_m:

; 2722 : 
; 2723 :     argc = 1 + dev->al_argc + dev->als[ alix ].argc;

  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  0002d	8b 80 00 11 00
	00		 mov	 eax, DWORD PTR [rax+4352]
  00033	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR alix$[rsp]
  00038	48 6b c9 18	 imul	 rcx, rcx, 24
  0003c	48 8b 54 24 50	 mov	 rdx, QWORD PTR dev$[rsp]
  00041	48 8b 92 e8 10
	00 00		 mov	 rdx, QWORD PTR [rdx+4328]
  00048	8b 4c 0a 08	 mov	 ecx, DWORD PTR [rdx+rcx+8]
  0004c	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00050	89 44 24 24	 mov	 DWORD PTR argc$[rsp], eax

; 2724 :     argv = calloc( argc, sizeof(BYTE*) );

  00054	48 63 44 24 24	 movsxd	 rax, DWORD PTR argc$[rsp]
  00059	ba 08 00 00 00	 mov	 edx, 8
  0005e	48 8b c8	 mov	 rcx, rax
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00067	48 89 44 24 30	 mov	 QWORD PTR argv$[rsp], rax

; 2725 :     if (!argv) return -1;

  0006c	48 83 7c 24 30
	00		 cmp	 QWORD PTR argv$[rsp], 0
  00072	75 0a		 jne	 SHORT $LN12@autoload_m
  00074	b8 ff ff ff ff	 mov	 eax, -1
  00079	e9 83 01 00 00	 jmp	 $LN1@autoload_m
$LN12@autoload_m:

; 2726 :     argv[0] = dev->als[ alix ].filename;

  0007e	48 63 44 24 58	 movsxd	 rax, DWORD PTR alix$[rsp]
  00083	48 6b c0 18	 imul	 rax, rax, 24
  00087	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  0008c	48 8b 89 e8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4328]
  00093	ba 08 00 00 00	 mov	 edx, 8
  00098	48 6b d2 00	 imul	 rdx, rdx, 0
  0009c	4c 8b 44 24 30	 mov	 r8, QWORD PTR argv$[rsp]
  000a1	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000a5	49 89 04 10	 mov	 QWORD PTR [r8+rdx], rax

; 2727 : 
; 2728 :     for (i=0, argc=1; i < dev->al_argc; i++, argc++)

  000a9	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000b1	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR argc$[rsp], 1
  000b9	eb 14		 jmp	 SHORT $LN4@autoload_m
$LN2@autoload_m:
  000bb	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000bf	ff c0		 inc	 eax
  000c1	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  000c5	8b 44 24 24	 mov	 eax, DWORD PTR argc$[rsp]
  000c9	ff c0		 inc	 eax
  000cb	89 44 24 24	 mov	 DWORD PTR argc$[rsp], eax
$LN4@autoload_m:
  000cf	48 8b 44 24 50	 mov	 rax, QWORD PTR dev$[rsp]
  000d4	8b 80 00 11 00
	00		 mov	 eax, DWORD PTR [rax+4352]
  000da	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  000de	7d 3e		 jge	 SHORT $LN3@autoload_m

; 2729 :     {
; 2730 :         argv[ argc ] = strdup( dev->al_argv[i] );

  000e0	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000e5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  000ea	48 8b 89 f8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4344]
  000f1	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000fb	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR argc$[rsp]
  00100	48 8b 54 24 30	 mov	 rdx, QWORD PTR argv$[rsp]
  00105	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 2731 :         if (!argv[ argc ]) break;

  00109	48 63 44 24 24	 movsxd	 rax, DWORD PTR argc$[rsp]
  0010e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR argv$[rsp]
  00113	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00118	75 02		 jne	 SHORT $LN13@autoload_m
  0011a	eb 02		 jmp	 SHORT $LN3@autoload_m
$LN13@autoload_m:

; 2732 :     }

  0011c	eb 9d		 jmp	 SHORT $LN2@autoload_m
$LN3@autoload_m:

; 2733 : 
; 2734 :     for (i=0; i < dev->als[ alix ].argc; i++, argc++)

  0011e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00126	eb 14		 jmp	 SHORT $LN7@autoload_m
$LN5@autoload_m:
  00128	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0012c	ff c0		 inc	 eax
  0012e	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  00132	8b 44 24 24	 mov	 eax, DWORD PTR argc$[rsp]
  00136	ff c0		 inc	 eax
  00138	89 44 24 24	 mov	 DWORD PTR argc$[rsp], eax
$LN7@autoload_m:
  0013c	48 63 44 24 58	 movsxd	 rax, DWORD PTR alix$[rsp]
  00141	48 6b c0 18	 imul	 rax, rax, 24
  00145	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  0014a	48 8b 89 e8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4328]
  00151	8b 44 01 08	 mov	 eax, DWORD PTR [rcx+rax+8]
  00155	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00159	7d 4c		 jge	 SHORT $LN6@autoload_m

; 2735 :     {
; 2736 :         argv[ argc ] = strdup( dev->als[ alix ].argv[i] );

  0015b	48 63 44 24 58	 movsxd	 rax, DWORD PTR alix$[rsp]
  00160	48 6b c0 18	 imul	 rax, rax, 24
  00164	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  00169	48 8b 89 e8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4328]
  00170	48 63 54 24 20	 movsxd	 rdx, DWORD PTR i$[rsp]
  00175	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  0017a	48 8b 0c d0	 mov	 rcx, QWORD PTR [rax+rdx*8]
  0017e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00184	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR argc$[rsp]
  00189	48 8b 54 24 30	 mov	 rdx, QWORD PTR argv$[rsp]
  0018e	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 2737 :         if (!argv[ argc ]) break;

  00192	48 63 44 24 24	 movsxd	 rax, DWORD PTR argc$[rsp]
  00197	48 8b 4c 24 30	 mov	 rcx, QWORD PTR argv$[rsp]
  0019c	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  001a1	75 02		 jne	 SHORT $LN14@autoload_m
  001a3	eb 02		 jmp	 SHORT $LN6@autoload_m
$LN14@autoload_m:

; 2738 :     }

  001a5	eb 81		 jmp	 SHORT $LN5@autoload_m
$LN6@autoload_m:

; 2739 : 
; 2740 :     rc = mountnewtape( dev, argc, argv );

  001a7	4c 8b 44 24 30	 mov	 r8, QWORD PTR argv$[rsp]
  001ac	8b 54 24 24	 mov	 edx, DWORD PTR argc$[rsp]
  001b0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dev$[rsp]
  001b5	e8 00 00 00 00	 call	 mountnewtape
  001ba	89 44 24 28	 mov	 DWORD PTR rc$[rsp], eax

; 2741 : 
; 2742 :     for (i=1; i < argc; i++)

  001be	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  001c6	eb 0a		 jmp	 SHORT $LN10@autoload_m
$LN8@autoload_m:
  001c8	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  001cc	ff c0		 inc	 eax
  001ce	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN10@autoload_m:
  001d2	8b 44 24 24	 mov	 eax, DWORD PTR argc$[rsp]
  001d6	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  001da	7d 16		 jge	 SHORT $LN9@autoload_m

; 2743 :         free( argv[i] );

  001dc	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001e1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR argv$[rsp]
  001e6	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  001f0	eb d6		 jmp	 SHORT $LN8@autoload_m
$LN9@autoload_m:

; 2744 :     free( argv );

  001f2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR argv$[rsp]
  001f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2745 : 
; 2746 :     return rc;

  001fd	8b 44 24 28	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@autoload_m:

; 2747 : 
; 2748 : } /* end function autoload_mount_tape */

  00201	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00205	c3		 ret	 0
autoload_mount_tape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
i$ = 80
als$1 = 88
tae$ = 96
dev$ = 160
argc$ = 168
argv$ = 176
autoload_tape_entry PROC

; 2595 : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	56		 push	 rsi
  0000f	57		 push	 rdi
  00010	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 2596 : int                i;
; 2597 : TAPEAUTOLOADENTRY  tae;
; 2598 : 
; 2599 :     if (dev->alss >= AUTOLOADER_MAX)

  00017	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0001f	81 b8 f0 10 00
	00 00 01 00 00	 cmp	 DWORD PTR [rax+4336], 256 ; 00000100H
  00029	7c 05		 jl	 SHORT $LN5@autoload_t

; 2600 :         return;

  0002b	e9 51 02 00 00	 jmp	 $LN1@autoload_t
$LN5@autoload_t:

; 2601 : 
; 2602 :     if (!dev->als)

  00030	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00038	48 83 b8 e8 10
	00 00 00	 cmp	 QWORD PTR [rax+4328], 0
  00040	75 4a		 jne	 SHORT $LN6@autoload_t

; 2603 :     {
; 2604 :         dev->als  = calloc( 1, sizeof(tae) );

  00042	ba 18 00 00 00	 mov	 edx, 24
  00047	b9 01 00 00 00	 mov	 ecx, 1
  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00052	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0005a	48 89 81 e8 10
	00 00		 mov	 QWORD PTR [rcx+4328], rax

; 2605 :         dev->alss = 0;

  00061	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00069	c7 80 f0 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4336], 0

; 2606 :         if (!dev->als) return;

  00073	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007b	48 83 b8 e8 10
	00 00 00	 cmp	 QWORD PTR [rax+4328], 0
  00083	75 05		 jne	 SHORT $LN8@autoload_t
  00085	e9 f7 01 00 00	 jmp	 $LN1@autoload_t
$LN8@autoload_t:

; 2607 :     }

  0008a	eb 54		 jmp	 SHORT $LN7@autoload_t
$LN6@autoload_t:

; 2608 :     else
; 2609 :     {
; 2610 :         TAPEAUTOLOADENTRY *als = (TAPEAUTOLOADENTRY*)

  0008c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00094	8b 80 f0 10 00
	00		 mov	 eax, DWORD PTR [rax+4336]
  0009a	ff c0		 inc	 eax
  0009c	48 98		 cdqe
  0009e	48 6b c0 18	 imul	 rax, rax, 24
  000a2	48 8b d0	 mov	 rdx, rax
  000a5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ad	48 8b 88 e8 10
	00 00		 mov	 rcx, QWORD PTR [rax+4328]
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_realloc
  000ba	48 89 44 24 58	 mov	 QWORD PTR als$1[rsp], rax

; 2611 :             realloc( dev->als, (dev->alss + 1) * sizeof(tae) );
; 2612 :         if (!als) return;

  000bf	48 83 7c 24 58
	00		 cmp	 QWORD PTR als$1[rsp], 0
  000c5	75 05		 jne	 SHORT $LN9@autoload_t
  000c7	e9 b5 01 00 00	 jmp	 $LN1@autoload_t
$LN9@autoload_t:

; 2613 :         dev->als = als;

  000cc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000d4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR als$1[rsp]
  000d9	48 89 88 e8 10
	00 00		 mov	 QWORD PTR [rax+4328], rcx
$LN7@autoload_t:

; 2614 :     }
; 2615 : 
; 2616 :     tae.argc = 0;

  000e0	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tae$[rsp+8], 0

; 2617 :     tae.argv = NULL;

  000e8	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tae$[rsp+16], 0

; 2618 :     tae.filename = strdup( argv[0] );

  000f1	b8 08 00 00 00	 mov	 eax, 8
  000f6	48 6b c0 00	 imul	 rax, rax, 0
  000fa	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00102	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0010c	48 89 44 24 60	 mov	 QWORD PTR tae$[rsp], rax

; 2619 :     if (!tae.filename) return;

  00111	48 83 7c 24 60
	00		 cmp	 QWORD PTR tae$[rsp], 0
  00117	75 05		 jne	 SHORT $LN10@autoload_t
  00119	e9 63 01 00 00	 jmp	 $LN1@autoload_t
$LN10@autoload_t:

; 2620 : 
; 2621 :     // "Tape autoloader: adding '%s' value '%s'"
; 2622 :     WRMSG( HHC00229, "I", "tape entry", tae.filename );

  0011e	b9 01 00 00 00	 mov	 ecx, 1
  00123	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00129	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tae$[rsp]
  0012e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170553
  0013a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0013f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170554
  00146	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0014b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170555
  00152	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00157	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0015c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00162	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170556
  00169	ba 3e 0a 00 00	 mov	 edx, 2622		; 00000a3eH
  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170557
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2623 : 
; 2624 :     if (argc > 1)

  0017b	83 bc 24 a8 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  00183	0f 8e a5 00 00
	00		 jle	 $LN11@autoload_t

; 2625 :     {
; 2626 :         tae.argv = calloc( argc-1, sizeof(char*));

  00189	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00190	ff c8		 dec	 eax
  00192	48 98		 cdqe
  00194	ba 08 00 00 00	 mov	 edx, 8
  00199	48 8b c8	 mov	 rcx, rax
  0019c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  001a2	48 89 44 24 70	 mov	 QWORD PTR tae$[rsp+16], rax

; 2627 :         if (!tae.argv)

  001a7	48 83 7c 24 70
	00		 cmp	 QWORD PTR tae$[rsp+16], 0
  001ad	75 10		 jne	 SHORT $LN12@autoload_t

; 2628 :         {
; 2629 :             free( tae.filename );

  001af	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tae$[rsp]
  001b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2630 :             return;

  001ba	e9 c2 00 00 00	 jmp	 $LN1@autoload_t
$LN12@autoload_t:

; 2631 :         }
; 2632 : 
; 2633 :         for (i=1, tae.argc=0; i < argc-1; i++)

  001bf	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  001c7	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tae$[rsp+8], 0
  001cf	eb 0a		 jmp	 SHORT $LN4@autoload_t
$LN2@autoload_t:
  001d1	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  001d5	ff c0		 inc	 eax
  001d7	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN4@autoload_t:
  001db	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  001e2	ff c8		 dec	 eax
  001e4	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  001e8	7d 44		 jge	 SHORT $LN3@autoload_t

; 2634 :         {
; 2635 :             tae.argv[ tae.argc ] = strdup( argv[i] );

  001ea	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  001ef	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001f7	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  001fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00201	48 63 4c 24 68	 movsxd	 rcx, DWORD PTR tae$[rsp+8]
  00206	48 8b 54 24 70	 mov	 rdx, QWORD PTR tae$[rsp+16]
  0020b	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 2636 :             if (!tae.argv[ tae.argc ]) break;

  0020f	48 63 44 24 68	 movsxd	 rax, DWORD PTR tae$[rsp+8]
  00214	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tae$[rsp+16]
  00219	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0021e	75 02		 jne	 SHORT $LN13@autoload_t
  00220	eb 0c		 jmp	 SHORT $LN3@autoload_t
$LN13@autoload_t:

; 2637 :             tae.argc++;

  00222	8b 44 24 68	 mov	 eax, DWORD PTR tae$[rsp+8]
  00226	ff c0		 inc	 eax
  00228	89 44 24 68	 mov	 DWORD PTR tae$[rsp+8], eax

; 2638 :         }

  0022c	eb a3		 jmp	 SHORT $LN2@autoload_t
$LN3@autoload_t:
$LN11@autoload_t:

; 2639 :     }
; 2640 : 
; 2641 :     memcpy( &dev->als[ dev->alss ], &tae, sizeof(tae) );

  0022e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00236	48 63 80 f0 10
	00 00		 movsxd	 rax, DWORD PTR [rax+4336]
  0023d	48 6b c0 18	 imul	 rax, rax, 24
  00241	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00249	48 8b 89 e8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4328]
  00250	48 8d 54 24 60	 lea	 rdx, QWORD PTR tae$[rsp]
  00255	48 8d 3c 01	 lea	 rdi, QWORD PTR [rcx+rax]
  00259	48 8b f2	 mov	 rsi, rdx
  0025c	b9 18 00 00 00	 mov	 ecx, 24
  00261	f3 a4		 rep movsb

; 2642 :     dev->alss++;

  00263	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0026b	8b 80 f0 10 00
	00		 mov	 eax, DWORD PTR [rax+4336]
  00271	ff c0		 inc	 eax
  00273	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0027b	89 81 f0 10 00
	00		 mov	 DWORD PTR [rcx+4336], eax
$LN1@autoload_t:

; 2643 : 
; 2644 : } /* end function autoload_tape_entry */

  00281	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00288	5f		 pop	 rdi
  00289	5e		 pop	 rsi
  0028a	c3		 ret	 0
autoload_tape_entry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
i$ = 32
dev$ = 64
ix$ = 72
autoload_clean_entry PROC

; 2540 : {

$LN7:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2541 : int i;
; 2542 : 
; 2543 :     for(i=0;i<dev->als[ix].argc;i++)

  0000d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00015	eb 0a		 jmp	 SHORT $LN4@autoload_c
$LN2@autoload_c:
  00017	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0001b	ff c0		 inc	 eax
  0001d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@autoload_c:
  00021	48 63 44 24 48	 movsxd	 rax, DWORD PTR ix$[rsp]
  00026	48 6b c0 18	 imul	 rax, rax, 24
  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0002f	48 8b 89 e8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4328]
  00036	8b 44 01 08	 mov	 eax, DWORD PTR [rcx+rax+8]
  0003a	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0003e	7d 52		 jge	 SHORT $LN3@autoload_c

; 2544 :     {
; 2545 :         free(dev->als[ix].argv[i]);

  00040	48 63 44 24 48	 movsxd	 rax, DWORD PTR ix$[rsp]
  00045	48 6b c0 18	 imul	 rax, rax, 24
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0004e	48 8b 89 e8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4328]
  00055	48 63 54 24 20	 movsxd	 rdx, DWORD PTR i$[rsp]
  0005a	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  0005f	48 8b 0c d0	 mov	 rcx, QWORD PTR [rax+rdx*8]
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2546 :         dev->als[ix].argv[i]=NULL;

  00069	48 63 44 24 48	 movsxd	 rax, DWORD PTR ix$[rsp]
  0006e	48 6b c0 18	 imul	 rax, rax, 24
  00072	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00077	48 8b 89 e8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4328]
  0007e	48 63 54 24 20	 movsxd	 rdx, DWORD PTR i$[rsp]
  00083	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  00088	48 c7 04 d0 00
	00 00 00	 mov	 QWORD PTR [rax+rdx*8], 0

; 2547 :     }

  00090	eb 85		 jmp	 SHORT $LN2@autoload_c
$LN3@autoload_c:

; 2548 :     dev->als[ix].argc=0;

  00092	48 63 44 24 48	 movsxd	 rax, DWORD PTR ix$[rsp]
  00097	48 6b c0 18	 imul	 rax, rax, 24
  0009b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  000a0	48 8b 89 e8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4328]
  000a7	c7 44 01 08 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+8], 0

; 2549 :     if(dev->als[ix].filename!=NULL)

  000af	48 63 44 24 48	 movsxd	 rax, DWORD PTR ix$[rsp]
  000b4	48 6b c0 18	 imul	 rax, rax, 24
  000b8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  000bd	48 8b 89 e8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4328]
  000c4	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  000c9	74 3c		 je	 SHORT $LN5@autoload_c

; 2550 :     {
; 2551 :         free(dev->als[ix].filename);

  000cb	48 63 44 24 48	 movsxd	 rax, DWORD PTR ix$[rsp]
  000d0	48 6b c0 18	 imul	 rax, rax, 24
  000d4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  000d9	48 8b 89 e8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4328]
  000e0	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2552 :         dev->als[ix].filename=NULL;

  000ea	48 63 44 24 48	 movsxd	 rax, DWORD PTR ix$[rsp]
  000ef	48 6b c0 18	 imul	 rax, rax, 24
  000f3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  000f8	48 8b 89 e8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4328]
  000ff	48 c7 04 01 00
	00 00 00	 mov	 QWORD PTR [rcx+rax], 0
$LN5@autoload_c:

; 2553 :     }
; 2554 : } /* end function autoload_clean_entry */

  00107	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010b	c3		 ret	 0
autoload_clean_entry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
i$ = 80
p$ = 88
dev$ = 112
argc$ = 120
argv$ = 128
autoload_global_parms PROC

; 2564 : {

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2565 : int i;
; 2566 : char *p;
; 2567 : 
; 2568 :     if (!dev->al_argv)

  00012	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00017	48 83 b8 f8 10
	00 00 00	 cmp	 QWORD PTR [rax+4344], 0
  0001f	75 3f		 jne	 SHORT $LN5@autoload_g

; 2569 :     {
; 2570 :         dev->al_argv = calloc( AUTOLOADER_MAX, sizeof(char*));

  00021	ba 08 00 00 00	 mov	 edx, 8
  00026	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_calloc
  00031	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00036	48 89 81 f8 10
	00 00		 mov	 QWORD PTR [rcx+4344], rax

; 2571 :         dev->al_argc = 0;

  0003d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00042	c7 80 00 11 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4352], 0

; 2572 :         if (!dev->al_argv) return;

  0004c	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00051	48 83 b8 f8 10
	00 00 00	 cmp	 QWORD PTR [rax+4344], 0
  00059	75 05		 jne	 SHORT $LN6@autoload_g
  0005b	e9 fb 00 00 00	 jmp	 $LN1@autoload_g
$LN6@autoload_g:
$LN5@autoload_g:

; 2573 :     }
; 2574 : 
; 2575 :     for (i=1; i < argc && dev->al_argc < AUTOLOADER_MAX; ++i)

  00060	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  00068	eb 0a		 jmp	 SHORT $LN4@autoload_g
$LN2@autoload_g:
  0006a	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  0006e	ff c0		 inc	 eax
  00070	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN4@autoload_g:
  00074	8b 44 24 78	 mov	 eax, DWORD PTR argc$[rsp]
  00078	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  0007c	0f 8d d9 00 00
	00		 jge	 $LN3@autoload_g
  00082	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00087	81 b8 00 11 00
	00 00 01 00 00	 cmp	 DWORD PTR [rax+4352], 256 ; 00000100H
  00091	0f 8d c4 00 00
	00		 jge	 $LN3@autoload_g

; 2576 :     {
; 2577 :         p = (char*) strdup( argv[i] );

  00097	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  0009c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000a4	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000ae	48 89 44 24 58	 mov	 QWORD PTR p$[rsp], rax

; 2578 :         if (!p) return;

  000b3	48 83 7c 24 58
	00		 cmp	 QWORD PTR p$[rsp], 0
  000b9	75 05		 jne	 SHORT $LN7@autoload_g
  000bb	e9 9b 00 00 00	 jmp	 $LN1@autoload_g
$LN7@autoload_g:

; 2579 : 
; 2580 :         // "Tape autoloader: adding '%s' value '%s'"
; 2581 :         WRMSG(HHC00229, "I", "global parm", p);

  000c0	b9 01 00 00 00	 mov	 ecx, 1
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000cb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$[rsp]
  000d0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170525
  000dc	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170526
  000e8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170527
  000f4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fe	41 b9 03 00 00
	00		 mov	 r9d, 3
  00104	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170528
  0010b	ba 15 0a 00 00	 mov	 edx, 2581		; 00000a15H
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170529
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2582 :         dev->al_argv[ dev->al_argc ] = p;

  0011d	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00122	48 63 80 00 11
	00 00		 movsxd	 rax, DWORD PTR [rax+4352]
  00129	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0012e	48 8b 89 f8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4344]
  00135	48 8b 54 24 58	 mov	 rdx, QWORD PTR p$[rsp]
  0013a	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 2583 :         dev->al_argc++;

  0013e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00143	8b 80 00 11 00
	00		 mov	 eax, DWORD PTR [rax+4352]
  00149	ff c0		 inc	 eax
  0014b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00150	89 81 00 11 00
	00		 mov	 DWORD PTR [rcx+4352], eax

; 2584 :     }

  00156	e9 0f ff ff ff	 jmp	 $LN2@autoload_g
$LN3@autoload_g:
$LN1@autoload_g:

; 2585 : 
; 2586 : } /* end function autoload_global_parms */

  0015b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0015f	c3		 ret	 0
autoload_global_parms ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
i$ = 32
dev$ = 64
autoload_close PROC

; 2505 : {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2506 : int i;
; 2507 : 
; 2508 :     if(dev->al_argv!=NULL)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0000e	48 83 b8 f8 10
	00 00 00	 cmp	 QWORD PTR [rax+4344], 0
  00016	0f 84 8c 00 00
	00		 je	 $LN8@autoload_c

; 2509 :     {
; 2510 :         for(i=0;i<dev->al_argc;i++)

  0001c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00024	eb 0a		 jmp	 SHORT $LN4@autoload_c
$LN2@autoload_c:
  00026	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002a	ff c0		 inc	 eax
  0002c	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@autoload_c:
  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00035	8b 80 00 11 00
	00		 mov	 eax, DWORD PTR [rax+4352]
  0003b	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0003f	7d 36		 jge	 SHORT $LN3@autoload_c

; 2511 :         {
; 2512 :             free(dev->al_argv[i]);

  00041	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00046	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0004b	48 8b 89 f8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4344]
  00052	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2513 :             dev->al_argv[i]=NULL;

  0005c	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00061	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00066	48 8b 89 f8 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4344]
  0006d	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0

; 2514 :         }

  00075	eb af		 jmp	 SHORT $LN2@autoload_c
$LN3@autoload_c:

; 2515 :         free(dev->al_argv);

  00077	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0007c	48 8b 88 f8 10
	00 00		 mov	 rcx, QWORD PTR [rax+4344]
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2516 :         dev->al_argv=NULL;

  00089	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0008e	48 c7 80 f8 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4344], 0

; 2517 :         dev->al_argc=0;

  00099	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0009e	c7 80 00 11 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4352], 0
$LN8@autoload_c:

; 2518 :     }
; 2519 :     dev->al_argc=0;

  000a8	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000ad	c7 80 00 11 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4352], 0

; 2520 :     if(dev->als!=NULL)

  000b7	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000bc	48 83 b8 e8 10
	00 00 00	 cmp	 QWORD PTR [rax+4328], 0
  000c4	74 66		 je	 SHORT $LN9@autoload_c

; 2521 :     {
; 2522 :         for(i=0;i<dev->alss;i++)

  000c6	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000ce	eb 0a		 jmp	 SHORT $LN7@autoload_c
$LN5@autoload_c:
  000d0	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000d4	ff c0		 inc	 eax
  000d6	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@autoload_c:
  000da	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  000df	8b 80 f0 10 00
	00		 mov	 eax, DWORD PTR [rax+4336]
  000e5	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  000e9	7d 10		 jge	 SHORT $LN6@autoload_c

; 2523 :         {
; 2524 :             autoload_clean_entry(dev,i);

  000eb	8b 54 24 20	 mov	 edx, DWORD PTR i$[rsp]
  000ef	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  000f4	e8 00 00 00 00	 call	 autoload_clean_entry

; 2525 :         }

  000f9	eb d5		 jmp	 SHORT $LN5@autoload_c
$LN6@autoload_c:

; 2526 :         free(dev->als);

  000fb	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00100	48 8b 88 e8 10
	00 00		 mov	 rcx, QWORD PTR [rax+4328]
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2527 :         dev->als=NULL;

  0010d	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00112	48 c7 80 e8 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4328], 0

; 2528 :         dev->alss=0;

  0011d	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  00122	c7 80 f0 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4336], 0
$LN9@autoload_c:

; 2529 :     }
; 2530 : } /* end function autoload_close */

  0012c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00130	c3		 ret	 0
autoload_close ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
dev$ = 48
autoload_mount_next PROC

; 2698 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2699 :     if(dev->alsix>=dev->alss)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00013	8b 89 f0 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4336]
  00019	39 88 f4 10 00
	00		 cmp	 DWORD PTR [rax+4340], ecx
  0001f	7c 11		 jl	 SHORT $LN2@autoload_m

; 2700 :     {
; 2701 :         autoload_close(dev);

  00021	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00026	e8 00 00 00 00	 call	 autoload_close

; 2702 :         return -1;

  0002b	b8 ff ff ff ff	 mov	 eax, -1
  00030	eb 2d		 jmp	 SHORT $LN1@autoload_m
$LN2@autoload_m:

; 2703 :     }
; 2704 :     dev->alsix++;

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00037	8b 80 f4 10 00
	00		 mov	 eax, DWORD PTR [rax+4340]
  0003d	ff c0		 inc	 eax
  0003f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00044	89 81 f4 10 00
	00		 mov	 DWORD PTR [rcx+4340], eax

; 2705 :     return(autoload_mount_tape(dev,dev->alsix));

  0004a	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  0004f	8b 90 f4 10 00
	00		 mov	 edx, DWORD PTR [rax+4340]
  00055	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0005a	e8 00 00 00 00	 call	 autoload_mount_tape
$LN1@autoload_m:

; 2706 : }

  0005f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00063	c3		 ret	 0
autoload_mount_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
dev$ = 48
autoload_mount_first PROC

; 2684 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2685 :     dev->alsix=0;

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  0000e	c7 80 f4 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4340], 0

; 2686 :     return(autoload_mount_tape(dev,0));

  00018	33 d2		 xor	 edx, edx
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0001f	e8 00 00 00 00	 call	 autoload_mount_tape

; 2687 : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
autoload_mount_first ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
argc$ = 64
aldf$ = 72
rec$ = 80
tv76 = 88
argv$ = 96
pathname$ = 8288
bfr$ = 8560
__$ArrayPad$ = 12656
dev$ = 12688
ac$ = 12696
av$ = 12704
autoload_init PROC

; 2454 : {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	b8 88 31 00 00	 mov	 eax, 12680		; 00003188H
  00013	e8 00 00 00 00	 call	 __chkstk
  00018	48 2b e0	 sub	 rsp, rax
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 70
	31 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2455 : char     bfr[4096];
; 2456 : char    *rec;
; 2457 : FILE    *aldf;
; 2458 : char     pathname[MAX_PATH];
; 2459 : int      argc;
; 2460 : char    *argv[MAX_ARGS];
; 2461 : 
; 2462 :     autoload_close( dev );

  0002d	48 8b 8c 24 90
	31 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00035	e8 00 00 00 00	 call	 autoload_close

; 2463 : 
; 2464 :     if (0
; 2465 :         || ac < 1
; 2466 :         || av[0][0] != '@'

  0003a	33 c0		 xor	 eax, eax
  0003c	85 c0		 test	 eax, eax
  0003e	75 31		 jne	 SHORT $LN5@autoload_i
  00040	83 bc 24 98 31
	00 00 01	 cmp	 DWORD PTR ac$[rsp], 1
  00048	7c 27		 jl	 SHORT $LN5@autoload_i
  0004a	b8 08 00 00 00	 mov	 eax, 8
  0004f	48 6b c0 00	 imul	 rax, rax, 0
  00053	b9 01 00 00 00	 mov	 ecx, 1
  00058	48 6b c9 00	 imul	 rcx, rcx, 0
  0005c	48 8b 94 24 a0
	31 00 00	 mov	 rdx, QWORD PTR av$[rsp]
  00064	48 8b 04 02	 mov	 rax, QWORD PTR [rdx+rax]
  00068	0f be 04 08	 movsx	 eax, BYTE PTR [rax+rcx]
  0006c	83 f8 40	 cmp	 eax, 64			; 00000040H
  0006f	74 05		 je	 SHORT $LN4@autoload_i
$LN5@autoload_i:

; 2467 :     )
; 2468 :         return;

  00071	e9 b3 01 00 00	 jmp	 $LN1@autoload_i
$LN4@autoload_i:

; 2469 : 
; 2470 :     // "Tape autoloader: file request fn '%s'"
; 2471 :     WRMSG(HHC00228, "I", &av[0][1]);

  00076	b8 08 00 00 00	 mov	 eax, 8
  0007b	48 6b c0 00	 imul	 rax, rax, 0
  0007f	b9 01 00 00 00	 mov	 ecx, 1
  00084	48 6b c9 01	 imul	 rcx, rcx, 1
  00088	48 8b 94 24 a0
	31 00 00	 mov	 rdx, QWORD PTR av$[rsp]
  00090	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  00094	48 8b c1	 mov	 rax, rcx
  00097	48 89 44 24 58	 mov	 QWORD PTR tv76[rsp], rax
  0009c	b9 01 00 00 00	 mov	 ecx, 1
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv76[rsp]
  000ac	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170462
  000b8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170463
  000c4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ce	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170464
  000db	ba a7 09 00 00	 mov	 edx, 2471		; 000009a7H
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170465
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 2472 : 
; 2473 :     hostpath( pathname, &av[0][1], sizeof(pathname) );

  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 00	 imul	 rax, rax, 0
  000f6	b9 01 00 00 00	 mov	 ecx, 1
  000fb	48 6b c9 01	 imul	 rcx, rcx, 1
  000ff	48 8b 94 24 a0
	31 00 00	 mov	 rdx, QWORD PTR av$[rsp]
  00107	48 03 0c 02	 add	 rcx, QWORD PTR [rdx+rax]
  0010b	48 8b c1	 mov	 rax, rcx
  0010e	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  00114	48 8b d0	 mov	 rdx, rax
  00117	48 8d 8c 24 60
	20 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  0011f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 2474 : 
; 2475 :     if (!(aldf = fopen( pathname, "r" )))

  00125	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170467
  0012c	48 8d 8c 24 60
	20 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  0013a	48 89 44 24 48	 mov	 QWORD PTR aldf$[rsp], rax
  0013f	48 83 7c 24 48
	00		 cmp	 QWORD PTR aldf$[rsp], 0
  00145	75 05		 jne	 SHORT $LN6@autoload_i

; 2476 :         return; // open error

  00147	e9 dd 00 00 00	 jmp	 $LN1@autoload_i
$LN6@autoload_i:

; 2477 : 
; 2478 :     if (ac > 1)

  0014c	83 bc 24 98 31
	00 00 01	 cmp	 DWORD PTR ac$[rsp], 1
  00154	7e 32		 jle	 SHORT $LN7@autoload_i

; 2479 :         autoload_global_parms( dev, ac-1, &av[1] );

  00156	b8 08 00 00 00	 mov	 eax, 8
  0015b	48 6b c0 01	 imul	 rax, rax, 1
  0015f	48 8b 8c 24 a0
	31 00 00	 mov	 rcx, QWORD PTR av$[rsp]
  00167	48 03 c8	 add	 rcx, rax
  0016a	48 8b c1	 mov	 rax, rcx
  0016d	8b 8c 24 98 31
	00 00		 mov	 ecx, DWORD PTR ac$[rsp]
  00174	ff c9		 dec	 ecx
  00176	4c 8b c0	 mov	 r8, rax
  00179	8b d1		 mov	 edx, ecx
  0017b	48 8b 8c 24 90
	31 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00183	e8 00 00 00 00	 call	 autoload_global_parms
$LN7@autoload_i:
$LN12@autoload_i:
$LN2@autoload_i:

; 2480 : 
; 2481 :     while ((rec = fgets( bfr, 4096, aldf )))

  00188	4c 8b 44 24 48	 mov	 r8, QWORD PTR aldf$[rsp]
  0018d	ba 00 10 00 00	 mov	 edx, 4096		; 00001000H
  00192	48 8d 8c 24 70
	21 00 00	 lea	 rcx, QWORD PTR bfr$[rsp]
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fgets
  001a0	48 89 44 24 50	 mov	 QWORD PTR rec$[rsp], rax
  001a5	48 83 7c 24 50
	00		 cmp	 QWORD PTR rec$[rsp], 0
  001ab	74 71		 je	 SHORT $LN3@autoload_i

; 2482 :     {
; 2483 :         if (0 == parse_args( rec, MAX_ARGS, argv, &argc ))

  001ad	4c 8d 4c 24 40	 lea	 r9, QWORD PTR argc$[rsp]
  001b2	4c 8d 44 24 60	 lea	 r8, QWORD PTR argv$[rsp]
  001b7	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  001bc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR rec$[rsp]
  001c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_parse_args
  001c7	85 c0		 test	 eax, eax
  001c9	75 02		 jne	 SHORT $LN8@autoload_i

; 2484 :             continue; // (zero args == blank line; skip..)

  001cb	eb bb		 jmp	 SHORT $LN2@autoload_i
$LN8@autoload_i:

; 2485 : 
; 2486 :         if (strcmp( argv[0], "*" ) == 0)

  001cd	b8 08 00 00 00	 mov	 eax, 8
  001d2	48 6b c0 00	 imul	 rax, rax, 0
  001d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170472
  001dd	48 8b 4c 04 60	 mov	 rcx, QWORD PTR argv$[rsp+rax]
  001e2	e8 00 00 00 00	 call	 strcmp
  001e7	85 c0		 test	 eax, eax
  001e9	75 18		 jne	 SHORT $LN9@autoload_i

; 2487 :             autoload_global_parms( dev, argc, argv );

  001eb	4c 8d 44 24 60	 lea	 r8, QWORD PTR argv$[rsp]
  001f0	8b 54 24 40	 mov	 edx, DWORD PTR argc$[rsp]
  001f4	48 8b 8c 24 90
	31 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001fc	e8 00 00 00 00	 call	 autoload_global_parms
  00201	eb 16		 jmp	 SHORT $LN10@autoload_i
$LN9@autoload_i:

; 2488 :         else
; 2489 :             autoload_tape_entry( dev, argc, argv );

  00203	4c 8d 44 24 60	 lea	 r8, QWORD PTR argv$[rsp]
  00208	8b 54 24 40	 mov	 edx, DWORD PTR argc$[rsp]
  0020c	48 8b 8c 24 90
	31 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00214	e8 00 00 00 00	 call	 autoload_tape_entry
$LN10@autoload_i:

; 2490 :     }

  00219	e9 6a ff ff ff	 jmp	 $LN12@autoload_i
$LN3@autoload_i:

; 2491 : 
; 2492 :     fclose(aldf);

  0021e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR aldf$[rsp]
  00223	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fclose
$LN1@autoload_i:

; 2493 :     return;
; 2494 : 
; 2495 : } /* end function autoload_init */

  00229	48 8b 8c 24 70
	31 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00231	48 33 cc	 xor	 rcx, rsp
  00234	e8 00 00 00 00	 call	 __security_check_cookie
  00239	48 81 c4 88 31
	00 00		 add	 rsp, 12680		; 00003188H
  00240	c3		 ret	 0
autoload_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
i$1 = 80
mem$2 = 88
tv243 = 96
$T3 = 104
tv253 = 112
tv259 = 120
tv373 = 128
tv379 = 136
tv386 = 144
tv403 = 152
tv409 = 160
tv413 = 168
tv451 = 176
tv92 = 184
suffix$4 = 192
tapepos$5 = 208
devparms$ = 272
filename$ = 672
fmt_eot$ = 944
fmt_mem$ = 1072
dispmsg$ = 1200
__$ArrayPad$ = 1456
dev$ = 1488
devclass$ = 1496
buflen$ = 1504
buffer$ = 1512
tapedev_query_device PROC

; 1788 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	57		 push	 rdi
  00015	48 81 ec c0 05
	00 00		 sub	 rsp, 1472		; 000005c0H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 b0
	05 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1789 :     char filename[ PATH_MAX + 1 ];     /* full path or just name    */
; 1790 :     char devparms[ MAX_PATH + 1 + 128 ];
; 1791 :     char dispmsg [ 256 ];
; 1792 :     char fmt_mem [ 128 ];    // Max of 21 bytes used for U64
; 1793 :     char fmt_eot [ 128 ];    // Max of 21 bytes used for U64
; 1794 : 
; 1795 :     BEGIN_DEVICE_CLASS_QUERY( "TAPE", dev, devclass, buflen, buffer );

  0002e	48 83 bc 24 d8
	05 00 00 00	 cmp	 QWORD PTR devclass$[rsp], 0
  00037	74 12		 je	 SHORT $LN8@tapedev_qu
  00039	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR devclass$[rsp]
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG170153
  00048	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN8@tapedev_qu:
  0004b	48 83 bc 24 d0
	05 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00054	74 20		 je	 SHORT $LN10@tapedev_qu
  00056	48 83 bc 24 d8
	05 00 00 00	 cmp	 QWORD PTR devclass$[rsp], 0
  0005f	74 15		 je	 SHORT $LN10@tapedev_qu
  00061	83 bc 24 e0 05
	00 00 00	 cmp	 DWORD PTR buflen$[rsp], 0
  00069	74 0b		 je	 SHORT $LN10@tapedev_qu
  0006b	48 83 bc 24 e8
	05 00 00 00	 cmp	 QWORD PTR buffer$[rsp], 0
  00074	75 05		 jne	 SHORT $LN9@tapedev_qu
$LN10@tapedev_qu:
  00076	e9 e9 09 00 00	 jmp	 $LN1@tapedev_qu
$LN9@tapedev_qu:
  0007b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00082	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00088	c1 e8 1a	 shr	 eax, 26
  0008b	83 e0 01	 and	 eax, 1
  0008e	85 c0		 test	 eax, eax
  00090	74 75		 je	 SHORT $LN11@tapedev_qu
  00092	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0009a	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  000a0	48 8b c8	 mov	 rcx, rax
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_basename
  000a9	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  000af	48 8b d0	 mov	 rdx, rax
  000b2	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170159
  000c7	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  000cf	e8 00 00 00 00	 call	 strcmp
  000d4	85 c0		 test	 eax, eax
  000d6	75 2d		 jne	 SHORT $LN13@tapedev_qu
  000d8	b8 01 00 00 00	 mov	 eax, 1
  000dd	48 6b c0 00	 imul	 rax, rax, 0
  000e1	48 89 44 24 68	 mov	 QWORD PTR $T3[rsp], rax
  000e6	48 81 7c 24 68
	05 01 00 00	 cmp	 QWORD PTR $T3[rsp], 261	; 00000105H
  000ef	73 02		 jae	 SHORT $LN44@tapedev_qu
  000f1	eb 05		 jmp	 SHORT $LN45@tapedev_qu
$LN44@tapedev_qu:
  000f3	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN45@tapedev_qu:
  000f8	48 8b 44 24 68	 mov	 rax, QWORD PTR $T3[rsp]
  000fd	c6 84 04 a0 02
	00 00 00	 mov	 BYTE PTR filename$[rsp+rax], 0
$LN13@tapedev_qu:
  00105	eb 25		 jmp	 SHORT $LN12@tapedev_qu
$LN11@tapedev_qu:
  00107	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0010f	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00115	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  0011b	48 8b d0	 mov	 rdx, rax
  0011e	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN12@tapedev_qu:

; 1796 : 
; 1797 :     memset(buffer, 0, buflen);

  0012c	48 63 84 24 e0
	05 00 00	 movsxd	 rax, DWORD PTR buflen$[rsp]
  00134	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv92[rsp], rax
  0013c	48 8b bc 24 e8
	05 00 00	 mov	 rdi, QWORD PTR buffer$[rsp]
  00144	33 c0		 xor	 eax, eax
  00146	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv92[rsp]
  0014e	f3 aa		 rep stosb

; 1798 :     memset(devparms, 0, sizeof(devparms));

  00150	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR devparms$[rsp]
  00158	48 8b f8	 mov	 rdi, rax
  0015b	33 c0		 xor	 eax, eax
  0015d	b9 85 01 00 00	 mov	 ecx, 389		; 00000185H
  00162	f3 aa		 rep stosb

; 1799 :     memset(dispmsg, 0, sizeof(dispmsg));

  00164	48 8d 84 24 b0
	04 00 00	 lea	 rax, QWORD PTR dispmsg$[rsp]
  0016c	48 8b f8	 mov	 rdi, rax
  0016f	33 c0		 xor	 eax, eax
  00171	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00176	f3 aa		 rep stosb

; 1800 :     memset(fmt_mem, 0, sizeof(fmt_mem));

  00178	48 8d 84 24 30
	04 00 00	 lea	 rax, QWORD PTR fmt_mem$[rsp]
  00180	48 8b f8	 mov	 rdi, rax
  00183	33 c0		 xor	 eax, eax
  00185	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  0018a	f3 aa		 rep stosb

; 1801 :     memset(fmt_eot, 0, sizeof(fmt_eot));

  0018c	48 8d 84 24 b0
	03 00 00	 lea	 rax, QWORD PTR fmt_eot$[rsp]
  00194	48 8b f8	 mov	 rdi, rax
  00197	33 c0		 xor	 eax, eax
  00199	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  0019e	f3 aa		 rep stosb

; 1802 : 
; 1803 :     GetDisplayMsg( dev, dispmsg, sizeof(dispmsg) );

  001a0	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  001a6	48 8d 94 24 b0
	04 00 00	 lea	 rdx, QWORD PTR dispmsg$[rsp]
  001ae	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001b6	e8 00 00 00 00	 call	 GetDisplayMsg

; 1804 : 
; 1805 :     if (strchr(filename,' ')) STRLCAT( devparms, "\""     );

  001bb	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  001c0	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  001c8	e8 00 00 00 00	 call	 strchr
  001cd	48 85 c0	 test	 rax, rax
  001d0	74 1b		 je	 SHORT $LN14@tapedev_qu
  001d2	41 b8 85 01 00
	00		 mov	 r8d, 389		; 00000185H
  001d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170161
  001df	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR devparms$[rsp]
  001e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN14@tapedev_qu:

; 1806 :                               STRLCAT( devparms, filename );

  001ed	41 b8 85 01 00
	00		 mov	 r8d, 389		; 00000185H
  001f3	48 8d 94 24 a0
	02 00 00	 lea	 rdx, QWORD PTR filename$[rsp]
  001fb	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR devparms$[rsp]
  00203	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 1807 :     if (strchr(filename,' ')) STRLCAT( devparms, "\""     );

  00209	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  0020e	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00216	e8 00 00 00 00	 call	 strchr
  0021b	48 85 c0	 test	 rax, rax
  0021e	74 1b		 je	 SHORT $LN15@tapedev_qu
  00220	41 b8 85 01 00
	00		 mov	 r8d, 389		; 00000185H
  00226	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170163
  0022d	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR devparms$[rsp]
  00235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN15@tapedev_qu:

; 1808 : 
; 1809 :     if (dev->noautomount)

  0023b	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00243	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00249	c1 e8 06	 shr	 eax, 6
  0024c	83 e0 01	 and	 eax, 1
  0024f	85 c0		 test	 eax, eax
  00251	74 1b		 je	 SHORT $LN16@tapedev_qu

; 1810 :         STRLCAT( devparms, " noautomount" );

  00253	41 b8 85 01 00
	00		 mov	 r8d, 389		; 00000185H
  00259	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170165
  00260	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR devparms$[rsp]
  00268	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN16@tapedev_qu:

; 1811 : 
; 1812 : #if defined(OPTION_SCSI_TAPE)
; 1813 :     if ( TAPEDEVT_SCSITAPE != dev->tapedevt )

  0026e	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00276	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0027d	83 f8 03	 cmp	 eax, 3
  00280	0f 84 6e 01 00
	00		 je	 $LN17@tapedev_qu

; 1814 : #endif
; 1815 :     {
; 1816 :         const  char suffix[9] = {0x00, 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'};

  00286	c6 84 24 c0 00
	00 00 00	 mov	 BYTE PTR suffix$4[rsp], 0
  0028e	c6 84 24 c1 00
	00 00 4b	 mov	 BYTE PTR suffix$4[rsp+1], 75 ; 0000004bH
  00296	c6 84 24 c2 00
	00 00 4d	 mov	 BYTE PTR suffix$4[rsp+2], 77 ; 0000004dH
  0029e	c6 84 24 c3 00
	00 00 47	 mov	 BYTE PTR suffix$4[rsp+3], 71 ; 00000047H
  002a6	c6 84 24 c4 00
	00 00 54	 mov	 BYTE PTR suffix$4[rsp+4], 84 ; 00000054H
  002ae	c6 84 24 c5 00
	00 00 50	 mov	 BYTE PTR suffix$4[rsp+5], 80 ; 00000050H
  002b6	c6 84 24 c6 00
	00 00 45	 mov	 BYTE PTR suffix$4[rsp+6], 69 ; 00000045H
  002be	c6 84 24 c7 00
	00 00 5a	 mov	 BYTE PTR suffix$4[rsp+7], 90 ; 0000005aH
  002c6	c6 84 24 c8 00
	00 00 59	 mov	 BYTE PTR suffix$4[rsp+8], 89 ; 00000059H

; 1817 :         u_int   i = 0;

  002ce	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0

; 1818 : 
; 1819 :         U64 mem = (U64)dev->tdparms.maxsize;

  002d6	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002de	48 8b 80 38 10
	00 00		 mov	 rax, QWORD PTR [rax+4152]
  002e5	48 89 44 24 58	 mov	 QWORD PTR mem$2[rsp], rax

; 1820 : 
; 1821 :         if (mem)

  002ea	48 83 7c 24 58
	00		 cmp	 QWORD PTR mem$2[rsp], 0
  002f0	74 40		 je	 SHORT $LN18@tapedev_qu

; 1822 :         {
; 1823 :             for (i = 0; i < sizeof(suffix); i++)

  002f2	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  002fa	eb 0a		 jmp	 SHORT $LN4@tapedev_qu
$LN2@tapedev_qu:
  002fc	8b 44 24 50	 mov	 eax, DWORD PTR i$1[rsp]
  00300	ff c0		 inc	 eax
  00302	89 44 24 50	 mov	 DWORD PTR i$1[rsp], eax
$LN4@tapedev_qu:
  00306	8b 44 24 50	 mov	 eax, DWORD PTR i$1[rsp]
  0030a	48 83 f8 09	 cmp	 rax, 9
  0030e	73 22		 jae	 SHORT $LN3@tapedev_qu

; 1824 :             {
; 1825 :                 if (mem & 0x3FF)

  00310	48 8b 44 24 58	 mov	 rax, QWORD PTR mem$2[rsp]
  00315	48 25 ff 03 00
	00		 and	 rax, 1023		; 000003ffH
  0031b	48 85 c0	 test	 rax, rax
  0031e	74 02		 je	 SHORT $LN19@tapedev_qu

; 1826 :                     break;

  00320	eb 10		 jmp	 SHORT $LN3@tapedev_qu
$LN19@tapedev_qu:

; 1827 :                 mem >>= 10;

  00322	48 8b 44 24 58	 mov	 rax, QWORD PTR mem$2[rsp]
  00327	48 c1 e8 0a	 shr	 rax, 10
  0032b	48 89 44 24 58	 mov	 QWORD PTR mem$2[rsp], rax

; 1828 :             }

  00330	eb ca		 jmp	 SHORT $LN2@tapedev_qu
$LN3@tapedev_qu:
$LN18@tapedev_qu:

; 1829 :         }
; 1830 :         MSGBUF( fmt_mem, " maxsize=%"PRIu64"%c", mem, suffix[i]);

  00332	8b 44 24 50	 mov	 eax, DWORD PTR i$1[rsp]
  00336	0f be 84 04 c0
	00 00 00	 movsx	 eax, BYTE PTR suffix$4[rsp+rax]
  0033e	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00342	4c 8b 4c 24 58	 mov	 r9, QWORD PTR mem$2[rsp]
  00347	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170169
  0034e	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00353	48 8d 8c 24 30
	04 00 00	 lea	 rcx, QWORD PTR fmt_mem$[rsp]
  0035b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1831 : 
; 1832 :         mem = (U64)dev->eotmargin;

  00361	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00369	48 8b 80 70 10
	00 00		 mov	 rax, QWORD PTR [rax+4208]
  00370	48 89 44 24 58	 mov	 QWORD PTR mem$2[rsp], rax

; 1833 : 
; 1834 :         i = 0;

  00375	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0

; 1835 :         if (mem)

  0037d	48 83 7c 24 58
	00		 cmp	 QWORD PTR mem$2[rsp], 0
  00383	74 40		 je	 SHORT $LN20@tapedev_qu

; 1836 :         {
; 1837 :             for (i = 0; i < sizeof(suffix); i++)

  00385	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  0038d	eb 0a		 jmp	 SHORT $LN7@tapedev_qu
$LN5@tapedev_qu:
  0038f	8b 44 24 50	 mov	 eax, DWORD PTR i$1[rsp]
  00393	ff c0		 inc	 eax
  00395	89 44 24 50	 mov	 DWORD PTR i$1[rsp], eax
$LN7@tapedev_qu:
  00399	8b 44 24 50	 mov	 eax, DWORD PTR i$1[rsp]
  0039d	48 83 f8 09	 cmp	 rax, 9
  003a1	73 22		 jae	 SHORT $LN6@tapedev_qu

; 1838 :             {
; 1839 :                 if (mem & 0x3FF)

  003a3	48 8b 44 24 58	 mov	 rax, QWORD PTR mem$2[rsp]
  003a8	48 25 ff 03 00
	00		 and	 rax, 1023		; 000003ffH
  003ae	48 85 c0	 test	 rax, rax
  003b1	74 02		 je	 SHORT $LN21@tapedev_qu

; 1840 :                     break;

  003b3	eb 10		 jmp	 SHORT $LN6@tapedev_qu
$LN21@tapedev_qu:

; 1841 :                 mem >>= 10;

  003b5	48 8b 44 24 58	 mov	 rax, QWORD PTR mem$2[rsp]
  003ba	48 c1 e8 0a	 shr	 rax, 10
  003be	48 89 44 24 58	 mov	 QWORD PTR mem$2[rsp], rax

; 1842 :             }

  003c3	eb ca		 jmp	 SHORT $LN5@tapedev_qu
$LN6@tapedev_qu:
$LN20@tapedev_qu:

; 1843 :         }
; 1844 :         MSGBUF( fmt_eot, " eotmargin=%"PRIu64"%c", mem, suffix[i]);

  003c5	8b 44 24 50	 mov	 eax, DWORD PTR i$1[rsp]
  003c9	0f be 84 04 c0
	00 00 00	 movsx	 eax, BYTE PTR suffix$4[rsp+rax]
  003d1	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  003d5	4c 8b 4c 24 58	 mov	 r9, QWORD PTR mem$2[rsp]
  003da	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170172
  003e1	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  003e6	48 8d 8c 24 b0
	03 00 00	 lea	 rcx, QWORD PTR fmt_eot$[rsp]
  003ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN17@tapedev_qu:

; 1845 :     }
; 1846 : 
; 1847 :     if ( strcmp( filename, TAPE_UNLOADED ) == 0 )

  003f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170175
  003fb	48 8d 8c 24 a0
	02 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00403	e8 00 00 00 00	 call	 strcmp
  00408	85 c0		 test	 eax, eax
  0040a	0f 85 e1 01 00
	00		 jne	 $LN22@tapedev_qu

; 1848 :     {
; 1849 : #if defined(OPTION_SCSI_TAPE)
; 1850 :         if ( TAPEDEVT_SCSITAPE == dev->tapedevt )

  00410	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00418	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  0041f	83 f8 03	 cmp	 eax, 3
  00422	0f 85 ac 00 00
	00		 jne	 $LN24@tapedev_qu

; 1851 :         {
; 1852 :             if (0x3590 == dev->devtype) // emulating 3590

  00428	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00430	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00434	3d 90 35 00 00	 cmp	 eax, 13712		; 00003590H
  00439	75 34		 jne	 SHORT $LN25@tapedev_qu

; 1853 :             {
; 1854 :                 if (!dev->stape_blkid_32 ) STRLCAT( devparms, " --blkid-22" );

  0043b	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00443	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  00449	d1 e8		 shr	 eax, 1
  0044b	83 e0 01	 and	 eax, 1
  0044e	85 c0		 test	 eax, eax
  00450	75 1b		 jne	 SHORT $LN27@tapedev_qu
  00452	41 b8 85 01 00
	00		 mov	 r8d, 389		; 00000185H
  00458	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170180
  0045f	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR devparms$[rsp]
  00467	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN27@tapedev_qu:

; 1855 :             }

  0046d	eb 32		 jmp	 SHORT $LN26@tapedev_qu
$LN25@tapedev_qu:

; 1856 :             else // emulating 3480, 3490
; 1857 :             {
; 1858 :                 if ( dev->stape_blkid_32 ) STRLCAT( devparms, " --blkid-32" );

  0046f	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00477	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  0047d	d1 e8		 shr	 eax, 1
  0047f	83 e0 01	 and	 eax, 1
  00482	85 c0		 test	 eax, eax
  00484	74 1b		 je	 SHORT $LN28@tapedev_qu
  00486	41 b8 85 01 00
	00		 mov	 r8d, 389		; 00000185H
  0048c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170182
  00493	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR devparms$[rsp]
  0049b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN28@tapedev_qu:
$LN26@tapedev_qu:

; 1859 :             }
; 1860 :             if ( dev->stape_no_erg ) STRLCAT( devparms, " --no-erg" );

  004a1	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004a9	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  004af	c1 e8 02	 shr	 eax, 2
  004b2	83 e0 01	 and	 eax, 1
  004b5	85 c0		 test	 eax, eax
  004b7	74 1b		 je	 SHORT $LN29@tapedev_qu
  004b9	41 b8 85 01 00
	00		 mov	 r8d, 389		; 00000185H
  004bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170184
  004c6	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR devparms$[rsp]
  004ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN29@tapedev_qu:
$LN24@tapedev_qu:

; 1861 :         }
; 1862 : #endif
; 1863 :         snprintf(buffer, buflen, "%s%s%s IO[%"PRIu64"]%s%s deonirq=%c",

  004d4	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004dc	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  004e2	c1 e8 0a	 shr	 eax, 10
  004e5	83 e0 01	 and	 eax, 1
  004e8	85 c0		 test	 eax, eax
  004ea	75 0a		 jne	 SHORT $LN46@tapedev_qu
  004ec	c7 44 24 60 4e
	00 00 00	 mov	 DWORD PTR tv243[rsp], 78 ; 0000004eH
  004f4	eb 08		 jmp	 SHORT $LN47@tapedev_qu
$LN46@tapedev_qu:
  004f6	c7 44 24 60 59
	00 00 00	 mov	 DWORD PTR tv243[rsp], 89 ; 00000059H
$LN47@tapedev_qu:
  004fe	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00506	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  0050c	c1 e8 09	 shr	 eax, 9
  0050f	83 e0 01	 and	 eax, 1
  00512	85 c0		 test	 eax, eax
  00514	74 0f		 je	 SHORT $LN48@tapedev_qu
  00516	48 8d 84 24 b0
	04 00 00	 lea	 rax, QWORD PTR dispmsg$[rsp]
  0051e	48 89 44 24 70	 mov	 QWORD PTR tv253[rsp], rax
  00523	eb 0c		 jmp	 SHORT $LN49@tapedev_qu
$LN48@tapedev_qu:
  00525	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170185
  0052c	48 89 44 24 70	 mov	 QWORD PTR tv253[rsp], rax
$LN49@tapedev_qu:
  00531	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00539	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  0053f	c1 e8 09	 shr	 eax, 9
  00542	83 e0 01	 and	 eax, 1
  00545	85 c0		 test	 eax, eax
  00547	74 0e		 je	 SHORT $LN50@tapedev_qu
  00549	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170186
  00550	48 89 44 24 78	 mov	 QWORD PTR tv259[rsp], rax
  00555	eb 0c		 jmp	 SHORT $LN51@tapedev_qu
$LN50@tapedev_qu:
  00557	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170187
  0055e	48 89 44 24 78	 mov	 QWORD PTR tv259[rsp], rax
$LN51@tapedev_qu:
  00563	48 63 84 24 e0
	05 00 00	 movsxd	 rax, DWORD PTR buflen$[rsp]
  0056b	8b 4c 24 60	 mov	 ecx, DWORD PTR tv243[rsp]
  0056f	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00573	48 8d 8c 24 b0
	03 00 00	 lea	 rcx, QWORD PTR fmt_eot$[rsp]
  0057b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00580	48 8d 8c 24 30
	04 00 00	 lea	 rcx, QWORD PTR fmt_mem$[rsp]
  00588	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0058d	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00595	48 8b 89 00 06
	00 00		 mov	 rcx, QWORD PTR [rcx+1536]
  0059c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005a1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv253[rsp]
  005a6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005ab	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv259[rsp]
  005b0	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  005b5	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR devparms$[rsp]
  005bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170188
  005c4	48 8b d0	 mov	 rdx, rax
  005c7	48 8b 8c 24 e8
	05 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  005cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1864 :             devparms,
; 1865 :             dev->tdparms.displayfeat ? ", Display: " : "",
; 1866 :             dev->tdparms.displayfeat ?    dispmsg    : "",
; 1867 :             dev->excps,
; 1868 :             fmt_mem, fmt_eot, dev->tdparms.deonirq == 0 ? 'N' : 'Y' );
; 1869 :         buffer[buflen-1] = '\0';

  005d5	8b 84 24 e0 05
	00 00		 mov	 eax, DWORD PTR buflen$[rsp]
  005dc	ff c8		 dec	 eax
  005de	48 98		 cdqe
  005e0	48 8b 8c 24 e8
	05 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  005e8	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1870 :     }

  005ec	e9 73 04 00 00	 jmp	 $LN23@tapedev_qu
$LN22@tapedev_qu:

; 1871 :     else // (filename was specified)
; 1872 :     {
; 1873 :         char tapepos[64];
; 1874 : 
; 1875 :         memset(tapepos, 0, sizeof(tapepos));

  005f1	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR tapepos$5[rsp]
  005f9	48 8b f8	 mov	 rdi, rax
  005fc	33 c0		 xor	 eax, eax
  005fe	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  00603	f3 aa		 rep stosb

; 1876 : 
; 1877 :         if ( TAPEDEVT_SCSITAPE != dev->tapedevt )

  00605	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0060d	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  00614	83 f8 03	 cmp	 eax, 3
  00617	74 45		 je	 SHORT $LN30@tapedev_qu

; 1878 :         {
; 1879 :             MSGBUF( tapepos, "[%d:%08"PRIX64"] ", dev->curfilen, dev->nxtblkpos );

  00619	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00621	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00628	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00630	48 8b 89 08 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4104]
  00637	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0063c	44 8b c8	 mov	 r9d, eax
  0063f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170191
  00646	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0064b	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR tapepos$5[rsp]
  00653	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1880 :         }

  00659	e9 47 01 00 00	 jmp	 $LN31@tapedev_qu
$LN30@tapedev_qu:

; 1881 : #if defined(OPTION_SCSI_TAPE)
; 1882 :         else // (this is a SCSI tape drive)
; 1883 :         {
; 1884 :             if (STS_BOT( dev ))

  0065e	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00666	8b 80 88 10 00
	00		 mov	 eax, DWORD PTR [rax+4232]
  0066c	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00671	85 c0		 test	 eax, eax
  00673	74 3a		 je	 SHORT $LN32@tapedev_qu

; 1885 :             {
; 1886 :                 dev->eotwarning = 0;

  00675	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0067d	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00683	83 e0 df	 and	 eax, -33		; ffffffdfH
  00686	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0068e	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 1887 :                 STRLCAT( tapepos, "*BOT* " );

  00694	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  0069a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170193
  006a1	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR tapepos$5[rsp]
  006a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN32@tapedev_qu:

; 1888 :             }
; 1889 : 
; 1890 :             // If tape has a display, then GetDisplayMsg already
; 1891 :             // appended *FP* for us. Otherwise we need to do it.
; 1892 : 
; 1893 :             if ( !dev->tdparms.displayfeat )

  006af	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006b7	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  006bd	c1 e8 09	 shr	 eax, 9
  006c0	83 e0 01	 and	 eax, 1
  006c3	85 c0		 test	 eax, eax
  006c5	75 32		 jne	 SHORT $LN33@tapedev_qu

; 1894 :                 if (STS_WR_PROT( dev ))

  006c7	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006cf	8b 80 88 10 00
	00		 mov	 eax, DWORD PTR [rax+4232]
  006d5	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  006da	85 c0		 test	 eax, eax
  006dc	74 1b		 je	 SHORT $LN34@tapedev_qu

; 1895 :                     STRLCAT( tapepos, "*FP* " );

  006de	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  006e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170196
  006eb	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR tapepos$5[rsp]
  006f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN34@tapedev_qu:
$LN33@tapedev_qu:

; 1896 : 
; 1897 :             if (0x3590 == dev->devtype) // emulating 3590

  006f9	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00701	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00705	3d 90 35 00 00	 cmp	 eax, 13712		; 00003590H
  0070a	75 34		 jne	 SHORT $LN35@tapedev_qu

; 1898 :             {
; 1899 :                 if (!dev->stape_blkid_32 ) STRLCAT( devparms, " --blkid-22" );

  0070c	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00714	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  0071a	d1 e8		 shr	 eax, 1
  0071c	83 e0 01	 and	 eax, 1
  0071f	85 c0		 test	 eax, eax
  00721	75 1b		 jne	 SHORT $LN37@tapedev_qu
  00723	41 b8 85 01 00
	00		 mov	 r8d, 389		; 00000185H
  00729	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170200
  00730	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR devparms$[rsp]
  00738	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN37@tapedev_qu:

; 1900 :             }

  0073e	eb 32		 jmp	 SHORT $LN36@tapedev_qu
$LN35@tapedev_qu:

; 1901 :             else // emulating 3480, 3490
; 1902 :             {
; 1903 :                 if ( dev->stape_blkid_32 ) STRLCAT( devparms, " --blkid-32" );

  00740	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00748	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  0074e	d1 e8		 shr	 eax, 1
  00750	83 e0 01	 and	 eax, 1
  00753	85 c0		 test	 eax, eax
  00755	74 1b		 je	 SHORT $LN38@tapedev_qu
  00757	41 b8 85 01 00
	00		 mov	 r8d, 389		; 00000185H
  0075d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170202
  00764	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR devparms$[rsp]
  0076c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN38@tapedev_qu:
$LN36@tapedev_qu:

; 1904 :             }
; 1905 :             if ( dev->stape_no_erg ) STRLCAT( devparms, " --no-erg" );

  00772	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0077a	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  00780	c1 e8 02	 shr	 eax, 2
  00783	83 e0 01	 and	 eax, 1
  00786	85 c0		 test	 eax, eax
  00788	74 1b		 je	 SHORT $LN39@tapedev_qu
  0078a	41 b8 85 01 00
	00		 mov	 r8d, 389		; 00000185H
  00790	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG170204
  00797	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR devparms$[rsp]
  0079f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN39@tapedev_qu:
$LN31@tapedev_qu:

; 1906 :         }
; 1907 : #endif
; 1908 : 
; 1909 :         if ( TAPEDEVT_SCSITAPE != dev->tapedevt
; 1910 : #if defined(OPTION_SCSI_TAPE)
; 1911 :             || STS_MOUNTED(dev)

  007a5	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007ad	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  007b4	83 f8 03	 cmp	 eax, 3
  007b7	75 17		 jne	 SHORT $LN42@tapedev_qu
  007b9	33 d2		 xor	 edx, edx
  007bb	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  007c3	e8 00 00 00 00	 call	 int_scsi_status_mounted
  007c8	85 c0		 test	 eax, eax
  007ca	0f 84 34 01 00
	00		 je	 $LN40@tapedev_qu
$LN42@tapedev_qu:

; 1912 : #endif
; 1913 :         )
; 1914 :         {
; 1915 :             // Not a SCSI tape,  -or-  mounted SCSI tape...
; 1916 : 
; 1917 :             snprintf( buffer, buflen, "%s%s %s%s%s IO[%"PRIu64"]",

  007d0	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007d8	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  007de	c1 e8 09	 shr	 eax, 9
  007e1	83 e0 01	 and	 eax, 1
  007e4	85 c0		 test	 eax, eax
  007e6	74 12		 je	 SHORT $LN52@tapedev_qu
  007e8	48 8d 84 24 b0
	04 00 00	 lea	 rax, QWORD PTR dispmsg$[rsp]
  007f0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv373[rsp], rax
  007f8	eb 0f		 jmp	 SHORT $LN53@tapedev_qu
$LN52@tapedev_qu:
  007fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170208
  00801	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv373[rsp], rax
$LN53@tapedev_qu:
  00809	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00811	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  00817	c1 e8 09	 shr	 eax, 9
  0081a	83 e0 01	 and	 eax, 1
  0081d	85 c0		 test	 eax, eax
  0081f	74 11		 je	 SHORT $LN54@tapedev_qu
  00821	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170209
  00828	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv379[rsp], rax
  00830	eb 0f		 jmp	 SHORT $LN55@tapedev_qu
$LN54@tapedev_qu:
  00832	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170210
  00839	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv379[rsp], rax
$LN55@tapedev_qu:
  00841	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00849	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0084f	d1 e8		 shr	 eax, 1
  00851	83 e0 01	 and	 eax, 1
  00854	85 c0		 test	 eax, eax
  00856	74 11		 je	 SHORT $LN56@tapedev_qu
  00858	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170211
  0085f	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv386[rsp], rax
  00867	eb 0f		 jmp	 SHORT $LN57@tapedev_qu
$LN56@tapedev_qu:
  00869	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170212
  00870	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv386[rsp], rax
$LN57@tapedev_qu:
  00878	48 63 84 24 e0
	05 00 00	 movsxd	 rax, DWORD PTR buflen$[rsp]
  00880	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00888	48 8b 89 00 06
	00 00		 mov	 rcx, QWORD PTR [rcx+1536]
  0088f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00894	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv373[rsp]
  0089c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  008a1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv379[rsp]
  008a9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008ae	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR tapepos$5[rsp]
  008b6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008bb	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv386[rsp]
  008c3	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  008c8	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR devparms$[rsp]
  008d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170213
  008d7	48 8b d0	 mov	 rdx, rax
  008da	48 8b 8c 24 e8
	05 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  008e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1918 :                 devparms, (dev->readonly ? " ro" : ""),
; 1919 :                 tapepos,
; 1920 :                 dev->tdparms.displayfeat ? "Display: " : "",
; 1921 :                 dev->tdparms.displayfeat ?  dispmsg    : "",
; 1922 :                 dev->excps );
; 1923 :             buffer[buflen-1] = '\0';

  008e8	8b 84 24 e0 05
	00 00		 mov	 eax, DWORD PTR buflen$[rsp]
  008ef	ff c8		 dec	 eax
  008f1	48 98		 cdqe
  008f3	48 8b 8c 24 e8
	05 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  008fb	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1924 :         }

  008ff	e9 60 01 00 00	 jmp	 $LN41@tapedev_qu
$LN40@tapedev_qu:

; 1925 :         else /* ( TAPEDEVT_SCSITAPE == dev->tapedevt && STS_NOT_MOUNTED(dev) ) */
; 1926 :         {
; 1927 :             // UNmounted SCSI tape...
; 1928 : 
; 1929 :             snprintf( buffer, buflen, "%s%s (%sNOTAPE)%s%s IO[%"PRIu64"]",

  00904	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0090c	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  00912	c1 e8 09	 shr	 eax, 9
  00915	83 e0 01	 and	 eax, 1
  00918	85 c0		 test	 eax, eax
  0091a	74 12		 je	 SHORT $LN58@tapedev_qu
  0091c	48 8d 84 24 b0
	04 00 00	 lea	 rax, QWORD PTR dispmsg$[rsp]
  00924	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv403[rsp], rax
  0092c	eb 0f		 jmp	 SHORT $LN59@tapedev_qu
$LN58@tapedev_qu:
  0092e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170214
  00935	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv403[rsp], rax
$LN59@tapedev_qu:
  0093d	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00945	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  0094b	c1 e8 09	 shr	 eax, 9
  0094e	83 e0 01	 and	 eax, 1
  00951	85 c0		 test	 eax, eax
  00953	74 11		 je	 SHORT $LN60@tapedev_qu
  00955	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170215
  0095c	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv409[rsp], rax
  00964	eb 0f		 jmp	 SHORT $LN61@tapedev_qu
$LN60@tapedev_qu:
  00966	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170216
  0096d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv409[rsp], rax
$LN61@tapedev_qu:
  00975	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0097d	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00984	7d 11		 jge	 SHORT $LN62@tapedev_qu
  00986	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170217
  0098d	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv413[rsp], rax
  00995	eb 0f		 jmp	 SHORT $LN63@tapedev_qu
$LN62@tapedev_qu:
  00997	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170218
  0099e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv413[rsp], rax
$LN63@tapedev_qu:
  009a6	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009ae	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  009b4	d1 e8		 shr	 eax, 1
  009b6	83 e0 01	 and	 eax, 1
  009b9	85 c0		 test	 eax, eax
  009bb	74 11		 je	 SHORT $LN64@tapedev_qu
  009bd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170219
  009c4	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv451[rsp], rax
  009cc	eb 0f		 jmp	 SHORT $LN65@tapedev_qu
$LN64@tapedev_qu:
  009ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG170220
  009d5	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv451[rsp], rax
$LN65@tapedev_qu:
  009dd	48 63 84 24 e0
	05 00 00	 movsxd	 rax, DWORD PTR buflen$[rsp]
  009e5	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  009ed	48 8b 89 00 06
	00 00		 mov	 rcx, QWORD PTR [rcx+1536]
  009f4	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  009f9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv403[rsp]
  00a01	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a06	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv409[rsp]
  00a0e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a13	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv413[rsp]
  00a1b	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a20	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv451[rsp]
  00a28	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00a2d	4c 8d 8c 24 10
	01 00 00	 lea	 r9, QWORD PTR devparms$[rsp]
  00a35	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG170221
  00a3c	48 8b d0	 mov	 rdx, rax
  00a3f	48 8b 8c 24 e8
	05 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00a47	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1930 :                 devparms, (dev->readonly ? " ro" : ""),
; 1931 :                 dev->fd < 0              ?   "closed; "  : "",
; 1932 :                 dev->tdparms.displayfeat ? ", Display: " : "",
; 1933 :                 dev->tdparms.displayfeat ?    dispmsg    : "",
; 1934 :                 dev->excps );
; 1935 :             buffer[buflen-1] = '\0';

  00a4d	8b 84 24 e0 05
	00 00		 mov	 eax, DWORD PTR buflen$[rsp]
  00a54	ff c8		 dec	 eax
  00a56	48 98		 cdqe
  00a58	48 8b 8c 24 e8
	05 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00a60	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0
$LN41@tapedev_qu:
$LN23@tapedev_qu:
$LN1@tapedev_qu:
$LN43@tapedev_qu:

; 1936 :         }
; 1937 :     }
; 1938 : 
; 1939 :     return;
; 1940 : 
; 1941 : } /* end function tapedev_query_device */

  00a64	48 8b 8c 24 b0
	05 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00a6c	48 33 cc	 xor	 rcx, rsp
  00a6f	e8 00 00 00 00	 call	 __security_check_cookie
  00a74	48 81 c4 c0 05
	00 00		 add	 rsp, 1472		; 000005c0H
  00a7b	5f		 pop	 rdi
  00a7c	c3		 ret	 0
tapedev_query_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
dev$ = 48
tapedev_close_device PROC

; 890  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 891  :     autoload_close(dev);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0000e	e8 00 00 00 00	 call	 autoload_close

; 892  :     dev->tmh->close(dev);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  00018	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  0001f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00024	ff 50 10	 call	 QWORD PTR [rax+16]
$LN4@tapedev_cl:

; 893  :     ASSERT( dev->fd < 0 );

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  0002c	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00033	7c 5c		 jl	 SHORT $LN8@tapedev_cl
$LN7@tapedev_cl:
  00035	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169440
  0003c	41 b8 7d 03 00
	00		 mov	 r8d, 893		; 0000037dH
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169441
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169442
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0005c	85 c0		 test	 eax, eax
  0005e	74 20		 je	 SHORT $LN9@tapedev_cl
  00060	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169444
  00067	41 b8 7d 03 00
	00		 mov	 r8d, 893		; 0000037dH
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169445
  00074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169446
  0007b	e8 00 00 00 00	 call	 DebuggerTrace
$LN9@tapedev_cl:
  00080	33 c0		 xor	 eax, eax
  00082	85 c0		 test	 eax, eax
  00084	75 af		 jne	 SHORT $LN7@tapedev_cl
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  0008c	85 c0		 test	 eax, eax
  0008e	74 01		 je	 SHORT $LN10@tapedev_cl
  00090	cc		 int	 3
$LN10@tapedev_cl:
$LN8@tapedev_cl:
  00091	33 c0		 xor	 eax, eax
  00093	85 c0		 test	 eax, eax
  00095	75 90		 jne	 SHORT $LN4@tapedev_cl

; 894  : 
; 895  :     dev->curfilen  = 1;

  00097	b8 01 00 00 00	 mov	 eax, 1
  0009c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  000a1	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 896  :     dev->nxtblkpos = 0;

  000a8	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  000ad	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 897  :     dev->prvblkpos = -1;

  000b8	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  000bd	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 898  :     dev->curblkrem = 0;

  000c8	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  000cd	c7 80 18 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4120], 0

; 899  :     dev->curbufoff = 0;

  000d7	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  000dc	c7 80 1c 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4124], 0

; 900  :     dev->blockid   = 0;

  000e6	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  000eb	c7 80 04 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4100], 0

; 901  :     dev->fenced = 0;

  000f5	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  000fa	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00100	83 e0 fe	 and	 eax, -2			; fffffffeH
  00103	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  00108	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 902  : 
; 903  :     return 0;

  0010e	33 c0		 xor	 eax, eax

; 904  : } /* end function tapedev_close_device */

  00110	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00114	c3		 ret	 0
tapedev_close_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\tapedev.c
_TEXT	SEGMENT
pDevInitTab$ = 80
rc$ = 88
rdc$ = 96
tv153 = 104
tv159 = 108
tv438 = 112
tv444 = 116
tv202 = 120
devclass$1 = 128
tv306 = 136
dev$ = 160
argc$ = 168
argv$ = 176
tapedev_init_handler PROC

; 648  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	57		 push	 rdi
  0000f	48 81 ec 90 00
	00 00		 sub	 rsp, 144		; 00000090H

; 649  : int             rc;
; 650  : DEVINITTAB*     pDevInitTab;
; 651  : TAPERDC*        rdc = (TAPERDC*) dev->devchar;

  00016	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0001e	48 05 6c 05 00
	00		 add	 rax, 1388		; 0000056cH
  00024	48 89 44 24 60	 mov	 QWORD PTR rdc$[rsp], rax

; 652  : 
; 653  :     dev->rcd = &tape_read_configuration_data;

  00029	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tape_read_configuration_data
  00038	48 89 88 b8 02
	00 00		 mov	 QWORD PTR [rax+696], rcx

; 654  : 
; 655  :     /* Close current tape */
; 656  :     if (dev->fd >= 0)

  0003f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00047	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  0004e	0f 8c 3c 02 00
	00		 jl	 $LN19@tapedev_in

; 657  :     {
; 658  :         /* Prevent accidental re-init'ing of already loaded tape drives */
; 659  :         if (sysblk.nomountedtapereinit)

  00054	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0005b	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00061	c1 e8 12	 shr	 eax, 18
  00064	83 e0 01	 and	 eax, 1
  00067	85 c0		 test	 eax, eax
  00069	0f 84 f5 01 00
	00		 je	 $LN20@tapedev_in

; 660  :         {
; 661  :             char*  devclass;
; 662  : 
; 663  :             tapedev_query_device( dev, &devclass, 0, NULL );

  0006f	45 33 c9	 xor	 r9d, r9d
  00072	45 33 c0	 xor	 r8d, r8d
  00075	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR devclass$1[rsp]
  0007d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00085	e8 00 00 00 00	 call	 tapedev_query_device

; 664  : 
; 665  :             if (1
; 666  :                 && strcmp( devclass,"TAPE" ) == 0
; 667  :                 && (0

  0008a	33 c0		 xor	 eax, eax
  0008c	83 f8 01	 cmp	 eax, 1
  0008f	0f 84 cf 01 00
	00		 je	 $LN21@tapedev_in
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169383
  0009c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR devclass$1[rsp]
  000a4	e8 00 00 00 00	 call	 strcmp
  000a9	85 c0		 test	 eax, eax
  000ab	0f 85 b3 01 00
	00		 jne	 $LN21@tapedev_in
  000b1	33 c0		 xor	 eax, eax
  000b3	85 c0		 test	 eax, eax
  000b5	75 4b		 jne	 SHORT $LN22@tapedev_in
  000b7	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000bf	0f b6 80 dc 10
	00 00		 movzx	 eax, BYTE PTR [rax+4316]
  000c6	83 f8 03	 cmp	 eax, 3
  000c9	74 37		 je	 SHORT $LN22@tapedev_in
  000cb	83 bc 24 a8 00
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  000d3	0f 8c 8b 01 00
	00		 jl	 $LN21@tapedev_in
  000d9	b8 08 00 00 00	 mov	 eax, 8
  000de	48 6b c0 02	 imul	 rax, rax, 2
  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169385
  000e9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000f1	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000f5	e8 00 00 00 00	 call	 strcmp
  000fa	85 c0		 test	 eax, eax
  000fc	0f 84 62 01 00
	00		 je	 $LN21@tapedev_in
$LN22@tapedev_in:
$LN4@tapedev_in:

; 668  :                     || TAPEDEVT_SCSITAPE == dev->tapedevt
; 669  :                     || (argc >= 3 && strcmp( argv[2], TAPE_UNLOADED ) != 0)
; 670  :                    )
; 671  :             )
; 672  :             {
; 673  :                 ASSERT( dev->tmh && dev->tmh->tapeloaded );

  00102	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0010a	48 83 b8 e0 10
	00 00 00	 cmp	 QWORD PTR [rax+4320], 0
  00112	74 16		 je	 SHORT $LN24@tapedev_in
  00114	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0011c	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00123	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00128	75 5c		 jne	 SHORT $LN23@tapedev_in
$LN24@tapedev_in:
$LN7@tapedev_in:
  0012a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169388
  00131	41 b8 a1 02 00
	00		 mov	 r8d, 673		; 000002a1H
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169389
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169390
  00145	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0014b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00151	85 c0		 test	 eax, eax
  00153	74 20		 je	 SHORT $LN25@tapedev_in
  00155	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG169392
  0015c	41 b8 a1 02 00
	00		 mov	 r8d, 673		; 000002a1H
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169393
  00169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169394
  00170	e8 00 00 00 00	 call	 DebuggerTrace
$LN25@tapedev_in:
  00175	33 c0		 xor	 eax, eax
  00177	85 c0		 test	 eax, eax
  00179	75 af		 jne	 SHORT $LN7@tapedev_in
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00181	85 c0		 test	 eax, eax
  00183	74 01		 je	 SHORT $LN26@tapedev_in
  00185	cc		 int	 3
$LN26@tapedev_in:
$LN23@tapedev_in:
  00186	33 c0		 xor	 eax, eax
  00188	85 c0		 test	 eax, eax
  0018a	0f 85 72 ff ff
	ff		 jne	 $LN4@tapedev_in

; 674  :                 if (dev->tmh->tapeloaded( dev, NULL, 0 ))

  00190	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00198	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  0019f	45 33 c0	 xor	 r8d, r8d
  001a2	33 d2		 xor	 edx, edx
  001a4	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001ac	ff 50 70	 call	 QWORD PTR [rax+112]
  001af	85 c0		 test	 eax, eax
  001b1	0f 84 ad 00 00
	00		 je	 $LN27@tapedev_in

; 675  :                 {
; 676  :                     // "%1d:%04X reinit rejected; drive not empty"
; 677  :                     WRMSG( HHC02243, "E", LCSS_DEVNUM );

  001b7	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001c0	74 12		 je	 SHORT $LN44@tapedev_in
  001c2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001ca	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001ce	89 44 24 68	 mov	 DWORD PTR tv153[rsp], eax
  001d2	eb 08		 jmp	 SHORT $LN45@tapedev_in
$LN44@tapedev_in:
  001d4	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv153[rsp], 0
$LN45@tapedev_in:
  001dc	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001e5	74 14		 je	 SHORT $LN46@tapedev_in
  001e7	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001ef	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  001f3	d1 f8		 sar	 eax, 1
  001f5	89 44 24 6c	 mov	 DWORD PTR tv159[rsp], eax
  001f9	eb 08		 jmp	 SHORT $LN47@tapedev_in
$LN46@tapedev_in:
  001fb	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv159[rsp], 0
$LN47@tapedev_in:
  00203	b9 01 00 00 00	 mov	 ecx, 1
  00208	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0020e	8b 4c 24 68	 mov	 ecx, DWORD PTR tv153[rsp]
  00212	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00216	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv159[rsp]
  0021a	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0021e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169397
  00225	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0022a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169398
  00231	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00236	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0023b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00241	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169399
  00248	ba a5 02 00 00	 mov	 edx, 677		; 000002a5H
  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169400
  00254	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 678  :                     return -1;

  0025a	b8 ff ff ff ff	 mov	 eax, -1
  0025f	e9 bc 08 00 00	 jmp	 $LN1@tapedev_in
$LN27@tapedev_in:
$LN21@tapedev_in:
$LN20@tapedev_in:

; 679  :                 }
; 680  :             }
; 681  :         }
; 682  : 
; 683  :         dev->tmh->close( dev );

  00264	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0026c	48 8b 80 e0 10
	00 00		 mov	 rax, QWORD PTR [rax+4320]
  00273	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0027b	ff 50 10	 call	 QWORD PTR [rax+16]

; 684  :         dev->fd = -1;

  0027e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00286	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1
$LN19@tapedev_in:

; 685  :     }
; 686  : 
; 687  :     autoload_close( dev );

  00290	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00298	e8 00 00 00 00	 call	 autoload_close

; 688  :     dev->tdparms.displayfeat = 0;

  0029d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002a5	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  002ab	0f ba f0 09	 btr	 eax, 9
  002af	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002b7	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 689  : 
; 690  :     /* reset excps count */
; 691  :     dev->excps = 0;

  002bd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002c5	48 c7 80 00 06
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1536], 0

; 692  : 
; 693  :     /* Determine the control unit type and model number */
; 694  :     /* Support for 3490/3422/3430/8809/9347, etc.. */
; 695  :     if (!sscanf( dev->typname, "%hx", &dev->devtype ))

  002d0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002d8	48 83 c0 4a	 add	 rax, 74			; 0000004aH
  002dc	4c 8b c0	 mov	 r8, rax
  002df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169402
  002e6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002ee	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  002f2	e8 00 00 00 00	 call	 sscanf
  002f7	85 c0		 test	 eax, eax
  002f9	75 11		 jne	 SHORT $LN28@tapedev_in

; 696  :         dev->devtype = 0x3420;

  002fb	b8 20 34 00 00	 mov	 eax, 13344		; 00003420H
  00300	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00308	66 89 41 4a	 mov	 WORD PTR [rcx+74], ax
$LN28@tapedev_in:

; 697  : 
; 698  :     // PROGAMMING NOTE: we use hard-coded values from our DevInitTab
; 699  :     // for virtual (non-SCSI) devices and, for the time being, for non-
; 700  :     // virtual (SCSI) devices too. Once we add direct SCSI I/O support
; 701  :     // we will need to add code to get this information directly from
; 702  :     // the actual SCSI device itself.
; 703  :     for
; 704  :     (
; 705  :         pDevInitTab = &DevInitTab[0];

  0030c	b8 30 00 00 00	 mov	 eax, 48			; 00000030H
  00311	48 6b c0 00	 imul	 rax, rax, 0
  00315	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:DevInitTab
  0031c	48 03 c8	 add	 rcx, rax
  0031f	48 8b c1	 mov	 rax, rcx
  00322	48 89 44 24 50	 mov	 QWORD PTR pDevInitTab$[rsp], rax
  00327	eb 0e		 jmp	 SHORT $LN10@tapedev_in
$LN8@tapedev_in:

; 707  :         pDevInitTab++

  00329	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  0032e	48 83 c0 30	 add	 rax, 48			; 00000030H
  00332	48 89 44 24 50	 mov	 QWORD PTR pDevInitTab$[rsp], rax
$LN10@tapedev_in:

; 706  :         pDevInitTab->devtype != 0xFFFF && pDevInitTab->devtype != dev->devtype;

  00337	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  0033c	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0033f	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  00344	74 1a		 je	 SHORT $LN9@tapedev_in
  00346	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  0034b	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0034e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00356	0f b7 49 4a	 movzx	 ecx, WORD PTR [rcx+74]
  0035a	3b c1		 cmp	 eax, ecx
  0035c	74 02		 je	 SHORT $LN9@tapedev_in

; 708  :     );

  0035e	eb c9		 jmp	 SHORT $LN8@tapedev_in
$LN9@tapedev_in:

; 709  : 
; 710  :     if (pDevInitTab->devtype == 0xFFFF)         /* (entry not found?) */

  00360	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  00365	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00368	3d ff ff 00 00	 cmp	 eax, 65535		; 0000ffffH
  0036d	0f 85 96 00 00
	00		 jne	 $LN29@tapedev_in

; 711  :     {
; 712  :         // "Unsupported tape device type '%04X' specified"
; 713  :         WRMSG(HHC00225, "E", dev->devtype );

  00373	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0037b	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  0037f	89 44 24 78	 mov	 DWORD PTR tv202[rsp], eax
  00383	b9 01 00 00 00	 mov	 ecx, 1
  00388	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0038e	8b 4c 24 78	 mov	 ecx, DWORD PTR tv202[rsp]
  00392	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00396	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169404
  0039d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169405
  003a9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ae	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003b3	41 b9 03 00 00
	00		 mov	 r9d, 3
  003b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169406
  003c0	ba c9 02 00 00	 mov	 edx, 713		; 000002c9H
  003c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169407
  003cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 714  : 
; 715  :         pDevInitTab++;                          /* (default entry; s/b same as 0x3420) */

  003d2	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  003d7	48 83 c0 30	 add	 rax, 48			; 00000030H
  003db	48 89 44 24 50	 mov	 QWORD PTR pDevInitTab$[rsp], rax

; 716  :         pDevInitTab->devtype = dev->devtype;    /* (don't know what else to do really) */

  003e0	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  003e5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003ed	0f b7 49 4a	 movzx	 ecx, WORD PTR [rcx+74]
  003f1	66 89 08	 mov	 WORD PTR [rax], cx

; 717  :         pDevInitTab->cutype  = dev->devtype;    /* (don't know what else to do really) */

  003f4	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  003f9	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00401	0f b7 49 4a	 movzx	 ecx, WORD PTR [rcx+74]
  00405	66 89 48 04	 mov	 WORD PTR [rax+4], cx
$LN29@tapedev_in:

; 718  :     }
; 719  : 
; 720  :     /* Allow SENSE ID for certain specific legacy devices if requested */
; 721  : 
; 722  :     dev->numdevid = pDevInitTab->numdevid;  // (default == from table)

  00409	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00411	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDevInitTab$[rsp]
  00416	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00419	89 88 64 04 00
	00		 mov	 DWORD PTR [rax+1124], ecx

; 723  : 
; 724  :     if (1
; 725  :         && sysblk.legacysenseid             // (if option requested, AND is)
; 726  :         && (0                               // (for allowable legacy device)

  0041f	33 c0		 xor	 eax, eax
  00421	83 f8 01	 cmp	 eax, 1
  00424	74 7b		 je	 SHORT $LN30@tapedev_in
  00426	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0042d	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00433	c1 e8 14	 shr	 eax, 20
  00436	83 e0 01	 and	 eax, 1
  00439	85 c0		 test	 eax, eax
  0043b	74 64		 je	 SHORT $LN30@tapedev_in
  0043d	33 c0		 xor	 eax, eax
  0043f	85 c0		 test	 eax, eax
  00441	75 4c		 jne	 SHORT $LN31@tapedev_in
  00443	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0044b	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  0044f	3d 10 34 00 00	 cmp	 eax, 13328		; 00003410H
  00454	74 39		 je	 SHORT $LN31@tapedev_in
  00456	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0045e	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00462	3d 11 34 00 00	 cmp	 eax, 13329		; 00003411H
  00467	74 26		 je	 SHORT $LN31@tapedev_in
  00469	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00471	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00475	3d 20 34 00 00	 cmp	 eax, 13344		; 00003420H
  0047a	74 13		 je	 SHORT $LN31@tapedev_in
  0047c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00484	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00488	3d 09 88 00 00	 cmp	 eax, 34825		; 00008809H
  0048d	75 12		 jne	 SHORT $LN30@tapedev_in
$LN31@tapedev_in:

; 727  :             || 0x3410 == dev->devtype
; 728  :             || 0x3411 == dev->devtype
; 729  :             || 0x3420 == dev->devtype
; 730  :             || 0x8809 == dev->devtype
; 731  :            )
; 732  :     )
; 733  :     {
; 734  :         dev->numdevid = 7;      // (allow only this much for legacy devices)

  0048f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00497	c7 80 64 04 00
	00 07 00 00 00	 mov	 DWORD PTR [rax+1124], 7
$LN30@tapedev_in:

; 735  :     }
; 736  : 
; 737  :     /* Initialize the Sense-Id bytes if needed... */
; 738  :     if (dev->numdevid > 0)

  004a1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004a9	83 b8 64 04 00
	00 00		 cmp	 DWORD PTR [rax+1124], 0
  004b0	0f 86 23 01 00
	00		 jbe	 $LN32@tapedev_in

; 739  :     {
; 740  :                    dev->devid[0] = 0xFF;

  004b6	b8 01 00 00 00	 mov	 eax, 1
  004bb	48 6b c0 00	 imul	 rax, rax, 0
  004bf	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  004c7	c6 84 01 68 04
	00 00 ff	 mov	 BYTE PTR [rcx+rax+1128], 255 ; 000000ffH

; 741  :         STORE_HW( &dev->devid[1],  pDevInitTab->cutype  );

  004cf	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  004d4	0f b7 48 04	 movzx	 ecx, WORD PTR [rax+4]
  004d8	e8 00 00 00 00	 call	 _byteswap_ushort
  004dd	b9 01 00 00 00	 mov	 ecx, 1
  004e2	48 6b c9 01	 imul	 rcx, rcx, 1
  004e6	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  004ee	48 8d 8c 0a 68
	04 00 00	 lea	 rcx, QWORD PTR [rdx+rcx+1128]
  004f6	0f b7 d0	 movzx	 edx, ax
  004f9	e8 00 00 00 00	 call	 store_hw_noswap

; 742  :                    dev->devid[3] = pDevInitTab->cumodel;

  004fe	b8 01 00 00 00	 mov	 eax, 1
  00503	48 6b c0 03	 imul	 rax, rax, 3
  00507	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0050f	48 8b 54 24 50	 mov	 rdx, QWORD PTR pDevInitTab$[rsp]
  00514	0f b6 52 06	 movzx	 edx, BYTE PTR [rdx+6]
  00518	88 94 01 68 04
	00 00		 mov	 BYTE PTR [rcx+rax+1128], dl

; 743  :         STORE_HW( &dev->devid[4],  pDevInitTab->devtype );

  0051f	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  00524	0f b7 08	 movzx	 ecx, WORD PTR [rax]
  00527	e8 00 00 00 00	 call	 _byteswap_ushort
  0052c	b9 01 00 00 00	 mov	 ecx, 1
  00531	48 6b c9 04	 imul	 rcx, rcx, 4
  00535	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0053d	48 8d 8c 0a 68
	04 00 00	 lea	 rcx, QWORD PTR [rdx+rcx+1128]
  00545	0f b7 d0	 movzx	 edx, ax
  00548	e8 00 00 00 00	 call	 store_hw_noswap

; 744  :                    dev->devid[6] = pDevInitTab->devmodel;

  0054d	b8 01 00 00 00	 mov	 eax, 1
  00552	48 6b c0 06	 imul	 rax, rax, 6
  00556	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0055e	48 8b 54 24 50	 mov	 rdx, QWORD PTR pDevInitTab$[rsp]
  00563	0f b6 52 02	 movzx	 edx, BYTE PTR [rdx+2]
  00567	88 94 01 68 04
	00 00		 mov	 BYTE PTR [rcx+rax+1128], dl

; 745  : 
; 746  :         /* Initialize the CIW information if needed... */
; 747  :         if (dev->numdevid > 7)

  0056e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00576	83 b8 64 04 00
	00 07		 cmp	 DWORD PTR [rax+1124], 7
  0057d	76 5a		 jbe	 SHORT $LN33@tapedev_in

; 748  :         {
; 749  :             // PROGRAMMING NOTE: see note near 'DEVINITTAB'
; 750  :             // struct definition regarding requirements for
; 751  :             // supporting more than 7 bytes of SNSID info.
; 752  : 
; 753  :             memcpy( &dev->devid[8],  "\x40\xFA\x00\xA0", 4 ); // CIW Read Configuration Data  (0xFA)

  0057f	b8 01 00 00 00	 mov	 eax, 1
  00584	48 6b c0 08	 imul	 rax, rax, 8
  00588	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00590	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR $SG169412
  00596	89 94 01 68 04
	00 00		 mov	 DWORD PTR [rcx+rax+1128], edx

; 754  :             memcpy( &dev->devid[12], "\x41\x73\x00\x04", 4 ); // CIW Set Interface Identifier (0x73)

  0059d	b8 01 00 00 00	 mov	 eax, 1
  005a2	48 6b c0 0c	 imul	 rax, rax, 12
  005a6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  005ae	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR $SG169413
  005b4	89 94 01 68 04
	00 00		 mov	 DWORD PTR [rcx+rax+1128], edx

; 755  :             memcpy( &dev->devid[16], "\x42\x3E\x00\x60", 4 ); // CIW Read Subsystem Data      (0x3E)

  005bb	b8 01 00 00 00	 mov	 eax, 1
  005c0	48 6b c0 10	 imul	 rax, rax, 16
  005c4	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  005cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR $SG169414
  005d2	89 94 01 68 04
	00 00		 mov	 DWORD PTR [rcx+rax+1128], edx
$LN33@tapedev_in:
$LN32@tapedev_in:

; 756  :         }
; 757  :     }
; 758  : 
; 759  :     /* Initialize the Read Device Characteristics (RDC) bytes... */
; 760  :     if (pDevInitTab->haverdc)

  005d9	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  005de	83 78 28 00	 cmp	 DWORD PTR [rax+40], 0
  005e2	0f 84 c9 01 00
	00		 je	 $LN34@tapedev_in

; 761  :     {
; 762  :         dev->numdevchar = sizeof( dev->devchar );

  005e8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005f0	c7 80 68 05 00
	00 40 00 00 00	 mov	 DWORD PTR [rax+1384], 64 ; 00000040H

; 763  :         memset( dev->devchar, 0, dev->numdevchar );

  005fa	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00602	8b 80 68 05 00
	00		 mov	 eax, DWORD PTR [rax+1384]
  00608	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv306[rsp], rax
  00610	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00618	48 81 c1 6c 05
	00 00		 add	 rcx, 1388		; 0000056cH
  0061f	48 8b f9	 mov	 rdi, rcx
  00622	33 c0		 xor	 eax, eax
  00624	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv306[rsp]
  0062c	f3 aa		 rep stosb

; 764  : 
; 765  :         /* Initialize feature bytes and other values */
; 766  :         STORE_FW( rdc->feats1,    pDevInitTab->feats1 );

  0062e	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  00633	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  00636	e8 00 00 00 00	 call	 _byteswap_ulong
  0063b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR rdc$[rsp]
  00640	48 83 c1 06	 add	 rcx, 6
  00644	8b d0		 mov	 edx, eax
  00646	e8 00 00 00 00	 call	 store_fw_noswap

; 767  :         STORE_FW( rdc->feats2,    pDevInitTab->feats2 );

  0064b	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  00650	8b 48 0c	 mov	 ecx, DWORD PTR [rax+12]
  00653	e8 00 00 00 00	 call	 _byteswap_ulong
  00658	48 8b 4c 24 60	 mov	 rcx, QWORD PTR rdc$[rsp]
  0065d	48 83 c1 0c	 add	 rcx, 12
  00661	8b d0		 mov	 edx, eax
  00663	e8 00 00 00 00	 call	 store_fw_noswap

; 768  :         STORE_HW( rdc->cutype,    pDevInitTab->cutype  );

  00668	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  0066d	0f b7 48 04	 movzx	 ecx, WORD PTR [rax+4]
  00671	e8 00 00 00 00	 call	 _byteswap_ushort
  00676	48 8b 4c 24 60	 mov	 rcx, QWORD PTR rdc$[rsp]
  0067b	0f b7 d0	 movzx	 edx, ax
  0067e	e8 00 00 00 00	 call	 store_hw_noswap

; 769  :         STORE_HW( rdc->ncutype,   pDevInitTab->cutype  );

  00683	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  00688	0f b7 48 04	 movzx	 ecx, WORD PTR [rax+4]
  0068c	e8 00 00 00 00	 call	 _byteswap_ushort
  00691	48 8b 4c 24 60	 mov	 rcx, QWORD PTR rdc$[rsp]
  00696	48 83 c1 18	 add	 rcx, 24
  0069a	0f b7 d0	 movzx	 edx, ax
  0069d	e8 00 00 00 00	 call	 store_hw_noswap

; 770  :         STORE_HW( rdc->tutype,    pDevInitTab->devtype );

  006a2	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  006a7	0f b7 08	 movzx	 ecx, WORD PTR [rax]
  006aa	e8 00 00 00 00	 call	 _byteswap_ushort
  006af	48 8b 4c 24 60	 mov	 rcx, QWORD PTR rdc$[rsp]
  006b4	48 83 c1 03	 add	 rcx, 3
  006b8	0f b7 d0	 movzx	 edx, ax
  006bb	e8 00 00 00 00	 call	 store_hw_noswap

; 771  :         STORE_HW( rdc->ntutype,   pDevInitTab->devtype );

  006c0	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  006c5	0f b7 08	 movzx	 ecx, WORD PTR [rax]
  006c8	e8 00 00 00 00	 call	 _byteswap_ushort
  006cd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR rdc$[rsp]
  006d2	48 83 c1 1b	 add	 rcx, 27
  006d6	0f b7 d0	 movzx	 edx, ax
  006d9	e8 00 00 00 00	 call	 store_hw_noswap

; 772  :                   rdc->cumodel  = pDevInitTab->cumodel;

  006de	48 8b 44 24 60	 mov	 rax, QWORD PTR rdc$[rsp]
  006e3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDevInitTab$[rsp]
  006e8	0f b6 49 06	 movzx	 ecx, BYTE PTR [rcx+6]
  006ec	88 48 02	 mov	 BYTE PTR [rax+2], cl

; 773  :                   rdc->ncumodel = pDevInitTab->cumodel;

  006ef	48 8b 44 24 60	 mov	 rax, QWORD PTR rdc$[rsp]
  006f4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDevInitTab$[rsp]
  006f9	0f b6 49 06	 movzx	 ecx, BYTE PTR [rcx+6]
  006fd	88 48 1a	 mov	 BYTE PTR [rax+26], cl

; 774  :                   rdc->tumodel  = pDevInitTab->devmodel;

  00700	48 8b 44 24 60	 mov	 rax, QWORD PTR rdc$[rsp]
  00705	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDevInitTab$[rsp]
  0070a	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  0070e	88 48 05	 mov	 BYTE PTR [rax+5], cl

; 775  :                   rdc->ntumodel = pDevInitTab->devmodel;

  00711	48 8b 44 24 60	 mov	 rax, QWORD PTR rdc$[rsp]
  00716	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDevInitTab$[rsp]
  0071b	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  0071f	88 48 1d	 mov	 BYTE PTR [rax+29], cl

; 776  :                   rdc->devclass = pDevInitTab->devclass;

  00722	48 8b 44 24 60	 mov	 rax, QWORD PTR rdc$[rsp]
  00727	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDevInitTab$[rsp]
  0072c	0f b6 49 1b	 movzx	 ecx, BYTE PTR [rcx+27]
  00730	88 48 0a	 mov	 BYTE PTR [rax+10], cl

; 777  :                   rdc->devtcode = pDevInitTab->devtcode;

  00733	48 8b 44 24 60	 mov	 rax, QWORD PTR rdc$[rsp]
  00738	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDevInitTab$[rsp]
  0073d	0f b6 49 1c	 movzx	 ecx, BYTE PTR [rcx+28]
  00741	88 48 0b	 mov	 BYTE PTR [rax+11], cl

; 778  :                   rdc->mdr      = pDevInitTab->MDR;

  00744	48 8b 44 24 60	 mov	 rax, QWORD PTR rdc$[rsp]
  00749	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDevInitTab$[rsp]
  0074e	0f b6 49 18	 movzx	 ecx, BYTE PTR [rcx+24]
  00752	88 48 28	 mov	 BYTE PTR [rax+40], cl

; 779  :                   rdc->obr      = pDevInitTab->OBR;

  00755	48 8b 44 24 60	 mov	 rax, QWORD PTR rdc$[rsp]
  0075a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDevInitTab$[rsp]
  0075f	0f b6 49 19	 movzx	 ecx, BYTE PTR [rcx+25]
  00763	88 48 29	 mov	 BYTE PTR [rax+41], cl

; 780  :                   rdc->mvscode  = pDevInitTab->mvscode;

  00766	48 8b 44 24 60	 mov	 rax, QWORD PTR rdc$[rsp]
  0076b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDevInitTab$[rsp]
  00770	0f b6 49 1a	 movzx	 ecx, BYTE PTR [rcx+26]
  00774	88 48 2a	 mov	 BYTE PTR [rax+42], cl

; 781  : 
; 782  :         /* Set maximum blocksize and default blocksize values */
; 783  :         STORE_FW( rdc->maxblk, pDevInitTab->maxblk );

  00777	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  0077c	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  0077f	e8 00 00 00 00	 call	 _byteswap_ulong
  00784	48 8b 4c 24 60	 mov	 rcx, QWORD PTR rdc$[rsp]
  00789	48 83 c1 2b	 add	 rcx, 43			; 0000002bH
  0078d	8b d0		 mov	 edx, eax
  0078f	e8 00 00 00 00	 call	 store_fw_noswap

; 784  :         STORE_FW( rdc->recblk, pDevInitTab->recblk );

  00794	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  00799	8b 48 14	 mov	 ecx, DWORD PTR [rax+20]
  0079c	e8 00 00 00 00	 call	 _byteswap_ulong
  007a1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR rdc$[rsp]
  007a6	48 83 c1 2f	 add	 rcx, 47			; 0000002fH
  007aa	8b d0		 mov	 edx, eax
  007ac	e8 00 00 00 00	 call	 store_fw_noswap
$LN34@tapedev_in:

; 785  :     }
; 786  : 
; 787  :     /* Initialize other fields */
; 788  : //  dev->numdevid            = pDevInitTab->numdevid;   // (we already did this)
; 789  :     dev->numsense            = pDevInitTab->numsense;

  007b1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007b9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pDevInitTab$[rsp]
  007be	8b 49 24	 mov	 ecx, DWORD PTR [rcx+36]
  007c1	89 88 60 03 00
	00		 mov	 DWORD PTR [rax+864], ecx

; 790  :     dev->tdparms.displayfeat = pDevInitTab->displayfeat;

  007c7	48 8b 44 24 50	 mov	 rax, QWORD PTR pDevInitTab$[rsp]
  007cc	8b 40 2c	 mov	 eax, DWORD PTR [rax+44]
  007cf	83 e0 01	 and	 eax, 1
  007d2	c1 e0 09	 shl	 eax, 9
  007d5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  007dd	8b 89 30 10 00
	00		 mov	 ecx, DWORD PTR [rcx+4144]
  007e3	0f ba f1 09	 btr	 ecx, 9
  007e7	0b c8		 or	 ecx, eax
  007e9	8b c1		 mov	 eax, ecx
  007eb	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  007f3	89 81 30 10 00
	00		 mov	 DWORD PTR [rcx+4144], eax

; 791  :     dev->fenced              = 0;   // (always, initially)

  007f9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00801	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00807	83 e0 fe	 and	 eax, -2			; fffffffeH
  0080a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00812	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 792  :     dev->SIC_active          = 0;   // (always, initially)

  00818	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00820	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00826	83 e0 f7	 and	 eax, -9			; fffffff7H
  00829	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00831	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 793  :     dev->forced_logging      = 0;   // (always, initially)

  00837	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0083f	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00845	83 e0 ef	 and	 eax, -17		; ffffffefH
  00848	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00850	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 794  :     dev->noautomount         = 0;   // (always, initially)

  00856	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0085e	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00864	83 e0 bf	 and	 eax, -65		; ffffffbfH
  00867	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0086f	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 795  : 
; 796  :     /* Clear the DPA */
; 797  :     memset (dev->pgid, 0, sizeof(dev->pgid));

  00875	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0087d	48 05 ad 05 00
	00		 add	 rax, 1453		; 000005adH
  00883	48 8b f8	 mov	 rdi, rax
  00886	33 c0		 xor	 eax, eax
  00888	b9 0b 00 00 00	 mov	 ecx, 11
  0088d	f3 aa		 rep stosb

; 798  :     /* Clear Drive password - Adrian */
; 799  :     memset (dev->drvpwd, 0, sizeof(dev->drvpwd));

  0088f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00897	48 05 e8 05 00
	00		 add	 rax, 1512		; 000005e8H
  0089d	48 8b f8	 mov	 rdi, rax
  008a0	33 c0		 xor	 eax, eax
  008a2	b9 0b 00 00 00	 mov	 ecx, 11
  008a7	f3 aa		 rep stosb

; 800  : 
; 801  :     /* Request the channel to merge data chained write CCWs into
; 802  :        a single buffer before passing data to the device handler */
; 803  :     dev->cdwmerge = 1;

  008a9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008b1	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  008b7	0f ba e8 10	 bts	 eax, 16
  008bb	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  008c3	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 804  : 
; 805  :     /* Request a maximum sized device I/O buffer */
; 806  :     dev->bufsize = MAX_TAPE_BLKSIZE;

  008c9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008d1	c7 80 d8 01 00
	00 00 00 20 00	 mov	 DWORD PTR [rax+472], 2097152 ; 00200000H

; 807  : 
; 808  :     /* ISW */
; 809  :     /* Build a 'clear' sense */
; 810  :     memset (dev->sense, 0, sizeof(dev->sense));

  008db	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008e3	48 05 64 03 00
	00		 add	 rax, 868		; 00000364H
  008e9	48 8b f8	 mov	 rdi, rax
  008ec	33 c0		 xor	 eax, eax
  008ee	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  008f3	f3 aa		 rep stosb

; 811  :     dev->sns_pending = 0;

  008f5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008fd	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00903	83 e0 fb	 and	 eax, -5			; fffffffbH
  00906	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0090e	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 812  : 
; 813  :     // Initialize the [non-SCSI] auto-loader...
; 814  : 
; 815  :     //-----------------------------------------------------------------
; 816  :     //                IMPORTANT PROGRAMMING NOTE!
; 817  :     //-----------------------------------------------------------------
; 818  :     //    "dev->tapedevt" is still uninitialized at this point!
; 819  :     //-----------------------------------------------------------------
; 820  :     // We don't know yet what type of tape device we're dealing with
; 821  :     // (SCSI (non-virtual) or non-SCSI (virtual)) since 'mountnewtape'
; 822  :     // hasn't been called yet (which determines the media handler to
; 823  :     // be used and initializes dev->tapedevt).  The only thing we know
; 824  :     // (or WILL know once 'autoload_init' is called) is whether or not
; 825  :     // there was a [non-SCSI] auto-loader defined for the device.
; 826  :     //-----------------------------------------------------------------
; 827  : 
; 828  :     autoload_init( dev, argc, argv );

  00914	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  0091c	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  00923	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0092b	e8 00 00 00 00	 call	 autoload_init

; 829  : 
; 830  :     // Was an auto-loader defined for this device?
; 831  :     if ( !dev->als )

  00930	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00938	48 83 b8 e8 10
	00 00 00	 cmp	 QWORD PTR [rax+4328], 0
  00940	75 22		 jne	 SHORT $LN35@tapedev_in

; 832  :     {
; 833  :         // No. Just mount whatever tape there is (if any)...
; 834  :         rc = mountnewtape( dev, argc, argv );

  00942	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  0094a	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  00951	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00959	e8 00 00 00 00	 call	 mountnewtape
  0095e	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 835  :     }

  00962	eb 70		 jmp	 SHORT $LN36@tapedev_in
$LN35@tapedev_in:

; 836  :     else
; 837  :     {
; 838  :         // Yes. Try mounting the FIRST auto-loader slot...
; 839  :         if ( (rc = autoload_mount_first( dev )) != 0 )

  00964	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0096c	e8 00 00 00 00	 call	 autoload_mount_first
  00971	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax
  00975	83 7c 24 58 00	 cmp	 DWORD PTR rc$[rsp], 0
  0097a	74 58		 je	 SHORT $LN37@tapedev_in
$LN11@tapedev_in:

; 840  :         {
; 841  :             // If that doesn't work, try subsequent slots...
; 842  :             while
; 843  :             (
; 844  :                 dev->als
; 845  :                 &&

  0097c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00984	48 83 b8 e8 10
	00 00 00	 cmp	 QWORD PTR [rax+4328], 0
  0098c	74 1a		 je	 SHORT $LN12@tapedev_in
  0098e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00996	e8 00 00 00 00	 call	 autoload_mount_next
  0099b	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax
  0099f	83 7c 24 58 00	 cmp	 DWORD PTR rc$[rsp], 0
  009a4	74 02		 je	 SHORT $LN12@tapedev_in

; 846  :                 (rc = autoload_mount_next( dev )) != 0
; 847  :             )
; 848  :             {
; 849  :                 ;  // (nop; just go on to next slot)
; 850  :             }

  009a6	eb d4		 jmp	 SHORT $LN11@tapedev_in
$LN12@tapedev_in:

; 851  :             rc = dev->als ? rc : -1;

  009a8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009b0	48 83 b8 e8 10
	00 00 00	 cmp	 QWORD PTR [rax+4328], 0
  009b8	74 0a		 je	 SHORT $LN48@tapedev_in
  009ba	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
  009be	89 44 24 70	 mov	 DWORD PTR tv438[rsp], eax
  009c2	eb 08		 jmp	 SHORT $LN49@tapedev_in
$LN48@tapedev_in:
  009c4	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR tv438[rsp], -1
$LN49@tapedev_in:
  009cc	8b 44 24 70	 mov	 eax, DWORD PTR tv438[rsp]
  009d0	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax
$LN37@tapedev_in:
$LN36@tapedev_in:

; 852  :         }
; 853  :     }
; 854  : 
; 855  : #if defined(OPTION_SCSI_TAPE)
; 856  :     /* Initialize SCSI tape status field (must not do
; 857  :        this until AFTER mountnewtape has been called
; 858  :        since dev->stape_online is otherwise undefined) */
; 859  :     dev->sstat = dev->stape_online ? 0 : GMT_DR_OPEN( -1 );

  009d4	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009dc	8b 80 98 10 00
	00		 mov	 eax, DWORD PTR [rax+4248]
  009e2	c1 e8 03	 shr	 eax, 3
  009e5	83 e0 01	 and	 eax, 1
  009e8	85 c0		 test	 eax, eax
  009ea	74 0a		 je	 SHORT $LN50@tapedev_in
  009ec	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv444[rsp], 0
  009f4	eb 08		 jmp	 SHORT $LN51@tapedev_in
$LN50@tapedev_in:
  009f6	c7 44 24 74 00
	00 04 00	 mov	 DWORD PTR tv444[rsp], 262144 ; 00040000H
$LN51@tapedev_in:
  009fe	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a06	8b 4c 24 74	 mov	 ecx, DWORD PTR tv444[rsp]
  00a0a	89 88 88 10 00
	00		 mov	 DWORD PTR [rax+4232], ecx

; 860  : #endif
; 861  : 
; 862  :     /* Request a maximum sized device I/O buffer */
; 863  :     dev->bufsize = MAX_TAPE_BLKSIZE;

  00a10	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a18	c7 80 d8 01 00
	00 00 00 20 00	 mov	 DWORD PTR [rax+472], 2097152 ; 00200000H

; 864  : 
; 865  :     /* Make attention pending if necessary */
; 866  :     if (!dev->reinit || rc < 0)

  00a22	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a2a	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00a30	c1 e8 12	 shr	 eax, 18
  00a33	83 e0 01	 and	 eax, 1
  00a36	85 c0		 test	 eax, eax
  00a38	74 07		 je	 SHORT $LN40@tapedev_in
  00a3a	83 7c 24 58 00	 cmp	 DWORD PTR rc$[rsp], 0
  00a3f	7d 4a		 jge	 SHORT $LN38@tapedev_in
$LN40@tapedev_in:
$LN15@tapedev_in:

; 867  :     {
; 868  :         TRACE( "+++ NOT calling device_attention( 0x%04.4X, CSW_DE )\n", dev->devnum );

  00a41	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a49	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00a4d	8b d0		 mov	 edx, eax
  00a4f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169422
  00a56	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00a5c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00a62	85 c0		 test	 eax, eax
  00a64	74 1a		 je	 SHORT $LN41@tapedev_in
  00a66	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a6e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00a72	8b d0		 mov	 edx, eax
  00a74	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169424
  00a7b	e8 00 00 00 00	 call	 DebuggerTrace
$LN41@tapedev_in:
  00a80	33 c0		 xor	 eax, eax
  00a82	85 c0		 test	 eax, eax
  00a84	75 bb		 jne	 SHORT $LN15@tapedev_in

; 869  :     }

  00a86	e9 91 00 00 00	 jmp	 $LN39@tapedev_in
$LN38@tapedev_in:
$LN18@tapedev_in:

; 870  :     else // (dev->reinit && rc >= 0)
; 871  :     {
; 872  :         TRACE( "+++ CALLING device_attention( 0x%04.4X, CSW_DE )\n", dev->devnum );

  00a8b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a93	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00a97	8b d0		 mov	 edx, eax
  00a99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169425
  00aa0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  00aa6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00aac	85 c0		 test	 eax, eax
  00aae	74 1a		 je	 SHORT $LN42@tapedev_in
  00ab0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ab8	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00abc	8b d0		 mov	 edx, eax
  00abe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169427
  00ac5	e8 00 00 00 00	 call	 DebuggerTrace
$LN42@tapedev_in:
  00aca	33 c0		 xor	 eax, eax
  00acc	85 c0		 test	 eax, eax
  00ace	75 bb		 jne	 SHORT $LN18@tapedev_in

; 873  : 
; 874  :         release_lock( &dev->lock );

  00ad0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ad8	48 83 c0 38	 add	 rax, 56			; 00000038H
  00adc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169428
  00ae3	48 8b c8	 mov	 rcx, rax
  00ae6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 875  :         {
; 876  :             rc = device_attention( dev, CSW_DE );

  00aec	b2 04		 mov	 dl, 4
  00aee	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00af6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_device_attention
  00afc	89 44 24 58	 mov	 DWORD PTR rc$[rsp], eax

; 877  :         }
; 878  :         obtain_lock( &dev->lock );

  00b00	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b08	48 83 c0 38	 add	 rax, 56			; 00000038H
  00b0c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169429
  00b13	48 8b c8	 mov	 rcx, rax
  00b16	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock
$LN39@tapedev_in:

; 879  :     }
; 880  : 
; 881  :     return rc;

  00b1c	8b 44 24 58	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@tapedev_in:

; 882  : 
; 883  : } /* end function tapedev_init_handler */

  00b20	48 81 c4 90 00
	00 00		 add	 rsp, 144		; 00000090H
  00b27	5f		 pop	 rdi
  00b28	c3		 ret	 0
tapedev_init_handler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_fw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_fw_noswap PROC					; COMDAT

; 764  :     inline void store_fw_noswap(void *ptr, U32 value) {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 765  :       memcpy((BYTE *)ptr, (BYTE *)&value, 4);

  00009	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 4c 24 10	 mov	 ecx, DWORD PTR value$[rsp]
  00012	89 08		 mov	 DWORD PTR [rax], ecx

; 766  :     }

  00014	c3		 ret	 0
store_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_hw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_hw_noswap PROC					; COMDAT

; 730  :     inline void store_hw_noswap(void *ptr, U16 value) {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 731  :       memcpy((BYTE *)ptr, (BYTE *)&value, 2);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	0f b7 4c 24 10	 movzx	 ecx, WORD PTR value$[rsp]
  00014	66 89 08	 mov	 WORD PTR [rax], cx

; 732  :     }

  00017	c3		 ret	 0
store_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
