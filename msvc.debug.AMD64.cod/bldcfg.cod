; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	build_config
PUBLIC	init_sysblk_netdev
EXTRN	__imp_strdup:PROC
EXTRN	__imp_ptt_trace_init:PROC
EXTRN	__imp_are_elevated:PROC
EXTRN	csr_reset:PROC
EXTRN	tt32_get_default_iface:PROC
EXTRN	process_config:PROC
EXTRN	configure_numcpu:PROC
EXTRN	configure_storage:PROC
EXTRN	losc_set:PROC
EXTRN	renew_wrapping_keys:PROC
EXTRN	init_default_archmode:PROC
EXTRN	init_facilities_lists:PROC
EXTRN	__imp_sysblk:BYTE
_BSS	SEGMENT
$SG199022 DB	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$build_config DD imagerel $LN14
	DD	imagerel $LN14+446
	DD	imagerel $unwind$build_config
$pdata$init_sysblk_netdev DD imagerel $LN6
	DD	imagerel $LN6+93
	DD	imagerel $unwind$init_sysblk_netdev
pdata	ENDS
xdata	SEGMENT
$unwind$build_config DD 010901H
	DD	06209H
$unwind$init_sysblk_netdev DD 010401H
	DD	06204H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\bldcfg.c
_TEXT	SEGMENT
tv72 = 32
init_sysblk_netdev PROC

; 138  : {

$LN6:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 139  :     if (!sysblk.netdev)

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0000b	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00010	75 3b		 jne	 SHORT $LN2@init_sysbl

; 140  :     {
; 141  :         /* Initialize default NETDEV */
; 142  : 
; 143  : #if defined( __APPLE__ ) || defined( FREEBSD_OR_NETBSD )
; 144  : 
; 145  :         sysblk.netdev = strdup( "/dev/tun" );
; 146  : 
; 147  : #elif !defined( OPTION_W32_CTCI )
; 148  : 
; 149  :         sysblk.netdev = strdup( "/dev/net/tun" );
; 150  : 
; 151  : #else // defined( OPTION_W32_CTCI )
; 152  : 
; 153  :         sysblk.netdev = strdup( are_elevated() ? tt32_get_default_iface() : "" );

  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_are_elevated
  00018	0f b6 c0	 movzx	 eax, al
  0001b	85 c0		 test	 eax, eax
  0001d	74 0c		 je	 SHORT $LN4@init_sysbl
  0001f	e8 00 00 00 00	 call	 tt32_get_default_iface
  00024	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
  00029	eb 0c		 jmp	 SHORT $LN5@init_sysbl
$LN4@init_sysbl:
  0002b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG199022
  00032	48 89 44 24 20	 mov	 QWORD PTR tv72[rsp], rax
$LN5@init_sysbl:
  00037	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv72[rsp]
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00042	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  00049	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax
$LN2@init_sysbl:

; 154  : #endif
; 155  :     }
; 156  :     return sysblk.netdev;

  0004d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00054	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]

; 157  : }

  00058	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005c	c3		 ret	 0
init_sysblk_netdev ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\bldcfg.c
_TEXT	SEGMENT
i$ = 32
tv137 = 36
hercules_cnf$ = 64
build_config PROC

; 66   : {

$LN14:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 67   :     int i;
; 68   : 
; 69   :     /*  From impl.c, using system defaults of:
; 70   :      *
; 71   :      *      LPARNUM  1       # LPAR 1 with LPAR ID 01
; 72   :      *      CPUIDFMT 0       # CPU ID format 0
; 73   :      *      XPNDSIZE 0       # Expanded storage size
; 74   :      */
; 75   : 
; 76   :     sysblk.xpndsize = 0;

  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00010	c7 80 ac 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+172], 0

; 77   : 
; 78   :     /* Set sysblk.maxcpu to our preferred default value, if possible */
; 79   : #if (PREF_DEF_MAXCPU <= MAX_CPU_ENGS)
; 80   :     sysblk.maxcpu = PREF_DEF_MAXCPU;

  0001a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00021	c7 80 00 01 00
	00 08 00 00 00	 mov	 DWORD PTR [rax+256], 8

; 81   : #else
; 82   :     WARNING( "sysblk.maxcpu reduced from " QSTR( PREF_DEF_MAXCPU ) " to " QSTR( MAX_CPU_ENGS ))
; 83   :     sysblk.maxcpu = MAX_CPU_ENGS;
; 84   : #endif
; 85   : 
; 86   : #if defined( _FEATURE_S370_S390_VECTOR_FACILITY )
; 87   :     sysblk.numvec = sysblk.maxcpu;
; 88   : #else
; 89   :     sysblk.numvec = 0;

  0002b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00032	c7 80 fc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+252], 0

; 90   : #endif
; 91   : 
; 92   :     init_default_archmode();

  0003c	e8 00 00 00 00	 call	 init_default_archmode

; 93   : 
; 94   :     if (!init_facilities_lists())

  00041	e8 00 00 00 00	 call	 init_facilities_lists
  00046	0f b6 c0	 movzx	 eax, al
  00049	85 c0		 test	 eax, eax
  0004b	75 0a		 jne	 SHORT $LN8@build_conf

; 95   :         return -1; // (error message already issued)

  0004d	b8 ff ff ff ff	 mov	 eax, -1
  00052	e9 62 01 00 00	 jmp	 $LN1@build_conf
$LN8@build_conf:

; 96   : 
; 97   :     ptt_trace_init( 0, TRUE );

  00057	ba 01 00 00 00	 mov	 edx, 1
  0005c	33 c9		 xor	 ecx, ecx
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ptt_trace_init

; 98   : 
; 99   :     /* Set max number device threads */
; 100  :     sysblk.devtmax  = MAX_DEVICE_THREADS;

  00064	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0006b	c7 80 50 12 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4688], 0

; 101  :     sysblk.devtwait = sysblk.devtnbr =

  00075	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0007c	c7 80 58 12 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4696], 0
  00086	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0008d	c7 80 54 12 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4692], 0
  00097	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0009e	c7 80 4c 12 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4684], 0
  000a8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000af	c7 80 48 12 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4680], 0

; 102  :     sysblk.devthwm  = sysblk.devtunavail = 0;
; 103  : 
; 104  :     /* Default the licence setting */
; 105  :     losc_set( PGM_PRD_OS_RESTRICTED );

  000b9	b9 04 00 00 00	 mov	 ecx, 4
  000be	e8 00 00 00 00	 call	 losc_set

; 106  : 
; 107  :     /* Reset the clock steering registers */
; 108  :     csr_reset();

  000c3	e8 00 00 00 00	 call	 csr_reset

; 109  : 
; 110  :     /* Default CPU type CP */
; 111  :     for (i=0; i < sysblk.maxcpu; i++)

  000c8	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000d0	eb 0a		 jmp	 SHORT $LN4@build_conf
$LN2@build_conf:
  000d2	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000d6	ff c0		 inc	 eax
  000d8	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@build_conf:
  000dc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000e3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e9	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  000ed	7d 16		 jge	 SHORT $LN3@build_conf

; 112  :         sysblk.ptyp[i] = SCCB_PTYP_CP;

  000ef	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000f4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  000fb	c6 84 01 48 0b
	00 00 00	 mov	 BYTE PTR [rcx+rax+2888], 0
  00103	eb cd		 jmp	 SHORT $LN2@build_conf
$LN3@build_conf:

; 113  : 
; 114  :     /* Default main storage to 2M with one CPU */
; 115  :     configure_storage( DEF_MAINSIZE_PAGES );

  00105	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  0010a	e8 00 00 00 00	 call	 configure_storage

; 116  :     configure_numcpu( 1 );

  0010f	b9 01 00 00 00	 mov	 ecx, 1
  00114	e8 00 00 00 00	 call	 configure_numcpu

; 117  : 
; 118  :     if (hercules_cnf && (process_config( hercules_cnf )))

  00119	48 83 7c 24 40
	00		 cmp	 QWORD PTR hercules_cnf$[rsp], 0
  0011f	74 18		 je	 SHORT $LN9@build_conf
  00121	48 8b 4c 24 40	 mov	 rcx, QWORD PTR hercules_cnf$[rsp]
  00126	e8 00 00 00 00	 call	 process_config
  0012b	85 c0		 test	 eax, eax
  0012d	74 0a		 je	 SHORT $LN9@build_conf

; 119  :         return -1; // (error message already issued)

  0012f	b8 ff ff ff ff	 mov	 eax, -1
  00134	e9 80 00 00 00	 jmp	 $LN1@build_conf
$LN9@build_conf:

; 120  : 
; 121  :     /* Connect each channel set to its home cpu */
; 122  :     for (i=0; i < sysblk.maxcpu; i++)

  00139	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00141	eb 0a		 jmp	 SHORT $LN7@build_conf
$LN5@build_conf:
  00143	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00147	ff c0		 inc	 eax
  00149	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@build_conf:
  0014d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00154	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0015a	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0015e	7d 52		 jge	 SHORT $LN6@build_conf

; 123  :         if (IS_CPU_ONLINE(i))

  00160	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00165	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0016c	48 83 bc c1 98
	0b 00 00 00	 cmp	 QWORD PTR [rcx+rax*8+2968], 0
  00175	74 39		 je	 SHORT $LN10@build_conf

; 124  :             sysblk.regs[i]->chanset = i < FEATURE_LCSS_MAX ? i : 0xFFFF;

  00177	83 7c 24 20 04	 cmp	 DWORD PTR i$[rsp], 4
  0017c	7d 0a		 jge	 SHORT $LN12@build_conf
  0017e	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00182	89 44 24 24	 mov	 DWORD PTR tv137[rsp], eax
  00186	eb 08		 jmp	 SHORT $LN13@build_conf
$LN12@build_conf:
  00188	c7 44 24 24 ff
	ff 00 00	 mov	 DWORD PTR tv137[rsp], 65535 ; 0000ffffH
$LN13@build_conf:
  00190	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00195	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR __imp_sysblk
  0019c	48 8b 84 c1 98
	0b 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+2968]
  001a4	0f b7 4c 24 24	 movzx	 ecx, WORD PTR tv137[rsp]
  001a9	66 89 88 38 08
	00 00		 mov	 WORD PTR [rax+2104], cx
$LN10@build_conf:
  001b0	eb 91		 jmp	 SHORT $LN5@build_conf
$LN6@build_conf:

; 125  : 
; 126  :     /* Initialize Crypto Wrapping Keys */
; 127  : #if defined( _FEATURE_076_MSA_EXTENSION_FACILITY_3 ) // (underscore!)
; 128  :     renew_wrapping_keys();

  001b2	e8 00 00 00 00	 call	 renew_wrapping_keys

; 129  : #endif
; 130  : 
; 131  :     return 0;

  001b7	33 c0		 xor	 eax, eax
$LN1@build_conf:

; 132  : } /* end function build_config */

  001b9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001bd	c3		 ret	 0
build_config ENDP
_TEXT	ENDS
END
