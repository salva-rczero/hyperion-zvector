; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	s390_translate_and_test_extended
PUBLIC	s390_translate_and_test_reverse_extended
PUBLIC	s390_add_immediate_long_storage
PUBLIC	s390_add_immediate_storage
PUBLIC	s390_add_logical_with_signed_immediate
PUBLIC	s390_add_logical_with_signed_immediate_long
PUBLIC	s390_compare_and_branch_register
PUBLIC	s390_compare_and_branch_relative_register
PUBLIC	s390_compare_and_trap_register
PUBLIC	s390_compare_halfword_immediate_halfword_storage
PUBLIC	s390_compare_halfword_immediate_long_storage
PUBLIC	s390_compare_halfword_immediate_storage
PUBLIC	s390_compare_halfword_relative_long
PUBLIC	s390_compare_immediate_and_branch
PUBLIC	s390_compare_immediate_and_branch_relative
PUBLIC	s390_compare_immediate_and_trap
PUBLIC	s390_compare_logical_and_branch_register
PUBLIC	s390_compare_logical_and_branch_relative_register
PUBLIC	s390_compare_logical_and_trap_register
PUBLIC	s390_compare_logical_immediate_and_branch
PUBLIC	s390_compare_logical_immediate_and_branch_relative
PUBLIC	s390_compare_logical_immediate_and_trap_fullword
PUBLIC	s390_compare_logical_immediate_fullword_storage
PUBLIC	s390_compare_logical_immediate_halfword_storage
PUBLIC	s390_compare_logical_immediate_long_storage
PUBLIC	s390_compare_logical_relative_long
PUBLIC	s390_compare_logical_relative_long_halfword
PUBLIC	s390_compare_relative_long
PUBLIC	s390_load_halfword_relative_long
PUBLIC	s390_load_logical_halfword_relative_long
PUBLIC	s390_load_relative_long
PUBLIC	s390_move_fullword_from_halfword_immediate
PUBLIC	s390_move_halfword_from_halfword_immediate
PUBLIC	s390_move_long_from_halfword_immediate
PUBLIC	s390_multiply_single_immediate_fullword
PUBLIC	s390_prefetch_data
PUBLIC	s390_prefetch_data_relative_long
PUBLIC	s390_store_halfword_relative_long
PUBLIC	s390_store_relative_long
PUBLIC	s390_execute_relative_long
PUBLIC	s390_convert_bfp_ext_to_u32_reg
PUBLIC	s390_convert_bfp_long_to_u32_reg
PUBLIC	s390_convert_bfp_short_to_u32_reg
PUBLIC	s390_convert_dfp_ext_to_fix32_reg
PUBLIC	s390_convert_dfp_ext_to_u32_reg
PUBLIC	s390_convert_dfp_long_to_fix32_reg
PUBLIC	s390_convert_dfp_long_to_u32_reg
PUBLIC	s390_convert_fix32_to_dfp_ext_reg
PUBLIC	s390_convert_fix32_to_dfp_long_reg
PUBLIC	s390_convert_u32_to_bfp_ext_reg
PUBLIC	s390_convert_u32_to_bfp_long_reg
PUBLIC	s390_convert_u32_to_bfp_short_reg
PUBLIC	s390_convert_u32_to_dfp_ext_reg
PUBLIC	s390_convert_u32_to_dfp_long_reg
PUBLIC	s390_set_bfp_rounding_mode_3bit
PUBLIC	s390_set_dfp_rounding_mode
PUBLIC	s390_copy_sign_fpr_long_reg
PUBLIC	s390_load_complement_fpr_long_reg
PUBLIC	s390_load_negative_fpr_long_reg
PUBLIC	s390_load_positive_fpr_long_reg
PUBLIC	s390_load_fpc_and_signal
PUBLIC	iprint_ASMFMT_b2xx
PUBLIC	s390_set_fpc_and_signal
PUBLIC	s390_add_dfp_ext_reg
PUBLIC	s390_add_dfp_long_reg
PUBLIC	s390_compare_dfp_ext_reg
PUBLIC	s390_compare_dfp_long_reg
PUBLIC	s390_compare_and_signal_dfp_ext_reg
PUBLIC	iprint_ASMFMT_01xx
PUBLIC	s390_compare_and_signal_dfp_long_reg
PUBLIC	s390_compare_exponent_dfp_ext_reg
PUBLIC	s390_compare_exponent_dfp_long_reg
PUBLIC	iprint_ASMFMT_a5_x
PUBLIC	s390_convert_fix64_to_dfp_ext_reg
PUBLIC	s390_convert_fix64_to_dfp_long_reg
PUBLIC	s390_convert_sbcd128_to_dfp_ext_reg
PUBLIC	iprint_ASMFMT_a7_x
PUBLIC	s390_convert_sbcd64_to_dfp_long_reg
PUBLIC	s390_convert_ubcd128_to_dfp_ext_reg
PUBLIC	iprint_ASMFMT_b3xx
PUBLIC	s390_convert_ubcd64_to_dfp_long_reg
PUBLIC	s390_convert_dfp_ext_to_fix64_reg
PUBLIC	s390_convert_dfp_long_to_fix64_reg
PUBLIC	iprint_ASMFMT_b9xx
PUBLIC	s390_convert_dfp_ext_to_sbcd128_reg
PUBLIC	s390_convert_dfp_long_to_sbcd64_reg
PUBLIC	s390_convert_dfp_ext_to_ubcd128_reg
PUBLIC	iprint_ASMFMT_c0_x
PUBLIC	s390_convert_dfp_long_to_ubcd64_reg
PUBLIC	s390_divide_dfp_ext_reg
PUBLIC	s390_divide_dfp_long_reg
PUBLIC	iprint_ASMFMT_c2_x
PUBLIC	s390_extract_biased_exponent_dfp_ext_to_fix64_reg
PUBLIC	s390_extract_biased_exponent_dfp_long_to_fix64_reg
PUBLIC	s390_extract_significance_dfp_ext_reg
PUBLIC	iprint_ASMFMT_c4_x
PUBLIC	s390_extract_significance_dfp_long_reg
PUBLIC	s390_insert_biased_exponent_fix64_to_dfp_ext_reg
PUBLIC	s390_insert_biased_exponent_fix64_to_dfp_long_reg
PUBLIC	iprint_ASMFMT_c6_x
PUBLIC	s390_load_and_test_dfp_ext_reg
PUBLIC	s390_load_and_test_dfp_long_reg
PUBLIC	iprint_ASMFMT_c8_x
PUBLIC	s390_load_fp_int_dfp_ext_reg
PUBLIC	s390_load_fp_int_dfp_long_reg
PUBLIC	s390_load_lengthened_dfp_long_to_ext_reg
PUBLIC	iprint_ASMFMT_cc_x
PUBLIC	s390_load_lengthened_dfp_short_to_long_reg
PUBLIC	s390_load_rounded_dfp_ext_to_long_reg
PUBLIC	s390_load_rounded_dfp_long_to_short_reg
PUBLIC	iprint_ASMFMT_e3xx
PUBLIC	s390_multiply_dfp_ext_reg
PUBLIC	s390_multiply_dfp_long_reg
PUBLIC	s390_quantize_dfp_ext_reg
PUBLIC	iprint_ASMFMT_e5xx
PUBLIC	s390_quantize_dfp_long_reg
PUBLIC	s390_reround_dfp_ext_reg
PUBLIC	s390_reround_dfp_long_reg
PUBLIC	iprint_ASMFMT_e7xx
PUBLIC	s390_shift_coefficient_left_dfp_ext
PUBLIC	s390_shift_coefficient_left_dfp_long
PUBLIC	s390_shift_coefficient_right_dfp_ext
PUBLIC	iprint_ASMFMT_e6xx
PUBLIC	s390_shift_coefficient_right_dfp_long
PUBLIC	s390_subtract_dfp_ext_reg
PUBLIC	iprint_ASMFMT_ebxx
PUBLIC	s390_subtract_dfp_long_reg
PUBLIC	s390_test_data_class_dfp_ext
PUBLIC	s390_test_data_class_dfp_long
PUBLIC	iprint_ASMFMT_ecxx
PUBLIC	s390_test_data_class_dfp_short
PUBLIC	s390_test_data_group_dfp_ext
PUBLIC	s390_test_data_group_dfp_long
PUBLIC	iprint_ASMFMT_edxx
PUBLIC	s390_test_data_group_dfp_short
PUBLIC	s390_add_distinct_register
PUBLIC	s390_add_distinct_halfword_immediate
PUBLIC	s390_add_logical_distinct_register
PUBLIC	s390_add_logical_distinct_signed_halfword_immediate
PUBLIC	s390_and_distinct_register
PUBLIC	s390_exclusive_or_distinct_register
PUBLIC	s390_or_distinct_register
PUBLIC	s390_shift_left_single_distinct
PUBLIC	s390_shift_left_single_logical_distinct
PUBLIC	s390_shift_right_single_distinct
PUBLIC	s390_shift_right_single_logical_distinct
PUBLIC	s390_subtract_distinct_register
PUBLIC	s390_subtract_logical_distinct_register
PUBLIC	s370_operation_exception
PUBLIC	s390_load_and_add
PUBLIC	s390_load_and_add_logical
PUBLIC	s390_load_and_and
PUBLIC	s390_load_and_exclusive_or
PUBLIC	s390_load_and_or
PUBLIC	s390_load_pair_disjoint
PUBLIC	s390_load_on_condition_register
PUBLIC	s390_load_on_condition
PUBLIC	s390_store_on_condition
PUBLIC	z900_operation_exception
PUBLIC	s390_operation_exception
PUBLIC	s390_perform_cryptographic_key_management_operation
PUBLIC	s390_cipher_message_with_cipher_feedback
PUBLIC	s390_cipher_message_with_output_feedback
PUBLIC	s390_cipher_message_with_counter
PUBLIC	s390_perform_cryptographic_computation
PUBLIC	s390_vector_load
PUBLIC	s390_vector_store
PUBLIC	s390_vector_load_multiple
PUBLIC	s390_vector_store_multiple
PUBLIC	s390_v_and_to_vmr
PUBLIC	s390_v_clear_vr
PUBLIC	s390_v_complement_vmr
PUBLIC	s390_v_count_left_zeros_in_vmr
PUBLIC	s390_v_count_ones_in_vmr
PUBLIC	s390_v_exclusive_or_to_vmr
PUBLIC	s390_v_extract_vct
PUBLIC	s390_v_extract_vector_modes
PUBLIC	s390_v_load_vct_from_address
PUBLIC	s390_v_load_vix_from_address
PUBLIC	s390_v_load_vmr
PUBLIC	s390_v_load_vmr_complement
PUBLIC	s390_v_or_to_vmr
PUBLIC	s390_v_restore_vac
PUBLIC	s390_v_restore_vmr
PUBLIC	s390_v_restore_vr
PUBLIC	s390_v_restore_vsr
PUBLIC	s390_v_save_changed_vr
PUBLIC	s390_v_save_vac
PUBLIC	s390_v_save_vmr
PUBLIC	s390_v_save_vr
PUBLIC	s390_v_save_vsr
PUBLIC	s390_v_set_vector_mask_mode
PUBLIC	s390_v_store_vector_parameters
PUBLIC	s390_v_store_vmr
PUBLIC	s390_v_test_vmr
PUBLIC	s390_tcpip
PUBLIC	s390_execute_opcode_e3________xx
PUBLIC	s390_execute_opcode_e7________xx
PUBLIC	s390_execute_opcode_eb________xx
PUBLIC	s390_execute_opcode_ec________xx
PUBLIC	s390_execute_opcode_ed________xx
PUBLIC	s370_vector_load
PUBLIC	s370_vector_store
PUBLIC	s370_vector_load_multiple
PUBLIC	s370_vector_store_multiple
PUBLIC	s370_convert_bfp_long_to_float_long_reg
PUBLIC	s370_convert_bfp_short_to_float_long_reg
PUBLIC	s370_convert_float_long_to_bfp_long_reg
PUBLIC	s370_convert_float_long_to_bfp_short_reg
PUBLIC	s370_load_float_ext_reg
PUBLIC	s370_load_zero_float_ext_reg
PUBLIC	s370_load_zero_float_long_reg
PUBLIC	s370_load_zero_float_short_reg
PUBLIC	z900_cipher_message
PUBLIC	z900_cipher_message_with_chaining
PUBLIC	z900_compute_intermediate_message_digest
PUBLIC	z900_compute_last_message_digest
PUBLIC	z900_compute_message_authentication_code
PUBLIC	s370_v_and_to_vmr
PUBLIC	s370_v_clear_vr
PUBLIC	s370_v_complement_vmr
PUBLIC	s370_v_count_left_zeros_in_vmr
PUBLIC	s370_v_count_ones_in_vmr
PUBLIC	s370_v_exclusive_or_to_vmr
PUBLIC	s370_v_extract_vct
PUBLIC	s370_v_extract_vector_modes
PUBLIC	s370_v_load_vct_from_address
PUBLIC	s370_v_load_vix_from_address
PUBLIC	s370_v_load_vmr
PUBLIC	s370_v_load_vmr_complement
PUBLIC	s370_v_or_to_vmr
PUBLIC	s370_cipher_message
PUBLIC	s370_v_restore_vac
PUBLIC	s370_cipher_message_with_chaining
PUBLIC	s370_v_restore_vmr
PUBLIC	s370_compute_intermediate_message_digest
PUBLIC	s370_v_restore_vr
PUBLIC	s370_compute_last_message_digest
PUBLIC	s370_v_restore_vsr
PUBLIC	s370_compute_message_authentication_code
PUBLIC	s370_v_save_changed_vr
PUBLIC	s370_v_save_vac
PUBLIC	s370_v_save_vmr
PUBLIC	s370_v_save_vr
PUBLIC	s370_v_save_vsr
PUBLIC	s370_v_set_vector_mask_mode
PUBLIC	s370_v_store_vector_parameters
PUBLIC	s370_v_store_vmr
PUBLIC	s370_v_test_vmr
PUBLIC	s370_store_system_information
PUBLIC	s370_execute_opcode_e3________xx
PUBLIC	s370_execute_opcode_e7________xx
PUBLIC	s370_execute_opcode_eb________xx
PUBLIC	s370_execute_opcode_ec________xx
PUBLIC	s370_execute_opcode_ed________xx
PUBLIC	s370_perform_cryptographic_key_management_operation
PUBLIC	s370_perform_cryptographic_computation
PUBLIC	s370_cipher_message_with_cipher_feedback
PUBLIC	s370_cipher_message_with_output_feedback
PUBLIC	s370_cipher_message_with_counter
PUBLIC	z900_perform_cryptographic_key_management_operation
PUBLIC	z900_perform_cryptographic_computation
PUBLIC	z900_cipher_message_with_cipher_feedback
PUBLIC	z900_cipher_message_with_output_feedback
PUBLIC	z900_cipher_message_with_counter
PUBLIC	s390_add_fullword_immediate
PUBLIC	s390_add_logical_fullword_immediate
PUBLIC	s390_compare_fullword_immediate
PUBLIC	s390_cipher_message
PUBLIC	s390_compare_logical_fullword_immediate
PUBLIC	s390_cipher_message_with_chaining
PUBLIC	s390_compute_intermediate_message_digest
PUBLIC	s390_compute_last_message_digest
PUBLIC	s390_compute_message_authentication_code
PUBLIC	s390_load_and_test
PUBLIC	s390_load_byte_register
PUBLIC	s390_load_halfword_register
PUBLIC	s390_load_logical_character
PUBLIC	s390_load_logical_character_register
PUBLIC	s390_load_logical_halfword
PUBLIC	z900_tcpip
PUBLIC	s390_load_logical_halfword_register
PUBLIC	z900_execute_opcode_e3________xx
PUBLIC	z900_execute_opcode_e7________xx
PUBLIC	z900_execute_opcode_eb________xx
PUBLIC	z900_execute_opcode_ec________xx
PUBLIC	z900_execute_opcode_ed________xx
PUBLIC	s390_subtract_logical_fullword_immediate
PUBLIC	s390_convert_utf16_to_utf32
PUBLIC	s390_convert_utf32_to_utf16
PUBLIC	s390_convert_utf32_to_utf8
PUBLIC	s390_convert_utf8_to_utf32
PUBLIC	s390_search_string_unicode
PUBLIC	s390_translate_and_test_reverse
EXTRN	z900_load_and_test_float_short_reg:PROC
EXTRN	s370_branch_relative_on_index_high:PROC
EXTRN	s390_divide_bfp_ext_reg:PROC
EXTRN	z900_load_complement_float_long_reg:PROC
EXTRN	s370_branch_relative_on_index_low_or_equal:PROC
EXTRN	s390_divide_bfp_long:PROC
EXTRN	z900_load_complement_float_short_reg:PROC
EXTRN	s370_compare_halfword_immediate:PROC
EXTRN	s390_divide_bfp_long_reg:PROC
EXTRN	z900_load_float_long:PROC
EXTRN	s370_load_halfword_immediate:PROC
EXTRN	s390_divide_bfp_short:PROC
EXTRN	z900_load_float_long_reg:PROC
EXTRN	s370_multiply_halfword_immediate:PROC
EXTRN	s390_divide_bfp_short_reg:PROC
EXTRN	s370_multiply_single:PROC
EXTRN	z900_load_float_short:PROC
EXTRN	s390_divide_integer_bfp_long_reg:PROC
EXTRN	s370_multiply_single_register:PROC
EXTRN	z900_load_float_short_reg:PROC
EXTRN	s390_divide_integer_bfp_short_reg:PROC
EXTRN	z900_load_negative_float_long_reg:PROC
EXTRN	s370_test_under_mask_high:PROC
EXTRN	s390_extract_fpc:PROC
EXTRN	z900_load_negative_float_short_reg:PROC
EXTRN	s370_test_under_mask_low:PROC
EXTRN	s390_load_and_test_bfp_ext_reg:PROC
EXTRN	z900_load_positive_float_long_reg:PROC
EXTRN	s390_load_and_test_bfp_long_reg:PROC
EXTRN	z900_load_positive_float_short_reg:PROC
EXTRN	s390_load_and_test_bfp_short_reg:PROC
EXTRN	z900_load_rounded_float_long_reg:PROC
EXTRN	s390_load_complement_bfp_ext_reg:PROC
EXTRN	z900_load_rounded_float_short_reg:PROC
EXTRN	s390_load_complement_bfp_long_reg:PROC
EXTRN	z900_multiply_float_ext_reg:PROC
EXTRN	s390_load_complement_bfp_short_reg:PROC
EXTRN	z900_multiply_float_long:PROC
EXTRN	s390_load_fp_int_bfp_ext_reg:PROC
EXTRN	z900_multiply_float_long_reg:PROC
EXTRN	s390_load_fp_int_bfp_long_reg:PROC
EXTRN	z900_multiply_float_long_to_ext:PROC
EXTRN	s390_load_fp_int_bfp_short_reg:PROC
EXTRN	s390_load_fpc:PROC
EXTRN	z900_multiply_float_long_to_ext_reg:PROC
EXTRN	z900_multiply_float_short_to_long:PROC
EXTRN	s390_load_lengthened_bfp_long_to_ext:PROC
EXTRN	z900_multiply_float_short_to_long_reg:PROC
EXTRN	s390_load_lengthened_bfp_long_to_ext_reg:PROC
EXTRN	z900_store_float_long:PROC
EXTRN	s390_load_lengthened_bfp_short_to_ext:PROC
EXTRN	z900_store_float_short:PROC
EXTRN	s390_load_lengthened_bfp_short_to_ext_reg:PROC
EXTRN	z900_subtract_float_ext_reg:PROC
EXTRN	s370_and_immediate_low_high:PROC
EXTRN	s390_load_lengthened_bfp_short_to_long:PROC
EXTRN	z900_subtract_float_long:PROC
EXTRN	s370_and_immediate_low_low:PROC
EXTRN	s390_load_lengthened_bfp_short_to_long_reg:PROC
EXTRN	z900_subtract_float_long_reg:PROC
EXTRN	s390_load_negative_bfp_ext_reg:PROC
EXTRN	z900_subtract_float_short:PROC
EXTRN	s390_load_negative_bfp_long_reg:PROC
EXTRN	z900_subtract_float_short_reg:PROC
EXTRN	s390_load_negative_bfp_short_reg:PROC
EXTRN	z900_subtract_unnormal_float_long:PROC
EXTRN	s390_load_positive_bfp_ext_reg:PROC
EXTRN	z900_subtract_unnormal_float_long_reg:PROC
EXTRN	s390_load_positive_bfp_long_reg:PROC
EXTRN	z900_subtract_unnormal_float_short:PROC
EXTRN	s390_load_positive_bfp_short_reg:PROC
EXTRN	z900_subtract_unnormal_float_short_reg:PROC
EXTRN	s390_load_rounded_bfp_ext_to_long_reg:PROC
EXTRN	z900_load_lengthened_float_short_to_long_reg:PROC
EXTRN	s390_load_rounded_bfp_ext_to_short_reg:PROC
EXTRN	z900_load_lengthened_float_long_to_ext_reg:PROC
EXTRN	s390_load_rounded_bfp_long_to_short_reg:PROC
EXTRN	z900_load_lengthened_float_short_to_ext_reg:PROC
EXTRN	s390_multiply_add_bfp_long:PROC
EXTRN	s390_multiply_add_bfp_long_reg:PROC
EXTRN	z900_squareroot_float_ext_reg:PROC
EXTRN	z900_multiply_float_short_reg:PROC
EXTRN	s390_multiply_add_bfp_short:PROC
EXTRN	s390_multiply_add_bfp_short_reg:PROC
EXTRN	z900_load_positive_float_ext_reg:PROC
EXTRN	s390_multiply_bfp_ext_reg:PROC
EXTRN	z900_load_negative_float_ext_reg:PROC
EXTRN	z900_load_and_test_float_ext_reg:PROC
EXTRN	s390_multiply_bfp_long:PROC
EXTRN	s390_multiply_bfp_long_reg:PROC
EXTRN	z900_load_complement_float_ext_reg:PROC
EXTRN	z900_load_rounded_float_ext_to_short_reg:PROC
EXTRN	s390_multiply_bfp_long_to_ext:PROC
EXTRN	s390_multiply_bfp_long_to_ext_reg:PROC
EXTRN	z900_load_fp_int_float_ext_reg:PROC
EXTRN	z900_compare_float_ext_reg:PROC
EXTRN	s390_multiply_bfp_short:PROC
EXTRN	s390_multiply_bfp_short_reg:PROC
EXTRN	z900_load_fp_int_float_short_reg:PROC
EXTRN	z900_load_fp_int_float_long_reg:PROC
EXTRN	s390_multiply_bfp_short_to_long:PROC
EXTRN	s390_multiply_bfp_short_to_long_reg:PROC
EXTRN	z900_convert_fixed_to_float_short_reg:PROC
EXTRN	z900_convert_fixed_to_float_long_reg:PROC
EXTRN	s390_multiply_subtract_bfp_long:PROC
EXTRN	s390_multiply_subtract_bfp_long_reg:PROC
EXTRN	z900_convert_fixed_to_float_ext_reg:PROC
EXTRN	z900_convert_float_short_to_fixed_reg:PROC
EXTRN	s390_multiply_subtract_bfp_short:PROC
EXTRN	s390_multiply_subtract_bfp_short_reg:PROC
EXTRN	z900_convert_float_long_to_fixed_reg:PROC
EXTRN	s390_set_bfp_rounding_mode_2bit:PROC
EXTRN	z900_convert_float_ext_to_fixed_reg:PROC
EXTRN	s390_set_fpc:PROC
EXTRN	z900_load_lengthened_float_short_to_long:PROC
EXTRN	s390_squareroot_bfp_ext_reg:PROC
EXTRN	z900_load_lengthened_float_long_to_ext:PROC
EXTRN	s390_squareroot_bfp_long:PROC
EXTRN	z900_load_lengthened_float_short_to_ext:PROC
EXTRN	s390_squareroot_bfp_long_reg:PROC
EXTRN	z900_squareroot_float_short:PROC
EXTRN	s390_squareroot_bfp_short:PROC
EXTRN	z900_squareroot_float_long:PROC
EXTRN	s390_squareroot_bfp_short_reg:PROC
EXTRN	z900_multiply_float_short:PROC
EXTRN	s390_store_fpc:PROC
EXTRN	z900_add_halfword_immediate:PROC
EXTRN	z900_branch_relative_and_save:PROC
EXTRN	s390_subtract_bfp_ext_reg:PROC
EXTRN	z900_branch_relative_on_condition:PROC
EXTRN	s390_subtract_bfp_long:PROC
EXTRN	z900_branch_relative_on_count:PROC
EXTRN	s390_subtract_bfp_long_reg:PROC
EXTRN	z900_branch_relative_on_index_high:PROC
EXTRN	s390_subtract_bfp_short:PROC
EXTRN	z900_branch_relative_on_index_low_or_equal:PROC
EXTRN	s390_subtract_bfp_short_reg:PROC
EXTRN	z900_compare_halfword_immediate:PROC
EXTRN	s390_test_data_class_bfp_ext:PROC
EXTRN	z900_load_halfword_immediate:PROC
EXTRN	s390_test_data_class_bfp_long:PROC
EXTRN	z900_multiply_halfword_immediate:PROC
EXTRN	s390_test_data_class_bfp_short:PROC
EXTRN	s390_branch_and_set_authority:PROC
EXTRN	z900_multiply_single:PROC
EXTRN	s370_insert_immediate_low_high:PROC
EXTRN	s390_compare_and_swap_and_purge:PROC
EXTRN	z900_multiply_single_register:PROC
EXTRN	s370_insert_immediate_low_low:PROC
EXTRN	s390_cancel_subchannel:PROC
EXTRN	z900_test_under_mask_high:PROC
EXTRN	s390_clear_subchannel:PROC
EXTRN	z900_test_under_mask_low:PROC
EXTRN	s390_halt_subchannel:PROC
EXTRN	z900_start_interpretive_execution:PROC
EXTRN	s390_modify_subchannel:PROC
EXTRN	z900_test_pending_zone_interrupt:PROC
EXTRN	s390_resume_subchannel:PROC
EXTRN	z900_branch_and_stack:PROC
EXTRN	s390_set_address_limit:PROC
EXTRN	z900_extract_stacked_registers:PROC
EXTRN	s390_set_channel_monitor:PROC
EXTRN	z900_extract_stacked_state:PROC
EXTRN	s390_reset_channel_path:PROC
EXTRN	z900_modify_stacked_state:PROC
EXTRN	s370_load_logical_immediate_low_high:PROC
EXTRN	s390_start_subchannel:PROC
EXTRN	z900_program_return:PROC
EXTRN	s370_load_logical_immediate_low_low:PROC
EXTRN	s390_store_channel_path_status:PROC
EXTRN	z900_trap2:PROC
EXTRN	s390_store_channel_report_word:PROC
EXTRN	z900_trap4:PROC
EXTRN	s390_store_subchannel:PROC
EXTRN	z900_lock_page:PROC
EXTRN	s390_test_pending_interruption:PROC
EXTRN	z900_move_page:PROC
EXTRN	s390_test_subchannel:PROC
EXTRN	z900_invalidate_expanded_storage_block_entry:PROC
EXTRN	s390_checksum:PROC
EXTRN	z900_add_logical_carry_long:PROC
EXTRN	s390_channel_subsystem_call:PROC
EXTRN	z900_add_logical_carry_long_register:PROC
EXTRN	s390_cmpsc_2012:PROC
EXTRN	z900_add_logical_long:PROC
EXTRN	s390_compare_logical_long_extended:PROC
EXTRN	z900_add_logical_long_fullword:PROC
EXTRN	s390_move_long_extended:PROC
EXTRN	z900_add_logical_long_fullword_register:PROC
EXTRN	s390_extract_primary_asn:PROC
EXTRN	z900_add_logical_long_register:PROC
EXTRN	s390_extract_secondary_asn:PROC
EXTRN	z900_add_long:PROC
EXTRN	s390_insert_address_space_control:PROC
EXTRN	z900_add_long_fullword:PROC
EXTRN	s390_insert_virtual_storage_key:PROC
EXTRN	z900_add_long_fullword_register:PROC
EXTRN	z900_add_long_halfword_immediate:PROC
EXTRN	s390_load_address_space_parameters:PROC
EXTRN	s390_move_to_primary:PROC
EXTRN	z900_add_long_register:PROC
EXTRN	s390_move_to_secondary:PROC
EXTRN	z900_and_immediate_high_high:PROC
EXTRN	s390_move_with_key:PROC
EXTRN	z900_and_immediate_high_low:PROC
EXTRN	s390_program_call:PROC
EXTRN	z900_and_immediate_low_high:PROC
EXTRN	s390_program_transfer:PROC
EXTRN	z900_and_immediate_low_low:PROC
EXTRN	s390_set_address_space_control:PROC
EXTRN	z900_and_long:PROC
EXTRN	s390_set_secondary_asn:PROC
EXTRN	z900_and_long_register:PROC
EXTRN	s390_inter_user_communication_vehicle:PROC
EXTRN	z900_branch_on_count_long:PROC
EXTRN	s390_page_in:PROC
EXTRN	z900_branch_on_count_long_register:PROC
EXTRN	s390_page_out:PROC
EXTRN	z900_branch_on_index_high_long:PROC
EXTRN	s390_insert_storage_key_extended:PROC
EXTRN	z900_branch_on_index_low_or_equal_long:PROC
EXTRN	s390_reset_reference_bit_extended:PROC
EXTRN	z900_branch_relative_on_count_long:PROC
EXTRN	s390_set_storage_key_extended:PROC
EXTRN	z900_branch_relative_on_index_high_long:PROC
EXTRN	s390_set_clock_programmable_field:PROC
EXTRN	z900_branch_relative_on_index_low_or_equal_long:PROC
EXTRN	s390_store_clock_extended:PROC
EXTRN	z900_compare_and_swap_long:PROC
EXTRN	s390_convert_utf16_to_utf8:PROC
EXTRN	z900_compare_double_and_swap_long:PROC
EXTRN	s390_convert_utf8_to_utf16:PROC
EXTRN	z900_compare_logical_characters_under_mask_high:PROC
EXTRN	s390_translate_extended:PROC
EXTRN	z900_compare_logical_long:PROC
EXTRN	s390_convert_bfp_long_to_float_long_reg:PROC
EXTRN	z900_compare_logical_long_fullword:PROC
EXTRN	s370_or_immediate_low_high:PROC
EXTRN	s390_convert_bfp_short_to_float_long_reg:PROC
EXTRN	z900_compare_logical_long_fullword_register:PROC
EXTRN	s370_or_immediate_low_low:PROC
EXTRN	s390_convert_float_long_to_bfp_long_reg:PROC
EXTRN	z900_compare_logical_long_register:PROC
EXTRN	s390_convert_float_long_to_bfp_short_reg:PROC
EXTRN	z900_compare_long:PROC
EXTRN	s390_load_float_ext_reg:PROC
EXTRN	z900_compare_long_fullword:PROC
EXTRN	s390_load_zero_float_short_reg:PROC
EXTRN	z900_compare_long_fullword_register:PROC
EXTRN	z900_compare_long_halfword_immediate:PROC
EXTRN	s390_load_zero_float_long_reg:PROC
EXTRN	s390_load_zero_float_ext_reg:PROC
EXTRN	z900_compare_long_register:PROC
EXTRN	s390_add_float_ext_reg:PROC
EXTRN	z900_convert_fix64_to_float_ext_reg:PROC
EXTRN	s390_add_float_long:PROC
EXTRN	z900_convert_fix64_to_float_long_reg:PROC
EXTRN	s390_add_float_long_reg:PROC
EXTRN	z900_convert_fix64_to_float_short_reg:PROC
EXTRN	s390_add_float_short:PROC
EXTRN	z900_convert_float_ext_to_fix64_reg:PROC
EXTRN	s390_add_float_short_reg:PROC
EXTRN	z900_convert_float_long_to_fix64_reg:PROC
EXTRN	s390_add_unnormal_float_long:PROC
EXTRN	z900_convert_float_short_to_fix64_reg:PROC
EXTRN	s390_add_unnormal_float_long_reg:PROC
EXTRN	z900_convert_to_binary_long:PROC
EXTRN	s390_add_unnormal_float_short:PROC
EXTRN	z900_convert_to_decimal_long:PROC
EXTRN	s390_add_unnormal_float_short_reg:PROC
EXTRN	z900_divide_logical_long:PROC
EXTRN	s390_compare_float_long:PROC
EXTRN	z900_divide_logical_long_register:PROC
EXTRN	s390_compare_float_long_reg:PROC
EXTRN	z900_divide_single_long:PROC
EXTRN	s390_compare_float_short:PROC
EXTRN	z900_divide_single_long_fullword:PROC
EXTRN	s390_compare_float_short_reg:PROC
EXTRN	z900_divide_single_long_fullword_register:PROC
EXTRN	s390_divide_float_ext_reg:PROC
EXTRN	z900_divide_single_long_register:PROC
EXTRN	s390_divide_float_long:PROC
EXTRN	z900_exclusive_or_long:PROC
EXTRN	s390_divide_float_long_reg:PROC
EXTRN	z900_exclusive_or_long_register:PROC
EXTRN	s390_divide_float_short:PROC
EXTRN	z900_extract_and_set_extended_authority:PROC
EXTRN	s390_divide_float_short_reg:PROC
EXTRN	z900_extract_stacked_registers_long:PROC
EXTRN	s390_halve_float_long_reg:PROC
EXTRN	z900_insert_characters_under_mask_high:PROC
EXTRN	s390_halve_float_short_reg:PROC
EXTRN	z900_insert_immediate_high_high:PROC
EXTRN	s390_load_and_test_float_long_reg:PROC
EXTRN	z900_insert_immediate_high_low:PROC
EXTRN	s390_load_and_test_float_short_reg:PROC
EXTRN	z900_insert_immediate_low_high:PROC
EXTRN	s390_load_complement_float_long_reg:PROC
EXTRN	z900_insert_immediate_low_low:PROC
EXTRN	s390_load_complement_float_short_reg:PROC
EXTRN	z900_load_and_test_long_fullword_register:PROC
EXTRN	s390_load_float_long:PROC
EXTRN	z900_load_and_test_long_register:PROC
EXTRN	s390_load_float_long_reg:PROC
EXTRN	s370_start_io:PROC
EXTRN	z900_load_complement_long_fullword_register:PROC
EXTRN	s390_load_float_short:PROC
EXTRN	s370_test_io:PROC
EXTRN	z900_load_complement_long_register:PROC
EXTRN	s390_load_float_short_reg:PROC
EXTRN	s370_halt_io:PROC
EXTRN	z900_load_control_long:PROC
EXTRN	s390_load_negative_float_long_reg:PROC
EXTRN	s370_test_channel:PROC
EXTRN	z900_load_logical_immediate_high_high:PROC
EXTRN	s370_store_channel_id:PROC
EXTRN	s390_load_negative_float_short_reg:PROC
EXTRN	z900_load_logical_immediate_high_low:PROC
EXTRN	s370_squareroot_float_long_reg:PROC
EXTRN	s390_load_positive_float_long_reg:PROC
EXTRN	z900_load_logical_immediate_low_high:PROC
EXTRN	s370_squareroot_float_short_reg:PROC
EXTRN	s390_load_positive_float_short_reg:PROC
EXTRN	z900_load_logical_immediate_low_low:PROC
EXTRN	s370_compare_logical_string:PROC
EXTRN	s390_load_rounded_float_long_reg:PROC
EXTRN	z900_load_logical_long_character:PROC
EXTRN	s370_compare_until_substring_equal:PROC
EXTRN	s390_load_rounded_float_short_reg:PROC
EXTRN	z900_load_logical_long_fullword:PROC
EXTRN	s370_move_string:PROC
EXTRN	s390_multiply_float_ext_reg:PROC
EXTRN	z900_load_logical_long_fullword_register:PROC
EXTRN	s370_search_string:PROC
EXTRN	s390_multiply_float_long:PROC
EXTRN	z900_load_logical_long_halfword:PROC
EXTRN	s390_multiply_float_long_reg:PROC
EXTRN	s370_tcpip:PROC
EXTRN	z900_load_logical_long_thirtyone:PROC
EXTRN	s390_multiply_float_long_to_ext:PROC
EXTRN	z900_load_logical_long_thirtyone_register:PROC
EXTRN	s390_multiply_float_long_to_ext_reg:PROC
EXTRN	z900_load_long:PROC
EXTRN	s390_multiply_float_short_to_long:PROC
EXTRN	z900_load_long_fullword:PROC
EXTRN	s390_multiply_float_short_to_long_reg:PROC
EXTRN	z900_load_long_fullword_register:PROC
EXTRN	s370_add:PROC
EXTRN	s390_store_float_long:PROC
EXTRN	z900_load_long_halfword:PROC
EXTRN	s390_store_float_short:PROC
EXTRN	s370_add_decimal:PROC
EXTRN	z900_load_long_halfword_immediate:PROC
EXTRN	s370_add_frr:PROC
EXTRN	s390_subtract_float_ext_reg:PROC
EXTRN	z900_load_long_register:PROC
EXTRN	s370_add_halfword:PROC
EXTRN	s390_subtract_float_long:PROC
EXTRN	z900_load_multiple_disjoint:PROC
EXTRN	s390_subtract_float_long_reg:PROC
EXTRN	s370_add_logical:PROC
EXTRN	z900_load_multiple_high:PROC
EXTRN	s370_add_logical_register:PROC
EXTRN	s390_subtract_float_short:PROC
EXTRN	z900_load_multiple_long:PROC
EXTRN	s370_add_register:PROC
EXTRN	s390_subtract_float_short_reg:PROC
EXTRN	z900_load_negative_long_fullword_register:PROC
EXTRN	s370_and:PROC
EXTRN	s390_subtract_unnormal_float_long:PROC
EXTRN	z900_load_negative_long_register:PROC
EXTRN	s390_subtract_unnormal_float_long_reg:PROC
EXTRN	s370_and_character:PROC
EXTRN	z900_load_pair_from_quadword:PROC
EXTRN	s390_subtract_unnormal_float_short:PROC
EXTRN	s370_and_immediate:PROC
EXTRN	z900_load_positive_long_fullword_register:PROC
EXTRN	s370_and_register:PROC
EXTRN	s390_subtract_unnormal_float_short_reg:PROC
EXTRN	z900_load_positive_long_register:PROC
EXTRN	z900_load_program_status_word_extended:PROC
EXTRN	s370_branch_and_link:PROC
EXTRN	s390_load_lengthened_float_short_to_long_reg:PROC
EXTRN	s370_branch_and_link_register:PROC
EXTRN	s390_load_lengthened_float_long_to_ext_reg:PROC
EXTRN	z900_load_real_address_long:PROC
EXTRN	s370_branch_and_save:PROC
EXTRN	s390_load_lengthened_float_short_to_ext_reg:PROC
EXTRN	z900_load_reversed_long:PROC
EXTRN	s370_branch_and_save_register:PROC
EXTRN	s390_squareroot_float_ext_reg:PROC
EXTRN	z900_load_reversed_long_register:PROC
EXTRN	s370_branch_on_condition:PROC
EXTRN	s390_multiply_float_short_reg:PROC
EXTRN	z900_load_using_real_address_long:PROC
EXTRN	s370_branch_on_condition_register:PROC
EXTRN	s390_load_positive_float_ext_reg:PROC
EXTRN	z900_multiply_logical_long:PROC
EXTRN	s370_branch_on_count:PROC
EXTRN	s390_load_negative_float_ext_reg:PROC
EXTRN	z900_multiply_logical_long_register:PROC
EXTRN	s370_branch_on_count_register:PROC
EXTRN	z900_multiply_long_halfword_immediate:PROC
EXTRN	s390_load_and_test_float_ext_reg:PROC
EXTRN	s370_branch_on_index_high:PROC
EXTRN	s390_load_complement_float_ext_reg:PROC
EXTRN	z900_multiply_single_long:PROC
EXTRN	s370_branch_on_index_low_or_equal:PROC
EXTRN	s390_load_rounded_float_ext_to_short_reg:PROC
EXTRN	z900_multiply_single_long_fullword:PROC
EXTRN	s370_compare:PROC
EXTRN	s390_load_fp_int_float_ext_reg:PROC
EXTRN	z900_multiply_single_long_fullword_register:PROC
EXTRN	s370_compare_and_form_codeword:PROC
EXTRN	s390_compare_float_ext_reg:PROC
EXTRN	z900_multiply_single_long_register:PROC
EXTRN	s370_compare_and_swap:PROC
EXTRN	z900_or_immediate_high_high:PROC
EXTRN	s390_load_fp_int_float_short_reg:PROC
EXTRN	s370_compare_decimal:PROC
EXTRN	z900_or_immediate_high_low:PROC
EXTRN	s390_load_fp_int_float_long_reg:PROC
EXTRN	s370_compare_double_and_swap:PROC
EXTRN	z900_or_immediate_low_high:PROC
EXTRN	s390_convert_fixed_to_float_short_reg:PROC
EXTRN	s370_compare_halfword:PROC
EXTRN	z900_or_immediate_low_low:PROC
EXTRN	s390_convert_fixed_to_float_long_reg:PROC
EXTRN	s370_compare_logical:PROC
EXTRN	s390_convert_fixed_to_float_ext_reg:PROC
EXTRN	z900_or_long:PROC
EXTRN	s370_compare_logical_character:PROC
EXTRN	s390_convert_float_short_to_fixed_reg:PROC
EXTRN	z900_or_long_register:PROC
EXTRN	s370_compare_logical_character_long:PROC
EXTRN	s390_convert_float_long_to_fixed_reg:PROC
EXTRN	z900_rotate_left_single_logical_long:PROC
EXTRN	s370_compare_logical_characters_under_mask:PROC
EXTRN	z900_set_addressing_mode_64:PROC
EXTRN	s390_convert_float_ext_to_fixed_reg:PROC
EXTRN	s370_compare_logical_immediate:PROC
EXTRN	z900_shift_left_single_logical_long:PROC
EXTRN	s390_load_lengthened_float_short_to_long:PROC
EXTRN	s370_compare_logical_register:PROC
EXTRN	z900_shift_left_single_long:PROC
EXTRN	s390_load_lengthened_float_long_to_ext:PROC
EXTRN	s370_compare_register:PROC
EXTRN	z900_shift_right_single_logical_long:PROC
EXTRN	s390_load_lengthened_float_short_to_ext:PROC
EXTRN	s370_convert_to_binary:PROC
EXTRN	z900_shift_right_single_long:PROC
EXTRN	s390_squareroot_float_short:PROC
EXTRN	s370_convert_to_decimal:PROC
EXTRN	z900_store_characters_under_mask_high:PROC
EXTRN	s390_squareroot_float_long:PROC
EXTRN	s370_diagnose:PROC
EXTRN	z900_store_control_long:PROC
EXTRN	s390_multiply_float_short:PROC
EXTRN	s370_divide:PROC
EXTRN	s390_add_halfword_immediate:PROC
EXTRN	z900_store_long:PROC
EXTRN	s370_divide_decimal:PROC
EXTRN	s390_branch_relative_and_save:PROC
EXTRN	z900_store_multiple_high:PROC
EXTRN	s370_divide_register:PROC
EXTRN	s390_branch_relative_on_condition:PROC
EXTRN	z900_store_multiple_long:PROC
EXTRN	s370_edit_x_edit_and_mark:PROC
EXTRN	s390_branch_relative_on_count:PROC
EXTRN	z900_store_pair_to_quadword:PROC
EXTRN	s370_exclusive_or:PROC
EXTRN	s390_branch_relative_on_index_high:PROC
EXTRN	z900_store_real_address:PROC
EXTRN	s390_branch_relative_on_index_low_or_equal:PROC
EXTRN	s370_exclusive_or_character:PROC
EXTRN	z900_store_reversed_long:PROC
EXTRN	s370_exclusive_or_immediate:PROC
EXTRN	s390_compare_halfword_immediate:PROC
EXTRN	z900_store_using_real_address_long:PROC
EXTRN	s370_exclusive_or_register:PROC
EXTRN	s390_load_halfword_immediate:PROC
EXTRN	z900_subtract_logical_borrow_long:PROC
EXTRN	s370_execute:PROC
EXTRN	s390_multiply_halfword_immediate:PROC
EXTRN	z900_subtract_logical_borrow_long_register:PROC
EXTRN	s390_multiply_single:PROC
EXTRN	z900_subtract_logical_long:PROC
EXTRN	s370_fix_page:PROC
EXTRN	s390_multiply_single_register:PROC
EXTRN	s370_insert_character:PROC
EXTRN	z900_subtract_logical_long_fullword:PROC
EXTRN	s370_insert_characters_under_mask:PROC
EXTRN	s390_test_under_mask_high:PROC
EXTRN	z900_subtract_logical_long_fullword_register:PROC
EXTRN	s370_insert_program_mask:PROC
EXTRN	s390_test_under_mask_low:PROC
EXTRN	z900_subtract_logical_long_register:PROC
EXTRN	s370_insert_psw_key:PROC
EXTRN	s390_start_interpretive_execution:PROC
EXTRN	z900_subtract_long:PROC
EXTRN	s370_invalidate_page_table_entry:PROC
EXTRN	s390_test_pending_zone_interrupt:PROC
EXTRN	z900_subtract_long_fullword:PROC
EXTRN	s390_branch_and_stack:PROC
EXTRN	s370_load:PROC
EXTRN	z900_subtract_long_fullword_register:PROC
EXTRN	s390_extract_stacked_registers:PROC
EXTRN	s370_load_address:PROC
EXTRN	z900_subtract_long_register:PROC
EXTRN	s390_extract_stacked_state:PROC
EXTRN	z900_test_under_mask_high_high:PROC
EXTRN	s390_modify_stacked_state:PROC
EXTRN	s370_load_and_test_register:PROC
EXTRN	z900_test_under_mask_high_low:PROC
EXTRN	s370_load_complement_register:PROC
EXTRN	s390_program_return:PROC
EXTRN	z900_trace_long:PROC
EXTRN	s370_load_control:PROC
EXTRN	z900_perform_locked_operation:PROC
EXTRN	s390_trap2:PROC
EXTRN	s390_trap4:PROC
EXTRN	z900_signal_adapter:PROC
EXTRN	s370_load_halfword:PROC
EXTRN	s390_lock_page:PROC
EXTRN	s370_load_multiple:PROC
EXTRN	z900_set_queue_buffer_state:PROC
EXTRN	s390_move_page:PROC
EXTRN	s370_load_negative_register:PROC
EXTRN	z900_extract_queue_buffer_state:PROC
EXTRN	s390_invalidate_expanded_storage_block_entry:PROC
EXTRN	z900_set_vector_summary:PROC
EXTRN	s370_load_positive_register:PROC
EXTRN	z900_store_zone_parameter:PROC
EXTRN	s370_load_program_status_word:PROC
EXTRN	s390_perform_locked_operation:PROC
EXTRN	s390_signal_adapter:PROC
EXTRN	z900_set_zone_parameter:PROC
EXTRN	s370_load_real_address:PROC
EXTRN	s390_store_zone_parameter:PROC
EXTRN	z900_resume_program:PROC
EXTRN	s370_load_register:PROC
EXTRN	s390_set_zone_parameter:PROC
EXTRN	z900_service_call:PROC
EXTRN	s390_resume_program:PROC
EXTRN	s370_monitor_call:PROC
EXTRN	z900_squareroot_float_long_reg:PROC
EXTRN	s390_service_call:PROC
EXTRN	s370_move_character:PROC
EXTRN	z900_squareroot_float_short_reg:PROC
EXTRN	s370_move_immediate:PROC
EXTRN	z900_store_system_information:PROC
EXTRN	s390_squareroot_float_long_reg:PROC
EXTRN	s370_move_inverse:PROC
EXTRN	z900_compare_logical_string:PROC
EXTRN	s390_squareroot_float_short_reg:PROC
EXTRN	s370_move_long:PROC
EXTRN	z900_compare_until_substring_equal:PROC
EXTRN	s390_store_system_information:PROC
EXTRN	s370_move_numerics:PROC
EXTRN	z900_move_string:PROC
EXTRN	s390_compare_logical_string:PROC
EXTRN	z900_search_string:PROC
EXTRN	s390_compare_until_substring_equal:PROC
EXTRN	s370_move_with_offset:PROC
EXTRN	z900_branch_in_subspace_group:PROC
EXTRN	s390_move_string:PROC
EXTRN	z900_extract_and_set_storage_attributes:PROC
EXTRN	s390_search_string:PROC
EXTRN	s370_move_zones:PROC
EXTRN	s390_branch_in_subspace_group:PROC
EXTRN	s370_multiply:PROC
EXTRN	s370_multiply_decimal:PROC
EXTRN	s370_multiply_halfword:PROC
EXTRN	s370_multiply_register:PROC
EXTRN	z900_add:PROC
EXTRN	s370_obtain_cms_lock:PROC
EXTRN	z900_add_decimal:PROC
EXTRN	s390_add:PROC
EXTRN	s370_obtain_local_lock:PROC
EXTRN	s390_add_decimal:PROC
EXTRN	z900_add_halfword:PROC
EXTRN	s370_or:PROC
EXTRN	z900_add_logical:PROC
EXTRN	s390_add_halfword:PROC
EXTRN	s370_or_character:PROC
EXTRN	z900_add_logical_register:PROC
EXTRN	s390_add_logical:PROC
EXTRN	s370_or_immediate:PROC
EXTRN	z900_add_register:PROC
EXTRN	s370_or_register:PROC
EXTRN	s390_add_logical_register:PROC
EXTRN	z900_and:PROC
EXTRN	s390_add_register:PROC
EXTRN	s370_pack:PROC
EXTRN	z900_and_character:PROC
EXTRN	s370_purge_translation_lookaside_buffer:PROC
EXTRN	s390_and:PROC
EXTRN	z900_and_immediate:PROC
EXTRN	s390_and_character:PROC
EXTRN	s370_release_cms_lock:PROC
EXTRN	z900_and_register:PROC
EXTRN	s390_and_immediate:PROC
EXTRN	s370_release_local_lock:PROC
EXTRN	z900_branch_and_link:PROC
EXTRN	s370_set_clock:PROC
EXTRN	s390_and_register:PROC
EXTRN	z900_branch_and_link_register:PROC
EXTRN	s370_set_clock_comparator:PROC
EXTRN	s390_branch_and_link:PROC
EXTRN	z900_branch_and_save:PROC
EXTRN	s370_set_cpu_timer:PROC
EXTRN	s390_branch_and_link_register:PROC
EXTRN	z900_branch_and_save_register:PROC
EXTRN	s370_set_prefix:PROC
EXTRN	s390_branch_and_save:PROC
EXTRN	z900_branch_on_condition:PROC
EXTRN	s370_set_program_mask:PROC
EXTRN	s390_branch_and_save_register:PROC
EXTRN	z900_branch_on_condition_register:PROC
EXTRN	s370_set_psw_key_from_address:PROC
EXTRN	s390_branch_on_condition:PROC
EXTRN	z900_branch_on_count:PROC
EXTRN	s390_branch_on_condition_register:PROC
EXTRN	s370_set_system_mask:PROC
EXTRN	z900_branch_on_count_register:PROC
EXTRN	s390_branch_on_count:PROC
EXTRN	s370_shift_and_round_decimal:PROC
EXTRN	z900_branch_on_index_high:PROC
EXTRN	s390_branch_on_count_register:PROC
EXTRN	s370_shift_left_double:PROC
EXTRN	z900_branch_on_index_low_or_equal:PROC
EXTRN	s390_branch_on_index_high:PROC
EXTRN	s370_shift_left_double_logical:PROC
EXTRN	z900_compare:PROC
EXTRN	s390_branch_on_index_low_or_equal:PROC
EXTRN	s370_shift_left_single:PROC
EXTRN	z900_compare_and_form_codeword:PROC
EXTRN	s390_compare:PROC
EXTRN	s370_shift_left_single_logical:PROC
EXTRN	z900_compare_and_swap:PROC
EXTRN	s390_compare_and_form_codeword:PROC
EXTRN	s370_shift_right_double:PROC
EXTRN	z900_compare_decimal:PROC
EXTRN	s370_shift_right_double_logical:PROC
EXTRN	s390_compare_and_swap:PROC
EXTRN	z900_compare_double_and_swap:PROC
EXTRN	s370_shift_right_single:PROC
EXTRN	s390_compare_decimal:PROC
EXTRN	z900_compare_halfword:PROC
EXTRN	s370_shift_right_single_logical:PROC
EXTRN	s390_compare_double_and_swap:PROC
EXTRN	z900_compare_logical:PROC
EXTRN	s390_compare_halfword:PROC
EXTRN	s370_signal_processor:PROC
EXTRN	z900_compare_logical_character:PROC
EXTRN	s370_store:PROC
EXTRN	s390_compare_logical:PROC
EXTRN	z900_compare_logical_character_long:PROC
EXTRN	s370_store_character:PROC
EXTRN	s390_compare_logical_character:PROC
EXTRN	z900_compare_logical_characters_under_mask:PROC
EXTRN	s390_compare_logical_character_long:PROC
EXTRN	s370_store_characters_under_mask:PROC
EXTRN	z900_compare_logical_immediate:PROC
EXTRN	s370_store_clock:PROC
EXTRN	s390_compare_logical_characters_under_mask:PROC
EXTRN	z900_compare_logical_register:PROC
EXTRN	s370_store_clock_comparator:PROC
EXTRN	s390_compare_logical_immediate:PROC
EXTRN	z900_compare_register:PROC
EXTRN	s390_compare_logical_register:PROC
EXTRN	s370_store_control:PROC
EXTRN	z900_convert_to_binary:PROC
EXTRN	s370_store_cpu_address:PROC
EXTRN	s390_compare_register:PROC
EXTRN	z900_convert_to_decimal:PROC
EXTRN	s370_store_cpu_id:PROC
EXTRN	s390_convert_to_binary:PROC
EXTRN	z900_diagnose:PROC
EXTRN	s370_store_cpu_timer:PROC
EXTRN	s390_convert_to_decimal:PROC
EXTRN	z900_divide:PROC
EXTRN	s370_store_halfword:PROC
EXTRN	s390_diagnose:PROC
EXTRN	z900_divide_decimal:PROC
EXTRN	s390_divide:PROC
EXTRN	s370_store_multiple:PROC
EXTRN	z900_divide_register:PROC
EXTRN	s370_store_prefix:PROC
EXTRN	s390_divide_decimal:PROC
EXTRN	z900_edit_x_edit_and_mark:PROC
EXTRN	s390_divide_register:PROC
EXTRN	s370_store_then_and_system_mask:PROC
EXTRN	z900_exclusive_or:PROC
EXTRN	s370_store_then_or_system_mask:PROC
EXTRN	s390_edit_x_edit_and_mark:PROC
EXTRN	z900_exclusive_or_character:PROC
EXTRN	s390_exclusive_or:PROC
EXTRN	z900_exclusive_or_immediate:PROC
EXTRN	s370_subtract:PROC
EXTRN	s390_exclusive_or_character:PROC
EXTRN	z900_exclusive_or_register:PROC
EXTRN	s390_exclusive_or_immediate:PROC
EXTRN	s370_subtract_decimal:PROC
EXTRN	z900_execute:PROC
EXTRN	s390_exclusive_or_register:PROC
EXTRN	s370_subtract_halfword:PROC
EXTRN	s390_execute:PROC
EXTRN	s370_subtract_logical:PROC
EXTRN	z900_insert_character:PROC
EXTRN	s370_subtract_logical_register:PROC
EXTRN	z900_insert_characters_under_mask:PROC
EXTRN	s370_subtract_register:PROC
EXTRN	s390_insert_character:PROC
EXTRN	z900_insert_program_mask:PROC
EXTRN	s370_supervisor_call:PROC
EXTRN	s390_insert_characters_under_mask:PROC
EXTRN	z900_insert_psw_key:PROC
EXTRN	s390_insert_program_mask:PROC
EXTRN	s370_svc_assist:PROC
EXTRN	z900_invalidate_page_table_entry:PROC
EXTRN	s390_insert_psw_key:PROC
EXTRN	s370_test_and_set:PROC
EXTRN	z900_load:PROC
EXTRN	s370_test_block:PROC
EXTRN	s390_invalidate_page_table_entry:PROC
EXTRN	z900_load_address:PROC
EXTRN	s390_load:PROC
EXTRN	s370_test_protection:PROC
EXTRN	z900_load_address_extended:PROC
EXTRN	s390_load_address:PROC
EXTRN	s370_test_under_mask:PROC
EXTRN	z900_load_and_test_register:PROC
EXTRN	s390_load_address_extended:PROC
EXTRN	z900_load_complement_register:PROC
EXTRN	s390_load_and_test_register:PROC
EXTRN	s370_trace_initial_srb_dispatch:PROC
EXTRN	z900_load_control:PROC
EXTRN	s390_load_complement_register:PROC
EXTRN	s370_trace_io_interruption:PROC
EXTRN	z900_load_halfword:PROC
EXTRN	s390_load_control:PROC
EXTRN	s370_trace_program_interruption:PROC
EXTRN	z900_load_multiple:PROC
EXTRN	s390_load_halfword:PROC
EXTRN	s370_trace_svc_interruption:PROC
EXTRN	z900_load_negative_register:PROC
EXTRN	s390_load_multiple:PROC
EXTRN	s370_trace_svc_return:PROC
EXTRN	z900_load_positive_register:PROC
EXTRN	s390_load_negative_register:PROC
EXTRN	s370_trace_task_dispatch:PROC
EXTRN	z900_load_program_status_word:PROC
EXTRN	s390_load_positive_register:PROC
EXTRN	s370_translate:PROC
EXTRN	z900_load_real_address:PROC
EXTRN	s390_load_program_status_word:PROC
EXTRN	s370_translate_and_test:PROC
EXTRN	z900_load_register:PROC
EXTRN	s390_load_real_address:PROC
EXTRN	s370_unpack:PROC
EXTRN	z900_load_using_real_address:PROC
EXTRN	s390_load_register:PROC
EXTRN	s370_update_tree:PROC
EXTRN	z900_monitor_call:PROC
EXTRN	s390_load_using_real_address:PROC
EXTRN	s370_zero_and_add:PROC
EXTRN	z900_move_character:PROC
EXTRN	s390_monitor_call:PROC
EXTRN	s370_1800:PROC
EXTRN	z900_move_immediate:PROC
EXTRN	s390_move_character:PROC
EXTRN	s370_1801:PROC
EXTRN	z900_move_inverse:PROC
EXTRN	s390_move_immediate:PROC
EXTRN	s370_1802:PROC
EXTRN	z900_move_long:PROC
EXTRN	s390_move_inverse:PROC
EXTRN	s370_1803:PROC
EXTRN	z900_move_numerics:PROC
EXTRN	s390_move_long:PROC
EXTRN	s370_1804:PROC
EXTRN	z900_move_with_destination_key:PROC
EXTRN	s390_move_numerics:PROC
EXTRN	s370_1805:PROC
EXTRN	z900_move_with_offset:PROC
EXTRN	s390_move_with_destination_key:PROC
EXTRN	s370_1806:PROC
EXTRN	z900_move_with_source_key:PROC
EXTRN	s390_move_with_offset:PROC
EXTRN	s370_1807:PROC
EXTRN	z900_move_zones:PROC
EXTRN	s390_move_with_source_key:PROC
EXTRN	s370_1808:PROC
EXTRN	z900_multiply:PROC
EXTRN	s390_move_zones:PROC
EXTRN	s370_1809:PROC
EXTRN	z900_multiply_decimal:PROC
EXTRN	s390_multiply:PROC
EXTRN	s370_180A:PROC
EXTRN	z900_multiply_halfword:PROC
EXTRN	s390_multiply_decimal:PROC
EXTRN	s370_180B:PROC
EXTRN	z900_multiply_register:PROC
EXTRN	s390_multiply_halfword:PROC
EXTRN	s370_180C:PROC
EXTRN	z900_obtain_cms_lock:PROC
EXTRN	s390_multiply_register:PROC
EXTRN	s370_180D:PROC
EXTRN	z900_obtain_local_lock:PROC
EXTRN	s390_obtain_cms_lock:PROC
EXTRN	s370_180E:PROC
EXTRN	s390_obtain_local_lock:PROC
EXTRN	s370_180F:PROC
EXTRN	z900_or:PROC
EXTRN	s370_1810:PROC
EXTRN	z900_or_character:PROC
EXTRN	s390_or:PROC
EXTRN	s370_1811:PROC
EXTRN	z900_or_immediate:PROC
EXTRN	s390_or_character:PROC
EXTRN	s370_1812:PROC
EXTRN	z900_or_register:PROC
EXTRN	s390_or_immediate:PROC
EXTRN	s370_1813:PROC
EXTRN	z900_pack:PROC
EXTRN	s390_or_register:PROC
EXTRN	s370_1814:PROC
EXTRN	z900_purge_translation_lookaside_buffer:PROC
EXTRN	s390_pack:PROC
EXTRN	s370_1815:PROC
EXTRN	z900_release_cms_lock:PROC
EXTRN	s390_purge_translation_lookaside_buffer:PROC
EXTRN	s370_1816:PROC
EXTRN	z900_release_local_lock:PROC
EXTRN	s390_release_cms_lock:PROC
EXTRN	s370_1817:PROC
EXTRN	z900_set_clock:PROC
EXTRN	s390_release_local_lock:PROC
EXTRN	s370_1818:PROC
EXTRN	z900_set_clock_comparator:PROC
EXTRN	s390_set_clock:PROC
EXTRN	s370_1819:PROC
EXTRN	z900_set_cpu_timer:PROC
EXTRN	s390_set_clock_comparator:PROC
EXTRN	s370_181A:PROC
EXTRN	z900_set_prefix:PROC
EXTRN	s390_set_cpu_timer:PROC
EXTRN	s370_181B:PROC
EXTRN	z900_set_program_mask:PROC
EXTRN	s390_set_prefix:PROC
EXTRN	s370_181C:PROC
EXTRN	z900_set_psw_key_from_address:PROC
EXTRN	s390_set_program_mask:PROC
EXTRN	s370_181D:PROC
EXTRN	z900_set_system_mask:PROC
EXTRN	s390_set_psw_key_from_address:PROC
EXTRN	s370_181E:PROC
EXTRN	z900_shift_and_round_decimal:PROC
EXTRN	s390_set_system_mask:PROC
EXTRN	s370_181F:PROC
EXTRN	z900_shift_left_double:PROC
EXTRN	s390_shift_and_round_decimal:PROC
EXTRN	s370_1820:PROC
EXTRN	z900_shift_left_double_logical:PROC
EXTRN	s390_shift_left_double:PROC
EXTRN	s370_1821:PROC
EXTRN	z900_shift_left_single:PROC
EXTRN	s390_shift_left_double_logical:PROC
EXTRN	s370_1822:PROC
EXTRN	z900_shift_left_single_logical:PROC
EXTRN	s390_shift_left_single:PROC
EXTRN	s370_1823:PROC
EXTRN	z900_shift_right_double:PROC
EXTRN	s390_shift_left_single_logical:PROC
EXTRN	s370_1824:PROC
EXTRN	z900_shift_right_double_logical:PROC
EXTRN	s390_shift_right_double:PROC
EXTRN	s370_1825:PROC
EXTRN	z900_shift_right_single:PROC
EXTRN	s390_shift_right_double_logical:PROC
EXTRN	s370_1826:PROC
EXTRN	z900_shift_right_single_logical:PROC
EXTRN	s390_shift_right_single:PROC
EXTRN	s370_1827:PROC
EXTRN	z900_signal_processor:PROC
EXTRN	s390_shift_right_single_logical:PROC
EXTRN	s370_1828:PROC
EXTRN	z900_store:PROC
EXTRN	s390_signal_processor:PROC
EXTRN	s370_1829:PROC
EXTRN	z900_store_character:PROC
EXTRN	s390_store:PROC
EXTRN	s370_182A:PROC
EXTRN	z900_store_characters_under_mask:PROC
EXTRN	s390_store_character:PROC
EXTRN	s370_182B:PROC
EXTRN	z900_store_clock:PROC
EXTRN	s390_store_characters_under_mask:PROC
EXTRN	s370_182C:PROC
EXTRN	z900_store_clock_comparator:PROC
EXTRN	s390_store_clock:PROC
EXTRN	s370_182D:PROC
EXTRN	z900_store_control:PROC
EXTRN	s390_store_clock_comparator:PROC
EXTRN	s370_182E:PROC
EXTRN	z900_store_cpu_address:PROC
EXTRN	s390_store_control:PROC
EXTRN	s370_182F:PROC
EXTRN	z900_store_cpu_id:PROC
EXTRN	s390_store_cpu_address:PROC
EXTRN	s370_1830:PROC
EXTRN	z900_store_cpu_timer:PROC
EXTRN	s390_store_cpu_id:PROC
EXTRN	s370_1831:PROC
EXTRN	z900_store_halfword:PROC
EXTRN	s390_store_cpu_timer:PROC
EXTRN	s370_1832:PROC
EXTRN	z900_store_multiple:PROC
EXTRN	s390_store_halfword:PROC
EXTRN	s370_1833:PROC
EXTRN	z900_store_prefix:PROC
EXTRN	s390_store_multiple:PROC
EXTRN	s370_1834:PROC
EXTRN	z900_store_then_and_system_mask:PROC
EXTRN	s390_store_prefix:PROC
EXTRN	s370_1835:PROC
EXTRN	z900_store_then_or_system_mask:PROC
EXTRN	s390_store_then_and_system_mask:PROC
EXTRN	s370_1836:PROC
EXTRN	z900_store_using_real_address:PROC
EXTRN	s390_store_then_or_system_mask:PROC
EXTRN	s370_1837:PROC
EXTRN	z900_subtract:PROC
EXTRN	s390_store_using_real_address:PROC
EXTRN	s370_1838:PROC
EXTRN	z900_subtract_decimal:PROC
EXTRN	s390_subtract:PROC
EXTRN	s370_1839:PROC
EXTRN	z900_subtract_halfword:PROC
EXTRN	s390_subtract_decimal:PROC
EXTRN	s370_183A:PROC
EXTRN	z900_subtract_logical:PROC
EXTRN	s390_subtract_halfword:PROC
EXTRN	s370_183B:PROC
EXTRN	z900_subtract_logical_register:PROC
EXTRN	s390_subtract_logical:PROC
EXTRN	s370_183C:PROC
EXTRN	z900_subtract_register:PROC
EXTRN	s390_subtract_logical_register:PROC
EXTRN	s370_183D:PROC
EXTRN	z900_supervisor_call:PROC
EXTRN	s390_subtract_register:PROC
EXTRN	s370_183E:PROC
EXTRN	z900_svc_assist:PROC
EXTRN	s390_supervisor_call:PROC
EXTRN	s370_183F:PROC
EXTRN	z900_test_and_set:PROC
EXTRN	s390_svc_assist:PROC
EXTRN	s370_1840:PROC
EXTRN	z900_test_block:PROC
EXTRN	s390_test_and_set:PROC
EXTRN	s370_1841:PROC
EXTRN	z900_test_protection:PROC
EXTRN	s390_test_block:PROC
EXTRN	s370_1842:PROC
EXTRN	z900_test_under_mask:PROC
EXTRN	s390_test_protection:PROC
EXTRN	s370_1843:PROC
EXTRN	z900_trace:PROC
EXTRN	s390_test_under_mask:PROC
EXTRN	s370_1844:PROC
EXTRN	s390_trace:PROC
EXTRN	s370_1845:PROC
EXTRN	s370_1846:PROC
EXTRN	s370_1847:PROC
EXTRN	s370_1848:PROC
EXTRN	s370_1849:PROC
EXTRN	s370_184A:PROC
EXTRN	z900_translate:PROC
EXTRN	s370_184B:PROC
EXTRN	z900_translate_and_test:PROC
EXTRN	s390_translate:PROC
EXTRN	s370_184C:PROC
EXTRN	z900_unpack:PROC
EXTRN	s390_translate_and_test:PROC
EXTRN	s370_184D:PROC
EXTRN	z900_update_tree:PROC
EXTRN	s390_unpack:PROC
EXTRN	s370_184E:PROC
EXTRN	z900_zero_and_add:PROC
EXTRN	s390_update_tree:PROC
EXTRN	s370_184F:PROC
EXTRN	z900_1800:PROC
EXTRN	s390_zero_and_add:PROC
EXTRN	s370_1850:PROC
EXTRN	z900_1801:PROC
EXTRN	s390_1800:PROC
EXTRN	s370_1851:PROC
EXTRN	z900_1802:PROC
EXTRN	s390_1801:PROC
EXTRN	s370_1852:PROC
EXTRN	z900_1803:PROC
EXTRN	s390_1802:PROC
EXTRN	s370_1853:PROC
EXTRN	z900_1804:PROC
EXTRN	s390_1803:PROC
EXTRN	s370_1854:PROC
EXTRN	z900_1805:PROC
EXTRN	s390_1804:PROC
EXTRN	s370_1855:PROC
EXTRN	z900_1806:PROC
EXTRN	s390_1805:PROC
EXTRN	s370_1856:PROC
EXTRN	z900_1807:PROC
EXTRN	s390_1806:PROC
EXTRN	s370_1857:PROC
EXTRN	z900_1808:PROC
EXTRN	s390_1807:PROC
EXTRN	s370_1858:PROC
EXTRN	z900_1809:PROC
EXTRN	s390_1808:PROC
EXTRN	s370_1859:PROC
EXTRN	z900_180A:PROC
EXTRN	s390_1809:PROC
EXTRN	s370_185A:PROC
EXTRN	z900_180B:PROC
EXTRN	s390_180A:PROC
EXTRN	s370_185B:PROC
EXTRN	z900_180C:PROC
EXTRN	s390_180B:PROC
EXTRN	s370_185C:PROC
EXTRN	z900_180D:PROC
EXTRN	s390_180C:PROC
EXTRN	s370_185D:PROC
EXTRN	z900_180E:PROC
EXTRN	s390_180D:PROC
EXTRN	s370_185E:PROC
EXTRN	z900_180F:PROC
EXTRN	s390_180E:PROC
EXTRN	s370_185F:PROC
EXTRN	z900_1810:PROC
EXTRN	s390_180F:PROC
EXTRN	s370_1860:PROC
EXTRN	z900_1811:PROC
EXTRN	s390_1810:PROC
EXTRN	s370_1861:PROC
EXTRN	z900_1812:PROC
EXTRN	s390_1811:PROC
EXTRN	s370_1862:PROC
EXTRN	z900_1813:PROC
EXTRN	s390_1812:PROC
EXTRN	s370_1863:PROC
EXTRN	z900_1814:PROC
EXTRN	s390_1813:PROC
EXTRN	s370_1864:PROC
EXTRN	z900_1815:PROC
EXTRN	s390_1814:PROC
EXTRN	s370_1865:PROC
EXTRN	z900_1816:PROC
EXTRN	s390_1815:PROC
EXTRN	s370_1866:PROC
EXTRN	z900_1817:PROC
EXTRN	s390_1816:PROC
EXTRN	s370_1867:PROC
EXTRN	z900_1818:PROC
EXTRN	s390_1817:PROC
EXTRN	s370_1868:PROC
EXTRN	z900_1819:PROC
EXTRN	s390_1818:PROC
EXTRN	s370_1869:PROC
EXTRN	z900_181A:PROC
EXTRN	s390_1819:PROC
EXTRN	s370_186A:PROC
EXTRN	z900_181B:PROC
EXTRN	s390_181A:PROC
EXTRN	s370_186B:PROC
EXTRN	z900_181C:PROC
EXTRN	s390_181B:PROC
EXTRN	s370_186C:PROC
EXTRN	z900_181D:PROC
EXTRN	s390_181C:PROC
EXTRN	s370_186D:PROC
EXTRN	z900_181E:PROC
EXTRN	s390_181D:PROC
EXTRN	s370_186E:PROC
EXTRN	z900_181F:PROC
EXTRN	s390_181E:PROC
EXTRN	s370_186F:PROC
EXTRN	z900_1820:PROC
EXTRN	s390_181F:PROC
EXTRN	s370_1870:PROC
EXTRN	z900_1821:PROC
EXTRN	s390_1820:PROC
EXTRN	s370_1871:PROC
EXTRN	z900_1822:PROC
EXTRN	s390_1821:PROC
EXTRN	s370_1872:PROC
EXTRN	z900_1823:PROC
EXTRN	s390_1822:PROC
EXTRN	s370_1873:PROC
EXTRN	z900_1824:PROC
EXTRN	s390_1823:PROC
EXTRN	s370_1874:PROC
EXTRN	z900_1825:PROC
EXTRN	s390_1824:PROC
EXTRN	s370_1875:PROC
EXTRN	z900_1826:PROC
EXTRN	s390_1825:PROC
EXTRN	s370_1876:PROC
EXTRN	z900_1827:PROC
EXTRN	s390_1826:PROC
EXTRN	s370_1877:PROC
EXTRN	z900_1828:PROC
EXTRN	s390_1827:PROC
EXTRN	s370_1878:PROC
EXTRN	z900_1829:PROC
EXTRN	s390_1828:PROC
EXTRN	s370_1879:PROC
EXTRN	z900_182A:PROC
EXTRN	s390_1829:PROC
EXTRN	s370_187A:PROC
EXTRN	z900_182B:PROC
EXTRN	s390_182A:PROC
EXTRN	s370_187B:PROC
EXTRN	z900_182C:PROC
EXTRN	s390_182B:PROC
EXTRN	s370_187C:PROC
EXTRN	z900_182D:PROC
EXTRN	s390_182C:PROC
EXTRN	s370_187D:PROC
EXTRN	z900_182E:PROC
EXTRN	s390_182D:PROC
EXTRN	s370_187E:PROC
EXTRN	z900_182F:PROC
EXTRN	s390_182E:PROC
EXTRN	s370_187F:PROC
EXTRN	z900_1830:PROC
EXTRN	s390_182F:PROC
EXTRN	s370_1880:PROC
EXTRN	z900_1831:PROC
EXTRN	s390_1830:PROC
EXTRN	s370_1881:PROC
EXTRN	z900_1832:PROC
EXTRN	s390_1831:PROC
EXTRN	s370_1882:PROC
EXTRN	z900_1833:PROC
EXTRN	s390_1832:PROC
EXTRN	s370_1883:PROC
EXTRN	z900_1834:PROC
EXTRN	s390_1833:PROC
EXTRN	s370_1884:PROC
EXTRN	z900_1835:PROC
EXTRN	s390_1834:PROC
EXTRN	s370_1885:PROC
EXTRN	z900_1836:PROC
EXTRN	s390_1835:PROC
EXTRN	s370_1886:PROC
EXTRN	z900_1837:PROC
EXTRN	s390_1836:PROC
EXTRN	s370_1887:PROC
EXTRN	z900_1838:PROC
EXTRN	s390_1837:PROC
EXTRN	s370_1888:PROC
EXTRN	z900_1839:PROC
EXTRN	s390_1838:PROC
EXTRN	s370_1889:PROC
EXTRN	z900_183A:PROC
EXTRN	s390_1839:PROC
EXTRN	s370_188A:PROC
EXTRN	z900_183B:PROC
EXTRN	s390_183A:PROC
EXTRN	s370_188B:PROC
EXTRN	z900_183C:PROC
EXTRN	s390_183B:PROC
EXTRN	s370_188C:PROC
EXTRN	z900_183D:PROC
EXTRN	s390_183C:PROC
EXTRN	s370_188D:PROC
EXTRN	z900_183E:PROC
EXTRN	s390_183D:PROC
EXTRN	s370_188E:PROC
EXTRN	z900_183F:PROC
EXTRN	s390_183E:PROC
EXTRN	s370_188F:PROC
EXTRN	z900_1840:PROC
EXTRN	s390_183F:PROC
EXTRN	s370_1890:PROC
EXTRN	z900_1841:PROC
EXTRN	s390_1840:PROC
EXTRN	s370_1891:PROC
EXTRN	z900_1842:PROC
EXTRN	s390_1841:PROC
EXTRN	s370_1892:PROC
EXTRN	z900_1843:PROC
EXTRN	s390_1842:PROC
EXTRN	s370_1893:PROC
EXTRN	z900_1844:PROC
EXTRN	s390_1843:PROC
EXTRN	s370_1894:PROC
EXTRN	z900_1845:PROC
EXTRN	s390_1844:PROC
EXTRN	s370_1895:PROC
EXTRN	z900_1846:PROC
EXTRN	s390_1845:PROC
EXTRN	s370_1896:PROC
EXTRN	z900_1847:PROC
EXTRN	s390_1846:PROC
EXTRN	s370_1897:PROC
EXTRN	z900_1848:PROC
EXTRN	s390_1847:PROC
EXTRN	s370_1898:PROC
EXTRN	z900_1849:PROC
EXTRN	s390_1848:PROC
EXTRN	s370_1899:PROC
EXTRN	z900_184A:PROC
EXTRN	s390_1849:PROC
EXTRN	s370_189A:PROC
EXTRN	z900_184B:PROC
EXTRN	s390_184A:PROC
EXTRN	s370_189B:PROC
EXTRN	z900_184C:PROC
EXTRN	s390_184B:PROC
EXTRN	s370_189C:PROC
EXTRN	z900_184D:PROC
EXTRN	s390_184C:PROC
EXTRN	s370_189D:PROC
EXTRN	z900_184E:PROC
EXTRN	s390_184D:PROC
EXTRN	s370_189E:PROC
EXTRN	z900_184F:PROC
EXTRN	s390_184E:PROC
EXTRN	s370_189F:PROC
EXTRN	z900_1850:PROC
EXTRN	s390_184F:PROC
EXTRN	s370_18A0:PROC
EXTRN	z900_1851:PROC
EXTRN	s390_1850:PROC
EXTRN	s370_18A1:PROC
EXTRN	z900_1852:PROC
EXTRN	s390_1851:PROC
EXTRN	s370_18A2:PROC
EXTRN	z900_1853:PROC
EXTRN	s390_1852:PROC
EXTRN	s370_18A3:PROC
EXTRN	z900_1854:PROC
EXTRN	s390_1853:PROC
EXTRN	s370_18A4:PROC
EXTRN	z900_1855:PROC
EXTRN	s390_1854:PROC
EXTRN	s370_18A5:PROC
EXTRN	z900_1856:PROC
EXTRN	s390_1855:PROC
EXTRN	s370_18A6:PROC
EXTRN	z900_1857:PROC
EXTRN	s390_1856:PROC
EXTRN	s370_18A7:PROC
EXTRN	z900_1858:PROC
EXTRN	s390_1857:PROC
EXTRN	s370_18A8:PROC
EXTRN	z900_1859:PROC
EXTRN	s390_1858:PROC
EXTRN	s370_18A9:PROC
EXTRN	z900_185A:PROC
EXTRN	s390_1859:PROC
EXTRN	s370_18AA:PROC
EXTRN	z900_185B:PROC
EXTRN	s390_185A:PROC
EXTRN	s370_18AB:PROC
EXTRN	z900_185C:PROC
EXTRN	s390_185B:PROC
EXTRN	s370_18AC:PROC
EXTRN	z900_185D:PROC
EXTRN	s390_185C:PROC
EXTRN	s370_18AD:PROC
EXTRN	z900_185E:PROC
EXTRN	s390_185D:PROC
EXTRN	s370_18AE:PROC
EXTRN	z900_185F:PROC
EXTRN	s390_185E:PROC
EXTRN	s370_18AF:PROC
EXTRN	z900_1860:PROC
EXTRN	s390_185F:PROC
EXTRN	s370_18B0:PROC
EXTRN	z900_1861:PROC
EXTRN	s390_1860:PROC
EXTRN	s370_18B1:PROC
EXTRN	z900_1862:PROC
EXTRN	s390_1861:PROC
EXTRN	s370_18B2:PROC
EXTRN	z900_1863:PROC
EXTRN	s390_1862:PROC
EXTRN	s370_18B3:PROC
EXTRN	z900_1864:PROC
EXTRN	s390_1863:PROC
EXTRN	s370_18B4:PROC
EXTRN	z900_1865:PROC
EXTRN	s390_1864:PROC
EXTRN	s370_18B5:PROC
EXTRN	z900_1866:PROC
EXTRN	s390_1865:PROC
EXTRN	s370_18B6:PROC
EXTRN	z900_1867:PROC
EXTRN	s390_1866:PROC
EXTRN	s370_18B7:PROC
EXTRN	z900_1868:PROC
EXTRN	s390_1867:PROC
EXTRN	s370_18B8:PROC
EXTRN	z900_1869:PROC
EXTRN	s390_1868:PROC
EXTRN	s370_18B9:PROC
EXTRN	z900_186A:PROC
EXTRN	s390_1869:PROC
EXTRN	s370_18BA:PROC
EXTRN	z900_186B:PROC
EXTRN	s390_186A:PROC
EXTRN	s370_18BB:PROC
EXTRN	z900_186C:PROC
EXTRN	s390_186B:PROC
EXTRN	s370_18BC:PROC
EXTRN	z900_186D:PROC
EXTRN	s390_186C:PROC
EXTRN	s370_18BD:PROC
EXTRN	z900_186E:PROC
EXTRN	s390_186D:PROC
EXTRN	s370_18BE:PROC
EXTRN	z900_186F:PROC
EXTRN	s390_186E:PROC
EXTRN	s370_18BF:PROC
EXTRN	z900_1870:PROC
EXTRN	s390_186F:PROC
EXTRN	s370_18C0:PROC
EXTRN	z900_1871:PROC
EXTRN	s390_1870:PROC
EXTRN	s370_18C1:PROC
EXTRN	z900_1872:PROC
EXTRN	s390_1871:PROC
EXTRN	s370_18C2:PROC
EXTRN	z900_1873:PROC
EXTRN	s390_1872:PROC
EXTRN	s370_18C3:PROC
EXTRN	z900_1874:PROC
EXTRN	s390_1873:PROC
EXTRN	s370_18C4:PROC
EXTRN	z900_1875:PROC
EXTRN	s390_1874:PROC
EXTRN	s370_18C5:PROC
EXTRN	z900_1876:PROC
EXTRN	s390_1875:PROC
EXTRN	s370_18C6:PROC
EXTRN	z900_1877:PROC
EXTRN	s390_1876:PROC
EXTRN	s370_18C7:PROC
EXTRN	z900_1878:PROC
EXTRN	s390_1877:PROC
EXTRN	s370_18C8:PROC
EXTRN	z900_1879:PROC
EXTRN	s390_1878:PROC
EXTRN	s370_18C9:PROC
EXTRN	z900_187A:PROC
EXTRN	s390_1879:PROC
EXTRN	s370_18CA:PROC
EXTRN	z900_187B:PROC
EXTRN	s390_187A:PROC
EXTRN	s370_18CB:PROC
EXTRN	z900_187C:PROC
EXTRN	s390_187B:PROC
EXTRN	s370_18CC:PROC
EXTRN	z900_187D:PROC
EXTRN	s390_187C:PROC
EXTRN	s370_18CD:PROC
EXTRN	z900_187E:PROC
EXTRN	s390_187D:PROC
EXTRN	s370_18CE:PROC
EXTRN	z900_187F:PROC
EXTRN	s390_187E:PROC
EXTRN	s370_18CF:PROC
EXTRN	z900_1880:PROC
EXTRN	s390_187F:PROC
EXTRN	s370_18D0:PROC
EXTRN	z900_1881:PROC
EXTRN	s390_1880:PROC
EXTRN	s370_18D1:PROC
EXTRN	z900_1882:PROC
EXTRN	s390_1881:PROC
EXTRN	s370_18D2:PROC
EXTRN	z900_1883:PROC
EXTRN	s390_1882:PROC
EXTRN	s370_18D3:PROC
EXTRN	z900_1884:PROC
EXTRN	s390_1883:PROC
EXTRN	s370_18D4:PROC
EXTRN	z900_1885:PROC
EXTRN	s390_1884:PROC
EXTRN	s370_18D5:PROC
EXTRN	z900_1886:PROC
EXTRN	s390_1885:PROC
EXTRN	s370_18D6:PROC
EXTRN	z900_1887:PROC
EXTRN	s390_1886:PROC
EXTRN	s370_18D7:PROC
EXTRN	z900_1888:PROC
EXTRN	s390_1887:PROC
EXTRN	s370_18D8:PROC
EXTRN	z900_1889:PROC
EXTRN	s390_1888:PROC
EXTRN	s370_18D9:PROC
EXTRN	z900_188A:PROC
EXTRN	s390_1889:PROC
EXTRN	s370_18DA:PROC
EXTRN	z900_188B:PROC
EXTRN	s390_188A:PROC
EXTRN	s370_18DB:PROC
EXTRN	z900_188C:PROC
EXTRN	s390_188B:PROC
EXTRN	s370_18DC:PROC
EXTRN	z900_188D:PROC
EXTRN	s390_188C:PROC
EXTRN	s370_18DD:PROC
EXTRN	z900_188E:PROC
EXTRN	s390_188D:PROC
EXTRN	s370_18DE:PROC
EXTRN	z900_188F:PROC
EXTRN	s390_188E:PROC
EXTRN	s370_18DF:PROC
EXTRN	z900_1890:PROC
EXTRN	s390_188F:PROC
EXTRN	s370_18E0:PROC
EXTRN	z900_1891:PROC
EXTRN	s390_1890:PROC
EXTRN	s370_18E1:PROC
EXTRN	z900_1892:PROC
EXTRN	s390_1891:PROC
EXTRN	s370_18E2:PROC
EXTRN	z900_1893:PROC
EXTRN	s390_1892:PROC
EXTRN	s370_18E3:PROC
EXTRN	z900_1894:PROC
EXTRN	s390_1893:PROC
EXTRN	s370_18E4:PROC
EXTRN	z900_1895:PROC
EXTRN	s390_1894:PROC
EXTRN	s370_18E5:PROC
EXTRN	z900_1896:PROC
EXTRN	s390_1895:PROC
EXTRN	s370_18E6:PROC
EXTRN	z900_1897:PROC
EXTRN	s390_1896:PROC
EXTRN	s370_18E7:PROC
EXTRN	z900_1898:PROC
EXTRN	s390_1897:PROC
EXTRN	s370_18E8:PROC
EXTRN	z900_1899:PROC
EXTRN	s390_1898:PROC
EXTRN	s370_18E9:PROC
EXTRN	z900_189A:PROC
EXTRN	s390_1899:PROC
EXTRN	s370_18EA:PROC
EXTRN	z900_189B:PROC
EXTRN	s390_189A:PROC
EXTRN	s370_18EB:PROC
EXTRN	z900_189C:PROC
EXTRN	s390_189B:PROC
EXTRN	s370_18EC:PROC
EXTRN	z900_189D:PROC
EXTRN	s390_189C:PROC
EXTRN	s370_18ED:PROC
EXTRN	z900_189E:PROC
EXTRN	s390_189D:PROC
EXTRN	s370_18EE:PROC
EXTRN	z900_189F:PROC
EXTRN	s390_189E:PROC
EXTRN	s370_18EF:PROC
EXTRN	z900_18A0:PROC
EXTRN	s390_189F:PROC
EXTRN	s370_18F0:PROC
EXTRN	z900_18A1:PROC
EXTRN	s390_18A0:PROC
EXTRN	s370_18F1:PROC
EXTRN	z900_18A2:PROC
EXTRN	s390_18A1:PROC
EXTRN	s370_18F2:PROC
EXTRN	z900_18A3:PROC
EXTRN	s390_18A2:PROC
EXTRN	s370_18F3:PROC
EXTRN	z900_18A4:PROC
EXTRN	s390_18A3:PROC
EXTRN	s370_18F4:PROC
EXTRN	z900_18A5:PROC
EXTRN	s390_18A4:PROC
EXTRN	s370_18F5:PROC
EXTRN	z900_18A6:PROC
EXTRN	s390_18A5:PROC
EXTRN	s370_18F6:PROC
EXTRN	z900_18A7:PROC
EXTRN	s390_18A6:PROC
EXTRN	s370_18F7:PROC
EXTRN	z900_18A8:PROC
EXTRN	s390_18A7:PROC
EXTRN	s370_18F8:PROC
EXTRN	z900_18A9:PROC
EXTRN	s390_18A8:PROC
EXTRN	s370_18F9:PROC
EXTRN	z900_18AA:PROC
EXTRN	s390_18A9:PROC
EXTRN	s370_18FA:PROC
EXTRN	z900_18AB:PROC
EXTRN	s390_18AA:PROC
EXTRN	s370_18FB:PROC
EXTRN	z900_18AC:PROC
EXTRN	s390_18AB:PROC
EXTRN	s370_18FC:PROC
EXTRN	z900_18AD:PROC
EXTRN	s390_18AC:PROC
EXTRN	s370_18FD:PROC
EXTRN	z900_18AE:PROC
EXTRN	s390_18AD:PROC
EXTRN	s370_18FE:PROC
EXTRN	z900_18AF:PROC
EXTRN	s390_18AE:PROC
EXTRN	s370_18FF:PROC
EXTRN	z900_18B0:PROC
EXTRN	s390_18AF:PROC
EXTRN	s370_1E00:PROC
EXTRN	z900_18B1:PROC
EXTRN	s390_18B0:PROC
EXTRN	s370_1E01:PROC
EXTRN	z900_18B2:PROC
EXTRN	s390_18B1:PROC
EXTRN	s370_1E02:PROC
EXTRN	z900_18B3:PROC
EXTRN	s390_18B2:PROC
EXTRN	s370_1E03:PROC
EXTRN	z900_18B4:PROC
EXTRN	s390_18B3:PROC
EXTRN	s370_1E04:PROC
EXTRN	z900_18B5:PROC
EXTRN	s390_18B4:PROC
EXTRN	s370_1E05:PROC
EXTRN	z900_18B6:PROC
EXTRN	s390_18B5:PROC
EXTRN	s370_1E06:PROC
EXTRN	z900_18B7:PROC
EXTRN	s390_18B6:PROC
EXTRN	s370_1E07:PROC
EXTRN	z900_18B8:PROC
EXTRN	s390_18B7:PROC
EXTRN	s370_1E08:PROC
EXTRN	z900_18B9:PROC
EXTRN	s390_18B8:PROC
EXTRN	s370_1E09:PROC
EXTRN	z900_18BA:PROC
EXTRN	s390_18B9:PROC
EXTRN	s370_1E0A:PROC
EXTRN	z900_18BB:PROC
EXTRN	s390_18BA:PROC
EXTRN	s370_1E0B:PROC
EXTRN	z900_18BC:PROC
EXTRN	s390_18BB:PROC
EXTRN	s370_1E0C:PROC
EXTRN	z900_18BD:PROC
EXTRN	s390_18BC:PROC
EXTRN	s370_1E0D:PROC
EXTRN	z900_18BE:PROC
EXTRN	s390_18BD:PROC
EXTRN	s370_1E0E:PROC
EXTRN	z900_18BF:PROC
EXTRN	s390_18BE:PROC
EXTRN	s370_1E0F:PROC
EXTRN	z900_18C0:PROC
EXTRN	s390_18BF:PROC
EXTRN	s370_1E10:PROC
EXTRN	z900_18C1:PROC
EXTRN	s390_18C0:PROC
EXTRN	s370_1E11:PROC
EXTRN	z900_18C2:PROC
EXTRN	s390_18C1:PROC
EXTRN	s370_1E12:PROC
EXTRN	z900_18C3:PROC
EXTRN	s390_18C2:PROC
EXTRN	s370_1E13:PROC
EXTRN	z900_18C4:PROC
EXTRN	s390_18C3:PROC
EXTRN	s370_1E14:PROC
EXTRN	z900_18C5:PROC
EXTRN	s390_18C4:PROC
EXTRN	s370_1E15:PROC
EXTRN	z900_18C6:PROC
EXTRN	s390_18C5:PROC
EXTRN	s370_1E16:PROC
EXTRN	z900_18C7:PROC
EXTRN	s390_18C6:PROC
EXTRN	s370_1E17:PROC
EXTRN	z900_18C8:PROC
EXTRN	s390_18C7:PROC
EXTRN	s370_1E18:PROC
EXTRN	z900_18C9:PROC
EXTRN	s390_18C8:PROC
EXTRN	s370_1E19:PROC
EXTRN	z900_18CA:PROC
EXTRN	s390_18C9:PROC
EXTRN	s370_1E1A:PROC
EXTRN	z900_18CB:PROC
EXTRN	s390_18CA:PROC
EXTRN	s370_1E1B:PROC
EXTRN	z900_18CC:PROC
EXTRN	s390_18CB:PROC
EXTRN	s370_1E1C:PROC
EXTRN	z900_18CD:PROC
EXTRN	s390_18CC:PROC
EXTRN	s370_1E1D:PROC
EXTRN	z900_18CE:PROC
EXTRN	s390_18CD:PROC
EXTRN	s370_1E1E:PROC
EXTRN	z900_18CF:PROC
EXTRN	s390_18CE:PROC
EXTRN	s370_1E1F:PROC
EXTRN	z900_18D0:PROC
EXTRN	s390_18CF:PROC
EXTRN	s370_1E20:PROC
EXTRN	z900_18D1:PROC
EXTRN	s390_18D0:PROC
EXTRN	s370_1E21:PROC
EXTRN	z900_18D2:PROC
EXTRN	s390_18D1:PROC
EXTRN	s370_1E22:PROC
EXTRN	z900_18D3:PROC
EXTRN	s390_18D2:PROC
EXTRN	s370_1E23:PROC
EXTRN	z900_18D4:PROC
EXTRN	s390_18D3:PROC
EXTRN	s370_1E24:PROC
EXTRN	z900_18D5:PROC
EXTRN	s390_18D4:PROC
EXTRN	s370_1E25:PROC
EXTRN	z900_18D6:PROC
EXTRN	s390_18D5:PROC
EXTRN	s370_1E26:PROC
EXTRN	z900_18D7:PROC
EXTRN	s390_18D6:PROC
EXTRN	s370_1E27:PROC
EXTRN	z900_18D8:PROC
EXTRN	s390_18D7:PROC
EXTRN	s370_1E28:PROC
EXTRN	z900_18D9:PROC
EXTRN	s390_18D8:PROC
EXTRN	s370_1E29:PROC
EXTRN	z900_18DA:PROC
EXTRN	s390_18D9:PROC
EXTRN	s370_1E2A:PROC
EXTRN	z900_18DB:PROC
EXTRN	s390_18DA:PROC
EXTRN	s370_1E2B:PROC
EXTRN	z900_18DC:PROC
EXTRN	s390_18DB:PROC
EXTRN	s370_1E2C:PROC
EXTRN	z900_18DD:PROC
EXTRN	s390_18DC:PROC
EXTRN	s370_1E2D:PROC
EXTRN	z900_18DE:PROC
EXTRN	s390_18DD:PROC
EXTRN	s370_1E2E:PROC
EXTRN	z900_18DF:PROC
EXTRN	s390_18DE:PROC
EXTRN	s370_1E2F:PROC
EXTRN	z900_18E0:PROC
EXTRN	s390_18DF:PROC
EXTRN	s370_1E30:PROC
EXTRN	z900_18E1:PROC
EXTRN	s390_18E0:PROC
EXTRN	s370_1E31:PROC
EXTRN	z900_18E2:PROC
EXTRN	s390_18E1:PROC
EXTRN	s370_1E32:PROC
EXTRN	z900_18E3:PROC
EXTRN	s390_18E2:PROC
EXTRN	s370_1E33:PROC
EXTRN	z900_18E4:PROC
EXTRN	s390_18E3:PROC
EXTRN	s370_1E34:PROC
EXTRN	z900_18E5:PROC
EXTRN	s390_18E4:PROC
EXTRN	s370_1E35:PROC
EXTRN	z900_18E6:PROC
EXTRN	s390_18E5:PROC
EXTRN	s370_1E36:PROC
EXTRN	z900_18E7:PROC
EXTRN	s390_18E6:PROC
EXTRN	s370_1E37:PROC
EXTRN	z900_18E8:PROC
EXTRN	s390_18E7:PROC
EXTRN	s370_1E38:PROC
EXTRN	z900_18E9:PROC
EXTRN	s390_18E8:PROC
EXTRN	s370_1E39:PROC
EXTRN	z900_18EA:PROC
EXTRN	s390_18E9:PROC
EXTRN	s370_1E3A:PROC
EXTRN	z900_18EB:PROC
EXTRN	s390_18EA:PROC
EXTRN	s370_1E3B:PROC
EXTRN	z900_18EC:PROC
EXTRN	s390_18EB:PROC
EXTRN	s370_1E3C:PROC
EXTRN	z900_18ED:PROC
EXTRN	s390_18EC:PROC
EXTRN	s370_1E3D:PROC
EXTRN	z900_18EE:PROC
EXTRN	s390_18ED:PROC
EXTRN	s370_1E3E:PROC
EXTRN	z900_18EF:PROC
EXTRN	s390_18EE:PROC
EXTRN	s370_1E3F:PROC
EXTRN	z900_18F0:PROC
EXTRN	s390_18EF:PROC
EXTRN	s370_1E40:PROC
EXTRN	z900_18F1:PROC
EXTRN	s390_18F0:PROC
EXTRN	s370_1E41:PROC
EXTRN	z900_18F2:PROC
EXTRN	s390_18F1:PROC
EXTRN	s370_1E42:PROC
EXTRN	z900_18F3:PROC
EXTRN	s390_18F2:PROC
EXTRN	s370_1E43:PROC
EXTRN	z900_18F4:PROC
EXTRN	s390_18F3:PROC
EXTRN	s370_1E44:PROC
EXTRN	z900_18F5:PROC
EXTRN	s390_18F4:PROC
EXTRN	s370_1E45:PROC
EXTRN	z900_18F6:PROC
EXTRN	s390_18F5:PROC
EXTRN	s370_1E46:PROC
EXTRN	z900_18F7:PROC
EXTRN	s390_18F6:PROC
EXTRN	s370_1E47:PROC
EXTRN	z900_18F8:PROC
EXTRN	s390_18F7:PROC
EXTRN	s370_1E48:PROC
EXTRN	z900_18F9:PROC
EXTRN	s390_18F8:PROC
EXTRN	s370_1E49:PROC
EXTRN	z900_18FA:PROC
EXTRN	s390_18F9:PROC
EXTRN	s370_1E4A:PROC
EXTRN	z900_18FB:PROC
EXTRN	s390_18FA:PROC
EXTRN	s370_1E4B:PROC
EXTRN	z900_18FC:PROC
EXTRN	s390_18FB:PROC
EXTRN	s370_1E4C:PROC
EXTRN	z900_18FD:PROC
EXTRN	s390_18FC:PROC
EXTRN	s370_1E4D:PROC
EXTRN	z900_18FE:PROC
EXTRN	s390_18FD:PROC
EXTRN	s370_1E4E:PROC
EXTRN	z900_18FF:PROC
EXTRN	s390_18FE:PROC
EXTRN	s370_1E4F:PROC
EXTRN	z900_1E00:PROC
EXTRN	s390_18FF:PROC
EXTRN	s370_1E50:PROC
EXTRN	z900_1E01:PROC
EXTRN	s390_1E00:PROC
EXTRN	s370_1E51:PROC
EXTRN	z900_1E02:PROC
EXTRN	s390_1E01:PROC
EXTRN	s370_1E52:PROC
EXTRN	z900_1E03:PROC
EXTRN	s390_1E02:PROC
EXTRN	s370_1E53:PROC
EXTRN	z900_1E04:PROC
EXTRN	s390_1E03:PROC
EXTRN	s370_1E54:PROC
EXTRN	z900_1E05:PROC
EXTRN	s390_1E04:PROC
EXTRN	s370_1E55:PROC
EXTRN	z900_1E06:PROC
EXTRN	s390_1E05:PROC
EXTRN	s370_1E56:PROC
EXTRN	z900_1E07:PROC
EXTRN	s390_1E06:PROC
EXTRN	s370_1E57:PROC
EXTRN	z900_1E08:PROC
EXTRN	s390_1E07:PROC
EXTRN	s370_1E58:PROC
EXTRN	z900_1E09:PROC
EXTRN	s390_1E08:PROC
EXTRN	s370_1E59:PROC
EXTRN	z900_1E0A:PROC
EXTRN	s390_1E09:PROC
EXTRN	s370_1E5A:PROC
EXTRN	z900_1E0B:PROC
EXTRN	s390_1E0A:PROC
EXTRN	s370_1E5B:PROC
EXTRN	z900_1E0C:PROC
EXTRN	s390_1E0B:PROC
EXTRN	s370_1E5C:PROC
EXTRN	z900_1E0D:PROC
EXTRN	s390_1E0C:PROC
EXTRN	s370_1E5D:PROC
EXTRN	z900_1E0E:PROC
EXTRN	s390_1E0D:PROC
EXTRN	s370_1E5E:PROC
EXTRN	z900_1E0F:PROC
EXTRN	s390_1E0E:PROC
EXTRN	s370_1E5F:PROC
EXTRN	z900_1E10:PROC
EXTRN	s390_1E0F:PROC
EXTRN	s370_1E60:PROC
EXTRN	z900_1E11:PROC
EXTRN	s390_1E10:PROC
EXTRN	s370_1E61:PROC
EXTRN	z900_1E12:PROC
EXTRN	s390_1E11:PROC
EXTRN	s370_1E62:PROC
EXTRN	z900_1E13:PROC
EXTRN	s390_1E12:PROC
EXTRN	s370_1E63:PROC
EXTRN	z900_1E14:PROC
EXTRN	s390_1E13:PROC
EXTRN	s370_1E64:PROC
EXTRN	z900_1E15:PROC
EXTRN	s390_1E14:PROC
EXTRN	s370_1E65:PROC
EXTRN	z900_1E16:PROC
EXTRN	s390_1E15:PROC
EXTRN	s370_1E66:PROC
EXTRN	z900_1E17:PROC
EXTRN	s390_1E16:PROC
EXTRN	s370_1E67:PROC
EXTRN	z900_1E18:PROC
EXTRN	s390_1E17:PROC
EXTRN	s370_1E68:PROC
EXTRN	z900_1E19:PROC
EXTRN	s390_1E18:PROC
EXTRN	s370_1E69:PROC
EXTRN	z900_1E1A:PROC
EXTRN	s390_1E19:PROC
EXTRN	s370_1E6A:PROC
EXTRN	z900_1E1B:PROC
EXTRN	s390_1E1A:PROC
EXTRN	s370_1E6B:PROC
EXTRN	z900_1E1C:PROC
EXTRN	s390_1E1B:PROC
EXTRN	s370_1E6C:PROC
EXTRN	z900_1E1D:PROC
EXTRN	s390_1E1C:PROC
EXTRN	s370_1E6D:PROC
EXTRN	z900_1E1E:PROC
EXTRN	s390_1E1D:PROC
EXTRN	s370_1E6E:PROC
EXTRN	z900_1E1F:PROC
EXTRN	s390_1E1E:PROC
EXTRN	s370_1E6F:PROC
EXTRN	z900_1E20:PROC
EXTRN	s390_1E1F:PROC
EXTRN	s370_1E70:PROC
EXTRN	z900_1E21:PROC
EXTRN	s390_1E20:PROC
EXTRN	s370_1E71:PROC
EXTRN	z900_1E22:PROC
EXTRN	s390_1E21:PROC
EXTRN	s370_1E72:PROC
EXTRN	z900_1E23:PROC
EXTRN	s390_1E22:PROC
EXTRN	s370_1E73:PROC
EXTRN	z900_1E24:PROC
EXTRN	s390_1E23:PROC
EXTRN	s370_1E74:PROC
EXTRN	z900_1E25:PROC
EXTRN	s390_1E24:PROC
EXTRN	s370_1E75:PROC
EXTRN	z900_1E26:PROC
EXTRN	s390_1E25:PROC
EXTRN	s370_1E76:PROC
EXTRN	z900_1E27:PROC
EXTRN	s390_1E26:PROC
EXTRN	s370_1E77:PROC
EXTRN	z900_1E28:PROC
EXTRN	s390_1E27:PROC
EXTRN	s370_1E78:PROC
EXTRN	z900_1E29:PROC
EXTRN	s390_1E28:PROC
EXTRN	s370_1E79:PROC
EXTRN	z900_1E2A:PROC
EXTRN	s390_1E29:PROC
EXTRN	s370_1E7A:PROC
EXTRN	z900_1E2B:PROC
EXTRN	s390_1E2A:PROC
EXTRN	s370_1E7B:PROC
EXTRN	z900_1E2C:PROC
EXTRN	s390_1E2B:PROC
EXTRN	s370_1E7C:PROC
EXTRN	z900_1E2D:PROC
EXTRN	s390_1E2C:PROC
EXTRN	s370_1E7D:PROC
EXTRN	z900_1E2E:PROC
EXTRN	s390_1E2D:PROC
EXTRN	s370_1E7E:PROC
EXTRN	z900_1E2F:PROC
EXTRN	s390_1E2E:PROC
EXTRN	s370_1E7F:PROC
EXTRN	z900_1E30:PROC
EXTRN	s390_1E2F:PROC
EXTRN	s370_1E80:PROC
EXTRN	z900_1E31:PROC
EXTRN	s390_1E30:PROC
EXTRN	s370_1E81:PROC
EXTRN	z900_1E32:PROC
EXTRN	s390_1E31:PROC
EXTRN	s370_1E82:PROC
EXTRN	z900_1E33:PROC
EXTRN	s390_1E32:PROC
EXTRN	s370_1E83:PROC
EXTRN	z900_1E34:PROC
EXTRN	s390_1E33:PROC
EXTRN	s370_1E84:PROC
EXTRN	z900_1E35:PROC
EXTRN	s390_1E34:PROC
EXTRN	s370_1E85:PROC
EXTRN	z900_1E36:PROC
EXTRN	s390_1E35:PROC
EXTRN	s370_1E86:PROC
EXTRN	z900_1E37:PROC
EXTRN	s390_1E36:PROC
EXTRN	s370_1E87:PROC
EXTRN	z900_1E38:PROC
EXTRN	s390_1E37:PROC
EXTRN	s370_1E88:PROC
EXTRN	z900_1E39:PROC
EXTRN	s390_1E38:PROC
EXTRN	s370_1E89:PROC
EXTRN	z900_1E3A:PROC
EXTRN	s390_1E39:PROC
EXTRN	s370_1E8A:PROC
EXTRN	z900_1E3B:PROC
EXTRN	s390_1E3A:PROC
EXTRN	s370_1E8B:PROC
EXTRN	z900_1E3C:PROC
EXTRN	s390_1E3B:PROC
EXTRN	s370_1E8C:PROC
EXTRN	z900_1E3D:PROC
EXTRN	s390_1E3C:PROC
EXTRN	s370_1E8D:PROC
EXTRN	z900_1E3E:PROC
EXTRN	s390_1E3D:PROC
EXTRN	s370_1E8E:PROC
EXTRN	z900_1E3F:PROC
EXTRN	s390_1E3E:PROC
EXTRN	s370_1E8F:PROC
EXTRN	z900_1E40:PROC
EXTRN	s390_1E3F:PROC
EXTRN	s370_1E90:PROC
EXTRN	z900_1E41:PROC
EXTRN	s390_1E40:PROC
EXTRN	s370_1E91:PROC
EXTRN	z900_1E42:PROC
EXTRN	s390_1E41:PROC
EXTRN	s370_1E92:PROC
EXTRN	z900_1E43:PROC
EXTRN	s390_1E42:PROC
EXTRN	s370_1E93:PROC
EXTRN	z900_1E44:PROC
EXTRN	s390_1E43:PROC
EXTRN	s370_1E94:PROC
EXTRN	z900_1E45:PROC
EXTRN	s390_1E44:PROC
EXTRN	s370_1E95:PROC
EXTRN	z900_1E46:PROC
EXTRN	s390_1E45:PROC
EXTRN	s370_1E96:PROC
EXTRN	z900_1E47:PROC
EXTRN	s390_1E46:PROC
EXTRN	s370_1E97:PROC
EXTRN	z900_1E48:PROC
EXTRN	s390_1E47:PROC
EXTRN	s370_1E98:PROC
EXTRN	z900_1E49:PROC
EXTRN	s390_1E48:PROC
EXTRN	s370_1E99:PROC
EXTRN	z900_1E4A:PROC
EXTRN	s390_1E49:PROC
EXTRN	s370_1E9A:PROC
EXTRN	z900_1E4B:PROC
EXTRN	s390_1E4A:PROC
EXTRN	s370_1E9B:PROC
EXTRN	z900_1E4C:PROC
EXTRN	s390_1E4B:PROC
EXTRN	s370_1E9C:PROC
EXTRN	z900_1E4D:PROC
EXTRN	s390_1E4C:PROC
EXTRN	s370_1E9D:PROC
EXTRN	z900_1E4E:PROC
EXTRN	s390_1E4D:PROC
EXTRN	s370_1E9E:PROC
EXTRN	z900_1E4F:PROC
EXTRN	s390_1E4E:PROC
EXTRN	s370_1E9F:PROC
EXTRN	z900_1E50:PROC
EXTRN	s390_1E4F:PROC
EXTRN	s370_1EA0:PROC
EXTRN	z900_1E51:PROC
EXTRN	s390_1E50:PROC
EXTRN	s370_1EA1:PROC
EXTRN	z900_1E52:PROC
EXTRN	s390_1E51:PROC
EXTRN	s370_1EA2:PROC
EXTRN	z900_1E53:PROC
EXTRN	s390_1E52:PROC
EXTRN	s370_1EA3:PROC
EXTRN	z900_1E54:PROC
EXTRN	s390_1E53:PROC
EXTRN	s370_1EA4:PROC
EXTRN	z900_1E55:PROC
EXTRN	s390_1E54:PROC
EXTRN	s370_1EA5:PROC
EXTRN	z900_1E56:PROC
EXTRN	s390_1E55:PROC
EXTRN	s370_1EA6:PROC
EXTRN	z900_1E57:PROC
EXTRN	s390_1E56:PROC
EXTRN	s370_1EA7:PROC
EXTRN	z900_1E58:PROC
EXTRN	s390_1E57:PROC
EXTRN	s370_1EA8:PROC
EXTRN	z900_1E59:PROC
EXTRN	s390_1E58:PROC
EXTRN	s370_1EA9:PROC
EXTRN	z900_1E5A:PROC
EXTRN	s390_1E59:PROC
EXTRN	s370_1EAA:PROC
EXTRN	z900_1E5B:PROC
EXTRN	s390_1E5A:PROC
EXTRN	s370_1EAB:PROC
EXTRN	z900_1E5C:PROC
EXTRN	s390_1E5B:PROC
EXTRN	s370_1EAC:PROC
EXTRN	z900_1E5D:PROC
EXTRN	s390_1E5C:PROC
EXTRN	s370_1EAD:PROC
EXTRN	z900_1E5E:PROC
EXTRN	s390_1E5D:PROC
EXTRN	s370_1EAE:PROC
EXTRN	z900_1E5F:PROC
EXTRN	s390_1E5E:PROC
EXTRN	s370_1EAF:PROC
EXTRN	z900_1E60:PROC
EXTRN	s390_1E5F:PROC
EXTRN	s370_1EB0:PROC
EXTRN	z900_1E61:PROC
EXTRN	s390_1E60:PROC
EXTRN	s370_1EB1:PROC
EXTRN	z900_1E62:PROC
EXTRN	s390_1E61:PROC
EXTRN	s370_1EB2:PROC
EXTRN	z900_1E63:PROC
EXTRN	s390_1E62:PROC
EXTRN	s370_1EB3:PROC
EXTRN	z900_1E64:PROC
EXTRN	s390_1E63:PROC
EXTRN	s370_1EB4:PROC
EXTRN	z900_1E65:PROC
EXTRN	s390_1E64:PROC
EXTRN	s370_1EB5:PROC
EXTRN	z900_1E66:PROC
EXTRN	s390_1E65:PROC
EXTRN	s370_1EB6:PROC
EXTRN	z900_1E67:PROC
EXTRN	s390_1E66:PROC
EXTRN	s370_1EB7:PROC
EXTRN	z900_1E68:PROC
EXTRN	s390_1E67:PROC
EXTRN	s370_1EB8:PROC
EXTRN	z900_1E69:PROC
EXTRN	s390_1E68:PROC
EXTRN	s370_1EB9:PROC
EXTRN	z900_1E6A:PROC
EXTRN	s390_1E69:PROC
EXTRN	s370_1EBA:PROC
EXTRN	z900_1E6B:PROC
EXTRN	s390_1E6A:PROC
EXTRN	s370_1EBB:PROC
EXTRN	z900_1E6C:PROC
EXTRN	s390_1E6B:PROC
EXTRN	s370_1EBC:PROC
EXTRN	z900_1E6D:PROC
EXTRN	s390_1E6C:PROC
EXTRN	s370_1EBD:PROC
EXTRN	z900_1E6E:PROC
EXTRN	s390_1E6D:PROC
EXTRN	s370_1EBE:PROC
EXTRN	z900_1E6F:PROC
EXTRN	s390_1E6E:PROC
EXTRN	s370_1EBF:PROC
EXTRN	z900_1E70:PROC
EXTRN	s390_1E6F:PROC
EXTRN	s370_1EC0:PROC
EXTRN	z900_1E71:PROC
EXTRN	s390_1E70:PROC
EXTRN	s370_1EC1:PROC
EXTRN	z900_1E72:PROC
EXTRN	s390_1E71:PROC
EXTRN	s370_1EC2:PROC
EXTRN	z900_1E73:PROC
EXTRN	s390_1E72:PROC
EXTRN	s370_1EC3:PROC
EXTRN	z900_1E74:PROC
EXTRN	s390_1E73:PROC
EXTRN	s370_1EC4:PROC
EXTRN	z900_1E75:PROC
EXTRN	s390_1E74:PROC
EXTRN	s370_1EC5:PROC
EXTRN	z900_1E76:PROC
EXTRN	s390_1E75:PROC
EXTRN	s370_1EC6:PROC
EXTRN	z900_1E77:PROC
EXTRN	s390_1E76:PROC
EXTRN	s370_1EC7:PROC
EXTRN	z900_1E78:PROC
EXTRN	s390_1E77:PROC
EXTRN	s370_1EC8:PROC
EXTRN	z900_1E79:PROC
EXTRN	s390_1E78:PROC
EXTRN	s370_1EC9:PROC
EXTRN	z900_1E7A:PROC
EXTRN	s390_1E79:PROC
EXTRN	s370_1ECA:PROC
EXTRN	z900_1E7B:PROC
EXTRN	s390_1E7A:PROC
EXTRN	s370_1ECB:PROC
EXTRN	z900_1E7C:PROC
EXTRN	s390_1E7B:PROC
EXTRN	s370_1ECC:PROC
EXTRN	z900_1E7D:PROC
EXTRN	s390_1E7C:PROC
EXTRN	s370_1ECD:PROC
EXTRN	z900_1E7E:PROC
EXTRN	s390_1E7D:PROC
EXTRN	s370_1ECE:PROC
EXTRN	z900_1E7F:PROC
EXTRN	s390_1E7E:PROC
EXTRN	s370_1ECF:PROC
EXTRN	z900_1E80:PROC
EXTRN	s390_1E7F:PROC
EXTRN	s370_1ED0:PROC
EXTRN	z900_1E81:PROC
EXTRN	s390_1E80:PROC
EXTRN	s370_1ED1:PROC
EXTRN	z900_1E82:PROC
EXTRN	s390_1E81:PROC
EXTRN	s370_1ED2:PROC
EXTRN	z900_1E83:PROC
EXTRN	s390_1E82:PROC
EXTRN	s370_1ED3:PROC
EXTRN	z900_1E84:PROC
EXTRN	s390_1E83:PROC
EXTRN	s370_1ED4:PROC
EXTRN	z900_1E85:PROC
EXTRN	s390_1E84:PROC
EXTRN	s370_1ED5:PROC
EXTRN	z900_1E86:PROC
EXTRN	s390_1E85:PROC
EXTRN	s370_1ED6:PROC
EXTRN	z900_1E87:PROC
EXTRN	s390_1E86:PROC
EXTRN	s370_1ED7:PROC
EXTRN	z900_1E88:PROC
EXTRN	s390_1E87:PROC
EXTRN	s370_1ED8:PROC
EXTRN	z900_1E89:PROC
EXTRN	s390_1E88:PROC
EXTRN	s370_1ED9:PROC
EXTRN	z900_1E8A:PROC
EXTRN	s390_1E89:PROC
EXTRN	s370_1EDA:PROC
EXTRN	z900_1E8B:PROC
EXTRN	s390_1E8A:PROC
EXTRN	s370_1EDB:PROC
EXTRN	z900_1E8C:PROC
EXTRN	s390_1E8B:PROC
EXTRN	s370_1EDC:PROC
EXTRN	z900_1E8D:PROC
EXTRN	s390_1E8C:PROC
EXTRN	s370_1EDD:PROC
EXTRN	z900_1E8E:PROC
EXTRN	s390_1E8D:PROC
EXTRN	s370_1EDE:PROC
EXTRN	z900_1E8F:PROC
EXTRN	s390_1E8E:PROC
EXTRN	s370_1EDF:PROC
EXTRN	z900_1E90:PROC
EXTRN	s390_1E8F:PROC
EXTRN	s370_1EE0:PROC
EXTRN	z900_1E91:PROC
EXTRN	s390_1E90:PROC
EXTRN	s370_1EE1:PROC
EXTRN	z900_1E92:PROC
EXTRN	s390_1E91:PROC
EXTRN	s370_1EE2:PROC
EXTRN	z900_1E93:PROC
EXTRN	s390_1E92:PROC
EXTRN	s370_1EE3:PROC
EXTRN	z900_1E94:PROC
EXTRN	s390_1E93:PROC
EXTRN	s370_1EE4:PROC
EXTRN	z900_1E95:PROC
EXTRN	s390_1E94:PROC
EXTRN	s370_1EE5:PROC
EXTRN	z900_1E96:PROC
EXTRN	s390_1E95:PROC
EXTRN	s370_1EE6:PROC
EXTRN	z900_1E97:PROC
EXTRN	s390_1E96:PROC
EXTRN	s370_1EE7:PROC
EXTRN	z900_1E98:PROC
EXTRN	s390_1E97:PROC
EXTRN	s370_1EE8:PROC
EXTRN	z900_1E99:PROC
EXTRN	s390_1E98:PROC
EXTRN	s370_1EE9:PROC
EXTRN	z900_1E9A:PROC
EXTRN	s390_1E99:PROC
EXTRN	s370_1EEA:PROC
EXTRN	z900_1E9B:PROC
EXTRN	s390_1E9A:PROC
EXTRN	s370_1EEB:PROC
EXTRN	z900_1E9C:PROC
EXTRN	s390_1E9B:PROC
EXTRN	s370_1EEC:PROC
EXTRN	z900_1E9D:PROC
EXTRN	s390_1E9C:PROC
EXTRN	s370_1EED:PROC
EXTRN	z900_1E9E:PROC
EXTRN	s390_1E9D:PROC
EXTRN	s370_1EEE:PROC
EXTRN	z900_1E9F:PROC
EXTRN	s390_1E9E:PROC
EXTRN	s370_1EEF:PROC
EXTRN	z900_1EA0:PROC
EXTRN	s390_1E9F:PROC
EXTRN	s370_1EF0:PROC
EXTRN	z900_1EA1:PROC
EXTRN	s390_1EA0:PROC
EXTRN	s370_1EF1:PROC
EXTRN	z900_1EA2:PROC
EXTRN	s390_1EA1:PROC
EXTRN	s370_1EF2:PROC
EXTRN	z900_1EA3:PROC
EXTRN	s390_1EA2:PROC
EXTRN	s370_1EF3:PROC
EXTRN	z900_1EA4:PROC
EXTRN	s390_1EA3:PROC
EXTRN	s370_1EF4:PROC
EXTRN	z900_1EA5:PROC
EXTRN	s390_1EA4:PROC
EXTRN	s370_1EF5:PROC
EXTRN	z900_1EA6:PROC
EXTRN	s390_1EA5:PROC
EXTRN	s370_1EF6:PROC
EXTRN	z900_1EA7:PROC
EXTRN	s390_1EA6:PROC
EXTRN	s370_1EF7:PROC
EXTRN	z900_1EA8:PROC
EXTRN	s390_1EA7:PROC
EXTRN	s370_1EF8:PROC
EXTRN	z900_1EA9:PROC
EXTRN	s390_1EA8:PROC
EXTRN	s370_1EF9:PROC
EXTRN	z900_1EAA:PROC
EXTRN	s390_1EA9:PROC
EXTRN	s370_1EFA:PROC
EXTRN	z900_1EAB:PROC
EXTRN	s390_1EAA:PROC
EXTRN	s370_1EFB:PROC
EXTRN	z900_1EAC:PROC
EXTRN	s390_1EAB:PROC
EXTRN	s370_1EFC:PROC
EXTRN	z900_1EAD:PROC
EXTRN	s390_1EAC:PROC
EXTRN	s370_1EFD:PROC
EXTRN	z900_1EAE:PROC
EXTRN	s390_1EAD:PROC
EXTRN	s370_1EFE:PROC
EXTRN	z900_1EAF:PROC
EXTRN	s390_1EAE:PROC
EXTRN	s370_1EFF:PROC
EXTRN	z900_1EB0:PROC
EXTRN	s370_1500:PROC
EXTRN	s390_1EAF:PROC
EXTRN	z900_1EB1:PROC
EXTRN	s370_1501:PROC
EXTRN	s390_1EB0:PROC
EXTRN	z900_1EB2:PROC
EXTRN	s370_1502:PROC
EXTRN	s390_1EB1:PROC
EXTRN	z900_1EB3:PROC
EXTRN	s370_1503:PROC
EXTRN	s390_1EB2:PROC
EXTRN	z900_1EB4:PROC
EXTRN	s370_1504:PROC
EXTRN	s390_1EB3:PROC
EXTRN	z900_1EB5:PROC
EXTRN	s370_1505:PROC
EXTRN	s390_1EB4:PROC
EXTRN	z900_1EB6:PROC
EXTRN	s370_1506:PROC
EXTRN	s390_1EB5:PROC
EXTRN	z900_1EB7:PROC
EXTRN	s370_1507:PROC
EXTRN	s390_1EB6:PROC
EXTRN	z900_1EB8:PROC
EXTRN	s370_1508:PROC
EXTRN	s390_1EB7:PROC
EXTRN	z900_1EB9:PROC
EXTRN	s370_1509:PROC
EXTRN	s390_1EB8:PROC
EXTRN	z900_1EBA:PROC
EXTRN	s370_150A:PROC
EXTRN	s390_1EB9:PROC
EXTRN	z900_1EBB:PROC
EXTRN	s370_150B:PROC
EXTRN	s390_1EBA:PROC
EXTRN	z900_1EBC:PROC
EXTRN	s370_150C:PROC
EXTRN	s390_1EBB:PROC
EXTRN	z900_1EBD:PROC
EXTRN	s370_150D:PROC
EXTRN	s390_1EBC:PROC
EXTRN	z900_1EBE:PROC
EXTRN	s370_150E:PROC
EXTRN	s390_1EBD:PROC
EXTRN	z900_1EBF:PROC
EXTRN	s370_150F:PROC
EXTRN	s390_1EBE:PROC
EXTRN	z900_1EC0:PROC
EXTRN	s370_1510:PROC
EXTRN	s390_1EBF:PROC
EXTRN	z900_1EC1:PROC
EXTRN	s370_1511:PROC
EXTRN	s390_1EC0:PROC
EXTRN	z900_1EC2:PROC
EXTRN	s370_1512:PROC
EXTRN	s390_1EC1:PROC
EXTRN	z900_1EC3:PROC
EXTRN	s370_1513:PROC
EXTRN	s390_1EC2:PROC
EXTRN	z900_1EC4:PROC
EXTRN	s370_1514:PROC
EXTRN	s390_1EC3:PROC
EXTRN	z900_1EC5:PROC
EXTRN	s370_1515:PROC
EXTRN	s390_1EC4:PROC
EXTRN	z900_1EC6:PROC
EXTRN	s370_1516:PROC
EXTRN	s390_1EC5:PROC
EXTRN	z900_1EC7:PROC
EXTRN	s370_1517:PROC
EXTRN	s390_1EC6:PROC
EXTRN	z900_1EC8:PROC
EXTRN	s370_1518:PROC
EXTRN	s390_1EC7:PROC
EXTRN	z900_1EC9:PROC
EXTRN	s370_1519:PROC
EXTRN	s390_1EC8:PROC
EXTRN	z900_1ECA:PROC
EXTRN	s370_151A:PROC
EXTRN	s390_1EC9:PROC
EXTRN	z900_1ECB:PROC
EXTRN	s370_151B:PROC
EXTRN	s390_1ECA:PROC
EXTRN	z900_1ECC:PROC
EXTRN	s370_151C:PROC
EXTRN	s390_1ECB:PROC
EXTRN	z900_1ECD:PROC
EXTRN	s370_151D:PROC
EXTRN	s390_1ECC:PROC
EXTRN	z900_1ECE:PROC
EXTRN	s370_151E:PROC
EXTRN	s390_1ECD:PROC
EXTRN	z900_1ECF:PROC
EXTRN	s370_151F:PROC
EXTRN	s390_1ECE:PROC
EXTRN	z900_1ED0:PROC
EXTRN	s370_1520:PROC
EXTRN	s390_1ECF:PROC
EXTRN	z900_1ED1:PROC
EXTRN	s370_1521:PROC
EXTRN	s390_1ED0:PROC
EXTRN	z900_1ED2:PROC
EXTRN	s370_1522:PROC
EXTRN	s390_1ED1:PROC
EXTRN	z900_1ED3:PROC
EXTRN	s370_1523:PROC
EXTRN	s390_1ED2:PROC
EXTRN	z900_1ED4:PROC
EXTRN	s370_1524:PROC
EXTRN	s390_1ED3:PROC
EXTRN	z900_1ED5:PROC
EXTRN	s370_1525:PROC
EXTRN	s390_1ED4:PROC
EXTRN	z900_1ED6:PROC
EXTRN	s370_1526:PROC
EXTRN	s390_1ED5:PROC
EXTRN	z900_1ED7:PROC
EXTRN	s370_1527:PROC
EXTRN	s390_1ED6:PROC
EXTRN	z900_1ED8:PROC
EXTRN	s370_1528:PROC
EXTRN	s390_1ED7:PROC
EXTRN	z900_1ED9:PROC
EXTRN	s370_1529:PROC
EXTRN	s390_1ED8:PROC
EXTRN	z900_1EDA:PROC
EXTRN	s370_152A:PROC
EXTRN	s390_1ED9:PROC
EXTRN	z900_1EDB:PROC
EXTRN	s370_152B:PROC
EXTRN	s390_1EDA:PROC
EXTRN	z900_1EDC:PROC
EXTRN	s370_152C:PROC
EXTRN	s390_1EDB:PROC
EXTRN	z900_1EDD:PROC
EXTRN	s370_152D:PROC
EXTRN	s390_1EDC:PROC
EXTRN	z900_1EDE:PROC
EXTRN	s370_152E:PROC
EXTRN	s390_1EDD:PROC
EXTRN	z900_1EDF:PROC
EXTRN	s370_152F:PROC
EXTRN	s390_1EDE:PROC
EXTRN	z900_1EE0:PROC
EXTRN	s370_1530:PROC
EXTRN	s390_1EDF:PROC
EXTRN	z900_1EE1:PROC
EXTRN	s370_1531:PROC
EXTRN	s390_1EE0:PROC
EXTRN	z900_1EE2:PROC
EXTRN	s370_1532:PROC
EXTRN	s390_1EE1:PROC
EXTRN	z900_1EE3:PROC
EXTRN	s370_1533:PROC
EXTRN	s390_1EE2:PROC
EXTRN	z900_1EE4:PROC
EXTRN	s370_1534:PROC
EXTRN	s390_1EE3:PROC
EXTRN	z900_1EE5:PROC
EXTRN	s370_1535:PROC
EXTRN	s390_1EE4:PROC
EXTRN	z900_1EE6:PROC
EXTRN	s370_1536:PROC
EXTRN	s390_1EE5:PROC
EXTRN	z900_1EE7:PROC
EXTRN	s370_1537:PROC
EXTRN	s390_1EE6:PROC
EXTRN	z900_1EE8:PROC
EXTRN	s370_1538:PROC
EXTRN	s390_1EE7:PROC
EXTRN	z900_1EE9:PROC
EXTRN	s370_1539:PROC
EXTRN	s390_1EE8:PROC
EXTRN	z900_1EEA:PROC
EXTRN	s370_153A:PROC
EXTRN	s390_1EE9:PROC
EXTRN	z900_1EEB:PROC
EXTRN	s370_153B:PROC
EXTRN	s390_1EEA:PROC
EXTRN	z900_1EEC:PROC
EXTRN	s370_153C:PROC
EXTRN	s390_1EEB:PROC
EXTRN	z900_1EED:PROC
EXTRN	s370_153D:PROC
EXTRN	s390_1EEC:PROC
EXTRN	z900_1EEE:PROC
EXTRN	s370_153E:PROC
EXTRN	s390_1EED:PROC
EXTRN	z900_1EEF:PROC
EXTRN	s370_153F:PROC
EXTRN	s390_1EEE:PROC
EXTRN	z900_1EF0:PROC
EXTRN	s370_1540:PROC
EXTRN	s390_1EEF:PROC
EXTRN	z900_1EF1:PROC
EXTRN	s370_1541:PROC
EXTRN	s390_1EF0:PROC
EXTRN	z900_1EF2:PROC
EXTRN	s370_1542:PROC
EXTRN	s390_1EF1:PROC
EXTRN	z900_1EF3:PROC
EXTRN	s370_1543:PROC
EXTRN	s390_1EF2:PROC
EXTRN	z900_1EF4:PROC
EXTRN	s370_1544:PROC
EXTRN	s390_1EF3:PROC
EXTRN	z900_1EF5:PROC
EXTRN	s370_1545:PROC
EXTRN	s390_1EF4:PROC
EXTRN	z900_1EF6:PROC
EXTRN	s370_1546:PROC
EXTRN	s390_1EF5:PROC
EXTRN	z900_1EF7:PROC
EXTRN	s370_1547:PROC
EXTRN	s390_1EF6:PROC
EXTRN	z900_1EF8:PROC
EXTRN	s370_1548:PROC
EXTRN	s390_1EF7:PROC
EXTRN	z900_1EF9:PROC
EXTRN	s370_1549:PROC
EXTRN	s390_1EF8:PROC
EXTRN	z900_1EFA:PROC
EXTRN	s370_154A:PROC
EXTRN	s390_1EF9:PROC
EXTRN	z900_1EFB:PROC
EXTRN	s370_154B:PROC
EXTRN	s390_1EFA:PROC
EXTRN	z900_1EFC:PROC
EXTRN	s370_154C:PROC
EXTRN	s390_1EFB:PROC
EXTRN	z900_1EFD:PROC
EXTRN	s370_154D:PROC
EXTRN	s390_1EFC:PROC
EXTRN	z900_1EFE:PROC
EXTRN	s370_154E:PROC
EXTRN	s390_1EFD:PROC
EXTRN	z900_1EFF:PROC
EXTRN	s370_154F:PROC
EXTRN	s390_1EFE:PROC
EXTRN	z900_1500:PROC
EXTRN	s370_1550:PROC
EXTRN	s390_1EFF:PROC
EXTRN	z900_1501:PROC
EXTRN	s390_1500:PROC
EXTRN	s370_1551:PROC
EXTRN	z900_1502:PROC
EXTRN	s390_1501:PROC
EXTRN	s370_1552:PROC
EXTRN	z900_1503:PROC
EXTRN	s390_1502:PROC
EXTRN	s370_1553:PROC
EXTRN	z900_1504:PROC
EXTRN	s390_1503:PROC
EXTRN	s370_1554:PROC
EXTRN	z900_1505:PROC
EXTRN	s390_1504:PROC
EXTRN	s370_1555:PROC
EXTRN	z900_1506:PROC
EXTRN	s390_1505:PROC
EXTRN	s370_1556:PROC
EXTRN	z900_1507:PROC
EXTRN	s390_1506:PROC
EXTRN	s370_1557:PROC
EXTRN	z900_1508:PROC
EXTRN	s390_1507:PROC
EXTRN	s370_1558:PROC
EXTRN	z900_1509:PROC
EXTRN	s390_1508:PROC
EXTRN	s370_1559:PROC
EXTRN	z900_150A:PROC
EXTRN	s390_1509:PROC
EXTRN	s370_155A:PROC
EXTRN	z900_150B:PROC
EXTRN	s390_150A:PROC
EXTRN	s370_155B:PROC
EXTRN	z900_150C:PROC
EXTRN	s390_150B:PROC
EXTRN	s370_155C:PROC
EXTRN	z900_150D:PROC
EXTRN	s390_150C:PROC
EXTRN	s370_155D:PROC
EXTRN	z900_150E:PROC
EXTRN	s390_150D:PROC
EXTRN	s370_155E:PROC
EXTRN	z900_150F:PROC
EXTRN	s390_150E:PROC
EXTRN	s370_155F:PROC
EXTRN	z900_1510:PROC
EXTRN	s390_150F:PROC
EXTRN	s370_1560:PROC
EXTRN	z900_1511:PROC
EXTRN	s390_1510:PROC
EXTRN	s370_1561:PROC
EXTRN	z900_1512:PROC
EXTRN	s390_1511:PROC
EXTRN	s370_1562:PROC
EXTRN	z900_1513:PROC
EXTRN	s390_1512:PROC
EXTRN	s370_1563:PROC
EXTRN	z900_1514:PROC
EXTRN	s390_1513:PROC
EXTRN	s370_1564:PROC
EXTRN	z900_1515:PROC
EXTRN	s390_1514:PROC
EXTRN	s370_1565:PROC
EXTRN	z900_1516:PROC
EXTRN	s390_1515:PROC
EXTRN	s370_1566:PROC
EXTRN	z900_1517:PROC
EXTRN	s390_1516:PROC
EXTRN	s370_1567:PROC
EXTRN	z900_1518:PROC
EXTRN	s390_1517:PROC
EXTRN	s370_1568:PROC
EXTRN	z900_1519:PROC
EXTRN	s390_1518:PROC
EXTRN	s370_1569:PROC
EXTRN	z900_151A:PROC
EXTRN	s390_1519:PROC
EXTRN	s370_156A:PROC
EXTRN	z900_151B:PROC
EXTRN	s390_151A:PROC
EXTRN	s370_156B:PROC
EXTRN	z900_151C:PROC
EXTRN	s390_151B:PROC
EXTRN	s370_156C:PROC
EXTRN	z900_151D:PROC
EXTRN	s390_151C:PROC
EXTRN	s370_156D:PROC
EXTRN	z900_151E:PROC
EXTRN	s390_151D:PROC
EXTRN	s370_156E:PROC
EXTRN	z900_151F:PROC
EXTRN	s390_151E:PROC
EXTRN	s370_156F:PROC
EXTRN	z900_1520:PROC
EXTRN	s390_151F:PROC
EXTRN	s370_1570:PROC
EXTRN	z900_1521:PROC
EXTRN	s390_1520:PROC
EXTRN	s370_1571:PROC
EXTRN	z900_1522:PROC
EXTRN	s390_1521:PROC
EXTRN	s370_1572:PROC
EXTRN	z900_1523:PROC
EXTRN	s390_1522:PROC
EXTRN	s370_1573:PROC
EXTRN	z900_1524:PROC
EXTRN	s390_1523:PROC
EXTRN	s370_1574:PROC
EXTRN	z900_1525:PROC
EXTRN	s390_1524:PROC
EXTRN	s370_1575:PROC
EXTRN	z900_1526:PROC
EXTRN	s390_1525:PROC
EXTRN	s370_1576:PROC
EXTRN	z900_1527:PROC
EXTRN	s390_1526:PROC
EXTRN	s370_1577:PROC
EXTRN	z900_1528:PROC
EXTRN	s390_1527:PROC
EXTRN	s370_1578:PROC
EXTRN	z900_1529:PROC
EXTRN	s390_1528:PROC
EXTRN	s370_1579:PROC
EXTRN	z900_152A:PROC
EXTRN	s390_1529:PROC
EXTRN	s370_157A:PROC
EXTRN	z900_152B:PROC
EXTRN	s390_152A:PROC
EXTRN	s370_157B:PROC
EXTRN	z900_152C:PROC
EXTRN	s390_152B:PROC
EXTRN	s370_157C:PROC
EXTRN	z900_152D:PROC
EXTRN	s390_152C:PROC
EXTRN	s370_157D:PROC
EXTRN	z900_152E:PROC
EXTRN	s390_152D:PROC
EXTRN	s370_157E:PROC
EXTRN	z900_152F:PROC
EXTRN	s390_152E:PROC
EXTRN	s370_157F:PROC
EXTRN	z900_1530:PROC
EXTRN	s390_152F:PROC
EXTRN	s370_1580:PROC
EXTRN	z900_1531:PROC
EXTRN	s390_1530:PROC
EXTRN	s370_1581:PROC
EXTRN	z900_1532:PROC
EXTRN	s390_1531:PROC
EXTRN	s370_1582:PROC
EXTRN	z900_1533:PROC
EXTRN	s390_1532:PROC
EXTRN	s370_1583:PROC
EXTRN	z900_1534:PROC
EXTRN	s390_1533:PROC
EXTRN	s370_1584:PROC
EXTRN	z900_1535:PROC
EXTRN	s390_1534:PROC
EXTRN	s370_1585:PROC
EXTRN	z900_1536:PROC
EXTRN	s390_1535:PROC
EXTRN	s370_1586:PROC
EXTRN	z900_1537:PROC
EXTRN	s390_1536:PROC
EXTRN	s370_1587:PROC
EXTRN	z900_1538:PROC
EXTRN	s390_1537:PROC
EXTRN	s370_1588:PROC
EXTRN	z900_1539:PROC
EXTRN	s390_1538:PROC
EXTRN	s370_1589:PROC
EXTRN	z900_153A:PROC
EXTRN	s390_1539:PROC
EXTRN	s370_158A:PROC
EXTRN	z900_153B:PROC
EXTRN	s390_153A:PROC
EXTRN	s370_158B:PROC
EXTRN	z900_153C:PROC
EXTRN	s390_153B:PROC
EXTRN	s370_158C:PROC
EXTRN	z900_153D:PROC
EXTRN	s390_153C:PROC
EXTRN	s370_158D:PROC
EXTRN	z900_153E:PROC
EXTRN	s390_153D:PROC
EXTRN	s370_158E:PROC
EXTRN	z900_153F:PROC
EXTRN	s390_153E:PROC
EXTRN	s370_158F:PROC
EXTRN	z900_1540:PROC
EXTRN	s390_153F:PROC
EXTRN	s370_1590:PROC
EXTRN	z900_1541:PROC
EXTRN	s390_1540:PROC
EXTRN	s370_1591:PROC
EXTRN	z900_1542:PROC
EXTRN	s390_1541:PROC
EXTRN	s370_1592:PROC
EXTRN	z900_1543:PROC
EXTRN	s390_1542:PROC
EXTRN	s370_1593:PROC
EXTRN	z900_1544:PROC
EXTRN	s390_1543:PROC
EXTRN	s370_1594:PROC
EXTRN	z900_1545:PROC
EXTRN	s390_1544:PROC
EXTRN	s370_1595:PROC
EXTRN	z900_1546:PROC
EXTRN	s390_1545:PROC
EXTRN	s370_1596:PROC
EXTRN	z900_1547:PROC
EXTRN	s390_1546:PROC
EXTRN	s370_1597:PROC
EXTRN	z900_1548:PROC
EXTRN	s390_1547:PROC
EXTRN	s370_1598:PROC
EXTRN	z900_1549:PROC
EXTRN	s390_1548:PROC
EXTRN	s370_1599:PROC
EXTRN	z900_154A:PROC
EXTRN	s390_1549:PROC
EXTRN	s370_159A:PROC
EXTRN	z900_154B:PROC
EXTRN	s390_154A:PROC
EXTRN	s370_159B:PROC
EXTRN	z900_154C:PROC
EXTRN	s390_154B:PROC
EXTRN	s370_159C:PROC
EXTRN	z900_154D:PROC
EXTRN	s390_154C:PROC
EXTRN	s370_159D:PROC
EXTRN	z900_154E:PROC
EXTRN	s390_154D:PROC
EXTRN	s370_159E:PROC
EXTRN	z900_154F:PROC
EXTRN	s390_154E:PROC
EXTRN	s370_159F:PROC
EXTRN	z900_1550:PROC
EXTRN	s390_154F:PROC
EXTRN	s370_15A0:PROC
EXTRN	z900_1551:PROC
EXTRN	s390_1550:PROC
EXTRN	s370_15A1:PROC
EXTRN	z900_1552:PROC
EXTRN	s390_1551:PROC
EXTRN	s370_15A2:PROC
EXTRN	z900_1553:PROC
EXTRN	s390_1552:PROC
EXTRN	s370_15A3:PROC
EXTRN	z900_1554:PROC
EXTRN	s390_1553:PROC
EXTRN	s370_15A4:PROC
EXTRN	z900_1555:PROC
EXTRN	s390_1554:PROC
EXTRN	s370_15A5:PROC
EXTRN	z900_1556:PROC
EXTRN	s390_1555:PROC
EXTRN	s370_15A6:PROC
EXTRN	z900_1557:PROC
EXTRN	s390_1556:PROC
EXTRN	s370_15A7:PROC
EXTRN	z900_1558:PROC
EXTRN	s390_1557:PROC
EXTRN	s370_15A8:PROC
EXTRN	z900_1559:PROC
EXTRN	s390_1558:PROC
EXTRN	s370_15A9:PROC
EXTRN	z900_155A:PROC
EXTRN	s390_1559:PROC
EXTRN	s370_15AA:PROC
EXTRN	z900_155B:PROC
EXTRN	s390_155A:PROC
EXTRN	s370_15AB:PROC
EXTRN	z900_155C:PROC
EXTRN	s390_155B:PROC
EXTRN	s370_15AC:PROC
EXTRN	z900_155D:PROC
EXTRN	s390_155C:PROC
EXTRN	s370_15AD:PROC
EXTRN	z900_155E:PROC
EXTRN	s390_155D:PROC
EXTRN	s370_15AE:PROC
EXTRN	z900_155F:PROC
EXTRN	s390_155E:PROC
EXTRN	s370_15AF:PROC
EXTRN	z900_1560:PROC
EXTRN	s390_155F:PROC
EXTRN	s370_15B0:PROC
EXTRN	z900_1561:PROC
EXTRN	s390_1560:PROC
EXTRN	s370_15B1:PROC
EXTRN	z900_1562:PROC
EXTRN	s390_1561:PROC
EXTRN	s370_15B2:PROC
EXTRN	z900_add_logical_carry:PROC
EXTRN	z900_1563:PROC
EXTRN	s390_1562:PROC
EXTRN	s370_15B3:PROC
EXTRN	z900_add_logical_carry_register:PROC
EXTRN	z900_1564:PROC
EXTRN	s390_1563:PROC
EXTRN	s370_15B4:PROC
EXTRN	z900_branch_relative_and_save_long:PROC
EXTRN	z900_1565:PROC
EXTRN	s390_1564:PROC
EXTRN	s370_15B5:PROC
EXTRN	z900_branch_relative_on_condition_long:PROC
EXTRN	z900_1566:PROC
EXTRN	s390_1565:PROC
EXTRN	s370_15B6:PROC
EXTRN	z900_divide_logical:PROC
EXTRN	z900_1567:PROC
EXTRN	s390_1566:PROC
EXTRN	s370_15B7:PROC
EXTRN	z900_divide_logical_register:PROC
EXTRN	z900_1568:PROC
EXTRN	s390_1567:PROC
EXTRN	s370_15B8:PROC
EXTRN	z900_extract_psw:PROC
EXTRN	z900_1569:PROC
EXTRN	s390_1568:PROC
EXTRN	s370_15B9:PROC
EXTRN	z900_load_address_relative_long:PROC
EXTRN	z900_156A:PROC
EXTRN	s390_1569:PROC
EXTRN	s370_15BA:PROC
EXTRN	z900_load_reversed:PROC
EXTRN	z900_156B:PROC
EXTRN	s390_156A:PROC
EXTRN	s370_15BB:PROC
EXTRN	z900_load_reversed_half:PROC
EXTRN	z900_156C:PROC
EXTRN	s390_156B:PROC
EXTRN	s370_15BC:PROC
EXTRN	z900_load_reversed_register:PROC
EXTRN	z900_156D:PROC
EXTRN	s390_156C:PROC
EXTRN	s370_15BD:PROC
EXTRN	z900_multiply_logical:PROC
EXTRN	z900_156E:PROC
EXTRN	s390_156D:PROC
EXTRN	s370_15BE:PROC
EXTRN	z900_multiply_logical_register:PROC
EXTRN	z900_156F:PROC
EXTRN	s390_156E:PROC
EXTRN	s370_15BF:PROC
EXTRN	z900_rotate_left_single_logical:PROC
EXTRN	z900_1570:PROC
EXTRN	s390_156F:PROC
EXTRN	s370_15C0:PROC
EXTRN	z900_set_addressing_mode_24:PROC
EXTRN	z900_1571:PROC
EXTRN	s390_1570:PROC
EXTRN	s370_15C1:PROC
EXTRN	z900_set_addressing_mode_31:PROC
EXTRN	z900_1572:PROC
EXTRN	s390_1571:PROC
EXTRN	s370_15C2:PROC
EXTRN	z900_store_facility_list:PROC
EXTRN	z900_1573:PROC
EXTRN	s390_1572:PROC
EXTRN	s370_15C3:PROC
EXTRN	z900_store_reversed:PROC
EXTRN	z900_1574:PROC
EXTRN	s390_1573:PROC
EXTRN	s370_15C4:PROC
EXTRN	z900_store_reversed_half:PROC
EXTRN	z900_1575:PROC
EXTRN	s390_1574:PROC
EXTRN	s370_15C5:PROC
EXTRN	z900_subtract_logical_borrow:PROC
EXTRN	z900_1576:PROC
EXTRN	s390_1575:PROC
EXTRN	s370_15C6:PROC
EXTRN	z900_subtract_logical_borrow_register:PROC
EXTRN	z900_1577:PROC
EXTRN	s390_1576:PROC
EXTRN	s370_15C7:PROC
EXTRN	z900_test_addressing_mode:PROC
EXTRN	z900_1578:PROC
EXTRN	s390_1577:PROC
EXTRN	s370_15C8:PROC
EXTRN	z900_compare_and_swap_and_purge_long:PROC
EXTRN	z900_1579:PROC
EXTRN	s390_1578:PROC
EXTRN	s370_15C9:PROC
EXTRN	z900_invalidate_dat_table_entry:PROC
EXTRN	z900_157A:PROC
EXTRN	s390_1579:PROC
EXTRN	s370_15CA:PROC
EXTRN	z900_extract_primary_asn_and_instance:PROC
EXTRN	z900_157B:PROC
EXTRN	s390_157A:PROC
EXTRN	s370_15CB:PROC
EXTRN	z900_extract_secondary_asn_and_instance:PROC
EXTRN	z900_157C:PROC
EXTRN	s390_157B:PROC
EXTRN	s370_15CC:PROC
EXTRN	z900_program_transfer_with_instance:PROC
EXTRN	z900_157D:PROC
EXTRN	s390_157C:PROC
EXTRN	s370_15CD:PROC
EXTRN	z900_set_secondary_asn_with_instance:PROC
EXTRN	z900_157E:PROC
EXTRN	s390_157D:PROC
EXTRN	s370_15CE:PROC
EXTRN	z900_store_facility_list_extended:PROC
EXTRN	z900_157F:PROC
EXTRN	s390_157E:PROC
EXTRN	s370_15CF:PROC
EXTRN	z900_perform_frame_management_function:PROC
EXTRN	z900_1580:PROC
EXTRN	s390_157F:PROC
EXTRN	s370_15D0:PROC
EXTRN	z900_perform_topology_function:PROC
EXTRN	z900_1581:PROC
EXTRN	s390_1580:PROC
EXTRN	s370_15D1:PROC
EXTRN	z900_pack_ascii:PROC
EXTRN	z900_1582:PROC
EXTRN	s390_1581:PROC
EXTRN	s370_15D2:PROC
EXTRN	z900_pack_unicode:PROC
EXTRN	z900_1583:PROC
EXTRN	s390_1582:PROC
EXTRN	s370_15D3:PROC
EXTRN	z900_unpack_ascii:PROC
EXTRN	z900_1584:PROC
EXTRN	s390_1583:PROC
EXTRN	s370_15D4:PROC
EXTRN	z900_unpack_unicode:PROC
EXTRN	s370_add_logical_carry:PROC
EXTRN	z900_1585:PROC
EXTRN	s390_1584:PROC
EXTRN	s370_15D5:PROC
EXTRN	s370_add_logical_carry_register:PROC
EXTRN	z900_test_decimal:PROC
EXTRN	z900_1586:PROC
EXTRN	s390_1585:PROC
EXTRN	s370_15D6:PROC
EXTRN	z900_translate_two_to_two:PROC
EXTRN	s370_branch_relative_and_save_long:PROC
EXTRN	z900_1587:PROC
EXTRN	s390_1586:PROC
EXTRN	s370_15D7:PROC
EXTRN	z900_translate_two_to_one:PROC
EXTRN	s370_branch_relative_on_condition_long:PROC
EXTRN	z900_1588:PROC
EXTRN	s390_1587:PROC
EXTRN	s370_15D8:PROC
EXTRN	z900_translate_one_to_two:PROC
EXTRN	s370_divide_logical:PROC
EXTRN	z900_1589:PROC
EXTRN	s390_1588:PROC
EXTRN	s370_15D9:PROC
EXTRN	z900_translate_one_to_one:PROC
EXTRN	s370_divide_logical_register:PROC
EXTRN	z900_158A:PROC
EXTRN	s390_1589:PROC
EXTRN	s370_15DA:PROC
EXTRN	s370_extract_psw:PROC
EXTRN	z900_move_long_unicode:PROC
EXTRN	z900_158B:PROC
EXTRN	s390_158A:PROC
EXTRN	s370_15DB:PROC
EXTRN	s370_load_address_relative_long:PROC
EXTRN	z900_compare_logical_long_unicode:PROC
EXTRN	z900_158C:PROC
EXTRN	s390_158B:PROC
EXTRN	s370_15DC:PROC
EXTRN	s370_load_reversed:PROC
EXTRN	z900_158D:PROC
EXTRN	s390_158C:PROC
EXTRN	s370_15DD:PROC
EXTRN	s370_load_reversed_half:PROC
EXTRN	z900_158E:PROC
EXTRN	s390_158D:PROC
EXTRN	s370_15DE:PROC
EXTRN	s370_load_reversed_register:PROC
EXTRN	z900_158F:PROC
EXTRN	s390_158E:PROC
EXTRN	s370_15DF:PROC
EXTRN	s370_multiply_logical:PROC
EXTRN	z900_1590:PROC
EXTRN	s390_158F:PROC
EXTRN	s370_15E0:PROC
EXTRN	s370_multiply_logical_register:PROC
EXTRN	z900_1591:PROC
EXTRN	s390_1590:PROC
EXTRN	s370_15E1:PROC
EXTRN	z900_add_y:PROC
EXTRN	s370_rotate_left_single_logical:PROC
EXTRN	z900_1592:PROC
EXTRN	s390_1591:PROC
EXTRN	s370_15E2:PROC
EXTRN	s370_set_addressing_mode_24:PROC
EXTRN	z900_add_halfword_y:PROC
EXTRN	z900_1593:PROC
EXTRN	s390_1592:PROC
EXTRN	s370_15E3:PROC
EXTRN	s370_set_addressing_mode_31:PROC
EXTRN	z900_add_logical_y:PROC
EXTRN	z900_1594:PROC
EXTRN	s390_1593:PROC
EXTRN	s370_15E4:PROC
EXTRN	z900_and_immediate_y:PROC
EXTRN	z900_1595:PROC
EXTRN	s390_1594:PROC
EXTRN	s370_15E5:PROC
EXTRN	s370_store_reversed:PROC
EXTRN	z900_and_y:PROC
EXTRN	z900_1596:PROC
EXTRN	s390_1595:PROC
EXTRN	s370_15E6:PROC
EXTRN	s370_store_reversed_half:PROC
EXTRN	z900_compare_y:PROC
EXTRN	z900_1597:PROC
EXTRN	s390_1596:PROC
EXTRN	s370_15E7:PROC
EXTRN	s370_subtract_logical_borrow:PROC
EXTRN	z900_compare_and_swap_y:PROC
EXTRN	z900_1598:PROC
EXTRN	s390_1597:PROC
EXTRN	s370_15E8:PROC
EXTRN	s370_subtract_logical_borrow_register:PROC
EXTRN	z900_compare_double_and_swap_y:PROC
EXTRN	z900_1599:PROC
EXTRN	s390_1598:PROC
EXTRN	s370_15E9:PROC
EXTRN	s370_test_addressing_mode:PROC
EXTRN	z900_compare_halfword_y:PROC
EXTRN	z900_159A:PROC
EXTRN	s390_1599:PROC
EXTRN	s370_15EA:PROC
EXTRN	s370_pack_ascii:PROC
EXTRN	z900_compare_logical_y:PROC
EXTRN	z900_159B:PROC
EXTRN	s390_159A:PROC
EXTRN	s370_15EB:PROC
EXTRN	s370_pack_unicode:PROC
EXTRN	z900_compare_logical_immediate_y:PROC
EXTRN	z900_159C:PROC
EXTRN	s390_159B:PROC
EXTRN	s370_15EC:PROC
EXTRN	s370_unpack_ascii:PROC
EXTRN	z900_compare_logical_characters_under_mask_y:PROC
EXTRN	z900_159D:PROC
EXTRN	s390_159C:PROC
EXTRN	s370_15ED:PROC
EXTRN	s370_unpack_unicode:PROC
EXTRN	z900_convert_to_binary_y:PROC
EXTRN	z900_159E:PROC
EXTRN	s390_159D:PROC
EXTRN	s370_15EE:PROC
EXTRN	z900_convert_to_decimal_y:PROC
EXTRN	s370_test_decimal:PROC
EXTRN	z900_159F:PROC
EXTRN	s390_159E:PROC
EXTRN	s370_15EF:PROC
EXTRN	s370_translate_two_to_two:PROC
EXTRN	z900_exclusive_or_immediate_y:PROC
EXTRN	z900_15A0:PROC
EXTRN	s390_159F:PROC
EXTRN	s370_15F0:PROC
EXTRN	s370_translate_two_to_one:PROC
EXTRN	z900_exclusive_or_y:PROC
EXTRN	z900_15A1:PROC
EXTRN	s390_15A0:PROC
EXTRN	s370_15F1:PROC
EXTRN	s370_translate_one_to_two:PROC
EXTRN	z900_insert_character_y:PROC
EXTRN	z900_15A2:PROC
EXTRN	s390_15A1:PROC
EXTRN	s370_15F2:PROC
EXTRN	s370_translate_one_to_one:PROC
EXTRN	z900_insert_characters_under_mask_y:PROC
EXTRN	z900_15A3:PROC
EXTRN	s390_15A2:PROC
EXTRN	s370_15F3:PROC
EXTRN	z900_load_y:PROC
EXTRN	s370_move_long_unicode:PROC
EXTRN	z900_15A4:PROC
EXTRN	s390_15A3:PROC
EXTRN	s370_15F4:PROC
EXTRN	z900_load_address_y:PROC
EXTRN	s370_compare_logical_long_unicode:PROC
EXTRN	z900_15A5:PROC
EXTRN	s390_15A4:PROC
EXTRN	s370_15F5:PROC
EXTRN	z900_load_byte:PROC
EXTRN	z900_15A6:PROC
EXTRN	s390_15A5:PROC
EXTRN	s370_15F6:PROC
EXTRN	z900_load_byte_long:PROC
EXTRN	z900_15A7:PROC
EXTRN	s390_15A6:PROC
EXTRN	s370_15F7:PROC
EXTRN	z900_load_halfword_y:PROC
EXTRN	z900_15A8:PROC
EXTRN	s390_15A7:PROC
EXTRN	s370_15F8:PROC
EXTRN	z900_load_multiple_y:PROC
EXTRN	z900_15A9:PROC
EXTRN	s390_15A8:PROC
EXTRN	s370_15F9:PROC
EXTRN	z900_load_real_address_y:PROC
EXTRN	z900_15AA:PROC
EXTRN	s390_15A9:PROC
EXTRN	s370_15FA:PROC
EXTRN	s370_add_y:PROC
EXTRN	z900_move_immediate_y:PROC
EXTRN	z900_15AB:PROC
EXTRN	s390_15AA:PROC
EXTRN	s370_15FB:PROC
EXTRN	z900_multiply_single_y:PROC
EXTRN	s370_add_halfword_y:PROC
EXTRN	z900_15AC:PROC
EXTRN	s390_15AB:PROC
EXTRN	s370_15FC:PROC
EXTRN	s370_add_logical_y:PROC
EXTRN	z900_or_immediate_y:PROC
EXTRN	z900_15AD:PROC
EXTRN	s390_15AC:PROC
EXTRN	s370_15FD:PROC
EXTRN	z900_or_y:PROC
EXTRN	z900_15AE:PROC
EXTRN	s390_15AD:PROC
EXTRN	s370_15FE:PROC
EXTRN	z900_store_y:PROC
EXTRN	s370_and_y:PROC
EXTRN	z900_15AF:PROC
EXTRN	s390_15AE:PROC
EXTRN	s370_15FF:PROC
EXTRN	s370_compare_y:PROC
EXTRN	z900_store_character_y:PROC
EXTRN	z900_15B0:PROC
EXTRN	s390_15AF:PROC
EXTRN	s370_4100:PROC
EXTRN	z900_store_characters_under_mask_y:PROC
EXTRN	z900_15B1:PROC
EXTRN	s390_15B0:PROC
EXTRN	s370_4110:PROC
EXTRN	z900_store_halfword_y:PROC
EXTRN	z900_15B2:PROC
EXTRN	s390_15B1:PROC
EXTRN	s370_4120:PROC
EXTRN	s370_compare_halfword_y:PROC
EXTRN	z900_store_multiple_y:PROC
EXTRN	z900_15B3:PROC
EXTRN	s390_15B2:PROC
EXTRN	s370_4130:PROC
EXTRN	s370_compare_logical_y:PROC
EXTRN	z900_subtract_y:PROC
EXTRN	z900_15B4:PROC
EXTRN	s390_15B3:PROC
EXTRN	s370_4140:PROC
EXTRN	z900_subtract_halfword_y:PROC
EXTRN	z900_15B5:PROC
EXTRN	s390_15B4:PROC
EXTRN	s370_4150:PROC
EXTRN	z900_subtract_logical_y:PROC
EXTRN	z900_15B6:PROC
EXTRN	s390_15B5:PROC
EXTRN	s370_4160:PROC
EXTRN	s370_convert_to_binary_y:PROC
EXTRN	z900_test_under_mask_y:PROC
EXTRN	z900_15B7:PROC
EXTRN	s390_15B6:PROC
EXTRN	s370_4170:PROC
EXTRN	s370_convert_to_decimal_y:PROC
EXTRN	z900_load_access_multiple_y:PROC
EXTRN	z900_15B8:PROC
EXTRN	s390_15B7:PROC
EXTRN	s370_4180:PROC
EXTRN	z900_store_access_multiple_y:PROC
EXTRN	z900_15B9:PROC
EXTRN	s390_15B8:PROC
EXTRN	s370_4190:PROC
EXTRN	s370_exclusive_or_y:PROC
EXTRN	z900_load_float_long_y:PROC
EXTRN	z900_15BA:PROC
EXTRN	s390_15B9:PROC
EXTRN	s370_41A0:PROC
EXTRN	z900_load_float_short_y:PROC
EXTRN	z900_15BB:PROC
EXTRN	s390_15BA:PROC
EXTRN	s370_41B0:PROC
EXTRN	z900_store_float_long_y:PROC
EXTRN	z900_15BC:PROC
EXTRN	s390_15BB:PROC
EXTRN	s370_41C0:PROC
EXTRN	s370_load_y:PROC
EXTRN	z900_store_float_short_y:PROC
EXTRN	z900_15BD:PROC
EXTRN	s390_15BC:PROC
EXTRN	s370_41D0:PROC
EXTRN	z900_multiply_add_float_short_reg:PROC
EXTRN	z900_15BE:PROC
EXTRN	s390_15BD:PROC
EXTRN	s370_41E0:PROC
EXTRN	z900_multiply_add_float_long_reg:PROC
EXTRN	s370_load_byte:PROC
EXTRN	z900_15BF:PROC
EXTRN	s390_15BE:PROC
EXTRN	s370_41F0:PROC
EXTRN	z900_multiply_add_float_short:PROC
EXTRN	z900_15C0:PROC
EXTRN	s390_15BF:PROC
EXTRN	s370_47_0:PROC
EXTRN	s370_load_halfword_y:PROC
EXTRN	z900_multiply_add_float_long:PROC
EXTRN	z900_15C1:PROC
EXTRN	s390_15C0:PROC
EXTRN	s370_nop4:PROC
EXTRN	z900_multiply_subtract_float_short_reg:PROC
EXTRN	z900_15C2:PROC
EXTRN	s390_15C1:PROC
EXTRN	s370_4710:PROC
EXTRN	z900_multiply_subtract_float_long_reg:PROC
EXTRN	z900_15C3:PROC
EXTRN	s390_15C2:PROC
EXTRN	s370_4720:PROC
EXTRN	z900_multiply_subtract_float_short:PROC
EXTRN	z900_15C4:PROC
EXTRN	s390_15C3:PROC
EXTRN	s370_4730:PROC
EXTRN	s370_multiply_single_y:PROC
EXTRN	z900_multiply_subtract_float_long:PROC
EXTRN	z900_15C5:PROC
EXTRN	s390_15C4:PROC
EXTRN	s370_4740:PROC
EXTRN	z900_add_fullword_immediate:PROC
EXTRN	z900_15C6:PROC
EXTRN	s390_15C5:PROC
EXTRN	s370_4750:PROC
EXTRN	z900_add_long_fullword_immediate:PROC
EXTRN	s370_or_y:PROC
EXTRN	z900_15C7:PROC
EXTRN	s390_15C6:PROC
EXTRN	s370_4770:PROC
EXTRN	z900_add_logical_fullword_immediate:PROC
EXTRN	s370_store_y:PROC
EXTRN	z900_15C8:PROC
EXTRN	s390_15C7:PROC
EXTRN	s370_4780:PROC
EXTRN	z900_add_logical_long_fullword_immediate:PROC
EXTRN	z900_15C9:PROC
EXTRN	s390_15C8:PROC
EXTRN	s370_47A0:PROC
EXTRN	z900_and_immediate_high_fullword:PROC
EXTRN	z900_15CA:PROC
EXTRN	s390_15C9:PROC
EXTRN	s370_47B0:PROC
EXTRN	z900_and_immediate_low_fullword:PROC
EXTRN	z900_15CB:PROC
EXTRN	s390_15CA:PROC
EXTRN	s370_47C0:PROC
EXTRN	z900_compare_fullword_immediate:PROC
EXTRN	z900_15CC:PROC
EXTRN	s390_15CB:PROC
EXTRN	s370_47D0:PROC
EXTRN	z900_compare_long_fullword_immediate:PROC
EXTRN	s370_subtract_y:PROC
EXTRN	z900_15CD:PROC
EXTRN	s390_15CC:PROC
EXTRN	s370_47E0:PROC
EXTRN	z900_compare_logical_fullword_immediate:PROC
EXTRN	s370_subtract_halfword_y:PROC
EXTRN	z900_15CE:PROC
EXTRN	s390_15CD:PROC
EXTRN	s370_47F0:PROC
EXTRN	z900_compare_logical_long_fullword_immediate:PROC
EXTRN	s370_subtract_logical_y:PROC
EXTRN	z900_15CF:PROC
EXTRN	s390_15CE:PROC
EXTRN	s370_5000:PROC
EXTRN	z900_exclusive_or_immediate_high_fullword:PROC
EXTRN	z900_15D0:PROC
EXTRN	s390_15CF:PROC
EXTRN	s370_5010:PROC
EXTRN	z900_exclusive_or_immediate_low_fullword:PROC
EXTRN	z900_15D1:PROC
EXTRN	s390_15D0:PROC
EXTRN	s370_5020:PROC
EXTRN	z900_insert_immediate_high_fullword:PROC
EXTRN	z900_15D2:PROC
EXTRN	s390_15D1:PROC
EXTRN	s370_5030:PROC
EXTRN	z900_insert_immediate_low_fullword:PROC
EXTRN	z900_15D3:PROC
EXTRN	s390_15D2:PROC
EXTRN	s370_5040:PROC
EXTRN	z900_load_long_fullword_immediate:PROC
EXTRN	z900_15D4:PROC
EXTRN	s390_15D3:PROC
EXTRN	s370_5050:PROC
EXTRN	s370_multiply_add_float_short_reg:PROC
EXTRN	z900_load_logical_immediate_high_fullword:PROC
EXTRN	z900_15D5:PROC
EXTRN	s390_15D4:PROC
EXTRN	s370_5060:PROC
EXTRN	s370_multiply_add_float_long_reg:PROC
EXTRN	z900_load_logical_immediate_low_fullword:PROC
EXTRN	z900_15D6:PROC
EXTRN	s390_15D5:PROC
EXTRN	s370_5070:PROC
EXTRN	z900_or_immediate_high_fullword:PROC
EXTRN	s370_multiply_add_float_short:PROC
EXTRN	z900_15D7:PROC
EXTRN	s390_15D6:PROC
EXTRN	s370_5080:PROC
EXTRN	z900_or_immediate_low_fullword:PROC
EXTRN	s370_multiply_add_float_long:PROC
EXTRN	z900_15D8:PROC
EXTRN	s390_15D7:PROC
EXTRN	s370_5090:PROC
EXTRN	s370_multiply_subtract_float_short_reg:PROC
EXTRN	z900_subtract_logical_fullword_immediate:PROC
EXTRN	z900_15D9:PROC
EXTRN	s390_15D8:PROC
EXTRN	s370_50A0:PROC
EXTRN	s370_multiply_subtract_float_long_reg:PROC
EXTRN	z900_subtract_logical_long_fullword_immediate:PROC
EXTRN	z900_15DA:PROC
EXTRN	s390_15D9:PROC
EXTRN	s370_50B0:PROC
EXTRN	z900_load_and_test:PROC
EXTRN	s370_multiply_subtract_float_short:PROC
EXTRN	z900_15DB:PROC
EXTRN	s390_15DA:PROC
EXTRN	s370_50C0:PROC
EXTRN	z900_load_and_test_long:PROC
EXTRN	s370_multiply_subtract_float_long:PROC
EXTRN	z900_15DC:PROC
EXTRN	s390_15DB:PROC
EXTRN	s370_50D0:PROC
EXTRN	z900_load_byte_register:PROC
EXTRN	s370_add_fullword_immediate:PROC
EXTRN	z900_15DD:PROC
EXTRN	s390_15DC:PROC
EXTRN	s370_50E0:PROC
EXTRN	z900_load_long_byte_register:PROC
EXTRN	z900_15DE:PROC
EXTRN	s390_15DD:PROC
EXTRN	s370_50F0:PROC
EXTRN	z900_load_halfword_register:PROC
EXTRN	s370_add_logical_fullword_immediate:PROC
EXTRN	z900_15DF:PROC
EXTRN	s390_15DE:PROC
EXTRN	s370_5500:PROC
EXTRN	z900_load_long_halfword_register:PROC
EXTRN	z900_15E0:PROC
EXTRN	s390_15DF:PROC
EXTRN	s370_5510:PROC
EXTRN	z900_load_logical_character:PROC
EXTRN	z900_15E1:PROC
EXTRN	s390_15E0:PROC
EXTRN	s370_5520:PROC
EXTRN	z900_load_logical_character_register:PROC
EXTRN	s370_and_immediate_low_fullword:PROC
EXTRN	z900_15E2:PROC
EXTRN	s390_15E1:PROC
EXTRN	s370_5530:PROC
EXTRN	z900_load_logical_long_character_register:PROC
EXTRN	s370_compare_fullword_immediate:PROC
EXTRN	z900_15E3:PROC
EXTRN	s390_15E2:PROC
EXTRN	s370_5540:PROC
EXTRN	z900_load_logical_halfword:PROC
EXTRN	z900_15E4:PROC
EXTRN	s390_15E3:PROC
EXTRN	s370_5550:PROC
EXTRN	z900_load_logical_halfword_register:PROC
EXTRN	s370_compare_logical_fullword_immediate:PROC
EXTRN	z900_15E5:PROC
EXTRN	s390_15E4:PROC
EXTRN	s370_5560:PROC
EXTRN	z900_load_logical_long_halfword_register:PROC
EXTRN	z900_15E6:PROC
EXTRN	s390_15E5:PROC
EXTRN	s370_5570:PROC
EXTRN	z900_find_leftmost_one_long_register:PROC
EXTRN	z900_15E7:PROC
EXTRN	s390_15E6:PROC
EXTRN	s370_5580:PROC
EXTRN	z900_convert_utf16_to_utf32:PROC
EXTRN	s370_exclusive_or_immediate_low_fullword:PROC
EXTRN	z900_15E8:PROC
EXTRN	s390_15E7:PROC
EXTRN	s370_5590:PROC
EXTRN	z900_convert_utf32_to_utf16:PROC
EXTRN	z900_15E9:PROC
EXTRN	s390_15E8:PROC
EXTRN	s370_55A0:PROC
EXTRN	z900_convert_utf32_to_utf8:PROC
EXTRN	s370_insert_immediate_low_fullword:PROC
EXTRN	z900_15EA:PROC
EXTRN	s390_15E9:PROC
EXTRN	s370_55B0:PROC
EXTRN	z900_convert_utf8_to_utf32:PROC
EXTRN	z900_15EB:PROC
EXTRN	s390_15EA:PROC
EXTRN	s370_55C0:PROC
EXTRN	z900_search_string_unicode:PROC
EXTRN	z900_15EC:PROC
EXTRN	s390_15EB:PROC
EXTRN	s370_55D0:PROC
EXTRN	z900_translate_and_test_reverse:PROC
EXTRN	s370_load_logical_immediate_low_fullword:PROC
EXTRN	z900_15ED:PROC
EXTRN	s390_15EC:PROC
EXTRN	s370_55E0:PROC
EXTRN	z900_multiply_unnormal_float_long_to_ext_reg:PROC
EXTRN	z900_15EE:PROC
EXTRN	s390_15ED:PROC
EXTRN	s370_55F0:PROC
EXTRN	z900_multiply_unnormal_float_long_to_ext_low_reg:PROC
EXTRN	s370_or_immediate_low_fullword:PROC
EXTRN	z900_15EF:PROC
EXTRN	s390_15EE:PROC
EXTRN	s370_5800:PROC
EXTRN	z900_multiply_unnormal_float_long_to_ext_high_reg:PROC
EXTRN	s370_subtract_logical_fullword_immediate:PROC
EXTRN	z900_15F0:PROC
EXTRN	s390_15EF:PROC
EXTRN	s370_5810:PROC
EXTRN	z900_multiply_add_unnormal_float_long_to_ext_reg:PROC
EXTRN	z900_15F1:PROC
EXTRN	s390_15F0:PROC
EXTRN	s370_5820:PROC
EXTRN	z900_multiply_add_unnormal_float_long_to_ext_low_reg:PROC
EXTRN	s370_load_and_test:PROC
EXTRN	z900_15F2:PROC
EXTRN	s390_15F1:PROC
EXTRN	s370_5830:PROC
EXTRN	z900_multiply_add_unnormal_float_long_to_ext_high_reg:PROC
EXTRN	z900_15F3:PROC
EXTRN	s390_15F2:PROC
EXTRN	s370_5840:PROC
EXTRN	s370_load_byte_register:PROC
EXTRN	z900_multiply_unnormal_float_long_to_ext:PROC
EXTRN	z900_15F4:PROC
EXTRN	s390_15F3:PROC
EXTRN	s370_5850:PROC
EXTRN	z900_multiply_unnormal_float_long_to_ext_low:PROC
EXTRN	z900_15F5:PROC
EXTRN	s390_15F4:PROC
EXTRN	s370_5860:PROC
EXTRN	s370_load_halfword_register:PROC
EXTRN	z900_multiply_unnormal_float_long_to_ext_high:PROC
EXTRN	z900_15F6:PROC
EXTRN	s390_15F5:PROC
EXTRN	s370_5870:PROC
EXTRN	z900_multiply_add_unnormal_float_long_to_ext:PROC
EXTRN	z900_15F7:PROC
EXTRN	s390_15F6:PROC
EXTRN	s370_5880:PROC
EXTRN	s370_load_logical_character:PROC
EXTRN	z900_multiply_add_unnormal_float_long_to_ext_low:PROC
EXTRN	z900_15F8:PROC
EXTRN	s390_15F7:PROC
EXTRN	s370_5890:PROC
EXTRN	s370_load_logical_character_register:PROC
EXTRN	z900_multiply_add_unnormal_float_long_to_ext_high:PROC
EXTRN	z900_15F9:PROC
EXTRN	s390_15F8:PROC
EXTRN	s370_58A0:PROC
EXTRN	z900_15FA:PROC
EXTRN	s390_15F9:PROC
EXTRN	s370_58B0:PROC
EXTRN	z900_translate_and_test_extended:PROC
EXTRN	s370_load_logical_halfword:PROC
EXTRN	z900_15FB:PROC
EXTRN	s390_15FA:PROC
EXTRN	s370_58C0:PROC
EXTRN	s370_load_logical_halfword_register:PROC
EXTRN	z900_translate_and_test_reverse_extended:PROC
EXTRN	z900_15FC:PROC
EXTRN	s390_15FB:PROC
EXTRN	s370_58D0:PROC
EXTRN	z900_move_with_optional_specifications:PROC
EXTRN	z900_15FD:PROC
EXTRN	s390_15FC:PROC
EXTRN	s370_58E0:PROC
EXTRN	z900_perform_timing_facility_function:PROC
EXTRN	z900_15FE:PROC
EXTRN	s390_15FD:PROC
EXTRN	s370_58F0:PROC
EXTRN	s370_convert_utf16_to_utf32:PROC
EXTRN	z900_extract_cpu_time:PROC
EXTRN	z900_15FF:PROC
EXTRN	s390_15FE:PROC
EXTRN	s370_convert_utf32_to_utf16:PROC
EXTRN	z900_compare_and_swap_and_store:PROC
EXTRN	z900_4100:PROC
EXTRN	s390_15FF:PROC
EXTRN	s370_convert_utf32_to_utf8:PROC
EXTRN	z900_add_immediate_long_storage:PROC
EXTRN	z900_4110:PROC
EXTRN	s390_4100:PROC
EXTRN	s370_convert_utf8_to_utf32:PROC
EXTRN	z900_add_immediate_storage:PROC
EXTRN	z900_4120:PROC
EXTRN	s390_4110:PROC
EXTRN	s370_search_string_unicode:PROC
EXTRN	z900_add_logical_with_signed_immediate:PROC
EXTRN	z900_4130:PROC
EXTRN	s390_4120:PROC
EXTRN	s370_translate_and_test_reverse:PROC
EXTRN	z900_add_logical_with_signed_immediate_long:PROC
EXTRN	z900_4140:PROC
EXTRN	s390_4130:PROC
EXTRN	s370_multiply_unnormal_float_long_to_ext_reg:PROC
EXTRN	z900_compare_and_branch_register:PROC
EXTRN	z900_4150:PROC
EXTRN	s390_4140:PROC
EXTRN	s370_multiply_unnormal_float_long_to_ext_low_reg:PROC
EXTRN	z900_compare_and_branch_long_register:PROC
EXTRN	z900_4160:PROC
EXTRN	s390_4150:PROC
EXTRN	s370_multiply_unnormal_float_long_to_ext_high_reg:PROC
EXTRN	z900_compare_and_branch_relative_register:PROC
EXTRN	z900_4170:PROC
EXTRN	s390_4160:PROC
EXTRN	s370_multiply_add_unnormal_float_long_to_ext_reg:PROC
EXTRN	z900_compare_and_branch_relative_long_register:PROC
EXTRN	z900_4180:PROC
EXTRN	s390_4170:PROC
EXTRN	s370_multiply_add_unnormal_float_long_to_ext_low_reg:PROC
EXTRN	z900_compare_and_trap_long_register:PROC
EXTRN	z900_4190:PROC
EXTRN	s390_4180:PROC
EXTRN	s370_multiply_add_unnormal_float_long_to_ext_high_reg:PROC
EXTRN	z900_compare_and_trap_register:PROC
EXTRN	z900_41A0:PROC
EXTRN	s390_4190:PROC
EXTRN	z900_compare_halfword_immediate_halfword_storage:PROC
EXTRN	s370_multiply_unnormal_float_long_to_ext:PROC
EXTRN	z900_41B0:PROC
EXTRN	s390_41A0:PROC
EXTRN	z900_compare_halfword_immediate_long_storage:PROC
EXTRN	s370_multiply_unnormal_float_long_to_ext_low:PROC
EXTRN	z900_41C0:PROC
EXTRN	s390_41B0:PROC
EXTRN	s370_BF_7:PROC
EXTRN	z900_compare_halfword_immediate_storage:PROC
EXTRN	s370_multiply_unnormal_float_long_to_ext_high:PROC
EXTRN	z900_41D0:PROC
EXTRN	s390_41C0:PROC
EXTRN	s370_BF_F:PROC
EXTRN	z900_compare_halfword_long:PROC
EXTRN	s370_multiply_add_unnormal_float_long_to_ext:PROC
EXTRN	z900_41E0:PROC
EXTRN	s390_41D0:PROC
EXTRN	s370_BF_x:PROC
EXTRN	z900_compare_halfword_relative_long:PROC
EXTRN	s370_multiply_add_unnormal_float_long_to_ext_low:PROC
EXTRN	z900_41F0:PROC
EXTRN	s390_41E0:PROC
EXTRN	s370_9180:PROC
EXTRN	z900_compare_halfword_relative_long_long:PROC
EXTRN	s370_multiply_add_unnormal_float_long_to_ext_high:PROC
EXTRN	z900_47_0:PROC
EXTRN	s390_41F0:PROC
EXTRN	s370_9140:PROC
EXTRN	s370_translate_and_test_extended:PROC
EXTRN	z900_compare_immediate_and_branch:PROC
EXTRN	z900_nop4:PROC
EXTRN	s390_47_0:PROC
EXTRN	s370_9120:PROC
EXTRN	s370_translate_and_test_reverse_extended:PROC
EXTRN	z900_compare_immediate_and_branch_long:PROC
EXTRN	z900_4710:PROC
EXTRN	s390_nop4:PROC
EXTRN	s370_9110:PROC
EXTRN	s370_compare_and_swap_and_store:PROC
EXTRN	z900_compare_immediate_and_branch_relative:PROC
EXTRN	z900_4720:PROC
EXTRN	s390_4710:PROC
EXTRN	s370_9108:PROC
EXTRN	s370_add_immediate_long_storage:PROC
EXTRN	z900_compare_immediate_and_branch_relative_long:PROC
EXTRN	z900_4730:PROC
EXTRN	s390_4720:PROC
EXTRN	s370_9104:PROC
EXTRN	s370_add_immediate_storage:PROC
EXTRN	z900_compare_immediate_and_trap:PROC
EXTRN	z900_4740:PROC
EXTRN	s390_4730:PROC
EXTRN	s370_9102:PROC
EXTRN	s370_add_logical_with_signed_immediate:PROC
EXTRN	z900_compare_immediate_and_trap_long:PROC
EXTRN	z900_4750:PROC
EXTRN	s390_4740:PROC
EXTRN	s370_9101:PROC
EXTRN	s370_add_logical_with_signed_immediate_long:PROC
EXTRN	z900_compare_logical_and_branch_long_register:PROC
EXTRN	z900_4770:PROC
EXTRN	s370_1F00:PROC
EXTRN	s390_4750:PROC
EXTRN	s370_compare_and_branch_register:PROC
EXTRN	z900_compare_logical_and_branch_register:PROC
EXTRN	z900_4780:PROC
EXTRN	s370_1F01:PROC
EXTRN	s390_4770:PROC
EXTRN	z900_compare_logical_and_branch_relative_long_register:PROC
EXTRN	z900_47A0:PROC
EXTRN	s370_1F02:PROC
EXTRN	s390_4780:PROC
EXTRN	s370_compare_and_branch_relative_register:PROC
EXTRN	z900_compare_logical_and_branch_relative_register:PROC
EXTRN	z900_47B0:PROC
EXTRN	s370_1F03:PROC
EXTRN	s390_47A0:PROC
EXTRN	z900_compare_logical_and_trap_long_register:PROC
EXTRN	z900_47C0:PROC
EXTRN	s370_1F04:PROC
EXTRN	s390_47B0:PROC
EXTRN	z900_compare_logical_and_trap_register:PROC
EXTRN	z900_47D0:PROC
EXTRN	s370_1F05:PROC
EXTRN	s390_47C0:PROC
EXTRN	s370_compare_and_trap_register:PROC
EXTRN	z900_compare_logical_immediate_and_branch:PROC
EXTRN	z900_47E0:PROC
EXTRN	s370_1F06:PROC
EXTRN	s390_47D0:PROC
EXTRN	s370_compare_halfword_immediate_halfword_storage:PROC
EXTRN	z900_compare_logical_immediate_and_branch_long:PROC
EXTRN	z900_47F0:PROC
EXTRN	s370_1F07:PROC
EXTRN	s390_47E0:PROC
EXTRN	s370_compare_halfword_immediate_long_storage:PROC
EXTRN	z900_compare_logical_immediate_and_branch_relative:PROC
EXTRN	z900_5000:PROC
EXTRN	s370_1F08:PROC
EXTRN	s390_47F0:PROC
EXTRN	s370_compare_halfword_immediate_storage:PROC
EXTRN	z900_compare_logical_immediate_and_branch_relative_long:PROC
EXTRN	z900_5010:PROC
EXTRN	s370_1F09:PROC
EXTRN	s390_5000:PROC
EXTRN	z900_compare_logical_immediate_and_trap_fullword:PROC
EXTRN	z900_5020:PROC
EXTRN	s370_1F0A:PROC
EXTRN	s390_5010:PROC
EXTRN	s370_compare_halfword_relative_long:PROC
EXTRN	z900_compare_logical_immediate_and_trap_long:PROC
EXTRN	z900_5030:PROC
EXTRN	s370_1F0B:PROC
EXTRN	s390_5020:PROC
EXTRN	z900_compare_logical_immediate_fullword_storage:PROC
EXTRN	z900_5040:PROC
EXTRN	s370_1F0C:PROC
EXTRN	s390_5030:PROC
EXTRN	z900_compare_logical_immediate_halfword_storage:PROC
EXTRN	s370_compare_immediate_and_branch:PROC
EXTRN	z900_5050:PROC
EXTRN	s370_1F0D:PROC
EXTRN	s390_5040:PROC
EXTRN	z900_compare_logical_immediate_long_storage:PROC
EXTRN	z900_5060:PROC
EXTRN	s370_1F0E:PROC
EXTRN	s390_5050:PROC
EXTRN	z900_compare_logical_relative_long:PROC
EXTRN	s370_compare_immediate_and_branch_relative:PROC
EXTRN	z900_5070:PROC
EXTRN	s370_1F0F:PROC
EXTRN	s390_5060:PROC
EXTRN	z900_compare_logical_relative_long_halfword:PROC
EXTRN	z900_5080:PROC
EXTRN	s370_1F10:PROC
EXTRN	s390_5070:PROC
EXTRN	z900_compare_logical_relative_long_long:PROC
EXTRN	s370_compare_immediate_and_trap:PROC
EXTRN	z900_5090:PROC
EXTRN	s370_1F11:PROC
EXTRN	s390_5080:PROC
EXTRN	z900_compare_logical_relative_long_long_fullword:PROC
EXTRN	z900_50A0:PROC
EXTRN	s370_1F12:PROC
EXTRN	s390_5090:PROC
EXTRN	z900_compare_logical_relative_long_long_halfword:PROC
EXTRN	z900_50B0:PROC
EXTRN	s370_1F13:PROC
EXTRN	s390_50A0:PROC
EXTRN	z900_compare_relative_long:PROC
EXTRN	s370_compare_logical_and_branch_register:PROC
EXTRN	z900_50C0:PROC
EXTRN	s370_1F14:PROC
EXTRN	s390_50B0:PROC
EXTRN	z900_compare_relative_long_long:PROC
EXTRN	z900_50D0:PROC
EXTRN	s370_1F15:PROC
EXTRN	s390_50C0:PROC
EXTRN	z900_compare_relative_long_long_fullword:PROC
EXTRN	s370_compare_logical_and_branch_relative_register:PROC
EXTRN	z900_50E0:PROC
EXTRN	s370_1F16:PROC
EXTRN	s390_50D0:PROC
EXTRN	z900_extract_cpu_attribute:PROC
EXTRN	z900_50F0:PROC
EXTRN	s370_1F17:PROC
EXTRN	s390_50E0:PROC
EXTRN	s370_compare_logical_and_trap_register:PROC
EXTRN	z900_load_address_extended_y:PROC
EXTRN	z900_5500:PROC
EXTRN	s370_1F18:PROC
EXTRN	s390_50F0:PROC
EXTRN	z900_load_and_test_long_fullword:PROC
EXTRN	s370_compare_logical_immediate_and_branch:PROC
EXTRN	z900_5510:PROC
EXTRN	s370_1F19:PROC
EXTRN	s390_5500:PROC
EXTRN	z900_load_halfword_relative_long:PROC
EXTRN	z900_5520:PROC
EXTRN	s370_1F1A:PROC
EXTRN	s390_5510:PROC
EXTRN	z900_load_halfword_relative_long_long:PROC
EXTRN	s370_compare_logical_immediate_and_branch_relative:PROC
EXTRN	z900_5530:PROC
EXTRN	s370_1F1B:PROC
EXTRN	s390_5520:PROC
EXTRN	z900_load_logical_halfword_relative_long:PROC
EXTRN	z900_5540:PROC
EXTRN	s370_1F1C:PROC
EXTRN	s390_5530:PROC
EXTRN	z900_load_logical_halfword_relative_long_long:PROC
EXTRN	s370_compare_logical_immediate_and_trap_fullword:PROC
EXTRN	z900_5550:PROC
EXTRN	s370_1F1D:PROC
EXTRN	s390_5540:PROC
EXTRN	z900_load_logical_relative_long_long_fullword:PROC
EXTRN	z900_5560:PROC
EXTRN	s370_1F1E:PROC
EXTRN	s390_5550:PROC
EXTRN	z900_load_relative_long:PROC
EXTRN	s370_compare_logical_immediate_fullword_storage:PROC
EXTRN	z900_5570:PROC
EXTRN	s370_1F1F:PROC
EXTRN	s390_5560:PROC
EXTRN	z900_load_relative_long_long:PROC
EXTRN	s370_compare_logical_immediate_halfword_storage:PROC
EXTRN	z900_5580:PROC
EXTRN	s370_1F20:PROC
EXTRN	s390_5570:PROC
EXTRN	z900_load_relative_long_long_fullword:PROC
EXTRN	s370_compare_logical_immediate_long_storage:PROC
EXTRN	z900_5590:PROC
EXTRN	s370_1F21:PROC
EXTRN	s390_5580:PROC
EXTRN	s370_compare_logical_relative_long:PROC
EXTRN	z900_move_fullword_from_halfword_immediate:PROC
EXTRN	z900_55A0:PROC
EXTRN	s370_1F22:PROC
EXTRN	s390_5590:PROC
EXTRN	s370_compare_logical_relative_long_halfword:PROC
EXTRN	z900_move_halfword_from_halfword_immediate:PROC
EXTRN	z900_55B0:PROC
EXTRN	s370_1F23:PROC
EXTRN	s390_55A0:PROC
EXTRN	z900_move_long_from_halfword_immediate:PROC
EXTRN	z900_55C0:PROC
EXTRN	s370_1F24:PROC
EXTRN	s390_55B0:PROC
EXTRN	z900_multiply_halfword_y:PROC
EXTRN	z900_55D0:PROC
EXTRN	s370_1F25:PROC
EXTRN	s390_55C0:PROC
EXTRN	z900_multiply_single_immediate_fullword:PROC
EXTRN	z900_55E0:PROC
EXTRN	s370_1F26:PROC
EXTRN	s390_55D0:PROC
EXTRN	z900_multiply_single_immediate_long_fullword:PROC
EXTRN	s370_compare_relative_long:PROC
EXTRN	z900_55F0:PROC
EXTRN	s370_1F27:PROC
EXTRN	s390_55E0:PROC
EXTRN	z900_multiply_y:PROC
EXTRN	z900_5800:PROC
EXTRN	s370_1F28:PROC
EXTRN	s390_55F0:PROC
EXTRN	z900_prefetch_data:PROC
EXTRN	z900_5810:PROC
EXTRN	s370_1F29:PROC
EXTRN	s390_5800:PROC
EXTRN	z900_prefetch_data_relative_long:PROC
EXTRN	z900_5820:PROC
EXTRN	s370_1F2A:PROC
EXTRN	s390_5810:PROC
EXTRN	z900_rotate_then_and_selected_bits_long_reg:PROC
EXTRN	z900_5830:PROC
EXTRN	s370_1F2B:PROC
EXTRN	s390_5820:PROC
EXTRN	z900_rotate_then_exclusive_or_selected_bits_long_reg:PROC
EXTRN	z900_5840:PROC
EXTRN	s370_1F2C:PROC
EXTRN	s390_5830:PROC
EXTRN	s370_load_halfword_relative_long:PROC
EXTRN	z900_rotate_then_insert_selected_bits_long_reg:PROC
EXTRN	z900_5850:PROC
EXTRN	s370_1F2D:PROC
EXTRN	s390_5840:PROC
EXTRN	z900_rotate_then_or_selected_bits_long_reg:PROC
EXTRN	z900_5860:PROC
EXTRN	s370_1F2E:PROC
EXTRN	s390_5850:PROC
EXTRN	s370_load_logical_halfword_relative_long:PROC
EXTRN	z900_store_halfword_relative_long:PROC
EXTRN	z900_5870:PROC
EXTRN	s370_1F2F:PROC
EXTRN	s390_5860:PROC
EXTRN	z900_store_relative_long:PROC
EXTRN	z900_5880:PROC
EXTRN	s370_1F30:PROC
EXTRN	s390_5870:PROC
EXTRN	z900_store_relative_long_long:PROC
EXTRN	z900_5890:PROC
EXTRN	s370_1F31:PROC
EXTRN	s390_5880:PROC
EXTRN	s370_load_relative_long:PROC
EXTRN	z900_execute_relative_long:PROC
EXTRN	z900_58A0:PROC
EXTRN	s370_1F32:PROC
EXTRN	s390_5890:PROC
EXTRN	z900_convert_fix32_to_dfp_ext_reg:PROC
EXTRN	z900_58B0:PROC
EXTRN	s370_1F33:PROC
EXTRN	s390_58A0:PROC
EXTRN	z900_convert_fix32_to_dfp_long_reg:PROC
EXTRN	z900_58C0:PROC
EXTRN	s370_1F34:PROC
EXTRN	s390_58B0:PROC
EXTRN	z900_convert_u32_to_dfp_ext_reg:PROC
EXTRN	s370_move_fullword_from_halfword_immediate:PROC
EXTRN	z900_58D0:PROC
EXTRN	s370_1F35:PROC
EXTRN	s390_58C0:PROC
EXTRN	z900_convert_u32_to_dfp_long_reg:PROC
EXTRN	s370_move_halfword_from_halfword_immediate:PROC
EXTRN	z900_58E0:PROC
EXTRN	s370_1F36:PROC
EXTRN	s390_58D0:PROC
EXTRN	z900_convert_u64_to_dfp_ext_reg:PROC
EXTRN	s370_move_long_from_halfword_immediate:PROC
EXTRN	z900_58F0:PROC
EXTRN	s370_1F37:PROC
EXTRN	s390_58E0:PROC
EXTRN	z900_convert_u64_to_dfp_long_reg:PROC
EXTRN	s370_multiply_halfword_y:PROC
EXTRN	s370_1F38:PROC
EXTRN	s390_58F0:PROC
EXTRN	z900_convert_dfp_ext_to_fix32_reg:PROC
EXTRN	s370_multiply_single_immediate_fullword:PROC
EXTRN	s370_1F39:PROC
EXTRN	z900_convert_dfp_long_to_fix32_reg:PROC
EXTRN	s370_1F3A:PROC
EXTRN	z900_convert_dfp_ext_to_u32_reg:PROC
EXTRN	s370_multiply_y:PROC
EXTRN	s370_1F3B:PROC
EXTRN	z900_convert_dfp_long_to_u32_reg:PROC
EXTRN	s370_prefetch_data:PROC
EXTRN	s370_1F3C:PROC
EXTRN	z900_convert_dfp_ext_to_u64_reg:PROC
EXTRN	s370_prefetch_data_relative_long:PROC
EXTRN	s370_1F3D:PROC
EXTRN	z900_convert_dfp_long_to_u64_reg:PROC
EXTRN	s370_1F3E:PROC
EXTRN	z900_convert_u32_to_bfp_ext_reg:PROC
EXTRN	s370_1F3F:PROC
EXTRN	z900_convert_u32_to_bfp_long_reg:PROC
EXTRN	s370_1F40:PROC
EXTRN	z900_convert_u32_to_bfp_short_reg:PROC
EXTRN	s370_1F41:PROC
EXTRN	z900_convert_u64_to_bfp_ext_reg:PROC
EXTRN	s370_store_halfword_relative_long:PROC
EXTRN	s370_1F42:PROC
EXTRN	z900_convert_u64_to_bfp_long_reg:PROC
EXTRN	s370_store_relative_long:PROC
EXTRN	s370_1F43:PROC
EXTRN	z900_convert_u64_to_bfp_short_reg:PROC
EXTRN	s370_1F44:PROC
EXTRN	z900_convert_bfp_ext_to_u32_reg:PROC
EXTRN	s370_execute_relative_long:PROC
EXTRN	z900_BF_7:PROC
EXTRN	s370_1F45:PROC
EXTRN	z900_convert_bfp_long_to_u32_reg:PROC
EXTRN	z900_BF_F:PROC
EXTRN	s370_1F46:PROC
EXTRN	s390_BF_7:PROC
EXTRN	z900_convert_bfp_short_to_u32_reg:PROC
EXTRN	z900_BF_x:PROC
EXTRN	s370_1F47:PROC
EXTRN	s390_BF_F:PROC
EXTRN	z900_convert_bfp_ext_to_u64_reg:PROC
EXTRN	z900_9180:PROC
EXTRN	s370_1F48:PROC
EXTRN	s390_BF_x:PROC
EXTRN	z900_convert_bfp_long_to_u64_reg:PROC
EXTRN	z900_9140:PROC
EXTRN	s370_1F49:PROC
EXTRN	s390_9180:PROC
EXTRN	z900_convert_bfp_short_to_u64_reg:PROC
EXTRN	z900_9120:PROC
EXTRN	s370_1F4A:PROC
EXTRN	s390_9140:PROC
EXTRN	z900_set_bfp_rounding_mode_3bit:PROC
EXTRN	z900_9110:PROC
EXTRN	s370_1F4B:PROC
EXTRN	s390_9120:PROC
EXTRN	z900_load_program_parameter:PROC
EXTRN	z900_9108:PROC
EXTRN	s370_1F4C:PROC
EXTRN	s390_9110:PROC
EXTRN	z900_set_dfp_rounding_mode:PROC
EXTRN	z900_9104:PROC
EXTRN	s370_1F4D:PROC
EXTRN	s390_9108:PROC
EXTRN	z900_load_fpr_from_gr_long_reg:PROC
EXTRN	z900_9102:PROC
EXTRN	s370_1F4E:PROC
EXTRN	s390_9104:PROC
EXTRN	z900_load_gr_from_fpr_long_reg:PROC
EXTRN	z900_9101:PROC
EXTRN	s370_1F4F:PROC
EXTRN	s390_9102:PROC
EXTRN	z900_copy_sign_fpr_long_reg:PROC
EXTRN	z900_1F00:PROC
EXTRN	s370_1F50:PROC
EXTRN	s390_9101:PROC
EXTRN	z900_load_complement_fpr_long_reg:PROC
EXTRN	z900_1F01:PROC
EXTRN	s390_1F00:PROC
EXTRN	s370_1F51:PROC
EXTRN	z900_load_negative_fpr_long_reg:PROC
EXTRN	s370_convert_u32_to_bfp_ext_reg:PROC
EXTRN	z900_1F02:PROC
EXTRN	s390_1F01:PROC
EXTRN	s370_1F52:PROC
EXTRN	z900_load_positive_fpr_long_reg:PROC
EXTRN	s370_convert_u32_to_bfp_long_reg:PROC
EXTRN	z900_1F03:PROC
EXTRN	s390_1F02:PROC
EXTRN	s370_1F53:PROC
EXTRN	z900_load_fpc_and_signal:PROC
EXTRN	s370_convert_u32_to_bfp_short_reg:PROC
EXTRN	z900_1F04:PROC
EXTRN	s390_1F03:PROC
EXTRN	s370_1F54:PROC
EXTRN	z900_set_fpc_and_signal:PROC
EXTRN	z900_1F05:PROC
EXTRN	s390_1F04:PROC
EXTRN	s370_1F55:PROC
EXTRN	z900_add_dfp_ext_reg:PROC
EXTRN	z900_1F06:PROC
EXTRN	s390_1F05:PROC
EXTRN	s370_1F56:PROC
EXTRN	z900_add_dfp_long_reg:PROC
EXTRN	z900_1F07:PROC
EXTRN	s390_1F06:PROC
EXTRN	s370_1F57:PROC
EXTRN	s370_convert_bfp_ext_to_u32_reg:PROC
EXTRN	z900_compare_dfp_ext_reg:PROC
EXTRN	z900_1F08:PROC
EXTRN	s390_1F07:PROC
EXTRN	s370_1F58:PROC
EXTRN	s370_convert_bfp_long_to_u32_reg:PROC
EXTRN	z900_compare_dfp_long_reg:PROC
EXTRN	z900_1F09:PROC
EXTRN	s390_1F08:PROC
EXTRN	s370_1F59:PROC
EXTRN	s370_convert_bfp_short_to_u32_reg:PROC
EXTRN	z900_compare_and_signal_dfp_ext_reg:PROC
EXTRN	z900_1F0A:PROC
EXTRN	s390_1F09:PROC
EXTRN	s370_1F5A:PROC
EXTRN	z900_compare_and_signal_dfp_long_reg:PROC
EXTRN	z900_1F0B:PROC
EXTRN	s390_1F0A:PROC
EXTRN	s370_1F5B:PROC
EXTRN	z900_compare_exponent_dfp_ext_reg:PROC
EXTRN	z900_1F0C:PROC
EXTRN	s390_1F0B:PROC
EXTRN	s370_1F5C:PROC
EXTRN	z900_compare_exponent_dfp_long_reg:PROC
EXTRN	z900_1F0D:PROC
EXTRN	s390_1F0C:PROC
EXTRN	s370_1F5D:PROC
EXTRN	s370_set_bfp_rounding_mode_3bit:PROC
EXTRN	z900_convert_fix64_to_dfp_ext_reg:PROC
EXTRN	z900_1F0E:PROC
EXTRN	s390_1F0D:PROC
EXTRN	s370_1F5E:PROC
EXTRN	z900_convert_fix64_to_dfp_long_reg:PROC
EXTRN	z900_1F0F:PROC
EXTRN	s390_1F0E:PROC
EXTRN	s370_1F5F:PROC
EXTRN	z900_convert_sbcd128_to_dfp_ext_reg:PROC
EXTRN	z900_1F10:PROC
EXTRN	s390_1F0F:PROC
EXTRN	s370_1F60:PROC
EXTRN	z900_convert_sbcd64_to_dfp_long_reg:PROC
EXTRN	z900_1F11:PROC
EXTRN	s390_1F10:PROC
EXTRN	s370_1F61:PROC
EXTRN	s370_copy_sign_fpr_long_reg:PROC
EXTRN	z900_convert_ubcd128_to_dfp_ext_reg:PROC
EXTRN	z900_1F12:PROC
EXTRN	s390_1F11:PROC
EXTRN	s370_1F62:PROC
EXTRN	s370_load_complement_fpr_long_reg:PROC
EXTRN	z900_convert_ubcd64_to_dfp_long_reg:PROC
EXTRN	z900_1F13:PROC
EXTRN	s390_1F12:PROC
EXTRN	s370_1F63:PROC
EXTRN	s370_load_negative_fpr_long_reg:PROC
EXTRN	z900_convert_dfp_ext_to_fix64_reg:PROC
EXTRN	z900_1F14:PROC
EXTRN	s390_1F13:PROC
EXTRN	s370_1F64:PROC
EXTRN	s370_load_positive_fpr_long_reg:PROC
EXTRN	z900_convert_dfp_long_to_fix64_reg:PROC
EXTRN	z900_1F15:PROC
EXTRN	s390_1F14:PROC
EXTRN	s370_1F65:PROC
EXTRN	s370_load_fpc_and_signal:PROC
EXTRN	z900_convert_dfp_ext_to_sbcd128_reg:PROC
EXTRN	z900_1F16:PROC
EXTRN	s390_1F15:PROC
EXTRN	s370_1F66:PROC
EXTRN	s370_set_fpc_and_signal:PROC
EXTRN	z900_convert_dfp_long_to_sbcd64_reg:PROC
EXTRN	z900_1F17:PROC
EXTRN	s390_1F16:PROC
EXTRN	s370_1F67:PROC
EXTRN	z900_convert_dfp_ext_to_ubcd128_reg:PROC
EXTRN	z900_1F18:PROC
EXTRN	s390_1F17:PROC
EXTRN	s370_1F68:PROC
EXTRN	z900_convert_dfp_long_to_ubcd64_reg:PROC
EXTRN	z900_1F19:PROC
EXTRN	s390_1F18:PROC
EXTRN	s370_1F69:PROC
EXTRN	z900_divide_dfp_ext_reg:PROC
EXTRN	z900_1F1A:PROC
EXTRN	s390_1F19:PROC
EXTRN	s370_1F6A:PROC
EXTRN	z900_divide_dfp_long_reg:PROC
EXTRN	z900_1F1B:PROC
EXTRN	s390_1F1A:PROC
EXTRN	s370_1F6B:PROC
EXTRN	z900_extract_biased_exponent_dfp_ext_to_fix64_reg:PROC
EXTRN	z900_1F1C:PROC
EXTRN	s390_1F1B:PROC
EXTRN	s370_1F6C:PROC
EXTRN	z900_extract_biased_exponent_dfp_long_to_fix64_reg:PROC
EXTRN	z900_1F1D:PROC
EXTRN	s390_1F1C:PROC
EXTRN	s370_1F6D:PROC
EXTRN	z900_extract_significance_dfp_ext_reg:PROC
EXTRN	z900_1F1E:PROC
EXTRN	s390_1F1D:PROC
EXTRN	s370_1F6E:PROC
EXTRN	z900_extract_significance_dfp_long_reg:PROC
EXTRN	z900_1F1F:PROC
EXTRN	s390_1F1E:PROC
EXTRN	s370_1F6F:PROC
EXTRN	z900_insert_biased_exponent_fix64_to_dfp_ext_reg:PROC
EXTRN	z900_1F20:PROC
EXTRN	s390_1F1F:PROC
EXTRN	s370_1F70:PROC
EXTRN	z900_insert_biased_exponent_fix64_to_dfp_long_reg:PROC
EXTRN	z900_1F21:PROC
EXTRN	s390_1F20:PROC
EXTRN	s370_1F71:PROC
EXTRN	z900_load_and_test_dfp_ext_reg:PROC
EXTRN	z900_1F22:PROC
EXTRN	s390_1F21:PROC
EXTRN	s370_1F72:PROC
EXTRN	z900_load_and_test_dfp_long_reg:PROC
EXTRN	z900_1F23:PROC
EXTRN	s390_1F22:PROC
EXTRN	s370_1F73:PROC
EXTRN	z900_load_fp_int_dfp_ext_reg:PROC
EXTRN	z900_1F24:PROC
EXTRN	s390_1F23:PROC
EXTRN	s370_1F74:PROC
EXTRN	z900_load_fp_int_dfp_long_reg:PROC
EXTRN	z900_1F25:PROC
EXTRN	s390_1F24:PROC
EXTRN	s370_1F75:PROC
EXTRN	z900_load_lengthened_dfp_long_to_ext_reg:PROC
EXTRN	z900_1F26:PROC
EXTRN	s390_1F25:PROC
EXTRN	s370_1F76:PROC
EXTRN	z900_load_lengthened_dfp_short_to_long_reg:PROC
EXTRN	z900_1F27:PROC
EXTRN	s390_1F26:PROC
EXTRN	s370_1F77:PROC
EXTRN	z900_load_rounded_dfp_ext_to_long_reg:PROC
EXTRN	z900_1F28:PROC
EXTRN	s390_1F27:PROC
EXTRN	s370_1F78:PROC
EXTRN	z900_load_rounded_dfp_long_to_short_reg:PROC
EXTRN	z900_1F29:PROC
EXTRN	s390_1F28:PROC
EXTRN	s370_1F79:PROC
EXTRN	z900_multiply_dfp_ext_reg:PROC
EXTRN	z900_1F2A:PROC
EXTRN	s390_1F29:PROC
EXTRN	s370_1F7A:PROC
EXTRN	z900_multiply_dfp_long_reg:PROC
EXTRN	z900_1F2B:PROC
EXTRN	s390_1F2A:PROC
EXTRN	s370_1F7B:PROC
EXTRN	z900_quantize_dfp_ext_reg:PROC
EXTRN	z900_1F2C:PROC
EXTRN	s390_1F2B:PROC
EXTRN	s370_1F7C:PROC
EXTRN	z900_quantize_dfp_long_reg:PROC
EXTRN	z900_1F2D:PROC
EXTRN	s390_1F2C:PROC
EXTRN	s370_1F7D:PROC
EXTRN	z900_reround_dfp_ext_reg:PROC
EXTRN	z900_1F2E:PROC
EXTRN	s390_1F2D:PROC
EXTRN	s370_1F7E:PROC
EXTRN	z900_reround_dfp_long_reg:PROC
EXTRN	z900_1F2F:PROC
EXTRN	s390_1F2E:PROC
EXTRN	s370_1F7F:PROC
EXTRN	z900_shift_coefficient_left_dfp_ext:PROC
EXTRN	z900_1F30:PROC
EXTRN	s390_1F2F:PROC
EXTRN	s370_1F80:PROC
EXTRN	z900_shift_coefficient_left_dfp_long:PROC
EXTRN	z900_1F31:PROC
EXTRN	s390_1F30:PROC
EXTRN	s370_1F81:PROC
EXTRN	z900_shift_coefficient_right_dfp_ext:PROC
EXTRN	z900_1F32:PROC
EXTRN	s390_1F31:PROC
EXTRN	s370_1F82:PROC
EXTRN	z900_shift_coefficient_right_dfp_long:PROC
EXTRN	z900_1F33:PROC
EXTRN	s390_1F32:PROC
EXTRN	s370_1F83:PROC
EXTRN	z900_subtract_dfp_ext_reg:PROC
EXTRN	z900_1F34:PROC
EXTRN	s390_1F33:PROC
EXTRN	s370_1F84:PROC
EXTRN	z900_subtract_dfp_long_reg:PROC
EXTRN	z900_1F35:PROC
EXTRN	s390_1F34:PROC
EXTRN	s370_1F85:PROC
EXTRN	z900_test_data_class_dfp_ext:PROC
EXTRN	z900_1F36:PROC
EXTRN	s390_1F35:PROC
EXTRN	s370_1F86:PROC
EXTRN	z900_test_data_class_dfp_long:PROC
EXTRN	z900_1F37:PROC
EXTRN	s390_1F36:PROC
EXTRN	s370_1F87:PROC
EXTRN	z900_test_data_class_dfp_short:PROC
EXTRN	z900_1F38:PROC
EXTRN	s390_1F37:PROC
EXTRN	s370_1F88:PROC
EXTRN	z900_test_data_group_dfp_ext:PROC
EXTRN	z900_1F39:PROC
EXTRN	s390_1F38:PROC
EXTRN	s370_1F89:PROC
EXTRN	z900_test_data_group_dfp_long:PROC
EXTRN	z900_1F3A:PROC
EXTRN	s390_1F39:PROC
EXTRN	s370_1F8A:PROC
EXTRN	z900_test_data_group_dfp_short:PROC
EXTRN	z900_1F3B:PROC
EXTRN	s390_1F3A:PROC
EXTRN	s370_1F8B:PROC
EXTRN	z900_perform_floating_point_operation:PROC
EXTRN	z900_1F3C:PROC
EXTRN	s390_1F3B:PROC
EXTRN	s370_1F8C:PROC
EXTRN	z900_add_distinct_register:PROC
EXTRN	z900_1F3D:PROC
EXTRN	s390_1F3C:PROC
EXTRN	s370_1F8D:PROC
EXTRN	z900_add_distinct_long_register:PROC
EXTRN	z900_1F3E:PROC
EXTRN	s390_1F3D:PROC
EXTRN	s370_1F8E:PROC
EXTRN	z900_add_distinct_halfword_immediate:PROC
EXTRN	z900_1F3F:PROC
EXTRN	s390_1F3E:PROC
EXTRN	s370_1F8F:PROC
EXTRN	z900_add_distinct_long_halfword_immediate:PROC
EXTRN	z900_1F40:PROC
EXTRN	s390_1F3F:PROC
EXTRN	s370_1F90:PROC
EXTRN	z900_add_logical_distinct_register:PROC
EXTRN	z900_1F41:PROC
EXTRN	s390_1F40:PROC
EXTRN	s370_1F91:PROC
EXTRN	z900_add_logical_distinct_long_register:PROC
EXTRN	z900_1F42:PROC
EXTRN	s390_1F41:PROC
EXTRN	s370_1F92:PROC
EXTRN	z900_add_logical_distinct_signed_halfword_immediate:PROC
EXTRN	z900_1F43:PROC
EXTRN	s390_1F42:PROC
EXTRN	s370_1F93:PROC
EXTRN	z900_add_logical_distinct_long_signed_halfword_immediate:PROC
EXTRN	z900_1F44:PROC
EXTRN	s390_1F43:PROC
EXTRN	s370_1F94:PROC
EXTRN	z900_and_distinct_register:PROC
EXTRN	z900_1F45:PROC
EXTRN	s390_1F44:PROC
EXTRN	s370_1F95:PROC
EXTRN	z900_and_distinct_long_register:PROC
EXTRN	z900_1F46:PROC
EXTRN	s390_1F45:PROC
EXTRN	s370_1F96:PROC
EXTRN	z900_exclusive_or_distinct_register:PROC
EXTRN	z900_1F47:PROC
EXTRN	s390_1F46:PROC
EXTRN	s370_1F97:PROC
EXTRN	z900_exclusive_or_distinct_long_register:PROC
EXTRN	z900_1F48:PROC
EXTRN	s390_1F47:PROC
EXTRN	s370_1F98:PROC
EXTRN	z900_or_distinct_register:PROC
EXTRN	z900_1F49:PROC
EXTRN	s390_1F48:PROC
EXTRN	s370_1F99:PROC
EXTRN	z900_or_distinct_long_register:PROC
EXTRN	z900_1F4A:PROC
EXTRN	s390_1F49:PROC
EXTRN	s370_1F9A:PROC
EXTRN	z900_shift_right_single_distinct:PROC
EXTRN	z900_1F4B:PROC
EXTRN	s390_1F4A:PROC
EXTRN	s370_1F9B:PROC
EXTRN	z900_shift_left_single_distinct:PROC
EXTRN	z900_1F4C:PROC
EXTRN	s390_1F4B:PROC
EXTRN	s370_1F9C:PROC
EXTRN	z900_shift_right_single_logical_distinct:PROC
EXTRN	z900_1F4D:PROC
EXTRN	s390_1F4C:PROC
EXTRN	s370_1F9D:PROC
EXTRN	s370_add_distinct_register:PROC
EXTRN	z900_shift_left_single_logical_distinct:PROC
EXTRN	z900_1F4E:PROC
EXTRN	s390_1F4D:PROC
EXTRN	s370_1F9E:PROC
EXTRN	z900_subtract_distinct_register:PROC
EXTRN	z900_1F4F:PROC
EXTRN	s390_1F4E:PROC
EXTRN	s370_1F9F:PROC
EXTRN	z900_subtract_distinct_long_register:PROC
EXTRN	s370_add_distinct_halfword_immediate:PROC
EXTRN	z900_1F50:PROC
EXTRN	s390_1F4F:PROC
EXTRN	s370_1FA0:PROC
EXTRN	z900_subtract_logical_distinct_register:PROC
EXTRN	z900_1F51:PROC
EXTRN	s390_1F50:PROC
EXTRN	s370_1FA1:PROC
EXTRN	z900_subtract_logical_distinct_long_register:PROC
EXTRN	s370_add_logical_distinct_register:PROC
EXTRN	z900_1F52:PROC
EXTRN	s390_1F51:PROC
EXTRN	s370_1FA2:PROC
EXTRN	z900_add_high_high_high_register:PROC
EXTRN	z900_1F53:PROC
EXTRN	s390_1F52:PROC
EXTRN	s370_1FA3:PROC
EXTRN	z900_add_high_high_low_register:PROC
EXTRN	s370_add_logical_distinct_signed_halfword_immediate:PROC
EXTRN	z900_1F54:PROC
EXTRN	s390_1F53:PROC
EXTRN	s370_1FA4:PROC
EXTRN	z900_add_high_immediate:PROC
EXTRN	z900_1F55:PROC
EXTRN	s390_1F54:PROC
EXTRN	s370_1FA5:PROC
EXTRN	z900_add_logical_high_high_high_register:PROC
EXTRN	s370_and_distinct_register:PROC
EXTRN	z900_1F56:PROC
EXTRN	s390_1F55:PROC
EXTRN	s370_1FA6:PROC
EXTRN	z900_add_logical_high_high_low_register:PROC
EXTRN	z900_1F57:PROC
EXTRN	s390_1F56:PROC
EXTRN	s370_1FA7:PROC
EXTRN	s370_exclusive_or_distinct_register:PROC
EXTRN	z900_add_logical_with_signed_immediate_high:PROC
EXTRN	z900_1F58:PROC
EXTRN	s390_1F57:PROC
EXTRN	s370_1FA8:PROC
EXTRN	z900_add_logical_with_signed_immediate_high_n:PROC
EXTRN	z900_1F59:PROC
EXTRN	s390_1F58:PROC
EXTRN	s370_1FA9:PROC
EXTRN	s370_or_distinct_register:PROC
EXTRN	z900_branch_relative_on_count_high:PROC
EXTRN	z900_1F5A:PROC
EXTRN	s390_1F59:PROC
EXTRN	s370_1FAA:PROC
EXTRN	z900_compare_high_high_register:PROC
EXTRN	z900_1F5B:PROC
EXTRN	s390_1F5A:PROC
EXTRN	s370_1FAB:PROC
EXTRN	z900_compare_high_low_register:PROC
EXTRN	s370_shift_right_single_distinct:PROC
EXTRN	z900_1F5C:PROC
EXTRN	s390_1F5B:PROC
EXTRN	s370_1FAC:PROC
EXTRN	z900_compare_high_fullword:PROC
EXTRN	s370_shift_left_single_distinct:PROC
EXTRN	z900_1F5D:PROC
EXTRN	s390_1F5C:PROC
EXTRN	s370_1FAD:PROC
EXTRN	z900_compare_high_immediate:PROC
EXTRN	s370_shift_right_single_logical_distinct:PROC
EXTRN	z900_1F5E:PROC
EXTRN	s390_1F5D:PROC
EXTRN	s370_1FAE:PROC
EXTRN	z900_compare_logical_high_high_register:PROC
EXTRN	s370_shift_left_single_logical_distinct:PROC
EXTRN	z900_1F5F:PROC
EXTRN	s390_1F5E:PROC
EXTRN	s370_1FAF:PROC
EXTRN	z900_compare_logical_high_low_register:PROC
EXTRN	s370_subtract_distinct_register:PROC
EXTRN	z900_1F60:PROC
EXTRN	s390_1F5F:PROC
EXTRN	s370_1FB0:PROC
EXTRN	z900_compare_logical_high_fullword:PROC
EXTRN	z900_1F61:PROC
EXTRN	s390_1F60:PROC
EXTRN	s370_1FB1:PROC
EXTRN	s370_subtract_logical_distinct_register:PROC
EXTRN	z900_compare_logical_high_immediate:PROC
EXTRN	z900_1F62:PROC
EXTRN	s390_1F61:PROC
EXTRN	s370_1FB2:PROC
EXTRN	z900_load_byte_high:PROC
EXTRN	z900_1F63:PROC
EXTRN	s390_1F62:PROC
EXTRN	s370_1FB3:PROC
EXTRN	z900_load_fullword_high:PROC
EXTRN	z900_1F64:PROC
EXTRN	s390_1F63:PROC
EXTRN	s370_1FB4:PROC
EXTRN	z900_load_halfword_high:PROC
EXTRN	z900_1F65:PROC
EXTRN	s390_1F64:PROC
EXTRN	s370_1FB5:PROC
EXTRN	z900_load_logical_character_high:PROC
EXTRN	z900_1F66:PROC
EXTRN	s390_1F65:PROC
EXTRN	s370_1FB6:PROC
EXTRN	z900_load_logical_halfword_high:PROC
EXTRN	z900_1F67:PROC
EXTRN	s390_1F66:PROC
EXTRN	s370_1FB7:PROC
EXTRN	z900_rotate_then_insert_selected_bits_high_long_reg:PROC
EXTRN	z900_1F68:PROC
EXTRN	s390_1F67:PROC
EXTRN	s370_1FB8:PROC
EXTRN	z900_rotate_then_insert_selected_bits_low_long_reg:PROC
EXTRN	z900_1F69:PROC
EXTRN	s390_1F68:PROC
EXTRN	s370_1FB9:PROC
EXTRN	z900_store_character_high:PROC
EXTRN	z900_1F6A:PROC
EXTRN	s390_1F69:PROC
EXTRN	s370_1FBA:PROC
EXTRN	z900_store_fullword_high:PROC
EXTRN	z900_1F6B:PROC
EXTRN	s390_1F6A:PROC
EXTRN	s370_1FBB:PROC
EXTRN	z900_store_halfword_high:PROC
EXTRN	z900_1F6C:PROC
EXTRN	s390_1F6B:PROC
EXTRN	s370_1FBC:PROC
EXTRN	z900_subtract_high_high_high_register:PROC
EXTRN	z900_1F6D:PROC
EXTRN	s390_1F6C:PROC
EXTRN	s370_1FBD:PROC
EXTRN	z900_subtract_high_high_low_register:PROC
EXTRN	z900_1F6E:PROC
EXTRN	s390_1F6D:PROC
EXTRN	s370_1FBE:PROC
EXTRN	z900_subtract_logical_high_high_high_register:PROC
EXTRN	z900_1F6F:PROC
EXTRN	s390_1F6E:PROC
EXTRN	s370_1FBF:PROC
EXTRN	z900_subtract_logical_high_high_low_register:PROC
EXTRN	z900_1F70:PROC
EXTRN	s390_1F6F:PROC
EXTRN	s370_1FC0:PROC
EXTRN	z900_load_and_add:PROC
EXTRN	z900_1F71:PROC
EXTRN	s390_1F70:PROC
EXTRN	s370_1FC1:PROC
EXTRN	z900_load_and_add_logical:PROC
EXTRN	z900_1F72:PROC
EXTRN	s390_1F71:PROC
EXTRN	s370_1FC2:PROC
EXTRN	z900_load_and_and:PROC
EXTRN	z900_1F73:PROC
EXTRN	s390_1F72:PROC
EXTRN	s370_1FC3:PROC
EXTRN	z900_load_and_exclusive_or:PROC
EXTRN	z900_1F74:PROC
EXTRN	s390_1F73:PROC
EXTRN	s370_1FC4:PROC
EXTRN	z900_load_and_or:PROC
EXTRN	z900_1F75:PROC
EXTRN	s390_1F74:PROC
EXTRN	s370_1FC5:PROC
EXTRN	z900_load_pair_disjoint:PROC
EXTRN	z900_1F76:PROC
EXTRN	s390_1F75:PROC
EXTRN	s370_1FC6:PROC
EXTRN	z900_load_and_add_long:PROC
EXTRN	z900_1F77:PROC
EXTRN	s390_1F76:PROC
EXTRN	s370_1FC7:PROC
EXTRN	z900_load_and_add_logical_long:PROC
EXTRN	z900_1F78:PROC
EXTRN	s390_1F77:PROC
EXTRN	s370_1FC8:PROC
EXTRN	z900_load_and_and_long:PROC
EXTRN	z900_1F79:PROC
EXTRN	s390_1F78:PROC
EXTRN	s370_1FC9:PROC
EXTRN	z900_load_and_exclusive_or_long:PROC
EXTRN	z900_1F7A:PROC
EXTRN	s390_1F79:PROC
EXTRN	s370_1FCA:PROC
EXTRN	z900_load_and_or_long:PROC
EXTRN	z900_1F7B:PROC
EXTRN	s390_1F7A:PROC
EXTRN	s370_1FCB:PROC
EXTRN	z900_load_pair_disjoint_long:PROC
EXTRN	z900_1F7C:PROC
EXTRN	s390_1F7B:PROC
EXTRN	s370_1FCC:PROC
EXTRN	z900_load_on_condition_register:PROC
EXTRN	z900_1F7D:PROC
EXTRN	s390_1F7C:PROC
EXTRN	s370_1FCD:PROC
EXTRN	z900_load_on_condition_long_register:PROC
EXTRN	z900_1F7E:PROC
EXTRN	s390_1F7D:PROC
EXTRN	s370_1FCE:PROC
EXTRN	z900_load_on_condition:PROC
EXTRN	z900_1F7F:PROC
EXTRN	s390_1F7E:PROC
EXTRN	s370_1FCF:PROC
EXTRN	z900_load_on_condition_long:PROC
EXTRN	z900_1F80:PROC
EXTRN	s390_1F7F:PROC
EXTRN	s370_1FD0:PROC
EXTRN	z900_store_on_condition:PROC
EXTRN	z900_1F81:PROC
EXTRN	s390_1F80:PROC
EXTRN	s370_1FD1:PROC
EXTRN	z900_store_on_condition_long:PROC
EXTRN	s370_load_and_add:PROC
EXTRN	z900_1F82:PROC
EXTRN	s390_1F81:PROC
EXTRN	s370_1FD2:PROC
EXTRN	z900_population_count:PROC
EXTRN	s370_load_and_add_logical:PROC
EXTRN	z900_1F83:PROC
EXTRN	s390_1F82:PROC
EXTRN	s370_1FD3:PROC
EXTRN	s370_load_and_and:PROC
EXTRN	z900_convert_zoned_to_dfp_ext:PROC
EXTRN	z900_1F84:PROC
EXTRN	s390_1F83:PROC
EXTRN	s370_1FD4:PROC
EXTRN	s370_load_and_exclusive_or:PROC
EXTRN	z900_convert_zoned_to_dfp_long:PROC
EXTRN	z900_1F85:PROC
EXTRN	s390_1F84:PROC
EXTRN	s370_1FD5:PROC
EXTRN	s370_load_and_or:PROC
EXTRN	z900_convert_dfp_ext_to_zoned:PROC
EXTRN	z900_1F86:PROC
EXTRN	s390_1F85:PROC
EXTRN	s370_1FD6:PROC
EXTRN	s370_load_pair_disjoint:PROC
EXTRN	z900_convert_dfp_long_to_zoned:PROC
EXTRN	z900_1F87:PROC
EXTRN	s390_1F86:PROC
EXTRN	s370_1FD7:PROC
EXTRN	z900_branch_prediction_preload:PROC
EXTRN	z900_1F88:PROC
EXTRN	s390_1F87:PROC
EXTRN	s370_1FD8:PROC
EXTRN	z900_branch_prediction_relative_preload:PROC
EXTRN	z900_1F89:PROC
EXTRN	s390_1F88:PROC
EXTRN	s370_1FD9:PROC
EXTRN	z900_next_instruction_access_intent:PROC
EXTRN	z900_1F8A:PROC
EXTRN	s390_1F89:PROC
EXTRN	s370_1FDA:PROC
EXTRN	z900_load_and_trap:PROC
EXTRN	z900_1F8B:PROC
EXTRN	s390_1F8A:PROC
EXTRN	s370_1FDB:PROC
EXTRN	z900_load_long_and_trap:PROC
EXTRN	z900_1F8C:PROC
EXTRN	s390_1F8B:PROC
EXTRN	s370_1FDC:PROC
EXTRN	z900_load_fullword_high_and_trap:PROC
EXTRN	z900_1F8D:PROC
EXTRN	s390_1F8C:PROC
EXTRN	s370_1FDD:PROC
EXTRN	s370_load_on_condition_register:PROC
EXTRN	z900_load_logical_long_fullword_and_trap:PROC
EXTRN	z900_1F8E:PROC
EXTRN	s390_1F8D:PROC
EXTRN	s370_1FDE:PROC
EXTRN	z900_load_logical_long_thirtyone_and_trap:PROC
EXTRN	z900_1F8F:PROC
EXTRN	s390_1F8E:PROC
EXTRN	s370_1FDF:PROC
EXTRN	z900_compare_logical_and_trap:PROC
EXTRN	s370_load_on_condition:PROC
EXTRN	z900_1F90:PROC
EXTRN	s390_1F8F:PROC
EXTRN	s370_1FE0:PROC
EXTRN	z900_compare_logical_and_trap_long:PROC
EXTRN	z900_1F91:PROC
EXTRN	s390_1F90:PROC
EXTRN	s370_1FE1:PROC
EXTRN	s370_store_on_condition:PROC
EXTRN	z900_rotate_then_insert_selected_bits_long_reg_n:PROC
EXTRN	z900_1F92:PROC
EXTRN	s390_1F91:PROC
EXTRN	s370_1FE2:PROC
EXTRN	z900_perform_processor_assist:PROC
EXTRN	z900_1F93:PROC
EXTRN	s390_1F92:PROC
EXTRN	s370_1FE3:PROC
EXTRN	z900_transaction_begin_constrained:PROC
EXTRN	z900_1F94:PROC
EXTRN	s390_1F93:PROC
EXTRN	s370_1FE4:PROC
EXTRN	z900_load_halfword_high_immediate_on_condition:PROC
EXTRN	z900_1F95:PROC
EXTRN	s390_1F94:PROC
EXTRN	s370_1FE5:PROC
EXTRN	z900_load_halfword_immediate_on_condition:PROC
EXTRN	z900_1F96:PROC
EXTRN	s390_1F95:PROC
EXTRN	s370_1FE6:PROC
EXTRN	z900_load_halfword_immediate_on_condition_grande:PROC
EXTRN	z900_1F97:PROC
EXTRN	s390_1F96:PROC
EXTRN	s370_1FE7:PROC
EXTRN	z900_load_high_on_condition:PROC
EXTRN	z900_1F98:PROC
EXTRN	s390_1F97:PROC
EXTRN	s370_1FE8:PROC
EXTRN	z900_load_high_on_condition_register:PROC
EXTRN	z900_1F99:PROC
EXTRN	s390_1F98:PROC
EXTRN	s370_1FE9:PROC
EXTRN	s370_insert_storage_key:PROC
EXTRN	z900_store_high_on_condition:PROC
EXTRN	z900_1F9A:PROC
EXTRN	s390_1F99:PROC
EXTRN	s370_1FEA:PROC
EXTRN	s370_reset_reference_bit:PROC
EXTRN	z900_load_and_zero_rightmost_byte_grande:PROC
EXTRN	z900_1F9B:PROC
EXTRN	s390_1F9A:PROC
EXTRN	s370_1FEB:PROC
EXTRN	s370_set_storage_key:PROC
EXTRN	z900_load_logical_and_zero_rightmost_byte:PROC
EXTRN	z900_1F9C:PROC
EXTRN	s390_1F9B:PROC
EXTRN	s370_1FEC:PROC
EXTRN	s370_branch_and_save_and_set_mode:PROC
EXTRN	z900_load_and_zero_rightmost_byte:PROC
EXTRN	z900_1F9D:PROC
EXTRN	s390_1F9C:PROC
EXTRN	s370_1FED:PROC
EXTRN	s370_branch_and_set_mode:PROC
EXTRN	z900_branch_indirect_on_condition:PROC
EXTRN	z900_1F9E:PROC
EXTRN	s390_1F9D:PROC
EXTRN	s370_1FEE:PROC
EXTRN	s370_add_bfp_ext_reg:PROC
EXTRN	z900_add_long_halfword:PROC
EXTRN	z900_1F9F:PROC
EXTRN	s390_1F9E:PROC
EXTRN	s370_1FEF:PROC
EXTRN	z900_subtract_long_halfword:PROC
EXTRN	s370_add_bfp_long:PROC
EXTRN	z900_1FA0:PROC
EXTRN	s390_1F9F:PROC
EXTRN	s370_1FF0:PROC
EXTRN	s370_add_bfp_long_reg:PROC
EXTRN	z900_multiply_long_register:PROC
EXTRN	z900_1FA1:PROC
EXTRN	s390_1FA0:PROC
EXTRN	s370_1FF1:PROC
EXTRN	z900_multiply_long:PROC
EXTRN	s370_add_bfp_short:PROC
EXTRN	z900_1FA2:PROC
EXTRN	s390_1FA1:PROC
EXTRN	s370_1FF2:PROC
EXTRN	s370_add_bfp_short_reg:PROC
EXTRN	z900_multiply_long_halfword:PROC
EXTRN	z900_1FA3:PROC
EXTRN	s390_1FA2:PROC
EXTRN	s370_1FF3:PROC
EXTRN	s370_compare_and_signal_bfp_ext_reg:PROC
EXTRN	z900_multiply_single_register_cc:PROC
EXTRN	z900_1FA4:PROC
EXTRN	s390_1FA3:PROC
EXTRN	s370_1FF4:PROC
EXTRN	z900_multiply_single_cc:PROC
EXTRN	s370_compare_and_signal_bfp_long:PROC
EXTRN	z900_1FA5:PROC
EXTRN	s390_1FA4:PROC
EXTRN	s370_1FF5:PROC
EXTRN	s370_compare_and_signal_bfp_long_reg:PROC
EXTRN	z900_multiply_single_long_register_cc:PROC
EXTRN	z900_1FA6:PROC
EXTRN	s390_1FA5:PROC
EXTRN	s370_1FF6:PROC
EXTRN	z900_multiply_single_long_cc:PROC
EXTRN	s370_compare_and_signal_bfp_short:PROC
EXTRN	z900_1FA7:PROC
EXTRN	s390_1FA6:PROC
EXTRN	s370_1FF7:PROC
EXTRN	s370_compare_and_signal_bfp_short_reg:PROC
EXTRN	z900_and_register_with_complement:PROC
EXTRN	z900_1FA8:PROC
EXTRN	s390_1FA7:PROC
EXTRN	s370_1FF8:PROC
EXTRN	s370_compare_bfp_ext_reg:PROC
EXTRN	z900_and_register_long_with_complement:PROC
EXTRN	z900_1FA9:PROC
EXTRN	s390_1FA8:PROC
EXTRN	s370_1FF9:PROC
EXTRN	z900_nand_register:PROC
EXTRN	s370_compare_bfp_long:PROC
EXTRN	z900_1FAA:PROC
EXTRN	s390_1FA9:PROC
EXTRN	s370_1FFA:PROC
EXTRN	s370_compare_bfp_long_reg:PROC
EXTRN	z900_nand_register_long:PROC
EXTRN	z900_1FAB:PROC
EXTRN	s390_1FAA:PROC
EXTRN	s370_1FFB:PROC
EXTRN	z900_not_xor_register:PROC
EXTRN	s370_compare_bfp_short:PROC
EXTRN	z900_1FAC:PROC
EXTRN	s390_1FAB:PROC
EXTRN	s370_1FFC:PROC
EXTRN	s370_compare_bfp_short_reg:PROC
EXTRN	z900_not_xor_register_long:PROC
EXTRN	z900_1FAD:PROC
EXTRN	s390_1FAC:PROC
EXTRN	s370_1FFD:PROC
EXTRN	s370_convert_bfp_ext_to_fix32_reg:PROC
EXTRN	z900_nor_register:PROC
EXTRN	z900_1FAE:PROC
EXTRN	s390_1FAD:PROC
EXTRN	s370_1FFE:PROC
EXTRN	z900_nor_register_long:PROC
EXTRN	z900_1FAF:PROC
EXTRN	s390_1FAE:PROC
EXTRN	s370_1FFF:PROC
EXTRN	s370_convert_bfp_long_to_fix32_reg:PROC
EXTRN	z900_or_register_with_complement:PROC
EXTRN	z900_1FB0:PROC
EXTRN	s390_1FAF:PROC
EXTRN	z900_or_register_long_with_complement:PROC
EXTRN	z900_1FB1:PROC
EXTRN	s390_1FB0:PROC
EXTRN	s370_convert_bfp_short_to_fix32_reg:PROC
EXTRN	z900_select_register:PROC
EXTRN	z900_1FB2:PROC
EXTRN	s390_1FB1:PROC
EXTRN	z900_select_register_long:PROC
EXTRN	z900_1FB3:PROC
EXTRN	s390_1FB2:PROC
EXTRN	s370_convert_fix32_to_bfp_ext_reg:PROC
EXTRN	z900_select_fullword_high_register:PROC
EXTRN	z900_1FB4:PROC
EXTRN	s390_1FB3:PROC
EXTRN	s370_convert_fix32_to_bfp_long_reg:PROC
EXTRN	z900_move_right_to_left:PROC
EXTRN	z900_1FB5:PROC
EXTRN	s390_1FB4:PROC
EXTRN	s370_convert_fix32_to_bfp_short_reg:PROC
EXTRN	z900_reset_reference_bits_multiple:PROC
EXTRN	z900_1FB6:PROC
EXTRN	s390_1FB5:PROC
EXTRN	z900_transaction_end:PROC
EXTRN	z900_1FB7:PROC
EXTRN	s390_1FB6:PROC
EXTRN	z900_extract_transaction_nesting_depth:PROC
EXTRN	z900_1FB8:PROC
EXTRN	s390_1FB7:PROC
EXTRN	z900_transaction_abort:PROC
EXTRN	z900_1FB9:PROC
EXTRN	s390_1FB8:PROC
EXTRN	s370_divide_bfp_ext_reg:PROC
EXTRN	z900_nontransactional_store:PROC
EXTRN	z900_1FBA:PROC
EXTRN	s390_1FB9:PROC
EXTRN	z900_transaction_begin:PROC
EXTRN	s370_divide_bfp_long:PROC
EXTRN	z900_1FBB:PROC
EXTRN	s390_1FBA:PROC
EXTRN	z900_store_hypervisor_information:PROC
EXTRN	s370_divide_bfp_long_reg:PROC
EXTRN	z900_1FBC:PROC
EXTRN	s390_1FBB:PROC
EXTRN	s370_divide_bfp_short:PROC
EXTRN	z900_1FBD:PROC
EXTRN	s390_1FBC:PROC
EXTRN	s370_divide_bfp_short_reg:PROC
EXTRN	z900_1FBE:PROC
EXTRN	s390_1FBD:PROC
EXTRN	s370_divide_integer_bfp_long_reg:PROC
EXTRN	z900_1FBF:PROC
EXTRN	s390_1FBE:PROC
EXTRN	s370_divide_integer_bfp_short_reg:PROC
EXTRN	z900_1FC0:PROC
EXTRN	s390_1FBF:PROC
EXTRN	s370_extract_fpc:PROC
EXTRN	z900_1FC1:PROC
EXTRN	s390_1FC0:PROC
EXTRN	s370_load_and_test_bfp_ext_reg:PROC
EXTRN	z900_convert_packed_to_dfp_ext:PROC
EXTRN	z900_1FC2:PROC
EXTRN	s390_1FC1:PROC
EXTRN	s370_load_and_test_bfp_long_reg:PROC
EXTRN	z900_convert_packed_to_dfp_long:PROC
EXTRN	z900_1FC3:PROC
EXTRN	s390_1FC2:PROC
EXTRN	s370_load_and_test_bfp_short_reg:PROC
EXTRN	z900_convert_dfp_ext_to_packed:PROC
EXTRN	z900_1FC4:PROC
EXTRN	s390_1FC3:PROC
EXTRN	s370_load_complement_bfp_ext_reg:PROC
EXTRN	z900_convert_dfp_long_to_packed:PROC
EXTRN	z900_1FC5:PROC
EXTRN	s390_1FC4:PROC
EXTRN	s370_load_complement_bfp_long_reg:PROC
EXTRN	z900_vector_load:PROC
EXTRN	z900_1FC6:PROC
EXTRN	s390_1FC5:PROC
EXTRN	s370_load_complement_bfp_short_reg:PROC
EXTRN	z900_vector_store:PROC
EXTRN	z900_1FC7:PROC
EXTRN	s390_1FC6:PROC
EXTRN	s370_load_fp_int_bfp_ext_reg:PROC
EXTRN	z900_vector_load_multiple:PROC
EXTRN	z900_1FC8:PROC
EXTRN	s390_1FC7:PROC
EXTRN	s370_load_fp_int_bfp_long_reg:PROC
EXTRN	z900_vector_store_multiple:PROC
EXTRN	z900_1FC9:PROC
EXTRN	s390_1FC8:PROC
EXTRN	s370_load_fp_int_bfp_short_reg:PROC
EXTRN	z900_insert_reference_bits_multiple:PROC
EXTRN	z900_1FCA:PROC
EXTRN	s390_1FC9:PROC
EXTRN	s370_load_fpc:PROC
EXTRN	z900_load_bear:PROC
EXTRN	z900_1FCB:PROC
EXTRN	s390_1FCA:PROC
EXTRN	z900_store_bear:PROC
EXTRN	s370_load_lengthened_bfp_long_to_ext:PROC
EXTRN	z900_1FCC:PROC
EXTRN	s390_1FCB:PROC
EXTRN	s370_load_lengthened_bfp_long_to_ext_reg:PROC
EXTRN	z900_load_program_status_word_extended_y:PROC
EXTRN	z900_1FCD:PROC
EXTRN	s390_1FCC:PROC
EXTRN	z900_purge_accesslist_lookaside_buffer:PROC
EXTRN	s370_load_lengthened_bfp_short_to_ext:PROC
EXTRN	z900_1FCE:PROC
EXTRN	s390_1FCD:PROC
EXTRN	z900_test_access:PROC
EXTRN	s370_load_lengthened_bfp_short_to_ext_reg:PROC
EXTRN	z900_1FCF:PROC
EXTRN	s390_1FCE:PROC
EXTRN	z900_copy_access:PROC
EXTRN	s370_load_lengthened_bfp_short_to_long:PROC
EXTRN	z900_1FD0:PROC
EXTRN	s390_1FCF:PROC
EXTRN	z900_extract_access_register:PROC
EXTRN	s370_load_lengthened_bfp_short_to_long_reg:PROC
EXTRN	z900_1FD1:PROC
EXTRN	s390_1FD0:PROC
EXTRN	z900_load_access_multiple:PROC
EXTRN	s370_load_negative_bfp_ext_reg:PROC
EXTRN	z900_1FD2:PROC
EXTRN	s390_1FD1:PROC
EXTRN	z900_set_access_register:PROC
EXTRN	s370_load_negative_bfp_long_reg:PROC
EXTRN	z900_1FD3:PROC
EXTRN	s390_1FD2:PROC
EXTRN	z900_store_access_multiple:PROC
EXTRN	s370_load_negative_bfp_short_reg:PROC
EXTRN	z900_1FD4:PROC
EXTRN	s390_1FD3:PROC
EXTRN	z900_branch_and_save_and_set_mode:PROC
EXTRN	s370_load_positive_bfp_ext_reg:PROC
EXTRN	z900_1FD5:PROC
EXTRN	s390_1FD4:PROC
EXTRN	z900_branch_and_set_mode:PROC
EXTRN	s370_load_positive_bfp_long_reg:PROC
EXTRN	z900_1FD6:PROC
EXTRN	s390_1FD5:PROC
EXTRN	s370_load_positive_bfp_short_reg:PROC
EXTRN	z900_add_bfp_ext_reg:PROC
EXTRN	z900_1FD7:PROC
EXTRN	s390_1FD6:PROC
EXTRN	s370_load_rounded_bfp_ext_to_long_reg:PROC
EXTRN	z900_add_bfp_long:PROC
EXTRN	z900_1FD8:PROC
EXTRN	s390_1FD7:PROC
EXTRN	z900_add_bfp_long_reg:PROC
EXTRN	s370_load_rounded_bfp_ext_to_short_reg:PROC
EXTRN	z900_1FD9:PROC
EXTRN	s390_1FD8:PROC
EXTRN	s370_load_rounded_bfp_long_to_short_reg:PROC
EXTRN	z900_add_bfp_short:PROC
EXTRN	z900_1FDA:PROC
EXTRN	s390_1FD9:PROC
EXTRN	z900_add_bfp_short_reg:PROC
EXTRN	s370_multiply_add_bfp_long:PROC
EXTRN	z900_1FDB:PROC
EXTRN	s390_1FDA:PROC
EXTRN	s370_multiply_add_bfp_long_reg:PROC
EXTRN	z900_compare_and_signal_bfp_ext_reg:PROC
EXTRN	z900_1FDC:PROC
EXTRN	s390_1FDB:PROC
EXTRN	s370_multiply_add_bfp_short:PROC
EXTRN	z900_compare_and_signal_bfp_long:PROC
EXTRN	z900_1FDD:PROC
EXTRN	s390_1FDC:PROC
EXTRN	s370_multiply_add_bfp_short_reg:PROC
EXTRN	z900_compare_and_signal_bfp_long_reg:PROC
EXTRN	z900_1FDE:PROC
EXTRN	s390_1FDD:PROC
EXTRN	s370_multiply_bfp_ext_reg:PROC
EXTRN	z900_compare_and_signal_bfp_short:PROC
EXTRN	z900_1FDF:PROC
EXTRN	s390_1FDE:PROC
EXTRN	z900_compare_and_signal_bfp_short_reg:PROC
EXTRN	s370_multiply_bfp_long:PROC
EXTRN	z900_1FE0:PROC
EXTRN	s390_1FDF:PROC
EXTRN	s370_multiply_bfp_long_reg:PROC
EXTRN	z900_compare_bfp_ext_reg:PROC
EXTRN	z900_1FE1:PROC
EXTRN	s390_1FE0:PROC
EXTRN	s370_multiply_bfp_long_to_ext:PROC
EXTRN	z900_compare_bfp_long:PROC
EXTRN	z900_1FE2:PROC
EXTRN	s390_1FE1:PROC
EXTRN	s370_multiply_bfp_long_to_ext_reg:PROC
EXTRN	z900_compare_bfp_long_reg:PROC
EXTRN	z900_1FE3:PROC
EXTRN	s390_1FE2:PROC
EXTRN	z900_compare_bfp_short:PROC
EXTRN	s370_multiply_bfp_short:PROC
EXTRN	z900_1FE4:PROC
EXTRN	s390_1FE3:PROC
EXTRN	z900_compare_bfp_short_reg:PROC
EXTRN	s370_multiply_bfp_short_reg:PROC
EXTRN	z900_1FE5:PROC
EXTRN	s390_1FE4:PROC
EXTRN	z900_convert_bfp_ext_to_fix32_reg:PROC
EXTRN	s370_multiply_bfp_short_to_long:PROC
EXTRN	z900_1FE6:PROC
EXTRN	s390_1FE5:PROC
EXTRN	s370_multiply_bfp_short_to_long_reg:PROC
EXTRN	z900_convert_bfp_ext_to_fix64_reg:PROC
EXTRN	z900_1FE7:PROC
EXTRN	s390_1FE6:PROC
EXTRN	z900_convert_bfp_long_to_fix32_reg:PROC
EXTRN	s370_multiply_subtract_bfp_long:PROC
EXTRN	z900_1FE8:PROC
EXTRN	s390_1FE7:PROC
EXTRN	s370_multiply_subtract_bfp_long_reg:PROC
EXTRN	z900_convert_bfp_long_to_fix64_reg:PROC
EXTRN	z900_1FE9:PROC
EXTRN	s390_1FE8:PROC
EXTRN	z900_convert_bfp_short_to_fix32_reg:PROC
EXTRN	s370_multiply_subtract_bfp_short:PROC
EXTRN	z900_1FEA:PROC
EXTRN	s390_1FE9:PROC
EXTRN	s370_multiply_subtract_bfp_short_reg:PROC
EXTRN	z900_convert_bfp_short_to_fix64_reg:PROC
EXTRN	z900_1FEB:PROC
EXTRN	s390_1FEA:PROC
EXTRN	s370_set_bfp_rounding_mode_2bit:PROC
EXTRN	z900_convert_fix32_to_bfp_ext_reg:PROC
EXTRN	z900_1FEC:PROC
EXTRN	s390_1FEB:PROC
EXTRN	s370_set_fpc:PROC
EXTRN	z900_convert_fix32_to_bfp_long_reg:PROC
EXTRN	z900_1FED:PROC
EXTRN	s390_1FEC:PROC
EXTRN	s370_squareroot_bfp_ext_reg:PROC
EXTRN	z900_convert_fix32_to_bfp_short_reg:PROC
EXTRN	z900_1FEE:PROC
EXTRN	s390_1FED:PROC
EXTRN	z900_convert_fix64_to_bfp_ext_reg:PROC
EXTRN	s370_squareroot_bfp_long:PROC
EXTRN	z900_1FEF:PROC
EXTRN	s390_1FEE:PROC
EXTRN	s370_squareroot_bfp_long_reg:PROC
EXTRN	z900_convert_fix64_to_bfp_long_reg:PROC
EXTRN	z900_1FF0:PROC
EXTRN	s390_1FEF:PROC
EXTRN	z900_convert_fix64_to_bfp_short_reg:PROC
EXTRN	s370_squareroot_bfp_short:PROC
EXTRN	z900_1FF1:PROC
EXTRN	s390_1FF0:PROC
EXTRN	s370_squareroot_bfp_short_reg:PROC
EXTRN	z900_divide_bfp_ext_reg:PROC
EXTRN	z900_1FF2:PROC
EXTRN	s390_1FF1:PROC
EXTRN	s370_store_fpc:PROC
EXTRN	z900_divide_bfp_long:PROC
EXTRN	z900_1FF3:PROC
EXTRN	s390_1FF2:PROC
EXTRN	z900_divide_bfp_long_reg:PROC
EXTRN	s370_subtract_bfp_ext_reg:PROC
EXTRN	z900_1FF4:PROC
EXTRN	s390_1FF3:PROC
EXTRN	z900_divide_bfp_short:PROC
EXTRN	s370_subtract_bfp_long:PROC
EXTRN	z900_1FF5:PROC
EXTRN	s390_1FF4:PROC
EXTRN	z900_divide_bfp_short_reg:PROC
EXTRN	s370_subtract_bfp_long_reg:PROC
EXTRN	z900_1FF6:PROC
EXTRN	s390_1FF5:PROC
EXTRN	z900_divide_integer_bfp_long_reg:PROC
EXTRN	s370_subtract_bfp_short:PROC
EXTRN	z900_1FF7:PROC
EXTRN	s390_1FF6:PROC
EXTRN	s370_subtract_bfp_short_reg:PROC
EXTRN	z900_divide_integer_bfp_short_reg:PROC
EXTRN	z900_1FF8:PROC
EXTRN	s390_1FF7:PROC
EXTRN	z900_extract_fpc:PROC
EXTRN	s370_test_data_class_bfp_ext:PROC
EXTRN	z900_1FF9:PROC
EXTRN	s390_1FF8:PROC
EXTRN	z900_load_and_test_bfp_ext_reg:PROC
EXTRN	s370_test_data_class_bfp_long:PROC
EXTRN	z900_1FFA:PROC
EXTRN	s390_1FF9:PROC
EXTRN	z900_load_and_test_bfp_long_reg:PROC
EXTRN	s370_test_data_class_bfp_short:PROC
EXTRN	z900_1FFB:PROC
EXTRN	s390_1FFA:PROC
EXTRN	s370_connect_channel_set:PROC
EXTRN	z900_load_and_test_bfp_short_reg:PROC
EXTRN	z900_1FFC:PROC
EXTRN	s390_1FFB:PROC
EXTRN	s370_disconnect_channel_set:PROC
EXTRN	z900_load_complement_bfp_ext_reg:PROC
EXTRN	z900_1FFD:PROC
EXTRN	s390_1FFC:PROC
EXTRN	s370_checksum:PROC
EXTRN	z900_load_complement_bfp_long_reg:PROC
EXTRN	z900_1FFE:PROC
EXTRN	s390_1FFD:PROC
EXTRN	s370_cmpsc_2012:PROC
EXTRN	z900_load_complement_bfp_short_reg:PROC
EXTRN	z900_1FFF:PROC
EXTRN	s390_1FFE:PROC
EXTRN	s370_compare_logical_long_extended:PROC
EXTRN	z900_load_fp_int_bfp_ext_reg:PROC
EXTRN	s390_1FFF:PROC
EXTRN	s370_move_long_extended:PROC
EXTRN	z900_load_fp_int_bfp_long_reg:PROC
EXTRN	s370_extract_primary_asn:PROC
EXTRN	z900_load_fp_int_bfp_short_reg:PROC
EXTRN	s370_extract_secondary_asn:PROC
EXTRN	z900_load_fpc:PROC
EXTRN	s370_insert_address_space_control:PROC
EXTRN	z900_load_lengthened_bfp_long_to_ext:PROC
EXTRN	s370_insert_virtual_storage_key:PROC
EXTRN	z900_load_lengthened_bfp_long_to_ext_reg:PROC
EXTRN	s370_load_address_space_parameters:PROC
EXTRN	z900_load_lengthened_bfp_short_to_ext:PROC
EXTRN	s370_move_to_primary:PROC
EXTRN	z900_load_lengthened_bfp_short_to_ext_reg:PROC
EXTRN	s370_move_to_secondary:PROC
EXTRN	z900_load_lengthened_bfp_short_to_long:PROC
EXTRN	s370_move_with_key:PROC
EXTRN	z900_load_lengthened_bfp_short_to_long_reg:PROC
EXTRN	s370_program_call:PROC
EXTRN	z900_load_negative_bfp_ext_reg:PROC
EXTRN	s370_program_transfer:PROC
EXTRN	z900_load_negative_bfp_long_reg:PROC
EXTRN	s370_set_address_space_control:PROC
EXTRN	z900_load_negative_bfp_short_reg:PROC
EXTRN	s370_set_secondary_asn:PROC
EXTRN	z900_load_positive_bfp_ext_reg:PROC
EXTRN	z900_load_positive_bfp_long_reg:PROC
EXTRN	s370_ecpsvm_basic_freex:PROC
EXTRN	z900_load_positive_bfp_short_reg:PROC
EXTRN	s370_ecpsvm_basic_fretx:PROC
EXTRN	z900_load_rounded_bfp_ext_to_long_reg:PROC
EXTRN	s370_ecpsvm_lock_page:PROC
EXTRN	z900_load_rounded_bfp_ext_to_short_reg:PROC
EXTRN	s370_ecpsvm_unlock_page:PROC
EXTRN	z900_load_rounded_bfp_long_to_short_reg:PROC
EXTRN	s370_ecpsvm_decode_next_ccw:PROC
EXTRN	s370_ecpsvm_free_ccwstor:PROC
EXTRN	z900_multiply_add_bfp_long:PROC
EXTRN	z900_multiply_add_bfp_long_reg:PROC
EXTRN	s370_ecpsvm_locate_vblock:PROC
EXTRN	s370_ecpsvm_disp1:PROC
EXTRN	z900_multiply_add_bfp_short:PROC
EXTRN	z900_multiply_add_bfp_short_reg:PROC
EXTRN	s370_ecpsvm_tpage:PROC
EXTRN	z900_multiply_bfp_ext_reg:PROC
EXTRN	s370_ecpsvm_tpage_lock:PROC
EXTRN	s370_ecpsvm_inval_segtab:PROC
EXTRN	z900_multiply_bfp_long:PROC
EXTRN	z900_multiply_bfp_long_reg:PROC
EXTRN	s370_ecpsvm_inval_ptable:PROC
EXTRN	s370_ecpsvm_decode_first_ccw:PROC
EXTRN	z900_multiply_bfp_long_to_ext:PROC
EXTRN	z900_multiply_bfp_long_to_ext_reg:PROC
EXTRN	s370_ecpsvm_dispatch_main:PROC
EXTRN	s370_ecpsvm_locate_rblock:PROC
EXTRN	z900_multiply_bfp_short:PROC
EXTRN	z900_multiply_bfp_short_reg:PROC
EXTRN	s370_ecpsvm_comm_ccwproc:PROC
EXTRN	s370_ecpsvm_unxlate_ccw:PROC
EXTRN	z900_multiply_bfp_short_to_long:PROC
EXTRN	z900_multiply_bfp_short_to_long_reg:PROC
EXTRN	s370_ecpsvm_disp2:PROC
EXTRN	s370_ecpsvm_store_level:PROC
EXTRN	z900_multiply_subtract_bfp_long:PROC
EXTRN	z900_multiply_subtract_bfp_long_reg:PROC
EXTRN	s370_ecpsvm_loc_chgshrpg:PROC
EXTRN	s370_ecpsvm_extended_freex:PROC
EXTRN	z900_multiply_subtract_bfp_short:PROC
EXTRN	z900_multiply_subtract_bfp_short_reg:PROC
EXTRN	s370_ecpsvm_extended_fretx:PROC
EXTRN	z900_set_bfp_rounding_mode_2bit:PROC
EXTRN	s370_ecpsvm_prefmach_assist:PROC
EXTRN	s370_inter_user_communication_vehicle:PROC
EXTRN	z900_set_fpc:PROC
EXTRN	s370_insert_storage_key_extended:PROC
EXTRN	z900_squareroot_bfp_ext_reg:PROC
EXTRN	s370_reset_reference_bit_extended:PROC
EXTRN	z900_squareroot_bfp_long:PROC
EXTRN	s370_set_storage_key_extended:PROC
EXTRN	z900_squareroot_bfp_long_reg:PROC
EXTRN	s370_convert_utf16_to_utf8:PROC
EXTRN	z900_squareroot_bfp_short:PROC
EXTRN	s370_convert_utf8_to_utf16:PROC
EXTRN	z900_squareroot_bfp_short_reg:PROC
EXTRN	s370_translate_extended:PROC
EXTRN	z900_store_fpc:PROC
EXTRN	s390_add_logical_carry:PROC
EXTRN	s370_add_float_ext_reg:PROC
EXTRN	z900_subtract_bfp_ext_reg:PROC
EXTRN	s390_add_logical_carry_register:PROC
EXTRN	s370_add_float_long:PROC
EXTRN	s390_branch_relative_and_save_long:PROC
EXTRN	z900_subtract_bfp_long:PROC
EXTRN	s370_add_float_long_reg:PROC
EXTRN	z900_subtract_bfp_long_reg:PROC
EXTRN	s390_branch_relative_on_condition_long:PROC
EXTRN	s370_add_float_short:PROC
EXTRN	s390_divide_logical:PROC
EXTRN	z900_subtract_bfp_short:PROC
EXTRN	s370_add_float_short_reg:PROC
EXTRN	z900_subtract_bfp_short_reg:PROC
EXTRN	s390_divide_logical_register:PROC
EXTRN	s370_add_unnormal_float_long:PROC
EXTRN	s390_extract_psw:PROC
EXTRN	z900_test_data_class_bfp_ext:PROC
EXTRN	s370_add_unnormal_float_long_reg:PROC
EXTRN	s390_load_address_relative_long:PROC
EXTRN	z900_test_data_class_bfp_long:PROC
EXTRN	s370_add_unnormal_float_short:PROC
EXTRN	s390_load_reversed:PROC
EXTRN	z900_test_data_class_bfp_short:PROC
EXTRN	z900_branch_and_set_authority:PROC
EXTRN	s370_add_unnormal_float_short_reg:PROC
EXTRN	s390_load_reversed_half:PROC
EXTRN	z900_compare_and_swap_and_purge:PROC
EXTRN	s370_compare_float_long:PROC
EXTRN	s390_load_reversed_register:PROC
EXTRN	z900_cancel_subchannel:PROC
EXTRN	s370_compare_float_long_reg:PROC
EXTRN	s390_multiply_logical:PROC
EXTRN	z900_clear_subchannel:PROC
EXTRN	s370_compare_float_short:PROC
EXTRN	s390_multiply_logical_register:PROC
EXTRN	z900_halt_subchannel:PROC
EXTRN	s370_compare_float_short_reg:PROC
EXTRN	s390_rotate_left_single_logical:PROC
EXTRN	s370_divide_float_ext_reg:PROC
EXTRN	z900_modify_subchannel:PROC
EXTRN	s390_set_addressing_mode_24:PROC
EXTRN	z900_resume_subchannel:PROC
EXTRN	s370_divide_float_long:PROC
EXTRN	s390_set_addressing_mode_31:PROC
EXTRN	s390_store_facility_list:PROC
EXTRN	z900_set_address_limit:PROC
EXTRN	s370_divide_float_long_reg:PROC
EXTRN	z900_set_channel_monitor:PROC
EXTRN	s370_divide_float_short:PROC
EXTRN	s390_store_reversed:PROC
EXTRN	z900_reset_channel_path:PROC
EXTRN	s370_divide_float_short_reg:PROC
EXTRN	s390_store_reversed_half:PROC
EXTRN	z900_start_subchannel:PROC
EXTRN	s370_halve_float_long_reg:PROC
EXTRN	s390_subtract_logical_borrow:PROC
EXTRN	z900_store_channel_path_status:PROC
EXTRN	s370_halve_float_short_reg:PROC
EXTRN	s390_subtract_logical_borrow_register:PROC
EXTRN	z900_store_channel_report_word:PROC
EXTRN	s370_load_and_test_float_long_reg:PROC
EXTRN	s390_test_addressing_mode:PROC
EXTRN	s390_store_facility_list_extended:PROC
EXTRN	z900_store_subchannel:PROC
EXTRN	s370_load_and_test_float_short_reg:PROC
EXTRN	z900_test_pending_interruption:PROC
EXTRN	s370_load_complement_float_long_reg:PROC
EXTRN	s390_pack_ascii:PROC
EXTRN	z900_test_subchannel:PROC
EXTRN	s370_load_complement_float_short_reg:PROC
EXTRN	s390_pack_unicode:PROC
EXTRN	z900_checksum:PROC
EXTRN	s370_load_float_long:PROC
EXTRN	s390_unpack_ascii:PROC
EXTRN	z900_channel_subsystem_call:PROC
EXTRN	s370_load_float_long_reg:PROC
EXTRN	s390_unpack_unicode:PROC
EXTRN	z900_cmpsc_2012:PROC
EXTRN	s370_load_float_short:PROC
EXTRN	s390_test_decimal:PROC
EXTRN	s370_load_float_short_reg:PROC
EXTRN	z900_compare_logical_long_extended:PROC
EXTRN	s390_translate_two_to_two:PROC
EXTRN	s370_load_negative_float_long_reg:PROC
EXTRN	z900_move_long_extended:PROC
EXTRN	s390_translate_two_to_one:PROC
EXTRN	s370_load_negative_float_short_reg:PROC
EXTRN	s390_translate_one_to_two:PROC
EXTRN	z900_load_page_table_entry_address:PROC
EXTRN	z900_extract_primary_asn:PROC
EXTRN	s370_load_positive_float_long_reg:PROC
EXTRN	s390_translate_one_to_one:PROC
EXTRN	z900_extract_secondary_asn:PROC
EXTRN	s370_load_positive_float_short_reg:PROC
EXTRN	s390_move_long_unicode:PROC
EXTRN	z900_insert_address_space_control:PROC
EXTRN	s370_load_rounded_float_long_reg:PROC
EXTRN	s390_compare_logical_long_unicode:PROC
EXTRN	z900_insert_virtual_storage_key:PROC
EXTRN	s370_load_rounded_float_short_reg:PROC
EXTRN	s370_multiply_float_ext_reg:PROC
EXTRN	z900_load_address_space_parameters:PROC
EXTRN	s370_multiply_float_long:PROC
EXTRN	z900_move_to_primary:PROC
EXTRN	s370_multiply_float_long_reg:PROC
EXTRN	z900_move_to_secondary:PROC
EXTRN	s370_multiply_float_long_to_ext:PROC
EXTRN	z900_move_with_key:PROC
EXTRN	z900_program_call:PROC
EXTRN	s370_multiply_float_long_to_ext_reg:PROC
EXTRN	s390_multiply_add_float_short_reg:PROC
EXTRN	z900_program_transfer:PROC
EXTRN	s370_multiply_float_short_to_long:PROC
EXTRN	s390_multiply_add_float_long_reg:PROC
EXTRN	z900_set_address_space_control:PROC
EXTRN	s370_multiply_float_short_to_long_reg:PROC
EXTRN	s390_multiply_add_float_short:PROC
EXTRN	z900_set_secondary_asn:PROC
EXTRN	s370_store_float_long:PROC
EXTRN	s390_multiply_add_float_long:PROC
EXTRN	z900_inter_user_communication_vehicle:PROC
EXTRN	s370_store_float_short:PROC
EXTRN	s390_multiply_subtract_float_short_reg:PROC
EXTRN	z900_page_in:PROC
EXTRN	s370_subtract_float_ext_reg:PROC
EXTRN	s390_multiply_subtract_float_long_reg:PROC
EXTRN	z900_page_out:PROC
EXTRN	s370_subtract_float_long:PROC
EXTRN	s390_multiply_subtract_float_short:PROC
EXTRN	z900_insert_storage_key_extended:PROC
EXTRN	s370_subtract_float_long_reg:PROC
EXTRN	s390_multiply_subtract_float_long:PROC
EXTRN	s390_purge_accesslist_lookaside_buffer:PROC
EXTRN	z900_reset_reference_bit_extended:PROC
EXTRN	s370_subtract_float_short:PROC
EXTRN	s390_test_access:PROC
EXTRN	z900_set_storage_key_extended:PROC
EXTRN	s370_subtract_float_short_reg:PROC
EXTRN	s390_copy_access:PROC
EXTRN	s370_subtract_unnormal_float_long:PROC
EXTRN	z900_set_clock_programmable_field:PROC
EXTRN	s390_extract_access_register:PROC
EXTRN	z900_store_clock_extended:PROC
EXTRN	s370_subtract_unnormal_float_long_reg:PROC
EXTRN	z900_convert_utf16_to_utf8:PROC
EXTRN	s370_subtract_unnormal_float_short:PROC
EXTRN	s390_load_access_multiple:PROC
EXTRN	s390_set_access_register:PROC
EXTRN	z900_convert_utf8_to_utf16:PROC
EXTRN	s370_subtract_unnormal_float_short_reg:PROC
EXTRN	z900_translate_extended:PROC
EXTRN	s390_store_access_multiple:PROC
EXTRN	s370_load_lengthened_float_short_to_long_reg:PROC
EXTRN	s390_branch_and_save_and_set_mode:PROC
EXTRN	s370_load_lengthened_float_long_to_ext_reg:PROC
EXTRN	z900_convert_bfp_long_to_float_long_reg:PROC
EXTRN	s390_branch_and_set_mode:PROC
EXTRN	s370_load_lengthened_float_short_to_ext_reg:PROC
EXTRN	z900_convert_bfp_short_to_float_long_reg:PROC
EXTRN	s370_squareroot_float_ext_reg:PROC
EXTRN	s390_add_bfp_ext_reg:PROC
EXTRN	z900_convert_float_long_to_bfp_long_reg:PROC
EXTRN	s370_multiply_float_short_reg:PROC
EXTRN	z900_convert_float_long_to_bfp_short_reg:PROC
EXTRN	s390_add_bfp_long:PROC
EXTRN	s390_add_bfp_long_reg:PROC
EXTRN	s370_load_positive_float_ext_reg:PROC
EXTRN	z900_load_float_ext_reg:PROC
EXTRN	s370_load_negative_float_ext_reg:PROC
EXTRN	z900_load_zero_float_short_reg:PROC
EXTRN	s390_add_bfp_short:PROC
EXTRN	s390_add_bfp_short_reg:PROC
EXTRN	s370_load_and_test_float_ext_reg:PROC
EXTRN	z900_load_zero_float_long_reg:PROC
EXTRN	s390_compare_and_signal_bfp_ext_reg:PROC
EXTRN	s370_load_complement_float_ext_reg:PROC
EXTRN	z900_load_zero_float_ext_reg:PROC
EXTRN	z900_add_float_ext_reg:PROC
EXTRN	s370_load_rounded_float_ext_to_short_reg:PROC
EXTRN	s390_compare_and_signal_bfp_long:PROC
EXTRN	z900_add_float_long:PROC
EXTRN	s390_compare_and_signal_bfp_long_reg:PROC
EXTRN	s370_load_fp_int_float_ext_reg:PROC
EXTRN	z900_add_float_long_reg:PROC
EXTRN	s370_compare_float_ext_reg:PROC
EXTRN	s390_compare_and_signal_bfp_short:PROC
EXTRN	z900_add_float_short:PROC
EXTRN	s390_compare_and_signal_bfp_short_reg:PROC
EXTRN	s370_load_fp_int_float_short_reg:PROC
EXTRN	z900_add_float_short_reg:PROC
EXTRN	s390_compare_bfp_ext_reg:PROC
EXTRN	s370_load_fp_int_float_long_reg:PROC
EXTRN	z900_add_unnormal_float_long:PROC
EXTRN	s370_convert_fixed_to_float_short_reg:PROC
EXTRN	s390_compare_bfp_long:PROC
EXTRN	z900_add_unnormal_float_long_reg:PROC
EXTRN	s390_compare_bfp_long_reg:PROC
EXTRN	s370_convert_fixed_to_float_long_reg:PROC
EXTRN	z900_add_unnormal_float_short:PROC
EXTRN	s370_convert_fixed_to_float_ext_reg:PROC
EXTRN	s390_compare_bfp_short:PROC
EXTRN	z900_add_unnormal_float_short_reg:PROC
EXTRN	s390_compare_bfp_short_reg:PROC
EXTRN	s370_convert_float_short_to_fixed_reg:PROC
EXTRN	z900_compare_float_long:PROC
EXTRN	s390_convert_bfp_ext_to_fix32_reg:PROC
EXTRN	s370_convert_float_long_to_fixed_reg:PROC
EXTRN	z900_compare_float_long_reg:PROC
EXTRN	s370_convert_float_ext_to_fixed_reg:PROC
EXTRN	z900_compare_float_short:PROC
EXTRN	s390_convert_bfp_long_to_fix32_reg:PROC
EXTRN	s370_load_lengthened_float_short_to_long:PROC
EXTRN	z900_compare_float_short_reg:PROC
EXTRN	s370_load_lengthened_float_long_to_ext:PROC
EXTRN	z900_divide_float_ext_reg:PROC
EXTRN	s390_convert_bfp_short_to_fix32_reg:PROC
EXTRN	s370_load_lengthened_float_short_to_ext:PROC
EXTRN	z900_divide_float_long:PROC
EXTRN	s370_squareroot_float_short:PROC
EXTRN	z900_divide_float_long_reg:PROC
EXTRN	s390_convert_fix32_to_bfp_ext_reg:PROC
EXTRN	s370_squareroot_float_long:PROC
EXTRN	z900_divide_float_short:PROC
EXTRN	s390_convert_fix32_to_bfp_long_reg:PROC
EXTRN	s370_multiply_float_short:PROC
EXTRN	z900_divide_float_short_reg:PROC
EXTRN	s370_add_halfword_immediate:PROC
EXTRN	s390_convert_fix32_to_bfp_short_reg:PROC
EXTRN	z900_halve_float_long_reg:PROC
EXTRN	s370_branch_relative_and_save:PROC
EXTRN	z900_halve_float_short_reg:PROC
EXTRN	s370_branch_relative_on_condition:PROC
EXTRN	z900_load_and_test_float_long_reg:PROC
EXTRN	s370_branch_relative_on_count:PROC
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
_DATA	SEGMENT
$SG212992 DB	'SLR', 00H, '1F48', 00H
	ORG $+7
$SG212993 DB	'SLR', 00H, '1F49', 00H
	ORG $+7
$SG212994 DB	'SLR', 00H, '1F4A', 00H
	ORG $+7
$SG212995 DB	'SLR', 00H, '1F4B', 00H
	ORG $+7
$SG212996 DB	'SLR', 00H, '1F4C', 00H
	ORG $+7
$SG212997 DB	'SLR', 00H, '1F4D', 00H
	ORG $+7
$SG212998 DB	'SLR', 00H, '1F4E', 00H
	ORG $+7
$SG212999 DB	'SLR', 00H, '1F4F', 00H
	ORG $+7
$SG213000 DB	'SLR', 00H, '1F50', 00H
	ORG $+7
$SG213001 DB	'SLR', 00H, '1F51', 00H
	ORG $+7
$SG213002 DB	'SLR', 00H, '1F52', 00H
	ORG $+7
$SG213003 DB	'SLR', 00H, '1F53', 00H
	ORG $+7
$SG213004 DB	'SLR', 00H, '1F54', 00H
	ORG $+7
$SG213005 DB	'SLR', 00H, '1F55', 00H
	ORG $+7
$SG213006 DB	'SLR', 00H, '1F56', 00H
	ORG $+7
$SG213007 DB	'SLR', 00H, '1F57', 00H
	ORG $+7
$SG213008 DB	'SLR', 00H, '1F58', 00H
	ORG $+7
$SG213009 DB	'SLR', 00H, '1F59', 00H
	ORG $+7
$SG213010 DB	'SLR', 00H, '1F5A', 00H
	ORG $+7
$SG213011 DB	'SLR', 00H, '1F5B', 00H
	ORG $+7
$SG213012 DB	'SLR', 00H, '1F5C', 00H
	ORG $+7
$SG213013 DB	'SLR', 00H, '1F5D', 00H
	ORG $+7
$SG213014 DB	'SLR', 00H, '1F5E', 00H
	ORG $+7
$SG213015 DB	'SLR', 00H, '1F5F', 00H
	ORG $+7
$SG213016 DB	'SLR', 00H, '1F60', 00H
	ORG $+7
$SG213017 DB	'SLR', 00H, '1F61', 00H
	ORG $+7
$SG213018 DB	'SLR', 00H, '1F62', 00H
	ORG $+7
$SG213019 DB	'SLR', 00H, '1F63', 00H
	ORG $+7
$SG213020 DB	'SLR', 00H, '1F64', 00H
	ORG $+7
$SG213021 DB	'SLR', 00H, '1F65', 00H
	ORG $+7
$SG213022 DB	'SLR', 00H, '1F66', 00H
	ORG $+7
$SG213023 DB	'SLR', 00H, '1F67', 00H
	ORG $+7
$SG213024 DB	'SLR', 00H, '1F68', 00H
	ORG $+7
$SG213025 DB	'SLR', 00H, '1F69', 00H
	ORG $+7
$SG213026 DB	'SLR', 00H, '1F6A', 00H
	ORG $+7
$SG213027 DB	'SLR', 00H, '1F6B', 00H
	ORG $+7
$SG213028 DB	'SLR', 00H, '1F6C', 00H
	ORG $+7
$SG213029 DB	'SLR', 00H, '1F6D', 00H
	ORG $+7
$SG213030 DB	'SLR', 00H, '1F6E', 00H
	ORG $+7
$SG213031 DB	'SLR', 00H, '1F6F', 00H
	ORG $+7
$SG213032 DB	'SLR', 00H, '1F70', 00H
	ORG $+7
$SG213033 DB	'SLR', 00H, '1F71', 00H
	ORG $+7
$SG213034 DB	'SLR', 00H, '1F72', 00H
	ORG $+7
$SG213035 DB	'SLR', 00H, '1F73', 00H
	ORG $+7
$SG213036 DB	'SLR', 00H, '1F74', 00H
	ORG $+7
$SG213037 DB	'SLR', 00H, '1F75', 00H
	ORG $+7
$SG213038 DB	'SLR', 00H, '1F76', 00H
	ORG $+7
$SG213039 DB	'SLR', 00H, '1F77', 00H
	ORG $+7
$SG213040 DB	'SLR', 00H, '1F78', 00H
	ORG $+7
$SG213041 DB	'SLR', 00H, '1F79', 00H
	ORG $+7
$SG213042 DB	'SLR', 00H, '1F7A', 00H
	ORG $+7
$SG213043 DB	'SLR', 00H, '1F7B', 00H
	ORG $+7
$SG213044 DB	'SLR', 00H, '1F7C', 00H
	ORG $+7
$SG213045 DB	'SLR', 00H, '1F7D', 00H
	ORG $+7
$SG213046 DB	'SLR', 00H, '1F7E', 00H
	ORG $+7
$SG213047 DB	'SLR', 00H, '1F7F', 00H
	ORG $+7
$SG213048 DB	'SLR', 00H, '1F80', 00H
	ORG $+7
$SG213049 DB	'SLR', 00H, '1F81', 00H
	ORG $+7
$SG213050 DB	'SLR', 00H, '1F82', 00H
	ORG $+7
$SG213051 DB	'SLR', 00H, '1F83', 00H
	ORG $+7
$SG213052 DB	'SLR', 00H, '1F84', 00H
	ORG $+7
$SG213053 DB	'SLR', 00H, '1F85', 00H
	ORG $+7
$SG213054 DB	'SLR', 00H, '1F86', 00H
	ORG $+7
$SG213055 DB	'SLR', 00H, '1F87', 00H
	ORG $+7
$SG213056 DB	'SLR', 00H, '1F88', 00H
	ORG $+7
$SG213057 DB	'SLR', 00H, '1F89', 00H
	ORG $+7
$SG213058 DB	'SLR', 00H, '1F8A', 00H
	ORG $+7
$SG213059 DB	'SLR', 00H, '1F8B', 00H
	ORG $+7
$SG213060 DB	'SLR', 00H, '1F8C', 00H
	ORG $+7
$SG213061 DB	'SLR', 00H, '1F8D', 00H
	ORG $+7
$SG213062 DB	'SLR', 00H, '1F8E', 00H
	ORG $+7
$SG213063 DB	'SLR', 00H, '1F8F', 00H
	ORG $+7
$SG213064 DB	'SLR', 00H, '1F90', 00H
	ORG $+7
$SG213065 DB	'SLR', 00H, '1F91', 00H
	ORG $+7
$SG213066 DB	'SLR', 00H, '1F92', 00H
	ORG $+7
$SG213067 DB	'SLR', 00H, '1F93', 00H
	ORG $+7
$SG213068 DB	'SLR', 00H, '1F94', 00H
	ORG $+7
$SG213069 DB	'SLR', 00H, '1F95', 00H
	ORG $+7
$SG213070 DB	'SLR', 00H, '1F96', 00H
	ORG $+7
$SG213071 DB	'SLR', 00H, '1F97', 00H
	ORG $+7
$SG213072 DB	'SLR', 00H, '1F98', 00H
	ORG $+7
$SG213073 DB	'SLR', 00H, '1F99', 00H
	ORG $+7
$SG213074 DB	'SLR', 00H, '1F9A', 00H
	ORG $+7
$SG213075 DB	'SLR', 00H, '1F9B', 00H
	ORG $+7
$SG213076 DB	'SLR', 00H, '1F9C', 00H
	ORG $+7
$SG213077 DB	'SLR', 00H, '1F9D', 00H
	ORG $+7
$SG213078 DB	'SLR', 00H, '1F9E', 00H
	ORG $+7
$SG213079 DB	'SLR', 00H, '1F9F', 00H
	ORG $+7
$SG213080 DB	'SLR', 00H, '1FA0', 00H
	ORG $+7
$SG213081 DB	'SLR', 00H, '1FA1', 00H
	ORG $+7
$SG213082 DB	'SLR', 00H, '1FA2', 00H
	ORG $+7
$SG213083 DB	'SLR', 00H, '1FA3', 00H
	ORG $+7
$SG213084 DB	'SLR', 00H, '1FA4', 00H
	ORG $+7
$SG213085 DB	'SLR', 00H, '1FA5', 00H
	ORG $+7
$SG213086 DB	'SLR', 00H, '1FA6', 00H
	ORG $+7
$SG213087 DB	'SLR', 00H, '1FA7', 00H
	ORG $+7
$SG213088 DB	'SLR', 00H, '1FA8', 00H
	ORG $+7
$SG213089 DB	'SLR', 00H, '1FA9', 00H
	ORG $+7
$SG213090 DB	'SLR', 00H, '1FAA', 00H
	ORG $+7
$SG213091 DB	'SLR', 00H, '1FAB', 00H
	ORG $+7
$SG213092 DB	'SLR', 00H, '1FAC', 00H
	ORG $+7
$SG213093 DB	'SLR', 00H, '1FAD', 00H
	ORG $+7
$SG213094 DB	'SLR', 00H, '1FAE', 00H
	ORG $+7
$SG213095 DB	'SLR', 00H, '1FAF', 00H
	ORG $+7
$SG213096 DB	'SLR', 00H, '1FB0', 00H
	ORG $+7
$SG213097 DB	'SLR', 00H, '1FB1', 00H
	ORG $+7
$SG213098 DB	'SLR', 00H, '1FB2', 00H
	ORG $+7
$SG213099 DB	'SLR', 00H, '1FB3', 00H
	ORG $+7
$SG213100 DB	'SLR', 00H, '1FB4', 00H
	ORG $+7
$SG213101 DB	'SLR', 00H, '1FB5', 00H
	ORG $+7
$SG213102 DB	'SLR', 00H, '1FB6', 00H
	ORG $+7
$SG213103 DB	'SLR', 00H, '1FB7', 00H
	ORG $+7
$SG213104 DB	'SLR', 00H, '1FB8', 00H
	ORG $+7
$SG213105 DB	'SLR', 00H, '1FB9', 00H
	ORG $+7
$SG213106 DB	'SLR', 00H, '1FBA', 00H
	ORG $+7
$SG213107 DB	'SLR', 00H, '1FBB', 00H
	ORG $+7
$SG213108 DB	'SLR', 00H, '1FBC', 00H
	ORG $+7
$SG213109 DB	'SLR', 00H, '1FBD', 00H
	ORG $+7
$SG213110 DB	'SLR', 00H, '1FBE', 00H
	ORG $+7
$SG213111 DB	'SLR', 00H, '1FBF', 00H
	ORG $+7
$SG213112 DB	'SLR', 00H, '1FC0', 00H
	ORG $+7
$SG213113 DB	'SLR', 00H, '1FC1', 00H
	ORG $+7
$SG213114 DB	'SLR', 00H, '1FC2', 00H
	ORG $+7
$SG213115 DB	'SLR', 00H, '1FC3', 00H
	ORG $+7
$SG213116 DB	'SLR', 00H, '1FC4', 00H
	ORG $+7
$SG213117 DB	'SLR', 00H, '1FC5', 00H
	ORG $+7
$SG213118 DB	'SLR', 00H, '1FC6', 00H
	ORG $+7
$SG213119 DB	'SLR', 00H, '1FC7', 00H
	ORG $+7
$SG213120 DB	'SLR', 00H, '1FC8', 00H
	ORG $+7
$SG213121 DB	'SLR', 00H, '1FC9', 00H
	ORG $+7
$SG213122 DB	'SLR', 00H, '1FCA', 00H
	ORG $+7
$SG213123 DB	'SLR', 00H, '1FCB', 00H
	ORG $+7
$SG213124 DB	'SLR', 00H, '1FCC', 00H
	ORG $+7
$SG213125 DB	'SLR', 00H, '1FCD', 00H
	ORG $+7
$SG213126 DB	'SLR', 00H, '1FCE', 00H
	ORG $+7
$SG213127 DB	'SLR', 00H, '1FCF', 00H
	ORG $+7
$SG213128 DB	'SLR', 00H, '1FD0', 00H
	ORG $+7
$SG213129 DB	'SLR', 00H, '1FD1', 00H
	ORG $+7
$SG213130 DB	'SLR', 00H, '1FD2', 00H
	ORG $+7
$SG213131 DB	'SLR', 00H, '1FD3', 00H
	ORG $+7
$SG213132 DB	'SLR', 00H, '1FD4', 00H
	ORG $+7
$SG213133 DB	'SLR', 00H, '1FD5', 00H
	ORG $+7
$SG213134 DB	'SLR', 00H, '1FD6', 00H
	ORG $+7
$SG213135 DB	'SLR', 00H, '1FD7', 00H
	ORG $+7
$SG213136 DB	'SLR', 00H, '1FD8', 00H
	ORG $+7
$SG213137 DB	'SLR', 00H, '1FD9', 00H
	ORG $+7
$SG213138 DB	'SLR', 00H, '1FDA', 00H
	ORG $+7
$SG213139 DB	'SLR', 00H, '1FDB', 00H
	ORG $+7
$SG213140 DB	'SLR', 00H, '1FDC', 00H
	ORG $+7
$SG213141 DB	'SLR', 00H, '1FDD', 00H
	ORG $+7
$SG213142 DB	'SLR', 00H, '1FDE', 00H
	ORG $+7
$SG213143 DB	'SLR', 00H, '1FDF', 00H
	ORG $+7
$SG213144 DB	'SLR', 00H, '1FE0', 00H
	ORG $+7
$SG213145 DB	'SLR', 00H, '1FE1', 00H
	ORG $+7
$SG213146 DB	'SLR', 00H, '1FE2', 00H
	ORG $+7
$SG213147 DB	'SLR', 00H, '1FE3', 00H
	ORG $+7
$SG213148 DB	'SLR', 00H, '1FE4', 00H
	ORG $+7
$SG213149 DB	'SLR', 00H, '1FE5', 00H
	ORG $+7
$SG213150 DB	'SLR', 00H, '1FE6', 00H
	ORG $+7
$SG213151 DB	'SLR', 00H, '1FE7', 00H
	ORG $+7
$SG213152 DB	'SLR', 00H, '1FE8', 00H
	ORG $+7
$SG213153 DB	'SLR', 00H, '1FE9', 00H
	ORG $+7
$SG213154 DB	'SLR', 00H, '1FEA', 00H
	ORG $+7
$SG213155 DB	'SLR', 00H, '1FEB', 00H
	ORG $+7
$SG213156 DB	'SLR', 00H, '1FEC', 00H
	ORG $+7
$SG213157 DB	'SLR', 00H, '1FED', 00H
	ORG $+7
$SG213158 DB	'SLR', 00H, '1FEE', 00H
	ORG $+7
$SG213159 DB	'SLR', 00H, '1FEF', 00H
	ORG $+7
$SG213160 DB	'SLR', 00H, '1FF0', 00H
	ORG $+7
$SG213161 DB	'SLR', 00H, '1FF1', 00H
	ORG $+7
$SG213162 DB	'SLR', 00H, '1FF2', 00H
	ORG $+7
$SG213163 DB	'SLR', 00H, '1FF3', 00H
	ORG $+7
$SG213164 DB	'SLR', 00H, '1FF4', 00H
	ORG $+7
$SG213165 DB	'SLR', 00H, '1FF5', 00H
	ORG $+7
$SG213166 DB	'SLR', 00H, '1FF6', 00H
	ORG $+7
$SG213167 DB	'SLR', 00H, '1FF7', 00H
	ORG $+7
$SG213168 DB	'SLR', 00H, '1FF8', 00H
	ORG $+7
$SG213169 DB	'SLR', 00H, '1FF9', 00H
	ORG $+7
$SG213170 DB	'SLR', 00H, '1FFA', 00H
	ORG $+7
$SG213171 DB	'SLR', 00H, '1FFB', 00H
	ORG $+7
$SG213172 DB	'SLR', 00H, '1FFC', 00H
	ORG $+7
$SG213173 DB	'SLR', 00H, '1FFD', 00H
	ORG $+7
$SG213174 DB	'SLR', 00H, '1FFE', 00H
	ORG $+7
$SG213175 DB	'SLR', 00H, '1FFF', 00H
	ORG $+7
$SG213208 DB	'LA', 00H, '4100', 00H
$SG213209 DB	'LA', 00H, '4110', 00H
$SG213210 DB	'LA', 00H, '4120', 00H
$SG213211 DB	'LA', 00H, '4130', 00H
$SG213212 DB	'LA', 00H, '4140', 00H
$SG213213 DB	'LA', 00H, '4150', 00H
$SG213214 DB	'LA', 00H, '4160', 00H
$SG213215 DB	'LA', 00H, '4170', 00H
$SG213216 DB	'LA', 00H, '4180', 00H
$SG213217 DB	'LA', 00H, '4190', 00H
$SG213218 DB	'LA', 00H, '41A0', 00H
$SG213219 DB	'LA', 00H, '41B0', 00H
$SG213220 DB	'LA', 00H, '41C0', 00H
$SG213221 DB	'LA', 00H, '41D0', 00H
$SG213222 DB	'LA', 00H, '41E0', 00H
$SG213223 DB	'LA', 00H, '41F0', 00H
$SG213256 DB	'BC', 00H, 'nop4', 00H
$SG213257 DB	'BC', 00H, '4710', 00H
$SG213258 DB	'BC', 00H, '4720', 00H
$SG213259 DB	'BC', 00H, '4730', 00H
$SG213260 DB	'BC', 00H, '4740', 00H
$SG213261 DB	'BC', 00H, '4750', 00H
$SG213262 DB	'BC', 00H, '47_0', 00H
$SG213263 DB	'BC', 00H, '4770', 00H
$SG213264 DB	'BC', 00H, '4780', 00H
$SG213265 DB	'BC', 00H, '47_0', 00H
$SG213266 DB	'BC', 00H, '47A0', 00H
$SG213267 DB	'BC', 00H, '47B0', 00H
$SG213268 DB	'BC', 00H, '47C0', 00H
$SG213269 DB	'BC', 00H, '47D0', 00H
$SG213270 DB	'BC', 00H, '47E0', 00H
$SG213271 DB	'BC', 00H, '47F0', 00H
$SG213304 DB	'ST', 00H, '5000', 00H
$SG213305 DB	'ST', 00H, '5010', 00H
$SG213306 DB	'ST', 00H, '5020', 00H
$SG213307 DB	'ST', 00H, '5030', 00H
$SG213308 DB	'ST', 00H, '5040', 00H
$SG213309 DB	'ST', 00H, '5050', 00H
$SG213310 DB	'ST', 00H, '5060', 00H
$SG213311 DB	'ST', 00H, '5070', 00H
$SG213312 DB	'ST', 00H, '5080', 00H
$SG213313 DB	'ST', 00H, '5090', 00H
$SG213314 DB	'ST', 00H, '50A0', 00H
$SG213315 DB	'ST', 00H, '50B0', 00H
$SG213316 DB	'ST', 00H, '50C0', 00H
$SG213317 DB	'ST', 00H, '50D0', 00H
$SG213318 DB	'ST', 00H, '50E0', 00H
$SG213319 DB	'ST', 00H, '50F0', 00H
$SG213352 DB	'CL', 00H, '5500', 00H
$SG213353 DB	'CL', 00H, '5510', 00H
$SG213354 DB	'CL', 00H, '5520', 00H
$SG213355 DB	'CL', 00H, '5530', 00H
$SG213356 DB	'CL', 00H, '5540', 00H
$SG213357 DB	'CL', 00H, '5550', 00H
$SG213358 DB	'CL', 00H, '5560', 00H
$SG213359 DB	'CL', 00H, '5570', 00H
$SG213360 DB	'CL', 00H, '5580', 00H
$SG213361 DB	'CL', 00H, '5590', 00H
$SG213362 DB	'CL', 00H, '55A0', 00H
$SG213363 DB	'CL', 00H, '55B0', 00H
$SG213364 DB	'CL', 00H, '55C0', 00H
$SG213365 DB	'CL', 00H, '55D0', 00H
$SG213366 DB	'CL', 00H, '55E0', 00H
$SG213367 DB	'CL', 00H, '55F0', 00H
$SG197005 DB	'LBEAR', 00H, 'load_bear', 00H
$SG197006 DB	'STBEAR', 00H, 'store_bear', 00H
	ORG $+6
$SG197007 DB	'STIDP', 00H, 'store_cpu_id', 00H
	ORG $+5
$SG197008 DB	'STIDC', 00H, 'store_channel_id', 00H
	ORG $+1
$SG197009 DB	'SCK', 00H, 'set_clock', 00H
	ORG $+2
$SG197010 DB	'STCK', 00H, 'store_clock', 00H
	ORG $+7
$SG197011 DB	'SCKC', 00H, 'set_clock_comparator', 00H
	ORG $+6
$SG197012 DB	'STCKC', 00H, 'store_clock_comparator', 00H
	ORG $+3
$SG197013 DB	'SPT', 00H, 'set_cpu_timer', 00H
	ORG $+6
$SG197014 DB	'STPT', 00H, 'store_cpu_timer', 00H
	ORG $+3
$SG197015 DB	'SPKA', 00H, 'set_psw_key_from_address', 00H
	ORG $+2
$SG213400 DB	'L', 00H, '5800', 00H
	ORG $+1
$SG197016 DB	'IPK', 00H, 'insert_psw_key', 00H
	ORG $+1
$SG213401 DB	'L', 00H, '5810', 00H
	ORG $+5
$SG197017 DB	'?????', 00H, '?', 00H
$SG213402 DB	'L', 00H, '5820', 00H
	ORG $+1
$SG197018 DB	'PTLB', 00H, 'purge_translation_lookaside_buffer', 00H
$SG213403 DB	'L', 00H, '5830', 00H
	ORG $+1
$SG197019 DB	'?????', 00H, '?', 00H
$SG213404 DB	'L', 00H, '5840', 00H
	ORG $+1
$SG197020 DB	'?????', 00H, '?', 00H
$SG213405 DB	'L', 00H, '5850', 00H
	ORG $+1
$SG197021 DB	'SPX', 00H, 'set_prefix', 00H
	ORG $+1
$SG213406 DB	'L', 00H, '5860', 00H
	ORG $+1
$SG197022 DB	'STPX', 00H, 'store_prefix', 00H
	ORG $+2
$SG213407 DB	'L', 00H, '5870', 00H
	ORG $+5
$SG197023 DB	'STAP', 00H, 'store_cpu_address', 00H
	ORG $+1
$SG213408 DB	'L', 00H, '5880', 00H
	ORG $+1
$SG197024 DB	'RRB', 00H, 'reset_reference_bit', 00H
$SG213409 DB	'L', 00H, '5890', 00H
	ORG $+1
$SG197025 DB	'SIE', 00H, 'start_interpretive_execution', 00H
	ORG $+3
$SG213410 DB	'L', 00H, '58A0', 00H
	ORG $+5
$SG197026 DB	'?????', 00H, '?', 00H
$SG213411 DB	'L', 00H, '58B0', 00H
	ORG $+1
$SG197027 DB	'?????', 00H, '?', 00H
$SG213412 DB	'L', 00H, '58C0', 00H
	ORG $+1
$SG197028 DB	'?????', 00H, '?', 00H
$SG213413 DB	'L', 00H, '58D0', 00H
	ORG $+1
$SG197029 DB	'PC', 00H, 'program_call', 00H
$SG213414 DB	'L', 00H, '58E0', 00H
	ORG $+1
$SG197030 DB	'SAC', 00H, 'set_address_space_control', 00H
	ORG $+2
$SG213415 DB	'L', 00H, '58F0', 00H
	ORG $+1
$SG197031 DB	'CFC', 00H, 'compare_and_form_codeword', 00H
	ORG $+2
$SG197032 DB	'?????', 00H, '?', 00H
$SG197033 DB	'?????', 00H, '?', 00H
$SG197034 DB	'?????', 00H, '?', 00H
$SG197035 DB	'?????', 00H, '?', 00H
$SG197036 DB	'?????', 00H, '?', 00H
$SG197037 DB	'SERVC', 00H, 'service_call', 00H
	ORG $+5
$SG197038 DB	'IPTE', 00H, 'invalidate_page_table_entry', 00H
	ORG $+7
$SG197039 DB	'IPM', 00H, 'insert_program_mask', 00H
$SG197040 DB	'IVSK', 00H, 'insert_virtual_storage_key', 00H
$SG197041 DB	'IAC', 00H, 'insert_address_space_control', 00H
	ORG $+7
$SG197042 DB	'SSAR', 00H, 'set_secondary_asn', 00H
	ORG $+1
$SG197043 DB	'EPAR', 00H, 'extract_primary_asn', 00H
	ORG $+7
$SG197044 DB	'ESAR', 00H, 'extract_secondary_asn', 00H
	ORG $+5
$SG197045 DB	'PT', 00H, 'program_transfer', 00H
	ORG $+4
$SG197046 DB	'ISKE', 00H, 'insert_storage_key_extended', 00H
	ORG $+7
$SG197047 DB	'RRBE', 00H, 'reset_reference_bit_extended', 00H
	ORG $+6
$SG213432 DB	'TM', 00H, '9180', 00H
$SG205240 DB	'?????', 00H, '?', 00H
$SG197048 DB	'SSKE', 00H, 'set_storage_key_extended', 00H
	ORG $+2
$SG213433 DB	'TM', 00H, '9140', 00H
$SG205241 DB	'?????', 00H, '?', 00H
$SG197049 DB	'TB', 00H, 'test_block', 00H
	ORG $+2
$SG213434 DB	'TM', 00H, '9120', 00H
$SG205242 DB	'?????', 00H, '?', 00H
$SG197050 DB	'DXR', 00H, 'divide_float_ext_reg', 00H
	ORG $+7
$SG213435 DB	'TM', 00H, '9110', 00H
$SG205243 DB	'?????', 00H, '?', 00H
$SG197051 DB	'PGIN', 00H, 'page_in', 00H
	ORG $+3
$SG213436 DB	'TM', 00H, '9108', 00H
$SG205244 DB	'?????', 00H, '?', 00H
$SG197052 DB	'PGOUT', 00H, 'page_out', 00H
	ORG $+1
$SG213437 DB	'TM', 00H, '9104', 00H
$SG205245 DB	'?????', 00H, '?', 00H
$SG197053 DB	'CSCH', 00H, 'clear_subchannel', 00H
	ORG $+2
$SG213438 DB	'TM', 00H, '9102', 00H
$SG205246 DB	'VL', 00H, 'vector_load', 00H
	ORG $+1
$SG197054 DB	'HSCH', 00H, 'halt_subchannel', 00H
	ORG $+3
$SG213439 DB	'TM', 00H, '9101', 00H
$SG205247 DB	'?????', 00H, '?', 00H
$SG197055 DB	'MSCH', 00H, 'modify_subchannel', 00H
	ORG $+1
$SG205248 DB	'?????', 00H, '?', 00H
$SG197056 DB	'SSCH', 00H, 'start_subchannel', 00H
	ORG $+2
$SG205249 DB	'?????', 00H, '?', 00H
$SG197057 DB	'STSCH', 00H, 'store_subchannel', 00H
	ORG $+1
$SG205250 DB	'?????', 00H, '?', 00H
$SG197058 DB	'TSCH', 00H, 'test_subchannel', 00H
	ORG $+3
$SG205251 DB	'?????', 00H, '?', 00H
$SG197059 DB	'TPI', 00H, 'test_pending_interruption', 00H
	ORG $+2
$SG205252 DB	'?????', 00H, '?', 00H
$SG197060 DB	'SAL', 00H, 'set_address_limit', 00H
	ORG $+2
$SG205253 DB	'?????', 00H, '?', 00H
$SG197061 DB	'RSCH', 00H, 'resume_subchannel', 00H
	ORG $+1
$SG213446 DB	'ICM', 00H, 'BF_x', 00H
	ORG $+7
$SG205254 DB	'VST', 00H, 'vector_store', 00H
	ORG $+7
$SG197062 DB	'STCRW', 00H, 'store_channel_report_word', 00H
$SG213447 DB	'ICM', 00H, 'BF_7', 00H
	ORG $+7
$SG205255 DB	'?????', 00H, '?', 00H
$SG197063 DB	'STCPS', 00H, 'store_channel_path_status', 00H
$SG213448 DB	'ICM', 00H, 'BF_F', 00H
	ORG $+7
$SG205256 DB	'?????', 00H, '?', 00H
$SG197064 DB	'RCHP', 00H, 'reset_channel_path', 00H
$SG205257 DB	'?????', 00H, '?', 00H
$SG197065 DB	'SCHM', 00H, 'set_channel_monitor', 00H
	ORG $+7
$SG205258 DB	'?????', 00H, '?', 00H
$SG197066 DB	'STZP', 00H, 'store_zone_parameter', 00H
	ORG $+6
$SG205259 DB	'?????', 00H, '?', 00H
$SG197067 DB	'SZP', 00H, 'set_zone_parameter', 00H
	ORG $+1
$SG205260 DB	'?????', 00H, '?', 00H
$SG197068 DB	'TPZI', 00H, 'test_pending_zone_interrupt', 00H
	ORG $+7
$SG205261 DB	'?????', 00H, '?', 00H
$SG197069 DB	'BAKR', 00H, 'branch_and_stack', 00H
	ORG $+2
$SG205262 DB	'?????', 00H, '?', 00H
$SG197070 DB	'CKSM', 00H, 'checksum', 00H
	ORG $+2
$SG205263 DB	'?????', 00H, '?', 00H
$SG197071 DB	'Assist', 00H, 'add_frr', 00H
	ORG $+1
$SG205264 DB	'?????', 00H, '?', 00H
$SG197072 DB	'?????', 00H, '?', 00H
$SG205265 DB	'?????', 00H, '?', 00H
$SG197073 DB	'SQDR', 00H, 'squareroot_float_long_reg', 00H
	ORG $+1
$SG205266 DB	'?????', 00H, '?', 00H
$SG197074 DB	'SQER', 00H, 'squareroot_float_short_reg', 00H
$SG205267 DB	'?????', 00H, '?', 00H
$SG197075 DB	'STURA', 00H, 'store_using_real_address', 00H
	ORG $+1
$SG205268 DB	'?????', 00H, '?', 00H
$SG197076 DB	'MSTA', 00H, 'modify_stacked_state', 00H
	ORG $+6
$SG205269 DB	'?????', 00H, '?', 00H
$SG197077 DB	'PALB', 00H, 'purge_accesslist_lookaside_buffer', 00H
	ORG $+1
$SG205270 DB	'?????', 00H, '?', 00H
$SG197078 DB	'EREG', 00H, 'extract_stacked_registers', 00H
	ORG $+1
$SG205271 DB	'?????', 00H, '?', 00H
$SG197079 DB	'ESTA', 00H, 'extract_stacked_state', 00H
	ORG $+5
$SG205272 DB	'?????', 00H, '?', 00H
$SG197080 DB	'LURA', 00H, 'load_using_real_address', 00H
	ORG $+3
$SG205273 DB	'?????', 00H, '?', 00H
$SG197081 DB	'TAR', 00H, 'test_access', 00H
$SG205274 DB	'?????', 00H, '?', 00H
$SG197082 DB	'CPYA', 00H, 'copy_access', 00H
	ORG $+7
$SG205275 DB	'?????', 00H, '?', 00H
$SG197083 DB	'SAR', 00H, 'set_access_register', 00H
$SG205276 DB	'?????', 00H, '?', 00H
$SG197084 DB	'EAR', 00H, 'extract_access_register', 00H
	ORG $+4
$SG205277 DB	'?????', 00H, '?', 00H
$SG197085 DB	'CSP', 00H, 'compare_and_swap_and_purge', 00H
	ORG $+1
$SG205278 DB	'?????', 00H, '?', 00H
$SG197086 DB	'?????', 00H, '?', 00H
$SG205279 DB	'?????', 00H, '?', 00H
$SG197087 DB	'MSR', 00H, 'multiply_single_register', 00H
	ORG $+3
$SG205280 DB	'?????', 00H, '?', 00H
$SG197088 DB	'?????', 00H, '?', 00H
$SG205281 DB	'?????', 00H, '?', 00H
$SG197089 DB	'MVPG', 00H, 'move_page', 00H
	ORG $+1
$SG205282 DB	'?????', 00H, '?', 00H
$SG197090 DB	'MVST', 00H, 'move_string', 00H
	ORG $+7
$SG205283 DB	'?????', 00H, '?', 00H
$SG197091 DB	'STHYI', 00H, 'store_hypervisor_information', 00H
	ORG $+5
$SG205284 DB	'?????', 00H, '?', 00H
$SG197092 DB	'CUSE', 00H, 'compare_until_substring_equal', 00H
	ORG $+5
$SG205285 DB	'?????', 00H, '?', 00H
$SG197093 DB	'BSG', 00H, 'branch_in_subspace_group', 00H
	ORG $+3
$SG205286 DB	'?????', 00H, '?', 00H
$SG197094 DB	'IESBE', 00H, 'invalidate_expanded_storage_block_entry', 00H
	ORG $+2
$SG205287 DB	'?????', 00H, '?', 00H
$SG197095 DB	'BSA', 00H, 'branch_and_set_authority', 00H
	ORG $+3
$SG205288 DB	'?????', 00H, '?', 00H
$SG197096 DB	'?????', 00H, '?', 00H
$SG205289 DB	'?????', 00H, '?', 00H
$SG197097 DB	'?????', 00H, '?', 00H
$SG205290 DB	'?????', 00H, '?', 00H
$SG197098 DB	'CLST', 00H, 'compare_logical_string', 00H
	ORG $+4
$SG205291 DB	'?????', 00H, '?', 00H
$SG197099 DB	'SRST', 00H, 'search_string', 00H
	ORG $+5
$SG205292 DB	'?????', 00H, '?', 00H
$SG197100 DB	'CHSC', 00H, 'channel_subsystem_call', 00H
	ORG $+4
$SG205293 DB	'?????', 00H, '?', 00H
$SG197101 DB	'?????', 00H, '?', 00H
$SG205294 DB	'VLM', 00H, 'vector_load_multiple', 00H
	ORG $+7
$SG197102 DB	'?????', 00H, '?', 00H
$SG205295 DB	'?????', 00H, '?', 00H
$SG197103 DB	'LKPG', 00H, 'lock_page', 00H
	ORG $+1
$SG205296 DB	'?????', 00H, '?', 00H
$SG197104 DB	'CMPSC', 00H, 'cmpsc_2012', 00H
	ORG $+7
$SG205297 DB	'?????', 00H, '?', 00H
$SG197105 DB	'?????', 00H, '?', 00H
$SG205298 DB	'?????', 00H, '?', 00H
$SG197106 DB	'SVS', 00H, 'set_vector_summary', 00H
	ORG $+1
$SG205299 DB	'?????', 00H, '?', 00H
$SG197107 DB	'?????', 00H, '?', 00H
$SG205300 DB	'?????', 00H, '?', 00H
$SG197108 DB	'?????', 00H, '?', 00H
$SG205301 DB	'?????', 00H, '?', 00H
$SG197109 DB	'?????', 00H, '?', 00H
$SG205302 DB	'VSTM', 00H, 'vector_store_multiple', 00H
	ORG $+5
$SG197110 DB	'?????', 00H, '?', 00H
$SG205303 DB	'?????', 00H, '?', 00H
$SG197111 DB	'?????', 00H, '?', 00H
$SG205304 DB	'?????', 00H, '?', 00H
$SG197112 DB	'?????', 00H, '?', 00H
$SG205305 DB	'?????', 00H, '?', 00H
$SG197113 DB	'?????', 00H, '?', 00H
$SG205306 DB	'?????', 00H, '?', 00H
$SG197114 DB	'?????', 00H, '?', 00H
$SG205307 DB	'?????', 00H, '?', 00H
$SG197115 DB	'?????', 00H, '?', 00H
$SG205308 DB	'?????', 00H, '?', 00H
$SG197116 DB	'?????', 00H, '?', 00H
$SG205309 DB	'?????', 00H, '?', 00H
$SG197117 DB	'?????', 00H, '?', 00H
$SG205310 DB	'?????', 00H, '?', 00H
$SG197118 DB	'?????', 00H, '?', 00H
$SG205311 DB	'?????', 00H, '?', 00H
$SG197119 DB	'?????', 00H, '?', 00H
$SG205312 DB	'?????', 00H, '?', 00H
$SG197120 DB	'?????', 00H, '?', 00H
$SG205313 DB	'?????', 00H, '?', 00H
$SG197121 DB	'SIGA', 00H, 'signal_adapter', 00H
	ORG $+4
$SG205314 DB	'?????', 00H, '?', 00H
$SG197122 DB	'?????', 00H, '?', 00H
$SG205315 DB	'?????', 00H, '?', 00H
$SG197123 DB	'XSCH', 00H, 'cancel_subchannel', 00H
	ORG $+1
$SG205316 DB	'?????', 00H, '?', 00H
$SG197124 DB	'RP', 00H, 'resume_program', 00H
	ORG $+6
$SG205317 DB	'?????', 00H, '?', 00H
$SG197125 DB	'STCKE', 00H, 'store_clock_extended', 00H
	ORG $+5
$SG205318 DB	'?????', 00H, '?', 00H
$SG197126 DB	'SACF', 00H, 'set_address_space_control', 00H
	ORG $+1
$SG205319 DB	'?????', 00H, '?', 00H
$SG197127 DB	'?????', 00H, '?', 00H
$SG205320 DB	'?????', 00H, '?', 00H
$SG197128 DB	'?????', 00H, '?', 00H
$SG205321 DB	'?????', 00H, '?', 00H
$SG197129 DB	'STCKF', 00H, 'store_clock', 00H
	ORG $+6
$SG205322 DB	'?????', 00H, '?', 00H
$SG197130 DB	'STSI', 00H, 'store_system_information', 00H
	ORG $+2
$SG205323 DB	'?????', 00H, '?', 00H
$SG197131 DB	'?????', 00H, '?', 00H
$SG205324 DB	'?????', 00H, '?', 00H
$SG197132 DB	'?????', 00H, '?', 00H
$SG205325 DB	'?????', 00H, '?', 00H
$SG197133 DB	'LPP', 00H, 'load_program_parameter', 00H
	ORG $+5
$SG205326 DB	'?????', 00H, '?', 00H
$SG197134 DB	'?????', 00H, '?', 00H
$SG205327 DB	'?????', 00H, '?', 00H
$SG197135 DB	'?????', 00H, '?', 00H
$SG205328 DB	'?????', 00H, '?', 00H
$SG197136 DB	'?????', 00H, '?', 00H
$SG205329 DB	'?????', 00H, '?', 00H
$SG197137 DB	'?????', 00H, '?', 00H
$SG205330 DB	'?????', 00H, '?', 00H
$SG197138 DB	'?????', 00H, '?', 00H
$SG205331 DB	'?????', 00H, '?', 00H
$SG197139 DB	'?????', 00H, '?', 00H
$SG205332 DB	'?????', 00H, '?', 00H
$SG197140 DB	'?????', 00H, '?', 00H
$SG205333 DB	'?????', 00H, '?', 00H
$SG197141 DB	'?????', 00H, '?', 00H
$SG205334 DB	'?????', 00H, '?', 00H
$SG197142 DB	'?????', 00H, '?', 00H
$SG205335 DB	'?????', 00H, '?', 00H
$SG197143 DB	'?????', 00H, '?', 00H
$SG205336 DB	'?????', 00H, '?', 00H
$SG197144 DB	'?????', 00H, '?', 00H
$SG205337 DB	'?????', 00H, '?', 00H
$SG197145 DB	'?????', 00H, '?', 00H
$SG205338 DB	'?????', 00H, '?', 00H
$SG197146 DB	'?????', 00H, '?', 00H
$SG205339 DB	'?????', 00H, '?', 00H
$SG197147 DB	'?????', 00H, '?', 00H
$SG205340 DB	'?????', 00H, '?', 00H
$SG197148 DB	'?????', 00H, '?', 00H
$SG205341 DB	'?????', 00H, '?', 00H
$SG197149 DB	'?????', 00H, '?', 00H
$SG205342 DB	'?????', 00H, '?', 00H
$SG197150 DB	'?????', 00H, '?', 00H
$SG205343 DB	'?????', 00H, '?', 00H
$SG197151 DB	'?????', 00H, '?', 00H
$SG205344 DB	'?????', 00H, '?', 00H
$SG197152 DB	'?????', 00H, '?', 00H
$SG205345 DB	'?????', 00H, '?', 00H
$SG197153 DB	'?????', 00H, '?', 00H
$SG205346 DB	'?????', 00H, '?', 00H
$SG197154 DB	'?????', 00H, '?', 00H
$SG205347 DB	'?????', 00H, '?', 00H
$SG197155 DB	'?????', 00H, '?', 00H
$SG205348 DB	'?????', 00H, '?', 00H
$SG197156 DB	'?????', 00H, '?', 00H
$SG205349 DB	'?????', 00H, '?', 00H
$SG197157 DB	'?????', 00H, '?', 00H
$SG205350 DB	'?????', 00H, '?', 00H
$SG197158 DB	'SRNM', 00H, 'set_bfp_rounding_mode_2bit', 00H
$SG205351 DB	'?????', 00H, '?', 00H
$SG197159 DB	'?????', 00H, '?', 00H
$SG205352 DB	'?????', 00H, '?', 00H
$SG197160 DB	'?????', 00H, '?', 00H
$SG205353 DB	'?????', 00H, '?', 00H
$SG197161 DB	'STFPC', 00H, 'store_fpc', 00H
$SG205354 DB	'?????', 00H, '?', 00H
$SG197162 DB	'LFPC', 00H, 'load_fpc', 00H
	ORG $+2
$SG205355 DB	'?????', 00H, '?', 00H
$SG197163 DB	'?????', 00H, '?', 00H
$SG205356 DB	'?????', 00H, '?', 00H
$SG197164 DB	'?????', 00H, '?', 00H
$SG205357 DB	'?????', 00H, '?', 00H
$SG197165 DB	'?????', 00H, '?', 00H
$SG205358 DB	'?????', 00H, '?', 00H
$SG197166 DB	'?????', 00H, '?', 00H
$SG205359 DB	'?????', 00H, '?', 00H
$SG197167 DB	'?????', 00H, '?', 00H
$SG205360 DB	'?????', 00H, '?', 00H
$SG197168 DB	'?????', 00H, '?', 00H
$SG205361 DB	'?????', 00H, '?', 00H
$SG197169 DB	'?????', 00H, '?', 00H
$SG205362 DB	'?????', 00H, '?', 00H
$SG197170 DB	'TRE', 00H, 'translate_extended', 00H
	ORG $+1
$SG205363 DB	'?????', 00H, '?', 00H
$SG197171 DB	'CU21', 00H, 'convert_utf16_to_utf8', 00H
	ORG $+5
$SG205364 DB	'?????', 00H, '?', 00H
$SG197172 DB	'CU12', 00H, 'convert_utf8_to_utf16', 00H
	ORG $+5
$SG205365 DB	'?????', 00H, '?', 00H
$SG197173 DB	'?????', 00H, '?', 00H
$SG205366 DB	'?????', 00H, '?', 00H
$SG197174 DB	'?????', 00H, '?', 00H
$SG205367 DB	'?????', 00H, '?', 00H
$SG197175 DB	'?????', 00H, '?', 00H
$SG205368 DB	'?????', 00H, '?', 00H
$SG197176 DB	'?????', 00H, '?', 00H
$SG205369 DB	'?????', 00H, '?', 00H
$SG197177 DB	'?????', 00H, '?', 00H
$SG205370 DB	'?????', 00H, '?', 00H
$SG197178 DB	'?????', 00H, '?', 00H
$SG205371 DB	'?????', 00H, '?', 00H
$SG197179 DB	'?????', 00H, '?', 00H
$SG205372 DB	'?????', 00H, '?', 00H
$SG197180 DB	'?????', 00H, '?', 00H
$SG205373 DB	'?????', 00H, '?', 00H
$SG197181 DB	'STFLE', 00H, 'store_facility_list_extended', 00H
	ORG $+5
$SG205374 DB	'?????', 00H, '?', 00H
$SG197182 DB	'STFL', 00H, 'store_facility_list', 00H
	ORG $+7
$SG205375 DB	'?????', 00H, '?', 00H
$SG197183 DB	'LPSWE', 00H, 'load_program_status_word_extended', 00H
$SG205376 DB	'?????', 00H, '?', 00H
$SG197184 DB	'?????', 00H, '?', 00H
$SG205377 DB	'?????', 00H, '?', 00H
$SG197185 DB	'?????', 00H, '?', 00H
$SG205378 DB	'?????', 00H, '?', 00H
$SG197186 DB	'?????', 00H, '?', 00H
$SG205379 DB	'?????', 00H, '?', 00H
$SG197187 DB	'?????', 00H, '?', 00H
$SG205380 DB	'?????', 00H, '?', 00H
$SG197188 DB	'?????', 00H, '?', 00H
$SG205381 DB	'?????', 00H, '?', 00H
$SG197189 DB	'SRNMB', 00H, 'set_bfp_rounding_mode_3bit', 00H
	ORG $+7
$SG205382 DB	'?????', 00H, '?', 00H
$SG197190 DB	'SRNMT', 00H, 'set_dfp_rounding_mode', 00H
	ORG $+4
$SG205383 DB	'?????', 00H, '?', 00H
$SG197191 DB	'?????', 00H, '?', 00H
$SG205384 DB	'?????', 00H, '?', 00H
$SG197192 DB	'?????', 00H, '?', 00H
$SG205385 DB	'?????', 00H, '?', 00H
$SG197193 DB	'?????', 00H, '?', 00H
$SG205386 DB	'?????', 00H, '?', 00H
$SG197194 DB	'LFAS', 00H, 'load_fpc_and_signal', 00H
	ORG $+7
$SG205387 DB	'?????', 00H, '?', 00H
$SG197195 DB	'?????', 00H, '?', 00H
$SG205388 DB	'?????', 00H, '?', 00H
$SG197196 DB	'?????', 00H, '?', 00H
$SG205389 DB	'?????', 00H, '?', 00H
$SG197197 DB	'?????', 00H, '?', 00H
$SG205390 DB	'?????', 00H, '?', 00H
$SG197198 DB	'?????', 00H, '?', 00H
$SG205391 DB	'?????', 00H, '?', 00H
$SG197199 DB	'?????', 00H, '?', 00H
$SG205392 DB	'?????', 00H, '?', 00H
$SG197200 DB	'?????', 00H, '?', 00H
$SG205393 DB	'?????', 00H, '?', 00H
$SG197201 DB	'?????', 00H, '?', 00H
$SG205394 DB	'?????', 00H, '?', 00H
$SG197202 DB	'?????', 00H, '?', 00H
$SG205395 DB	'?????', 00H, '?', 00H
$SG197203 DB	'?????', 00H, '?', 00H
$SG205396 DB	'?????', 00H, '?', 00H
$SG197204 DB	'?????', 00H, '?', 00H
$SG205397 DB	'?????', 00H, '?', 00H
$SG197205 DB	'?????', 00H, '?', 00H
$SG205398 DB	'?????', 00H, '?', 00H
$SG197206 DB	'?????', 00H, '?', 00H
$SG205399 DB	'?????', 00H, '?', 00H
$SG197207 DB	'?????', 00H, '?', 00H
$SG205400 DB	'?????', 00H, '?', 00H
$SG197208 DB	'?????', 00H, '?', 00H
$SG205401 DB	'?????', 00H, '?', 00H
$SG197209 DB	'?????', 00H, '?', 00H
$SG205402 DB	'?????', 00H, '?', 00H
$SG197210 DB	'?????', 00H, '?', 00H
$SG205403 DB	'?????', 00H, '?', 00H
$SG197211 DB	'?????', 00H, '?', 00H
$SG205404 DB	'?????', 00H, '?', 00H
$SG197212 DB	'?????', 00H, '?', 00H
$SG205405 DB	'?????', 00H, '?', 00H
$SG197213 DB	'?????', 00H, '?', 00H
$SG205406 DB	'?????', 00H, '?', 00H
$SG197214 DB	'?????', 00H, '?', 00H
$SG205407 DB	'?????', 00H, '?', 00H
$SG197215 DB	'?????', 00H, '?', 00H
$SG205408 DB	'?????', 00H, '?', 00H
$SG197216 DB	'?????', 00H, '?', 00H
$SG205409 DB	'?????', 00H, '?', 00H
$SG197217 DB	'?????', 00H, '?', 00H
$SG205410 DB	'?????', 00H, '?', 00H
$SG197218 DB	'?????', 00H, '?', 00H
$SG205411 DB	'?????', 00H, '?', 00H
$SG197219 DB	'?????', 00H, '?', 00H
$SG205412 DB	'?????', 00H, '?', 00H
$SG197220 DB	'?????', 00H, '?', 00H
$SG205413 DB	'?????', 00H, '?', 00H
$SG197221 DB	'?????', 00H, '?', 00H
$SG205414 DB	'?????', 00H, '?', 00H
$SG197222 DB	'?????', 00H, '?', 00H
$SG205415 DB	'?????', 00H, '?', 00H
$SG197223 DB	'?????', 00H, '?', 00H
$SG205416 DB	'?????', 00H, '?', 00H
$SG197224 DB	'?????', 00H, '?', 00H
$SG205417 DB	'?????', 00H, '?', 00H
$SG197225 DB	'?????', 00H, '?', 00H
$SG205418 DB	'?????', 00H, '?', 00H
$SG197226 DB	'?????', 00H, '?', 00H
$SG205419 DB	'?????', 00H, '?', 00H
$SG197227 DB	'?????', 00H, '?', 00H
$SG205420 DB	'?????', 00H, '?', 00H
$SG197228 DB	'?????', 00H, '?', 00H
$SG205421 DB	'?????', 00H, '?', 00H
$SG197229 DB	'?????', 00H, '?', 00H
$SG205422 DB	'?????', 00H, '?', 00H
$SG197230 DB	'?????', 00H, '?', 00H
$SG205423 DB	'?????', 00H, '?', 00H
$SG197231 DB	'?????', 00H, '?', 00H
$SG205424 DB	'?????', 00H, '?', 00H
$SG197232 DB	'?????', 00H, '?', 00H
$SG205425 DB	'?????', 00H, '?', 00H
$SG197233 DB	'?????', 00H, '?', 00H
$SG205426 DB	'?????', 00H, '?', 00H
$SG197234 DB	'?????', 00H, '?', 00H
$SG205427 DB	'?????', 00H, '?', 00H
$SG197235 DB	'?????', 00H, '?', 00H
$SG205428 DB	'?????', 00H, '?', 00H
$SG197236 DB	'?????', 00H, '?', 00H
$SG205429 DB	'?????', 00H, '?', 00H
$SG197237 DB	'PPA', 00H, 'perform_processor_assist', 00H
	ORG $+3
$SG205430 DB	'?????', 00H, '?', 00H
$SG197238 DB	'?????', 00H, '?', 00H
$SG205431 DB	'?????', 00H, '?', 00H
$SG197239 DB	'?????', 00H, '?', 00H
$SG205432 DB	'?????', 00H, '?', 00H
$SG197240 DB	'?????', 00H, '?', 00H
$SG205433 DB	'?????', 00H, '?', 00H
$SG197241 DB	'ETND', 00H, 'extract_transaction_nesting_depth', 00H
	ORG $+1
$SG205434 DB	'?????', 00H, '?', 00H
$SG197242 DB	'?????', 00H, '?', 00H
$SG205435 DB	'?????', 00H, '?', 00H
$SG197243 DB	'?????', 00H, '?', 00H
$SG205436 DB	'?????', 00H, '?', 00H
$SG197244 DB	'?????', 00H, '?', 00H
$SG205437 DB	'?????', 00H, '?', 00H
$SG197245 DB	'IUCV', 00H, 'inter_user_communication_vehicle', 00H
	ORG $+2
$SG205438 DB	'?????', 00H, '?', 00H
$SG197246 DB	'?????', 00H, '?', 00H
$SG205439 DB	'?????', 00H, '?', 00H
$SG197247 DB	'?????', 00H, '?', 00H
$SG205440 DB	'?????', 00H, '?', 00H
$SG197248 DB	'?????', 00H, '?', 00H
$SG205441 DB	'?????', 00H, '?', 00H
$SG197249 DB	'?????', 00H, '?', 00H
$SG205442 DB	'?????', 00H, '?', 00H
$SG197250 DB	'?????', 00H, '?', 00H
$SG205443 DB	'?????', 00H, '?', 00H
$SG197251 DB	'?????', 00H, '?', 00H
$SG205444 DB	'?????', 00H, '?', 00H
$SG197252 DB	'?????', 00H, '?', 00H
$SG205445 DB	'?????', 00H, '?', 00H
$SG197253 DB	'TEND', 00H, 'transaction_end', 00H
	ORG $+3
$SG205446 DB	'?????', 00H, '?', 00H
$SG197254 DB	'?????', 00H, '?', 00H
$SG205447 DB	'?????', 00H, '?', 00H
$SG197255 DB	'NIAI', 00H, 'next_instruction_access_intent', 00H
	ORG $+4
$SG205448 DB	'?????', 00H, '?', 00H
$SG197256 DB	'?????', 00H, '?', 00H
$SG205449 DB	'?????', 00H, '?', 00H
$SG197257 DB	'TABORT', 00H, 'transaction_abort', 00H
	ORG $+7
$SG205450 DB	'?????', 00H, '?', 00H
$SG197258 DB	'?????', 00H, '?', 00H
$SG205451 DB	'?????', 00H, '?', 00H
$SG197259 DB	'?????', 00H, '?', 00H
$SG205452 DB	'?????', 00H, '?', 00H
$SG197260 DB	'TRAP4', 00H, 'trap4', 00H
	ORG $+4
$SG205453 DB	'?????', 00H, '?', 00H
$SG205454 DB	'?????', 00H, '?', 00H
$SG205455 DB	'?????', 00H, '?', 00H
$SG205456 DB	'?????', 00H, '?', 00H
$SG205457 DB	'?????', 00H, '?', 00H
$SG205458 DB	'?????', 00H, '?', 00H
$SG205459 DB	'?????', 00H, '?', 00H
$SG205460 DB	'?????', 00H, '?', 00H
$SG205461 DB	'?????', 00H, '?', 00H
$SG205462 DB	'?????', 00H, '?', 00H
$SG205463 DB	'?????', 00H, '?', 00H
$SG205464 DB	'?????', 00H, '?', 00H
$SG205465 DB	'?????', 00H, '?', 00H
$SG205466 DB	'?????', 00H, '?', 00H
$SG205467 DB	'?????', 00H, '?', 00H
$SG205468 DB	'?????', 00H, '?', 00H
$SG205469 DB	'?????', 00H, '?', 00H
$SG205470 DB	'?????', 00H, '?', 00H
$SG205471 DB	'?????', 00H, '?', 00H
$SG205472 DB	'?????', 00H, '?', 00H
$SG205473 DB	'?????', 00H, '?', 00H
$SG205474 DB	'?????', 00H, '?', 00H
$SG205475 DB	'?????', 00H, '?', 00H
$SG205476 DB	'?????', 00H, '?', 00H
$SG205477 DB	'?????', 00H, '?', 00H
$SG205478 DB	'?????', 00H, '?', 00H
$SG205479 DB	'?????', 00H, '?', 00H
$SG205480 DB	'?????', 00H, '?', 00H
$SG205481 DB	'?????', 00H, '?', 00H
$SG205482 DB	'?????', 00H, '?', 00H
$SG205483 DB	'?????', 00H, '?', 00H
$SG205484 DB	'?????', 00H, '?', 00H
$SG205485 DB	'?????', 00H, '?', 00H
$SG205486 DB	'?????', 00H, '?', 00H
$SG205487 DB	'?????', 00H, '?', 00H
$SG205488 DB	'?????', 00H, '?', 00H
$SG205489 DB	'?????', 00H, '?', 00H
$SG205490 DB	'?????', 00H, '?', 00H
$SG205491 DB	'?????', 00H, '?', 00H
$SG205492 DB	'?????', 00H, '?', 00H
$SG205493 DB	'?????', 00H, '?', 00H
$SG205494 DB	'?????', 00H, '?', 00H
$SG205495 DB	'?????', 00H, '?', 00H
$SG206008 DB	'?????', 00H, '?', 00H
$SG206009 DB	'?????', 00H, '?', 00H
$SG206010 DB	'?????', 00H, '?', 00H
$SG206011 DB	'?????', 00H, '?', 00H
$SG206012 DB	'LMG', 00H, 'load_multiple_long', 00H
	ORG $+1
$SG206013 DB	'?????', 00H, '?', 00H
$SG206014 DB	'?????', 00H, '?', 00H
$SG206015 DB	'?????', 00H, '?', 00H
$SG206016 DB	'?????', 00H, '?', 00H
$SG206017 DB	'?????', 00H, '?', 00H
$SG206018 DB	'SRAG', 00H, 'shift_right_single_long', 00H
	ORG $+3
$SG206019 DB	'SLAG', 00H, 'shift_left_single_long', 00H
	ORG $+4
$SG206020 DB	'SRLG', 00H, 'shift_right_single_logical_long', 00H
	ORG $+3
$SG206021 DB	'SLLG', 00H, 'shift_left_single_logical_long', 00H
	ORG $+4
$SG206022 DB	'?????', 00H, '?', 00H
$SG206023 DB	'TRACG', 00H, 'trace_long', 00H
	ORG $+7
$SG206024 DB	'?????', 00H, '?', 00H
$SG206025 DB	'?????', 00H, '?', 00H
$SG206026 DB	'?????', 00H, '?', 00H
$SG206027 DB	'?????', 00H, '?', 00H
$SG206028 DB	'CSY', 00H, 'compare_and_swap_y', 00H
	ORG $+1
$SG206029 DB	'?????', 00H, '?', 00H
$SG206030 DB	'?????', 00H, '?', 00H
$SG206031 DB	'?????', 00H, '?', 00H
$SG206032 DB	'?????', 00H, '?', 00H
$SG206033 DB	'?????', 00H, '?', 00H
$SG206034 DB	'?????', 00H, '?', 00H
$SG206035 DB	'?????', 00H, '?', 00H
$SG206036 DB	'RLLG', 00H, 'rotate_left_single_logical_long', 00H
	ORG $+3
$SG206037 DB	'RLL', 00H, 'rotate_left_single_logical', 00H
	ORG $+1
$SG206038 DB	'?????', 00H, '?', 00H
$SG206039 DB	'?????', 00H, '?', 00H
$SG206040 DB	'CLMH', 00H, 'compare_logical_characters_under_mask_high', 00H
$SG206041 DB	'CLMY', 00H, 'compare_logical_characters_under_mask_y', 00H
	ORG $+3
$SG206042 DB	'?????', 00H, '?', 00H
$SG206043 DB	'CLT', 00H, 'compare_logical_and_trap', 00H
	ORG $+3
$SG206044 DB	'STMG', 00H, 'store_multiple_long', 00H
	ORG $+7
$SG206045 DB	'STCTG', 00H, 'store_control_long', 00H
	ORG $+7
$SG206046 DB	'STMH', 00H, 'store_multiple_high', 00H
	ORG $+7
$SG206047 DB	'?????', 00H, '?', 00H
$SG206048 DB	'?????', 00H, '?', 00H
$SG206049 DB	'?????', 00H, '?', 00H
$SG206050 DB	'?????', 00H, '?', 00H
$SG206051 DB	'CLGT', 00H, 'compare_logical_and_trap_long', 00H
	ORG $+5
$SG206052 DB	'STCMH', 00H, 'store_characters_under_mask_high', 00H
	ORG $+1
$SG206053 DB	'STCMY', 00H, 'store_characters_under_mask_y', 00H
	ORG $+4
$SG206054 DB	'?????', 00H, '?', 00H
$SG206055 DB	'LCTLG', 00H, 'load_control_long', 00H
$SG206056 DB	'CSG', 00H, 'compare_and_swap_long', 00H
	ORG $+6
$SG206057 DB	'CDSY', 00H, 'compare_double_and_swap_y', 00H
	ORG $+1
$SG206058 DB	'?????', 00H, '?', 00H
$SG206059 DB	'?????', 00H, '?', 00H
$SG206060 DB	'?????', 00H, '?', 00H
$SG206061 DB	'?????', 00H, '?', 00H
$SG206062 DB	'?????', 00H, '?', 00H
$SG206063 DB	'?????', 00H, '?', 00H
$SG206064 DB	'?????', 00H, '?', 00H
$SG206065 DB	'?????', 00H, '?', 00H
$SG206066 DB	'?????', 00H, '?', 00H
$SG206067 DB	'?????', 00H, '?', 00H
$SG206068 DB	'?????', 00H, '?', 00H
$SG206069 DB	'?????', 00H, '?', 00H
$SG206070 DB	'CDSG', 00H, 'compare_double_and_swap_long', 00H
	ORG $+6
$SG206071 DB	'?????', 00H, '?', 00H
$SG206072 DB	'?????', 00H, '?', 00H
$SG206073 DB	'?????', 00H, '?', 00H
$SG206074 DB	'?????', 00H, '?', 00H
$SG206075 DB	'?????', 00H, '?', 00H
$SG206076 DB	'BXHG', 00H, 'branch_on_index_high_long', 00H
	ORG $+1
$SG206077 DB	'BXLEG', 00H, 'branch_on_index_low_or_equal_long', 00H
$SG206078 DB	'?????', 00H, '?', 00H
$SG206079 DB	'?????', 00H, '?', 00H
$SG206080 DB	'?????', 00H, '?', 00H
$SG206081 DB	'?????', 00H, '?', 00H
$SG206082 DB	'?????', 00H, '?', 00H
$SG206083 DB	'?????', 00H, '?', 00H
$SG206084 DB	'ECAG', 00H, 'extract_cpu_attribute', 00H
	ORG $+5
$SG206085 DB	'?????', 00H, '?', 00H
$SG206086 DB	'?????', 00H, '?', 00H
$SG206087 DB	'?????', 00H, '?', 00H
$SG206088 DB	'?????', 00H, '?', 00H
$SG206089 DB	'TMY', 00H, 'test_under_mask_y', 00H
	ORG $+2
$SG206090 DB	'MVIY', 00H, 'move_immediate_y', 00H
	ORG $+2
$SG206091 DB	'?????', 00H, '?', 00H
$SG206092 DB	'NIY', 00H, 'and_immediate_y', 00H
	ORG $+4
$SG206093 DB	'CLIY', 00H, 'compare_logical_immediate_y', 00H
	ORG $+7
$SG206094 DB	'OIY', 00H, 'or_immediate_y', 00H
	ORG $+5
$SG206095 DB	'XIY', 00H, 'exclusive_or_immediate_y', 00H
	ORG $+3
$SG206096 DB	'?????', 00H, '?', 00H
$SG206097 DB	'?????', 00H, '?', 00H
$SG206098 DB	'?????', 00H, '?', 00H
$SG206099 DB	'?????', 00H, '?', 00H
$SG206100 DB	'?????', 00H, '?', 00H
$SG206101 DB	'?????', 00H, '?', 00H
$SG206102 DB	'?????', 00H, '?', 00H
$SG206103 DB	'?????', 00H, '?', 00H
$SG206104 DB	'?????', 00H, '?', 00H
$SG206105 DB	'?????', 00H, '?', 00H
$SG206106 DB	'?????', 00H, '?', 00H
$SG206107 DB	'?????', 00H, '?', 00H
$SG206108 DB	'?????', 00H, '?', 00H
$SG206109 DB	'?????', 00H, '?', 00H
$SG206110 DB	'?????', 00H, '?', 00H
$SG206111 DB	'?????', 00H, '?', 00H
$SG206112 DB	'?????', 00H, '?', 00H
$SG206113 DB	'?????', 00H, '?', 00H
$SG206114 DB	'ASI', 00H, 'add_immediate_storage', 00H
	ORG $+6
$SG206115 DB	'?????', 00H, '?', 00H
$SG206116 DB	'?????', 00H, '?', 00H
$SG206117 DB	'?????', 00H, '?', 00H
$SG206118 DB	'ALSI', 00H, 'add_logical_with_signed_immediate', 00H
	ORG $+1
$SG206119 DB	'?????', 00H, '?', 00H
$SG206120 DB	'?????', 00H, '?', 00H
$SG206121 DB	'LPSWEY', 00H, 'load_program_status_word_extended_y', 00H
	ORG $+5
$SG206122 DB	'?????', 00H, '?', 00H
$SG206123 DB	'?????', 00H, '?', 00H
$SG206124 DB	'?????', 00H, '?', 00H
$SG206125 DB	'?????', 00H, '?', 00H
$SG206126 DB	'?????', 00H, '?', 00H
$SG206127 DB	'?????', 00H, '?', 00H
$SG206128 DB	'?????', 00H, '?', 00H
$SG206129 DB	'?????', 00H, '?', 00H
$SG206130 DB	'AGSI', 00H, 'add_immediate_long_storage', 00H
$SG206131 DB	'?????', 00H, '?', 00H
$SG206132 DB	'?????', 00H, '?', 00H
$SG206133 DB	'?????', 00H, '?', 00H
$SG206134 DB	'ALGSI', 00H, 'add_logical_with_signed_immediate_long', 00H
	ORG $+3
$SG206135 DB	'?????', 00H, '?', 00H
$SG206136 DB	'ICMH', 00H, 'insert_characters_under_mask_high', 00H
	ORG $+1
$SG206137 DB	'ICMY', 00H, 'insert_characters_under_mask_y', 00H
	ORG $+4
$SG206138 DB	'?????', 00H, '?', 00H
$SG206139 DB	'?????', 00H, '?', 00H
$SG206140 DB	'?????', 00H, '?', 00H
$SG206141 DB	'?????', 00H, '?', 00H
$SG206142 DB	'?????', 00H, '?', 00H
$SG206143 DB	'?????', 00H, '?', 00H
$SG206144 DB	'?????', 00H, '?', 00H
$SG206145 DB	'?????', 00H, '?', 00H
$SG206146 DB	'SQBS', 00H, 'set_queue_buffer_state', 00H
	ORG $+4
$SG206147 DB	'?????', 00H, '?', 00H
$SG206148 DB	'?????', 00H, '?', 00H
$SG206149 DB	'?????', 00H, '?', 00H
$SG206150 DB	'MVCLU', 00H, 'move_long_unicode', 00H
$SG206151 DB	'CLCLU', 00H, 'compare_logical_long_unicode', 00H
	ORG $+5
$SG206152 DB	'STMY', 00H, 'store_multiple_y', 00H
	ORG $+2
$SG206153 DB	'?????', 00H, '?', 00H
$SG206154 DB	'?????', 00H, '?', 00H
$SG206155 DB	'?????', 00H, '?', 00H
$SG206156 DB	'?????', 00H, '?', 00H
$SG206157 DB	'?????', 00H, '?', 00H
$SG206158 DB	'LMH', 00H, 'load_multiple_high', 00H
	ORG $+1
$SG206159 DB	'?????', 00H, '?', 00H
$SG206160 DB	'LMY', 00H, 'load_multiple_y', 00H
	ORG $+4
$SG206161 DB	'?????', 00H, '?', 00H
$SG206162 DB	'LAMY', 00H, 'load_access_multiple_y', 00H
	ORG $+4
$SG206163 DB	'STAMY', 00H, 'store_access_multiple_y', 00H
	ORG $+2
$SG206164 DB	'?????', 00H, '?', 00H
$SG206165 DB	'?????', 00H, '?', 00H
$SG206166 DB	'?????', 00H, '?', 00H
$SG206167 DB	'?????', 00H, '?', 00H
$SG206168 DB	'?????', 00H, '?', 00H
$SG206169 DB	'?????', 00H, '?', 00H
$SG206170 DB	'?????', 00H, '?', 00H
$SG206171 DB	'?????', 00H, '?', 00H
$SG206172 DB	'?????', 00H, '?', 00H
$SG206173 DB	'?????', 00H, '?', 00H
$SG206174 DB	'?????', 00H, '?', 00H
$SG206175 DB	'?????', 00H, '?', 00H
$SG206176 DB	'?????', 00H, '?', 00H
$SG206177 DB	'?????', 00H, '?', 00H
$SG206178 DB	'?????', 00H, '?', 00H
$SG206179 DB	'?????', 00H, '?', 00H
$SG206180 DB	'?????', 00H, '?', 00H
$SG206181 DB	'?????', 00H, '?', 00H
$SG206182 DB	'?????', 00H, '?', 00H
$SG206183 DB	'?????', 00H, '?', 00H
$SG206184 DB	'?????', 00H, '?', 00H
$SG206185 DB	'?????', 00H, '?', 00H
$SG206186 DB	'?????', 00H, '?', 00H
$SG206187 DB	'?????', 00H, '?', 00H
$SG206188 DB	'?????', 00H, '?', 00H
$SG206189 DB	'?????', 00H, '?', 00H
$SG206190 DB	'?????', 00H, '?', 00H
$SG206191 DB	'?????', 00H, '?', 00H
$SG206192 DB	'?????', 00H, '?', 00H
$SG206193 DB	'?????', 00H, '?', 00H
$SG206194 DB	'?????', 00H, '?', 00H
$SG206195 DB	'?????', 00H, '?', 00H
$SG206196 DB	'?????', 00H, '?', 00H
$SG206197 DB	'?????', 00H, '?', 00H
$SG206198 DB	'?????', 00H, '?', 00H
$SG206199 DB	'?????', 00H, '?', 00H
$SG206200 DB	'TP', 00H, 'test_decimal', 00H
$SG206201 DB	'?????', 00H, '?', 00H
$SG206202 DB	'?????', 00H, '?', 00H
$SG206203 DB	'?????', 00H, '?', 00H
$SG206204 DB	'?????', 00H, '?', 00H
$SG206205 DB	'?????', 00H, '?', 00H
$SG206206 DB	'?????', 00H, '?', 00H
$SG206207 DB	'?????', 00H, '?', 00H
$SG206208 DB	'?????', 00H, '?', 00H
$SG206209 DB	'?????', 00H, '?', 00H
$SG206210 DB	'?????', 00H, '?', 00H
$SG206211 DB	'?????', 00H, '?', 00H
$SG206212 DB	'?????', 00H, '?', 00H
$SG206213 DB	'?????', 00H, '?', 00H
$SG206214 DB	'?????', 00H, '?', 00H
$SG206215 DB	'?????', 00H, '?', 00H
$SG206216 DB	'?????', 00H, '?', 00H
$SG206217 DB	'?????', 00H, '?', 00H
$SG206218 DB	'?????', 00H, '?', 00H
$SG206219 DB	'?????', 00H, '?', 00H
$SG206220 DB	'?????', 00H, '?', 00H
$SG206221 DB	'?????', 00H, '?', 00H
$SG206222 DB	'?????', 00H, '?', 00H
$SG206223 DB	'?????', 00H, '?', 00H
$SG206224 DB	'?????', 00H, '?', 00H
$SG206225 DB	'?????', 00H, '?', 00H
$SG206226 DB	'?????', 00H, '?', 00H
$SG206227 DB	'?????', 00H, '?', 00H
$SG206228 DB	'SRAK', 00H, 'shift_right_single_distinct', 00H
	ORG $+7
$SG206229 DB	'SLAK', 00H, 'shift_left_single_distinct', 00H
$SG206230 DB	'SRLK', 00H, 'shift_right_single_logical_distinct', 00H
	ORG $+7
$SG206231 DB	'SLLK', 00H, 'shift_left_single_logical_distinct', 00H
$SG206232 DB	'LOCFH', 00H, 'load_high_on_condition', 00H
	ORG $+3
$SG206233 DB	'STOCFH', 00H, 'store_high_on_condition', 00H
	ORG $+1
$SG206234 DB	'LOCG', 00H, 'load_on_condition_long', 00H
	ORG $+4
$SG206235 DB	'STOCG', 00H, 'store_on_condition_long', 00H
	ORG $+2
$SG206236 DB	'LANG', 00H, 'load_and_and_long', 00H
	ORG $+1
$SG206237 DB	'?????', 00H, '?', 00H
$SG206238 DB	'LAOG', 00H, 'load_and_or_long', 00H
	ORG $+2
$SG206239 DB	'LAXG', 00H, 'load_and_exclusive_or_long', 00H
$SG206240 DB	'LAAG', 00H, 'load_and_add_long', 00H
	ORG $+1
$SG206241 DB	'?????', 00H, '?', 00H
$SG206242 DB	'LAALG', 00H, 'load_and_add_logical_long', 00H
$SG206243 DB	'?????', 00H, '?', 00H
$SG206244 DB	'?????', 00H, '?', 00H
$SG206245 DB	'?????', 00H, '?', 00H
$SG206246 DB	'?????', 00H, '?', 00H
$SG206247 DB	'?????', 00H, '?', 00H
$SG206248 DB	'?????', 00H, '?', 00H
$SG206249 DB	'?????', 00H, '?', 00H
$SG206250 DB	'LOC', 00H, 'load_on_condition', 00H
	ORG $+2
$SG206251 DB	'STOC', 00H, 'store_on_condition', 00H
$SG206252 DB	'LAN', 00H, 'load_and_and', 00H
	ORG $+7
$SG206253 DB	'?????', 00H, '?', 00H
$SG206254 DB	'LAO', 00H, 'load_and_or', 00H
$SG206255 DB	'LAX', 00H, 'load_and_exclusive_or', 00H
	ORG $+6
$SG206256 DB	'LAA', 00H, 'load_and_add', 00H
	ORG $+7
$SG206257 DB	'?????', 00H, '?', 00H
$SG206258 DB	'LAAL', 00H, 'load_and_add_logical', 00H
	ORG $+6
$SG206259 DB	'?????', 00H, '?', 00H
$SG206260 DB	'?????', 00H, '?', 00H
$SG206261 DB	'?????', 00H, '?', 00H
$SG206262 DB	'?????', 00H, '?', 00H
$SG206263 DB	'?????', 00H, '?', 00H
$SG206776 DB	'?????', 00H, '?', 00H
$SG206777 DB	'?????', 00H, '?', 00H
$SG206778 DB	'?????', 00H, '?', 00H
$SG206779 DB	'?????', 00H, '?', 00H
$SG206780 DB	'?????', 00H, '?', 00H
$SG206781 DB	'?????', 00H, '?', 00H
$SG206782 DB	'?????', 00H, '?', 00H
$SG206783 DB	'?????', 00H, '?', 00H
$SG206784 DB	'?????', 00H, '?', 00H
$SG206785 DB	'?????', 00H, '?', 00H
$SG206786 DB	'?????', 00H, '?', 00H
$SG206787 DB	'?????', 00H, '?', 00H
$SG206788 DB	'?????', 00H, '?', 00H
$SG206789 DB	'?????', 00H, '?', 00H
$SG206790 DB	'?????', 00H, '?', 00H
$SG206791 DB	'?????', 00H, '?', 00H
$SG206792 DB	'?????', 00H, '?', 00H
$SG206793 DB	'?????', 00H, '?', 00H
$SG206794 DB	'?????', 00H, '?', 00H
$SG206795 DB	'?????', 00H, '?', 00H
$SG206796 DB	'?????', 00H, '?', 00H
$SG206797 DB	'?????', 00H, '?', 00H
$SG206798 DB	'?????', 00H, '?', 00H
$SG206799 DB	'?????', 00H, '?', 00H
$SG206800 DB	'?????', 00H, '?', 00H
$SG206801 DB	'?????', 00H, '?', 00H
$SG206802 DB	'?????', 00H, '?', 00H
$SG206803 DB	'?????', 00H, '?', 00H
$SG206804 DB	'?????', 00H, '?', 00H
$SG206805 DB	'?????', 00H, '?', 00H
$SG206806 DB	'?????', 00H, '?', 00H
$SG206807 DB	'?????', 00H, '?', 00H
$SG206808 DB	'?????', 00H, '?', 00H
$SG206809 DB	'?????', 00H, '?', 00H
$SG206810 DB	'?????', 00H, '?', 00H
$SG206811 DB	'?????', 00H, '?', 00H
$SG206812 DB	'?????', 00H, '?', 00H
$SG206813 DB	'?????', 00H, '?', 00H
$SG206814 DB	'?????', 00H, '?', 00H
$SG206815 DB	'?????', 00H, '?', 00H
$SG206816 DB	'?????', 00H, '?', 00H
$SG206817 DB	'?????', 00H, '?', 00H
$SG206818 DB	'?????', 00H, '?', 00H
$SG206819 DB	'?????', 00H, '?', 00H
$SG206820 DB	'?????', 00H, '?', 00H
$SG206821 DB	'?????', 00H, '?', 00H
$SG206822 DB	'?????', 00H, '?', 00H
$SG206823 DB	'?????', 00H, '?', 00H
$SG206824 DB	'?????', 00H, '?', 00H
$SG206825 DB	'?????', 00H, '?', 00H
$SG206826 DB	'?????', 00H, '?', 00H
$SG206827 DB	'?????', 00H, '?', 00H
$SG206828 DB	'?????', 00H, '?', 00H
$SG206829 DB	'?????', 00H, '?', 00H
$SG206830 DB	'?????', 00H, '?', 00H
$SG206831 DB	'?????', 00H, '?', 00H
$SG206832 DB	'?????', 00H, '?', 00H
$SG206833 DB	'?????', 00H, '?', 00H
$SG206834 DB	'?????', 00H, '?', 00H
$SG206835 DB	'?????', 00H, '?', 00H
$SG206836 DB	'?????', 00H, '?', 00H
$SG206837 DB	'?????', 00H, '?', 00H
$SG206838 DB	'?????', 00H, '?', 00H
$SG206839 DB	'?????', 00H, '?', 00H
$SG206840 DB	'?????', 00H, '?', 00H
$SG206841 DB	'?????', 00H, '?', 00H
$SG206842 DB	'LOCHI', 00H, 'load_halfword_immediate_on_condition', 00H
	ORG $+5
$SG206843 DB	'?????', 00H, '?', 00H
$SG206844 DB	'BRXHG', 00H, 'branch_relative_on_index_high_long', 00H
	ORG $+7
$SG206845 DB	'BRXLG', 00H, 'branch_relative_on_index_low_or_equal_long'
	DB	00H
	ORG $+7
$SG206846 DB	'LOCGHI', 00H, 'load_halfword_immediate_on_condition_gran'
	DB	'de', 00H
	ORG $+5
$SG206847 DB	'?????', 00H, '?', 00H
$SG206848 DB	'?????', 00H, '?', 00H
$SG206849 DB	'?????', 00H, '?', 00H
$SG206850 DB	'?????', 00H, '?', 00H
$SG206851 DB	'?????', 00H, '?', 00H
$SG206852 DB	'?????', 00H, '?', 00H
$SG206853 DB	'?????', 00H, '?', 00H
$SG206854 DB	'LOCHHI', 00H, 'load_halfword_high_immediate_on_condition'
	DB	00H
	ORG $+7
$SG206855 DB	'?????', 00H, '?', 00H
$SG206856 DB	'?????', 00H, '?', 00H
$SG206857 DB	'RISBLG', 00H, 'rotate_then_insert_selected_bits_low_long'
	DB	'_reg', 00H
	ORG $+3
$SG206858 DB	'?????', 00H, '?', 00H
$SG206859 DB	'?????', 00H, '?', 00H
$SG206860 DB	'RNSBG', 00H, 'rotate_then_and_selected_bits_long_reg', 00H
	ORG $+3
$SG206861 DB	'RISBG', 00H, 'rotate_then_insert_selected_bits_long_reg', 00H
$SG206862 DB	'ROSBG', 00H, 'rotate_then_or_selected_bits_long_reg', 00H
	ORG $+4
$SG206863 DB	'RXSBG', 00H, 'rotate_then_exclusive_or_selected_bits_lon'
	DB	'g_reg', 00H
	ORG $+2
$SG206864 DB	'?????', 00H, '?', 00H
$SG206865 DB	'RISBGN', 00H, 'rotate_then_insert_selected_bits_long_reg'
	DB	'_n', 00H
	ORG $+5
$SG206866 DB	'?????', 00H, '?', 00H
$SG206867 DB	'?????', 00H, '?', 00H
$SG206868 DB	'?????', 00H, '?', 00H
$SG206869 DB	'RISBHG', 00H, 'rotate_then_insert_selected_bits_high_lon'
	DB	'g_reg', 00H
	ORG $+2
$SG206870 DB	'?????', 00H, '?', 00H
$SG206871 DB	'?????', 00H, '?', 00H
$SG206872 DB	'?????', 00H, '?', 00H
$SG206873 DB	'?????', 00H, '?', 00H
$SG206874 DB	'?????', 00H, '?', 00H
$SG206875 DB	'?????', 00H, '?', 00H
$SG206876 DB	'CGRJ', 00H, 'compare_and_branch_relative_long_register', 00H
	ORG $+1
$SG206877 DB	'CLGRJ', 00H, 'compare_logical_and_branch_relative_long_r'
	DB	'egister', 00H
$SG206878 DB	'?????', 00H, '?', 00H
$SG206879 DB	'?????', 00H, '?', 00H
$SG206880 DB	'?????', 00H, '?', 00H
$SG206881 DB	'?????', 00H, '?', 00H
$SG206882 DB	'?????', 00H, '?', 00H
$SG206883 DB	'?????', 00H, '?', 00H
$SG206884 DB	'?????', 00H, '?', 00H
$SG206885 DB	'?????', 00H, '?', 00H
$SG206886 DB	'?????', 00H, '?', 00H
$SG206887 DB	'?????', 00H, '?', 00H
$SG206888 DB	'CGIT', 00H, 'compare_immediate_and_trap_long', 00H
	ORG $+3
$SG206889 DB	'CLGIT', 00H, 'compare_logical_immediate_and_trap_long', 00H
	ORG $+2
$SG206890 DB	'CIT', 00H, 'compare_immediate_and_trap', 00H
	ORG $+1
$SG206891 DB	'CLFIT', 00H, 'compare_logical_immediate_and_trap_fullwor'
	DB	'd', 00H
	ORG $+6
$SG206892 DB	'?????', 00H, '?', 00H
$SG206893 DB	'?????', 00H, '?', 00H
$SG206894 DB	'CRJ', 00H, 'compare_and_branch_relative_register', 00H
	ORG $+7
$SG206895 DB	'CLRJ', 00H, 'compare_logical_and_branch_relative_registe'
	DB	'r', 00H
	ORG $+6
$SG206896 DB	'?????', 00H, '?', 00H
$SG206897 DB	'?????', 00H, '?', 00H
$SG206898 DB	'?????', 00H, '?', 00H
$SG206899 DB	'?????', 00H, '?', 00H
$SG206900 DB	'CGIJ', 00H, 'compare_immediate_and_branch_relative_long', 00H
$SG206901 DB	'CLGIJ', 00H, 'compare_logical_immediate_and_branch_relat'
	DB	'ive_long', 00H
	ORG $+7
$SG206902 DB	'CIJ', 00H, 'compare_immediate_and_branch_relative', 00H
	ORG $+6
$SG206903 DB	'CLIJ', 00H, 'compare_logical_immediate_and_branch_relati'
	DB	've', 00H
	ORG $+5
$SG206904 DB	'?????', 00H, '?', 00H
$SG206905 DB	'?????', 00H, '?', 00H
$SG206906 DB	'?????', 00H, '?', 00H
$SG206907 DB	'?????', 00H, '?', 00H
$SG206908 DB	'?????', 00H, '?', 00H
$SG206909 DB	'?????', 00H, '?', 00H
$SG206910 DB	'?????', 00H, '?', 00H
$SG206911 DB	'?????', 00H, '?', 00H
$SG206912 DB	'?????', 00H, '?', 00H
$SG206913 DB	'?????', 00H, '?', 00H
$SG206914 DB	'?????', 00H, '?', 00H
$SG206915 DB	'?????', 00H, '?', 00H
$SG206916 DB	'?????', 00H, '?', 00H
$SG206917 DB	'?????', 00H, '?', 00H
$SG206918 DB	'?????', 00H, '?', 00H
$SG206919 DB	'?????', 00H, '?', 00H
$SG206920 DB	'?????', 00H, '?', 00H
$SG206921 DB	'?????', 00H, '?', 00H
$SG206922 DB	'?????', 00H, '?', 00H
$SG206923 DB	'?????', 00H, '?', 00H
$SG206924 DB	'?????', 00H, '?', 00H
$SG206925 DB	'?????', 00H, '?', 00H
$SG206926 DB	'?????', 00H, '?', 00H
$SG206927 DB	'?????', 00H, '?', 00H
$SG206928 DB	'?????', 00H, '?', 00H
$SG206929 DB	'?????', 00H, '?', 00H
$SG206930 DB	'?????', 00H, '?', 00H
$SG206931 DB	'?????', 00H, '?', 00H
$SG206932 DB	'?????', 00H, '?', 00H
$SG206933 DB	'?????', 00H, '?', 00H
$SG206934 DB	'?????', 00H, '?', 00H
$SG206935 DB	'?????', 00H, '?', 00H
$SG206936 DB	'?????', 00H, '?', 00H
$SG206937 DB	'?????', 00H, '?', 00H
$SG206938 DB	'?????', 00H, '?', 00H
$SG206939 DB	'?????', 00H, '?', 00H
$SG206940 DB	'?????', 00H, '?', 00H
$SG206941 DB	'?????', 00H, '?', 00H
$SG206942 DB	'?????', 00H, '?', 00H
$SG206943 DB	'?????', 00H, '?', 00H
$SG206944 DB	'?????', 00H, '?', 00H
$SG206945 DB	'?????', 00H, '?', 00H
$SG206946 DB	'?????', 00H, '?', 00H
$SG206947 DB	'?????', 00H, '?', 00H
$SG206948 DB	'?????', 00H, '?', 00H
$SG206949 DB	'?????', 00H, '?', 00H
$SG206950 DB	'?????', 00H, '?', 00H
$SG206951 DB	'?????', 00H, '?', 00H
$SG206952 DB	'?????', 00H, '?', 00H
$SG206953 DB	'?????', 00H, '?', 00H
$SG206954 DB	'?????', 00H, '?', 00H
$SG206955 DB	'?????', 00H, '?', 00H
$SG206956 DB	'?????', 00H, '?', 00H
$SG206957 DB	'?????', 00H, '?', 00H
$SG206958 DB	'?????', 00H, '?', 00H
$SG206959 DB	'?????', 00H, '?', 00H
$SG206960 DB	'?????', 00H, '?', 00H
$SG206961 DB	'?????', 00H, '?', 00H
$SG206962 DB	'?????', 00H, '?', 00H
$SG206963 DB	'?????', 00H, '?', 00H
$SG206964 DB	'?????', 00H, '?', 00H
$SG206965 DB	'?????', 00H, '?', 00H
$SG206966 DB	'?????', 00H, '?', 00H
$SG206967 DB	'?????', 00H, '?', 00H
$SG206968 DB	'?????', 00H, '?', 00H
$SG206969 DB	'?????', 00H, '?', 00H
$SG206970 DB	'?????', 00H, '?', 00H
$SG206971 DB	'?????', 00H, '?', 00H
$SG206972 DB	'?????', 00H, '?', 00H
$SG206973 DB	'?????', 00H, '?', 00H
$SG206974 DB	'?????', 00H, '?', 00H
$SG206975 DB	'?????', 00H, '?', 00H
$SG206976 DB	'?????', 00H, '?', 00H
$SG206977 DB	'?????', 00H, '?', 00H
$SG206978 DB	'?????', 00H, '?', 00H
$SG206979 DB	'?????', 00H, '?', 00H
$SG206980 DB	'?????', 00H, '?', 00H
$SG206981 DB	'?????', 00H, '?', 00H
$SG206982 DB	'?????', 00H, '?', 00H
$SG206983 DB	'?????', 00H, '?', 00H
$SG206984 DB	'?????', 00H, '?', 00H
$SG206985 DB	'?????', 00H, '?', 00H
$SG206986 DB	'?????', 00H, '?', 00H
$SG206987 DB	'?????', 00H, '?', 00H
$SG206988 DB	'?????', 00H, '?', 00H
$SG206989 DB	'?????', 00H, '?', 00H
$SG206990 DB	'?????', 00H, '?', 00H
$SG206991 DB	'?????', 00H, '?', 00H
$SG206992 DB	'AHIK', 00H, 'add_distinct_halfword_immediate', 00H
	ORG $+3
$SG206993 DB	'AGHIK', 00H, 'add_distinct_long_halfword_immediate', 00H
	ORG $+5
$SG206994 DB	'ALHSIK', 00H, 'add_logical_distinct_signed_halfword_imme'
	DB	'diate', 00H
	ORG $+2
$SG206995 DB	'AGLHSIK', 00H, 'add_logical_distinct_long_signed_halfwor'
	DB	'd_immediate', 00H
	ORG $+4
$SG206996 DB	'?????', 00H, '?', 00H
$SG206997 DB	'?????', 00H, '?', 00H
$SG206998 DB	'?????', 00H, '?', 00H
$SG206999 DB	'?????', 00H, '?', 00H
$SG207000 DB	'?????', 00H, '?', 00H
$SG207001 DB	'?????', 00H, '?', 00H
$SG207002 DB	'?????', 00H, '?', 00H
$SG207003 DB	'?????', 00H, '?', 00H
$SG207004 DB	'CGRB', 00H, 'compare_and_branch_long_register', 00H
	ORG $+2
$SG207005 DB	'CLGRB', 00H, 'compare_logical_and_branch_long_register', 00H
	ORG $+1
$SG207006 DB	'?????', 00H, '?', 00H
$SG207007 DB	'?????', 00H, '?', 00H
$SG207008 DB	'?????', 00H, '?', 00H
$SG207009 DB	'?????', 00H, '?', 00H
$SG207010 DB	'?????', 00H, '?', 00H
$SG207011 DB	'?????', 00H, '?', 00H
$SG207012 DB	'?????', 00H, '?', 00H
$SG207013 DB	'?????', 00H, '?', 00H
$SG207014 DB	'?????', 00H, '?', 00H
$SG207015 DB	'?????', 00H, '?', 00H
$SG207016 DB	'?????', 00H, '?', 00H
$SG207017 DB	'?????', 00H, '?', 00H
$SG207018 DB	'?????', 00H, '?', 00H
$SG207019 DB	'?????', 00H, '?', 00H
$SG207020 DB	'?????', 00H, '?', 00H
$SG207021 DB	'?????', 00H, '?', 00H
$SG207022 DB	'CRB', 00H, 'compare_and_branch_register', 00H
$SG207023 DB	'CLRB', 00H, 'compare_logical_and_branch_register', 00H
	ORG $+7
$SG207024 DB	'?????', 00H, '?', 00H
$SG207025 DB	'?????', 00H, '?', 00H
$SG207026 DB	'?????', 00H, '?', 00H
$SG207027 DB	'?????', 00H, '?', 00H
$SG207028 DB	'CGIB', 00H, 'compare_immediate_and_branch_long', 00H
	ORG $+1
$SG207029 DB	'CLGIB', 00H, 'compare_logical_immediate_and_branch_long', 00H
$SG207030 DB	'CIB', 00H, 'compare_immediate_and_branch', 00H
	ORG $+7
$SG207031 DB	'CLIB', 00H, 'compare_logical_immediate_and_branch', 00H
	ORG $+6
$SG207544 DB	'?????', 00H, '?', 00H
$SG207545 DB	'?????', 00H, '?', 00H
$SG207546 DB	'?????', 00H, '?', 00H
$SG207547 DB	'?????', 00H, '?', 00H
$SG207548 DB	'LDEB', 00H, 'load_lengthened_bfp_short_to_long', 00H
	ORG $+1
$SG207549 DB	'LXDB', 00H, 'load_lengthened_bfp_long_to_ext', 00H
	ORG $+3
$SG207550 DB	'LXEB', 00H, 'load_lengthened_bfp_short_to_ext', 00H
	ORG $+2
$SG207551 DB	'MXDB', 00H, 'multiply_bfp_long_to_ext', 00H
	ORG $+2
$SG207552 DB	'KEB', 00H, 'compare_and_signal_bfp_short', 00H
	ORG $+7
$SG207553 DB	'CEB', 00H, 'compare_bfp_short', 00H
	ORG $+2
$SG207554 DB	'AEB', 00H, 'add_bfp_short', 00H
	ORG $+6
$SG207555 DB	'SEB', 00H, 'subtract_bfp_short', 00H
	ORG $+1
$SG207556 DB	'MDEB', 00H, 'multiply_bfp_short_to_long', 00H
$SG207557 DB	'DEB', 00H, 'divide_bfp_short', 00H
	ORG $+3
$SG207558 DB	'MAEB', 00H, 'multiply_add_bfp_short', 00H
	ORG $+4
$SG207559 DB	'MSEB', 00H, 'multiply_subtract_bfp_short', 00H
	ORG $+7
$SG207560 DB	'TCEB', 00H, 'test_data_class_bfp_short', 00H
	ORG $+1
$SG207561 DB	'TCDB', 00H, 'test_data_class_bfp_long', 00H
	ORG $+2
$SG207562 DB	'TCXB', 00H, 'test_data_class_bfp_ext', 00H
	ORG $+3
$SG207563 DB	'?????', 00H, '?', 00H
$SG207564 DB	'SQEB', 00H, 'squareroot_bfp_short', 00H
	ORG $+6
$SG207565 DB	'SQDB', 00H, 'squareroot_bfp_long', 00H
	ORG $+7
$SG207566 DB	'?????', 00H, '?', 00H
$SG207567 DB	'MEEB', 00H, 'multiply_bfp_short', 00H
$SG207568 DB	'KDB', 00H, 'compare_and_signal_bfp_long', 00H
$SG207569 DB	'CDB', 00H, 'compare_bfp_long', 00H
	ORG $+3
$SG207570 DB	'ADB', 00H, 'add_bfp_long', 00H
	ORG $+7
$SG207571 DB	'SDB', 00H, 'subtract_bfp_long', 00H
	ORG $+2
$SG207572 DB	'MDB', 00H, 'multiply_bfp_long', 00H
	ORG $+2
$SG207573 DB	'DDB', 00H, 'divide_bfp_long', 00H
	ORG $+4
$SG207574 DB	'MADB', 00H, 'multiply_add_bfp_long', 00H
	ORG $+5
$SG207575 DB	'MSDB', 00H, 'multiply_subtract_bfp_long', 00H
$SG207576 DB	'?????', 00H, '?', 00H
$SG207577 DB	'?????', 00H, '?', 00H
$SG207578 DB	'?????', 00H, '?', 00H
$SG207579 DB	'?????', 00H, '?', 00H
$SG207580 DB	'LDE', 00H, 'load_lengthened_float_short_to_long', 00H
$SG207581 DB	'LXD', 00H, 'load_lengthened_float_long_to_ext', 00H
	ORG $+2
$SG207582 DB	'LXE', 00H, 'load_lengthened_float_short_to_ext', 00H
	ORG $+1
$SG207583 DB	'?????', 00H, '?', 00H
$SG207584 DB	'?????', 00H, '?', 00H
$SG207585 DB	'?????', 00H, '?', 00H
$SG207586 DB	'?????', 00H, '?', 00H
$SG207587 DB	'?????', 00H, '?', 00H
$SG207588 DB	'?????', 00H, '?', 00H
$SG207589 DB	'?????', 00H, '?', 00H
$SG207590 DB	'MAE', 00H, 'multiply_add_float_short', 00H
	ORG $+3
$SG207591 DB	'MSE', 00H, 'multiply_subtract_float_short', 00H
	ORG $+6
$SG207592 DB	'?????', 00H, '?', 00H
$SG207593 DB	'?????', 00H, '?', 00H
$SG207594 DB	'?????', 00H, '?', 00H
$SG207595 DB	'?????', 00H, '?', 00H
$SG207596 DB	'SQE', 00H, 'squareroot_float_short', 00H
	ORG $+5
$SG207597 DB	'SQD', 00H, 'squareroot_float_long', 00H
	ORG $+6
$SG207598 DB	'?????', 00H, '?', 00H
$SG207599 DB	'MEE', 00H, 'multiply_float_short', 00H
	ORG $+7
$SG207600 DB	'MAYL', 00H, 'multiply_add_unnormal_float_long_to_ext_low'
	DB	00H
	ORG $+7
$SG207601 DB	'MYL', 00H, 'multiply_unnormal_float_long_to_ext_low', 00H
	ORG $+4
$SG207602 DB	'MAY', 00H, 'multiply_add_unnormal_float_long_to_ext', 00H
	ORG $+4
$SG207603 DB	'MY', 00H, 'multiply_unnormal_float_long_to_ext', 00H
	ORG $+1
$SG207604 DB	'MAYH', 00H, 'multiply_add_unnormal_float_long_to_ext_hig'
	DB	'h', 00H
	ORG $+6
$SG207605 DB	'MYH', 00H, 'multiply_unnormal_float_long_to_ext_high', 00H
	ORG $+3
$SG207606 DB	'MAD', 00H, 'multiply_add_float_long', 00H
	ORG $+4
$SG207607 DB	'MSD', 00H, 'multiply_subtract_float_long', 00H
	ORG $+7
$SG207608 DB	'SLDT', 00H, 'shift_coefficient_left_dfp_long', 00H
	ORG $+3
$SG207609 DB	'SRDT', 00H, 'shift_coefficient_right_dfp_long', 00H
	ORG $+2
$SG207610 DB	'?????', 00H, '?', 00H
$SG207611 DB	'?????', 00H, '?', 00H
$SG207612 DB	'?????', 00H, '?', 00H
$SG207613 DB	'?????', 00H, '?', 00H
$SG207614 DB	'?????', 00H, '?', 00H
$SG207615 DB	'?????', 00H, '?', 00H
$SG207616 DB	'SLXT', 00H, 'shift_coefficient_left_dfp_ext', 00H
	ORG $+4
$SG207617 DB	'SRXT', 00H, 'shift_coefficient_right_dfp_ext', 00H
	ORG $+3
$SG207618 DB	'?????', 00H, '?', 00H
$SG207619 DB	'?????', 00H, '?', 00H
$SG207620 DB	'?????', 00H, '?', 00H
$SG207621 DB	'?????', 00H, '?', 00H
$SG207622 DB	'?????', 00H, '?', 00H
$SG207623 DB	'?????', 00H, '?', 00H
$SG207624 DB	'TDCET', 00H, 'test_data_class_dfp_short', 00H
$SG207625 DB	'TDGET', 00H, 'test_data_group_dfp_short', 00H
$SG207626 DB	'?????', 00H, '?', 00H
$SG207627 DB	'?????', 00H, '?', 00H
$SG207628 DB	'TDCDT', 00H, 'test_data_class_dfp_long', 00H
	ORG $+1
$SG207629 DB	'TDGDT', 00H, 'test_data_group_dfp_long', 00H
	ORG $+1
$SG207630 DB	'?????', 00H, '?', 00H
$SG207631 DB	'?????', 00H, '?', 00H
$SG207632 DB	'TDCXT', 00H, 'test_data_class_dfp_ext', 00H
	ORG $+2
$SG207633 DB	'TDGXT', 00H, 'test_data_group_dfp_ext', 00H
	ORG $+2
$SG207634 DB	'?????', 00H, '?', 00H
$SG207635 DB	'?????', 00H, '?', 00H
$SG207636 DB	'?????', 00H, '?', 00H
$SG207637 DB	'?????', 00H, '?', 00H
$SG207638 DB	'?????', 00H, '?', 00H
$SG207639 DB	'?????', 00H, '?', 00H
$SG207640 DB	'?????', 00H, '?', 00H
$SG207641 DB	'?????', 00H, '?', 00H
$SG207642 DB	'?????', 00H, '?', 00H
$SG207643 DB	'?????', 00H, '?', 00H
$SG207644 DB	'LEY', 00H, 'load_float_short_y', 00H
	ORG $+1
$SG207645 DB	'LDY', 00H, 'load_float_long_y', 00H
	ORG $+2
$SG207646 DB	'STEY', 00H, 'store_float_short_y', 00H
	ORG $+7
$SG207647 DB	'STDY', 00H, 'store_float_long_y', 00H
$SG207648 DB	'?????', 00H, '?', 00H
$SG207649 DB	'?????', 00H, '?', 00H
$SG207650 DB	'?????', 00H, '?', 00H
$SG207651 DB	'?????', 00H, '?', 00H
$SG207652 DB	'?????', 00H, '?', 00H
$SG207653 DB	'?????', 00H, '?', 00H
$SG207654 DB	'?????', 00H, '?', 00H
$SG207655 DB	'?????', 00H, '?', 00H
$SG207656 DB	'?????', 00H, '?', 00H
$SG207657 DB	'?????', 00H, '?', 00H
$SG207658 DB	'?????', 00H, '?', 00H
$SG207659 DB	'?????', 00H, '?', 00H
$SG207660 DB	'?????', 00H, '?', 00H
$SG207661 DB	'?????', 00H, '?', 00H
$SG207662 DB	'?????', 00H, '?', 00H
$SG207663 DB	'?????', 00H, '?', 00H
$SG207664 DB	'?????', 00H, '?', 00H
$SG207665 DB	'?????', 00H, '?', 00H
$SG207666 DB	'?????', 00H, '?', 00H
$SG207667 DB	'?????', 00H, '?', 00H
$SG207668 DB	'?????', 00H, '?', 00H
$SG207669 DB	'?????', 00H, '?', 00H
$SG207670 DB	'?????', 00H, '?', 00H
$SG207671 DB	'?????', 00H, '?', 00H
$SG207672 DB	'?????', 00H, '?', 00H
$SG199480 DB	'?????', 00H, '?', 00H
$SG207673 DB	'?????', 00H, '?', 00H
$SG199481 DB	00H, 'execute_opcode_01xx', 00H
	ORG $+3
$SG207674 DB	'?????', 00H, '?', 00H
$SG199482 DB	'?????', 00H, '?', 00H
$SG207675 DB	'?????', 00H, '?', 00H
$SG199483 DB	'?????', 00H, '?', 00H
$SG207676 DB	'?????', 00H, '?', 00H
$SG199484 DB	'SPM', 00H, 'set_program_mask', 00H
	ORG $+3
$SG207677 DB	'?????', 00H, '?', 00H
$SG199485 DB	'BALR', 00H, 'branch_and_link_register', 00H
	ORG $+2
$SG207678 DB	'?????', 00H, '?', 00H
$SG199486 DB	'BCTR', 00H, 'branch_on_count_register', 00H
	ORG $+2
$SG207679 DB	'?????', 00H, '?', 00H
$SG199487 DB	'BCR', 00H, 'branch_on_condition_register', 00H
	ORG $+7
$SG207680 DB	'?????', 00H, '?', 00H
$SG199488 DB	'SSK', 00H, 'set_storage_key', 00H
	ORG $+4
$SG207681 DB	'?????', 00H, '?', 00H
$SG199489 DB	'ISK', 00H, 'insert_storage_key', 00H
	ORG $+1
$SG207682 DB	'?????', 00H, '?', 00H
$SG199490 DB	'SVC', 00H, 'supervisor_call', 00H
	ORG $+4
$SG207683 DB	'?????', 00H, '?', 00H
$SG199491 DB	'BSM', 00H, 'branch_and_set_mode', 00H
$SG207684 DB	'?????', 00H, '?', 00H
$SG199492 DB	'BASSM', 00H, 'branch_and_save_and_set_mode', 00H
	ORG $+5
$SG207685 DB	'?????', 00H, '?', 00H
$SG199493 DB	'BASR', 00H, 'branch_and_save_register', 00H
	ORG $+2
$SG207686 DB	'?????', 00H, '?', 00H
$SG199494 DB	'MVCL', 00H, 'move_long', 00H
	ORG $+1
$SG207687 DB	'?????', 00H, '?', 00H
$SG199495 DB	'CLCL', 00H, 'compare_logical_character_long', 00H
	ORG $+4
$SG207688 DB	'?????', 00H, '?', 00H
$SG199496 DB	'LPR', 00H, 'load_positive_register', 00H
	ORG $+5
$SG207689 DB	'?????', 00H, '?', 00H
$SG199497 DB	'LNR', 00H, 'load_negative_register', 00H
	ORG $+5
$SG207690 DB	'?????', 00H, '?', 00H
$SG199498 DB	'LTR', 00H, 'load_and_test_register', 00H
	ORG $+5
$SG207691 DB	'?????', 00H, '?', 00H
$SG199499 DB	'LCR', 00H, 'load_complement_register', 00H
	ORG $+3
$SG207692 DB	'?????', 00H, '?', 00H
$SG199500 DB	'NR', 00H, 'and_register', 00H
$SG207693 DB	'?????', 00H, '?', 00H
$SG199501 DB	'CLR', 00H, 'compare_logical_register', 00H
	ORG $+3
$SG207694 DB	'?????', 00H, '?', 00H
$SG199502 DB	'OR', 00H, 'or_register', 00H
	ORG $+1
$SG207695 DB	'?????', 00H, '?', 00H
$SG199503 DB	'XR', 00H, 'exclusive_or_register', 00H
	ORG $+7
$SG207696 DB	'?????', 00H, '?', 00H
$SG199504 DB	'LR', 00H, 'load_register', 00H
	ORG $+7
$SG207697 DB	'?????', 00H, '?', 00H
$SG199505 DB	'CR', 00H, 'compare_register', 00H
	ORG $+4
$SG207698 DB	'?????', 00H, '?', 00H
$SG199506 DB	'AR', 00H, 'add_register', 00H
$SG207699 DB	'?????', 00H, '?', 00H
$SG199507 DB	'SR', 00H, 'subtract_register', 00H
	ORG $+3
$SG207700 DB	'?????', 00H, '?', 00H
$SG199508 DB	'MR', 00H, 'multiply_register', 00H
	ORG $+3
$SG207701 DB	'?????', 00H, '?', 00H
$SG199509 DB	'DR', 00H, 'divide_register', 00H
	ORG $+5
$SG207702 DB	'?????', 00H, '?', 00H
$SG199510 DB	'ALR', 00H, 'add_logical_register', 00H
	ORG $+7
$SG207703 DB	'?????', 00H, '?', 00H
$SG199511 DB	'SLR', 00H, 'subtract_logical_register', 00H
	ORG $+2
$SG207704 DB	'?????', 00H, '?', 00H
$SG199512 DB	'LPDR', 00H, 'load_positive_float_long_reg', 00H
	ORG $+6
$SG207705 DB	'?????', 00H, '?', 00H
$SG199513 DB	'LNDR', 00H, 'load_negative_float_long_reg', 00H
	ORG $+6
$SG207706 DB	'?????', 00H, '?', 00H
$SG199514 DB	'LTDR', 00H, 'load_and_test_float_long_reg', 00H
	ORG $+6
$SG207707 DB	'?????', 00H, '?', 00H
$SG199515 DB	'LCDR', 00H, 'load_complement_float_long_reg', 00H
	ORG $+4
$SG207708 DB	'?????', 00H, '?', 00H
$SG199516 DB	'HDR', 00H, 'halve_float_long_reg', 00H
	ORG $+7
$SG207709 DB	'?????', 00H, '?', 00H
$SG199517 DB	'LDXR', 00H, 'load_rounded_float_long_reg', 00H
	ORG $+7
$SG207710 DB	'?????', 00H, '?', 00H
$SG199518 DB	'MXR', 00H, 'multiply_float_ext_reg', 00H
	ORG $+5
$SG207711 DB	'?????', 00H, '?', 00H
$SG199519 DB	'MXDR', 00H, 'multiply_float_long_to_ext_reg', 00H
	ORG $+4
$SG207712 DB	'CZDT', 00H, 'convert_dfp_long_to_zoned', 00H
	ORG $+1
$SG199520 DB	'LDR', 00H, 'load_float_long_reg', 00H
$SG207713 DB	'CZXT', 00H, 'convert_dfp_ext_to_zoned', 00H
	ORG $+2
$SG199521 DB	'CDR', 00H, 'compare_float_long_reg', 00H
	ORG $+5
$SG207714 DB	'CDZT', 00H, 'convert_zoned_to_dfp_long', 00H
	ORG $+1
$SG199522 DB	'ADR', 00H, 'add_float_long_reg', 00H
	ORG $+1
$SG207715 DB	'CXZT', 00H, 'convert_zoned_to_dfp_ext', 00H
	ORG $+2
$SG199523 DB	'SDR', 00H, 'subtract_float_long_reg', 00H
	ORG $+4
$SG207716 DB	'CPDT', 00H, 'convert_dfp_long_to_packed', 00H
$SG199524 DB	'MDR', 00H, 'multiply_float_long_reg', 00H
	ORG $+4
$SG207717 DB	'CPXT', 00H, 'convert_dfp_ext_to_packed', 00H
	ORG $+1
$SG199525 DB	'DDR', 00H, 'divide_float_long_reg', 00H
	ORG $+6
$SG207718 DB	'CDPT', 00H, 'convert_packed_to_dfp_long', 00H
$SG199526 DB	'AWR', 00H, 'add_unnormal_float_long_reg', 00H
$SG207719 DB	'CXPT', 00H, 'convert_packed_to_dfp_ext', 00H
	ORG $+1
$SG199527 DB	'SWR', 00H, 'subtract_unnormal_float_long_reg', 00H
	ORG $+3
$SG207720 DB	'?????', 00H, '?', 00H
$SG199528 DB	'LPER', 00H, 'load_positive_float_short_reg', 00H
	ORG $+5
$SG207721 DB	'?????', 00H, '?', 00H
$SG199529 DB	'LNER', 00H, 'load_negative_float_short_reg', 00H
	ORG $+5
$SG207722 DB	'?????', 00H, '?', 00H
$SG199530 DB	'LTER', 00H, 'load_and_test_float_short_reg', 00H
	ORG $+5
$SG207723 DB	'?????', 00H, '?', 00H
$SG199531 DB	'LCER', 00H, 'load_complement_float_short_reg', 00H
	ORG $+3
$SG207724 DB	'?????', 00H, '?', 00H
$SG199532 DB	'HER', 00H, 'halve_float_short_reg', 00H
	ORG $+6
$SG207725 DB	'?????', 00H, '?', 00H
$SG199533 DB	'LEDR', 00H, 'load_rounded_float_short_reg', 00H
	ORG $+6
$SG207726 DB	'?????', 00H, '?', 00H
$SG199534 DB	'AXR', 00H, 'add_float_ext_reg', 00H
	ORG $+2
$SG207727 DB	'?????', 00H, '?', 00H
$SG199535 DB	'SXR', 00H, 'subtract_float_ext_reg', 00H
	ORG $+5
$SG207728 DB	'?????', 00H, '?', 00H
$SG199536 DB	'LER', 00H, 'load_float_short_reg', 00H
	ORG $+7
$SG207729 DB	'?????', 00H, '?', 00H
$SG199537 DB	'CER', 00H, 'compare_float_short_reg', 00H
	ORG $+4
$SG207730 DB	'?????', 00H, '?', 00H
$SG199538 DB	'AER', 00H, 'add_float_short_reg', 00H
$SG207731 DB	'?????', 00H, '?', 00H
$SG199539 DB	'SER', 00H, 'subtract_float_short_reg', 00H
	ORG $+3
$SG207732 DB	'?????', 00H, '?', 00H
$SG199540 DB	'MDER', 00H, 'multiply_float_short_to_long_reg', 00H
	ORG $+2
$SG207733 DB	'?????', 00H, '?', 00H
$SG199541 DB	'DER', 00H, 'divide_float_short_reg', 00H
	ORG $+5
$SG207734 DB	'?????', 00H, '?', 00H
$SG199542 DB	'AUR', 00H, 'add_unnormal_float_short_reg', 00H
	ORG $+7
$SG207735 DB	'?????', 00H, '?', 00H
$SG199543 DB	'SUR', 00H, 'subtract_unnormal_float_short_reg', 00H
	ORG $+2
$SG207736 DB	'?????', 00H, '?', 00H
$SG199544 DB	'STH', 00H, 'store_halfword', 00H
	ORG $+5
$SG207737 DB	'?????', 00H, '?', 00H
$SG199545 DB	'LA', 00H, 'load_address', 00H
$SG207738 DB	'?????', 00H, '?', 00H
$SG199546 DB	'STC', 00H, 'store_character', 00H
	ORG $+4
$SG207739 DB	'?????', 00H, '?', 00H
$SG199547 DB	'IC', 00H, 'insert_character', 00H
	ORG $+4
$SG207740 DB	'?????', 00H, '?', 00H
$SG199548 DB	'EX', 00H, 'execute', 00H
	ORG $+5
$SG207741 DB	'?????', 00H, '?', 00H
$SG199549 DB	'BAL', 00H, 'branch_and_link', 00H
	ORG $+4
$SG207742 DB	'?????', 00H, '?', 00H
$SG199550 DB	'BCT', 00H, 'branch_on_count', 00H
	ORG $+4
$SG207743 DB	'?????', 00H, '?', 00H
$SG199551 DB	'BC', 00H, 'branch_on_condition', 00H
	ORG $+1
$SG207744 DB	'?????', 00H, '?', 00H
$SG199552 DB	'LH', 00H, 'load_halfword', 00H
	ORG $+7
$SG207745 DB	'?????', 00H, '?', 00H
$SG199553 DB	'CH', 00H, 'compare_halfword', 00H
	ORG $+4
$SG207746 DB	'?????', 00H, '?', 00H
$SG199554 DB	'AH', 00H, 'add_halfword', 00H
$SG207747 DB	'?????', 00H, '?', 00H
$SG199555 DB	'SH', 00H, 'subtract_halfword', 00H
	ORG $+3
$SG207748 DB	'?????', 00H, '?', 00H
$SG199556 DB	'MH', 00H, 'multiply_halfword', 00H
	ORG $+3
$SG207749 DB	'?????', 00H, '?', 00H
$SG199557 DB	'BAS', 00H, 'branch_and_save', 00H
	ORG $+4
$SG207750 DB	'?????', 00H, '?', 00H
$SG199558 DB	'CVD', 00H, 'convert_to_decimal', 00H
	ORG $+1
$SG207751 DB	'?????', 00H, '?', 00H
$SG199559 DB	'CVB', 00H, 'convert_to_binary', 00H
	ORG $+2
$SG207752 DB	'?????', 00H, '?', 00H
$SG199560 DB	'ST', 00H, 'store', 00H
	ORG $+7
$SG207753 DB	'?????', 00H, '?', 00H
$SG199561 DB	'LAE', 00H, 'load_address_extended', 00H
	ORG $+6
$SG207754 DB	'?????', 00H, '?', 00H
$SG199562 DB	'?????', 00H, '?', 00H
$SG207755 DB	'?????', 00H, '?', 00H
$SG199563 DB	'?????', 00H, '?', 00H
$SG207756 DB	'?????', 00H, '?', 00H
$SG199564 DB	'N', 00H, 'and', 00H
	ORG $+2
$SG207757 DB	'?????', 00H, '?', 00H
$SG199565 DB	'CL', 00H, 'compare_logical', 00H
	ORG $+5
$SG207758 DB	'?????', 00H, '?', 00H
$SG199566 DB	'O', 00H, 'or', 00H
	ORG $+3
$SG207759 DB	'?????', 00H, '?', 00H
$SG199567 DB	'X', 00H, 'exclusive_or', 00H
	ORG $+1
$SG207760 DB	'?????', 00H, '?', 00H
$SG199568 DB	'L', 00H, 'load', 00H
	ORG $+1
$SG207761 DB	'?????', 00H, '?', 00H
$SG199569 DB	'C', 00H, 'compare', 00H
	ORG $+6
$SG207762 DB	'?????', 00H, '?', 00H
$SG199570 DB	'A', 00H, 'add', 00H
	ORG $+2
$SG207763 DB	'?????', 00H, '?', 00H
$SG199571 DB	'S', 00H, 'subtract', 00H
	ORG $+5
$SG207764 DB	'?????', 00H, '?', 00H
$SG199572 DB	'M', 00H, 'multiply', 00H
	ORG $+5
$SG207765 DB	'?????', 00H, '?', 00H
$SG199573 DB	'D', 00H, 'divide', 00H
	ORG $+7
$SG207766 DB	'?????', 00H, '?', 00H
$SG199574 DB	'AL', 00H, 'add_logical', 00H
	ORG $+1
$SG207767 DB	'?????', 00H, '?', 00H
$SG199575 DB	'SL', 00H, 'subtract_logical', 00H
	ORG $+4
$SG207768 DB	'?????', 00H, '?', 00H
$SG199576 DB	'STD', 00H, 'store_float_long', 00H
	ORG $+3
$SG207769 DB	'?????', 00H, '?', 00H
$SG199577 DB	'?????', 00H, '?', 00H
$SG207770 DB	'?????', 00H, '?', 00H
$SG199578 DB	'?????', 00H, '?', 00H
$SG207771 DB	'?????', 00H, '?', 00H
$SG199579 DB	'?????', 00H, '?', 00H
$SG207772 DB	'?????', 00H, '?', 00H
$SG199580 DB	'?????', 00H, '?', 00H
$SG207773 DB	'?????', 00H, '?', 00H
$SG199581 DB	'?????', 00H, '?', 00H
$SG207774 DB	'?????', 00H, '?', 00H
$SG199582 DB	'?????', 00H, '?', 00H
$SG207775 DB	'?????', 00H, '?', 00H
$SG199583 DB	'MXD', 00H, 'multiply_float_long_to_ext', 00H
	ORG $+1
$SG207776 DB	'?????', 00H, '?', 00H
$SG199584 DB	'LD', 00H, 'load_float_long', 00H
	ORG $+5
$SG207777 DB	'?????', 00H, '?', 00H
$SG199585 DB	'CD', 00H, 'compare_float_long', 00H
	ORG $+2
$SG207778 DB	'?????', 00H, '?', 00H
$SG199586 DB	'AD', 00H, 'add_float_long', 00H
	ORG $+6
$SG207779 DB	'?????', 00H, '?', 00H
$SG199587 DB	'SD', 00H, 'subtract_float_long', 00H
	ORG $+1
$SG207780 DB	'?????', 00H, '?', 00H
$SG199588 DB	'MD', 00H, 'multiply_float_long', 00H
	ORG $+1
$SG207781 DB	'?????', 00H, '?', 00H
$SG199589 DB	'DD', 00H, 'divide_float_long', 00H
	ORG $+3
$SG207782 DB	'?????', 00H, '?', 00H
$SG199590 DB	'AW', 00H, 'add_unnormal_float_long', 00H
	ORG $+5
$SG207783 DB	'?????', 00H, '?', 00H
$SG199591 DB	'SW', 00H, 'subtract_unnormal_float_long', 00H
$SG207784 DB	'?????', 00H, '?', 00H
$SG199592 DB	'STE', 00H, 'store_float_short', 00H
	ORG $+2
$SG207785 DB	'?????', 00H, '?', 00H
$SG199593 DB	'MS', 00H, 'multiply_single', 00H
	ORG $+5
$SG207786 DB	'?????', 00H, '?', 00H
$SG199594 DB	'?????', 00H, '?', 00H
$SG207787 DB	'?????', 00H, '?', 00H
$SG199595 DB	'?????', 00H, '?', 00H
$SG207788 DB	'?????', 00H, '?', 00H
$SG199596 DB	'?????', 00H, '?', 00H
$SG207789 DB	'?????', 00H, '?', 00H
$SG199597 DB	'TCPIP', 00H, 'tcpip', 00H
	ORG $+4
$SG207790 DB	'?????', 00H, '?', 00H
$SG199598 DB	'?????', 00H, '?', 00H
$SG207791 DB	'?????', 00H, '?', 00H
$SG199599 DB	'?????', 00H, '?', 00H
$SG207792 DB	'?????', 00H, '?', 00H
$SG199600 DB	'LE', 00H, 'load_float_short', 00H
	ORG $+4
$SG207793 DB	'?????', 00H, '?', 00H
$SG199601 DB	'CE', 00H, 'compare_float_short', 00H
	ORG $+1
$SG207794 DB	'?????', 00H, '?', 00H
$SG199602 DB	'AE', 00H, 'add_float_short', 00H
	ORG $+5
$SG207795 DB	'?????', 00H, '?', 00H
$SG199603 DB	'SE', 00H, 'subtract_float_short', 00H
$SG207796 DB	'?????', 00H, '?', 00H
$SG199604 DB	'MDE', 00H, 'multiply_float_short_to_long', 00H
	ORG $+7
$SG207797 DB	'?????', 00H, '?', 00H
$SG199605 DB	'DE', 00H, 'divide_float_short', 00H
	ORG $+2
$SG207798 DB	'?????', 00H, '?', 00H
$SG199606 DB	'AU', 00H, 'add_unnormal_float_short', 00H
	ORG $+4
$SG207799 DB	'?????', 00H, '?', 00H
$SG199607 DB	'SU', 00H, 'subtract_unnormal_float_short', 00H
	ORG $+7
$SG199608 DB	'SSM', 00H, 'set_system_mask', 00H
	ORG $+4
$SG199609 DB	'?????', 00H, '?', 00H
$SG199610 DB	'LPSW', 00H, 'load_program_status_word', 00H
	ORG $+2
$SG199611 DB	'DIAG', 00H, 'diagnose', 00H
	ORG $+2
$SG199612 DB	'BRXH', 00H, 'branch_relative_on_index_high', 00H
	ORG $+5
$SG199613 DB	'BRXLE', 00H, 'branch_relative_on_index_low_or_equal', 00H
	ORG $+4
$SG199614 DB	'BXH', 00H, 'branch_on_index_high', 00H
	ORG $+7
$SG199615 DB	'BXLE', 00H, 'branch_on_index_low_or_equal', 00H
	ORG $+6
$SG199616 DB	'SRL', 00H, 'shift_right_single_logical', 00H
	ORG $+1
$SG199617 DB	'SLL', 00H, 'shift_left_single_logical', 00H
	ORG $+2
$SG199618 DB	'SRA', 00H, 'shift_right_single', 00H
	ORG $+1
$SG199619 DB	'SLA', 00H, 'shift_left_single', 00H
	ORG $+2
$SG199620 DB	'SRDL', 00H, 'shift_right_double_logical', 00H
$SG199621 DB	'SLDL', 00H, 'shift_left_double_logical', 00H
	ORG $+1
$SG199622 DB	'SRDA', 00H, 'shift_right_double', 00H
$SG199623 DB	'SLDA', 00H, 'shift_left_double', 00H
	ORG $+1
$SG199624 DB	'STM', 00H, 'store_multiple', 00H
	ORG $+5
$SG199625 DB	'TM', 00H, 'test_under_mask', 00H
	ORG $+5
$SG199626 DB	'MVI', 00H, 'move_immediate', 00H
	ORG $+5
$SG199627 DB	'TS', 00H, 'test_and_set', 00H
$SG199628 DB	'NI', 00H, 'and_immediate', 00H
	ORG $+7
$SG199629 DB	'CLI', 00H, 'compare_logical_immediate', 00H
	ORG $+2
$SG199630 DB	'OI', 00H, 'or_immediate', 00H
$SG199631 DB	'XI', 00H, 'exclusive_or_immediate', 00H
	ORG $+6
$SG199632 DB	'LM', 00H, 'load_multiple', 00H
	ORG $+7
$SG199633 DB	'TRACE', 00H, 'trace', 00H
	ORG $+4
$SG199634 DB	'LAM', 00H, 'load_access_multiple', 00H
	ORG $+7
$SG199635 DB	'STAM', 00H, 'store_access_multiple', 00H
	ORG $+5
$SG199636 DB	'SIO', 00H, 'start_io', 00H
	ORG $+3
$SG199637 DB	'TIO', 00H, 'test_io', 00H
	ORG $+4
$SG199638 DB	'HIO', 00H, 'halt_io', 00H
	ORG $+4
$SG199639 DB	'TCH', 00H, 'test_channel', 00H
	ORG $+7
$SG199640 DB	'?????', 00H, '?', 00H
$SG199641 DB	'?????', 00H, '?', 00H
$SG199642 DB	'?????', 00H, '?', 00H
$SG199643 DB	'?????', 00H, '?', 00H
$SG199644 DB	00H, 'execute_opcode_a4xx', 00H
	ORG $+3
$SG199645 DB	00H, 'execute_opcode_a5_x', 00H
	ORG $+3
$SG199646 DB	00H, 'execute_opcode_a6xx', 00H
	ORG $+3
$SG199647 DB	00H, 'execute_opcode_a7_x', 00H
	ORG $+3
$SG199648 DB	'MVCLE', 00H, 'move_long_extended', 00H
	ORG $+7
$SG199649 DB	'CLCLE', 00H, 'compare_logical_long_extended', 00H
	ORG $+4
$SG199650 DB	'?????', 00H, '?', 00H
$SG199651 DB	'?????', 00H, '?', 00H
$SG199652 DB	'STNSM', 00H, 'store_then_and_system_mask', 00H
	ORG $+7
$SG199653 DB	'STOSM', 00H, 'store_then_or_system_mask', 00H
$SG199654 DB	'SIGP', 00H, 'signal_processor', 00H
	ORG $+2
$SG199655 DB	'MC', 00H, 'monitor_call', 00H
$SG199656 DB	'?????', 00H, '?', 00H
$SG199657 DB	'LRA', 00H, 'load_real_address', 00H
	ORG $+2
$SG199658 DB	00H, 'execute_opcode_b2xx', 00H
	ORG $+3
$SG199659 DB	00H, 'execute_opcode_b3xx', 00H
	ORG $+3
$SG199660 DB	'?????', 00H, '?', 00H
$SG199661 DB	'?????', 00H, '?', 00H
$SG199662 DB	'STCTL', 00H, 'store_control', 00H
	ORG $+4
$SG199663 DB	'LCTL', 00H, 'load_control', 00H
	ORG $+6
$SG199664 DB	'?????', 00H, '?', 00H
$SG199665 DB	00H, 'execute_opcode_b9xx', 00H
	ORG $+3
$SG199666 DB	'CS', 00H, 'compare_and_swap', 00H
	ORG $+4
$SG199667 DB	'CDS', 00H, 'compare_double_and_swap', 00H
	ORG $+4
$SG199668 DB	'?????', 00H, '?', 00H
$SG199669 DB	'CLM', 00H, 'compare_logical_characters_under_mask', 00H
	ORG $+6
$SG199670 DB	'STCM', 00H, 'store_characters_under_mask', 00H
	ORG $+7
$SG199671 DB	'ICM', 00H, 'insert_characters_under_mask', 00H
	ORG $+7
$SG199672 DB	00H, 'execute_opcode_c0_x', 00H
	ORG $+3
$SG199673 DB	'?????', 00H, '?', 00H
$SG199674 DB	00H, 'execute_opcode_c2_x', 00H
	ORG $+3
$SG199675 DB	'?????', 00H, '?', 00H
$SG199676 DB	00H, 'execute_opcode_c4_x', 00H
	ORG $+3
$SG199677 DB	'BPRP', 00H, 'branch_prediction_relative_preload', 00H
$SG199678 DB	00H, 'execute_opcode_c6_x', 00H
	ORG $+3
$SG199679 DB	'BPP', 00H, 'branch_prediction_preload', 00H
	ORG $+2
$SG199680 DB	00H, 'execute_opcode_c8_x', 00H
	ORG $+3
$SG199681 DB	'?????', 00H, '?', 00H
$SG199682 DB	'?????', 00H, '?', 00H
$SG199683 DB	'?????', 00H, '?', 00H
$SG199684 DB	00H, 'execute_opcode_cc_x', 00H
	ORG $+3
$SG199685 DB	'?????', 00H, '?', 00H
$SG199686 DB	'?????', 00H, '?', 00H
$SG199687 DB	'?????', 00H, '?', 00H
$SG199688 DB	'TRTR', 00H, 'translate_and_test_reverse', 00H
$SG199689 DB	'MVN', 00H, 'move_numerics', 00H
	ORG $+6
$SG199690 DB	'MVC', 00H, 'move_character', 00H
	ORG $+5
$SG199691 DB	'MVZ', 00H, 'move_zones', 00H
	ORG $+1
$SG199692 DB	'NC', 00H, 'and_character', 00H
	ORG $+7
$SG199693 DB	'CLC', 00H, 'compare_logical_character', 00H
	ORG $+2
$SG199694 DB	'OC', 00H, 'or_character', 00H
$SG199695 DB	'XC', 00H, 'exclusive_or_character', 00H
	ORG $+6
$SG199696 DB	'?????', 00H, '?', 00H
$SG199697 DB	'MVCK', 00H, 'move_with_key', 00H
	ORG $+5
$SG199698 DB	'MVCP', 00H, 'move_to_primary', 00H
	ORG $+3
$SG199699 DB	'MVCS', 00H, 'move_to_secondary', 00H
	ORG $+1
$SG199700 DB	'TR', 00H, 'translate', 00H
	ORG $+3
$SG199701 DB	'TRT', 00H, 'translate_and_test', 00H
	ORG $+1
$SG199702 DB	'ED', 00H, 'edit_x_edit_and_mark', 00H
$SG199703 DB	'EDMK', 00H, 'edit_x_edit_and_mark', 00H
	ORG $+6
$SG199704 DB	'?????', 00H, '?', 00H
$SG199705 DB	'PKU', 00H, 'pack_unicode', 00H
	ORG $+7
$SG199706 DB	'UNPKU', 00H, 'unpack_unicode', 00H
	ORG $+3
$SG199707 DB	00H, 'execute_opcode_e3________xx', 00H
	ORG $+3
$SG199708 DB	00H, 'execute_opcode_e4xx', 00H
	ORG $+3
$SG199709 DB	00H, 'execute_opcode_e5xx', 00H
	ORG $+3
$SG199710 DB	00H, 'execute_opcode_e6xx', 00H
	ORG $+3
$SG199711 DB	00H, 'execute_opcode_e7________xx', 00H
	ORG $+3
$SG199712 DB	'MVCIN', 00H, 'move_inverse', 00H
	ORG $+5
$SG199713 DB	'PKA', 00H, 'pack_ascii', 00H
	ORG $+1
$SG199714 DB	'UNPKA', 00H, 'unpack_ascii', 00H
	ORG $+5
$SG199715 DB	00H, 'execute_opcode_eb________xx', 00H
	ORG $+3
$SG199716 DB	00H, 'execute_opcode_ec________xx', 00H
	ORG $+3
$SG199717 DB	00H, 'execute_opcode_ed________xx', 00H
	ORG $+3
$SG199718 DB	'PLO', 00H, 'perform_locked_operation', 00H
	ORG $+3
$SG199719 DB	'LMD', 00H, 'load_multiple_disjoint', 00H
	ORG $+5
$SG199720 DB	'SRP', 00H, 'shift_and_round_decimal', 00H
	ORG $+4
$SG199721 DB	'MVO', 00H, 'move_with_offset', 00H
	ORG $+3
$SG199722 DB	'PACK', 00H, 'pack', 00H
	ORG $+6
$SG199723 DB	'UNPK', 00H, 'unpack', 00H
	ORG $+4
$SG199724 DB	'?????', 00H, '?', 00H
$SG199725 DB	'?????', 00H, '?', 00H
$SG199726 DB	'?????', 00H, '?', 00H
$SG199727 DB	'?????', 00H, '?', 00H
$SG199728 DB	'ZAP', 00H, 'zero_and_add', 00H
	ORG $+7
$SG199729 DB	'CP', 00H, 'compare_decimal', 00H
	ORG $+5
$SG199730 DB	'AP', 00H, 'add_decimal', 00H
	ORG $+1
$SG199731 DB	'SP', 00H, 'subtract_decimal', 00H
	ORG $+4
$SG199732 DB	'MP', 00H, 'multiply_decimal', 00H
	ORG $+4
$SG199733 DB	'DP', 00H, 'divide_decimal', 00H
	ORG $+6
$SG199734 DB	'?????', 00H, '?', 00H
$SG199735 DB	'?????', 00H, '?', 00H
$SG208312 DB	'?????', 00H, '?', 00H
$SG208313 DB	'?????', 00H, '?', 00H
$SG208314 DB	'?????', 00H, '?', 00H
$SG208315 DB	'?????', 00H, '?', 00H
$SG208316 DB	'?????', 00H, '?', 00H
$SG208317 DB	'?????', 00H, '?', 00H
$SG208318 DB	'?????', 00H, '?', 00H
$SG208319 DB	'?????', 00H, '?', 00H
$SG208320 DB	'?????', 00H, '?', 00H
$SG208321 DB	'?????', 00H, '?', 00H
$SG208322 DB	'?????', 00H, '?', 00H
$SG208323 DB	'?????', 00H, '?', 00H
$SG208324 DB	'?????', 00H, '?', 00H
$SG208325 DB	'?????', 00H, '?', 00H
$SG208326 DB	'?????', 00H, '?', 00H
$SG208327 DB	'?????', 00H, '?', 00H
$SG208328 DB	'?????', 00H, '?', 00H
$SG208329 DB	'?????', 00H, '?', 00H
$SG208330 DB	'?????', 00H, '?', 00H
$SG208331 DB	'?????', 00H, '?', 00H
$SG208332 DB	'?????', 00H, '?', 00H
$SG208333 DB	'?????', 00H, '?', 00H
$SG208334 DB	'?????', 00H, '?', 00H
$SG208335 DB	'?????', 00H, '?', 00H
$SG208336 DB	'?????', 00H, '?', 00H
$SG208337 DB	'?????', 00H, '?', 00H
$SG208338 DB	'?????', 00H, '?', 00H
$SG208339 DB	'?????', 00H, '?', 00H
$SG208340 DB	'?????', 00H, '?', 00H
$SG208341 DB	'?????', 00H, '?', 00H
$SG208342 DB	'?????', 00H, '?', 00H
$SG208343 DB	'?????', 00H, '?', 00H
$SG208344 DB	'?????', 00H, '?', 00H
$SG208345 DB	'?????', 00H, '?', 00H
$SG208346 DB	'?????', 00H, '?', 00H
$SG208347 DB	'?????', 00H, '?', 00H
$SG208348 DB	'?????', 00H, '?', 00H
$SG208349 DB	'?????', 00H, '?', 00H
$SG208350 DB	'?????', 00H, '?', 00H
$SG208351 DB	'?????', 00H, '?', 00H
$SG208352 DB	'?????', 00H, '?', 00H
$SG208353 DB	'?????', 00H, '?', 00H
$SG208354 DB	'?????', 00H, '?', 00H
$SG208355 DB	'?????', 00H, '?', 00H
$SG208356 DB	'?????', 00H, '?', 00H
$SG208357 DB	'?????', 00H, '?', 00H
$SG208358 DB	'?????', 00H, '?', 00H
$SG208359 DB	'?????', 00H, '?', 00H
$SG208360 DB	'?????', 00H, '?', 00H
$SG208361 DB	'?????', 00H, '?', 00H
$SG208362 DB	'?????', 00H, '?', 00H
$SG208363 DB	'?????', 00H, '?', 00H
$SG208364 DB	'?????', 00H, '?', 00H
$SG208365 DB	'?????', 00H, '?', 00H
$SG208366 DB	'?????', 00H, '?', 00H
$SG208367 DB	'?????', 00H, '?', 00H
$SG208368 DB	'?????', 00H, '?', 00H
$SG208369 DB	'?????', 00H, '?', 00H
$SG208370 DB	'?????', 00H, '?', 00H
$SG208371 DB	'?????', 00H, '?', 00H
$SG208372 DB	'?????', 00H, '?', 00H
$SG208373 DB	'?????', 00H, '?', 00H
$SG208374 DB	'?????', 00H, '?', 00H
$SG208375 DB	'?????', 00H, '?', 00H
$SG208376 DB	'?????', 00H, '?', 00H
$SG208377 DB	'?????', 00H, '?', 00H
$SG208378 DB	'?????', 00H, '?', 00H
$SG208379 DB	'?????', 00H, '?', 00H
$SG208380 DB	'?????', 00H, '?', 00H
$SG208381 DB	'?????', 00H, '?', 00H
$SG208382 DB	'?????', 00H, '?', 00H
$SG208383 DB	'?????', 00H, '?', 00H
$SG208384 DB	'?????', 00H, '?', 00H
$SG208385 DB	'?????', 00H, '?', 00H
$SG208386 DB	'?????', 00H, '?', 00H
$SG208387 DB	'?????', 00H, '?', 00H
$SG208388 DB	'?????', 00H, '?', 00H
$SG208389 DB	'?????', 00H, '?', 00H
$SG208390 DB	'?????', 00H, '?', 00H
$SG208391 DB	'?????', 00H, '?', 00H
$SG208392 DB	'?????', 00H, '?', 00H
$SG208393 DB	'?????', 00H, '?', 00H
$SG208394 DB	'?????', 00H, '?', 00H
$SG208395 DB	'?????', 00H, '?', 00H
$SG208396 DB	'?????', 00H, '?', 00H
$SG208397 DB	'?????', 00H, '?', 00H
$SG208398 DB	'?????', 00H, '?', 00H
$SG208399 DB	'?????', 00H, '?', 00H
$SG208400 DB	'?????', 00H, '?', 00H
$SG208401 DB	'?????', 00H, '?', 00H
$SG208402 DB	'?????', 00H, '?', 00H
$SG208403 DB	'?????', 00H, '?', 00H
$SG208404 DB	'?????', 00H, '?', 00H
$SG208405 DB	'?????', 00H, '?', 00H
$SG208406 DB	'?????', 00H, '?', 00H
$SG208407 DB	'?????', 00H, '?', 00H
$SG208408 DB	'?????', 00H, '?', 00H
$SG208409 DB	'?????', 00H, '?', 00H
$SG208410 DB	'?????', 00H, '?', 00H
$SG208411 DB	'?????', 00H, '?', 00H
$SG208412 DB	'?????', 00H, '?', 00H
$SG208413 DB	'?????', 00H, '?', 00H
$SG208414 DB	'?????', 00H, '?', 00H
$SG208415 DB	'?????', 00H, '?', 00H
$SG208416 DB	'?????', 00H, '?', 00H
$SG208417 DB	'?????', 00H, '?', 00H
$SG208418 DB	'?????', 00H, '?', 00H
$SG208419 DB	'?????', 00H, '?', 00H
$SG208420 DB	'?????', 00H, '?', 00H
$SG208421 DB	'?????', 00H, '?', 00H
$SG208422 DB	'?????', 00H, '?', 00H
$SG208423 DB	'?????', 00H, '?', 00H
$SG208424 DB	'?????', 00H, '?', 00H
$SG208425 DB	'?????', 00H, '?', 00H
$SG208426 DB	'?????', 00H, '?', 00H
$SG208427 DB	'?????', 00H, '?', 00H
$SG208428 DB	'?????', 00H, '?', 00H
$SG208429 DB	'?????', 00H, '?', 00H
$SG208430 DB	'?????', 00H, '?', 00H
$SG208431 DB	'?????', 00H, '?', 00H
$SG208432 DB	'?????', 00H, '?', 00H
$SG208433 DB	'?????', 00H, '?', 00H
$SG208434 DB	'?????', 00H, '?', 00H
$SG208435 DB	'?????', 00H, '?', 00H
$SG208436 DB	'?????', 00H, '?', 00H
$SG208437 DB	'?????', 00H, '?', 00H
$SG208438 DB	'?????', 00H, '?', 00H
$SG208439 DB	'?????', 00H, '?', 00H
$SG208440 DB	'?????', 00H, '?', 00H
$SG200248 DB	'?????', 00H, '?', 00H
$SG208441 DB	'?????', 00H, '?', 00H
$SG200249 DB	'PR', 00H, 'program_return', 00H
	ORG $+6
$SG208442 DB	'?????', 00H, '?', 00H
$SG200250 DB	'UPT', 00H, 'update_tree', 00H
$SG208443 DB	'?????', 00H, '?', 00H
$SG200251 DB	'?????', 00H, '?', 00H
$SG208444 DB	'?????', 00H, '?', 00H
$SG200252 DB	'PTFF', 00H, 'perform_timing_facility_function', 00H
	ORG $+2
$SG208445 DB	'?????', 00H, '?', 00H
$SG200253 DB	'?????', 00H, '?', 00H
$SG208446 DB	'?????', 00H, '?', 00H
$SG200254 DB	'?????', 00H, '?', 00H
$SG208447 DB	'?????', 00H, '?', 00H
$SG200255 DB	'SCKPF', 00H, 'set_clock_programmable_field', 00H
	ORG $+5
$SG208448 DB	'?????', 00H, '?', 00H
$SG200256 DB	'?????', 00H, '?', 00H
$SG208449 DB	'?????', 00H, '?', 00H
$SG200257 DB	'?????', 00H, '?', 00H
$SG208450 DB	'?????', 00H, '?', 00H
$SG200258 DB	'PFPO', 00H, 'perform_floating_point_operation', 00H
	ORG $+2
$SG208451 DB	'?????', 00H, '?', 00H
$SG200259 DB	'TAM', 00H, 'test_addressing_mode', 00H
	ORG $+7
$SG208452 DB	'?????', 00H, '?', 00H
$SG200260 DB	'SAM24', 00H, 'set_addressing_mode_24', 00H
	ORG $+3
$SG208453 DB	'?????', 00H, '?', 00H
$SG200261 DB	'SAM31', 00H, 'set_addressing_mode_31', 00H
	ORG $+3
$SG208454 DB	'?????', 00H, '?', 00H
$SG200262 DB	'SAM64', 00H, 'set_addressing_mode_64', 00H
	ORG $+3
$SG208455 DB	'?????', 00H, '?', 00H
$SG200263 DB	'?????', 00H, '?', 00H
$SG208456 DB	'?????', 00H, '?', 00H
$SG200264 DB	'?????', 00H, '?', 00H
$SG208457 DB	'?????', 00H, '?', 00H
$SG200265 DB	'?????', 00H, '?', 00H
$SG208458 DB	'?????', 00H, '?', 00H
$SG200266 DB	'?????', 00H, '?', 00H
$SG208459 DB	'?????', 00H, '?', 00H
$SG200267 DB	'?????', 00H, '?', 00H
$SG208460 DB	'?????', 00H, '?', 00H
$SG200268 DB	'?????', 00H, '?', 00H
$SG208461 DB	'?????', 00H, '?', 00H
$SG200269 DB	'?????', 00H, '?', 00H
$SG208462 DB	'?????', 00H, '?', 00H
$SG200270 DB	'?????', 00H, '?', 00H
$SG208463 DB	'?????', 00H, '?', 00H
$SG200271 DB	'?????', 00H, '?', 00H
$SG208464 DB	'?????', 00H, '?', 00H
$SG200272 DB	'?????', 00H, '?', 00H
$SG208465 DB	'?????', 00H, '?', 00H
$SG200273 DB	'?????', 00H, '?', 00H
$SG208466 DB	'?????', 00H, '?', 00H
$SG200274 DB	'?????', 00H, '?', 00H
$SG208467 DB	'?????', 00H, '?', 00H
$SG200275 DB	'?????', 00H, '?', 00H
$SG208468 DB	'?????', 00H, '?', 00H
$SG200276 DB	'?????', 00H, '?', 00H
$SG208469 DB	'?????', 00H, '?', 00H
$SG200277 DB	'?????', 00H, '?', 00H
$SG208470 DB	'?????', 00H, '?', 00H
$SG200278 DB	'?????', 00H, '?', 00H
$SG208471 DB	'?????', 00H, '?', 00H
$SG200279 DB	'?????', 00H, '?', 00H
$SG208472 DB	'?????', 00H, '?', 00H
$SG200280 DB	'?????', 00H, '?', 00H
$SG208473 DB	'?????', 00H, '?', 00H
$SG200281 DB	'?????', 00H, '?', 00H
$SG208474 DB	'?????', 00H, '?', 00H
$SG200282 DB	'?????', 00H, '?', 00H
$SG208475 DB	'?????', 00H, '?', 00H
$SG200283 DB	'?????', 00H, '?', 00H
$SG208476 DB	'?????', 00H, '?', 00H
$SG200284 DB	'?????', 00H, '?', 00H
$SG208477 DB	'?????', 00H, '?', 00H
$SG200285 DB	'?????', 00H, '?', 00H
$SG208478 DB	'?????', 00H, '?', 00H
$SG200286 DB	'?????', 00H, '?', 00H
$SG208479 DB	'?????', 00H, '?', 00H
$SG200287 DB	'?????', 00H, '?', 00H
$SG208480 DB	'?????', 00H, '?', 00H
$SG200288 DB	'?????', 00H, '?', 00H
$SG208481 DB	'?????', 00H, '?', 00H
$SG200289 DB	'?????', 00H, '?', 00H
$SG208482 DB	'?????', 00H, '?', 00H
$SG200290 DB	'?????', 00H, '?', 00H
$SG208483 DB	'?????', 00H, '?', 00H
$SG200291 DB	'?????', 00H, '?', 00H
$SG208484 DB	'?????', 00H, '?', 00H
$SG200292 DB	'?????', 00H, '?', 00H
$SG208485 DB	'?????', 00H, '?', 00H
$SG200293 DB	'?????', 00H, '?', 00H
$SG208486 DB	'?????', 00H, '?', 00H
$SG200294 DB	'?????', 00H, '?', 00H
$SG208487 DB	'?????', 00H, '?', 00H
$SG200295 DB	'?????', 00H, '?', 00H
$SG208488 DB	'?????', 00H, '?', 00H
$SG200296 DB	'?????', 00H, '?', 00H
$SG208489 DB	'?????', 00H, '?', 00H
$SG200297 DB	'?????', 00H, '?', 00H
$SG208490 DB	'?????', 00H, '?', 00H
$SG200298 DB	'?????', 00H, '?', 00H
$SG208491 DB	'?????', 00H, '?', 00H
$SG200299 DB	'?????', 00H, '?', 00H
$SG208492 DB	'?????', 00H, '?', 00H
$SG200300 DB	'?????', 00H, '?', 00H
$SG208493 DB	'?????', 00H, '?', 00H
$SG200301 DB	'?????', 00H, '?', 00H
$SG208494 DB	'?????', 00H, '?', 00H
$SG200302 DB	'?????', 00H, '?', 00H
$SG208495 DB	'?????', 00H, '?', 00H
$SG200303 DB	'?????', 00H, '?', 00H
$SG208496 DB	'?????', 00H, '?', 00H
$SG200304 DB	'?????', 00H, '?', 00H
$SG208497 DB	'?????', 00H, '?', 00H
$SG200305 DB	'?????', 00H, '?', 00H
$SG208498 DB	'?????', 00H, '?', 00H
$SG200306 DB	'?????', 00H, '?', 00H
$SG208499 DB	'?????', 00H, '?', 00H
$SG200307 DB	'?????', 00H, '?', 00H
$SG208500 DB	'?????', 00H, '?', 00H
$SG200308 DB	'?????', 00H, '?', 00H
$SG208501 DB	'?????', 00H, '?', 00H
$SG200309 DB	'?????', 00H, '?', 00H
$SG208502 DB	'?????', 00H, '?', 00H
$SG200310 DB	'?????', 00H, '?', 00H
$SG208503 DB	'?????', 00H, '?', 00H
$SG200311 DB	'?????', 00H, '?', 00H
$SG208504 DB	'?????', 00H, '?', 00H
$SG200312 DB	'?????', 00H, '?', 00H
$SG208505 DB	'?????', 00H, '?', 00H
$SG200313 DB	'?????', 00H, '?', 00H
$SG208506 DB	'?????', 00H, '?', 00H
$SG200314 DB	'?????', 00H, '?', 00H
$SG208507 DB	'?????', 00H, '?', 00H
$SG200315 DB	'?????', 00H, '?', 00H
$SG208508 DB	'?????', 00H, '?', 00H
$SG200316 DB	'?????', 00H, '?', 00H
$SG208509 DB	'?????', 00H, '?', 00H
$SG200317 DB	'?????', 00H, '?', 00H
$SG208510 DB	'?????', 00H, '?', 00H
$SG200318 DB	'?????', 00H, '?', 00H
$SG208511 DB	'?????', 00H, '?', 00H
$SG200319 DB	'?????', 00H, '?', 00H
$SG208512 DB	'?????', 00H, '?', 00H
$SG200320 DB	'?????', 00H, '?', 00H
$SG208513 DB	'?????', 00H, '?', 00H
$SG200321 DB	'?????', 00H, '?', 00H
$SG208514 DB	'?????', 00H, '?', 00H
$SG200322 DB	'?????', 00H, '?', 00H
$SG208515 DB	'?????', 00H, '?', 00H
$SG200323 DB	'?????', 00H, '?', 00H
$SG208516 DB	'?????', 00H, '?', 00H
$SG200324 DB	'?????', 00H, '?', 00H
$SG208517 DB	'?????', 00H, '?', 00H
$SG200325 DB	'?????', 00H, '?', 00H
$SG208518 DB	'?????', 00H, '?', 00H
$SG200326 DB	'?????', 00H, '?', 00H
$SG208519 DB	'?????', 00H, '?', 00H
$SG200327 DB	'?????', 00H, '?', 00H
$SG208520 DB	'?????', 00H, '?', 00H
$SG200328 DB	'?????', 00H, '?', 00H
$SG208521 DB	'?????', 00H, '?', 00H
$SG200329 DB	'?????', 00H, '?', 00H
$SG208522 DB	'?????', 00H, '?', 00H
$SG200330 DB	'?????', 00H, '?', 00H
$SG208523 DB	'?????', 00H, '?', 00H
$SG200331 DB	'?????', 00H, '?', 00H
$SG208524 DB	'?????', 00H, '?', 00H
$SG200332 DB	'?????', 00H, '?', 00H
$SG208525 DB	'?????', 00H, '?', 00H
$SG200333 DB	'?????', 00H, '?', 00H
$SG208526 DB	'?????', 00H, '?', 00H
$SG200334 DB	'?????', 00H, '?', 00H
$SG183950 DB	'?????', 00H, '?', 00H
$SG208527 DB	'?????', 00H, '?', 00H
$SG200335 DB	'?????', 00H, '?', 00H
$SG183951 DB	'?????', 00H, '?', 00H
$SG208528 DB	'?????', 00H, '?', 00H
$SG200336 DB	'?????', 00H, '?', 00H
$SG183952 DB	'STIDP', 00H, 'store_cpu_id', 00H
	ORG $+5
$SG208529 DB	'?????', 00H, '?', 00H
$SG200337 DB	'?????', 00H, '?', 00H
$SG183953 DB	'STIDC', 00H, 'store_channel_id', 00H
	ORG $+1
$SG208530 DB	'?????', 00H, '?', 00H
$SG200338 DB	'?????', 00H, '?', 00H
$SG183954 DB	'SCK', 00H, 'set_clock', 00H
	ORG $+2
$SG208531 DB	'?????', 00H, '?', 00H
$SG200339 DB	'?????', 00H, '?', 00H
$SG183955 DB	'STCK', 00H, 'store_clock', 00H
	ORG $+7
$SG208532 DB	'?????', 00H, '?', 00H
$SG200340 DB	'?????', 00H, '?', 00H
$SG183956 DB	'SCKC', 00H, 'set_clock_comparator', 00H
	ORG $+6
$SG208533 DB	'?????', 00H, '?', 00H
$SG200341 DB	'?????', 00H, '?', 00H
$SG183957 DB	'STCKC', 00H, 'store_clock_comparator', 00H
	ORG $+3
$SG208534 DB	'?????', 00H, '?', 00H
$SG200342 DB	'?????', 00H, '?', 00H
$SG183958 DB	'SPT', 00H, 'set_cpu_timer', 00H
	ORG $+6
$SG208535 DB	'?????', 00H, '?', 00H
$SG200343 DB	'?????', 00H, '?', 00H
$SG183959 DB	'STPT', 00H, 'store_cpu_timer', 00H
	ORG $+3
$SG208536 DB	'?????', 00H, '?', 00H
$SG200344 DB	'?????', 00H, '?', 00H
$SG183960 DB	'SPKA', 00H, 'set_psw_key_from_address', 00H
	ORG $+2
$SG208537 DB	'?????', 00H, '?', 00H
$SG200345 DB	'?????', 00H, '?', 00H
$SG183961 DB	'IPK', 00H, 'insert_psw_key', 00H
	ORG $+5
$SG208538 DB	'?????', 00H, '?', 00H
$SG200346 DB	'?????', 00H, '?', 00H
$SG183962 DB	'?????', 00H, '?', 00H
$SG208539 DB	'?????', 00H, '?', 00H
$SG200347 DB	'?????', 00H, '?', 00H
$SG183963 DB	'PTLB', 00H, 'purge_translation_lookaside_buffer', 00H
$SG208540 DB	'?????', 00H, '?', 00H
$SG200348 DB	'?????', 00H, '?', 00H
$SG183964 DB	'?????', 00H, '?', 00H
$SG208541 DB	'?????', 00H, '?', 00H
$SG200349 DB	'?????', 00H, '?', 00H
$SG183965 DB	'?????', 00H, '?', 00H
$SG208542 DB	'?????', 00H, '?', 00H
$SG200350 DB	'?????', 00H, '?', 00H
$SG183966 DB	'SPX', 00H, 'set_prefix', 00H
	ORG $+1
$SG208543 DB	'?????', 00H, '?', 00H
$SG200351 DB	'?????', 00H, '?', 00H
$SG183967 DB	'STPX', 00H, 'store_prefix', 00H
	ORG $+6
$SG208544 DB	'?????', 00H, '?', 00H
$SG200352 DB	'?????', 00H, '?', 00H
$SG183968 DB	'STAP', 00H, 'store_cpu_address', 00H
	ORG $+1
$SG208545 DB	'?????', 00H, '?', 00H
$SG200353 DB	'?????', 00H, '?', 00H
$SG183969 DB	'RRB', 00H, 'reset_reference_bit', 00H
$SG208546 DB	'?????', 00H, '?', 00H
$SG200354 DB	'?????', 00H, '?', 00H
$SG183970 DB	'SIE', 00H, 'start_interpretive_execution', 00H
	ORG $+7
$SG208547 DB	'?????', 00H, '?', 00H
$SG200355 DB	'?????', 00H, '?', 00H
$SG183971 DB	'?????', 00H, '?', 00H
$SG208548 DB	'?????', 00H, '?', 00H
$SG200356 DB	'?????', 00H, '?', 00H
$SG183972 DB	'?????', 00H, '?', 00H
$SG208549 DB	'?????', 00H, '?', 00H
$SG200357 DB	'?????', 00H, '?', 00H
$SG183973 DB	'?????', 00H, '?', 00H
$SG208550 DB	'?????', 00H, '?', 00H
$SG200358 DB	'?????', 00H, '?', 00H
$SG183974 DB	'PC', 00H, 'program_call', 00H
$SG208551 DB	'?????', 00H, '?', 00H
$SG200359 DB	'?????', 00H, '?', 00H
$SG183975 DB	'SAC', 00H, 'set_address_space_control', 00H
	ORG $+2
$SG208552 DB	'?????', 00H, '?', 00H
$SG200360 DB	'?????', 00H, '?', 00H
$SG183976 DB	'CFC', 00H, 'compare_and_form_codeword', 00H
	ORG $+2
$SG208553 DB	'?????', 00H, '?', 00H
$SG200361 DB	'?????', 00H, '?', 00H
$SG183977 DB	'?????', 00H, '?', 00H
$SG208554 DB	'?????', 00H, '?', 00H
$SG200362 DB	'?????', 00H, '?', 00H
$SG183978 DB	'?????', 00H, '?', 00H
$SG208555 DB	'?????', 00H, '?', 00H
$SG200363 DB	'?????', 00H, '?', 00H
$SG183979 DB	'?????', 00H, '?', 00H
$SG208556 DB	'?????', 00H, '?', 00H
$SG200364 DB	'?????', 00H, '?', 00H
$SG183980 DB	'?????', 00H, '?', 00H
$SG208557 DB	'?????', 00H, '?', 00H
$SG200365 DB	'?????', 00H, '?', 00H
$SG183981 DB	'?????', 00H, '?', 00H
$SG208558 DB	'?????', 00H, '?', 00H
$SG200366 DB	'?????', 00H, '?', 00H
$SG183982 DB	'SERVC', 00H, 'service_call', 00H
	ORG $+5
$SG208559 DB	'?????', 00H, '?', 00H
$SG200367 DB	'?????', 00H, '?', 00H
$SG183983 DB	'IPTE', 00H, 'invalidate_page_table_entry', 00H
	ORG $+7
$SG208560 DB	'?????', 00H, '?', 00H
$SG200368 DB	'?????', 00H, '?', 00H
$SG183984 DB	'IPM', 00H, 'insert_program_mask', 00H
$SG208561 DB	'?????', 00H, '?', 00H
$SG200369 DB	'?????', 00H, '?', 00H
$SG183985 DB	'IVSK', 00H, 'insert_virtual_storage_key', 00H
$SG208562 DB	'?????', 00H, '?', 00H
$SG200370 DB	'?????', 00H, '?', 00H
$SG183986 DB	'IAC', 00H, 'insert_address_space_control', 00H
	ORG $+7
$SG208563 DB	'?????', 00H, '?', 00H
$SG200371 DB	'?????', 00H, '?', 00H
$SG183987 DB	'SSAR', 00H, 'set_secondary_asn', 00H
	ORG $+1
$SG208564 DB	'?????', 00H, '?', 00H
$SG200372 DB	'?????', 00H, '?', 00H
$SG183988 DB	'EPAR', 00H, 'extract_primary_asn', 00H
	ORG $+7
$SG208565 DB	'?????', 00H, '?', 00H
$SG200373 DB	'?????', 00H, '?', 00H
$SG183989 DB	'ESAR', 00H, 'extract_secondary_asn', 00H
	ORG $+5
$SG208566 DB	'?????', 00H, '?', 00H
$SG200374 DB	'?????', 00H, '?', 00H
$SG183990 DB	'PT', 00H, 'program_transfer', 00H
	ORG $+4
$SG208567 DB	'?????', 00H, '?', 00H
$SG200375 DB	'?????', 00H, '?', 00H
$SG183991 DB	'ISKE', 00H, 'insert_storage_key_extended', 00H
	ORG $+7
$SG200376 DB	'?????', 00H, '?', 00H
$SG183992 DB	'RRBE', 00H, 'reset_reference_bit_extended', 00H
	ORG $+6
$SG200377 DB	'?????', 00H, '?', 00H
$SG183993 DB	'SSKE', 00H, 'set_storage_key_extended', 00H
	ORG $+2
$SG200378 DB	'?????', 00H, '?', 00H
$SG183994 DB	'TB', 00H, 'test_block', 00H
	ORG $+2
$SG200379 DB	'?????', 00H, '?', 00H
$SG183995 DB	'DXR', 00H, 'divide_float_ext_reg', 00H
	ORG $+7
$SG200380 DB	'?????', 00H, '?', 00H
$SG183996 DB	'PGIN', 00H, 'page_in', 00H
	ORG $+3
$SG200381 DB	'?????', 00H, '?', 00H
$SG183997 DB	'PGOUT', 00H, 'page_out', 00H
	ORG $+1
$SG200382 DB	'?????', 00H, '?', 00H
$SG183998 DB	'CSCH', 00H, 'clear_subchannel', 00H
	ORG $+2
$SG200383 DB	'?????', 00H, '?', 00H
$SG183999 DB	'HSCH', 00H, 'halt_subchannel', 00H
	ORG $+3
$SG200384 DB	'?????', 00H, '?', 00H
$SG184000 DB	'MSCH', 00H, 'modify_subchannel', 00H
	ORG $+1
$SG200385 DB	'?????', 00H, '?', 00H
$SG184001 DB	'SSCH', 00H, 'start_subchannel', 00H
	ORG $+2
$SG200386 DB	'?????', 00H, '?', 00H
$SG184002 DB	'STSCH', 00H, 'store_subchannel', 00H
	ORG $+1
$SG200387 DB	'?????', 00H, '?', 00H
$SG184003 DB	'TSCH', 00H, 'test_subchannel', 00H
	ORG $+3
$SG200388 DB	'?????', 00H, '?', 00H
$SG184004 DB	'TPI', 00H, 'test_pending_interruption', 00H
	ORG $+2
$SG200389 DB	'?????', 00H, '?', 00H
$SG184005 DB	'SAL', 00H, 'set_address_limit', 00H
	ORG $+2
$SG200390 DB	'?????', 00H, '?', 00H
$SG184006 DB	'RSCH', 00H, 'resume_subchannel', 00H
	ORG $+1
$SG200391 DB	'?????', 00H, '?', 00H
$SG184007 DB	'STCRW', 00H, 'store_channel_report_word', 00H
$SG200392 DB	'?????', 00H, '?', 00H
$SG184008 DB	'STCPS', 00H, 'store_channel_path_status', 00H
$SG200393 DB	'?????', 00H, '?', 00H
$SG184009 DB	'RCHP', 00H, 'reset_channel_path', 00H
$SG200394 DB	'?????', 00H, '?', 00H
$SG184010 DB	'SCHM', 00H, 'set_channel_monitor', 00H
	ORG $+7
$SG200395 DB	'?????', 00H, '?', 00H
$SG184011 DB	'STZP', 00H, 'store_zone_parameter', 00H
	ORG $+6
$SG200396 DB	'?????', 00H, '?', 00H
$SG184012 DB	'SZP', 00H, 'set_zone_parameter', 00H
	ORG $+1
$SG200397 DB	'?????', 00H, '?', 00H
$SG184013 DB	'TPZI', 00H, 'test_pending_zone_interrupt', 00H
	ORG $+7
$SG200398 DB	'?????', 00H, '?', 00H
$SG184014 DB	'BAKR', 00H, 'branch_and_stack', 00H
	ORG $+2
$SG200399 DB	'?????', 00H, '?', 00H
$SG184015 DB	'CKSM', 00H, 'checksum', 00H
	ORG $+2
$SG200400 DB	'?????', 00H, '?', 00H
$SG184016 DB	'Assist', 00H, 'add_frr', 00H
	ORG $+1
$SG200401 DB	'?????', 00H, '?', 00H
$SG184017 DB	'?????', 00H, '?', 00H
$SG200402 DB	'?????', 00H, '?', 00H
$SG184018 DB	'SQDR', 00H, 'squareroot_float_long_reg', 00H
	ORG $+1
$SG200403 DB	'?????', 00H, '?', 00H
$SG184019 DB	'SQER', 00H, 'squareroot_float_short_reg', 00H
$SG200404 DB	'?????', 00H, '?', 00H
$SG184020 DB	'STURA', 00H, 'store_using_real_address', 00H
	ORG $+1
$SG200405 DB	'?????', 00H, '?', 00H
$SG184021 DB	'MSTA', 00H, 'modify_stacked_state', 00H
	ORG $+6
$SG200406 DB	'?????', 00H, '?', 00H
$SG184022 DB	'PALB', 00H, 'purge_accesslist_lookaside_buffer', 00H
	ORG $+1
$SG200407 DB	'?????', 00H, '?', 00H
$SG184023 DB	'EREG', 00H, 'extract_stacked_registers', 00H
	ORG $+1
$SG200408 DB	'?????', 00H, '?', 00H
$SG184024 DB	'ESTA', 00H, 'extract_stacked_state', 00H
	ORG $+5
$SG200409 DB	'?????', 00H, '?', 00H
$SG184025 DB	'LURA', 00H, 'load_using_real_address', 00H
	ORG $+3
$SG200410 DB	'?????', 00H, '?', 00H
$SG184026 DB	'TAR', 00H, 'test_access', 00H
$SG200411 DB	'?????', 00H, '?', 00H
$SG184027 DB	'CPYA', 00H, 'copy_access', 00H
	ORG $+7
$SG200412 DB	'?????', 00H, '?', 00H
$SG184028 DB	'SAR', 00H, 'set_access_register', 00H
$SG200413 DB	'?????', 00H, '?', 00H
$SG184029 DB	'EAR', 00H, 'extract_access_register', 00H
	ORG $+4
$SG200414 DB	'?????', 00H, '?', 00H
$SG184030 DB	'CSP', 00H, 'compare_and_swap_and_purge', 00H
	ORG $+1
$SG200415 DB	'?????', 00H, '?', 00H
$SG184031 DB	'?????', 00H, '?', 00H
$SG200416 DB	'?????', 00H, '?', 00H
$SG184032 DB	'MSR', 00H, 'multiply_single_register', 00H
	ORG $+3
$SG200417 DB	'?????', 00H, '?', 00H
$SG184033 DB	'?????', 00H, '?', 00H
$SG200418 DB	'?????', 00H, '?', 00H
$SG184034 DB	'MVPG', 00H, 'move_page', 00H
	ORG $+1
$SG200419 DB	'?????', 00H, '?', 00H
$SG184035 DB	'MVST', 00H, 'move_string', 00H
	ORG $+7
$SG200420 DB	'?????', 00H, '?', 00H
$SG184036 DB	'STHYI', 00H, 'store_hypervisor_information', 00H
	ORG $+5
$SG200421 DB	'?????', 00H, '?', 00H
$SG184037 DB	'CUSE', 00H, 'compare_until_substring_equal', 00H
	ORG $+5
$SG200422 DB	'?????', 00H, '?', 00H
$SG184038 DB	'BSG', 00H, 'branch_in_subspace_group', 00H
	ORG $+3
$SG200423 DB	'?????', 00H, '?', 00H
$SG184039 DB	'IESBE', 00H, 'invalidate_expanded_storage_block_entry', 00H
	ORG $+2
$SG200424 DB	'?????', 00H, '?', 00H
$SG184040 DB	'BSA', 00H, 'branch_and_set_authority', 00H
	ORG $+3
$SG200425 DB	'?????', 00H, '?', 00H
$SG184041 DB	'?????', 00H, '?', 00H
$SG200426 DB	'?????', 00H, '?', 00H
$SG184042 DB	'?????', 00H, '?', 00H
$SG200427 DB	'?????', 00H, '?', 00H
$SG184043 DB	'CLST', 00H, 'compare_logical_string', 00H
	ORG $+4
$SG200428 DB	'?????', 00H, '?', 00H
$SG184044 DB	'SRST', 00H, 'search_string', 00H
	ORG $+5
$SG200429 DB	'?????', 00H, '?', 00H
$SG184045 DB	'CHSC', 00H, 'channel_subsystem_call', 00H
	ORG $+4
$SG200430 DB	'?????', 00H, '?', 00H
$SG184046 DB	'?????', 00H, '?', 00H
$SG200431 DB	'?????', 00H, '?', 00H
$SG184047 DB	'?????', 00H, '?', 00H
$SG200432 DB	'?????', 00H, '?', 00H
$SG184048 DB	'LKPG', 00H, 'lock_page', 00H
	ORG $+1
$SG200433 DB	'?????', 00H, '?', 00H
$SG184049 DB	'CMPSC', 00H, 'cmpsc_2012', 00H
	ORG $+7
$SG200434 DB	'?????', 00H, '?', 00H
$SG184050 DB	'?????', 00H, '?', 00H
$SG200435 DB	'?????', 00H, '?', 00H
$SG184051 DB	'SVS', 00H, 'set_vector_summary', 00H
	ORG $+1
$SG200436 DB	'?????', 00H, '?', 00H
$SG184052 DB	'?????', 00H, '?', 00H
$SG200437 DB	'?????', 00H, '?', 00H
$SG184053 DB	'?????', 00H, '?', 00H
$SG200438 DB	'?????', 00H, '?', 00H
$SG184054 DB	'?????', 00H, '?', 00H
$SG200439 DB	'?????', 00H, '?', 00H
$SG184055 DB	'?????', 00H, '?', 00H
$SG200440 DB	'?????', 00H, '?', 00H
$SG184056 DB	'?????', 00H, '?', 00H
$SG200441 DB	'?????', 00H, '?', 00H
$SG184057 DB	'?????', 00H, '?', 00H
$SG200442 DB	'?????', 00H, '?', 00H
$SG184058 DB	'?????', 00H, '?', 00H
$SG200443 DB	'?????', 00H, '?', 00H
$SG184059 DB	'?????', 00H, '?', 00H
$SG200444 DB	'?????', 00H, '?', 00H
$SG184060 DB	'?????', 00H, '?', 00H
$SG200445 DB	'?????', 00H, '?', 00H
$SG184061 DB	'?????', 00H, '?', 00H
$SG200446 DB	'?????', 00H, '?', 00H
$SG184062 DB	'?????', 00H, '?', 00H
$SG200447 DB	'?????', 00H, '?', 00H
$SG184063 DB	'?????', 00H, '?', 00H
$SG200448 DB	'?????', 00H, '?', 00H
$SG184064 DB	'?????', 00H, '?', 00H
$SG200449 DB	'?????', 00H, '?', 00H
$SG184065 DB	'?????', 00H, '?', 00H
$SG200450 DB	'?????', 00H, '?', 00H
$SG184066 DB	'SIGA', 00H, 'signal_adapter', 00H
	ORG $+4
$SG200451 DB	'?????', 00H, '?', 00H
$SG184067 DB	'?????', 00H, '?', 00H
$SG200452 DB	'?????', 00H, '?', 00H
$SG184068 DB	'XSCH', 00H, 'cancel_subchannel', 00H
	ORG $+1
$SG200453 DB	'?????', 00H, '?', 00H
$SG184069 DB	'RP', 00H, 'resume_program', 00H
	ORG $+6
$SG200454 DB	'?????', 00H, '?', 00H
$SG184070 DB	'STCKE', 00H, 'store_clock_extended', 00H
	ORG $+5
$SG200455 DB	'?????', 00H, '?', 00H
$SG184071 DB	'SACF', 00H, 'set_address_space_control', 00H
	ORG $+1
$SG200456 DB	'?????', 00H, '?', 00H
$SG184072 DB	'?????', 00H, '?', 00H
$SG200457 DB	'?????', 00H, '?', 00H
$SG184073 DB	'?????', 00H, '?', 00H
$SG200458 DB	'?????', 00H, '?', 00H
$SG184074 DB	'STCKF', 00H, 'store_clock', 00H
	ORG $+6
$SG200459 DB	'?????', 00H, '?', 00H
$SG184075 DB	'STSI', 00H, 'store_system_information', 00H
	ORG $+2
$SG200460 DB	'?????', 00H, '?', 00H
$SG184076 DB	'?????', 00H, '?', 00H
$SG200461 DB	'?????', 00H, '?', 00H
$SG184077 DB	'?????', 00H, '?', 00H
$SG200462 DB	'?????', 00H, '?', 00H
$SG184078 DB	'LPP', 00H, 'load_program_parameter', 00H
	ORG $+5
$SG200463 DB	'?????', 00H, '?', 00H
$SG184079 DB	'?????', 00H, '?', 00H
$SG200464 DB	'?????', 00H, '?', 00H
$SG184080 DB	'?????', 00H, '?', 00H
$SG200465 DB	'?????', 00H, '?', 00H
$SG184081 DB	'?????', 00H, '?', 00H
$SG200466 DB	'?????', 00H, '?', 00H
$SG184082 DB	'?????', 00H, '?', 00H
$SG200467 DB	'?????', 00H, '?', 00H
$SG184083 DB	'?????', 00H, '?', 00H
$SG200468 DB	'?????', 00H, '?', 00H
$SG184084 DB	'?????', 00H, '?', 00H
$SG200469 DB	'?????', 00H, '?', 00H
$SG184085 DB	'?????', 00H, '?', 00H
$SG200470 DB	'?????', 00H, '?', 00H
$SG184086 DB	'?????', 00H, '?', 00H
$SG200471 DB	'?????', 00H, '?', 00H
$SG184087 DB	'?????', 00H, '?', 00H
$SG200472 DB	'?????', 00H, '?', 00H
$SG184088 DB	'?????', 00H, '?', 00H
$SG200473 DB	'?????', 00H, '?', 00H
$SG184089 DB	'?????', 00H, '?', 00H
$SG200474 DB	'?????', 00H, '?', 00H
$SG184090 DB	'?????', 00H, '?', 00H
$SG200475 DB	'?????', 00H, '?', 00H
$SG184091 DB	'?????', 00H, '?', 00H
$SG200476 DB	'?????', 00H, '?', 00H
$SG184092 DB	'?????', 00H, '?', 00H
$SG200477 DB	'?????', 00H, '?', 00H
$SG184093 DB	'?????', 00H, '?', 00H
$SG200478 DB	'?????', 00H, '?', 00H
$SG184094 DB	'?????', 00H, '?', 00H
$SG200479 DB	'?????', 00H, '?', 00H
$SG184095 DB	'?????', 00H, '?', 00H
$SG200480 DB	'?????', 00H, '?', 00H
$SG184096 DB	'?????', 00H, '?', 00H
$SG200481 DB	'?????', 00H, '?', 00H
$SG184097 DB	'?????', 00H, '?', 00H
$SG200482 DB	'?????', 00H, '?', 00H
$SG184098 DB	'?????', 00H, '?', 00H
$SG200483 DB	'?????', 00H, '?', 00H
$SG184099 DB	'?????', 00H, '?', 00H
$SG200484 DB	'?????', 00H, '?', 00H
$SG184100 DB	'?????', 00H, '?', 00H
$SG200485 DB	'?????', 00H, '?', 00H
$SG184101 DB	'?????', 00H, '?', 00H
$SG200486 DB	'?????', 00H, '?', 00H
$SG184102 DB	'?????', 00H, '?', 00H
$SG200487 DB	'?????', 00H, '?', 00H
$SG184103 DB	'SRNM', 00H, 'set_bfp_rounding_mode_2bit', 00H
$SG200488 DB	'?????', 00H, '?', 00H
$SG184104 DB	'?????', 00H, '?', 00H
$SG200489 DB	'?????', 00H, '?', 00H
$SG184105 DB	'?????', 00H, '?', 00H
$SG200490 DB	'?????', 00H, '?', 00H
$SG184106 DB	'STFPC', 00H, 'store_fpc', 00H
$SG200491 DB	'?????', 00H, '?', 00H
$SG184107 DB	'LFPC', 00H, 'load_fpc', 00H
	ORG $+2
$SG200492 DB	'?????', 00H, '?', 00H
$SG184108 DB	'?????', 00H, '?', 00H
$SG200493 DB	'?????', 00H, '?', 00H
$SG184109 DB	'?????', 00H, '?', 00H
$SG200494 DB	'?????', 00H, '?', 00H
$SG184110 DB	'?????', 00H, '?', 00H
$SG200495 DB	'?????', 00H, '?', 00H
$SG184111 DB	'?????', 00H, '?', 00H
$SG200496 DB	'?????', 00H, '?', 00H
$SG184112 DB	'?????', 00H, '?', 00H
$SG200497 DB	'?????', 00H, '?', 00H
$SG184113 DB	'?????', 00H, '?', 00H
$SG200498 DB	'?????', 00H, '?', 00H
$SG184114 DB	'?????', 00H, '?', 00H
$SG200499 DB	'?????', 00H, '?', 00H
$SG184115 DB	'TRE', 00H, 'translate_extended', 00H
	ORG $+1
$SG200500 DB	'?????', 00H, '?', 00H
$SG184116 DB	'CU21', 00H, 'convert_utf16_to_utf8', 00H
	ORG $+5
$SG200501 DB	'?????', 00H, '?', 00H
$SG184117 DB	'CU12', 00H, 'convert_utf8_to_utf16', 00H
	ORG $+5
$SG200502 DB	'?????', 00H, '?', 00H
$SG184118 DB	'?????', 00H, '?', 00H
$SG200503 DB	'TRAP2', 00H, 'trap2', 00H
	ORG $+4
$SG184119 DB	'?????', 00H, '?', 00H
$SG184120 DB	'?????', 00H, '?', 00H
$SG184121 DB	'?????', 00H, '?', 00H
$SG184122 DB	'?????', 00H, '?', 00H
$SG184123 DB	'?????', 00H, '?', 00H
$SG184124 DB	'?????', 00H, '?', 00H
$SG184125 DB	'?????', 00H, '?', 00H
$SG184126 DB	'STFLE', 00H, 'store_facility_list_extended', 00H
	ORG $+5
$SG184127 DB	'STFL', 00H, 'store_facility_list', 00H
	ORG $+7
$SG184128 DB	'LPSWE', 00H, 'load_program_status_word_extended', 00H
$SG184129 DB	'?????', 00H, '?', 00H
$SG184130 DB	'?????', 00H, '?', 00H
$SG184131 DB	'?????', 00H, '?', 00H
$SG184132 DB	'?????', 00H, '?', 00H
$SG184133 DB	'?????', 00H, '?', 00H
$SG184134 DB	'SRNMB', 00H, 'set_bfp_rounding_mode_3bit', 00H
	ORG $+7
$SG184135 DB	'SRNMT', 00H, 'set_dfp_rounding_mode', 00H
	ORG $+4
$SG184136 DB	'?????', 00H, '?', 00H
$SG184137 DB	'?????', 00H, '?', 00H
$SG184138 DB	'?????', 00H, '?', 00H
$SG184139 DB	'LFAS', 00H, 'load_fpc_and_signal', 00H
	ORG $+7
$SG184140 DB	'?????', 00H, '?', 00H
$SG184141 DB	'?????', 00H, '?', 00H
$SG184142 DB	'?????', 00H, '?', 00H
$SG184143 DB	'?????', 00H, '?', 00H
$SG184144 DB	'?????', 00H, '?', 00H
$SG184145 DB	'?????', 00H, '?', 00H
$SG184146 DB	'?????', 00H, '?', 00H
$SG184147 DB	'?????', 00H, '?', 00H
$SG184148 DB	'?????', 00H, '?', 00H
$SG184149 DB	'?????', 00H, '?', 00H
$SG184150 DB	'?????', 00H, '?', 00H
$SG184151 DB	'?????', 00H, '?', 00H
$SG200536 DB	'IIHH', 00H, 'insert_immediate_high_high', 00H
$SG184152 DB	'?????', 00H, '?', 00H
$SG200537 DB	'IIHL', 00H, 'insert_immediate_high_low', 00H
	ORG $+1
$SG184153 DB	'?????', 00H, '?', 00H
$SG200538 DB	'IILH', 00H, 'insert_immediate_low_high', 00H
	ORG $+1
$SG184154 DB	'?????', 00H, '?', 00H
$SG200539 DB	'IILL', 00H, 'insert_immediate_low_low', 00H
	ORG $+2
$SG184155 DB	'?????', 00H, '?', 00H
$SG200540 DB	'NIHH', 00H, 'and_immediate_high_high', 00H
	ORG $+3
$SG184156 DB	'?????', 00H, '?', 00H
$SG200541 DB	'NIHL', 00H, 'and_immediate_high_low', 00H
	ORG $+4
$SG184157 DB	'?????', 00H, '?', 00H
$SG200542 DB	'NILH', 00H, 'and_immediate_low_high', 00H
	ORG $+4
$SG184158 DB	'?????', 00H, '?', 00H
$SG200543 DB	'NILL', 00H, 'and_immediate_low_low', 00H
	ORG $+5
$SG184159 DB	'?????', 00H, '?', 00H
$SG200544 DB	'OIHH', 00H, 'or_immediate_high_high', 00H
	ORG $+4
$SG184160 DB	'?????', 00H, '?', 00H
$SG200545 DB	'OIHL', 00H, 'or_immediate_high_low', 00H
	ORG $+5
$SG184161 DB	'?????', 00H, '?', 00H
$SG200546 DB	'OILH', 00H, 'or_immediate_low_high', 00H
	ORG $+5
$SG184162 DB	'?????', 00H, '?', 00H
$SG200547 DB	'OILL', 00H, 'or_immediate_low_low', 00H
	ORG $+6
$SG184163 DB	'?????', 00H, '?', 00H
$SG200548 DB	'LLIHH', 00H, 'load_logical_immediate_high_high', 00H
	ORG $+1
$SG184164 DB	'?????', 00H, '?', 00H
$SG200549 DB	'LLIHL', 00H, 'load_logical_immediate_high_low', 00H
	ORG $+2
$SG184165 DB	'?????', 00H, '?', 00H
$SG200550 DB	'LLILH', 00H, 'load_logical_immediate_low_high', 00H
	ORG $+2
$SG184166 DB	'?????', 00H, '?', 00H
$SG200551 DB	'LLILL', 00H, 'load_logical_immediate_low_low', 00H
	ORG $+3
$SG184167 DB	'?????', 00H, '?', 00H
$SG184168 DB	'?????', 00H, '?', 00H
$SG184169 DB	'?????', 00H, '?', 00H
$SG184170 DB	'?????', 00H, '?', 00H
$SG184171 DB	'?????', 00H, '?', 00H
$SG184172 DB	'?????', 00H, '?', 00H
$SG184173 DB	'?????', 00H, '?', 00H
$SG184174 DB	'?????', 00H, '?', 00H
$SG184175 DB	'?????', 00H, '?', 00H
$SG184176 DB	'?????', 00H, '?', 00H
$SG184177 DB	'?????', 00H, '?', 00H
$SG184178 DB	'?????', 00H, '?', 00H
$SG184179 DB	'?????', 00H, '?', 00H
$SG184180 DB	'?????', 00H, '?', 00H
$SG184181 DB	'?????', 00H, '?', 00H
$SG184182 DB	'PPA', 00H, 'perform_processor_assist', 00H
	ORG $+3
$SG184183 DB	'?????', 00H, '?', 00H
$SG184184 DB	'?????', 00H, '?', 00H
$SG184185 DB	'?????', 00H, '?', 00H
$SG184186 DB	'ETND', 00H, 'extract_transaction_nesting_depth', 00H
	ORG $+1
$SG184187 DB	'?????', 00H, '?', 00H
$SG184188 DB	'?????', 00H, '?', 00H
$SG184189 DB	'?????', 00H, '?', 00H
$SG184190 DB	'IUCV', 00H, 'inter_user_communication_vehicle', 00H
	ORG $+2
$SG184191 DB	'?????', 00H, '?', 00H
$SG184192 DB	'?????', 00H, '?', 00H
$SG184193 DB	'?????', 00H, '?', 00H
$SG184194 DB	'?????', 00H, '?', 00H
$SG184195 DB	'?????', 00H, '?', 00H
$SG184196 DB	'?????', 00H, '?', 00H
$SG184197 DB	'?????', 00H, '?', 00H
$SG184198 DB	'TEND', 00H, 'transaction_end', 00H
	ORG $+3
$SG184199 DB	'?????', 00H, '?', 00H
$SG200584 DB	'TMLH', 00H, 'test_under_mask_high', 00H
	ORG $+6
$SG184200 DB	'NIAI', 00H, 'next_instruction_access_intent', 00H
	ORG $+4
$SG200585 DB	'TMLL', 00H, 'test_under_mask_low', 00H
	ORG $+7
$SG184201 DB	'?????', 00H, '?', 00H
$SG200586 DB	'TMHH', 00H, 'test_under_mask_high_high', 00H
	ORG $+1
$SG184202 DB	'TABORT', 00H, 'transaction_abort', 00H
	ORG $+7
$SG200587 DB	'TMHL', 00H, 'test_under_mask_high_low', 00H
	ORG $+2
$SG184203 DB	'?????', 00H, '?', 00H
$SG200588 DB	'BRC', 00H, 'branch_relative_on_condition', 00H
	ORG $+7
$SG184204 DB	'?????', 00H, '?', 00H
$SG200589 DB	'BRAS', 00H, 'branch_relative_and_save', 00H
	ORG $+2
$SG184205 DB	'TRAP4', 00H, 'trap4', 00H
	ORG $+4
$SG200590 DB	'BRCT', 00H, 'branch_relative_on_count', 00H
	ORG $+2
$SG200591 DB	'BRCTG', 00H, 'branch_relative_on_count_long', 00H
	ORG $+4
$SG200592 DB	'LHI', 00H, 'load_halfword_immediate', 00H
	ORG $+4
$SG200593 DB	'LGHI', 00H, 'load_long_halfword_immediate', 00H
	ORG $+6
$SG200594 DB	'AHI', 00H, 'add_halfword_immediate', 00H
	ORG $+5
$SG200595 DB	'AGHI', 00H, 'add_long_halfword_immediate', 00H
	ORG $+7
$SG200596 DB	'MHI', 00H, 'multiply_halfword_immediate', 00H
$SG200597 DB	'MGHI', 00H, 'multiply_long_halfword_immediate', 00H
	ORG $+2
$SG200598 DB	'CHI', 00H, 'compare_halfword_immediate', 00H
	ORG $+1
$SG200599 DB	'CGHI', 00H, 'compare_long_halfword_immediate', 00H
	ORG $+3
$SG209080 DB	'?????', 00H, '?', 00H
$SG209081 DB	'?????', 00H, '?', 00H
$SG209082 DB	'?????', 00H, '?', 00H
$SG209083 DB	'?????', 00H, '?', 00H
$SG209084 DB	'?????', 00H, '?', 00H
$SG209085 DB	'?????', 00H, '?', 00H
$SG209086 DB	'?????', 00H, '?', 00H
$SG209087 DB	'?????', 00H, '?', 00H
$SG209088 DB	'?????', 00H, '?', 00H
$SG209089 DB	'?????', 00H, '?', 00H
$SG209090 DB	'?????', 00H, '?', 00H
$SG209091 DB	'?????', 00H, '?', 00H
$SG209092 DB	'?????', 00H, '?', 00H
$SG209093 DB	'?????', 00H, '?', 00H
$SG209094 DB	'?????', 00H, '?', 00H
$SG209095 DB	'?????', 00H, '?', 00H
$SG209096 DB	'?????', 00H, '?', 00H
$SG209097 DB	'?????', 00H, '?', 00H
$SG209098 DB	'?????', 00H, '?', 00H
$SG209099 DB	'?????', 00H, '?', 00H
$SG209100 DB	'?????', 00H, '?', 00H
$SG209101 DB	'?????', 00H, '?', 00H
$SG209102 DB	'?????', 00H, '?', 00H
$SG209103 DB	'?????', 00H, '?', 00H
$SG209104 DB	'?????', 00H, '?', 00H
$SG209105 DB	'?????', 00H, '?', 00H
$SG209106 DB	'?????', 00H, '?', 00H
$SG209107 DB	'?????', 00H, '?', 00H
$SG209108 DB	'?????', 00H, '?', 00H
$SG209109 DB	'?????', 00H, '?', 00H
$SG209110 DB	'?????', 00H, '?', 00H
$SG209111 DB	'?????', 00H, '?', 00H
$SG209112 DB	'?????', 00H, '?', 00H
$SG209113 DB	'?????', 00H, '?', 00H
$SG209114 DB	'?????', 00H, '?', 00H
$SG209115 DB	'?????', 00H, '?', 00H
$SG209116 DB	'?????', 00H, '?', 00H
$SG209117 DB	'?????', 00H, '?', 00H
$SG209118 DB	'?????', 00H, '?', 00H
$SG209119 DB	'?????', 00H, '?', 00H
$SG209120 DB	'?????', 00H, '?', 00H
$SG209121 DB	'?????', 00H, '?', 00H
$SG209122 DB	'?????', 00H, '?', 00H
$SG209123 DB	'?????', 00H, '?', 00H
$SG209124 DB	'?????', 00H, '?', 00H
$SG209125 DB	'?????', 00H, '?', 00H
$SG209126 DB	'?????', 00H, '?', 00H
$SG209127 DB	'?????', 00H, '?', 00H
$SG209128 DB	'?????', 00H, '?', 00H
$SG209129 DB	'?????', 00H, '?', 00H
$SG209130 DB	'?????', 00H, '?', 00H
$SG209131 DB	'?????', 00H, '?', 00H
$SG209132 DB	'?????', 00H, '?', 00H
$SG209133 DB	'?????', 00H, '?', 00H
$SG209134 DB	'?????', 00H, '?', 00H
$SG209135 DB	'?????', 00H, '?', 00H
$SG209136 DB	'?????', 00H, '?', 00H
$SG209137 DB	'?????', 00H, '?', 00H
$SG209138 DB	'?????', 00H, '?', 00H
$SG209139 DB	'?????', 00H, '?', 00H
$SG209140 DB	'?????', 00H, '?', 00H
$SG209141 DB	'?????', 00H, '?', 00H
$SG209142 DB	'?????', 00H, '?', 00H
$SG209143 DB	'?????', 00H, '?', 00H
$SG209144 DB	'VTVM', 00H, 'v_test_vmr', 00H
$SG209145 DB	'VCVM', 00H, 'v_complement_vmr', 00H
	ORG $+2
$SG209146 DB	'VCZVM', 00H, 'v_count_left_zeros_in_vmr', 00H
$SG209147 DB	'VCOVM', 00H, 'v_count_ones_in_vmr', 00H
	ORG $+6
$SG209148 DB	'VXVC', 00H, 'v_extract_vct', 00H
	ORG $+5
$SG209149 DB	'?????', 00H, '?', 00H
$SG209150 DB	'VXVMM', 00H, 'v_extract_vector_modes', 00H
	ORG $+3
$SG209151 DB	'?????', 00H, '?', 00H
$SG209152 DB	'VRRS', 00H, 'v_restore_vr', 00H
	ORG $+6
$SG209153 DB	'VRSVC', 00H, 'v_save_changed_vr', 00H
$SG209154 DB	'VRSV', 00H, 'v_save_vr', 00H
	ORG $+1
$SG209155 DB	'?????', 00H, '?', 00H
$SG209156 DB	'?????', 00H, '?', 00H
$SG209157 DB	'?????', 00H, '?', 00H
$SG209158 DB	'?????', 00H, '?', 00H
$SG209159 DB	'?????', 00H, '?', 00H
$SG209160 DB	'?????', 00H, '?', 00H
$SG209161 DB	'?????', 00H, '?', 00H
$SG209162 DB	'?????', 00H, '?', 00H
$SG209163 DB	'?????', 00H, '?', 00H
$SG209164 DB	'?????', 00H, '?', 00H
$SG209165 DB	'?????', 00H, '?', 00H
$SG209166 DB	'?????', 00H, '?', 00H
$SG209167 DB	'?????', 00H, '?', 00H
$SG209168 DB	'?????', 00H, '?', 00H
$SG209169 DB	'?????', 00H, '?', 00H
$SG209170 DB	'?????', 00H, '?', 00H
$SG209171 DB	'?????', 00H, '?', 00H
$SG209172 DB	'?????', 00H, '?', 00H
$SG209173 DB	'?????', 00H, '?', 00H
$SG209174 DB	'?????', 00H, '?', 00H
$SG209175 DB	'?????', 00H, '?', 00H
$SG209176 DB	'?????', 00H, '?', 00H
$SG209177 DB	'?????', 00H, '?', 00H
$SG209178 DB	'?????', 00H, '?', 00H
$SG209179 DB	'?????', 00H, '?', 00H
$SG209180 DB	'?????', 00H, '?', 00H
$SG209181 DB	'?????', 00H, '?', 00H
$SG209182 DB	'?????', 00H, '?', 00H
$SG209183 DB	'?????', 00H, '?', 00H
$SG209184 DB	'?????', 00H, '?', 00H
$SG209185 DB	'?????', 00H, '?', 00H
$SG209186 DB	'?????', 00H, '?', 00H
$SG209187 DB	'?????', 00H, '?', 00H
$SG209188 DB	'?????', 00H, '?', 00H
$SG209189 DB	'?????', 00H, '?', 00H
$SG209190 DB	'?????', 00H, '?', 00H
$SG209191 DB	'?????', 00H, '?', 00H
$SG209192 DB	'?????', 00H, '?', 00H
$SG209193 DB	'?????', 00H, '?', 00H
$SG209194 DB	'?????', 00H, '?', 00H
$SG209195 DB	'?????', 00H, '?', 00H
$SG209196 DB	'?????', 00H, '?', 00H
$SG209197 DB	'?????', 00H, '?', 00H
$SG209198 DB	'?????', 00H, '?', 00H
$SG209199 DB	'?????', 00H, '?', 00H
$SG209200 DB	'?????', 00H, '?', 00H
$SG209201 DB	'?????', 00H, '?', 00H
$SG209202 DB	'?????', 00H, '?', 00H
$SG209203 DB	'?????', 00H, '?', 00H
$SG209204 DB	'?????', 00H, '?', 00H
$SG209205 DB	'?????', 00H, '?', 00H
$SG209206 DB	'?????', 00H, '?', 00H
$SG209207 DB	'?????', 00H, '?', 00H
$SG209208 DB	'VLVM', 00H, 'v_load_vmr', 00H
$SG209209 DB	'VLCVM', 00H, 'v_load_vmr_complement', 00H
	ORG $+4
$SG209210 DB	'VSTVM', 00H, 'v_store_vmr', 00H
	ORG $+6
$SG209211 DB	'?????', 00H, '?', 00H
$SG209212 DB	'VNVM', 00H, 'v_and_to_vmr', 00H
	ORG $+6
$SG209213 DB	'VOVM', 00H, 'v_or_to_vmr', 00H
	ORG $+7
$SG209214 DB	'VXVM', 00H, 'v_exclusive_or_to_vmr', 00H
	ORG $+5
$SG209215 DB	'?????', 00H, '?', 00H
$SG209216 DB	'?????', 00H, '?', 00H
$SG209217 DB	'?????', 00H, '?', 00H
$SG209218 DB	'?????', 00H, '?', 00H
$SG209219 DB	'?????', 00H, '?', 00H
$SG209220 DB	'?????', 00H, '?', 00H
$SG209221 DB	'?????', 00H, '?', 00H
$SG209222 DB	'?????', 00H, '?', 00H
$SG209223 DB	'?????', 00H, '?', 00H
$SG209224 DB	'?????', 00H, '?', 00H
$SG209225 DB	'?????', 00H, '?', 00H
$SG209226 DB	'?????', 00H, '?', 00H
$SG209227 DB	'?????', 00H, '?', 00H
$SG209228 DB	'?????', 00H, '?', 00H
$SG209229 DB	'?????', 00H, '?', 00H
$SG209230 DB	'?????', 00H, '?', 00H
$SG209231 DB	'?????', 00H, '?', 00H
$SG209232 DB	'?????', 00H, '?', 00H
$SG209233 DB	'?????', 00H, '?', 00H
$SG209234 DB	'?????', 00H, '?', 00H
$SG209235 DB	'?????', 00H, '?', 00H
$SG209236 DB	'?????', 00H, '?', 00H
$SG209237 DB	'?????', 00H, '?', 00H
$SG209238 DB	'?????', 00H, '?', 00H
$SG209239 DB	'?????', 00H, '?', 00H
$SG209240 DB	'?????', 00H, '?', 00H
$SG209241 DB	'?????', 00H, '?', 00H
$SG209242 DB	'?????', 00H, '?', 00H
$SG209243 DB	'?????', 00H, '?', 00H
$SG209244 DB	'?????', 00H, '?', 00H
$SG209245 DB	'?????', 00H, '?', 00H
$SG209246 DB	'?????', 00H, '?', 00H
$SG209247 DB	'?????', 00H, '?', 00H
$SG209248 DB	'?????', 00H, '?', 00H
$SG209249 DB	'?????', 00H, '?', 00H
$SG209250 DB	'?????', 00H, '?', 00H
$SG209251 DB	'?????', 00H, '?', 00H
$SG209252 DB	'?????', 00H, '?', 00H
$SG209253 DB	'?????', 00H, '?', 00H
$SG209254 DB	'?????', 00H, '?', 00H
$SG209255 DB	'?????', 00H, '?', 00H
$SG209256 DB	'?????', 00H, '?', 00H
$SG209257 DB	'?????', 00H, '?', 00H
$SG209258 DB	'?????', 00H, '?', 00H
$SG209259 DB	'?????', 00H, '?', 00H
$SG209260 DB	'?????', 00H, '?', 00H
$SG209261 DB	'?????', 00H, '?', 00H
$SG209262 DB	'?????', 00H, '?', 00H
$SG209263 DB	'?????', 00H, '?', 00H
$SG209264 DB	'?????', 00H, '?', 00H
$SG209265 DB	'?????', 00H, '?', 00H
$SG209266 DB	'?????', 00H, '?', 00H
$SG209267 DB	'?????', 00H, '?', 00H
$SG209268 DB	'?????', 00H, '?', 00H
$SG209269 DB	'?????', 00H, '?', 00H
$SG209270 DB	'?????', 00H, '?', 00H
$SG209271 DB	'?????', 00H, '?', 00H
$SG209272 DB	'VSRSV', 00H, 'v_save_vsr', 00H
	ORG $+7
$SG209273 DB	'VMRSV', 00H, 'v_save_vmr', 00H
	ORG $+7
$SG209274 DB	'VSRRS', 00H, 'v_restore_vsr', 00H
	ORG $+4
$SG209275 DB	'VMRRS', 00H, 'v_restore_vmr', 00H
	ORG $+4
$SG209276 DB	'VLVCA', 00H, 'v_load_vct_from_address', 00H
	ORG $+2
$SG209277 DB	'VRCL', 00H, 'v_clear_vr', 00H
$SG209278 DB	'VSVMM', 00H, 'v_set_vector_mask_mode', 00H
	ORG $+3
$SG209279 DB	'VLVXA', 00H, 'v_load_vix_from_address', 00H
	ORG $+2
$SG209280 DB	'VSTVP', 00H, 'v_store_vector_parameters', 00H
$SG209281 DB	'?????', 00H, '?', 00H
$SG209282 DB	'VACSV', 00H, 'v_save_vac', 00H
	ORG $+7
$SG209283 DB	'VACRS', 00H, 'v_restore_vac', 00H
	ORG $+4
$SG209284 DB	'?????', 00H, '?', 00H
$SG209285 DB	'?????', 00H, '?', 00H
$SG209286 DB	'?????', 00H, '?', 00H
$SG209287 DB	'?????', 00H, '?', 00H
$SG209288 DB	'?????', 00H, '?', 00H
$SG209289 DB	'?????', 00H, '?', 00H
$SG209290 DB	'?????', 00H, '?', 00H
$SG209291 DB	'?????', 00H, '?', 00H
$SG209292 DB	'?????', 00H, '?', 00H
$SG209293 DB	'?????', 00H, '?', 00H
$SG209294 DB	'?????', 00H, '?', 00H
$SG209295 DB	'?????', 00H, '?', 00H
$SG209296 DB	'?????', 00H, '?', 00H
$SG209297 DB	'?????', 00H, '?', 00H
$SG209298 DB	'?????', 00H, '?', 00H
$SG209299 DB	'?????', 00H, '?', 00H
$SG209300 DB	'?????', 00H, '?', 00H
$SG209301 DB	'?????', 00H, '?', 00H
$SG209302 DB	'?????', 00H, '?', 00H
$SG209303 DB	'?????', 00H, '?', 00H
$SG209304 DB	'?????', 00H, '?', 00H
$SG201112 DB	'LPEBR', 00H, 'load_positive_bfp_short_reg', 00H
	ORG $+6
$SG209305 DB	'?????', 00H, '?', 00H
$SG201113 DB	'LNEBR', 00H, 'load_negative_bfp_short_reg', 00H
	ORG $+6
$SG209306 DB	'?????', 00H, '?', 00H
$SG201114 DB	'LTEBR', 00H, 'load_and_test_bfp_short_reg', 00H
	ORG $+6
$SG209307 DB	'?????', 00H, '?', 00H
$SG201115 DB	'LCEBR', 00H, 'load_complement_bfp_short_reg', 00H
	ORG $+4
$SG209308 DB	'?????', 00H, '?', 00H
$SG201116 DB	'LDEBR', 00H, 'load_lengthened_bfp_short_to_long_reg', 00H
	ORG $+4
$SG209309 DB	'?????', 00H, '?', 00H
$SG201117 DB	'LXDBR', 00H, 'load_lengthened_bfp_long_to_ext_reg', 00H
	ORG $+6
$SG209310 DB	'?????', 00H, '?', 00H
$SG201118 DB	'LXEBR', 00H, 'load_lengthened_bfp_short_to_ext_reg', 00H
	ORG $+5
$SG209311 DB	'?????', 00H, '?', 00H
$SG201119 DB	'MXDBR', 00H, 'multiply_bfp_long_to_ext_reg', 00H
	ORG $+5
$SG209312 DB	'?????', 00H, '?', 00H
$SG201120 DB	'KEBR', 00H, 'compare_and_signal_bfp_short_reg', 00H
	ORG $+2
$SG209313 DB	'?????', 00H, '?', 00H
$SG201121 DB	'CEBR', 00H, 'compare_bfp_short_reg', 00H
	ORG $+5
$SG209314 DB	'?????', 00H, '?', 00H
$SG201122 DB	'AEBR', 00H, 'add_bfp_short_reg', 00H
	ORG $+1
$SG209315 DB	'?????', 00H, '?', 00H
$SG201123 DB	'SEBR', 00H, 'subtract_bfp_short_reg', 00H
	ORG $+4
$SG209316 DB	'?????', 00H, '?', 00H
$SG201124 DB	'MDEBR', 00H, 'multiply_bfp_short_to_long_reg', 00H
	ORG $+3
$SG209317 DB	'?????', 00H, '?', 00H
$SG201125 DB	'DEBR', 00H, 'divide_bfp_short_reg', 00H
	ORG $+6
$SG209318 DB	'?????', 00H, '?', 00H
$SG201126 DB	'MAEBR', 00H, 'multiply_add_bfp_short_reg', 00H
	ORG $+7
$SG209319 DB	'?????', 00H, '?', 00H
$SG201127 DB	'MSEBR', 00H, 'multiply_subtract_bfp_short_reg', 00H
	ORG $+2
$SG209320 DB	'?????', 00H, '?', 00H
$SG201128 DB	'LPDBR', 00H, 'load_positive_bfp_long_reg', 00H
	ORG $+7
$SG209321 DB	'?????', 00H, '?', 00H
$SG201129 DB	'LNDBR', 00H, 'load_negative_bfp_long_reg', 00H
	ORG $+7
$SG209322 DB	'?????', 00H, '?', 00H
$SG201130 DB	'LTDBR', 00H, 'load_and_test_bfp_long_reg', 00H
	ORG $+7
$SG209323 DB	'?????', 00H, '?', 00H
$SG201131 DB	'LCDBR', 00H, 'load_complement_bfp_long_reg', 00H
	ORG $+5
$SG209324 DB	'?????', 00H, '?', 00H
$SG201132 DB	'SQEBR', 00H, 'squareroot_bfp_short_reg', 00H
	ORG $+1
$SG209325 DB	'?????', 00H, '?', 00H
$SG201133 DB	'SQDBR', 00H, 'squareroot_bfp_long_reg', 00H
	ORG $+2
$SG209326 DB	'?????', 00H, '?', 00H
$SG201134 DB	'SQXBR', 00H, 'squareroot_bfp_ext_reg', 00H
	ORG $+3
$SG209327 DB	'?????', 00H, '?', 00H
$SG201135 DB	'MEEBR', 00H, 'multiply_bfp_short_reg', 00H
	ORG $+3
$SG209328 DB	'?????', 00H, '?', 00H
$SG201136 DB	'KDBR', 00H, 'compare_and_signal_bfp_long_reg', 00H
	ORG $+3
$SG209329 DB	'?????', 00H, '?', 00H
$SG201137 DB	'CDBR', 00H, 'compare_bfp_long_reg', 00H
	ORG $+6
$SG209330 DB	'?????', 00H, '?', 00H
$SG201138 DB	'ADBR', 00H, 'add_bfp_long_reg', 00H
	ORG $+2
$SG209331 DB	'?????', 00H, '?', 00H
$SG201139 DB	'SDBR', 00H, 'subtract_bfp_long_reg', 00H
	ORG $+5
$SG209332 DB	'?????', 00H, '?', 00H
$SG201140 DB	'MDBR', 00H, 'multiply_bfp_long_reg', 00H
	ORG $+5
$SG209333 DB	'?????', 00H, '?', 00H
$SG201141 DB	'DDBR', 00H, 'divide_bfp_long_reg', 00H
	ORG $+7
$SG209334 DB	'?????', 00H, '?', 00H
$SG201142 DB	'MADBR', 00H, 'multiply_add_bfp_long_reg', 00H
$SG209335 DB	'?????', 00H, '?', 00H
$SG201143 DB	'MSDBR', 00H, 'multiply_subtract_bfp_long_reg', 00H
	ORG $+3
$SG201144 DB	'?????', 00H, '?', 00H
$SG201145 DB	'?????', 00H, '?', 00H
$SG201146 DB	'?????', 00H, '?', 00H
$SG201147 DB	'?????', 00H, '?', 00H
$SG201148 DB	'LDER', 00H, 'load_lengthened_float_short_to_long_reg', 00H
	ORG $+3
$SG201149 DB	'LXDR', 00H, 'load_lengthened_float_long_to_ext_reg', 00H
	ORG $+5
$SG201150 DB	'LXER', 00H, 'load_lengthened_float_short_to_ext_reg', 00H
	ORG $+4
$SG201151 DB	'?????', 00H, '?', 00H
$SG201152 DB	'?????', 00H, '?', 00H
$SG201153 DB	'?????', 00H, '?', 00H
$SG201154 DB	'?????', 00H, '?', 00H
$SG201155 DB	'?????', 00H, '?', 00H
$SG201156 DB	'?????', 00H, '?', 00H
$SG201157 DB	'?????', 00H, '?', 00H
$SG201158 DB	'MAER', 00H, 'multiply_add_float_short_reg', 00H
	ORG $+6
$SG201159 DB	'MSER', 00H, 'multiply_subtract_float_short_reg', 00H
	ORG $+1
$SG201160 DB	'?????', 00H, '?', 00H
$SG201161 DB	'?????', 00H, '?', 00H
$SG201162 DB	'?????', 00H, '?', 00H
$SG201163 DB	'?????', 00H, '?', 00H
$SG201164 DB	'?????', 00H, '?', 00H
$SG201165 DB	'?????', 00H, '?', 00H
$SG201166 DB	'SQXR', 00H, 'squareroot_float_ext_reg', 00H
	ORG $+2
$SG201167 DB	'MEER', 00H, 'multiply_float_short_reg', 00H
	ORG $+2
$SG201168 DB	'MAYLR', 00H, 'multiply_add_unnormal_float_long_to_ext_lo'
	DB	'w_reg', 00H
	ORG $+2
$SG201169 DB	'MYLR', 00H, 'multiply_unnormal_float_long_to_ext_low_reg'
	DB	00H
	ORG $+7
$SG201170 DB	'MAYR', 00H, 'multiply_add_unnormal_float_long_to_ext_reg'
	DB	00H
	ORG $+7
$SG201171 DB	'MYR', 00H, 'multiply_unnormal_float_long_to_ext_reg', 00H
	ORG $+4
$SG201172 DB	'MAYHR', 00H, 'multiply_add_unnormal_float_long_to_ext_hi'
	DB	'gh_reg', 00H
	ORG $+1
$SG201173 DB	'MYHR', 00H, 'multiply_unnormal_float_long_to_ext_high_re'
	DB	'g', 00H
	ORG $+6
$SG201174 DB	'MADR', 00H, 'multiply_add_float_long_reg', 00H
	ORG $+7
$SG201175 DB	'MSDR', 00H, 'multiply_subtract_float_long_reg', 00H
	ORG $+2
$SG201176 DB	'LPXBR', 00H, 'load_positive_bfp_ext_reg', 00H
$SG201177 DB	'LNXBR', 00H, 'load_negative_bfp_ext_reg', 00H
$SG201178 DB	'LTXBR', 00H, 'load_and_test_bfp_ext_reg', 00H
$SG201179 DB	'LCXBR', 00H, 'load_complement_bfp_ext_reg', 00H
	ORG $+6
$SG201180 DB	'LEDBR', 00H, 'load_rounded_bfp_long_to_short_reg', 00H
	ORG $+7
$SG201181 DB	'LDXBR', 00H, 'load_rounded_bfp_ext_to_long_reg', 00H
	ORG $+1
$SG201182 DB	'LEXBR', 00H, 'load_rounded_bfp_ext_to_short_reg', 00H
$SG201183 DB	'FIXBR', 00H, 'load_fp_int_bfp_ext_reg', 00H
	ORG $+2
$SG201184 DB	'KXBR', 00H, 'compare_and_signal_bfp_ext_reg', 00H
	ORG $+4
$SG201185 DB	'CXBR', 00H, 'compare_bfp_ext_reg', 00H
	ORG $+7
$SG201186 DB	'AXBR', 00H, 'add_bfp_ext_reg', 00H
	ORG $+3
$SG201187 DB	'SXBR', 00H, 'subtract_bfp_ext_reg', 00H
	ORG $+6
$SG201188 DB	'MXBR', 00H, 'multiply_bfp_ext_reg', 00H
	ORG $+6
$SG201189 DB	'DXBR', 00H, 'divide_bfp_ext_reg', 00H
$SG201190 DB	'?????', 00H, '?', 00H
$SG201191 DB	'?????', 00H, '?', 00H
$SG201192 DB	'TBEDR', 00H, 'convert_float_long_to_bfp_short_reg', 00H
	ORG $+6
$SG201193 DB	'TBDR', 00H, 'convert_float_long_to_bfp_long_reg', 00H
$SG201194 DB	'?????', 00H, '?', 00H
$SG201195 DB	'DIEBR', 00H, 'divide_integer_bfp_short_reg', 00H
	ORG $+5
$SG201196 DB	'?????', 00H, '?', 00H
$SG201197 DB	'?????', 00H, '?', 00H
$SG201198 DB	'?????', 00H, '?', 00H
$SG201199 DB	'FIEBR', 00H, 'load_fp_int_bfp_short_reg', 00H
$SG201200 DB	'THDER', 00H, 'convert_bfp_short_to_float_long_reg', 00H
	ORG $+6
$SG201201 DB	'THDR', 00H, 'convert_bfp_long_to_float_long_reg', 00H
$SG201202 DB	'?????', 00H, '?', 00H
$SG201203 DB	'DIDBR', 00H, 'divide_integer_bfp_long_reg', 00H
	ORG $+6
$SG201204 DB	'?????', 00H, '?', 00H
$SG201205 DB	'?????', 00H, '?', 00H
$SG201206 DB	'?????', 00H, '?', 00H
$SG201207 DB	'FIDBR', 00H, 'load_fp_int_bfp_long_reg', 00H
	ORG $+1
$SG201208 DB	'LPXR', 00H, 'load_positive_float_ext_reg', 00H
	ORG $+7
$SG201209 DB	'LNXR', 00H, 'load_negative_float_ext_reg', 00H
	ORG $+7
$SG201210 DB	'LTXR', 00H, 'load_and_test_float_ext_reg', 00H
	ORG $+7
$SG201211 DB	'LCXR', 00H, 'load_complement_float_ext_reg', 00H
	ORG $+5
$SG201212 DB	'?????', 00H, '?', 00H
$SG201213 DB	'LXR', 00H, 'load_float_ext_reg', 00H
	ORG $+1
$SG201214 DB	'LEXR', 00H, 'load_rounded_float_ext_to_short_reg', 00H
	ORG $+7
$SG201215 DB	'FIXR', 00H, 'load_fp_int_float_ext_reg', 00H
	ORG $+1
$SG201216 DB	'?????', 00H, '?', 00H
$SG201217 DB	'CXR', 00H, 'compare_float_ext_reg', 00H
	ORG $+6
$SG201218 DB	'?????', 00H, '?', 00H
$SG201219 DB	'?????', 00H, '?', 00H
$SG201220 DB	'?????', 00H, '?', 00H
$SG201221 DB	'?????', 00H, '?', 00H
$SG201222 DB	'?????', 00H, '?', 00H
$SG201223 DB	'?????', 00H, '?', 00H
$SG201224 DB	'LPDFR', 00H, 'load_positive_fpr_long_reg', 00H
	ORG $+7
$SG201225 DB	'LNDFR', 00H, 'load_negative_fpr_long_reg', 00H
	ORG $+7
$SG201226 DB	'CPSDR', 00H, 'copy_sign_fpr_long_reg', 00H
	ORG $+3
$SG201227 DB	'LCDFR', 00H, 'load_complement_fpr_long_reg', 00H
	ORG $+5
$SG201228 DB	'LZER', 00H, 'load_zero_float_short_reg', 00H
	ORG $+1
$SG201229 DB	'LZDR', 00H, 'load_zero_float_long_reg', 00H
	ORG $+2
$SG201230 DB	'LZXR', 00H, 'load_zero_float_ext_reg', 00H
	ORG $+3
$SG201231 DB	'FIER', 00H, 'load_fp_int_float_short_reg', 00H
	ORG $+7
$SG201232 DB	'?????', 00H, '?', 00H
$SG201233 DB	'?????', 00H, '?', 00H
$SG201234 DB	'?????', 00H, '?', 00H
$SG201235 DB	'?????', 00H, '?', 00H
$SG201236 DB	'?????', 00H, '?', 00H
$SG201237 DB	'?????', 00H, '?', 00H
$SG201238 DB	'?????', 00H, '?', 00H
$SG201239 DB	'FIDR', 00H, 'load_fp_int_float_long_reg', 00H
$SG201240 DB	'?????', 00H, '?', 00H
$SG201241 DB	'?????', 00H, '?', 00H
$SG201242 DB	'?????', 00H, '?', 00H
$SG201243 DB	'?????', 00H, '?', 00H
$SG201244 DB	'SFPC', 00H, 'set_fpc', 00H
	ORG $+3
$SG201245 DB	'SFASR', 00H, 'set_fpc_and_signal', 00H
	ORG $+7
$SG201246 DB	'?????', 00H, '?', 00H
$SG201247 DB	'?????', 00H, '?', 00H
$SG201248 DB	'?????', 00H, '?', 00H
$SG201249 DB	'?????', 00H, '?', 00H
$SG201250 DB	'?????', 00H, '?', 00H
$SG201251 DB	'?????', 00H, '?', 00H
$SG201252 DB	'EFPC', 00H, 'extract_fpc', 00H
	ORG $+7
$SG201253 DB	'?????', 00H, '?', 00H
$SG201254 DB	'?????', 00H, '?', 00H
$SG201255 DB	'?????', 00H, '?', 00H
$SG201256 DB	'CELFBR', 00H, 'convert_u32_to_bfp_short_reg', 00H
	ORG $+4
$SG201257 DB	'CDLFBR', 00H, 'convert_u32_to_bfp_long_reg', 00H
	ORG $+5
$SG201258 DB	'CXLFBR', 00H, 'convert_u32_to_bfp_ext_reg', 00H
	ORG $+6
$SG201259 DB	'?????', 00H, '?', 00H
$SG201260 DB	'CEFBR', 00H, 'convert_fix32_to_bfp_short_reg', 00H
	ORG $+3
$SG201261 DB	'CDFBR', 00H, 'convert_fix32_to_bfp_long_reg', 00H
	ORG $+4
$SG201262 DB	'CXFBR', 00H, 'convert_fix32_to_bfp_ext_reg', 00H
	ORG $+5
$SG201263 DB	'?????', 00H, '?', 00H
$SG201264 DB	'CFEBR', 00H, 'convert_bfp_short_to_fix32_reg', 00H
	ORG $+3
$SG201265 DB	'CFDBR', 00H, 'convert_bfp_long_to_fix32_reg', 00H
	ORG $+4
$SG201266 DB	'CFXBR', 00H, 'convert_bfp_ext_to_fix32_reg', 00H
	ORG $+5
$SG201267 DB	'?????', 00H, '?', 00H
$SG201268 DB	'CLFEBR', 00H, 'convert_bfp_short_to_u32_reg', 00H
	ORG $+4
$SG201269 DB	'CLFDBR', 00H, 'convert_bfp_long_to_u32_reg', 00H
	ORG $+5
$SG201270 DB	'CLFXBR', 00H, 'convert_bfp_ext_to_u32_reg', 00H
	ORG $+6
$SG201271 DB	'?????', 00H, '?', 00H
$SG201272 DB	'CELGBR', 00H, 'convert_u64_to_bfp_short_reg', 00H
	ORG $+4
$SG201273 DB	'CDLGBR', 00H, 'convert_u64_to_bfp_long_reg', 00H
	ORG $+5
$SG201274 DB	'CXLGBR', 00H, 'convert_u64_to_bfp_ext_reg', 00H
	ORG $+6
$SG201275 DB	'?????', 00H, '?', 00H
$SG201276 DB	'CEGBR', 00H, 'convert_fix64_to_bfp_short_reg', 00H
	ORG $+3
$SG201277 DB	'CDGBR', 00H, 'convert_fix64_to_bfp_long_reg', 00H
	ORG $+4
$SG201278 DB	'CXGBR', 00H, 'convert_fix64_to_bfp_ext_reg', 00H
	ORG $+5
$SG201279 DB	'?????', 00H, '?', 00H
$SG201280 DB	'CGEBR', 00H, 'convert_bfp_short_to_fix64_reg', 00H
	ORG $+3
$SG201281 DB	'CGDBR', 00H, 'convert_bfp_long_to_fix64_reg', 00H
	ORG $+4
$SG201282 DB	'CGXBR', 00H, 'convert_bfp_ext_to_fix64_reg', 00H
	ORG $+5
$SG201283 DB	'?????', 00H, '?', 00H
$SG201284 DB	'CLGEBR', 00H, 'convert_bfp_short_to_u64_reg', 00H
	ORG $+4
$SG201285 DB	'CLGDBR', 00H, 'convert_bfp_long_to_u64_reg', 00H
	ORG $+5
$SG201286 DB	'CLGXBR', 00H, 'convert_bfp_ext_to_u64_reg', 00H
	ORG $+6
$SG201287 DB	'?????', 00H, '?', 00H
$SG201288 DB	'?????', 00H, '?', 00H
$SG201289 DB	'?????', 00H, '?', 00H
$SG201290 DB	'?????', 00H, '?', 00H
$SG201291 DB	'?????', 00H, '?', 00H
$SG201292 DB	'CEFR', 00H, 'convert_fixed_to_float_short_reg', 00H
	ORG $+2
$SG201293 DB	'CDFR', 00H, 'convert_fixed_to_float_long_reg', 00H
	ORG $+3
$SG201294 DB	'CXFR', 00H, 'convert_fixed_to_float_ext_reg', 00H
	ORG $+4
$SG201295 DB	'?????', 00H, '?', 00H
$SG201296 DB	'CFER', 00H, 'convert_float_short_to_fixed_reg', 00H
	ORG $+2
$SG201297 DB	'CFDR', 00H, 'convert_float_long_to_fixed_reg', 00H
	ORG $+3
$SG201298 DB	'CFXR', 00H, 'convert_float_ext_to_fixed_reg', 00H
	ORG $+4
$SG201299 DB	'?????', 00H, '?', 00H
$SG201300 DB	'?????', 00H, '?', 00H
$SG201301 DB	'?????', 00H, '?', 00H
$SG201302 DB	'?????', 00H, '?', 00H
$SG201303 DB	'?????', 00H, '?', 00H
$SG201304 DB	'?????', 00H, '?', 00H
$SG201305 DB	'LDGR', 00H, 'load_fpr_from_gr_long_reg', 00H
	ORG $+1
$SG201306 DB	'?????', 00H, '?', 00H
$SG201307 DB	'?????', 00H, '?', 00H
$SG201308 DB	'CEGR', 00H, 'convert_fix64_to_float_short_reg', 00H
	ORG $+2
$SG201309 DB	'CDGR', 00H, 'convert_fix64_to_float_long_reg', 00H
	ORG $+3
$SG201310 DB	'CXGR', 00H, 'convert_fix64_to_float_ext_reg', 00H
	ORG $+4
$SG201311 DB	'?????', 00H, '?', 00H
$SG201312 DB	'CGER', 00H, 'convert_float_short_to_fix64_reg', 00H
	ORG $+2
$SG201313 DB	'CGDR', 00H, 'convert_float_long_to_fix64_reg', 00H
	ORG $+3
$SG201314 DB	'CGXR', 00H, 'convert_float_ext_to_fix64_reg', 00H
	ORG $+4
$SG201315 DB	'?????', 00H, '?', 00H
$SG201316 DB	'?????', 00H, '?', 00H
$SG201317 DB	'LGDR', 00H, 'load_gr_from_fpr_long_reg', 00H
	ORG $+1
$SG201318 DB	'?????', 00H, '?', 00H
$SG201319 DB	'?????', 00H, '?', 00H
$SG201320 DB	'MDTR', 00H, 'multiply_dfp_long_reg', 00H
	ORG $+5
$SG201321 DB	'DDTR', 00H, 'divide_dfp_long_reg', 00H
	ORG $+7
$SG201322 DB	'ADTR', 00H, 'add_dfp_long_reg', 00H
	ORG $+2
$SG201323 DB	'SDTR', 00H, 'subtract_dfp_long_reg', 00H
	ORG $+5
$SG201324 DB	'LDETR', 00H, 'load_lengthened_dfp_short_to_long_reg', 00H
	ORG $+4
$SG201325 DB	'LEDTR', 00H, 'load_rounded_dfp_long_to_short_reg', 00H
	ORG $+7
$SG201326 DB	'LTDTR', 00H, 'load_and_test_dfp_long_reg', 00H
	ORG $+7
$SG201327 DB	'FIDTR', 00H, 'load_fp_int_dfp_long_reg', 00H
	ORG $+1
$SG201328 DB	'MXTR', 00H, 'multiply_dfp_ext_reg', 00H
	ORG $+6
$SG201329 DB	'DXTR', 00H, 'divide_dfp_ext_reg', 00H
$SG201330 DB	'AXTR', 00H, 'add_dfp_ext_reg', 00H
	ORG $+3
$SG201331 DB	'SXTR', 00H, 'subtract_dfp_ext_reg', 00H
	ORG $+6
$SG201332 DB	'LXDTR', 00H, 'load_lengthened_dfp_long_to_ext_reg', 00H
	ORG $+6
$SG201333 DB	'LDXTR', 00H, 'load_rounded_dfp_ext_to_long_reg', 00H
	ORG $+1
$SG201334 DB	'LTXTR', 00H, 'load_and_test_dfp_ext_reg', 00H
$SG201335 DB	'FIXTR', 00H, 'load_fp_int_dfp_ext_reg', 00H
	ORG $+2
$SG201336 DB	'KDTR', 00H, 'compare_and_signal_dfp_long_reg', 00H
	ORG $+3
$SG201337 DB	'CGDTR', 00H, 'convert_dfp_long_to_fix64_reg', 00H
	ORG $+4
$SG201338 DB	'CUDTR', 00H, 'convert_dfp_long_to_ubcd64_reg', 00H
	ORG $+3
$SG201339 DB	'CSDTR', 00H, 'convert_dfp_long_to_sbcd64_reg', 00H
	ORG $+3
$SG201340 DB	'CDTR', 00H, 'compare_dfp_long_reg', 00H
	ORG $+6
$SG201341 DB	'EEDTR', 00H, 'extract_biased_exponent_dfp_long_to_fix64_'
	DB	'reg', 00H
	ORG $+4
$SG201342 DB	'?????', 00H, '?', 00H
$SG201343 DB	'ESDTR', 00H, 'extract_significance_dfp_long_reg', 00H
$SG201344 DB	'KXTR', 00H, 'compare_and_signal_dfp_ext_reg', 00H
	ORG $+4
$SG201345 DB	'CGXTR', 00H, 'convert_dfp_ext_to_fix64_reg', 00H
	ORG $+5
$SG201346 DB	'CUXTR', 00H, 'convert_dfp_ext_to_ubcd128_reg', 00H
	ORG $+3
$SG201347 DB	'CSXTR', 00H, 'convert_dfp_ext_to_sbcd128_reg', 00H
	ORG $+3
$SG201348 DB	'CXTR', 00H, 'compare_dfp_ext_reg', 00H
	ORG $+7
$SG201349 DB	'EEXTR', 00H, 'extract_biased_exponent_dfp_ext_to_fix64_r'
	DB	'eg', 00H
	ORG $+5
$SG201350 DB	'?????', 00H, '?', 00H
$SG201351 DB	'ESXTR', 00H, 'extract_significance_dfp_ext_reg', 00H
	ORG $+1
$SG201352 DB	'?????', 00H, '?', 00H
$SG201353 DB	'CDGTR', 00H, 'convert_fix64_to_dfp_long_reg', 00H
	ORG $+4
$SG201354 DB	'CDUTR', 00H, 'convert_ubcd64_to_dfp_long_reg', 00H
	ORG $+3
$SG201355 DB	'CDSTR', 00H, 'convert_sbcd64_to_dfp_long_reg', 00H
	ORG $+3
$SG201356 DB	'CEDTR', 00H, 'compare_exponent_dfp_long_reg', 00H
	ORG $+4
$SG201357 DB	'QADTR', 00H, 'quantize_dfp_long_reg', 00H
	ORG $+4
$SG201358 DB	'IEDTR', 00H, 'insert_biased_exponent_fix64_to_dfp_long_r'
	DB	'eg', 00H
	ORG $+5
$SG201359 DB	'RRDTR', 00H, 'reround_dfp_long_reg', 00H
	ORG $+5
$SG201360 DB	'?????', 00H, '?', 00H
$SG201361 DB	'CXGTR', 00H, 'convert_fix64_to_dfp_ext_reg', 00H
	ORG $+5
$SG201362 DB	'CXUTR', 00H, 'convert_ubcd128_to_dfp_ext_reg', 00H
	ORG $+3
$SG201363 DB	'CXSTR', 00H, 'convert_sbcd128_to_dfp_ext_reg', 00H
	ORG $+3
$SG201364 DB	'CEXTR', 00H, 'compare_exponent_dfp_ext_reg', 00H
	ORG $+5
$SG201365 DB	'QAXTR', 00H, 'quantize_dfp_ext_reg', 00H
	ORG $+5
$SG201366 DB	'IEXTR', 00H, 'insert_biased_exponent_fix64_to_dfp_ext_re'
	DB	'g', 00H
	ORG $+6
$SG201367 DB	'RRXTR', 00H, 'reround_dfp_ext_reg', 00H
	ORG $+6
$SG209848 DB	'?????', 00H, '?', 00H
$SG209849 DB	'?????', 00H, '?', 00H
$SG209850 DB	'?????', 00H, '?', 00H
$SG209851 DB	'?????', 00H, '?', 00H
$SG209852 DB	'?????', 00H, '?', 00H
$SG209853 DB	'?????', 00H, '?', 00H
$SG209854 DB	'?????', 00H, '?', 00H
$SG209855 DB	'?????', 00H, '?', 00H
$SG209856 DB	'?????', 00H, '?', 00H
$SG209857 DB	'?????', 00H, '?', 00H
$SG209858 DB	'?????', 00H, '?', 00H
$SG209859 DB	'?????', 00H, '?', 00H
$SG209860 DB	'?????', 00H, '?', 00H
$SG209861 DB	'?????', 00H, '?', 00H
$SG209862 DB	'?????', 00H, '?', 00H
$SG209863 DB	'?????', 00H, '?', 00H
$SG209864 DB	'?????', 00H, '?', 00H
$SG209865 DB	'?????', 00H, '?', 00H
$SG209866 DB	'?????', 00H, '?', 00H
$SG209867 DB	'?????', 00H, '?', 00H
$SG209868 DB	'?????', 00H, '?', 00H
$SG209869 DB	'?????', 00H, '?', 00H
$SG209870 DB	'?????', 00H, '?', 00H
$SG209871 DB	'?????', 00H, '?', 00H
$SG209872 DB	'?????', 00H, '?', 00H
$SG209873 DB	'?????', 00H, '?', 00H
$SG209874 DB	'?????', 00H, '?', 00H
$SG209875 DB	'?????', 00H, '?', 00H
$SG209876 DB	'?????', 00H, '?', 00H
$SG209877 DB	'?????', 00H, '?', 00H
$SG209878 DB	'?????', 00H, '?', 00H
$SG209879 DB	'?????', 00H, '?', 00H
$SG209880 DB	'?????', 00H, '?', 00H
$SG209881 DB	'?????', 00H, '?', 00H
$SG209882 DB	'?????', 00H, '?', 00H
$SG209883 DB	'?????', 00H, '?', 00H
$SG209884 DB	'?????', 00H, '?', 00H
$SG209885 DB	'?????', 00H, '?', 00H
$SG209886 DB	'?????', 00H, '?', 00H
$SG209887 DB	'?????', 00H, '?', 00H
$SG209888 DB	'?????', 00H, '?', 00H
$SG209889 DB	'?????', 00H, '?', 00H
$SG209890 DB	'?????', 00H, '?', 00H
$SG209891 DB	'?????', 00H, '?', 00H
$SG209892 DB	'?????', 00H, '?', 00H
$SG209893 DB	'?????', 00H, '?', 00H
$SG209894 DB	'?????', 00H, '?', 00H
$SG209895 DB	'?????', 00H, '?', 00H
$SG209896 DB	'?????', 00H, '?', 00H
$SG209897 DB	'?????', 00H, '?', 00H
$SG209898 DB	'?????', 00H, '?', 00H
$SG209899 DB	'?????', 00H, '?', 00H
$SG209900 DB	'?????', 00H, '?', 00H
$SG209901 DB	'?????', 00H, '?', 00H
$SG209902 DB	'?????', 00H, '?', 00H
$SG209903 DB	'?????', 00H, '?', 00H
$SG209904 DB	'?????', 00H, '?', 00H
$SG209905 DB	'?????', 00H, '?', 00H
$SG209906 DB	'?????', 00H, '?', 00H
$SG209907 DB	'?????', 00H, '?', 00H
$SG209908 DB	'?????', 00H, '?', 00H
$SG209909 DB	'?????', 00H, '?', 00H
$SG209910 DB	'?????', 00H, '?', 00H
$SG209911 DB	'?????', 00H, '?', 00H
$SG209912 DB	'?????', 00H, '?', 00H
$SG209913 DB	'?????', 00H, '?', 00H
$SG209914 DB	'?????', 00H, '?', 00H
$SG209915 DB	'?????', 00H, '?', 00H
$SG209916 DB	'?????', 00H, '?', 00H
$SG209917 DB	'?????', 00H, '?', 00H
$SG209918 DB	'?????', 00H, '?', 00H
$SG209919 DB	'?????', 00H, '?', 00H
$SG209920 DB	'?????', 00H, '?', 00H
$SG209921 DB	'?????', 00H, '?', 00H
$SG209922 DB	'?????', 00H, '?', 00H
$SG209923 DB	'?????', 00H, '?', 00H
$SG209924 DB	'?????', 00H, '?', 00H
$SG209925 DB	'?????', 00H, '?', 00H
$SG209926 DB	'?????', 00H, '?', 00H
$SG209927 DB	'?????', 00H, '?', 00H
$SG209928 DB	'?????', 00H, '?', 00H
$SG209929 DB	'?????', 00H, '?', 00H
$SG209930 DB	'?????', 00H, '?', 00H
$SG209931 DB	'?????', 00H, '?', 00H
$SG209932 DB	'?????', 00H, '?', 00H
$SG209933 DB	'?????', 00H, '?', 00H
$SG209934 DB	'?????', 00H, '?', 00H
$SG209935 DB	'?????', 00H, '?', 00H
$SG209936 DB	'?????', 00H, '?', 00H
$SG209937 DB	'?????', 00H, '?', 00H
$SG209938 DB	'?????', 00H, '?', 00H
$SG209939 DB	'?????', 00H, '?', 00H
$SG209940 DB	'?????', 00H, '?', 00H
$SG209941 DB	'?????', 00H, '?', 00H
$SG209942 DB	'?????', 00H, '?', 00H
$SG209943 DB	'?????', 00H, '?', 00H
$SG209944 DB	'?????', 00H, '?', 00H
$SG209945 DB	'?????', 00H, '?', 00H
$SG209946 DB	'?????', 00H, '?', 00H
$SG209947 DB	'?????', 00H, '?', 00H
$SG209948 DB	'?????', 00H, '?', 00H
$SG209949 DB	'?????', 00H, '?', 00H
$SG209950 DB	'?????', 00H, '?', 00H
$SG209951 DB	'?????', 00H, '?', 00H
$SG209952 DB	'?????', 00H, '?', 00H
$SG209953 DB	'?????', 00H, '?', 00H
$SG209954 DB	'?????', 00H, '?', 00H
$SG209955 DB	'?????', 00H, '?', 00H
$SG209956 DB	'?????', 00H, '?', 00H
$SG209957 DB	'?????', 00H, '?', 00H
$SG209958 DB	'?????', 00H, '?', 00H
$SG209959 DB	'?????', 00H, '?', 00H
$SG209960 DB	'?????', 00H, '?', 00H
$SG209961 DB	'?????', 00H, '?', 00H
$SG209962 DB	'?????', 00H, '?', 00H
$SG209963 DB	'?????', 00H, '?', 00H
$SG209964 DB	'?????', 00H, '?', 00H
$SG209965 DB	'?????', 00H, '?', 00H
$SG209966 DB	'?????', 00H, '?', 00H
$SG209967 DB	'?????', 00H, '?', 00H
$SG209968 DB	'?????', 00H, '?', 00H
$SG209969 DB	'?????', 00H, '?', 00H
$SG209970 DB	'?????', 00H, '?', 00H
$SG209971 DB	'?????', 00H, '?', 00H
$SG209972 DB	'?????', 00H, '?', 00H
$SG209973 DB	'?????', 00H, '?', 00H
$SG209974 DB	'?????', 00H, '?', 00H
$SG209975 DB	'?????', 00H, '?', 00H
$SG209976 DB	'?????', 00H, '?', 00H
$SG209977 DB	'?????', 00H, '?', 00H
$SG209978 DB	'?????', 00H, '?', 00H
$SG209979 DB	'?????', 00H, '?', 00H
$SG209980 DB	'?????', 00H, '?', 00H
$SG209981 DB	'?????', 00H, '?', 00H
$SG209982 DB	'?????', 00H, '?', 00H
$SG209983 DB	'?????', 00H, '?', 00H
$SG209984 DB	'?????', 00H, '?', 00H
$SG209985 DB	'?????', 00H, '?', 00H
$SG209986 DB	'?????', 00H, '?', 00H
$SG209987 DB	'?????', 00H, '?', 00H
$SG209988 DB	'?????', 00H, '?', 00H
$SG209989 DB	'?????', 00H, '?', 00H
$SG209990 DB	'?????', 00H, '?', 00H
$SG209991 DB	'?????', 00H, '?', 00H
$SG209992 DB	'?????', 00H, '?', 00H
$SG209993 DB	'?????', 00H, '?', 00H
$SG209994 DB	'?????', 00H, '?', 00H
$SG209995 DB	'?????', 00H, '?', 00H
$SG209996 DB	'?????', 00H, '?', 00H
$SG209997 DB	'?????', 00H, '?', 00H
$SG209998 DB	'?????', 00H, '?', 00H
$SG209999 DB	'?????', 00H, '?', 00H
$SG210000 DB	'?????', 00H, '?', 00H
$SG210001 DB	'?????', 00H, '?', 00H
$SG210002 DB	'?????', 00H, '?', 00H
$SG210003 DB	'?????', 00H, '?', 00H
$SG210004 DB	'?????', 00H, '?', 00H
$SG210005 DB	'?????', 00H, '?', 00H
$SG210006 DB	'?????', 00H, '?', 00H
$SG210007 DB	'?????', 00H, '?', 00H
$SG210008 DB	'?????', 00H, '?', 00H
$SG210009 DB	'?????', 00H, '?', 00H
$SG210010 DB	'?????', 00H, '?', 00H
$SG210011 DB	'?????', 00H, '?', 00H
$SG210012 DB	'?????', 00H, '?', 00H
$SG210013 DB	'?????', 00H, '?', 00H
$SG210014 DB	'?????', 00H, '?', 00H
$SG210015 DB	'?????', 00H, '?', 00H
$SG210016 DB	'?????', 00H, '?', 00H
$SG210017 DB	'?????', 00H, '?', 00H
$SG210018 DB	'?????', 00H, '?', 00H
$SG210019 DB	'?????', 00H, '?', 00H
$SG210020 DB	'?????', 00H, '?', 00H
$SG210021 DB	'?????', 00H, '?', 00H
$SG210022 DB	'?????', 00H, '?', 00H
$SG210023 DB	'?????', 00H, '?', 00H
$SG210024 DB	'?????', 00H, '?', 00H
$SG210025 DB	'?????', 00H, '?', 00H
$SG210026 DB	'?????', 00H, '?', 00H
$SG210027 DB	'?????', 00H, '?', 00H
$SG210028 DB	'?????', 00H, '?', 00H
$SG210029 DB	'?????', 00H, '?', 00H
$SG210030 DB	'?????', 00H, '?', 00H
$SG210031 DB	'?????', 00H, '?', 00H
$SG210032 DB	'?????', 00H, '?', 00H
$SG210033 DB	'?????', 00H, '?', 00H
$SG210034 DB	'?????', 00H, '?', 00H
$SG210035 DB	'?????', 00H, '?', 00H
$SG210036 DB	'?????', 00H, '?', 00H
$SG210037 DB	'?????', 00H, '?', 00H
$SG210038 DB	'?????', 00H, '?', 00H
$SG210039 DB	'?????', 00H, '?', 00H
$SG210040 DB	'?????', 00H, '?', 00H
$SG210041 DB	'?????', 00H, '?', 00H
$SG210042 DB	'?????', 00H, '?', 00H
$SG210043 DB	'?????', 00H, '?', 00H
$SG210044 DB	'?????', 00H, '?', 00H
$SG210045 DB	'?????', 00H, '?', 00H
$SG210046 DB	'?????', 00H, '?', 00H
$SG210047 DB	'?????', 00H, '?', 00H
$SG210048 DB	'?????', 00H, '?', 00H
$SG210049 DB	'?????', 00H, '?', 00H
$SG210050 DB	'?????', 00H, '?', 00H
$SG210051 DB	'?????', 00H, '?', 00H
$SG210052 DB	'?????', 00H, '?', 00H
$SG210053 DB	'?????', 00H, '?', 00H
$SG210054 DB	'?????', 00H, '?', 00H
$SG210055 DB	'?????', 00H, '?', 00H
$SG210056 DB	'?????', 00H, '?', 00H
$SG210057 DB	'?????', 00H, '?', 00H
$SG210058 DB	'?????', 00H, '?', 00H
$SG210059 DB	'?????', 00H, '?', 00H
$SG210060 DB	'?????', 00H, '?', 00H
$SG210061 DB	'?????', 00H, '?', 00H
$SG210062 DB	'?????', 00H, '?', 00H
$SG210063 DB	'?????', 00H, '?', 00H
$SG210064 DB	'?????', 00H, '?', 00H
$SG210065 DB	'?????', 00H, '?', 00H
$SG210066 DB	'?????', 00H, '?', 00H
$SG210067 DB	'?????', 00H, '?', 00H
$SG210068 DB	'?????', 00H, '?', 00H
$SG210069 DB	'?????', 00H, '?', 00H
$SG210070 DB	'?????', 00H, '?', 00H
$SG210071 DB	'?????', 00H, '?', 00H
$SG210072 DB	'?????', 00H, '?', 00H
$SG201880 DB	'LPGR', 00H, 'load_positive_long_register', 00H
	ORG $+7
$SG210073 DB	'?????', 00H, '?', 00H
$SG201881 DB	'LNGR', 00H, 'load_negative_long_register', 00H
	ORG $+7
$SG210074 DB	'?????', 00H, '?', 00H
$SG201882 DB	'LTGR', 00H, 'load_and_test_long_register', 00H
	ORG $+7
$SG210075 DB	'?????', 00H, '?', 00H
$SG201883 DB	'LCGR', 00H, 'load_complement_long_register', 00H
	ORG $+5
$SG210076 DB	'?????', 00H, '?', 00H
$SG201884 DB	'LGR', 00H, 'load_long_register', 00H
	ORG $+1
$SG210077 DB	'?????', 00H, '?', 00H
$SG201885 DB	'LURAG', 00H, 'load_using_real_address_long', 00H
	ORG $+5
$SG210078 DB	'?????', 00H, '?', 00H
$SG201886 DB	'LGBR', 00H, 'load_long_byte_register', 00H
	ORG $+3
$SG210079 DB	'?????', 00H, '?', 00H
$SG201887 DB	'LGHR', 00H, 'load_long_halfword_register', 00H
	ORG $+7
$SG210080 DB	'?????', 00H, '?', 00H
$SG201888 DB	'AGR', 00H, 'add_long_register', 00H
	ORG $+2
$SG210081 DB	'?????', 00H, '?', 00H
$SG201889 DB	'SGR', 00H, 'subtract_long_register', 00H
	ORG $+5
$SG210082 DB	'?????', 00H, '?', 00H
$SG201890 DB	'ALGR', 00H, 'add_logical_long_register', 00H
	ORG $+1
$SG210083 DB	'?????', 00H, '?', 00H
$SG201891 DB	'SLGR', 00H, 'subtract_logical_long_register', 00H
	ORG $+4
$SG210084 DB	'?????', 00H, '?', 00H
$SG201892 DB	'MSGR', 00H, 'multiply_single_long_register', 00H
	ORG $+5
$SG210085 DB	'?????', 00H, '?', 00H
$SG201893 DB	'DSGR', 00H, 'divide_single_long_register', 00H
	ORG $+7
$SG210086 DB	'?????', 00H, '?', 00H
$SG201894 DB	'EREGG', 00H, 'extract_stacked_registers_long', 00H
	ORG $+3
$SG210087 DB	'?????', 00H, '?', 00H
$SG201895 DB	'LRVGR', 00H, 'load_reversed_long_register', 00H
	ORG $+6
$SG210088 DB	'?????', 00H, '?', 00H
$SG201896 DB	'LPGFR', 00H, 'load_positive_long_fullword_register', 00H
	ORG $+5
$SG210089 DB	'?????', 00H, '?', 00H
$SG201897 DB	'LNGFR', 00H, 'load_negative_long_fullword_register', 00H
	ORG $+5
$SG210090 DB	'?????', 00H, '?', 00H
$SG201898 DB	'LTGFR', 00H, 'load_and_test_long_fullword_register', 00H
	ORG $+5
$SG210091 DB	'?????', 00H, '?', 00H
$SG201899 DB	'LCGFR', 00H, 'load_complement_long_fullword_register', 00H
	ORG $+3
$SG210092 DB	'?????', 00H, '?', 00H
$SG201900 DB	'LGFR', 00H, 'load_long_fullword_register', 00H
	ORG $+7
$SG210093 DB	'?????', 00H, '?', 00H
$SG201901 DB	'?????', 00H, '?', 00H
$SG210094 DB	'?????', 00H, '?', 00H
$SG201902 DB	'LLGFR', 00H, 'load_logical_long_fullword_register', 00H
	ORG $+6
$SG210095 DB	'?????', 00H, '?', 00H
$SG201903 DB	'LLGTR', 00H, 'load_logical_long_thirtyone_register', 00H
	ORG $+5
$SG210096 DB	'?????', 00H, '?', 00H
$SG201904 DB	'AGFR', 00H, 'add_long_fullword_register', 00H
$SG210097 DB	'?????', 00H, '?', 00H
$SG201905 DB	'SGFR', 00H, 'subtract_long_fullword_register', 00H
	ORG $+3
$SG210098 DB	'?????', 00H, '?', 00H
$SG201906 DB	'ALGFR', 00H, 'add_logical_long_fullword_register', 00H
	ORG $+7
$SG210099 DB	'?????', 00H, '?', 00H
$SG201907 DB	'SLGFR', 00H, 'subtract_logical_long_fullword_register', 00H
	ORG $+2
$SG210100 DB	'?????', 00H, '?', 00H
$SG201908 DB	'MSGFR', 00H, 'multiply_single_long_fullword_register', 00H
	ORG $+3
$SG210101 DB	'?????', 00H, '?', 00H
$SG201909 DB	'DSGFR', 00H, 'divide_single_long_fullword_register', 00H
	ORG $+5
$SG210102 DB	'?????', 00H, '?', 00H
$SG201910 DB	'KMAC', 00H, 'compute_message_authentication_code', 00H
	ORG $+7
$SG210103 DB	'?????', 00H, '?', 00H
$SG201911 DB	'LRVR', 00H, 'load_reversed_register', 00H
	ORG $+4
$SG201912 DB	'CGR', 00H, 'compare_long_register', 00H
	ORG $+6
$SG201913 DB	'CLGR', 00H, 'compare_logical_long_register', 00H
	ORG $+5
$SG201914 DB	'?????', 00H, '?', 00H
$SG201915 DB	'?????', 00H, '?', 00H
$SG201916 DB	'?????', 00H, '?', 00H
$SG201917 DB	'STURG', 00H, 'store_using_real_address_long', 00H
	ORG $+4
$SG201918 DB	'LBR', 00H, 'load_byte_register', 00H
	ORG $+1
$SG201919 DB	'LHR', 00H, 'load_halfword_register', 00H
	ORG $+5
$SG201920 DB	'PCKMO', 00H, 'perform_cryptographic_key_management_opera'
	DB	'tion', 00H
	ORG $+3
$SG201921 DB	'?????', 00H, '?', 00H
$SG201922 DB	'KMF', 00H, 'cipher_message_with_cipher_feedback', 00H
$SG201923 DB	'KMO', 00H, 'cipher_message_with_output_feedback', 00H
$SG201924 DB	'PCC', 00H, 'perform_cryptographic_computation', 00H
	ORG $+2
$SG201925 DB	'KMCTR', 00H, 'cipher_message_with_counter', 00H
	ORG $+6
$SG201926 DB	'KM', 00H, 'cipher_message', 00H
	ORG $+6
$SG201927 DB	'KMC', 00H, 'cipher_message_with_chaining', 00H
	ORG $+7
$SG201928 DB	'CGFR', 00H, 'compare_long_fullword_register', 00H
	ORG $+4
$SG201929 DB	'CLGFR', 00H, 'compare_logical_long_fullword_register', 00H
	ORG $+3
$SG201930 DB	'?????', 00H, '?', 00H
$SG201931 DB	'?????', 00H, '?', 00H
$SG201932 DB	'?????', 00H, '?', 00H
$SG201933 DB	'?????', 00H, '?', 00H
$SG201934 DB	'?????', 00H, '?', 00H
$SG201935 DB	'?????', 00H, '?', 00H
$SG201936 DB	'?????', 00H, '?', 00H
$SG201937 DB	'?????', 00H, '?', 00H
$SG201938 DB	'?????', 00H, '?', 00H
$SG201939 DB	'?????', 00H, '?', 00H
$SG201940 DB	'?????', 00H, '?', 00H
$SG201941 DB	'?????', 00H, '?', 00H
$SG201942 DB	'KIMD', 00H, 'compute_intermediate_message_digest', 00H
	ORG $+7
$SG201943 DB	'KLMD', 00H, 'compute_last_message_digest', 00H
	ORG $+7
$SG201944 DB	'?????', 00H, '?', 00H
$SG201945 DB	'CFDTR', 00H, 'convert_dfp_long_to_fix32_reg', 00H
	ORG $+4
$SG201946 DB	'CLGDTR', 00H, 'convert_dfp_long_to_u64_reg', 00H
	ORG $+5
$SG201947 DB	'CLFDTR', 00H, 'convert_dfp_long_to_u32_reg', 00H
	ORG $+5
$SG201948 DB	'?????', 00H, '?', 00H
$SG201949 DB	'?????', 00H, '?', 00H
$SG201950 DB	'BCTGR', 00H, 'branch_on_count_long_register', 00H
	ORG $+4
$SG201951 DB	'?????', 00H, '?', 00H
$SG201952 DB	'?????', 00H, '?', 00H
$SG201953 DB	'CFXTR', 00H, 'convert_dfp_ext_to_fix32_reg', 00H
	ORG $+5
$SG201954 DB	'CLGXTR', 00H, 'convert_dfp_ext_to_u64_reg', 00H
	ORG $+6
$SG201955 DB	'CLFXTR', 00H, 'convert_dfp_ext_to_u32_reg', 00H
	ORG $+6
$SG201956 DB	'?????', 00H, '?', 00H
$SG201957 DB	'?????', 00H, '?', 00H
$SG201958 DB	'?????', 00H, '?', 00H
$SG201959 DB	'?????', 00H, '?', 00H
$SG201960 DB	'?????', 00H, '?', 00H
$SG201961 DB	'CDFTR', 00H, 'convert_fix32_to_dfp_long_reg', 00H
	ORG $+4
$SG201962 DB	'CDLGTR', 00H, 'convert_u64_to_dfp_long_reg', 00H
	ORG $+5
$SG201963 DB	'CDLFTR', 00H, 'convert_u32_to_dfp_long_reg', 00H
	ORG $+5
$SG201964 DB	'?????', 00H, '?', 00H
$SG201965 DB	'?????', 00H, '?', 00H
$SG201966 DB	'?????', 00H, '?', 00H
$SG201967 DB	'?????', 00H, '?', 00H
$SG201968 DB	'?????', 00H, '?', 00H
$SG201969 DB	'CXFTR', 00H, 'convert_fix32_to_dfp_ext_reg', 00H
	ORG $+5
$SG201970 DB	'CXLGTR', 00H, 'convert_u64_to_dfp_ext_reg', 00H
	ORG $+6
$SG201971 DB	'CXLFTR', 00H, 'convert_u32_to_dfp_ext_reg', 00H
	ORG $+6
$SG201972 DB	'?????', 00H, '?', 00H
$SG201973 DB	'?????', 00H, '?', 00H
$SG201974 DB	'?????', 00H, '?', 00H
$SG201975 DB	'?????', 00H, '?', 00H
$SG201976 DB	'CGRT', 00H, 'compare_and_trap_long_register', 00H
	ORG $+4
$SG201977 DB	'CLGRT', 00H, 'compare_logical_and_trap_long_register', 00H
	ORG $+3
$SG201978 DB	'?????', 00H, '?', 00H
$SG201979 DB	'?????', 00H, '?', 00H
$SG201980 DB	'NNGRK', 00H, 'nand_register_long', 00H
	ORG $+7
$SG201981 DB	'OCGRK', 00H, 'or_register_long_with_complement', 00H
	ORG $+1
$SG201982 DB	'NOGRK', 00H, 'nor_register_long', 00H
$SG201983 DB	'NXGRK', 00H, 'not_xor_register_long', 00H
	ORG $+4
$SG201984 DB	'?????', 00H, '?', 00H
$SG201985 DB	'?????', 00H, '?', 00H
$SG201986 DB	'?????', 00H, '?', 00H
$SG201987 DB	'?????', 00H, '?', 00H
$SG201988 DB	'?????', 00H, '?', 00H
$SG201989 DB	'?????', 00H, '?', 00H
$SG201990 DB	'?????', 00H, '?', 00H
$SG201991 DB	'?????', 00H, '?', 00H
$SG201992 DB	'?????', 00H, '?', 00H
$SG201993 DB	'?????', 00H, '?', 00H
$SG201994 DB	'CRT', 00H, 'compare_and_trap_register', 00H
	ORG $+2
$SG201995 DB	'CLRT', 00H, 'compare_logical_and_trap_register', 00H
	ORG $+1
$SG201996 DB	'NNRK', 00H, 'nand_register', 00H
	ORG $+5
$SG201997 DB	'OCRK', 00H, 'or_register_with_complement', 00H
	ORG $+7
$SG201998 DB	'NORK', 00H, 'nor_register', 00H
	ORG $+6
$SG201999 DB	'NXRK', 00H, 'not_xor_register', 00H
	ORG $+2
$SG202000 DB	'?????', 00H, '?', 00H
$SG202001 DB	'?????', 00H, '?', 00H
$SG202002 DB	'?????', 00H, '?', 00H
$SG202003 DB	'?????', 00H, '?', 00H
$SG202004 DB	'?????', 00H, '?', 00H
$SG202005 DB	'?????', 00H, '?', 00H
$SG202006 DB	'?????', 00H, '?', 00H
$SG202007 DB	'?????', 00H, '?', 00H
$SG202008 DB	'NGR', 00H, 'and_long_register', 00H
	ORG $+2
$SG202009 DB	'OGR', 00H, 'or_long_register', 00H
	ORG $+3
$SG202010 DB	'XGR', 00H, 'exclusive_or_long_register', 00H
	ORG $+1
$SG202011 DB	'FLOGR', 00H, 'find_leftmost_one_long_register', 00H
	ORG $+2
$SG202012 DB	'LLGCR', 00H, 'load_logical_long_character_register', 00H
	ORG $+5
$SG202013 DB	'LLGHR', 00H, 'load_logical_long_halfword_register', 00H
	ORG $+6
$SG202014 DB	'MLGR', 00H, 'multiply_logical_long_register', 00H
	ORG $+4
$SG202015 DB	'DLGR', 00H, 'divide_logical_long_register', 00H
	ORG $+6
$SG202016 DB	'ALCGR', 00H, 'add_logical_carry_long_register', 00H
	ORG $+2
$SG202017 DB	'SLBGR', 00H, 'subtract_logical_borrow_long_register', 00H
	ORG $+4
$SG202018 DB	'CSPG', 00H, 'compare_and_swap_and_purge_long', 00H
	ORG $+3
$SG202019 DB	'?????', 00H, '?', 00H
$SG202020 DB	'?????', 00H, '?', 00H
$SG202021 DB	'EPSW', 00H, 'extract_psw', 00H
	ORG $+7
$SG202022 DB	'IDTE', 00H, 'invalidate_dat_table_entry', 00H
$SG202023 DB	'?????', 00H, '?', 00H
$SG202024 DB	'TRTT', 00H, 'translate_two_to_two', 00H
	ORG $+6
$SG202025 DB	'TRTO', 00H, 'translate_two_to_one', 00H
	ORG $+6
$SG202026 DB	'TROT', 00H, 'translate_one_to_two', 00H
	ORG $+6
$SG202027 DB	'TROO', 00H, 'translate_one_to_one', 00H
	ORG $+6
$SG202028 DB	'LLCR', 00H, 'load_logical_character_register', 00H
	ORG $+3
$SG202029 DB	'LLHR', 00H, 'load_logical_halfword_register', 00H
	ORG $+4
$SG202030 DB	'MLR', 00H, 'multiply_logical_register', 00H
	ORG $+2
$SG202031 DB	'DLR', 00H, 'divide_logical_register', 00H
	ORG $+4
$SG202032 DB	'ALCR', 00H, 'add_logical_carry_register', 00H
$SG202033 DB	'SLBR', 00H, 'subtract_logical_borrow_register', 00H
	ORG $+2
$SG202034 DB	'EPAIR', 00H, 'extract_primary_asn_and_instance', 00H
	ORG $+1
$SG202035 DB	'ESAIR', 00H, 'extract_secondary_asn_and_instance', 00H
	ORG $+7
$SG202036 DB	'EQBS', 00H, 'extract_queue_buffer_state', 00H
$SG202037 DB	'ESEA', 00H, 'extract_and_set_extended_authority', 00H
$SG202038 DB	'PTI', 00H, 'program_transfer_with_instance', 00H
	ORG $+5
$SG202039 DB	'SSAIR', 00H, 'set_secondary_asn_with_instance', 00H
	ORG $+2
$SG202040 DB	'?????', 00H, '?', 00H
$SG202041 DB	'?????', 00H, '?', 00H
$SG202042 DB	'PTF', 00H, 'perform_topology_function', 00H
	ORG $+2
$SG202043 DB	'?????', 00H, '?', 00H
$SG202044 DB	'?????', 00H, '?', 00H
$SG202045 DB	'?????', 00H, '?', 00H
$SG202046 DB	'?????', 00H, '?', 00H
$SG202047 DB	'?????', 00H, '?', 00H
$SG202048 DB	'?????', 00H, '?', 00H
$SG202049 DB	'?????', 00H, '?', 00H
$SG202050 DB	'LPTEA', 00H, 'load_page_table_entry_address', 00H
	ORG $+4
$SG202051 DB	'ESSA ', 00H, 'extract_and_set_storage_attributes', 00H
	ORG $+7
$SG202052 DB	'IRBM', 00H, 'insert_reference_bits_multiple', 00H
	ORG $+4
$SG202053 DB	'?????', 00H, '?', 00H
$SG202054 DB	'RRBM', 00H, 'reset_reference_bits_multiple', 00H
	ORG $+5
$SG202055 DB	'PFMF', 00H, 'perform_frame_management_function', 00H
	ORG $+1
$SG202056 DB	'CU14', 00H, 'convert_utf8_to_utf32', 00H
	ORG $+5
$SG202057 DB	'CU24', 00H, 'convert_utf16_to_utf32', 00H
	ORG $+4
$SG202058 DB	'CU41', 00H, 'convert_utf32_to_utf8', 00H
	ORG $+5
$SG202059 DB	'CU42', 00H, 'convert_utf32_to_utf16', 00H
	ORG $+4
$SG202060 DB	'?????', 00H, '?', 00H
$SG202061 DB	'?????', 00H, '?', 00H
$SG202062 DB	'?????', 00H, '?', 00H
$SG202063 DB	'?????', 00H, '?', 00H
$SG202064 DB	'?????', 00H, '?', 00H
$SG202065 DB	'?????', 00H, '?', 00H
$SG202066 DB	'?????', 00H, '?', 00H
$SG202067 DB	'?????', 00H, '?', 00H
$SG202068 DB	'?????', 00H, '?', 00H
$SG202069 DB	'TRTRE', 00H, 'translate_and_test_reverse_extended', 00H
	ORG $+6
$SG202070 DB	'SRSTU', 00H, 'search_string_unicode', 00H
	ORG $+4
$SG202071 DB	'TRTE', 00H, 'translate_and_test_extended', 00H
	ORG $+7
$SG202072 DB	'SELFHR', 00H, 'select_fullword_high_register', 00H
	ORG $+3
$SG202073 DB	'?????', 00H, '?', 00H
$SG202074 DB	'?????', 00H, '?', 00H
$SG202075 DB	'?????', 00H, '?', 00H
$SG202076 DB	'?????', 00H, '?', 00H
$SG202077 DB	'?????', 00H, '?', 00H
$SG202078 DB	'?????', 00H, '?', 00H
$SG202079 DB	'?????', 00H, '?', 00H
$SG202080 DB	'AHHHR', 00H, 'add_high_high_high_register', 00H
	ORG $+6
$SG202081 DB	'SHHHR', 00H, 'subtract_high_high_high_register', 00H
	ORG $+1
$SG202082 DB	'ALHHHR', 00H, 'add_logical_high_high_high_register', 00H
	ORG $+5
$SG202083 DB	'SLHHHR', 00H, 'subtract_logical_high_high_high_register', 00H
$SG202084 DB	'?????', 00H, '?', 00H
$SG202085 DB	'CHHR', 00H, 'compare_high_high_register', 00H
$SG202086 DB	'?????', 00H, '?', 00H
$SG202087 DB	'CLHHR', 00H, 'compare_logical_high_high_register', 00H
	ORG $+7
$SG202088 DB	'?????', 00H, '?', 00H
$SG202089 DB	'?????', 00H, '?', 00H
$SG202090 DB	'?????', 00H, '?', 00H
$SG202091 DB	'?????', 00H, '?', 00H
$SG202092 DB	'?????', 00H, '?', 00H
$SG202093 DB	'?????', 00H, '?', 00H
$SG202094 DB	'?????', 00H, '?', 00H
$SG202095 DB	'?????', 00H, '?', 00H
$SG202096 DB	'AHHLR', 00H, 'add_high_high_low_register', 00H
	ORG $+7
$SG202097 DB	'SHHLR', 00H, 'subtract_high_high_low_register', 00H
	ORG $+2
$SG202098 DB	'ALHHLR', 00H, 'add_logical_high_high_low_register', 00H
	ORG $+6
$SG202099 DB	'SLHHLR', 00H, 'subtract_logical_high_high_low_register', 00H
	ORG $+1
$SG202100 DB	'?????', 00H, '?', 00H
$SG202101 DB	'CHLR', 00H, 'compare_high_low_register', 00H
	ORG $+1
$SG202102 DB	'?????', 00H, '?', 00H
$SG202103 DB	'CLHLR', 00H, 'compare_logical_high_low_register', 00H
$SG202104 DB	'LOCFHR', 00H, 'load_high_on_condition_register', 00H
	ORG $+1
$SG202105 DB	'POPCNT', 00H, 'population_count', 00H
$SG202106 DB	'LOCGR', 00H, 'load_on_condition_long_register', 00H
	ORG $+2
$SG202107 DB	'SELGR', 00H, 'select_register_long', 00H
	ORG $+5
$SG202108 DB	'NGRK', 00H, 'and_distinct_long_register', 00H
$SG202109 DB	'NCGRK', 00H, 'and_register_long_with_complement', 00H
$SG202110 DB	'OGRK', 00H, 'or_distinct_long_register', 00H
	ORG $+1
$SG202111 DB	'XGRK', 00H, 'exclusive_or_distinct_long_register', 00H
	ORG $+7
$SG202112 DB	'AGRK', 00H, 'add_distinct_long_register', 00H
$SG202113 DB	'SGRK', 00H, 'subtract_distinct_long_register', 00H
	ORG $+3
$SG202114 DB	'ALGRK', 00H, 'add_logical_distinct_long_register', 00H
	ORG $+7
$SG202115 DB	'SLGRK', 00H, 'subtract_logical_distinct_long_register', 00H
	ORG $+2
$SG202116 DB	'MGRK', 00H, 'multiply_long_register', 00H
	ORG $+4
$SG202117 DB	'MSGRKC', 00H, 'multiply_single_long_register_cc', 00H
$SG202118 DB	'?????', 00H, '?', 00H
$SG202119 DB	'?????', 00H, '?', 00H
$SG202120 DB	'SELR', 00H, 'select_register', 00H
	ORG $+3
$SG202121 DB	'?????', 00H, '?', 00H
$SG202122 DB	'LOCR', 00H, 'load_on_condition_register', 00H
$SG202123 DB	'?????', 00H, '?', 00H
$SG202124 DB	'NRK', 00H, 'and_distinct_register', 00H
	ORG $+6
$SG202125 DB	'NCRK', 00H, 'and_register_with_complement', 00H
	ORG $+6
$SG202126 DB	'ORK', 00H, 'or_distinct_register', 00H
	ORG $+7
$SG202127 DB	'XRK', 00H, 'exclusive_or_distinct_register', 00H
	ORG $+5
$SG202128 DB	'ARK', 00H, 'add_distinct_register', 00H
	ORG $+6
$SG202129 DB	'SRK', 00H, 'subtract_distinct_register', 00H
	ORG $+1
$SG202130 DB	'ALRK', 00H, 'add_logical_distinct_register', 00H
	ORG $+5
$SG202131 DB	'SLRK', 00H, 'subtract_logical_distinct_register', 00H
$SG202132 DB	'?????', 00H, '?', 00H
$SG202133 DB	'MSRKC', 00H, 'multiply_single_register_cc', 00H
	ORG $+6
$SG202134 DB	'?????', 00H, '?', 00H
$SG202135 DB	'?????', 00H, '?', 00H
$SG202168 DB	'LARL', 00H, 'load_address_relative_long', 00H
$SG202169 DB	'LGFI', 00H, 'load_long_fullword_immediate', 00H
	ORG $+6
$SG202170 DB	'?????', 00H, '?', 00H
$SG202171 DB	'?????', 00H, '?', 00H
$SG202172 DB	'BRCL', 00H, 'branch_relative_on_condition_long', 00H
	ORG $+1
$SG202173 DB	'BRASL', 00H, 'branch_relative_and_save_long', 00H
	ORG $+4
$SG202174 DB	'XIHF', 00H, 'exclusive_or_immediate_high_fullword', 00H
	ORG $+6
$SG202175 DB	'XILF', 00H, 'exclusive_or_immediate_low_fullword', 00H
	ORG $+7
$SG202176 DB	'IIHF', 00H, 'insert_immediate_high_fullword', 00H
	ORG $+4
$SG202177 DB	'IILF', 00H, 'insert_immediate_low_fullword', 00H
	ORG $+5
$SG202178 DB	'NIHF', 00H, 'and_immediate_high_fullword', 00H
	ORG $+7
$SG202179 DB	'NILF', 00H, 'and_immediate_low_fullword', 00H
$SG202180 DB	'OIHF', 00H, 'or_immediate_high_fullword', 00H
$SG202181 DB	'OILF', 00H, 'or_immediate_low_fullword', 00H
	ORG $+1
$SG202182 DB	'LLIHF', 00H, 'load_logical_immediate_high_fullword', 00H
	ORG $+5
$SG202183 DB	'LLILF', 00H, 'load_logical_immediate_low_fullword', 00H
	ORG $+6
$SG202216 DB	'MSGFI', 00H, 'multiply_single_immediate_long_fullword', 00H
	ORG $+2
$SG202217 DB	'MSFI', 00H, 'multiply_single_immediate_fullword', 00H
$SG202218 DB	'?????', 00H, '?', 00H
$SG202219 DB	'?????', 00H, '?', 00H
$SG202220 DB	'SLGFI', 00H, 'subtract_logical_long_fullword_immediate', 00H
	ORG $+1
$SG202221 DB	'SLFI', 00H, 'subtract_logical_fullword_immediate', 00H
	ORG $+7
$SG202222 DB	'?????', 00H, '?', 00H
$SG202223 DB	'?????', 00H, '?', 00H
$SG202224 DB	'AGFI', 00H, 'add_long_fullword_immediate', 00H
	ORG $+7
$SG202225 DB	'AFI', 00H, 'add_fullword_immediate', 00H
	ORG $+5
$SG202226 DB	'ALGFI', 00H, 'add_logical_long_fullword_immediate', 00H
	ORG $+6
$SG202227 DB	'ALFI', 00H, 'add_logical_fullword_immediate', 00H
	ORG $+4
$SG202228 DB	'CGFI', 00H, 'compare_long_fullword_immediate', 00H
	ORG $+3
$SG202229 DB	'CFI', 00H, 'compare_fullword_immediate', 00H
	ORG $+1
$SG202230 DB	'CLGFI', 00H, 'compare_logical_long_fullword_immediate', 00H
	ORG $+2
$SG202231 DB	'CLFI', 00H, 'compare_logical_fullword_immediate', 00H
$SG202264 DB	'?????', 00H, '?', 00H
$SG202265 DB	'?????', 00H, '?', 00H
$SG202266 DB	'LLHRL', 00H, 'load_logical_halfword_relative_long', 00H
	ORG $+6
$SG202267 DB	'?????', 00H, '?', 00H
$SG202268 DB	'LGHRL', 00H, 'load_halfword_relative_long_long', 00H
	ORG $+1
$SG202269 DB	'LHRL', 00H, 'load_halfword_relative_long', 00H
	ORG $+7
$SG202270 DB	'LLGHRL', 00H, 'load_logical_halfword_relative_long_long', 00H
$SG202271 DB	'STHRL', 00H, 'store_halfword_relative_long', 00H
	ORG $+5
$SG202272 DB	'LGRL', 00H, 'load_relative_long_long', 00H
	ORG $+3
$SG202273 DB	'?????', 00H, '?', 00H
$SG202274 DB	'?????', 00H, '?', 00H
$SG202275 DB	'STGRL', 00H, 'store_relative_long_long', 00H
	ORG $+1
$SG202276 DB	'LGFRL', 00H, 'load_relative_long_long_fullword', 00H
	ORG $+1
$SG202277 DB	'LRL', 00H, 'load_relative_long', 00H
	ORG $+1
$SG202278 DB	'LLGFRL', 00H, 'load_logical_relative_long_long_fullword', 00H
$SG202279 DB	'STRL', 00H, 'store_relative_long', 00H
	ORG $+7
$SG202312 DB	'EXRL', 00H, 'execute_relative_long', 00H
	ORG $+5
$SG202313 DB	'?????', 00H, '?', 00H
$SG202314 DB	'PFDRL', 00H, 'prefetch_data_relative_long', 00H
	ORG $+6
$SG202315 DB	'?????', 00H, '?', 00H
$SG202316 DB	'CGHRL', 00H, 'compare_halfword_relative_long_long', 00H
	ORG $+6
$SG202317 DB	'CHRL', 00H, 'compare_halfword_relative_long', 00H
	ORG $+4
$SG202318 DB	'CLGHRL', 00H, 'compare_logical_relative_long_long_halfwo'
	DB	'rd', 00H
	ORG $+5
$SG202319 DB	'CLHRL', 00H, 'compare_logical_relative_long_halfword', 00H
	ORG $+3
$SG202320 DB	'CGRL', 00H, 'compare_relative_long_long', 00H
$SG202321 DB	'?????', 00H, '?', 00H
$SG202322 DB	'CLGRL', 00H, 'compare_logical_relative_long_long', 00H
	ORG $+7
$SG202323 DB	'?????', 00H, '?', 00H
$SG202324 DB	'CGFRL', 00H, 'compare_relative_long_long_fullword', 00H
	ORG $+6
$SG202325 DB	'CRL', 00H, 'compare_relative_long', 00H
	ORG $+6
$SG202326 DB	'CLGFRL', 00H, 'compare_logical_relative_long_long_fullwo'
	DB	'rd', 00H
	ORG $+5
$SG202327 DB	'CLRL', 00H, 'compare_logical_relative_long', 00H
	ORG $+5
$SG202360 DB	'MVCOS', 00H, 'move_with_optional_specifications', 00H
$SG202361 DB	'ECTG', 00H, 'extract_cpu_time', 00H
	ORG $+2
$SG202362 DB	'CSST', 00H, 'compare_and_swap_and_store', 00H
$SG202363 DB	'?????', 00H, '?', 00H
$SG202364 DB	'LPD', 00H, 'load_pair_disjoint', 00H
	ORG $+1
$SG202365 DB	'LPDG', 00H, 'load_pair_disjoint_long', 00H
	ORG $+3
$SG202366 DB	'?????', 00H, '?', 00H
$SG202367 DB	'?????', 00H, '?', 00H
$SG202368 DB	'?????', 00H, '?', 00H
$SG202369 DB	'?????', 00H, '?', 00H
$SG202370 DB	'?????', 00H, '?', 00H
$SG202371 DB	'?????', 00H, '?', 00H
$SG202372 DB	'?????', 00H, '?', 00H
$SG202373 DB	'?????', 00H, '?', 00H
$SG202374 DB	'?????', 00H, '?', 00H
$SG202375 DB	'?????', 00H, '?', 00H
$SG202408 DB	'?????', 00H, '?', 00H
$SG202409 DB	'?????', 00H, '?', 00H
$SG202410 DB	'?????', 00H, '?', 00H
$SG202411 DB	'?????', 00H, '?', 00H
$SG202412 DB	'?????', 00H, '?', 00H
$SG202413 DB	'?????', 00H, '?', 00H
$SG202414 DB	'BRCTH', 00H, 'branch_relative_on_count_high', 00H
	ORG $+4
$SG202415 DB	'?????', 00H, '?', 00H
$SG202416 DB	'AIH', 00H, 'add_high_immediate', 00H
	ORG $+1
$SG202417 DB	'?????', 00H, '?', 00H
$SG202418 DB	'ALSIH', 00H, 'add_logical_with_signed_immediate_high', 00H
	ORG $+3
$SG202419 DB	'ALSIHN', 00H, 'add_logical_with_signed_immediate_high_n', 00H
$SG202420 DB	'?????', 00H, '?', 00H
$SG202421 DB	'CIH', 00H, 'compare_high_immediate', 00H
	ORG $+5
$SG202422 DB	'?????', 00H, '?', 00H
$SG202423 DB	'CLIH', 00H, 'compare_logical_high_immediate', 00H
	ORG $+4
$SG210616 DB	'CLR', 00H, '1500', 00H
	ORG $+7
$SG210617 DB	'CLR', 00H, '1501', 00H
	ORG $+7
$SG210618 DB	'CLR', 00H, '1502', 00H
	ORG $+7
$SG210619 DB	'CLR', 00H, '1503', 00H
	ORG $+7
$SG210620 DB	'CLR', 00H, '1504', 00H
	ORG $+7
$SG210621 DB	'CLR', 00H, '1505', 00H
	ORG $+7
$SG210622 DB	'CLR', 00H, '1506', 00H
	ORG $+7
$SG210623 DB	'CLR', 00H, '1507', 00H
	ORG $+7
$SG210624 DB	'CLR', 00H, '1508', 00H
	ORG $+7
$SG210625 DB	'CLR', 00H, '1509', 00H
	ORG $+7
$SG210626 DB	'CLR', 00H, '150A', 00H
	ORG $+7
$SG210627 DB	'CLR', 00H, '150B', 00H
	ORG $+7
$SG210628 DB	'CLR', 00H, '150C', 00H
	ORG $+7
$SG210629 DB	'CLR', 00H, '150D', 00H
	ORG $+7
$SG210630 DB	'CLR', 00H, '150E', 00H
	ORG $+7
$SG210631 DB	'CLR', 00H, '150F', 00H
	ORG $+7
$SG210632 DB	'CLR', 00H, '1510', 00H
	ORG $+7
$SG210633 DB	'CLR', 00H, '1511', 00H
	ORG $+7
$SG210634 DB	'CLR', 00H, '1512', 00H
	ORG $+7
$SG210635 DB	'CLR', 00H, '1513', 00H
	ORG $+7
$SG210636 DB	'CLR', 00H, '1514', 00H
	ORG $+7
$SG210637 DB	'CLR', 00H, '1515', 00H
	ORG $+7
$SG210638 DB	'CLR', 00H, '1516', 00H
	ORG $+7
$SG210639 DB	'CLR', 00H, '1517', 00H
	ORG $+7
$SG210640 DB	'CLR', 00H, '1518', 00H
	ORG $+7
$SG210641 DB	'CLR', 00H, '1519', 00H
	ORG $+7
$SG210642 DB	'CLR', 00H, '151A', 00H
	ORG $+7
$SG210643 DB	'CLR', 00H, '151B', 00H
	ORG $+7
$SG210644 DB	'CLR', 00H, '151C', 00H
	ORG $+7
$SG210645 DB	'CLR', 00H, '151D', 00H
	ORG $+7
$SG210646 DB	'CLR', 00H, '151E', 00H
	ORG $+7
$SG210647 DB	'CLR', 00H, '151F', 00H
	ORG $+7
$SG210648 DB	'CLR', 00H, '1520', 00H
	ORG $+7
$SG210649 DB	'CLR', 00H, '1521', 00H
	ORG $+7
$SG210650 DB	'CLR', 00H, '1522', 00H
	ORG $+7
$SG210651 DB	'CLR', 00H, '1523', 00H
	ORG $+7
$SG210652 DB	'CLR', 00H, '1524', 00H
	ORG $+7
$SG210653 DB	'CLR', 00H, '1525', 00H
	ORG $+7
$SG210654 DB	'CLR', 00H, '1526', 00H
	ORG $+7
$SG210655 DB	'CLR', 00H, '1527', 00H
	ORG $+7
$SG210656 DB	'CLR', 00H, '1528', 00H
	ORG $+7
$SG210657 DB	'CLR', 00H, '1529', 00H
	ORG $+7
$SG210658 DB	'CLR', 00H, '152A', 00H
	ORG $+7
$SG210659 DB	'CLR', 00H, '152B', 00H
	ORG $+7
$SG210660 DB	'CLR', 00H, '152C', 00H
	ORG $+7
$SG210661 DB	'CLR', 00H, '152D', 00H
	ORG $+7
$SG210662 DB	'CLR', 00H, '152E', 00H
	ORG $+7
$SG210663 DB	'CLR', 00H, '152F', 00H
	ORG $+7
$SG210664 DB	'CLR', 00H, '1530', 00H
	ORG $+7
$SG210665 DB	'CLR', 00H, '1531', 00H
	ORG $+7
$SG210666 DB	'CLR', 00H, '1532', 00H
	ORG $+7
$SG210667 DB	'CLR', 00H, '1533', 00H
	ORG $+7
$SG210668 DB	'CLR', 00H, '1534', 00H
	ORG $+7
$SG210669 DB	'CLR', 00H, '1535', 00H
	ORG $+7
$SG210670 DB	'CLR', 00H, '1536', 00H
	ORG $+7
$SG210671 DB	'CLR', 00H, '1537', 00H
	ORG $+7
$SG210672 DB	'CLR', 00H, '1538', 00H
	ORG $+7
$SG210673 DB	'CLR', 00H, '1539', 00H
	ORG $+7
$SG210674 DB	'CLR', 00H, '153A', 00H
	ORG $+7
$SG210675 DB	'CLR', 00H, '153B', 00H
	ORG $+7
$SG210676 DB	'CLR', 00H, '153C', 00H
	ORG $+7
$SG210677 DB	'CLR', 00H, '153D', 00H
	ORG $+7
$SG210678 DB	'CLR', 00H, '153E', 00H
	ORG $+7
$SG210679 DB	'CLR', 00H, '153F', 00H
	ORG $+7
$SG210680 DB	'CLR', 00H, '1540', 00H
	ORG $+7
$SG210681 DB	'CLR', 00H, '1541', 00H
	ORG $+7
$SG210682 DB	'CLR', 00H, '1542', 00H
	ORG $+7
$SG210683 DB	'CLR', 00H, '1543', 00H
	ORG $+7
$SG210684 DB	'CLR', 00H, '1544', 00H
	ORG $+7
$SG210685 DB	'CLR', 00H, '1545', 00H
	ORG $+7
$SG210686 DB	'CLR', 00H, '1546', 00H
	ORG $+7
$SG210687 DB	'CLR', 00H, '1547', 00H
	ORG $+7
$SG210688 DB	'CLR', 00H, '1548', 00H
	ORG $+7
$SG210689 DB	'CLR', 00H, '1549', 00H
	ORG $+7
$SG210690 DB	'CLR', 00H, '154A', 00H
	ORG $+7
$SG210691 DB	'CLR', 00H, '154B', 00H
	ORG $+7
$SG210692 DB	'CLR', 00H, '154C', 00H
	ORG $+7
$SG210693 DB	'CLR', 00H, '154D', 00H
	ORG $+7
$SG210694 DB	'CLR', 00H, '154E', 00H
	ORG $+7
$SG210695 DB	'CLR', 00H, '154F', 00H
	ORG $+7
$SG210696 DB	'CLR', 00H, '1550', 00H
	ORG $+7
$SG210697 DB	'CLR', 00H, '1551', 00H
	ORG $+7
$SG210698 DB	'CLR', 00H, '1552', 00H
	ORG $+7
$SG210699 DB	'CLR', 00H, '1553', 00H
	ORG $+7
$SG210700 DB	'CLR', 00H, '1554', 00H
	ORG $+7
$SG210701 DB	'CLR', 00H, '1555', 00H
	ORG $+7
$SG210702 DB	'CLR', 00H, '1556', 00H
	ORG $+7
$SG210703 DB	'CLR', 00H, '1557', 00H
	ORG $+7
$SG210704 DB	'CLR', 00H, '1558', 00H
	ORG $+7
$SG210705 DB	'CLR', 00H, '1559', 00H
	ORG $+7
$SG210706 DB	'CLR', 00H, '155A', 00H
	ORG $+7
$SG210707 DB	'CLR', 00H, '155B', 00H
	ORG $+7
$SG210708 DB	'CLR', 00H, '155C', 00H
	ORG $+7
$SG210709 DB	'CLR', 00H, '155D', 00H
	ORG $+7
$SG210710 DB	'CLR', 00H, '155E', 00H
	ORG $+7
$SG210711 DB	'CLR', 00H, '155F', 00H
	ORG $+7
$SG210712 DB	'CLR', 00H, '1560', 00H
	ORG $+7
$SG210713 DB	'CLR', 00H, '1561', 00H
	ORG $+7
$SG210714 DB	'CLR', 00H, '1562', 00H
	ORG $+7
$SG210715 DB	'CLR', 00H, '1563', 00H
	ORG $+7
$SG210716 DB	'CLR', 00H, '1564', 00H
	ORG $+7
$SG210717 DB	'CLR', 00H, '1565', 00H
	ORG $+7
$SG210718 DB	'CLR', 00H, '1566', 00H
	ORG $+7
$SG210719 DB	'CLR', 00H, '1567', 00H
	ORG $+7
$SG210720 DB	'CLR', 00H, '1568', 00H
	ORG $+7
$SG210721 DB	'CLR', 00H, '1569', 00H
	ORG $+7
$SG210722 DB	'CLR', 00H, '156A', 00H
	ORG $+7
$SG210723 DB	'CLR', 00H, '156B', 00H
	ORG $+7
$SG210724 DB	'CLR', 00H, '156C', 00H
	ORG $+7
$SG210725 DB	'CLR', 00H, '156D', 00H
	ORG $+7
$SG210726 DB	'CLR', 00H, '156E', 00H
	ORG $+7
$SG210727 DB	'CLR', 00H, '156F', 00H
	ORG $+7
$SG210728 DB	'CLR', 00H, '1570', 00H
	ORG $+7
$SG210729 DB	'CLR', 00H, '1571', 00H
	ORG $+7
$SG210730 DB	'CLR', 00H, '1572', 00H
	ORG $+7
$SG210731 DB	'CLR', 00H, '1573', 00H
	ORG $+7
$SG210732 DB	'CLR', 00H, '1574', 00H
	ORG $+7
$SG210733 DB	'CLR', 00H, '1575', 00H
	ORG $+7
$SG210734 DB	'CLR', 00H, '1576', 00H
	ORG $+7
$SG210735 DB	'CLR', 00H, '1577', 00H
	ORG $+7
$SG210736 DB	'CLR', 00H, '1578', 00H
	ORG $+7
$SG210737 DB	'CLR', 00H, '1579', 00H
	ORG $+7
$SG210738 DB	'CLR', 00H, '157A', 00H
	ORG $+7
$SG210739 DB	'CLR', 00H, '157B', 00H
	ORG $+7
$SG210740 DB	'CLR', 00H, '157C', 00H
	ORG $+7
$SG210741 DB	'CLR', 00H, '157D', 00H
	ORG $+7
$SG210742 DB	'CLR', 00H, '157E', 00H
	ORG $+7
$SG210743 DB	'CLR', 00H, '157F', 00H
	ORG $+7
$SG210744 DB	'CLR', 00H, '1580', 00H
	ORG $+7
$SG210745 DB	'CLR', 00H, '1581', 00H
	ORG $+7
$SG210746 DB	'CLR', 00H, '1582', 00H
	ORG $+7
$SG210747 DB	'CLR', 00H, '1583', 00H
	ORG $+7
$SG210748 DB	'CLR', 00H, '1584', 00H
	ORG $+7
$SG210749 DB	'CLR', 00H, '1585', 00H
	ORG $+7
$SG210750 DB	'CLR', 00H, '1586', 00H
	ORG $+7
$SG210751 DB	'CLR', 00H, '1587', 00H
	ORG $+7
$SG210752 DB	'CLR', 00H, '1588', 00H
	ORG $+7
$SG210753 DB	'CLR', 00H, '1589', 00H
	ORG $+7
$SG210754 DB	'CLR', 00H, '158A', 00H
	ORG $+7
$SG210755 DB	'CLR', 00H, '158B', 00H
	ORG $+7
$SG210756 DB	'CLR', 00H, '158C', 00H
	ORG $+7
$SG210757 DB	'CLR', 00H, '158D', 00H
	ORG $+7
$SG210758 DB	'CLR', 00H, '158E', 00H
	ORG $+7
$SG210759 DB	'CLR', 00H, '158F', 00H
	ORG $+7
$SG210760 DB	'CLR', 00H, '1590', 00H
	ORG $+7
$SG210761 DB	'CLR', 00H, '1591', 00H
	ORG $+7
$SG210762 DB	'CLR', 00H, '1592', 00H
	ORG $+7
$SG210763 DB	'CLR', 00H, '1593', 00H
	ORG $+7
$SG210764 DB	'CLR', 00H, '1594', 00H
	ORG $+7
$SG210765 DB	'CLR', 00H, '1595', 00H
	ORG $+7
$SG210766 DB	'CLR', 00H, '1596', 00H
	ORG $+7
$SG210767 DB	'CLR', 00H, '1597', 00H
	ORG $+7
$SG210768 DB	'CLR', 00H, '1598', 00H
	ORG $+7
$SG210769 DB	'CLR', 00H, '1599', 00H
	ORG $+7
$SG210770 DB	'CLR', 00H, '159A', 00H
	ORG $+7
$SG210771 DB	'CLR', 00H, '159B', 00H
	ORG $+7
$SG210772 DB	'CLR', 00H, '159C', 00H
	ORG $+7
$SG210773 DB	'CLR', 00H, '159D', 00H
	ORG $+7
$SG210774 DB	'CLR', 00H, '159E', 00H
	ORG $+7
$SG210775 DB	'CLR', 00H, '159F', 00H
	ORG $+7
$SG210776 DB	'CLR', 00H, '15A0', 00H
	ORG $+7
$SG210777 DB	'CLR', 00H, '15A1', 00H
	ORG $+7
$SG210778 DB	'CLR', 00H, '15A2', 00H
	ORG $+7
$SG210779 DB	'CLR', 00H, '15A3', 00H
	ORG $+7
$SG210780 DB	'CLR', 00H, '15A4', 00H
	ORG $+7
$SG210781 DB	'CLR', 00H, '15A5', 00H
	ORG $+7
$SG210782 DB	'CLR', 00H, '15A6', 00H
	ORG $+7
$SG210783 DB	'CLR', 00H, '15A7', 00H
	ORG $+7
$SG210784 DB	'CLR', 00H, '15A8', 00H
	ORG $+7
$SG210785 DB	'CLR', 00H, '15A9', 00H
	ORG $+7
$SG210786 DB	'CLR', 00H, '15AA', 00H
	ORG $+7
$SG210787 DB	'CLR', 00H, '15AB', 00H
	ORG $+7
$SG210788 DB	'CLR', 00H, '15AC', 00H
	ORG $+7
$SG210789 DB	'CLR', 00H, '15AD', 00H
	ORG $+7
$SG210790 DB	'CLR', 00H, '15AE', 00H
	ORG $+7
$SG210791 DB	'CLR', 00H, '15AF', 00H
	ORG $+7
$SG210792 DB	'CLR', 00H, '15B0', 00H
	ORG $+7
$SG210793 DB	'CLR', 00H, '15B1', 00H
	ORG $+7
$SG210794 DB	'CLR', 00H, '15B2', 00H
	ORG $+7
$SG210795 DB	'CLR', 00H, '15B3', 00H
	ORG $+7
$SG210796 DB	'CLR', 00H, '15B4', 00H
	ORG $+7
$SG210797 DB	'CLR', 00H, '15B5', 00H
	ORG $+7
$SG210798 DB	'CLR', 00H, '15B6', 00H
	ORG $+7
$SG210799 DB	'CLR', 00H, '15B7', 00H
	ORG $+7
$SG210800 DB	'CLR', 00H, '15B8', 00H
	ORG $+7
$SG210801 DB	'CLR', 00H, '15B9', 00H
	ORG $+7
$SG210802 DB	'CLR', 00H, '15BA', 00H
	ORG $+7
$SG210803 DB	'CLR', 00H, '15BB', 00H
	ORG $+7
$SG210804 DB	'CLR', 00H, '15BC', 00H
	ORG $+7
$SG210805 DB	'CLR', 00H, '15BD', 00H
	ORG $+7
$SG210806 DB	'CLR', 00H, '15BE', 00H
	ORG $+7
$SG210807 DB	'CLR', 00H, '15BF', 00H
	ORG $+7
$SG210808 DB	'CLR', 00H, '15C0', 00H
	ORG $+7
$SG210809 DB	'CLR', 00H, '15C1', 00H
	ORG $+7
$SG210810 DB	'CLR', 00H, '15C2', 00H
	ORG $+7
$SG210811 DB	'CLR', 00H, '15C3', 00H
	ORG $+7
$SG210812 DB	'CLR', 00H, '15C4', 00H
	ORG $+7
$SG210813 DB	'CLR', 00H, '15C5', 00H
	ORG $+7
$SG210814 DB	'CLR', 00H, '15C6', 00H
	ORG $+7
$SG210815 DB	'CLR', 00H, '15C7', 00H
	ORG $+7
$SG210816 DB	'CLR', 00H, '15C8', 00H
	ORG $+7
$SG210817 DB	'CLR', 00H, '15C9', 00H
	ORG $+7
$SG210818 DB	'CLR', 00H, '15CA', 00H
	ORG $+7
$SG210819 DB	'CLR', 00H, '15CB', 00H
	ORG $+7
$SG210820 DB	'CLR', 00H, '15CC', 00H
	ORG $+7
$SG210821 DB	'CLR', 00H, '15CD', 00H
	ORG $+7
$SG210822 DB	'CLR', 00H, '15CE', 00H
	ORG $+7
$SG210823 DB	'CLR', 00H, '15CF', 00H
	ORG $+7
$SG210824 DB	'CLR', 00H, '15D0', 00H
	ORG $+7
$SG210825 DB	'CLR', 00H, '15D1', 00H
	ORG $+7
$SG210826 DB	'CLR', 00H, '15D2', 00H
	ORG $+7
$SG210827 DB	'CLR', 00H, '15D3', 00H
	ORG $+7
$SG210828 DB	'CLR', 00H, '15D4', 00H
	ORG $+7
$SG210829 DB	'CLR', 00H, '15D5', 00H
	ORG $+7
$SG210830 DB	'CLR', 00H, '15D6', 00H
	ORG $+7
$SG210831 DB	'CLR', 00H, '15D7', 00H
	ORG $+7
$SG210832 DB	'CLR', 00H, '15D8', 00H
	ORG $+7
$SG210833 DB	'CLR', 00H, '15D9', 00H
	ORG $+7
$SG210834 DB	'CLR', 00H, '15DA', 00H
	ORG $+7
$SG210835 DB	'CLR', 00H, '15DB', 00H
	ORG $+7
$SG210836 DB	'CLR', 00H, '15DC', 00H
	ORG $+7
$SG210837 DB	'CLR', 00H, '15DD', 00H
	ORG $+7
$SG210838 DB	'CLR', 00H, '15DE', 00H
	ORG $+7
$SG210839 DB	'CLR', 00H, '15DF', 00H
	ORG $+7
$SG210840 DB	'CLR', 00H, '15E0', 00H
	ORG $+7
$SG210841 DB	'CLR', 00H, '15E1', 00H
	ORG $+7
$SG210842 DB	'CLR', 00H, '15E2', 00H
	ORG $+7
$SG210843 DB	'CLR', 00H, '15E3', 00H
	ORG $+7
$SG210844 DB	'CLR', 00H, '15E4', 00H
	ORG $+7
$SG210845 DB	'CLR', 00H, '15E5', 00H
	ORG $+7
$SG210846 DB	'CLR', 00H, '15E6', 00H
	ORG $+7
$SG210847 DB	'CLR', 00H, '15E7', 00H
	ORG $+7
$SG210848 DB	'CLR', 00H, '15E8', 00H
	ORG $+7
$SG210849 DB	'CLR', 00H, '15E9', 00H
	ORG $+7
$SG210850 DB	'CLR', 00H, '15EA', 00H
	ORG $+7
$SG210851 DB	'CLR', 00H, '15EB', 00H
	ORG $+7
$SG210852 DB	'CLR', 00H, '15EC', 00H
	ORG $+7
$SG210853 DB	'CLR', 00H, '15ED', 00H
	ORG $+7
$SG210854 DB	'CLR', 00H, '15EE', 00H
	ORG $+7
$SG210855 DB	'CLR', 00H, '15EF', 00H
	ORG $+7
$SG210856 DB	'CLR', 00H, '15F0', 00H
	ORG $+7
$SG210857 DB	'CLR', 00H, '15F1', 00H
	ORG $+7
$SG210858 DB	'CLR', 00H, '15F2', 00H
	ORG $+7
$SG210859 DB	'CLR', 00H, '15F3', 00H
	ORG $+7
$SG210860 DB	'CLR', 00H, '15F4', 00H
	ORG $+7
$SG210861 DB	'CLR', 00H, '15F5', 00H
	ORG $+7
$SG210862 DB	'CLR', 00H, '15F6', 00H
	ORG $+7
$SG210863 DB	'CLR', 00H, '15F7', 00H
	ORG $+7
$SG210864 DB	'CLR', 00H, '15F8', 00H
	ORG $+7
$SG210865 DB	'CLR', 00H, '15F9', 00H
	ORG $+7
$SG210866 DB	'CLR', 00H, '15FA', 00H
	ORG $+7
$SG210867 DB	'CLR', 00H, '15FB', 00H
	ORG $+7
$SG210868 DB	'CLR', 00H, '15FC', 00H
	ORG $+7
$SG210869 DB	'CLR', 00H, '15FD', 00H
	ORG $+7
$SG210870 DB	'CLR', 00H, '15FE', 00H
	ORG $+7
$SG210871 DB	'CLR', 00H, '15FF', 00H
	ORG $+7
$SG202936 DB	'?????', 00H, '?', 00H
$SG202937 DB	'?????', 00H, '?', 00H
$SG202938 DB	'LTG', 00H, 'load_and_test_long', 00H
	ORG $+1
$SG202939 DB	'LRAG', 00H, 'load_real_address_long', 00H
	ORG $+4
$SG202940 DB	'LG', 00H, 'load_long', 00H
	ORG $+3
$SG202941 DB	'?????', 00H, '?', 00H
$SG202942 DB	'CVBY', 00H, 'convert_to_binary_y', 00H
	ORG $+7
$SG202943 DB	'?????', 00H, '?', 00H
$SG202944 DB	'AG', 00H, 'add_long', 00H
	ORG $+4
$SG202945 DB	'SG', 00H, 'subtract_long', 00H
	ORG $+7
$SG202946 DB	'ALG', 00H, 'add_logical_long', 00H
	ORG $+3
$SG202947 DB	'SLG', 00H, 'subtract_logical_long', 00H
	ORG $+6
$SG202948 DB	'MSG', 00H, 'multiply_single_long', 00H
	ORG $+7
$SG202949 DB	'DSG', 00H, 'divide_single_long', 00H
	ORG $+1
$SG202950 DB	'CVBG', 00H, 'convert_to_binary_long', 00H
	ORG $+4
$SG202951 DB	'LRVG', 00H, 'load_reversed_long', 00H
$SG202952 DB	'?????', 00H, '?', 00H
$SG202953 DB	'?????', 00H, '?', 00H
$SG202954 DB	'LT', 00H, 'load_and_test', 00H
	ORG $+7
$SG202955 DB	'LRAY', 00H, 'load_real_address_y', 00H
	ORG $+7
$SG202956 DB	'LGF', 00H, 'load_long_fullword', 00H
	ORG $+1
$SG202957 DB	'LGH', 00H, 'load_long_halfword', 00H
	ORG $+1
$SG202958 DB	'LLGF', 00H, 'load_logical_long_fullword', 00H
$SG202959 DB	'LLGT', 00H, 'load_logical_long_thirtyone', 00H
	ORG $+7
$SG202960 DB	'AGF', 00H, 'add_long_fullword', 00H
	ORG $+2
$SG202961 DB	'SGF', 00H, 'subtract_long_fullword', 00H
	ORG $+5
$SG202962 DB	'ALGF', 00H, 'add_logical_long_fullword', 00H
	ORG $+1
$SG202963 DB	'SLGF', 00H, 'subtract_logical_long_fullword', 00H
	ORG $+4
$SG202964 DB	'MSGF', 00H, 'multiply_single_long_fullword', 00H
	ORG $+5
$SG202965 DB	'DSGF', 00H, 'divide_single_long_fullword', 00H
	ORG $+7
$SG202966 DB	'LRV', 00H, 'load_reversed', 00H
	ORG $+6
$SG202967 DB	'LRVH', 00H, 'load_reversed_half', 00H
$SG202968 DB	'CG', 00H, 'compare_long', 00H
$SG202969 DB	'CLG', 00H, 'compare_logical_long', 00H
	ORG $+7
$SG202970 DB	'?????', 00H, '?', 00H
$SG202971 DB	'?????', 00H, '?', 00H
$SG202972 DB	'STG', 00H, 'store_long', 00H
	ORG $+1
$SG202973 DB	'NTSTG', 00H, 'nontransactional_store', 00H
	ORG $+3
$SG202974 DB	'CVDY', 00H, 'convert_to_decimal_y', 00H
	ORG $+6
$SG202975 DB	'?????', 00H, '?', 00H
$SG202976 DB	'?????', 00H, '?', 00H
$SG202977 DB	'?????', 00H, '?', 00H
$SG202978 DB	'LZRG', 00H, 'load_and_zero_rightmost_byte_grande', 00H
	ORG $+7
$SG202979 DB	'?????', 00H, '?', 00H
$SG202980 DB	'?????', 00H, '?', 00H
$SG202981 DB	'?????', 00H, '?', 00H
$SG202982 DB	'CVDG', 00H, 'convert_to_decimal_long', 00H
	ORG $+3
$SG202983 DB	'STRVG', 00H, 'store_reversed_long', 00H
	ORG $+6
$SG202984 DB	'CGF', 00H, 'compare_long_fullword', 00H
	ORG $+6
$SG202985 DB	'CLGF', 00H, 'compare_logical_long_fullword', 00H
	ORG $+5
$SG202986 DB	'LTGF', 00H, 'load_and_test_long_fullword', 00H
	ORG $+7
$SG202987 DB	'?????', 00H, '?', 00H
$SG202988 DB	'CGH', 00H, 'compare_halfword_long', 00H
	ORG $+6
$SG202989 DB	'?????', 00H, '?', 00H
$SG202990 DB	'PFD', 00H, 'prefetch_data', 00H
	ORG $+6
$SG202991 DB	'?????', 00H, '?', 00H
$SG202992 DB	'AGH', 00H, 'add_long_halfword', 00H
	ORG $+2
$SG202993 DB	'SGH', 00H, 'subtract_long_halfword', 00H
	ORG $+5
$SG202994 DB	'LLZRGF', 00H, 'load_logical_and_zero_rightmost_byte', 00H
	ORG $+4
$SG202995 DB	'LZRF', 00H, 'load_and_zero_rightmost_byte', 00H
	ORG $+6
$SG202996 DB	'MGH', 00H, 'multiply_long_halfword', 00H
	ORG $+5
$SG202997 DB	'?????', 00H, '?', 00H
$SG202998 DB	'STRV', 00H, 'store_reversed', 00H
	ORG $+4
$SG202999 DB	'STRVH', 00H, 'store_reversed_half', 00H
	ORG $+6
$SG203000 DB	'?????', 00H, '?', 00H
$SG203001 DB	'?????', 00H, '?', 00H
$SG203002 DB	'?????', 00H, '?', 00H
$SG203003 DB	'?????', 00H, '?', 00H
$SG203004 DB	'?????', 00H, '?', 00H
$SG203005 DB	'?????', 00H, '?', 00H
$SG203006 DB	'BCTG', 00H, 'branch_on_count_long', 00H
	ORG $+6
$SG203007 DB	'BIC', 00H, 'branch_indirect_on_condition', 00H
	ORG $+7
$SG203008 DB	'?????', 00H, '?', 00H
$SG203009 DB	'?????', 00H, '?', 00H
$SG203010 DB	'?????', 00H, '?', 00H
$SG203011 DB	'?????', 00H, '?', 00H
$SG203012 DB	'?????', 00H, '?', 00H
$SG203013 DB	'?????', 00H, '?', 00H
$SG203014 DB	'?????', 00H, '?', 00H
$SG203015 DB	'?????', 00H, '?', 00H
$SG203016 DB	'STY', 00H, 'store_y', 00H
	ORG $+4
$SG203017 DB	'MSY', 00H, 'multiply_single_y', 00H
	ORG $+2
$SG203018 DB	'?????', 00H, '?', 00H
$SG203019 DB	'MSC', 00H, 'multiply_single_cc', 00H
	ORG $+1
$SG203020 DB	'NY', 00H, 'and_y', 00H
	ORG $+7
$SG203021 DB	'CLY', 00H, 'compare_logical_y', 00H
	ORG $+2
$SG203022 DB	'OY', 00H, 'or_y', 00H
$SG203023 DB	'XY', 00H, 'exclusive_or_y', 00H
	ORG $+6
$SG203024 DB	'LY', 00H, 'load_y', 00H
	ORG $+6
$SG203025 DB	'CY', 00H, 'compare_y', 00H
	ORG $+3
$SG203026 DB	'AY', 00H, 'add_y', 00H
	ORG $+7
$SG203027 DB	'SY', 00H, 'subtract_y', 00H
	ORG $+2
$SG203028 DB	'MFY', 00H, 'multiply_y', 00H
	ORG $+1
$SG203029 DB	'?????', 00H, '?', 00H
$SG203030 DB	'ALY', 00H, 'add_logical_y', 00H
	ORG $+6
$SG203031 DB	'SLY', 00H, 'subtract_logical_y', 00H
	ORG $+1
$SG203032 DB	'?????', 00H, '?', 00H
$SG203033 DB	'?????', 00H, '?', 00H
$SG203034 DB	'?????', 00H, '?', 00H
$SG203035 DB	'?????', 00H, '?', 00H
$SG203036 DB	'?????', 00H, '?', 00H
$SG203037 DB	'?????', 00H, '?', 00H
$SG203038 DB	'?????', 00H, '?', 00H
$SG203039 DB	'?????', 00H, '?', 00H
$SG203040 DB	'?????', 00H, '?', 00H
$SG203041 DB	'?????', 00H, '?', 00H
$SG203042 DB	'?????', 00H, '?', 00H
$SG203043 DB	'?????', 00H, '?', 00H
$SG203044 DB	'?????', 00H, '?', 00H
$SG203045 DB	'?????', 00H, '?', 00H
$SG203046 DB	'?????', 00H, '?', 00H
$SG203047 DB	'?????', 00H, '?', 00H
$SG203048 DB	'STHY', 00H, 'store_halfword_y', 00H
	ORG $+2
$SG203049 DB	'LAY', 00H, 'load_address_y', 00H
	ORG $+5
$SG203050 DB	'STCY', 00H, 'store_character_y', 00H
	ORG $+1
$SG203051 DB	'ICY', 00H, 'insert_character_y', 00H
	ORG $+1
$SG203052 DB	'?????', 00H, '?', 00H
$SG203053 DB	'LAEY', 00H, 'load_address_extended_y', 00H
	ORG $+3
$SG203054 DB	'LB', 00H, 'load_byte', 00H
	ORG $+3
$SG203055 DB	'LGB', 00H, 'load_byte_long', 00H
	ORG $+5
$SG203056 DB	'LHY', 00H, 'load_halfword_y', 00H
	ORG $+4
$SG203057 DB	'CHY', 00H, 'compare_halfword_y', 00H
	ORG $+1
$SG203058 DB	'AHY', 00H, 'add_halfword_y', 00H
	ORG $+5
$SG203059 DB	'SHY', 00H, 'subtract_halfword_y', 00H
$SG203060 DB	'MHY', 00H, 'multiply_halfword_y', 00H
$SG203061 DB	'?????', 00H, '?', 00H
$SG203062 DB	'?????', 00H, '?', 00H
$SG203063 DB	'?????', 00H, '?', 00H
$SG203064 DB	'NG', 00H, 'and_long', 00H
	ORG $+4
$SG203065 DB	'OG', 00H, 'or_long', 00H
	ORG $+5
$SG203066 DB	'XG', 00H, 'exclusive_or_long', 00H
	ORG $+3
$SG203067 DB	'MSGC', 00H, 'multiply_single_long_cc', 00H
	ORG $+3
$SG203068 DB	'MG', 00H, 'multiply_long', 00H
	ORG $+7
$SG203069 DB	'LGAT', 00H, 'load_long_and_trap', 00H
$SG203070 DB	'MLG', 00H, 'multiply_logical_long', 00H
	ORG $+6
$SG203071 DB	'DLG', 00H, 'divide_logical_long', 00H
$SG203072 DB	'ALCG', 00H, 'add_logical_carry_long', 00H
	ORG $+4
$SG203073 DB	'SLBG', 00H, 'subtract_logical_borrow_long', 00H
	ORG $+6
$SG203074 DB	'?????', 00H, '?', 00H
$SG203075 DB	'?????', 00H, '?', 00H
$SG203076 DB	'?????', 00H, '?', 00H
$SG203077 DB	'?????', 00H, '?', 00H
$SG203078 DB	'STPQ', 00H, 'store_pair_to_quadword', 00H
	ORG $+4
$SG203079 DB	'LPQ', 00H, 'load_pair_from_quadword', 00H
	ORG $+4
$SG203080 DB	'LLGC', 00H, 'load_logical_long_character', 00H
	ORG $+7
$SG203081 DB	'LLGH', 00H, 'load_logical_long_halfword', 00H
$SG203082 DB	'?????', 00H, '?', 00H
$SG203083 DB	'?????', 00H, '?', 00H
$SG203084 DB	'LLC', 00H, 'load_logical_character', 00H
	ORG $+5
$SG203085 DB	'LLH', 00H, 'load_logical_halfword', 00H
	ORG $+6
$SG203086 DB	'ML', 00H, 'multiply_logical', 00H
	ORG $+4
$SG203087 DB	'DL', 00H, 'divide_logical', 00H
	ORG $+6
$SG203088 DB	'ALC', 00H, 'add_logical_carry', 00H
	ORG $+2
$SG203089 DB	'SLB', 00H, 'subtract_logical_borrow', 00H
	ORG $+4
$SG203090 DB	'?????', 00H, '?', 00H
$SG203091 DB	'?????', 00H, '?', 00H
$SG203092 DB	'LLGTAT', 00H, 'load_logical_long_thirtyone_and_trap', 00H
	ORG $+4
$SG203093 DB	'LLGFAT', 00H, 'load_logical_long_fullword_and_trap', 00H
	ORG $+5
$SG203094 DB	'?????', 00H, '?', 00H
$SG203095 DB	'LAT', 00H, 'load_and_trap', 00H
	ORG $+6
$SG203096 DB	'?????', 00H, '?', 00H
$SG203097 DB	'?????', 00H, '?', 00H
$SG203098 DB	'?????', 00H, '?', 00H
$SG203099 DB	'?????', 00H, '?', 00H
$SG203100 DB	'?????', 00H, '?', 00H
$SG203101 DB	'?????', 00H, '?', 00H
$SG203102 DB	'?????', 00H, '?', 00H
$SG203103 DB	'?????', 00H, '?', 00H
$SG203104 DB	'?????', 00H, '?', 00H
$SG203105 DB	'?????', 00H, '?', 00H
$SG203106 DB	'?????', 00H, '?', 00H
$SG203107 DB	'?????', 00H, '?', 00H
$SG203108 DB	'?????', 00H, '?', 00H
$SG203109 DB	'?????', 00H, '?', 00H
$SG203110 DB	'?????', 00H, '?', 00H
$SG203111 DB	'?????', 00H, '?', 00H
$SG203112 DB	'?????', 00H, '?', 00H
$SG203113 DB	'?????', 00H, '?', 00H
$SG203114 DB	'?????', 00H, '?', 00H
$SG203115 DB	'?????', 00H, '?', 00H
$SG203116 DB	'?????', 00H, '?', 00H
$SG203117 DB	'?????', 00H, '?', 00H
$SG203118 DB	'?????', 00H, '?', 00H
$SG203119 DB	'?????', 00H, '?', 00H
$SG203120 DB	'?????', 00H, '?', 00H
$SG203121 DB	'?????', 00H, '?', 00H
$SG203122 DB	'?????', 00H, '?', 00H
$SG203123 DB	'?????', 00H, '?', 00H
$SG203124 DB	'?????', 00H, '?', 00H
$SG203125 DB	'?????', 00H, '?', 00H
$SG203126 DB	'?????', 00H, '?', 00H
$SG203127 DB	'?????', 00H, '?', 00H
$SG203128 DB	'LBH', 00H, 'load_byte_high', 00H
	ORG $+5
$SG203129 DB	'?????', 00H, '?', 00H
$SG203130 DB	'LLCH', 00H, 'load_logical_character_high', 00H
	ORG $+7
$SG203131 DB	'STCH', 00H, 'store_character_high', 00H
	ORG $+6
$SG203132 DB	'LHH', 00H, 'load_halfword_high', 00H
	ORG $+1
$SG203133 DB	'?????', 00H, '?', 00H
$SG203134 DB	'LLHH', 00H, 'load_logical_halfword_high', 00H
$SG203135 DB	'STHH', 00H, 'store_halfword_high', 00H
	ORG $+7
$SG203136 DB	'LFHAT', 00H, 'load_fullword_high_and_trap', 00H
	ORG $+6
$SG203137 DB	'?????', 00H, '?', 00H
$SG170369 DB	'CONCS', 00H, 'connect_channel_set', 00H
	ORG $+6
$SG203138 DB	'LFH', 00H, 'load_fullword_high', 00H
	ORG $+1
$SG170370 DB	'DISCS', 00H, 'disconnect_channel_set', 00H
	ORG $+3
$SG203139 DB	'STFH', 00H, 'store_fullword_high', 00H
	ORG $+7
$SG170371 DB	'STIDP', 00H, 'store_cpu_id', 00H
	ORG $+5
$SG203140 DB	'?????', 00H, '?', 00H
$SG170372 DB	'STIDC', 00H, 'store_channel_id', 00H
	ORG $+1
$SG203141 DB	'CHF', 00H, 'compare_high_fullword', 00H
	ORG $+6
$SG170373 DB	'SCK', 00H, 'set_clock', 00H
	ORG $+2
$SG203142 DB	'?????', 00H, '?', 00H
$SG170374 DB	'STCK', 00H, 'store_clock', 00H
	ORG $+7
$SG203143 DB	'CLHF', 00H, 'compare_logical_high_fullword', 00H
	ORG $+5
$SG170375 DB	'SCKC', 00H, 'set_clock_comparator', 00H
	ORG $+6
$SG203144 DB	'?????', 00H, '?', 00H
$SG170376 DB	'STCKC', 00H, 'store_clock_comparator', 00H
	ORG $+3
$SG203145 DB	'?????', 00H, '?', 00H
$SG170377 DB	'SPT', 00H, 'set_cpu_timer', 00H
	ORG $+6
$SG203146 DB	'?????', 00H, '?', 00H
$SG170378 DB	'STPT', 00H, 'store_cpu_timer', 00H
	ORG $+3
$SG203147 DB	'?????', 00H, '?', 00H
$SG170379 DB	'SPKA', 00H, 'set_psw_key_from_address', 00H
	ORG $+2
$SG203148 DB	'?????', 00H, '?', 00H
$SG170380 DB	'IPK', 00H, 'insert_psw_key', 00H
	ORG $+5
$SG203149 DB	'?????', 00H, '?', 00H
$SG170381 DB	'?????', 00H, '?', 00H
$SG203150 DB	'?????', 00H, '?', 00H
$SG170382 DB	'PTLB', 00H, 'purge_translation_lookaside_buffer', 00H
$SG203151 DB	'?????', 00H, '?', 00H
$SG170383 DB	'?????', 00H, '?', 00H
$SG203152 DB	'?????', 00H, '?', 00H
$SG170384 DB	'?????', 00H, '?', 00H
$SG203153 DB	'?????', 00H, '?', 00H
$SG170385 DB	'SPX', 00H, 'set_prefix', 00H
	ORG $+1
$SG203154 DB	'?????', 00H, '?', 00H
$SG170386 DB	'STPX', 00H, 'store_prefix', 00H
	ORG $+6
$SG203155 DB	'?????', 00H, '?', 00H
$SG170387 DB	'STAP', 00H, 'store_cpu_address', 00H
	ORG $+1
$SG203156 DB	'?????', 00H, '?', 00H
$SG170388 DB	'RRB', 00H, 'reset_reference_bit', 00H
$SG203157 DB	'?????', 00H, '?', 00H
$SG170389 DB	'SIE', 00H, 'start_interpretive_execution', 00H
	ORG $+7
$SG203158 DB	'?????', 00H, '?', 00H
$SG170390 DB	'?????', 00H, '?', 00H
$SG203159 DB	'?????', 00H, '?', 00H
$SG170391 DB	'?????', 00H, '?', 00H
$SG203160 DB	'?????', 00H, '?', 00H
$SG170392 DB	'?????', 00H, '?', 00H
$SG203161 DB	'?????', 00H, '?', 00H
$SG170393 DB	'PC', 00H, 'program_call', 00H
$SG203162 DB	'?????', 00H, '?', 00H
$SG170394 DB	'SAC', 00H, 'set_address_space_control', 00H
	ORG $+2
$SG203163 DB	'?????', 00H, '?', 00H
$SG170395 DB	'CFC', 00H, 'compare_and_form_codeword', 00H
	ORG $+2
$SG203164 DB	'?????', 00H, '?', 00H
$SG170396 DB	'?????', 00H, '?', 00H
$SG203165 DB	'?????', 00H, '?', 00H
$SG170397 DB	'?????', 00H, '?', 00H
$SG203166 DB	'?????', 00H, '?', 00H
$SG170398 DB	'?????', 00H, '?', 00H
$SG203167 DB	'?????', 00H, '?', 00H
$SG170399 DB	'?????', 00H, '?', 00H
$SG203168 DB	'?????', 00H, '?', 00H
$SG170400 DB	'?????', 00H, '?', 00H
$SG203169 DB	'?????', 00H, '?', 00H
$SG170401 DB	'SERVC', 00H, 'service_call', 00H
	ORG $+5
$SG203170 DB	'?????', 00H, '?', 00H
$SG170402 DB	'IPTE', 00H, 'invalidate_page_table_entry', 00H
	ORG $+7
$SG203171 DB	'?????', 00H, '?', 00H
$SG170403 DB	'IPM', 00H, 'insert_program_mask', 00H
$SG203172 DB	'?????', 00H, '?', 00H
$SG170404 DB	'IVSK', 00H, 'insert_virtual_storage_key', 00H
$SG203173 DB	'?????', 00H, '?', 00H
$SG170405 DB	'IAC', 00H, 'insert_address_space_control', 00H
	ORG $+7
$SG203174 DB	'?????', 00H, '?', 00H
$SG170406 DB	'SSAR', 00H, 'set_secondary_asn', 00H
	ORG $+1
$SG203175 DB	'?????', 00H, '?', 00H
$SG170407 DB	'EPAR', 00H, 'extract_primary_asn', 00H
	ORG $+7
$SG203176 DB	'?????', 00H, '?', 00H
$SG170408 DB	'ESAR', 00H, 'extract_secondary_asn', 00H
	ORG $+5
$SG203177 DB	'?????', 00H, '?', 00H
$SG170409 DB	'PT', 00H, 'program_transfer', 00H
	ORG $+4
$SG203178 DB	'?????', 00H, '?', 00H
$SG170410 DB	'ISKE', 00H, 'insert_storage_key_extended', 00H
	ORG $+7
$SG203179 DB	'?????', 00H, '?', 00H
$SG170411 DB	'RRBE', 00H, 'reset_reference_bit_extended', 00H
	ORG $+6
$SG203180 DB	'?????', 00H, '?', 00H
$SG170412 DB	'SSKE', 00H, 'set_storage_key_extended', 00H
	ORG $+2
$SG203181 DB	'?????', 00H, '?', 00H
$SG170413 DB	'TB', 00H, 'test_block', 00H
	ORG $+2
$SG203182 DB	'?????', 00H, '?', 00H
$SG170414 DB	'DXR', 00H, 'divide_float_ext_reg', 00H
	ORG $+7
$SG203183 DB	'?????', 00H, '?', 00H
$SG170415 DB	'PGIN', 00H, 'page_in', 00H
	ORG $+3
$SG203184 DB	'?????', 00H, '?', 00H
$SG170416 DB	'PGOUT', 00H, 'page_out', 00H
	ORG $+1
$SG203185 DB	'?????', 00H, '?', 00H
$SG170417 DB	'CSCH', 00H, 'clear_subchannel', 00H
	ORG $+2
$SG203186 DB	'?????', 00H, '?', 00H
$SG170418 DB	'HSCH', 00H, 'halt_subchannel', 00H
	ORG $+3
$SG203187 DB	'?????', 00H, '?', 00H
$SG170419 DB	'MSCH', 00H, 'modify_subchannel', 00H
	ORG $+1
$SG203188 DB	'?????', 00H, '?', 00H
$SG170420 DB	'SSCH', 00H, 'start_subchannel', 00H
	ORG $+2
$SG203189 DB	'?????', 00H, '?', 00H
$SG170421 DB	'STSCH', 00H, 'store_subchannel', 00H
	ORG $+1
$SG203190 DB	'?????', 00H, '?', 00H
$SG170422 DB	'TSCH', 00H, 'test_subchannel', 00H
	ORG $+3
$SG203191 DB	'?????', 00H, '?', 00H
$SG170423 DB	'TPI', 00H, 'test_pending_interruption', 00H
	ORG $+2
$SG211384 DB	'LR', 00H, '1800', 00H
$SG170424 DB	'SAL', 00H, 'set_address_limit', 00H
	ORG $+2
$SG211385 DB	'LR', 00H, '1801', 00H
$SG170425 DB	'RSCH', 00H, 'resume_subchannel', 00H
	ORG $+1
$SG211386 DB	'LR', 00H, '1802', 00H
$SG170426 DB	'STCRW', 00H, 'store_channel_report_word', 00H
$SG211387 DB	'LR', 00H, '1803', 00H
$SG170427 DB	'STCPS', 00H, 'store_channel_path_status', 00H
$SG211388 DB	'LR', 00H, '1804', 00H
$SG170428 DB	'RCHP', 00H, 'reset_channel_path', 00H
$SG211389 DB	'LR', 00H, '1805', 00H
$SG170429 DB	'SCHM', 00H, 'set_channel_monitor', 00H
	ORG $+7
$SG211390 DB	'LR', 00H, '1806', 00H
$SG170430 DB	'STZP', 00H, 'store_zone_parameter', 00H
	ORG $+6
$SG211391 DB	'LR', 00H, '1807', 00H
$SG170431 DB	'SZP', 00H, 'set_zone_parameter', 00H
	ORG $+1
$SG211392 DB	'LR', 00H, '1808', 00H
$SG170432 DB	'TPZI', 00H, 'test_pending_zone_interrupt', 00H
	ORG $+7
$SG211393 DB	'LR', 00H, '1809', 00H
$SG170433 DB	'BAKR', 00H, 'branch_and_stack', 00H
	ORG $+2
$SG211394 DB	'LR', 00H, '180A', 00H
$SG170434 DB	'CKSM', 00H, 'checksum', 00H
	ORG $+2
$SG211395 DB	'LR', 00H, '180B', 00H
$SG170435 DB	'Assist', 00H, 'add_frr', 00H
	ORG $+1
$SG211396 DB	'LR', 00H, '180C', 00H
$SG170436 DB	'?????', 00H, '?', 00H
$SG211397 DB	'LR', 00H, '180D', 00H
$SG170437 DB	'SQDR', 00H, 'squareroot_float_long_reg', 00H
	ORG $+1
$SG211398 DB	'LR', 00H, '180E', 00H
$SG170438 DB	'SQER', 00H, 'squareroot_float_short_reg', 00H
$SG211399 DB	'LR', 00H, '180F', 00H
$SG170439 DB	'STURA', 00H, 'store_using_real_address', 00H
	ORG $+1
$SG211400 DB	'LR', 00H, '1810', 00H
$SG170440 DB	'MSTA', 00H, 'modify_stacked_state', 00H
	ORG $+6
$SG211401 DB	'LR', 00H, '1811', 00H
$SG170441 DB	'PALB', 00H, 'purge_accesslist_lookaside_buffer', 00H
	ORG $+1
$SG211402 DB	'LR', 00H, '1812', 00H
$SG170442 DB	'EREG', 00H, 'extract_stacked_registers', 00H
	ORG $+1
$SG211403 DB	'LR', 00H, '1813', 00H
$SG170443 DB	'ESTA', 00H, 'extract_stacked_state', 00H
	ORG $+5
$SG211404 DB	'LR', 00H, '1814', 00H
$SG170444 DB	'LURA', 00H, 'load_using_real_address', 00H
	ORG $+3
$SG211405 DB	'LR', 00H, '1815', 00H
$SG170445 DB	'TAR', 00H, 'test_access', 00H
$SG211406 DB	'LR', 00H, '1816', 00H
$SG170446 DB	'CPYA', 00H, 'copy_access', 00H
	ORG $+7
$SG211407 DB	'LR', 00H, '1817', 00H
$SG170447 DB	'SAR', 00H, 'set_access_register', 00H
$SG211408 DB	'LR', 00H, '1818', 00H
$SG170448 DB	'EAR', 00H, 'extract_access_register', 00H
	ORG $+4
$SG211409 DB	'LR', 00H, '1819', 00H
$SG170449 DB	'CSP', 00H, 'compare_and_swap_and_purge', 00H
	ORG $+1
$SG211410 DB	'LR', 00H, '181A', 00H
$SG170450 DB	'?????', 00H, '?', 00H
$SG211411 DB	'LR', 00H, '181B', 00H
$SG170451 DB	'MSR', 00H, 'multiply_single_register', 00H
	ORG $+3
$SG211412 DB	'LR', 00H, '181C', 00H
$SG170452 DB	'?????', 00H, '?', 00H
$SG211413 DB	'LR', 00H, '181D', 00H
$SG170453 DB	'MVPG', 00H, 'move_page', 00H
	ORG $+1
$SG211414 DB	'LR', 00H, '181E', 00H
$SG170454 DB	'MVST', 00H, 'move_string', 00H
	ORG $+7
$SG211415 DB	'LR', 00H, '181F', 00H
$SG170455 DB	'STHYI', 00H, 'store_hypervisor_information', 00H
	ORG $+5
$SG211416 DB	'LR', 00H, '1820', 00H
$SG170456 DB	'CUSE', 00H, 'compare_until_substring_equal', 00H
	ORG $+5
$SG211417 DB	'LR', 00H, '1821', 00H
$SG170457 DB	'BSG', 00H, 'branch_in_subspace_group', 00H
	ORG $+3
$SG211418 DB	'LR', 00H, '1822', 00H
$SG170458 DB	'IESBE', 00H, 'invalidate_expanded_storage_block_entry', 00H
	ORG $+2
$SG211419 DB	'LR', 00H, '1823', 00H
$SG170459 DB	'BSA', 00H, 'branch_and_set_authority', 00H
	ORG $+3
$SG211420 DB	'LR', 00H, '1824', 00H
$SG170460 DB	'?????', 00H, '?', 00H
$SG211421 DB	'LR', 00H, '1825', 00H
$SG170461 DB	'?????', 00H, '?', 00H
$SG211422 DB	'LR', 00H, '1826', 00H
$SG170462 DB	'CLST', 00H, 'compare_logical_string', 00H
	ORG $+4
$SG211423 DB	'LR', 00H, '1827', 00H
$SG170463 DB	'SRST', 00H, 'search_string', 00H
	ORG $+5
$SG211424 DB	'LR', 00H, '1828', 00H
$SG170464 DB	'CHSC', 00H, 'channel_subsystem_call', 00H
	ORG $+4
$SG211425 DB	'LR', 00H, '1829', 00H
$SG170465 DB	'?????', 00H, '?', 00H
$SG211426 DB	'LR', 00H, '182A', 00H
$SG170466 DB	'?????', 00H, '?', 00H
$SG211427 DB	'LR', 00H, '182B', 00H
$SG170467 DB	'LKPG', 00H, 'lock_page', 00H
	ORG $+1
$SG211428 DB	'LR', 00H, '182C', 00H
$SG170468 DB	'CMPSC', 00H, 'cmpsc_2012', 00H
	ORG $+7
$SG211429 DB	'LR', 00H, '182D', 00H
$SG170469 DB	'?????', 00H, '?', 00H
$SG211430 DB	'LR', 00H, '182E', 00H
$SG170470 DB	'SVS', 00H, 'set_vector_summary', 00H
	ORG $+1
$SG211431 DB	'LR', 00H, '182F', 00H
$SG170471 DB	'?????', 00H, '?', 00H
$SG211432 DB	'LR', 00H, '1830', 00H
$SG170472 DB	'?????', 00H, '?', 00H
$SG211433 DB	'LR', 00H, '1831', 00H
$SG170473 DB	'?????', 00H, '?', 00H
$SG211434 DB	'LR', 00H, '1832', 00H
$SG170474 DB	'?????', 00H, '?', 00H
$SG211435 DB	'LR', 00H, '1833', 00H
$SG170475 DB	'?????', 00H, '?', 00H
$SG211436 DB	'LR', 00H, '1834', 00H
$SG170476 DB	'?????', 00H, '?', 00H
$SG211437 DB	'LR', 00H, '1835', 00H
$SG170477 DB	'?????', 00H, '?', 00H
$SG211438 DB	'LR', 00H, '1836', 00H
$SG170478 DB	'?????', 00H, '?', 00H
$SG211439 DB	'LR', 00H, '1837', 00H
$SG170479 DB	'?????', 00H, '?', 00H
$SG211440 DB	'LR', 00H, '1838', 00H
$SG170480 DB	'?????', 00H, '?', 00H
$SG211441 DB	'LR', 00H, '1839', 00H
$SG170481 DB	'?????', 00H, '?', 00H
$SG211442 DB	'LR', 00H, '183A', 00H
$SG170482 DB	'?????', 00H, '?', 00H
$SG211443 DB	'LR', 00H, '183B', 00H
$SG170483 DB	'?????', 00H, '?', 00H
$SG211444 DB	'LR', 00H, '183C', 00H
$SG170484 DB	'?????', 00H, '?', 00H
$SG211445 DB	'LR', 00H, '183D', 00H
$SG170485 DB	'SIGA', 00H, 'signal_adapter', 00H
	ORG $+4
$SG211446 DB	'LR', 00H, '183E', 00H
$SG170486 DB	'?????', 00H, '?', 00H
$SG211447 DB	'LR', 00H, '183F', 00H
$SG170487 DB	'XSCH', 00H, 'cancel_subchannel', 00H
	ORG $+1
$SG211448 DB	'LR', 00H, '1840', 00H
$SG170488 DB	'RP', 00H, 'resume_program', 00H
	ORG $+6
$SG211449 DB	'LR', 00H, '1841', 00H
$SG170489 DB	'STCKE', 00H, 'store_clock_extended', 00H
	ORG $+5
$SG211450 DB	'LR', 00H, '1842', 00H
$SG170490 DB	'SACF', 00H, 'set_address_space_control', 00H
	ORG $+1
$SG211451 DB	'LR', 00H, '1843', 00H
$SG170491 DB	'?????', 00H, '?', 00H
$SG211452 DB	'LR', 00H, '1844', 00H
$SG170492 DB	'?????', 00H, '?', 00H
$SG211453 DB	'LR', 00H, '1845', 00H
$SG170493 DB	'STCKF', 00H, 'store_clock', 00H
	ORG $+6
$SG211454 DB	'LR', 00H, '1846', 00H
$SG170494 DB	'STSI', 00H, 'store_system_information', 00H
	ORG $+2
$SG211455 DB	'LR', 00H, '1847', 00H
$SG170495 DB	'?????', 00H, '?', 00H
$SG211456 DB	'LR', 00H, '1848', 00H
$SG170496 DB	'?????', 00H, '?', 00H
$SG211457 DB	'LR', 00H, '1849', 00H
$SG170497 DB	'LPP', 00H, 'load_program_parameter', 00H
	ORG $+5
$SG211458 DB	'LR', 00H, '184A', 00H
$SG170498 DB	'?????', 00H, '?', 00H
$SG211459 DB	'LR', 00H, '184B', 00H
$SG170499 DB	'?????', 00H, '?', 00H
$SG211460 DB	'LR', 00H, '184C', 00H
$SG170500 DB	'?????', 00H, '?', 00H
$SG211461 DB	'LR', 00H, '184D', 00H
$SG170501 DB	'?????', 00H, '?', 00H
$SG211462 DB	'LR', 00H, '184E', 00H
$SG170502 DB	'?????', 00H, '?', 00H
$SG211463 DB	'LR', 00H, '184F', 00H
$SG170503 DB	'?????', 00H, '?', 00H
$SG211464 DB	'LR', 00H, '1850', 00H
$SG170504 DB	'?????', 00H, '?', 00H
$SG211465 DB	'LR', 00H, '1851', 00H
$SG170505 DB	'?????', 00H, '?', 00H
$SG211466 DB	'LR', 00H, '1852', 00H
$SG170506 DB	'?????', 00H, '?', 00H
$SG211467 DB	'LR', 00H, '1853', 00H
$SG170507 DB	'?????', 00H, '?', 00H
$SG211468 DB	'LR', 00H, '1854', 00H
$SG170508 DB	'?????', 00H, '?', 00H
$SG211469 DB	'LR', 00H, '1855', 00H
$SG170509 DB	'?????', 00H, '?', 00H
$SG211470 DB	'LR', 00H, '1856', 00H
$SG170510 DB	'?????', 00H, '?', 00H
$SG211471 DB	'LR', 00H, '1857', 00H
$SG170511 DB	'?????', 00H, '?', 00H
$SG211472 DB	'LR', 00H, '1858', 00H
$SG170512 DB	'?????', 00H, '?', 00H
$SG211473 DB	'LR', 00H, '1859', 00H
$SG170513 DB	'?????', 00H, '?', 00H
$SG211474 DB	'LR', 00H, '185A', 00H
$SG170514 DB	'?????', 00H, '?', 00H
$SG211475 DB	'LR', 00H, '185B', 00H
$SG170515 DB	'?????', 00H, '?', 00H
$SG211476 DB	'LR', 00H, '185C', 00H
$SG170516 DB	'?????', 00H, '?', 00H
$SG211477 DB	'LR', 00H, '185D', 00H
$SG170517 DB	'?????', 00H, '?', 00H
$SG211478 DB	'LR', 00H, '185E', 00H
$SG170518 DB	'?????', 00H, '?', 00H
$SG211479 DB	'LR', 00H, '185F', 00H
$SG170519 DB	'?????', 00H, '?', 00H
$SG211480 DB	'LR', 00H, '1860', 00H
$SG170520 DB	'?????', 00H, '?', 00H
$SG211481 DB	'LR', 00H, '1861', 00H
$SG170521 DB	'?????', 00H, '?', 00H
$SG211482 DB	'LR', 00H, '1862', 00H
$SG170522 DB	'SRNM', 00H, 'set_bfp_rounding_mode_2bit', 00H
$SG211483 DB	'LR', 00H, '1863', 00H
$SG170523 DB	'?????', 00H, '?', 00H
$SG211484 DB	'LR', 00H, '1864', 00H
$SG170524 DB	'?????', 00H, '?', 00H
$SG211485 DB	'LR', 00H, '1865', 00H
$SG170525 DB	'STFPC', 00H, 'store_fpc', 00H
$SG211486 DB	'LR', 00H, '1866', 00H
$SG170526 DB	'LFPC', 00H, 'load_fpc', 00H
	ORG $+2
$SG211487 DB	'LR', 00H, '1867', 00H
$SG170527 DB	'?????', 00H, '?', 00H
$SG211488 DB	'LR', 00H, '1868', 00H
$SG170528 DB	'?????', 00H, '?', 00H
$SG211489 DB	'LR', 00H, '1869', 00H
$SG170529 DB	'?????', 00H, '?', 00H
$SG211490 DB	'LR', 00H, '186A', 00H
$SG170530 DB	'?????', 00H, '?', 00H
$SG211491 DB	'LR', 00H, '186B', 00H
$SG170531 DB	'?????', 00H, '?', 00H
$SG211492 DB	'LR', 00H, '186C', 00H
$SG170532 DB	'?????', 00H, '?', 00H
$SG211493 DB	'LR', 00H, '186D', 00H
$SG170533 DB	'?????', 00H, '?', 00H
$SG211494 DB	'LR', 00H, '186E', 00H
$SG170534 DB	'TRE', 00H, 'translate_extended', 00H
	ORG $+1
$SG211495 DB	'LR', 00H, '186F', 00H
$SG170535 DB	'CU21', 00H, 'convert_utf16_to_utf8', 00H
	ORG $+5
$SG211496 DB	'LR', 00H, '1870', 00H
$SG170536 DB	'CU12', 00H, 'convert_utf8_to_utf16', 00H
	ORG $+5
$SG211497 DB	'LR', 00H, '1871', 00H
$SG170537 DB	'?????', 00H, '?', 00H
$SG211498 DB	'LR', 00H, '1872', 00H
$SG170538 DB	'?????', 00H, '?', 00H
$SG211499 DB	'LR', 00H, '1873', 00H
$SG170539 DB	'?????', 00H, '?', 00H
$SG211500 DB	'LR', 00H, '1874', 00H
$SG170540 DB	'?????', 00H, '?', 00H
$SG211501 DB	'LR', 00H, '1875', 00H
$SG170541 DB	'?????', 00H, '?', 00H
$SG211502 DB	'LR', 00H, '1876', 00H
$SG170542 DB	'?????', 00H, '?', 00H
$SG211503 DB	'LR', 00H, '1877', 00H
$SG170543 DB	'?????', 00H, '?', 00H
$SG211504 DB	'LR', 00H, '1878', 00H
$SG170544 DB	'?????', 00H, '?', 00H
$SG211505 DB	'LR', 00H, '1879', 00H
$SG170545 DB	'STFLE', 00H, 'store_facility_list_extended', 00H
	ORG $+5
$SG211506 DB	'LR', 00H, '187A', 00H
$SG170546 DB	'STFL', 00H, 'store_facility_list', 00H
	ORG $+7
$SG211507 DB	'LR', 00H, '187B', 00H
$SG170547 DB	'LPSWE', 00H, 'load_program_status_word_extended', 00H
$SG211508 DB	'LR', 00H, '187C', 00H
$SG170548 DB	'?????', 00H, '?', 00H
$SG211509 DB	'LR', 00H, '187D', 00H
$SG170549 DB	'?????', 00H, '?', 00H
$SG211510 DB	'LR', 00H, '187E', 00H
$SG170550 DB	'?????', 00H, '?', 00H
$SG211511 DB	'LR', 00H, '187F', 00H
$SG170551 DB	'?????', 00H, '?', 00H
$SG211512 DB	'LR', 00H, '1880', 00H
$SG170552 DB	'?????', 00H, '?', 00H
$SG211513 DB	'LR', 00H, '1881', 00H
$SG170553 DB	'SRNMB', 00H, 'set_bfp_rounding_mode_3bit', 00H
	ORG $+7
$SG211514 DB	'LR', 00H, '1882', 00H
$SG170554 DB	'SRNMT', 00H, 'set_dfp_rounding_mode', 00H
	ORG $+4
$SG211515 DB	'LR', 00H, '1883', 00H
$SG170555 DB	'?????', 00H, '?', 00H
$SG211516 DB	'LR', 00H, '1884', 00H
$SG170556 DB	'?????', 00H, '?', 00H
$SG211517 DB	'LR', 00H, '1885', 00H
$SG170557 DB	'?????', 00H, '?', 00H
$SG211518 DB	'LR', 00H, '1886', 00H
$SG170558 DB	'LFAS', 00H, 'load_fpc_and_signal', 00H
	ORG $+7
$SG211519 DB	'LR', 00H, '1887', 00H
$SG170559 DB	'?????', 00H, '?', 00H
$SG211520 DB	'LR', 00H, '1888', 00H
$SG170560 DB	'?????', 00H, '?', 00H
$SG211521 DB	'LR', 00H, '1889', 00H
$SG170561 DB	'?????', 00H, '?', 00H
$SG211522 DB	'LR', 00H, '188A', 00H
$SG170562 DB	'?????', 00H, '?', 00H
$SG211523 DB	'LR', 00H, '188B', 00H
$SG170563 DB	'?????', 00H, '?', 00H
$SG211524 DB	'LR', 00H, '188C', 00H
$SG170564 DB	'?????', 00H, '?', 00H
$SG211525 DB	'LR', 00H, '188D', 00H
$SG170565 DB	'?????', 00H, '?', 00H
$SG211526 DB	'LR', 00H, '188E', 00H
$SG170566 DB	'?????', 00H, '?', 00H
$SG211527 DB	'LR', 00H, '188F', 00H
$SG170567 DB	'?????', 00H, '?', 00H
$SG211528 DB	'LR', 00H, '1890', 00H
$SG170568 DB	'?????', 00H, '?', 00H
$SG211529 DB	'LR', 00H, '1891', 00H
$SG170569 DB	'?????', 00H, '?', 00H
$SG211530 DB	'LR', 00H, '1892', 00H
$SG170570 DB	'?????', 00H, '?', 00H
$SG211531 DB	'LR', 00H, '1893', 00H
$SG170571 DB	'?????', 00H, '?', 00H
$SG211532 DB	'LR', 00H, '1894', 00H
$SG170572 DB	'?????', 00H, '?', 00H
$SG211533 DB	'LR', 00H, '1895', 00H
$SG170573 DB	'?????', 00H, '?', 00H
$SG211534 DB	'LR', 00H, '1896', 00H
$SG170574 DB	'?????', 00H, '?', 00H
$SG211535 DB	'LR', 00H, '1897', 00H
$SG170575 DB	'?????', 00H, '?', 00H
$SG211536 DB	'LR', 00H, '1898', 00H
$SG170576 DB	'?????', 00H, '?', 00H
$SG211537 DB	'LR', 00H, '1899', 00H
$SG170577 DB	'?????', 00H, '?', 00H
$SG211538 DB	'LR', 00H, '189A', 00H
$SG170578 DB	'?????', 00H, '?', 00H
$SG211539 DB	'LR', 00H, '189B', 00H
$SG170579 DB	'?????', 00H, '?', 00H
$SG211540 DB	'LR', 00H, '189C', 00H
$SG170580 DB	'?????', 00H, '?', 00H
$SG211541 DB	'LR', 00H, '189D', 00H
$SG170581 DB	'?????', 00H, '?', 00H
$SG211542 DB	'LR', 00H, '189E', 00H
$SG170582 DB	'?????', 00H, '?', 00H
$SG211543 DB	'LR', 00H, '189F', 00H
$SG170583 DB	'?????', 00H, '?', 00H
$SG211544 DB	'LR', 00H, '18A0', 00H
$SG170584 DB	'?????', 00H, '?', 00H
$SG211545 DB	'LR', 00H, '18A1', 00H
$SG170585 DB	'?????', 00H, '?', 00H
$SG211546 DB	'LR', 00H, '18A2', 00H
$SG170586 DB	'?????', 00H, '?', 00H
$SG211547 DB	'LR', 00H, '18A3', 00H
$SG170587 DB	'?????', 00H, '?', 00H
$SG211548 DB	'LR', 00H, '18A4', 00H
$SG170588 DB	'?????', 00H, '?', 00H
$SG211549 DB	'LR', 00H, '18A5', 00H
$SG170589 DB	'?????', 00H, '?', 00H
$SG211550 DB	'LR', 00H, '18A6', 00H
$SG170590 DB	'?????', 00H, '?', 00H
$SG211551 DB	'LR', 00H, '18A7', 00H
$SG170591 DB	'?????', 00H, '?', 00H
$SG211552 DB	'LR', 00H, '18A8', 00H
$SG170592 DB	'?????', 00H, '?', 00H
$SG211553 DB	'LR', 00H, '18A9', 00H
$SG170593 DB	'?????', 00H, '?', 00H
$SG211554 DB	'LR', 00H, '18AA', 00H
$SG170594 DB	'?????', 00H, '?', 00H
$SG211555 DB	'LR', 00H, '18AB', 00H
$SG170595 DB	'?????', 00H, '?', 00H
$SG211556 DB	'LR', 00H, '18AC', 00H
$SG170596 DB	'?????', 00H, '?', 00H
$SG211557 DB	'LR', 00H, '18AD', 00H
$SG170597 DB	'?????', 00H, '?', 00H
$SG211558 DB	'LR', 00H, '18AE', 00H
$SG170598 DB	'?????', 00H, '?', 00H
$SG211559 DB	'LR', 00H, '18AF', 00H
$SG170599 DB	'?????', 00H, '?', 00H
$SG211560 DB	'LR', 00H, '18B0', 00H
$SG170600 DB	'?????', 00H, '?', 00H
$SG211561 DB	'LR', 00H, '18B1', 00H
$SG170601 DB	'PPA', 00H, 'perform_processor_assist', 00H
	ORG $+3
$SG211562 DB	'LR', 00H, '18B2', 00H
$SG170602 DB	'?????', 00H, '?', 00H
$SG211563 DB	'LR', 00H, '18B3', 00H
$SG170603 DB	'?????', 00H, '?', 00H
$SG211564 DB	'LR', 00H, '18B4', 00H
$SG170604 DB	'?????', 00H, '?', 00H
$SG211565 DB	'LR', 00H, '18B5', 00H
$SG170605 DB	'ETND', 00H, 'extract_transaction_nesting_depth', 00H
	ORG $+1
$SG211566 DB	'LR', 00H, '18B6', 00H
$SG170606 DB	'?????', 00H, '?', 00H
$SG211567 DB	'LR', 00H, '18B7', 00H
$SG170607 DB	'?????', 00H, '?', 00H
$SG211568 DB	'LR', 00H, '18B8', 00H
$SG170608 DB	'?????', 00H, '?', 00H
$SG211569 DB	'LR', 00H, '18B9', 00H
$SG170609 DB	'IUCV', 00H, 'inter_user_communication_vehicle', 00H
	ORG $+2
$SG211570 DB	'LR', 00H, '18BA', 00H
$SG170610 DB	'?????', 00H, '?', 00H
$SG211571 DB	'LR', 00H, '18BB', 00H
$SG170611 DB	'?????', 00H, '?', 00H
$SG211572 DB	'LR', 00H, '18BC', 00H
$SG170612 DB	'?????', 00H, '?', 00H
$SG211573 DB	'LR', 00H, '18BD', 00H
$SG170613 DB	'?????', 00H, '?', 00H
$SG211574 DB	'LR', 00H, '18BE', 00H
$SG170614 DB	'?????', 00H, '?', 00H
$SG211575 DB	'LR', 00H, '18BF', 00H
$SG170615 DB	'?????', 00H, '?', 00H
$SG211576 DB	'LR', 00H, '18C0', 00H
$SG170616 DB	'?????', 00H, '?', 00H
$SG211577 DB	'LR', 00H, '18C1', 00H
$SG170617 DB	'TEND', 00H, 'transaction_end', 00H
	ORG $+3
$SG211578 DB	'LR', 00H, '18C2', 00H
$SG170618 DB	'?????', 00H, '?', 00H
$SG211579 DB	'LR', 00H, '18C3', 00H
$SG170619 DB	'NIAI', 00H, 'next_instruction_access_intent', 00H
	ORG $+4
$SG211580 DB	'LR', 00H, '18C4', 00H
$SG170620 DB	'?????', 00H, '?', 00H
$SG211581 DB	'LR', 00H, '18C5', 00H
$SG170621 DB	'TABORT', 00H, 'transaction_abort', 00H
	ORG $+7
$SG211582 DB	'LR', 00H, '18C6', 00H
$SG170622 DB	'?????', 00H, '?', 00H
$SG211583 DB	'LR', 00H, '18C7', 00H
$SG170623 DB	'?????', 00H, '?', 00H
$SG211584 DB	'LR', 00H, '18C8', 00H
$SG170624 DB	'TRAP4', 00H, 'trap4', 00H
	ORG $+4
$SG211585 DB	'LR', 00H, '18C9', 00H
$SG211586 DB	'LR', 00H, '18CA', 00H
$SG211587 DB	'LR', 00H, '18CB', 00H
$SG211588 DB	'LR', 00H, '18CC', 00H
$SG211589 DB	'LR', 00H, '18CD', 00H
$SG211590 DB	'LR', 00H, '18CE', 00H
$SG211591 DB	'LR', 00H, '18CF', 00H
$SG211592 DB	'LR', 00H, '18D0', 00H
$SG211593 DB	'LR', 00H, '18D1', 00H
$SG211594 DB	'LR', 00H, '18D2', 00H
$SG211595 DB	'LR', 00H, '18D3', 00H
$SG211596 DB	'LR', 00H, '18D4', 00H
$SG211597 DB	'LR', 00H, '18D5', 00H
$SG211598 DB	'LR', 00H, '18D6', 00H
$SG211599 DB	'LR', 00H, '18D7', 00H
$SG211600 DB	'LR', 00H, '18D8', 00H
$SG211601 DB	'LR', 00H, '18D9', 00H
$SG211602 DB	'LR', 00H, '18DA', 00H
$SG211603 DB	'LR', 00H, '18DB', 00H
$SG211604 DB	'LR', 00H, '18DC', 00H
$SG211605 DB	'LR', 00H, '18DD', 00H
$SG211606 DB	'LR', 00H, '18DE', 00H
$SG211607 DB	'LR', 00H, '18DF', 00H
$SG211608 DB	'LR', 00H, '18E0', 00H
$SG211609 DB	'LR', 00H, '18E1', 00H
$SG211610 DB	'LR', 00H, '18E2', 00H
$SG211611 DB	'LR', 00H, '18E3', 00H
$SG211612 DB	'LR', 00H, '18E4', 00H
$SG211613 DB	'LR', 00H, '18E5', 00H
$SG211614 DB	'LR', 00H, '18E6', 00H
$SG211615 DB	'LR', 00H, '18E7', 00H
$SG211616 DB	'LR', 00H, '18E8', 00H
$SG211617 DB	'LR', 00H, '18E9', 00H
$SG211618 DB	'LR', 00H, '18EA', 00H
$SG211619 DB	'LR', 00H, '18EB', 00H
$SG211620 DB	'LR', 00H, '18EC', 00H
$SG211621 DB	'LR', 00H, '18ED', 00H
$SG211622 DB	'LR', 00H, '18EE', 00H
$SG211623 DB	'LR', 00H, '18EF', 00H
$SG211624 DB	'LR', 00H, '18F0', 00H
$SG211625 DB	'LR', 00H, '18F1', 00H
$SG211626 DB	'LR', 00H, '18F2', 00H
$SG211627 DB	'LR', 00H, '18F3', 00H
$SG211628 DB	'LR', 00H, '18F4', 00H
$SG211629 DB	'LR', 00H, '18F5', 00H
$SG211630 DB	'LR', 00H, '18F6', 00H
$SG211631 DB	'LR', 00H, '18F7', 00H
$SG211632 DB	'LR', 00H, '18F8', 00H
$SG211633 DB	'LR', 00H, '18F9', 00H
$SG211634 DB	'LR', 00H, '18FA', 00H
$SG211635 DB	'LR', 00H, '18FB', 00H
$SG211636 DB	'LR', 00H, '18FC', 00H
$SG211637 DB	'LR', 00H, '18FD', 00H
$SG211638 DB	'LR', 00H, '18FE', 00H
$SG211639 DB	'LR', 00H, '18FF', 00H
$SG203704 DB	'LASP', 00H, 'load_address_space_parameters', 00H
	ORG $+5
$SG203705 DB	'TPROT', 00H, 'test_protection', 00H
	ORG $+2
$SG203706 DB	'STRAG', 00H, 'store_real_address', 00H
	ORG $+7
$SG203707 DB	'Assist', 00H, 'svc_assist', 00H
	ORG $+6
$SG203708 DB	'Assist', 00H, 'obtain_local_lock', 00H
	ORG $+7
$SG203709 DB	'Assist', 00H, 'release_local_lock', 00H
	ORG $+6
$SG203710 DB	'Assist', 00H, 'obtain_cms_lock', 00H
	ORG $+1
$SG203711 DB	'Assist', 00H, 'release_cms_lock', 00H
$SG203712 DB	'Assist', 00H, 'trace_svc_interruption', 00H
	ORG $+2
$SG203713 DB	'Assist', 00H, 'trace_program_interruption', 00H
	ORG $+6
$SG203714 DB	'MVCRL', 00H, 'move_right_to_left', 00H
	ORG $+7
$SG203715 DB	'Assist', 00H, 'trace_io_interruption', 00H
	ORG $+3
$SG203716 DB	'Assist', 00H, 'trace_task_dispatch', 00H
	ORG $+5
$SG203717 DB	'Assist', 00H, 'trace_svc_return', 00H
$SG203718 DB	'MVCSK', 00H, 'move_with_source_key', 00H
	ORG $+5
$SG203719 DB	'MVCDK', 00H, 'move_with_destination_key', 00H
$SG203720 DB	'?????', 00H, '?', 00H
$SG203721 DB	'?????', 00H, '?', 00H
$SG203722 DB	'?????', 00H, '?', 00H
$SG203723 DB	'?????', 00H, '?', 00H
$SG203724 DB	'?????', 00H, '?', 00H
$SG203725 DB	'?????', 00H, '?', 00H
$SG203726 DB	'?????', 00H, '?', 00H
$SG203727 DB	'?????', 00H, '?', 00H
$SG203728 DB	'?????', 00H, '?', 00H
$SG203729 DB	'?????', 00H, '?', 00H
$SG203730 DB	'?????', 00H, '?', 00H
$SG203731 DB	'?????', 00H, '?', 00H
$SG203732 DB	'?????', 00H, '?', 00H
$SG203733 DB	'?????', 00H, '?', 00H
$SG203734 DB	'?????', 00H, '?', 00H
$SG203735 DB	'?????', 00H, '?', 00H
$SG203736 DB	'?????', 00H, '?', 00H
$SG203737 DB	'?????', 00H, '?', 00H
$SG203738 DB	'?????', 00H, '?', 00H
$SG203739 DB	'?????', 00H, '?', 00H
$SG203740 DB	'?????', 00H, '?', 00H
$SG203741 DB	'?????', 00H, '?', 00H
$SG203742 DB	'?????', 00H, '?', 00H
$SG203743 DB	'?????', 00H, '?', 00H
$SG203744 DB	'?????', 00H, '?', 00H
$SG203745 DB	'?????', 00H, '?', 00H
$SG203746 DB	'?????', 00H, '?', 00H
$SG203747 DB	'?????', 00H, '?', 00H
$SG203748 DB	'?????', 00H, '?', 00H
$SG203749 DB	'?????', 00H, '?', 00H
$SG203750 DB	'?????', 00H, '?', 00H
$SG203751 DB	'?????', 00H, '?', 00H
$SG203752 DB	'?????', 00H, '?', 00H
$SG203753 DB	'?????', 00H, '?', 00H
$SG203754 DB	'?????', 00H, '?', 00H
$SG203755 DB	'?????', 00H, '?', 00H
$SG203756 DB	'?????', 00H, '?', 00H
$SG203757 DB	'?????', 00H, '?', 00H
$SG203758 DB	'?????', 00H, '?', 00H
$SG203759 DB	'?????', 00H, '?', 00H
$SG203760 DB	'?????', 00H, '?', 00H
$SG203761 DB	'?????', 00H, '?', 00H
$SG203762 DB	'?????', 00H, '?', 00H
$SG203763 DB	'?????', 00H, '?', 00H
$SG203764 DB	'?????', 00H, '?', 00H
$SG203765 DB	'?????', 00H, '?', 00H
$SG203766 DB	'?????', 00H, '?', 00H
$SG203767 DB	'?????', 00H, '?', 00H
$SG203768 DB	'?????', 00H, '?', 00H
$SG203769 DB	'?????', 00H, '?', 00H
$SG203770 DB	'?????', 00H, '?', 00H
$SG203771 DB	'?????', 00H, '?', 00H
$SG203772 DB	'MVHHI', 00H, 'move_halfword_from_halfword_immediate', 00H
	ORG $+4
$SG203773 DB	'?????', 00H, '?', 00H
$SG203774 DB	'?????', 00H, '?', 00H
$SG203775 DB	'?????', 00H, '?', 00H
$SG203776 DB	'MVGHI', 00H, 'move_long_from_halfword_immediate', 00H
$SG203777 DB	'?????', 00H, '?', 00H
$SG203778 DB	'?????', 00H, '?', 00H
$SG203779 DB	'?????', 00H, '?', 00H
$SG203780 DB	'MVHI', 00H, 'move_fullword_from_halfword_immediate', 00H
	ORG $+5
$SG203781 DB	'?????', 00H, '?', 00H
$SG203782 DB	'?????', 00H, '?', 00H
$SG203783 DB	'?????', 00H, '?', 00H
$SG203784 DB	'?????', 00H, '?', 00H
$SG203785 DB	'?????', 00H, '?', 00H
$SG203786 DB	'?????', 00H, '?', 00H
$SG203787 DB	'?????', 00H, '?', 00H
$SG203788 DB	'CHHSI', 00H, 'compare_halfword_immediate_halfword_storag'
	DB	'e', 00H
	ORG $+6
$SG203789 DB	'CLHHSI', 00H, 'compare_logical_immediate_halfword_storag'
	DB	'e', 00H
	ORG $+6
$SG203790 DB	'?????', 00H, '?', 00H
$SG203791 DB	'?????', 00H, '?', 00H
$SG203792 DB	'CGHSI', 00H, 'compare_halfword_immediate_long_storage', 00H
	ORG $+2
$SG203793 DB	'CLGHSI', 00H, 'compare_logical_immediate_long_storage', 00H
	ORG $+2
$SG203794 DB	'?????', 00H, '?', 00H
$SG203795 DB	'?????', 00H, '?', 00H
$SG203796 DB	'CHSI', 00H, 'compare_halfword_immediate_storage', 00H
$SG203797 DB	'CLFHSI', 00H, 'compare_logical_immediate_fullword_storag'
	DB	'e', 00H
	ORG $+6
$SG203798 DB	'?????', 00H, '?', 00H
$SG203799 DB	'?????', 00H, '?', 00H
$SG203800 DB	'TBEGIN', 00H, 'transaction_begin', 00H
	ORG $+7
$SG203801 DB	'TBEGINC', 00H, 'transaction_begin_constrained', 00H
	ORG $+2
$SG203802 DB	'?????', 00H, '?', 00H
$SG203803 DB	'?????', 00H, '?', 00H
$SG203804 DB	'?????', 00H, '?', 00H
$SG203805 DB	'?????', 00H, '?', 00H
$SG203806 DB	'?????', 00H, '?', 00H
$SG203807 DB	'?????', 00H, '?', 00H
$SG203808 DB	'?????', 00H, '?', 00H
$SG203809 DB	'?????', 00H, '?', 00H
$SG203810 DB	'?????', 00H, '?', 00H
$SG203811 DB	'?????', 00H, '?', 00H
$SG203812 DB	'?????', 00H, '?', 00H
$SG203813 DB	'?????', 00H, '?', 00H
$SG203814 DB	'?????', 00H, '?', 00H
$SG203815 DB	'?????', 00H, '?', 00H
$SG203816 DB	'?????', 00H, '?', 00H
$SG203817 DB	'?????', 00H, '?', 00H
$SG203818 DB	'?????', 00H, '?', 00H
$SG203819 DB	'?????', 00H, '?', 00H
$SG203820 DB	'?????', 00H, '?', 00H
$SG203821 DB	'?????', 00H, '?', 00H
$SG203822 DB	'?????', 00H, '?', 00H
$SG203823 DB	'?????', 00H, '?', 00H
$SG203824 DB	'?????', 00H, '?', 00H
$SG203825 DB	'?????', 00H, '?', 00H
$SG203826 DB	'?????', 00H, '?', 00H
$SG203827 DB	'?????', 00H, '?', 00H
$SG203828 DB	'?????', 00H, '?', 00H
$SG203829 DB	'?????', 00H, '?', 00H
$SG203830 DB	'?????', 00H, '?', 00H
$SG203831 DB	'?????', 00H, '?', 00H
$SG203832 DB	'?????', 00H, '?', 00H
$SG203833 DB	'?????', 00H, '?', 00H
$SG203834 DB	'?????', 00H, '?', 00H
$SG203835 DB	'?????', 00H, '?', 00H
$SG203836 DB	'?????', 00H, '?', 00H
$SG203837 DB	'?????', 00H, '?', 00H
$SG203838 DB	'?????', 00H, '?', 00H
$SG203839 DB	'?????', 00H, '?', 00H
$SG203840 DB	'?????', 00H, '?', 00H
$SG203841 DB	'?????', 00H, '?', 00H
$SG203842 DB	'?????', 00H, '?', 00H
$SG203843 DB	'?????', 00H, '?', 00H
$SG203844 DB	'?????', 00H, '?', 00H
$SG203845 DB	'?????', 00H, '?', 00H
$SG203846 DB	'?????', 00H, '?', 00H
$SG203847 DB	'?????', 00H, '?', 00H
$SG203848 DB	'?????', 00H, '?', 00H
$SG203849 DB	'?????', 00H, '?', 00H
$SG203850 DB	'?????', 00H, '?', 00H
$SG203851 DB	'?????', 00H, '?', 00H
$SG203852 DB	'?????', 00H, '?', 00H
$SG203853 DB	'?????', 00H, '?', 00H
$SG203854 DB	'?????', 00H, '?', 00H
$SG203855 DB	'?????', 00H, '?', 00H
$SG203856 DB	'?????', 00H, '?', 00H
$SG203857 DB	'?????', 00H, '?', 00H
$SG203858 DB	'?????', 00H, '?', 00H
$SG203859 DB	'?????', 00H, '?', 00H
$SG203860 DB	'?????', 00H, '?', 00H
$SG203861 DB	'?????', 00H, '?', 00H
$SG203862 DB	'?????', 00H, '?', 00H
$SG203863 DB	'?????', 00H, '?', 00H
$SG203864 DB	'?????', 00H, '?', 00H
$SG203865 DB	'?????', 00H, '?', 00H
$SG203866 DB	'?????', 00H, '?', 00H
$SG203867 DB	'?????', 00H, '?', 00H
$SG203868 DB	'?????', 00H, '?', 00H
$SG203869 DB	'?????', 00H, '?', 00H
$SG203870 DB	'?????', 00H, '?', 00H
$SG203871 DB	'?????', 00H, '?', 00H
$SG203872 DB	'?????', 00H, '?', 00H
$SG203873 DB	'?????', 00H, '?', 00H
$SG203874 DB	'?????', 00H, '?', 00H
$SG203875 DB	'?????', 00H, '?', 00H
$SG203876 DB	'?????', 00H, '?', 00H
$SG203877 DB	'?????', 00H, '?', 00H
$SG203878 DB	'?????', 00H, '?', 00H
$SG203879 DB	'?????', 00H, '?', 00H
$SG203880 DB	'?????', 00H, '?', 00H
$SG203881 DB	'?????', 00H, '?', 00H
$SG203882 DB	'?????', 00H, '?', 00H
$SG203883 DB	'?????', 00H, '?', 00H
$SG203884 DB	'?????', 00H, '?', 00H
$SG203885 DB	'?????', 00H, '?', 00H
$SG203886 DB	'?????', 00H, '?', 00H
$SG203887 DB	'?????', 00H, '?', 00H
$SG203888 DB	'?????', 00H, '?', 00H
$SG203889 DB	'?????', 00H, '?', 00H
$SG203890 DB	'?????', 00H, '?', 00H
$SG203891 DB	'?????', 00H, '?', 00H
$SG203892 DB	'?????', 00H, '?', 00H
$SG203893 DB	'?????', 00H, '?', 00H
$SG203894 DB	'?????', 00H, '?', 00H
$SG203895 DB	'?????', 00H, '?', 00H
$SG203896 DB	'?????', 00H, '?', 00H
$SG203897 DB	'?????', 00H, '?', 00H
$SG203898 DB	'?????', 00H, '?', 00H
$SG203899 DB	'?????', 00H, '?', 00H
$SG203900 DB	'?????', 00H, '?', 00H
$SG203901 DB	'?????', 00H, '?', 00H
$SG203902 DB	'?????', 00H, '?', 00H
$SG203903 DB	'?????', 00H, '?', 00H
$SG203904 DB	'?????', 00H, '?', 00H
$SG203905 DB	'?????', 00H, '?', 00H
$SG203906 DB	'?????', 00H, '?', 00H
$SG203907 DB	'?????', 00H, '?', 00H
$SG203908 DB	'?????', 00H, '?', 00H
$SG203909 DB	'?????', 00H, '?', 00H
$SG203910 DB	'?????', 00H, '?', 00H
$SG203911 DB	'?????', 00H, '?', 00H
$SG203912 DB	'?????', 00H, '?', 00H
$SG203913 DB	'?????', 00H, '?', 00H
$SG203914 DB	'?????', 00H, '?', 00H
$SG203915 DB	'?????', 00H, '?', 00H
$SG203916 DB	'?????', 00H, '?', 00H
$SG203917 DB	'?????', 00H, '?', 00H
$SG203918 DB	'?????', 00H, '?', 00H
$SG203919 DB	'?????', 00H, '?', 00H
$SG203920 DB	'?????', 00H, '?', 00H
$SG203921 DB	'?????', 00H, '?', 00H
$SG203922 DB	'?????', 00H, '?', 00H
$SG203923 DB	'?????', 00H, '?', 00H
$SG203924 DB	'?????', 00H, '?', 00H
$SG203925 DB	'?????', 00H, '?', 00H
$SG203926 DB	'?????', 00H, '?', 00H
$SG203927 DB	'?????', 00H, '?', 00H
$SG203928 DB	'?????', 00H, '?', 00H
$SG203929 DB	'?????', 00H, '?', 00H
$SG203930 DB	'?????', 00H, '?', 00H
$SG203931 DB	'?????', 00H, '?', 00H
$SG203932 DB	'?????', 00H, '?', 00H
$SG203933 DB	'?????', 00H, '?', 00H
$SG203934 DB	'?????', 00H, '?', 00H
$SG203935 DB	'?????', 00H, '?', 00H
$SG203936 DB	'?????', 00H, '?', 00H
$SG203937 DB	'?????', 00H, '?', 00H
$SG203938 DB	'?????', 00H, '?', 00H
$SG203939 DB	'?????', 00H, '?', 00H
$SG203940 DB	'?????', 00H, '?', 00H
$SG203941 DB	'?????', 00H, '?', 00H
$SG203942 DB	'?????', 00H, '?', 00H
$SG203943 DB	'?????', 00H, '?', 00H
$SG203944 DB	'?????', 00H, '?', 00H
$SG203945 DB	'?????', 00H, '?', 00H
$SG203946 DB	'?????', 00H, '?', 00H
$SG203947 DB	'?????', 00H, '?', 00H
$SG203948 DB	'?????', 00H, '?', 00H
$SG203949 DB	'?????', 00H, '?', 00H
$SG203950 DB	'?????', 00H, '?', 00H
$SG203951 DB	'?????', 00H, '?', 00H
$SG203952 DB	'?????', 00H, '?', 00H
$SG203953 DB	'?????', 00H, '?', 00H
$SG203954 DB	'?????', 00H, '?', 00H
$SG203955 DB	'?????', 00H, '?', 00H
$SG203956 DB	'?????', 00H, '?', 00H
$SG203957 DB	'?????', 00H, '?', 00H
$SG203958 DB	'?????', 00H, '?', 00H
$SG203959 DB	'?????', 00H, '?', 00H
$SG212152 DB	'ALR', 00H, '1E00', 00H
	ORG $+7
$SG212153 DB	'ALR', 00H, '1E01', 00H
	ORG $+7
$SG212154 DB	'ALR', 00H, '1E02', 00H
	ORG $+7
$SG212155 DB	'ALR', 00H, '1E03', 00H
	ORG $+7
$SG212156 DB	'ALR', 00H, '1E04', 00H
	ORG $+7
$SG212157 DB	'ALR', 00H, '1E05', 00H
	ORG $+7
$SG212158 DB	'ALR', 00H, '1E06', 00H
	ORG $+7
$SG212159 DB	'ALR', 00H, '1E07', 00H
	ORG $+7
$SG212160 DB	'ALR', 00H, '1E08', 00H
	ORG $+7
$SG212161 DB	'ALR', 00H, '1E09', 00H
	ORG $+7
$SG212162 DB	'ALR', 00H, '1E0A', 00H
	ORG $+7
$SG212163 DB	'ALR', 00H, '1E0B', 00H
	ORG $+7
$SG212164 DB	'ALR', 00H, '1E0C', 00H
	ORG $+7
$SG212165 DB	'ALR', 00H, '1E0D', 00H
	ORG $+7
$SG212166 DB	'ALR', 00H, '1E0E', 00H
	ORG $+7
$SG212167 DB	'ALR', 00H, '1E0F', 00H
	ORG $+7
$SG212168 DB	'ALR', 00H, '1E10', 00H
	ORG $+7
$SG212169 DB	'ALR', 00H, '1E11', 00H
	ORG $+7
$SG212170 DB	'ALR', 00H, '1E12', 00H
	ORG $+7
$SG212171 DB	'ALR', 00H, '1E13', 00H
	ORG $+7
$SG212172 DB	'ALR', 00H, '1E14', 00H
	ORG $+7
$SG212173 DB	'ALR', 00H, '1E15', 00H
	ORG $+7
$SG212174 DB	'ALR', 00H, '1E16', 00H
	ORG $+7
$SG212175 DB	'ALR', 00H, '1E17', 00H
	ORG $+7
$SG212176 DB	'ALR', 00H, '1E18', 00H
	ORG $+7
$SG212177 DB	'ALR', 00H, '1E19', 00H
	ORG $+7
$SG212178 DB	'ALR', 00H, '1E1A', 00H
	ORG $+7
$SG212179 DB	'ALR', 00H, '1E1B', 00H
	ORG $+7
$SG212180 DB	'ALR', 00H, '1E1C', 00H
	ORG $+7
$SG212181 DB	'ALR', 00H, '1E1D', 00H
	ORG $+7
$SG212182 DB	'ALR', 00H, '1E1E', 00H
	ORG $+7
$SG212183 DB	'ALR', 00H, '1E1F', 00H
	ORG $+7
$SG212184 DB	'ALR', 00H, '1E20', 00H
	ORG $+7
$SG212185 DB	'ALR', 00H, '1E21', 00H
	ORG $+7
$SG212186 DB	'ALR', 00H, '1E22', 00H
	ORG $+7
$SG212187 DB	'ALR', 00H, '1E23', 00H
	ORG $+7
$SG212188 DB	'ALR', 00H, '1E24', 00H
	ORG $+7
$SG212189 DB	'ALR', 00H, '1E25', 00H
	ORG $+7
$SG212190 DB	'ALR', 00H, '1E26', 00H
	ORG $+7
$SG212191 DB	'ALR', 00H, '1E27', 00H
	ORG $+7
$SG212192 DB	'ALR', 00H, '1E28', 00H
	ORG $+7
$SG212193 DB	'ALR', 00H, '1E29', 00H
	ORG $+7
$SG212194 DB	'ALR', 00H, '1E2A', 00H
	ORG $+7
$SG212195 DB	'ALR', 00H, '1E2B', 00H
	ORG $+7
$SG212196 DB	'ALR', 00H, '1E2C', 00H
	ORG $+7
$SG212197 DB	'ALR', 00H, '1E2D', 00H
	ORG $+7
$SG212198 DB	'ALR', 00H, '1E2E', 00H
	ORG $+7
$SG212199 DB	'ALR', 00H, '1E2F', 00H
	ORG $+7
$SG212200 DB	'ALR', 00H, '1E30', 00H
	ORG $+7
$SG212201 DB	'ALR', 00H, '1E31', 00H
	ORG $+7
$SG212202 DB	'ALR', 00H, '1E32', 00H
	ORG $+7
$SG212203 DB	'ALR', 00H, '1E33', 00H
	ORG $+7
$SG212204 DB	'ALR', 00H, '1E34', 00H
	ORG $+7
$SG212205 DB	'ALR', 00H, '1E35', 00H
	ORG $+7
$SG212206 DB	'ALR', 00H, '1E36', 00H
	ORG $+7
$SG212207 DB	'ALR', 00H, '1E37', 00H
	ORG $+7
$SG212208 DB	'ALR', 00H, '1E38', 00H
	ORG $+7
$SG212209 DB	'ALR', 00H, '1E39', 00H
	ORG $+7
$SG212210 DB	'ALR', 00H, '1E3A', 00H
	ORG $+7
$SG212211 DB	'ALR', 00H, '1E3B', 00H
	ORG $+7
$SG212212 DB	'ALR', 00H, '1E3C', 00H
	ORG $+7
$SG212213 DB	'ALR', 00H, '1E3D', 00H
	ORG $+7
$SG212214 DB	'ALR', 00H, '1E3E', 00H
	ORG $+7
$SG212215 DB	'ALR', 00H, '1E3F', 00H
	ORG $+7
$SG212216 DB	'ALR', 00H, '1E40', 00H
	ORG $+7
$SG212217 DB	'ALR', 00H, '1E41', 00H
	ORG $+7
$SG212218 DB	'ALR', 00H, '1E42', 00H
	ORG $+7
$SG212219 DB	'ALR', 00H, '1E43', 00H
	ORG $+7
$SG212220 DB	'ALR', 00H, '1E44', 00H
	ORG $+7
$SG212221 DB	'ALR', 00H, '1E45', 00H
	ORG $+7
$SG212222 DB	'ALR', 00H, '1E46', 00H
	ORG $+7
$SG212223 DB	'ALR', 00H, '1E47', 00H
	ORG $+7
$SG212224 DB	'ALR', 00H, '1E48', 00H
	ORG $+7
$SG212225 DB	'ALR', 00H, '1E49', 00H
	ORG $+7
$SG212226 DB	'ALR', 00H, '1E4A', 00H
	ORG $+7
$SG212227 DB	'ALR', 00H, '1E4B', 00H
	ORG $+7
$SG212228 DB	'ALR', 00H, '1E4C', 00H
	ORG $+7
$SG212229 DB	'ALR', 00H, '1E4D', 00H
	ORG $+7
$SG212230 DB	'ALR', 00H, '1E4E', 00H
	ORG $+7
$SG212231 DB	'ALR', 00H, '1E4F', 00H
	ORG $+7
$SG212232 DB	'ALR', 00H, '1E50', 00H
	ORG $+7
$SG212233 DB	'ALR', 00H, '1E51', 00H
	ORG $+7
$SG212234 DB	'ALR', 00H, '1E52', 00H
	ORG $+7
$SG212235 DB	'ALR', 00H, '1E53', 00H
	ORG $+7
$SG212236 DB	'ALR', 00H, '1E54', 00H
	ORG $+7
$SG212237 DB	'ALR', 00H, '1E55', 00H
	ORG $+7
$SG212238 DB	'ALR', 00H, '1E56', 00H
	ORG $+7
$SG212239 DB	'ALR', 00H, '1E57', 00H
	ORG $+7
$SG212240 DB	'ALR', 00H, '1E58', 00H
	ORG $+7
$SG212241 DB	'ALR', 00H, '1E59', 00H
	ORG $+7
$SG212242 DB	'ALR', 00H, '1E5A', 00H
	ORG $+7
$SG212243 DB	'ALR', 00H, '1E5B', 00H
	ORG $+7
$SG212244 DB	'ALR', 00H, '1E5C', 00H
	ORG $+7
$SG212245 DB	'ALR', 00H, '1E5D', 00H
	ORG $+7
$SG212246 DB	'ALR', 00H, '1E5E', 00H
	ORG $+7
$SG212247 DB	'ALR', 00H, '1E5F', 00H
	ORG $+7
$SG212248 DB	'ALR', 00H, '1E60', 00H
	ORG $+7
$SG212249 DB	'ALR', 00H, '1E61', 00H
	ORG $+7
$SG212250 DB	'ALR', 00H, '1E62', 00H
	ORG $+7
$SG212251 DB	'ALR', 00H, '1E63', 00H
	ORG $+7
$SG212252 DB	'ALR', 00H, '1E64', 00H
	ORG $+7
$SG212253 DB	'ALR', 00H, '1E65', 00H
	ORG $+7
$SG212254 DB	'ALR', 00H, '1E66', 00H
	ORG $+7
$SG212255 DB	'ALR', 00H, '1E67', 00H
	ORG $+7
$SG212256 DB	'ALR', 00H, '1E68', 00H
	ORG $+7
$SG212257 DB	'ALR', 00H, '1E69', 00H
	ORG $+7
$SG212258 DB	'ALR', 00H, '1E6A', 00H
	ORG $+7
$SG212259 DB	'ALR', 00H, '1E6B', 00H
	ORG $+7
$SG212260 DB	'ALR', 00H, '1E6C', 00H
	ORG $+7
$SG212261 DB	'ALR', 00H, '1E6D', 00H
	ORG $+7
$SG212262 DB	'ALR', 00H, '1E6E', 00H
	ORG $+7
$SG212263 DB	'ALR', 00H, '1E6F', 00H
	ORG $+7
$SG212264 DB	'ALR', 00H, '1E70', 00H
	ORG $+7
$SG212265 DB	'ALR', 00H, '1E71', 00H
	ORG $+7
$SG212266 DB	'ALR', 00H, '1E72', 00H
	ORG $+7
$SG212267 DB	'ALR', 00H, '1E73', 00H
	ORG $+7
$SG212268 DB	'ALR', 00H, '1E74', 00H
	ORG $+7
$SG212269 DB	'ALR', 00H, '1E75', 00H
	ORG $+7
$SG212270 DB	'ALR', 00H, '1E76', 00H
	ORG $+7
$SG212271 DB	'ALR', 00H, '1E77', 00H
	ORG $+7
$SG212272 DB	'ALR', 00H, '1E78', 00H
	ORG $+7
$SG212273 DB	'ALR', 00H, '1E79', 00H
	ORG $+7
$SG212274 DB	'ALR', 00H, '1E7A', 00H
	ORG $+7
$SG212275 DB	'ALR', 00H, '1E7B', 00H
	ORG $+7
$SG212276 DB	'ALR', 00H, '1E7C', 00H
	ORG $+7
$SG212277 DB	'ALR', 00H, '1E7D', 00H
	ORG $+7
$SG212278 DB	'ALR', 00H, '1E7E', 00H
	ORG $+7
$SG212279 DB	'ALR', 00H, '1E7F', 00H
	ORG $+7
$SG212280 DB	'ALR', 00H, '1E80', 00H
	ORG $+7
$SG212281 DB	'ALR', 00H, '1E81', 00H
	ORG $+7
$SG212282 DB	'ALR', 00H, '1E82', 00H
	ORG $+7
$SG212283 DB	'ALR', 00H, '1E83', 00H
	ORG $+7
$SG212284 DB	'ALR', 00H, '1E84', 00H
	ORG $+7
$SG212285 DB	'ALR', 00H, '1E85', 00H
	ORG $+7
$SG212286 DB	'ALR', 00H, '1E86', 00H
	ORG $+7
$SG212287 DB	'ALR', 00H, '1E87', 00H
	ORG $+7
$SG212288 DB	'ALR', 00H, '1E88', 00H
	ORG $+7
$SG212289 DB	'ALR', 00H, '1E89', 00H
	ORG $+7
$SG212290 DB	'ALR', 00H, '1E8A', 00H
	ORG $+7
$SG212291 DB	'ALR', 00H, '1E8B', 00H
	ORG $+7
$SG212292 DB	'ALR', 00H, '1E8C', 00H
	ORG $+7
$SG212293 DB	'ALR', 00H, '1E8D', 00H
	ORG $+7
$SG212294 DB	'ALR', 00H, '1E8E', 00H
	ORG $+7
$SG212295 DB	'ALR', 00H, '1E8F', 00H
	ORG $+7
$SG212296 DB	'ALR', 00H, '1E90', 00H
	ORG $+7
$SG212297 DB	'ALR', 00H, '1E91', 00H
	ORG $+7
$SG212298 DB	'ALR', 00H, '1E92', 00H
	ORG $+7
$SG212299 DB	'ALR', 00H, '1E93', 00H
	ORG $+7
$SG212300 DB	'ALR', 00H, '1E94', 00H
	ORG $+7
$SG212301 DB	'ALR', 00H, '1E95', 00H
	ORG $+7
$SG212302 DB	'ALR', 00H, '1E96', 00H
	ORG $+7
$SG212303 DB	'ALR', 00H, '1E97', 00H
	ORG $+7
$SG212304 DB	'ALR', 00H, '1E98', 00H
	ORG $+7
$SG212305 DB	'ALR', 00H, '1E99', 00H
	ORG $+7
$SG212306 DB	'ALR', 00H, '1E9A', 00H
	ORG $+7
$SG212307 DB	'ALR', 00H, '1E9B', 00H
	ORG $+7
$SG212308 DB	'ALR', 00H, '1E9C', 00H
	ORG $+7
$SG212309 DB	'ALR', 00H, '1E9D', 00H
	ORG $+7
$SG212310 DB	'ALR', 00H, '1E9E', 00H
	ORG $+7
$SG212311 DB	'ALR', 00H, '1E9F', 00H
	ORG $+7
$SG212312 DB	'ALR', 00H, '1EA0', 00H
	ORG $+7
$SG212313 DB	'ALR', 00H, '1EA1', 00H
	ORG $+7
$SG212314 DB	'ALR', 00H, '1EA2', 00H
	ORG $+7
$SG212315 DB	'ALR', 00H, '1EA3', 00H
	ORG $+7
$SG212316 DB	'ALR', 00H, '1EA4', 00H
	ORG $+7
$SG212317 DB	'ALR', 00H, '1EA5', 00H
	ORG $+7
$SG212318 DB	'ALR', 00H, '1EA6', 00H
	ORG $+7
$SG212319 DB	'ALR', 00H, '1EA7', 00H
	ORG $+7
$SG212320 DB	'ALR', 00H, '1EA8', 00H
	ORG $+7
$SG212321 DB	'ALR', 00H, '1EA9', 00H
	ORG $+7
$SG212322 DB	'ALR', 00H, '1EAA', 00H
	ORG $+7
$SG212323 DB	'ALR', 00H, '1EAB', 00H
	ORG $+7
$SG212324 DB	'ALR', 00H, '1EAC', 00H
	ORG $+7
$SG212325 DB	'ALR', 00H, '1EAD', 00H
	ORG $+7
$SG212326 DB	'ALR', 00H, '1EAE', 00H
	ORG $+7
$SG212327 DB	'ALR', 00H, '1EAF', 00H
	ORG $+7
$SG212328 DB	'ALR', 00H, '1EB0', 00H
	ORG $+7
$SG212329 DB	'ALR', 00H, '1EB1', 00H
	ORG $+7
$SG212330 DB	'ALR', 00H, '1EB2', 00H
	ORG $+7
$SG212331 DB	'ALR', 00H, '1EB3', 00H
	ORG $+7
$SG212332 DB	'ALR', 00H, '1EB4', 00H
	ORG $+7
$SG212333 DB	'ALR', 00H, '1EB5', 00H
	ORG $+7
$SG212334 DB	'ALR', 00H, '1EB6', 00H
	ORG $+7
$SG212335 DB	'ALR', 00H, '1EB7', 00H
	ORG $+7
$SG212336 DB	'ALR', 00H, '1EB8', 00H
	ORG $+7
$SG212337 DB	'ALR', 00H, '1EB9', 00H
	ORG $+7
$SG212338 DB	'ALR', 00H, '1EBA', 00H
	ORG $+7
$SG212339 DB	'ALR', 00H, '1EBB', 00H
	ORG $+7
$SG212340 DB	'ALR', 00H, '1EBC', 00H
	ORG $+7
$SG212341 DB	'ALR', 00H, '1EBD', 00H
	ORG $+7
$SG212342 DB	'ALR', 00H, '1EBE', 00H
	ORG $+7
$SG212343 DB	'ALR', 00H, '1EBF', 00H
	ORG $+7
$SG212344 DB	'ALR', 00H, '1EC0', 00H
	ORG $+7
$SG212345 DB	'ALR', 00H, '1EC1', 00H
	ORG $+7
$SG212346 DB	'ALR', 00H, '1EC2', 00H
	ORG $+7
$SG212347 DB	'ALR', 00H, '1EC3', 00H
	ORG $+7
$SG212348 DB	'ALR', 00H, '1EC4', 00H
	ORG $+7
$SG212349 DB	'ALR', 00H, '1EC5', 00H
	ORG $+7
$SG212350 DB	'ALR', 00H, '1EC6', 00H
	ORG $+7
$SG212351 DB	'ALR', 00H, '1EC7', 00H
	ORG $+7
$SG212352 DB	'ALR', 00H, '1EC8', 00H
	ORG $+7
$SG212353 DB	'ALR', 00H, '1EC9', 00H
	ORG $+7
$SG212354 DB	'ALR', 00H, '1ECA', 00H
	ORG $+7
$SG212355 DB	'ALR', 00H, '1ECB', 00H
	ORG $+7
$SG212356 DB	'ALR', 00H, '1ECC', 00H
	ORG $+7
$SG212357 DB	'ALR', 00H, '1ECD', 00H
	ORG $+7
$SG212358 DB	'ALR', 00H, '1ECE', 00H
	ORG $+7
$SG212359 DB	'ALR', 00H, '1ECF', 00H
	ORG $+7
$SG212360 DB	'ALR', 00H, '1ED0', 00H
	ORG $+7
$SG212361 DB	'ALR', 00H, '1ED1', 00H
	ORG $+7
$SG212362 DB	'ALR', 00H, '1ED2', 00H
	ORG $+7
$SG212363 DB	'ALR', 00H, '1ED3', 00H
	ORG $+7
$SG212364 DB	'ALR', 00H, '1ED4', 00H
	ORG $+7
$SG212365 DB	'ALR', 00H, '1ED5', 00H
	ORG $+7
$SG212366 DB	'ALR', 00H, '1ED6', 00H
	ORG $+7
$SG212367 DB	'ALR', 00H, '1ED7', 00H
	ORG $+7
$SG212368 DB	'ALR', 00H, '1ED8', 00H
	ORG $+7
$SG212369 DB	'ALR', 00H, '1ED9', 00H
	ORG $+7
$SG212370 DB	'ALR', 00H, '1EDA', 00H
	ORG $+7
$SG212371 DB	'ALR', 00H, '1EDB', 00H
	ORG $+7
$SG212372 DB	'ALR', 00H, '1EDC', 00H
	ORG $+7
$SG212373 DB	'ALR', 00H, '1EDD', 00H
	ORG $+7
$SG212374 DB	'ALR', 00H, '1EDE', 00H
	ORG $+7
$SG212375 DB	'ALR', 00H, '1EDF', 00H
	ORG $+7
$SG212376 DB	'ALR', 00H, '1EE0', 00H
	ORG $+7
$SG212377 DB	'ALR', 00H, '1EE1', 00H
	ORG $+7
$SG212378 DB	'ALR', 00H, '1EE2', 00H
	ORG $+7
$SG212379 DB	'ALR', 00H, '1EE3', 00H
	ORG $+7
$SG212380 DB	'ALR', 00H, '1EE4', 00H
	ORG $+7
$SG212381 DB	'ALR', 00H, '1EE5', 00H
	ORG $+7
$SG212382 DB	'ALR', 00H, '1EE6', 00H
	ORG $+7
$SG212383 DB	'ALR', 00H, '1EE7', 00H
	ORG $+7
$SG212384 DB	'ALR', 00H, '1EE8', 00H
	ORG $+7
$SG212385 DB	'ALR', 00H, '1EE9', 00H
	ORG $+7
$SG212386 DB	'ALR', 00H, '1EEA', 00H
	ORG $+7
$SG212387 DB	'ALR', 00H, '1EEB', 00H
	ORG $+7
$SG212388 DB	'ALR', 00H, '1EEC', 00H
	ORG $+7
$SG212389 DB	'ALR', 00H, '1EED', 00H
	ORG $+7
$SG212390 DB	'ALR', 00H, '1EEE', 00H
	ORG $+7
$SG212391 DB	'ALR', 00H, '1EEF', 00H
	ORG $+7
$SG212392 DB	'ALR', 00H, '1EF0', 00H
	ORG $+7
$SG212393 DB	'ALR', 00H, '1EF1', 00H
	ORG $+7
$SG212394 DB	'ALR', 00H, '1EF2', 00H
	ORG $+7
$SG212395 DB	'ALR', 00H, '1EF3', 00H
	ORG $+7
$SG212396 DB	'ALR', 00H, '1EF4', 00H
	ORG $+7
$SG212397 DB	'ALR', 00H, '1EF5', 00H
	ORG $+7
$SG212398 DB	'ALR', 00H, '1EF6', 00H
	ORG $+7
$SG212399 DB	'ALR', 00H, '1EF7', 00H
	ORG $+7
$SG212400 DB	'ALR', 00H, '1EF8', 00H
	ORG $+7
$SG212401 DB	'ALR', 00H, '1EF9', 00H
	ORG $+7
$SG212402 DB	'ALR', 00H, '1EFA', 00H
	ORG $+7
$SG212403 DB	'ALR', 00H, '1EFB', 00H
	ORG $+7
$SG212404 DB	'ALR', 00H, '1EFC', 00H
	ORG $+7
$SG212405 DB	'ALR', 00H, '1EFD', 00H
	ORG $+7
$SG212406 DB	'ALR', 00H, '1EFE', 00H
	ORG $+7
$SG212407 DB	'ALR', 00H, '1EFF', 00H
	ORG $+7
$SG204472 DB	'FREE', 00H, 'ecpsvm_basic_freex', 00H
$SG204473 DB	'FRET', 00H, 'ecpsvm_basic_fretx', 00H
$SG204474 DB	'VLKPG', 00H, 'ecpsvm_lock_page', 00H
	ORG $+1
$SG204475 DB	'VULKP', 00H, 'ecpsvm_unlock_page', 00H
	ORG $+7
$SG204476 DB	'DNCCW', 00H, 'ecpsvm_decode_next_ccw', 00H
	ORG $+3
$SG204477 DB	'FCCWS', 00H, 'ecpsvm_free_ccwstor', 00H
	ORG $+6
$SG204478 DB	'SCNVU', 00H, 'ecpsvm_locate_vblock', 00H
	ORG $+5
$SG204479 DB	'ECPS_DISP1', 00H, 'ecpsvm_disp1', 00H
$SG204480 DB	'ECPS_TRBRG', 00H, 'ecpsvm_tpage', 00H
$SG204481 DB	'TRLCK', 00H, 'ecpsvm_tpage_lock', 00H
$SG204482 DB	'VIST', 00H, 'ecpsvm_inval_segtab', 00H
	ORG $+7
$SG204483 DB	'VIPT', 00H, 'ecpsvm_inval_ptable', 00H
	ORG $+7
$SG204484 DB	'DFCCW', 00H, 'ecpsvm_decode_first_ccw', 00H
	ORG $+2
$SG204485 DB	'DISP0', 00H, 'ecpsvm_dispatch_main', 00H
	ORG $+5
$SG204486 DB	'SCNRU', 00H, 'ecpsvm_locate_rblock', 00H
	ORG $+5
$SG204487 DB	'CCWGN', 00H, 'ecpsvm_comm_ccwproc', 00H
	ORG $+6
$SG204488 DB	'UXCCW', 00H, 'ecpsvm_unxlate_ccw', 00H
	ORG $+7
$SG204489 DB	'DISP2', 00H, 'ecpsvm_disp2', 00H
	ORG $+5
$SG204490 DB	'STEVL', 00H, 'ecpsvm_store_level', 00H
	ORG $+7
$SG204491 DB	'LCSPG', 00H, 'ecpsvm_loc_chgshrpg', 00H
	ORG $+6
$SG204492 DB	'FREEX', 00H, 'ecpsvm_extended_freex', 00H
	ORG $+4
$SG204493 DB	'FRETX', 00H, 'ecpsvm_extended_fretx', 00H
	ORG $+4
$SG204494 DB	'PRFMA', 00H, 'ecpsvm_prefmach_assist', 00H
	ORG $+3
$SG204495 DB	'?????', 00H, '?', 00H
$SG204496 DB	'?????', 00H, '?', 00H
$SG204497 DB	'?????', 00H, '?', 00H
$SG204498 DB	'?????', 00H, '?', 00H
$SG204499 DB	'?????', 00H, '?', 00H
$SG204500 DB	'?????', 00H, '?', 00H
$SG204501 DB	'?????', 00H, '?', 00H
$SG204502 DB	'?????', 00H, '?', 00H
$SG204503 DB	'?????', 00H, '?', 00H
$SG204504 DB	'?????', 00H, '?', 00H
$SG204505 DB	'?????', 00H, '?', 00H
$SG204506 DB	'?????', 00H, '?', 00H
$SG204507 DB	'?????', 00H, '?', 00H
$SG204508 DB	'?????', 00H, '?', 00H
$SG204509 DB	'?????', 00H, '?', 00H
$SG204510 DB	'?????', 00H, '?', 00H
$SG204511 DB	'?????', 00H, '?', 00H
$SG204512 DB	'?????', 00H, '?', 00H
$SG204513 DB	'?????', 00H, '?', 00H
$SG204514 DB	'?????', 00H, '?', 00H
$SG204515 DB	'?????', 00H, '?', 00H
$SG204516 DB	'?????', 00H, '?', 00H
$SG204517 DB	'?????', 00H, '?', 00H
$SG204518 DB	'?????', 00H, '?', 00H
$SG204519 DB	'?????', 00H, '?', 00H
$SG204520 DB	'?????', 00H, '?', 00H
$SG204521 DB	'?????', 00H, '?', 00H
$SG204522 DB	'?????', 00H, '?', 00H
$SG204523 DB	'?????', 00H, '?', 00H
$SG204524 DB	'?????', 00H, '?', 00H
$SG204525 DB	'?????', 00H, '?', 00H
$SG204526 DB	'?????', 00H, '?', 00H
$SG204527 DB	'?????', 00H, '?', 00H
$SG204528 DB	'?????', 00H, '?', 00H
$SG204529 DB	'?????', 00H, '?', 00H
$SG204530 DB	'?????', 00H, '?', 00H
$SG204531 DB	'?????', 00H, '?', 00H
$SG204532 DB	'?????', 00H, '?', 00H
$SG204533 DB	'?????', 00H, '?', 00H
$SG204534 DB	'?????', 00H, '?', 00H
$SG204535 DB	'?????', 00H, '?', 00H
$SG204536 DB	'?????', 00H, '?', 00H
$SG204537 DB	'?????', 00H, '?', 00H
$SG204538 DB	'?????', 00H, '?', 00H
$SG204539 DB	'?????', 00H, '?', 00H
$SG204540 DB	'?????', 00H, '?', 00H
$SG204541 DB	'?????', 00H, '?', 00H
$SG204542 DB	'?????', 00H, '?', 00H
$SG204543 DB	'?????', 00H, '?', 00H
$SG204544 DB	'?????', 00H, '?', 00H
$SG204545 DB	'?????', 00H, '?', 00H
$SG204546 DB	'?????', 00H, '?', 00H
$SG204547 DB	'?????', 00H, '?', 00H
$SG204548 DB	'?????', 00H, '?', 00H
$SG204549 DB	'?????', 00H, '?', 00H
$SG204550 DB	'?????', 00H, '?', 00H
$SG204551 DB	'?????', 00H, '?', 00H
$SG204552 DB	'?????', 00H, '?', 00H
$SG204553 DB	'?????', 00H, '?', 00H
$SG204554 DB	'?????', 00H, '?', 00H
$SG204555 DB	'?????', 00H, '?', 00H
$SG204556 DB	'?????', 00H, '?', 00H
$SG204557 DB	'?????', 00H, '?', 00H
$SG204558 DB	'?????', 00H, '?', 00H
$SG204559 DB	'?????', 00H, '?', 00H
$SG204560 DB	'?????', 00H, '?', 00H
$SG204561 DB	'?????', 00H, '?', 00H
$SG204562 DB	'?????', 00H, '?', 00H
$SG204563 DB	'?????', 00H, '?', 00H
$SG204564 DB	'?????', 00H, '?', 00H
$SG204565 DB	'?????', 00H, '?', 00H
$SG204566 DB	'?????', 00H, '?', 00H
$SG204567 DB	'?????', 00H, '?', 00H
$SG204568 DB	'?????', 00H, '?', 00H
$SG204569 DB	'?????', 00H, '?', 00H
$SG204570 DB	'?????', 00H, '?', 00H
$SG204571 DB	'?????', 00H, '?', 00H
$SG204572 DB	'?????', 00H, '?', 00H
$SG204573 DB	'?????', 00H, '?', 00H
$SG204574 DB	'?????', 00H, '?', 00H
$SG204575 DB	'?????', 00H, '?', 00H
$SG204576 DB	'?????', 00H, '?', 00H
$SG204577 DB	'?????', 00H, '?', 00H
$SG204578 DB	'?????', 00H, '?', 00H
$SG204579 DB	'?????', 00H, '?', 00H
$SG204580 DB	'?????', 00H, '?', 00H
$SG204581 DB	'?????', 00H, '?', 00H
$SG204582 DB	'?????', 00H, '?', 00H
$SG204583 DB	'?????', 00H, '?', 00H
$SG204584 DB	'?????', 00H, '?', 00H
$SG204585 DB	'?????', 00H, '?', 00H
$SG204586 DB	'?????', 00H, '?', 00H
$SG204587 DB	'?????', 00H, '?', 00H
$SG204588 DB	'?????', 00H, '?', 00H
$SG204589 DB	'?????', 00H, '?', 00H
$SG204590 DB	'?????', 00H, '?', 00H
$SG204591 DB	'?????', 00H, '?', 00H
$SG204592 DB	'?????', 00H, '?', 00H
$SG204593 DB	'?????', 00H, '?', 00H
$SG204594 DB	'?????', 00H, '?', 00H
$SG204595 DB	'?????', 00H, '?', 00H
$SG204596 DB	'?????', 00H, '?', 00H
$SG204597 DB	'?????', 00H, '?', 00H
$SG204598 DB	'?????', 00H, '?', 00H
$SG204599 DB	'?????', 00H, '?', 00H
$SG204600 DB	'?????', 00H, '?', 00H
$SG204601 DB	'?????', 00H, '?', 00H
$SG204602 DB	'?????', 00H, '?', 00H
$SG204603 DB	'?????', 00H, '?', 00H
$SG204604 DB	'?????', 00H, '?', 00H
$SG204605 DB	'?????', 00H, '?', 00H
$SG204606 DB	'?????', 00H, '?', 00H
$SG204607 DB	'?????', 00H, '?', 00H
$SG204608 DB	'?????', 00H, '?', 00H
$SG204609 DB	'?????', 00H, '?', 00H
$SG204610 DB	'?????', 00H, '?', 00H
$SG204611 DB	'?????', 00H, '?', 00H
$SG204612 DB	'?????', 00H, '?', 00H
$SG204613 DB	'?????', 00H, '?', 00H
$SG204614 DB	'?????', 00H, '?', 00H
$SG204615 DB	'?????', 00H, '?', 00H
$SG204616 DB	'?????', 00H, '?', 00H
$SG204617 DB	'?????', 00H, '?', 00H
$SG204618 DB	'?????', 00H, '?', 00H
$SG204619 DB	'?????', 00H, '?', 00H
$SG204620 DB	'?????', 00H, '?', 00H
$SG204621 DB	'?????', 00H, '?', 00H
$SG204622 DB	'?????', 00H, '?', 00H
$SG204623 DB	'?????', 00H, '?', 00H
$SG204624 DB	'?????', 00H, '?', 00H
$SG204625 DB	'?????', 00H, '?', 00H
$SG204626 DB	'?????', 00H, '?', 00H
$SG204627 DB	'?????', 00H, '?', 00H
$SG204628 DB	'?????', 00H, '?', 00H
$SG204629 DB	'?????', 00H, '?', 00H
$SG204630 DB	'?????', 00H, '?', 00H
$SG204631 DB	'?????', 00H, '?', 00H
$SG204632 DB	'?????', 00H, '?', 00H
$SG204633 DB	'?????', 00H, '?', 00H
$SG204634 DB	'?????', 00H, '?', 00H
$SG204635 DB	'?????', 00H, '?', 00H
$SG204636 DB	'?????', 00H, '?', 00H
$SG204637 DB	'?????', 00H, '?', 00H
$SG204638 DB	'?????', 00H, '?', 00H
$SG204639 DB	'?????', 00H, '?', 00H
$SG204640 DB	'?????', 00H, '?', 00H
$SG204641 DB	'?????', 00H, '?', 00H
$SG204642 DB	'?????', 00H, '?', 00H
$SG204643 DB	'?????', 00H, '?', 00H
$SG204644 DB	'?????', 00H, '?', 00H
$SG204645 DB	'?????', 00H, '?', 00H
$SG204646 DB	'?????', 00H, '?', 00H
$SG204647 DB	'?????', 00H, '?', 00H
$SG204648 DB	'?????', 00H, '?', 00H
$SG204649 DB	'?????', 00H, '?', 00H
$SG204650 DB	'?????', 00H, '?', 00H
$SG204651 DB	'?????', 00H, '?', 00H
$SG204652 DB	'?????', 00H, '?', 00H
$SG204653 DB	'?????', 00H, '?', 00H
$SG204654 DB	'?????', 00H, '?', 00H
$SG204655 DB	'?????', 00H, '?', 00H
$SG204656 DB	'?????', 00H, '?', 00H
$SG204657 DB	'?????', 00H, '?', 00H
$SG204658 DB	'?????', 00H, '?', 00H
$SG204659 DB	'?????', 00H, '?', 00H
$SG204660 DB	'?????', 00H, '?', 00H
$SG204661 DB	'?????', 00H, '?', 00H
$SG204662 DB	'?????', 00H, '?', 00H
$SG204663 DB	'?????', 00H, '?', 00H
$SG204664 DB	'?????', 00H, '?', 00H
$SG204665 DB	'?????', 00H, '?', 00H
$SG204666 DB	'?????', 00H, '?', 00H
$SG204667 DB	'?????', 00H, '?', 00H
$SG204668 DB	'?????', 00H, '?', 00H
$SG204669 DB	'?????', 00H, '?', 00H
$SG204670 DB	'?????', 00H, '?', 00H
$SG204671 DB	'?????', 00H, '?', 00H
$SG204672 DB	'?????', 00H, '?', 00H
$SG204673 DB	'?????', 00H, '?', 00H
$SG204674 DB	'?????', 00H, '?', 00H
$SG204675 DB	'?????', 00H, '?', 00H
$SG204676 DB	'?????', 00H, '?', 00H
$SG204677 DB	'?????', 00H, '?', 00H
$SG204678 DB	'?????', 00H, '?', 00H
$SG204679 DB	'?????', 00H, '?', 00H
$SG204680 DB	'?????', 00H, '?', 00H
$SG204681 DB	'?????', 00H, '?', 00H
$SG204682 DB	'?????', 00H, '?', 00H
$SG204683 DB	'?????', 00H, '?', 00H
$SG204684 DB	'?????', 00H, '?', 00H
$SG204685 DB	'?????', 00H, '?', 00H
$SG204686 DB	'?????', 00H, '?', 00H
$SG204687 DB	'?????', 00H, '?', 00H
$SG204688 DB	'?????', 00H, '?', 00H
$SG204689 DB	'?????', 00H, '?', 00H
$SG204690 DB	'?????', 00H, '?', 00H
$SG204691 DB	'?????', 00H, '?', 00H
$SG204692 DB	'?????', 00H, '?', 00H
$SG204693 DB	'?????', 00H, '?', 00H
$SG204694 DB	'?????', 00H, '?', 00H
$SG204695 DB	'?????', 00H, '?', 00H
$SG204696 DB	'?????', 00H, '?', 00H
$SG204697 DB	'?????', 00H, '?', 00H
$SG204698 DB	'?????', 00H, '?', 00H
$SG204699 DB	'?????', 00H, '?', 00H
$SG204700 DB	'?????', 00H, '?', 00H
$SG204701 DB	'?????', 00H, '?', 00H
$SG204702 DB	'?????', 00H, '?', 00H
$SG204703 DB	'?????', 00H, '?', 00H
$SG204704 DB	'?????', 00H, '?', 00H
$SG204705 DB	'?????', 00H, '?', 00H
$SG204706 DB	'?????', 00H, '?', 00H
$SG204707 DB	'?????', 00H, '?', 00H
$SG204708 DB	'?????', 00H, '?', 00H
$SG204709 DB	'?????', 00H, '?', 00H
$SG204710 DB	'?????', 00H, '?', 00H
$SG204711 DB	'?????', 00H, '?', 00H
$SG204712 DB	'?????', 00H, '?', 00H
$SG204713 DB	'?????', 00H, '?', 00H
$SG204714 DB	'?????', 00H, '?', 00H
$SG204715 DB	'?????', 00H, '?', 00H
$SG204716 DB	'?????', 00H, '?', 00H
$SG204717 DB	'?????', 00H, '?', 00H
$SG204718 DB	'?????', 00H, '?', 00H
$SG204719 DB	'?????', 00H, '?', 00H
$SG204720 DB	'?????', 00H, '?', 00H
$SG204721 DB	'?????', 00H, '?', 00H
$SG204722 DB	'?????', 00H, '?', 00H
$SG204723 DB	'?????', 00H, '?', 00H
$SG204724 DB	'?????', 00H, '?', 00H
$SG204725 DB	'?????', 00H, '?', 00H
$SG204726 DB	'?????', 00H, '?', 00H
$SG204727 DB	'?????', 00H, '?', 00H
$SG212920 DB	'SLR', 00H, '1F00', 00H
	ORG $+7
$SG212921 DB	'SLR', 00H, '1F01', 00H
	ORG $+7
$SG212922 DB	'SLR', 00H, '1F02', 00H
	ORG $+7
$SG212923 DB	'SLR', 00H, '1F03', 00H
	ORG $+7
$SG212924 DB	'SLR', 00H, '1F04', 00H
	ORG $+7
$SG212925 DB	'SLR', 00H, '1F05', 00H
	ORG $+7
$SG212926 DB	'SLR', 00H, '1F06', 00H
	ORG $+7
$SG212927 DB	'SLR', 00H, '1F07', 00H
	ORG $+7
$SG212928 DB	'SLR', 00H, '1F08', 00H
	ORG $+7
$SG212929 DB	'SLR', 00H, '1F09', 00H
	ORG $+7
$SG212930 DB	'SLR', 00H, '1F0A', 00H
	ORG $+7
$SG212931 DB	'SLR', 00H, '1F0B', 00H
	ORG $+7
$SG212932 DB	'SLR', 00H, '1F0C', 00H
	ORG $+7
$SG212933 DB	'SLR', 00H, '1F0D', 00H
	ORG $+7
$SG212934 DB	'SLR', 00H, '1F0E', 00H
	ORG $+7
$SG212935 DB	'SLR', 00H, '1F0F', 00H
	ORG $+7
$SG212936 DB	'SLR', 00H, '1F10', 00H
	ORG $+7
$SG212937 DB	'SLR', 00H, '1F11', 00H
	ORG $+7
$SG212938 DB	'SLR', 00H, '1F12', 00H
	ORG $+7
$SG212939 DB	'SLR', 00H, '1F13', 00H
	ORG $+7
$SG212940 DB	'SLR', 00H, '1F14', 00H
	ORG $+7
$SG212941 DB	'SLR', 00H, '1F15', 00H
	ORG $+7
$SG212942 DB	'SLR', 00H, '1F16', 00H
	ORG $+7
$SG212943 DB	'SLR', 00H, '1F17', 00H
	ORG $+7
$SG212944 DB	'SLR', 00H, '1F18', 00H
	ORG $+7
$SG212945 DB	'SLR', 00H, '1F19', 00H
	ORG $+7
$SG212946 DB	'SLR', 00H, '1F1A', 00H
	ORG $+7
$SG212947 DB	'SLR', 00H, '1F1B', 00H
	ORG $+7
$SG212948 DB	'SLR', 00H, '1F1C', 00H
	ORG $+7
$SG212949 DB	'SLR', 00H, '1F1D', 00H
	ORG $+7
$SG212950 DB	'SLR', 00H, '1F1E', 00H
	ORG $+7
$SG212951 DB	'SLR', 00H, '1F1F', 00H
	ORG $+7
$SG212952 DB	'SLR', 00H, '1F20', 00H
	ORG $+7
$SG212953 DB	'SLR', 00H, '1F21', 00H
	ORG $+7
$SG212954 DB	'SLR', 00H, '1F22', 00H
	ORG $+7
$SG212955 DB	'SLR', 00H, '1F23', 00H
	ORG $+7
$SG212956 DB	'SLR', 00H, '1F24', 00H
	ORG $+7
$SG212957 DB	'SLR', 00H, '1F25', 00H
	ORG $+7
$SG212958 DB	'SLR', 00H, '1F26', 00H
	ORG $+7
$SG212959 DB	'SLR', 00H, '1F27', 00H
	ORG $+7
$SG212960 DB	'SLR', 00H, '1F28', 00H
	ORG $+7
$SG212961 DB	'SLR', 00H, '1F29', 00H
	ORG $+7
$SG212962 DB	'SLR', 00H, '1F2A', 00H
	ORG $+7
$SG212963 DB	'SLR', 00H, '1F2B', 00H
	ORG $+7
$SG212964 DB	'SLR', 00H, '1F2C', 00H
	ORG $+7
$SG212965 DB	'SLR', 00H, '1F2D', 00H
	ORG $+7
$SG212966 DB	'SLR', 00H, '1F2E', 00H
	ORG $+7
$SG212967 DB	'SLR', 00H, '1F2F', 00H
	ORG $+7
$SG212968 DB	'SLR', 00H, '1F30', 00H
	ORG $+7
$SG212969 DB	'SLR', 00H, '1F31', 00H
	ORG $+7
$SG212970 DB	'SLR', 00H, '1F32', 00H
	ORG $+7
$SG212971 DB	'SLR', 00H, '1F33', 00H
	ORG $+7
$SG212972 DB	'SLR', 00H, '1F34', 00H
	ORG $+7
$SG212973 DB	'SLR', 00H, '1F35', 00H
	ORG $+7
$SG212974 DB	'SLR', 00H, '1F36', 00H
	ORG $+7
$SG212975 DB	'SLR', 00H, '1F37', 00H
	ORG $+7
$SG212976 DB	'SLR', 00H, '1F38', 00H
	ORG $+7
$SG212977 DB	'SLR', 00H, '1F39', 00H
	ORG $+7
$SG212978 DB	'SLR', 00H, '1F3A', 00H
	ORG $+7
$SG212979 DB	'SLR', 00H, '1F3B', 00H
	ORG $+7
$SG212980 DB	'SLR', 00H, '1F3C', 00H
	ORG $+7
$SG212981 DB	'SLR', 00H, '1F3D', 00H
	ORG $+7
$SG212982 DB	'SLR', 00H, '1F3E', 00H
	ORG $+7
$SG212983 DB	'SLR', 00H, '1F3F', 00H
	ORG $+7
$SG212984 DB	'SLR', 00H, '1F40', 00H
	ORG $+7
$SG212985 DB	'SLR', 00H, '1F41', 00H
	ORG $+7
$SG212986 DB	'SLR', 00H, '1F42', 00H
	ORG $+7
$SG212987 DB	'SLR', 00H, '1F43', 00H
	ORG $+7
$SG212988 DB	'SLR', 00H, '1F44', 00H
	ORG $+7
$SG212989 DB	'SLR', 00H, '1F45', 00H
	ORG $+7
$SG212990 DB	'SLR', 00H, '1F46', 00H
	ORG $+7
$SG212991 DB	'SLR', 00H, '1F47', 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	iprint_router_func
PUBLIC	init_runtime_opcode_tables
PUBLIC	init_regs_runtime_opcode_pointers
PUBLIC	the_real_replace_opcode
PUBLIC	s370_compare_and_swap_and_purge_long
PUBLIC	s370_invalidate_dat_table_entry
PUBLIC	s370_extract_primary_asn_and_instance
PUBLIC	s370_extract_secondary_asn_and_instance
PUBLIC	s370_program_transfer_with_instance
PUBLIC	s370_set_secondary_asn_with_instance
PUBLIC	s370_store_facility_list_extended
PUBLIC	s370_perform_frame_management_function
PUBLIC	s370_perform_topology_function
PUBLIC	s370_load_access_multiple_y
PUBLIC	s370_store_access_multiple_y
PUBLIC	s370_store_clock_fast
PUBLIC	s370_move_with_optional_specifications
PUBLIC	s370_perform_timing_facility_function
PUBLIC	s370_extract_cpu_time
PUBLIC	s370_load_program_parameter
PUBLIC	s370_perform_floating_point_operation
PUBLIC	s370_convert_zoned_to_dfp_long
PUBLIC	s370_convert_zoned_to_dfp_ext
PUBLIC	s370_convert_dfp_long_to_zoned
PUBLIC	s370_convert_dfp_ext_to_zoned
PUBLIC	s370_branch_prediction_preload
PUBLIC	s370_branch_prediction_relative_preload
PUBLIC	s370_next_instruction_access_intent
PUBLIC	s370_load_and_trap
PUBLIC	s370_load_long_and_trap
PUBLIC	s370_load_fullword_high_and_trap
PUBLIC	s370_load_logical_long_fullword_and_trap
PUBLIC	s370_load_logical_long_thirtyone_and_trap
PUBLIC	s370_compare_logical_and_trap
PUBLIC	s370_compare_logical_and_trap_long
PUBLIC	s370_rotate_then_insert_selected_bits_long_reg_n
PUBLIC	s370_perform_processor_assist
PUBLIC	s370_transaction_begin_constrained
PUBLIC	s370_load_halfword_high_immediate_on_condition
PUBLIC	s370_load_halfword_immediate_on_condition
PUBLIC	s370_load_halfword_immediate_on_condition_grande
PUBLIC	s370_load_high_on_condition
PUBLIC	s370_load_high_on_condition_register
PUBLIC	s370_store_high_on_condition
PUBLIC	s370_load_and_zero_rightmost_byte_grande
PUBLIC	s370_load_logical_and_zero_rightmost_byte
PUBLIC	s370_load_and_zero_rightmost_byte
PUBLIC	s370_branch_indirect_on_condition
PUBLIC	s370_add_long_halfword
PUBLIC	s370_subtract_long_halfword
PUBLIC	s370_multiply_long_register
PUBLIC	s370_multiply_long
PUBLIC	s370_multiply_long_halfword
PUBLIC	s370_multiply_single_register_cc
PUBLIC	s370_multiply_single_cc
PUBLIC	s370_multiply_single_long_register_cc
PUBLIC	s370_multiply_single_long_cc
PUBLIC	s370_and_register_with_complement
PUBLIC	s370_and_register_long_with_complement
PUBLIC	s370_nand_register
PUBLIC	s370_nand_register_long
PUBLIC	s370_not_xor_register
PUBLIC	s370_not_xor_register_long
PUBLIC	s370_nor_register
PUBLIC	s370_nor_register_long
PUBLIC	s370_or_register_with_complement
PUBLIC	s370_or_register_long_with_complement
PUBLIC	s370_select_register
PUBLIC	s370_select_register_long
PUBLIC	s370_select_fullword_high_register
PUBLIC	s370_move_right_to_left
PUBLIC	s370_reset_reference_bits_multiple
PUBLIC	s370_extract_coprocessor_group_address
PUBLIC	s370_extract_cpu_counter
PUBLIC	s370_extract_peripheral_counter
PUBLIC	s370_load_cpu_counter_set_controls
PUBLIC	s370_load_peripheral_counter_set_controls
PUBLIC	s370_query_counter_information
PUBLIC	s370_set_cpu_counter
PUBLIC	s370_set_peripheral_counter
PUBLIC	s370_load_sampling_controls
PUBLIC	s370_query_sampling_information
PUBLIC	s370_transaction_begin
PUBLIC	s370_transaction_abort
PUBLIC	s370_transaction_end
PUBLIC	s370_nontransactional_store
PUBLIC	s370_extract_transaction_nesting_depth
PUBLIC	s370_store_hypervisor_information
PUBLIC	s370_convert_packed_to_dfp_long
PUBLIC	s370_convert_packed_to_dfp_ext
PUBLIC	s370_convert_dfp_long_to_packed
PUBLIC	s370_convert_dfp_ext_to_packed
PUBLIC	s370_insert_reference_bits_multiple
PUBLIC	s370_load_bear
PUBLIC	s370_store_bear
PUBLIC	s370_load_program_status_word_extended_y
PUBLIC	s370_copy_access
PUBLIC	s370_extract_access_register
PUBLIC	s370_load_access_multiple
PUBLIC	s370_purge_accesslist_lookaside_buffer
PUBLIC	s370_set_access_register
PUBLIC	s370_store_access_multiple
PUBLIC	s370_test_access
PUBLIC	s370_branch_and_set_authority
PUBLIC	s370_compare_and_swap_and_purge
PUBLIC	s370_cancel_subchannel
PUBLIC	s370_clear_subchannel
PUBLIC	s370_halt_subchannel
PUBLIC	s370_modify_subchannel
PUBLIC	s370_reset_channel_path
PUBLIC	s370_resume_subchannel
PUBLIC	s370_set_address_limit
PUBLIC	s370_set_channel_monitor
PUBLIC	s370_start_subchannel
PUBLIC	s370_store_channel_path_status
PUBLIC	s370_store_channel_report_word
PUBLIC	s370_store_subchannel
PUBLIC	s370_test_pending_interruption
PUBLIC	s370_test_subchannel
PUBLIC	s370_channel_subsystem_call
PUBLIC	s370_load_page_table_entry_address
PUBLIC	s370_page_in
PUBLIC	s370_page_out
PUBLIC	s370_set_clock_programmable_field
PUBLIC	s370_store_clock_extended
PUBLIC	s370_start_interpretive_execution
PUBLIC	s370_test_pending_zone_interrupt
PUBLIC	s370_branch_and_stack
PUBLIC	s370_extract_stacked_registers
PUBLIC	s370_extract_stacked_state
PUBLIC	s370_modify_stacked_state
PUBLIC	s370_program_return
PUBLIC	s370_trap2
PUBLIC	s370_trap4
PUBLIC	s370_lock_page
PUBLIC	s370_move_page
PUBLIC	s370_invalidate_expanded_storage_block_entry
PUBLIC	s370_perform_locked_operation
PUBLIC	s370_set_queue_buffer_state
PUBLIC	s370_extract_queue_buffer_state
PUBLIC	s370_signal_adapter
PUBLIC	s370_store_zone_parameter
PUBLIC	s370_set_zone_parameter
PUBLIC	s370_resume_program
PUBLIC	s370_service_call
PUBLIC	s370_set_address_space_control_fast
PUBLIC	s370_store_cpu_counter_multiple
PUBLIC	s370_branch_in_subspace_group
PUBLIC	s370_set_vector_summary
PUBLIC	s370_extract_and_set_storage_attributes
PUBLIC	s390_compare_and_swap_and_purge_long
PUBLIC	s390_invalidate_dat_table_entry
PUBLIC	s390_extract_primary_asn_and_instance
PUBLIC	s390_extract_secondary_asn_and_instance
PUBLIC	s390_program_transfer_with_instance
PUBLIC	s390_set_secondary_asn_with_instance
PUBLIC	s390_perform_frame_management_function
PUBLIC	s390_perform_topology_function
PUBLIC	s390_add_y
PUBLIC	s390_add_halfword_y
PUBLIC	s390_add_logical_y
PUBLIC	s390_and_immediate_y
PUBLIC	s390_and_y
PUBLIC	s390_compare_y
PUBLIC	s390_compare_and_swap_y
PUBLIC	s390_compare_double_and_swap_y
PUBLIC	s390_compare_halfword_y
PUBLIC	s390_compare_logical_y
PUBLIC	s390_compare_logical_immediate_y
PUBLIC	s390_compare_logical_characters_under_mask_y
PUBLIC	s390_convert_to_binary_y
PUBLIC	s390_convert_to_decimal_y
PUBLIC	s390_exclusive_or_immediate_y
PUBLIC	s390_exclusive_or_y
PUBLIC	s390_insert_character_y
PUBLIC	s390_insert_characters_under_mask_y
PUBLIC	s390_load_y
PUBLIC	s390_load_address_y
PUBLIC	s390_load_byte
PUBLIC	s390_load_byte_long
PUBLIC	s390_load_halfword_y
PUBLIC	s390_load_multiple_y
PUBLIC	s390_load_real_address_y
PUBLIC	s390_move_immediate_y
PUBLIC	s390_multiply_single_y
PUBLIC	s390_or_immediate_y
PUBLIC	s390_or_y
PUBLIC	s390_store_y
PUBLIC	s390_store_character_y
PUBLIC	s390_store_characters_under_mask_y
PUBLIC	s390_store_halfword_y
PUBLIC	s390_store_multiple_y
PUBLIC	s390_subtract_y
PUBLIC	s390_subtract_halfword_y
PUBLIC	s390_subtract_logical_y
PUBLIC	s390_test_under_mask_y
PUBLIC	s390_load_access_multiple_y
PUBLIC	s390_store_access_multiple_y
PUBLIC	s390_load_float_long_y
PUBLIC	s390_load_float_short_y
PUBLIC	s390_store_float_long_y
PUBLIC	s390_store_float_short_y
PUBLIC	s390_add_logical_long_fullword_immediate
PUBLIC	s390_add_long_fullword_immediate
PUBLIC	s390_and_immediate_high_fullword
PUBLIC	s390_and_immediate_low_fullword
PUBLIC	s390_compare_logical_long_fullword_immediate
PUBLIC	s390_compare_long_fullword_immediate
PUBLIC	s390_exclusive_or_immediate_high_fullword
PUBLIC	s390_exclusive_or_immediate_low_fullword
PUBLIC	s390_find_leftmost_one_long_register
PUBLIC	s390_insert_immediate_high_fullword
PUBLIC	s390_insert_immediate_low_fullword
PUBLIC	s390_load_and_test_long
PUBLIC	s390_load_logical_immediate_high_fullword
PUBLIC	s390_load_logical_immediate_low_fullword
PUBLIC	s390_load_logical_long_character_register
PUBLIC	s390_load_logical_long_halfword_register
PUBLIC	s390_load_long_byte_register
PUBLIC	s390_load_long_fullword_immediate
PUBLIC	s390_load_long_halfword_register
PUBLIC	s390_or_immediate_high_fullword
PUBLIC	s390_or_immediate_low_fullword
PUBLIC	s390_subtract_logical_long_fullword_immediate
PUBLIC	s390_multiply_add_unnormal_float_long_to_ext
PUBLIC	s390_multiply_add_unnormal_float_long_to_ext_high
PUBLIC	s390_multiply_add_unnormal_float_long_to_ext_high_reg
PUBLIC	s390_multiply_add_unnormal_float_long_to_ext_low
PUBLIC	s390_multiply_add_unnormal_float_long_to_ext_low_reg
PUBLIC	s390_multiply_add_unnormal_float_long_to_ext_reg
PUBLIC	s390_multiply_unnormal_float_long_to_ext
PUBLIC	s390_multiply_unnormal_float_long_to_ext_high
PUBLIC	s390_multiply_unnormal_float_long_to_ext_high_reg
PUBLIC	s390_multiply_unnormal_float_long_to_ext_low
PUBLIC	s390_multiply_unnormal_float_long_to_ext_low_reg
PUBLIC	s390_multiply_unnormal_float_long_to_ext_reg
PUBLIC	s390_store_clock_fast
PUBLIC	s390_move_with_optional_specifications
PUBLIC	s390_perform_timing_facility_function
PUBLIC	s390_extract_cpu_time
PUBLIC	s390_compare_and_swap_and_store
PUBLIC	s390_compare_and_branch_long_register
PUBLIC	s390_compare_and_branch_relative_long_register
PUBLIC	s390_compare_and_trap_long_register
PUBLIC	s390_compare_halfword_long
PUBLIC	s390_compare_halfword_relative_long_long
PUBLIC	s390_compare_immediate_and_branch_long
PUBLIC	s390_compare_immediate_and_branch_relative_long
PUBLIC	s390_compare_immediate_and_trap_long
PUBLIC	s390_compare_logical_and_branch_long_register
PUBLIC	s390_compare_logical_and_branch_relative_long_register
PUBLIC	s390_compare_logical_and_trap_long_register
PUBLIC	s390_compare_logical_immediate_and_branch_long
PUBLIC	s390_compare_logical_immediate_and_branch_relative_long
PUBLIC	s390_compare_logical_immediate_and_trap_long
PUBLIC	s390_compare_logical_relative_long_long
PUBLIC	s390_compare_logical_relative_long_long_fullword
PUBLIC	s390_compare_logical_relative_long_long_halfword
PUBLIC	s390_compare_relative_long_long
PUBLIC	s390_compare_relative_long_long_fullword
PUBLIC	s390_extract_cpu_attribute
PUBLIC	s390_load_address_extended_y
PUBLIC	s390_load_and_test_long_fullword
PUBLIC	s390_load_halfword_relative_long_long
PUBLIC	s390_load_logical_halfword_relative_long_long
PUBLIC	s390_load_logical_relative_long_long_fullword
PUBLIC	s390_load_relative_long_long
PUBLIC	s390_load_relative_long_long_fullword
PUBLIC	s390_multiply_halfword_y
PUBLIC	s390_multiply_single_immediate_long_fullword
PUBLIC	s390_multiply_y
PUBLIC	s390_rotate_then_and_selected_bits_long_reg
PUBLIC	s390_rotate_then_exclusive_or_selected_bits_long_reg
PUBLIC	s390_rotate_then_insert_selected_bits_long_reg
PUBLIC	s390_rotate_then_or_selected_bits_long_reg
PUBLIC	s390_store_relative_long_long
PUBLIC	s390_convert_bfp_ext_to_u64_reg
PUBLIC	s390_convert_bfp_long_to_u64_reg
PUBLIC	s390_convert_bfp_short_to_u64_reg
PUBLIC	s390_convert_dfp_ext_to_u64_reg
PUBLIC	s390_convert_dfp_long_to_u64_reg
PUBLIC	s390_convert_u64_to_bfp_ext_reg
PUBLIC	s390_convert_u64_to_bfp_long_reg
PUBLIC	s390_convert_u64_to_bfp_short_reg
PUBLIC	s390_convert_u64_to_dfp_ext_reg
PUBLIC	s390_convert_u64_to_dfp_long_reg
PUBLIC	s390_load_program_parameter
PUBLIC	s390_load_fpr_from_gr_long_reg
PUBLIC	s390_load_gr_from_fpr_long_reg
PUBLIC	s390_perform_floating_point_operation
PUBLIC	s390_add_distinct_long_register
PUBLIC	s390_add_distinct_long_halfword_immediate
PUBLIC	s390_add_logical_distinct_long_register
PUBLIC	s390_add_logical_distinct_long_signed_halfword_immediate
PUBLIC	s390_and_distinct_long_register
PUBLIC	s390_exclusive_or_distinct_long_register
PUBLIC	s390_or_distinct_long_register
PUBLIC	s390_subtract_distinct_long_register
PUBLIC	s390_subtract_logical_distinct_long_register
PUBLIC	s390_add_high_high_high_register
PUBLIC	s390_add_high_high_low_register
PUBLIC	s390_add_high_immediate
PUBLIC	s390_add_logical_high_high_high_register
PUBLIC	s390_add_logical_high_high_low_register
PUBLIC	s390_add_logical_with_signed_immediate_high
PUBLIC	s390_add_logical_with_signed_immediate_high_n
PUBLIC	s390_branch_relative_on_count_high
PUBLIC	s390_compare_high_high_register
PUBLIC	s390_compare_high_low_register
PUBLIC	s390_compare_high_fullword
PUBLIC	s390_compare_high_immediate
PUBLIC	s390_compare_logical_high_high_register
PUBLIC	s390_compare_logical_high_low_register
PUBLIC	s390_compare_logical_high_fullword
PUBLIC	s390_compare_logical_high_immediate
PUBLIC	s390_load_byte_high
PUBLIC	s390_load_fullword_high
PUBLIC	s390_load_halfword_high
PUBLIC	s390_load_logical_character_high
PUBLIC	s390_load_logical_halfword_high
PUBLIC	s390_rotate_then_insert_selected_bits_high_long_reg
PUBLIC	s390_rotate_then_insert_selected_bits_low_long_reg
PUBLIC	s390_store_character_high
PUBLIC	s390_store_fullword_high
PUBLIC	s390_store_halfword_high
PUBLIC	s390_subtract_high_high_high_register
PUBLIC	s390_subtract_high_high_low_register
PUBLIC	s390_subtract_logical_high_high_high_register
PUBLIC	s390_subtract_logical_high_high_low_register
PUBLIC	s390_load_and_add_logical_long
PUBLIC	s390_load_and_add_long
PUBLIC	s390_load_and_and_long
PUBLIC	s390_load_and_exclusive_or_long
PUBLIC	s390_load_and_or_long
PUBLIC	s390_load_pair_disjoint_long
PUBLIC	s390_load_on_condition_long_register
PUBLIC	s390_load_on_condition_long
PUBLIC	s390_store_on_condition_long
PUBLIC	s390_population_count
PUBLIC	s390_convert_zoned_to_dfp_long
PUBLIC	s390_convert_zoned_to_dfp_ext
PUBLIC	s390_convert_dfp_long_to_zoned
PUBLIC	s390_convert_dfp_ext_to_zoned
PUBLIC	s390_branch_prediction_preload
PUBLIC	s390_branch_prediction_relative_preload
PUBLIC	s390_next_instruction_access_intent
PUBLIC	s390_load_and_trap
PUBLIC	s390_load_long_and_trap
PUBLIC	s390_load_fullword_high_and_trap
PUBLIC	s390_load_logical_long_fullword_and_trap
PUBLIC	s390_load_logical_long_thirtyone_and_trap
PUBLIC	s390_compare_logical_and_trap
PUBLIC	s390_compare_logical_and_trap_long
PUBLIC	s390_rotate_then_insert_selected_bits_long_reg_n
PUBLIC	s390_perform_processor_assist
PUBLIC	s390_transaction_begin_constrained
PUBLIC	s390_load_halfword_high_immediate_on_condition
PUBLIC	s390_load_halfword_immediate_on_condition
PUBLIC	s390_load_halfword_immediate_on_condition_grande
PUBLIC	s390_load_high_on_condition
PUBLIC	s390_load_high_on_condition_register
PUBLIC	s390_store_high_on_condition
PUBLIC	s390_load_and_zero_rightmost_byte_grande
PUBLIC	s390_load_logical_and_zero_rightmost_byte
PUBLIC	s390_load_and_zero_rightmost_byte
PUBLIC	s390_branch_indirect_on_condition
PUBLIC	s390_add_long_halfword
PUBLIC	s390_subtract_long_halfword
PUBLIC	s390_multiply_long_register
PUBLIC	s390_multiply_long
PUBLIC	s390_multiply_long_halfword
PUBLIC	s390_multiply_single_register_cc
PUBLIC	s390_multiply_single_cc
PUBLIC	s390_multiply_single_long_register_cc
PUBLIC	s390_multiply_single_long_cc
PUBLIC	s390_and_register_with_complement
PUBLIC	s390_and_register_long_with_complement
PUBLIC	s390_nand_register
PUBLIC	s390_nand_register_long
PUBLIC	s390_not_xor_register
PUBLIC	s390_not_xor_register_long
PUBLIC	s390_nor_register
PUBLIC	s390_nor_register_long
PUBLIC	s390_or_register_with_complement
PUBLIC	s390_or_register_long_with_complement
PUBLIC	s390_select_register
PUBLIC	s390_select_register_long
PUBLIC	s390_select_fullword_high_register
PUBLIC	s390_move_right_to_left
PUBLIC	s390_reset_reference_bits_multiple
PUBLIC	s390_extract_coprocessor_group_address
PUBLIC	s390_extract_cpu_counter
PUBLIC	s390_extract_peripheral_counter
PUBLIC	s390_load_cpu_counter_set_controls
PUBLIC	s390_load_peripheral_counter_set_controls
PUBLIC	s390_query_counter_information
PUBLIC	s390_set_cpu_counter
PUBLIC	s390_set_peripheral_counter
PUBLIC	s390_load_sampling_controls
PUBLIC	s390_query_sampling_information
PUBLIC	s390_transaction_begin
PUBLIC	s390_transaction_abort
PUBLIC	s390_transaction_end
PUBLIC	s390_nontransactional_store
PUBLIC	s390_extract_transaction_nesting_depth
PUBLIC	s390_store_hypervisor_information
PUBLIC	s390_convert_packed_to_dfp_long
PUBLIC	s390_convert_packed_to_dfp_ext
PUBLIC	s390_convert_dfp_long_to_packed
PUBLIC	s390_convert_dfp_ext_to_packed
PUBLIC	s390_insert_reference_bits_multiple
PUBLIC	s390_load_bear
PUBLIC	s390_store_bear
PUBLIC	s390_load_program_status_word_extended_y
PUBLIC	s390_insert_storage_key
PUBLIC	s390_reset_reference_bit
PUBLIC	s390_set_storage_key
PUBLIC	s390_connect_channel_set
PUBLIC	s390_disconnect_channel_set
PUBLIC	s390_load_page_table_entry_address
PUBLIC	s390_ecpsvm_basic_freex
PUBLIC	s390_ecpsvm_basic_fretx
PUBLIC	s390_ecpsvm_comm_ccwproc
PUBLIC	s390_ecpsvm_decode_first_ccw
PUBLIC	s390_ecpsvm_decode_next_ccw
PUBLIC	s390_ecpsvm_disp1
PUBLIC	s390_ecpsvm_disp2
PUBLIC	s390_ecpsvm_dispatch_main
PUBLIC	s390_ecpsvm_extended_freex
PUBLIC	s390_ecpsvm_extended_fretx
PUBLIC	s390_ecpsvm_free_ccwstor
PUBLIC	s390_ecpsvm_inval_ptable
PUBLIC	s390_ecpsvm_inval_segtab
PUBLIC	s390_ecpsvm_loc_chgshrpg
PUBLIC	s390_ecpsvm_locate_rblock
PUBLIC	s390_ecpsvm_locate_vblock
PUBLIC	s390_ecpsvm_lock_page
PUBLIC	s390_ecpsvm_prefmach_assist
PUBLIC	s390_ecpsvm_store_level
PUBLIC	s390_ecpsvm_tpage
PUBLIC	s390_ecpsvm_tpage_lock
PUBLIC	s390_ecpsvm_unlock_page
PUBLIC	s390_ecpsvm_unxlate_ccw
PUBLIC	s390_add_logical_carry_long
PUBLIC	s390_add_logical_carry_long_register
PUBLIC	s390_add_logical_long
PUBLIC	s390_add_logical_long_fullword
PUBLIC	s390_add_logical_long_fullword_register
PUBLIC	s390_add_logical_long_register
PUBLIC	s390_add_long
PUBLIC	s390_add_long_fullword
PUBLIC	s390_add_long_fullword_register
PUBLIC	s390_add_long_halfword_immediate
PUBLIC	s390_add_long_register
PUBLIC	s390_and_immediate_high_high
PUBLIC	s390_and_immediate_high_low
PUBLIC	s390_and_immediate_low_high
PUBLIC	s390_and_immediate_low_low
PUBLIC	s390_and_long
PUBLIC	s390_and_long_register
PUBLIC	s390_branch_on_count_long
PUBLIC	s390_branch_on_count_long_register
PUBLIC	s390_branch_on_index_high_long
PUBLIC	s390_branch_on_index_low_or_equal_long
PUBLIC	s390_branch_relative_on_count_long
PUBLIC	s390_branch_relative_on_index_high_long
PUBLIC	s390_branch_relative_on_index_low_or_equal_long
PUBLIC	s390_compare_and_swap_long
PUBLIC	s390_compare_double_and_swap_long
PUBLIC	s390_compare_logical_characters_under_mask_high
PUBLIC	s390_compare_logical_long
PUBLIC	s390_compare_logical_long_fullword
PUBLIC	s390_compare_logical_long_fullword_register
PUBLIC	s390_compare_logical_long_register
PUBLIC	s390_compare_long
PUBLIC	s390_compare_long_fullword
PUBLIC	s390_compare_long_fullword_register
PUBLIC	s390_compare_long_halfword_immediate
PUBLIC	s390_compare_long_register
PUBLIC	s390_convert_fix64_to_float_ext_reg
PUBLIC	s390_convert_fix64_to_float_long_reg
PUBLIC	s390_convert_fix64_to_float_short_reg
PUBLIC	s390_convert_float_ext_to_fix64_reg
PUBLIC	s390_convert_float_long_to_fix64_reg
PUBLIC	s390_convert_float_short_to_fix64_reg
PUBLIC	s390_convert_to_binary_long
PUBLIC	s390_convert_to_decimal_long
PUBLIC	s390_divide_logical_long
PUBLIC	s390_divide_logical_long_register
PUBLIC	s390_divide_single_long
PUBLIC	s390_divide_single_long_fullword
PUBLIC	s390_divide_single_long_fullword_register
PUBLIC	s390_divide_single_long_register
PUBLIC	s390_exclusive_or_long
PUBLIC	s390_exclusive_or_long_register
PUBLIC	s390_extract_and_set_extended_authority
PUBLIC	s390_extract_stacked_registers_long
PUBLIC	s390_insert_characters_under_mask_high
PUBLIC	s390_insert_immediate_high_high
PUBLIC	s390_insert_immediate_high_low
PUBLIC	s390_insert_immediate_low_high
PUBLIC	s390_insert_immediate_low_low
PUBLIC	s390_load_and_test_long_fullword_register
PUBLIC	s390_load_and_test_long_register
PUBLIC	s390_load_complement_long_fullword_register
PUBLIC	s390_load_complement_long_register
PUBLIC	s390_load_control_long
PUBLIC	s390_load_logical_immediate_high_high
PUBLIC	s390_load_logical_immediate_high_low
PUBLIC	s390_load_logical_immediate_low_high
PUBLIC	s390_load_logical_immediate_low_low
PUBLIC	s390_load_logical_long_character
PUBLIC	s390_load_logical_long_fullword
PUBLIC	s390_load_logical_long_fullword_register
PUBLIC	s390_load_logical_long_halfword
PUBLIC	s390_load_logical_long_thirtyone
PUBLIC	s390_load_logical_long_thirtyone_register
PUBLIC	s390_load_long
PUBLIC	s390_load_long_fullword
PUBLIC	s390_load_long_fullword_register
PUBLIC	s390_load_long_halfword
PUBLIC	s390_load_long_halfword_immediate
PUBLIC	s390_load_long_register
PUBLIC	s390_load_multiple_disjoint
PUBLIC	s390_load_multiple_high
PUBLIC	s390_load_multiple_long
PUBLIC	s390_load_negative_long_fullword_register
PUBLIC	s390_load_negative_long_register
PUBLIC	s390_load_pair_from_quadword
PUBLIC	s390_load_positive_long_fullword_register
PUBLIC	s390_load_positive_long_register
PUBLIC	s390_load_program_status_word_extended
PUBLIC	s390_load_real_address_long
PUBLIC	s390_load_reversed_long
PUBLIC	s390_load_reversed_long_register
PUBLIC	s390_load_using_real_address_long
PUBLIC	s390_multiply_logical_long
PUBLIC	s390_multiply_logical_long_register
PUBLIC	s390_multiply_long_halfword_immediate
PUBLIC	s390_multiply_single_long
PUBLIC	s390_multiply_single_long_fullword
PUBLIC	s390_multiply_single_long_fullword_register
PUBLIC	s390_multiply_single_long_register
PUBLIC	s390_or_immediate_high_high
PUBLIC	s390_or_immediate_high_low
PUBLIC	s390_or_immediate_low_high
PUBLIC	s390_or_immediate_low_low
PUBLIC	s390_or_long
PUBLIC	s390_or_long_register
PUBLIC	s390_rotate_left_single_logical_long
PUBLIC	s390_set_addressing_mode_64
PUBLIC	s390_shift_left_single_logical_long
PUBLIC	s390_shift_left_single_long
PUBLIC	s390_shift_right_single_logical_long
PUBLIC	s390_shift_right_single_long
PUBLIC	s390_store_characters_under_mask_high
PUBLIC	s390_store_control_long
PUBLIC	s390_store_long
PUBLIC	s390_store_multiple_high
PUBLIC	s390_store_multiple_long
PUBLIC	s390_store_pair_to_quadword
PUBLIC	s390_store_real_address
PUBLIC	s390_store_reversed_long
PUBLIC	s390_store_using_real_address_long
PUBLIC	s390_subtract_logical_borrow_long
PUBLIC	s390_subtract_logical_borrow_long_register
PUBLIC	s390_subtract_logical_long
PUBLIC	s390_subtract_logical_long_fullword
PUBLIC	s390_subtract_logical_long_fullword_register
PUBLIC	s390_subtract_logical_long_register
PUBLIC	s390_subtract_long
PUBLIC	s390_subtract_long_fullword
PUBLIC	s390_subtract_long_fullword_register
PUBLIC	s390_subtract_long_register
PUBLIC	s390_test_under_mask_high_high
PUBLIC	s390_test_under_mask_high_low
PUBLIC	s390_trace_long
PUBLIC	s390_set_queue_buffer_state
PUBLIC	s390_extract_queue_buffer_state
PUBLIC	s390_start_io
PUBLIC	s390_test_io
PUBLIC	s390_halt_io
PUBLIC	s390_test_channel
PUBLIC	s390_store_channel_id
PUBLIC	s390_store_cpu_counter_multiple
PUBLIC	s390_set_vector_summary
PUBLIC	s390_extract_and_set_storage_attributes
PUBLIC	z900_extract_coprocessor_group_address
PUBLIC	z900_extract_cpu_counter
PUBLIC	z900_extract_peripheral_counter
PUBLIC	z900_load_cpu_counter_set_controls
PUBLIC	z900_load_peripheral_counter_set_controls
PUBLIC	z900_query_counter_information
PUBLIC	z900_set_cpu_counter
PUBLIC	z900_set_peripheral_counter
PUBLIC	z900_load_sampling_controls
PUBLIC	z900_query_sampling_information
PUBLIC	z900_insert_storage_key
PUBLIC	z900_reset_reference_bit
PUBLIC	z900_set_storage_key
PUBLIC	z900_connect_channel_set
PUBLIC	z900_disconnect_channel_set
PUBLIC	z900_ecpsvm_basic_freex
PUBLIC	z900_ecpsvm_basic_fretx
PUBLIC	z900_ecpsvm_comm_ccwproc
PUBLIC	z900_ecpsvm_decode_first_ccw
PUBLIC	z900_ecpsvm_decode_next_ccw
PUBLIC	z900_ecpsvm_disp1
PUBLIC	z900_ecpsvm_disp2
PUBLIC	z900_ecpsvm_dispatch_main
PUBLIC	z900_ecpsvm_extended_freex
PUBLIC	z900_ecpsvm_extended_fretx
PUBLIC	z900_ecpsvm_free_ccwstor
PUBLIC	z900_ecpsvm_inval_ptable
PUBLIC	z900_ecpsvm_inval_segtab
PUBLIC	z900_ecpsvm_loc_chgshrpg
PUBLIC	z900_ecpsvm_locate_rblock
PUBLIC	z900_ecpsvm_locate_vblock
PUBLIC	z900_ecpsvm_lock_page
PUBLIC	z900_ecpsvm_prefmach_assist
PUBLIC	z900_ecpsvm_store_level
PUBLIC	z900_ecpsvm_tpage
PUBLIC	z900_ecpsvm_tpage_lock
PUBLIC	z900_ecpsvm_unlock_page
PUBLIC	z900_ecpsvm_unxlate_ccw
PUBLIC	z900_start_io
PUBLIC	z900_test_io
PUBLIC	z900_halt_io
PUBLIC	z900_test_channel
PUBLIC	z900_store_channel_id
PUBLIC	z900_v_and_to_vmr
PUBLIC	z900_v_clear_vr
PUBLIC	z900_v_complement_vmr
PUBLIC	z900_v_count_left_zeros_in_vmr
PUBLIC	z900_v_count_ones_in_vmr
PUBLIC	z900_v_exclusive_or_to_vmr
PUBLIC	z900_v_extract_vct
PUBLIC	z900_v_extract_vector_modes
PUBLIC	z900_v_load_vct_from_address
PUBLIC	z900_v_load_vix_from_address
PUBLIC	z900_v_load_vmr
PUBLIC	z900_v_load_vmr_complement
PUBLIC	z900_v_or_to_vmr
PUBLIC	z900_v_restore_vac
PUBLIC	z900_v_restore_vmr
PUBLIC	z900_v_restore_vr
PUBLIC	z900_v_restore_vsr
PUBLIC	z900_v_save_changed_vr
PUBLIC	z900_v_save_vac
PUBLIC	z900_v_save_vmr
PUBLIC	z900_v_save_vr
PUBLIC	z900_v_save_vsr
PUBLIC	z900_v_set_vector_mask_mode
PUBLIC	z900_v_store_vector_parameters
PUBLIC	z900_v_store_vmr
PUBLIC	z900_v_test_vmr
PUBLIC	z900_store_cpu_counter_multiple
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	s370_program_interrupt:PROC
EXTRN	s390_program_interrupt:PROC
EXTRN	z900_program_interrupt:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
runtime_opcode_xxxx DQ 030000H DUP (?)
runtime_opcode_e3________xx DQ 0300H DUP (?)
runtime_opcode_e7________xx DQ 0300H DUP (?)
runtime_opcode_eb________xx DQ 0300H DUP (?)
runtime_opcode_ec________xx DQ 0300H DUP (?)
runtime_opcode_ed________xx DQ 0300H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$iprint_router_func DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$iprint_router_func
$pdata$init_runtime_opcode_tables DD imagerel $LN37
	DD	imagerel $LN37+2379
	DD	imagerel $unwind$init_runtime_opcode_tables
$pdata$s370_cipher_message DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_cipher_message
$pdata$s370_cipher_message_with_chaining DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_cipher_message_with_chaining
$pdata$s370_compute_intermediate_message_digest DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_compute_intermediate_message_digest
$pdata$s370_compute_last_message_digest DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_compute_last_message_digest
$pdata$s370_compute_message_authentication_code DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_compute_message_authentication_code
$pdata$s370_perform_cryptographic_key_management_operation DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_perform_cryptographic_key_management_operation
$pdata$s370_perform_cryptographic_computation DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_perform_cryptographic_computation
$pdata$s370_cipher_message_with_cipher_feedback DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_cipher_message_with_cipher_feedback
$pdata$s370_cipher_message_with_output_feedback DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_cipher_message_with_output_feedback
$pdata$s370_cipher_message_with_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_cipher_message_with_counter
$pdata$s370_operation_exception DD imagerel $LN19
	DD	imagerel $LN19+342
	DD	imagerel $unwind$s370_operation_exception
$pdata$the_real_replace_opcode DD imagerel $LN32
	DD	imagerel $LN32+617
	DD	imagerel $unwind$the_real_replace_opcode
$pdata$s370_compare_and_swap_and_purge_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_compare_and_swap_and_purge_long
$pdata$s370_invalidate_dat_table_entry DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_invalidate_dat_table_entry
$pdata$s370_extract_primary_asn_and_instance DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_extract_primary_asn_and_instance
$pdata$s370_extract_secondary_asn_and_instance DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_extract_secondary_asn_and_instance
$pdata$s370_program_transfer_with_instance DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_program_transfer_with_instance
$pdata$s370_set_secondary_asn_with_instance DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_set_secondary_asn_with_instance
$pdata$s370_store_facility_list_extended DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_facility_list_extended
$pdata$s370_perform_frame_management_function DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_perform_frame_management_function
$pdata$s370_perform_topology_function DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_perform_topology_function
$pdata$s370_load_access_multiple_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_access_multiple_y
$pdata$s370_store_access_multiple_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_access_multiple_y
$pdata$s370_store_clock_fast DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_clock_fast
$pdata$s370_move_with_optional_specifications DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_move_with_optional_specifications
$pdata$s370_perform_timing_facility_function DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_perform_timing_facility_function
$pdata$s370_extract_cpu_time DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_extract_cpu_time
$pdata$s370_load_program_parameter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_program_parameter
$pdata$s370_perform_floating_point_operation DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_perform_floating_point_operation
$pdata$s370_convert_zoned_to_dfp_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_convert_zoned_to_dfp_long
$pdata$s370_convert_zoned_to_dfp_ext DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_convert_zoned_to_dfp_ext
$pdata$s370_convert_dfp_long_to_zoned DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_convert_dfp_long_to_zoned
$pdata$s370_convert_dfp_ext_to_zoned DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_convert_dfp_ext_to_zoned
$pdata$s370_branch_prediction_preload DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_branch_prediction_preload
$pdata$s370_branch_prediction_relative_preload DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_branch_prediction_relative_preload
$pdata$s370_next_instruction_access_intent DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_next_instruction_access_intent
$pdata$s370_load_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_and_trap
$pdata$s370_load_long_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_long_and_trap
$pdata$s370_load_fullword_high_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_fullword_high_and_trap
$pdata$s370_load_logical_long_fullword_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_logical_long_fullword_and_trap
$pdata$s370_load_logical_long_thirtyone_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_logical_long_thirtyone_and_trap
$pdata$s370_compare_logical_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_compare_logical_and_trap
$pdata$s370_compare_logical_and_trap_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_compare_logical_and_trap_long
$pdata$s370_rotate_then_insert_selected_bits_long_reg_n DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_rotate_then_insert_selected_bits_long_reg_n
$pdata$s370_perform_processor_assist DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_perform_processor_assist
$pdata$s370_transaction_begin_constrained DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_transaction_begin_constrained
$pdata$s370_load_halfword_high_immediate_on_condition DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_halfword_high_immediate_on_condition
$pdata$s370_load_halfword_immediate_on_condition DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_halfword_immediate_on_condition
$pdata$s370_load_halfword_immediate_on_condition_grande DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_halfword_immediate_on_condition_grande
$pdata$s370_load_high_on_condition DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_high_on_condition
$pdata$s370_load_high_on_condition_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_high_on_condition_register
$pdata$s370_store_high_on_condition DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_high_on_condition
$pdata$s370_load_and_zero_rightmost_byte_grande DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_and_zero_rightmost_byte_grande
$pdata$s370_load_logical_and_zero_rightmost_byte DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_logical_and_zero_rightmost_byte
$pdata$s370_load_and_zero_rightmost_byte DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_and_zero_rightmost_byte
$pdata$s370_branch_indirect_on_condition DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_branch_indirect_on_condition
$pdata$s370_add_long_halfword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_add_long_halfword
$pdata$s370_subtract_long_halfword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_subtract_long_halfword
$pdata$s370_multiply_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_multiply_long_register
$pdata$s370_multiply_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_multiply_long
$pdata$s370_multiply_long_halfword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_multiply_long_halfword
$pdata$s370_multiply_single_register_cc DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_multiply_single_register_cc
$pdata$s370_multiply_single_cc DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_multiply_single_cc
$pdata$s370_multiply_single_long_register_cc DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_multiply_single_long_register_cc
$pdata$s370_multiply_single_long_cc DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_multiply_single_long_cc
$pdata$s370_and_register_with_complement DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_and_register_with_complement
$pdata$s370_and_register_long_with_complement DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_and_register_long_with_complement
$pdata$s370_nand_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_nand_register
$pdata$s370_nand_register_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_nand_register_long
$pdata$s370_not_xor_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_not_xor_register
$pdata$s370_not_xor_register_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_not_xor_register_long
$pdata$s370_nor_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_nor_register
$pdata$s370_nor_register_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_nor_register_long
$pdata$s370_or_register_with_complement DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_or_register_with_complement
$pdata$s370_or_register_long_with_complement DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_or_register_long_with_complement
$pdata$s370_select_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_select_register
$pdata$s370_select_register_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_select_register_long
$pdata$s370_select_fullword_high_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_select_fullword_high_register
$pdata$s370_move_right_to_left DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_move_right_to_left
$pdata$s370_reset_reference_bits_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_reset_reference_bits_multiple
$pdata$s370_extract_coprocessor_group_address DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_extract_coprocessor_group_address
$pdata$s370_extract_cpu_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_extract_cpu_counter
$pdata$s370_extract_peripheral_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_extract_peripheral_counter
$pdata$s370_load_cpu_counter_set_controls DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_cpu_counter_set_controls
$pdata$s370_load_peripheral_counter_set_controls DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_peripheral_counter_set_controls
$pdata$s370_query_counter_information DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_query_counter_information
$pdata$s370_set_cpu_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_set_cpu_counter
$pdata$s370_set_peripheral_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_set_peripheral_counter
$pdata$s370_load_sampling_controls DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_sampling_controls
$pdata$s370_query_sampling_information DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_query_sampling_information
$pdata$s370_transaction_begin DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_transaction_begin
$pdata$s370_transaction_abort DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_transaction_abort
$pdata$s370_transaction_end DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_transaction_end
$pdata$s370_nontransactional_store DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_nontransactional_store
$pdata$s370_extract_transaction_nesting_depth DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_extract_transaction_nesting_depth
$pdata$s370_store_hypervisor_information DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_hypervisor_information
$pdata$s370_convert_packed_to_dfp_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_convert_packed_to_dfp_long
$pdata$s370_convert_packed_to_dfp_ext DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_convert_packed_to_dfp_ext
$pdata$s370_convert_dfp_long_to_packed DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_convert_dfp_long_to_packed
$pdata$s370_convert_dfp_ext_to_packed DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_convert_dfp_ext_to_packed
$pdata$s370_vector_load DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_vector_load
$pdata$s370_vector_store DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_vector_store
$pdata$s370_vector_load_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_vector_load_multiple
$pdata$s370_vector_store_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_vector_store_multiple
$pdata$s370_insert_reference_bits_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_insert_reference_bits_multiple
$pdata$s370_load_bear DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_bear
$pdata$s370_store_bear DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_bear
$pdata$s370_load_program_status_word_extended_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_program_status_word_extended_y
$pdata$s370_copy_access DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_copy_access
$pdata$s370_extract_access_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_extract_access_register
$pdata$s370_load_access_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_access_multiple
$pdata$s370_purge_accesslist_lookaside_buffer DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_purge_accesslist_lookaside_buffer
$pdata$s370_set_access_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_set_access_register
$pdata$s370_store_access_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_access_multiple
$pdata$s370_test_access DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_test_access
$pdata$s370_branch_and_set_authority DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_branch_and_set_authority
$pdata$s370_compare_and_swap_and_purge DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_compare_and_swap_and_purge
$pdata$s370_cancel_subchannel DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_cancel_subchannel
$pdata$s370_clear_subchannel DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_clear_subchannel
$pdata$s370_halt_subchannel DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_halt_subchannel
$pdata$s370_modify_subchannel DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_modify_subchannel
$pdata$s370_reset_channel_path DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_reset_channel_path
$pdata$s370_resume_subchannel DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_resume_subchannel
$pdata$s370_set_address_limit DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_set_address_limit
$pdata$s370_set_channel_monitor DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_set_channel_monitor
$pdata$s370_start_subchannel DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_start_subchannel
$pdata$s370_store_channel_path_status DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_channel_path_status
$pdata$s370_store_channel_report_word DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_channel_report_word
$pdata$s370_store_subchannel DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_subchannel
$pdata$s370_test_pending_interruption DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_test_pending_interruption
$pdata$s370_test_subchannel DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_test_subchannel
$pdata$s370_channel_subsystem_call DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_channel_subsystem_call
$pdata$s370_load_page_table_entry_address DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_page_table_entry_address
$pdata$s370_page_in DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_page_in
$pdata$s370_page_out DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_page_out
$pdata$s370_set_clock_programmable_field DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_set_clock_programmable_field
$pdata$s370_store_clock_extended DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_clock_extended
$pdata$s370_convert_bfp_long_to_float_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_convert_bfp_long_to_float_long_reg
$pdata$s370_convert_bfp_short_to_float_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_convert_bfp_short_to_float_long_reg
$pdata$s370_convert_float_long_to_bfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_convert_float_long_to_bfp_long_reg
$pdata$s370_convert_float_long_to_bfp_short_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_convert_float_long_to_bfp_short_reg
$pdata$s370_load_float_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_float_ext_reg
$pdata$s370_load_zero_float_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_zero_float_ext_reg
$pdata$s370_load_zero_float_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_zero_float_long_reg
$pdata$s370_load_zero_float_short_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_load_zero_float_short_reg
$pdata$s370_start_interpretive_execution DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_start_interpretive_execution
$pdata$s370_test_pending_zone_interrupt DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_test_pending_zone_interrupt
$pdata$s370_branch_and_stack DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_branch_and_stack
$pdata$s370_extract_stacked_registers DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_extract_stacked_registers
$pdata$s370_extract_stacked_state DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_extract_stacked_state
$pdata$s370_modify_stacked_state DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_modify_stacked_state
$pdata$s370_program_return DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_program_return
$pdata$s370_trap2 DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_trap2
$pdata$s370_trap4 DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_trap4
$pdata$s370_lock_page DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_lock_page
$pdata$s370_move_page DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_move_page
$pdata$s370_invalidate_expanded_storage_block_entry DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_invalidate_expanded_storage_block_entry
$pdata$s370_perform_locked_operation DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_perform_locked_operation
$pdata$s370_set_queue_buffer_state DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_set_queue_buffer_state
$pdata$s370_extract_queue_buffer_state DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_extract_queue_buffer_state
$pdata$s370_signal_adapter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_signal_adapter
$pdata$s370_store_zone_parameter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_zone_parameter
$pdata$s370_set_zone_parameter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_set_zone_parameter
$pdata$s370_resume_program DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_resume_program
$pdata$s370_v_and_to_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_and_to_vmr
$pdata$s370_v_clear_vr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_clear_vr
$pdata$s370_v_complement_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_complement_vmr
$pdata$s370_v_count_left_zeros_in_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_count_left_zeros_in_vmr
$pdata$s370_v_count_ones_in_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_count_ones_in_vmr
$pdata$s370_v_exclusive_or_to_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_exclusive_or_to_vmr
$pdata$s370_v_extract_vct DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_extract_vct
$pdata$s370_v_extract_vector_modes DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_extract_vector_modes
$pdata$s370_v_load_vct_from_address DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_load_vct_from_address
$pdata$s370_v_load_vix_from_address DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_load_vix_from_address
$pdata$s370_v_load_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_load_vmr
$pdata$s370_v_load_vmr_complement DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_load_vmr_complement
$pdata$s370_v_or_to_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_or_to_vmr
$pdata$s370_v_restore_vac DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_restore_vac
$pdata$s370_v_restore_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_restore_vmr
$pdata$s370_v_restore_vr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_restore_vr
$pdata$s370_v_restore_vsr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_restore_vsr
$pdata$s370_v_save_changed_vr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_save_changed_vr
$pdata$s370_v_save_vac DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_save_vac
$pdata$s370_v_save_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_save_vmr
$pdata$s370_v_save_vr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_save_vr
$pdata$s370_v_save_vsr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_save_vsr
$pdata$s370_v_set_vector_mask_mode DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_set_vector_mask_mode
$pdata$s370_v_store_vector_parameters DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_store_vector_parameters
$pdata$s370_v_store_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_store_vmr
$pdata$s370_v_test_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_v_test_vmr
$pdata$s370_service_call DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_service_call
$pdata$s370_set_address_space_control_fast DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_set_address_space_control_fast
$pdata$s370_store_cpu_counter_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_cpu_counter_multiple
$pdata$s370_store_system_information DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_store_system_information
$pdata$s370_branch_in_subspace_group DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_branch_in_subspace_group
$pdata$s370_set_vector_summary DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_set_vector_summary
$pdata$s370_extract_and_set_storage_attributes DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s370_extract_and_set_storage_attributes
$pdata$s370_execute_opcode_e3________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$s370_execute_opcode_e3________xx
$pdata$s370_execute_opcode_e7________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$s370_execute_opcode_e7________xx
$pdata$s370_execute_opcode_eb________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$s370_execute_opcode_eb________xx
$pdata$s370_execute_opcode_ec________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$s370_execute_opcode_ec________xx
$pdata$s370_execute_opcode_ed________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$s370_execute_opcode_ed________xx
$pdata$operation_exception DD imagerel operation_exception
	DD	imagerel operation_exception+348
	DD	imagerel $unwind$operation_exception
$pdata$iprint_ASMFMT_none DD imagerel iprint_ASMFMT_none
	DD	imagerel iprint_ASMFMT_none+203
	DD	imagerel $unwind$iprint_ASMFMT_none
$pdata$iprint_ASMFMT_E DD imagerel iprint_ASMFMT_E
	DD	imagerel iprint_ASMFMT_E+203
	DD	imagerel $unwind$iprint_ASMFMT_E
$pdata$iprint_ASMFMT_IE DD imagerel iprint_ASMFMT_IE
	DD	imagerel iprint_ASMFMT_IE+260
	DD	imagerel $unwind$iprint_ASMFMT_IE
$pdata$iprint_ASMFMT_MII_A DD imagerel iprint_ASMFMT_MII_A
	DD	imagerel iprint_ASMFMT_MII_A+393
	DD	imagerel $unwind$iprint_ASMFMT_MII_A
$pdata$iprint_ASMFMT_RR DD imagerel iprint_ASMFMT_RR
	DD	imagerel iprint_ASMFMT_RR+260
	DD	imagerel $unwind$iprint_ASMFMT_RR
$pdata$iprint_ASMFMT_RR_R1 DD imagerel iprint_ASMFMT_RR_R1
	DD	imagerel iprint_ASMFMT_RR_R1+224
	DD	imagerel $unwind$iprint_ASMFMT_RR_R1
$pdata$iprint_ASMFMT_RR_SVC DD imagerel iprint_ASMFMT_RR_SVC
	DD	imagerel iprint_ASMFMT_RR_SVC+215
	DD	imagerel $unwind$iprint_ASMFMT_RR_SVC
$pdata$iprint_ASMFMT_RRE DD imagerel iprint_ASMFMT_RRE
	DD	imagerel iprint_ASMFMT_RRE+260
	DD	imagerel $unwind$iprint_ASMFMT_RRE
$pdata$iprint_ASMFMT_RRE_R1 DD imagerel iprint_ASMFMT_RRE_R1
	DD	imagerel iprint_ASMFMT_RRE_R1+224
	DD	imagerel $unwind$iprint_ASMFMT_RRE_R1
$pdata$iprint_ASMFMT_RRF_R DD imagerel iprint_ASMFMT_RRF_R
	DD	imagerel iprint_ASMFMT_RRF_R+296
	DD	imagerel $unwind$iprint_ASMFMT_RRF_R
$pdata$iprint_ASMFMT_RRF_M DD imagerel iprint_ASMFMT_RRF_M
	DD	imagerel iprint_ASMFMT_RRF_M+296
	DD	imagerel $unwind$iprint_ASMFMT_RRF_M
$pdata$iprint_ASMFMT_RRF_M3 DD imagerel iprint_ASMFMT_RRF_M3
	DD	imagerel iprint_ASMFMT_RRF_M3+296
	DD	imagerel $unwind$iprint_ASMFMT_RRF_M3
$pdata$iprint_ASMFMT_RRF_M4 DD imagerel iprint_ASMFMT_RRF_M4
	DD	imagerel iprint_ASMFMT_RRF_M4+296
	DD	imagerel $unwind$iprint_ASMFMT_RRF_M4
$pdata$iprint_ASMFMT_RRF_MM DD imagerel iprint_ASMFMT_RRF_MM
	DD	imagerel iprint_ASMFMT_RRF_MM+332
	DD	imagerel $unwind$iprint_ASMFMT_RRF_MM
$pdata$iprint_ASMFMT_RRF_RM DD imagerel iprint_ASMFMT_RRF_RM
	DD	imagerel iprint_ASMFMT_RRF_RM+332
	DD	imagerel $unwind$iprint_ASMFMT_RRF_RM
$pdata$iprint_ASMFMT_RRR DD imagerel iprint_ASMFMT_RRR
	DD	imagerel iprint_ASMFMT_RRR+296
	DD	imagerel $unwind$iprint_ASMFMT_RRR
$pdata$iprint_ASMFMT_RRF_A DD imagerel iprint_ASMFMT_RRF_A
	DD	imagerel iprint_ASMFMT_RRF_A+332
	DD	imagerel $unwind$iprint_ASMFMT_RRF_A
$pdata$iprint_ASMFMT_RX DD imagerel iprint_ASMFMT_RX
	DD	imagerel iprint_ASMFMT_RX+358
	DD	imagerel $unwind$iprint_ASMFMT_RX
$pdata$iprint_ASMFMT_RXE DD imagerel iprint_ASMFMT_RXE
	DD	imagerel iprint_ASMFMT_RXE+358
	DD	imagerel $unwind$iprint_ASMFMT_RXE
$pdata$iprint_ASMFMT_RXY DD imagerel iprint_ASMFMT_RXY
	DD	imagerel iprint_ASMFMT_RXY+384
	DD	imagerel $unwind$iprint_ASMFMT_RXY
$pdata$iprint_ASMFMT_RXF DD imagerel iprint_ASMFMT_RXF
	DD	imagerel iprint_ASMFMT_RXF+394
	DD	imagerel $unwind$iprint_ASMFMT_RXF
$pdata$iprint_ASMFMT_RS DD imagerel iprint_ASMFMT_RS
	DD	imagerel iprint_ASMFMT_RS+358
	DD	imagerel $unwind$iprint_ASMFMT_RS
$pdata$iprint_ASMFMT_RS_R1D2B2 DD imagerel iprint_ASMFMT_RS_R1D2B2
	DD	imagerel iprint_ASMFMT_RS_R1D2B2+322
	DD	imagerel $unwind$iprint_ASMFMT_RS_R1D2B2
$pdata$iprint_ASMFMT_RSY DD imagerel iprint_ASMFMT_RSY
	DD	imagerel iprint_ASMFMT_RSY+384
	DD	imagerel $unwind$iprint_ASMFMT_RSY
$pdata$iprint_ASMFMT_RSY_M3 DD imagerel iprint_ASMFMT_RSY_M3
	DD	imagerel iprint_ASMFMT_RSY_M3+384
	DD	imagerel $unwind$iprint_ASMFMT_RSY_M3
$pdata$iprint_ASMFMT_RSL DD imagerel iprint_ASMFMT_RSL
	DD	imagerel iprint_ASMFMT_RSL+324
	DD	imagerel $unwind$iprint_ASMFMT_RSL
$pdata$iprint_ASMFMT_RSL_RM DD imagerel iprint_ASMFMT_RSL_RM
	DD	imagerel iprint_ASMFMT_RSL_RM+393
	DD	imagerel $unwind$iprint_ASMFMT_RSL_RM
$pdata$iprint_ASMFMT_RSI DD imagerel iprint_ASMFMT_RSI
	DD	imagerel iprint_ASMFMT_RSI+322
	DD	imagerel $unwind$iprint_ASMFMT_RSI
$pdata$iprint_ASMFMT_RI DD imagerel iprint_ASMFMT_RI
	DD	imagerel iprint_ASMFMT_RI+284
	DD	imagerel $unwind$iprint_ASMFMT_RI
$pdata$iprint_ASMFMT_RI_B DD imagerel iprint_ASMFMT_RI_B
	DD	imagerel iprint_ASMFMT_RI_B+286
	DD	imagerel $unwind$iprint_ASMFMT_RI_B
$pdata$iprint_ASMFMT_RIE DD imagerel iprint_ASMFMT_RIE
	DD	imagerel iprint_ASMFMT_RIE+322
	DD	imagerel $unwind$iprint_ASMFMT_RIE
$pdata$iprint_ASMFMT_RIE_G DD imagerel iprint_ASMFMT_RIE_G
	DD	imagerel iprint_ASMFMT_RIE_G+320
	DD	imagerel $unwind$iprint_ASMFMT_RIE_G
$pdata$iprint_ASMFMT_RIE_RRI DD imagerel iprint_ASMFMT_RIE_RRI
	DD	imagerel iprint_ASMFMT_RIE_RRI+320
	DD	imagerel $unwind$iprint_ASMFMT_RIE_RRI
$pdata$iprint_ASMFMT_RIE_RIM DD imagerel iprint_ASMFMT_RIE_RIM
	DD	imagerel iprint_ASMFMT_RIE_RIM+320
	DD	imagerel $unwind$iprint_ASMFMT_RIE_RIM
$pdata$iprint_ASMFMT_RIE_RRIM DD imagerel iprint_ASMFMT_RIE_RRIM
	DD	imagerel iprint_ASMFMT_RIE_RRIM+358
	DD	imagerel $unwind$iprint_ASMFMT_RIE_RRIM
$pdata$iprint_ASMFMT_RIE_RMII DD imagerel iprint_ASMFMT_RIE_RMII
	DD	imagerel iprint_ASMFMT_RIE_RMII+355
	DD	imagerel $unwind$iprint_ASMFMT_RIE_RMII
$pdata$iprint_ASMFMT_RIE_RRIII DD imagerel iprint_ASMFMT_RIE_RRIII
	DD	imagerel iprint_ASMFMT_RIE_RRIII+359
	DD	imagerel $unwind$iprint_ASMFMT_RIE_RRIII
$pdata$iprint_ASMFMT_RIL DD imagerel iprint_ASMFMT_RIL
	DD	imagerel iprint_ASMFMT_RIL+335
	DD	imagerel $unwind$iprint_ASMFMT_RIL
$pdata$iprint_ASMFMT_RIL_A DD imagerel iprint_ASMFMT_RIL_A
	DD	imagerel iprint_ASMFMT_RIL_A+352
	DD	imagerel $unwind$iprint_ASMFMT_RIL_A
$pdata$iprint_ASMFMT_RIS DD imagerel iprint_ASMFMT_RIS
	DD	imagerel iprint_ASMFMT_RIS+391
	DD	imagerel $unwind$iprint_ASMFMT_RIS
$pdata$iprint_ASMFMT_RRS DD imagerel iprint_ASMFMT_RRS
	DD	imagerel iprint_ASMFMT_RRS+394
	DD	imagerel $unwind$iprint_ASMFMT_RRS
$pdata$iprint_ASMFMT_SI DD imagerel iprint_ASMFMT_SI
	DD	imagerel iprint_ASMFMT_SI+319
	DD	imagerel $unwind$iprint_ASMFMT_SI
$pdata$iprint_ASMFMT_SIY DD imagerel iprint_ASMFMT_SIY
	DD	imagerel iprint_ASMFMT_SIY+345
	DD	imagerel $unwind$iprint_ASMFMT_SIY
$pdata$iprint_ASMFMT_SIL DD imagerel iprint_ASMFMT_SIL
	DD	imagerel iprint_ASMFMT_SIL+346
	DD	imagerel $unwind$iprint_ASMFMT_SIL
$pdata$iprint_ASMFMT_SMI_A DD imagerel iprint_ASMFMT_SMI_A
	DD	imagerel iprint_ASMFMT_SMI_A+398
	DD	imagerel $unwind$iprint_ASMFMT_SMI_A
$pdata$iprint_ASMFMT_S DD imagerel iprint_ASMFMT_S
	DD	imagerel iprint_ASMFMT_S+286
	DD	imagerel $unwind$iprint_ASMFMT_S
$pdata$iprint_ASMFMT_SS DD imagerel iprint_ASMFMT_SS
	DD	imagerel iprint_ASMFMT_SS+466
	DD	imagerel $unwind$iprint_ASMFMT_SS
$pdata$iprint_ASMFMT_SS_L DD imagerel iprint_ASMFMT_SS_L
	DD	imagerel iprint_ASMFMT_SS_L+419
	DD	imagerel $unwind$iprint_ASMFMT_SS_L
$pdata$iprint_ASMFMT_SS_L2 DD imagerel iprint_ASMFMT_SS_L2
	DD	imagerel iprint_ASMFMT_SS_L2+419
	DD	imagerel $unwind$iprint_ASMFMT_SS_L2
$pdata$iprint_ASMFMT_SS_R DD imagerel iprint_ASMFMT_SS_R
	DD	imagerel iprint_ASMFMT_SS_R+462
	DD	imagerel $unwind$iprint_ASMFMT_SS_R
$pdata$iprint_ASMFMT_SS_R3 DD imagerel iprint_ASMFMT_SS_R3
	DD	imagerel iprint_ASMFMT_SS_R3+462
	DD	imagerel $unwind$iprint_ASMFMT_SS_R3
$pdata$iprint_ASMFMT_SS_RSRS DD imagerel iprint_ASMFMT_SS_RSRS
	DD	imagerel iprint_ASMFMT_SS_RSRS+462
	DD	imagerel $unwind$iprint_ASMFMT_SS_RSRS
$pdata$iprint_ASMFMT_SS_I DD imagerel iprint_ASMFMT_SS_I
	DD	imagerel iprint_ASMFMT_SS_I+462
	DD	imagerel $unwind$iprint_ASMFMT_SS_I
$pdata$iprint_ASMFMT_SSE DD imagerel iprint_ASMFMT_SSE
	DD	imagerel iprint_ASMFMT_SSE+384
	DD	imagerel $unwind$iprint_ASMFMT_SSE
$pdata$iprint_ASMFMT_SSF DD imagerel iprint_ASMFMT_SSF
	DD	imagerel iprint_ASMFMT_SSF+420
	DD	imagerel $unwind$iprint_ASMFMT_SSF
$pdata$iprint_ASMFMT_SSF_RSS DD imagerel iprint_ASMFMT_SSF_RSS
	DD	imagerel iprint_ASMFMT_SSF_RSS+420
	DD	imagerel $unwind$iprint_ASMFMT_SSF_RSS
$pdata$iprint_ASMFMT_VS DD imagerel iprint_ASMFMT_VS
	DD	imagerel iprint_ASMFMT_VS+224
	DD	imagerel $unwind$iprint_ASMFMT_VS
$pdata$iprint_ASMFMT_VRX DD imagerel iprint_ASMFMT_VRX
	DD	imagerel iprint_ASMFMT_VRX+425
	DD	imagerel $unwind$iprint_ASMFMT_VRX
$pdata$iprint_ASMFMT_VRS_A DD imagerel iprint_ASMFMT_VRS_A
	DD	imagerel iprint_ASMFMT_VRS_A+454
	DD	imagerel $unwind$iprint_ASMFMT_VRS_A
$pdata$s390_cipher_message DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_cipher_message
$pdata$s390_cipher_message_with_chaining DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_cipher_message_with_chaining
$pdata$s390_compute_intermediate_message_digest DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compute_intermediate_message_digest
$pdata$s390_compute_last_message_digest DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compute_last_message_digest
$pdata$s390_compute_message_authentication_code DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compute_message_authentication_code
$pdata$s390_operation_exception DD imagerel $LN19
	DD	imagerel $LN19+342
	DD	imagerel $unwind$s390_operation_exception
$pdata$s390_compare_and_swap_and_purge_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_and_swap_and_purge_long
$pdata$s390_invalidate_dat_table_entry DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_invalidate_dat_table_entry
$pdata$s390_extract_primary_asn_and_instance DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_primary_asn_and_instance
$pdata$s390_extract_secondary_asn_and_instance DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_secondary_asn_and_instance
$pdata$s390_program_transfer_with_instance DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_program_transfer_with_instance
$pdata$s390_set_secondary_asn_with_instance DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_set_secondary_asn_with_instance
$pdata$s390_perform_frame_management_function DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_perform_frame_management_function
$pdata$s390_perform_topology_function DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_perform_topology_function
$pdata$s390_add_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_y
$pdata$s390_add_halfword_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_halfword_y
$pdata$s390_add_logical_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_y
$pdata$s390_and_immediate_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_immediate_y
$pdata$s390_and_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_y
$pdata$s390_compare_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_y
$pdata$s390_compare_and_swap_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_and_swap_y
$pdata$s390_compare_double_and_swap_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_double_and_swap_y
$pdata$s390_compare_halfword_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_halfword_y
$pdata$s390_compare_logical_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_y
$pdata$s390_compare_logical_immediate_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_immediate_y
$pdata$s390_compare_logical_characters_under_mask_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_characters_under_mask_y
$pdata$s390_convert_to_binary_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_to_binary_y
$pdata$s390_convert_to_decimal_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_to_decimal_y
$pdata$s390_exclusive_or_immediate_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_exclusive_or_immediate_y
$pdata$s390_exclusive_or_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_exclusive_or_y
$pdata$s390_insert_character_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_character_y
$pdata$s390_insert_characters_under_mask_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_characters_under_mask_y
$pdata$s390_load_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_y
$pdata$s390_load_address_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_address_y
$pdata$s390_load_byte DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_byte
$pdata$s390_load_byte_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_byte_long
$pdata$s390_load_halfword_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_halfword_y
$pdata$s390_load_multiple_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_multiple_y
$pdata$s390_load_real_address_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_real_address_y
$pdata$s390_move_immediate_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_move_immediate_y
$pdata$s390_multiply_single_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_single_y
$pdata$s390_or_immediate_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_immediate_y
$pdata$s390_or_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_y
$pdata$s390_store_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_y
$pdata$s390_store_character_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_character_y
$pdata$s390_store_characters_under_mask_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_characters_under_mask_y
$pdata$s390_store_halfword_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_halfword_y
$pdata$s390_store_multiple_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_multiple_y
$pdata$s390_subtract_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_y
$pdata$s390_subtract_halfword_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_halfword_y
$pdata$s390_subtract_logical_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_y
$pdata$s390_test_under_mask_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_test_under_mask_y
$pdata$s390_load_access_multiple_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_access_multiple_y
$pdata$s390_store_access_multiple_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_access_multiple_y
$pdata$s390_load_float_long_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_float_long_y
$pdata$s390_load_float_short_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_float_short_y
$pdata$s390_store_float_long_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_float_long_y
$pdata$s390_store_float_short_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_float_short_y
$pdata$s390_add_fullword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_fullword_immediate
$pdata$s390_add_logical_fullword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_fullword_immediate
$pdata$s390_add_logical_long_fullword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_long_fullword_immediate
$pdata$s390_add_long_fullword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_long_fullword_immediate
$pdata$s390_and_immediate_high_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_immediate_high_fullword
$pdata$s390_and_immediate_low_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_immediate_low_fullword
$pdata$s390_compare_fullword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_fullword_immediate
$pdata$s390_compare_logical_fullword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_fullword_immediate
$pdata$s390_compare_logical_long_fullword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_long_fullword_immediate
$pdata$s390_compare_long_fullword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_long_fullword_immediate
$pdata$s390_exclusive_or_immediate_high_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_exclusive_or_immediate_high_fullword
$pdata$s390_exclusive_or_immediate_low_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_exclusive_or_immediate_low_fullword
$pdata$s390_find_leftmost_one_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_find_leftmost_one_long_register
$pdata$s390_insert_immediate_high_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_immediate_high_fullword
$pdata$s390_insert_immediate_low_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_immediate_low_fullword
$pdata$s390_load_and_test DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_test
$pdata$s390_load_and_test_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_test_long
$pdata$s390_load_byte_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_byte_register
$pdata$s390_load_halfword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_halfword_register
$pdata$s390_load_logical_character DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_character
$pdata$s390_load_logical_character_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_character_register
$pdata$s390_load_logical_halfword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_halfword
$pdata$s390_load_logical_halfword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_halfword_register
$pdata$s390_load_logical_immediate_high_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_immediate_high_fullword
$pdata$s390_load_logical_immediate_low_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_immediate_low_fullword
$pdata$s390_load_logical_long_character_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_long_character_register
$pdata$s390_load_logical_long_halfword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_long_halfword_register
$pdata$s390_load_long_byte_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_long_byte_register
$pdata$s390_load_long_fullword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_long_fullword_immediate
$pdata$s390_load_long_halfword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_long_halfword_register
$pdata$s390_or_immediate_high_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_immediate_high_fullword
$pdata$s390_or_immediate_low_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_immediate_low_fullword
$pdata$s390_subtract_logical_fullword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_fullword_immediate
$pdata$s390_subtract_logical_long_fullword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_long_fullword_immediate
$pdata$s390_convert_utf16_to_utf32 DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_utf16_to_utf32
$pdata$s390_convert_utf32_to_utf16 DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_utf32_to_utf16
$pdata$s390_convert_utf32_to_utf8 DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_utf32_to_utf8
$pdata$s390_convert_utf8_to_utf32 DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_utf8_to_utf32
$pdata$s390_search_string_unicode DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_search_string_unicode
$pdata$s390_translate_and_test_reverse DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_translate_and_test_reverse
$pdata$s390_multiply_add_unnormal_float_long_to_ext DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_add_unnormal_float_long_to_ext
$pdata$s390_multiply_add_unnormal_float_long_to_ext_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_add_unnormal_float_long_to_ext_high
$pdata$s390_multiply_add_unnormal_float_long_to_ext_high_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_add_unnormal_float_long_to_ext_high_reg
$pdata$s390_multiply_add_unnormal_float_long_to_ext_low DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_add_unnormal_float_long_to_ext_low
$pdata$s390_multiply_add_unnormal_float_long_to_ext_low_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_add_unnormal_float_long_to_ext_low_reg
$pdata$s390_multiply_add_unnormal_float_long_to_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_add_unnormal_float_long_to_ext_reg
$pdata$s390_multiply_unnormal_float_long_to_ext DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_unnormal_float_long_to_ext
$pdata$s390_multiply_unnormal_float_long_to_ext_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_unnormal_float_long_to_ext_high
$pdata$s390_multiply_unnormal_float_long_to_ext_high_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_unnormal_float_long_to_ext_high_reg
$pdata$s390_multiply_unnormal_float_long_to_ext_low DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_unnormal_float_long_to_ext_low
$pdata$s390_multiply_unnormal_float_long_to_ext_low_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_unnormal_float_long_to_ext_low_reg
$pdata$s390_multiply_unnormal_float_long_to_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_unnormal_float_long_to_ext_reg
$pdata$s390_store_clock_fast DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_clock_fast
$pdata$s390_translate_and_test_extended DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_translate_and_test_extended
$pdata$s390_translate_and_test_reverse_extended DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_translate_and_test_reverse_extended
$pdata$s390_move_with_optional_specifications DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_move_with_optional_specifications
$pdata$s390_perform_timing_facility_function DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_perform_timing_facility_function
$pdata$s390_extract_cpu_time DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_cpu_time
$pdata$s390_compare_and_swap_and_store DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_and_swap_and_store
$pdata$s390_add_immediate_long_storage DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_immediate_long_storage
$pdata$s390_add_immediate_storage DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_immediate_storage
$pdata$s390_add_logical_with_signed_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_with_signed_immediate
$pdata$s390_add_logical_with_signed_immediate_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_with_signed_immediate_long
$pdata$s390_compare_and_branch_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_and_branch_register
$pdata$s390_compare_and_branch_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_and_branch_long_register
$pdata$s390_compare_and_branch_relative_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_and_branch_relative_register
$pdata$s390_compare_and_branch_relative_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_and_branch_relative_long_register
$pdata$s390_compare_and_trap_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_and_trap_long_register
$pdata$s390_compare_and_trap_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_and_trap_register
$pdata$s390_compare_halfword_immediate_halfword_storage DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_halfword_immediate_halfword_storage
$pdata$s390_compare_halfword_immediate_long_storage DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_halfword_immediate_long_storage
$pdata$s390_compare_halfword_immediate_storage DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_halfword_immediate_storage
$pdata$s390_compare_halfword_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_halfword_long
$pdata$s390_compare_halfword_relative_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_halfword_relative_long
$pdata$s390_compare_halfword_relative_long_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_halfword_relative_long_long
$pdata$s390_compare_immediate_and_branch DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_immediate_and_branch
$pdata$s390_compare_immediate_and_branch_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_immediate_and_branch_long
$pdata$s390_compare_immediate_and_branch_relative DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_immediate_and_branch_relative
$pdata$s390_compare_immediate_and_branch_relative_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_immediate_and_branch_relative_long
$pdata$s390_compare_immediate_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_immediate_and_trap
$pdata$s390_compare_immediate_and_trap_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_immediate_and_trap_long
$pdata$s390_compare_logical_and_branch_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_and_branch_long_register
$pdata$s390_compare_logical_and_branch_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_and_branch_register
$pdata$s390_compare_logical_and_branch_relative_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_and_branch_relative_long_register
$pdata$s390_compare_logical_and_branch_relative_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_and_branch_relative_register
$pdata$s390_compare_logical_and_trap_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_and_trap_long_register
$pdata$s390_compare_logical_and_trap_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_and_trap_register
$pdata$s390_compare_logical_immediate_and_branch DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_immediate_and_branch
$pdata$s390_compare_logical_immediate_and_branch_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_immediate_and_branch_long
$pdata$s390_compare_logical_immediate_and_branch_relative DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_immediate_and_branch_relative
$pdata$s390_compare_logical_immediate_and_branch_relative_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_immediate_and_branch_relative_long
$pdata$s390_compare_logical_immediate_and_trap_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_immediate_and_trap_fullword
$pdata$s390_compare_logical_immediate_and_trap_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_immediate_and_trap_long
$pdata$s390_compare_logical_immediate_fullword_storage DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_immediate_fullword_storage
$pdata$s390_compare_logical_immediate_halfword_storage DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_immediate_halfword_storage
$pdata$s390_compare_logical_immediate_long_storage DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_immediate_long_storage
$pdata$s390_compare_logical_relative_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_relative_long
$pdata$s390_compare_logical_relative_long_halfword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_relative_long_halfword
$pdata$s390_compare_logical_relative_long_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_relative_long_long
$pdata$s390_compare_logical_relative_long_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_relative_long_long_fullword
$pdata$s390_compare_logical_relative_long_long_halfword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_relative_long_long_halfword
$pdata$s390_compare_relative_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_relative_long
$pdata$s390_compare_relative_long_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_relative_long_long
$pdata$s390_compare_relative_long_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_relative_long_long_fullword
$pdata$s390_extract_cpu_attribute DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_cpu_attribute
$pdata$s390_load_address_extended_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_address_extended_y
$pdata$s390_load_and_test_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_test_long_fullword
$pdata$s390_load_halfword_relative_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_halfword_relative_long
$pdata$s390_load_halfword_relative_long_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_halfword_relative_long_long
$pdata$s390_load_logical_halfword_relative_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_halfword_relative_long
$pdata$s390_load_logical_halfword_relative_long_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_halfword_relative_long_long
$pdata$s390_load_logical_relative_long_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_relative_long_long_fullword
$pdata$s390_load_relative_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_relative_long
$pdata$s390_load_relative_long_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_relative_long_long
$pdata$s390_load_relative_long_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_relative_long_long_fullword
$pdata$s390_move_fullword_from_halfword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_move_fullword_from_halfword_immediate
$pdata$s390_move_halfword_from_halfword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_move_halfword_from_halfword_immediate
$pdata$s390_move_long_from_halfword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_move_long_from_halfword_immediate
$pdata$s390_multiply_halfword_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_halfword_y
$pdata$s390_multiply_single_immediate_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_single_immediate_fullword
$pdata$s390_multiply_single_immediate_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_single_immediate_long_fullword
$pdata$s390_multiply_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_y
$pdata$s390_prefetch_data DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_prefetch_data
$pdata$s390_prefetch_data_relative_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_prefetch_data_relative_long
$pdata$s390_rotate_then_and_selected_bits_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_rotate_then_and_selected_bits_long_reg
$pdata$s390_rotate_then_exclusive_or_selected_bits_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_rotate_then_exclusive_or_selected_bits_long_reg
$pdata$s390_rotate_then_insert_selected_bits_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_rotate_then_insert_selected_bits_long_reg
$pdata$s390_rotate_then_or_selected_bits_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_rotate_then_or_selected_bits_long_reg
$pdata$s390_store_halfword_relative_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_halfword_relative_long
$pdata$s390_store_relative_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_relative_long
$pdata$s390_store_relative_long_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_relative_long_long
$pdata$s390_execute_relative_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_execute_relative_long
$pdata$s390_convert_bfp_ext_to_u32_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_bfp_ext_to_u32_reg
$pdata$s390_convert_bfp_ext_to_u64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_bfp_ext_to_u64_reg
$pdata$s390_convert_bfp_long_to_u32_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_bfp_long_to_u32_reg
$pdata$s390_convert_bfp_long_to_u64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_bfp_long_to_u64_reg
$pdata$s390_convert_bfp_short_to_u32_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_bfp_short_to_u32_reg
$pdata$s390_convert_bfp_short_to_u64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_bfp_short_to_u64_reg
$pdata$s390_convert_dfp_ext_to_fix32_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_ext_to_fix32_reg
$pdata$s390_convert_dfp_ext_to_u32_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_ext_to_u32_reg
$pdata$s390_convert_dfp_ext_to_u64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_ext_to_u64_reg
$pdata$s390_convert_dfp_long_to_fix32_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_long_to_fix32_reg
$pdata$s390_convert_dfp_long_to_u32_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_long_to_u32_reg
$pdata$s390_convert_dfp_long_to_u64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_long_to_u64_reg
$pdata$s390_convert_fix32_to_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_fix32_to_dfp_ext_reg
$pdata$s390_convert_fix32_to_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_fix32_to_dfp_long_reg
$pdata$s390_convert_u32_to_bfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_u32_to_bfp_ext_reg
$pdata$s390_convert_u32_to_bfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_u32_to_bfp_long_reg
$pdata$s390_convert_u32_to_bfp_short_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_u32_to_bfp_short_reg
$pdata$s390_convert_u32_to_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_u32_to_dfp_ext_reg
$pdata$s390_convert_u32_to_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_u32_to_dfp_long_reg
$pdata$s390_convert_u64_to_bfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_u64_to_bfp_ext_reg
$pdata$s390_convert_u64_to_bfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_u64_to_bfp_long_reg
$pdata$s390_convert_u64_to_bfp_short_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_u64_to_bfp_short_reg
$pdata$s390_convert_u64_to_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_u64_to_dfp_ext_reg
$pdata$s390_convert_u64_to_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_u64_to_dfp_long_reg
$pdata$s390_set_bfp_rounding_mode_3bit DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_set_bfp_rounding_mode_3bit
$pdata$s390_load_program_parameter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_program_parameter
$pdata$s390_set_dfp_rounding_mode DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_set_dfp_rounding_mode
$pdata$s390_load_fpr_from_gr_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_fpr_from_gr_long_reg
$pdata$s390_load_gr_from_fpr_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_gr_from_fpr_long_reg
$pdata$s390_copy_sign_fpr_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_copy_sign_fpr_long_reg
$pdata$s390_load_complement_fpr_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_complement_fpr_long_reg
$pdata$s390_load_negative_fpr_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_negative_fpr_long_reg
$pdata$s390_load_positive_fpr_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_positive_fpr_long_reg
$pdata$s390_load_fpc_and_signal DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_fpc_and_signal
$pdata$s390_set_fpc_and_signal DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_set_fpc_and_signal
$pdata$s390_add_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_dfp_ext_reg
$pdata$s390_add_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_dfp_long_reg
$pdata$s390_compare_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_dfp_ext_reg
$pdata$s390_compare_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_dfp_long_reg
$pdata$s390_compare_and_signal_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_and_signal_dfp_ext_reg
$pdata$s390_compare_and_signal_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_and_signal_dfp_long_reg
$pdata$s390_compare_exponent_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_exponent_dfp_ext_reg
$pdata$s390_compare_exponent_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_exponent_dfp_long_reg
$pdata$s390_convert_fix64_to_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_fix64_to_dfp_ext_reg
$pdata$s390_convert_fix64_to_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_fix64_to_dfp_long_reg
$pdata$s390_convert_sbcd128_to_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_sbcd128_to_dfp_ext_reg
$pdata$s390_convert_sbcd64_to_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_sbcd64_to_dfp_long_reg
$pdata$s390_convert_ubcd128_to_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_ubcd128_to_dfp_ext_reg
$pdata$s390_convert_ubcd64_to_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_ubcd64_to_dfp_long_reg
$pdata$s390_convert_dfp_ext_to_fix64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_ext_to_fix64_reg
$pdata$s390_convert_dfp_long_to_fix64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_long_to_fix64_reg
$pdata$s390_convert_dfp_ext_to_sbcd128_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_ext_to_sbcd128_reg
$pdata$s390_convert_dfp_long_to_sbcd64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_long_to_sbcd64_reg
$pdata$s390_convert_dfp_ext_to_ubcd128_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_ext_to_ubcd128_reg
$pdata$s390_convert_dfp_long_to_ubcd64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_long_to_ubcd64_reg
$pdata$s390_divide_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_divide_dfp_ext_reg
$pdata$s390_divide_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_divide_dfp_long_reg
$pdata$s390_extract_biased_exponent_dfp_ext_to_fix64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_biased_exponent_dfp_ext_to_fix64_reg
$pdata$s390_extract_biased_exponent_dfp_long_to_fix64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_biased_exponent_dfp_long_to_fix64_reg
$pdata$s390_extract_significance_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_significance_dfp_ext_reg
$pdata$s390_extract_significance_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_significance_dfp_long_reg
$pdata$s390_insert_biased_exponent_fix64_to_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_biased_exponent_fix64_to_dfp_ext_reg
$pdata$s390_insert_biased_exponent_fix64_to_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_biased_exponent_fix64_to_dfp_long_reg
$pdata$s390_load_and_test_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_test_dfp_ext_reg
$pdata$s390_load_and_test_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_test_dfp_long_reg
$pdata$s390_load_fp_int_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_fp_int_dfp_ext_reg
$pdata$s390_load_fp_int_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_fp_int_dfp_long_reg
$pdata$s390_load_lengthened_dfp_long_to_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_lengthened_dfp_long_to_ext_reg
$pdata$s390_load_lengthened_dfp_short_to_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_lengthened_dfp_short_to_long_reg
$pdata$s390_load_rounded_dfp_ext_to_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_rounded_dfp_ext_to_long_reg
$pdata$s390_load_rounded_dfp_long_to_short_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_rounded_dfp_long_to_short_reg
$pdata$s390_multiply_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_dfp_ext_reg
$pdata$s390_multiply_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_dfp_long_reg
$pdata$s390_quantize_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_quantize_dfp_ext_reg
$pdata$s390_quantize_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_quantize_dfp_long_reg
$pdata$s390_reround_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_reround_dfp_ext_reg
$pdata$s390_reround_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_reround_dfp_long_reg
$pdata$s390_shift_coefficient_left_dfp_ext DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_shift_coefficient_left_dfp_ext
$pdata$s390_shift_coefficient_left_dfp_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_shift_coefficient_left_dfp_long
$pdata$s390_shift_coefficient_right_dfp_ext DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_shift_coefficient_right_dfp_ext
$pdata$s390_shift_coefficient_right_dfp_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_shift_coefficient_right_dfp_long
$pdata$s390_subtract_dfp_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_dfp_ext_reg
$pdata$s390_subtract_dfp_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_dfp_long_reg
$pdata$s390_test_data_class_dfp_ext DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_test_data_class_dfp_ext
$pdata$s390_test_data_class_dfp_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_test_data_class_dfp_long
$pdata$s390_test_data_class_dfp_short DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_test_data_class_dfp_short
$pdata$s390_test_data_group_dfp_ext DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_test_data_group_dfp_ext
$pdata$s390_test_data_group_dfp_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_test_data_group_dfp_long
$pdata$s390_test_data_group_dfp_short DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_test_data_group_dfp_short
$pdata$s390_perform_floating_point_operation DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_perform_floating_point_operation
$pdata$s390_add_distinct_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_distinct_register
$pdata$s390_add_distinct_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_distinct_long_register
$pdata$s390_add_distinct_halfword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_distinct_halfword_immediate
$pdata$s390_add_distinct_long_halfword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_distinct_long_halfword_immediate
$pdata$s390_add_logical_distinct_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_distinct_register
$pdata$s390_add_logical_distinct_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_distinct_long_register
$pdata$s390_add_logical_distinct_signed_halfword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_distinct_signed_halfword_immediate
$pdata$s390_add_logical_distinct_long_signed_halfword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_distinct_long_signed_halfword_immediate
$pdata$s390_and_distinct_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_distinct_register
$pdata$s390_and_distinct_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_distinct_long_register
$pdata$s390_exclusive_or_distinct_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_exclusive_or_distinct_register
$pdata$s390_exclusive_or_distinct_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_exclusive_or_distinct_long_register
$pdata$s390_or_distinct_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_distinct_register
$pdata$s390_or_distinct_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_distinct_long_register
$pdata$s390_shift_left_single_distinct DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_shift_left_single_distinct
$pdata$s390_shift_left_single_logical_distinct DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_shift_left_single_logical_distinct
$pdata$s390_shift_right_single_distinct DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_shift_right_single_distinct
$pdata$s390_shift_right_single_logical_distinct DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_shift_right_single_logical_distinct
$pdata$s390_subtract_distinct_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_distinct_register
$pdata$s390_subtract_distinct_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_distinct_long_register
$pdata$s390_subtract_logical_distinct_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_distinct_register
$pdata$s390_subtract_logical_distinct_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_distinct_long_register
$pdata$s390_add_high_high_high_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_high_high_high_register
$pdata$s390_add_high_high_low_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_high_high_low_register
$pdata$s390_add_high_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_high_immediate
$pdata$s390_add_logical_high_high_high_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_high_high_high_register
$pdata$s390_add_logical_high_high_low_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_high_high_low_register
$pdata$s390_add_logical_with_signed_immediate_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_with_signed_immediate_high
$pdata$s390_add_logical_with_signed_immediate_high_n DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_with_signed_immediate_high_n
$pdata$s390_branch_relative_on_count_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_branch_relative_on_count_high
$pdata$s390_compare_high_high_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_high_high_register
$pdata$s390_compare_high_low_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_high_low_register
$pdata$s390_compare_high_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_high_fullword
$pdata$s390_compare_high_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_high_immediate
$pdata$s390_compare_logical_high_high_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_high_high_register
$pdata$s390_compare_logical_high_low_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_high_low_register
$pdata$s390_compare_logical_high_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_high_fullword
$pdata$s390_compare_logical_high_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_high_immediate
$pdata$s390_load_byte_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_byte_high
$pdata$s390_load_fullword_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_fullword_high
$pdata$s390_load_halfword_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_halfword_high
$pdata$s390_load_logical_character_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_character_high
$pdata$s390_load_logical_halfword_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_halfword_high
$pdata$s390_rotate_then_insert_selected_bits_high_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_rotate_then_insert_selected_bits_high_long_reg
$pdata$s390_rotate_then_insert_selected_bits_low_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_rotate_then_insert_selected_bits_low_long_reg
$pdata$s390_store_character_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_character_high
$pdata$s390_store_fullword_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_fullword_high
$pdata$s390_store_halfword_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_halfword_high
$pdata$s390_subtract_high_high_high_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_high_high_high_register
$pdata$s390_subtract_high_high_low_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_high_high_low_register
$pdata$s390_subtract_logical_high_high_high_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_high_high_high_register
$pdata$s390_subtract_logical_high_high_low_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_high_high_low_register
$pdata$s390_load_and_add DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_add
$pdata$s390_load_and_add_logical DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_add_logical
$pdata$s390_load_and_and DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_and
$pdata$s390_load_and_exclusive_or DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_exclusive_or
$pdata$s390_load_and_or DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_or
$pdata$s390_load_pair_disjoint DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_pair_disjoint
$pdata$s390_load_and_add_logical_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_add_logical_long
$pdata$s390_load_and_add_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_add_long
$pdata$s390_load_and_and_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_and_long
$pdata$s390_load_and_exclusive_or_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_exclusive_or_long
$pdata$s390_load_and_or_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_or_long
$pdata$s390_load_pair_disjoint_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_pair_disjoint_long
$pdata$s390_load_on_condition_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_on_condition_register
$pdata$s390_load_on_condition_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_on_condition_long_register
$pdata$s390_load_on_condition DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_on_condition
$pdata$s390_load_on_condition_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_on_condition_long
$pdata$s390_store_on_condition DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_on_condition
$pdata$s390_store_on_condition_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_on_condition_long
$pdata$s390_population_count DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_population_count
$pdata$s390_convert_zoned_to_dfp_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_zoned_to_dfp_long
$pdata$s390_convert_zoned_to_dfp_ext DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_zoned_to_dfp_ext
$pdata$s390_convert_dfp_long_to_zoned DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_long_to_zoned
$pdata$s390_convert_dfp_ext_to_zoned DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_ext_to_zoned
$pdata$s390_branch_prediction_preload DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_branch_prediction_preload
$pdata$s390_branch_prediction_relative_preload DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_branch_prediction_relative_preload
$pdata$s390_next_instruction_access_intent DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_next_instruction_access_intent
$pdata$s390_load_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_trap
$pdata$s390_load_long_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_long_and_trap
$pdata$s390_load_fullword_high_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_fullword_high_and_trap
$pdata$s390_load_logical_long_fullword_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_long_fullword_and_trap
$pdata$s390_load_logical_long_thirtyone_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_long_thirtyone_and_trap
$pdata$s390_compare_logical_and_trap DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_and_trap
$pdata$s390_compare_logical_and_trap_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_and_trap_long
$pdata$s390_rotate_then_insert_selected_bits_long_reg_n DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_rotate_then_insert_selected_bits_long_reg_n
$pdata$s390_perform_processor_assist DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_perform_processor_assist
$pdata$s390_transaction_begin_constrained DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_transaction_begin_constrained
$pdata$s390_load_halfword_high_immediate_on_condition DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_halfword_high_immediate_on_condition
$pdata$s390_load_halfword_immediate_on_condition DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_halfword_immediate_on_condition
$pdata$s390_load_halfword_immediate_on_condition_grande DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_halfword_immediate_on_condition_grande
$pdata$s390_load_high_on_condition DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_high_on_condition
$pdata$s390_load_high_on_condition_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_high_on_condition_register
$pdata$s390_store_high_on_condition DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_high_on_condition
$pdata$s390_load_and_zero_rightmost_byte_grande DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_zero_rightmost_byte_grande
$pdata$s390_load_logical_and_zero_rightmost_byte DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_and_zero_rightmost_byte
$pdata$s390_load_and_zero_rightmost_byte DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_zero_rightmost_byte
$pdata$s390_branch_indirect_on_condition DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_branch_indirect_on_condition
$pdata$s390_add_long_halfword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_long_halfword
$pdata$s390_subtract_long_halfword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_long_halfword
$pdata$s390_multiply_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_long_register
$pdata$s390_multiply_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_long
$pdata$s390_multiply_long_halfword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_long_halfword
$pdata$s390_multiply_single_register_cc DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_single_register_cc
$pdata$s390_multiply_single_cc DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_single_cc
$pdata$s390_multiply_single_long_register_cc DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_single_long_register_cc
$pdata$s390_multiply_single_long_cc DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_single_long_cc
$pdata$s390_and_register_with_complement DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_register_with_complement
$pdata$s390_and_register_long_with_complement DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_register_long_with_complement
$pdata$s390_nand_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_nand_register
$pdata$s390_nand_register_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_nand_register_long
$pdata$s390_not_xor_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_not_xor_register
$pdata$s390_not_xor_register_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_not_xor_register_long
$pdata$s390_nor_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_nor_register
$pdata$s390_nor_register_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_nor_register_long
$pdata$s390_or_register_with_complement DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_register_with_complement
$pdata$s390_or_register_long_with_complement DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_register_long_with_complement
$pdata$s390_select_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_select_register
$pdata$s390_select_register_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_select_register_long
$pdata$s390_select_fullword_high_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_select_fullword_high_register
$pdata$s390_move_right_to_left DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_move_right_to_left
$pdata$s390_reset_reference_bits_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_reset_reference_bits_multiple
$pdata$s390_extract_coprocessor_group_address DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_coprocessor_group_address
$pdata$s390_extract_cpu_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_cpu_counter
$pdata$s390_extract_peripheral_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_peripheral_counter
$pdata$s390_load_cpu_counter_set_controls DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_cpu_counter_set_controls
$pdata$s390_load_peripheral_counter_set_controls DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_peripheral_counter_set_controls
$pdata$s390_query_counter_information DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_query_counter_information
$pdata$s390_set_cpu_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_set_cpu_counter
$pdata$s390_set_peripheral_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_set_peripheral_counter
$pdata$s390_load_sampling_controls DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_sampling_controls
$pdata$s390_query_sampling_information DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_query_sampling_information
$pdata$s390_transaction_begin DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_transaction_begin
$pdata$s390_transaction_abort DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_transaction_abort
$pdata$s390_transaction_end DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_transaction_end
$pdata$s390_nontransactional_store DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_nontransactional_store
$pdata$s390_extract_transaction_nesting_depth DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_transaction_nesting_depth
$pdata$s390_store_hypervisor_information DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_hypervisor_information
$pdata$s390_perform_cryptographic_key_management_operation DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_perform_cryptographic_key_management_operation
$pdata$s390_cipher_message_with_cipher_feedback DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_cipher_message_with_cipher_feedback
$pdata$s390_cipher_message_with_output_feedback DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_cipher_message_with_output_feedback
$pdata$s390_cipher_message_with_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_cipher_message_with_counter
$pdata$s390_perform_cryptographic_computation DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_perform_cryptographic_computation
$pdata$s390_convert_packed_to_dfp_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_packed_to_dfp_long
$pdata$s390_convert_packed_to_dfp_ext DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_packed_to_dfp_ext
$pdata$s390_convert_dfp_long_to_packed DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_long_to_packed
$pdata$s390_convert_dfp_ext_to_packed DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_dfp_ext_to_packed
$pdata$s390_vector_load DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_vector_load
$pdata$s390_vector_store DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_vector_store
$pdata$s390_vector_load_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_vector_load_multiple
$pdata$s390_vector_store_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_vector_store_multiple
$pdata$s390_insert_reference_bits_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_reference_bits_multiple
$pdata$s390_load_bear DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_bear
$pdata$s390_store_bear DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_bear
$pdata$s390_load_program_status_word_extended_y DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_program_status_word_extended_y
$pdata$s390_insert_storage_key DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_storage_key
$pdata$s390_reset_reference_bit DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_reset_reference_bit
$pdata$s390_set_storage_key DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_set_storage_key
$pdata$s390_connect_channel_set DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_connect_channel_set
$pdata$s390_disconnect_channel_set DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_disconnect_channel_set
$pdata$s390_load_page_table_entry_address DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_page_table_entry_address
$pdata$s390_ecpsvm_basic_freex DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_basic_freex
$pdata$s390_ecpsvm_basic_fretx DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_basic_fretx
$pdata$s390_ecpsvm_comm_ccwproc DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_comm_ccwproc
$pdata$s390_ecpsvm_decode_first_ccw DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_decode_first_ccw
$pdata$s390_ecpsvm_decode_next_ccw DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_decode_next_ccw
$pdata$s390_ecpsvm_disp1 DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_disp1
$pdata$s390_ecpsvm_disp2 DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_disp2
$pdata$s390_ecpsvm_dispatch_main DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_dispatch_main
$pdata$s390_ecpsvm_extended_freex DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_extended_freex
$pdata$s390_ecpsvm_extended_fretx DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_extended_fretx
$pdata$s390_ecpsvm_free_ccwstor DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_free_ccwstor
$pdata$s390_ecpsvm_inval_ptable DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_inval_ptable
$pdata$s390_ecpsvm_inval_segtab DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_inval_segtab
$pdata$s390_ecpsvm_loc_chgshrpg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_loc_chgshrpg
$pdata$s390_ecpsvm_locate_rblock DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_locate_rblock
$pdata$s390_ecpsvm_locate_vblock DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_locate_vblock
$pdata$s390_ecpsvm_lock_page DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_lock_page
$pdata$s390_ecpsvm_prefmach_assist DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_prefmach_assist
$pdata$s390_ecpsvm_store_level DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_store_level
$pdata$s390_ecpsvm_tpage DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_tpage
$pdata$s390_ecpsvm_tpage_lock DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_tpage_lock
$pdata$s390_ecpsvm_unlock_page DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_unlock_page
$pdata$s390_ecpsvm_unxlate_ccw DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_ecpsvm_unxlate_ccw
$pdata$s390_add_logical_carry_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_carry_long
$pdata$s390_add_logical_carry_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_carry_long_register
$pdata$s390_add_logical_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_long
$pdata$s390_add_logical_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_long_fullword
$pdata$s390_add_logical_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_long_fullword_register
$pdata$s390_add_logical_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_logical_long_register
$pdata$s390_add_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_long
$pdata$s390_add_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_long_fullword
$pdata$s390_add_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_long_fullword_register
$pdata$s390_add_long_halfword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_long_halfword_immediate
$pdata$s390_add_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_add_long_register
$pdata$s390_and_immediate_high_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_immediate_high_high
$pdata$s390_and_immediate_high_low DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_immediate_high_low
$pdata$s390_and_immediate_low_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_immediate_low_high
$pdata$s390_and_immediate_low_low DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_immediate_low_low
$pdata$s390_and_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_long
$pdata$s390_and_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_and_long_register
$pdata$s390_branch_on_count_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_branch_on_count_long
$pdata$s390_branch_on_count_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_branch_on_count_long_register
$pdata$s390_branch_on_index_high_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_branch_on_index_high_long
$pdata$s390_branch_on_index_low_or_equal_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_branch_on_index_low_or_equal_long
$pdata$s390_branch_relative_on_count_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_branch_relative_on_count_long
$pdata$s390_branch_relative_on_index_high_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_branch_relative_on_index_high_long
$pdata$s390_branch_relative_on_index_low_or_equal_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_branch_relative_on_index_low_or_equal_long
$pdata$s390_compare_and_swap_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_and_swap_long
$pdata$s390_compare_double_and_swap_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_double_and_swap_long
$pdata$s390_compare_logical_characters_under_mask_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_characters_under_mask_high
$pdata$s390_compare_logical_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_long
$pdata$s390_compare_logical_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_long_fullword
$pdata$s390_compare_logical_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_long_fullword_register
$pdata$s390_compare_logical_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_logical_long_register
$pdata$s390_compare_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_long
$pdata$s390_compare_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_long_fullword
$pdata$s390_compare_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_long_fullword_register
$pdata$s390_compare_long_halfword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_long_halfword_immediate
$pdata$s390_compare_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_compare_long_register
$pdata$s390_convert_fix64_to_float_ext_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_fix64_to_float_ext_reg
$pdata$s390_convert_fix64_to_float_long_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_fix64_to_float_long_reg
$pdata$s390_convert_fix64_to_float_short_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_fix64_to_float_short_reg
$pdata$s390_convert_float_ext_to_fix64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_float_ext_to_fix64_reg
$pdata$s390_convert_float_long_to_fix64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_float_long_to_fix64_reg
$pdata$s390_convert_float_short_to_fix64_reg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_float_short_to_fix64_reg
$pdata$s390_convert_to_binary_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_to_binary_long
$pdata$s390_convert_to_decimal_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_convert_to_decimal_long
$pdata$s390_divide_logical_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_divide_logical_long
$pdata$s390_divide_logical_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_divide_logical_long_register
$pdata$s390_divide_single_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_divide_single_long
$pdata$s390_divide_single_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_divide_single_long_fullword
$pdata$s390_divide_single_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_divide_single_long_fullword_register
$pdata$s390_divide_single_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_divide_single_long_register
$pdata$s390_exclusive_or_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_exclusive_or_long
$pdata$s390_exclusive_or_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_exclusive_or_long_register
$pdata$s390_extract_and_set_extended_authority DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_and_set_extended_authority
$pdata$s390_extract_stacked_registers_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_stacked_registers_long
$pdata$s390_insert_characters_under_mask_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_characters_under_mask_high
$pdata$s390_insert_immediate_high_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_immediate_high_high
$pdata$s390_insert_immediate_high_low DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_immediate_high_low
$pdata$s390_insert_immediate_low_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_immediate_low_high
$pdata$s390_insert_immediate_low_low DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_insert_immediate_low_low
$pdata$s390_load_and_test_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_test_long_fullword_register
$pdata$s390_load_and_test_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_and_test_long_register
$pdata$s390_load_complement_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_complement_long_fullword_register
$pdata$s390_load_complement_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_complement_long_register
$pdata$s390_load_control_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_control_long
$pdata$s390_load_logical_immediate_high_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_immediate_high_high
$pdata$s390_load_logical_immediate_high_low DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_immediate_high_low
$pdata$s390_load_logical_immediate_low_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_immediate_low_high
$pdata$s390_load_logical_immediate_low_low DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_immediate_low_low
$pdata$s390_load_logical_long_character DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_long_character
$pdata$s390_load_logical_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_long_fullword
$pdata$s390_load_logical_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_long_fullword_register
$pdata$s390_load_logical_long_halfword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_long_halfword
$pdata$s390_load_logical_long_thirtyone DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_long_thirtyone
$pdata$s390_load_logical_long_thirtyone_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_logical_long_thirtyone_register
$pdata$s390_load_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_long
$pdata$s390_load_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_long_fullword
$pdata$s390_load_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_long_fullword_register
$pdata$s390_load_long_halfword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_long_halfword
$pdata$s390_load_long_halfword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_long_halfword_immediate
$pdata$s390_load_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_long_register
$pdata$s390_load_multiple_disjoint DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_multiple_disjoint
$pdata$s390_load_multiple_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_multiple_high
$pdata$s390_load_multiple_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_multiple_long
$pdata$s390_load_negative_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_negative_long_fullword_register
$pdata$s390_load_negative_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_negative_long_register
$pdata$s390_load_pair_from_quadword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_pair_from_quadword
$pdata$s390_load_positive_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_positive_long_fullword_register
$pdata$s390_load_positive_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_positive_long_register
$pdata$s390_load_program_status_word_extended DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_program_status_word_extended
$pdata$s390_load_real_address_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_real_address_long
$pdata$s390_load_reversed_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_reversed_long
$pdata$s390_load_reversed_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_reversed_long_register
$pdata$s390_load_using_real_address_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_load_using_real_address_long
$pdata$s390_multiply_logical_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_logical_long
$pdata$s390_multiply_logical_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_logical_long_register
$pdata$s390_multiply_long_halfword_immediate DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_long_halfword_immediate
$pdata$s390_multiply_single_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_single_long
$pdata$s390_multiply_single_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_single_long_fullword
$pdata$s390_multiply_single_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_single_long_fullword_register
$pdata$s390_multiply_single_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_multiply_single_long_register
$pdata$s390_or_immediate_high_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_immediate_high_high
$pdata$s390_or_immediate_high_low DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_immediate_high_low
$pdata$s390_or_immediate_low_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_immediate_low_high
$pdata$s390_or_immediate_low_low DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_immediate_low_low
$pdata$s390_or_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_long
$pdata$s390_or_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_or_long_register
$pdata$s390_rotate_left_single_logical_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_rotate_left_single_logical_long
$pdata$s390_set_addressing_mode_64 DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_set_addressing_mode_64
$pdata$s390_shift_left_single_logical_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_shift_left_single_logical_long
$pdata$s390_shift_left_single_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_shift_left_single_long
$pdata$s390_shift_right_single_logical_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_shift_right_single_logical_long
$pdata$s390_shift_right_single_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_shift_right_single_long
$pdata$s390_store_characters_under_mask_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_characters_under_mask_high
$pdata$s390_store_control_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_control_long
$pdata$s390_store_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_long
$pdata$s390_store_multiple_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_multiple_high
$pdata$s390_store_multiple_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_multiple_long
$pdata$s390_store_pair_to_quadword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_pair_to_quadword
$pdata$s390_store_real_address DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_real_address
$pdata$s390_store_reversed_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_reversed_long
$pdata$s390_store_using_real_address_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_using_real_address_long
$pdata$s390_subtract_logical_borrow_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_borrow_long
$pdata$s390_subtract_logical_borrow_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_borrow_long_register
$pdata$s390_subtract_logical_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_long
$pdata$s390_subtract_logical_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_long_fullword
$pdata$s390_subtract_logical_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_long_fullword_register
$pdata$s390_subtract_logical_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_logical_long_register
$pdata$s390_subtract_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_long
$pdata$s390_subtract_long_fullword DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_long_fullword
$pdata$s390_subtract_long_fullword_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_long_fullword_register
$pdata$s390_subtract_long_register DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_subtract_long_register
$pdata$s390_test_under_mask_high_high DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_test_under_mask_high_high
$pdata$s390_test_under_mask_high_low DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_test_under_mask_high_low
$pdata$s390_trace_long DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_trace_long
$pdata$s390_set_queue_buffer_state DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_set_queue_buffer_state
$pdata$s390_extract_queue_buffer_state DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_queue_buffer_state
$pdata$s390_start_io DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_start_io
$pdata$s390_test_io DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_test_io
$pdata$s390_halt_io DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_halt_io
$pdata$s390_test_channel DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_test_channel
$pdata$s390_store_channel_id DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_channel_id
$pdata$s390_v_and_to_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_and_to_vmr
$pdata$s390_v_clear_vr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_clear_vr
$pdata$s390_v_complement_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_complement_vmr
$pdata$s390_v_count_left_zeros_in_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_count_left_zeros_in_vmr
$pdata$s390_v_count_ones_in_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_count_ones_in_vmr
$pdata$s390_v_exclusive_or_to_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_exclusive_or_to_vmr
$pdata$s390_v_extract_vct DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_extract_vct
$pdata$s390_v_extract_vector_modes DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_extract_vector_modes
$pdata$s390_v_load_vct_from_address DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_load_vct_from_address
$pdata$s390_v_load_vix_from_address DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_load_vix_from_address
$pdata$s390_v_load_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_load_vmr
$pdata$s390_v_load_vmr_complement DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_load_vmr_complement
$pdata$s390_v_or_to_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_or_to_vmr
$pdata$s390_v_restore_vac DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_restore_vac
$pdata$s390_v_restore_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_restore_vmr
$pdata$s390_v_restore_vr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_restore_vr
$pdata$s390_v_restore_vsr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_restore_vsr
$pdata$s390_v_save_changed_vr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_save_changed_vr
$pdata$s390_v_save_vac DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_save_vac
$pdata$s390_v_save_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_save_vmr
$pdata$s390_v_save_vr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_save_vr
$pdata$s390_v_save_vsr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_save_vsr
$pdata$s390_v_set_vector_mask_mode DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_set_vector_mask_mode
$pdata$s390_v_store_vector_parameters DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_store_vector_parameters
$pdata$s390_v_store_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_store_vmr
$pdata$s390_v_test_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_v_test_vmr
$pdata$s390_store_cpu_counter_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_store_cpu_counter_multiple
$pdata$s390_set_vector_summary DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_set_vector_summary
$pdata$s390_tcpip DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_tcpip
$pdata$s390_extract_and_set_storage_attributes DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$s390_extract_and_set_storage_attributes
$pdata$s390_execute_opcode_e3________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$s390_execute_opcode_e3________xx
$pdata$s390_execute_opcode_e7________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$s390_execute_opcode_e7________xx
$pdata$s390_execute_opcode_eb________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$s390_execute_opcode_eb________xx
$pdata$s390_execute_opcode_ec________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$s390_execute_opcode_ec________xx
$pdata$s390_execute_opcode_ed________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$s390_execute_opcode_ed________xx
$pdata$z900_cipher_message DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_cipher_message
$pdata$z900_cipher_message_with_chaining DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_cipher_message_with_chaining
$pdata$z900_compute_intermediate_message_digest DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_compute_intermediate_message_digest
$pdata$z900_compute_last_message_digest DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_compute_last_message_digest
$pdata$z900_compute_message_authentication_code DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_compute_message_authentication_code
$pdata$z900_perform_cryptographic_key_management_operation DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_perform_cryptographic_key_management_operation
$pdata$z900_perform_cryptographic_computation DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_perform_cryptographic_computation
$pdata$z900_cipher_message_with_cipher_feedback DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_cipher_message_with_cipher_feedback
$pdata$z900_cipher_message_with_output_feedback DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_cipher_message_with_output_feedback
$pdata$z900_cipher_message_with_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_cipher_message_with_counter
$pdata$z900_operation_exception DD imagerel $LN19
	DD	imagerel $LN19+342
	DD	imagerel $unwind$z900_operation_exception
$pdata$z900_extract_coprocessor_group_address DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_extract_coprocessor_group_address
$pdata$z900_extract_cpu_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_extract_cpu_counter
$pdata$z900_extract_peripheral_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_extract_peripheral_counter
$pdata$z900_load_cpu_counter_set_controls DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_load_cpu_counter_set_controls
$pdata$z900_load_peripheral_counter_set_controls DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_load_peripheral_counter_set_controls
$pdata$z900_query_counter_information DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_query_counter_information
$pdata$z900_set_cpu_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_set_cpu_counter
$pdata$z900_set_peripheral_counter DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_set_peripheral_counter
$pdata$z900_load_sampling_controls DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_load_sampling_controls
$pdata$z900_query_sampling_information DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_query_sampling_information
$pdata$z900_insert_storage_key DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_insert_storage_key
$pdata$z900_reset_reference_bit DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_reset_reference_bit
$pdata$z900_set_storage_key DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_set_storage_key
$pdata$z900_connect_channel_set DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_connect_channel_set
$pdata$z900_disconnect_channel_set DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_disconnect_channel_set
$pdata$z900_ecpsvm_basic_freex DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_basic_freex
$pdata$z900_ecpsvm_basic_fretx DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_basic_fretx
$pdata$z900_ecpsvm_comm_ccwproc DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_comm_ccwproc
$pdata$z900_ecpsvm_decode_first_ccw DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_decode_first_ccw
$pdata$z900_ecpsvm_decode_next_ccw DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_decode_next_ccw
$pdata$z900_ecpsvm_disp1 DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_disp1
$pdata$z900_ecpsvm_disp2 DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_disp2
$pdata$z900_ecpsvm_dispatch_main DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_dispatch_main
$pdata$z900_ecpsvm_extended_freex DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_extended_freex
$pdata$z900_ecpsvm_extended_fretx DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_extended_fretx
$pdata$z900_ecpsvm_free_ccwstor DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_free_ccwstor
$pdata$z900_ecpsvm_inval_ptable DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_inval_ptable
$pdata$z900_ecpsvm_inval_segtab DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_inval_segtab
$pdata$z900_ecpsvm_loc_chgshrpg DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_loc_chgshrpg
$pdata$z900_ecpsvm_locate_rblock DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_locate_rblock
$pdata$z900_ecpsvm_locate_vblock DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_locate_vblock
$pdata$z900_ecpsvm_lock_page DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_lock_page
$pdata$z900_ecpsvm_prefmach_assist DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_prefmach_assist
$pdata$z900_ecpsvm_store_level DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_store_level
$pdata$z900_ecpsvm_tpage DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_tpage
$pdata$z900_ecpsvm_tpage_lock DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_tpage_lock
$pdata$z900_ecpsvm_unlock_page DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_unlock_page
$pdata$z900_ecpsvm_unxlate_ccw DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_ecpsvm_unxlate_ccw
$pdata$z900_start_io DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_start_io
$pdata$z900_test_io DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_test_io
$pdata$z900_halt_io DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_halt_io
$pdata$z900_test_channel DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_test_channel
$pdata$z900_store_channel_id DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_store_channel_id
$pdata$z900_v_and_to_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_and_to_vmr
$pdata$z900_v_clear_vr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_clear_vr
$pdata$z900_v_complement_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_complement_vmr
$pdata$z900_v_count_left_zeros_in_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_count_left_zeros_in_vmr
$pdata$z900_v_count_ones_in_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_count_ones_in_vmr
$pdata$z900_v_exclusive_or_to_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_exclusive_or_to_vmr
$pdata$z900_v_extract_vct DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_extract_vct
$pdata$z900_v_extract_vector_modes DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_extract_vector_modes
$pdata$z900_v_load_vct_from_address DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_load_vct_from_address
$pdata$z900_v_load_vix_from_address DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_load_vix_from_address
$pdata$z900_v_load_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_load_vmr
$pdata$z900_v_load_vmr_complement DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_load_vmr_complement
$pdata$z900_v_or_to_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_or_to_vmr
$pdata$z900_v_restore_vac DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_restore_vac
$pdata$z900_v_restore_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_restore_vmr
$pdata$z900_v_restore_vr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_restore_vr
$pdata$z900_v_restore_vsr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_restore_vsr
$pdata$z900_v_save_changed_vr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_save_changed_vr
$pdata$z900_v_save_vac DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_save_vac
$pdata$z900_v_save_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_save_vmr
$pdata$z900_v_save_vr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_save_vr
$pdata$z900_v_save_vsr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_save_vsr
$pdata$z900_v_set_vector_mask_mode DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_set_vector_mask_mode
$pdata$z900_v_store_vector_parameters DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_store_vector_parameters
$pdata$z900_v_store_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_store_vmr
$pdata$z900_v_test_vmr DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_v_test_vmr
$pdata$z900_store_cpu_counter_multiple DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_store_cpu_counter_multiple
$pdata$z900_tcpip DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$z900_tcpip
$pdata$z900_execute_opcode_e3________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$z900_execute_opcode_e3________xx
$pdata$z900_execute_opcode_e7________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$z900_execute_opcode_e7________xx
$pdata$z900_execute_opcode_eb________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$z900_execute_opcode_eb________xx
$pdata$z900_execute_opcode_ec________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$z900_execute_opcode_ec________xx
$pdata$z900_execute_opcode_ed________xx DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$z900_execute_opcode_ed________xx
$pdata$iprint_ASMFMT_b2xx DD imagerel $LN15
	DD	imagerel $LN15+449
	DD	imagerel $unwind$iprint_ASMFMT_b2xx
$pdata$iprint_ASMFMT_01xx DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$iprint_ASMFMT_01xx
$pdata$iprint_ASMFMT_a5_x DD imagerel $LN6
	DD	imagerel $LN6+173
	DD	imagerel $unwind$iprint_ASMFMT_a5_x
$pdata$iprint_ASMFMT_a7_x DD imagerel $LN6
	DD	imagerel $LN6+173
	DD	imagerel $unwind$iprint_ASMFMT_a7_x
$pdata$iprint_ASMFMT_b3xx DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$iprint_ASMFMT_b3xx
$pdata$iprint_ASMFMT_b9xx DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$iprint_ASMFMT_b9xx
$pdata$iprint_ASMFMT_c0_x DD imagerel $LN6
	DD	imagerel $LN6+173
	DD	imagerel $unwind$iprint_ASMFMT_c0_x
$pdata$iprint_ASMFMT_c2_x DD imagerel $LN6
	DD	imagerel $LN6+173
	DD	imagerel $unwind$iprint_ASMFMT_c2_x
$pdata$iprint_ASMFMT_c4_x DD imagerel $LN6
	DD	imagerel $LN6+173
	DD	imagerel $unwind$iprint_ASMFMT_c4_x
$pdata$iprint_ASMFMT_c6_x DD imagerel $LN6
	DD	imagerel $LN6+173
	DD	imagerel $unwind$iprint_ASMFMT_c6_x
$pdata$iprint_ASMFMT_c8_x DD imagerel $LN6
	DD	imagerel $LN6+173
	DD	imagerel $unwind$iprint_ASMFMT_c8_x
$pdata$iprint_ASMFMT_cc_x DD imagerel $LN6
	DD	imagerel $LN6+173
	DD	imagerel $unwind$iprint_ASMFMT_cc_x
$pdata$iprint_ASMFMT_e3xx DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$iprint_ASMFMT_e3xx
$pdata$iprint_ASMFMT_e5xx DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$iprint_ASMFMT_e5xx
$pdata$iprint_ASMFMT_e7xx DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$iprint_ASMFMT_e7xx
$pdata$iprint_ASMFMT_e6xx DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$iprint_ASMFMT_e6xx
$pdata$iprint_ASMFMT_ebxx DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$iprint_ASMFMT_ebxx
$pdata$iprint_ASMFMT_ecxx DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$iprint_ASMFMT_ecxx
$pdata$iprint_ASMFMT_edxx DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$iprint_ASMFMT_edxx
$pdata$replace_opcode_xx DD imagerel replace_opcode_xx
	DD	imagerel replace_opcode_xx+206
	DD	imagerel $unwind$replace_opcode_xx
$pdata$replace_opcode_xxxx DD imagerel replace_opcode_xxxx
	DD	imagerel replace_opcode_xxxx+200
	DD	imagerel $unwind$replace_opcode_xxxx
$pdata$replace_opcode_xx_x DD imagerel replace_opcode_xx_x
	DD	imagerel replace_opcode_xx_x+245
	DD	imagerel $unwind$replace_opcode_xx_x
$pdata$replace_opcode_xx________xx DD imagerel replace_opcode_xx________xx
	DD	imagerel replace_opcode_xx________xx+581
	DD	imagerel $unwind$replace_opcode_xx________xx
pdata	ENDS
_DATA	SEGMENT
	ORG $+7
s370_gen_opcode_b2xx DQ FLAT:s370_connect_channel_set
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170369
	DQ	FLAT:s370_disconnect_channel_set
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170370
	DQ	FLAT:s370_store_cpu_id
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170371
	DQ	FLAT:s370_store_channel_id
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170372
	DQ	FLAT:s370_set_clock
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170373
	DQ	FLAT:s370_store_clock
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170374
	DQ	FLAT:s370_set_clock_comparator
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170375
	DQ	FLAT:s370_store_clock_comparator
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170376
	DQ	FLAT:s370_set_cpu_timer
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170377
	DQ	FLAT:s370_store_cpu_timer
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170378
	DQ	FLAT:s370_set_psw_key_from_address
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170379
	DQ	FLAT:s370_insert_psw_key
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170380
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170381
	DQ	FLAT:s370_purge_translation_lookaside_buffer
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170382
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170383
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170384
	DQ	FLAT:s370_set_prefix
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170385
	DQ	FLAT:s370_store_prefix
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170386
	DQ	FLAT:s370_store_cpu_address
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170387
	DQ	FLAT:s370_reset_reference_bit
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170388
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170389
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170390
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170391
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170392
	DQ	FLAT:s370_program_call
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170393
	DQ	FLAT:s370_set_address_space_control
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170394
	DQ	FLAT:s370_compare_and_form_codeword
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170395
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170396
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170397
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170398
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170399
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170400
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170401
	DQ	FLAT:s370_invalidate_page_table_entry
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG170402
	DQ	FLAT:s370_insert_program_mask
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG170403
	DQ	FLAT:s370_insert_virtual_storage_key
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170404
	DQ	FLAT:s370_insert_address_space_control
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG170405
	DQ	FLAT:s370_set_secondary_asn
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG170406
	DQ	FLAT:s370_extract_primary_asn
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG170407
	DQ	FLAT:s370_extract_secondary_asn
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG170408
	DQ	FLAT:s370_program_transfer
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170409
	DQ	FLAT:s370_insert_storage_key_extended
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170410
	DQ	FLAT:s370_reset_reference_bit_extended
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170411
	DQ	FLAT:s370_set_storage_key_extended
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG170412
	DQ	FLAT:s370_test_block
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170413
	DQ	FLAT:s370_divide_float_ext_reg
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170414
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170415
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170416
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170417
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170418
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170419
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170420
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170421
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170422
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170423
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170424
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170425
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170426
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170427
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170428
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170429
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170430
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170431
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170432
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170433
	DQ	FLAT:s370_checksum
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170434
	DQ	FLAT:s370_add_frr
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170435
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170436
	DQ	FLAT:s370_squareroot_float_long_reg
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170437
	DQ	FLAT:s370_squareroot_float_short_reg
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170438
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170439
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG170440
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170441
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170442
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170443
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170444
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170445
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170446
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170447
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170448
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170449
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170450
	DQ	FLAT:s370_multiply_single_register
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170451
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170452
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170453
	DQ	FLAT:s370_move_string
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170454
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170455
	DQ	FLAT:s370_compare_until_substring_equal
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170456
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170457
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170458
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170459
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170460
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170461
	DQ	FLAT:s370_compare_logical_string
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170462
	DQ	FLAT:s370_search_string
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170463
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170464
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170465
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170466
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170467
	DQ	FLAT:s370_cmpsc_2012
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170468
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170469
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170470
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170471
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170472
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170473
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170474
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170475
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170476
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170477
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170478
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170479
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170480
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170481
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170482
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170483
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170484
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170485
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170486
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170487
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170488
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170489
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170490
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170491
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170492
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170493
	DQ	FLAT:s370_store_system_information
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170494
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170495
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170496
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170497
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170498
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170499
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170500
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170501
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170502
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170503
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170504
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170505
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170506
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170507
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170508
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170509
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170510
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170511
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170512
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170513
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170514
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170515
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170516
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170517
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170518
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170519
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170520
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170521
	DQ	FLAT:s370_set_bfp_rounding_mode_2bit
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170522
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170523
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170524
	DQ	FLAT:s370_store_fpc
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170525
	DQ	FLAT:s370_load_fpc
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170526
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170527
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170528
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170529
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170530
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170531
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170532
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170533
	DQ	FLAT:s370_translate_extended
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170534
	DQ	FLAT:s370_convert_utf16_to_utf8
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG170535
	DQ	FLAT:s370_convert_utf8_to_utf16
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG170536
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170537
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170538
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170539
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170540
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170541
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170542
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170543
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170544
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170545
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170546
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170547
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170548
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170549
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170550
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170551
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170552
	DQ	FLAT:s370_set_bfp_rounding_mode_3bit
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170553
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170554
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170555
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170556
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170557
	DQ	FLAT:s370_load_fpc_and_signal
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170558
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170559
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170560
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170561
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170562
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170563
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170564
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170565
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170566
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170567
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170568
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170569
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170570
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170571
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170572
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170573
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170574
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170575
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170576
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170577
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170578
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170579
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170580
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170581
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170582
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170583
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170584
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170585
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170586
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170587
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170588
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170589
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170590
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170591
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170592
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170593
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170594
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170595
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170596
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170597
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170598
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170599
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170600
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG170601
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170602
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170603
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170604
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG170605
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170606
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170607
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170608
	DQ	FLAT:s370_inter_user_communication_vehicle
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170609
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170610
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170611
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170612
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170613
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170614
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170615
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170616
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170617
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170618
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_IE
	DQ	FLAT:$SG170619
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170620
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170621
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170622
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG170623
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG170624
s390_gen_opcode_b2xx DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183950
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183951
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_cpu_id
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183952
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183953
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_clock
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183954
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_clock
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183955
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_clock_comparator
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183956
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_clock_comparator
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183957
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_cpu_timer
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183958
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_cpu_timer
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183959
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_psw_key_from_address
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183960
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_insert_psw_key
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183961
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183962
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_purge_translation_lookaside_buffer
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183963
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183964
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183965
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_prefix
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183966
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_prefix
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183967
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_cpu_address
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183968
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183969
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_start_interpretive_execution
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183970
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183971
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183972
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183973
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_program_call
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183974
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_address_space_control
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183975
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_compare_and_form_codeword
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG183976
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183977
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183978
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183979
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183980
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183981
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_service_call
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG183982
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_invalidate_page_table_entry
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG183983
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_insert_program_mask
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG183984
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_insert_virtual_storage_key
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG183985
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_insert_address_space_control
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG183986
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_secondary_asn
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG183987
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_extract_primary_asn
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG183988
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_extract_secondary_asn
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG183989
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_program_transfer
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG183990
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_insert_storage_key_extended
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG183991
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_reset_reference_bit_extended
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG183992
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_storage_key_extended
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG183993
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_test_block
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG183994
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_divide_float_ext_reg
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG183995
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_page_in
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG183996
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_page_out
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG183997
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_clear_subchannel
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183998
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_halt_subchannel
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG183999
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_modify_subchannel
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184000
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_start_subchannel
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184001
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_subchannel
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184002
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_test_subchannel
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184003
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_test_pending_interruption
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184004
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_address_limit
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184005
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_resume_subchannel
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184006
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_channel_report_word
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184007
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_channel_path_status
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184008
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_reset_channel_path
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184009
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_channel_monitor
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184010
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_zone_parameter
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184011
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_zone_parameter
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184012
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_test_pending_zone_interrupt
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184013
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_branch_and_stack
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184014
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_checksum
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184015
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184016
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184017
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_squareroot_float_long_reg
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184018
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_squareroot_float_short_reg
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184019
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_using_real_address
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184020
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_modify_stacked_state
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG184021
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_purge_accesslist_lookaside_buffer
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184022
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_extract_stacked_registers
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184023
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_extract_stacked_state
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184024
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_using_real_address
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184025
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_test_access
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184026
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_copy_access
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184027
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_access_register
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184028
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_extract_access_register
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184029
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_compare_and_swap_and_purge
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184030
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184031
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_multiply_single_register
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184032
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184033
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_move_page
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184034
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_move_string
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184035
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184036
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_compare_until_substring_equal
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184037
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_branch_in_subspace_group
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184038
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_invalidate_expanded_storage_block_entry
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184039
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_branch_and_set_authority
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184040
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184041
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184042
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_compare_logical_string
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184043
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_search_string
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184044
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_channel_subsystem_call
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184045
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184046
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184047
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_lock_page
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184048
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_cmpsc_2012
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184049
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184050
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184051
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184052
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184053
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184054
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184055
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184056
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184057
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184058
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184059
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184060
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184061
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184062
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184063
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184064
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184065
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_signal_adapter
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184066
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184067
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_cancel_subchannel
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184068
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_resume_program
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184069
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_clock_extended
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184070
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_address_space_control
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184071
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184072
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184073
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184074
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_system_information
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184075
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184076
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184077
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184078
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184079
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184080
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184081
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184082
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184083
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184084
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184085
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184086
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184087
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184088
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184089
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184090
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184091
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184092
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184093
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184094
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184095
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184096
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184097
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184098
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184099
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184100
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184101
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184102
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_bfp_rounding_mode_2bit
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184103
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184104
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184105
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_fpc
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184106
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_fpc
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184107
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184108
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184109
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184110
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184111
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184112
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184113
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184114
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_translate_extended
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184115
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_utf16_to_utf8
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG184116
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_utf8_to_utf16
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG184117
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184118
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184119
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184120
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184121
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184122
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184123
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184124
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184125
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_facility_list_extended
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184126
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_facility_list
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184127
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184128
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184129
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184130
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184131
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184132
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184133
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_bfp_rounding_mode_3bit
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184134
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_dfp_rounding_mode
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184135
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184136
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184137
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184138
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_fpc_and_signal
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184139
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184140
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184141
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184142
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184143
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184144
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184145
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184146
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184147
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184148
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184149
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184150
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184151
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184152
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184153
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184154
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184155
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184156
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184157
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184158
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184159
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184160
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184161
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184162
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184163
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184164
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184165
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184166
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184167
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184168
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184169
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184170
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184171
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184172
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184173
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184174
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184175
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184176
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184177
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184178
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184179
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184180
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184181
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG184182
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184183
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184184
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184185
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG184186
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184187
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184188
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184189
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_inter_user_communication_vehicle
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184190
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184191
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184192
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184193
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184194
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184195
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184196
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184197
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184198
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184199
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_IE
	DQ	FLAT:$SG184200
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184201
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184202
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184203
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG184204
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_trap4
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG184205
z900_gen_opcode_b2xx DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_bear
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197005
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_bear
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197006
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_cpu_id
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197007
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197008
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_clock
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197009
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_clock
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197010
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_clock_comparator
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197011
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_clock_comparator
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197012
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_cpu_timer
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197013
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_cpu_timer
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197014
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_psw_key_from_address
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197015
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_psw_key
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197016
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197017
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_purge_translation_lookaside_buffer
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197018
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197019
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197020
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_prefix
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197021
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_prefix
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197022
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_cpu_address
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197023
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197024
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_start_interpretive_execution
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197025
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197026
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197027
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197028
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_program_call
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197029
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_address_space_control
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197030
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_and_form_codeword
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197031
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197032
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197033
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197034
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197035
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197036
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_service_call
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197037
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_invalidate_page_table_entry
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG197038
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_program_mask
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG197039
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_virtual_storage_key
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197040
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_address_space_control
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG197041
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_secondary_asn
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG197042
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_primary_asn
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG197043
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_secondary_asn
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG197044
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_program_transfer
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197045
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_storage_key_extended
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197046
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_reset_reference_bit_extended
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197047
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_storage_key_extended
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG197048
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_test_block
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197049
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_divide_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197050
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_page_in
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197051
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_page_out
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197052
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_clear_subchannel
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197053
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_halt_subchannel
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197054
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_modify_subchannel
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197055
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_start_subchannel
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197056
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_subchannel
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197057
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_test_subchannel
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197058
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_test_pending_interruption
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197059
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_address_limit
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197060
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_resume_subchannel
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197061
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_channel_report_word
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197062
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_channel_path_status
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197063
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_reset_channel_path
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197064
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_channel_monitor
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197065
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_zone_parameter
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197066
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_zone_parameter
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197067
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_test_pending_zone_interrupt
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197068
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_and_stack
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197069
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_checksum
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197070
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197071
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197072
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_squareroot_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197073
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_squareroot_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197074
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_using_real_address
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197075
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_modify_stacked_state
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG197076
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_purge_accesslist_lookaside_buffer
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197077
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_stacked_registers
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197078
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_stacked_state
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197079
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_using_real_address
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197080
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_test_access
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197081
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_copy_access
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197082
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_access_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197083
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_access_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197084
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_and_swap_and_purge
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197085
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197086
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_single_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197087
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197088
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_move_page
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197089
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_move_string
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197090
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_hypervisor_information
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197091
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_until_substring_equal
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197092
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_in_subspace_group
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197093
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_invalidate_expanded_storage_block_entry
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197094
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_and_set_authority
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197095
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197096
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197097
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_string
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197098
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_search_string
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197099
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_channel_subsystem_call
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197100
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197101
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197102
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_lock_page
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197103
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_cmpsc_2012
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197104
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197105
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_vector_summary
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197106
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197107
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197108
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197109
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197110
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197111
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197112
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197113
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197114
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197115
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197116
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197117
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197118
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197119
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197120
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_signal_adapter
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197121
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197122
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_cancel_subchannel
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197123
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_resume_program
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197124
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_clock_extended
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197125
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_address_space_control
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197126
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197127
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197128
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_clock
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197129
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_system_information
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197130
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197131
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197132
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_program_parameter
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197133
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197134
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197135
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197136
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197137
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197138
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197139
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197140
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197141
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197142
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197143
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197144
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197145
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197146
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197147
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197148
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197149
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197150
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197151
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197152
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197153
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197154
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197155
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197156
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197157
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_bfp_rounding_mode_2bit
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197158
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197159
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197160
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_fpc
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197161
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_fpc
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197162
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197163
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197164
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197165
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197166
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197167
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197168
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197169
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_translate_extended
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197170
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_utf16_to_utf8
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG197171
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_utf8_to_utf16
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG197172
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197173
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197174
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197175
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197176
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197177
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197178
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197179
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197180
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_facility_list_extended
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197181
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_facility_list
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197182
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_program_status_word_extended
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197183
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197184
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197185
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197186
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197187
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197188
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_bfp_rounding_mode_3bit
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197189
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_dfp_rounding_mode
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197190
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197191
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197192
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197193
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_fpc_and_signal
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197194
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197195
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197196
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197197
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197198
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197199
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197200
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197201
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197202
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197203
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197204
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197205
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197206
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197207
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197208
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197209
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197210
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197211
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197212
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197213
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197214
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197215
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197216
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197217
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197218
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197219
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197220
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197221
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197222
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197223
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197224
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197225
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197226
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197227
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197228
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197229
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197230
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197231
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197232
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197233
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197234
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197235
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197236
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_perform_processor_assist
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG197237
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197238
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197239
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197240
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_transaction_nesting_depth
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG197241
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197242
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197243
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197244
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_inter_user_communication_vehicle
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197245
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197246
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197247
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197248
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197249
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197250
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197251
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197252
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_transaction_end
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197253
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197254
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_next_instruction_access_intent
	DQ	FLAT:iprint_ASMFMT_IE
	DQ	FLAT:$SG197255
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197256
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_transaction_abort
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197257
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197258
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG197259
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_trap4
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG197260
gen_opcode_table DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199480
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_01xx
	DQ	FLAT:$SG199481
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199482
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199483
	DQ	FLAT:s370_set_program_mask
	DQ	FLAT:s390_set_program_mask
	DQ	FLAT:z900_set_program_mask
	DQ	FLAT:iprint_ASMFMT_RR_R1
	DQ	FLAT:$SG199484
	DQ	FLAT:s370_branch_and_link_register
	DQ	FLAT:s390_branch_and_link_register
	DQ	FLAT:z900_branch_and_link_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199485
	DQ	FLAT:s370_branch_on_count_register
	DQ	FLAT:s390_branch_on_count_register
	DQ	FLAT:z900_branch_on_count_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199486
	DQ	FLAT:s370_branch_on_condition_register
	DQ	FLAT:s390_branch_on_condition_register
	DQ	FLAT:z900_branch_on_condition_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199487
	DQ	FLAT:s370_set_storage_key
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199488
	DQ	FLAT:s370_insert_storage_key
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199489
	DQ	FLAT:s370_supervisor_call
	DQ	FLAT:s390_supervisor_call
	DQ	FLAT:z900_supervisor_call
	DQ	FLAT:iprint_ASMFMT_RR_SVC
	DQ	FLAT:$SG199490
	DQ	FLAT:s370_branch_and_set_mode
	DQ	FLAT:s390_branch_and_set_mode
	DQ	FLAT:z900_branch_and_set_mode
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199491
	DQ	FLAT:s370_branch_and_save_and_set_mode
	DQ	FLAT:s390_branch_and_save_and_set_mode
	DQ	FLAT:z900_branch_and_save_and_set_mode
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199492
	DQ	FLAT:s370_branch_and_save_register
	DQ	FLAT:s390_branch_and_save_register
	DQ	FLAT:z900_branch_and_save_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199493
	DQ	FLAT:s370_move_long
	DQ	FLAT:s390_move_long
	DQ	FLAT:z900_move_long
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199494
	DQ	FLAT:s370_compare_logical_character_long
	DQ	FLAT:s390_compare_logical_character_long
	DQ	FLAT:z900_compare_logical_character_long
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199495
	DQ	FLAT:s370_load_positive_register
	DQ	FLAT:s390_load_positive_register
	DQ	FLAT:z900_load_positive_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199496
	DQ	FLAT:s370_load_negative_register
	DQ	FLAT:s390_load_negative_register
	DQ	FLAT:z900_load_negative_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199497
	DQ	FLAT:s370_load_and_test_register
	DQ	FLAT:s390_load_and_test_register
	DQ	FLAT:z900_load_and_test_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199498
	DQ	FLAT:s370_load_complement_register
	DQ	FLAT:s390_load_complement_register
	DQ	FLAT:z900_load_complement_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199499
	DQ	FLAT:s370_and_register
	DQ	FLAT:s390_and_register
	DQ	FLAT:z900_and_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199500
	DQ	FLAT:s370_compare_logical_register
	DQ	FLAT:s390_compare_logical_register
	DQ	FLAT:z900_compare_logical_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199501
	DQ	FLAT:s370_or_register
	DQ	FLAT:s390_or_register
	DQ	FLAT:z900_or_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199502
	DQ	FLAT:s370_exclusive_or_register
	DQ	FLAT:s390_exclusive_or_register
	DQ	FLAT:z900_exclusive_or_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199503
	DQ	FLAT:s370_load_register
	DQ	FLAT:s390_load_register
	DQ	FLAT:z900_load_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199504
	DQ	FLAT:s370_compare_register
	DQ	FLAT:s390_compare_register
	DQ	FLAT:z900_compare_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199505
	DQ	FLAT:s370_add_register
	DQ	FLAT:s390_add_register
	DQ	FLAT:z900_add_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199506
	DQ	FLAT:s370_subtract_register
	DQ	FLAT:s390_subtract_register
	DQ	FLAT:z900_subtract_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199507
	DQ	FLAT:s370_multiply_register
	DQ	FLAT:s390_multiply_register
	DQ	FLAT:z900_multiply_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199508
	DQ	FLAT:s370_divide_register
	DQ	FLAT:s390_divide_register
	DQ	FLAT:z900_divide_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199509
	DQ	FLAT:s370_add_logical_register
	DQ	FLAT:s390_add_logical_register
	DQ	FLAT:z900_add_logical_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199510
	DQ	FLAT:s370_subtract_logical_register
	DQ	FLAT:s390_subtract_logical_register
	DQ	FLAT:z900_subtract_logical_register
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199511
	DQ	FLAT:s370_load_positive_float_long_reg
	DQ	FLAT:s390_load_positive_float_long_reg
	DQ	FLAT:z900_load_positive_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199512
	DQ	FLAT:s370_load_negative_float_long_reg
	DQ	FLAT:s390_load_negative_float_long_reg
	DQ	FLAT:z900_load_negative_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199513
	DQ	FLAT:s370_load_and_test_float_long_reg
	DQ	FLAT:s390_load_and_test_float_long_reg
	DQ	FLAT:z900_load_and_test_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199514
	DQ	FLAT:s370_load_complement_float_long_reg
	DQ	FLAT:s390_load_complement_float_long_reg
	DQ	FLAT:z900_load_complement_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199515
	DQ	FLAT:s370_halve_float_long_reg
	DQ	FLAT:s390_halve_float_long_reg
	DQ	FLAT:z900_halve_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199516
	DQ	FLAT:s370_load_rounded_float_long_reg
	DQ	FLAT:s390_load_rounded_float_long_reg
	DQ	FLAT:z900_load_rounded_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199517
	DQ	FLAT:s370_multiply_float_ext_reg
	DQ	FLAT:s390_multiply_float_ext_reg
	DQ	FLAT:z900_multiply_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199518
	DQ	FLAT:s370_multiply_float_long_to_ext_reg
	DQ	FLAT:s390_multiply_float_long_to_ext_reg
	DQ	FLAT:z900_multiply_float_long_to_ext_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199519
	DQ	FLAT:s370_load_float_long_reg
	DQ	FLAT:s390_load_float_long_reg
	DQ	FLAT:z900_load_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199520
	DQ	FLAT:s370_compare_float_long_reg
	DQ	FLAT:s390_compare_float_long_reg
	DQ	FLAT:z900_compare_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199521
	DQ	FLAT:s370_add_float_long_reg
	DQ	FLAT:s390_add_float_long_reg
	DQ	FLAT:z900_add_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199522
	DQ	FLAT:s370_subtract_float_long_reg
	DQ	FLAT:s390_subtract_float_long_reg
	DQ	FLAT:z900_subtract_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199523
	DQ	FLAT:s370_multiply_float_long_reg
	DQ	FLAT:s390_multiply_float_long_reg
	DQ	FLAT:z900_multiply_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199524
	DQ	FLAT:s370_divide_float_long_reg
	DQ	FLAT:s390_divide_float_long_reg
	DQ	FLAT:z900_divide_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199525
	DQ	FLAT:s370_add_unnormal_float_long_reg
	DQ	FLAT:s390_add_unnormal_float_long_reg
	DQ	FLAT:z900_add_unnormal_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199526
	DQ	FLAT:s370_subtract_unnormal_float_long_reg
	DQ	FLAT:s390_subtract_unnormal_float_long_reg
	DQ	FLAT:z900_subtract_unnormal_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199527
	DQ	FLAT:s370_load_positive_float_short_reg
	DQ	FLAT:s390_load_positive_float_short_reg
	DQ	FLAT:z900_load_positive_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199528
	DQ	FLAT:s370_load_negative_float_short_reg
	DQ	FLAT:s390_load_negative_float_short_reg
	DQ	FLAT:z900_load_negative_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199529
	DQ	FLAT:s370_load_and_test_float_short_reg
	DQ	FLAT:s390_load_and_test_float_short_reg
	DQ	FLAT:z900_load_and_test_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199530
	DQ	FLAT:s370_load_complement_float_short_reg
	DQ	FLAT:s390_load_complement_float_short_reg
	DQ	FLAT:z900_load_complement_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199531
	DQ	FLAT:s370_halve_float_short_reg
	DQ	FLAT:s390_halve_float_short_reg
	DQ	FLAT:z900_halve_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199532
	DQ	FLAT:s370_load_rounded_float_short_reg
	DQ	FLAT:s390_load_rounded_float_short_reg
	DQ	FLAT:z900_load_rounded_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199533
	DQ	FLAT:s370_add_float_ext_reg
	DQ	FLAT:s390_add_float_ext_reg
	DQ	FLAT:z900_add_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199534
	DQ	FLAT:s370_subtract_float_ext_reg
	DQ	FLAT:s390_subtract_float_ext_reg
	DQ	FLAT:z900_subtract_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199535
	DQ	FLAT:s370_load_float_short_reg
	DQ	FLAT:s390_load_float_short_reg
	DQ	FLAT:z900_load_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199536
	DQ	FLAT:s370_compare_float_short_reg
	DQ	FLAT:s390_compare_float_short_reg
	DQ	FLAT:z900_compare_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199537
	DQ	FLAT:s370_add_float_short_reg
	DQ	FLAT:s390_add_float_short_reg
	DQ	FLAT:z900_add_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199538
	DQ	FLAT:s370_subtract_float_short_reg
	DQ	FLAT:s390_subtract_float_short_reg
	DQ	FLAT:z900_subtract_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199539
	DQ	FLAT:s370_multiply_float_short_to_long_reg
	DQ	FLAT:s390_multiply_float_short_to_long_reg
	DQ	FLAT:z900_multiply_float_short_to_long_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199540
	DQ	FLAT:s370_divide_float_short_reg
	DQ	FLAT:s390_divide_float_short_reg
	DQ	FLAT:z900_divide_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199541
	DQ	FLAT:s370_add_unnormal_float_short_reg
	DQ	FLAT:s390_add_unnormal_float_short_reg
	DQ	FLAT:z900_add_unnormal_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199542
	DQ	FLAT:s370_subtract_unnormal_float_short_reg
	DQ	FLAT:s390_subtract_unnormal_float_short_reg
	DQ	FLAT:z900_subtract_unnormal_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG199543
	DQ	FLAT:s370_store_halfword
	DQ	FLAT:s390_store_halfword
	DQ	FLAT:z900_store_halfword
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199544
	DQ	FLAT:s370_load_address
	DQ	FLAT:s390_load_address
	DQ	FLAT:z900_load_address
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199545
	DQ	FLAT:s370_store_character
	DQ	FLAT:s390_store_character
	DQ	FLAT:z900_store_character
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199546
	DQ	FLAT:s370_insert_character
	DQ	FLAT:s390_insert_character
	DQ	FLAT:z900_insert_character
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199547
	DQ	FLAT:s370_execute
	DQ	FLAT:s390_execute
	DQ	FLAT:z900_execute
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199548
	DQ	FLAT:s370_branch_and_link
	DQ	FLAT:s390_branch_and_link
	DQ	FLAT:z900_branch_and_link
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199549
	DQ	FLAT:s370_branch_on_count
	DQ	FLAT:s390_branch_on_count
	DQ	FLAT:z900_branch_on_count
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199550
	DQ	FLAT:s370_branch_on_condition
	DQ	FLAT:s390_branch_on_condition
	DQ	FLAT:z900_branch_on_condition
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199551
	DQ	FLAT:s370_load_halfword
	DQ	FLAT:s390_load_halfword
	DQ	FLAT:z900_load_halfword
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199552
	DQ	FLAT:s370_compare_halfword
	DQ	FLAT:s390_compare_halfword
	DQ	FLAT:z900_compare_halfword
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199553
	DQ	FLAT:s370_add_halfword
	DQ	FLAT:s390_add_halfword
	DQ	FLAT:z900_add_halfword
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199554
	DQ	FLAT:s370_subtract_halfword
	DQ	FLAT:s390_subtract_halfword
	DQ	FLAT:z900_subtract_halfword
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199555
	DQ	FLAT:s370_multiply_halfword
	DQ	FLAT:s390_multiply_halfword
	DQ	FLAT:z900_multiply_halfword
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199556
	DQ	FLAT:s370_branch_and_save
	DQ	FLAT:s390_branch_and_save
	DQ	FLAT:z900_branch_and_save
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199557
	DQ	FLAT:s370_convert_to_decimal
	DQ	FLAT:s390_convert_to_decimal
	DQ	FLAT:z900_convert_to_decimal
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199558
	DQ	FLAT:s370_convert_to_binary
	DQ	FLAT:s390_convert_to_binary
	DQ	FLAT:z900_convert_to_binary
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199559
	DQ	FLAT:s370_store
	DQ	FLAT:s390_store
	DQ	FLAT:z900_store
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199560
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_address_extended
	DQ	FLAT:z900_load_address_extended
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199561
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199562
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199563
	DQ	FLAT:s370_and
	DQ	FLAT:s390_and
	DQ	FLAT:z900_and
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199564
	DQ	FLAT:s370_compare_logical
	DQ	FLAT:s390_compare_logical
	DQ	FLAT:z900_compare_logical
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199565
	DQ	FLAT:s370_or
	DQ	FLAT:s390_or
	DQ	FLAT:z900_or
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199566
	DQ	FLAT:s370_exclusive_or
	DQ	FLAT:s390_exclusive_or
	DQ	FLAT:z900_exclusive_or
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199567
	DQ	FLAT:s370_load
	DQ	FLAT:s390_load
	DQ	FLAT:z900_load
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199568
	DQ	FLAT:s370_compare
	DQ	FLAT:s390_compare
	DQ	FLAT:z900_compare
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199569
	DQ	FLAT:s370_add
	DQ	FLAT:s390_add
	DQ	FLAT:z900_add
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199570
	DQ	FLAT:s370_subtract
	DQ	FLAT:s390_subtract
	DQ	FLAT:z900_subtract
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199571
	DQ	FLAT:s370_multiply
	DQ	FLAT:s390_multiply
	DQ	FLAT:z900_multiply
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199572
	DQ	FLAT:s370_divide
	DQ	FLAT:s390_divide
	DQ	FLAT:z900_divide
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199573
	DQ	FLAT:s370_add_logical
	DQ	FLAT:s390_add_logical
	DQ	FLAT:z900_add_logical
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199574
	DQ	FLAT:s370_subtract_logical
	DQ	FLAT:s390_subtract_logical
	DQ	FLAT:z900_subtract_logical
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199575
	DQ	FLAT:s370_store_float_long
	DQ	FLAT:s390_store_float_long
	DQ	FLAT:z900_store_float_long
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199576
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199577
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199578
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199579
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199580
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199581
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199582
	DQ	FLAT:s370_multiply_float_long_to_ext
	DQ	FLAT:s390_multiply_float_long_to_ext
	DQ	FLAT:z900_multiply_float_long_to_ext
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199583
	DQ	FLAT:s370_load_float_long
	DQ	FLAT:s390_load_float_long
	DQ	FLAT:z900_load_float_long
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199584
	DQ	FLAT:s370_compare_float_long
	DQ	FLAT:s390_compare_float_long
	DQ	FLAT:z900_compare_float_long
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199585
	DQ	FLAT:s370_add_float_long
	DQ	FLAT:s390_add_float_long
	DQ	FLAT:z900_add_float_long
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199586
	DQ	FLAT:s370_subtract_float_long
	DQ	FLAT:s390_subtract_float_long
	DQ	FLAT:z900_subtract_float_long
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199587
	DQ	FLAT:s370_multiply_float_long
	DQ	FLAT:s390_multiply_float_long
	DQ	FLAT:z900_multiply_float_long
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199588
	DQ	FLAT:s370_divide_float_long
	DQ	FLAT:s390_divide_float_long
	DQ	FLAT:z900_divide_float_long
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199589
	DQ	FLAT:s370_add_unnormal_float_long
	DQ	FLAT:s390_add_unnormal_float_long
	DQ	FLAT:z900_add_unnormal_float_long
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199590
	DQ	FLAT:s370_subtract_unnormal_float_long
	DQ	FLAT:s390_subtract_unnormal_float_long
	DQ	FLAT:z900_subtract_unnormal_float_long
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199591
	DQ	FLAT:s370_store_float_short
	DQ	FLAT:s390_store_float_short
	DQ	FLAT:z900_store_float_short
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199592
	DQ	FLAT:s370_multiply_single
	DQ	FLAT:s390_multiply_single
	DQ	FLAT:z900_multiply_single
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199593
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199594
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199595
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199596
	DQ	FLAT:s370_tcpip
	DQ	FLAT:s390_tcpip
	DQ	FLAT:z900_tcpip
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199597
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199598
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199599
	DQ	FLAT:s370_load_float_short
	DQ	FLAT:s390_load_float_short
	DQ	FLAT:z900_load_float_short
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199600
	DQ	FLAT:s370_compare_float_short
	DQ	FLAT:s390_compare_float_short
	DQ	FLAT:z900_compare_float_short
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199601
	DQ	FLAT:s370_add_float_short
	DQ	FLAT:s390_add_float_short
	DQ	FLAT:z900_add_float_short
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199602
	DQ	FLAT:s370_subtract_float_short
	DQ	FLAT:s390_subtract_float_short
	DQ	FLAT:z900_subtract_float_short
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199603
	DQ	FLAT:s370_multiply_float_short_to_long
	DQ	FLAT:s390_multiply_float_short_to_long
	DQ	FLAT:z900_multiply_float_short_to_long
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199604
	DQ	FLAT:s370_divide_float_short
	DQ	FLAT:s390_divide_float_short
	DQ	FLAT:z900_divide_float_short
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199605
	DQ	FLAT:s370_add_unnormal_float_short
	DQ	FLAT:s390_add_unnormal_float_short
	DQ	FLAT:z900_add_unnormal_float_short
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199606
	DQ	FLAT:s370_subtract_unnormal_float_short
	DQ	FLAT:s390_subtract_unnormal_float_short
	DQ	FLAT:z900_subtract_unnormal_float_short
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199607
	DQ	FLAT:s370_set_system_mask
	DQ	FLAT:s390_set_system_mask
	DQ	FLAT:z900_set_system_mask
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG199608
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199609
	DQ	FLAT:s370_load_program_status_word
	DQ	FLAT:s390_load_program_status_word
	DQ	FLAT:z900_load_program_status_word
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG199610
	DQ	FLAT:s370_diagnose
	DQ	FLAT:s390_diagnose
	DQ	FLAT:z900_diagnose
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199611
	DQ	FLAT:s370_branch_relative_on_index_high
	DQ	FLAT:s390_branch_relative_on_index_high
	DQ	FLAT:z900_branch_relative_on_index_high
	DQ	FLAT:iprint_ASMFMT_RSI
	DQ	FLAT:$SG199612
	DQ	FLAT:s370_branch_relative_on_index_low_or_equal
	DQ	FLAT:s390_branch_relative_on_index_low_or_equal
	DQ	FLAT:z900_branch_relative_on_index_low_or_equal
	DQ	FLAT:iprint_ASMFMT_RSI
	DQ	FLAT:$SG199613
	DQ	FLAT:s370_branch_on_index_high
	DQ	FLAT:s390_branch_on_index_high
	DQ	FLAT:z900_branch_on_index_high
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199614
	DQ	FLAT:s370_branch_on_index_low_or_equal
	DQ	FLAT:s390_branch_on_index_low_or_equal
	DQ	FLAT:z900_branch_on_index_low_or_equal
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199615
	DQ	FLAT:s370_shift_right_single_logical
	DQ	FLAT:s390_shift_right_single_logical
	DQ	FLAT:z900_shift_right_single_logical
	DQ	FLAT:iprint_ASMFMT_RS_R1D2B2
	DQ	FLAT:$SG199616
	DQ	FLAT:s370_shift_left_single_logical
	DQ	FLAT:s390_shift_left_single_logical
	DQ	FLAT:z900_shift_left_single_logical
	DQ	FLAT:iprint_ASMFMT_RS_R1D2B2
	DQ	FLAT:$SG199617
	DQ	FLAT:s370_shift_right_single
	DQ	FLAT:s390_shift_right_single
	DQ	FLAT:z900_shift_right_single
	DQ	FLAT:iprint_ASMFMT_RS_R1D2B2
	DQ	FLAT:$SG199618
	DQ	FLAT:s370_shift_left_single
	DQ	FLAT:s390_shift_left_single
	DQ	FLAT:z900_shift_left_single
	DQ	FLAT:iprint_ASMFMT_RS_R1D2B2
	DQ	FLAT:$SG199619
	DQ	FLAT:s370_shift_right_double_logical
	DQ	FLAT:s390_shift_right_double_logical
	DQ	FLAT:z900_shift_right_double_logical
	DQ	FLAT:iprint_ASMFMT_RS_R1D2B2
	DQ	FLAT:$SG199620
	DQ	FLAT:s370_shift_left_double_logical
	DQ	FLAT:s390_shift_left_double_logical
	DQ	FLAT:z900_shift_left_double_logical
	DQ	FLAT:iprint_ASMFMT_RS_R1D2B2
	DQ	FLAT:$SG199621
	DQ	FLAT:s370_shift_right_double
	DQ	FLAT:s390_shift_right_double
	DQ	FLAT:z900_shift_right_double
	DQ	FLAT:iprint_ASMFMT_RS_R1D2B2
	DQ	FLAT:$SG199622
	DQ	FLAT:s370_shift_left_double
	DQ	FLAT:s390_shift_left_double
	DQ	FLAT:z900_shift_left_double
	DQ	FLAT:iprint_ASMFMT_RS_R1D2B2
	DQ	FLAT:$SG199623
	DQ	FLAT:s370_store_multiple
	DQ	FLAT:s390_store_multiple
	DQ	FLAT:z900_store_multiple
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199624
	DQ	FLAT:s370_test_under_mask
	DQ	FLAT:s390_test_under_mask
	DQ	FLAT:z900_test_under_mask
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG199625
	DQ	FLAT:s370_move_immediate
	DQ	FLAT:s390_move_immediate
	DQ	FLAT:z900_move_immediate
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG199626
	DQ	FLAT:s370_test_and_set
	DQ	FLAT:s390_test_and_set
	DQ	FLAT:z900_test_and_set
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG199627
	DQ	FLAT:s370_and_immediate
	DQ	FLAT:s390_and_immediate
	DQ	FLAT:z900_and_immediate
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG199628
	DQ	FLAT:s370_compare_logical_immediate
	DQ	FLAT:s390_compare_logical_immediate
	DQ	FLAT:z900_compare_logical_immediate
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG199629
	DQ	FLAT:s370_or_immediate
	DQ	FLAT:s390_or_immediate
	DQ	FLAT:z900_or_immediate
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG199630
	DQ	FLAT:s370_exclusive_or_immediate
	DQ	FLAT:s390_exclusive_or_immediate
	DQ	FLAT:z900_exclusive_or_immediate
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG199631
	DQ	FLAT:s370_load_multiple
	DQ	FLAT:s390_load_multiple
	DQ	FLAT:z900_load_multiple
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199632
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_trace
	DQ	FLAT:z900_trace
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199633
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_access_multiple
	DQ	FLAT:z900_load_access_multiple
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199634
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_store_access_multiple
	DQ	FLAT:z900_store_access_multiple
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199635
	DQ	FLAT:s370_start_io
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG199636
	DQ	FLAT:s370_test_io
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG199637
	DQ	FLAT:s370_halt_io
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG199638
	DQ	FLAT:s370_test_channel
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG199639
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199640
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199641
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199642
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199643
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199644
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_a5_x
	DQ	FLAT:$SG199645
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199646
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_a7_x
	DQ	FLAT:$SG199647
	DQ	FLAT:s370_move_long_extended
	DQ	FLAT:s390_move_long_extended
	DQ	FLAT:z900_move_long_extended
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199648
	DQ	FLAT:s370_compare_logical_long_extended
	DQ	FLAT:s390_compare_logical_long_extended
	DQ	FLAT:z900_compare_logical_long_extended
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199649
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199650
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199651
	DQ	FLAT:s370_store_then_and_system_mask
	DQ	FLAT:s390_store_then_and_system_mask
	DQ	FLAT:z900_store_then_and_system_mask
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG199652
	DQ	FLAT:s370_store_then_or_system_mask
	DQ	FLAT:s390_store_then_or_system_mask
	DQ	FLAT:z900_store_then_or_system_mask
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG199653
	DQ	FLAT:s370_signal_processor
	DQ	FLAT:s390_signal_processor
	DQ	FLAT:z900_signal_processor
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199654
	DQ	FLAT:s370_monitor_call
	DQ	FLAT:s390_monitor_call
	DQ	FLAT:z900_monitor_call
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG199655
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199656
	DQ	FLAT:s370_load_real_address
	DQ	FLAT:s390_load_real_address
	DQ	FLAT:z900_load_real_address
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG199657
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_b2xx
	DQ	FLAT:$SG199658
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_b3xx
	DQ	FLAT:$SG199659
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199660
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199661
	DQ	FLAT:s370_store_control
	DQ	FLAT:s390_store_control
	DQ	FLAT:z900_store_control
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199662
	DQ	FLAT:s370_load_control
	DQ	FLAT:s390_load_control
	DQ	FLAT:z900_load_control
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199663
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199664
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_b9xx
	DQ	FLAT:$SG199665
	DQ	FLAT:s370_compare_and_swap
	DQ	FLAT:s390_compare_and_swap
	DQ	FLAT:z900_compare_and_swap
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199666
	DQ	FLAT:s370_compare_double_and_swap
	DQ	FLAT:s390_compare_double_and_swap
	DQ	FLAT:z900_compare_double_and_swap
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199667
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199668
	DQ	FLAT:s370_compare_logical_characters_under_mask
	DQ	FLAT:s390_compare_logical_characters_under_mask
	DQ	FLAT:z900_compare_logical_characters_under_mask
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199669
	DQ	FLAT:s370_store_characters_under_mask
	DQ	FLAT:s390_store_characters_under_mask
	DQ	FLAT:z900_store_characters_under_mask
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199670
	DQ	FLAT:s370_insert_characters_under_mask
	DQ	FLAT:s390_insert_characters_under_mask
	DQ	FLAT:z900_insert_characters_under_mask
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG199671
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_c0_x
	DQ	FLAT:$SG199672
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199673
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_c2_x
	DQ	FLAT:$SG199674
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199675
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_c4_x
	DQ	FLAT:$SG199676
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_prediction_relative_preload
	DQ	FLAT:iprint_ASMFMT_MII_A
	DQ	FLAT:$SG199677
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_c6_x
	DQ	FLAT:$SG199678
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_prediction_preload
	DQ	FLAT:iprint_ASMFMT_SMI_A
	DQ	FLAT:$SG199679
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_c8_x
	DQ	FLAT:$SG199680
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199681
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199682
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199683
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_cc_x
	DQ	FLAT:$SG199684
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199685
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199686
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199687
	DQ	FLAT:s370_translate_and_test_reverse
	DQ	FLAT:s390_translate_and_test_reverse
	DQ	FLAT:z900_translate_and_test_reverse
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199688
	DQ	FLAT:s370_move_numerics
	DQ	FLAT:s390_move_numerics
	DQ	FLAT:z900_move_numerics
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199689
	DQ	FLAT:s370_move_character
	DQ	FLAT:s390_move_character
	DQ	FLAT:z900_move_character
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199690
	DQ	FLAT:s370_move_zones
	DQ	FLAT:s390_move_zones
	DQ	FLAT:z900_move_zones
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199691
	DQ	FLAT:s370_and_character
	DQ	FLAT:s390_and_character
	DQ	FLAT:z900_and_character
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199692
	DQ	FLAT:s370_compare_logical_character
	DQ	FLAT:s390_compare_logical_character
	DQ	FLAT:z900_compare_logical_character
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199693
	DQ	FLAT:s370_or_character
	DQ	FLAT:s390_or_character
	DQ	FLAT:z900_or_character
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199694
	DQ	FLAT:s370_exclusive_or_character
	DQ	FLAT:s390_exclusive_or_character
	DQ	FLAT:z900_exclusive_or_character
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199695
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199696
	DQ	FLAT:s370_move_with_key
	DQ	FLAT:s390_move_with_key
	DQ	FLAT:z900_move_with_key
	DQ	FLAT:iprint_ASMFMT_SS_R3
	DQ	FLAT:$SG199697
	DQ	FLAT:s370_move_to_primary
	DQ	FLAT:s390_move_to_primary
	DQ	FLAT:z900_move_to_primary
	DQ	FLAT:iprint_ASMFMT_SS_R3
	DQ	FLAT:$SG199698
	DQ	FLAT:s370_move_to_secondary
	DQ	FLAT:s390_move_to_secondary
	DQ	FLAT:z900_move_to_secondary
	DQ	FLAT:iprint_ASMFMT_SS_R3
	DQ	FLAT:$SG199699
	DQ	FLAT:s370_translate
	DQ	FLAT:s390_translate
	DQ	FLAT:z900_translate
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199700
	DQ	FLAT:s370_translate_and_test
	DQ	FLAT:s390_translate_and_test
	DQ	FLAT:z900_translate_and_test
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199701
	DQ	FLAT:s370_edit_x_edit_and_mark
	DQ	FLAT:s390_edit_x_edit_and_mark
	DQ	FLAT:z900_edit_x_edit_and_mark
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199702
	DQ	FLAT:s370_edit_x_edit_and_mark
	DQ	FLAT:s390_edit_x_edit_and_mark
	DQ	FLAT:z900_edit_x_edit_and_mark
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199703
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199704
	DQ	FLAT:s370_pack_unicode
	DQ	FLAT:s390_pack_unicode
	DQ	FLAT:z900_pack_unicode
	DQ	FLAT:iprint_ASMFMT_SS_L2
	DQ	FLAT:$SG199705
	DQ	FLAT:s370_unpack_unicode
	DQ	FLAT:s390_unpack_unicode
	DQ	FLAT:z900_unpack_unicode
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199706
	DQ	FLAT:s370_execute_opcode_e3________xx
	DQ	FLAT:s390_execute_opcode_e3________xx
	DQ	FLAT:z900_execute_opcode_e3________xx
	DQ	FLAT:iprint_ASMFMT_e3xx
	DQ	FLAT:$SG199707
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199708
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_e5xx
	DQ	FLAT:$SG199709
	DQ	FLAT:s370_operation_exception
	DQ	FLAT:s390_operation_exception
	DQ	FLAT:z900_operation_exception
	DQ	FLAT:iprint_ASMFMT_e6xx
	DQ	FLAT:$SG199710
	DQ	FLAT:s370_execute_opcode_e7________xx
	DQ	FLAT:s390_execute_opcode_e7________xx
	DQ	FLAT:z900_execute_opcode_e7________xx
	DQ	FLAT:iprint_ASMFMT_e7xx
	DQ	FLAT:$SG199711
	DQ	FLAT:s370_move_inverse
	DQ	FLAT:s390_move_inverse
	DQ	FLAT:z900_move_inverse
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199712
	DQ	FLAT:s370_pack_ascii
	DQ	FLAT:s390_pack_ascii
	DQ	FLAT:z900_pack_ascii
	DQ	FLAT:iprint_ASMFMT_SS_L2
	DQ	FLAT:$SG199713
	DQ	FLAT:s370_unpack_ascii
	DQ	FLAT:s390_unpack_ascii
	DQ	FLAT:z900_unpack_ascii
	DQ	FLAT:iprint_ASMFMT_SS_L
	DQ	FLAT:$SG199714
	DQ	FLAT:s370_execute_opcode_eb________xx
	DQ	FLAT:s390_execute_opcode_eb________xx
	DQ	FLAT:z900_execute_opcode_eb________xx
	DQ	FLAT:iprint_ASMFMT_ebxx
	DQ	FLAT:$SG199715
	DQ	FLAT:s370_execute_opcode_ec________xx
	DQ	FLAT:s390_execute_opcode_ec________xx
	DQ	FLAT:z900_execute_opcode_ec________xx
	DQ	FLAT:iprint_ASMFMT_ecxx
	DQ	FLAT:$SG199716
	DQ	FLAT:s370_execute_opcode_ed________xx
	DQ	FLAT:s390_execute_opcode_ed________xx
	DQ	FLAT:z900_execute_opcode_ed________xx
	DQ	FLAT:iprint_ASMFMT_edxx
	DQ	FLAT:$SG199717
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_perform_locked_operation
	DQ	FLAT:z900_perform_locked_operation
	DQ	FLAT:iprint_ASMFMT_SS_RSRS
	DQ	FLAT:$SG199718
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_multiple_disjoint
	DQ	FLAT:iprint_ASMFMT_SS_R
	DQ	FLAT:$SG199719
	DQ	FLAT:s370_shift_and_round_decimal
	DQ	FLAT:s390_shift_and_round_decimal
	DQ	FLAT:z900_shift_and_round_decimal
	DQ	FLAT:iprint_ASMFMT_SS_I
	DQ	FLAT:$SG199720
	DQ	FLAT:s370_move_with_offset
	DQ	FLAT:s390_move_with_offset
	DQ	FLAT:z900_move_with_offset
	DQ	FLAT:iprint_ASMFMT_SS
	DQ	FLAT:$SG199721
	DQ	FLAT:s370_pack
	DQ	FLAT:s390_pack
	DQ	FLAT:z900_pack
	DQ	FLAT:iprint_ASMFMT_SS
	DQ	FLAT:$SG199722
	DQ	FLAT:s370_unpack
	DQ	FLAT:s390_unpack
	DQ	FLAT:z900_unpack
	DQ	FLAT:iprint_ASMFMT_SS
	DQ	FLAT:$SG199723
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199724
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199725
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199726
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199727
	DQ	FLAT:s370_zero_and_add
	DQ	FLAT:s390_zero_and_add
	DQ	FLAT:z900_zero_and_add
	DQ	FLAT:iprint_ASMFMT_SS
	DQ	FLAT:$SG199728
	DQ	FLAT:s370_compare_decimal
	DQ	FLAT:s390_compare_decimal
	DQ	FLAT:z900_compare_decimal
	DQ	FLAT:iprint_ASMFMT_SS
	DQ	FLAT:$SG199729
	DQ	FLAT:s370_add_decimal
	DQ	FLAT:s390_add_decimal
	DQ	FLAT:z900_add_decimal
	DQ	FLAT:iprint_ASMFMT_SS
	DQ	FLAT:$SG199730
	DQ	FLAT:s370_subtract_decimal
	DQ	FLAT:s390_subtract_decimal
	DQ	FLAT:z900_subtract_decimal
	DQ	FLAT:iprint_ASMFMT_SS
	DQ	FLAT:$SG199731
	DQ	FLAT:s370_multiply_decimal
	DQ	FLAT:s390_multiply_decimal
	DQ	FLAT:z900_multiply_decimal
	DQ	FLAT:iprint_ASMFMT_SS
	DQ	FLAT:$SG199732
	DQ	FLAT:s370_divide_decimal
	DQ	FLAT:s390_divide_decimal
	DQ	FLAT:z900_divide_decimal
	DQ	FLAT:iprint_ASMFMT_SS
	DQ	FLAT:$SG199733
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199734
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG199735
gen_opcode_01xx DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200248
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_program_return
	DQ	FLAT:z900_program_return
	DQ	FLAT:iprint_ASMFMT_E
	DQ	FLAT:$SG200249
	DQ	FLAT:s370_update_tree
	DQ	FLAT:s390_update_tree
	DQ	FLAT:z900_update_tree
	DQ	FLAT:iprint_ASMFMT_E
	DQ	FLAT:$SG200250
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200251
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_perform_timing_facility_function
	DQ	FLAT:iprint_ASMFMT_E
	DQ	FLAT:$SG200252
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200253
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200254
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_set_clock_programmable_field
	DQ	FLAT:z900_set_clock_programmable_field
	DQ	FLAT:iprint_ASMFMT_E
	DQ	FLAT:$SG200255
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200256
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200257
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_perform_floating_point_operation
	DQ	FLAT:iprint_ASMFMT_E
	DQ	FLAT:$SG200258
	DQ	FLAT:s370_test_addressing_mode
	DQ	FLAT:s390_test_addressing_mode
	DQ	FLAT:z900_test_addressing_mode
	DQ	FLAT:iprint_ASMFMT_E
	DQ	FLAT:$SG200259
	DQ	FLAT:s370_set_addressing_mode_24
	DQ	FLAT:s390_set_addressing_mode_24
	DQ	FLAT:z900_set_addressing_mode_24
	DQ	FLAT:iprint_ASMFMT_E
	DQ	FLAT:$SG200260
	DQ	FLAT:s370_set_addressing_mode_31
	DQ	FLAT:s390_set_addressing_mode_31
	DQ	FLAT:z900_set_addressing_mode_31
	DQ	FLAT:iprint_ASMFMT_E
	DQ	FLAT:$SG200261
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_addressing_mode_64
	DQ	FLAT:iprint_ASMFMT_E
	DQ	FLAT:$SG200262
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200263
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200264
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200265
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200266
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200267
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200268
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200269
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200270
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200271
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200272
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200273
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200274
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200275
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200276
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200277
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200278
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200279
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200280
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200281
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200282
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200283
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200284
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200285
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200286
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200287
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200288
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200289
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200290
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200291
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200292
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200293
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200294
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200295
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200296
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200297
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200298
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200299
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200300
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200301
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200302
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200303
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200304
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200305
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200306
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200307
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200308
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200309
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200310
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200311
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200312
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200313
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200314
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200315
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200316
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200317
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200318
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200319
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200320
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200321
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200322
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200323
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200324
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200325
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200326
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200327
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200328
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200329
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200330
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200331
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200332
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200333
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200334
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200335
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200336
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200337
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200338
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200339
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200340
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200341
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200342
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200343
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200344
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200345
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200346
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200347
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200348
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200349
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200350
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200351
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200352
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200353
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200354
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200355
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200356
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200357
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200358
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200359
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200360
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200361
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200362
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200363
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200364
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200365
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200366
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200367
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200368
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200369
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200370
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200371
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200372
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200373
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200374
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200375
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200376
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200377
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200378
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200379
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200380
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200381
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200382
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200383
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200384
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200385
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200386
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200387
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200388
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200389
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200390
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200391
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200392
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200393
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200394
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200395
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200396
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200397
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200398
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200399
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200400
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200401
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200402
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200403
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200404
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200405
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200406
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200407
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200408
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200409
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200410
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200411
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200412
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200413
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200414
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200415
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200416
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200417
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200418
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200419
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200420
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200421
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200422
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200423
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200424
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200425
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200426
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200427
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200428
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200429
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200430
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200431
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200432
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200433
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200434
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200435
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200436
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200437
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200438
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200439
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200440
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200441
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200442
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200443
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200444
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200445
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200446
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200447
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200448
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200449
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200450
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200451
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200452
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200453
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200454
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200455
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200456
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200457
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200458
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200459
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200460
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200461
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200462
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200463
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200464
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200465
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200466
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200467
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200468
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200469
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200470
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200471
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200472
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200473
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200474
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200475
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200476
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200477
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200478
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200479
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200480
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200481
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200482
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200483
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200484
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200485
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200486
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200487
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200488
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200489
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200490
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200491
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200492
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200493
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200494
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200495
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200496
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200497
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200498
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200499
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200500
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200501
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG200502
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_trap2
	DQ	FLAT:z900_trap2
	DQ	FLAT:iprint_ASMFMT_E
	DQ	FLAT:$SG200503
gen_opcode_a5_x DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_immediate_high_high
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200536
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_immediate_high_low
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200537
	DQ	FLAT:s370_insert_immediate_low_high
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_immediate_low_high
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200538
	DQ	FLAT:s370_insert_immediate_low_low
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_immediate_low_low
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200539
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_immediate_high_high
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200540
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_immediate_high_low
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200541
	DQ	FLAT:s370_and_immediate_low_high
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_immediate_low_high
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200542
	DQ	FLAT:s370_and_immediate_low_low
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_immediate_low_low
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200543
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_immediate_high_high
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200544
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_immediate_high_low
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200545
	DQ	FLAT:s370_or_immediate_low_high
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_immediate_low_high
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200546
	DQ	FLAT:s370_or_immediate_low_low
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_immediate_low_low
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200547
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_immediate_high_high
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200548
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_immediate_high_low
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200549
	DQ	FLAT:s370_load_logical_immediate_low_high
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_immediate_low_high
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200550
	DQ	FLAT:s370_load_logical_immediate_low_low
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_immediate_low_low
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200551
gen_opcode_a7_x DQ FLAT:s370_test_under_mask_high
	DQ	FLAT:s390_test_under_mask_high
	DQ	FLAT:z900_test_under_mask_high
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200584
	DQ	FLAT:s370_test_under_mask_low
	DQ	FLAT:s390_test_under_mask_low
	DQ	FLAT:z900_test_under_mask_low
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200585
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_test_under_mask_high_high
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200586
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_test_under_mask_high_low
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200587
	DQ	FLAT:s370_branch_relative_on_condition
	DQ	FLAT:s390_branch_relative_on_condition
	DQ	FLAT:z900_branch_relative_on_condition
	DQ	FLAT:iprint_ASMFMT_RI_B
	DQ	FLAT:$SG200588
	DQ	FLAT:s370_branch_relative_and_save
	DQ	FLAT:s390_branch_relative_and_save
	DQ	FLAT:z900_branch_relative_and_save
	DQ	FLAT:iprint_ASMFMT_RI_B
	DQ	FLAT:$SG200589
	DQ	FLAT:s370_branch_relative_on_count
	DQ	FLAT:s390_branch_relative_on_count
	DQ	FLAT:z900_branch_relative_on_count
	DQ	FLAT:iprint_ASMFMT_RI_B
	DQ	FLAT:$SG200590
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_relative_on_count_long
	DQ	FLAT:iprint_ASMFMT_RI_B
	DQ	FLAT:$SG200591
	DQ	FLAT:s370_load_halfword_immediate
	DQ	FLAT:s390_load_halfword_immediate
	DQ	FLAT:z900_load_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200592
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_long_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200593
	DQ	FLAT:s370_add_halfword_immediate
	DQ	FLAT:s390_add_halfword_immediate
	DQ	FLAT:z900_add_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200594
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_long_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200595
	DQ	FLAT:s370_multiply_halfword_immediate
	DQ	FLAT:s390_multiply_halfword_immediate
	DQ	FLAT:z900_multiply_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200596
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_long_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200597
	DQ	FLAT:s370_compare_halfword_immediate
	DQ	FLAT:s390_compare_halfword_immediate
	DQ	FLAT:z900_compare_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200598
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_long_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_RI
	DQ	FLAT:$SG200599
gen_opcode_b3xx DQ FLAT:s370_load_positive_bfp_short_reg
	DQ	FLAT:s390_load_positive_bfp_short_reg
	DQ	FLAT:z900_load_positive_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201112
	DQ	FLAT:s370_load_negative_bfp_short_reg
	DQ	FLAT:s390_load_negative_bfp_short_reg
	DQ	FLAT:z900_load_negative_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201113
	DQ	FLAT:s370_load_and_test_bfp_short_reg
	DQ	FLAT:s390_load_and_test_bfp_short_reg
	DQ	FLAT:z900_load_and_test_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201114
	DQ	FLAT:s370_load_complement_bfp_short_reg
	DQ	FLAT:s390_load_complement_bfp_short_reg
	DQ	FLAT:z900_load_complement_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201115
	DQ	FLAT:s370_load_lengthened_bfp_short_to_long_reg
	DQ	FLAT:s390_load_lengthened_bfp_short_to_long_reg
	DQ	FLAT:z900_load_lengthened_bfp_short_to_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201116
	DQ	FLAT:s370_load_lengthened_bfp_long_to_ext_reg
	DQ	FLAT:s390_load_lengthened_bfp_long_to_ext_reg
	DQ	FLAT:z900_load_lengthened_bfp_long_to_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201117
	DQ	FLAT:s370_load_lengthened_bfp_short_to_ext_reg
	DQ	FLAT:s390_load_lengthened_bfp_short_to_ext_reg
	DQ	FLAT:z900_load_lengthened_bfp_short_to_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201118
	DQ	FLAT:s370_multiply_bfp_long_to_ext_reg
	DQ	FLAT:s390_multiply_bfp_long_to_ext_reg
	DQ	FLAT:z900_multiply_bfp_long_to_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201119
	DQ	FLAT:s370_compare_and_signal_bfp_short_reg
	DQ	FLAT:s390_compare_and_signal_bfp_short_reg
	DQ	FLAT:z900_compare_and_signal_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201120
	DQ	FLAT:s370_compare_bfp_short_reg
	DQ	FLAT:s390_compare_bfp_short_reg
	DQ	FLAT:z900_compare_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201121
	DQ	FLAT:s370_add_bfp_short_reg
	DQ	FLAT:s390_add_bfp_short_reg
	DQ	FLAT:z900_add_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201122
	DQ	FLAT:s370_subtract_bfp_short_reg
	DQ	FLAT:s390_subtract_bfp_short_reg
	DQ	FLAT:z900_subtract_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201123
	DQ	FLAT:s370_multiply_bfp_short_to_long_reg
	DQ	FLAT:s390_multiply_bfp_short_to_long_reg
	DQ	FLAT:z900_multiply_bfp_short_to_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201124
	DQ	FLAT:s370_divide_bfp_short_reg
	DQ	FLAT:s390_divide_bfp_short_reg
	DQ	FLAT:z900_divide_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201125
	DQ	FLAT:s370_multiply_add_bfp_short_reg
	DQ	FLAT:s390_multiply_add_bfp_short_reg
	DQ	FLAT:z900_multiply_add_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201126
	DQ	FLAT:s370_multiply_subtract_bfp_short_reg
	DQ	FLAT:s390_multiply_subtract_bfp_short_reg
	DQ	FLAT:z900_multiply_subtract_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201127
	DQ	FLAT:s370_load_positive_bfp_long_reg
	DQ	FLAT:s390_load_positive_bfp_long_reg
	DQ	FLAT:z900_load_positive_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201128
	DQ	FLAT:s370_load_negative_bfp_long_reg
	DQ	FLAT:s390_load_negative_bfp_long_reg
	DQ	FLAT:z900_load_negative_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201129
	DQ	FLAT:s370_load_and_test_bfp_long_reg
	DQ	FLAT:s390_load_and_test_bfp_long_reg
	DQ	FLAT:z900_load_and_test_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201130
	DQ	FLAT:s370_load_complement_bfp_long_reg
	DQ	FLAT:s390_load_complement_bfp_long_reg
	DQ	FLAT:z900_load_complement_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201131
	DQ	FLAT:s370_squareroot_bfp_short_reg
	DQ	FLAT:s390_squareroot_bfp_short_reg
	DQ	FLAT:z900_squareroot_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201132
	DQ	FLAT:s370_squareroot_bfp_long_reg
	DQ	FLAT:s390_squareroot_bfp_long_reg
	DQ	FLAT:z900_squareroot_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201133
	DQ	FLAT:s370_squareroot_bfp_ext_reg
	DQ	FLAT:s390_squareroot_bfp_ext_reg
	DQ	FLAT:z900_squareroot_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201134
	DQ	FLAT:s370_multiply_bfp_short_reg
	DQ	FLAT:s390_multiply_bfp_short_reg
	DQ	FLAT:z900_multiply_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201135
	DQ	FLAT:s370_compare_and_signal_bfp_long_reg
	DQ	FLAT:s390_compare_and_signal_bfp_long_reg
	DQ	FLAT:z900_compare_and_signal_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201136
	DQ	FLAT:s370_compare_bfp_long_reg
	DQ	FLAT:s390_compare_bfp_long_reg
	DQ	FLAT:z900_compare_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201137
	DQ	FLAT:s370_add_bfp_long_reg
	DQ	FLAT:s390_add_bfp_long_reg
	DQ	FLAT:z900_add_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201138
	DQ	FLAT:s370_subtract_bfp_long_reg
	DQ	FLAT:s390_subtract_bfp_long_reg
	DQ	FLAT:z900_subtract_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201139
	DQ	FLAT:s370_multiply_bfp_long_reg
	DQ	FLAT:s390_multiply_bfp_long_reg
	DQ	FLAT:z900_multiply_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201140
	DQ	FLAT:s370_divide_bfp_long_reg
	DQ	FLAT:s390_divide_bfp_long_reg
	DQ	FLAT:z900_divide_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201141
	DQ	FLAT:s370_multiply_add_bfp_long_reg
	DQ	FLAT:s390_multiply_add_bfp_long_reg
	DQ	FLAT:z900_multiply_add_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201142
	DQ	FLAT:s370_multiply_subtract_bfp_long_reg
	DQ	FLAT:s390_multiply_subtract_bfp_long_reg
	DQ	FLAT:z900_multiply_subtract_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201143
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201144
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201145
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201146
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201147
	DQ	FLAT:s370_load_lengthened_float_short_to_long_reg
	DQ	FLAT:s390_load_lengthened_float_short_to_long_reg
	DQ	FLAT:z900_load_lengthened_float_short_to_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201148
	DQ	FLAT:s370_load_lengthened_float_long_to_ext_reg
	DQ	FLAT:s390_load_lengthened_float_long_to_ext_reg
	DQ	FLAT:z900_load_lengthened_float_long_to_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201149
	DQ	FLAT:s370_load_lengthened_float_short_to_ext_reg
	DQ	FLAT:s390_load_lengthened_float_short_to_ext_reg
	DQ	FLAT:z900_load_lengthened_float_short_to_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201150
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201151
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201152
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201153
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201154
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201155
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201156
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201157
	DQ	FLAT:s370_multiply_add_float_short_reg
	DQ	FLAT:s390_multiply_add_float_short_reg
	DQ	FLAT:z900_multiply_add_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201158
	DQ	FLAT:s370_multiply_subtract_float_short_reg
	DQ	FLAT:s390_multiply_subtract_float_short_reg
	DQ	FLAT:z900_multiply_subtract_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201159
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201160
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201161
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201162
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201163
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201164
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201165
	DQ	FLAT:s370_squareroot_float_ext_reg
	DQ	FLAT:s390_squareroot_float_ext_reg
	DQ	FLAT:z900_squareroot_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201166
	DQ	FLAT:s370_multiply_float_short_reg
	DQ	FLAT:s390_multiply_float_short_reg
	DQ	FLAT:z900_multiply_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201167
	DQ	FLAT:s370_multiply_add_unnormal_float_long_to_ext_low_reg
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_add_unnormal_float_long_to_ext_low_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201168
	DQ	FLAT:s370_multiply_unnormal_float_long_to_ext_low_reg
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_unnormal_float_long_to_ext_low_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201169
	DQ	FLAT:s370_multiply_add_unnormal_float_long_to_ext_reg
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_add_unnormal_float_long_to_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201170
	DQ	FLAT:s370_multiply_unnormal_float_long_to_ext_reg
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_unnormal_float_long_to_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201171
	DQ	FLAT:s370_multiply_add_unnormal_float_long_to_ext_high_reg
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_add_unnormal_float_long_to_ext_high_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201172
	DQ	FLAT:s370_multiply_unnormal_float_long_to_ext_high_reg
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_unnormal_float_long_to_ext_high_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201173
	DQ	FLAT:s370_multiply_add_float_long_reg
	DQ	FLAT:s390_multiply_add_float_long_reg
	DQ	FLAT:z900_multiply_add_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201174
	DQ	FLAT:s370_multiply_subtract_float_long_reg
	DQ	FLAT:s390_multiply_subtract_float_long_reg
	DQ	FLAT:z900_multiply_subtract_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG201175
	DQ	FLAT:s370_load_positive_bfp_ext_reg
	DQ	FLAT:s390_load_positive_bfp_ext_reg
	DQ	FLAT:z900_load_positive_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201176
	DQ	FLAT:s370_load_negative_bfp_ext_reg
	DQ	FLAT:s390_load_negative_bfp_ext_reg
	DQ	FLAT:z900_load_negative_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201177
	DQ	FLAT:s370_load_and_test_bfp_ext_reg
	DQ	FLAT:s390_load_and_test_bfp_ext_reg
	DQ	FLAT:z900_load_and_test_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201178
	DQ	FLAT:s370_load_complement_bfp_ext_reg
	DQ	FLAT:s390_load_complement_bfp_ext_reg
	DQ	FLAT:z900_load_complement_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201179
	DQ	FLAT:s370_load_rounded_bfp_long_to_short_reg
	DQ	FLAT:s390_load_rounded_bfp_long_to_short_reg
	DQ	FLAT:z900_load_rounded_bfp_long_to_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201180
	DQ	FLAT:s370_load_rounded_bfp_ext_to_long_reg
	DQ	FLAT:s390_load_rounded_bfp_ext_to_long_reg
	DQ	FLAT:z900_load_rounded_bfp_ext_to_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201181
	DQ	FLAT:s370_load_rounded_bfp_ext_to_short_reg
	DQ	FLAT:s390_load_rounded_bfp_ext_to_short_reg
	DQ	FLAT:z900_load_rounded_bfp_ext_to_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201182
	DQ	FLAT:s370_load_fp_int_bfp_ext_reg
	DQ	FLAT:s390_load_fp_int_bfp_ext_reg
	DQ	FLAT:z900_load_fp_int_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201183
	DQ	FLAT:s370_compare_and_signal_bfp_ext_reg
	DQ	FLAT:s390_compare_and_signal_bfp_ext_reg
	DQ	FLAT:z900_compare_and_signal_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201184
	DQ	FLAT:s370_compare_bfp_ext_reg
	DQ	FLAT:s390_compare_bfp_ext_reg
	DQ	FLAT:z900_compare_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201185
	DQ	FLAT:s370_add_bfp_ext_reg
	DQ	FLAT:s390_add_bfp_ext_reg
	DQ	FLAT:z900_add_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201186
	DQ	FLAT:s370_subtract_bfp_ext_reg
	DQ	FLAT:s390_subtract_bfp_ext_reg
	DQ	FLAT:z900_subtract_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201187
	DQ	FLAT:s370_multiply_bfp_ext_reg
	DQ	FLAT:s390_multiply_bfp_ext_reg
	DQ	FLAT:z900_multiply_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201188
	DQ	FLAT:s370_divide_bfp_ext_reg
	DQ	FLAT:s390_divide_bfp_ext_reg
	DQ	FLAT:z900_divide_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201189
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201190
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201191
	DQ	FLAT:s370_convert_float_long_to_bfp_short_reg
	DQ	FLAT:s390_convert_float_long_to_bfp_short_reg
	DQ	FLAT:z900_convert_float_long_to_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201192
	DQ	FLAT:s370_convert_float_long_to_bfp_long_reg
	DQ	FLAT:s390_convert_float_long_to_bfp_long_reg
	DQ	FLAT:z900_convert_float_long_to_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201193
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201194
	DQ	FLAT:s370_divide_integer_bfp_short_reg
	DQ	FLAT:s390_divide_integer_bfp_short_reg
	DQ	FLAT:z900_divide_integer_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRF_RM
	DQ	FLAT:$SG201195
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201196
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201197
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201198
	DQ	FLAT:s370_load_fp_int_bfp_short_reg
	DQ	FLAT:s390_load_fp_int_bfp_short_reg
	DQ	FLAT:z900_load_fp_int_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201199
	DQ	FLAT:s370_convert_bfp_short_to_float_long_reg
	DQ	FLAT:s390_convert_bfp_short_to_float_long_reg
	DQ	FLAT:z900_convert_bfp_short_to_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201200
	DQ	FLAT:s370_convert_bfp_long_to_float_long_reg
	DQ	FLAT:s390_convert_bfp_long_to_float_long_reg
	DQ	FLAT:z900_convert_bfp_long_to_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201201
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201202
	DQ	FLAT:s370_divide_integer_bfp_long_reg
	DQ	FLAT:s390_divide_integer_bfp_long_reg
	DQ	FLAT:z900_divide_integer_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_RM
	DQ	FLAT:$SG201203
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201204
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201205
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201206
	DQ	FLAT:s370_load_fp_int_bfp_long_reg
	DQ	FLAT:s390_load_fp_int_bfp_long_reg
	DQ	FLAT:z900_load_fp_int_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201207
	DQ	FLAT:s370_load_positive_float_ext_reg
	DQ	FLAT:s390_load_positive_float_ext_reg
	DQ	FLAT:z900_load_positive_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201208
	DQ	FLAT:s370_load_negative_float_ext_reg
	DQ	FLAT:s390_load_negative_float_ext_reg
	DQ	FLAT:z900_load_negative_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201209
	DQ	FLAT:s370_load_and_test_float_ext_reg
	DQ	FLAT:s390_load_and_test_float_ext_reg
	DQ	FLAT:z900_load_and_test_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201210
	DQ	FLAT:s370_load_complement_float_ext_reg
	DQ	FLAT:s390_load_complement_float_ext_reg
	DQ	FLAT:z900_load_complement_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201211
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201212
	DQ	FLAT:s370_load_float_ext_reg
	DQ	FLAT:s390_load_float_ext_reg
	DQ	FLAT:z900_load_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201213
	DQ	FLAT:s370_load_rounded_float_ext_to_short_reg
	DQ	FLAT:s390_load_rounded_float_ext_to_short_reg
	DQ	FLAT:z900_load_rounded_float_ext_to_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201214
	DQ	FLAT:s370_load_fp_int_float_ext_reg
	DQ	FLAT:s390_load_fp_int_float_ext_reg
	DQ	FLAT:z900_load_fp_int_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201215
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201216
	DQ	FLAT:s370_compare_float_ext_reg
	DQ	FLAT:s390_compare_float_ext_reg
	DQ	FLAT:z900_compare_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201217
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201218
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201219
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201220
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201221
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201222
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201223
	DQ	FLAT:s370_load_positive_fpr_long_reg
	DQ	FLAT:s390_load_positive_fpr_long_reg
	DQ	FLAT:z900_load_positive_fpr_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201224
	DQ	FLAT:s370_load_negative_fpr_long_reg
	DQ	FLAT:s390_load_negative_fpr_long_reg
	DQ	FLAT:z900_load_negative_fpr_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201225
	DQ	FLAT:s370_copy_sign_fpr_long_reg
	DQ	FLAT:s390_copy_sign_fpr_long_reg
	DQ	FLAT:z900_copy_sign_fpr_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201226
	DQ	FLAT:s370_load_complement_fpr_long_reg
	DQ	FLAT:s390_load_complement_fpr_long_reg
	DQ	FLAT:z900_load_complement_fpr_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201227
	DQ	FLAT:s370_load_zero_float_short_reg
	DQ	FLAT:s390_load_zero_float_short_reg
	DQ	FLAT:z900_load_zero_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG201228
	DQ	FLAT:s370_load_zero_float_long_reg
	DQ	FLAT:s390_load_zero_float_long_reg
	DQ	FLAT:z900_load_zero_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG201229
	DQ	FLAT:s370_load_zero_float_ext_reg
	DQ	FLAT:s390_load_zero_float_ext_reg
	DQ	FLAT:z900_load_zero_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG201230
	DQ	FLAT:s370_load_fp_int_float_short_reg
	DQ	FLAT:s390_load_fp_int_float_short_reg
	DQ	FLAT:z900_load_fp_int_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201231
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201232
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201233
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201234
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201235
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201236
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201237
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201238
	DQ	FLAT:s370_load_fp_int_float_long_reg
	DQ	FLAT:s390_load_fp_int_float_long_reg
	DQ	FLAT:z900_load_fp_int_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201239
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201240
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201241
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201242
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201243
	DQ	FLAT:s370_set_fpc
	DQ	FLAT:s390_set_fpc
	DQ	FLAT:z900_set_fpc
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG201244
	DQ	FLAT:s370_set_fpc_and_signal
	DQ	FLAT:s390_set_fpc_and_signal
	DQ	FLAT:z900_set_fpc_and_signal
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG201245
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201246
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201247
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201248
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201249
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201250
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201251
	DQ	FLAT:s370_extract_fpc
	DQ	FLAT:s390_extract_fpc
	DQ	FLAT:z900_extract_fpc
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG201252
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201253
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201254
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201255
	DQ	FLAT:s370_convert_u32_to_bfp_short_reg
	DQ	FLAT:s390_convert_u32_to_bfp_short_reg
	DQ	FLAT:z900_convert_u32_to_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201256
	DQ	FLAT:s370_convert_u32_to_bfp_long_reg
	DQ	FLAT:s390_convert_u32_to_bfp_long_reg
	DQ	FLAT:z900_convert_u32_to_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201257
	DQ	FLAT:s370_convert_u32_to_bfp_ext_reg
	DQ	FLAT:s390_convert_u32_to_bfp_ext_reg
	DQ	FLAT:z900_convert_u32_to_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201258
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201259
	DQ	FLAT:s370_convert_fix32_to_bfp_short_reg
	DQ	FLAT:s390_convert_fix32_to_bfp_short_reg
	DQ	FLAT:z900_convert_fix32_to_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201260
	DQ	FLAT:s370_convert_fix32_to_bfp_long_reg
	DQ	FLAT:s390_convert_fix32_to_bfp_long_reg
	DQ	FLAT:z900_convert_fix32_to_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201261
	DQ	FLAT:s370_convert_fix32_to_bfp_ext_reg
	DQ	FLAT:s390_convert_fix32_to_bfp_ext_reg
	DQ	FLAT:z900_convert_fix32_to_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201262
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201263
	DQ	FLAT:s370_convert_bfp_short_to_fix32_reg
	DQ	FLAT:s390_convert_bfp_short_to_fix32_reg
	DQ	FLAT:z900_convert_bfp_short_to_fix32_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201264
	DQ	FLAT:s370_convert_bfp_long_to_fix32_reg
	DQ	FLAT:s390_convert_bfp_long_to_fix32_reg
	DQ	FLAT:z900_convert_bfp_long_to_fix32_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201265
	DQ	FLAT:s370_convert_bfp_ext_to_fix32_reg
	DQ	FLAT:s390_convert_bfp_ext_to_fix32_reg
	DQ	FLAT:z900_convert_bfp_ext_to_fix32_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201266
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201267
	DQ	FLAT:s370_convert_bfp_short_to_u32_reg
	DQ	FLAT:s390_convert_bfp_short_to_u32_reg
	DQ	FLAT:z900_convert_bfp_short_to_u32_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201268
	DQ	FLAT:s370_convert_bfp_long_to_u32_reg
	DQ	FLAT:s390_convert_bfp_long_to_u32_reg
	DQ	FLAT:z900_convert_bfp_long_to_u32_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201269
	DQ	FLAT:s370_convert_bfp_ext_to_u32_reg
	DQ	FLAT:s390_convert_bfp_ext_to_u32_reg
	DQ	FLAT:z900_convert_bfp_ext_to_u32_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201270
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201271
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_u64_to_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201272
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_u64_to_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201273
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_u64_to_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201274
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201275
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_fix64_to_bfp_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201276
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_fix64_to_bfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201277
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_fix64_to_bfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201278
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201279
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_bfp_short_to_fix64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201280
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_bfp_long_to_fix64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201281
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_bfp_ext_to_fix64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201282
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201283
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_bfp_short_to_u64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201284
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_bfp_long_to_u64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201285
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_bfp_ext_to_u64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201286
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201287
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201288
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201289
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201290
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201291
	DQ	FLAT:s370_convert_fixed_to_float_short_reg
	DQ	FLAT:s390_convert_fixed_to_float_short_reg
	DQ	FLAT:z900_convert_fixed_to_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201292
	DQ	FLAT:s370_convert_fixed_to_float_long_reg
	DQ	FLAT:s390_convert_fixed_to_float_long_reg
	DQ	FLAT:z900_convert_fixed_to_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201293
	DQ	FLAT:s370_convert_fixed_to_float_ext_reg
	DQ	FLAT:s390_convert_fixed_to_float_ext_reg
	DQ	FLAT:z900_convert_fixed_to_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201294
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201295
	DQ	FLAT:s370_convert_float_short_to_fixed_reg
	DQ	FLAT:s390_convert_float_short_to_fixed_reg
	DQ	FLAT:z900_convert_float_short_to_fixed_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201296
	DQ	FLAT:s370_convert_float_long_to_fixed_reg
	DQ	FLAT:s390_convert_float_long_to_fixed_reg
	DQ	FLAT:z900_convert_float_long_to_fixed_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201297
	DQ	FLAT:s370_convert_float_ext_to_fixed_reg
	DQ	FLAT:s390_convert_float_ext_to_fixed_reg
	DQ	FLAT:z900_convert_float_ext_to_fixed_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201298
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201299
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201300
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201301
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201302
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201303
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201304
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_fpr_from_gr_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201305
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201306
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201307
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_fix64_to_float_short_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201308
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_fix64_to_float_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201309
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_fix64_to_float_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201310
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201311
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_float_short_to_fix64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201312
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_float_long_to_fix64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201313
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_float_ext_to_fix64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201314
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201315
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201316
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_gr_from_fpr_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201317
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201318
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201319
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_multiply_dfp_long_reg
	DQ	FLAT:z900_multiply_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201320
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_divide_dfp_long_reg
	DQ	FLAT:z900_divide_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201321
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_add_dfp_long_reg
	DQ	FLAT:z900_add_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201322
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_subtract_dfp_long_reg
	DQ	FLAT:z900_subtract_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201323
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_lengthened_dfp_short_to_long_reg
	DQ	FLAT:z900_load_lengthened_dfp_short_to_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M4
	DQ	FLAT:$SG201324
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_rounded_dfp_long_to_short_reg
	DQ	FLAT:z900_load_rounded_dfp_long_to_short_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201325
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_and_test_dfp_long_reg
	DQ	FLAT:z900_load_and_test_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201326
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_fp_int_dfp_long_reg
	DQ	FLAT:z900_load_fp_int_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201327
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_multiply_dfp_ext_reg
	DQ	FLAT:z900_multiply_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201328
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_divide_dfp_ext_reg
	DQ	FLAT:z900_divide_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201329
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_add_dfp_ext_reg
	DQ	FLAT:z900_add_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201330
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_subtract_dfp_ext_reg
	DQ	FLAT:z900_subtract_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201331
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_lengthened_dfp_long_to_ext_reg
	DQ	FLAT:z900_load_lengthened_dfp_long_to_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M4
	DQ	FLAT:$SG201332
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_rounded_dfp_ext_to_long_reg
	DQ	FLAT:z900_load_rounded_dfp_ext_to_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201333
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_and_test_dfp_ext_reg
	DQ	FLAT:z900_load_and_test_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201334
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_load_fp_int_dfp_ext_reg
	DQ	FLAT:z900_load_fp_int_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201335
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_compare_and_signal_dfp_long_reg
	DQ	FLAT:z900_compare_and_signal_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201336
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_dfp_long_to_fix64_reg
	DQ	FLAT:z900_convert_dfp_long_to_fix64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201337
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_dfp_long_to_ubcd64_reg
	DQ	FLAT:z900_convert_dfp_long_to_ubcd64_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201338
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_dfp_long_to_sbcd64_reg
	DQ	FLAT:z900_convert_dfp_long_to_sbcd64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M4
	DQ	FLAT:$SG201339
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_compare_dfp_long_reg
	DQ	FLAT:z900_compare_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201340
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_extract_biased_exponent_dfp_long_to_fix64_reg
	DQ	FLAT:z900_extract_biased_exponent_dfp_long_to_fix64_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201341
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201342
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_extract_significance_dfp_long_reg
	DQ	FLAT:z900_extract_significance_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201343
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_compare_and_signal_dfp_ext_reg
	DQ	FLAT:z900_compare_and_signal_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201344
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_dfp_ext_to_fix64_reg
	DQ	FLAT:z900_convert_dfp_ext_to_fix64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201345
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_dfp_ext_to_ubcd128_reg
	DQ	FLAT:z900_convert_dfp_ext_to_ubcd128_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201346
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_dfp_ext_to_sbcd128_reg
	DQ	FLAT:z900_convert_dfp_ext_to_sbcd128_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M4
	DQ	FLAT:$SG201347
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_compare_dfp_ext_reg
	DQ	FLAT:z900_compare_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201348
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_extract_biased_exponent_dfp_ext_to_fix64_reg
	DQ	FLAT:z900_extract_biased_exponent_dfp_ext_to_fix64_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201349
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201350
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_extract_significance_dfp_ext_reg
	DQ	FLAT:z900_extract_significance_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201351
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201352
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_fix64_to_dfp_long_reg
	DQ	FLAT:z900_convert_fix64_to_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201353
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_ubcd64_to_dfp_long_reg
	DQ	FLAT:z900_convert_ubcd64_to_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201354
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_sbcd64_to_dfp_long_reg
	DQ	FLAT:z900_convert_sbcd64_to_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201355
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_compare_exponent_dfp_long_reg
	DQ	FLAT:z900_compare_exponent_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201356
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_quantize_dfp_long_reg
	DQ	FLAT:z900_quantize_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_RM
	DQ	FLAT:$SG201357
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_insert_biased_exponent_fix64_to_dfp_long_reg
	DQ	FLAT:z900_insert_biased_exponent_fix64_to_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201358
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_reround_dfp_long_reg
	DQ	FLAT:z900_reround_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_RM
	DQ	FLAT:$SG201359
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201360
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_fix64_to_dfp_ext_reg
	DQ	FLAT:z900_convert_fix64_to_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201361
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_ubcd128_to_dfp_ext_reg
	DQ	FLAT:z900_convert_ubcd128_to_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201362
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_sbcd128_to_dfp_ext_reg
	DQ	FLAT:z900_convert_sbcd128_to_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201363
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_compare_exponent_dfp_ext_reg
	DQ	FLAT:z900_compare_exponent_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201364
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_quantize_dfp_ext_reg
	DQ	FLAT:z900_quantize_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_RM
	DQ	FLAT:$SG201365
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_insert_biased_exponent_fix64_to_dfp_ext_reg
	DQ	FLAT:z900_insert_biased_exponent_fix64_to_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201366
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_reround_dfp_ext_reg
	DQ	FLAT:z900_reround_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_RM
	DQ	FLAT:$SG201367
gen_opcode_b9xx DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_positive_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201880
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_negative_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201881
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_and_test_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201882
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_complement_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201883
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201884
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_using_real_address_long
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201885
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_long_byte_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201886
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_long_halfword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201887
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201888
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201889
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201890
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_logical_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201891
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_single_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201892
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_divide_single_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201893
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_stacked_registers_long
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201894
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_reversed_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201895
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_positive_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201896
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_negative_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201897
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_and_test_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201898
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_complement_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201899
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201900
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201901
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201902
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_long_thirtyone_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201903
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201904
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201905
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201906
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_logical_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201907
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_single_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201908
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_divide_single_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201909
	DQ	FLAT:s370_compute_message_authentication_code
	DQ	FLAT:s390_compute_message_authentication_code
	DQ	FLAT:z900_compute_message_authentication_code
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201910
	DQ	FLAT:s370_load_reversed_register
	DQ	FLAT:s390_load_reversed_register
	DQ	FLAT:z900_load_reversed_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201911
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201912
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201913
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201914
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201915
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201916
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_using_real_address_long
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201917
	DQ	FLAT:s370_load_byte_register
	DQ	FLAT:s390_load_byte_register
	DQ	FLAT:z900_load_byte_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201918
	DQ	FLAT:s370_load_halfword_register
	DQ	FLAT:s390_load_halfword_register
	DQ	FLAT:z900_load_halfword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201919
	DQ	FLAT:s370_perform_cryptographic_key_management_operation
	DQ	FLAT:s390_perform_cryptographic_key_management_operation
	DQ	FLAT:z900_perform_cryptographic_key_management_operation
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201920
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201921
	DQ	FLAT:s370_cipher_message_with_cipher_feedback
	DQ	FLAT:s390_cipher_message_with_cipher_feedback
	DQ	FLAT:z900_cipher_message_with_cipher_feedback
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201922
	DQ	FLAT:s370_cipher_message_with_output_feedback
	DQ	FLAT:s390_cipher_message_with_output_feedback
	DQ	FLAT:z900_cipher_message_with_output_feedback
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201923
	DQ	FLAT:s370_perform_cryptographic_computation
	DQ	FLAT:s390_perform_cryptographic_computation
	DQ	FLAT:z900_perform_cryptographic_computation
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201924
	DQ	FLAT:s370_cipher_message_with_counter
	DQ	FLAT:s390_cipher_message_with_counter
	DQ	FLAT:z900_cipher_message_with_counter
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG201925
	DQ	FLAT:s370_cipher_message
	DQ	FLAT:s390_cipher_message
	DQ	FLAT:z900_cipher_message
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201926
	DQ	FLAT:s370_cipher_message_with_chaining
	DQ	FLAT:s390_cipher_message_with_chaining
	DQ	FLAT:z900_cipher_message_with_chaining
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201927
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201928
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_long_fullword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201929
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201930
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201931
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201932
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201933
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201934
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201935
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201936
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201937
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201938
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201939
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201940
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201941
	DQ	FLAT:s370_compute_intermediate_message_digest
	DQ	FLAT:s390_compute_intermediate_message_digest
	DQ	FLAT:z900_compute_intermediate_message_digest
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201942
	DQ	FLAT:s370_compute_last_message_digest
	DQ	FLAT:s390_compute_last_message_digest
	DQ	FLAT:z900_compute_last_message_digest
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201943
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201944
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_dfp_long_to_fix32_reg
	DQ	FLAT:z900_convert_dfp_long_to_fix32_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201945
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_dfp_long_to_u64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201946
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_dfp_long_to_u32_reg
	DQ	FLAT:z900_convert_dfp_long_to_u32_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201947
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201948
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201949
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_on_count_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG201950
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201951
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201952
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_dfp_ext_to_fix32_reg
	DQ	FLAT:z900_convert_dfp_ext_to_fix32_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201953
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_dfp_ext_to_u64_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201954
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_dfp_ext_to_u32_reg
	DQ	FLAT:z900_convert_dfp_ext_to_u32_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201955
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201956
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201957
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201958
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201959
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201960
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_fix32_to_dfp_long_reg
	DQ	FLAT:z900_convert_fix32_to_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201961
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_u64_to_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201962
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_u32_to_dfp_long_reg
	DQ	FLAT:z900_convert_u32_to_dfp_long_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201963
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201964
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201965
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201966
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201967
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201968
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_fix32_to_dfp_ext_reg
	DQ	FLAT:z900_convert_fix32_to_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201969
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_u64_to_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201970
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_convert_u32_to_dfp_ext_reg
	DQ	FLAT:z900_convert_u32_to_dfp_ext_reg
	DQ	FLAT:iprint_ASMFMT_RRF_MM
	DQ	FLAT:$SG201971
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201972
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201973
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201974
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201975
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_and_trap_long_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG201976
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_and_trap_long_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG201977
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201978
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201979
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_nand_register_long
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201980
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_register_long_with_complement
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201981
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_nor_register_long
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201982
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_not_xor_register_long
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201983
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201984
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201985
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201986
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201987
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201988
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201989
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201990
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201991
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201992
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG201993
	DQ	FLAT:s370_compare_and_trap_register
	DQ	FLAT:s390_compare_and_trap_register
	DQ	FLAT:z900_compare_and_trap_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG201994
	DQ	FLAT:s370_compare_logical_and_trap_register
	DQ	FLAT:s390_compare_logical_and_trap_register
	DQ	FLAT:z900_compare_logical_and_trap_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG201995
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_nand_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201996
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_register_with_complement
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201997
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_nor_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201998
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_not_xor_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG201999
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202000
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202001
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202002
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202003
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202004
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202005
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202006
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202007
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202008
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202009
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_exclusive_or_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202010
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_find_leftmost_one_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202011
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_long_character_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202012
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_long_halfword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202013
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_logical_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202014
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_divide_logical_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202015
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_carry_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202016
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_logical_borrow_long_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202017
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_and_swap_and_purge_long
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202018
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202019
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202020
	DQ	FLAT:s370_extract_psw
	DQ	FLAT:s390_extract_psw
	DQ	FLAT:z900_extract_psw
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202021
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_invalidate_dat_table_entry
	DQ	FLAT:iprint_ASMFMT_RRF_R
	DQ	FLAT:$SG202022
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202023
	DQ	FLAT:s370_translate_two_to_two
	DQ	FLAT:s390_translate_two_to_two
	DQ	FLAT:z900_translate_two_to_two
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202024
	DQ	FLAT:s370_translate_two_to_one
	DQ	FLAT:s390_translate_two_to_one
	DQ	FLAT:z900_translate_two_to_one
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202025
	DQ	FLAT:s370_translate_one_to_two
	DQ	FLAT:s390_translate_one_to_two
	DQ	FLAT:z900_translate_one_to_two
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202026
	DQ	FLAT:s370_translate_one_to_one
	DQ	FLAT:s390_translate_one_to_one
	DQ	FLAT:z900_translate_one_to_one
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202027
	DQ	FLAT:s370_load_logical_character_register
	DQ	FLAT:s390_load_logical_character_register
	DQ	FLAT:z900_load_logical_character_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202028
	DQ	FLAT:s370_load_logical_halfword_register
	DQ	FLAT:s390_load_logical_halfword_register
	DQ	FLAT:z900_load_logical_halfword_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202029
	DQ	FLAT:s370_multiply_logical_register
	DQ	FLAT:s390_multiply_logical_register
	DQ	FLAT:z900_multiply_logical_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202030
	DQ	FLAT:s370_divide_logical_register
	DQ	FLAT:s390_divide_logical_register
	DQ	FLAT:z900_divide_logical_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202031
	DQ	FLAT:s370_add_logical_carry_register
	DQ	FLAT:s390_add_logical_carry_register
	DQ	FLAT:z900_add_logical_carry_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202032
	DQ	FLAT:s370_subtract_logical_borrow_register
	DQ	FLAT:s390_subtract_logical_borrow_register
	DQ	FLAT:z900_subtract_logical_borrow_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202033
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_primary_asn_and_instance
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG202034
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_secondary_asn_and_instance
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG202035
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_queue_buffer_state
	DQ	FLAT:iprint_ASMFMT_RRF_RM
	DQ	FLAT:$SG202036
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_and_set_extended_authority
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG202037
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_program_transfer_with_instance
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202038
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_secondary_asn_with_instance
	DQ	FLAT:iprint_ASMFMT_RRE_R1
	DQ	FLAT:$SG202039
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202040
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202041
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_perform_topology_function
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202042
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202043
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202044
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202045
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202046
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202047
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202048
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202049
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_page_table_entry_address
	DQ	FLAT:iprint_ASMFMT_RRF_RM
	DQ	FLAT:$SG202050
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_and_set_storage_attributes
	DQ	FLAT:iprint_ASMFMT_RRF_M
	DQ	FLAT:$SG202051
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_reference_bits_multiple
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202052
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202053
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_reset_reference_bits_multiple
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202054
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_perform_frame_management_function
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202055
	DQ	FLAT:s370_convert_utf8_to_utf32
	DQ	FLAT:s390_convert_utf8_to_utf32
	DQ	FLAT:z900_convert_utf8_to_utf32
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202056
	DQ	FLAT:s370_convert_utf16_to_utf32
	DQ	FLAT:s390_convert_utf16_to_utf32
	DQ	FLAT:z900_convert_utf16_to_utf32
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202057
	DQ	FLAT:s370_convert_utf32_to_utf8
	DQ	FLAT:s390_convert_utf32_to_utf8
	DQ	FLAT:z900_convert_utf32_to_utf8
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202058
	DQ	FLAT:s370_convert_utf32_to_utf16
	DQ	FLAT:s390_convert_utf32_to_utf16
	DQ	FLAT:z900_convert_utf32_to_utf16
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202059
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202060
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202061
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202062
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202063
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202064
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202065
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202066
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202067
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202068
	DQ	FLAT:s370_translate_and_test_reverse_extended
	DQ	FLAT:s390_translate_and_test_reverse_extended
	DQ	FLAT:z900_translate_and_test_reverse_extended
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202069
	DQ	FLAT:s370_search_string_unicode
	DQ	FLAT:s390_search_string_unicode
	DQ	FLAT:z900_search_string_unicode
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202070
	DQ	FLAT:s370_translate_and_test_extended
	DQ	FLAT:s390_translate_and_test_extended
	DQ	FLAT:z900_translate_and_test_extended
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202071
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_select_fullword_high_register
	DQ	FLAT:iprint_ASMFMT_RRF_A
	DQ	FLAT:$SG202072
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202073
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202074
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202075
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202076
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202077
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202078
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202079
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_high_high_high_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202080
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_high_high_high_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202081
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_high_high_high_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202082
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_logical_high_high_high_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202083
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202084
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_high_high_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202085
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202086
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_high_high_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202087
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202088
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202089
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202090
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202091
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202092
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202093
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202094
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202095
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_high_high_low_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202096
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_high_high_low_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202097
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_high_high_low_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202098
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_logical_high_high_low_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202099
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202100
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_high_low_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202101
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202102
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_high_low_register
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202103
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_high_on_condition_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202104
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_population_count
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG202105
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_on_condition_long_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202106
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_select_register_long
	DQ	FLAT:iprint_ASMFMT_RRF_A
	DQ	FLAT:$SG202107
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_distinct_long_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202108
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_register_long_with_complement
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202109
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_distinct_long_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202110
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_exclusive_or_distinct_long_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202111
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_distinct_long_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202112
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_distinct_long_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202113
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_distinct_long_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202114
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_logical_distinct_long_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202115
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_long_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202116
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_single_long_register_cc
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202117
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202118
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202119
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_select_register
	DQ	FLAT:iprint_ASMFMT_RRF_A
	DQ	FLAT:$SG202120
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202121
	DQ	FLAT:s370_load_on_condition_register
	DQ	FLAT:s390_load_on_condition_register
	DQ	FLAT:z900_load_on_condition_register
	DQ	FLAT:iprint_ASMFMT_RRF_M3
	DQ	FLAT:$SG202122
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202123
	DQ	FLAT:s370_and_distinct_register
	DQ	FLAT:s390_and_distinct_register
	DQ	FLAT:z900_and_distinct_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202124
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_register_with_complement
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202125
	DQ	FLAT:s370_or_distinct_register
	DQ	FLAT:s390_or_distinct_register
	DQ	FLAT:z900_or_distinct_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202126
	DQ	FLAT:s370_exclusive_or_distinct_register
	DQ	FLAT:s390_exclusive_or_distinct_register
	DQ	FLAT:z900_exclusive_or_distinct_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202127
	DQ	FLAT:s370_add_distinct_register
	DQ	FLAT:s390_add_distinct_register
	DQ	FLAT:z900_add_distinct_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202128
	DQ	FLAT:s370_subtract_distinct_register
	DQ	FLAT:s390_subtract_distinct_register
	DQ	FLAT:z900_subtract_distinct_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202129
	DQ	FLAT:s370_add_logical_distinct_register
	DQ	FLAT:s390_add_logical_distinct_register
	DQ	FLAT:z900_add_logical_distinct_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202130
	DQ	FLAT:s370_subtract_logical_distinct_register
	DQ	FLAT:s390_subtract_logical_distinct_register
	DQ	FLAT:z900_subtract_logical_distinct_register
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202131
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202132
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_single_register_cc
	DQ	FLAT:iprint_ASMFMT_RRR
	DQ	FLAT:$SG202133
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202134
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202135
gen_opcode_c0_x DQ FLAT:s370_load_address_relative_long
	DQ	FLAT:s390_load_address_relative_long
	DQ	FLAT:z900_load_address_relative_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202168
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_long_fullword_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202169
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202170
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202171
	DQ	FLAT:s370_branch_relative_on_condition_long
	DQ	FLAT:s390_branch_relative_on_condition_long
	DQ	FLAT:z900_branch_relative_on_condition_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202172
	DQ	FLAT:s370_branch_relative_and_save_long
	DQ	FLAT:s390_branch_relative_and_save_long
	DQ	FLAT:z900_branch_relative_and_save_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202173
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_exclusive_or_immediate_high_fullword
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202174
	DQ	FLAT:s370_exclusive_or_immediate_low_fullword
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_exclusive_or_immediate_low_fullword
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202175
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_immediate_high_fullword
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202176
	DQ	FLAT:s370_insert_immediate_low_fullword
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_immediate_low_fullword
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202177
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_immediate_high_fullword
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202178
	DQ	FLAT:s370_and_immediate_low_fullword
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_immediate_low_fullword
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202179
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_immediate_high_fullword
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202180
	DQ	FLAT:s370_or_immediate_low_fullword
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_immediate_low_fullword
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202181
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_immediate_high_fullword
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202182
	DQ	FLAT:s370_load_logical_immediate_low_fullword
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_immediate_low_fullword
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202183
gen_opcode_c2_x DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_single_immediate_long_fullword
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202216
	DQ	FLAT:s370_multiply_single_immediate_fullword
	DQ	FLAT:s390_multiply_single_immediate_fullword
	DQ	FLAT:z900_multiply_single_immediate_fullword
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202217
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202218
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202219
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_logical_long_fullword_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202220
	DQ	FLAT:s370_subtract_logical_fullword_immediate
	DQ	FLAT:s390_subtract_logical_fullword_immediate
	DQ	FLAT:z900_subtract_logical_fullword_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202221
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202222
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202223
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_long_fullword_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202224
	DQ	FLAT:s370_add_fullword_immediate
	DQ	FLAT:s390_add_fullword_immediate
	DQ	FLAT:z900_add_fullword_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202225
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_long_fullword_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202226
	DQ	FLAT:s370_add_logical_fullword_immediate
	DQ	FLAT:s390_add_logical_fullword_immediate
	DQ	FLAT:z900_add_logical_fullword_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202227
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_long_fullword_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202228
	DQ	FLAT:s370_compare_fullword_immediate
	DQ	FLAT:s390_compare_fullword_immediate
	DQ	FLAT:z900_compare_fullword_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202229
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_long_fullword_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202230
	DQ	FLAT:s370_compare_logical_fullword_immediate
	DQ	FLAT:s390_compare_logical_fullword_immediate
	DQ	FLAT:z900_compare_logical_fullword_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202231
gen_opcode_c4_x DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202264
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202265
	DQ	FLAT:s370_load_logical_halfword_relative_long
	DQ	FLAT:s390_load_logical_halfword_relative_long
	DQ	FLAT:z900_load_logical_halfword_relative_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202266
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202267
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_halfword_relative_long_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202268
	DQ	FLAT:s370_load_halfword_relative_long
	DQ	FLAT:s390_load_halfword_relative_long
	DQ	FLAT:z900_load_halfword_relative_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202269
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_halfword_relative_long_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202270
	DQ	FLAT:s370_store_halfword_relative_long
	DQ	FLAT:s390_store_halfword_relative_long
	DQ	FLAT:z900_store_halfword_relative_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202271
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_relative_long_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202272
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202273
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202274
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_relative_long_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202275
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_relative_long_long_fullword
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202276
	DQ	FLAT:s370_load_relative_long
	DQ	FLAT:s390_load_relative_long
	DQ	FLAT:z900_load_relative_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202277
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_relative_long_long_fullword
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202278
	DQ	FLAT:s370_store_relative_long
	DQ	FLAT:s390_store_relative_long
	DQ	FLAT:z900_store_relative_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202279
gen_opcode_c6_x DQ FLAT:s370_execute_relative_long
	DQ	FLAT:s390_execute_relative_long
	DQ	FLAT:z900_execute_relative_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202312
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202313
	DQ	FLAT:s370_prefetch_data_relative_long
	DQ	FLAT:s390_prefetch_data_relative_long
	DQ	FLAT:z900_prefetch_data_relative_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202314
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202315
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_halfword_relative_long_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202316
	DQ	FLAT:s370_compare_halfword_relative_long
	DQ	FLAT:s390_compare_halfword_relative_long
	DQ	FLAT:z900_compare_halfword_relative_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202317
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_relative_long_long_halfword
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202318
	DQ	FLAT:s370_compare_logical_relative_long_halfword
	DQ	FLAT:s390_compare_logical_relative_long_halfword
	DQ	FLAT:z900_compare_logical_relative_long_halfword
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202319
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_relative_long_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202320
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202321
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_relative_long_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202322
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202323
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_relative_long_long_fullword
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202324
	DQ	FLAT:s370_compare_relative_long
	DQ	FLAT:s390_compare_relative_long
	DQ	FLAT:z900_compare_relative_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202325
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_relative_long_long_fullword
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202326
	DQ	FLAT:s370_compare_logical_relative_long
	DQ	FLAT:s390_compare_logical_relative_long
	DQ	FLAT:z900_compare_logical_relative_long
	DQ	FLAT:iprint_ASMFMT_RIL_A
	DQ	FLAT:$SG202327
gen_opcode_c8_x DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_move_with_optional_specifications
	DQ	FLAT:iprint_ASMFMT_SSF
	DQ	FLAT:$SG202360
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_cpu_time
	DQ	FLAT:iprint_ASMFMT_SSF
	DQ	FLAT:$SG202361
	DQ	FLAT:s370_compare_and_swap_and_store
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_and_swap_and_store
	DQ	FLAT:iprint_ASMFMT_SSF
	DQ	FLAT:$SG202362
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202363
	DQ	FLAT:s370_load_pair_disjoint
	DQ	FLAT:s390_load_pair_disjoint
	DQ	FLAT:z900_load_pair_disjoint
	DQ	FLAT:iprint_ASMFMT_SSF_RSS
	DQ	FLAT:$SG202364
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_pair_disjoint_long
	DQ	FLAT:iprint_ASMFMT_SSF_RSS
	DQ	FLAT:$SG202365
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202366
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202367
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202368
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202369
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202370
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202371
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202372
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202373
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202374
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202375
gen_opcode_cc_x DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202408
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202409
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202410
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202411
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202412
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202413
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_relative_on_count_high
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202414
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202415
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_high_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202416
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202417
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_with_signed_immediate_high
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202418
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_with_signed_immediate_high_n
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202419
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202420
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_high_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202421
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202422
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_high_immediate
	DQ	FLAT:iprint_ASMFMT_RIL
	DQ	FLAT:$SG202423
gen_opcode_e3xx DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202936
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202937
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_and_test_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202938
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_real_address_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202939
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202940
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202941
	DQ	FLAT:s370_convert_to_binary_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_to_binary_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202942
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202943
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202944
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202945
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202946
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_logical_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202947
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_single_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202948
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_divide_single_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202949
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_to_binary_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202950
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_reversed_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202951
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202952
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202953
	DQ	FLAT:s370_load_and_test
	DQ	FLAT:s390_load_and_test
	DQ	FLAT:z900_load_and_test
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202954
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_real_address_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202955
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_long_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202956
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_long_halfword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202957
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_long_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202958
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_long_thirtyone
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202959
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_long_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202960
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_long_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202961
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_long_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202962
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_logical_long_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202963
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_single_long_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202964
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_divide_single_long_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202965
	DQ	FLAT:s370_load_reversed
	DQ	FLAT:s390_load_reversed
	DQ	FLAT:z900_load_reversed
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202966
	DQ	FLAT:s370_load_reversed_half
	DQ	FLAT:s390_load_reversed_half
	DQ	FLAT:z900_load_reversed_half
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202967
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202968
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202969
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202970
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202971
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202972
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_nontransactional_store
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202973
	DQ	FLAT:s370_convert_to_decimal_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_to_decimal_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202974
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202975
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202976
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202977
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_and_zero_rightmost_byte_grande
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202978
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202979
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202980
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202981
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_to_decimal_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202982
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_reversed_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202983
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_long_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202984
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_long_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202985
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_and_test_long_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202986
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202987
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_halfword_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202988
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202989
	DQ	FLAT:s370_prefetch_data
	DQ	FLAT:s390_prefetch_data
	DQ	FLAT:z900_prefetch_data
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202990
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202991
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_long_halfword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202992
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_long_halfword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202993
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_and_zero_rightmost_byte
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202994
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_and_zero_rightmost_byte
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202995
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_long_halfword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202996
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG202997
	DQ	FLAT:s370_store_reversed
	DQ	FLAT:s390_store_reversed
	DQ	FLAT:z900_store_reversed
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202998
	DQ	FLAT:s370_store_reversed_half
	DQ	FLAT:s390_store_reversed_half
	DQ	FLAT:z900_store_reversed_half
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG202999
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203000
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203001
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203002
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203003
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203004
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203005
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_on_count_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203006
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_indirect_on_condition
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203007
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203008
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203009
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203010
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203011
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203012
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203013
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203014
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203015
	DQ	FLAT:s370_store_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203016
	DQ	FLAT:s370_multiply_single_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_single_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203017
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203018
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_single_cc
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203019
	DQ	FLAT:s370_and_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203020
	DQ	FLAT:s370_compare_logical_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203021
	DQ	FLAT:s370_or_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203022
	DQ	FLAT:s370_exclusive_or_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_exclusive_or_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203023
	DQ	FLAT:s370_load_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203024
	DQ	FLAT:s370_compare_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203025
	DQ	FLAT:s370_add_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203026
	DQ	FLAT:s370_subtract_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203027
	DQ	FLAT:s370_multiply_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203028
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203029
	DQ	FLAT:s370_add_logical_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203030
	DQ	FLAT:s370_subtract_logical_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_logical_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203031
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203032
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203033
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203034
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203035
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203036
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203037
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203038
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203039
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203040
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203041
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203042
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203043
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203044
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203045
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203046
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203047
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_halfword_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203048
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_address_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203049
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_character_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203050
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_character_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203051
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203052
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_address_extended_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203053
	DQ	FLAT:s370_load_byte
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_byte
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203054
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_byte_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203055
	DQ	FLAT:s370_load_halfword_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_halfword_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203056
	DQ	FLAT:s370_compare_halfword_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_halfword_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203057
	DQ	FLAT:s370_add_halfword_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_halfword_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203058
	DQ	FLAT:s370_subtract_halfword_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_halfword_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203059
	DQ	FLAT:s370_multiply_halfword_y
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_halfword_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203060
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203061
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203062
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203063
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203064
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203065
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_exclusive_or_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203066
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_single_long_cc
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203067
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203068
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_long_and_trap
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203069
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_logical_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203070
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_divide_logical_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203071
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_carry_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203072
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_subtract_logical_borrow_long
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203073
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203074
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203075
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203076
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203077
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_pair_to_quadword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203078
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_pair_from_quadword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203079
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_long_character
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203080
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_long_halfword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203081
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203082
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203083
	DQ	FLAT:s370_load_logical_character
	DQ	FLAT:s390_load_logical_character
	DQ	FLAT:z900_load_logical_character
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203084
	DQ	FLAT:s370_load_logical_halfword
	DQ	FLAT:s390_load_logical_halfword
	DQ	FLAT:z900_load_logical_halfword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203085
	DQ	FLAT:s370_multiply_logical
	DQ	FLAT:s390_multiply_logical
	DQ	FLAT:z900_multiply_logical
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203086
	DQ	FLAT:s370_divide_logical
	DQ	FLAT:s390_divide_logical
	DQ	FLAT:z900_divide_logical
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203087
	DQ	FLAT:s370_add_logical_carry
	DQ	FLAT:s390_add_logical_carry
	DQ	FLAT:z900_add_logical_carry
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203088
	DQ	FLAT:s370_subtract_logical_borrow
	DQ	FLAT:s390_subtract_logical_borrow
	DQ	FLAT:z900_subtract_logical_borrow
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203089
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203090
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203091
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_long_thirtyone_and_trap
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203092
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_long_fullword_and_trap
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203093
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203094
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_and_trap
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203095
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203096
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203097
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203098
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203099
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203100
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203101
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203102
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203103
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203104
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203105
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203106
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203107
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203108
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203109
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203110
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203111
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203112
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203113
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203114
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203115
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203116
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203117
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203118
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203119
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203120
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203121
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203122
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203123
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203124
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203125
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203126
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203127
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_byte_high
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203128
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203129
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_character_high
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203130
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_character_high
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203131
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_halfword_high
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203132
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203133
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_logical_halfword_high
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203134
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_halfword_high
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203135
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_fullword_high_and_trap
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203136
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203137
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_fullword_high
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203138
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_fullword_high
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203139
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203140
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_high_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203141
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203142
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_high_fullword
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG203143
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203144
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203145
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203146
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203147
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203148
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203149
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203150
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203151
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203152
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203153
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203154
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203155
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203156
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203157
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203158
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203159
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203160
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203161
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203162
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203163
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203164
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203165
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203166
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203167
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203168
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203169
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203170
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203171
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203172
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203173
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203174
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203175
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203176
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203177
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203178
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203179
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203180
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203181
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203182
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203183
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203184
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203185
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203186
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203187
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203188
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203189
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203190
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203191
gen_opcode_e7xx DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205240
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205241
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205242
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205243
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205244
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205245
	DQ	FLAT:s370_vector_load
	DQ	FLAT:s390_vector_load
	DQ	FLAT:z900_vector_load
	DQ	FLAT:iprint_ASMFMT_VRX
	DQ	FLAT:$SG205246
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205247
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205248
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205249
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205250
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205251
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205252
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205253
	DQ	FLAT:s370_vector_store
	DQ	FLAT:s390_vector_store
	DQ	FLAT:z900_vector_store
	DQ	FLAT:iprint_ASMFMT_VRX
	DQ	FLAT:$SG205254
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205255
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205256
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205257
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205258
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205259
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205260
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205261
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205262
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205263
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205264
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205265
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205266
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205267
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205268
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205269
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205270
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205271
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205272
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205273
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205274
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205275
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205276
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205277
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205278
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205279
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205280
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205281
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205282
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205283
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205284
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205285
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205286
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205287
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205288
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205289
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205290
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205291
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205292
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205293
	DQ	FLAT:s370_vector_load_multiple
	DQ	FLAT:s390_vector_load_multiple
	DQ	FLAT:z900_vector_load_multiple
	DQ	FLAT:iprint_ASMFMT_VRS_A
	DQ	FLAT:$SG205294
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205295
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205296
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205297
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205298
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205299
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205300
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205301
	DQ	FLAT:s370_vector_store_multiple
	DQ	FLAT:s390_vector_store_multiple
	DQ	FLAT:z900_vector_store_multiple
	DQ	FLAT:iprint_ASMFMT_VRS_A
	DQ	FLAT:$SG205302
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205303
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205304
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205305
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205306
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205307
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205308
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205309
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205310
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205311
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205312
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205313
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205314
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205315
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205316
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205317
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205318
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205319
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205320
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205321
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205322
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205323
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205324
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205325
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205326
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205327
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205328
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205329
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205330
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205331
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205332
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205333
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205334
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205335
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205336
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205337
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205338
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205339
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205340
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205341
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205342
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205343
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205344
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205345
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205346
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205347
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205348
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205349
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205350
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205351
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205352
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205353
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205354
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205355
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205356
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205357
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205358
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205359
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205360
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205361
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205362
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205363
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205364
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205365
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205366
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205367
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205368
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205369
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205370
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205371
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205372
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205373
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205374
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205375
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205376
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205377
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205378
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205379
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205380
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205381
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205382
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205383
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205384
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205385
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205386
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205387
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205388
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205389
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205390
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205391
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205392
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205393
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205394
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205395
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205396
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205397
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205398
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205399
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205400
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205401
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205402
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205403
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205404
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205405
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205406
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205407
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205408
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205409
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205410
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205411
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205412
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205413
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205414
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205415
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205416
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205417
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205418
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205419
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205420
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205421
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205422
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205423
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205424
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205425
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205426
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205427
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205428
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205429
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205430
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205431
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205432
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205433
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205434
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205435
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205436
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205437
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205438
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205439
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205440
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205441
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205442
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205443
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205444
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205445
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205446
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205447
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205448
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205449
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205450
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205451
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205452
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205453
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205454
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205455
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205456
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205457
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205458
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205459
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205460
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205461
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205462
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205463
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205464
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205465
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205466
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205467
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205468
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205469
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205470
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205471
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205472
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205473
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205474
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205475
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205476
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205477
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205478
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205479
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205480
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205481
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205482
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205483
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205484
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205485
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205486
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205487
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205488
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205489
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205490
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205491
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205492
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205493
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205494
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG205495
gen_opcode_e5xx DQ FLAT:s370_load_address_space_parameters
	DQ	FLAT:s390_load_address_space_parameters
	DQ	FLAT:z900_load_address_space_parameters
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203704
	DQ	FLAT:s370_test_protection
	DQ	FLAT:s390_test_protection
	DQ	FLAT:z900_test_protection
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203705
	DQ	FLAT:s370_fix_page
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_real_address
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203706
	DQ	FLAT:s370_svc_assist
	DQ	FLAT:s390_svc_assist
	DQ	FLAT:z900_svc_assist
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203707
	DQ	FLAT:s370_obtain_local_lock
	DQ	FLAT:s390_obtain_local_lock
	DQ	FLAT:z900_obtain_local_lock
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203708
	DQ	FLAT:s370_release_local_lock
	DQ	FLAT:s390_release_local_lock
	DQ	FLAT:z900_release_local_lock
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203709
	DQ	FLAT:s370_obtain_cms_lock
	DQ	FLAT:s390_obtain_cms_lock
	DQ	FLAT:z900_obtain_cms_lock
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203710
	DQ	FLAT:s370_release_cms_lock
	DQ	FLAT:s390_release_cms_lock
	DQ	FLAT:z900_release_cms_lock
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203711
	DQ	FLAT:s370_trace_svc_interruption
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203712
	DQ	FLAT:s370_trace_program_interruption
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203713
	DQ	FLAT:s370_trace_initial_srb_dispatch
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_move_right_to_left
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203714
	DQ	FLAT:s370_trace_io_interruption
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203715
	DQ	FLAT:s370_trace_task_dispatch
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203716
	DQ	FLAT:s370_trace_svc_return
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203717
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_move_with_source_key
	DQ	FLAT:z900_move_with_source_key
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203718
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_move_with_destination_key
	DQ	FLAT:z900_move_with_destination_key
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG203719
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203720
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203721
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203722
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203723
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203724
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203725
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203726
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203727
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203728
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203729
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203730
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203731
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203732
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203733
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203734
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203735
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203736
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203737
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203738
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203739
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203740
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203741
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203742
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203743
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203744
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203745
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203746
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203747
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203748
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203749
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203750
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203751
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203752
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203753
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203754
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203755
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203756
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203757
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203758
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203759
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203760
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203761
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203762
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203763
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203764
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203765
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203766
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203767
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203768
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203769
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203770
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203771
	DQ	FLAT:s370_move_halfword_from_halfword_immediate
	DQ	FLAT:s390_move_halfword_from_halfword_immediate
	DQ	FLAT:z900_move_halfword_from_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_SIL
	DQ	FLAT:$SG203772
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203773
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203774
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203775
	DQ	FLAT:s370_move_long_from_halfword_immediate
	DQ	FLAT:s390_move_long_from_halfword_immediate
	DQ	FLAT:z900_move_long_from_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_SIL
	DQ	FLAT:$SG203776
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203777
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203778
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203779
	DQ	FLAT:s370_move_fullword_from_halfword_immediate
	DQ	FLAT:s390_move_fullword_from_halfword_immediate
	DQ	FLAT:z900_move_fullword_from_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_SIL
	DQ	FLAT:$SG203780
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203781
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203782
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203783
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203784
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203785
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203786
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203787
	DQ	FLAT:s370_compare_halfword_immediate_halfword_storage
	DQ	FLAT:s390_compare_halfword_immediate_halfword_storage
	DQ	FLAT:z900_compare_halfword_immediate_halfword_storage
	DQ	FLAT:iprint_ASMFMT_SIL
	DQ	FLAT:$SG203788
	DQ	FLAT:s370_compare_logical_immediate_halfword_storage
	DQ	FLAT:s390_compare_logical_immediate_halfword_storage
	DQ	FLAT:z900_compare_logical_immediate_halfword_storage
	DQ	FLAT:iprint_ASMFMT_SIL
	DQ	FLAT:$SG203789
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203790
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203791
	DQ	FLAT:s370_compare_halfword_immediate_long_storage
	DQ	FLAT:s390_compare_halfword_immediate_long_storage
	DQ	FLAT:z900_compare_halfword_immediate_long_storage
	DQ	FLAT:iprint_ASMFMT_SIL
	DQ	FLAT:$SG203792
	DQ	FLAT:s370_compare_logical_immediate_long_storage
	DQ	FLAT:s390_compare_logical_immediate_long_storage
	DQ	FLAT:z900_compare_logical_immediate_long_storage
	DQ	FLAT:iprint_ASMFMT_SIL
	DQ	FLAT:$SG203793
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203794
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203795
	DQ	FLAT:s370_compare_halfword_immediate_storage
	DQ	FLAT:s390_compare_halfword_immediate_storage
	DQ	FLAT:z900_compare_halfword_immediate_storage
	DQ	FLAT:iprint_ASMFMT_SIL
	DQ	FLAT:$SG203796
	DQ	FLAT:s370_compare_logical_immediate_fullword_storage
	DQ	FLAT:s390_compare_logical_immediate_fullword_storage
	DQ	FLAT:z900_compare_logical_immediate_fullword_storage
	DQ	FLAT:iprint_ASMFMT_SIL
	DQ	FLAT:$SG203797
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203798
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203799
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_transaction_begin
	DQ	FLAT:iprint_ASMFMT_SIL
	DQ	FLAT:$SG203800
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_transaction_begin_constrained
	DQ	FLAT:iprint_ASMFMT_SIL
	DQ	FLAT:$SG203801
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203802
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203803
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203804
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203805
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203806
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203807
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203808
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203809
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203810
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203811
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203812
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203813
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203814
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203815
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203816
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203817
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203818
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203819
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203820
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203821
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203822
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203823
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203824
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203825
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203826
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203827
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203828
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203829
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203830
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203831
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203832
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203833
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203834
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203835
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203836
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203837
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203838
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203839
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203840
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203841
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203842
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203843
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203844
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203845
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203846
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203847
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203848
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203849
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203850
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203851
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203852
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203853
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203854
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203855
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203856
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203857
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203858
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203859
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203860
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203861
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203862
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203863
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203864
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203865
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203866
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203867
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203868
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203869
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203870
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203871
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203872
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203873
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203874
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203875
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203876
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203877
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203878
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203879
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203880
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203881
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203882
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203883
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203884
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203885
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203886
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203887
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203888
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203889
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203890
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203891
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203892
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203893
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203894
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203895
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203896
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203897
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203898
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203899
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203900
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203901
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203902
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203903
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203904
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203905
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203906
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203907
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203908
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203909
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203910
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203911
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203912
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203913
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203914
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203915
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203916
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203917
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203918
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203919
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203920
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203921
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203922
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203923
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203924
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203925
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203926
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203927
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203928
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203929
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203930
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203931
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203932
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203933
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203934
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203935
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203936
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203937
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203938
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203939
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203940
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203941
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203942
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203943
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203944
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203945
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203946
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203947
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203948
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203949
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203950
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203951
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203952
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203953
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203954
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203955
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203956
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203957
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203958
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG203959
gen_opcode_e6xx DQ FLAT:s370_ecpsvm_basic_freex
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204472
	DQ	FLAT:s370_ecpsvm_basic_fretx
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204473
	DQ	FLAT:s370_ecpsvm_lock_page
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204474
	DQ	FLAT:s370_ecpsvm_unlock_page
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204475
	DQ	FLAT:s370_ecpsvm_decode_next_ccw
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204476
	DQ	FLAT:s370_ecpsvm_free_ccwstor
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204477
	DQ	FLAT:s370_ecpsvm_locate_vblock
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204478
	DQ	FLAT:s370_ecpsvm_disp1
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204479
	DQ	FLAT:s370_ecpsvm_tpage
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204480
	DQ	FLAT:s370_ecpsvm_tpage_lock
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204481
	DQ	FLAT:s370_ecpsvm_inval_segtab
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204482
	DQ	FLAT:s370_ecpsvm_inval_ptable
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204483
	DQ	FLAT:s370_ecpsvm_decode_first_ccw
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204484
	DQ	FLAT:s370_ecpsvm_dispatch_main
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204485
	DQ	FLAT:s370_ecpsvm_locate_rblock
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204486
	DQ	FLAT:s370_ecpsvm_comm_ccwproc
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204487
	DQ	FLAT:s370_ecpsvm_unxlate_ccw
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204488
	DQ	FLAT:s370_ecpsvm_disp2
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204489
	DQ	FLAT:s370_ecpsvm_store_level
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204490
	DQ	FLAT:s370_ecpsvm_loc_chgshrpg
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204491
	DQ	FLAT:s370_ecpsvm_extended_freex
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204492
	DQ	FLAT:s370_ecpsvm_extended_fretx
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204493
	DQ	FLAT:s370_ecpsvm_prefmach_assist
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_SSE
	DQ	FLAT:$SG204494
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204495
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204496
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204497
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204498
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204499
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204500
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204501
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204502
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204503
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204504
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204505
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204506
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204507
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204508
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204509
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204510
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204511
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204512
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204513
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204514
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204515
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204516
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204517
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204518
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204519
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204520
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204521
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204522
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204523
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204524
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204525
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204526
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204527
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204528
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204529
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204530
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204531
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204532
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204533
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204534
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204535
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204536
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204537
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204538
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204539
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204540
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204541
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204542
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204543
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204544
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204545
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204546
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204547
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204548
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204549
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204550
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204551
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204552
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204553
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204554
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204555
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204556
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204557
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204558
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204559
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204560
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204561
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204562
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204563
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204564
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204565
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204566
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204567
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204568
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204569
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204570
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204571
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204572
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204573
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204574
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204575
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204576
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204577
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204578
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204579
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204580
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204581
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204582
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204583
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204584
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204585
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204586
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204587
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204588
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204589
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204590
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204591
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204592
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204593
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204594
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204595
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204596
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204597
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204598
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204599
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204600
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204601
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204602
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204603
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204604
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204605
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204606
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204607
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204608
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204609
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204610
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204611
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204612
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204613
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204614
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204615
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204616
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204617
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204618
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204619
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204620
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204621
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204622
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204623
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204624
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204625
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204626
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204627
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204628
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204629
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204630
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204631
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204632
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204633
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204634
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204635
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204636
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204637
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204638
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204639
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204640
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204641
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204642
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204643
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204644
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204645
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204646
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204647
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204648
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204649
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204650
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204651
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204652
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204653
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204654
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204655
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204656
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204657
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204658
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204659
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204660
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204661
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204662
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204663
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204664
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204665
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204666
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204667
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204668
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204669
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204670
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204671
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204672
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204673
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204674
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204675
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204676
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204677
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204678
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204679
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204680
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204681
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204682
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204683
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204684
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204685
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204686
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204687
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204688
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204689
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204690
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204691
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204692
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204693
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204694
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204695
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204696
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204697
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204698
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204699
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204700
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204701
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204702
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204703
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204704
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204705
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204706
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204707
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204708
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204709
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204710
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204711
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204712
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204713
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204714
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204715
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204716
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204717
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204718
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204719
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204720
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204721
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204722
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204723
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204724
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204725
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204726
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG204727
gen_opcode_ebxx DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206008
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206009
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206010
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206011
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_multiple_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206012
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206013
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206014
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206015
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206016
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206017
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_shift_right_single_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206018
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_shift_left_single_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206019
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_shift_right_single_logical_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206020
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_shift_left_single_logical_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206021
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206022
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_trace_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206023
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206024
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206025
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206026
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206027
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_and_swap_y
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206028
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206029
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206030
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206031
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206032
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206033
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206034
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206035
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_rotate_left_single_logical_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206036
	DQ	FLAT:s370_rotate_left_single_logical
	DQ	FLAT:s390_rotate_left_single_logical
	DQ	FLAT:z900_rotate_left_single_logical
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206037
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206038
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206039
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_characters_under_mask_high
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206040
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_characters_under_mask_y
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206041
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206042
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_and_trap
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206043
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_multiple_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206044
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_control_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206045
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_multiple_high
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206046
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206047
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206048
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206049
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206050
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_and_trap_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206051
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_characters_under_mask_high
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206052
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_characters_under_mask_y
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206053
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206054
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_control_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206055
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_and_swap_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206056
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_double_and_swap_y
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206057
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206058
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206059
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206060
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206061
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206062
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206063
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206064
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206065
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206066
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206067
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206068
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206069
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_double_and_swap_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206070
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206071
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206072
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206073
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206074
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206075
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_on_index_high_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206076
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_on_index_low_or_equal_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206077
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206078
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206079
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206080
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206081
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206082
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206083
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_extract_cpu_attribute
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206084
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206085
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206086
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206087
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206088
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_test_under_mask_y
	DQ	FLAT:iprint_ASMFMT_SIY
	DQ	FLAT:$SG206089
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_move_immediate_y
	DQ	FLAT:iprint_ASMFMT_SIY
	DQ	FLAT:$SG206090
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206091
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_and_immediate_y
	DQ	FLAT:iprint_ASMFMT_SIY
	DQ	FLAT:$SG206092
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_immediate_y
	DQ	FLAT:iprint_ASMFMT_SIY
	DQ	FLAT:$SG206093
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_or_immediate_y
	DQ	FLAT:iprint_ASMFMT_SIY
	DQ	FLAT:$SG206094
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_exclusive_or_immediate_y
	DQ	FLAT:iprint_ASMFMT_SIY
	DQ	FLAT:$SG206095
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206096
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206097
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206098
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206099
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206100
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206101
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206102
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206103
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206104
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206105
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206106
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206107
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206108
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206109
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206110
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206111
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206112
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206113
	DQ	FLAT:s370_add_immediate_storage
	DQ	FLAT:s390_add_immediate_storage
	DQ	FLAT:z900_add_immediate_storage
	DQ	FLAT:iprint_ASMFMT_SIY
	DQ	FLAT:$SG206114
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206115
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206116
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206117
	DQ	FLAT:s370_add_logical_with_signed_immediate
	DQ	FLAT:s390_add_logical_with_signed_immediate
	DQ	FLAT:z900_add_logical_with_signed_immediate
	DQ	FLAT:iprint_ASMFMT_SIY
	DQ	FLAT:$SG206118
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206119
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206120
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_program_status_word_extended_y
	DQ	FLAT:iprint_ASMFMT_SIY
	DQ	FLAT:$SG206121
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206122
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206123
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206124
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206125
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206126
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206127
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206128
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206129
	DQ	FLAT:s370_add_immediate_long_storage
	DQ	FLAT:s390_add_immediate_long_storage
	DQ	FLAT:z900_add_immediate_long_storage
	DQ	FLAT:iprint_ASMFMT_SIY
	DQ	FLAT:$SG206130
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206131
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206132
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206133
	DQ	FLAT:s370_add_logical_with_signed_immediate_long
	DQ	FLAT:s390_add_logical_with_signed_immediate_long
	DQ	FLAT:z900_add_logical_with_signed_immediate_long
	DQ	FLAT:iprint_ASMFMT_SIY
	DQ	FLAT:$SG206134
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206135
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_characters_under_mask_high
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206136
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_insert_characters_under_mask_y
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206137
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206138
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206139
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206140
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206141
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206142
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206143
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206144
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206145
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_set_queue_buffer_state
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206146
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206147
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206148
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206149
	DQ	FLAT:s370_move_long_unicode
	DQ	FLAT:s390_move_long_unicode
	DQ	FLAT:z900_move_long_unicode
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206150
	DQ	FLAT:s370_compare_logical_long_unicode
	DQ	FLAT:s390_compare_logical_long_unicode
	DQ	FLAT:z900_compare_logical_long_unicode
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206151
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_multiple_y
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206152
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206153
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206154
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206155
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206156
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206157
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_multiple_high
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206158
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206159
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_multiple_y
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206160
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206161
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_access_multiple_y
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206162
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_access_multiple_y
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206163
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206164
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206165
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206166
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206167
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206168
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206169
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206170
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206171
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206172
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206173
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206174
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206175
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206176
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206177
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206178
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206179
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206180
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206181
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206182
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206183
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206184
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206185
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206186
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206187
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206188
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206189
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206190
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206191
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206192
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206193
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206194
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206195
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206196
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206197
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206198
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206199
	DQ	FLAT:s370_test_decimal
	DQ	FLAT:s390_test_decimal
	DQ	FLAT:z900_test_decimal
	DQ	FLAT:iprint_ASMFMT_RSL
	DQ	FLAT:$SG206200
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206201
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206202
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206203
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206204
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206205
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206206
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206207
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206208
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206209
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206210
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206211
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206212
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206213
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206214
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206215
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206216
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206217
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206218
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206219
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206220
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206221
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206222
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206223
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206224
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206225
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206226
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206227
	DQ	FLAT:s370_shift_right_single_distinct
	DQ	FLAT:s390_shift_right_single_distinct
	DQ	FLAT:z900_shift_right_single_distinct
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206228
	DQ	FLAT:s370_shift_left_single_distinct
	DQ	FLAT:s390_shift_left_single_distinct
	DQ	FLAT:z900_shift_left_single_distinct
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206229
	DQ	FLAT:s370_shift_right_single_logical_distinct
	DQ	FLAT:s390_shift_right_single_logical_distinct
	DQ	FLAT:z900_shift_right_single_logical_distinct
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206230
	DQ	FLAT:s370_shift_left_single_logical_distinct
	DQ	FLAT:s390_shift_left_single_logical_distinct
	DQ	FLAT:z900_shift_left_single_logical_distinct
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206231
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_high_on_condition
	DQ	FLAT:iprint_ASMFMT_RSY_M3
	DQ	FLAT:$SG206232
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_high_on_condition
	DQ	FLAT:iprint_ASMFMT_RSY_M3
	DQ	FLAT:$SG206233
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_on_condition_long
	DQ	FLAT:iprint_ASMFMT_RSY_M3
	DQ	FLAT:$SG206234
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_on_condition_long
	DQ	FLAT:iprint_ASMFMT_RSY_M3
	DQ	FLAT:$SG206235
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_and_and_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206236
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206237
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_and_or_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206238
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_and_exclusive_or_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206239
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_and_add_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206240
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206241
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_and_add_logical_long
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206242
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206243
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206244
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206245
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206246
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206247
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206248
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206249
	DQ	FLAT:s370_load_on_condition
	DQ	FLAT:s390_load_on_condition
	DQ	FLAT:z900_load_on_condition
	DQ	FLAT:iprint_ASMFMT_RSY_M3
	DQ	FLAT:$SG206250
	DQ	FLAT:s370_store_on_condition
	DQ	FLAT:s390_store_on_condition
	DQ	FLAT:z900_store_on_condition
	DQ	FLAT:iprint_ASMFMT_RSY_M3
	DQ	FLAT:$SG206251
	DQ	FLAT:s370_load_and_and
	DQ	FLAT:s390_load_and_and
	DQ	FLAT:z900_load_and_and
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206252
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206253
	DQ	FLAT:s370_load_and_or
	DQ	FLAT:s390_load_and_or
	DQ	FLAT:z900_load_and_or
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206254
	DQ	FLAT:s370_load_and_exclusive_or
	DQ	FLAT:s390_load_and_exclusive_or
	DQ	FLAT:z900_load_and_exclusive_or
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206255
	DQ	FLAT:s370_load_and_add
	DQ	FLAT:s390_load_and_add
	DQ	FLAT:z900_load_and_add
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206256
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206257
	DQ	FLAT:s370_load_and_add_logical
	DQ	FLAT:s390_load_and_add_logical
	DQ	FLAT:z900_load_and_add_logical
	DQ	FLAT:iprint_ASMFMT_RSY
	DQ	FLAT:$SG206258
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206259
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206260
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206261
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206262
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206263
gen_opcode_ecxx DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206776
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206777
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206778
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206779
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206780
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206781
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206782
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206783
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206784
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206785
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206786
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206787
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206788
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206789
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206790
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206791
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206792
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206793
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206794
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206795
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206796
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206797
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206798
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206799
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206800
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206801
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206802
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206803
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206804
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206805
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206806
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206807
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206808
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206809
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206810
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206811
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206812
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206813
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206814
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206815
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206816
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206817
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206818
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206819
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206820
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206821
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206822
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206823
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206824
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206825
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206826
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206827
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206828
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206829
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206830
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206831
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206832
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206833
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206834
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206835
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206836
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206837
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206838
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206839
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206840
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206841
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_halfword_immediate_on_condition
	DQ	FLAT:iprint_ASMFMT_RIE_G
	DQ	FLAT:$SG206842
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206843
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_relative_on_index_high_long
	DQ	FLAT:iprint_ASMFMT_RIE
	DQ	FLAT:$SG206844
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_branch_relative_on_index_low_or_equal_long
	DQ	FLAT:iprint_ASMFMT_RIE
	DQ	FLAT:$SG206845
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_halfword_immediate_on_condition_grande
	DQ	FLAT:iprint_ASMFMT_RIE_G
	DQ	FLAT:$SG206846
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206847
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206848
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206849
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206850
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206851
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206852
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206853
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_halfword_high_immediate_on_condition
	DQ	FLAT:iprint_ASMFMT_RIE_G
	DQ	FLAT:$SG206854
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206855
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206856
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_rotate_then_insert_selected_bits_low_long_reg
	DQ	FLAT:iprint_ASMFMT_RIE_RRIII
	DQ	FLAT:$SG206857
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206858
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206859
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_rotate_then_and_selected_bits_long_reg
	DQ	FLAT:iprint_ASMFMT_RIE_RRIII
	DQ	FLAT:$SG206860
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_rotate_then_insert_selected_bits_long_reg
	DQ	FLAT:iprint_ASMFMT_RIE_RRIII
	DQ	FLAT:$SG206861
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_rotate_then_or_selected_bits_long_reg
	DQ	FLAT:iprint_ASMFMT_RIE_RRIII
	DQ	FLAT:$SG206862
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_rotate_then_exclusive_or_selected_bits_long_reg
	DQ	FLAT:iprint_ASMFMT_RIE_RRIII
	DQ	FLAT:$SG206863
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206864
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_rotate_then_insert_selected_bits_long_reg_n
	DQ	FLAT:iprint_ASMFMT_RIE_RRIII
	DQ	FLAT:$SG206865
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206866
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206867
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206868
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_rotate_then_insert_selected_bits_high_long_reg
	DQ	FLAT:iprint_ASMFMT_RIE_RRIII
	DQ	FLAT:$SG206869
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206870
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206871
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206872
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206873
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206874
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206875
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_and_branch_relative_long_register
	DQ	FLAT:iprint_ASMFMT_RIE_RRIM
	DQ	FLAT:$SG206876
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_and_branch_relative_long_register
	DQ	FLAT:iprint_ASMFMT_RIE_RRIM
	DQ	FLAT:$SG206877
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206878
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206879
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206880
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206881
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206882
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206883
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206884
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206885
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206886
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206887
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_immediate_and_trap_long
	DQ	FLAT:iprint_ASMFMT_RIE_RIM
	DQ	FLAT:$SG206888
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_immediate_and_trap_long
	DQ	FLAT:iprint_ASMFMT_RIE_RIM
	DQ	FLAT:$SG206889
	DQ	FLAT:s370_compare_immediate_and_trap
	DQ	FLAT:s390_compare_immediate_and_trap
	DQ	FLAT:z900_compare_immediate_and_trap
	DQ	FLAT:iprint_ASMFMT_RIE_RIM
	DQ	FLAT:$SG206890
	DQ	FLAT:s370_compare_logical_immediate_and_trap_fullword
	DQ	FLAT:s390_compare_logical_immediate_and_trap_fullword
	DQ	FLAT:z900_compare_logical_immediate_and_trap_fullword
	DQ	FLAT:iprint_ASMFMT_RIE_RIM
	DQ	FLAT:$SG206891
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206892
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206893
	DQ	FLAT:s370_compare_and_branch_relative_register
	DQ	FLAT:s390_compare_and_branch_relative_register
	DQ	FLAT:z900_compare_and_branch_relative_register
	DQ	FLAT:iprint_ASMFMT_RIE_RRIM
	DQ	FLAT:$SG206894
	DQ	FLAT:s370_compare_logical_and_branch_relative_register
	DQ	FLAT:s390_compare_logical_and_branch_relative_register
	DQ	FLAT:z900_compare_logical_and_branch_relative_register
	DQ	FLAT:iprint_ASMFMT_RIE_RRIM
	DQ	FLAT:$SG206895
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206896
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206897
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206898
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206899
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_immediate_and_branch_relative_long
	DQ	FLAT:iprint_ASMFMT_RIE_RMII
	DQ	FLAT:$SG206900
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_immediate_and_branch_relative_long
	DQ	FLAT:iprint_ASMFMT_RIE_RMII
	DQ	FLAT:$SG206901
	DQ	FLAT:s370_compare_immediate_and_branch_relative
	DQ	FLAT:s390_compare_immediate_and_branch_relative
	DQ	FLAT:z900_compare_immediate_and_branch_relative
	DQ	FLAT:iprint_ASMFMT_RIE_RMII
	DQ	FLAT:$SG206902
	DQ	FLAT:s370_compare_logical_immediate_and_branch_relative
	DQ	FLAT:s390_compare_logical_immediate_and_branch_relative
	DQ	FLAT:z900_compare_logical_immediate_and_branch_relative
	DQ	FLAT:iprint_ASMFMT_RIE_RMII
	DQ	FLAT:$SG206903
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206904
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206905
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206906
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206907
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206908
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206909
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206910
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206911
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206912
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206913
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206914
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206915
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206916
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206917
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206918
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206919
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206920
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206921
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206922
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206923
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206924
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206925
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206926
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206927
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206928
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206929
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206930
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206931
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206932
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206933
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206934
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206935
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206936
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206937
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206938
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206939
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206940
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206941
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206942
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206943
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206944
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206945
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206946
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206947
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206948
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206949
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206950
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206951
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206952
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206953
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206954
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206955
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206956
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206957
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206958
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206959
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206960
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206961
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206962
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206963
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206964
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206965
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206966
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206967
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206968
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206969
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206970
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206971
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206972
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206973
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206974
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206975
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206976
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206977
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206978
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206979
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206980
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206981
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206982
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206983
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206984
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206985
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206986
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206987
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206988
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206989
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206990
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206991
	DQ	FLAT:s370_add_distinct_halfword_immediate
	DQ	FLAT:s390_add_distinct_halfword_immediate
	DQ	FLAT:z900_add_distinct_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_RIE_RRI
	DQ	FLAT:$SG206992
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_distinct_long_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_RIE_RRI
	DQ	FLAT:$SG206993
	DQ	FLAT:s370_add_logical_distinct_signed_halfword_immediate
	DQ	FLAT:s390_add_logical_distinct_signed_halfword_immediate
	DQ	FLAT:z900_add_logical_distinct_signed_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_RIE_RRI
	DQ	FLAT:$SG206994
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_add_logical_distinct_long_signed_halfword_immediate
	DQ	FLAT:iprint_ASMFMT_RIE_RRI
	DQ	FLAT:$SG206995
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206996
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206997
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206998
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG206999
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207000
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207001
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207002
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207003
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_and_branch_long_register
	DQ	FLAT:iprint_ASMFMT_RRS
	DQ	FLAT:$SG207004
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_and_branch_long_register
	DQ	FLAT:iprint_ASMFMT_RRS
	DQ	FLAT:$SG207005
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207006
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207007
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207008
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207009
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207010
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207011
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207012
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207013
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207014
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207015
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207016
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207017
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207018
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207019
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207020
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207021
	DQ	FLAT:s370_compare_and_branch_register
	DQ	FLAT:s390_compare_and_branch_register
	DQ	FLAT:z900_compare_and_branch_register
	DQ	FLAT:iprint_ASMFMT_RRS
	DQ	FLAT:$SG207022
	DQ	FLAT:s370_compare_logical_and_branch_register
	DQ	FLAT:s390_compare_logical_and_branch_register
	DQ	FLAT:z900_compare_logical_and_branch_register
	DQ	FLAT:iprint_ASMFMT_RRS
	DQ	FLAT:$SG207023
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207024
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207025
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207026
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207027
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_immediate_and_branch_long
	DQ	FLAT:iprint_ASMFMT_RIS
	DQ	FLAT:$SG207028
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_compare_logical_immediate_and_branch_long
	DQ	FLAT:iprint_ASMFMT_RIS
	DQ	FLAT:$SG207029
	DQ	FLAT:s370_compare_immediate_and_branch
	DQ	FLAT:s390_compare_immediate_and_branch
	DQ	FLAT:z900_compare_immediate_and_branch
	DQ	FLAT:iprint_ASMFMT_RIS
	DQ	FLAT:$SG207030
	DQ	FLAT:s370_compare_logical_immediate_and_branch
	DQ	FLAT:s390_compare_logical_immediate_and_branch
	DQ	FLAT:z900_compare_logical_immediate_and_branch
	DQ	FLAT:iprint_ASMFMT_RIS
	DQ	FLAT:$SG207031
gen_opcode_edxx DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207544
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207545
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207546
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207547
	DQ	FLAT:s370_load_lengthened_bfp_short_to_long
	DQ	FLAT:s390_load_lengthened_bfp_short_to_long
	DQ	FLAT:z900_load_lengthened_bfp_short_to_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207548
	DQ	FLAT:s370_load_lengthened_bfp_long_to_ext
	DQ	FLAT:s390_load_lengthened_bfp_long_to_ext
	DQ	FLAT:z900_load_lengthened_bfp_long_to_ext
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207549
	DQ	FLAT:s370_load_lengthened_bfp_short_to_ext
	DQ	FLAT:s390_load_lengthened_bfp_short_to_ext
	DQ	FLAT:z900_load_lengthened_bfp_short_to_ext
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207550
	DQ	FLAT:s370_multiply_bfp_long_to_ext
	DQ	FLAT:s390_multiply_bfp_long_to_ext
	DQ	FLAT:z900_multiply_bfp_long_to_ext
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207551
	DQ	FLAT:s370_compare_and_signal_bfp_short
	DQ	FLAT:s390_compare_and_signal_bfp_short
	DQ	FLAT:z900_compare_and_signal_bfp_short
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207552
	DQ	FLAT:s370_compare_bfp_short
	DQ	FLAT:s390_compare_bfp_short
	DQ	FLAT:z900_compare_bfp_short
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207553
	DQ	FLAT:s370_add_bfp_short
	DQ	FLAT:s390_add_bfp_short
	DQ	FLAT:z900_add_bfp_short
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207554
	DQ	FLAT:s370_subtract_bfp_short
	DQ	FLAT:s390_subtract_bfp_short
	DQ	FLAT:z900_subtract_bfp_short
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207555
	DQ	FLAT:s370_multiply_bfp_short_to_long
	DQ	FLAT:s390_multiply_bfp_short_to_long
	DQ	FLAT:z900_multiply_bfp_short_to_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207556
	DQ	FLAT:s370_divide_bfp_short
	DQ	FLAT:s390_divide_bfp_short
	DQ	FLAT:z900_divide_bfp_short
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207557
	DQ	FLAT:s370_multiply_add_bfp_short
	DQ	FLAT:s390_multiply_add_bfp_short
	DQ	FLAT:z900_multiply_add_bfp_short
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207558
	DQ	FLAT:s370_multiply_subtract_bfp_short
	DQ	FLAT:s390_multiply_subtract_bfp_short
	DQ	FLAT:z900_multiply_subtract_bfp_short
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207559
	DQ	FLAT:s370_test_data_class_bfp_short
	DQ	FLAT:s390_test_data_class_bfp_short
	DQ	FLAT:z900_test_data_class_bfp_short
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207560
	DQ	FLAT:s370_test_data_class_bfp_long
	DQ	FLAT:s390_test_data_class_bfp_long
	DQ	FLAT:z900_test_data_class_bfp_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207561
	DQ	FLAT:s370_test_data_class_bfp_ext
	DQ	FLAT:s390_test_data_class_bfp_ext
	DQ	FLAT:z900_test_data_class_bfp_ext
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207562
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207563
	DQ	FLAT:s370_squareroot_bfp_short
	DQ	FLAT:s390_squareroot_bfp_short
	DQ	FLAT:z900_squareroot_bfp_short
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207564
	DQ	FLAT:s370_squareroot_bfp_long
	DQ	FLAT:s390_squareroot_bfp_long
	DQ	FLAT:z900_squareroot_bfp_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207565
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207566
	DQ	FLAT:s370_multiply_bfp_short
	DQ	FLAT:s390_multiply_bfp_short
	DQ	FLAT:z900_multiply_bfp_short
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207567
	DQ	FLAT:s370_compare_and_signal_bfp_long
	DQ	FLAT:s390_compare_and_signal_bfp_long
	DQ	FLAT:z900_compare_and_signal_bfp_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207568
	DQ	FLAT:s370_compare_bfp_long
	DQ	FLAT:s390_compare_bfp_long
	DQ	FLAT:z900_compare_bfp_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207569
	DQ	FLAT:s370_add_bfp_long
	DQ	FLAT:s390_add_bfp_long
	DQ	FLAT:z900_add_bfp_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207570
	DQ	FLAT:s370_subtract_bfp_long
	DQ	FLAT:s390_subtract_bfp_long
	DQ	FLAT:z900_subtract_bfp_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207571
	DQ	FLAT:s370_multiply_bfp_long
	DQ	FLAT:s390_multiply_bfp_long
	DQ	FLAT:z900_multiply_bfp_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207572
	DQ	FLAT:s370_divide_bfp_long
	DQ	FLAT:s390_divide_bfp_long
	DQ	FLAT:z900_divide_bfp_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207573
	DQ	FLAT:s370_multiply_add_bfp_long
	DQ	FLAT:s390_multiply_add_bfp_long
	DQ	FLAT:z900_multiply_add_bfp_long
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207574
	DQ	FLAT:s370_multiply_subtract_bfp_long
	DQ	FLAT:s390_multiply_subtract_bfp_long
	DQ	FLAT:z900_multiply_subtract_bfp_long
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207575
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207576
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207577
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207578
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207579
	DQ	FLAT:s370_load_lengthened_float_short_to_long
	DQ	FLAT:s390_load_lengthened_float_short_to_long
	DQ	FLAT:z900_load_lengthened_float_short_to_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207580
	DQ	FLAT:s370_load_lengthened_float_long_to_ext
	DQ	FLAT:s390_load_lengthened_float_long_to_ext
	DQ	FLAT:z900_load_lengthened_float_long_to_ext
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207581
	DQ	FLAT:s370_load_lengthened_float_short_to_ext
	DQ	FLAT:s390_load_lengthened_float_short_to_ext
	DQ	FLAT:z900_load_lengthened_float_short_to_ext
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207582
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207583
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207584
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207585
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207586
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207587
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207588
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207589
	DQ	FLAT:s370_multiply_add_float_short
	DQ	FLAT:s390_multiply_add_float_short
	DQ	FLAT:z900_multiply_add_float_short
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207590
	DQ	FLAT:s370_multiply_subtract_float_short
	DQ	FLAT:s390_multiply_subtract_float_short
	DQ	FLAT:z900_multiply_subtract_float_short
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207591
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207592
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207593
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207594
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207595
	DQ	FLAT:s370_squareroot_float_short
	DQ	FLAT:s390_squareroot_float_short
	DQ	FLAT:z900_squareroot_float_short
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207596
	DQ	FLAT:s370_squareroot_float_long
	DQ	FLAT:s390_squareroot_float_long
	DQ	FLAT:z900_squareroot_float_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207597
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207598
	DQ	FLAT:s370_multiply_float_short
	DQ	FLAT:s390_multiply_float_short
	DQ	FLAT:z900_multiply_float_short
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207599
	DQ	FLAT:s370_multiply_add_unnormal_float_long_to_ext_low
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_add_unnormal_float_long_to_ext_low
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207600
	DQ	FLAT:s370_multiply_unnormal_float_long_to_ext_low
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_unnormal_float_long_to_ext_low
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207601
	DQ	FLAT:s370_multiply_add_unnormal_float_long_to_ext
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_add_unnormal_float_long_to_ext
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207602
	DQ	FLAT:s370_multiply_unnormal_float_long_to_ext
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_unnormal_float_long_to_ext
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207603
	DQ	FLAT:s370_multiply_add_unnormal_float_long_to_ext_high
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_add_unnormal_float_long_to_ext_high
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207604
	DQ	FLAT:s370_multiply_unnormal_float_long_to_ext_high
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_multiply_unnormal_float_long_to_ext_high
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207605
	DQ	FLAT:s370_multiply_add_float_long
	DQ	FLAT:s390_multiply_add_float_long
	DQ	FLAT:z900_multiply_add_float_long
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207606
	DQ	FLAT:s370_multiply_subtract_float_long
	DQ	FLAT:s390_multiply_subtract_float_long
	DQ	FLAT:z900_multiply_subtract_float_long
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207607
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_shift_coefficient_left_dfp_long
	DQ	FLAT:z900_shift_coefficient_left_dfp_long
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207608
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_shift_coefficient_right_dfp_long
	DQ	FLAT:z900_shift_coefficient_right_dfp_long
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207609
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207610
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207611
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207612
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207613
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207614
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207615
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_shift_coefficient_left_dfp_ext
	DQ	FLAT:z900_shift_coefficient_left_dfp_ext
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207616
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_shift_coefficient_right_dfp_ext
	DQ	FLAT:z900_shift_coefficient_right_dfp_ext
	DQ	FLAT:iprint_ASMFMT_RXF
	DQ	FLAT:$SG207617
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207618
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207619
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207620
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207621
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207622
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207623
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_test_data_class_dfp_short
	DQ	FLAT:z900_test_data_class_dfp_short
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207624
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_test_data_group_dfp_short
	DQ	FLAT:z900_test_data_group_dfp_short
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207625
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207626
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207627
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_test_data_class_dfp_long
	DQ	FLAT:z900_test_data_class_dfp_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207628
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_test_data_group_dfp_long
	DQ	FLAT:z900_test_data_group_dfp_long
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207629
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207630
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207631
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_test_data_class_dfp_ext
	DQ	FLAT:z900_test_data_class_dfp_ext
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207632
	DQ	FLAT:operation_exception
	DQ	FLAT:s390_test_data_group_dfp_ext
	DQ	FLAT:z900_test_data_group_dfp_ext
	DQ	FLAT:iprint_ASMFMT_RXE
	DQ	FLAT:$SG207633
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207634
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207635
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207636
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207637
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207638
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207639
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207640
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207641
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207642
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207643
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_float_short_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG207644
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_load_float_long_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG207645
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_float_short_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG207646
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_store_float_long_y
	DQ	FLAT:iprint_ASMFMT_RXY
	DQ	FLAT:$SG207647
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207648
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207649
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207650
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207651
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207652
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207653
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207654
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207655
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207656
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207657
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207658
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207659
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207660
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207661
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207662
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207663
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207664
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207665
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207666
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207667
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207668
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207669
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207670
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207671
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207672
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207673
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207674
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207675
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207676
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207677
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207678
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207679
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207680
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207681
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207682
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207683
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207684
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207685
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207686
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207687
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207688
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207689
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207690
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207691
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207692
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207693
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207694
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207695
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207696
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207697
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207698
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207699
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207700
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207701
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207702
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207703
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207704
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207705
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207706
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207707
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207708
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207709
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207710
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207711
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_dfp_long_to_zoned
	DQ	FLAT:iprint_ASMFMT_RSL_RM
	DQ	FLAT:$SG207712
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_dfp_ext_to_zoned
	DQ	FLAT:iprint_ASMFMT_RSL_RM
	DQ	FLAT:$SG207713
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_zoned_to_dfp_long
	DQ	FLAT:iprint_ASMFMT_RSL_RM
	DQ	FLAT:$SG207714
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_zoned_to_dfp_ext
	DQ	FLAT:iprint_ASMFMT_RSL_RM
	DQ	FLAT:$SG207715
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_dfp_long_to_packed
	DQ	FLAT:iprint_ASMFMT_RSL_RM
	DQ	FLAT:$SG207716
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_dfp_ext_to_packed
	DQ	FLAT:iprint_ASMFMT_RSL_RM
	DQ	FLAT:$SG207717
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_packed_to_dfp_long
	DQ	FLAT:iprint_ASMFMT_RSL_RM
	DQ	FLAT:$SG207718
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:z900_convert_packed_to_dfp_ext
	DQ	FLAT:iprint_ASMFMT_RSL_RM
	DQ	FLAT:$SG207719
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207720
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207721
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207722
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207723
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207724
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207725
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207726
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207727
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207728
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207729
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207730
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207731
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207732
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207733
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207734
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207735
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207736
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207737
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207738
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207739
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207740
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207741
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207742
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207743
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207744
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207745
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207746
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207747
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207748
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207749
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207750
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207751
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207752
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207753
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207754
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207755
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207756
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207757
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207758
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207759
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207760
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207761
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207762
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207763
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207764
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207765
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207766
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207767
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207768
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207769
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207770
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207771
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207772
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207773
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207774
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207775
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207776
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207777
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207778
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207779
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207780
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207781
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207782
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207783
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207784
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207785
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207786
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207787
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207788
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207789
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207790
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207791
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207792
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207793
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207794
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207795
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207796
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207797
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207798
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG207799
gen_v_opcode_a4xx DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208312
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208313
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208314
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208315
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208316
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208317
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208318
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208319
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208320
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208321
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208322
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208323
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208324
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208325
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208326
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208327
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208328
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208329
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208330
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208331
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208332
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208333
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208334
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208335
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208336
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208337
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208338
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208339
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208340
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208341
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208342
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208343
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208344
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208345
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208346
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208347
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208348
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208349
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208350
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208351
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208352
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208353
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208354
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208355
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208356
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208357
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208358
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208359
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208360
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208361
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208362
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208363
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208364
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208365
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208366
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208367
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208368
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208369
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208370
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208371
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208372
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208373
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208374
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208375
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208376
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208377
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208378
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208379
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208380
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208381
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208382
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208383
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208384
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208385
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208386
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208387
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208388
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208389
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208390
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208391
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208392
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208393
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208394
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208395
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208396
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208397
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208398
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208399
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208400
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208401
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208402
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208403
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208404
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208405
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208406
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208407
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208408
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208409
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208410
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208411
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208412
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208413
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208414
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208415
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208416
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208417
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208418
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208419
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208420
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208421
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208422
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208423
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208424
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208425
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208426
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208427
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208428
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208429
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208430
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208431
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208432
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208433
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208434
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208435
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208436
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208437
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208438
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208439
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208440
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208441
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208442
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208443
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208444
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208445
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208446
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208447
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208448
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208449
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208450
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208451
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208452
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208453
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208454
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208455
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208456
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208457
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208458
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208459
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208460
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208461
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208462
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208463
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208464
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208465
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208466
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208467
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208468
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208469
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208470
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208471
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208472
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208473
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208474
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208475
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208476
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208477
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208478
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208479
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208480
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208481
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208482
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208483
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208484
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208485
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208486
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208487
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208488
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208489
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208490
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208491
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208492
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208493
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208494
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208495
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208496
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208497
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208498
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208499
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208500
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208501
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208502
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208503
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208504
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208505
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208506
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208507
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208508
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208509
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208510
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208511
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208512
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208513
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208514
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208515
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208516
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208517
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208518
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208519
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208520
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208521
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208522
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208523
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208524
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208525
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208526
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208527
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208528
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208529
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208530
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208531
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208532
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208533
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208534
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208535
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208536
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208537
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208538
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208539
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208540
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208541
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208542
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208543
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208544
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208545
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208546
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208547
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208548
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208549
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208550
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208551
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208552
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208553
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208554
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208555
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208556
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208557
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208558
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208559
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208560
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208561
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208562
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208563
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208564
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208565
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208566
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG208567
gen_v_opcode_a6xx DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209080
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209081
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209082
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209083
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209084
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209085
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209086
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209087
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209088
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209089
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209090
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209091
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209092
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209093
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209094
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209095
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209096
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209097
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209098
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209099
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209100
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209101
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209102
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209103
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209104
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209105
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209106
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209107
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209108
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209109
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209110
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209111
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209112
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209113
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209114
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209115
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209116
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209117
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209118
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209119
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209120
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209121
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209122
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209123
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209124
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209125
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209126
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209127
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209128
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209129
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209130
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209131
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209132
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209133
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209134
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209135
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209136
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209137
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209138
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209139
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209140
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209141
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209142
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209143
	DQ	FLAT:s370_v_test_vmr
	DQ	FLAT:s390_v_test_vmr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG209144
	DQ	FLAT:s370_v_complement_vmr
	DQ	FLAT:s390_v_complement_vmr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG209145
	DQ	FLAT:s370_v_count_left_zeros_in_vmr
	DQ	FLAT:s390_v_count_left_zeros_in_vmr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG209146
	DQ	FLAT:s370_v_count_ones_in_vmr
	DQ	FLAT:s390_v_count_ones_in_vmr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG209147
	DQ	FLAT:s370_v_extract_vct
	DQ	FLAT:s390_v_extract_vct
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG209148
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209149
	DQ	FLAT:s370_v_extract_vector_modes
	DQ	FLAT:s390_v_extract_vector_modes
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG209150
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209151
	DQ	FLAT:s370_v_restore_vr
	DQ	FLAT:s390_v_restore_vr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG209152
	DQ	FLAT:s370_v_save_changed_vr
	DQ	FLAT:s390_v_save_changed_vr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG209153
	DQ	FLAT:s370_v_save_vr
	DQ	FLAT:s390_v_save_vr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_RRE
	DQ	FLAT:$SG209154
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209155
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209156
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209157
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209158
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209159
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209160
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209161
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209162
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209163
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209164
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209165
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209166
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209167
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209168
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209169
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209170
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209171
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209172
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209173
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209174
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209175
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209176
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209177
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209178
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209179
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209180
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209181
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209182
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209183
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209184
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209185
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209186
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209187
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209188
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209189
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209190
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209191
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209192
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209193
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209194
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209195
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209196
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209197
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209198
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209199
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209200
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209201
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209202
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209203
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209204
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209205
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209206
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209207
	DQ	FLAT:s370_v_load_vmr
	DQ	FLAT:s390_v_load_vmr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_VS
	DQ	FLAT:$SG209208
	DQ	FLAT:s370_v_load_vmr_complement
	DQ	FLAT:s390_v_load_vmr_complement
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_VS
	DQ	FLAT:$SG209209
	DQ	FLAT:s370_v_store_vmr
	DQ	FLAT:s390_v_store_vmr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_VS
	DQ	FLAT:$SG209210
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209211
	DQ	FLAT:s370_v_and_to_vmr
	DQ	FLAT:s390_v_and_to_vmr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_VS
	DQ	FLAT:$SG209212
	DQ	FLAT:s370_v_or_to_vmr
	DQ	FLAT:s390_v_or_to_vmr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_VS
	DQ	FLAT:$SG209213
	DQ	FLAT:s370_v_exclusive_or_to_vmr
	DQ	FLAT:s390_v_exclusive_or_to_vmr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_VS
	DQ	FLAT:$SG209214
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209215
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209216
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209217
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209218
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209219
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209220
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209221
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209222
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209223
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209224
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209225
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209226
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209227
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209228
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209229
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209230
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209231
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209232
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209233
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209234
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209235
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209236
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209237
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209238
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209239
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209240
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209241
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209242
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209243
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209244
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209245
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209246
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209247
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209248
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209249
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209250
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209251
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209252
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209253
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209254
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209255
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209256
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209257
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209258
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209259
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209260
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209261
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209262
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209263
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209264
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209265
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209266
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209267
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209268
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209269
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209270
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209271
	DQ	FLAT:s370_v_save_vsr
	DQ	FLAT:s390_v_save_vsr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG209272
	DQ	FLAT:s370_v_save_vmr
	DQ	FLAT:s390_v_save_vmr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG209273
	DQ	FLAT:s370_v_restore_vsr
	DQ	FLAT:s390_v_restore_vsr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG209274
	DQ	FLAT:s370_v_restore_vmr
	DQ	FLAT:s390_v_restore_vmr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG209275
	DQ	FLAT:s370_v_load_vct_from_address
	DQ	FLAT:s390_v_load_vct_from_address
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG209276
	DQ	FLAT:s370_v_clear_vr
	DQ	FLAT:s390_v_clear_vr
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG209277
	DQ	FLAT:s370_v_set_vector_mask_mode
	DQ	FLAT:s390_v_set_vector_mask_mode
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG209278
	DQ	FLAT:s370_v_load_vix_from_address
	DQ	FLAT:s390_v_load_vix_from_address
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG209279
	DQ	FLAT:s370_v_store_vector_parameters
	DQ	FLAT:s390_v_store_vector_parameters
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG209280
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209281
	DQ	FLAT:s370_v_save_vac
	DQ	FLAT:s390_v_save_vac
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG209282
	DQ	FLAT:s370_v_restore_vac
	DQ	FLAT:s390_v_restore_vac
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_S
	DQ	FLAT:$SG209283
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209284
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209285
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209286
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209287
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209288
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209289
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209290
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209291
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209292
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209293
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209294
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209295
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209296
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209297
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209298
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209299
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209300
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209301
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209302
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209303
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209304
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209305
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209306
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209307
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209308
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209309
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209310
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209311
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209312
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209313
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209314
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209315
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209316
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209317
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209318
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209319
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209320
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209321
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209322
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209323
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209324
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209325
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209326
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209327
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209328
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209329
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209330
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209331
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209332
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209333
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209334
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209335
gen_v_opcode_e4xx DQ FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209848
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209849
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209850
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209851
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209852
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209853
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209854
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209855
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209856
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209857
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209858
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209859
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209860
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209861
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209862
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209863
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209864
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209865
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209866
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209867
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209868
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209869
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209870
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209871
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209872
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209873
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209874
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209875
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209876
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209877
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209878
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209879
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209880
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209881
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209882
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209883
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209884
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209885
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209886
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209887
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209888
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209889
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209890
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209891
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209892
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209893
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209894
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209895
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209896
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209897
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209898
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209899
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209900
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209901
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209902
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209903
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209904
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209905
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209906
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209907
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209908
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209909
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209910
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209911
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209912
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209913
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209914
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209915
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209916
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209917
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209918
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209919
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209920
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209921
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209922
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209923
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209924
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209925
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209926
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209927
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209928
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209929
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209930
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209931
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209932
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209933
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209934
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209935
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209936
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209937
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209938
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209939
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209940
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209941
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209942
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209943
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209944
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209945
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209946
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209947
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209948
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209949
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209950
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209951
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209952
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209953
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209954
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209955
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209956
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209957
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209958
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209959
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209960
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209961
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209962
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209963
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209964
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209965
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209966
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209967
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209968
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209969
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209970
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209971
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209972
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209973
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209974
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209975
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209976
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209977
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209978
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209979
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209980
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209981
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209982
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209983
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209984
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209985
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209986
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209987
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209988
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209989
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209990
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209991
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209992
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209993
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209994
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209995
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209996
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209997
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209998
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG209999
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210000
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210001
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210002
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210003
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210004
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210005
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210006
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210007
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210008
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210009
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210010
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210011
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210012
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210013
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210014
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210015
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210016
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210017
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210018
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210019
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210020
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210021
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210022
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210023
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210024
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210025
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210026
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210027
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210028
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210029
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210030
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210031
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210032
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210033
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210034
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210035
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210036
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210037
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210038
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210039
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210040
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210041
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210042
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210043
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210044
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210045
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210046
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210047
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210048
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210049
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210050
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210051
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210052
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210053
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210054
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210055
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210056
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210057
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210058
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210059
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210060
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210061
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210062
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210063
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210064
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210065
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210066
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210067
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210068
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210069
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210070
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210071
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210072
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210073
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210074
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210075
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210076
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210077
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210078
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210079
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210080
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210081
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210082
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210083
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210084
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210085
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210086
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210087
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210088
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210089
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210090
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210091
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210092
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210093
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210094
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210095
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210096
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210097
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210098
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210099
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210100
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210101
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210102
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:operation_exception
	DQ	FLAT:iprint_ASMFMT_none
	DQ	FLAT:$SG210103
gen_opcode_15__ DQ FLAT:s370_1500
	DQ	FLAT:s390_1500
	DQ	FLAT:z900_1500
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210616
	DQ	FLAT:s370_1501
	DQ	FLAT:s390_1501
	DQ	FLAT:z900_1501
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210617
	DQ	FLAT:s370_1502
	DQ	FLAT:s390_1502
	DQ	FLAT:z900_1502
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210618
	DQ	FLAT:s370_1503
	DQ	FLAT:s390_1503
	DQ	FLAT:z900_1503
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210619
	DQ	FLAT:s370_1504
	DQ	FLAT:s390_1504
	DQ	FLAT:z900_1504
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210620
	DQ	FLAT:s370_1505
	DQ	FLAT:s390_1505
	DQ	FLAT:z900_1505
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210621
	DQ	FLAT:s370_1506
	DQ	FLAT:s390_1506
	DQ	FLAT:z900_1506
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210622
	DQ	FLAT:s370_1507
	DQ	FLAT:s390_1507
	DQ	FLAT:z900_1507
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210623
	DQ	FLAT:s370_1508
	DQ	FLAT:s390_1508
	DQ	FLAT:z900_1508
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210624
	DQ	FLAT:s370_1509
	DQ	FLAT:s390_1509
	DQ	FLAT:z900_1509
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210625
	DQ	FLAT:s370_150A
	DQ	FLAT:s390_150A
	DQ	FLAT:z900_150A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210626
	DQ	FLAT:s370_150B
	DQ	FLAT:s390_150B
	DQ	FLAT:z900_150B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210627
	DQ	FLAT:s370_150C
	DQ	FLAT:s390_150C
	DQ	FLAT:z900_150C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210628
	DQ	FLAT:s370_150D
	DQ	FLAT:s390_150D
	DQ	FLAT:z900_150D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210629
	DQ	FLAT:s370_150E
	DQ	FLAT:s390_150E
	DQ	FLAT:z900_150E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210630
	DQ	FLAT:s370_150F
	DQ	FLAT:s390_150F
	DQ	FLAT:z900_150F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210631
	DQ	FLAT:s370_1510
	DQ	FLAT:s390_1510
	DQ	FLAT:z900_1510
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210632
	DQ	FLAT:s370_1511
	DQ	FLAT:s390_1511
	DQ	FLAT:z900_1511
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210633
	DQ	FLAT:s370_1512
	DQ	FLAT:s390_1512
	DQ	FLAT:z900_1512
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210634
	DQ	FLAT:s370_1513
	DQ	FLAT:s390_1513
	DQ	FLAT:z900_1513
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210635
	DQ	FLAT:s370_1514
	DQ	FLAT:s390_1514
	DQ	FLAT:z900_1514
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210636
	DQ	FLAT:s370_1515
	DQ	FLAT:s390_1515
	DQ	FLAT:z900_1515
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210637
	DQ	FLAT:s370_1516
	DQ	FLAT:s390_1516
	DQ	FLAT:z900_1516
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210638
	DQ	FLAT:s370_1517
	DQ	FLAT:s390_1517
	DQ	FLAT:z900_1517
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210639
	DQ	FLAT:s370_1518
	DQ	FLAT:s390_1518
	DQ	FLAT:z900_1518
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210640
	DQ	FLAT:s370_1519
	DQ	FLAT:s390_1519
	DQ	FLAT:z900_1519
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210641
	DQ	FLAT:s370_151A
	DQ	FLAT:s390_151A
	DQ	FLAT:z900_151A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210642
	DQ	FLAT:s370_151B
	DQ	FLAT:s390_151B
	DQ	FLAT:z900_151B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210643
	DQ	FLAT:s370_151C
	DQ	FLAT:s390_151C
	DQ	FLAT:z900_151C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210644
	DQ	FLAT:s370_151D
	DQ	FLAT:s390_151D
	DQ	FLAT:z900_151D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210645
	DQ	FLAT:s370_151E
	DQ	FLAT:s390_151E
	DQ	FLAT:z900_151E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210646
	DQ	FLAT:s370_151F
	DQ	FLAT:s390_151F
	DQ	FLAT:z900_151F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210647
	DQ	FLAT:s370_1520
	DQ	FLAT:s390_1520
	DQ	FLAT:z900_1520
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210648
	DQ	FLAT:s370_1521
	DQ	FLAT:s390_1521
	DQ	FLAT:z900_1521
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210649
	DQ	FLAT:s370_1522
	DQ	FLAT:s390_1522
	DQ	FLAT:z900_1522
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210650
	DQ	FLAT:s370_1523
	DQ	FLAT:s390_1523
	DQ	FLAT:z900_1523
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210651
	DQ	FLAT:s370_1524
	DQ	FLAT:s390_1524
	DQ	FLAT:z900_1524
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210652
	DQ	FLAT:s370_1525
	DQ	FLAT:s390_1525
	DQ	FLAT:z900_1525
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210653
	DQ	FLAT:s370_1526
	DQ	FLAT:s390_1526
	DQ	FLAT:z900_1526
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210654
	DQ	FLAT:s370_1527
	DQ	FLAT:s390_1527
	DQ	FLAT:z900_1527
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210655
	DQ	FLAT:s370_1528
	DQ	FLAT:s390_1528
	DQ	FLAT:z900_1528
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210656
	DQ	FLAT:s370_1529
	DQ	FLAT:s390_1529
	DQ	FLAT:z900_1529
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210657
	DQ	FLAT:s370_152A
	DQ	FLAT:s390_152A
	DQ	FLAT:z900_152A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210658
	DQ	FLAT:s370_152B
	DQ	FLAT:s390_152B
	DQ	FLAT:z900_152B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210659
	DQ	FLAT:s370_152C
	DQ	FLAT:s390_152C
	DQ	FLAT:z900_152C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210660
	DQ	FLAT:s370_152D
	DQ	FLAT:s390_152D
	DQ	FLAT:z900_152D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210661
	DQ	FLAT:s370_152E
	DQ	FLAT:s390_152E
	DQ	FLAT:z900_152E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210662
	DQ	FLAT:s370_152F
	DQ	FLAT:s390_152F
	DQ	FLAT:z900_152F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210663
	DQ	FLAT:s370_1530
	DQ	FLAT:s390_1530
	DQ	FLAT:z900_1530
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210664
	DQ	FLAT:s370_1531
	DQ	FLAT:s390_1531
	DQ	FLAT:z900_1531
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210665
	DQ	FLAT:s370_1532
	DQ	FLAT:s390_1532
	DQ	FLAT:z900_1532
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210666
	DQ	FLAT:s370_1533
	DQ	FLAT:s390_1533
	DQ	FLAT:z900_1533
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210667
	DQ	FLAT:s370_1534
	DQ	FLAT:s390_1534
	DQ	FLAT:z900_1534
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210668
	DQ	FLAT:s370_1535
	DQ	FLAT:s390_1535
	DQ	FLAT:z900_1535
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210669
	DQ	FLAT:s370_1536
	DQ	FLAT:s390_1536
	DQ	FLAT:z900_1536
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210670
	DQ	FLAT:s370_1537
	DQ	FLAT:s390_1537
	DQ	FLAT:z900_1537
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210671
	DQ	FLAT:s370_1538
	DQ	FLAT:s390_1538
	DQ	FLAT:z900_1538
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210672
	DQ	FLAT:s370_1539
	DQ	FLAT:s390_1539
	DQ	FLAT:z900_1539
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210673
	DQ	FLAT:s370_153A
	DQ	FLAT:s390_153A
	DQ	FLAT:z900_153A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210674
	DQ	FLAT:s370_153B
	DQ	FLAT:s390_153B
	DQ	FLAT:z900_153B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210675
	DQ	FLAT:s370_153C
	DQ	FLAT:s390_153C
	DQ	FLAT:z900_153C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210676
	DQ	FLAT:s370_153D
	DQ	FLAT:s390_153D
	DQ	FLAT:z900_153D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210677
	DQ	FLAT:s370_153E
	DQ	FLAT:s390_153E
	DQ	FLAT:z900_153E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210678
	DQ	FLAT:s370_153F
	DQ	FLAT:s390_153F
	DQ	FLAT:z900_153F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210679
	DQ	FLAT:s370_1540
	DQ	FLAT:s390_1540
	DQ	FLAT:z900_1540
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210680
	DQ	FLAT:s370_1541
	DQ	FLAT:s390_1541
	DQ	FLAT:z900_1541
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210681
	DQ	FLAT:s370_1542
	DQ	FLAT:s390_1542
	DQ	FLAT:z900_1542
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210682
	DQ	FLAT:s370_1543
	DQ	FLAT:s390_1543
	DQ	FLAT:z900_1543
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210683
	DQ	FLAT:s370_1544
	DQ	FLAT:s390_1544
	DQ	FLAT:z900_1544
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210684
	DQ	FLAT:s370_1545
	DQ	FLAT:s390_1545
	DQ	FLAT:z900_1545
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210685
	DQ	FLAT:s370_1546
	DQ	FLAT:s390_1546
	DQ	FLAT:z900_1546
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210686
	DQ	FLAT:s370_1547
	DQ	FLAT:s390_1547
	DQ	FLAT:z900_1547
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210687
	DQ	FLAT:s370_1548
	DQ	FLAT:s390_1548
	DQ	FLAT:z900_1548
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210688
	DQ	FLAT:s370_1549
	DQ	FLAT:s390_1549
	DQ	FLAT:z900_1549
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210689
	DQ	FLAT:s370_154A
	DQ	FLAT:s390_154A
	DQ	FLAT:z900_154A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210690
	DQ	FLAT:s370_154B
	DQ	FLAT:s390_154B
	DQ	FLAT:z900_154B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210691
	DQ	FLAT:s370_154C
	DQ	FLAT:s390_154C
	DQ	FLAT:z900_154C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210692
	DQ	FLAT:s370_154D
	DQ	FLAT:s390_154D
	DQ	FLAT:z900_154D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210693
	DQ	FLAT:s370_154E
	DQ	FLAT:s390_154E
	DQ	FLAT:z900_154E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210694
	DQ	FLAT:s370_154F
	DQ	FLAT:s390_154F
	DQ	FLAT:z900_154F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210695
	DQ	FLAT:s370_1550
	DQ	FLAT:s390_1550
	DQ	FLAT:z900_1550
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210696
	DQ	FLAT:s370_1551
	DQ	FLAT:s390_1551
	DQ	FLAT:z900_1551
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210697
	DQ	FLAT:s370_1552
	DQ	FLAT:s390_1552
	DQ	FLAT:z900_1552
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210698
	DQ	FLAT:s370_1553
	DQ	FLAT:s390_1553
	DQ	FLAT:z900_1553
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210699
	DQ	FLAT:s370_1554
	DQ	FLAT:s390_1554
	DQ	FLAT:z900_1554
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210700
	DQ	FLAT:s370_1555
	DQ	FLAT:s390_1555
	DQ	FLAT:z900_1555
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210701
	DQ	FLAT:s370_1556
	DQ	FLAT:s390_1556
	DQ	FLAT:z900_1556
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210702
	DQ	FLAT:s370_1557
	DQ	FLAT:s390_1557
	DQ	FLAT:z900_1557
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210703
	DQ	FLAT:s370_1558
	DQ	FLAT:s390_1558
	DQ	FLAT:z900_1558
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210704
	DQ	FLAT:s370_1559
	DQ	FLAT:s390_1559
	DQ	FLAT:z900_1559
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210705
	DQ	FLAT:s370_155A
	DQ	FLAT:s390_155A
	DQ	FLAT:z900_155A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210706
	DQ	FLAT:s370_155B
	DQ	FLAT:s390_155B
	DQ	FLAT:z900_155B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210707
	DQ	FLAT:s370_155C
	DQ	FLAT:s390_155C
	DQ	FLAT:z900_155C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210708
	DQ	FLAT:s370_155D
	DQ	FLAT:s390_155D
	DQ	FLAT:z900_155D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210709
	DQ	FLAT:s370_155E
	DQ	FLAT:s390_155E
	DQ	FLAT:z900_155E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210710
	DQ	FLAT:s370_155F
	DQ	FLAT:s390_155F
	DQ	FLAT:z900_155F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210711
	DQ	FLAT:s370_1560
	DQ	FLAT:s390_1560
	DQ	FLAT:z900_1560
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210712
	DQ	FLAT:s370_1561
	DQ	FLAT:s390_1561
	DQ	FLAT:z900_1561
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210713
	DQ	FLAT:s370_1562
	DQ	FLAT:s390_1562
	DQ	FLAT:z900_1562
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210714
	DQ	FLAT:s370_1563
	DQ	FLAT:s390_1563
	DQ	FLAT:z900_1563
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210715
	DQ	FLAT:s370_1564
	DQ	FLAT:s390_1564
	DQ	FLAT:z900_1564
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210716
	DQ	FLAT:s370_1565
	DQ	FLAT:s390_1565
	DQ	FLAT:z900_1565
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210717
	DQ	FLAT:s370_1566
	DQ	FLAT:s390_1566
	DQ	FLAT:z900_1566
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210718
	DQ	FLAT:s370_1567
	DQ	FLAT:s390_1567
	DQ	FLAT:z900_1567
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210719
	DQ	FLAT:s370_1568
	DQ	FLAT:s390_1568
	DQ	FLAT:z900_1568
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210720
	DQ	FLAT:s370_1569
	DQ	FLAT:s390_1569
	DQ	FLAT:z900_1569
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210721
	DQ	FLAT:s370_156A
	DQ	FLAT:s390_156A
	DQ	FLAT:z900_156A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210722
	DQ	FLAT:s370_156B
	DQ	FLAT:s390_156B
	DQ	FLAT:z900_156B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210723
	DQ	FLAT:s370_156C
	DQ	FLAT:s390_156C
	DQ	FLAT:z900_156C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210724
	DQ	FLAT:s370_156D
	DQ	FLAT:s390_156D
	DQ	FLAT:z900_156D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210725
	DQ	FLAT:s370_156E
	DQ	FLAT:s390_156E
	DQ	FLAT:z900_156E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210726
	DQ	FLAT:s370_156F
	DQ	FLAT:s390_156F
	DQ	FLAT:z900_156F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210727
	DQ	FLAT:s370_1570
	DQ	FLAT:s390_1570
	DQ	FLAT:z900_1570
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210728
	DQ	FLAT:s370_1571
	DQ	FLAT:s390_1571
	DQ	FLAT:z900_1571
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210729
	DQ	FLAT:s370_1572
	DQ	FLAT:s390_1572
	DQ	FLAT:z900_1572
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210730
	DQ	FLAT:s370_1573
	DQ	FLAT:s390_1573
	DQ	FLAT:z900_1573
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210731
	DQ	FLAT:s370_1574
	DQ	FLAT:s390_1574
	DQ	FLAT:z900_1574
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210732
	DQ	FLAT:s370_1575
	DQ	FLAT:s390_1575
	DQ	FLAT:z900_1575
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210733
	DQ	FLAT:s370_1576
	DQ	FLAT:s390_1576
	DQ	FLAT:z900_1576
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210734
	DQ	FLAT:s370_1577
	DQ	FLAT:s390_1577
	DQ	FLAT:z900_1577
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210735
	DQ	FLAT:s370_1578
	DQ	FLAT:s390_1578
	DQ	FLAT:z900_1578
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210736
	DQ	FLAT:s370_1579
	DQ	FLAT:s390_1579
	DQ	FLAT:z900_1579
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210737
	DQ	FLAT:s370_157A
	DQ	FLAT:s390_157A
	DQ	FLAT:z900_157A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210738
	DQ	FLAT:s370_157B
	DQ	FLAT:s390_157B
	DQ	FLAT:z900_157B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210739
	DQ	FLAT:s370_157C
	DQ	FLAT:s390_157C
	DQ	FLAT:z900_157C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210740
	DQ	FLAT:s370_157D
	DQ	FLAT:s390_157D
	DQ	FLAT:z900_157D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210741
	DQ	FLAT:s370_157E
	DQ	FLAT:s390_157E
	DQ	FLAT:z900_157E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210742
	DQ	FLAT:s370_157F
	DQ	FLAT:s390_157F
	DQ	FLAT:z900_157F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210743
	DQ	FLAT:s370_1580
	DQ	FLAT:s390_1580
	DQ	FLAT:z900_1580
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210744
	DQ	FLAT:s370_1581
	DQ	FLAT:s390_1581
	DQ	FLAT:z900_1581
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210745
	DQ	FLAT:s370_1582
	DQ	FLAT:s390_1582
	DQ	FLAT:z900_1582
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210746
	DQ	FLAT:s370_1583
	DQ	FLAT:s390_1583
	DQ	FLAT:z900_1583
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210747
	DQ	FLAT:s370_1584
	DQ	FLAT:s390_1584
	DQ	FLAT:z900_1584
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210748
	DQ	FLAT:s370_1585
	DQ	FLAT:s390_1585
	DQ	FLAT:z900_1585
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210749
	DQ	FLAT:s370_1586
	DQ	FLAT:s390_1586
	DQ	FLAT:z900_1586
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210750
	DQ	FLAT:s370_1587
	DQ	FLAT:s390_1587
	DQ	FLAT:z900_1587
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210751
	DQ	FLAT:s370_1588
	DQ	FLAT:s390_1588
	DQ	FLAT:z900_1588
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210752
	DQ	FLAT:s370_1589
	DQ	FLAT:s390_1589
	DQ	FLAT:z900_1589
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210753
	DQ	FLAT:s370_158A
	DQ	FLAT:s390_158A
	DQ	FLAT:z900_158A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210754
	DQ	FLAT:s370_158B
	DQ	FLAT:s390_158B
	DQ	FLAT:z900_158B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210755
	DQ	FLAT:s370_158C
	DQ	FLAT:s390_158C
	DQ	FLAT:z900_158C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210756
	DQ	FLAT:s370_158D
	DQ	FLAT:s390_158D
	DQ	FLAT:z900_158D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210757
	DQ	FLAT:s370_158E
	DQ	FLAT:s390_158E
	DQ	FLAT:z900_158E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210758
	DQ	FLAT:s370_158F
	DQ	FLAT:s390_158F
	DQ	FLAT:z900_158F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210759
	DQ	FLAT:s370_1590
	DQ	FLAT:s390_1590
	DQ	FLAT:z900_1590
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210760
	DQ	FLAT:s370_1591
	DQ	FLAT:s390_1591
	DQ	FLAT:z900_1591
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210761
	DQ	FLAT:s370_1592
	DQ	FLAT:s390_1592
	DQ	FLAT:z900_1592
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210762
	DQ	FLAT:s370_1593
	DQ	FLAT:s390_1593
	DQ	FLAT:z900_1593
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210763
	DQ	FLAT:s370_1594
	DQ	FLAT:s390_1594
	DQ	FLAT:z900_1594
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210764
	DQ	FLAT:s370_1595
	DQ	FLAT:s390_1595
	DQ	FLAT:z900_1595
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210765
	DQ	FLAT:s370_1596
	DQ	FLAT:s390_1596
	DQ	FLAT:z900_1596
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210766
	DQ	FLAT:s370_1597
	DQ	FLAT:s390_1597
	DQ	FLAT:z900_1597
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210767
	DQ	FLAT:s370_1598
	DQ	FLAT:s390_1598
	DQ	FLAT:z900_1598
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210768
	DQ	FLAT:s370_1599
	DQ	FLAT:s390_1599
	DQ	FLAT:z900_1599
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210769
	DQ	FLAT:s370_159A
	DQ	FLAT:s390_159A
	DQ	FLAT:z900_159A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210770
	DQ	FLAT:s370_159B
	DQ	FLAT:s390_159B
	DQ	FLAT:z900_159B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210771
	DQ	FLAT:s370_159C
	DQ	FLAT:s390_159C
	DQ	FLAT:z900_159C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210772
	DQ	FLAT:s370_159D
	DQ	FLAT:s390_159D
	DQ	FLAT:z900_159D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210773
	DQ	FLAT:s370_159E
	DQ	FLAT:s390_159E
	DQ	FLAT:z900_159E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210774
	DQ	FLAT:s370_159F
	DQ	FLAT:s390_159F
	DQ	FLAT:z900_159F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210775
	DQ	FLAT:s370_15A0
	DQ	FLAT:s390_15A0
	DQ	FLAT:z900_15A0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210776
	DQ	FLAT:s370_15A1
	DQ	FLAT:s390_15A1
	DQ	FLAT:z900_15A1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210777
	DQ	FLAT:s370_15A2
	DQ	FLAT:s390_15A2
	DQ	FLAT:z900_15A2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210778
	DQ	FLAT:s370_15A3
	DQ	FLAT:s390_15A3
	DQ	FLAT:z900_15A3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210779
	DQ	FLAT:s370_15A4
	DQ	FLAT:s390_15A4
	DQ	FLAT:z900_15A4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210780
	DQ	FLAT:s370_15A5
	DQ	FLAT:s390_15A5
	DQ	FLAT:z900_15A5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210781
	DQ	FLAT:s370_15A6
	DQ	FLAT:s390_15A6
	DQ	FLAT:z900_15A6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210782
	DQ	FLAT:s370_15A7
	DQ	FLAT:s390_15A7
	DQ	FLAT:z900_15A7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210783
	DQ	FLAT:s370_15A8
	DQ	FLAT:s390_15A8
	DQ	FLAT:z900_15A8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210784
	DQ	FLAT:s370_15A9
	DQ	FLAT:s390_15A9
	DQ	FLAT:z900_15A9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210785
	DQ	FLAT:s370_15AA
	DQ	FLAT:s390_15AA
	DQ	FLAT:z900_15AA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210786
	DQ	FLAT:s370_15AB
	DQ	FLAT:s390_15AB
	DQ	FLAT:z900_15AB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210787
	DQ	FLAT:s370_15AC
	DQ	FLAT:s390_15AC
	DQ	FLAT:z900_15AC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210788
	DQ	FLAT:s370_15AD
	DQ	FLAT:s390_15AD
	DQ	FLAT:z900_15AD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210789
	DQ	FLAT:s370_15AE
	DQ	FLAT:s390_15AE
	DQ	FLAT:z900_15AE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210790
	DQ	FLAT:s370_15AF
	DQ	FLAT:s390_15AF
	DQ	FLAT:z900_15AF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210791
	DQ	FLAT:s370_15B0
	DQ	FLAT:s390_15B0
	DQ	FLAT:z900_15B0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210792
	DQ	FLAT:s370_15B1
	DQ	FLAT:s390_15B1
	DQ	FLAT:z900_15B1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210793
	DQ	FLAT:s370_15B2
	DQ	FLAT:s390_15B2
	DQ	FLAT:z900_15B2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210794
	DQ	FLAT:s370_15B3
	DQ	FLAT:s390_15B3
	DQ	FLAT:z900_15B3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210795
	DQ	FLAT:s370_15B4
	DQ	FLAT:s390_15B4
	DQ	FLAT:z900_15B4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210796
	DQ	FLAT:s370_15B5
	DQ	FLAT:s390_15B5
	DQ	FLAT:z900_15B5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210797
	DQ	FLAT:s370_15B6
	DQ	FLAT:s390_15B6
	DQ	FLAT:z900_15B6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210798
	DQ	FLAT:s370_15B7
	DQ	FLAT:s390_15B7
	DQ	FLAT:z900_15B7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210799
	DQ	FLAT:s370_15B8
	DQ	FLAT:s390_15B8
	DQ	FLAT:z900_15B8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210800
	DQ	FLAT:s370_15B9
	DQ	FLAT:s390_15B9
	DQ	FLAT:z900_15B9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210801
	DQ	FLAT:s370_15BA
	DQ	FLAT:s390_15BA
	DQ	FLAT:z900_15BA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210802
	DQ	FLAT:s370_15BB
	DQ	FLAT:s390_15BB
	DQ	FLAT:z900_15BB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210803
	DQ	FLAT:s370_15BC
	DQ	FLAT:s390_15BC
	DQ	FLAT:z900_15BC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210804
	DQ	FLAT:s370_15BD
	DQ	FLAT:s390_15BD
	DQ	FLAT:z900_15BD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210805
	DQ	FLAT:s370_15BE
	DQ	FLAT:s390_15BE
	DQ	FLAT:z900_15BE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210806
	DQ	FLAT:s370_15BF
	DQ	FLAT:s390_15BF
	DQ	FLAT:z900_15BF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210807
	DQ	FLAT:s370_15C0
	DQ	FLAT:s390_15C0
	DQ	FLAT:z900_15C0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210808
	DQ	FLAT:s370_15C1
	DQ	FLAT:s390_15C1
	DQ	FLAT:z900_15C1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210809
	DQ	FLAT:s370_15C2
	DQ	FLAT:s390_15C2
	DQ	FLAT:z900_15C2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210810
	DQ	FLAT:s370_15C3
	DQ	FLAT:s390_15C3
	DQ	FLAT:z900_15C3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210811
	DQ	FLAT:s370_15C4
	DQ	FLAT:s390_15C4
	DQ	FLAT:z900_15C4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210812
	DQ	FLAT:s370_15C5
	DQ	FLAT:s390_15C5
	DQ	FLAT:z900_15C5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210813
	DQ	FLAT:s370_15C6
	DQ	FLAT:s390_15C6
	DQ	FLAT:z900_15C6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210814
	DQ	FLAT:s370_15C7
	DQ	FLAT:s390_15C7
	DQ	FLAT:z900_15C7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210815
	DQ	FLAT:s370_15C8
	DQ	FLAT:s390_15C8
	DQ	FLAT:z900_15C8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210816
	DQ	FLAT:s370_15C9
	DQ	FLAT:s390_15C9
	DQ	FLAT:z900_15C9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210817
	DQ	FLAT:s370_15CA
	DQ	FLAT:s390_15CA
	DQ	FLAT:z900_15CA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210818
	DQ	FLAT:s370_15CB
	DQ	FLAT:s390_15CB
	DQ	FLAT:z900_15CB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210819
	DQ	FLAT:s370_15CC
	DQ	FLAT:s390_15CC
	DQ	FLAT:z900_15CC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210820
	DQ	FLAT:s370_15CD
	DQ	FLAT:s390_15CD
	DQ	FLAT:z900_15CD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210821
	DQ	FLAT:s370_15CE
	DQ	FLAT:s390_15CE
	DQ	FLAT:z900_15CE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210822
	DQ	FLAT:s370_15CF
	DQ	FLAT:s390_15CF
	DQ	FLAT:z900_15CF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210823
	DQ	FLAT:s370_15D0
	DQ	FLAT:s390_15D0
	DQ	FLAT:z900_15D0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210824
	DQ	FLAT:s370_15D1
	DQ	FLAT:s390_15D1
	DQ	FLAT:z900_15D1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210825
	DQ	FLAT:s370_15D2
	DQ	FLAT:s390_15D2
	DQ	FLAT:z900_15D2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210826
	DQ	FLAT:s370_15D3
	DQ	FLAT:s390_15D3
	DQ	FLAT:z900_15D3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210827
	DQ	FLAT:s370_15D4
	DQ	FLAT:s390_15D4
	DQ	FLAT:z900_15D4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210828
	DQ	FLAT:s370_15D5
	DQ	FLAT:s390_15D5
	DQ	FLAT:z900_15D5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210829
	DQ	FLAT:s370_15D6
	DQ	FLAT:s390_15D6
	DQ	FLAT:z900_15D6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210830
	DQ	FLAT:s370_15D7
	DQ	FLAT:s390_15D7
	DQ	FLAT:z900_15D7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210831
	DQ	FLAT:s370_15D8
	DQ	FLAT:s390_15D8
	DQ	FLAT:z900_15D8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210832
	DQ	FLAT:s370_15D9
	DQ	FLAT:s390_15D9
	DQ	FLAT:z900_15D9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210833
	DQ	FLAT:s370_15DA
	DQ	FLAT:s390_15DA
	DQ	FLAT:z900_15DA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210834
	DQ	FLAT:s370_15DB
	DQ	FLAT:s390_15DB
	DQ	FLAT:z900_15DB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210835
	DQ	FLAT:s370_15DC
	DQ	FLAT:s390_15DC
	DQ	FLAT:z900_15DC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210836
	DQ	FLAT:s370_15DD
	DQ	FLAT:s390_15DD
	DQ	FLAT:z900_15DD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210837
	DQ	FLAT:s370_15DE
	DQ	FLAT:s390_15DE
	DQ	FLAT:z900_15DE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210838
	DQ	FLAT:s370_15DF
	DQ	FLAT:s390_15DF
	DQ	FLAT:z900_15DF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210839
	DQ	FLAT:s370_15E0
	DQ	FLAT:s390_15E0
	DQ	FLAT:z900_15E0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210840
	DQ	FLAT:s370_15E1
	DQ	FLAT:s390_15E1
	DQ	FLAT:z900_15E1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210841
	DQ	FLAT:s370_15E2
	DQ	FLAT:s390_15E2
	DQ	FLAT:z900_15E2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210842
	DQ	FLAT:s370_15E3
	DQ	FLAT:s390_15E3
	DQ	FLAT:z900_15E3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210843
	DQ	FLAT:s370_15E4
	DQ	FLAT:s390_15E4
	DQ	FLAT:z900_15E4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210844
	DQ	FLAT:s370_15E5
	DQ	FLAT:s390_15E5
	DQ	FLAT:z900_15E5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210845
	DQ	FLAT:s370_15E6
	DQ	FLAT:s390_15E6
	DQ	FLAT:z900_15E6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210846
	DQ	FLAT:s370_15E7
	DQ	FLAT:s390_15E7
	DQ	FLAT:z900_15E7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210847
	DQ	FLAT:s370_15E8
	DQ	FLAT:s390_15E8
	DQ	FLAT:z900_15E8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210848
	DQ	FLAT:s370_15E9
	DQ	FLAT:s390_15E9
	DQ	FLAT:z900_15E9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210849
	DQ	FLAT:s370_15EA
	DQ	FLAT:s390_15EA
	DQ	FLAT:z900_15EA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210850
	DQ	FLAT:s370_15EB
	DQ	FLAT:s390_15EB
	DQ	FLAT:z900_15EB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210851
	DQ	FLAT:s370_15EC
	DQ	FLAT:s390_15EC
	DQ	FLAT:z900_15EC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210852
	DQ	FLAT:s370_15ED
	DQ	FLAT:s390_15ED
	DQ	FLAT:z900_15ED
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210853
	DQ	FLAT:s370_15EE
	DQ	FLAT:s390_15EE
	DQ	FLAT:z900_15EE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210854
	DQ	FLAT:s370_15EF
	DQ	FLAT:s390_15EF
	DQ	FLAT:z900_15EF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210855
	DQ	FLAT:s370_15F0
	DQ	FLAT:s390_15F0
	DQ	FLAT:z900_15F0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210856
	DQ	FLAT:s370_15F1
	DQ	FLAT:s390_15F1
	DQ	FLAT:z900_15F1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210857
	DQ	FLAT:s370_15F2
	DQ	FLAT:s390_15F2
	DQ	FLAT:z900_15F2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210858
	DQ	FLAT:s370_15F3
	DQ	FLAT:s390_15F3
	DQ	FLAT:z900_15F3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210859
	DQ	FLAT:s370_15F4
	DQ	FLAT:s390_15F4
	DQ	FLAT:z900_15F4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210860
	DQ	FLAT:s370_15F5
	DQ	FLAT:s390_15F5
	DQ	FLAT:z900_15F5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210861
	DQ	FLAT:s370_15F6
	DQ	FLAT:s390_15F6
	DQ	FLAT:z900_15F6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210862
	DQ	FLAT:s370_15F7
	DQ	FLAT:s390_15F7
	DQ	FLAT:z900_15F7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210863
	DQ	FLAT:s370_15F8
	DQ	FLAT:s390_15F8
	DQ	FLAT:z900_15F8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210864
	DQ	FLAT:s370_15F9
	DQ	FLAT:s390_15F9
	DQ	FLAT:z900_15F9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210865
	DQ	FLAT:s370_15FA
	DQ	FLAT:s390_15FA
	DQ	FLAT:z900_15FA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210866
	DQ	FLAT:s370_15FB
	DQ	FLAT:s390_15FB
	DQ	FLAT:z900_15FB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210867
	DQ	FLAT:s370_15FC
	DQ	FLAT:s390_15FC
	DQ	FLAT:z900_15FC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210868
	DQ	FLAT:s370_15FD
	DQ	FLAT:s390_15FD
	DQ	FLAT:z900_15FD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210869
	DQ	FLAT:s370_15FE
	DQ	FLAT:s390_15FE
	DQ	FLAT:z900_15FE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210870
	DQ	FLAT:s370_15FF
	DQ	FLAT:s390_15FF
	DQ	FLAT:z900_15FF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG210871
gen_opcode_18__ DQ FLAT:s370_1800
	DQ	FLAT:s390_1800
	DQ	FLAT:z900_1800
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211384
	DQ	FLAT:s370_1801
	DQ	FLAT:s390_1801
	DQ	FLAT:z900_1801
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211385
	DQ	FLAT:s370_1802
	DQ	FLAT:s390_1802
	DQ	FLAT:z900_1802
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211386
	DQ	FLAT:s370_1803
	DQ	FLAT:s390_1803
	DQ	FLAT:z900_1803
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211387
	DQ	FLAT:s370_1804
	DQ	FLAT:s390_1804
	DQ	FLAT:z900_1804
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211388
	DQ	FLAT:s370_1805
	DQ	FLAT:s390_1805
	DQ	FLAT:z900_1805
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211389
	DQ	FLAT:s370_1806
	DQ	FLAT:s390_1806
	DQ	FLAT:z900_1806
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211390
	DQ	FLAT:s370_1807
	DQ	FLAT:s390_1807
	DQ	FLAT:z900_1807
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211391
	DQ	FLAT:s370_1808
	DQ	FLAT:s390_1808
	DQ	FLAT:z900_1808
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211392
	DQ	FLAT:s370_1809
	DQ	FLAT:s390_1809
	DQ	FLAT:z900_1809
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211393
	DQ	FLAT:s370_180A
	DQ	FLAT:s390_180A
	DQ	FLAT:z900_180A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211394
	DQ	FLAT:s370_180B
	DQ	FLAT:s390_180B
	DQ	FLAT:z900_180B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211395
	DQ	FLAT:s370_180C
	DQ	FLAT:s390_180C
	DQ	FLAT:z900_180C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211396
	DQ	FLAT:s370_180D
	DQ	FLAT:s390_180D
	DQ	FLAT:z900_180D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211397
	DQ	FLAT:s370_180E
	DQ	FLAT:s390_180E
	DQ	FLAT:z900_180E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211398
	DQ	FLAT:s370_180F
	DQ	FLAT:s390_180F
	DQ	FLAT:z900_180F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211399
	DQ	FLAT:s370_1810
	DQ	FLAT:s390_1810
	DQ	FLAT:z900_1810
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211400
	DQ	FLAT:s370_1811
	DQ	FLAT:s390_1811
	DQ	FLAT:z900_1811
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211401
	DQ	FLAT:s370_1812
	DQ	FLAT:s390_1812
	DQ	FLAT:z900_1812
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211402
	DQ	FLAT:s370_1813
	DQ	FLAT:s390_1813
	DQ	FLAT:z900_1813
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211403
	DQ	FLAT:s370_1814
	DQ	FLAT:s390_1814
	DQ	FLAT:z900_1814
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211404
	DQ	FLAT:s370_1815
	DQ	FLAT:s390_1815
	DQ	FLAT:z900_1815
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211405
	DQ	FLAT:s370_1816
	DQ	FLAT:s390_1816
	DQ	FLAT:z900_1816
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211406
	DQ	FLAT:s370_1817
	DQ	FLAT:s390_1817
	DQ	FLAT:z900_1817
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211407
	DQ	FLAT:s370_1818
	DQ	FLAT:s390_1818
	DQ	FLAT:z900_1818
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211408
	DQ	FLAT:s370_1819
	DQ	FLAT:s390_1819
	DQ	FLAT:z900_1819
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211409
	DQ	FLAT:s370_181A
	DQ	FLAT:s390_181A
	DQ	FLAT:z900_181A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211410
	DQ	FLAT:s370_181B
	DQ	FLAT:s390_181B
	DQ	FLAT:z900_181B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211411
	DQ	FLAT:s370_181C
	DQ	FLAT:s390_181C
	DQ	FLAT:z900_181C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211412
	DQ	FLAT:s370_181D
	DQ	FLAT:s390_181D
	DQ	FLAT:z900_181D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211413
	DQ	FLAT:s370_181E
	DQ	FLAT:s390_181E
	DQ	FLAT:z900_181E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211414
	DQ	FLAT:s370_181F
	DQ	FLAT:s390_181F
	DQ	FLAT:z900_181F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211415
	DQ	FLAT:s370_1820
	DQ	FLAT:s390_1820
	DQ	FLAT:z900_1820
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211416
	DQ	FLAT:s370_1821
	DQ	FLAT:s390_1821
	DQ	FLAT:z900_1821
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211417
	DQ	FLAT:s370_1822
	DQ	FLAT:s390_1822
	DQ	FLAT:z900_1822
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211418
	DQ	FLAT:s370_1823
	DQ	FLAT:s390_1823
	DQ	FLAT:z900_1823
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211419
	DQ	FLAT:s370_1824
	DQ	FLAT:s390_1824
	DQ	FLAT:z900_1824
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211420
	DQ	FLAT:s370_1825
	DQ	FLAT:s390_1825
	DQ	FLAT:z900_1825
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211421
	DQ	FLAT:s370_1826
	DQ	FLAT:s390_1826
	DQ	FLAT:z900_1826
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211422
	DQ	FLAT:s370_1827
	DQ	FLAT:s390_1827
	DQ	FLAT:z900_1827
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211423
	DQ	FLAT:s370_1828
	DQ	FLAT:s390_1828
	DQ	FLAT:z900_1828
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211424
	DQ	FLAT:s370_1829
	DQ	FLAT:s390_1829
	DQ	FLAT:z900_1829
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211425
	DQ	FLAT:s370_182A
	DQ	FLAT:s390_182A
	DQ	FLAT:z900_182A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211426
	DQ	FLAT:s370_182B
	DQ	FLAT:s390_182B
	DQ	FLAT:z900_182B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211427
	DQ	FLAT:s370_182C
	DQ	FLAT:s390_182C
	DQ	FLAT:z900_182C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211428
	DQ	FLAT:s370_182D
	DQ	FLAT:s390_182D
	DQ	FLAT:z900_182D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211429
	DQ	FLAT:s370_182E
	DQ	FLAT:s390_182E
	DQ	FLAT:z900_182E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211430
	DQ	FLAT:s370_182F
	DQ	FLAT:s390_182F
	DQ	FLAT:z900_182F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211431
	DQ	FLAT:s370_1830
	DQ	FLAT:s390_1830
	DQ	FLAT:z900_1830
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211432
	DQ	FLAT:s370_1831
	DQ	FLAT:s390_1831
	DQ	FLAT:z900_1831
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211433
	DQ	FLAT:s370_1832
	DQ	FLAT:s390_1832
	DQ	FLAT:z900_1832
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211434
	DQ	FLAT:s370_1833
	DQ	FLAT:s390_1833
	DQ	FLAT:z900_1833
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211435
	DQ	FLAT:s370_1834
	DQ	FLAT:s390_1834
	DQ	FLAT:z900_1834
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211436
	DQ	FLAT:s370_1835
	DQ	FLAT:s390_1835
	DQ	FLAT:z900_1835
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211437
	DQ	FLAT:s370_1836
	DQ	FLAT:s390_1836
	DQ	FLAT:z900_1836
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211438
	DQ	FLAT:s370_1837
	DQ	FLAT:s390_1837
	DQ	FLAT:z900_1837
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211439
	DQ	FLAT:s370_1838
	DQ	FLAT:s390_1838
	DQ	FLAT:z900_1838
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211440
	DQ	FLAT:s370_1839
	DQ	FLAT:s390_1839
	DQ	FLAT:z900_1839
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211441
	DQ	FLAT:s370_183A
	DQ	FLAT:s390_183A
	DQ	FLAT:z900_183A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211442
	DQ	FLAT:s370_183B
	DQ	FLAT:s390_183B
	DQ	FLAT:z900_183B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211443
	DQ	FLAT:s370_183C
	DQ	FLAT:s390_183C
	DQ	FLAT:z900_183C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211444
	DQ	FLAT:s370_183D
	DQ	FLAT:s390_183D
	DQ	FLAT:z900_183D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211445
	DQ	FLAT:s370_183E
	DQ	FLAT:s390_183E
	DQ	FLAT:z900_183E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211446
	DQ	FLAT:s370_183F
	DQ	FLAT:s390_183F
	DQ	FLAT:z900_183F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211447
	DQ	FLAT:s370_1840
	DQ	FLAT:s390_1840
	DQ	FLAT:z900_1840
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211448
	DQ	FLAT:s370_1841
	DQ	FLAT:s390_1841
	DQ	FLAT:z900_1841
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211449
	DQ	FLAT:s370_1842
	DQ	FLAT:s390_1842
	DQ	FLAT:z900_1842
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211450
	DQ	FLAT:s370_1843
	DQ	FLAT:s390_1843
	DQ	FLAT:z900_1843
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211451
	DQ	FLAT:s370_1844
	DQ	FLAT:s390_1844
	DQ	FLAT:z900_1844
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211452
	DQ	FLAT:s370_1845
	DQ	FLAT:s390_1845
	DQ	FLAT:z900_1845
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211453
	DQ	FLAT:s370_1846
	DQ	FLAT:s390_1846
	DQ	FLAT:z900_1846
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211454
	DQ	FLAT:s370_1847
	DQ	FLAT:s390_1847
	DQ	FLAT:z900_1847
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211455
	DQ	FLAT:s370_1848
	DQ	FLAT:s390_1848
	DQ	FLAT:z900_1848
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211456
	DQ	FLAT:s370_1849
	DQ	FLAT:s390_1849
	DQ	FLAT:z900_1849
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211457
	DQ	FLAT:s370_184A
	DQ	FLAT:s390_184A
	DQ	FLAT:z900_184A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211458
	DQ	FLAT:s370_184B
	DQ	FLAT:s390_184B
	DQ	FLAT:z900_184B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211459
	DQ	FLAT:s370_184C
	DQ	FLAT:s390_184C
	DQ	FLAT:z900_184C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211460
	DQ	FLAT:s370_184D
	DQ	FLAT:s390_184D
	DQ	FLAT:z900_184D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211461
	DQ	FLAT:s370_184E
	DQ	FLAT:s390_184E
	DQ	FLAT:z900_184E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211462
	DQ	FLAT:s370_184F
	DQ	FLAT:s390_184F
	DQ	FLAT:z900_184F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211463
	DQ	FLAT:s370_1850
	DQ	FLAT:s390_1850
	DQ	FLAT:z900_1850
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211464
	DQ	FLAT:s370_1851
	DQ	FLAT:s390_1851
	DQ	FLAT:z900_1851
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211465
	DQ	FLAT:s370_1852
	DQ	FLAT:s390_1852
	DQ	FLAT:z900_1852
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211466
	DQ	FLAT:s370_1853
	DQ	FLAT:s390_1853
	DQ	FLAT:z900_1853
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211467
	DQ	FLAT:s370_1854
	DQ	FLAT:s390_1854
	DQ	FLAT:z900_1854
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211468
	DQ	FLAT:s370_1855
	DQ	FLAT:s390_1855
	DQ	FLAT:z900_1855
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211469
	DQ	FLAT:s370_1856
	DQ	FLAT:s390_1856
	DQ	FLAT:z900_1856
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211470
	DQ	FLAT:s370_1857
	DQ	FLAT:s390_1857
	DQ	FLAT:z900_1857
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211471
	DQ	FLAT:s370_1858
	DQ	FLAT:s390_1858
	DQ	FLAT:z900_1858
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211472
	DQ	FLAT:s370_1859
	DQ	FLAT:s390_1859
	DQ	FLAT:z900_1859
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211473
	DQ	FLAT:s370_185A
	DQ	FLAT:s390_185A
	DQ	FLAT:z900_185A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211474
	DQ	FLAT:s370_185B
	DQ	FLAT:s390_185B
	DQ	FLAT:z900_185B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211475
	DQ	FLAT:s370_185C
	DQ	FLAT:s390_185C
	DQ	FLAT:z900_185C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211476
	DQ	FLAT:s370_185D
	DQ	FLAT:s390_185D
	DQ	FLAT:z900_185D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211477
	DQ	FLAT:s370_185E
	DQ	FLAT:s390_185E
	DQ	FLAT:z900_185E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211478
	DQ	FLAT:s370_185F
	DQ	FLAT:s390_185F
	DQ	FLAT:z900_185F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211479
	DQ	FLAT:s370_1860
	DQ	FLAT:s390_1860
	DQ	FLAT:z900_1860
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211480
	DQ	FLAT:s370_1861
	DQ	FLAT:s390_1861
	DQ	FLAT:z900_1861
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211481
	DQ	FLAT:s370_1862
	DQ	FLAT:s390_1862
	DQ	FLAT:z900_1862
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211482
	DQ	FLAT:s370_1863
	DQ	FLAT:s390_1863
	DQ	FLAT:z900_1863
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211483
	DQ	FLAT:s370_1864
	DQ	FLAT:s390_1864
	DQ	FLAT:z900_1864
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211484
	DQ	FLAT:s370_1865
	DQ	FLAT:s390_1865
	DQ	FLAT:z900_1865
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211485
	DQ	FLAT:s370_1866
	DQ	FLAT:s390_1866
	DQ	FLAT:z900_1866
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211486
	DQ	FLAT:s370_1867
	DQ	FLAT:s390_1867
	DQ	FLAT:z900_1867
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211487
	DQ	FLAT:s370_1868
	DQ	FLAT:s390_1868
	DQ	FLAT:z900_1868
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211488
	DQ	FLAT:s370_1869
	DQ	FLAT:s390_1869
	DQ	FLAT:z900_1869
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211489
	DQ	FLAT:s370_186A
	DQ	FLAT:s390_186A
	DQ	FLAT:z900_186A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211490
	DQ	FLAT:s370_186B
	DQ	FLAT:s390_186B
	DQ	FLAT:z900_186B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211491
	DQ	FLAT:s370_186C
	DQ	FLAT:s390_186C
	DQ	FLAT:z900_186C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211492
	DQ	FLAT:s370_186D
	DQ	FLAT:s390_186D
	DQ	FLAT:z900_186D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211493
	DQ	FLAT:s370_186E
	DQ	FLAT:s390_186E
	DQ	FLAT:z900_186E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211494
	DQ	FLAT:s370_186F
	DQ	FLAT:s390_186F
	DQ	FLAT:z900_186F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211495
	DQ	FLAT:s370_1870
	DQ	FLAT:s390_1870
	DQ	FLAT:z900_1870
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211496
	DQ	FLAT:s370_1871
	DQ	FLAT:s390_1871
	DQ	FLAT:z900_1871
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211497
	DQ	FLAT:s370_1872
	DQ	FLAT:s390_1872
	DQ	FLAT:z900_1872
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211498
	DQ	FLAT:s370_1873
	DQ	FLAT:s390_1873
	DQ	FLAT:z900_1873
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211499
	DQ	FLAT:s370_1874
	DQ	FLAT:s390_1874
	DQ	FLAT:z900_1874
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211500
	DQ	FLAT:s370_1875
	DQ	FLAT:s390_1875
	DQ	FLAT:z900_1875
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211501
	DQ	FLAT:s370_1876
	DQ	FLAT:s390_1876
	DQ	FLAT:z900_1876
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211502
	DQ	FLAT:s370_1877
	DQ	FLAT:s390_1877
	DQ	FLAT:z900_1877
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211503
	DQ	FLAT:s370_1878
	DQ	FLAT:s390_1878
	DQ	FLAT:z900_1878
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211504
	DQ	FLAT:s370_1879
	DQ	FLAT:s390_1879
	DQ	FLAT:z900_1879
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211505
	DQ	FLAT:s370_187A
	DQ	FLAT:s390_187A
	DQ	FLAT:z900_187A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211506
	DQ	FLAT:s370_187B
	DQ	FLAT:s390_187B
	DQ	FLAT:z900_187B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211507
	DQ	FLAT:s370_187C
	DQ	FLAT:s390_187C
	DQ	FLAT:z900_187C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211508
	DQ	FLAT:s370_187D
	DQ	FLAT:s390_187D
	DQ	FLAT:z900_187D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211509
	DQ	FLAT:s370_187E
	DQ	FLAT:s390_187E
	DQ	FLAT:z900_187E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211510
	DQ	FLAT:s370_187F
	DQ	FLAT:s390_187F
	DQ	FLAT:z900_187F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211511
	DQ	FLAT:s370_1880
	DQ	FLAT:s390_1880
	DQ	FLAT:z900_1880
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211512
	DQ	FLAT:s370_1881
	DQ	FLAT:s390_1881
	DQ	FLAT:z900_1881
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211513
	DQ	FLAT:s370_1882
	DQ	FLAT:s390_1882
	DQ	FLAT:z900_1882
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211514
	DQ	FLAT:s370_1883
	DQ	FLAT:s390_1883
	DQ	FLAT:z900_1883
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211515
	DQ	FLAT:s370_1884
	DQ	FLAT:s390_1884
	DQ	FLAT:z900_1884
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211516
	DQ	FLAT:s370_1885
	DQ	FLAT:s390_1885
	DQ	FLAT:z900_1885
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211517
	DQ	FLAT:s370_1886
	DQ	FLAT:s390_1886
	DQ	FLAT:z900_1886
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211518
	DQ	FLAT:s370_1887
	DQ	FLAT:s390_1887
	DQ	FLAT:z900_1887
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211519
	DQ	FLAT:s370_1888
	DQ	FLAT:s390_1888
	DQ	FLAT:z900_1888
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211520
	DQ	FLAT:s370_1889
	DQ	FLAT:s390_1889
	DQ	FLAT:z900_1889
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211521
	DQ	FLAT:s370_188A
	DQ	FLAT:s390_188A
	DQ	FLAT:z900_188A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211522
	DQ	FLAT:s370_188B
	DQ	FLAT:s390_188B
	DQ	FLAT:z900_188B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211523
	DQ	FLAT:s370_188C
	DQ	FLAT:s390_188C
	DQ	FLAT:z900_188C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211524
	DQ	FLAT:s370_188D
	DQ	FLAT:s390_188D
	DQ	FLAT:z900_188D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211525
	DQ	FLAT:s370_188E
	DQ	FLAT:s390_188E
	DQ	FLAT:z900_188E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211526
	DQ	FLAT:s370_188F
	DQ	FLAT:s390_188F
	DQ	FLAT:z900_188F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211527
	DQ	FLAT:s370_1890
	DQ	FLAT:s390_1890
	DQ	FLAT:z900_1890
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211528
	DQ	FLAT:s370_1891
	DQ	FLAT:s390_1891
	DQ	FLAT:z900_1891
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211529
	DQ	FLAT:s370_1892
	DQ	FLAT:s390_1892
	DQ	FLAT:z900_1892
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211530
	DQ	FLAT:s370_1893
	DQ	FLAT:s390_1893
	DQ	FLAT:z900_1893
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211531
	DQ	FLAT:s370_1894
	DQ	FLAT:s390_1894
	DQ	FLAT:z900_1894
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211532
	DQ	FLAT:s370_1895
	DQ	FLAT:s390_1895
	DQ	FLAT:z900_1895
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211533
	DQ	FLAT:s370_1896
	DQ	FLAT:s390_1896
	DQ	FLAT:z900_1896
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211534
	DQ	FLAT:s370_1897
	DQ	FLAT:s390_1897
	DQ	FLAT:z900_1897
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211535
	DQ	FLAT:s370_1898
	DQ	FLAT:s390_1898
	DQ	FLAT:z900_1898
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211536
	DQ	FLAT:s370_1899
	DQ	FLAT:s390_1899
	DQ	FLAT:z900_1899
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211537
	DQ	FLAT:s370_189A
	DQ	FLAT:s390_189A
	DQ	FLAT:z900_189A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211538
	DQ	FLAT:s370_189B
	DQ	FLAT:s390_189B
	DQ	FLAT:z900_189B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211539
	DQ	FLAT:s370_189C
	DQ	FLAT:s390_189C
	DQ	FLAT:z900_189C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211540
	DQ	FLAT:s370_189D
	DQ	FLAT:s390_189D
	DQ	FLAT:z900_189D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211541
	DQ	FLAT:s370_189E
	DQ	FLAT:s390_189E
	DQ	FLAT:z900_189E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211542
	DQ	FLAT:s370_189F
	DQ	FLAT:s390_189F
	DQ	FLAT:z900_189F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211543
	DQ	FLAT:s370_18A0
	DQ	FLAT:s390_18A0
	DQ	FLAT:z900_18A0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211544
	DQ	FLAT:s370_18A1
	DQ	FLAT:s390_18A1
	DQ	FLAT:z900_18A1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211545
	DQ	FLAT:s370_18A2
	DQ	FLAT:s390_18A2
	DQ	FLAT:z900_18A2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211546
	DQ	FLAT:s370_18A3
	DQ	FLAT:s390_18A3
	DQ	FLAT:z900_18A3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211547
	DQ	FLAT:s370_18A4
	DQ	FLAT:s390_18A4
	DQ	FLAT:z900_18A4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211548
	DQ	FLAT:s370_18A5
	DQ	FLAT:s390_18A5
	DQ	FLAT:z900_18A5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211549
	DQ	FLAT:s370_18A6
	DQ	FLAT:s390_18A6
	DQ	FLAT:z900_18A6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211550
	DQ	FLAT:s370_18A7
	DQ	FLAT:s390_18A7
	DQ	FLAT:z900_18A7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211551
	DQ	FLAT:s370_18A8
	DQ	FLAT:s390_18A8
	DQ	FLAT:z900_18A8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211552
	DQ	FLAT:s370_18A9
	DQ	FLAT:s390_18A9
	DQ	FLAT:z900_18A9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211553
	DQ	FLAT:s370_18AA
	DQ	FLAT:s390_18AA
	DQ	FLAT:z900_18AA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211554
	DQ	FLAT:s370_18AB
	DQ	FLAT:s390_18AB
	DQ	FLAT:z900_18AB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211555
	DQ	FLAT:s370_18AC
	DQ	FLAT:s390_18AC
	DQ	FLAT:z900_18AC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211556
	DQ	FLAT:s370_18AD
	DQ	FLAT:s390_18AD
	DQ	FLAT:z900_18AD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211557
	DQ	FLAT:s370_18AE
	DQ	FLAT:s390_18AE
	DQ	FLAT:z900_18AE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211558
	DQ	FLAT:s370_18AF
	DQ	FLAT:s390_18AF
	DQ	FLAT:z900_18AF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211559
	DQ	FLAT:s370_18B0
	DQ	FLAT:s390_18B0
	DQ	FLAT:z900_18B0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211560
	DQ	FLAT:s370_18B1
	DQ	FLAT:s390_18B1
	DQ	FLAT:z900_18B1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211561
	DQ	FLAT:s370_18B2
	DQ	FLAT:s390_18B2
	DQ	FLAT:z900_18B2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211562
	DQ	FLAT:s370_18B3
	DQ	FLAT:s390_18B3
	DQ	FLAT:z900_18B3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211563
	DQ	FLAT:s370_18B4
	DQ	FLAT:s390_18B4
	DQ	FLAT:z900_18B4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211564
	DQ	FLAT:s370_18B5
	DQ	FLAT:s390_18B5
	DQ	FLAT:z900_18B5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211565
	DQ	FLAT:s370_18B6
	DQ	FLAT:s390_18B6
	DQ	FLAT:z900_18B6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211566
	DQ	FLAT:s370_18B7
	DQ	FLAT:s390_18B7
	DQ	FLAT:z900_18B7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211567
	DQ	FLAT:s370_18B8
	DQ	FLAT:s390_18B8
	DQ	FLAT:z900_18B8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211568
	DQ	FLAT:s370_18B9
	DQ	FLAT:s390_18B9
	DQ	FLAT:z900_18B9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211569
	DQ	FLAT:s370_18BA
	DQ	FLAT:s390_18BA
	DQ	FLAT:z900_18BA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211570
	DQ	FLAT:s370_18BB
	DQ	FLAT:s390_18BB
	DQ	FLAT:z900_18BB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211571
	DQ	FLAT:s370_18BC
	DQ	FLAT:s390_18BC
	DQ	FLAT:z900_18BC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211572
	DQ	FLAT:s370_18BD
	DQ	FLAT:s390_18BD
	DQ	FLAT:z900_18BD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211573
	DQ	FLAT:s370_18BE
	DQ	FLAT:s390_18BE
	DQ	FLAT:z900_18BE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211574
	DQ	FLAT:s370_18BF
	DQ	FLAT:s390_18BF
	DQ	FLAT:z900_18BF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211575
	DQ	FLAT:s370_18C0
	DQ	FLAT:s390_18C0
	DQ	FLAT:z900_18C0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211576
	DQ	FLAT:s370_18C1
	DQ	FLAT:s390_18C1
	DQ	FLAT:z900_18C1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211577
	DQ	FLAT:s370_18C2
	DQ	FLAT:s390_18C2
	DQ	FLAT:z900_18C2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211578
	DQ	FLAT:s370_18C3
	DQ	FLAT:s390_18C3
	DQ	FLAT:z900_18C3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211579
	DQ	FLAT:s370_18C4
	DQ	FLAT:s390_18C4
	DQ	FLAT:z900_18C4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211580
	DQ	FLAT:s370_18C5
	DQ	FLAT:s390_18C5
	DQ	FLAT:z900_18C5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211581
	DQ	FLAT:s370_18C6
	DQ	FLAT:s390_18C6
	DQ	FLAT:z900_18C6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211582
	DQ	FLAT:s370_18C7
	DQ	FLAT:s390_18C7
	DQ	FLAT:z900_18C7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211583
	DQ	FLAT:s370_18C8
	DQ	FLAT:s390_18C8
	DQ	FLAT:z900_18C8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211584
	DQ	FLAT:s370_18C9
	DQ	FLAT:s390_18C9
	DQ	FLAT:z900_18C9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211585
	DQ	FLAT:s370_18CA
	DQ	FLAT:s390_18CA
	DQ	FLAT:z900_18CA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211586
	DQ	FLAT:s370_18CB
	DQ	FLAT:s390_18CB
	DQ	FLAT:z900_18CB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211587
	DQ	FLAT:s370_18CC
	DQ	FLAT:s390_18CC
	DQ	FLAT:z900_18CC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211588
	DQ	FLAT:s370_18CD
	DQ	FLAT:s390_18CD
	DQ	FLAT:z900_18CD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211589
	DQ	FLAT:s370_18CE
	DQ	FLAT:s390_18CE
	DQ	FLAT:z900_18CE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211590
	DQ	FLAT:s370_18CF
	DQ	FLAT:s390_18CF
	DQ	FLAT:z900_18CF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211591
	DQ	FLAT:s370_18D0
	DQ	FLAT:s390_18D0
	DQ	FLAT:z900_18D0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211592
	DQ	FLAT:s370_18D1
	DQ	FLAT:s390_18D1
	DQ	FLAT:z900_18D1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211593
	DQ	FLAT:s370_18D2
	DQ	FLAT:s390_18D2
	DQ	FLAT:z900_18D2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211594
	DQ	FLAT:s370_18D3
	DQ	FLAT:s390_18D3
	DQ	FLAT:z900_18D3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211595
	DQ	FLAT:s370_18D4
	DQ	FLAT:s390_18D4
	DQ	FLAT:z900_18D4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211596
	DQ	FLAT:s370_18D5
	DQ	FLAT:s390_18D5
	DQ	FLAT:z900_18D5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211597
	DQ	FLAT:s370_18D6
	DQ	FLAT:s390_18D6
	DQ	FLAT:z900_18D6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211598
	DQ	FLAT:s370_18D7
	DQ	FLAT:s390_18D7
	DQ	FLAT:z900_18D7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211599
	DQ	FLAT:s370_18D8
	DQ	FLAT:s390_18D8
	DQ	FLAT:z900_18D8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211600
	DQ	FLAT:s370_18D9
	DQ	FLAT:s390_18D9
	DQ	FLAT:z900_18D9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211601
	DQ	FLAT:s370_18DA
	DQ	FLAT:s390_18DA
	DQ	FLAT:z900_18DA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211602
	DQ	FLAT:s370_18DB
	DQ	FLAT:s390_18DB
	DQ	FLAT:z900_18DB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211603
	DQ	FLAT:s370_18DC
	DQ	FLAT:s390_18DC
	DQ	FLAT:z900_18DC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211604
	DQ	FLAT:s370_18DD
	DQ	FLAT:s390_18DD
	DQ	FLAT:z900_18DD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211605
	DQ	FLAT:s370_18DE
	DQ	FLAT:s390_18DE
	DQ	FLAT:z900_18DE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211606
	DQ	FLAT:s370_18DF
	DQ	FLAT:s390_18DF
	DQ	FLAT:z900_18DF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211607
	DQ	FLAT:s370_18E0
	DQ	FLAT:s390_18E0
	DQ	FLAT:z900_18E0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211608
	DQ	FLAT:s370_18E1
	DQ	FLAT:s390_18E1
	DQ	FLAT:z900_18E1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211609
	DQ	FLAT:s370_18E2
	DQ	FLAT:s390_18E2
	DQ	FLAT:z900_18E2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211610
	DQ	FLAT:s370_18E3
	DQ	FLAT:s390_18E3
	DQ	FLAT:z900_18E3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211611
	DQ	FLAT:s370_18E4
	DQ	FLAT:s390_18E4
	DQ	FLAT:z900_18E4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211612
	DQ	FLAT:s370_18E5
	DQ	FLAT:s390_18E5
	DQ	FLAT:z900_18E5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211613
	DQ	FLAT:s370_18E6
	DQ	FLAT:s390_18E6
	DQ	FLAT:z900_18E6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211614
	DQ	FLAT:s370_18E7
	DQ	FLAT:s390_18E7
	DQ	FLAT:z900_18E7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211615
	DQ	FLAT:s370_18E8
	DQ	FLAT:s390_18E8
	DQ	FLAT:z900_18E8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211616
	DQ	FLAT:s370_18E9
	DQ	FLAT:s390_18E9
	DQ	FLAT:z900_18E9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211617
	DQ	FLAT:s370_18EA
	DQ	FLAT:s390_18EA
	DQ	FLAT:z900_18EA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211618
	DQ	FLAT:s370_18EB
	DQ	FLAT:s390_18EB
	DQ	FLAT:z900_18EB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211619
	DQ	FLAT:s370_18EC
	DQ	FLAT:s390_18EC
	DQ	FLAT:z900_18EC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211620
	DQ	FLAT:s370_18ED
	DQ	FLAT:s390_18ED
	DQ	FLAT:z900_18ED
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211621
	DQ	FLAT:s370_18EE
	DQ	FLAT:s390_18EE
	DQ	FLAT:z900_18EE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211622
	DQ	FLAT:s370_18EF
	DQ	FLAT:s390_18EF
	DQ	FLAT:z900_18EF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211623
	DQ	FLAT:s370_18F0
	DQ	FLAT:s390_18F0
	DQ	FLAT:z900_18F0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211624
	DQ	FLAT:s370_18F1
	DQ	FLAT:s390_18F1
	DQ	FLAT:z900_18F1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211625
	DQ	FLAT:s370_18F2
	DQ	FLAT:s390_18F2
	DQ	FLAT:z900_18F2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211626
	DQ	FLAT:s370_18F3
	DQ	FLAT:s390_18F3
	DQ	FLAT:z900_18F3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211627
	DQ	FLAT:s370_18F4
	DQ	FLAT:s390_18F4
	DQ	FLAT:z900_18F4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211628
	DQ	FLAT:s370_18F5
	DQ	FLAT:s390_18F5
	DQ	FLAT:z900_18F5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211629
	DQ	FLAT:s370_18F6
	DQ	FLAT:s390_18F6
	DQ	FLAT:z900_18F6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211630
	DQ	FLAT:s370_18F7
	DQ	FLAT:s390_18F7
	DQ	FLAT:z900_18F7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211631
	DQ	FLAT:s370_18F8
	DQ	FLAT:s390_18F8
	DQ	FLAT:z900_18F8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211632
	DQ	FLAT:s370_18F9
	DQ	FLAT:s390_18F9
	DQ	FLAT:z900_18F9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211633
	DQ	FLAT:s370_18FA
	DQ	FLAT:s390_18FA
	DQ	FLAT:z900_18FA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211634
	DQ	FLAT:s370_18FB
	DQ	FLAT:s390_18FB
	DQ	FLAT:z900_18FB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211635
	DQ	FLAT:s370_18FC
	DQ	FLAT:s390_18FC
	DQ	FLAT:z900_18FC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211636
	DQ	FLAT:s370_18FD
	DQ	FLAT:s390_18FD
	DQ	FLAT:z900_18FD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211637
	DQ	FLAT:s370_18FE
	DQ	FLAT:s390_18FE
	DQ	FLAT:z900_18FE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211638
	DQ	FLAT:s370_18FF
	DQ	FLAT:s390_18FF
	DQ	FLAT:z900_18FF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG211639
gen_opcode_1E__ DQ FLAT:s370_1E00
	DQ	FLAT:s390_1E00
	DQ	FLAT:z900_1E00
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212152
	DQ	FLAT:s370_1E01
	DQ	FLAT:s390_1E01
	DQ	FLAT:z900_1E01
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212153
	DQ	FLAT:s370_1E02
	DQ	FLAT:s390_1E02
	DQ	FLAT:z900_1E02
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212154
	DQ	FLAT:s370_1E03
	DQ	FLAT:s390_1E03
	DQ	FLAT:z900_1E03
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212155
	DQ	FLAT:s370_1E04
	DQ	FLAT:s390_1E04
	DQ	FLAT:z900_1E04
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212156
	DQ	FLAT:s370_1E05
	DQ	FLAT:s390_1E05
	DQ	FLAT:z900_1E05
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212157
	DQ	FLAT:s370_1E06
	DQ	FLAT:s390_1E06
	DQ	FLAT:z900_1E06
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212158
	DQ	FLAT:s370_1E07
	DQ	FLAT:s390_1E07
	DQ	FLAT:z900_1E07
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212159
	DQ	FLAT:s370_1E08
	DQ	FLAT:s390_1E08
	DQ	FLAT:z900_1E08
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212160
	DQ	FLAT:s370_1E09
	DQ	FLAT:s390_1E09
	DQ	FLAT:z900_1E09
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212161
	DQ	FLAT:s370_1E0A
	DQ	FLAT:s390_1E0A
	DQ	FLAT:z900_1E0A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212162
	DQ	FLAT:s370_1E0B
	DQ	FLAT:s390_1E0B
	DQ	FLAT:z900_1E0B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212163
	DQ	FLAT:s370_1E0C
	DQ	FLAT:s390_1E0C
	DQ	FLAT:z900_1E0C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212164
	DQ	FLAT:s370_1E0D
	DQ	FLAT:s390_1E0D
	DQ	FLAT:z900_1E0D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212165
	DQ	FLAT:s370_1E0E
	DQ	FLAT:s390_1E0E
	DQ	FLAT:z900_1E0E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212166
	DQ	FLAT:s370_1E0F
	DQ	FLAT:s390_1E0F
	DQ	FLAT:z900_1E0F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212167
	DQ	FLAT:s370_1E10
	DQ	FLAT:s390_1E10
	DQ	FLAT:z900_1E10
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212168
	DQ	FLAT:s370_1E11
	DQ	FLAT:s390_1E11
	DQ	FLAT:z900_1E11
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212169
	DQ	FLAT:s370_1E12
	DQ	FLAT:s390_1E12
	DQ	FLAT:z900_1E12
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212170
	DQ	FLAT:s370_1E13
	DQ	FLAT:s390_1E13
	DQ	FLAT:z900_1E13
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212171
	DQ	FLAT:s370_1E14
	DQ	FLAT:s390_1E14
	DQ	FLAT:z900_1E14
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212172
	DQ	FLAT:s370_1E15
	DQ	FLAT:s390_1E15
	DQ	FLAT:z900_1E15
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212173
	DQ	FLAT:s370_1E16
	DQ	FLAT:s390_1E16
	DQ	FLAT:z900_1E16
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212174
	DQ	FLAT:s370_1E17
	DQ	FLAT:s390_1E17
	DQ	FLAT:z900_1E17
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212175
	DQ	FLAT:s370_1E18
	DQ	FLAT:s390_1E18
	DQ	FLAT:z900_1E18
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212176
	DQ	FLAT:s370_1E19
	DQ	FLAT:s390_1E19
	DQ	FLAT:z900_1E19
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212177
	DQ	FLAT:s370_1E1A
	DQ	FLAT:s390_1E1A
	DQ	FLAT:z900_1E1A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212178
	DQ	FLAT:s370_1E1B
	DQ	FLAT:s390_1E1B
	DQ	FLAT:z900_1E1B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212179
	DQ	FLAT:s370_1E1C
	DQ	FLAT:s390_1E1C
	DQ	FLAT:z900_1E1C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212180
	DQ	FLAT:s370_1E1D
	DQ	FLAT:s390_1E1D
	DQ	FLAT:z900_1E1D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212181
	DQ	FLAT:s370_1E1E
	DQ	FLAT:s390_1E1E
	DQ	FLAT:z900_1E1E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212182
	DQ	FLAT:s370_1E1F
	DQ	FLAT:s390_1E1F
	DQ	FLAT:z900_1E1F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212183
	DQ	FLAT:s370_1E20
	DQ	FLAT:s390_1E20
	DQ	FLAT:z900_1E20
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212184
	DQ	FLAT:s370_1E21
	DQ	FLAT:s390_1E21
	DQ	FLAT:z900_1E21
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212185
	DQ	FLAT:s370_1E22
	DQ	FLAT:s390_1E22
	DQ	FLAT:z900_1E22
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212186
	DQ	FLAT:s370_1E23
	DQ	FLAT:s390_1E23
	DQ	FLAT:z900_1E23
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212187
	DQ	FLAT:s370_1E24
	DQ	FLAT:s390_1E24
	DQ	FLAT:z900_1E24
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212188
	DQ	FLAT:s370_1E25
	DQ	FLAT:s390_1E25
	DQ	FLAT:z900_1E25
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212189
	DQ	FLAT:s370_1E26
	DQ	FLAT:s390_1E26
	DQ	FLAT:z900_1E26
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212190
	DQ	FLAT:s370_1E27
	DQ	FLAT:s390_1E27
	DQ	FLAT:z900_1E27
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212191
	DQ	FLAT:s370_1E28
	DQ	FLAT:s390_1E28
	DQ	FLAT:z900_1E28
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212192
	DQ	FLAT:s370_1E29
	DQ	FLAT:s390_1E29
	DQ	FLAT:z900_1E29
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212193
	DQ	FLAT:s370_1E2A
	DQ	FLAT:s390_1E2A
	DQ	FLAT:z900_1E2A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212194
	DQ	FLAT:s370_1E2B
	DQ	FLAT:s390_1E2B
	DQ	FLAT:z900_1E2B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212195
	DQ	FLAT:s370_1E2C
	DQ	FLAT:s390_1E2C
	DQ	FLAT:z900_1E2C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212196
	DQ	FLAT:s370_1E2D
	DQ	FLAT:s390_1E2D
	DQ	FLAT:z900_1E2D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212197
	DQ	FLAT:s370_1E2E
	DQ	FLAT:s390_1E2E
	DQ	FLAT:z900_1E2E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212198
	DQ	FLAT:s370_1E2F
	DQ	FLAT:s390_1E2F
	DQ	FLAT:z900_1E2F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212199
	DQ	FLAT:s370_1E30
	DQ	FLAT:s390_1E30
	DQ	FLAT:z900_1E30
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212200
	DQ	FLAT:s370_1E31
	DQ	FLAT:s390_1E31
	DQ	FLAT:z900_1E31
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212201
	DQ	FLAT:s370_1E32
	DQ	FLAT:s390_1E32
	DQ	FLAT:z900_1E32
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212202
	DQ	FLAT:s370_1E33
	DQ	FLAT:s390_1E33
	DQ	FLAT:z900_1E33
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212203
	DQ	FLAT:s370_1E34
	DQ	FLAT:s390_1E34
	DQ	FLAT:z900_1E34
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212204
	DQ	FLAT:s370_1E35
	DQ	FLAT:s390_1E35
	DQ	FLAT:z900_1E35
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212205
	DQ	FLAT:s370_1E36
	DQ	FLAT:s390_1E36
	DQ	FLAT:z900_1E36
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212206
	DQ	FLAT:s370_1E37
	DQ	FLAT:s390_1E37
	DQ	FLAT:z900_1E37
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212207
	DQ	FLAT:s370_1E38
	DQ	FLAT:s390_1E38
	DQ	FLAT:z900_1E38
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212208
	DQ	FLAT:s370_1E39
	DQ	FLAT:s390_1E39
	DQ	FLAT:z900_1E39
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212209
	DQ	FLAT:s370_1E3A
	DQ	FLAT:s390_1E3A
	DQ	FLAT:z900_1E3A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212210
	DQ	FLAT:s370_1E3B
	DQ	FLAT:s390_1E3B
	DQ	FLAT:z900_1E3B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212211
	DQ	FLAT:s370_1E3C
	DQ	FLAT:s390_1E3C
	DQ	FLAT:z900_1E3C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212212
	DQ	FLAT:s370_1E3D
	DQ	FLAT:s390_1E3D
	DQ	FLAT:z900_1E3D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212213
	DQ	FLAT:s370_1E3E
	DQ	FLAT:s390_1E3E
	DQ	FLAT:z900_1E3E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212214
	DQ	FLAT:s370_1E3F
	DQ	FLAT:s390_1E3F
	DQ	FLAT:z900_1E3F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212215
	DQ	FLAT:s370_1E40
	DQ	FLAT:s390_1E40
	DQ	FLAT:z900_1E40
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212216
	DQ	FLAT:s370_1E41
	DQ	FLAT:s390_1E41
	DQ	FLAT:z900_1E41
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212217
	DQ	FLAT:s370_1E42
	DQ	FLAT:s390_1E42
	DQ	FLAT:z900_1E42
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212218
	DQ	FLAT:s370_1E43
	DQ	FLAT:s390_1E43
	DQ	FLAT:z900_1E43
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212219
	DQ	FLAT:s370_1E44
	DQ	FLAT:s390_1E44
	DQ	FLAT:z900_1E44
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212220
	DQ	FLAT:s370_1E45
	DQ	FLAT:s390_1E45
	DQ	FLAT:z900_1E45
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212221
	DQ	FLAT:s370_1E46
	DQ	FLAT:s390_1E46
	DQ	FLAT:z900_1E46
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212222
	DQ	FLAT:s370_1E47
	DQ	FLAT:s390_1E47
	DQ	FLAT:z900_1E47
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212223
	DQ	FLAT:s370_1E48
	DQ	FLAT:s390_1E48
	DQ	FLAT:z900_1E48
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212224
	DQ	FLAT:s370_1E49
	DQ	FLAT:s390_1E49
	DQ	FLAT:z900_1E49
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212225
	DQ	FLAT:s370_1E4A
	DQ	FLAT:s390_1E4A
	DQ	FLAT:z900_1E4A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212226
	DQ	FLAT:s370_1E4B
	DQ	FLAT:s390_1E4B
	DQ	FLAT:z900_1E4B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212227
	DQ	FLAT:s370_1E4C
	DQ	FLAT:s390_1E4C
	DQ	FLAT:z900_1E4C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212228
	DQ	FLAT:s370_1E4D
	DQ	FLAT:s390_1E4D
	DQ	FLAT:z900_1E4D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212229
	DQ	FLAT:s370_1E4E
	DQ	FLAT:s390_1E4E
	DQ	FLAT:z900_1E4E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212230
	DQ	FLAT:s370_1E4F
	DQ	FLAT:s390_1E4F
	DQ	FLAT:z900_1E4F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212231
	DQ	FLAT:s370_1E50
	DQ	FLAT:s390_1E50
	DQ	FLAT:z900_1E50
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212232
	DQ	FLAT:s370_1E51
	DQ	FLAT:s390_1E51
	DQ	FLAT:z900_1E51
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212233
	DQ	FLAT:s370_1E52
	DQ	FLAT:s390_1E52
	DQ	FLAT:z900_1E52
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212234
	DQ	FLAT:s370_1E53
	DQ	FLAT:s390_1E53
	DQ	FLAT:z900_1E53
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212235
	DQ	FLAT:s370_1E54
	DQ	FLAT:s390_1E54
	DQ	FLAT:z900_1E54
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212236
	DQ	FLAT:s370_1E55
	DQ	FLAT:s390_1E55
	DQ	FLAT:z900_1E55
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212237
	DQ	FLAT:s370_1E56
	DQ	FLAT:s390_1E56
	DQ	FLAT:z900_1E56
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212238
	DQ	FLAT:s370_1E57
	DQ	FLAT:s390_1E57
	DQ	FLAT:z900_1E57
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212239
	DQ	FLAT:s370_1E58
	DQ	FLAT:s390_1E58
	DQ	FLAT:z900_1E58
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212240
	DQ	FLAT:s370_1E59
	DQ	FLAT:s390_1E59
	DQ	FLAT:z900_1E59
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212241
	DQ	FLAT:s370_1E5A
	DQ	FLAT:s390_1E5A
	DQ	FLAT:z900_1E5A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212242
	DQ	FLAT:s370_1E5B
	DQ	FLAT:s390_1E5B
	DQ	FLAT:z900_1E5B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212243
	DQ	FLAT:s370_1E5C
	DQ	FLAT:s390_1E5C
	DQ	FLAT:z900_1E5C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212244
	DQ	FLAT:s370_1E5D
	DQ	FLAT:s390_1E5D
	DQ	FLAT:z900_1E5D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212245
	DQ	FLAT:s370_1E5E
	DQ	FLAT:s390_1E5E
	DQ	FLAT:z900_1E5E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212246
	DQ	FLAT:s370_1E5F
	DQ	FLAT:s390_1E5F
	DQ	FLAT:z900_1E5F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212247
	DQ	FLAT:s370_1E60
	DQ	FLAT:s390_1E60
	DQ	FLAT:z900_1E60
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212248
	DQ	FLAT:s370_1E61
	DQ	FLAT:s390_1E61
	DQ	FLAT:z900_1E61
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212249
	DQ	FLAT:s370_1E62
	DQ	FLAT:s390_1E62
	DQ	FLAT:z900_1E62
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212250
	DQ	FLAT:s370_1E63
	DQ	FLAT:s390_1E63
	DQ	FLAT:z900_1E63
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212251
	DQ	FLAT:s370_1E64
	DQ	FLAT:s390_1E64
	DQ	FLAT:z900_1E64
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212252
	DQ	FLAT:s370_1E65
	DQ	FLAT:s390_1E65
	DQ	FLAT:z900_1E65
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212253
	DQ	FLAT:s370_1E66
	DQ	FLAT:s390_1E66
	DQ	FLAT:z900_1E66
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212254
	DQ	FLAT:s370_1E67
	DQ	FLAT:s390_1E67
	DQ	FLAT:z900_1E67
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212255
	DQ	FLAT:s370_1E68
	DQ	FLAT:s390_1E68
	DQ	FLAT:z900_1E68
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212256
	DQ	FLAT:s370_1E69
	DQ	FLAT:s390_1E69
	DQ	FLAT:z900_1E69
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212257
	DQ	FLAT:s370_1E6A
	DQ	FLAT:s390_1E6A
	DQ	FLAT:z900_1E6A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212258
	DQ	FLAT:s370_1E6B
	DQ	FLAT:s390_1E6B
	DQ	FLAT:z900_1E6B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212259
	DQ	FLAT:s370_1E6C
	DQ	FLAT:s390_1E6C
	DQ	FLAT:z900_1E6C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212260
	DQ	FLAT:s370_1E6D
	DQ	FLAT:s390_1E6D
	DQ	FLAT:z900_1E6D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212261
	DQ	FLAT:s370_1E6E
	DQ	FLAT:s390_1E6E
	DQ	FLAT:z900_1E6E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212262
	DQ	FLAT:s370_1E6F
	DQ	FLAT:s390_1E6F
	DQ	FLAT:z900_1E6F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212263
	DQ	FLAT:s370_1E70
	DQ	FLAT:s390_1E70
	DQ	FLAT:z900_1E70
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212264
	DQ	FLAT:s370_1E71
	DQ	FLAT:s390_1E71
	DQ	FLAT:z900_1E71
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212265
	DQ	FLAT:s370_1E72
	DQ	FLAT:s390_1E72
	DQ	FLAT:z900_1E72
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212266
	DQ	FLAT:s370_1E73
	DQ	FLAT:s390_1E73
	DQ	FLAT:z900_1E73
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212267
	DQ	FLAT:s370_1E74
	DQ	FLAT:s390_1E74
	DQ	FLAT:z900_1E74
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212268
	DQ	FLAT:s370_1E75
	DQ	FLAT:s390_1E75
	DQ	FLAT:z900_1E75
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212269
	DQ	FLAT:s370_1E76
	DQ	FLAT:s390_1E76
	DQ	FLAT:z900_1E76
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212270
	DQ	FLAT:s370_1E77
	DQ	FLAT:s390_1E77
	DQ	FLAT:z900_1E77
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212271
	DQ	FLAT:s370_1E78
	DQ	FLAT:s390_1E78
	DQ	FLAT:z900_1E78
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212272
	DQ	FLAT:s370_1E79
	DQ	FLAT:s390_1E79
	DQ	FLAT:z900_1E79
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212273
	DQ	FLAT:s370_1E7A
	DQ	FLAT:s390_1E7A
	DQ	FLAT:z900_1E7A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212274
	DQ	FLAT:s370_1E7B
	DQ	FLAT:s390_1E7B
	DQ	FLAT:z900_1E7B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212275
	DQ	FLAT:s370_1E7C
	DQ	FLAT:s390_1E7C
	DQ	FLAT:z900_1E7C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212276
	DQ	FLAT:s370_1E7D
	DQ	FLAT:s390_1E7D
	DQ	FLAT:z900_1E7D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212277
	DQ	FLAT:s370_1E7E
	DQ	FLAT:s390_1E7E
	DQ	FLAT:z900_1E7E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212278
	DQ	FLAT:s370_1E7F
	DQ	FLAT:s390_1E7F
	DQ	FLAT:z900_1E7F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212279
	DQ	FLAT:s370_1E80
	DQ	FLAT:s390_1E80
	DQ	FLAT:z900_1E80
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212280
	DQ	FLAT:s370_1E81
	DQ	FLAT:s390_1E81
	DQ	FLAT:z900_1E81
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212281
	DQ	FLAT:s370_1E82
	DQ	FLAT:s390_1E82
	DQ	FLAT:z900_1E82
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212282
	DQ	FLAT:s370_1E83
	DQ	FLAT:s390_1E83
	DQ	FLAT:z900_1E83
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212283
	DQ	FLAT:s370_1E84
	DQ	FLAT:s390_1E84
	DQ	FLAT:z900_1E84
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212284
	DQ	FLAT:s370_1E85
	DQ	FLAT:s390_1E85
	DQ	FLAT:z900_1E85
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212285
	DQ	FLAT:s370_1E86
	DQ	FLAT:s390_1E86
	DQ	FLAT:z900_1E86
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212286
	DQ	FLAT:s370_1E87
	DQ	FLAT:s390_1E87
	DQ	FLAT:z900_1E87
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212287
	DQ	FLAT:s370_1E88
	DQ	FLAT:s390_1E88
	DQ	FLAT:z900_1E88
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212288
	DQ	FLAT:s370_1E89
	DQ	FLAT:s390_1E89
	DQ	FLAT:z900_1E89
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212289
	DQ	FLAT:s370_1E8A
	DQ	FLAT:s390_1E8A
	DQ	FLAT:z900_1E8A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212290
	DQ	FLAT:s370_1E8B
	DQ	FLAT:s390_1E8B
	DQ	FLAT:z900_1E8B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212291
	DQ	FLAT:s370_1E8C
	DQ	FLAT:s390_1E8C
	DQ	FLAT:z900_1E8C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212292
	DQ	FLAT:s370_1E8D
	DQ	FLAT:s390_1E8D
	DQ	FLAT:z900_1E8D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212293
	DQ	FLAT:s370_1E8E
	DQ	FLAT:s390_1E8E
	DQ	FLAT:z900_1E8E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212294
	DQ	FLAT:s370_1E8F
	DQ	FLAT:s390_1E8F
	DQ	FLAT:z900_1E8F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212295
	DQ	FLAT:s370_1E90
	DQ	FLAT:s390_1E90
	DQ	FLAT:z900_1E90
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212296
	DQ	FLAT:s370_1E91
	DQ	FLAT:s390_1E91
	DQ	FLAT:z900_1E91
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212297
	DQ	FLAT:s370_1E92
	DQ	FLAT:s390_1E92
	DQ	FLAT:z900_1E92
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212298
	DQ	FLAT:s370_1E93
	DQ	FLAT:s390_1E93
	DQ	FLAT:z900_1E93
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212299
	DQ	FLAT:s370_1E94
	DQ	FLAT:s390_1E94
	DQ	FLAT:z900_1E94
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212300
	DQ	FLAT:s370_1E95
	DQ	FLAT:s390_1E95
	DQ	FLAT:z900_1E95
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212301
	DQ	FLAT:s370_1E96
	DQ	FLAT:s390_1E96
	DQ	FLAT:z900_1E96
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212302
	DQ	FLAT:s370_1E97
	DQ	FLAT:s390_1E97
	DQ	FLAT:z900_1E97
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212303
	DQ	FLAT:s370_1E98
	DQ	FLAT:s390_1E98
	DQ	FLAT:z900_1E98
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212304
	DQ	FLAT:s370_1E99
	DQ	FLAT:s390_1E99
	DQ	FLAT:z900_1E99
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212305
	DQ	FLAT:s370_1E9A
	DQ	FLAT:s390_1E9A
	DQ	FLAT:z900_1E9A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212306
	DQ	FLAT:s370_1E9B
	DQ	FLAT:s390_1E9B
	DQ	FLAT:z900_1E9B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212307
	DQ	FLAT:s370_1E9C
	DQ	FLAT:s390_1E9C
	DQ	FLAT:z900_1E9C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212308
	DQ	FLAT:s370_1E9D
	DQ	FLAT:s390_1E9D
	DQ	FLAT:z900_1E9D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212309
	DQ	FLAT:s370_1E9E
	DQ	FLAT:s390_1E9E
	DQ	FLAT:z900_1E9E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212310
	DQ	FLAT:s370_1E9F
	DQ	FLAT:s390_1E9F
	DQ	FLAT:z900_1E9F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212311
	DQ	FLAT:s370_1EA0
	DQ	FLAT:s390_1EA0
	DQ	FLAT:z900_1EA0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212312
	DQ	FLAT:s370_1EA1
	DQ	FLAT:s390_1EA1
	DQ	FLAT:z900_1EA1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212313
	DQ	FLAT:s370_1EA2
	DQ	FLAT:s390_1EA2
	DQ	FLAT:z900_1EA2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212314
	DQ	FLAT:s370_1EA3
	DQ	FLAT:s390_1EA3
	DQ	FLAT:z900_1EA3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212315
	DQ	FLAT:s370_1EA4
	DQ	FLAT:s390_1EA4
	DQ	FLAT:z900_1EA4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212316
	DQ	FLAT:s370_1EA5
	DQ	FLAT:s390_1EA5
	DQ	FLAT:z900_1EA5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212317
	DQ	FLAT:s370_1EA6
	DQ	FLAT:s390_1EA6
	DQ	FLAT:z900_1EA6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212318
	DQ	FLAT:s370_1EA7
	DQ	FLAT:s390_1EA7
	DQ	FLAT:z900_1EA7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212319
	DQ	FLAT:s370_1EA8
	DQ	FLAT:s390_1EA8
	DQ	FLAT:z900_1EA8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212320
	DQ	FLAT:s370_1EA9
	DQ	FLAT:s390_1EA9
	DQ	FLAT:z900_1EA9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212321
	DQ	FLAT:s370_1EAA
	DQ	FLAT:s390_1EAA
	DQ	FLAT:z900_1EAA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212322
	DQ	FLAT:s370_1EAB
	DQ	FLAT:s390_1EAB
	DQ	FLAT:z900_1EAB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212323
	DQ	FLAT:s370_1EAC
	DQ	FLAT:s390_1EAC
	DQ	FLAT:z900_1EAC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212324
	DQ	FLAT:s370_1EAD
	DQ	FLAT:s390_1EAD
	DQ	FLAT:z900_1EAD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212325
	DQ	FLAT:s370_1EAE
	DQ	FLAT:s390_1EAE
	DQ	FLAT:z900_1EAE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212326
	DQ	FLAT:s370_1EAF
	DQ	FLAT:s390_1EAF
	DQ	FLAT:z900_1EAF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212327
	DQ	FLAT:s370_1EB0
	DQ	FLAT:s390_1EB0
	DQ	FLAT:z900_1EB0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212328
	DQ	FLAT:s370_1EB1
	DQ	FLAT:s390_1EB1
	DQ	FLAT:z900_1EB1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212329
	DQ	FLAT:s370_1EB2
	DQ	FLAT:s390_1EB2
	DQ	FLAT:z900_1EB2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212330
	DQ	FLAT:s370_1EB3
	DQ	FLAT:s390_1EB3
	DQ	FLAT:z900_1EB3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212331
	DQ	FLAT:s370_1EB4
	DQ	FLAT:s390_1EB4
	DQ	FLAT:z900_1EB4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212332
	DQ	FLAT:s370_1EB5
	DQ	FLAT:s390_1EB5
	DQ	FLAT:z900_1EB5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212333
	DQ	FLAT:s370_1EB6
	DQ	FLAT:s390_1EB6
	DQ	FLAT:z900_1EB6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212334
	DQ	FLAT:s370_1EB7
	DQ	FLAT:s390_1EB7
	DQ	FLAT:z900_1EB7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212335
	DQ	FLAT:s370_1EB8
	DQ	FLAT:s390_1EB8
	DQ	FLAT:z900_1EB8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212336
	DQ	FLAT:s370_1EB9
	DQ	FLAT:s390_1EB9
	DQ	FLAT:z900_1EB9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212337
	DQ	FLAT:s370_1EBA
	DQ	FLAT:s390_1EBA
	DQ	FLAT:z900_1EBA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212338
	DQ	FLAT:s370_1EBB
	DQ	FLAT:s390_1EBB
	DQ	FLAT:z900_1EBB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212339
	DQ	FLAT:s370_1EBC
	DQ	FLAT:s390_1EBC
	DQ	FLAT:z900_1EBC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212340
	DQ	FLAT:s370_1EBD
	DQ	FLAT:s390_1EBD
	DQ	FLAT:z900_1EBD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212341
	DQ	FLAT:s370_1EBE
	DQ	FLAT:s390_1EBE
	DQ	FLAT:z900_1EBE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212342
	DQ	FLAT:s370_1EBF
	DQ	FLAT:s390_1EBF
	DQ	FLAT:z900_1EBF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212343
	DQ	FLAT:s370_1EC0
	DQ	FLAT:s390_1EC0
	DQ	FLAT:z900_1EC0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212344
	DQ	FLAT:s370_1EC1
	DQ	FLAT:s390_1EC1
	DQ	FLAT:z900_1EC1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212345
	DQ	FLAT:s370_1EC2
	DQ	FLAT:s390_1EC2
	DQ	FLAT:z900_1EC2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212346
	DQ	FLAT:s370_1EC3
	DQ	FLAT:s390_1EC3
	DQ	FLAT:z900_1EC3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212347
	DQ	FLAT:s370_1EC4
	DQ	FLAT:s390_1EC4
	DQ	FLAT:z900_1EC4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212348
	DQ	FLAT:s370_1EC5
	DQ	FLAT:s390_1EC5
	DQ	FLAT:z900_1EC5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212349
	DQ	FLAT:s370_1EC6
	DQ	FLAT:s390_1EC6
	DQ	FLAT:z900_1EC6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212350
	DQ	FLAT:s370_1EC7
	DQ	FLAT:s390_1EC7
	DQ	FLAT:z900_1EC7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212351
	DQ	FLAT:s370_1EC8
	DQ	FLAT:s390_1EC8
	DQ	FLAT:z900_1EC8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212352
	DQ	FLAT:s370_1EC9
	DQ	FLAT:s390_1EC9
	DQ	FLAT:z900_1EC9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212353
	DQ	FLAT:s370_1ECA
	DQ	FLAT:s390_1ECA
	DQ	FLAT:z900_1ECA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212354
	DQ	FLAT:s370_1ECB
	DQ	FLAT:s390_1ECB
	DQ	FLAT:z900_1ECB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212355
	DQ	FLAT:s370_1ECC
	DQ	FLAT:s390_1ECC
	DQ	FLAT:z900_1ECC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212356
	DQ	FLAT:s370_1ECD
	DQ	FLAT:s390_1ECD
	DQ	FLAT:z900_1ECD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212357
	DQ	FLAT:s370_1ECE
	DQ	FLAT:s390_1ECE
	DQ	FLAT:z900_1ECE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212358
	DQ	FLAT:s370_1ECF
	DQ	FLAT:s390_1ECF
	DQ	FLAT:z900_1ECF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212359
	DQ	FLAT:s370_1ED0
	DQ	FLAT:s390_1ED0
	DQ	FLAT:z900_1ED0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212360
	DQ	FLAT:s370_1ED1
	DQ	FLAT:s390_1ED1
	DQ	FLAT:z900_1ED1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212361
	DQ	FLAT:s370_1ED2
	DQ	FLAT:s390_1ED2
	DQ	FLAT:z900_1ED2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212362
	DQ	FLAT:s370_1ED3
	DQ	FLAT:s390_1ED3
	DQ	FLAT:z900_1ED3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212363
	DQ	FLAT:s370_1ED4
	DQ	FLAT:s390_1ED4
	DQ	FLAT:z900_1ED4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212364
	DQ	FLAT:s370_1ED5
	DQ	FLAT:s390_1ED5
	DQ	FLAT:z900_1ED5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212365
	DQ	FLAT:s370_1ED6
	DQ	FLAT:s390_1ED6
	DQ	FLAT:z900_1ED6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212366
	DQ	FLAT:s370_1ED7
	DQ	FLAT:s390_1ED7
	DQ	FLAT:z900_1ED7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212367
	DQ	FLAT:s370_1ED8
	DQ	FLAT:s390_1ED8
	DQ	FLAT:z900_1ED8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212368
	DQ	FLAT:s370_1ED9
	DQ	FLAT:s390_1ED9
	DQ	FLAT:z900_1ED9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212369
	DQ	FLAT:s370_1EDA
	DQ	FLAT:s390_1EDA
	DQ	FLAT:z900_1EDA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212370
	DQ	FLAT:s370_1EDB
	DQ	FLAT:s390_1EDB
	DQ	FLAT:z900_1EDB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212371
	DQ	FLAT:s370_1EDC
	DQ	FLAT:s390_1EDC
	DQ	FLAT:z900_1EDC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212372
	DQ	FLAT:s370_1EDD
	DQ	FLAT:s390_1EDD
	DQ	FLAT:z900_1EDD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212373
	DQ	FLAT:s370_1EDE
	DQ	FLAT:s390_1EDE
	DQ	FLAT:z900_1EDE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212374
	DQ	FLAT:s370_1EDF
	DQ	FLAT:s390_1EDF
	DQ	FLAT:z900_1EDF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212375
	DQ	FLAT:s370_1EE0
	DQ	FLAT:s390_1EE0
	DQ	FLAT:z900_1EE0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212376
	DQ	FLAT:s370_1EE1
	DQ	FLAT:s390_1EE1
	DQ	FLAT:z900_1EE1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212377
	DQ	FLAT:s370_1EE2
	DQ	FLAT:s390_1EE2
	DQ	FLAT:z900_1EE2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212378
	DQ	FLAT:s370_1EE3
	DQ	FLAT:s390_1EE3
	DQ	FLAT:z900_1EE3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212379
	DQ	FLAT:s370_1EE4
	DQ	FLAT:s390_1EE4
	DQ	FLAT:z900_1EE4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212380
	DQ	FLAT:s370_1EE5
	DQ	FLAT:s390_1EE5
	DQ	FLAT:z900_1EE5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212381
	DQ	FLAT:s370_1EE6
	DQ	FLAT:s390_1EE6
	DQ	FLAT:z900_1EE6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212382
	DQ	FLAT:s370_1EE7
	DQ	FLAT:s390_1EE7
	DQ	FLAT:z900_1EE7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212383
	DQ	FLAT:s370_1EE8
	DQ	FLAT:s390_1EE8
	DQ	FLAT:z900_1EE8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212384
	DQ	FLAT:s370_1EE9
	DQ	FLAT:s390_1EE9
	DQ	FLAT:z900_1EE9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212385
	DQ	FLAT:s370_1EEA
	DQ	FLAT:s390_1EEA
	DQ	FLAT:z900_1EEA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212386
	DQ	FLAT:s370_1EEB
	DQ	FLAT:s390_1EEB
	DQ	FLAT:z900_1EEB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212387
	DQ	FLAT:s370_1EEC
	DQ	FLAT:s390_1EEC
	DQ	FLAT:z900_1EEC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212388
	DQ	FLAT:s370_1EED
	DQ	FLAT:s390_1EED
	DQ	FLAT:z900_1EED
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212389
	DQ	FLAT:s370_1EEE
	DQ	FLAT:s390_1EEE
	DQ	FLAT:z900_1EEE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212390
	DQ	FLAT:s370_1EEF
	DQ	FLAT:s390_1EEF
	DQ	FLAT:z900_1EEF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212391
	DQ	FLAT:s370_1EF0
	DQ	FLAT:s390_1EF0
	DQ	FLAT:z900_1EF0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212392
	DQ	FLAT:s370_1EF1
	DQ	FLAT:s390_1EF1
	DQ	FLAT:z900_1EF1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212393
	DQ	FLAT:s370_1EF2
	DQ	FLAT:s390_1EF2
	DQ	FLAT:z900_1EF2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212394
	DQ	FLAT:s370_1EF3
	DQ	FLAT:s390_1EF3
	DQ	FLAT:z900_1EF3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212395
	DQ	FLAT:s370_1EF4
	DQ	FLAT:s390_1EF4
	DQ	FLAT:z900_1EF4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212396
	DQ	FLAT:s370_1EF5
	DQ	FLAT:s390_1EF5
	DQ	FLAT:z900_1EF5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212397
	DQ	FLAT:s370_1EF6
	DQ	FLAT:s390_1EF6
	DQ	FLAT:z900_1EF6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212398
	DQ	FLAT:s370_1EF7
	DQ	FLAT:s390_1EF7
	DQ	FLAT:z900_1EF7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212399
	DQ	FLAT:s370_1EF8
	DQ	FLAT:s390_1EF8
	DQ	FLAT:z900_1EF8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212400
	DQ	FLAT:s370_1EF9
	DQ	FLAT:s390_1EF9
	DQ	FLAT:z900_1EF9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212401
	DQ	FLAT:s370_1EFA
	DQ	FLAT:s390_1EFA
	DQ	FLAT:z900_1EFA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212402
	DQ	FLAT:s370_1EFB
	DQ	FLAT:s390_1EFB
	DQ	FLAT:z900_1EFB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212403
	DQ	FLAT:s370_1EFC
	DQ	FLAT:s390_1EFC
	DQ	FLAT:z900_1EFC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212404
	DQ	FLAT:s370_1EFD
	DQ	FLAT:s390_1EFD
	DQ	FLAT:z900_1EFD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212405
	DQ	FLAT:s370_1EFE
	DQ	FLAT:s390_1EFE
	DQ	FLAT:z900_1EFE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212406
	DQ	FLAT:s370_1EFF
	DQ	FLAT:s390_1EFF
	DQ	FLAT:z900_1EFF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212407
gen_opcode_1F__ DQ FLAT:s370_1F00
	DQ	FLAT:s390_1F00
	DQ	FLAT:z900_1F00
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212920
	DQ	FLAT:s370_1F01
	DQ	FLAT:s390_1F01
	DQ	FLAT:z900_1F01
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212921
	DQ	FLAT:s370_1F02
	DQ	FLAT:s390_1F02
	DQ	FLAT:z900_1F02
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212922
	DQ	FLAT:s370_1F03
	DQ	FLAT:s390_1F03
	DQ	FLAT:z900_1F03
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212923
	DQ	FLAT:s370_1F04
	DQ	FLAT:s390_1F04
	DQ	FLAT:z900_1F04
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212924
	DQ	FLAT:s370_1F05
	DQ	FLAT:s390_1F05
	DQ	FLAT:z900_1F05
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212925
	DQ	FLAT:s370_1F06
	DQ	FLAT:s390_1F06
	DQ	FLAT:z900_1F06
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212926
	DQ	FLAT:s370_1F07
	DQ	FLAT:s390_1F07
	DQ	FLAT:z900_1F07
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212927
	DQ	FLAT:s370_1F08
	DQ	FLAT:s390_1F08
	DQ	FLAT:z900_1F08
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212928
	DQ	FLAT:s370_1F09
	DQ	FLAT:s390_1F09
	DQ	FLAT:z900_1F09
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212929
	DQ	FLAT:s370_1F0A
	DQ	FLAT:s390_1F0A
	DQ	FLAT:z900_1F0A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212930
	DQ	FLAT:s370_1F0B
	DQ	FLAT:s390_1F0B
	DQ	FLAT:z900_1F0B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212931
	DQ	FLAT:s370_1F0C
	DQ	FLAT:s390_1F0C
	DQ	FLAT:z900_1F0C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212932
	DQ	FLAT:s370_1F0D
	DQ	FLAT:s390_1F0D
	DQ	FLAT:z900_1F0D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212933
	DQ	FLAT:s370_1F0E
	DQ	FLAT:s390_1F0E
	DQ	FLAT:z900_1F0E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212934
	DQ	FLAT:s370_1F0F
	DQ	FLAT:s390_1F0F
	DQ	FLAT:z900_1F0F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212935
	DQ	FLAT:s370_1F10
	DQ	FLAT:s390_1F10
	DQ	FLAT:z900_1F10
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212936
	DQ	FLAT:s370_1F11
	DQ	FLAT:s390_1F11
	DQ	FLAT:z900_1F11
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212937
	DQ	FLAT:s370_1F12
	DQ	FLAT:s390_1F12
	DQ	FLAT:z900_1F12
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212938
	DQ	FLAT:s370_1F13
	DQ	FLAT:s390_1F13
	DQ	FLAT:z900_1F13
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212939
	DQ	FLAT:s370_1F14
	DQ	FLAT:s390_1F14
	DQ	FLAT:z900_1F14
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212940
	DQ	FLAT:s370_1F15
	DQ	FLAT:s390_1F15
	DQ	FLAT:z900_1F15
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212941
	DQ	FLAT:s370_1F16
	DQ	FLAT:s390_1F16
	DQ	FLAT:z900_1F16
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212942
	DQ	FLAT:s370_1F17
	DQ	FLAT:s390_1F17
	DQ	FLAT:z900_1F17
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212943
	DQ	FLAT:s370_1F18
	DQ	FLAT:s390_1F18
	DQ	FLAT:z900_1F18
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212944
	DQ	FLAT:s370_1F19
	DQ	FLAT:s390_1F19
	DQ	FLAT:z900_1F19
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212945
	DQ	FLAT:s370_1F1A
	DQ	FLAT:s390_1F1A
	DQ	FLAT:z900_1F1A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212946
	DQ	FLAT:s370_1F1B
	DQ	FLAT:s390_1F1B
	DQ	FLAT:z900_1F1B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212947
	DQ	FLAT:s370_1F1C
	DQ	FLAT:s390_1F1C
	DQ	FLAT:z900_1F1C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212948
	DQ	FLAT:s370_1F1D
	DQ	FLAT:s390_1F1D
	DQ	FLAT:z900_1F1D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212949
	DQ	FLAT:s370_1F1E
	DQ	FLAT:s390_1F1E
	DQ	FLAT:z900_1F1E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212950
	DQ	FLAT:s370_1F1F
	DQ	FLAT:s390_1F1F
	DQ	FLAT:z900_1F1F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212951
	DQ	FLAT:s370_1F20
	DQ	FLAT:s390_1F20
	DQ	FLAT:z900_1F20
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212952
	DQ	FLAT:s370_1F21
	DQ	FLAT:s390_1F21
	DQ	FLAT:z900_1F21
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212953
	DQ	FLAT:s370_1F22
	DQ	FLAT:s390_1F22
	DQ	FLAT:z900_1F22
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212954
	DQ	FLAT:s370_1F23
	DQ	FLAT:s390_1F23
	DQ	FLAT:z900_1F23
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212955
	DQ	FLAT:s370_1F24
	DQ	FLAT:s390_1F24
	DQ	FLAT:z900_1F24
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212956
	DQ	FLAT:s370_1F25
	DQ	FLAT:s390_1F25
	DQ	FLAT:z900_1F25
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212957
	DQ	FLAT:s370_1F26
	DQ	FLAT:s390_1F26
	DQ	FLAT:z900_1F26
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212958
	DQ	FLAT:s370_1F27
	DQ	FLAT:s390_1F27
	DQ	FLAT:z900_1F27
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212959
	DQ	FLAT:s370_1F28
	DQ	FLAT:s390_1F28
	DQ	FLAT:z900_1F28
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212960
	DQ	FLAT:s370_1F29
	DQ	FLAT:s390_1F29
	DQ	FLAT:z900_1F29
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212961
	DQ	FLAT:s370_1F2A
	DQ	FLAT:s390_1F2A
	DQ	FLAT:z900_1F2A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212962
	DQ	FLAT:s370_1F2B
	DQ	FLAT:s390_1F2B
	DQ	FLAT:z900_1F2B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212963
	DQ	FLAT:s370_1F2C
	DQ	FLAT:s390_1F2C
	DQ	FLAT:z900_1F2C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212964
	DQ	FLAT:s370_1F2D
	DQ	FLAT:s390_1F2D
	DQ	FLAT:z900_1F2D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212965
	DQ	FLAT:s370_1F2E
	DQ	FLAT:s390_1F2E
	DQ	FLAT:z900_1F2E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212966
	DQ	FLAT:s370_1F2F
	DQ	FLAT:s390_1F2F
	DQ	FLAT:z900_1F2F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212967
	DQ	FLAT:s370_1F30
	DQ	FLAT:s390_1F30
	DQ	FLAT:z900_1F30
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212968
	DQ	FLAT:s370_1F31
	DQ	FLAT:s390_1F31
	DQ	FLAT:z900_1F31
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212969
	DQ	FLAT:s370_1F32
	DQ	FLAT:s390_1F32
	DQ	FLAT:z900_1F32
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212970
	DQ	FLAT:s370_1F33
	DQ	FLAT:s390_1F33
	DQ	FLAT:z900_1F33
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212971
	DQ	FLAT:s370_1F34
	DQ	FLAT:s390_1F34
	DQ	FLAT:z900_1F34
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212972
	DQ	FLAT:s370_1F35
	DQ	FLAT:s390_1F35
	DQ	FLAT:z900_1F35
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212973
	DQ	FLAT:s370_1F36
	DQ	FLAT:s390_1F36
	DQ	FLAT:z900_1F36
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212974
	DQ	FLAT:s370_1F37
	DQ	FLAT:s390_1F37
	DQ	FLAT:z900_1F37
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212975
	DQ	FLAT:s370_1F38
	DQ	FLAT:s390_1F38
	DQ	FLAT:z900_1F38
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212976
	DQ	FLAT:s370_1F39
	DQ	FLAT:s390_1F39
	DQ	FLAT:z900_1F39
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212977
	DQ	FLAT:s370_1F3A
	DQ	FLAT:s390_1F3A
	DQ	FLAT:z900_1F3A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212978
	DQ	FLAT:s370_1F3B
	DQ	FLAT:s390_1F3B
	DQ	FLAT:z900_1F3B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212979
	DQ	FLAT:s370_1F3C
	DQ	FLAT:s390_1F3C
	DQ	FLAT:z900_1F3C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212980
	DQ	FLAT:s370_1F3D
	DQ	FLAT:s390_1F3D
	DQ	FLAT:z900_1F3D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212981
	DQ	FLAT:s370_1F3E
	DQ	FLAT:s390_1F3E
	DQ	FLAT:z900_1F3E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212982
	DQ	FLAT:s370_1F3F
	DQ	FLAT:s390_1F3F
	DQ	FLAT:z900_1F3F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212983
	DQ	FLAT:s370_1F40
	DQ	FLAT:s390_1F40
	DQ	FLAT:z900_1F40
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212984
	DQ	FLAT:s370_1F41
	DQ	FLAT:s390_1F41
	DQ	FLAT:z900_1F41
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212985
	DQ	FLAT:s370_1F42
	DQ	FLAT:s390_1F42
	DQ	FLAT:z900_1F42
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212986
	DQ	FLAT:s370_1F43
	DQ	FLAT:s390_1F43
	DQ	FLAT:z900_1F43
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212987
	DQ	FLAT:s370_1F44
	DQ	FLAT:s390_1F44
	DQ	FLAT:z900_1F44
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212988
	DQ	FLAT:s370_1F45
	DQ	FLAT:s390_1F45
	DQ	FLAT:z900_1F45
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212989
	DQ	FLAT:s370_1F46
	DQ	FLAT:s390_1F46
	DQ	FLAT:z900_1F46
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212990
	DQ	FLAT:s370_1F47
	DQ	FLAT:s390_1F47
	DQ	FLAT:z900_1F47
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212991
	DQ	FLAT:s370_1F48
	DQ	FLAT:s390_1F48
	DQ	FLAT:z900_1F48
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212992
	DQ	FLAT:s370_1F49
	DQ	FLAT:s390_1F49
	DQ	FLAT:z900_1F49
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212993
	DQ	FLAT:s370_1F4A
	DQ	FLAT:s390_1F4A
	DQ	FLAT:z900_1F4A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212994
	DQ	FLAT:s370_1F4B
	DQ	FLAT:s390_1F4B
	DQ	FLAT:z900_1F4B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212995
	DQ	FLAT:s370_1F4C
	DQ	FLAT:s390_1F4C
	DQ	FLAT:z900_1F4C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212996
	DQ	FLAT:s370_1F4D
	DQ	FLAT:s390_1F4D
	DQ	FLAT:z900_1F4D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212997
	DQ	FLAT:s370_1F4E
	DQ	FLAT:s390_1F4E
	DQ	FLAT:z900_1F4E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212998
	DQ	FLAT:s370_1F4F
	DQ	FLAT:s390_1F4F
	DQ	FLAT:z900_1F4F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG212999
	DQ	FLAT:s370_1F50
	DQ	FLAT:s390_1F50
	DQ	FLAT:z900_1F50
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213000
	DQ	FLAT:s370_1F51
	DQ	FLAT:s390_1F51
	DQ	FLAT:z900_1F51
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213001
	DQ	FLAT:s370_1F52
	DQ	FLAT:s390_1F52
	DQ	FLAT:z900_1F52
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213002
	DQ	FLAT:s370_1F53
	DQ	FLAT:s390_1F53
	DQ	FLAT:z900_1F53
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213003
	DQ	FLAT:s370_1F54
	DQ	FLAT:s390_1F54
	DQ	FLAT:z900_1F54
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213004
	DQ	FLAT:s370_1F55
	DQ	FLAT:s390_1F55
	DQ	FLAT:z900_1F55
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213005
	DQ	FLAT:s370_1F56
	DQ	FLAT:s390_1F56
	DQ	FLAT:z900_1F56
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213006
	DQ	FLAT:s370_1F57
	DQ	FLAT:s390_1F57
	DQ	FLAT:z900_1F57
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213007
	DQ	FLAT:s370_1F58
	DQ	FLAT:s390_1F58
	DQ	FLAT:z900_1F58
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213008
	DQ	FLAT:s370_1F59
	DQ	FLAT:s390_1F59
	DQ	FLAT:z900_1F59
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213009
	DQ	FLAT:s370_1F5A
	DQ	FLAT:s390_1F5A
	DQ	FLAT:z900_1F5A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213010
	DQ	FLAT:s370_1F5B
	DQ	FLAT:s390_1F5B
	DQ	FLAT:z900_1F5B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213011
	DQ	FLAT:s370_1F5C
	DQ	FLAT:s390_1F5C
	DQ	FLAT:z900_1F5C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213012
	DQ	FLAT:s370_1F5D
	DQ	FLAT:s390_1F5D
	DQ	FLAT:z900_1F5D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213013
	DQ	FLAT:s370_1F5E
	DQ	FLAT:s390_1F5E
	DQ	FLAT:z900_1F5E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213014
	DQ	FLAT:s370_1F5F
	DQ	FLAT:s390_1F5F
	DQ	FLAT:z900_1F5F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213015
	DQ	FLAT:s370_1F60
	DQ	FLAT:s390_1F60
	DQ	FLAT:z900_1F60
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213016
	DQ	FLAT:s370_1F61
	DQ	FLAT:s390_1F61
	DQ	FLAT:z900_1F61
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213017
	DQ	FLAT:s370_1F62
	DQ	FLAT:s390_1F62
	DQ	FLAT:z900_1F62
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213018
	DQ	FLAT:s370_1F63
	DQ	FLAT:s390_1F63
	DQ	FLAT:z900_1F63
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213019
	DQ	FLAT:s370_1F64
	DQ	FLAT:s390_1F64
	DQ	FLAT:z900_1F64
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213020
	DQ	FLAT:s370_1F65
	DQ	FLAT:s390_1F65
	DQ	FLAT:z900_1F65
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213021
	DQ	FLAT:s370_1F66
	DQ	FLAT:s390_1F66
	DQ	FLAT:z900_1F66
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213022
	DQ	FLAT:s370_1F67
	DQ	FLAT:s390_1F67
	DQ	FLAT:z900_1F67
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213023
	DQ	FLAT:s370_1F68
	DQ	FLAT:s390_1F68
	DQ	FLAT:z900_1F68
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213024
	DQ	FLAT:s370_1F69
	DQ	FLAT:s390_1F69
	DQ	FLAT:z900_1F69
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213025
	DQ	FLAT:s370_1F6A
	DQ	FLAT:s390_1F6A
	DQ	FLAT:z900_1F6A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213026
	DQ	FLAT:s370_1F6B
	DQ	FLAT:s390_1F6B
	DQ	FLAT:z900_1F6B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213027
	DQ	FLAT:s370_1F6C
	DQ	FLAT:s390_1F6C
	DQ	FLAT:z900_1F6C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213028
	DQ	FLAT:s370_1F6D
	DQ	FLAT:s390_1F6D
	DQ	FLAT:z900_1F6D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213029
	DQ	FLAT:s370_1F6E
	DQ	FLAT:s390_1F6E
	DQ	FLAT:z900_1F6E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213030
	DQ	FLAT:s370_1F6F
	DQ	FLAT:s390_1F6F
	DQ	FLAT:z900_1F6F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213031
	DQ	FLAT:s370_1F70
	DQ	FLAT:s390_1F70
	DQ	FLAT:z900_1F70
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213032
	DQ	FLAT:s370_1F71
	DQ	FLAT:s390_1F71
	DQ	FLAT:z900_1F71
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213033
	DQ	FLAT:s370_1F72
	DQ	FLAT:s390_1F72
	DQ	FLAT:z900_1F72
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213034
	DQ	FLAT:s370_1F73
	DQ	FLAT:s390_1F73
	DQ	FLAT:z900_1F73
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213035
	DQ	FLAT:s370_1F74
	DQ	FLAT:s390_1F74
	DQ	FLAT:z900_1F74
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213036
	DQ	FLAT:s370_1F75
	DQ	FLAT:s390_1F75
	DQ	FLAT:z900_1F75
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213037
	DQ	FLAT:s370_1F76
	DQ	FLAT:s390_1F76
	DQ	FLAT:z900_1F76
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213038
	DQ	FLAT:s370_1F77
	DQ	FLAT:s390_1F77
	DQ	FLAT:z900_1F77
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213039
	DQ	FLAT:s370_1F78
	DQ	FLAT:s390_1F78
	DQ	FLAT:z900_1F78
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213040
	DQ	FLAT:s370_1F79
	DQ	FLAT:s390_1F79
	DQ	FLAT:z900_1F79
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213041
	DQ	FLAT:s370_1F7A
	DQ	FLAT:s390_1F7A
	DQ	FLAT:z900_1F7A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213042
	DQ	FLAT:s370_1F7B
	DQ	FLAT:s390_1F7B
	DQ	FLAT:z900_1F7B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213043
	DQ	FLAT:s370_1F7C
	DQ	FLAT:s390_1F7C
	DQ	FLAT:z900_1F7C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213044
	DQ	FLAT:s370_1F7D
	DQ	FLAT:s390_1F7D
	DQ	FLAT:z900_1F7D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213045
	DQ	FLAT:s370_1F7E
	DQ	FLAT:s390_1F7E
	DQ	FLAT:z900_1F7E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213046
	DQ	FLAT:s370_1F7F
	DQ	FLAT:s390_1F7F
	DQ	FLAT:z900_1F7F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213047
	DQ	FLAT:s370_1F80
	DQ	FLAT:s390_1F80
	DQ	FLAT:z900_1F80
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213048
	DQ	FLAT:s370_1F81
	DQ	FLAT:s390_1F81
	DQ	FLAT:z900_1F81
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213049
	DQ	FLAT:s370_1F82
	DQ	FLAT:s390_1F82
	DQ	FLAT:z900_1F82
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213050
	DQ	FLAT:s370_1F83
	DQ	FLAT:s390_1F83
	DQ	FLAT:z900_1F83
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213051
	DQ	FLAT:s370_1F84
	DQ	FLAT:s390_1F84
	DQ	FLAT:z900_1F84
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213052
	DQ	FLAT:s370_1F85
	DQ	FLAT:s390_1F85
	DQ	FLAT:z900_1F85
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213053
	DQ	FLAT:s370_1F86
	DQ	FLAT:s390_1F86
	DQ	FLAT:z900_1F86
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213054
	DQ	FLAT:s370_1F87
	DQ	FLAT:s390_1F87
	DQ	FLAT:z900_1F87
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213055
	DQ	FLAT:s370_1F88
	DQ	FLAT:s390_1F88
	DQ	FLAT:z900_1F88
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213056
	DQ	FLAT:s370_1F89
	DQ	FLAT:s390_1F89
	DQ	FLAT:z900_1F89
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213057
	DQ	FLAT:s370_1F8A
	DQ	FLAT:s390_1F8A
	DQ	FLAT:z900_1F8A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213058
	DQ	FLAT:s370_1F8B
	DQ	FLAT:s390_1F8B
	DQ	FLAT:z900_1F8B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213059
	DQ	FLAT:s370_1F8C
	DQ	FLAT:s390_1F8C
	DQ	FLAT:z900_1F8C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213060
	DQ	FLAT:s370_1F8D
	DQ	FLAT:s390_1F8D
	DQ	FLAT:z900_1F8D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213061
	DQ	FLAT:s370_1F8E
	DQ	FLAT:s390_1F8E
	DQ	FLAT:z900_1F8E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213062
	DQ	FLAT:s370_1F8F
	DQ	FLAT:s390_1F8F
	DQ	FLAT:z900_1F8F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213063
	DQ	FLAT:s370_1F90
	DQ	FLAT:s390_1F90
	DQ	FLAT:z900_1F90
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213064
	DQ	FLAT:s370_1F91
	DQ	FLAT:s390_1F91
	DQ	FLAT:z900_1F91
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213065
	DQ	FLAT:s370_1F92
	DQ	FLAT:s390_1F92
	DQ	FLAT:z900_1F92
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213066
	DQ	FLAT:s370_1F93
	DQ	FLAT:s390_1F93
	DQ	FLAT:z900_1F93
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213067
	DQ	FLAT:s370_1F94
	DQ	FLAT:s390_1F94
	DQ	FLAT:z900_1F94
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213068
	DQ	FLAT:s370_1F95
	DQ	FLAT:s390_1F95
	DQ	FLAT:z900_1F95
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213069
	DQ	FLAT:s370_1F96
	DQ	FLAT:s390_1F96
	DQ	FLAT:z900_1F96
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213070
	DQ	FLAT:s370_1F97
	DQ	FLAT:s390_1F97
	DQ	FLAT:z900_1F97
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213071
	DQ	FLAT:s370_1F98
	DQ	FLAT:s390_1F98
	DQ	FLAT:z900_1F98
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213072
	DQ	FLAT:s370_1F99
	DQ	FLAT:s390_1F99
	DQ	FLAT:z900_1F99
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213073
	DQ	FLAT:s370_1F9A
	DQ	FLAT:s390_1F9A
	DQ	FLAT:z900_1F9A
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213074
	DQ	FLAT:s370_1F9B
	DQ	FLAT:s390_1F9B
	DQ	FLAT:z900_1F9B
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213075
	DQ	FLAT:s370_1F9C
	DQ	FLAT:s390_1F9C
	DQ	FLAT:z900_1F9C
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213076
	DQ	FLAT:s370_1F9D
	DQ	FLAT:s390_1F9D
	DQ	FLAT:z900_1F9D
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213077
	DQ	FLAT:s370_1F9E
	DQ	FLAT:s390_1F9E
	DQ	FLAT:z900_1F9E
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213078
	DQ	FLAT:s370_1F9F
	DQ	FLAT:s390_1F9F
	DQ	FLAT:z900_1F9F
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213079
	DQ	FLAT:s370_1FA0
	DQ	FLAT:s390_1FA0
	DQ	FLAT:z900_1FA0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213080
	DQ	FLAT:s370_1FA1
	DQ	FLAT:s390_1FA1
	DQ	FLAT:z900_1FA1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213081
	DQ	FLAT:s370_1FA2
	DQ	FLAT:s390_1FA2
	DQ	FLAT:z900_1FA2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213082
	DQ	FLAT:s370_1FA3
	DQ	FLAT:s390_1FA3
	DQ	FLAT:z900_1FA3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213083
	DQ	FLAT:s370_1FA4
	DQ	FLAT:s390_1FA4
	DQ	FLAT:z900_1FA4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213084
	DQ	FLAT:s370_1FA5
	DQ	FLAT:s390_1FA5
	DQ	FLAT:z900_1FA5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213085
	DQ	FLAT:s370_1FA6
	DQ	FLAT:s390_1FA6
	DQ	FLAT:z900_1FA6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213086
	DQ	FLAT:s370_1FA7
	DQ	FLAT:s390_1FA7
	DQ	FLAT:z900_1FA7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213087
	DQ	FLAT:s370_1FA8
	DQ	FLAT:s390_1FA8
	DQ	FLAT:z900_1FA8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213088
	DQ	FLAT:s370_1FA9
	DQ	FLAT:s390_1FA9
	DQ	FLAT:z900_1FA9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213089
	DQ	FLAT:s370_1FAA
	DQ	FLAT:s390_1FAA
	DQ	FLAT:z900_1FAA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213090
	DQ	FLAT:s370_1FAB
	DQ	FLAT:s390_1FAB
	DQ	FLAT:z900_1FAB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213091
	DQ	FLAT:s370_1FAC
	DQ	FLAT:s390_1FAC
	DQ	FLAT:z900_1FAC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213092
	DQ	FLAT:s370_1FAD
	DQ	FLAT:s390_1FAD
	DQ	FLAT:z900_1FAD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213093
	DQ	FLAT:s370_1FAE
	DQ	FLAT:s390_1FAE
	DQ	FLAT:z900_1FAE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213094
	DQ	FLAT:s370_1FAF
	DQ	FLAT:s390_1FAF
	DQ	FLAT:z900_1FAF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213095
	DQ	FLAT:s370_1FB0
	DQ	FLAT:s390_1FB0
	DQ	FLAT:z900_1FB0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213096
	DQ	FLAT:s370_1FB1
	DQ	FLAT:s390_1FB1
	DQ	FLAT:z900_1FB1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213097
	DQ	FLAT:s370_1FB2
	DQ	FLAT:s390_1FB2
	DQ	FLAT:z900_1FB2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213098
	DQ	FLAT:s370_1FB3
	DQ	FLAT:s390_1FB3
	DQ	FLAT:z900_1FB3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213099
	DQ	FLAT:s370_1FB4
	DQ	FLAT:s390_1FB4
	DQ	FLAT:z900_1FB4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213100
	DQ	FLAT:s370_1FB5
	DQ	FLAT:s390_1FB5
	DQ	FLAT:z900_1FB5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213101
	DQ	FLAT:s370_1FB6
	DQ	FLAT:s390_1FB6
	DQ	FLAT:z900_1FB6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213102
	DQ	FLAT:s370_1FB7
	DQ	FLAT:s390_1FB7
	DQ	FLAT:z900_1FB7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213103
	DQ	FLAT:s370_1FB8
	DQ	FLAT:s390_1FB8
	DQ	FLAT:z900_1FB8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213104
	DQ	FLAT:s370_1FB9
	DQ	FLAT:s390_1FB9
	DQ	FLAT:z900_1FB9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213105
	DQ	FLAT:s370_1FBA
	DQ	FLAT:s390_1FBA
	DQ	FLAT:z900_1FBA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213106
	DQ	FLAT:s370_1FBB
	DQ	FLAT:s390_1FBB
	DQ	FLAT:z900_1FBB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213107
	DQ	FLAT:s370_1FBC
	DQ	FLAT:s390_1FBC
	DQ	FLAT:z900_1FBC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213108
	DQ	FLAT:s370_1FBD
	DQ	FLAT:s390_1FBD
	DQ	FLAT:z900_1FBD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213109
	DQ	FLAT:s370_1FBE
	DQ	FLAT:s390_1FBE
	DQ	FLAT:z900_1FBE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213110
	DQ	FLAT:s370_1FBF
	DQ	FLAT:s390_1FBF
	DQ	FLAT:z900_1FBF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213111
	DQ	FLAT:s370_1FC0
	DQ	FLAT:s390_1FC0
	DQ	FLAT:z900_1FC0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213112
	DQ	FLAT:s370_1FC1
	DQ	FLAT:s390_1FC1
	DQ	FLAT:z900_1FC1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213113
	DQ	FLAT:s370_1FC2
	DQ	FLAT:s390_1FC2
	DQ	FLAT:z900_1FC2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213114
	DQ	FLAT:s370_1FC3
	DQ	FLAT:s390_1FC3
	DQ	FLAT:z900_1FC3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213115
	DQ	FLAT:s370_1FC4
	DQ	FLAT:s390_1FC4
	DQ	FLAT:z900_1FC4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213116
	DQ	FLAT:s370_1FC5
	DQ	FLAT:s390_1FC5
	DQ	FLAT:z900_1FC5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213117
	DQ	FLAT:s370_1FC6
	DQ	FLAT:s390_1FC6
	DQ	FLAT:z900_1FC6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213118
	DQ	FLAT:s370_1FC7
	DQ	FLAT:s390_1FC7
	DQ	FLAT:z900_1FC7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213119
	DQ	FLAT:s370_1FC8
	DQ	FLAT:s390_1FC8
	DQ	FLAT:z900_1FC8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213120
	DQ	FLAT:s370_1FC9
	DQ	FLAT:s390_1FC9
	DQ	FLAT:z900_1FC9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213121
	DQ	FLAT:s370_1FCA
	DQ	FLAT:s390_1FCA
	DQ	FLAT:z900_1FCA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213122
	DQ	FLAT:s370_1FCB
	DQ	FLAT:s390_1FCB
	DQ	FLAT:z900_1FCB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213123
	DQ	FLAT:s370_1FCC
	DQ	FLAT:s390_1FCC
	DQ	FLAT:z900_1FCC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213124
	DQ	FLAT:s370_1FCD
	DQ	FLAT:s390_1FCD
	DQ	FLAT:z900_1FCD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213125
	DQ	FLAT:s370_1FCE
	DQ	FLAT:s390_1FCE
	DQ	FLAT:z900_1FCE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213126
	DQ	FLAT:s370_1FCF
	DQ	FLAT:s390_1FCF
	DQ	FLAT:z900_1FCF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213127
	DQ	FLAT:s370_1FD0
	DQ	FLAT:s390_1FD0
	DQ	FLAT:z900_1FD0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213128
	DQ	FLAT:s370_1FD1
	DQ	FLAT:s390_1FD1
	DQ	FLAT:z900_1FD1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213129
	DQ	FLAT:s370_1FD2
	DQ	FLAT:s390_1FD2
	DQ	FLAT:z900_1FD2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213130
	DQ	FLAT:s370_1FD3
	DQ	FLAT:s390_1FD3
	DQ	FLAT:z900_1FD3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213131
	DQ	FLAT:s370_1FD4
	DQ	FLAT:s390_1FD4
	DQ	FLAT:z900_1FD4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213132
	DQ	FLAT:s370_1FD5
	DQ	FLAT:s390_1FD5
	DQ	FLAT:z900_1FD5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213133
	DQ	FLAT:s370_1FD6
	DQ	FLAT:s390_1FD6
	DQ	FLAT:z900_1FD6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213134
	DQ	FLAT:s370_1FD7
	DQ	FLAT:s390_1FD7
	DQ	FLAT:z900_1FD7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213135
	DQ	FLAT:s370_1FD8
	DQ	FLAT:s390_1FD8
	DQ	FLAT:z900_1FD8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213136
	DQ	FLAT:s370_1FD9
	DQ	FLAT:s390_1FD9
	DQ	FLAT:z900_1FD9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213137
	DQ	FLAT:s370_1FDA
	DQ	FLAT:s390_1FDA
	DQ	FLAT:z900_1FDA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213138
	DQ	FLAT:s370_1FDB
	DQ	FLAT:s390_1FDB
	DQ	FLAT:z900_1FDB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213139
	DQ	FLAT:s370_1FDC
	DQ	FLAT:s390_1FDC
	DQ	FLAT:z900_1FDC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213140
	DQ	FLAT:s370_1FDD
	DQ	FLAT:s390_1FDD
	DQ	FLAT:z900_1FDD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213141
	DQ	FLAT:s370_1FDE
	DQ	FLAT:s390_1FDE
	DQ	FLAT:z900_1FDE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213142
	DQ	FLAT:s370_1FDF
	DQ	FLAT:s390_1FDF
	DQ	FLAT:z900_1FDF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213143
	DQ	FLAT:s370_1FE0
	DQ	FLAT:s390_1FE0
	DQ	FLAT:z900_1FE0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213144
	DQ	FLAT:s370_1FE1
	DQ	FLAT:s390_1FE1
	DQ	FLAT:z900_1FE1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213145
	DQ	FLAT:s370_1FE2
	DQ	FLAT:s390_1FE2
	DQ	FLAT:z900_1FE2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213146
	DQ	FLAT:s370_1FE3
	DQ	FLAT:s390_1FE3
	DQ	FLAT:z900_1FE3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213147
	DQ	FLAT:s370_1FE4
	DQ	FLAT:s390_1FE4
	DQ	FLAT:z900_1FE4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213148
	DQ	FLAT:s370_1FE5
	DQ	FLAT:s390_1FE5
	DQ	FLAT:z900_1FE5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213149
	DQ	FLAT:s370_1FE6
	DQ	FLAT:s390_1FE6
	DQ	FLAT:z900_1FE6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213150
	DQ	FLAT:s370_1FE7
	DQ	FLAT:s390_1FE7
	DQ	FLAT:z900_1FE7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213151
	DQ	FLAT:s370_1FE8
	DQ	FLAT:s390_1FE8
	DQ	FLAT:z900_1FE8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213152
	DQ	FLAT:s370_1FE9
	DQ	FLAT:s390_1FE9
	DQ	FLAT:z900_1FE9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213153
	DQ	FLAT:s370_1FEA
	DQ	FLAT:s390_1FEA
	DQ	FLAT:z900_1FEA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213154
	DQ	FLAT:s370_1FEB
	DQ	FLAT:s390_1FEB
	DQ	FLAT:z900_1FEB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213155
	DQ	FLAT:s370_1FEC
	DQ	FLAT:s390_1FEC
	DQ	FLAT:z900_1FEC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213156
	DQ	FLAT:s370_1FED
	DQ	FLAT:s390_1FED
	DQ	FLAT:z900_1FED
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213157
	DQ	FLAT:s370_1FEE
	DQ	FLAT:s390_1FEE
	DQ	FLAT:z900_1FEE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213158
	DQ	FLAT:s370_1FEF
	DQ	FLAT:s390_1FEF
	DQ	FLAT:z900_1FEF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213159
	DQ	FLAT:s370_1FF0
	DQ	FLAT:s390_1FF0
	DQ	FLAT:z900_1FF0
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213160
	DQ	FLAT:s370_1FF1
	DQ	FLAT:s390_1FF1
	DQ	FLAT:z900_1FF1
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213161
	DQ	FLAT:s370_1FF2
	DQ	FLAT:s390_1FF2
	DQ	FLAT:z900_1FF2
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213162
	DQ	FLAT:s370_1FF3
	DQ	FLAT:s390_1FF3
	DQ	FLAT:z900_1FF3
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213163
	DQ	FLAT:s370_1FF4
	DQ	FLAT:s390_1FF4
	DQ	FLAT:z900_1FF4
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213164
	DQ	FLAT:s370_1FF5
	DQ	FLAT:s390_1FF5
	DQ	FLAT:z900_1FF5
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213165
	DQ	FLAT:s370_1FF6
	DQ	FLAT:s390_1FF6
	DQ	FLAT:z900_1FF6
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213166
	DQ	FLAT:s370_1FF7
	DQ	FLAT:s390_1FF7
	DQ	FLAT:z900_1FF7
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213167
	DQ	FLAT:s370_1FF8
	DQ	FLAT:s390_1FF8
	DQ	FLAT:z900_1FF8
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213168
	DQ	FLAT:s370_1FF9
	DQ	FLAT:s390_1FF9
	DQ	FLAT:z900_1FF9
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213169
	DQ	FLAT:s370_1FFA
	DQ	FLAT:s390_1FFA
	DQ	FLAT:z900_1FFA
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213170
	DQ	FLAT:s370_1FFB
	DQ	FLAT:s390_1FFB
	DQ	FLAT:z900_1FFB
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213171
	DQ	FLAT:s370_1FFC
	DQ	FLAT:s390_1FFC
	DQ	FLAT:z900_1FFC
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213172
	DQ	FLAT:s370_1FFD
	DQ	FLAT:s390_1FFD
	DQ	FLAT:z900_1FFD
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213173
	DQ	FLAT:s370_1FFE
	DQ	FLAT:s390_1FFE
	DQ	FLAT:z900_1FFE
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213174
	DQ	FLAT:s370_1FFF
	DQ	FLAT:s390_1FFF
	DQ	FLAT:z900_1FFF
	DQ	FLAT:iprint_ASMFMT_RR
	DQ	FLAT:$SG213175
gen_opcode_41_0 DQ FLAT:s370_4100
	DQ	FLAT:s390_4100
	DQ	FLAT:z900_4100
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213208
	DQ	FLAT:s370_4110
	DQ	FLAT:s390_4110
	DQ	FLAT:z900_4110
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213209
	DQ	FLAT:s370_4120
	DQ	FLAT:s390_4120
	DQ	FLAT:z900_4120
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213210
	DQ	FLAT:s370_4130
	DQ	FLAT:s390_4130
	DQ	FLAT:z900_4130
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213211
	DQ	FLAT:s370_4140
	DQ	FLAT:s390_4140
	DQ	FLAT:z900_4140
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213212
	DQ	FLAT:s370_4150
	DQ	FLAT:s390_4150
	DQ	FLAT:z900_4150
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213213
	DQ	FLAT:s370_4160
	DQ	FLAT:s390_4160
	DQ	FLAT:z900_4160
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213214
	DQ	FLAT:s370_4170
	DQ	FLAT:s390_4170
	DQ	FLAT:z900_4170
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213215
	DQ	FLAT:s370_4180
	DQ	FLAT:s390_4180
	DQ	FLAT:z900_4180
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213216
	DQ	FLAT:s370_4190
	DQ	FLAT:s390_4190
	DQ	FLAT:z900_4190
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213217
	DQ	FLAT:s370_41A0
	DQ	FLAT:s390_41A0
	DQ	FLAT:z900_41A0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213218
	DQ	FLAT:s370_41B0
	DQ	FLAT:s390_41B0
	DQ	FLAT:z900_41B0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213219
	DQ	FLAT:s370_41C0
	DQ	FLAT:s390_41C0
	DQ	FLAT:z900_41C0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213220
	DQ	FLAT:s370_41D0
	DQ	FLAT:s390_41D0
	DQ	FLAT:z900_41D0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213221
	DQ	FLAT:s370_41E0
	DQ	FLAT:s390_41E0
	DQ	FLAT:z900_41E0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213222
	DQ	FLAT:s370_41F0
	DQ	FLAT:s390_41F0
	DQ	FLAT:z900_41F0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213223
gen_opcode_47_0 DQ FLAT:s370_nop4
	DQ	FLAT:s390_nop4
	DQ	FLAT:z900_nop4
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213256
	DQ	FLAT:s370_4710
	DQ	FLAT:s390_4710
	DQ	FLAT:z900_4710
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213257
	DQ	FLAT:s370_4720
	DQ	FLAT:s390_4720
	DQ	FLAT:z900_4720
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213258
	DQ	FLAT:s370_4730
	DQ	FLAT:s390_4730
	DQ	FLAT:z900_4730
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213259
	DQ	FLAT:s370_4740
	DQ	FLAT:s390_4740
	DQ	FLAT:z900_4740
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213260
	DQ	FLAT:s370_4750
	DQ	FLAT:s390_4750
	DQ	FLAT:z900_4750
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213261
	DQ	FLAT:s370_47_0
	DQ	FLAT:s390_47_0
	DQ	FLAT:z900_47_0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213262
	DQ	FLAT:s370_4770
	DQ	FLAT:s390_4770
	DQ	FLAT:z900_4770
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213263
	DQ	FLAT:s370_4780
	DQ	FLAT:s390_4780
	DQ	FLAT:z900_4780
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213264
	DQ	FLAT:s370_47_0
	DQ	FLAT:s390_47_0
	DQ	FLAT:z900_47_0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213265
	DQ	FLAT:s370_47A0
	DQ	FLAT:s390_47A0
	DQ	FLAT:z900_47A0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213266
	DQ	FLAT:s370_47B0
	DQ	FLAT:s390_47B0
	DQ	FLAT:z900_47B0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213267
	DQ	FLAT:s370_47C0
	DQ	FLAT:s390_47C0
	DQ	FLAT:z900_47C0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213268
	DQ	FLAT:s370_47D0
	DQ	FLAT:s390_47D0
	DQ	FLAT:z900_47D0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213269
	DQ	FLAT:s370_47E0
	DQ	FLAT:s390_47E0
	DQ	FLAT:z900_47E0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213270
	DQ	FLAT:s370_47F0
	DQ	FLAT:s390_47F0
	DQ	FLAT:z900_47F0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213271
gen_opcode_50_0 DQ FLAT:s370_5000
	DQ	FLAT:s390_5000
	DQ	FLAT:z900_5000
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213304
	DQ	FLAT:s370_5010
	DQ	FLAT:s390_5010
	DQ	FLAT:z900_5010
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213305
	DQ	FLAT:s370_5020
	DQ	FLAT:s390_5020
	DQ	FLAT:z900_5020
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213306
	DQ	FLAT:s370_5030
	DQ	FLAT:s390_5030
	DQ	FLAT:z900_5030
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213307
	DQ	FLAT:s370_5040
	DQ	FLAT:s390_5040
	DQ	FLAT:z900_5040
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213308
	DQ	FLAT:s370_5050
	DQ	FLAT:s390_5050
	DQ	FLAT:z900_5050
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213309
	DQ	FLAT:s370_5060
	DQ	FLAT:s390_5060
	DQ	FLAT:z900_5060
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213310
	DQ	FLAT:s370_5070
	DQ	FLAT:s390_5070
	DQ	FLAT:z900_5070
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213311
	DQ	FLAT:s370_5080
	DQ	FLAT:s390_5080
	DQ	FLAT:z900_5080
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213312
	DQ	FLAT:s370_5090
	DQ	FLAT:s390_5090
	DQ	FLAT:z900_5090
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213313
	DQ	FLAT:s370_50A0
	DQ	FLAT:s390_50A0
	DQ	FLAT:z900_50A0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213314
	DQ	FLAT:s370_50B0
	DQ	FLAT:s390_50B0
	DQ	FLAT:z900_50B0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213315
	DQ	FLAT:s370_50C0
	DQ	FLAT:s390_50C0
	DQ	FLAT:z900_50C0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213316
	DQ	FLAT:s370_50D0
	DQ	FLAT:s390_50D0
	DQ	FLAT:z900_50D0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213317
	DQ	FLAT:s370_50E0
	DQ	FLAT:s390_50E0
	DQ	FLAT:z900_50E0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213318
	DQ	FLAT:s370_50F0
	DQ	FLAT:s390_50F0
	DQ	FLAT:z900_50F0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213319
gen_opcode_55_0 DQ FLAT:s370_5500
	DQ	FLAT:s390_5500
	DQ	FLAT:z900_5500
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213352
	DQ	FLAT:s370_5510
	DQ	FLAT:s390_5510
	DQ	FLAT:z900_5510
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213353
	DQ	FLAT:s370_5520
	DQ	FLAT:s390_5520
	DQ	FLAT:z900_5520
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213354
	DQ	FLAT:s370_5530
	DQ	FLAT:s390_5530
	DQ	FLAT:z900_5530
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213355
	DQ	FLAT:s370_5540
	DQ	FLAT:s390_5540
	DQ	FLAT:z900_5540
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213356
	DQ	FLAT:s370_5550
	DQ	FLAT:s390_5550
	DQ	FLAT:z900_5550
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213357
	DQ	FLAT:s370_5560
	DQ	FLAT:s390_5560
	DQ	FLAT:z900_5560
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213358
	DQ	FLAT:s370_5570
	DQ	FLAT:s390_5570
	DQ	FLAT:z900_5570
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213359
	DQ	FLAT:s370_5580
	DQ	FLAT:s390_5580
	DQ	FLAT:z900_5580
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213360
	DQ	FLAT:s370_5590
	DQ	FLAT:s390_5590
	DQ	FLAT:z900_5590
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213361
	DQ	FLAT:s370_55A0
	DQ	FLAT:s390_55A0
	DQ	FLAT:z900_55A0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213362
	DQ	FLAT:s370_55B0
	DQ	FLAT:s390_55B0
	DQ	FLAT:z900_55B0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213363
	DQ	FLAT:s370_55C0
	DQ	FLAT:s390_55C0
	DQ	FLAT:z900_55C0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213364
	DQ	FLAT:s370_55D0
	DQ	FLAT:s390_55D0
	DQ	FLAT:z900_55D0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213365
	DQ	FLAT:s370_55E0
	DQ	FLAT:s390_55E0
	DQ	FLAT:z900_55E0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213366
	DQ	FLAT:s370_55F0
	DQ	FLAT:s390_55F0
	DQ	FLAT:z900_55F0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213367
gen_opcode_58_0 DQ FLAT:s370_5800
	DQ	FLAT:s390_5800
	DQ	FLAT:z900_5800
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213400
	DQ	FLAT:s370_5810
	DQ	FLAT:s390_5810
	DQ	FLAT:z900_5810
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213401
	DQ	FLAT:s370_5820
	DQ	FLAT:s390_5820
	DQ	FLAT:z900_5820
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213402
	DQ	FLAT:s370_5830
	DQ	FLAT:s390_5830
	DQ	FLAT:z900_5830
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213403
	DQ	FLAT:s370_5840
	DQ	FLAT:s390_5840
	DQ	FLAT:z900_5840
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213404
	DQ	FLAT:s370_5850
	DQ	FLAT:s390_5850
	DQ	FLAT:z900_5850
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213405
	DQ	FLAT:s370_5860
	DQ	FLAT:s390_5860
	DQ	FLAT:z900_5860
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213406
	DQ	FLAT:s370_5870
	DQ	FLAT:s390_5870
	DQ	FLAT:z900_5870
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213407
	DQ	FLAT:s370_5880
	DQ	FLAT:s390_5880
	DQ	FLAT:z900_5880
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213408
	DQ	FLAT:s370_5890
	DQ	FLAT:s390_5890
	DQ	FLAT:z900_5890
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213409
	DQ	FLAT:s370_58A0
	DQ	FLAT:s390_58A0
	DQ	FLAT:z900_58A0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213410
	DQ	FLAT:s370_58B0
	DQ	FLAT:s390_58B0
	DQ	FLAT:z900_58B0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213411
	DQ	FLAT:s370_58C0
	DQ	FLAT:s390_58C0
	DQ	FLAT:z900_58C0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213412
	DQ	FLAT:s370_58D0
	DQ	FLAT:s390_58D0
	DQ	FLAT:z900_58D0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213413
	DQ	FLAT:s370_58E0
	DQ	FLAT:s390_58E0
	DQ	FLAT:z900_58E0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213414
	DQ	FLAT:s370_58F0
	DQ	FLAT:s390_58F0
	DQ	FLAT:z900_58F0
	DQ	FLAT:iprint_ASMFMT_RX
	DQ	FLAT:$SG213415
gen_opcode_91xx DQ FLAT:s370_9180
	DQ	FLAT:s390_9180
	DQ	FLAT:z900_9180
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG213432
	DQ	FLAT:s370_9140
	DQ	FLAT:s390_9140
	DQ	FLAT:z900_9140
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG213433
	DQ	FLAT:s370_9120
	DQ	FLAT:s390_9120
	DQ	FLAT:z900_9120
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG213434
	DQ	FLAT:s370_9110
	DQ	FLAT:s390_9110
	DQ	FLAT:z900_9110
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG213435
	DQ	FLAT:s370_9108
	DQ	FLAT:s390_9108
	DQ	FLAT:z900_9108
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG213436
	DQ	FLAT:s370_9104
	DQ	FLAT:s390_9104
	DQ	FLAT:z900_9104
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG213437
	DQ	FLAT:s370_9102
	DQ	FLAT:s390_9102
	DQ	FLAT:z900_9102
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG213438
	DQ	FLAT:s370_9101
	DQ	FLAT:s390_9101
	DQ	FLAT:z900_9101
	DQ	FLAT:iprint_ASMFMT_SI
	DQ	FLAT:$SG213439
gen_opcode_BF_x DQ FLAT:s370_BF_x
	DQ	FLAT:s390_BF_x
	DQ	FLAT:z900_BF_x
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG213446
	DQ	FLAT:s370_BF_7
	DQ	FLAT:s390_BF_7
	DQ	FLAT:z900_BF_7
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG213447
	DQ	FLAT:s370_BF_F
	DQ	FLAT:s390_BF_F
	DQ	FLAT:z900_BF_F
	DQ	FLAT:iprint_ASMFMT_RS
	DQ	FLAT:$SG213448
$SG197670 DB	'%c', 00H
	ORG $+1
$SG197691 DB	'%c', 00H
	ORG $+1
$SG197671 DB	'%-5s %-19s    %s', 00H
	ORG $+3
$SG197711 DB	'%d,%d', 00H
	ORG $+2
$SG197779 DB	'%d', 00H
	ORG $+1
$SG197692 DB	'%-5s %-19s    %s', 00H
	ORG $+3
$SG197760 DB	'%d,%d', 00H
	ORG $+2
$SG197797 DB	'%d', 00H
	ORG $+1
$SG197712 DB	'%-5s %-19s    %s', 00H
	ORG $+3
$SG197817 DB	'%d,%d', 00H
	ORG $+2
$SG197836 DB	'%d', 00H
	ORG $+1
$SG197740 DB	'%d,*%+I64d,*%+I64d', 00H
	ORG $+1
$SG198920 DB	'%d', 00H
	ORG $+1
$SG197741 DB	'%-5s %-19s    %s', 00H
	ORG $+3
$SG198275 DB	'%d,%d', 00H
	ORG $+2
$SG198667 DB	'%d(%d)', 00H
	ORG $+5
$SG197761 DB	'%-5s %-19s    %s', 00H
	ORG $+3
$SG198484 DB	'%d,%d', 00H
	ORG $+6
$SG197780 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG197798 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG197818 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG197837 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG197857 DB	'%d,%d,%d', 00H
	ORG $+7
$SG197858 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG197878 DB	'%d,%d,%d', 00H
	ORG $+7
$SG197879 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG197899 DB	'%d,%d,%d', 00H
	ORG $+7
$SG197900 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG197920 DB	'%d,%d,%d', 00H
	ORG $+7
$SG197921 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG197942 DB	'%d,%d,%d,%d', 00H
	ORG $+4
$SG197943 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG197964 DB	'%d,%d,%d,%d', 00H
	ORG $+4
$SG197965 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG197985 DB	'%d,%d,%d', 00H
	ORG $+7
$SG197986 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198007 DB	'%d,%d,%d,%d', 00H
	ORG $+4
$SG198008 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198029 DB	'%d,%d(%d,%d)', 00H
	ORG $+3
$SG198030 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198051 DB	'%d,%d(%d,%d)', 00H
	ORG $+3
$SG198052 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198074 DB	'%d,%d(%d,%d)', 00H
	ORG $+3
$SG198075 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198097 DB	'%d,%d,%d(%d,%d)', 00H
$SG198098 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198119 DB	'%d,%d,%d(%d)', 00H
	ORG $+3
$SG198120 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198140 DB	'%d,%d(%d)', 00H
	ORG $+6
$SG198141 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198163 DB	'%d,%d,%d(%d)', 00H
	ORG $+3
$SG198164 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198186 DB	'%d,%d(%d),%d', 00H
	ORG $+3
$SG198187 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198207 DB	'%d(%d,%d)', 00H
	ORG $+6
$SG198208 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198230 DB	'%d,%d(%d,%d),%d', 00H
$SG198231 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198253 DB	'%d,%d,*%+d', 00H
	ORG $+5
$SG198254 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198276 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198297 DB	'%d,*%+d', 00H
$SG198298 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198320 DB	'%d,%d,*%+d', 00H
	ORG $+5
$SG198321 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198343 DB	'%d,%d,%d', 00H
	ORG $+7
$SG198344 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198366 DB	'%d,%d,%d', 00H
	ORG $+7
$SG198367 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198389 DB	'%d,%d,%d', 00H
	ORG $+7
$SG198390 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198413 DB	'%d,%d,%d,*%+d', 00H
	ORG $+2
$SG198414 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198437 DB	'%d,%d,%d,*%+d', 00H
	ORG $+2
$SG198438 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198460 DB	'%d,%d,%d,%d,%d', 00H
	ORG $+1
$SG198461 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198485 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198509 DB	'%d,*%+lld', 00H
	ORG $+6
$SG198510 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198532 DB	'%d,%d,%d,%d(%d)', 00H
$SG198533 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198555 DB	'%d,%d,%d,%d(%d)', 00H
$SG198556 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198576 DB	'%d(%d),%d', 00H
	ORG $+6
$SG198577 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198598 DB	'%d(%d),%d', 00H
	ORG $+6
$SG198599 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198621 DB	'%d(%d),%d', 00H
	ORG $+6
$SG198622 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198647 DB	'%d,*%+I64d,%d(%d)', 00H
	ORG $+6
$SG198648 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198668 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198691 DB	'%d(%d,%d),%d(%d,%d)', 00H
	ORG $+4
$SG198692 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198714 DB	'%d(%d,%d),%d(%d)', 00H
	ORG $+7
$SG198715 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198737 DB	'%d(%d),%d(%d,%d)', 00H
	ORG $+7
$SG198738 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198761 DB	'%d,%d,%d(%d),%d(%d)', 00H
	ORG $+4
$SG198762 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198785 DB	'%d(%d,%d),%d(%d),%d', 00H
	ORG $+4
$SG198786 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198809 DB	'%d,%d(%d),%d,%d(%d)', 00H
	ORG $+4
$SG198810 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198833 DB	'%d(%d,%d),%d(%d),%d', 00H
	ORG $+4
$SG198834 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198855 DB	'%d(%d),%d(%d)', 00H
	ORG $+2
$SG198856 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198878 DB	'%d(%d),%d(%d),%d', 00H
	ORG $+7
$SG198879 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198901 DB	'%d,%d(%d),%d(%d)', 00H
	ORG $+7
$SG198902 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198921 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198943 DB	'%d,%d(%d,%d),%d', 00H
$SG198944 DB	'%-5s %-19s    %s', 00H
	ORG $+7
$SG198966 DB	'%d,%d,%d(%d),%d', 00H
$SG198967 DB	'%-5s %-19s    %s', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_VRS_A
	DD	025H
	DD	01aeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_VRX
	DD	025H
	DD	0191H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_VS
	DD	025H
	DD	0c8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SSF_RSS
	DD	025H
	DD	018cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SSF
	DD	025H
	DD	018cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SSE
	DD	025H
	DD	0168H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SS_I
	DD	025H
	DD	01b6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SS_RSRS
	DD	025H
	DD	01b6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SS_R3
	DD	025H
	DD	01b6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SS_R
	DD	025H
	DD	01b6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SS_L2
	DD	025H
	DD	018bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SS_L
	DD	025H
	DD	018bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SS
	DD	025H
	DD	01baH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_S
	DD	025H
	DD	0106H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SMI_A
	DD	025H
	DD	0176H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SIL
	DD	025H
	DD	0142H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SIY
	DD	025H
	DD	0141H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_SI
	DD	025H
	DD	0127H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RRS
	DD	025H
	DD	0172H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RIS
	DD	025H
	DD	016fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RIL_A
	DD	025H
	DD	0148H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RIL
	DD	025H
	DD	0137H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RIE_RRIII
	DD	025H
	DD	014fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RIE_RMII
	DD	025H
	DD	014bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RIE_RRIM
	DD	025H
	DD	014eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RIE_RIM
	DD	025H
	DD	0128H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RIE_RRI
	DD	025H
	DD	0128H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RIE_G
	DD	025H
	DD	0128H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RIE
	DD	025H
	DD	012aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RI_B
	DD	025H
	DD	0106H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RI
	DD	025H
	DD	0104H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RSI
	DD	025H
	DD	012aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RSL_RM
	DD	025H
	DD	0171H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RSL
	DD	025H
	DD	012cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RSY_M3
	DD	025H
	DD	0168H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RSY
	DD	025H
	DD	0168H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RS_R1D2B2
	DD	025H
	DD	012aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RS
	DD	025H
	DD	014eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RXF
	DD	025H
	DD	0172H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RXY
	DD	025H
	DD	0168H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RXE
	DD	025H
	DD	014eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RX
	DD	025H
	DD	014eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RRF_A
	DD	025H
	DD	0134H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RRR
	DD	025H
	DD	0110H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RRF_RM
	DD	025H
	DD	0134H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RRF_MM
	DD	025H
	DD	0134H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RRF_M4
	DD	025H
	DD	0110H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RRF_M3
	DD	025H
	DD	0110H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RRF_M
	DD	025H
	DD	0110H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RRF_R
	DD	025H
	DD	0110H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RRE_R1
	DD	025H
	DD	0c8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RRE
	DD	025H
	DD	0ecH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RR_SVC
	DD	025H
	DD	0bfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RR_R1
	DD	025H
	DD	0c8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_RR
	DD	025H
	DD	0ecH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_MII_A
	DD	025H
	DD	0171H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_IE
	DD	025H
	DD	0ecH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_E
	DD	025H
	DD	0b3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:iprint_ASMFMT_none
	DD	025H
	DD	0b3H
voltbl	ENDS
xdata	SEGMENT
$unwind$iprint_router_func DD 011701H
	DD	06217H
$unwind$init_runtime_opcode_tables DD 010401H
	DD	08204H
$unwind$s370_cipher_message DD 010e01H
	DD	0420eH
$unwind$s370_cipher_message_with_chaining DD 010e01H
	DD	0420eH
$unwind$s370_compute_intermediate_message_digest DD 010e01H
	DD	0420eH
$unwind$s370_compute_last_message_digest DD 010e01H
	DD	0420eH
$unwind$s370_compute_message_authentication_code DD 010e01H
	DD	0420eH
$unwind$s370_perform_cryptographic_key_management_operation DD 010e01H
	DD	0420eH
$unwind$s370_perform_cryptographic_computation DD 010e01H
	DD	0420eH
$unwind$s370_cipher_message_with_cipher_feedback DD 010e01H
	DD	0420eH
$unwind$s370_cipher_message_with_output_feedback DD 010e01H
	DD	0420eH
$unwind$s370_cipher_message_with_counter DD 010e01H
	DD	0420eH
$unwind$s370_operation_exception DD 010e01H
	DD	0820eH
$unwind$the_real_replace_opcode DD 011701H
	DD	06217H
$unwind$s370_compare_and_swap_and_purge_long DD 010e01H
	DD	0420eH
$unwind$s370_invalidate_dat_table_entry DD 010e01H
	DD	0420eH
$unwind$s370_extract_primary_asn_and_instance DD 010e01H
	DD	0420eH
$unwind$s370_extract_secondary_asn_and_instance DD 010e01H
	DD	0420eH
$unwind$s370_program_transfer_with_instance DD 010e01H
	DD	0420eH
$unwind$s370_set_secondary_asn_with_instance DD 010e01H
	DD	0420eH
$unwind$s370_store_facility_list_extended DD 010e01H
	DD	0420eH
$unwind$s370_perform_frame_management_function DD 010e01H
	DD	0420eH
$unwind$s370_perform_topology_function DD 010e01H
	DD	0420eH
$unwind$s370_load_access_multiple_y DD 010e01H
	DD	0420eH
$unwind$s370_store_access_multiple_y DD 010e01H
	DD	0420eH
$unwind$s370_store_clock_fast DD 010e01H
	DD	0420eH
$unwind$s370_move_with_optional_specifications DD 010e01H
	DD	0420eH
$unwind$s370_perform_timing_facility_function DD 010e01H
	DD	0420eH
$unwind$s370_extract_cpu_time DD 010e01H
	DD	0420eH
$unwind$s370_load_program_parameter DD 010e01H
	DD	0420eH
$unwind$s370_perform_floating_point_operation DD 010e01H
	DD	0420eH
$unwind$s370_convert_zoned_to_dfp_long DD 010e01H
	DD	0420eH
$unwind$s370_convert_zoned_to_dfp_ext DD 010e01H
	DD	0420eH
$unwind$s370_convert_dfp_long_to_zoned DD 010e01H
	DD	0420eH
$unwind$s370_convert_dfp_ext_to_zoned DD 010e01H
	DD	0420eH
$unwind$s370_branch_prediction_preload DD 010e01H
	DD	0420eH
$unwind$s370_branch_prediction_relative_preload DD 010e01H
	DD	0420eH
$unwind$s370_next_instruction_access_intent DD 010e01H
	DD	0420eH
$unwind$s370_load_and_trap DD 010e01H
	DD	0420eH
$unwind$s370_load_long_and_trap DD 010e01H
	DD	0420eH
$unwind$s370_load_fullword_high_and_trap DD 010e01H
	DD	0420eH
$unwind$s370_load_logical_long_fullword_and_trap DD 010e01H
	DD	0420eH
$unwind$s370_load_logical_long_thirtyone_and_trap DD 010e01H
	DD	0420eH
$unwind$s370_compare_logical_and_trap DD 010e01H
	DD	0420eH
$unwind$s370_compare_logical_and_trap_long DD 010e01H
	DD	0420eH
$unwind$s370_rotate_then_insert_selected_bits_long_reg_n DD 010e01H
	DD	0420eH
$unwind$s370_perform_processor_assist DD 010e01H
	DD	0420eH
$unwind$s370_transaction_begin_constrained DD 010e01H
	DD	0420eH
$unwind$s370_load_halfword_high_immediate_on_condition DD 010e01H
	DD	0420eH
$unwind$s370_load_halfword_immediate_on_condition DD 010e01H
	DD	0420eH
$unwind$s370_load_halfword_immediate_on_condition_grande DD 010e01H
	DD	0420eH
$unwind$s370_load_high_on_condition DD 010e01H
	DD	0420eH
$unwind$s370_load_high_on_condition_register DD 010e01H
	DD	0420eH
$unwind$s370_store_high_on_condition DD 010e01H
	DD	0420eH
$unwind$s370_load_and_zero_rightmost_byte_grande DD 010e01H
	DD	0420eH
$unwind$s370_load_logical_and_zero_rightmost_byte DD 010e01H
	DD	0420eH
$unwind$s370_load_and_zero_rightmost_byte DD 010e01H
	DD	0420eH
$unwind$s370_branch_indirect_on_condition DD 010e01H
	DD	0420eH
$unwind$s370_add_long_halfword DD 010e01H
	DD	0420eH
$unwind$s370_subtract_long_halfword DD 010e01H
	DD	0420eH
$unwind$s370_multiply_long_register DD 010e01H
	DD	0420eH
$unwind$s370_multiply_long DD 010e01H
	DD	0420eH
$unwind$s370_multiply_long_halfword DD 010e01H
	DD	0420eH
$unwind$s370_multiply_single_register_cc DD 010e01H
	DD	0420eH
$unwind$s370_multiply_single_cc DD 010e01H
	DD	0420eH
$unwind$s370_multiply_single_long_register_cc DD 010e01H
	DD	0420eH
$unwind$s370_multiply_single_long_cc DD 010e01H
	DD	0420eH
$unwind$s370_and_register_with_complement DD 010e01H
	DD	0420eH
$unwind$s370_and_register_long_with_complement DD 010e01H
	DD	0420eH
$unwind$s370_nand_register DD 010e01H
	DD	0420eH
$unwind$s370_nand_register_long DD 010e01H
	DD	0420eH
$unwind$s370_not_xor_register DD 010e01H
	DD	0420eH
$unwind$s370_not_xor_register_long DD 010e01H
	DD	0420eH
$unwind$s370_nor_register DD 010e01H
	DD	0420eH
$unwind$s370_nor_register_long DD 010e01H
	DD	0420eH
$unwind$s370_or_register_with_complement DD 010e01H
	DD	0420eH
$unwind$s370_or_register_long_with_complement DD 010e01H
	DD	0420eH
$unwind$s370_select_register DD 010e01H
	DD	0420eH
$unwind$s370_select_register_long DD 010e01H
	DD	0420eH
$unwind$s370_select_fullword_high_register DD 010e01H
	DD	0420eH
$unwind$s370_move_right_to_left DD 010e01H
	DD	0420eH
$unwind$s370_reset_reference_bits_multiple DD 010e01H
	DD	0420eH
$unwind$s370_extract_coprocessor_group_address DD 010e01H
	DD	0420eH
$unwind$s370_extract_cpu_counter DD 010e01H
	DD	0420eH
$unwind$s370_extract_peripheral_counter DD 010e01H
	DD	0420eH
$unwind$s370_load_cpu_counter_set_controls DD 010e01H
	DD	0420eH
$unwind$s370_load_peripheral_counter_set_controls DD 010e01H
	DD	0420eH
$unwind$s370_query_counter_information DD 010e01H
	DD	0420eH
$unwind$s370_set_cpu_counter DD 010e01H
	DD	0420eH
$unwind$s370_set_peripheral_counter DD 010e01H
	DD	0420eH
$unwind$s370_load_sampling_controls DD 010e01H
	DD	0420eH
$unwind$s370_query_sampling_information DD 010e01H
	DD	0420eH
$unwind$s370_transaction_begin DD 010e01H
	DD	0420eH
$unwind$s370_transaction_abort DD 010e01H
	DD	0420eH
$unwind$s370_transaction_end DD 010e01H
	DD	0420eH
$unwind$s370_nontransactional_store DD 010e01H
	DD	0420eH
$unwind$s370_extract_transaction_nesting_depth DD 010e01H
	DD	0420eH
$unwind$s370_store_hypervisor_information DD 010e01H
	DD	0420eH
$unwind$s370_convert_packed_to_dfp_long DD 010e01H
	DD	0420eH
$unwind$s370_convert_packed_to_dfp_ext DD 010e01H
	DD	0420eH
$unwind$s370_convert_dfp_long_to_packed DD 010e01H
	DD	0420eH
$unwind$s370_convert_dfp_ext_to_packed DD 010e01H
	DD	0420eH
$unwind$s370_vector_load DD 010e01H
	DD	0420eH
$unwind$s370_vector_store DD 010e01H
	DD	0420eH
$unwind$s370_vector_load_multiple DD 010e01H
	DD	0420eH
$unwind$s370_vector_store_multiple DD 010e01H
	DD	0420eH
$unwind$s370_insert_reference_bits_multiple DD 010e01H
	DD	0420eH
$unwind$s370_load_bear DD 010e01H
	DD	0420eH
$unwind$s370_store_bear DD 010e01H
	DD	0420eH
$unwind$s370_load_program_status_word_extended_y DD 010e01H
	DD	0420eH
$unwind$s370_copy_access DD 010e01H
	DD	0420eH
$unwind$s370_extract_access_register DD 010e01H
	DD	0420eH
$unwind$s370_load_access_multiple DD 010e01H
	DD	0420eH
$unwind$s370_purge_accesslist_lookaside_buffer DD 010e01H
	DD	0420eH
$unwind$s370_set_access_register DD 010e01H
	DD	0420eH
$unwind$s370_store_access_multiple DD 010e01H
	DD	0420eH
$unwind$s370_test_access DD 010e01H
	DD	0420eH
$unwind$s370_branch_and_set_authority DD 010e01H
	DD	0420eH
$unwind$s370_compare_and_swap_and_purge DD 010e01H
	DD	0420eH
$unwind$s370_cancel_subchannel DD 010e01H
	DD	0420eH
$unwind$s370_clear_subchannel DD 010e01H
	DD	0420eH
$unwind$s370_halt_subchannel DD 010e01H
	DD	0420eH
$unwind$s370_modify_subchannel DD 010e01H
	DD	0420eH
$unwind$s370_reset_channel_path DD 010e01H
	DD	0420eH
$unwind$s370_resume_subchannel DD 010e01H
	DD	0420eH
$unwind$s370_set_address_limit DD 010e01H
	DD	0420eH
$unwind$s370_set_channel_monitor DD 010e01H
	DD	0420eH
$unwind$s370_start_subchannel DD 010e01H
	DD	0420eH
$unwind$s370_store_channel_path_status DD 010e01H
	DD	0420eH
$unwind$s370_store_channel_report_word DD 010e01H
	DD	0420eH
$unwind$s370_store_subchannel DD 010e01H
	DD	0420eH
$unwind$s370_test_pending_interruption DD 010e01H
	DD	0420eH
$unwind$s370_test_subchannel DD 010e01H
	DD	0420eH
$unwind$s370_channel_subsystem_call DD 010e01H
	DD	0420eH
$unwind$s370_load_page_table_entry_address DD 010e01H
	DD	0420eH
$unwind$s370_page_in DD 010e01H
	DD	0420eH
$unwind$s370_page_out DD 010e01H
	DD	0420eH
$unwind$s370_set_clock_programmable_field DD 010e01H
	DD	0420eH
$unwind$s370_store_clock_extended DD 010e01H
	DD	0420eH
$unwind$s370_convert_bfp_long_to_float_long_reg DD 010e01H
	DD	0420eH
$unwind$s370_convert_bfp_short_to_float_long_reg DD 010e01H
	DD	0420eH
$unwind$s370_convert_float_long_to_bfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s370_convert_float_long_to_bfp_short_reg DD 010e01H
	DD	0420eH
$unwind$s370_load_float_ext_reg DD 010e01H
	DD	0420eH
$unwind$s370_load_zero_float_ext_reg DD 010e01H
	DD	0420eH
$unwind$s370_load_zero_float_long_reg DD 010e01H
	DD	0420eH
$unwind$s370_load_zero_float_short_reg DD 010e01H
	DD	0420eH
$unwind$s370_start_interpretive_execution DD 010e01H
	DD	0420eH
$unwind$s370_test_pending_zone_interrupt DD 010e01H
	DD	0420eH
$unwind$s370_branch_and_stack DD 010e01H
	DD	0420eH
$unwind$s370_extract_stacked_registers DD 010e01H
	DD	0420eH
$unwind$s370_extract_stacked_state DD 010e01H
	DD	0420eH
$unwind$s370_modify_stacked_state DD 010e01H
	DD	0420eH
$unwind$s370_program_return DD 010e01H
	DD	0420eH
$unwind$s370_trap2 DD 010e01H
	DD	0420eH
$unwind$s370_trap4 DD 010e01H
	DD	0420eH
$unwind$s370_lock_page DD 010e01H
	DD	0420eH
$unwind$s370_move_page DD 010e01H
	DD	0420eH
$unwind$s370_invalidate_expanded_storage_block_entry DD 010e01H
	DD	0420eH
$unwind$s370_perform_locked_operation DD 010e01H
	DD	0420eH
$unwind$s370_set_queue_buffer_state DD 010e01H
	DD	0420eH
$unwind$s370_extract_queue_buffer_state DD 010e01H
	DD	0420eH
$unwind$s370_signal_adapter DD 010e01H
	DD	0420eH
$unwind$s370_store_zone_parameter DD 010e01H
	DD	0420eH
$unwind$s370_set_zone_parameter DD 010e01H
	DD	0420eH
$unwind$s370_resume_program DD 010e01H
	DD	0420eH
$unwind$s370_v_and_to_vmr DD 010e01H
	DD	0420eH
$unwind$s370_v_clear_vr DD 010e01H
	DD	0420eH
$unwind$s370_v_complement_vmr DD 010e01H
	DD	0420eH
$unwind$s370_v_count_left_zeros_in_vmr DD 010e01H
	DD	0420eH
$unwind$s370_v_count_ones_in_vmr DD 010e01H
	DD	0420eH
$unwind$s370_v_exclusive_or_to_vmr DD 010e01H
	DD	0420eH
$unwind$s370_v_extract_vct DD 010e01H
	DD	0420eH
$unwind$s370_v_extract_vector_modes DD 010e01H
	DD	0420eH
$unwind$s370_v_load_vct_from_address DD 010e01H
	DD	0420eH
$unwind$s370_v_load_vix_from_address DD 010e01H
	DD	0420eH
$unwind$s370_v_load_vmr DD 010e01H
	DD	0420eH
$unwind$s370_v_load_vmr_complement DD 010e01H
	DD	0420eH
$unwind$s370_v_or_to_vmr DD 010e01H
	DD	0420eH
$unwind$s370_v_restore_vac DD 010e01H
	DD	0420eH
$unwind$s370_v_restore_vmr DD 010e01H
	DD	0420eH
$unwind$s370_v_restore_vr DD 010e01H
	DD	0420eH
$unwind$s370_v_restore_vsr DD 010e01H
	DD	0420eH
$unwind$s370_v_save_changed_vr DD 010e01H
	DD	0420eH
$unwind$s370_v_save_vac DD 010e01H
	DD	0420eH
$unwind$s370_v_save_vmr DD 010e01H
	DD	0420eH
$unwind$s370_v_save_vr DD 010e01H
	DD	0420eH
$unwind$s370_v_save_vsr DD 010e01H
	DD	0420eH
$unwind$s370_v_set_vector_mask_mode DD 010e01H
	DD	0420eH
$unwind$s370_v_store_vector_parameters DD 010e01H
	DD	0420eH
$unwind$s370_v_store_vmr DD 010e01H
	DD	0420eH
$unwind$s370_v_test_vmr DD 010e01H
	DD	0420eH
$unwind$s370_service_call DD 010e01H
	DD	0420eH
$unwind$s370_set_address_space_control_fast DD 010e01H
	DD	0420eH
$unwind$s370_store_cpu_counter_multiple DD 010e01H
	DD	0420eH
$unwind$s370_store_system_information DD 010e01H
	DD	0420eH
$unwind$s370_branch_in_subspace_group DD 010e01H
	DD	0420eH
$unwind$s370_set_vector_summary DD 010e01H
	DD	0420eH
$unwind$s370_extract_and_set_storage_attributes DD 010e01H
	DD	0420eH
$unwind$s370_execute_opcode_e3________xx DD 010e01H
	DD	0620eH
$unwind$s370_execute_opcode_e7________xx DD 010e01H
	DD	0620eH
$unwind$s370_execute_opcode_eb________xx DD 010e01H
	DD	0620eH
$unwind$s370_execute_opcode_ec________xx DD 010e01H
	DD	0620eH
$unwind$s370_execute_opcode_ed________xx DD 010e01H
	DD	0620eH
$unwind$operation_exception DD 010e01H
	DD	0820eH
$unwind$iprint_ASMFMT_none DD 022d19H
	DD	013011bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$iprint_ASMFMT_E DD 022d19H
	DD	013011bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$iprint_ASMFMT_IE DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_MII_A DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RR DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RR_R1 DD 022d19H
	DD	013011bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$iprint_ASMFMT_RR_SVC DD 022d19H
	DD	013011bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$iprint_ASMFMT_RRE DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RRE_R1 DD 022d19H
	DD	013011bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$iprint_ASMFMT_RRF_R DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RRF_M DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RRF_M3 DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RRF_M4 DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RRF_MM DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RRF_RM DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RRR DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RRF_A DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RX DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RXE DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RXY DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RXF DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RS DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RS_R1D2B2 DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RSY DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RSY_M3 DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RSL DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RSL_RM DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RSI DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RI DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RI_B DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RIE DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RIE_G DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RIE_RRI DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RIE_RIM DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RIE_RRIM DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RIE_RMII DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RIE_RRIII DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RIL DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RIL_A DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_RIS DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_RRS DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_SI DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_SIY DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_SIL DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_SMI_A DD 022d19H
	DD	019011bH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$iprint_ASMFMT_S DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$iprint_ASMFMT_SS DD 022d19H
	DD	01b011bH
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$iprint_ASMFMT_SS_L DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_SS_L2 DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_SS_R DD 022d19H
	DD	01b011bH
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$iprint_ASMFMT_SS_R3 DD 022d19H
	DD	01b011bH
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$iprint_ASMFMT_SS_RSRS DD 022d19H
	DD	01b011bH
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$iprint_ASMFMT_SS_I DD 022d19H
	DD	01b011bH
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$iprint_ASMFMT_SSE DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_SSF DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_SSF_RSS DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_VS DD 022d19H
	DD	013011bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$iprint_ASMFMT_VRX DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$iprint_ASMFMT_VRS_A DD 022d19H
	DD	017011bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$s390_cipher_message DD 010e01H
	DD	0420eH
$unwind$s390_cipher_message_with_chaining DD 010e01H
	DD	0420eH
$unwind$s390_compute_intermediate_message_digest DD 010e01H
	DD	0420eH
$unwind$s390_compute_last_message_digest DD 010e01H
	DD	0420eH
$unwind$s390_compute_message_authentication_code DD 010e01H
	DD	0420eH
$unwind$s390_operation_exception DD 010e01H
	DD	0820eH
$unwind$s390_compare_and_swap_and_purge_long DD 010e01H
	DD	0420eH
$unwind$s390_invalidate_dat_table_entry DD 010e01H
	DD	0420eH
$unwind$s390_extract_primary_asn_and_instance DD 010e01H
	DD	0420eH
$unwind$s390_extract_secondary_asn_and_instance DD 010e01H
	DD	0420eH
$unwind$s390_program_transfer_with_instance DD 010e01H
	DD	0420eH
$unwind$s390_set_secondary_asn_with_instance DD 010e01H
	DD	0420eH
$unwind$s390_perform_frame_management_function DD 010e01H
	DD	0420eH
$unwind$s390_perform_topology_function DD 010e01H
	DD	0420eH
$unwind$s390_add_y DD 010e01H
	DD	0420eH
$unwind$s390_add_halfword_y DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_y DD 010e01H
	DD	0420eH
$unwind$s390_and_immediate_y DD 010e01H
	DD	0420eH
$unwind$s390_and_y DD 010e01H
	DD	0420eH
$unwind$s390_compare_y DD 010e01H
	DD	0420eH
$unwind$s390_compare_and_swap_y DD 010e01H
	DD	0420eH
$unwind$s390_compare_double_and_swap_y DD 010e01H
	DD	0420eH
$unwind$s390_compare_halfword_y DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_y DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_immediate_y DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_characters_under_mask_y DD 010e01H
	DD	0420eH
$unwind$s390_convert_to_binary_y DD 010e01H
	DD	0420eH
$unwind$s390_convert_to_decimal_y DD 010e01H
	DD	0420eH
$unwind$s390_exclusive_or_immediate_y DD 010e01H
	DD	0420eH
$unwind$s390_exclusive_or_y DD 010e01H
	DD	0420eH
$unwind$s390_insert_character_y DD 010e01H
	DD	0420eH
$unwind$s390_insert_characters_under_mask_y DD 010e01H
	DD	0420eH
$unwind$s390_load_y DD 010e01H
	DD	0420eH
$unwind$s390_load_address_y DD 010e01H
	DD	0420eH
$unwind$s390_load_byte DD 010e01H
	DD	0420eH
$unwind$s390_load_byte_long DD 010e01H
	DD	0420eH
$unwind$s390_load_halfword_y DD 010e01H
	DD	0420eH
$unwind$s390_load_multiple_y DD 010e01H
	DD	0420eH
$unwind$s390_load_real_address_y DD 010e01H
	DD	0420eH
$unwind$s390_move_immediate_y DD 010e01H
	DD	0420eH
$unwind$s390_multiply_single_y DD 010e01H
	DD	0420eH
$unwind$s390_or_immediate_y DD 010e01H
	DD	0420eH
$unwind$s390_or_y DD 010e01H
	DD	0420eH
$unwind$s390_store_y DD 010e01H
	DD	0420eH
$unwind$s390_store_character_y DD 010e01H
	DD	0420eH
$unwind$s390_store_characters_under_mask_y DD 010e01H
	DD	0420eH
$unwind$s390_store_halfword_y DD 010e01H
	DD	0420eH
$unwind$s390_store_multiple_y DD 010e01H
	DD	0420eH
$unwind$s390_subtract_y DD 010e01H
	DD	0420eH
$unwind$s390_subtract_halfword_y DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_y DD 010e01H
	DD	0420eH
$unwind$s390_test_under_mask_y DD 010e01H
	DD	0420eH
$unwind$s390_load_access_multiple_y DD 010e01H
	DD	0420eH
$unwind$s390_store_access_multiple_y DD 010e01H
	DD	0420eH
$unwind$s390_load_float_long_y DD 010e01H
	DD	0420eH
$unwind$s390_load_float_short_y DD 010e01H
	DD	0420eH
$unwind$s390_store_float_long_y DD 010e01H
	DD	0420eH
$unwind$s390_store_float_short_y DD 010e01H
	DD	0420eH
$unwind$s390_add_fullword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_fullword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_long_fullword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_add_long_fullword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_and_immediate_high_fullword DD 010e01H
	DD	0420eH
$unwind$s390_and_immediate_low_fullword DD 010e01H
	DD	0420eH
$unwind$s390_compare_fullword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_fullword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_long_fullword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_compare_long_fullword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_exclusive_or_immediate_high_fullword DD 010e01H
	DD	0420eH
$unwind$s390_exclusive_or_immediate_low_fullword DD 010e01H
	DD	0420eH
$unwind$s390_find_leftmost_one_long_register DD 010e01H
	DD	0420eH
$unwind$s390_insert_immediate_high_fullword DD 010e01H
	DD	0420eH
$unwind$s390_insert_immediate_low_fullword DD 010e01H
	DD	0420eH
$unwind$s390_load_and_test DD 010e01H
	DD	0420eH
$unwind$s390_load_and_test_long DD 010e01H
	DD	0420eH
$unwind$s390_load_byte_register DD 010e01H
	DD	0420eH
$unwind$s390_load_halfword_register DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_character DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_character_register DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_halfword DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_halfword_register DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_immediate_high_fullword DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_immediate_low_fullword DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_long_character_register DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_long_halfword_register DD 010e01H
	DD	0420eH
$unwind$s390_load_long_byte_register DD 010e01H
	DD	0420eH
$unwind$s390_load_long_fullword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_load_long_halfword_register DD 010e01H
	DD	0420eH
$unwind$s390_or_immediate_high_fullword DD 010e01H
	DD	0420eH
$unwind$s390_or_immediate_low_fullword DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_fullword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_long_fullword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_convert_utf16_to_utf32 DD 010e01H
	DD	0420eH
$unwind$s390_convert_utf32_to_utf16 DD 010e01H
	DD	0420eH
$unwind$s390_convert_utf32_to_utf8 DD 010e01H
	DD	0420eH
$unwind$s390_convert_utf8_to_utf32 DD 010e01H
	DD	0420eH
$unwind$s390_search_string_unicode DD 010e01H
	DD	0420eH
$unwind$s390_translate_and_test_reverse DD 010e01H
	DD	0420eH
$unwind$s390_multiply_add_unnormal_float_long_to_ext DD 010e01H
	DD	0420eH
$unwind$s390_multiply_add_unnormal_float_long_to_ext_high DD 010e01H
	DD	0420eH
$unwind$s390_multiply_add_unnormal_float_long_to_ext_high_reg DD 010e01H
	DD	0420eH
$unwind$s390_multiply_add_unnormal_float_long_to_ext_low DD 010e01H
	DD	0420eH
$unwind$s390_multiply_add_unnormal_float_long_to_ext_low_reg DD 010e01H
	DD	0420eH
$unwind$s390_multiply_add_unnormal_float_long_to_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_multiply_unnormal_float_long_to_ext DD 010e01H
	DD	0420eH
$unwind$s390_multiply_unnormal_float_long_to_ext_high DD 010e01H
	DD	0420eH
$unwind$s390_multiply_unnormal_float_long_to_ext_high_reg DD 010e01H
	DD	0420eH
$unwind$s390_multiply_unnormal_float_long_to_ext_low DD 010e01H
	DD	0420eH
$unwind$s390_multiply_unnormal_float_long_to_ext_low_reg DD 010e01H
	DD	0420eH
$unwind$s390_multiply_unnormal_float_long_to_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_store_clock_fast DD 010e01H
	DD	0420eH
$unwind$s390_translate_and_test_extended DD 010e01H
	DD	0420eH
$unwind$s390_translate_and_test_reverse_extended DD 010e01H
	DD	0420eH
$unwind$s390_move_with_optional_specifications DD 010e01H
	DD	0420eH
$unwind$s390_perform_timing_facility_function DD 010e01H
	DD	0420eH
$unwind$s390_extract_cpu_time DD 010e01H
	DD	0420eH
$unwind$s390_compare_and_swap_and_store DD 010e01H
	DD	0420eH
$unwind$s390_add_immediate_long_storage DD 010e01H
	DD	0420eH
$unwind$s390_add_immediate_storage DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_with_signed_immediate DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_with_signed_immediate_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_and_branch_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_and_branch_long_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_and_branch_relative_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_and_branch_relative_long_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_and_trap_long_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_and_trap_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_halfword_immediate_halfword_storage DD 010e01H
	DD	0420eH
$unwind$s390_compare_halfword_immediate_long_storage DD 010e01H
	DD	0420eH
$unwind$s390_compare_halfword_immediate_storage DD 010e01H
	DD	0420eH
$unwind$s390_compare_halfword_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_halfword_relative_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_halfword_relative_long_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_immediate_and_branch DD 010e01H
	DD	0420eH
$unwind$s390_compare_immediate_and_branch_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_immediate_and_branch_relative DD 010e01H
	DD	0420eH
$unwind$s390_compare_immediate_and_branch_relative_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_immediate_and_trap DD 010e01H
	DD	0420eH
$unwind$s390_compare_immediate_and_trap_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_and_branch_long_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_and_branch_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_and_branch_relative_long_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_and_branch_relative_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_and_trap_long_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_and_trap_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_immediate_and_branch DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_immediate_and_branch_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_immediate_and_branch_relative DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_immediate_and_branch_relative_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_immediate_and_trap_fullword DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_immediate_and_trap_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_immediate_fullword_storage DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_immediate_halfword_storage DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_immediate_long_storage DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_relative_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_relative_long_halfword DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_relative_long_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_relative_long_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_relative_long_long_halfword DD 010e01H
	DD	0420eH
$unwind$s390_compare_relative_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_relative_long_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_relative_long_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_extract_cpu_attribute DD 010e01H
	DD	0420eH
$unwind$s390_load_address_extended_y DD 010e01H
	DD	0420eH
$unwind$s390_load_and_test_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_load_halfword_relative_long DD 010e01H
	DD	0420eH
$unwind$s390_load_halfword_relative_long_long DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_halfword_relative_long DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_halfword_relative_long_long DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_relative_long_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_load_relative_long DD 010e01H
	DD	0420eH
$unwind$s390_load_relative_long_long DD 010e01H
	DD	0420eH
$unwind$s390_load_relative_long_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_move_fullword_from_halfword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_move_halfword_from_halfword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_move_long_from_halfword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_multiply_halfword_y DD 010e01H
	DD	0420eH
$unwind$s390_multiply_single_immediate_fullword DD 010e01H
	DD	0420eH
$unwind$s390_multiply_single_immediate_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_multiply_y DD 010e01H
	DD	0420eH
$unwind$s390_prefetch_data DD 010e01H
	DD	0420eH
$unwind$s390_prefetch_data_relative_long DD 010e01H
	DD	0420eH
$unwind$s390_rotate_then_and_selected_bits_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_rotate_then_exclusive_or_selected_bits_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_rotate_then_insert_selected_bits_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_rotate_then_or_selected_bits_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_store_halfword_relative_long DD 010e01H
	DD	0420eH
$unwind$s390_store_relative_long DD 010e01H
	DD	0420eH
$unwind$s390_store_relative_long_long DD 010e01H
	DD	0420eH
$unwind$s390_execute_relative_long DD 010e01H
	DD	0420eH
$unwind$s390_convert_bfp_ext_to_u32_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_bfp_ext_to_u64_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_bfp_long_to_u32_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_bfp_long_to_u64_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_bfp_short_to_u32_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_bfp_short_to_u64_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_ext_to_fix32_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_ext_to_u32_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_ext_to_u64_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_long_to_fix32_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_long_to_u32_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_long_to_u64_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_fix32_to_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_fix32_to_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_u32_to_bfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_u32_to_bfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_u32_to_bfp_short_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_u32_to_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_u32_to_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_u64_to_bfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_u64_to_bfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_u64_to_bfp_short_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_u64_to_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_u64_to_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_set_bfp_rounding_mode_3bit DD 010e01H
	DD	0420eH
$unwind$s390_load_program_parameter DD 010e01H
	DD	0420eH
$unwind$s390_set_dfp_rounding_mode DD 010e01H
	DD	0420eH
$unwind$s390_load_fpr_from_gr_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_gr_from_fpr_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_copy_sign_fpr_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_complement_fpr_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_negative_fpr_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_positive_fpr_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_fpc_and_signal DD 010e01H
	DD	0420eH
$unwind$s390_set_fpc_and_signal DD 010e01H
	DD	0420eH
$unwind$s390_add_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_add_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_compare_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_compare_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_compare_and_signal_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_compare_and_signal_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_compare_exponent_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_compare_exponent_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_fix64_to_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_fix64_to_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_sbcd128_to_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_sbcd64_to_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_ubcd128_to_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_ubcd64_to_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_ext_to_fix64_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_long_to_fix64_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_ext_to_sbcd128_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_long_to_sbcd64_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_ext_to_ubcd128_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_long_to_ubcd64_reg DD 010e01H
	DD	0420eH
$unwind$s390_divide_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_divide_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_extract_biased_exponent_dfp_ext_to_fix64_reg DD 010e01H
	DD	0420eH
$unwind$s390_extract_biased_exponent_dfp_long_to_fix64_reg DD 010e01H
	DD	0420eH
$unwind$s390_extract_significance_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_extract_significance_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_insert_biased_exponent_fix64_to_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_insert_biased_exponent_fix64_to_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_and_test_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_and_test_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_fp_int_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_fp_int_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_lengthened_dfp_long_to_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_lengthened_dfp_short_to_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_rounded_dfp_ext_to_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_load_rounded_dfp_long_to_short_reg DD 010e01H
	DD	0420eH
$unwind$s390_multiply_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_multiply_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_quantize_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_quantize_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_reround_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_reround_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_shift_coefficient_left_dfp_ext DD 010e01H
	DD	0420eH
$unwind$s390_shift_coefficient_left_dfp_long DD 010e01H
	DD	0420eH
$unwind$s390_shift_coefficient_right_dfp_ext DD 010e01H
	DD	0420eH
$unwind$s390_shift_coefficient_right_dfp_long DD 010e01H
	DD	0420eH
$unwind$s390_subtract_dfp_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_subtract_dfp_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_test_data_class_dfp_ext DD 010e01H
	DD	0420eH
$unwind$s390_test_data_class_dfp_long DD 010e01H
	DD	0420eH
$unwind$s390_test_data_class_dfp_short DD 010e01H
	DD	0420eH
$unwind$s390_test_data_group_dfp_ext DD 010e01H
	DD	0420eH
$unwind$s390_test_data_group_dfp_long DD 010e01H
	DD	0420eH
$unwind$s390_test_data_group_dfp_short DD 010e01H
	DD	0420eH
$unwind$s390_perform_floating_point_operation DD 010e01H
	DD	0420eH
$unwind$s390_add_distinct_register DD 010e01H
	DD	0420eH
$unwind$s390_add_distinct_long_register DD 010e01H
	DD	0420eH
$unwind$s390_add_distinct_halfword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_add_distinct_long_halfword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_distinct_register DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_distinct_long_register DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_distinct_signed_halfword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_distinct_long_signed_halfword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_and_distinct_register DD 010e01H
	DD	0420eH
$unwind$s390_and_distinct_long_register DD 010e01H
	DD	0420eH
$unwind$s390_exclusive_or_distinct_register DD 010e01H
	DD	0420eH
$unwind$s390_exclusive_or_distinct_long_register DD 010e01H
	DD	0420eH
$unwind$s390_or_distinct_register DD 010e01H
	DD	0420eH
$unwind$s390_or_distinct_long_register DD 010e01H
	DD	0420eH
$unwind$s390_shift_left_single_distinct DD 010e01H
	DD	0420eH
$unwind$s390_shift_left_single_logical_distinct DD 010e01H
	DD	0420eH
$unwind$s390_shift_right_single_distinct DD 010e01H
	DD	0420eH
$unwind$s390_shift_right_single_logical_distinct DD 010e01H
	DD	0420eH
$unwind$s390_subtract_distinct_register DD 010e01H
	DD	0420eH
$unwind$s390_subtract_distinct_long_register DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_distinct_register DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_distinct_long_register DD 010e01H
	DD	0420eH
$unwind$s390_add_high_high_high_register DD 010e01H
	DD	0420eH
$unwind$s390_add_high_high_low_register DD 010e01H
	DD	0420eH
$unwind$s390_add_high_immediate DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_high_high_high_register DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_high_high_low_register DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_with_signed_immediate_high DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_with_signed_immediate_high_n DD 010e01H
	DD	0420eH
$unwind$s390_branch_relative_on_count_high DD 010e01H
	DD	0420eH
$unwind$s390_compare_high_high_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_high_low_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_high_fullword DD 010e01H
	DD	0420eH
$unwind$s390_compare_high_immediate DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_high_high_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_high_low_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_high_fullword DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_high_immediate DD 010e01H
	DD	0420eH
$unwind$s390_load_byte_high DD 010e01H
	DD	0420eH
$unwind$s390_load_fullword_high DD 010e01H
	DD	0420eH
$unwind$s390_load_halfword_high DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_character_high DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_halfword_high DD 010e01H
	DD	0420eH
$unwind$s390_rotate_then_insert_selected_bits_high_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_rotate_then_insert_selected_bits_low_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_store_character_high DD 010e01H
	DD	0420eH
$unwind$s390_store_fullword_high DD 010e01H
	DD	0420eH
$unwind$s390_store_halfword_high DD 010e01H
	DD	0420eH
$unwind$s390_subtract_high_high_high_register DD 010e01H
	DD	0420eH
$unwind$s390_subtract_high_high_low_register DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_high_high_high_register DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_high_high_low_register DD 010e01H
	DD	0420eH
$unwind$s390_load_and_add DD 010e01H
	DD	0420eH
$unwind$s390_load_and_add_logical DD 010e01H
	DD	0420eH
$unwind$s390_load_and_and DD 010e01H
	DD	0420eH
$unwind$s390_load_and_exclusive_or DD 010e01H
	DD	0420eH
$unwind$s390_load_and_or DD 010e01H
	DD	0420eH
$unwind$s390_load_pair_disjoint DD 010e01H
	DD	0420eH
$unwind$s390_load_and_add_logical_long DD 010e01H
	DD	0420eH
$unwind$s390_load_and_add_long DD 010e01H
	DD	0420eH
$unwind$s390_load_and_and_long DD 010e01H
	DD	0420eH
$unwind$s390_load_and_exclusive_or_long DD 010e01H
	DD	0420eH
$unwind$s390_load_and_or_long DD 010e01H
	DD	0420eH
$unwind$s390_load_pair_disjoint_long DD 010e01H
	DD	0420eH
$unwind$s390_load_on_condition_register DD 010e01H
	DD	0420eH
$unwind$s390_load_on_condition_long_register DD 010e01H
	DD	0420eH
$unwind$s390_load_on_condition DD 010e01H
	DD	0420eH
$unwind$s390_load_on_condition_long DD 010e01H
	DD	0420eH
$unwind$s390_store_on_condition DD 010e01H
	DD	0420eH
$unwind$s390_store_on_condition_long DD 010e01H
	DD	0420eH
$unwind$s390_population_count DD 010e01H
	DD	0420eH
$unwind$s390_convert_zoned_to_dfp_long DD 010e01H
	DD	0420eH
$unwind$s390_convert_zoned_to_dfp_ext DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_long_to_zoned DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_ext_to_zoned DD 010e01H
	DD	0420eH
$unwind$s390_branch_prediction_preload DD 010e01H
	DD	0420eH
$unwind$s390_branch_prediction_relative_preload DD 010e01H
	DD	0420eH
$unwind$s390_next_instruction_access_intent DD 010e01H
	DD	0420eH
$unwind$s390_load_and_trap DD 010e01H
	DD	0420eH
$unwind$s390_load_long_and_trap DD 010e01H
	DD	0420eH
$unwind$s390_load_fullword_high_and_trap DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_long_fullword_and_trap DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_long_thirtyone_and_trap DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_and_trap DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_and_trap_long DD 010e01H
	DD	0420eH
$unwind$s390_rotate_then_insert_selected_bits_long_reg_n DD 010e01H
	DD	0420eH
$unwind$s390_perform_processor_assist DD 010e01H
	DD	0420eH
$unwind$s390_transaction_begin_constrained DD 010e01H
	DD	0420eH
$unwind$s390_load_halfword_high_immediate_on_condition DD 010e01H
	DD	0420eH
$unwind$s390_load_halfword_immediate_on_condition DD 010e01H
	DD	0420eH
$unwind$s390_load_halfword_immediate_on_condition_grande DD 010e01H
	DD	0420eH
$unwind$s390_load_high_on_condition DD 010e01H
	DD	0420eH
$unwind$s390_load_high_on_condition_register DD 010e01H
	DD	0420eH
$unwind$s390_store_high_on_condition DD 010e01H
	DD	0420eH
$unwind$s390_load_and_zero_rightmost_byte_grande DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_and_zero_rightmost_byte DD 010e01H
	DD	0420eH
$unwind$s390_load_and_zero_rightmost_byte DD 010e01H
	DD	0420eH
$unwind$s390_branch_indirect_on_condition DD 010e01H
	DD	0420eH
$unwind$s390_add_long_halfword DD 010e01H
	DD	0420eH
$unwind$s390_subtract_long_halfword DD 010e01H
	DD	0420eH
$unwind$s390_multiply_long_register DD 010e01H
	DD	0420eH
$unwind$s390_multiply_long DD 010e01H
	DD	0420eH
$unwind$s390_multiply_long_halfword DD 010e01H
	DD	0420eH
$unwind$s390_multiply_single_register_cc DD 010e01H
	DD	0420eH
$unwind$s390_multiply_single_cc DD 010e01H
	DD	0420eH
$unwind$s390_multiply_single_long_register_cc DD 010e01H
	DD	0420eH
$unwind$s390_multiply_single_long_cc DD 010e01H
	DD	0420eH
$unwind$s390_and_register_with_complement DD 010e01H
	DD	0420eH
$unwind$s390_and_register_long_with_complement DD 010e01H
	DD	0420eH
$unwind$s390_nand_register DD 010e01H
	DD	0420eH
$unwind$s390_nand_register_long DD 010e01H
	DD	0420eH
$unwind$s390_not_xor_register DD 010e01H
	DD	0420eH
$unwind$s390_not_xor_register_long DD 010e01H
	DD	0420eH
$unwind$s390_nor_register DD 010e01H
	DD	0420eH
$unwind$s390_nor_register_long DD 010e01H
	DD	0420eH
$unwind$s390_or_register_with_complement DD 010e01H
	DD	0420eH
$unwind$s390_or_register_long_with_complement DD 010e01H
	DD	0420eH
$unwind$s390_select_register DD 010e01H
	DD	0420eH
$unwind$s390_select_register_long DD 010e01H
	DD	0420eH
$unwind$s390_select_fullword_high_register DD 010e01H
	DD	0420eH
$unwind$s390_move_right_to_left DD 010e01H
	DD	0420eH
$unwind$s390_reset_reference_bits_multiple DD 010e01H
	DD	0420eH
$unwind$s390_extract_coprocessor_group_address DD 010e01H
	DD	0420eH
$unwind$s390_extract_cpu_counter DD 010e01H
	DD	0420eH
$unwind$s390_extract_peripheral_counter DD 010e01H
	DD	0420eH
$unwind$s390_load_cpu_counter_set_controls DD 010e01H
	DD	0420eH
$unwind$s390_load_peripheral_counter_set_controls DD 010e01H
	DD	0420eH
$unwind$s390_query_counter_information DD 010e01H
	DD	0420eH
$unwind$s390_set_cpu_counter DD 010e01H
	DD	0420eH
$unwind$s390_set_peripheral_counter DD 010e01H
	DD	0420eH
$unwind$s390_load_sampling_controls DD 010e01H
	DD	0420eH
$unwind$s390_query_sampling_information DD 010e01H
	DD	0420eH
$unwind$s390_transaction_begin DD 010e01H
	DD	0420eH
$unwind$s390_transaction_abort DD 010e01H
	DD	0420eH
$unwind$s390_transaction_end DD 010e01H
	DD	0420eH
$unwind$s390_nontransactional_store DD 010e01H
	DD	0420eH
$unwind$s390_extract_transaction_nesting_depth DD 010e01H
	DD	0420eH
$unwind$s390_store_hypervisor_information DD 010e01H
	DD	0420eH
$unwind$s390_perform_cryptographic_key_management_operation DD 010e01H
	DD	0420eH
$unwind$s390_cipher_message_with_cipher_feedback DD 010e01H
	DD	0420eH
$unwind$s390_cipher_message_with_output_feedback DD 010e01H
	DD	0420eH
$unwind$s390_cipher_message_with_counter DD 010e01H
	DD	0420eH
$unwind$s390_perform_cryptographic_computation DD 010e01H
	DD	0420eH
$unwind$s390_convert_packed_to_dfp_long DD 010e01H
	DD	0420eH
$unwind$s390_convert_packed_to_dfp_ext DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_long_to_packed DD 010e01H
	DD	0420eH
$unwind$s390_convert_dfp_ext_to_packed DD 010e01H
	DD	0420eH
$unwind$s390_vector_load DD 010e01H
	DD	0420eH
$unwind$s390_vector_store DD 010e01H
	DD	0420eH
$unwind$s390_vector_load_multiple DD 010e01H
	DD	0420eH
$unwind$s390_vector_store_multiple DD 010e01H
	DD	0420eH
$unwind$s390_insert_reference_bits_multiple DD 010e01H
	DD	0420eH
$unwind$s390_load_bear DD 010e01H
	DD	0420eH
$unwind$s390_store_bear DD 010e01H
	DD	0420eH
$unwind$s390_load_program_status_word_extended_y DD 010e01H
	DD	0420eH
$unwind$s390_insert_storage_key DD 010e01H
	DD	0420eH
$unwind$s390_reset_reference_bit DD 010e01H
	DD	0420eH
$unwind$s390_set_storage_key DD 010e01H
	DD	0420eH
$unwind$s390_connect_channel_set DD 010e01H
	DD	0420eH
$unwind$s390_disconnect_channel_set DD 010e01H
	DD	0420eH
$unwind$s390_load_page_table_entry_address DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_basic_freex DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_basic_fretx DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_comm_ccwproc DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_decode_first_ccw DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_decode_next_ccw DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_disp1 DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_disp2 DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_dispatch_main DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_extended_freex DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_extended_fretx DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_free_ccwstor DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_inval_ptable DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_inval_segtab DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_loc_chgshrpg DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_locate_rblock DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_locate_vblock DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_lock_page DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_prefmach_assist DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_store_level DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_tpage DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_tpage_lock DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_unlock_page DD 010e01H
	DD	0420eH
$unwind$s390_ecpsvm_unxlate_ccw DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_carry_long DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_carry_long_register DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_long DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_add_logical_long_register DD 010e01H
	DD	0420eH
$unwind$s390_add_long DD 010e01H
	DD	0420eH
$unwind$s390_add_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_add_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_add_long_halfword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_add_long_register DD 010e01H
	DD	0420eH
$unwind$s390_and_immediate_high_high DD 010e01H
	DD	0420eH
$unwind$s390_and_immediate_high_low DD 010e01H
	DD	0420eH
$unwind$s390_and_immediate_low_high DD 010e01H
	DD	0420eH
$unwind$s390_and_immediate_low_low DD 010e01H
	DD	0420eH
$unwind$s390_and_long DD 010e01H
	DD	0420eH
$unwind$s390_and_long_register DD 010e01H
	DD	0420eH
$unwind$s390_branch_on_count_long DD 010e01H
	DD	0420eH
$unwind$s390_branch_on_count_long_register DD 010e01H
	DD	0420eH
$unwind$s390_branch_on_index_high_long DD 010e01H
	DD	0420eH
$unwind$s390_branch_on_index_low_or_equal_long DD 010e01H
	DD	0420eH
$unwind$s390_branch_relative_on_count_long DD 010e01H
	DD	0420eH
$unwind$s390_branch_relative_on_index_high_long DD 010e01H
	DD	0420eH
$unwind$s390_branch_relative_on_index_low_or_equal_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_and_swap_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_double_and_swap_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_characters_under_mask_high DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_logical_long_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_long DD 010e01H
	DD	0420eH
$unwind$s390_compare_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_compare_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_compare_long_halfword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_compare_long_register DD 010e01H
	DD	0420eH
$unwind$s390_convert_fix64_to_float_ext_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_fix64_to_float_long_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_fix64_to_float_short_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_float_ext_to_fix64_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_float_long_to_fix64_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_float_short_to_fix64_reg DD 010e01H
	DD	0420eH
$unwind$s390_convert_to_binary_long DD 010e01H
	DD	0420eH
$unwind$s390_convert_to_decimal_long DD 010e01H
	DD	0420eH
$unwind$s390_divide_logical_long DD 010e01H
	DD	0420eH
$unwind$s390_divide_logical_long_register DD 010e01H
	DD	0420eH
$unwind$s390_divide_single_long DD 010e01H
	DD	0420eH
$unwind$s390_divide_single_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_divide_single_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_divide_single_long_register DD 010e01H
	DD	0420eH
$unwind$s390_exclusive_or_long DD 010e01H
	DD	0420eH
$unwind$s390_exclusive_or_long_register DD 010e01H
	DD	0420eH
$unwind$s390_extract_and_set_extended_authority DD 010e01H
	DD	0420eH
$unwind$s390_extract_stacked_registers_long DD 010e01H
	DD	0420eH
$unwind$s390_insert_characters_under_mask_high DD 010e01H
	DD	0420eH
$unwind$s390_insert_immediate_high_high DD 010e01H
	DD	0420eH
$unwind$s390_insert_immediate_high_low DD 010e01H
	DD	0420eH
$unwind$s390_insert_immediate_low_high DD 010e01H
	DD	0420eH
$unwind$s390_insert_immediate_low_low DD 010e01H
	DD	0420eH
$unwind$s390_load_and_test_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_load_and_test_long_register DD 010e01H
	DD	0420eH
$unwind$s390_load_complement_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_load_complement_long_register DD 010e01H
	DD	0420eH
$unwind$s390_load_control_long DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_immediate_high_high DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_immediate_high_low DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_immediate_low_high DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_immediate_low_low DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_long_character DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_long_halfword DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_long_thirtyone DD 010e01H
	DD	0420eH
$unwind$s390_load_logical_long_thirtyone_register DD 010e01H
	DD	0420eH
$unwind$s390_load_long DD 010e01H
	DD	0420eH
$unwind$s390_load_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_load_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_load_long_halfword DD 010e01H
	DD	0420eH
$unwind$s390_load_long_halfword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_load_long_register DD 010e01H
	DD	0420eH
$unwind$s390_load_multiple_disjoint DD 010e01H
	DD	0420eH
$unwind$s390_load_multiple_high DD 010e01H
	DD	0420eH
$unwind$s390_load_multiple_long DD 010e01H
	DD	0420eH
$unwind$s390_load_negative_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_load_negative_long_register DD 010e01H
	DD	0420eH
$unwind$s390_load_pair_from_quadword DD 010e01H
	DD	0420eH
$unwind$s390_load_positive_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_load_positive_long_register DD 010e01H
	DD	0420eH
$unwind$s390_load_program_status_word_extended DD 010e01H
	DD	0420eH
$unwind$s390_load_real_address_long DD 010e01H
	DD	0420eH
$unwind$s390_load_reversed_long DD 010e01H
	DD	0420eH
$unwind$s390_load_reversed_long_register DD 010e01H
	DD	0420eH
$unwind$s390_load_using_real_address_long DD 010e01H
	DD	0420eH
$unwind$s390_multiply_logical_long DD 010e01H
	DD	0420eH
$unwind$s390_multiply_logical_long_register DD 010e01H
	DD	0420eH
$unwind$s390_multiply_long_halfword_immediate DD 010e01H
	DD	0420eH
$unwind$s390_multiply_single_long DD 010e01H
	DD	0420eH
$unwind$s390_multiply_single_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_multiply_single_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_multiply_single_long_register DD 010e01H
	DD	0420eH
$unwind$s390_or_immediate_high_high DD 010e01H
	DD	0420eH
$unwind$s390_or_immediate_high_low DD 010e01H
	DD	0420eH
$unwind$s390_or_immediate_low_high DD 010e01H
	DD	0420eH
$unwind$s390_or_immediate_low_low DD 010e01H
	DD	0420eH
$unwind$s390_or_long DD 010e01H
	DD	0420eH
$unwind$s390_or_long_register DD 010e01H
	DD	0420eH
$unwind$s390_rotate_left_single_logical_long DD 010e01H
	DD	0420eH
$unwind$s390_set_addressing_mode_64 DD 010e01H
	DD	0420eH
$unwind$s390_shift_left_single_logical_long DD 010e01H
	DD	0420eH
$unwind$s390_shift_left_single_long DD 010e01H
	DD	0420eH
$unwind$s390_shift_right_single_logical_long DD 010e01H
	DD	0420eH
$unwind$s390_shift_right_single_long DD 010e01H
	DD	0420eH
$unwind$s390_store_characters_under_mask_high DD 010e01H
	DD	0420eH
$unwind$s390_store_control_long DD 010e01H
	DD	0420eH
$unwind$s390_store_long DD 010e01H
	DD	0420eH
$unwind$s390_store_multiple_high DD 010e01H
	DD	0420eH
$unwind$s390_store_multiple_long DD 010e01H
	DD	0420eH
$unwind$s390_store_pair_to_quadword DD 010e01H
	DD	0420eH
$unwind$s390_store_real_address DD 010e01H
	DD	0420eH
$unwind$s390_store_reversed_long DD 010e01H
	DD	0420eH
$unwind$s390_store_using_real_address_long DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_borrow_long DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_borrow_long_register DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_long DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_subtract_logical_long_register DD 010e01H
	DD	0420eH
$unwind$s390_subtract_long DD 010e01H
	DD	0420eH
$unwind$s390_subtract_long_fullword DD 010e01H
	DD	0420eH
$unwind$s390_subtract_long_fullword_register DD 010e01H
	DD	0420eH
$unwind$s390_subtract_long_register DD 010e01H
	DD	0420eH
$unwind$s390_test_under_mask_high_high DD 010e01H
	DD	0420eH
$unwind$s390_test_under_mask_high_low DD 010e01H
	DD	0420eH
$unwind$s390_trace_long DD 010e01H
	DD	0420eH
$unwind$s390_set_queue_buffer_state DD 010e01H
	DD	0420eH
$unwind$s390_extract_queue_buffer_state DD 010e01H
	DD	0420eH
$unwind$s390_start_io DD 010e01H
	DD	0420eH
$unwind$s390_test_io DD 010e01H
	DD	0420eH
$unwind$s390_halt_io DD 010e01H
	DD	0420eH
$unwind$s390_test_channel DD 010e01H
	DD	0420eH
$unwind$s390_store_channel_id DD 010e01H
	DD	0420eH
$unwind$s390_v_and_to_vmr DD 010e01H
	DD	0420eH
$unwind$s390_v_clear_vr DD 010e01H
	DD	0420eH
$unwind$s390_v_complement_vmr DD 010e01H
	DD	0420eH
$unwind$s390_v_count_left_zeros_in_vmr DD 010e01H
	DD	0420eH
$unwind$s390_v_count_ones_in_vmr DD 010e01H
	DD	0420eH
$unwind$s390_v_exclusive_or_to_vmr DD 010e01H
	DD	0420eH
$unwind$s390_v_extract_vct DD 010e01H
	DD	0420eH
$unwind$s390_v_extract_vector_modes DD 010e01H
	DD	0420eH
$unwind$s390_v_load_vct_from_address DD 010e01H
	DD	0420eH
$unwind$s390_v_load_vix_from_address DD 010e01H
	DD	0420eH
$unwind$s390_v_load_vmr DD 010e01H
	DD	0420eH
$unwind$s390_v_load_vmr_complement DD 010e01H
	DD	0420eH
$unwind$s390_v_or_to_vmr DD 010e01H
	DD	0420eH
$unwind$s390_v_restore_vac DD 010e01H
	DD	0420eH
$unwind$s390_v_restore_vmr DD 010e01H
	DD	0420eH
$unwind$s390_v_restore_vr DD 010e01H
	DD	0420eH
$unwind$s390_v_restore_vsr DD 010e01H
	DD	0420eH
$unwind$s390_v_save_changed_vr DD 010e01H
	DD	0420eH
$unwind$s390_v_save_vac DD 010e01H
	DD	0420eH
$unwind$s390_v_save_vmr DD 010e01H
	DD	0420eH
$unwind$s390_v_save_vr DD 010e01H
	DD	0420eH
$unwind$s390_v_save_vsr DD 010e01H
	DD	0420eH
$unwind$s390_v_set_vector_mask_mode DD 010e01H
	DD	0420eH
$unwind$s390_v_store_vector_parameters DD 010e01H
	DD	0420eH
$unwind$s390_v_store_vmr DD 010e01H
	DD	0420eH
$unwind$s390_v_test_vmr DD 010e01H
	DD	0420eH
$unwind$s390_store_cpu_counter_multiple DD 010e01H
	DD	0420eH
$unwind$s390_set_vector_summary DD 010e01H
	DD	0420eH
$unwind$s390_tcpip DD 010e01H
	DD	0420eH
$unwind$s390_extract_and_set_storage_attributes DD 010e01H
	DD	0420eH
$unwind$s390_execute_opcode_e3________xx DD 010e01H
	DD	0620eH
$unwind$s390_execute_opcode_e7________xx DD 010e01H
	DD	0620eH
$unwind$s390_execute_opcode_eb________xx DD 010e01H
	DD	0620eH
$unwind$s390_execute_opcode_ec________xx DD 010e01H
	DD	0620eH
$unwind$s390_execute_opcode_ed________xx DD 010e01H
	DD	0620eH
$unwind$z900_cipher_message DD 010e01H
	DD	0420eH
$unwind$z900_cipher_message_with_chaining DD 010e01H
	DD	0420eH
$unwind$z900_compute_intermediate_message_digest DD 010e01H
	DD	0420eH
$unwind$z900_compute_last_message_digest DD 010e01H
	DD	0420eH
$unwind$z900_compute_message_authentication_code DD 010e01H
	DD	0420eH
$unwind$z900_perform_cryptographic_key_management_operation DD 010e01H
	DD	0420eH
$unwind$z900_perform_cryptographic_computation DD 010e01H
	DD	0420eH
$unwind$z900_cipher_message_with_cipher_feedback DD 010e01H
	DD	0420eH
$unwind$z900_cipher_message_with_output_feedback DD 010e01H
	DD	0420eH
$unwind$z900_cipher_message_with_counter DD 010e01H
	DD	0420eH
$unwind$z900_operation_exception DD 010e01H
	DD	0820eH
$unwind$z900_extract_coprocessor_group_address DD 010e01H
	DD	0420eH
$unwind$z900_extract_cpu_counter DD 010e01H
	DD	0420eH
$unwind$z900_extract_peripheral_counter DD 010e01H
	DD	0420eH
$unwind$z900_load_cpu_counter_set_controls DD 010e01H
	DD	0420eH
$unwind$z900_load_peripheral_counter_set_controls DD 010e01H
	DD	0420eH
$unwind$z900_query_counter_information DD 010e01H
	DD	0420eH
$unwind$z900_set_cpu_counter DD 010e01H
	DD	0420eH
$unwind$z900_set_peripheral_counter DD 010e01H
	DD	0420eH
$unwind$z900_load_sampling_controls DD 010e01H
	DD	0420eH
$unwind$z900_query_sampling_information DD 010e01H
	DD	0420eH
$unwind$z900_insert_storage_key DD 010e01H
	DD	0420eH
$unwind$z900_reset_reference_bit DD 010e01H
	DD	0420eH
$unwind$z900_set_storage_key DD 010e01H
	DD	0420eH
$unwind$z900_connect_channel_set DD 010e01H
	DD	0420eH
$unwind$z900_disconnect_channel_set DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_basic_freex DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_basic_fretx DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_comm_ccwproc DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_decode_first_ccw DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_decode_next_ccw DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_disp1 DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_disp2 DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_dispatch_main DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_extended_freex DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_extended_fretx DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_free_ccwstor DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_inval_ptable DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_inval_segtab DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_loc_chgshrpg DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_locate_rblock DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_locate_vblock DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_lock_page DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_prefmach_assist DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_store_level DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_tpage DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_tpage_lock DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_unlock_page DD 010e01H
	DD	0420eH
$unwind$z900_ecpsvm_unxlate_ccw DD 010e01H
	DD	0420eH
$unwind$z900_start_io DD 010e01H
	DD	0420eH
$unwind$z900_test_io DD 010e01H
	DD	0420eH
$unwind$z900_halt_io DD 010e01H
	DD	0420eH
$unwind$z900_test_channel DD 010e01H
	DD	0420eH
$unwind$z900_store_channel_id DD 010e01H
	DD	0420eH
$unwind$z900_v_and_to_vmr DD 010e01H
	DD	0420eH
$unwind$z900_v_clear_vr DD 010e01H
	DD	0420eH
$unwind$z900_v_complement_vmr DD 010e01H
	DD	0420eH
$unwind$z900_v_count_left_zeros_in_vmr DD 010e01H
	DD	0420eH
$unwind$z900_v_count_ones_in_vmr DD 010e01H
	DD	0420eH
$unwind$z900_v_exclusive_or_to_vmr DD 010e01H
	DD	0420eH
$unwind$z900_v_extract_vct DD 010e01H
	DD	0420eH
$unwind$z900_v_extract_vector_modes DD 010e01H
	DD	0420eH
$unwind$z900_v_load_vct_from_address DD 010e01H
	DD	0420eH
$unwind$z900_v_load_vix_from_address DD 010e01H
	DD	0420eH
$unwind$z900_v_load_vmr DD 010e01H
	DD	0420eH
$unwind$z900_v_load_vmr_complement DD 010e01H
	DD	0420eH
$unwind$z900_v_or_to_vmr DD 010e01H
	DD	0420eH
$unwind$z900_v_restore_vac DD 010e01H
	DD	0420eH
$unwind$z900_v_restore_vmr DD 010e01H
	DD	0420eH
$unwind$z900_v_restore_vr DD 010e01H
	DD	0420eH
$unwind$z900_v_restore_vsr DD 010e01H
	DD	0420eH
$unwind$z900_v_save_changed_vr DD 010e01H
	DD	0420eH
$unwind$z900_v_save_vac DD 010e01H
	DD	0420eH
$unwind$z900_v_save_vmr DD 010e01H
	DD	0420eH
$unwind$z900_v_save_vr DD 010e01H
	DD	0420eH
$unwind$z900_v_save_vsr DD 010e01H
	DD	0420eH
$unwind$z900_v_set_vector_mask_mode DD 010e01H
	DD	0420eH
$unwind$z900_v_store_vector_parameters DD 010e01H
	DD	0420eH
$unwind$z900_v_store_vmr DD 010e01H
	DD	0420eH
$unwind$z900_v_test_vmr DD 010e01H
	DD	0420eH
$unwind$z900_store_cpu_counter_multiple DD 010e01H
	DD	0420eH
$unwind$z900_tcpip DD 010e01H
	DD	0420eH
$unwind$z900_execute_opcode_e3________xx DD 010e01H
	DD	0620eH
$unwind$z900_execute_opcode_e7________xx DD 010e01H
	DD	0620eH
$unwind$z900_execute_opcode_eb________xx DD 010e01H
	DD	0620eH
$unwind$z900_execute_opcode_ec________xx DD 010e01H
	DD	0620eH
$unwind$z900_execute_opcode_ed________xx DD 010e01H
	DD	0620eH
$unwind$iprint_ASMFMT_b2xx DD 011701H
	DD	08217H
$unwind$iprint_ASMFMT_01xx DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_a5_x DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_a7_x DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_b3xx DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_b9xx DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_c0_x DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_c2_x DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_c4_x DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_c6_x DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_c8_x DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_cc_x DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_e3xx DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_e5xx DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_e7xx DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_e6xx DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_ebxx DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_ecxx DD 011701H
	DD	06217H
$unwind$iprint_ASMFMT_edxx DD 011701H
	DD	06217H
$unwind$replace_opcode_xx DD 011201H
	DD	02212H
$unwind$replace_opcode_xxxx DD 011701H
	DD	02217H
$unwind$replace_opcode_xx_x DD 011701H
	DD	02217H
$unwind$replace_opcode_xx________xx DD 011701H
	DD	02217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv70 = 0
oldinst$ = 8
arch$ = 32
inst$ = 40
opcode1$ = 48
opcode2$ = 56
replace_opcode_xx________xx PROC

; 7143 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 18	 sub	 rsp, 24

; 7144 :   INSTR_FUNC  oldinst   = NULL;

  00017	48 c7 44 24 08
	00 00 00 00	 mov	 QWORD PTR oldinst$[rsp], 0

; 7145 : 
; 7146 :     if (0
; 7147 :         || !inst
; 7148 :         || arch < 0
; 7149 :         || arch >= NUM_GEN_ARCHS
; 7150 :         || opcode2 < 0
; 7151 :         || opcode2 > 0xff

  00020	33 c0		 xor	 eax, eax
  00022	85 c0		 test	 eax, eax
  00024	75 27		 jne	 SHORT $LN5@replace_op
  00026	48 83 7c 24 28
	00		 cmp	 QWORD PTR inst$[rsp], 0
  0002c	74 1f		 je	 SHORT $LN5@replace_op
  0002e	83 7c 24 20 00	 cmp	 DWORD PTR arch$[rsp], 0
  00033	7c 18		 jl	 SHORT $LN5@replace_op
  00035	83 7c 24 20 03	 cmp	 DWORD PTR arch$[rsp], 3
  0003a	7d 11		 jge	 SHORT $LN5@replace_op
  0003c	83 7c 24 38 00	 cmp	 DWORD PTR opcode2$[rsp], 0
  00041	7c 0a		 jl	 SHORT $LN5@replace_op
  00043	81 7c 24 38 ff
	00 00 00	 cmp	 DWORD PTR opcode2$[rsp], 255 ; 000000ffH
  0004b	7e 07		 jle	 SHORT $LN4@replace_op
$LN5@replace_op:

; 7152 :     )
; 7153 :         return NULL;

  0004d	33 c0		 xor	 eax, eax
  0004f	e9 ec 01 00 00	 jmp	 $LN1@replace_op
$LN4@replace_op:

; 7154 : 
; 7155 :     switch (opcode1)

  00054	8b 44 24 30	 mov	 eax, DWORD PTR opcode1$[rsp]
  00058	89 04 24	 mov	 DWORD PTR tv70[rsp], eax
  0005b	81 3c 24 e3 00
	00 00		 cmp	 DWORD PTR tv70[rsp], 227 ; 000000e3H
  00062	74 35		 je	 SHORT $LN6@replace_op
  00064	81 3c 24 e7 00
	00 00		 cmp	 DWORD PTR tv70[rsp], 231 ; 000000e7H
  0006b	74 7f		 je	 SHORT $LN7@replace_op
  0006d	81 3c 24 eb 00
	00 00		 cmp	 DWORD PTR tv70[rsp], 235 ; 000000ebH
  00074	0f 84 c5 00 00
	00		 je	 $LN8@replace_op
  0007a	81 3c 24 ec 00
	00 00		 cmp	 DWORD PTR tv70[rsp], 236 ; 000000ecH
  00081	0f 84 0b 01 00
	00		 je	 $LN9@replace_op
  00087	81 3c 24 ed 00
	00 00		 cmp	 DWORD PTR tv70[rsp], 237 ; 000000edH
  0008e	0f 84 4e 01 00
	00		 je	 $LN10@replace_op
  00094	e9 99 01 00 00	 jmp	 $LN11@replace_op
$LN6@replace_op:

; 7156 :     {
; 7157 :         case 0xe3:
; 7158 :         {
; 7159 : 
; 7160 : #if defined( OPTION_OPTINST) && !defined( OPTION_NO_E3_OPTINST )
; 7161 :   #error E3 instruction optimization is not supported! (yet?)
; 7162 : #endif
; 7163 :             oldinst = runtime_opcode_e3________xx[arch][opcode2];

  00099	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  0009e	48 69 c0 00 08
	00 00		 imul	 rax, rax, 2048		; 00000800H
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_e3________xx
  000ac	48 03 c8	 add	 rcx, rax
  000af	48 8b c1	 mov	 rax, rcx
  000b2	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR opcode2$[rsp]
  000b7	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000bb	48 89 44 24 08	 mov	 QWORD PTR oldinst$[rsp], rax

; 7164 :                       runtime_opcode_e3________xx[arch][opcode2] = inst;

  000c0	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  000c5	48 69 c0 00 08
	00 00		 imul	 rax, rax, 2048		; 00000800H
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_e3________xx
  000d3	48 03 c8	 add	 rcx, rax
  000d6	48 8b c1	 mov	 rax, rcx
  000d9	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR opcode2$[rsp]
  000de	48 8b 54 24 28	 mov	 rdx, QWORD PTR inst$[rsp]
  000e3	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 7165 :             break;

  000e7	e9 4f 01 00 00	 jmp	 $LN2@replace_op
$LN7@replace_op:

; 7166 :         }
; 7167 :         case 0xe7:
; 7168 :         {
; 7169 :             oldinst = runtime_opcode_e7________xx[arch][opcode2];

  000ec	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  000f1	48 69 c0 00 08
	00 00		 imul	 rax, rax, 2048		; 00000800H
  000f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_e7________xx
  000ff	48 03 c8	 add	 rcx, rax
  00102	48 8b c1	 mov	 rax, rcx
  00105	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR opcode2$[rsp]
  0010a	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0010e	48 89 44 24 08	 mov	 QWORD PTR oldinst$[rsp], rax

; 7170 :             runtime_opcode_e7________xx[arch][opcode2] = inst;

  00113	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  00118	48 69 c0 00 08
	00 00		 imul	 rax, rax, 2048		; 00000800H
  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_e7________xx
  00126	48 03 c8	 add	 rcx, rax
  00129	48 8b c1	 mov	 rax, rcx
  0012c	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR opcode2$[rsp]
  00131	48 8b 54 24 28	 mov	 rdx, QWORD PTR inst$[rsp]
  00136	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 7171 :             break;

  0013a	e9 fc 00 00 00	 jmp	 $LN2@replace_op
$LN8@replace_op:

; 7172 :         }
; 7173 :         case 0xeb:
; 7174 :         {
; 7175 :             oldinst = runtime_opcode_eb________xx[arch][opcode2];

  0013f	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  00144	48 69 c0 00 08
	00 00		 imul	 rax, rax, 2048		; 00000800H
  0014b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_eb________xx
  00152	48 03 c8	 add	 rcx, rax
  00155	48 8b c1	 mov	 rax, rcx
  00158	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR opcode2$[rsp]
  0015d	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00161	48 89 44 24 08	 mov	 QWORD PTR oldinst$[rsp], rax

; 7176 :                       runtime_opcode_eb________xx[arch][opcode2] = inst;

  00166	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  0016b	48 69 c0 00 08
	00 00		 imul	 rax, rax, 2048		; 00000800H
  00172	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_eb________xx
  00179	48 03 c8	 add	 rcx, rax
  0017c	48 8b c1	 mov	 rax, rcx
  0017f	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR opcode2$[rsp]
  00184	48 8b 54 24 28	 mov	 rdx, QWORD PTR inst$[rsp]
  00189	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 7177 :             break;

  0018d	e9 a9 00 00 00	 jmp	 $LN2@replace_op
$LN9@replace_op:

; 7178 :         }
; 7179 :         case 0xec:
; 7180 :         {
; 7181 :             oldinst = runtime_opcode_ec________xx[arch][opcode2];

  00192	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  00197	48 69 c0 00 08
	00 00		 imul	 rax, rax, 2048		; 00000800H
  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_ec________xx
  001a5	48 03 c8	 add	 rcx, rax
  001a8	48 8b c1	 mov	 rax, rcx
  001ab	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR opcode2$[rsp]
  001b0	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  001b4	48 89 44 24 08	 mov	 QWORD PTR oldinst$[rsp], rax

; 7182 :                       runtime_opcode_ec________xx[arch][opcode2] = inst;

  001b9	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  001be	48 69 c0 00 08
	00 00		 imul	 rax, rax, 2048		; 00000800H
  001c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_ec________xx
  001cc	48 03 c8	 add	 rcx, rax
  001cf	48 8b c1	 mov	 rax, rcx
  001d2	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR opcode2$[rsp]
  001d7	48 8b 54 24 28	 mov	 rdx, QWORD PTR inst$[rsp]
  001dc	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 7183 :             break;

  001e0	eb 59		 jmp	 SHORT $LN2@replace_op
$LN10@replace_op:

; 7184 :         }
; 7185 :         case 0xed:
; 7186 :         {
; 7187 :             oldinst = runtime_opcode_ed________xx[arch][opcode2];

  001e2	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  001e7	48 69 c0 00 08
	00 00		 imul	 rax, rax, 2048		; 00000800H
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_ed________xx
  001f5	48 03 c8	 add	 rcx, rax
  001f8	48 8b c1	 mov	 rax, rcx
  001fb	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR opcode2$[rsp]
  00200	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00204	48 89 44 24 08	 mov	 QWORD PTR oldinst$[rsp], rax

; 7188 :                       runtime_opcode_ed________xx[arch][opcode2] = inst;

  00209	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  0020e	48 69 c0 00 08
	00 00		 imul	 rax, rax, 2048		; 00000800H
  00215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_ed________xx
  0021c	48 03 c8	 add	 rcx, rax
  0021f	48 8b c1	 mov	 rax, rcx
  00222	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR opcode2$[rsp]
  00227	48 8b 54 24 28	 mov	 rdx, QWORD PTR inst$[rsp]
  0022c	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 7189 :             break;

  00230	eb 09		 jmp	 SHORT $LN2@replace_op
$LN11@replace_op:

; 7190 :         }
; 7191 :         default:
; 7192 :         {
; 7193 :             oldinst = NULL;

  00232	48 c7 44 24 08
	00 00 00 00	 mov	 QWORD PTR oldinst$[rsp], 0
$LN2@replace_op:

; 7194 :             break;
; 7195 :         }
; 7196 :     }
; 7197 :     return oldinst;

  0023b	48 8b 44 24 08	 mov	 rax, QWORD PTR oldinst$[rsp]
$LN1@replace_op:

; 7198 : }

  00240	48 83 c4 18	 add	 rsp, 24
  00244	c3		 ret	 0
replace_opcode_xx________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
i$ = 0
oldinst$ = 8
arch$ = 32
inst$ = 40
opcode1$ = 48
opcode2$ = 56
replace_opcode_xx_x PROC

; 7119 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 18	 sub	 rsp, 24

; 7120 :   int i;
; 7121 :   INSTR_FUNC oldinst;
; 7122 : 
; 7123 :   if(arch < 0 || arch >= NUM_GEN_ARCHS)

  00017	83 7c 24 20 00	 cmp	 DWORD PTR arch$[rsp], 0
  0001c	7c 07		 jl	 SHORT $LN6@replace_op
  0001e	83 7c 24 20 03	 cmp	 DWORD PTR arch$[rsp], 3
  00023	7c 07		 jl	 SHORT $LN5@replace_op
$LN6@replace_op:

; 7124 :     return(NULL);

  00025	33 c0		 xor	 eax, eax
  00027	e9 c4 00 00 00	 jmp	 $LN1@replace_op
$LN5@replace_op:

; 7125 : 
; 7126 :   if(opcode1 < 0 || opcode1 > 0xff || opcode2 < 0 || opcode2 > 0xf)

  0002c	83 7c 24 30 00	 cmp	 DWORD PTR opcode1$[rsp], 0
  00031	7c 18		 jl	 SHORT $LN8@replace_op
  00033	81 7c 24 30 ff
	00 00 00	 cmp	 DWORD PTR opcode1$[rsp], 255 ; 000000ffH
  0003b	7f 0e		 jg	 SHORT $LN8@replace_op
  0003d	83 7c 24 38 00	 cmp	 DWORD PTR opcode2$[rsp], 0
  00042	7c 07		 jl	 SHORT $LN8@replace_op
  00044	83 7c 24 38 0f	 cmp	 DWORD PTR opcode2$[rsp], 15
  00049	7e 07		 jle	 SHORT $LN7@replace_op
$LN8@replace_op:

; 7127 :     return(NULL);

  0004b	33 c0		 xor	 eax, eax
  0004d	e9 9e 00 00 00	 jmp	 $LN1@replace_op
$LN7@replace_op:

; 7128 : 
; 7129 :   if(!inst)

  00052	48 83 7c 24 28
	00		 cmp	 QWORD PTR inst$[rsp], 0
  00058	75 07		 jne	 SHORT $LN9@replace_op

; 7130 :     return(NULL);

  0005a	33 c0		 xor	 eax, eax
  0005c	e9 8f 00 00 00	 jmp	 $LN1@replace_op
$LN9@replace_op:

; 7131 : 
; 7132 :   oldinst = runtime_opcode_xxxx[arch][opcode1 * 256 + opcode2];

  00061	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  00066	48 69 c0 00 00
	08 00		 imul	 rax, rax, 524288	; 00080000H
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_xxxx
  00074	48 03 c8	 add	 rcx, rax
  00077	48 8b c1	 mov	 rax, rcx
  0007a	69 4c 24 30 00
	01 00 00	 imul	 ecx, DWORD PTR opcode1$[rsp], 256 ; 00000100H
  00082	03 4c 24 38	 add	 ecx, DWORD PTR opcode2$[rsp]
  00086	48 63 c9	 movsxd	 rcx, ecx
  00089	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0008d	48 89 44 24 08	 mov	 QWORD PTR oldinst$[rsp], rax

; 7133 : 
; 7134 :   for(i = 0; i < 16; i++)

  00092	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00099	eb 08		 jmp	 SHORT $LN4@replace_op
$LN2@replace_op:
  0009b	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0009e	ff c0		 inc	 eax
  000a0	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@replace_op:
  000a3	83 3c 24 10	 cmp	 DWORD PTR i$[rsp], 16
  000a7	7d 42		 jge	 SHORT $LN3@replace_op

; 7135 :     runtime_opcode_xxxx[arch][opcode1 * 256 + i * 16 + opcode2] = inst;

  000a9	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  000ae	48 69 c0 00 00
	08 00		 imul	 rax, rax, 524288	; 00080000H
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_xxxx
  000bc	48 03 c8	 add	 rcx, rax
  000bf	48 8b c1	 mov	 rax, rcx
  000c2	69 4c 24 30 00
	01 00 00	 imul	 ecx, DWORD PTR opcode1$[rsp], 256 ; 00000100H
  000ca	6b 14 24 10	 imul	 edx, DWORD PTR i$[rsp], 16
  000ce	44 8b 44 24 38	 mov	 r8d, DWORD PTR opcode2$[rsp]
  000d3	44 03 c1	 add	 r8d, ecx
  000d6	41 8b c8	 mov	 ecx, r8d
  000d9	03 d1		 add	 edx, ecx
  000db	8b ca		 mov	 ecx, edx
  000dd	48 63 c9	 movsxd	 rcx, ecx
  000e0	48 8b 54 24 28	 mov	 rdx, QWORD PTR inst$[rsp]
  000e5	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  000e9	eb b0		 jmp	 SHORT $LN2@replace_op
$LN3@replace_op:

; 7136 : 
; 7137 :   return(oldinst);

  000eb	48 8b 44 24 08	 mov	 rax, QWORD PTR oldinst$[rsp]
$LN1@replace_op:

; 7138 : }

  000f0	48 83 c4 18	 add	 rsp, 24
  000f4	c3		 ret	 0
replace_opcode_xx_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
oldinst$ = 0
arch$ = 32
inst$ = 40
opcode1$ = 48
opcode2$ = 56
replace_opcode_xxxx PROC

; 7098 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 18	 sub	 rsp, 24

; 7099 :   INSTR_FUNC oldinst;
; 7100 : 
; 7101 :   if(arch < 0 || arch >= NUM_GEN_ARCHS)

  00017	83 7c 24 20 00	 cmp	 DWORD PTR arch$[rsp], 0
  0001c	7c 07		 jl	 SHORT $LN3@replace_op
  0001e	83 7c 24 20 03	 cmp	 DWORD PTR arch$[rsp], 3
  00023	7c 07		 jl	 SHORT $LN2@replace_op
$LN3@replace_op:

; 7102 :     return(NULL);

  00025	33 c0		 xor	 eax, eax
  00027	e9 97 00 00 00	 jmp	 $LN1@replace_op
$LN2@replace_op:

; 7103 : 
; 7104 :   if(opcode1 < 0 || opcode1 > 0xff || opcode2 < 0 || opcode2 > 0xff)

  0002c	83 7c 24 30 00	 cmp	 DWORD PTR opcode1$[rsp], 0
  00031	7c 1b		 jl	 SHORT $LN5@replace_op
  00033	81 7c 24 30 ff
	00 00 00	 cmp	 DWORD PTR opcode1$[rsp], 255 ; 000000ffH
  0003b	7f 11		 jg	 SHORT $LN5@replace_op
  0003d	83 7c 24 38 00	 cmp	 DWORD PTR opcode2$[rsp], 0
  00042	7c 0a		 jl	 SHORT $LN5@replace_op
  00044	81 7c 24 38 ff
	00 00 00	 cmp	 DWORD PTR opcode2$[rsp], 255 ; 000000ffH
  0004c	7e 04		 jle	 SHORT $LN4@replace_op
$LN5@replace_op:

; 7105 :     return(NULL);

  0004e	33 c0		 xor	 eax, eax
  00050	eb 71		 jmp	 SHORT $LN1@replace_op
$LN4@replace_op:

; 7106 : 
; 7107 :   if(!inst)

  00052	48 83 7c 24 28
	00		 cmp	 QWORD PTR inst$[rsp], 0
  00058	75 04		 jne	 SHORT $LN6@replace_op

; 7108 :     return(NULL);

  0005a	33 c0		 xor	 eax, eax
  0005c	eb 65		 jmp	 SHORT $LN1@replace_op
$LN6@replace_op:

; 7109 : 
; 7110 :   oldinst = runtime_opcode_xxxx[arch][opcode1 * 256 + opcode2];

  0005e	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  00063	48 69 c0 00 00
	08 00		 imul	 rax, rax, 524288	; 00080000H
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_xxxx
  00071	48 03 c8	 add	 rcx, rax
  00074	48 8b c1	 mov	 rax, rcx
  00077	69 4c 24 30 00
	01 00 00	 imul	 ecx, DWORD PTR opcode1$[rsp], 256 ; 00000100H
  0007f	03 4c 24 38	 add	 ecx, DWORD PTR opcode2$[rsp]
  00083	48 63 c9	 movsxd	 rcx, ecx
  00086	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0008a	48 89 04 24	 mov	 QWORD PTR oldinst$[rsp], rax

; 7111 :   runtime_opcode_xxxx[arch][opcode1 * 256 + opcode2] = inst;

  0008e	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  00093	48 69 c0 00 00
	08 00		 imul	 rax, rax, 524288	; 00080000H
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_xxxx
  000a1	48 03 c8	 add	 rcx, rax
  000a4	48 8b c1	 mov	 rax, rcx
  000a7	69 4c 24 30 00
	01 00 00	 imul	 ecx, DWORD PTR opcode1$[rsp], 256 ; 00000100H
  000af	03 4c 24 38	 add	 ecx, DWORD PTR opcode2$[rsp]
  000b3	48 63 c9	 movsxd	 rcx, ecx
  000b6	48 8b 54 24 28	 mov	 rdx, QWORD PTR inst$[rsp]
  000bb	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 7112 : 
; 7113 :   return(oldinst);

  000bf	48 8b 04 24	 mov	 rax, QWORD PTR oldinst$[rsp]
$LN1@replace_op:

; 7114 : }

  000c3	48 83 c4 18	 add	 rsp, 24
  000c7	c3		 ret	 0
replace_opcode_xxxx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
i$ = 0
oldinst$ = 8
arch$ = 32
inst$ = 40
opcode$ = 48
replace_opcode_xx PROC

; 7074 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 18	 sub	 rsp, 24

; 7075 :   int i;
; 7076 :   INSTR_FUNC oldinst;
; 7077 : 
; 7078 :   if(arch < 0 || arch > NUM_GEN_ARCHS)

  00012	83 7c 24 20 00	 cmp	 DWORD PTR arch$[rsp], 0
  00017	7c 07		 jl	 SHORT $LN6@replace_op
  00019	83 7c 24 20 03	 cmp	 DWORD PTR arch$[rsp], 3
  0001e	7e 07		 jle	 SHORT $LN5@replace_op
$LN6@replace_op:

; 7079 :     return(NULL);

  00020	33 c0		 xor	 eax, eax
  00022	e9 a2 00 00 00	 jmp	 $LN1@replace_op
$LN5@replace_op:

; 7080 : 
; 7081 :   if(opcode < 0 || opcode > 0xff)

  00027	83 7c 24 30 00	 cmp	 DWORD PTR opcode$[rsp], 0
  0002c	7c 0a		 jl	 SHORT $LN8@replace_op
  0002e	81 7c 24 30 ff
	00 00 00	 cmp	 DWORD PTR opcode$[rsp], 255 ; 000000ffH
  00036	7e 07		 jle	 SHORT $LN7@replace_op
$LN8@replace_op:

; 7082 :     return(NULL);

  00038	33 c0		 xor	 eax, eax
  0003a	e9 8a 00 00 00	 jmp	 $LN1@replace_op
$LN7@replace_op:

; 7083 : 
; 7084 :   if(!inst)

  0003f	48 83 7c 24 28
	00		 cmp	 QWORD PTR inst$[rsp], 0
  00045	75 04		 jne	 SHORT $LN9@replace_op

; 7085 :     return(NULL);

  00047	33 c0		 xor	 eax, eax
  00049	eb 7e		 jmp	 SHORT $LN1@replace_op
$LN9@replace_op:

; 7086 : 
; 7087 :   oldinst = runtime_opcode_xxxx[arch][opcode * 256];

  0004b	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  00050	48 69 c0 00 00
	08 00		 imul	 rax, rax, 524288	; 00080000H
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_xxxx
  0005e	48 03 c8	 add	 rcx, rax
  00061	48 8b c1	 mov	 rax, rcx
  00064	69 4c 24 30 00
	01 00 00	 imul	 ecx, DWORD PTR opcode$[rsp], 256 ; 00000100H
  0006c	48 63 c9	 movsxd	 rcx, ecx
  0006f	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00073	48 89 44 24 08	 mov	 QWORD PTR oldinst$[rsp], rax

; 7088 : 
; 7089 :   for(i = 0; i < 256; i++)

  00078	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  0007f	eb 08		 jmp	 SHORT $LN4@replace_op
$LN2@replace_op:
  00081	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00084	ff c0		 inc	 eax
  00086	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@replace_op:
  00089	81 3c 24 00 01
	00 00		 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  00090	7d 32		 jge	 SHORT $LN3@replace_op

; 7090 :     runtime_opcode_xxxx[arch][opcode * 256 + i] = inst;

  00092	48 63 44 24 20	 movsxd	 rax, DWORD PTR arch$[rsp]
  00097	48 69 c0 00 00
	08 00		 imul	 rax, rax, 524288	; 00080000H
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_xxxx
  000a5	48 03 c8	 add	 rcx, rax
  000a8	48 8b c1	 mov	 rax, rcx
  000ab	69 4c 24 30 00
	01 00 00	 imul	 ecx, DWORD PTR opcode$[rsp], 256 ; 00000100H
  000b3	03 0c 24	 add	 ecx, DWORD PTR i$[rsp]
  000b6	48 63 c9	 movsxd	 rcx, ecx
  000b9	48 8b 54 24 28	 mov	 rdx, QWORD PTR inst$[rsp]
  000be	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  000c2	eb bd		 jmp	 SHORT $LN2@replace_op
$LN3@replace_op:

; 7091 : 
; 7092 :   return(oldinst);

  000c4	48 8b 44 24 08	 mov	 rax, QWORD PTR oldinst$[rsp]
$LN1@replace_op:

; 7093 : }

  000c9	48 83 c4 18	 add	 rsp, 24
  000cd	c3		 ret	 0
replace_opcode_xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_edxx PROC

; 2024 : IPRINT_ROUT2( edxx, [5] )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 05	 imul	 rax, rax, 5
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_edxx
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	48 6b c9 03	 imul	 rcx, rcx, 3
  00049	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0004d	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 6b c0 05	 imul	 rax, rax, 5
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_edxx
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	b9 08 00 00 00	 mov	 ecx, 8
  0007a	48 6b c9 04	 imul	 rcx, rcx, 4
  0007e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00082	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00087	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  0008c	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  00091	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00096	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  0009a	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
iprint_ASMFMT_edxx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_ecxx PROC

; 2023 : IPRINT_ROUT2( ecxx, [5] )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 05	 imul	 rax, rax, 5
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_ecxx
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	48 6b c9 03	 imul	 rcx, rcx, 3
  00049	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0004d	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 6b c0 05	 imul	 rax, rax, 5
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_ecxx
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	b9 08 00 00 00	 mov	 ecx, 8
  0007a	48 6b c9 04	 imul	 rcx, rcx, 4
  0007e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00082	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00087	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  0008c	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  00091	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00096	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  0009a	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
iprint_ASMFMT_ecxx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_ebxx PROC

; 2022 : IPRINT_ROUT2( ebxx, [5] )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 05	 imul	 rax, rax, 5
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_ebxx
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	48 6b c9 03	 imul	 rcx, rcx, 3
  00049	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0004d	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 6b c0 05	 imul	 rax, rax, 5
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_ebxx
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	b9 08 00 00 00	 mov	 ecx, 8
  0007a	48 6b c9 04	 imul	 rcx, rcx, 4
  0007e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00082	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00087	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  0008c	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  00091	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00096	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  0009a	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
iprint_ASMFMT_ebxx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_e6xx PROC

; 2021 : IPRINT_ROUT2( e6xx, [1] )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_e6xx
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	48 6b c9 03	 imul	 rcx, rcx, 3
  00049	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0004d	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 6b c0 01	 imul	 rax, rax, 1
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_e6xx
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	b9 08 00 00 00	 mov	 ecx, 8
  0007a	48 6b c9 04	 imul	 rcx, rcx, 4
  0007e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00082	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00087	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  0008c	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  00091	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00096	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  0009a	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
iprint_ASMFMT_e6xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_e7xx PROC

; 2020 : IPRINT_ROUT2( e7xx, [5] )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 05	 imul	 rax, rax, 5
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_e7xx
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	48 6b c9 03	 imul	 rcx, rcx, 3
  00049	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0004d	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 6b c0 05	 imul	 rax, rax, 5
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_e7xx
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	b9 08 00 00 00	 mov	 ecx, 8
  0007a	48 6b c9 04	 imul	 rcx, rcx, 4
  0007e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00082	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00087	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  0008c	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  00091	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00096	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  0009a	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
iprint_ASMFMT_e7xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_e5xx PROC

; 2019 : IPRINT_ROUT2( e5xx, [1] )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_e5xx
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	48 6b c9 03	 imul	 rcx, rcx, 3
  00049	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0004d	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 6b c0 01	 imul	 rax, rax, 1
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_e5xx
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	b9 08 00 00 00	 mov	 ecx, 8
  0007a	48 6b c9 04	 imul	 rcx, rcx, 4
  0007e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00082	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00087	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  0008c	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  00091	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00096	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  0009a	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
iprint_ASMFMT_e5xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_e3xx PROC

; 2018 : IPRINT_ROUT2( e3xx, [5] )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 05	 imul	 rax, rax, 5
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_e3xx
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	48 6b c9 03	 imul	 rcx, rcx, 3
  00049	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0004d	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 6b c0 05	 imul	 rax, rax, 5
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_e3xx
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	b9 08 00 00 00	 mov	 ecx, 8
  0007a	48 6b c9 04	 imul	 rcx, rcx, 4
  0007e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00082	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00087	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  0008c	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  00091	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00096	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  0009a	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
iprint_ASMFMT_e3xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_cc_x PROC

; 2017 : IPRINT_ROUT2( cc_x, [1] & 0x0F )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	83 e0 0f	 and	 eax, 15
  00032	48 98		 cdqe
  00034	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_cc_x
  0003f	48 03 c8	 add	 rcx, rax
  00042	48 8b c1	 mov	 rax, rcx
  00045	b9 08 00 00 00	 mov	 ecx, 8
  0004a	48 6b c9 03	 imul	 rcx, rcx, 3
  0004e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00052	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	48 6b c0 01	 imul	 rax, rax, 1
  00060	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00065	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00069	83 e0 0f	 and	 eax, 15
  0006c	48 98		 cdqe
  0006e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_cc_x
  00079	48 03 c8	 add	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	b9 08 00 00 00	 mov	 ecx, 8
  00084	48 6b c9 04	 imul	 rcx, rcx, 4
  00088	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0008c	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00091	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  00096	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  0009b	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  000a0	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  000a4	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  000a8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ac	c3		 ret	 0
iprint_ASMFMT_cc_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_c8_x PROC

; 2016 : IPRINT_ROUT2( c8_x, [1] & 0x0F )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	83 e0 0f	 and	 eax, 15
  00032	48 98		 cdqe
  00034	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c8_x
  0003f	48 03 c8	 add	 rcx, rax
  00042	48 8b c1	 mov	 rax, rcx
  00045	b9 08 00 00 00	 mov	 ecx, 8
  0004a	48 6b c9 03	 imul	 rcx, rcx, 3
  0004e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00052	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	48 6b c0 01	 imul	 rax, rax, 1
  00060	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00065	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00069	83 e0 0f	 and	 eax, 15
  0006c	48 98		 cdqe
  0006e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c8_x
  00079	48 03 c8	 add	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	b9 08 00 00 00	 mov	 ecx, 8
  00084	48 6b c9 04	 imul	 rcx, rcx, 4
  00088	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0008c	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00091	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  00096	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  0009b	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  000a0	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  000a4	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  000a8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ac	c3		 ret	 0
iprint_ASMFMT_c8_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_c6_x PROC

; 2015 : IPRINT_ROUT2( c6_x, [1] & 0x0F )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	83 e0 0f	 and	 eax, 15
  00032	48 98		 cdqe
  00034	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c6_x
  0003f	48 03 c8	 add	 rcx, rax
  00042	48 8b c1	 mov	 rax, rcx
  00045	b9 08 00 00 00	 mov	 ecx, 8
  0004a	48 6b c9 03	 imul	 rcx, rcx, 3
  0004e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00052	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	48 6b c0 01	 imul	 rax, rax, 1
  00060	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00065	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00069	83 e0 0f	 and	 eax, 15
  0006c	48 98		 cdqe
  0006e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c6_x
  00079	48 03 c8	 add	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	b9 08 00 00 00	 mov	 ecx, 8
  00084	48 6b c9 04	 imul	 rcx, rcx, 4
  00088	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0008c	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00091	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  00096	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  0009b	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  000a0	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  000a4	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  000a8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ac	c3		 ret	 0
iprint_ASMFMT_c6_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_c4_x PROC

; 2014 : IPRINT_ROUT2( c4_x, [1] & 0x0F )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	83 e0 0f	 and	 eax, 15
  00032	48 98		 cdqe
  00034	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c4_x
  0003f	48 03 c8	 add	 rcx, rax
  00042	48 8b c1	 mov	 rax, rcx
  00045	b9 08 00 00 00	 mov	 ecx, 8
  0004a	48 6b c9 03	 imul	 rcx, rcx, 3
  0004e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00052	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	48 6b c0 01	 imul	 rax, rax, 1
  00060	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00065	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00069	83 e0 0f	 and	 eax, 15
  0006c	48 98		 cdqe
  0006e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c4_x
  00079	48 03 c8	 add	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	b9 08 00 00 00	 mov	 ecx, 8
  00084	48 6b c9 04	 imul	 rcx, rcx, 4
  00088	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0008c	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00091	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  00096	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  0009b	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  000a0	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  000a4	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  000a8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ac	c3		 ret	 0
iprint_ASMFMT_c4_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_c2_x PROC

; 2013 : IPRINT_ROUT2( c2_x, [1] & 0x0F )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	83 e0 0f	 and	 eax, 15
  00032	48 98		 cdqe
  00034	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c2_x
  0003f	48 03 c8	 add	 rcx, rax
  00042	48 8b c1	 mov	 rax, rcx
  00045	b9 08 00 00 00	 mov	 ecx, 8
  0004a	48 6b c9 03	 imul	 rcx, rcx, 3
  0004e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00052	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	48 6b c0 01	 imul	 rax, rax, 1
  00060	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00065	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00069	83 e0 0f	 and	 eax, 15
  0006c	48 98		 cdqe
  0006e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c2_x
  00079	48 03 c8	 add	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	b9 08 00 00 00	 mov	 ecx, 8
  00084	48 6b c9 04	 imul	 rcx, rcx, 4
  00088	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0008c	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00091	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  00096	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  0009b	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  000a0	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  000a4	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  000a8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ac	c3		 ret	 0
iprint_ASMFMT_c2_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_c0_x PROC

; 2012 : IPRINT_ROUT2( c0_x, [1] & 0x0F )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	83 e0 0f	 and	 eax, 15
  00032	48 98		 cdqe
  00034	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c0_x
  0003f	48 03 c8	 add	 rcx, rax
  00042	48 8b c1	 mov	 rax, rcx
  00045	b9 08 00 00 00	 mov	 ecx, 8
  0004a	48 6b c9 03	 imul	 rcx, rcx, 3
  0004e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00052	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	48 6b c0 01	 imul	 rax, rax, 1
  00060	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00065	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00069	83 e0 0f	 and	 eax, 15
  0006c	48 98		 cdqe
  0006e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c0_x
  00079	48 03 c8	 add	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	b9 08 00 00 00	 mov	 ecx, 8
  00084	48 6b c9 04	 imul	 rcx, rcx, 4
  00088	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0008c	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00091	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  00096	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  0009b	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  000a0	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  000a4	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  000a8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ac	c3		 ret	 0
iprint_ASMFMT_c0_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_b9xx PROC

; 2011 : IPRINT_ROUT2( b9xx, [1] )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_b9xx
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	48 6b c9 03	 imul	 rcx, rcx, 3
  00049	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0004d	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 6b c0 01	 imul	 rax, rax, 1
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_b9xx
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	b9 08 00 00 00	 mov	 ecx, 8
  0007a	48 6b c9 04	 imul	 rcx, rcx, 4
  0007e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00082	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00087	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  0008c	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  00091	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00096	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  0009a	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
iprint_ASMFMT_b9xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_b3xx PROC

; 2010 : IPRINT_ROUT2( b3xx, [1] )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_b3xx
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	48 6b c9 03	 imul	 rcx, rcx, 3
  00049	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0004d	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 6b c0 01	 imul	 rax, rax, 1
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_b3xx
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	b9 08 00 00 00	 mov	 ecx, 8
  0007a	48 6b c9 04	 imul	 rcx, rcx, 4
  0007e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00082	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00087	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  0008c	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  00091	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00096	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  0009a	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
iprint_ASMFMT_b3xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_a7_x PROC

; 2008 : IPRINT_ROUT2( a7_x, [1] & 0x0F )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	83 e0 0f	 and	 eax, 15
  00032	48 98		 cdqe
  00034	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_a7_x
  0003f	48 03 c8	 add	 rcx, rax
  00042	48 8b c1	 mov	 rax, rcx
  00045	b9 08 00 00 00	 mov	 ecx, 8
  0004a	48 6b c9 03	 imul	 rcx, rcx, 3
  0004e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00052	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	48 6b c0 01	 imul	 rax, rax, 1
  00060	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00065	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00069	83 e0 0f	 and	 eax, 15
  0006c	48 98		 cdqe
  0006e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_a7_x
  00079	48 03 c8	 add	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	b9 08 00 00 00	 mov	 ecx, 8
  00084	48 6b c9 04	 imul	 rcx, rcx, 4
  00088	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0008c	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00091	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  00096	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  0009b	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  000a0	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  000a4	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  000a8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ac	c3		 ret	 0
iprint_ASMFMT_a7_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_a5_x PROC

; 2007 : IPRINT_ROUT2( a5_x, [1] & 0x0F )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	83 e0 0f	 and	 eax, 15
  00032	48 98		 cdqe
  00034	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_a5_x
  0003f	48 03 c8	 add	 rcx, rax
  00042	48 8b c1	 mov	 rax, rcx
  00045	b9 08 00 00 00	 mov	 ecx, 8
  0004a	48 6b c9 03	 imul	 rcx, rcx, 3
  0004e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00052	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	48 6b c0 01	 imul	 rax, rax, 1
  00060	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00065	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00069	83 e0 0f	 and	 eax, 15
  0006c	48 98		 cdqe
  0006e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_a5_x
  00079	48 03 c8	 add	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	b9 08 00 00 00	 mov	 ecx, 8
  00084	48 6b c9 04	 imul	 rcx, rcx, 4
  00088	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0008c	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00091	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  00096	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  0009b	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  000a0	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  000a4	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  000a8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ac	c3		 ret	 0
iprint_ASMFMT_a5_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_ASMFMT_01xx PROC

; 2006 : IPRINT_ROUT2( 01xx, [1] )

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_ASM:
  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_ASM
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 01	 imul	 rax, rax, 1
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_01xx
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	48 6b c9 03	 imul	 rcx, rcx, 3
  00049	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0004d	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 6b c0 01	 imul	 rax, rax, 1
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_01xx
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	b9 08 00 00 00	 mov	 ecx, 8
  0007a	48 6b c9 04	 imul	 rcx, rcx, 4
  0007e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00082	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00087	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  0008c	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  00091	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00096	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  0009a	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]
  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
iprint_ASMFMT_01xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
p$1 = 48
arch_mode$ = 80
inst$ = 88
unused$ = 96
prtbuf$ = 104
iprint_ASMFMT_b2xx PROC

; 1966 : {

$LN15:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1967 :     /* This function is designed to be identical to the code generated by
; 1968 :        the IPRINT_ROUT2 and ROUTE_IPRINT macros, but with additional code
; 1969 :        necessary to extract its pointers from the opcode table based on
; 1970 :        the current runtime architecture.
; 1971 :     */
; 1972 :     IPRTFUNC*  iprt_asmfmt_func = NULL;  /* Ptr to instr printing function */

  00017	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], 0

; 1973 :     char*      iprt_info_string = NULL;  /* mnemonic + instr function name */

  00020	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR iprt_info_string$[rsp], 0
$LN4@iprint_ASM:

; 1974 : 
; 1975 :     UNREFERENCED( unused );

  00029	33 c0		 xor	 eax, eax
  0002b	85 c0		 test	 eax, eax
  0002d	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 1976 : 
; 1977 :     /* Extract our parameters directly from the instruction opcode table */
; 1978 :     /* NOTE - we use hard coded 'inst[1]' since this is the 'b2xx' table */
; 1979 :     /* NOTE - we use a hard coded opcode table name for the same reason  */
; 1980 : 
; 1981 :     if (ARCH_370_IDX == arch_mode)

  0002f	83 7c 24 50 00	 cmp	 DWORD PTR arch_mode$[rsp], 0
  00034	75 6f		 jne	 SHORT $LN8@iprint_ASM

; 1982 :     {
; 1983 :         iprt_asmfmt_func = (void*) s370_gen_opcode_b2xx [ inst[1] ][ NUM_INSTR_TAB_PTRS - 2 ];

  00036	b8 01 00 00 00	 mov	 eax, 1
  0003b	48 6b c0 01	 imul	 rax, rax, 1
  0003f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_gen_opcode_b2xx
  00053	48 03 c8	 add	 rcx, rax
  00056	48 8b c1	 mov	 rax, rcx
  00059	b9 08 00 00 00	 mov	 ecx, 8
  0005e	48 6b c9 03	 imul	 rcx, rcx, 3
  00062	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00066	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax

; 1984 :         iprt_info_string = (void*) s370_gen_opcode_b2xx [ inst[1] ][ NUM_INSTR_TAB_PTRS - 1 ];

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 01	 imul	 rax, rax, 1
  00074	48 8b 4c 24 58	 mov	 rcx, QWORD PTR inst$[rsp]
  00079	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0007d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_gen_opcode_b2xx
  00088	48 03 c8	 add	 rcx, rax
  0008b	48 8b c1	 mov	 rax, rcx
  0008e	b9 08 00 00 00	 mov	 ecx, 8
  00093	48 6b c9 04	 imul	 rcx, rcx, 4
  00097	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0009b	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax

; 1985 :     }

  000a0	e9 00 01 00 00	 jmp	 $LN9@iprint_ASM
$LN8@iprint_ASM:

; 1986 :     else if (ARCH_390_IDX == arch_mode)

  000a5	83 7c 24 50 01	 cmp	 DWORD PTR arch_mode$[rsp], 1
  000aa	75 6f		 jne	 SHORT $LN10@iprint_ASM

; 1987 :     {
; 1988 :         iprt_asmfmt_func = (void*) s390_gen_opcode_b2xx [ inst[1] ][ NUM_INSTR_TAB_PTRS - 2 ];

  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	48 6b c0 01	 imul	 rax, rax, 1
  000b5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR inst$[rsp]
  000ba	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000be	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_gen_opcode_b2xx
  000c9	48 03 c8	 add	 rcx, rax
  000cc	48 8b c1	 mov	 rax, rcx
  000cf	b9 08 00 00 00	 mov	 ecx, 8
  000d4	48 6b c9 03	 imul	 rcx, rcx, 3
  000d8	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  000dc	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax

; 1989 :         iprt_info_string = (void*) s390_gen_opcode_b2xx [ inst[1] ][ NUM_INSTR_TAB_PTRS - 1 ];

  000e1	b8 01 00 00 00	 mov	 eax, 1
  000e6	48 6b c0 01	 imul	 rax, rax, 1
  000ea	48 8b 4c 24 58	 mov	 rcx, QWORD PTR inst$[rsp]
  000ef	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000f3	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_gen_opcode_b2xx
  000fe	48 03 c8	 add	 rcx, rax
  00101	48 8b c1	 mov	 rax, rcx
  00104	b9 08 00 00 00	 mov	 ecx, 8
  00109	48 6b c9 04	 imul	 rcx, rcx, 4
  0010d	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00111	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax

; 1990 :     }

  00116	e9 8a 00 00 00	 jmp	 $LN11@iprint_ASM
$LN10@iprint_ASM:

; 1991 :     else if (ARCH_900_IDX == arch_mode)

  0011b	83 7c 24 50 02	 cmp	 DWORD PTR arch_mode$[rsp], 2
  00120	75 6c		 jne	 SHORT $LN12@iprint_ASM

; 1992 :     {
; 1993 :         iprt_asmfmt_func = (void*) z900_gen_opcode_b2xx [ inst[1] ][ NUM_INSTR_TAB_PTRS - 2 ];

  00122	b8 01 00 00 00	 mov	 eax, 1
  00127	48 6b c0 01	 imul	 rax, rax, 1
  0012b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR inst$[rsp]
  00130	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00134	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_gen_opcode_b2xx
  0013f	48 03 c8	 add	 rcx, rax
  00142	48 8b c1	 mov	 rax, rcx
  00145	b9 08 00 00 00	 mov	 ecx, 8
  0014a	48 6b c9 03	 imul	 rcx, rcx, 3
  0014e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00152	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax

; 1994 :         iprt_info_string = (void*) z900_gen_opcode_b2xx [ inst[1] ][ NUM_INSTR_TAB_PTRS - 1 ];

  00157	b8 01 00 00 00	 mov	 eax, 1
  0015c	48 6b c0 01	 imul	 rax, rax, 1
  00160	48 8b 4c 24 58	 mov	 rcx, QWORD PTR inst$[rsp]
  00165	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00169	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_gen_opcode_b2xx
  00174	48 03 c8	 add	 rcx, rax
  00177	48 8b c1	 mov	 rax, rcx
  0017a	b9 08 00 00 00	 mov	 ecx, 8
  0017f	48 6b c9 04	 imul	 rcx, rcx, 4
  00183	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00187	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax

; 1995 :     }

  0018c	eb 17		 jmp	 SHORT $LN13@iprint_ASM
$LN12@iprint_ASM:
$LN7@iprint_ASM:

; 1996 :     else CRASH();

  0018e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR p$1[rsp], 0
  00197	48 8b 44 24 30	 mov	 rax, QWORD PTR p$1[rsp]
  0019c	c6 00 00	 mov	 BYTE PTR [rax], 0
  0019f	33 c0		 xor	 eax, eax
  001a1	85 c0		 test	 eax, eax
  001a3	75 e9		 jne	 SHORT $LN7@iprint_ASM
$LN13@iprint_ASM:
$LN11@iprint_ASM:
$LN9@iprint_ASM:

; 1997 : 
; 1998 :     /* Trace this instruction */
; 1999 :     return iprt_asmfmt_func( arch_mode, inst, iprt_info_string, prtbuf );

  001a5	4c 8b 4c 24 68	 mov	 r9, QWORD PTR prtbuf$[rsp]
  001aa	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  001af	48 8b 54 24 58	 mov	 rdx, QWORD PTR inst$[rsp]
  001b4	8b 4c 24 50	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  001b8	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]

; 2000 : }

  001bc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001c0	c3		 ret	 0
iprint_ASMFMT_b2xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
z900_execute_opcode_ed________xx PROC

; 1420 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1421 :   regs->ARCH_DEP( runtime_opcode_ed________xx )[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 50 b0
	00 00		 mov	 rcx, QWORD PTR [rcx+45136]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1422 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
z900_execute_opcode_ed________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
z900_execute_opcode_ec________xx PROC

; 1412 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1413 :   regs->ARCH_DEP( runtime_opcode_ec________xx )[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 48 b0
	00 00		 mov	 rcx, QWORD PTR [rcx+45128]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1414 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
z900_execute_opcode_ec________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
z900_execute_opcode_eb________xx PROC

; 1404 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1405 :   regs->ARCH_DEP( runtime_opcode_eb________xx )[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 40 b0
	00 00		 mov	 rcx, QWORD PTR [rcx+45120]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1406 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
z900_execute_opcode_eb________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
z900_execute_opcode_e7________xx PROC

; 1396 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1397 :     regs->ARCH_DEP(runtime_opcode_e7________xx)[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 38 b0
	00 00		 mov	 rcx, QWORD PTR [rcx+45112]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1398 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
z900_execute_opcode_e7________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
z900_execute_opcode_e3________xx PROC

; 1378 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1379 :   regs->ARCH_DEP( runtime_opcode_e3________xx )[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 30 b0
	00 00		 mov	 rcx, QWORD PTR [rcx+45104]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1380 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
z900_execute_opcode_e3________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_tcpip PROC

; 1325 :  UNDEF_INST( tcpip )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_tcpip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_store_cpu_counter_multiple PROC

; 1302 :  UNDEF_INST( store_cpu_counter_multiple )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_store_cpu_counter_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_test_vmr PROC

; 1270 :  UNDEF_INST( v_test_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_test_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_store_vmr PROC

; 1269 :  UNDEF_INST( v_store_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_store_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_store_vector_parameters PROC

; 1268 :  UNDEF_INST( v_store_vector_parameters )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_store_vector_parameters ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_set_vector_mask_mode PROC

; 1267 :  UNDEF_INST( v_set_vector_mask_mode )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_set_vector_mask_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_save_vsr PROC

; 1266 :  UNDEF_INST( v_save_vsr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_save_vsr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_save_vr PROC

; 1265 :  UNDEF_INST( v_save_vr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_save_vr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_save_vmr PROC

; 1264 :  UNDEF_INST( v_save_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_save_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_save_vac PROC

; 1263 :  UNDEF_INST( v_save_vac )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_save_vac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_save_changed_vr PROC

; 1262 :  UNDEF_INST( v_save_changed_vr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_save_changed_vr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_restore_vsr PROC

; 1261 :  UNDEF_INST( v_restore_vsr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_restore_vsr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_restore_vr PROC

; 1260 :  UNDEF_INST( v_restore_vr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_restore_vr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_restore_vmr PROC

; 1259 :  UNDEF_INST( v_restore_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_restore_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_restore_vac PROC

; 1258 :  UNDEF_INST( v_restore_vac )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_restore_vac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_or_to_vmr PROC

; 1257 :  UNDEF_INST( v_or_to_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_or_to_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_load_vmr_complement PROC

; 1256 :  UNDEF_INST( v_load_vmr_complement )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_load_vmr_complement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_load_vmr PROC

; 1255 :  UNDEF_INST( v_load_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_load_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_load_vix_from_address PROC

; 1254 :  UNDEF_INST( v_load_vix_from_address )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_load_vix_from_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_load_vct_from_address PROC

; 1253 :  UNDEF_INST( v_load_vct_from_address )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_load_vct_from_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_extract_vector_modes PROC

; 1252 :  UNDEF_INST( v_extract_vector_modes )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_extract_vector_modes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_extract_vct PROC

; 1251 :  UNDEF_INST( v_extract_vct )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_extract_vct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_exclusive_or_to_vmr PROC

; 1250 :  UNDEF_INST( v_exclusive_or_to_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_exclusive_or_to_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_count_ones_in_vmr PROC

; 1249 :  UNDEF_INST( v_count_ones_in_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_count_ones_in_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_count_left_zeros_in_vmr PROC

; 1248 :  UNDEF_INST( v_count_left_zeros_in_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_count_left_zeros_in_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_complement_vmr PROC

; 1247 :  UNDEF_INST( v_complement_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_complement_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_clear_vr PROC

; 1246 :  UNDEF_INST( v_clear_vr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_clear_vr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_v_and_to_vmr PROC

; 1245 :  UNDEF_INST( v_and_to_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_v_and_to_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_store_channel_id PROC

; 1241 :  UNDEF_INST( store_channel_id )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_store_channel_id ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_test_channel PROC

; 1240 :  UNDEF_INST( test_channel )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_test_channel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_halt_io PROC

; 1239 :  UNDEF_INST( halt_io )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_halt_io ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_test_io PROC

; 1238 :  UNDEF_INST( test_io )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_test_io ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_start_io PROC

; 1237 :  UNDEF_INST( start_io )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_start_io ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_unxlate_ccw PROC

; 910  :  UNDEF_INST( ecpsvm_unxlate_ccw )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_unxlate_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_unlock_page PROC

; 909  :  UNDEF_INST( ecpsvm_unlock_page )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_unlock_page ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_tpage_lock PROC

; 908  :  UNDEF_INST( ecpsvm_tpage_lock )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_tpage_lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_tpage PROC

; 907  :  UNDEF_INST( ecpsvm_tpage )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_tpage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_store_level PROC

; 906  :  UNDEF_INST( ecpsvm_store_level )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_store_level ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_prefmach_assist PROC

; 905  :  UNDEF_INST( ecpsvm_prefmach_assist )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_prefmach_assist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_lock_page PROC

; 904  :  UNDEF_INST( ecpsvm_lock_page )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_lock_page ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_locate_vblock PROC

; 903  :  UNDEF_INST( ecpsvm_locate_vblock )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_locate_vblock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_locate_rblock PROC

; 902  :  UNDEF_INST( ecpsvm_locate_rblock )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_locate_rblock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_loc_chgshrpg PROC

; 901  :  UNDEF_INST( ecpsvm_loc_chgshrpg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_loc_chgshrpg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_inval_segtab PROC

; 900  :  UNDEF_INST( ecpsvm_inval_segtab )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_inval_segtab ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_inval_ptable PROC

; 899  :  UNDEF_INST( ecpsvm_inval_ptable )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_inval_ptable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_free_ccwstor PROC

; 898  :  UNDEF_INST( ecpsvm_free_ccwstor )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_free_ccwstor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_extended_fretx PROC

; 897  :  UNDEF_INST( ecpsvm_extended_fretx )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_extended_fretx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_extended_freex PROC

; 896  :  UNDEF_INST( ecpsvm_extended_freex )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_extended_freex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_dispatch_main PROC

; 895  :  UNDEF_INST( ecpsvm_dispatch_main )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_dispatch_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_disp2 PROC

; 894  :  UNDEF_INST( ecpsvm_disp2 )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_disp2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_disp1 PROC

; 893  :  UNDEF_INST( ecpsvm_disp1 )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_disp1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_decode_next_ccw PROC

; 892  :  UNDEF_INST( ecpsvm_decode_next_ccw )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_decode_next_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_decode_first_ccw PROC

; 891  :  UNDEF_INST( ecpsvm_decode_first_ccw )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_decode_first_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_comm_ccwproc PROC

; 890  :  UNDEF_INST( ecpsvm_comm_ccwproc )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_comm_ccwproc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_basic_fretx PROC

; 889  :  UNDEF_INST( ecpsvm_basic_fretx )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_basic_fretx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_ecpsvm_basic_freex PROC

; 888  :  UNDEF_INST( ecpsvm_basic_freex )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_ecpsvm_basic_freex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_disconnect_channel_set PROC

; 848  :  UNDEF_INST( disconnect_channel_set )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_disconnect_channel_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_connect_channel_set PROC

; 847  :  UNDEF_INST( connect_channel_set )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_connect_channel_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_set_storage_key PROC

; 711  :  UNDEF_INST( set_storage_key )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_set_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_reset_reference_bit PROC

; 710  :  UNDEF_INST( reset_reference_bit )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_reset_reference_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_insert_storage_key PROC

; 709  :  UNDEF_INST( insert_storage_key )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_insert_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_query_sampling_information PROC

; 644  :  UNDEF_INST( query_sampling_information )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_query_sampling_information ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_load_sampling_controls PROC

; 643  :  UNDEF_INST( load_sampling_controls )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_load_sampling_controls ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_set_peripheral_counter PROC

; 639  :  UNDEF_INST( set_peripheral_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_set_peripheral_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_set_cpu_counter PROC

; 638  :  UNDEF_INST( set_cpu_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_set_cpu_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_query_counter_information PROC

; 637  :  UNDEF_INST( query_counter_information )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_query_counter_information ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_load_peripheral_counter_set_controls PROC

; 636  :  UNDEF_INST( load_peripheral_counter_set_controls )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_load_peripheral_counter_set_controls ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_load_cpu_counter_set_controls PROC

; 635  :  UNDEF_INST( load_cpu_counter_set_controls )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_load_cpu_counter_set_controls ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_extract_peripheral_counter PROC

; 634  :  UNDEF_INST( extract_peripheral_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_extract_peripheral_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_extract_cpu_counter PROC

; 633  :  UNDEF_INST( extract_cpu_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_extract_cpu_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_extract_coprocessor_group_address PROC

; 632  :  UNDEF_INST( extract_coprocessor_group_address )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_extract_coprocessor_group_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv73 = 32
tv74 = 36
tv86 = 40
tv87 = 44
tv130 = 48
tv131 = 52
inst$ = 80
regs$ = 88
z900_operation_exception PROC

; 1428 : {

$LN19:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@z900_opera:

; 1429 :     INST_UPDATE_PSW (regs, ILC(inst[0]), ILC(inst[0]));

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 00	 imul	 rax, rax, 0
  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	83 f8 40	 cmp	 eax, 64			; 00000040H
  00023	7d 0a		 jge	 SHORT $LN9@z900_opera
  00025	c7 44 24 24 02
	00 00 00	 mov	 DWORD PTR tv74[rsp], 2
  0002d	eb 33		 jmp	 SHORT $LN10@z900_opera
$LN9@z900_opera:
  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	48 6b c0 00	 imul	 rax, rax, 0
  00038	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0003d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00041	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  00046	7d 0a		 jge	 SHORT $LN7@z900_opera
  00048	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR tv73[rsp], 4
  00050	eb 08		 jmp	 SHORT $LN8@z900_opera
$LN7@z900_opera:
  00052	c7 44 24 20 06
	00 00 00	 mov	 DWORD PTR tv73[rsp], 6
$LN8@z900_opera:
  0005a	8b 44 24 20	 mov	 eax, DWORD PTR tv73[rsp]
  0005e	89 44 24 24	 mov	 DWORD PTR tv74[rsp], eax
$LN10@z900_opera:
  00062	48 63 44 24 24	 movsxd	 rax, DWORD PTR tv74[rsp]
  00067	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0006c	48 03 41 68	 add	 rax, QWORD PTR [rcx+104]
  00070	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00075	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	48 6b c0 00	 imul	 rax, rax, 0
  00082	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00087	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0008b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0008e	7d 0a		 jge	 SHORT $LN13@z900_opera
  00090	c7 44 24 2c 02
	00 00 00	 mov	 DWORD PTR tv87[rsp], 2
  00098	eb 33		 jmp	 SHORT $LN14@z900_opera
$LN13@z900_opera:
  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	48 6b c0 00	 imul	 rax, rax, 0
  000a3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  000a8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ac	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  000b1	7d 0a		 jge	 SHORT $LN11@z900_opera
  000b3	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR tv86[rsp], 4
  000bb	eb 08		 jmp	 SHORT $LN12@z900_opera
$LN11@z900_opera:
  000bd	c7 44 24 28 06
	00 00 00	 mov	 DWORD PTR tv86[rsp], 6
$LN12@z900_opera:
  000c5	8b 44 24 28	 mov	 eax, DWORD PTR tv86[rsp]
  000c9	89 44 24 2c	 mov	 DWORD PTR tv87[rsp], eax
$LN14@z900_opera:
  000cd	83 7c 24 2c 00	 cmp	 DWORD PTR tv87[rsp], 0
  000d2	74 64		 je	 SHORT $LN5@z900_opera
  000d4	b8 01 00 00 00	 mov	 eax, 1
  000d9	48 6b c0 00	 imul	 rax, rax, 0
  000dd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  000e2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000e6	83 f8 40	 cmp	 eax, 64			; 00000040H
  000e9	7d 0a		 jge	 SHORT $LN17@z900_opera
  000eb	c7 44 24 34 02
	00 00 00	 mov	 DWORD PTR tv131[rsp], 2
  000f3	eb 33		 jmp	 SHORT $LN18@z900_opera
$LN17@z900_opera:
  000f5	b8 01 00 00 00	 mov	 eax, 1
  000fa	48 6b c0 00	 imul	 rax, rax, 0
  000fe	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00103	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00107	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  0010c	7d 0a		 jge	 SHORT $LN15@z900_opera
  0010e	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR tv130[rsp], 4
  00116	eb 08		 jmp	 SHORT $LN16@z900_opera
$LN15@z900_opera:
  00118	c7 44 24 30 06
	00 00 00	 mov	 DWORD PTR tv130[rsp], 6
$LN16@z900_opera:
  00120	8b 44 24 30	 mov	 eax, DWORD PTR tv130[rsp]
  00124	89 44 24 34	 mov	 DWORD PTR tv131[rsp], eax
$LN18@z900_opera:
  00128	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0012d	0f b6 4c 24 34	 movzx	 ecx, BYTE PTR tv131[rsp]
  00132	88 88 9a 00 00
	00		 mov	 BYTE PTR [rax+154], cl
$LN5@z900_opera:
  00138	33 c0		 xor	 eax, eax
  0013a	85 c0		 test	 eax, eax
  0013c	0f 85 cc fe ff
	ff		 jne	 $LN4@z900_opera

; 1430 :     ARCH_DEP( program_interrupt )(regs, PGM_OPERATION_EXCEPTION);

  00142	ba 01 00 00 00	 mov	 edx, 1
  00147	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0014c	e8 00 00 00 00	 call	 z900_program_interrupt

; 1431 : }

  00151	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00155	c3		 ret	 0
z900_operation_exception ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_cipher_message_with_counter PROC

; 666  :  UNDEF_INST( cipher_message_with_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_cipher_message_with_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_cipher_message_with_output_feedback PROC

; 665  :  UNDEF_INST( cipher_message_with_output_feedback )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_cipher_message_with_output_feedback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_cipher_message_with_cipher_feedback PROC

; 664  :  UNDEF_INST( cipher_message_with_cipher_feedback )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_cipher_message_with_cipher_feedback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_perform_cryptographic_computation PROC

; 667  :  UNDEF_INST( perform_cryptographic_computation )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_perform_cryptographic_computation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_perform_cryptographic_key_management_operation PROC

; 660  :  UNDEF_INST( perform_cryptographic_key_management_operation )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_perform_cryptographic_key_management_operation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_compute_message_authentication_code PROC

; 109  :  UNDEF_INST( compute_message_authentication_code )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_compute_message_authentication_code ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_compute_last_message_digest PROC

; 108  :  UNDEF_INST( compute_last_message_digest )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_compute_last_message_digest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_compute_intermediate_message_digest PROC

; 107  :  UNDEF_INST( compute_intermediate_message_digest )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_compute_intermediate_message_digest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_cipher_message_with_chaining PROC

; 106  :  UNDEF_INST( cipher_message_with_chaining )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_cipher_message_with_chaining ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
z900_cipher_message PROC

; 105  :  UNDEF_INST( cipher_message )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 z900_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
z900_cipher_message ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
s390_execute_opcode_ed________xx PROC

; 1420 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1421 :   regs->ARCH_DEP( runtime_opcode_ed________xx )[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 20 b0
	00 00		 mov	 rcx, QWORD PTR [rcx+45088]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1422 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
s390_execute_opcode_ed________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
s390_execute_opcode_ec________xx PROC

; 1412 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1413 :   regs->ARCH_DEP( runtime_opcode_ec________xx )[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 18 b0
	00 00		 mov	 rcx, QWORD PTR [rcx+45080]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1414 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
s390_execute_opcode_ec________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
s390_execute_opcode_eb________xx PROC

; 1404 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1405 :   regs->ARCH_DEP( runtime_opcode_eb________xx )[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 10 b0
	00 00		 mov	 rcx, QWORD PTR [rcx+45072]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1406 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
s390_execute_opcode_eb________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
s390_execute_opcode_e7________xx PROC

; 1396 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1397 :     regs->ARCH_DEP(runtime_opcode_e7________xx)[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 08 b0
	00 00		 mov	 rcx, QWORD PTR [rcx+45064]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1398 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
s390_execute_opcode_e7________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
s390_execute_opcode_e3________xx PROC

; 1378 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1379 :   regs->ARCH_DEP( runtime_opcode_e3________xx )[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 00 b0
	00 00		 mov	 rcx, QWORD PTR [rcx+45056]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1380 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
s390_execute_opcode_e3________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_and_set_storage_attributes PROC

; 1329 :  UNDEF_INST( extract_and_set_storage_attributes )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_and_set_storage_attributes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_tcpip PROC

; 1325 :  UNDEF_INST( tcpip )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_tcpip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_set_vector_summary PROC

; 1321 :  UNDEF_INST( set_vector_summary )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_set_vector_summary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_cpu_counter_multiple PROC

; 1302 :  UNDEF_INST( store_cpu_counter_multiple )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_cpu_counter_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_test_vmr PROC

; 1270 :  UNDEF_INST( v_test_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_test_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_store_vmr PROC

; 1269 :  UNDEF_INST( v_store_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_store_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_store_vector_parameters PROC

; 1268 :  UNDEF_INST( v_store_vector_parameters )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_store_vector_parameters ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_set_vector_mask_mode PROC

; 1267 :  UNDEF_INST( v_set_vector_mask_mode )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_set_vector_mask_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_save_vsr PROC

; 1266 :  UNDEF_INST( v_save_vsr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_save_vsr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_save_vr PROC

; 1265 :  UNDEF_INST( v_save_vr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_save_vr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_save_vmr PROC

; 1264 :  UNDEF_INST( v_save_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_save_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_save_vac PROC

; 1263 :  UNDEF_INST( v_save_vac )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_save_vac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_save_changed_vr PROC

; 1262 :  UNDEF_INST( v_save_changed_vr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_save_changed_vr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_restore_vsr PROC

; 1261 :  UNDEF_INST( v_restore_vsr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_restore_vsr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_restore_vr PROC

; 1260 :  UNDEF_INST( v_restore_vr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_restore_vr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_restore_vmr PROC

; 1259 :  UNDEF_INST( v_restore_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_restore_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_restore_vac PROC

; 1258 :  UNDEF_INST( v_restore_vac )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_restore_vac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_or_to_vmr PROC

; 1257 :  UNDEF_INST( v_or_to_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_or_to_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_load_vmr_complement PROC

; 1256 :  UNDEF_INST( v_load_vmr_complement )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_load_vmr_complement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_load_vmr PROC

; 1255 :  UNDEF_INST( v_load_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_load_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_load_vix_from_address PROC

; 1254 :  UNDEF_INST( v_load_vix_from_address )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_load_vix_from_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_load_vct_from_address PROC

; 1253 :  UNDEF_INST( v_load_vct_from_address )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_load_vct_from_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_extract_vector_modes PROC

; 1252 :  UNDEF_INST( v_extract_vector_modes )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_extract_vector_modes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_extract_vct PROC

; 1251 :  UNDEF_INST( v_extract_vct )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_extract_vct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_exclusive_or_to_vmr PROC

; 1250 :  UNDEF_INST( v_exclusive_or_to_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_exclusive_or_to_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_count_ones_in_vmr PROC

; 1249 :  UNDEF_INST( v_count_ones_in_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_count_ones_in_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_count_left_zeros_in_vmr PROC

; 1248 :  UNDEF_INST( v_count_left_zeros_in_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_count_left_zeros_in_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_complement_vmr PROC

; 1247 :  UNDEF_INST( v_complement_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_complement_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_clear_vr PROC

; 1246 :  UNDEF_INST( v_clear_vr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_clear_vr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_v_and_to_vmr PROC

; 1245 :  UNDEF_INST( v_and_to_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_v_and_to_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_channel_id PROC

; 1241 :  UNDEF_INST( store_channel_id )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_channel_id ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_test_channel PROC

; 1240 :  UNDEF_INST( test_channel )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_test_channel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_halt_io PROC

; 1239 :  UNDEF_INST( halt_io )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_halt_io ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_test_io PROC

; 1238 :  UNDEF_INST( test_io )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_test_io ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_start_io PROC

; 1237 :  UNDEF_INST( start_io )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_start_io ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_queue_buffer_state PROC

; 1220 :  UNDEF_INST( extract_queue_buffer_state )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_queue_buffer_state ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_set_queue_buffer_state PROC

; 1219 :  UNDEF_INST( set_queue_buffer_state )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_set_queue_buffer_state ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_trace_long PROC

; 1211 :  UNDEF_INST( trace_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_trace_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_test_under_mask_high_low PROC

; 1210 :  UNDEF_INST( test_under_mask_high_low )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_test_under_mask_high_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_test_under_mask_high_high PROC

; 1209 :  UNDEF_INST( test_under_mask_high_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_test_under_mask_high_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_long_register PROC

; 1208 :  UNDEF_INST( subtract_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_long_fullword_register PROC

; 1207 :  UNDEF_INST( subtract_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_long_fullword PROC

; 1206 :  UNDEF_INST( subtract_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_long PROC

; 1205 :  UNDEF_INST( subtract_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_long_register PROC

; 1204 :  UNDEF_INST( subtract_logical_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_long_fullword_register PROC

; 1203 :  UNDEF_INST( subtract_logical_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_long_fullword PROC

; 1202 :  UNDEF_INST( subtract_logical_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_long PROC

; 1201 :  UNDEF_INST( subtract_logical_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_borrow_long_register PROC

; 1200 :  UNDEF_INST( subtract_logical_borrow_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_borrow_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_borrow_long PROC

; 1199 :  UNDEF_INST( subtract_logical_borrow_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_borrow_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_using_real_address_long PROC

; 1198 :  UNDEF_INST( store_using_real_address_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_using_real_address_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_reversed_long PROC

; 1197 :  UNDEF_INST( store_reversed_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_reversed_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_real_address PROC

; 1196 :  UNDEF_INST( store_real_address )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_real_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_pair_to_quadword PROC

; 1195 :  UNDEF_INST( store_pair_to_quadword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_pair_to_quadword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_multiple_long PROC

; 1194 :  UNDEF_INST( store_multiple_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_multiple_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_multiple_high PROC

; 1193 :  UNDEF_INST( store_multiple_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_multiple_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_long PROC

; 1192 :  UNDEF_INST( store_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_control_long PROC

; 1191 :  UNDEF_INST( store_control_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_control_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_characters_under_mask_high PROC

; 1190 :  UNDEF_INST( store_characters_under_mask_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_characters_under_mask_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_shift_right_single_long PROC

; 1189 :  UNDEF_INST( shift_right_single_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_shift_right_single_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_shift_right_single_logical_long PROC

; 1188 :  UNDEF_INST( shift_right_single_logical_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_shift_right_single_logical_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_shift_left_single_long PROC

; 1187 :  UNDEF_INST( shift_left_single_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_shift_left_single_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_shift_left_single_logical_long PROC

; 1186 :  UNDEF_INST( shift_left_single_logical_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_shift_left_single_logical_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_set_addressing_mode_64 PROC

; 1185 :  UNDEF_INST( set_addressing_mode_64 )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_set_addressing_mode_64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_rotate_left_single_logical_long PROC

; 1184 :  UNDEF_INST( rotate_left_single_logical_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_rotate_left_single_logical_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_long_register PROC

; 1183 :  UNDEF_INST( or_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_long PROC

; 1182 :  UNDEF_INST( or_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_immediate_low_low PROC

; 1181 :  UNDEF_INST( or_immediate_low_low )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_immediate_low_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_immediate_low_high PROC

; 1180 :  UNDEF_INST( or_immediate_low_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_immediate_low_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_immediate_high_low PROC

; 1179 :  UNDEF_INST( or_immediate_high_low )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_immediate_high_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_immediate_high_high PROC

; 1178 :  UNDEF_INST( or_immediate_high_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_immediate_high_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_single_long_register PROC

; 1177 :  UNDEF_INST( multiply_single_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_single_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_single_long_fullword_register PROC

; 1176 :  UNDEF_INST( multiply_single_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_single_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_single_long_fullword PROC

; 1175 :  UNDEF_INST( multiply_single_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_single_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_single_long PROC

; 1174 :  UNDEF_INST( multiply_single_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_single_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_long_halfword_immediate PROC

; 1173 :  UNDEF_INST( multiply_long_halfword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_long_halfword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_logical_long_register PROC

; 1172 :  UNDEF_INST( multiply_logical_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_logical_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_logical_long PROC

; 1171 :  UNDEF_INST( multiply_logical_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_logical_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_using_real_address_long PROC

; 1170 :  UNDEF_INST( load_using_real_address_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_using_real_address_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_reversed_long_register PROC

; 1169 :  UNDEF_INST( load_reversed_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_reversed_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_reversed_long PROC

; 1168 :  UNDEF_INST( load_reversed_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_reversed_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_real_address_long PROC

; 1167 :  UNDEF_INST( load_real_address_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_real_address_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_program_status_word_extended PROC

; 1166 :  UNDEF_INST( load_program_status_word_extended )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_program_status_word_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_positive_long_register PROC

; 1165 :  UNDEF_INST( load_positive_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_positive_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_positive_long_fullword_register PROC

; 1164 :  UNDEF_INST( load_positive_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_positive_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_pair_from_quadword PROC

; 1163 :  UNDEF_INST( load_pair_from_quadword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_pair_from_quadword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_negative_long_register PROC

; 1162 :  UNDEF_INST( load_negative_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_negative_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_negative_long_fullword_register PROC

; 1161 :  UNDEF_INST( load_negative_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_negative_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_multiple_long PROC

; 1160 :  UNDEF_INST( load_multiple_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_multiple_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_multiple_high PROC

; 1159 :  UNDEF_INST( load_multiple_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_multiple_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_multiple_disjoint PROC

; 1158 :  UNDEF_INST( load_multiple_disjoint )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_multiple_disjoint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_long_register PROC

; 1157 :  UNDEF_INST( load_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_long_halfword_immediate PROC

; 1156 :  UNDEF_INST( load_long_halfword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_long_halfword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_long_halfword PROC

; 1155 :  UNDEF_INST( load_long_halfword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_long_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_long_fullword_register PROC

; 1154 :  UNDEF_INST( load_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_long_fullword PROC

; 1153 :  UNDEF_INST( load_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_long PROC

; 1152 :  UNDEF_INST( load_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_long_thirtyone_register PROC

; 1151 :  UNDEF_INST( load_logical_long_thirtyone_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_long_thirtyone_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_long_thirtyone PROC

; 1150 :  UNDEF_INST( load_logical_long_thirtyone )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_long_thirtyone ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_long_halfword PROC

; 1149 :  UNDEF_INST( load_logical_long_halfword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_long_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_long_fullword_register PROC

; 1148 :  UNDEF_INST( load_logical_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_long_fullword PROC

; 1147 :  UNDEF_INST( load_logical_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_long_character PROC

; 1146 :  UNDEF_INST( load_logical_long_character )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_long_character ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_immediate_low_low PROC

; 1145 :  UNDEF_INST( load_logical_immediate_low_low )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_immediate_low_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_immediate_low_high PROC

; 1144 :  UNDEF_INST( load_logical_immediate_low_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_immediate_low_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_immediate_high_low PROC

; 1143 :  UNDEF_INST( load_logical_immediate_high_low )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_immediate_high_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_immediate_high_high PROC

; 1142 :  UNDEF_INST( load_logical_immediate_high_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_immediate_high_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_control_long PROC

; 1141 :  UNDEF_INST( load_control_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_control_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_complement_long_register PROC

; 1140 :  UNDEF_INST( load_complement_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_complement_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_complement_long_fullword_register PROC

; 1139 :  UNDEF_INST( load_complement_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_complement_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_test_long_register PROC

; 1138 :  UNDEF_INST( load_and_test_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_test_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_test_long_fullword_register PROC

; 1137 :  UNDEF_INST( load_and_test_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_test_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_immediate_low_low PROC

; 1136 :  UNDEF_INST( insert_immediate_low_low )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_immediate_low_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_immediate_low_high PROC

; 1135 :  UNDEF_INST( insert_immediate_low_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_immediate_low_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_immediate_high_low PROC

; 1134 :  UNDEF_INST( insert_immediate_high_low )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_immediate_high_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_immediate_high_high PROC

; 1133 :  UNDEF_INST( insert_immediate_high_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_immediate_high_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_characters_under_mask_high PROC

; 1132 :  UNDEF_INST( insert_characters_under_mask_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_characters_under_mask_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_stacked_registers_long PROC

; 1131 :  UNDEF_INST( extract_stacked_registers_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_stacked_registers_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_and_set_extended_authority PROC

; 1130 :  UNDEF_INST( extract_and_set_extended_authority )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_and_set_extended_authority ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_exclusive_or_long_register PROC

; 1129 :  UNDEF_INST( exclusive_or_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_exclusive_or_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_exclusive_or_long PROC

; 1128 :  UNDEF_INST( exclusive_or_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_exclusive_or_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_divide_single_long_register PROC

; 1127 :  UNDEF_INST( divide_single_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_divide_single_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_divide_single_long_fullword_register PROC

; 1126 :  UNDEF_INST( divide_single_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_divide_single_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_divide_single_long_fullword PROC

; 1125 :  UNDEF_INST( divide_single_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_divide_single_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_divide_single_long PROC

; 1124 :  UNDEF_INST( divide_single_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_divide_single_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_divide_logical_long_register PROC

; 1123 :  UNDEF_INST( divide_logical_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_divide_logical_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_divide_logical_long PROC

; 1122 :  UNDEF_INST( divide_logical_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_divide_logical_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_to_decimal_long PROC

; 1121 :  UNDEF_INST( convert_to_decimal_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_to_decimal_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_to_binary_long PROC

; 1120 :  UNDEF_INST( convert_to_binary_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_to_binary_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_float_short_to_fix64_reg PROC

; 1119 :  UNDEF_INST( convert_float_short_to_fix64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_float_short_to_fix64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_float_long_to_fix64_reg PROC

; 1118 :  UNDEF_INST( convert_float_long_to_fix64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_float_long_to_fix64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_float_ext_to_fix64_reg PROC

; 1117 :  UNDEF_INST( convert_float_ext_to_fix64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_float_ext_to_fix64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_fix64_to_float_short_reg PROC

; 1116 :  UNDEF_INST( convert_fix64_to_float_short_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_fix64_to_float_short_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_fix64_to_float_long_reg PROC

; 1115 :  UNDEF_INST( convert_fix64_to_float_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_fix64_to_float_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_fix64_to_float_ext_reg PROC

; 1114 :  UNDEF_INST( convert_fix64_to_float_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_fix64_to_float_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_long_register PROC

; 1113 :  UNDEF_INST( compare_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_long_halfword_immediate PROC

; 1112 :  UNDEF_INST( compare_long_halfword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_long_halfword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_long_fullword_register PROC

; 1111 :  UNDEF_INST( compare_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_long_fullword PROC

; 1110 :  UNDEF_INST( compare_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_long PROC

; 1109 :  UNDEF_INST( compare_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_long_register PROC

; 1108 :  UNDEF_INST( compare_logical_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_long_fullword_register PROC

; 1107 :  UNDEF_INST( compare_logical_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_long_fullword PROC

; 1106 :  UNDEF_INST( compare_logical_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_long PROC

; 1105 :  UNDEF_INST( compare_logical_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_characters_under_mask_high PROC

; 1104 :  UNDEF_INST( compare_logical_characters_under_mask_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_characters_under_mask_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_double_and_swap_long PROC

; 1103 :  UNDEF_INST( compare_double_and_swap_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_double_and_swap_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_and_swap_long PROC

; 1102 :  UNDEF_INST( compare_and_swap_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_and_swap_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_branch_relative_on_index_low_or_equal_long PROC

; 1101 :  UNDEF_INST( branch_relative_on_index_low_or_equal_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_branch_relative_on_index_low_or_equal_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_branch_relative_on_index_high_long PROC

; 1100 :  UNDEF_INST( branch_relative_on_index_high_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_branch_relative_on_index_high_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_branch_relative_on_count_long PROC

; 1099 :  UNDEF_INST( branch_relative_on_count_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_branch_relative_on_count_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_branch_on_index_low_or_equal_long PROC

; 1098 :  UNDEF_INST( branch_on_index_low_or_equal_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_branch_on_index_low_or_equal_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_branch_on_index_high_long PROC

; 1097 :  UNDEF_INST( branch_on_index_high_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_branch_on_index_high_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_branch_on_count_long_register PROC

; 1096 :  UNDEF_INST( branch_on_count_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_branch_on_count_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_branch_on_count_long PROC

; 1095 :  UNDEF_INST( branch_on_count_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_branch_on_count_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_long_register PROC

; 1094 :  UNDEF_INST( and_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_long PROC

; 1093 :  UNDEF_INST( and_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_immediate_low_low PROC

; 1092 :  UNDEF_INST( and_immediate_low_low )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_immediate_low_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_immediate_low_high PROC

; 1091 :  UNDEF_INST( and_immediate_low_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_immediate_low_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_immediate_high_low PROC

; 1090 :  UNDEF_INST( and_immediate_high_low )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_immediate_high_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_immediate_high_high PROC

; 1089 :  UNDEF_INST( and_immediate_high_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_immediate_high_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_long_register PROC

; 1088 :  UNDEF_INST( add_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_long_halfword_immediate PROC

; 1087 :  UNDEF_INST( add_long_halfword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_long_halfword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_long_fullword_register PROC

; 1086 :  UNDEF_INST( add_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_long_fullword PROC

; 1085 :  UNDEF_INST( add_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_long PROC

; 1084 :  UNDEF_INST( add_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_long_register PROC

; 1083 :  UNDEF_INST( add_logical_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_long_fullword_register PROC

; 1082 :  UNDEF_INST( add_logical_long_fullword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_long_fullword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_long_fullword PROC

; 1081 :  UNDEF_INST( add_logical_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_long PROC

; 1080 :  UNDEF_INST( add_logical_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_carry_long_register PROC

; 1079 :  UNDEF_INST( add_logical_carry_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_carry_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_carry_long PROC

; 1078 :  UNDEF_INST( add_logical_carry_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_carry_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_unxlate_ccw PROC

; 910  :  UNDEF_INST( ecpsvm_unxlate_ccw )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_unxlate_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_unlock_page PROC

; 909  :  UNDEF_INST( ecpsvm_unlock_page )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_unlock_page ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_tpage_lock PROC

; 908  :  UNDEF_INST( ecpsvm_tpage_lock )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_tpage_lock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_tpage PROC

; 907  :  UNDEF_INST( ecpsvm_tpage )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_tpage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_store_level PROC

; 906  :  UNDEF_INST( ecpsvm_store_level )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_store_level ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_prefmach_assist PROC

; 905  :  UNDEF_INST( ecpsvm_prefmach_assist )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_prefmach_assist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_lock_page PROC

; 904  :  UNDEF_INST( ecpsvm_lock_page )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_lock_page ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_locate_vblock PROC

; 903  :  UNDEF_INST( ecpsvm_locate_vblock )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_locate_vblock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_locate_rblock PROC

; 902  :  UNDEF_INST( ecpsvm_locate_rblock )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_locate_rblock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_loc_chgshrpg PROC

; 901  :  UNDEF_INST( ecpsvm_loc_chgshrpg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_loc_chgshrpg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_inval_segtab PROC

; 900  :  UNDEF_INST( ecpsvm_inval_segtab )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_inval_segtab ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_inval_ptable PROC

; 899  :  UNDEF_INST( ecpsvm_inval_ptable )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_inval_ptable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_free_ccwstor PROC

; 898  :  UNDEF_INST( ecpsvm_free_ccwstor )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_free_ccwstor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_extended_fretx PROC

; 897  :  UNDEF_INST( ecpsvm_extended_fretx )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_extended_fretx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_extended_freex PROC

; 896  :  UNDEF_INST( ecpsvm_extended_freex )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_extended_freex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_dispatch_main PROC

; 895  :  UNDEF_INST( ecpsvm_dispatch_main )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_dispatch_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_disp2 PROC

; 894  :  UNDEF_INST( ecpsvm_disp2 )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_disp2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_disp1 PROC

; 893  :  UNDEF_INST( ecpsvm_disp1 )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_disp1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_decode_next_ccw PROC

; 892  :  UNDEF_INST( ecpsvm_decode_next_ccw )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_decode_next_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_decode_first_ccw PROC

; 891  :  UNDEF_INST( ecpsvm_decode_first_ccw )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_decode_first_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_comm_ccwproc PROC

; 890  :  UNDEF_INST( ecpsvm_comm_ccwproc )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_comm_ccwproc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_basic_fretx PROC

; 889  :  UNDEF_INST( ecpsvm_basic_fretx )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_basic_fretx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_ecpsvm_basic_freex PROC

; 888  :  UNDEF_INST( ecpsvm_basic_freex )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_ecpsvm_basic_freex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_page_table_entry_address PROC

; 869  :  UNDEF_INST( load_page_table_entry_address )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_page_table_entry_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_disconnect_channel_set PROC

; 848  :  UNDEF_INST( disconnect_channel_set )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_disconnect_channel_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_connect_channel_set PROC

; 847  :  UNDEF_INST( connect_channel_set )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_connect_channel_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_set_storage_key PROC

; 711  :  UNDEF_INST( set_storage_key )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_set_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_reset_reference_bit PROC

; 710  :  UNDEF_INST( reset_reference_bit )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_reset_reference_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_storage_key PROC

; 709  :  UNDEF_INST( insert_storage_key )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_storage_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_program_status_word_extended_y PROC

; 691  :  UNDEF_INST( load_program_status_word_extended_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_program_status_word_extended_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_bear PROC

; 690  :  UNDEF_INST( store_bear )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_bear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_bear PROC

; 689  :  UNDEF_INST( load_bear )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_bear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_reference_bits_multiple PROC

; 685  :  UNDEF_INST( insert_reference_bits_multiple )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_reference_bits_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_vector_store_multiple PROC

; 681  :      UNDEF_INST(vector_store_multiple)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_vector_store_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_vector_load_multiple PROC

; 680  :      UNDEF_INST(vector_load_multiple)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_vector_load_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_vector_store PROC

; 679  :      UNDEF_INST(vector_store)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_vector_store ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_vector_load PROC

; 678  :      UNDEF_INST(vector_load)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_vector_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_ext_to_packed PROC

; 674  :  UNDEF_INST(convert_dfp_ext_to_packed)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_ext_to_packed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_long_to_packed PROC

; 673  :  UNDEF_INST(convert_dfp_long_to_packed)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_long_to_packed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_packed_to_dfp_ext PROC

; 672  :  UNDEF_INST(convert_packed_to_dfp_ext)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_packed_to_dfp_ext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_packed_to_dfp_long PROC

; 671  :  UNDEF_INST(convert_packed_to_dfp_long)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_packed_to_dfp_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_perform_cryptographic_computation PROC

; 667  :  UNDEF_INST( perform_cryptographic_computation )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_perform_cryptographic_computation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_cipher_message_with_counter PROC

; 666  :  UNDEF_INST( cipher_message_with_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_cipher_message_with_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_cipher_message_with_output_feedback PROC

; 665  :  UNDEF_INST( cipher_message_with_output_feedback )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_cipher_message_with_output_feedback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_cipher_message_with_cipher_feedback PROC

; 664  :  UNDEF_INST( cipher_message_with_cipher_feedback )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_cipher_message_with_cipher_feedback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_perform_cryptographic_key_management_operation PROC

; 660  :  UNDEF_INST( perform_cryptographic_key_management_operation )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_perform_cryptographic_key_management_operation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_hypervisor_information PROC

; 656  :  UNDEF_INST( store_hypervisor_information )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_hypervisor_information ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_transaction_nesting_depth PROC

; 652  :   UNDEF_INST( extract_transaction_nesting_depth )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_transaction_nesting_depth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_nontransactional_store PROC

; 651  :   UNDEF_INST( nontransactional_store )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_nontransactional_store ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_transaction_end PROC

; 650  :   UNDEF_INST( transaction_end )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_transaction_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_transaction_abort PROC

; 649  :   UNDEF_INST( transaction_abort )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_transaction_abort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_transaction_begin PROC

; 648  :   UNDEF_INST( transaction_begin )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_transaction_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_query_sampling_information PROC

; 644  :  UNDEF_INST( query_sampling_information )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_query_sampling_information ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_sampling_controls PROC

; 643  :  UNDEF_INST( load_sampling_controls )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_sampling_controls ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_set_peripheral_counter PROC

; 639  :  UNDEF_INST( set_peripheral_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_set_peripheral_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_set_cpu_counter PROC

; 638  :  UNDEF_INST( set_cpu_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_set_cpu_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_query_counter_information PROC

; 637  :  UNDEF_INST( query_counter_information )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_query_counter_information ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_peripheral_counter_set_controls PROC

; 636  :  UNDEF_INST( load_peripheral_counter_set_controls )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_peripheral_counter_set_controls ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_cpu_counter_set_controls PROC

; 635  :  UNDEF_INST( load_cpu_counter_set_controls )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_cpu_counter_set_controls ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_peripheral_counter PROC

; 634  :  UNDEF_INST( extract_peripheral_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_peripheral_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_cpu_counter PROC

; 633  :  UNDEF_INST( extract_cpu_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_cpu_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_coprocessor_group_address PROC

; 632  :  UNDEF_INST( extract_coprocessor_group_address )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_coprocessor_group_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_reset_reference_bits_multiple PROC

; 628  :  UNDEF_INST( reset_reference_bits_multiple )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_reset_reference_bits_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_move_right_to_left PROC

; 624  :  UNDEF_INST( move_right_to_left )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_move_right_to_left ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_select_fullword_high_register PROC

; 623  :  UNDEF_INST( select_fullword_high_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_select_fullword_high_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_select_register_long PROC

; 622  :  UNDEF_INST( select_register_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_select_register_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_select_register PROC

; 621  :  UNDEF_INST( select_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_select_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_register_long_with_complement PROC

; 620  :  UNDEF_INST( or_register_long_with_complement )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_register_long_with_complement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_register_with_complement PROC

; 619  :  UNDEF_INST( or_register_with_complement )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_register_with_complement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_nor_register_long PROC

; 618  :  UNDEF_INST( nor_register_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_nor_register_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_nor_register PROC

; 617  :  UNDEF_INST( nor_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_nor_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_not_xor_register_long PROC

; 616  :  UNDEF_INST( not_xor_register_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_not_xor_register_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_not_xor_register PROC

; 615  :  UNDEF_INST( not_xor_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_not_xor_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_nand_register_long PROC

; 614  :  UNDEF_INST( nand_register_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_nand_register_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_nand_register PROC

; 613  :  UNDEF_INST( nand_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_nand_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_register_long_with_complement PROC

; 612  :  UNDEF_INST( and_register_long_with_complement )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_register_long_with_complement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_register_with_complement PROC

; 611  :  UNDEF_INST( and_register_with_complement )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_register_with_complement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_single_long_cc PROC

; 607  :  UNDEF_INST( multiply_single_long_cc )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_single_long_cc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_single_long_register_cc PROC

; 606  :  UNDEF_INST( multiply_single_long_register_cc )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_single_long_register_cc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_single_cc PROC

; 605  :  UNDEF_INST( multiply_single_cc )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_single_cc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_single_register_cc PROC

; 604  :  UNDEF_INST( multiply_single_register_cc )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_single_register_cc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_long_halfword PROC

; 603  :  UNDEF_INST( multiply_long_halfword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_long_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_long PROC

; 602  :  UNDEF_INST( multiply_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_long_register PROC

; 601  :  UNDEF_INST( multiply_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_long_halfword PROC

; 600  :  UNDEF_INST( subtract_long_halfword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_long_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_long_halfword PROC

; 599  :  UNDEF_INST( add_long_halfword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_long_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_branch_indirect_on_condition PROC

; 598  :  UNDEF_INST( branch_indirect_on_condition )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_branch_indirect_on_condition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_zero_rightmost_byte PROC

; 594  :  UNDEF_INST( load_and_zero_rightmost_byte );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_zero_rightmost_byte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_and_zero_rightmost_byte PROC

; 593  :  UNDEF_INST( load_logical_and_zero_rightmost_byte );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_and_zero_rightmost_byte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_zero_rightmost_byte_grande PROC

; 592  :  UNDEF_INST( load_and_zero_rightmost_byte_grande );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_zero_rightmost_byte_grande ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_high_on_condition PROC

; 588  :  UNDEF_INST( store_high_on_condition );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_high_on_condition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_high_on_condition_register PROC

; 587  :  UNDEF_INST( load_high_on_condition_register );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_high_on_condition_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_high_on_condition PROC

; 586  :  UNDEF_INST( load_high_on_condition );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_high_on_condition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_halfword_immediate_on_condition_grande PROC

; 585  :  UNDEF_INST( load_halfword_immediate_on_condition_grande );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_halfword_immediate_on_condition_grande ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_halfword_immediate_on_condition PROC

; 584  :  UNDEF_INST( load_halfword_immediate_on_condition );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_halfword_immediate_on_condition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_halfword_high_immediate_on_condition PROC

; 583  :  UNDEF_INST( load_halfword_high_immediate_on_condition );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_halfword_high_immediate_on_condition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_transaction_begin_constrained PROC

; 579  :  UNDEF_INST( transaction_begin_constrained )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_transaction_begin_constrained ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_perform_processor_assist PROC

; 575  :  UNDEF_INST( perform_processor_assist );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_perform_processor_assist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_rotate_then_insert_selected_bits_long_reg_n PROC

; 571  :  UNDEF_INST( rotate_then_insert_selected_bits_long_reg_n )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_rotate_then_insert_selected_bits_long_reg_n ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_and_trap_long PROC

; 570  :  UNDEF_INST( compare_logical_and_trap_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_and_trap_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_and_trap PROC

; 569  :  UNDEF_INST( compare_logical_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_long_thirtyone_and_trap PROC

; 565  :  UNDEF_INST( load_logical_long_thirtyone_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_long_thirtyone_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_long_fullword_and_trap PROC

; 564  :  UNDEF_INST( load_logical_long_fullword_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_long_fullword_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_fullword_high_and_trap PROC

; 563  :  UNDEF_INST( load_fullword_high_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_fullword_high_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_long_and_trap PROC

; 562  :  UNDEF_INST( load_long_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_long_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_trap PROC

; 561  :  UNDEF_INST( load_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_next_instruction_access_intent PROC

; 557  :  UNDEF_INST( next_instruction_access_intent )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_next_instruction_access_intent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_branch_prediction_relative_preload PROC

; 556  :  UNDEF_INST( branch_prediction_relative_preload )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_branch_prediction_relative_preload ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_branch_prediction_preload PROC

; 555  :  UNDEF_INST( branch_prediction_preload )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_branch_prediction_preload ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_ext_to_zoned PROC

; 551  :  UNDEF_INST( convert_dfp_ext_to_zoned )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_ext_to_zoned ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_long_to_zoned PROC

; 550  :  UNDEF_INST( convert_dfp_long_to_zoned )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_long_to_zoned ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_zoned_to_dfp_ext PROC

; 549  :  UNDEF_INST( convert_zoned_to_dfp_ext )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_zoned_to_dfp_ext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_zoned_to_dfp_long PROC

; 548  :  UNDEF_INST( convert_zoned_to_dfp_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_zoned_to_dfp_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_population_count PROC

; 544  :  UNDEF_INST( population_count )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_population_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_on_condition_long PROC

; 540  :  UNDEF_INST( store_on_condition_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_on_condition_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_on_condition PROC

; 539  :  UNDEF_INST( store_on_condition )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_on_condition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_on_condition_long PROC

; 538  :  UNDEF_INST( load_on_condition_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_on_condition_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_on_condition PROC

; 537  :  UNDEF_INST( load_on_condition )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_on_condition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_on_condition_long_register PROC

; 536  :  UNDEF_INST( load_on_condition_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_on_condition_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_on_condition_register PROC

; 535  :  UNDEF_INST( load_on_condition_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_on_condition_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_pair_disjoint_long PROC

; 531  :  UNDEF_INST( load_pair_disjoint_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_pair_disjoint_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_or_long PROC

; 530  :  UNDEF_INST( load_and_or_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_or_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_exclusive_or_long PROC

; 529  :  UNDEF_INST( load_and_exclusive_or_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_exclusive_or_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_and_long PROC

; 528  :  UNDEF_INST( load_and_and_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_and_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_add_long PROC

; 527  :  UNDEF_INST( load_and_add_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_add_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_add_logical_long PROC

; 526  :  UNDEF_INST( load_and_add_logical_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_add_logical_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_pair_disjoint PROC

; 525  :  UNDEF_INST( load_pair_disjoint )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_pair_disjoint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_or PROC

; 524  :  UNDEF_INST( load_and_or )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_or ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_exclusive_or PROC

; 523  :  UNDEF_INST( load_and_exclusive_or )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_exclusive_or ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_and PROC

; 522  :  UNDEF_INST( load_and_and )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_and ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_add_logical PROC

; 521  :  UNDEF_INST( load_and_add_logical )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_add_logical ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_add PROC

; 520  :  UNDEF_INST( load_and_add )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_high_high_low_register PROC

; 516  :  UNDEF_INST( subtract_logical_high_high_low_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_high_high_low_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_high_high_high_register PROC

; 515  :  UNDEF_INST( subtract_logical_high_high_high_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_high_high_high_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_high_high_low_register PROC

; 514  :  UNDEF_INST( subtract_high_high_low_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_high_high_low_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_high_high_high_register PROC

; 513  :  UNDEF_INST( subtract_high_high_high_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_high_high_high_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_halfword_high PROC

; 512  :  UNDEF_INST( store_halfword_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_halfword_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_fullword_high PROC

; 511  :  UNDEF_INST( store_fullword_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_fullword_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_character_high PROC

; 510  :  UNDEF_INST( store_character_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_character_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_rotate_then_insert_selected_bits_low_long_reg PROC

; 509  :  UNDEF_INST( rotate_then_insert_selected_bits_low_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_rotate_then_insert_selected_bits_low_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_rotate_then_insert_selected_bits_high_long_reg PROC

; 508  :  UNDEF_INST( rotate_then_insert_selected_bits_high_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_rotate_then_insert_selected_bits_high_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_halfword_high PROC

; 507  :  UNDEF_INST( load_logical_halfword_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_halfword_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_character_high PROC

; 506  :  UNDEF_INST( load_logical_character_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_character_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_halfword_high PROC

; 505  :  UNDEF_INST( load_halfword_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_halfword_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_fullword_high PROC

; 504  :  UNDEF_INST( load_fullword_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_fullword_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_byte_high PROC

; 503  :  UNDEF_INST( load_byte_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_byte_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_high_immediate PROC

; 502  :  UNDEF_INST( compare_logical_high_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_high_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_high_fullword PROC

; 501  :  UNDEF_INST( compare_logical_high_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_high_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_high_low_register PROC

; 500  :  UNDEF_INST( compare_logical_high_low_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_high_low_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_high_high_register PROC

; 499  :  UNDEF_INST( compare_logical_high_high_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_high_high_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_high_immediate PROC

; 498  :  UNDEF_INST( compare_high_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_high_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_high_fullword PROC

; 497  :  UNDEF_INST( compare_high_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_high_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_high_low_register PROC

; 496  :  UNDEF_INST( compare_high_low_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_high_low_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_high_high_register PROC

; 495  :  UNDEF_INST( compare_high_high_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_high_high_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_branch_relative_on_count_high PROC

; 494  :  UNDEF_INST( branch_relative_on_count_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_branch_relative_on_count_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_with_signed_immediate_high_n PROC

; 493  :  UNDEF_INST( add_logical_with_signed_immediate_high_n )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_with_signed_immediate_high_n ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_with_signed_immediate_high PROC

; 492  :  UNDEF_INST( add_logical_with_signed_immediate_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_with_signed_immediate_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_high_high_low_register PROC

; 491  :  UNDEF_INST( add_logical_high_high_low_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_high_high_low_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_high_high_high_register PROC

; 490  :  UNDEF_INST( add_logical_high_high_high_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_high_high_high_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_high_immediate PROC

; 489  :  UNDEF_INST( add_high_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_high_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_high_high_low_register PROC

; 488  :  UNDEF_INST( add_high_high_low_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_high_high_low_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_high_high_high_register PROC

; 487  :  UNDEF_INST( add_high_high_high_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_high_high_high_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_distinct_long_register PROC

; 483  :  UNDEF_INST( subtract_logical_distinct_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_distinct_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_distinct_register PROC

; 482  :  UNDEF_INST( subtract_logical_distinct_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_distinct_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_distinct_long_register PROC

; 481  :  UNDEF_INST( subtract_distinct_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_distinct_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_distinct_register PROC

; 480  :  UNDEF_INST( subtract_distinct_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_distinct_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_shift_right_single_logical_distinct PROC

; 479  :  UNDEF_INST( shift_right_single_logical_distinct )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_shift_right_single_logical_distinct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_shift_right_single_distinct PROC

; 478  :  UNDEF_INST( shift_right_single_distinct )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_shift_right_single_distinct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_shift_left_single_logical_distinct PROC

; 477  :  UNDEF_INST( shift_left_single_logical_distinct )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_shift_left_single_logical_distinct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_shift_left_single_distinct PROC

; 476  :  UNDEF_INST( shift_left_single_distinct )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_shift_left_single_distinct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_distinct_long_register PROC

; 475  :  UNDEF_INST( or_distinct_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_distinct_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_distinct_register PROC

; 474  :  UNDEF_INST( or_distinct_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_distinct_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_exclusive_or_distinct_long_register PROC

; 473  :  UNDEF_INST( exclusive_or_distinct_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_exclusive_or_distinct_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_exclusive_or_distinct_register PROC

; 472  :  UNDEF_INST( exclusive_or_distinct_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_exclusive_or_distinct_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_distinct_long_register PROC

; 471  :  UNDEF_INST( and_distinct_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_distinct_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_distinct_register PROC

; 470  :  UNDEF_INST( and_distinct_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_distinct_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_distinct_long_signed_halfword_immediate PROC

; 469  :  UNDEF_INST( add_logical_distinct_long_signed_halfword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_distinct_long_signed_halfword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_distinct_signed_halfword_immediate PROC

; 468  :  UNDEF_INST( add_logical_distinct_signed_halfword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_distinct_signed_halfword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_distinct_long_register PROC

; 467  :  UNDEF_INST( add_logical_distinct_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_distinct_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_distinct_register PROC

; 466  :  UNDEF_INST( add_logical_distinct_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_distinct_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_distinct_long_halfword_immediate PROC

; 465  :  UNDEF_INST( add_distinct_long_halfword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_distinct_long_halfword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_distinct_halfword_immediate PROC

; 464  :  UNDEF_INST( add_distinct_halfword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_distinct_halfword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_distinct_long_register PROC

; 463  :  UNDEF_INST( add_distinct_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_distinct_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_distinct_register PROC

; 462  :  UNDEF_INST( add_distinct_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_distinct_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_perform_floating_point_operation PROC

; 458  :  UNDEF_INST( perform_floating_point_operation )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_perform_floating_point_operation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_test_data_group_dfp_short PROC

; 454  :  UNDEF_INST( test_data_group_dfp_short )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_test_data_group_dfp_short ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_test_data_group_dfp_long PROC

; 453  :  UNDEF_INST( test_data_group_dfp_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_test_data_group_dfp_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_test_data_group_dfp_ext PROC

; 452  :  UNDEF_INST( test_data_group_dfp_ext )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_test_data_group_dfp_ext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_test_data_class_dfp_short PROC

; 451  :  UNDEF_INST( test_data_class_dfp_short )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_test_data_class_dfp_short ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_test_data_class_dfp_long PROC

; 450  :  UNDEF_INST( test_data_class_dfp_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_test_data_class_dfp_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_test_data_class_dfp_ext PROC

; 449  :  UNDEF_INST( test_data_class_dfp_ext )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_test_data_class_dfp_ext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_dfp_long_reg PROC

; 448  :  UNDEF_INST( subtract_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_dfp_ext_reg PROC

; 447  :  UNDEF_INST( subtract_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_shift_coefficient_right_dfp_long PROC

; 446  :  UNDEF_INST( shift_coefficient_right_dfp_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_shift_coefficient_right_dfp_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_shift_coefficient_right_dfp_ext PROC

; 445  :  UNDEF_INST( shift_coefficient_right_dfp_ext )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_shift_coefficient_right_dfp_ext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_shift_coefficient_left_dfp_long PROC

; 444  :  UNDEF_INST( shift_coefficient_left_dfp_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_shift_coefficient_left_dfp_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_shift_coefficient_left_dfp_ext PROC

; 443  :  UNDEF_INST( shift_coefficient_left_dfp_ext )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_shift_coefficient_left_dfp_ext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_reround_dfp_long_reg PROC

; 442  :  UNDEF_INST( reround_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_reround_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_reround_dfp_ext_reg PROC

; 441  :  UNDEF_INST( reround_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_reround_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_quantize_dfp_long_reg PROC

; 440  :  UNDEF_INST( quantize_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_quantize_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_quantize_dfp_ext_reg PROC

; 439  :  UNDEF_INST( quantize_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_quantize_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_dfp_long_reg PROC

; 438  :  UNDEF_INST( multiply_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_dfp_ext_reg PROC

; 437  :  UNDEF_INST( multiply_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_rounded_dfp_long_to_short_reg PROC

; 436  :  UNDEF_INST( load_rounded_dfp_long_to_short_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_rounded_dfp_long_to_short_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_rounded_dfp_ext_to_long_reg PROC

; 435  :  UNDEF_INST( load_rounded_dfp_ext_to_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_rounded_dfp_ext_to_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_lengthened_dfp_short_to_long_reg PROC

; 434  :  UNDEF_INST( load_lengthened_dfp_short_to_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_lengthened_dfp_short_to_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_lengthened_dfp_long_to_ext_reg PROC

; 433  :  UNDEF_INST( load_lengthened_dfp_long_to_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_lengthened_dfp_long_to_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_fp_int_dfp_long_reg PROC

; 432  :  UNDEF_INST( load_fp_int_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_fp_int_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_fp_int_dfp_ext_reg PROC

; 431  :  UNDEF_INST( load_fp_int_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_fp_int_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_test_dfp_long_reg PROC

; 430  :  UNDEF_INST( load_and_test_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_test_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_test_dfp_ext_reg PROC

; 429  :  UNDEF_INST( load_and_test_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_test_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_biased_exponent_fix64_to_dfp_long_reg PROC

; 428  :  UNDEF_INST( insert_biased_exponent_fix64_to_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_biased_exponent_fix64_to_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_biased_exponent_fix64_to_dfp_ext_reg PROC

; 427  :  UNDEF_INST( insert_biased_exponent_fix64_to_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_biased_exponent_fix64_to_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_significance_dfp_long_reg PROC

; 426  :  UNDEF_INST( extract_significance_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_significance_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_significance_dfp_ext_reg PROC

; 425  :  UNDEF_INST( extract_significance_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_significance_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_biased_exponent_dfp_long_to_fix64_reg PROC

; 424  :  UNDEF_INST( extract_biased_exponent_dfp_long_to_fix64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_biased_exponent_dfp_long_to_fix64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_biased_exponent_dfp_ext_to_fix64_reg PROC

; 423  :  UNDEF_INST( extract_biased_exponent_dfp_ext_to_fix64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_biased_exponent_dfp_ext_to_fix64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_divide_dfp_long_reg PROC

; 422  :  UNDEF_INST( divide_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_divide_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_divide_dfp_ext_reg PROC

; 421  :  UNDEF_INST( divide_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_divide_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_long_to_ubcd64_reg PROC

; 420  :  UNDEF_INST( convert_dfp_long_to_ubcd64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_long_to_ubcd64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_ext_to_ubcd128_reg PROC

; 419  :  UNDEF_INST( convert_dfp_ext_to_ubcd128_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_ext_to_ubcd128_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_long_to_sbcd64_reg PROC

; 418  :  UNDEF_INST( convert_dfp_long_to_sbcd64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_long_to_sbcd64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_ext_to_sbcd128_reg PROC

; 417  :  UNDEF_INST( convert_dfp_ext_to_sbcd128_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_ext_to_sbcd128_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_long_to_fix64_reg PROC

; 416  :  UNDEF_INST( convert_dfp_long_to_fix64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_long_to_fix64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_ext_to_fix64_reg PROC

; 415  :  UNDEF_INST( convert_dfp_ext_to_fix64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_ext_to_fix64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_ubcd64_to_dfp_long_reg PROC

; 414  :  UNDEF_INST( convert_ubcd64_to_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_ubcd64_to_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_ubcd128_to_dfp_ext_reg PROC

; 413  :  UNDEF_INST( convert_ubcd128_to_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_ubcd128_to_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_sbcd64_to_dfp_long_reg PROC

; 412  :  UNDEF_INST( convert_sbcd64_to_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_sbcd64_to_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_sbcd128_to_dfp_ext_reg PROC

; 411  :  UNDEF_INST( convert_sbcd128_to_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_sbcd128_to_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_fix64_to_dfp_long_reg PROC

; 410  :  UNDEF_INST( convert_fix64_to_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_fix64_to_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_fix64_to_dfp_ext_reg PROC

; 409  :  UNDEF_INST( convert_fix64_to_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_fix64_to_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_exponent_dfp_long_reg PROC

; 408  :  UNDEF_INST( compare_exponent_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_exponent_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_exponent_dfp_ext_reg PROC

; 407  :  UNDEF_INST( compare_exponent_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_exponent_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_and_signal_dfp_long_reg PROC

; 406  :  UNDEF_INST( compare_and_signal_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_and_signal_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_and_signal_dfp_ext_reg PROC

; 405  :  UNDEF_INST( compare_and_signal_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_and_signal_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_dfp_long_reg PROC

; 404  :  UNDEF_INST( compare_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_dfp_ext_reg PROC

; 403  :  UNDEF_INST( compare_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_dfp_long_reg PROC

; 402  :  UNDEF_INST( add_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_dfp_ext_reg PROC

; 401  :  UNDEF_INST( add_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_set_fpc_and_signal PROC

; 395  :  UNDEF_INST( set_fpc_and_signal )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_set_fpc_and_signal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_fpc_and_signal PROC

; 394  :  UNDEF_INST( load_fpc_and_signal )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_fpc_and_signal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_positive_fpr_long_reg PROC

; 390  :  UNDEF_INST( load_positive_fpr_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_positive_fpr_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_negative_fpr_long_reg PROC

; 389  :  UNDEF_INST( load_negative_fpr_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_negative_fpr_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_complement_fpr_long_reg PROC

; 388  :  UNDEF_INST( load_complement_fpr_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_complement_fpr_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_copy_sign_fpr_long_reg PROC

; 387  :  UNDEF_INST( copy_sign_fpr_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_copy_sign_fpr_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_gr_from_fpr_long_reg PROC

; 383  :  UNDEF_INST( load_gr_from_fpr_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_gr_from_fpr_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_fpr_from_gr_long_reg PROC

; 382  :  UNDEF_INST( load_fpr_from_gr_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_fpr_from_gr_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_set_dfp_rounding_mode PROC

; 378  :  UNDEF_INST( set_dfp_rounding_mode )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_set_dfp_rounding_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_program_parameter PROC

; 372  :  UNDEF_INST( load_program_parameter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_program_parameter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_set_bfp_rounding_mode_3bit PROC

; 368  :  UNDEF_INST( set_bfp_rounding_mode_3bit )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_set_bfp_rounding_mode_3bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_u64_to_dfp_long_reg PROC

; 367  :  UNDEF_INST( convert_u64_to_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_u64_to_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_u64_to_dfp_ext_reg PROC

; 366  :  UNDEF_INST( convert_u64_to_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_u64_to_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_u64_to_bfp_short_reg PROC

; 365  :  UNDEF_INST( convert_u64_to_bfp_short_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_u64_to_bfp_short_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_u64_to_bfp_long_reg PROC

; 364  :  UNDEF_INST( convert_u64_to_bfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_u64_to_bfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_u64_to_bfp_ext_reg PROC

; 363  :  UNDEF_INST( convert_u64_to_bfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_u64_to_bfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_u32_to_dfp_long_reg PROC

; 362  :  UNDEF_INST( convert_u32_to_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_u32_to_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_u32_to_dfp_ext_reg PROC

; 361  :  UNDEF_INST( convert_u32_to_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_u32_to_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_u32_to_bfp_short_reg PROC

; 360  :  UNDEF_INST( convert_u32_to_bfp_short_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_u32_to_bfp_short_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_u32_to_bfp_long_reg PROC

; 359  :  UNDEF_INST( convert_u32_to_bfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_u32_to_bfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_u32_to_bfp_ext_reg PROC

; 358  :  UNDEF_INST( convert_u32_to_bfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_u32_to_bfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_fix32_to_dfp_long_reg PROC

; 357  :  UNDEF_INST( convert_fix32_to_dfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_fix32_to_dfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_fix32_to_dfp_ext_reg PROC

; 356  :  UNDEF_INST( convert_fix32_to_dfp_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_fix32_to_dfp_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_long_to_u64_reg PROC

; 355  :  UNDEF_INST( convert_dfp_long_to_u64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_long_to_u64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_long_to_u32_reg PROC

; 354  :  UNDEF_INST( convert_dfp_long_to_u32_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_long_to_u32_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_long_to_fix32_reg PROC

; 353  :  UNDEF_INST( convert_dfp_long_to_fix32_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_long_to_fix32_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_ext_to_u64_reg PROC

; 352  :  UNDEF_INST( convert_dfp_ext_to_u64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_ext_to_u64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_ext_to_u32_reg PROC

; 351  :  UNDEF_INST( convert_dfp_ext_to_u32_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_ext_to_u32_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_dfp_ext_to_fix32_reg PROC

; 350  :  UNDEF_INST( convert_dfp_ext_to_fix32_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_dfp_ext_to_fix32_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_bfp_short_to_u64_reg PROC

; 349  :  UNDEF_INST( convert_bfp_short_to_u64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_bfp_short_to_u64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_bfp_short_to_u32_reg PROC

; 348  :  UNDEF_INST( convert_bfp_short_to_u32_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_bfp_short_to_u32_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_bfp_long_to_u64_reg PROC

; 347  :  UNDEF_INST( convert_bfp_long_to_u64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_bfp_long_to_u64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_bfp_long_to_u32_reg PROC

; 346  :  UNDEF_INST( convert_bfp_long_to_u32_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_bfp_long_to_u32_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_bfp_ext_to_u64_reg PROC

; 345  :  UNDEF_INST( convert_bfp_ext_to_u64_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_bfp_ext_to_u64_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_bfp_ext_to_u32_reg PROC

; 344  :  UNDEF_INST( convert_bfp_ext_to_u32_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_bfp_ext_to_u32_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_execute_relative_long PROC

; 340  :  UNDEF_INST( execute_relative_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_execute_relative_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_relative_long_long PROC

; 336  :  UNDEF_INST( store_relative_long_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_relative_long_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_relative_long PROC

; 335  :  UNDEF_INST( store_relative_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_relative_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_halfword_relative_long PROC

; 334  :  UNDEF_INST( store_halfword_relative_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_halfword_relative_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_rotate_then_or_selected_bits_long_reg PROC

; 333  :  UNDEF_INST( rotate_then_or_selected_bits_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_rotate_then_or_selected_bits_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_rotate_then_insert_selected_bits_long_reg PROC

; 332  :  UNDEF_INST( rotate_then_insert_selected_bits_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_rotate_then_insert_selected_bits_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_rotate_then_exclusive_or_selected_bits_long_reg PROC

; 331  :  UNDEF_INST( rotate_then_exclusive_or_selected_bits_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_rotate_then_exclusive_or_selected_bits_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_rotate_then_and_selected_bits_long_reg PROC

; 330  :  UNDEF_INST( rotate_then_and_selected_bits_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_rotate_then_and_selected_bits_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_prefetch_data_relative_long PROC

; 329  :  UNDEF_INST( prefetch_data_relative_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_prefetch_data_relative_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_prefetch_data PROC

; 328  :  UNDEF_INST( prefetch_data )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_prefetch_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_y PROC

; 327  :  UNDEF_INST( multiply_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_single_immediate_long_fullword PROC

; 326  :  UNDEF_INST( multiply_single_immediate_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_single_immediate_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_single_immediate_fullword PROC

; 325  :  UNDEF_INST( multiply_single_immediate_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_single_immediate_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_halfword_y PROC

; 324  :  UNDEF_INST( multiply_halfword_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_halfword_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_move_long_from_halfword_immediate PROC

; 323  :  UNDEF_INST( move_long_from_halfword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_move_long_from_halfword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_move_halfword_from_halfword_immediate PROC

; 322  :  UNDEF_INST( move_halfword_from_halfword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_move_halfword_from_halfword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_move_fullword_from_halfword_immediate PROC

; 321  :  UNDEF_INST( move_fullword_from_halfword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_move_fullword_from_halfword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_relative_long_long_fullword PROC

; 320  :  UNDEF_INST( load_relative_long_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_relative_long_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_relative_long_long PROC

; 319  :  UNDEF_INST( load_relative_long_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_relative_long_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_relative_long PROC

; 318  :  UNDEF_INST( load_relative_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_relative_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_relative_long_long_fullword PROC

; 317  :  UNDEF_INST( load_logical_relative_long_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_relative_long_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_halfword_relative_long_long PROC

; 316  :  UNDEF_INST( load_logical_halfword_relative_long_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_halfword_relative_long_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_halfword_relative_long PROC

; 315  :  UNDEF_INST( load_logical_halfword_relative_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_halfword_relative_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_halfword_relative_long_long PROC

; 314  :  UNDEF_INST( load_halfword_relative_long_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_halfword_relative_long_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_halfword_relative_long PROC

; 313  :  UNDEF_INST( load_halfword_relative_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_halfword_relative_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_test_long_fullword PROC

; 312  :  UNDEF_INST( load_and_test_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_test_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_address_extended_y PROC

; 311  :  UNDEF_INST( load_address_extended_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_address_extended_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_cpu_attribute PROC

; 310  :  UNDEF_INST( extract_cpu_attribute )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_cpu_attribute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_relative_long_long_fullword PROC

; 309  :  UNDEF_INST( compare_relative_long_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_relative_long_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_relative_long_long PROC

; 308  :  UNDEF_INST( compare_relative_long_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_relative_long_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_relative_long PROC

; 307  :  UNDEF_INST( compare_relative_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_relative_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_relative_long_long_halfword PROC

; 306  :  UNDEF_INST( compare_logical_relative_long_long_halfword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_relative_long_long_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_relative_long_long_fullword PROC

; 305  :  UNDEF_INST( compare_logical_relative_long_long_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_relative_long_long_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_relative_long_long PROC

; 304  :  UNDEF_INST( compare_logical_relative_long_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_relative_long_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_relative_long_halfword PROC

; 303  :  UNDEF_INST( compare_logical_relative_long_halfword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_relative_long_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_relative_long PROC

; 302  :  UNDEF_INST( compare_logical_relative_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_relative_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_immediate_long_storage PROC

; 301  :  UNDEF_INST( compare_logical_immediate_long_storage )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_immediate_long_storage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_immediate_halfword_storage PROC

; 300  :  UNDEF_INST( compare_logical_immediate_halfword_storage )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_immediate_halfword_storage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_immediate_fullword_storage PROC

; 299  :  UNDEF_INST( compare_logical_immediate_fullword_storage )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_immediate_fullword_storage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_immediate_and_trap_long PROC

; 298  :  UNDEF_INST( compare_logical_immediate_and_trap_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_immediate_and_trap_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_immediate_and_trap_fullword PROC

; 297  :  UNDEF_INST( compare_logical_immediate_and_trap_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_immediate_and_trap_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_immediate_and_branch_relative_long PROC

; 296  :  UNDEF_INST( compare_logical_immediate_and_branch_relative_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_immediate_and_branch_relative_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_immediate_and_branch_relative PROC

; 295  :  UNDEF_INST( compare_logical_immediate_and_branch_relative )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_immediate_and_branch_relative ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_immediate_and_branch_long PROC

; 294  :  UNDEF_INST( compare_logical_immediate_and_branch_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_immediate_and_branch_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_immediate_and_branch PROC

; 293  :  UNDEF_INST( compare_logical_immediate_and_branch )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_immediate_and_branch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_and_trap_register PROC

; 292  :  UNDEF_INST( compare_logical_and_trap_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_and_trap_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_and_trap_long_register PROC

; 291  :  UNDEF_INST( compare_logical_and_trap_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_and_trap_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_and_branch_relative_register PROC

; 290  :  UNDEF_INST( compare_logical_and_branch_relative_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_and_branch_relative_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_and_branch_relative_long_register PROC

; 289  :  UNDEF_INST( compare_logical_and_branch_relative_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_and_branch_relative_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_and_branch_register PROC

; 288  :  UNDEF_INST( compare_logical_and_branch_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_and_branch_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_and_branch_long_register PROC

; 287  :  UNDEF_INST( compare_logical_and_branch_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_and_branch_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_immediate_and_trap_long PROC

; 286  :  UNDEF_INST( compare_immediate_and_trap_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_immediate_and_trap_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_immediate_and_trap PROC

; 285  :  UNDEF_INST( compare_immediate_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_immediate_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_immediate_and_branch_relative_long PROC

; 284  :  UNDEF_INST( compare_immediate_and_branch_relative_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_immediate_and_branch_relative_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_immediate_and_branch_relative PROC

; 283  :  UNDEF_INST( compare_immediate_and_branch_relative )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_immediate_and_branch_relative ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_immediate_and_branch_long PROC

; 282  :  UNDEF_INST( compare_immediate_and_branch_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_immediate_and_branch_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_immediate_and_branch PROC

; 281  :  UNDEF_INST( compare_immediate_and_branch )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_immediate_and_branch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_halfword_relative_long_long PROC

; 280  :  UNDEF_INST( compare_halfword_relative_long_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_halfword_relative_long_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_halfword_relative_long PROC

; 279  :  UNDEF_INST( compare_halfword_relative_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_halfword_relative_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_halfword_long PROC

; 278  :  UNDEF_INST( compare_halfword_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_halfword_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_halfword_immediate_storage PROC

; 277  :  UNDEF_INST( compare_halfword_immediate_storage )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_halfword_immediate_storage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_halfword_immediate_long_storage PROC

; 276  :  UNDEF_INST( compare_halfword_immediate_long_storage )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_halfword_immediate_long_storage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_halfword_immediate_halfword_storage PROC

; 275  :  UNDEF_INST( compare_halfword_immediate_halfword_storage )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_halfword_immediate_halfword_storage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_and_trap_register PROC

; 274  :  UNDEF_INST( compare_and_trap_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_and_trap_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_and_trap_long_register PROC

; 273  :  UNDEF_INST( compare_and_trap_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_and_trap_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_and_branch_relative_long_register PROC

; 272  :  UNDEF_INST( compare_and_branch_relative_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_and_branch_relative_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_and_branch_relative_register PROC

; 271  :  UNDEF_INST( compare_and_branch_relative_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_and_branch_relative_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_and_branch_long_register PROC

; 270  :  UNDEF_INST( compare_and_branch_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_and_branch_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_and_branch_register PROC

; 269  :  UNDEF_INST( compare_and_branch_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_and_branch_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_with_signed_immediate_long PROC

; 268  :  UNDEF_INST( add_logical_with_signed_immediate_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_with_signed_immediate_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_with_signed_immediate PROC

; 267  :  UNDEF_INST( add_logical_with_signed_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_with_signed_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_immediate_storage PROC

; 266  :  UNDEF_INST( add_immediate_storage )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_immediate_storage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_immediate_long_storage PROC

; 265  :  UNDEF_INST( add_immediate_long_storage )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_immediate_long_storage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_and_swap_and_store PROC

; 261  :  UNDEF_INST( compare_and_swap_and_store )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_and_swap_and_store ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_cpu_time PROC

; 257  :  UNDEF_INST( extract_cpu_time )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_cpu_time ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_perform_timing_facility_function PROC

; 253  :  UNDEF_INST( perform_timing_facility_function )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_perform_timing_facility_function ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_move_with_optional_specifications PROC

; 249  :  UNDEF_INST( move_with_optional_specifications )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_move_with_optional_specifications ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_translate_and_test_reverse_extended PROC

; 245  :  UNDEF_INST( translate_and_test_reverse_extended )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_translate_and_test_reverse_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_translate_and_test_extended PROC

; 244  :  UNDEF_INST( translate_and_test_extended )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_translate_and_test_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_clock_fast PROC

; 238  :  UNDEF_INST( store_clock_fast )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_clock_fast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_unnormal_float_long_to_ext_reg PROC

; 234  :  UNDEF_INST( multiply_unnormal_float_long_to_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_unnormal_float_long_to_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_unnormal_float_long_to_ext_low_reg PROC

; 233  :  UNDEF_INST( multiply_unnormal_float_long_to_ext_low_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_unnormal_float_long_to_ext_low_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_unnormal_float_long_to_ext_low PROC

; 232  :  UNDEF_INST( multiply_unnormal_float_long_to_ext_low )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_unnormal_float_long_to_ext_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_unnormal_float_long_to_ext_high_reg PROC

; 231  :  UNDEF_INST( multiply_unnormal_float_long_to_ext_high_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_unnormal_float_long_to_ext_high_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_unnormal_float_long_to_ext_high PROC

; 230  :  UNDEF_INST( multiply_unnormal_float_long_to_ext_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_unnormal_float_long_to_ext_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_unnormal_float_long_to_ext PROC

; 229  :  UNDEF_INST( multiply_unnormal_float_long_to_ext )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_unnormal_float_long_to_ext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_add_unnormal_float_long_to_ext_reg PROC

; 228  :  UNDEF_INST( multiply_add_unnormal_float_long_to_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_add_unnormal_float_long_to_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_add_unnormal_float_long_to_ext_low_reg PROC

; 227  :  UNDEF_INST( multiply_add_unnormal_float_long_to_ext_low_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_add_unnormal_float_long_to_ext_low_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_add_unnormal_float_long_to_ext_low PROC

; 226  :  UNDEF_INST( multiply_add_unnormal_float_long_to_ext_low )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_add_unnormal_float_long_to_ext_low ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_add_unnormal_float_long_to_ext_high_reg PROC

; 225  :  UNDEF_INST( multiply_add_unnormal_float_long_to_ext_high_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_add_unnormal_float_long_to_ext_high_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_add_unnormal_float_long_to_ext_high PROC

; 224  :  UNDEF_INST( multiply_add_unnormal_float_long_to_ext_high )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_add_unnormal_float_long_to_ext_high ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_add_unnormal_float_long_to_ext PROC

; 223  :  UNDEF_INST( multiply_add_unnormal_float_long_to_ext )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_add_unnormal_float_long_to_ext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_translate_and_test_reverse PROC

; 219  :  UNDEF_INST( translate_and_test_reverse )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_translate_and_test_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_search_string_unicode PROC

; 218  :  UNDEF_INST( search_string_unicode )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_search_string_unicode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_utf8_to_utf32 PROC

; 217  :  UNDEF_INST( convert_utf8_to_utf32 )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_utf8_to_utf32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_utf32_to_utf8 PROC

; 216  :  UNDEF_INST( convert_utf32_to_utf8 )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_utf32_to_utf8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_utf32_to_utf16 PROC

; 215  :  UNDEF_INST( convert_utf32_to_utf16 )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_utf32_to_utf16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_utf16_to_utf32 PROC

; 214  :  UNDEF_INST( convert_utf16_to_utf32 )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_utf16_to_utf32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_long_fullword_immediate PROC

; 210  :  UNDEF_INST( subtract_logical_long_fullword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_long_fullword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_fullword_immediate PROC

; 209  :  UNDEF_INST( subtract_logical_fullword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_fullword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_immediate_low_fullword PROC

; 208  :  UNDEF_INST( or_immediate_low_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_immediate_low_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_immediate_high_fullword PROC

; 207  :  UNDEF_INST( or_immediate_high_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_immediate_high_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_long_halfword_register PROC

; 206  :  UNDEF_INST( load_long_halfword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_long_halfword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_long_fullword_immediate PROC

; 205  :  UNDEF_INST( load_long_fullword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_long_fullword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_long_byte_register PROC

; 204  :  UNDEF_INST( load_long_byte_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_long_byte_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_long_halfword_register PROC

; 203  :  UNDEF_INST( load_logical_long_halfword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_long_halfword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_long_character_register PROC

; 202  :  UNDEF_INST( load_logical_long_character_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_long_character_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_immediate_low_fullword PROC

; 201  :  UNDEF_INST( load_logical_immediate_low_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_immediate_low_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_immediate_high_fullword PROC

; 200  :  UNDEF_INST( load_logical_immediate_high_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_immediate_high_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_halfword_register PROC

; 199  :  UNDEF_INST( load_logical_halfword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_halfword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_halfword PROC

; 198  :  UNDEF_INST( load_logical_halfword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_character_register PROC

; 197  :  UNDEF_INST( load_logical_character_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_character_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_logical_character PROC

; 196  :  UNDEF_INST( load_logical_character )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_logical_character ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_halfword_register PROC

; 195  :  UNDEF_INST( load_halfword_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_halfword_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_byte_register PROC

; 194  :  UNDEF_INST( load_byte_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_byte_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_test_long PROC

; 193  :  UNDEF_INST( load_and_test_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_test_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_and_test PROC

; 192  :  UNDEF_INST( load_and_test )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_and_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_immediate_low_fullword PROC

; 191  :  UNDEF_INST( insert_immediate_low_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_immediate_low_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_immediate_high_fullword PROC

; 190  :  UNDEF_INST( insert_immediate_high_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_immediate_high_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_find_leftmost_one_long_register PROC

; 189  :  UNDEF_INST( find_leftmost_one_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_find_leftmost_one_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_exclusive_or_immediate_low_fullword PROC

; 188  :  UNDEF_INST( exclusive_or_immediate_low_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_exclusive_or_immediate_low_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_exclusive_or_immediate_high_fullword PROC

; 187  :  UNDEF_INST( exclusive_or_immediate_high_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_exclusive_or_immediate_high_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_long_fullword_immediate PROC

; 186  :  UNDEF_INST( compare_long_fullword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_long_fullword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_long_fullword_immediate PROC

; 185  :  UNDEF_INST( compare_logical_long_fullword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_long_fullword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_fullword_immediate PROC

; 184  :  UNDEF_INST( compare_logical_fullword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_fullword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_fullword_immediate PROC

; 183  :  UNDEF_INST( compare_fullword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_fullword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_immediate_low_fullword PROC

; 182  :  UNDEF_INST( and_immediate_low_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_immediate_low_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_immediate_high_fullword PROC

; 181  :  UNDEF_INST( and_immediate_high_fullword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_immediate_high_fullword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_long_fullword_immediate PROC

; 180  :  UNDEF_INST( add_long_fullword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_long_fullword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_long_fullword_immediate PROC

; 179  :  UNDEF_INST( add_logical_long_fullword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_long_fullword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_fullword_immediate PROC

; 178  :  UNDEF_INST( add_logical_fullword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_fullword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_fullword_immediate PROC

; 177  :  UNDEF_INST( add_fullword_immediate )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_fullword_immediate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_float_short_y PROC

; 162  :  UNDEF_INST( store_float_short_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_float_short_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_float_long_y PROC

; 161  :  UNDEF_INST( store_float_long_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_float_long_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_float_short_y PROC

; 160  :  UNDEF_INST( load_float_short_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_float_short_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_float_long_y PROC

; 159  :  UNDEF_INST( load_float_long_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_float_long_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_access_multiple_y PROC

; 155  :  UNDEF_INST( store_access_multiple_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_access_multiple_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_access_multiple_y PROC

; 154  :  UNDEF_INST( load_access_multiple_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_access_multiple_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_test_under_mask_y PROC

; 150  :  UNDEF_INST( test_under_mask_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_test_under_mask_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_logical_y PROC

; 149  :  UNDEF_INST( subtract_logical_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_logical_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_halfword_y PROC

; 148  :  UNDEF_INST( subtract_halfword_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_halfword_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_subtract_y PROC

; 147  :  UNDEF_INST( subtract_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_subtract_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_multiple_y PROC

; 146  :  UNDEF_INST( store_multiple_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_multiple_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_halfword_y PROC

; 145  :  UNDEF_INST( store_halfword_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_halfword_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_characters_under_mask_y PROC

; 144  :  UNDEF_INST( store_characters_under_mask_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_characters_under_mask_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_character_y PROC

; 143  :  UNDEF_INST( store_character_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_character_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_store_y PROC

; 142  :  UNDEF_INST( store_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_store_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_y PROC

; 141  :  UNDEF_INST( or_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_or_immediate_y PROC

; 140  :  UNDEF_INST( or_immediate_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_or_immediate_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_multiply_single_y PROC

; 139  :  UNDEF_INST( multiply_single_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_multiply_single_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_move_immediate_y PROC

; 138  :  UNDEF_INST( move_immediate_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_move_immediate_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_real_address_y PROC

; 137  :  UNDEF_INST( load_real_address_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_real_address_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_multiple_y PROC

; 136  :  UNDEF_INST( load_multiple_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_multiple_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_halfword_y PROC

; 135  :  UNDEF_INST( load_halfword_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_halfword_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_byte_long PROC

; 134  :  UNDEF_INST( load_byte_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_byte_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_byte PROC

; 133  :  UNDEF_INST( load_byte )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_byte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_address_y PROC

; 132  :  UNDEF_INST( load_address_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_address_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_load_y PROC

; 131  :  UNDEF_INST( load_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_load_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_characters_under_mask_y PROC

; 130  :  UNDEF_INST( insert_characters_under_mask_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_characters_under_mask_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_insert_character_y PROC

; 129  :  UNDEF_INST( insert_character_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_insert_character_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_exclusive_or_y PROC

; 128  :  UNDEF_INST( exclusive_or_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_exclusive_or_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_exclusive_or_immediate_y PROC

; 127  :  UNDEF_INST( exclusive_or_immediate_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_exclusive_or_immediate_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_to_decimal_y PROC

; 126  :  UNDEF_INST( convert_to_decimal_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_to_decimal_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_convert_to_binary_y PROC

; 125  :  UNDEF_INST( convert_to_binary_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_convert_to_binary_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_characters_under_mask_y PROC

; 124  :  UNDEF_INST( compare_logical_characters_under_mask_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_characters_under_mask_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_immediate_y PROC

; 123  :  UNDEF_INST( compare_logical_immediate_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_immediate_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_logical_y PROC

; 122  :  UNDEF_INST( compare_logical_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_logical_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_halfword_y PROC

; 121  :  UNDEF_INST( compare_halfword_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_halfword_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_double_and_swap_y PROC

; 120  :  UNDEF_INST( compare_double_and_swap_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_double_and_swap_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_and_swap_y PROC

; 119  :  UNDEF_INST( compare_and_swap_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_and_swap_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_y PROC

; 118  :  UNDEF_INST( compare_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_y PROC

; 117  :  UNDEF_INST( and_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_and_immediate_y PROC

; 116  :  UNDEF_INST( and_immediate_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_and_immediate_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_logical_y PROC

; 115  :  UNDEF_INST( add_logical_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_logical_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_halfword_y PROC

; 114  :  UNDEF_INST( add_halfword_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_halfword_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_add_y PROC

; 113  :  UNDEF_INST( add_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_add_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_perform_topology_function PROC

; 87   :  UNDEF_INST( perform_topology_function )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_perform_topology_function ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_perform_frame_management_function PROC

; 83   :  UNDEF_INST( perform_frame_management_function )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_perform_frame_management_function ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_set_secondary_asn_with_instance PROC

; 75   :  UNDEF_INST( set_secondary_asn_with_instance )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_set_secondary_asn_with_instance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_program_transfer_with_instance PROC

; 74   :  UNDEF_INST( program_transfer_with_instance )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_program_transfer_with_instance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_secondary_asn_and_instance PROC

; 73   :  UNDEF_INST( extract_secondary_asn_and_instance )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_secondary_asn_and_instance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_extract_primary_asn_and_instance PROC

; 72   :  UNDEF_INST( extract_primary_asn_and_instance )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_extract_primary_asn_and_instance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_invalidate_dat_table_entry PROC

; 68   :  UNDEF_INST( invalidate_dat_table_entry )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_invalidate_dat_table_entry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compare_and_swap_and_purge_long PROC

; 67   :  UNDEF_INST( compare_and_swap_and_purge_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compare_and_swap_and_purge_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv73 = 32
tv74 = 36
tv86 = 40
tv87 = 44
tv130 = 48
tv131 = 52
inst$ = 80
regs$ = 88
s390_operation_exception PROC

; 1428 : {

$LN19:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s390_opera:

; 1429 :     INST_UPDATE_PSW (regs, ILC(inst[0]), ILC(inst[0]));

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 00	 imul	 rax, rax, 0
  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	83 f8 40	 cmp	 eax, 64			; 00000040H
  00023	7d 0a		 jge	 SHORT $LN9@s390_opera
  00025	c7 44 24 24 02
	00 00 00	 mov	 DWORD PTR tv74[rsp], 2
  0002d	eb 33		 jmp	 SHORT $LN10@s390_opera
$LN9@s390_opera:
  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	48 6b c0 00	 imul	 rax, rax, 0
  00038	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0003d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00041	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  00046	7d 0a		 jge	 SHORT $LN7@s390_opera
  00048	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR tv73[rsp], 4
  00050	eb 08		 jmp	 SHORT $LN8@s390_opera
$LN7@s390_opera:
  00052	c7 44 24 20 06
	00 00 00	 mov	 DWORD PTR tv73[rsp], 6
$LN8@s390_opera:
  0005a	8b 44 24 20	 mov	 eax, DWORD PTR tv73[rsp]
  0005e	89 44 24 24	 mov	 DWORD PTR tv74[rsp], eax
$LN10@s390_opera:
  00062	48 63 44 24 24	 movsxd	 rax, DWORD PTR tv74[rsp]
  00067	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0006c	48 03 41 68	 add	 rax, QWORD PTR [rcx+104]
  00070	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00075	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	48 6b c0 00	 imul	 rax, rax, 0
  00082	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00087	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0008b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0008e	7d 0a		 jge	 SHORT $LN13@s390_opera
  00090	c7 44 24 2c 02
	00 00 00	 mov	 DWORD PTR tv87[rsp], 2
  00098	eb 33		 jmp	 SHORT $LN14@s390_opera
$LN13@s390_opera:
  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	48 6b c0 00	 imul	 rax, rax, 0
  000a3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  000a8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ac	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  000b1	7d 0a		 jge	 SHORT $LN11@s390_opera
  000b3	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR tv86[rsp], 4
  000bb	eb 08		 jmp	 SHORT $LN12@s390_opera
$LN11@s390_opera:
  000bd	c7 44 24 28 06
	00 00 00	 mov	 DWORD PTR tv86[rsp], 6
$LN12@s390_opera:
  000c5	8b 44 24 28	 mov	 eax, DWORD PTR tv86[rsp]
  000c9	89 44 24 2c	 mov	 DWORD PTR tv87[rsp], eax
$LN14@s390_opera:
  000cd	83 7c 24 2c 00	 cmp	 DWORD PTR tv87[rsp], 0
  000d2	74 64		 je	 SHORT $LN5@s390_opera
  000d4	b8 01 00 00 00	 mov	 eax, 1
  000d9	48 6b c0 00	 imul	 rax, rax, 0
  000dd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  000e2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000e6	83 f8 40	 cmp	 eax, 64			; 00000040H
  000e9	7d 0a		 jge	 SHORT $LN17@s390_opera
  000eb	c7 44 24 34 02
	00 00 00	 mov	 DWORD PTR tv131[rsp], 2
  000f3	eb 33		 jmp	 SHORT $LN18@s390_opera
$LN17@s390_opera:
  000f5	b8 01 00 00 00	 mov	 eax, 1
  000fa	48 6b c0 00	 imul	 rax, rax, 0
  000fe	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00103	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00107	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  0010c	7d 0a		 jge	 SHORT $LN15@s390_opera
  0010e	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR tv130[rsp], 4
  00116	eb 08		 jmp	 SHORT $LN16@s390_opera
$LN15@s390_opera:
  00118	c7 44 24 30 06
	00 00 00	 mov	 DWORD PTR tv130[rsp], 6
$LN16@s390_opera:
  00120	8b 44 24 30	 mov	 eax, DWORD PTR tv130[rsp]
  00124	89 44 24 34	 mov	 DWORD PTR tv131[rsp], eax
$LN18@s390_opera:
  00128	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0012d	0f b6 4c 24 34	 movzx	 ecx, BYTE PTR tv131[rsp]
  00132	88 88 9a 00 00
	00		 mov	 BYTE PTR [rax+154], cl
$LN5@s390_opera:
  00138	33 c0		 xor	 eax, eax
  0013a	85 c0		 test	 eax, eax
  0013c	0f 85 cc fe ff
	ff		 jne	 $LN4@s390_opera

; 1430 :     ARCH_DEP( program_interrupt )(regs, PGM_OPERATION_EXCEPTION);

  00142	ba 01 00 00 00	 mov	 edx, 1
  00147	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0014c	e8 00 00 00 00	 call	 s390_program_interrupt

; 1431 : }

  00151	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00155	c3		 ret	 0
s390_operation_exception ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compute_message_authentication_code PROC

; 109  :  UNDEF_INST( compute_message_authentication_code )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compute_message_authentication_code ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compute_last_message_digest PROC

; 108  :  UNDEF_INST( compute_last_message_digest )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compute_last_message_digest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_compute_intermediate_message_digest PROC

; 107  :  UNDEF_INST( compute_intermediate_message_digest )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_compute_intermediate_message_digest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_cipher_message_with_chaining PROC

; 106  :  UNDEF_INST( cipher_message_with_chaining )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_cipher_message_with_chaining ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s390_cipher_message PROC

; 105  :  UNDEF_INST( cipher_message )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s390_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s390_cipher_message ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv139 = 72
m4$ = 76
b2$ = 80
d2$ = 84
v3$ = 88
v1$ = 92
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_VRS_A PROC

; 2587 : IPRINT_FUNC(ASMFMT_VRS_A);

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2588 :     int v1, v3, b2, d2, m4;
; 2589 :     UNREFERENCED(regs);

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2590 :     v1 = ((inst[1] >> 4) & 0x0F) | ((inst[4] & 0x08) << 1);

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	83 e0 0f	 and	 eax, 15
  0004e	b9 01 00 00 00	 mov	 ecx, 1
  00053	48 6b c9 04	 imul	 rcx, rcx, 4
  00057	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  0005f	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00063	83 e1 08	 and	 ecx, 8
  00066	d1 e1		 shl	 ecx, 1
  00068	0b c1		 or	 eax, ecx
  0006a	89 44 24 5c	 mov	 DWORD PTR v1$[rsp], eax

; 2591 :     v3 = ((inst[1] >> 0) & 0x0F) | ((inst[4] & 0x04) << 2);

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	48 6b c0 01	 imul	 rax, rax, 1
  00077	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00083	83 e0 0f	 and	 eax, 15
  00086	b9 01 00 00 00	 mov	 ecx, 1
  0008b	48 6b c9 04	 imul	 rcx, rcx, 4
  0008f	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00097	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0009b	83 e1 04	 and	 ecx, 4
  0009e	c1 e1 02	 shl	 ecx, 2
  000a1	0b c1		 or	 eax, ecx
  000a3	89 44 24 58	 mov	 DWORD PTR v3$[rsp], eax

; 2592 :     b2 = inst[2] >> 4;

  000a7	b8 01 00 00 00	 mov	 eax, 1
  000ac	48 6b c0 02	 imul	 rax, rax, 2
  000b0	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000b8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000bc	c1 f8 04	 sar	 eax, 4
  000bf	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax

; 2593 :     d2 = (inst[2] & 0x0F) << 8 | inst[3];

  000c3	b8 01 00 00 00	 mov	 eax, 1
  000c8	48 6b c0 02	 imul	 rax, rax, 2
  000cc	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000d4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d8	83 e0 0f	 and	 eax, 15
  000db	c1 e0 08	 shl	 eax, 8
  000de	b9 01 00 00 00	 mov	 ecx, 1
  000e3	48 6b c9 03	 imul	 rcx, rcx, 3
  000e7	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000ef	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000f3	0b c1		 or	 eax, ecx
  000f5	89 44 24 54	 mov	 DWORD PTR d2$[rsp], eax

; 2594 :     m4 = inst[4] >> 4;

  000f9	b8 01 00 00 00	 mov	 eax, 1
  000fe	48 6b c0 04	 imul	 rax, rax, 4
  00102	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0010a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0010e	c1 f8 04	 sar	 eax, 4
  00111	89 44 24 4c	 mov	 DWORD PTR m4$[rsp], eax

; 2595 :     IPRINT_PRINT("%d,%d,%d(%d),%d", v1, v3, d2, b2, m4)

  00115	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  0011d	48 ff c0	 inc	 rax
  00120	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00125	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  0012a	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0012d	89 44 24 48	 mov	 DWORD PTR tv139[rsp], eax
  00131	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00136	48 ff c0	 inc	 rax
  00139	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  0013e	83 7c 24 48 00	 cmp	 DWORD PTR tv139[rsp], 0
  00143	74 02		 je	 SHORT $LN6@iprint_ASM
  00145	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00147	8b 44 24 4c	 mov	 eax, DWORD PTR m4$[rsp]
  0014b	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0014f	8b 44 24 50	 mov	 eax, DWORD PTR b2$[rsp]
  00153	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00157	8b 44 24 54	 mov	 eax, DWORD PTR d2$[rsp]
  0015b	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0015f	8b 44 24 58	 mov	 eax, DWORD PTR v3$[rsp]
  00163	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00167	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR v1$[rsp]
  0016c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198966
  00173	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00178	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  0017d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00183	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00188	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018d	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00192	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0019a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198967
  001a1	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  001a9	e8 00 00 00 00	 call	 sprintf
  001ae	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001b6	48 33 cc	 xor	 rcx, rsp
  001b9	e8 00 00 00 00	 call	 __security_check_cookie
  001be	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  001c5	c3		 ret	 0
iprint_ASMFMT_VRS_A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv133 = 72
m3$ = 76
b2$ = 80
x2$ = 84
d2$ = 88
v1$ = 92
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_VRX PROC

; 2577 : IPRINT_FUNC(ASMFMT_VRX);

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2578 :     int v1, d2, x2, b2, m3;
; 2579 :     UNREFERENCED(regs);

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2580 :     v1 = ((inst[1] >> 4) & 0x0F) | ((inst[4] & 0x08) << 1);

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	83 e0 0f	 and	 eax, 15
  0004e	b9 01 00 00 00	 mov	 ecx, 1
  00053	48 6b c9 04	 imul	 rcx, rcx, 4
  00057	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  0005f	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00063	83 e1 08	 and	 ecx, 8
  00066	d1 e1		 shl	 ecx, 1
  00068	0b c1		 or	 eax, ecx
  0006a	89 44 24 5c	 mov	 DWORD PTR v1$[rsp], eax

; 2581 :     d2 = (inst[2] & 0x0F) << 8 | inst[3];

  0006e	b8 01 00 00 00	 mov	 eax, 1
  00073	48 6b c0 02	 imul	 rax, rax, 2
  00077	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00083	83 e0 0f	 and	 eax, 15
  00086	c1 e0 08	 shl	 eax, 8
  00089	b9 01 00 00 00	 mov	 ecx, 1
  0008e	48 6b c9 03	 imul	 rcx, rcx, 3
  00092	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  0009a	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0009e	0b c1		 or	 eax, ecx
  000a0	89 44 24 58	 mov	 DWORD PTR d2$[rsp], eax

; 2582 :     x2 = inst[1] & 0x0F;

  000a4	b8 01 00 00 00	 mov	 eax, 1
  000a9	48 6b c0 01	 imul	 rax, rax, 1
  000ad	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000b5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b9	83 e0 0f	 and	 eax, 15
  000bc	89 44 24 54	 mov	 DWORD PTR x2$[rsp], eax

; 2583 :     b2 = inst[2] >> 4;

  000c0	b8 01 00 00 00	 mov	 eax, 1
  000c5	48 6b c0 02	 imul	 rax, rax, 2
  000c9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000d1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d5	c1 f8 04	 sar	 eax, 4
  000d8	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax

; 2584 :     m3 = inst[4] >> 4;

  000dc	b8 01 00 00 00	 mov	 eax, 1
  000e1	48 6b c0 04	 imul	 rax, rax, 4
  000e5	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ed	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000f1	c1 f8 04	 sar	 eax, 4
  000f4	89 44 24 4c	 mov	 DWORD PTR m3$[rsp], eax

; 2585 :     IPRINT_PRINT("%d,%d(%d,%d),%d", v1, d2, x2, b2, m3)

  000f8	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00100	48 ff c0	 inc	 rax
  00103	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00108	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  0010d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00110	89 44 24 48	 mov	 DWORD PTR tv133[rsp], eax
  00114	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00119	48 ff c0	 inc	 rax
  0011c	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  00121	83 7c 24 48 00	 cmp	 DWORD PTR tv133[rsp], 0
  00126	74 02		 je	 SHORT $LN6@iprint_ASM
  00128	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  0012a	8b 44 24 4c	 mov	 eax, DWORD PTR m3$[rsp]
  0012e	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00132	8b 44 24 50	 mov	 eax, DWORD PTR b2$[rsp]
  00136	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0013a	8b 44 24 54	 mov	 eax, DWORD PTR x2$[rsp]
  0013e	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00142	8b 44 24 58	 mov	 eax, DWORD PTR d2$[rsp]
  00146	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0014a	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR v1$[rsp]
  0014f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198943
  00156	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0015b	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  00160	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00166	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  0016b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00170	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00175	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0017d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198944
  00184	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0018c	e8 00 00 00 00	 call	 sprintf
  00191	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00199	48 33 cc	 xor	 rcx, rsp
  0019c	e8 00 00 00 00	 call	 __security_check_cookie
  001a1	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  001a8	c3		 ret	 0
iprint_ASMFMT_VRX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv73 = 56
rs2$ = 60
opers$ = 64
__$ArrayPad$ = 128
regs$ = 160
inst$ = 168
mnemonic$ = 176
prtbuf$ = 184
iprint_ASMFMT_VS PROC

; 2571 : IPRINT_FUNC( ASMFMT_VS );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2572 :     int rs2;
; 2573 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2574 :     rs2 = inst[3] & 0x0F;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 03	 imul	 rax, rax, 3
  0003c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 3c	 mov	 DWORD PTR rs2$[rsp], eax

; 2575 :     IPRINT_PRINT("%d",rs2)

  0004f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00057	48 ff c0	 inc	 rax
  0005a	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00064	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00067	89 44 24 38	 mov	 DWORD PTR tv73[rsp], eax
  0006b	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00070	48 ff c0	 inc	 rax
  00073	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  00078	83 7c 24 38 00	 cmp	 DWORD PTR tv73[rsp], 0
  0007d	74 02		 je	 SHORT $LN6@iprint_ASM
  0007f	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00081	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR rs2$[rsp]
  00086	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198920
  0008d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00092	48 8d 4c 24 40	 lea	 rcx, QWORD PTR opers$[rsp]
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0009d	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000a2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a7	4c 8d 4c 24 40	 lea	 r9, QWORD PTR opers$[rsp]
  000ac	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198921
  000bb	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  000c3	e8 00 00 00 00	 call	 sprintf
  000c8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d0	48 33 cc	 xor	 rcx, rsp
  000d3	e8 00 00 00 00	 call	 __security_check_cookie
  000d8	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  000df	c3		 ret	 0
iprint_ASMFMT_VS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv131 = 72
b2$ = 76
d2$ = 80
b1$ = 84
d1$ = 88
r3$ = 92
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_SSF_RSS PROC

; 2561 : IPRINT_FUNC( ASMFMT_SSF_RSS );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2562 :     int r3,b1,d1,b2,d2;
; 2563 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2564 :     r3 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 5c	 mov	 DWORD PTR r3$[rsp], eax

; 2565 :     b1 = inst[2] >> 4;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 f8 04	 sar	 eax, 4
  00067	89 44 24 54	 mov	 DWORD PTR b1$[rsp], eax

; 2566 :     d1 = (inst[2] & 0x0F) << 8 | inst[3];

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	83 e0 0f	 and	 eax, 15
  00083	c1 e0 08	 shl	 eax, 8
  00086	b9 01 00 00 00	 mov	 ecx, 1
  0008b	48 6b c9 03	 imul	 rcx, rcx, 3
  0008f	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00097	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0009b	0b c1		 or	 eax, ecx
  0009d	89 44 24 58	 mov	 DWORD PTR d1$[rsp], eax

; 2567 :     b2 = inst[4] >> 4;

  000a1	b8 01 00 00 00	 mov	 eax, 1
  000a6	48 6b c0 04	 imul	 rax, rax, 4
  000aa	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000b2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b6	c1 f8 04	 sar	 eax, 4
  000b9	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax

; 2568 :     d2 = (inst[4] & 0x0F) << 8 | inst[5];

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	48 6b c0 04	 imul	 rax, rax, 4
  000c6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ce	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d2	83 e0 0f	 and	 eax, 15
  000d5	c1 e0 08	 shl	 eax, 8
  000d8	b9 01 00 00 00	 mov	 ecx, 1
  000dd	48 6b c9 05	 imul	 rcx, rcx, 5
  000e1	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000e9	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000ed	0b c1		 or	 eax, ecx
  000ef	89 44 24 50	 mov	 DWORD PTR d2$[rsp], eax

; 2569 :     IPRINT_PRINT("%d,%d(%d),%d(%d)",r3,d1,b1,d2,b2)

  000f3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000fb	48 ff c0	 inc	 rax
  000fe	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00103	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00108	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0010b	89 44 24 48	 mov	 DWORD PTR tv131[rsp], eax
  0010f	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00114	48 ff c0	 inc	 rax
  00117	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  0011c	83 7c 24 48 00	 cmp	 DWORD PTR tv131[rsp], 0
  00121	74 02		 je	 SHORT $LN6@iprint_ASM
  00123	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00125	8b 44 24 4c	 mov	 eax, DWORD PTR b2$[rsp]
  00129	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0012d	8b 44 24 50	 mov	 eax, DWORD PTR d2$[rsp]
  00131	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00135	8b 44 24 54	 mov	 eax, DWORD PTR b1$[rsp]
  00139	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0013d	8b 44 24 58	 mov	 eax, DWORD PTR d1$[rsp]
  00141	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00145	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR r3$[rsp]
  0014a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198901
  00151	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00156	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  0015b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00161	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00166	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016b	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00170	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00178	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198902
  0017f	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00187	e8 00 00 00 00	 call	 sprintf
  0018c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00194	48 33 cc	 xor	 rcx, rsp
  00197	e8 00 00 00 00	 call	 __security_check_cookie
  0019c	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  001a3	c3		 ret	 0
iprint_ASMFMT_SSF_RSS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv131 = 72
r3$ = 76
b2$ = 80
d2$ = 84
b1$ = 88
d1$ = 92
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_SSF PROC

; 2551 : IPRINT_FUNC( ASMFMT_SSF );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2552 :     int r3,b1,d1,b2,d2;
; 2553 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2554 :     r3 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 4c	 mov	 DWORD PTR r3$[rsp], eax

; 2555 :     b1 = inst[2] >> 4;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 f8 04	 sar	 eax, 4
  00067	89 44 24 58	 mov	 DWORD PTR b1$[rsp], eax

; 2556 :     d1 = (inst[2] & 0x0F) << 8 | inst[3];

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	83 e0 0f	 and	 eax, 15
  00083	c1 e0 08	 shl	 eax, 8
  00086	b9 01 00 00 00	 mov	 ecx, 1
  0008b	48 6b c9 03	 imul	 rcx, rcx, 3
  0008f	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00097	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0009b	0b c1		 or	 eax, ecx
  0009d	89 44 24 5c	 mov	 DWORD PTR d1$[rsp], eax

; 2557 :     b2 = inst[4] >> 4;

  000a1	b8 01 00 00 00	 mov	 eax, 1
  000a6	48 6b c0 04	 imul	 rax, rax, 4
  000aa	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000b2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b6	c1 f8 04	 sar	 eax, 4
  000b9	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax

; 2558 :     d2 = (inst[4] & 0x0F) << 8 | inst[5];

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	48 6b c0 04	 imul	 rax, rax, 4
  000c6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ce	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d2	83 e0 0f	 and	 eax, 15
  000d5	c1 e0 08	 shl	 eax, 8
  000d8	b9 01 00 00 00	 mov	 ecx, 1
  000dd	48 6b c9 05	 imul	 rcx, rcx, 5
  000e1	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000e9	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000ed	0b c1		 or	 eax, ecx
  000ef	89 44 24 54	 mov	 DWORD PTR d2$[rsp], eax

; 2559 :     IPRINT_PRINT("%d(%d),%d(%d),%d",d1,b1,d2,b2,r3)

  000f3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000fb	48 ff c0	 inc	 rax
  000fe	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00103	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00108	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0010b	89 44 24 48	 mov	 DWORD PTR tv131[rsp], eax
  0010f	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00114	48 ff c0	 inc	 rax
  00117	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  0011c	83 7c 24 48 00	 cmp	 DWORD PTR tv131[rsp], 0
  00121	74 02		 je	 SHORT $LN6@iprint_ASM
  00123	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00125	8b 44 24 4c	 mov	 eax, DWORD PTR r3$[rsp]
  00129	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  0012d	8b 44 24 50	 mov	 eax, DWORD PTR b2$[rsp]
  00131	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00135	8b 44 24 54	 mov	 eax, DWORD PTR d2$[rsp]
  00139	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0013d	8b 44 24 58	 mov	 eax, DWORD PTR b1$[rsp]
  00141	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00145	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR d1$[rsp]
  0014a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198878
  00151	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00156	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  0015b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00161	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00166	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016b	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00170	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00178	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198879
  0017f	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00187	e8 00 00 00 00	 call	 sprintf
  0018c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00194	48 33 cc	 xor	 rcx, rsp
  00197	e8 00 00 00 00	 call	 __security_check_cookie
  0019c	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  001a3	c3		 ret	 0
iprint_ASMFMT_SSF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv95 = 72
b2$ = 76
d2$ = 80
b1$ = 84
d1$ = 88
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_SSE PROC

; 2542 : IPRINT_FUNC( ASMFMT_SSE );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2543 :     int b1,d1,b2,d2;
; 2544 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2545 :     b1 = inst[2] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 02	 imul	 rax, rax, 2
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 54	 mov	 DWORD PTR b1$[rsp], eax

; 2546 :     d1 = (inst[2] & 0x0F) << 8 | inst[3];

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	c1 e0 08	 shl	 eax, 8
  0006a	b9 01 00 00 00	 mov	 ecx, 1
  0006f	48 6b c9 03	 imul	 rcx, rcx, 3
  00073	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  0007b	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0007f	0b c1		 or	 eax, ecx
  00081	89 44 24 58	 mov	 DWORD PTR d1$[rsp], eax

; 2547 :     b2 = inst[4] >> 4;

  00085	b8 01 00 00 00	 mov	 eax, 1
  0008a	48 6b c0 04	 imul	 rax, rax, 4
  0008e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00096	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009a	c1 f8 04	 sar	 eax, 4
  0009d	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax

; 2548 :     d2 = (inst[4] & 0x0F) << 8 | inst[5];

  000a1	b8 01 00 00 00	 mov	 eax, 1
  000a6	48 6b c0 04	 imul	 rax, rax, 4
  000aa	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000b2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b6	83 e0 0f	 and	 eax, 15
  000b9	c1 e0 08	 shl	 eax, 8
  000bc	b9 01 00 00 00	 mov	 ecx, 1
  000c1	48 6b c9 05	 imul	 rcx, rcx, 5
  000c5	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000cd	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000d1	0b c1		 or	 eax, ecx
  000d3	89 44 24 50	 mov	 DWORD PTR d2$[rsp], eax

; 2549 :     IPRINT_PRINT("%d(%d),%d(%d)",d1,b1,d2,b2)

  000d7	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000df	48 ff c0	 inc	 rax
  000e2	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000e7	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000ec	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ef	89 44 24 48	 mov	 DWORD PTR tv95[rsp], eax
  000f3	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000f8	48 ff c0	 inc	 rax
  000fb	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  00100	83 7c 24 48 00	 cmp	 DWORD PTR tv95[rsp], 0
  00105	74 02		 je	 SHORT $LN6@iprint_ASM
  00107	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00109	8b 44 24 4c	 mov	 eax, DWORD PTR b2$[rsp]
  0010d	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00111	8b 44 24 50	 mov	 eax, DWORD PTR d2$[rsp]
  00115	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00119	8b 44 24 54	 mov	 eax, DWORD PTR b1$[rsp]
  0011d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00121	44 8b 4c 24 58	 mov	 r9d, DWORD PTR d1$[rsp]
  00126	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198855
  0012d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00132	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0013d	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00142	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00147	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  0014c	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00154	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198856
  0015b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00163	e8 00 00 00 00	 call	 sprintf
  00168	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00170	48 33 cc	 xor	 rcx, rsp
  00173	e8 00 00 00 00	 call	 __security_check_cookie
  00178	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0017f	c3		 ret	 0
iprint_ASMFMT_SSE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 80
tv135 = 88
i3$ = 92
b2$ = 96
d2$ = 100
b1$ = 104
l1$ = 108
d1$ = 112
opers$ = 128
__$ArrayPad$ = 192
regs$ = 224
inst$ = 232
mnemonic$ = 240
prtbuf$ = 248
iprint_ASMFMT_SS_I PROC

; 2531 : IPRINT_FUNC( ASMFMT_SS_I );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2532 :     int l1,i3,b1,d1,b2,d2;
; 2533 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2534 :     l1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 6c	 mov	 DWORD PTR l1$[rsp], eax

; 2535 :     i3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 5c	 mov	 DWORD PTR i3$[rsp], eax

; 2536 :     b1 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 68	 mov	 DWORD PTR b1$[rsp], eax

; 2537 :     d1 = (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 02	 imul	 rax, rax, 2
  00090	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	c1 e0 08	 shl	 eax, 8
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	48 6b c9 03	 imul	 rcx, rcx, 3
  000ab	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b3	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b7	0b c1		 or	 eax, ecx
  000b9	89 44 24 70	 mov	 DWORD PTR d1$[rsp], eax

; 2538 :     b2 = inst[4] >> 4;

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	48 6b c0 04	 imul	 rax, rax, 4
  000c6	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ce	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d2	c1 f8 04	 sar	 eax, 4
  000d5	89 44 24 60	 mov	 DWORD PTR b2$[rsp], eax

; 2539 :     d2 = (inst[4] & 0x0F) << 8 | inst[5];

  000d9	b8 01 00 00 00	 mov	 eax, 1
  000de	48 6b c0 04	 imul	 rax, rax, 4
  000e2	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ea	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ee	83 e0 0f	 and	 eax, 15
  000f1	c1 e0 08	 shl	 eax, 8
  000f4	b9 01 00 00 00	 mov	 ecx, 1
  000f9	48 6b c9 05	 imul	 rcx, rcx, 5
  000fd	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00105	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00109	0b c1		 or	 eax, ecx
  0010b	89 44 24 64	 mov	 DWORD PTR d2$[rsp], eax

; 2540 :     IPRINT_PRINT("%d(%d,%d),%d(%d),%d",d1,l1,b1,d2,b2,i3)

  0010f	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00117	48 ff c0	 inc	 rax
  0011a	48 89 44 24 50	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  0011f	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  00124	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00127	89 44 24 58	 mov	 DWORD PTR tv135[rsp], eax
  0012b	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  00130	48 ff c0	 inc	 rax
  00133	48 89 44 24 50	 mov	 QWORD PTR iname$[rsp], rax
  00138	83 7c 24 58 00	 cmp	 DWORD PTR tv135[rsp], 0
  0013d	74 02		 je	 SHORT $LN6@iprint_ASM
  0013f	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00141	8b 44 24 5c	 mov	 eax, DWORD PTR i3$[rsp]
  00145	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00149	8b 44 24 60	 mov	 eax, DWORD PTR b2$[rsp]
  0014d	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00151	8b 44 24 64	 mov	 eax, DWORD PTR d2$[rsp]
  00155	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00159	8b 44 24 68	 mov	 eax, DWORD PTR b1$[rsp]
  0015d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00161	8b 44 24 6c	 mov	 eax, DWORD PTR l1$[rsp]
  00165	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00169	44 8b 4c 24 70	 mov	 r9d, DWORD PTR d1$[rsp]
  0016e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198833
  00175	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0017a	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR opers$[rsp]
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00188	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  0018d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00192	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR opers$[rsp]
  0019a	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  001a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198834
  001a9	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  001b1	e8 00 00 00 00	 call	 sprintf
  001b6	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001be	48 33 cc	 xor	 rcx, rsp
  001c1	e8 00 00 00 00	 call	 __security_check_cookie
  001c6	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  001cd	c3		 ret	 0
iprint_ASMFMT_SS_I ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 80
tv135 = 88
b4$ = 92
d4$ = 96
r3$ = 100
b2$ = 104
d2$ = 108
r1$ = 112
opers$ = 128
__$ArrayPad$ = 192
regs$ = 224
inst$ = 232
mnemonic$ = 240
prtbuf$ = 248
iprint_ASMFMT_SS_RSRS PROC

; 2519 : IPRINT_FUNC( ASMFMT_SS_RSRS );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2520 :     int r1,r3,b2,d2,b4,d4;
; 2521 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2522 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 70	 mov	 DWORD PTR r1$[rsp], eax

; 2523 :     r3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 64	 mov	 DWORD PTR r3$[rsp], eax

; 2524 :     b2 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 68	 mov	 DWORD PTR b2$[rsp], eax

; 2525 :     d2 = (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 02	 imul	 rax, rax, 2
  00090	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	c1 e0 08	 shl	 eax, 8
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	48 6b c9 03	 imul	 rcx, rcx, 3
  000ab	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b3	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b7	0b c1		 or	 eax, ecx
  000b9	89 44 24 6c	 mov	 DWORD PTR d2$[rsp], eax

; 2526 :     b4 = inst[4] >> 4;

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	48 6b c0 04	 imul	 rax, rax, 4
  000c6	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ce	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d2	c1 f8 04	 sar	 eax, 4
  000d5	89 44 24 5c	 mov	 DWORD PTR b4$[rsp], eax

; 2527 :     d4 = (inst[4] & 0x0F) << 8 | inst[5];

  000d9	b8 01 00 00 00	 mov	 eax, 1
  000de	48 6b c0 04	 imul	 rax, rax, 4
  000e2	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ea	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ee	83 e0 0f	 and	 eax, 15
  000f1	c1 e0 08	 shl	 eax, 8
  000f4	b9 01 00 00 00	 mov	 ecx, 1
  000f9	48 6b c9 05	 imul	 rcx, rcx, 5
  000fd	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00105	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00109	0b c1		 or	 eax, ecx
  0010b	89 44 24 60	 mov	 DWORD PTR d4$[rsp], eax

; 2528 :     IPRINT_PRINT("%d,%d(%d),%d,%d(%d)",r1,d2,b2,r3,d4,b4)

  0010f	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00117	48 ff c0	 inc	 rax
  0011a	48 89 44 24 50	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  0011f	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  00124	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00127	89 44 24 58	 mov	 DWORD PTR tv135[rsp], eax
  0012b	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  00130	48 ff c0	 inc	 rax
  00133	48 89 44 24 50	 mov	 QWORD PTR iname$[rsp], rax
  00138	83 7c 24 58 00	 cmp	 DWORD PTR tv135[rsp], 0
  0013d	74 02		 je	 SHORT $LN6@iprint_ASM
  0013f	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00141	8b 44 24 5c	 mov	 eax, DWORD PTR b4$[rsp]
  00145	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00149	8b 44 24 60	 mov	 eax, DWORD PTR d4$[rsp]
  0014d	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00151	8b 44 24 64	 mov	 eax, DWORD PTR r3$[rsp]
  00155	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00159	8b 44 24 68	 mov	 eax, DWORD PTR b2$[rsp]
  0015d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00161	8b 44 24 6c	 mov	 eax, DWORD PTR d2$[rsp]
  00165	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00169	44 8b 4c 24 70	 mov	 r9d, DWORD PTR r1$[rsp]
  0016e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198809
  00175	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0017a	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR opers$[rsp]
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00188	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  0018d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00192	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR opers$[rsp]
  0019a	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  001a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198810
  001a9	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  001b1	e8 00 00 00 00	 call	 sprintf
  001b6	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001be	48 33 cc	 xor	 rcx, rsp
  001c1	e8 00 00 00 00	 call	 __security_check_cookie
  001c6	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  001cd	c3		 ret	 0
iprint_ASMFMT_SS_RSRS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 80
tv135 = 88
r3$ = 92
b2$ = 96
d2$ = 100
b1$ = 104
r1$ = 108
d1$ = 112
opers$ = 128
__$ArrayPad$ = 192
regs$ = 224
inst$ = 232
mnemonic$ = 240
prtbuf$ = 248
iprint_ASMFMT_SS_R3 PROC

; 2507 : IPRINT_FUNC( ASMFMT_SS_R3 );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2508 :     int r1,r3,b1,d1,b2,d2;
; 2509 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2510 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 6c	 mov	 DWORD PTR r1$[rsp], eax

; 2511 :     r3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 5c	 mov	 DWORD PTR r3$[rsp], eax

; 2512 :     b1 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 68	 mov	 DWORD PTR b1$[rsp], eax

; 2513 :     d1 = (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 02	 imul	 rax, rax, 2
  00090	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	c1 e0 08	 shl	 eax, 8
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	48 6b c9 03	 imul	 rcx, rcx, 3
  000ab	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b3	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b7	0b c1		 or	 eax, ecx
  000b9	89 44 24 70	 mov	 DWORD PTR d1$[rsp], eax

; 2514 :     b2 = inst[4] >> 4;

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	48 6b c0 04	 imul	 rax, rax, 4
  000c6	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ce	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d2	c1 f8 04	 sar	 eax, 4
  000d5	89 44 24 60	 mov	 DWORD PTR b2$[rsp], eax

; 2515 :     d2 = (inst[4] & 0x0F) << 8 | inst[5];

  000d9	b8 01 00 00 00	 mov	 eax, 1
  000de	48 6b c0 04	 imul	 rax, rax, 4
  000e2	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ea	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ee	83 e0 0f	 and	 eax, 15
  000f1	c1 e0 08	 shl	 eax, 8
  000f4	b9 01 00 00 00	 mov	 ecx, 1
  000f9	48 6b c9 05	 imul	 rcx, rcx, 5
  000fd	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00105	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00109	0b c1		 or	 eax, ecx
  0010b	89 44 24 64	 mov	 DWORD PTR d2$[rsp], eax

; 2516 :     IPRINT_PRINT("%d(%d,%d),%d(%d),%d",d1,r1,b1,d2,b2,r3)

  0010f	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00117	48 ff c0	 inc	 rax
  0011a	48 89 44 24 50	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  0011f	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  00124	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00127	89 44 24 58	 mov	 DWORD PTR tv135[rsp], eax
  0012b	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  00130	48 ff c0	 inc	 rax
  00133	48 89 44 24 50	 mov	 QWORD PTR iname$[rsp], rax
  00138	83 7c 24 58 00	 cmp	 DWORD PTR tv135[rsp], 0
  0013d	74 02		 je	 SHORT $LN6@iprint_ASM
  0013f	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00141	8b 44 24 5c	 mov	 eax, DWORD PTR r3$[rsp]
  00145	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00149	8b 44 24 60	 mov	 eax, DWORD PTR b2$[rsp]
  0014d	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00151	8b 44 24 64	 mov	 eax, DWORD PTR d2$[rsp]
  00155	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00159	8b 44 24 68	 mov	 eax, DWORD PTR b1$[rsp]
  0015d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00161	8b 44 24 6c	 mov	 eax, DWORD PTR r1$[rsp]
  00165	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00169	44 8b 4c 24 70	 mov	 r9d, DWORD PTR d1$[rsp]
  0016e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198785
  00175	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0017a	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR opers$[rsp]
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00188	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  0018d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00192	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR opers$[rsp]
  0019a	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  001a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198786
  001a9	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  001b1	e8 00 00 00 00	 call	 sprintf
  001b6	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001be	48 33 cc	 xor	 rcx, rsp
  001c1	e8 00 00 00 00	 call	 __security_check_cookie
  001c6	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  001cd	c3		 ret	 0
iprint_ASMFMT_SS_R3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 80
tv135 = 88
b4$ = 92
d4$ = 96
b2$ = 100
d2$ = 104
r3$ = 108
r1$ = 112
opers$ = 128
__$ArrayPad$ = 192
regs$ = 224
inst$ = 232
mnemonic$ = 240
prtbuf$ = 248
iprint_ASMFMT_SS_R PROC

; 2495 : IPRINT_FUNC( ASMFMT_SS_R );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2496 :     int r1,r3,b2,d2,b4,d4;
; 2497 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2498 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 70	 mov	 DWORD PTR r1$[rsp], eax

; 2499 :     r3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 6c	 mov	 DWORD PTR r3$[rsp], eax

; 2500 :     b2 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 64	 mov	 DWORD PTR b2$[rsp], eax

; 2501 :     d2 = (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 02	 imul	 rax, rax, 2
  00090	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	c1 e0 08	 shl	 eax, 8
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	48 6b c9 03	 imul	 rcx, rcx, 3
  000ab	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b3	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b7	0b c1		 or	 eax, ecx
  000b9	89 44 24 68	 mov	 DWORD PTR d2$[rsp], eax

; 2502 :     b4 = inst[4] >> 4;

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	48 6b c0 04	 imul	 rax, rax, 4
  000c6	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ce	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d2	c1 f8 04	 sar	 eax, 4
  000d5	89 44 24 5c	 mov	 DWORD PTR b4$[rsp], eax

; 2503 :     d4 = (inst[4] & 0x0F) << 8 | inst[5];

  000d9	b8 01 00 00 00	 mov	 eax, 1
  000de	48 6b c0 04	 imul	 rax, rax, 4
  000e2	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ea	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ee	83 e0 0f	 and	 eax, 15
  000f1	c1 e0 08	 shl	 eax, 8
  000f4	b9 01 00 00 00	 mov	 ecx, 1
  000f9	48 6b c9 05	 imul	 rcx, rcx, 5
  000fd	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00105	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00109	0b c1		 or	 eax, ecx
  0010b	89 44 24 60	 mov	 DWORD PTR d4$[rsp], eax

; 2504 :     IPRINT_PRINT("%d,%d,%d(%d),%d(%d)",r1,r3,d2,b2,d4,b4)

  0010f	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00117	48 ff c0	 inc	 rax
  0011a	48 89 44 24 50	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  0011f	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  00124	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00127	89 44 24 58	 mov	 DWORD PTR tv135[rsp], eax
  0012b	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  00130	48 ff c0	 inc	 rax
  00133	48 89 44 24 50	 mov	 QWORD PTR iname$[rsp], rax
  00138	83 7c 24 58 00	 cmp	 DWORD PTR tv135[rsp], 0
  0013d	74 02		 je	 SHORT $LN6@iprint_ASM
  0013f	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00141	8b 44 24 5c	 mov	 eax, DWORD PTR b4$[rsp]
  00145	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00149	8b 44 24 60	 mov	 eax, DWORD PTR d4$[rsp]
  0014d	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00151	8b 44 24 64	 mov	 eax, DWORD PTR b2$[rsp]
  00155	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00159	8b 44 24 68	 mov	 eax, DWORD PTR d2$[rsp]
  0015d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00161	8b 44 24 6c	 mov	 eax, DWORD PTR r3$[rsp]
  00165	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00169	44 8b 4c 24 70	 mov	 r9d, DWORD PTR r1$[rsp]
  0016e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198761
  00175	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0017a	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR opers$[rsp]
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00188	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  0018d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00192	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR opers$[rsp]
  0019a	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  001a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198762
  001a9	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  001b1	e8 00 00 00 00	 call	 sprintf
  001b6	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001be	48 33 cc	 xor	 rcx, rsp
  001c1	e8 00 00 00 00	 call	 __security_check_cookie
  001c6	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  001cd	c3		 ret	 0
iprint_ASMFMT_SS_R ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv130 = 72
l2$ = 76
b2$ = 80
d2$ = 84
b1$ = 88
d1$ = 92
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_SS_L2 PROC

; 2485 : IPRINT_FUNC( ASMFMT_SS_L2 );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2486 :     int l2,b1,d1,b2,d2;
; 2487 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2488 :     l2 = inst[1];

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	89 44 24 4c	 mov	 DWORD PTR l2$[rsp], eax

; 2489 :     b1 = inst[2] >> 4;

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	48 6b c0 02	 imul	 rax, rax, 2
  00055	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0005d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00061	c1 f8 04	 sar	 eax, 4
  00064	89 44 24 58	 mov	 DWORD PTR b1$[rsp], eax

; 2490 :     d1 = (inst[2] & 0x0F) << 8 | inst[3];

  00068	b8 01 00 00 00	 mov	 eax, 1
  0006d	48 6b c0 02	 imul	 rax, rax, 2
  00071	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00079	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0007d	83 e0 0f	 and	 eax, 15
  00080	c1 e0 08	 shl	 eax, 8
  00083	b9 01 00 00 00	 mov	 ecx, 1
  00088	48 6b c9 03	 imul	 rcx, rcx, 3
  0008c	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00094	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00098	0b c1		 or	 eax, ecx
  0009a	89 44 24 5c	 mov	 DWORD PTR d1$[rsp], eax

; 2491 :     b2 = inst[4] >> 4;

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	48 6b c0 04	 imul	 rax, rax, 4
  000a7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000af	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b3	c1 f8 04	 sar	 eax, 4
  000b6	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax

; 2492 :     d2 = (inst[4] & 0x0F) << 8 | inst[5];

  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	48 6b c0 04	 imul	 rax, rax, 4
  000c3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000cb	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000cf	83 e0 0f	 and	 eax, 15
  000d2	c1 e0 08	 shl	 eax, 8
  000d5	b9 01 00 00 00	 mov	 ecx, 1
  000da	48 6b c9 05	 imul	 rcx, rcx, 5
  000de	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000e6	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000ea	0b c1		 or	 eax, ecx
  000ec	89 44 24 54	 mov	 DWORD PTR d2$[rsp], eax

; 2493 :     IPRINT_PRINT("%d(%d),%d(%d,%d)",d1,b1,d2,l2+1,b2)

  000f0	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000f8	48 ff c0	 inc	 rax
  000fb	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00100	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00105	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00108	89 44 24 48	 mov	 DWORD PTR tv130[rsp], eax
  0010c	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00111	48 ff c0	 inc	 rax
  00114	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  00119	83 7c 24 48 00	 cmp	 DWORD PTR tv130[rsp], 0
  0011e	74 02		 je	 SHORT $LN6@iprint_ASM
  00120	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00122	8b 44 24 4c	 mov	 eax, DWORD PTR l2$[rsp]
  00126	ff c0		 inc	 eax
  00128	8b 4c 24 50	 mov	 ecx, DWORD PTR b2$[rsp]
  0012c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00130	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00134	8b 44 24 54	 mov	 eax, DWORD PTR d2$[rsp]
  00138	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0013c	8b 44 24 58	 mov	 eax, DWORD PTR b1$[rsp]
  00140	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00144	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR d1$[rsp]
  00149	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198737
  00150	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00155	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00160	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00165	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016a	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  0016f	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198738
  0017e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00186	e8 00 00 00 00	 call	 sprintf
  0018b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00193	48 33 cc	 xor	 rcx, rsp
  00196	e8 00 00 00 00	 call	 __security_check_cookie
  0019b	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  001a2	c3		 ret	 0
iprint_ASMFMT_SS_L2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv130 = 72
l1$ = 76
b2$ = 80
d2$ = 84
b1$ = 88
d1$ = 92
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_SS_L PROC

; 2474 : IPRINT_FUNC( ASMFMT_SS_L );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2475 :     int l1,b1,d1,b2,d2;
; 2476 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2477 :     l1 = inst[1];

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	89 44 24 4c	 mov	 DWORD PTR l1$[rsp], eax

; 2478 :     b1 = inst[2] >> 4;

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	48 6b c0 02	 imul	 rax, rax, 2
  00055	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0005d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00061	c1 f8 04	 sar	 eax, 4
  00064	89 44 24 58	 mov	 DWORD PTR b1$[rsp], eax

; 2479 :     d1 = (inst[2] & 0x0F) << 8 | inst[3];

  00068	b8 01 00 00 00	 mov	 eax, 1
  0006d	48 6b c0 02	 imul	 rax, rax, 2
  00071	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00079	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0007d	83 e0 0f	 and	 eax, 15
  00080	c1 e0 08	 shl	 eax, 8
  00083	b9 01 00 00 00	 mov	 ecx, 1
  00088	48 6b c9 03	 imul	 rcx, rcx, 3
  0008c	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00094	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00098	0b c1		 or	 eax, ecx
  0009a	89 44 24 5c	 mov	 DWORD PTR d1$[rsp], eax

; 2480 :     b2 = inst[4] >> 4;

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	48 6b c0 04	 imul	 rax, rax, 4
  000a7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000af	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b3	c1 f8 04	 sar	 eax, 4
  000b6	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax

; 2481 :     d2 = (inst[4] & 0x0F) << 8 | inst[5];

  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	48 6b c0 04	 imul	 rax, rax, 4
  000c3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000cb	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000cf	83 e0 0f	 and	 eax, 15
  000d2	c1 e0 08	 shl	 eax, 8
  000d5	b9 01 00 00 00	 mov	 ecx, 1
  000da	48 6b c9 05	 imul	 rcx, rcx, 5
  000de	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000e6	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000ea	0b c1		 or	 eax, ecx
  000ec	89 44 24 54	 mov	 DWORD PTR d2$[rsp], eax

; 2482 :     IPRINT_PRINT("%d(%d,%d),%d(%d)",d1,l1+1,b1,d2,b2)

  000f0	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000f8	48 ff c0	 inc	 rax
  000fb	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00100	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00105	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00108	89 44 24 48	 mov	 DWORD PTR tv130[rsp], eax
  0010c	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00111	48 ff c0	 inc	 rax
  00114	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  00119	83 7c 24 48 00	 cmp	 DWORD PTR tv130[rsp], 0
  0011e	74 02		 je	 SHORT $LN6@iprint_ASM
  00120	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00122	8b 44 24 4c	 mov	 eax, DWORD PTR l1$[rsp]
  00126	ff c0		 inc	 eax
  00128	8b 4c 24 50	 mov	 ecx, DWORD PTR b2$[rsp]
  0012c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00130	8b 4c 24 54	 mov	 ecx, DWORD PTR d2$[rsp]
  00134	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  00138	8b 4c 24 58	 mov	 ecx, DWORD PTR b1$[rsp]
  0013c	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00140	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00144	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR d1$[rsp]
  00149	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198714
  00150	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00155	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00160	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00165	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0016a	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  0016f	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198715
  0017e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00186	e8 00 00 00 00	 call	 sprintf
  0018b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00193	48 33 cc	 xor	 rcx, rsp
  00196	e8 00 00 00 00	 call	 __security_check_cookie
  0019b	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  001a2	c3		 ret	 0
iprint_ASMFMT_SS_L ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 80
tv135 = 88
l2$ = 92
l1$ = 96
b2$ = 100
d2$ = 104
b1$ = 108
d1$ = 112
opers$ = 128
__$ArrayPad$ = 192
regs$ = 224
inst$ = 232
mnemonic$ = 240
prtbuf$ = 248
iprint_ASMFMT_SS PROC

; 2463 : IPRINT_FUNC( ASMFMT_SS );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2464 :     int l1,l2,b1,d1,b2,d2;
; 2465 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2466 :     l1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 60	 mov	 DWORD PTR l1$[rsp], eax

; 2467 :     l2 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 5c	 mov	 DWORD PTR l2$[rsp], eax

; 2468 :     b1 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 6c	 mov	 DWORD PTR b1$[rsp], eax

; 2469 :     d1 = (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 02	 imul	 rax, rax, 2
  00090	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	c1 e0 08	 shl	 eax, 8
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	48 6b c9 03	 imul	 rcx, rcx, 3
  000ab	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b3	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b7	0b c1		 or	 eax, ecx
  000b9	89 44 24 70	 mov	 DWORD PTR d1$[rsp], eax

; 2470 :     b2 = inst[4] >> 4;

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	48 6b c0 04	 imul	 rax, rax, 4
  000c6	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ce	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d2	c1 f8 04	 sar	 eax, 4
  000d5	89 44 24 64	 mov	 DWORD PTR b2$[rsp], eax

; 2471 :     d2 = (inst[4] & 0x0F) << 8 | inst[5];

  000d9	b8 01 00 00 00	 mov	 eax, 1
  000de	48 6b c0 04	 imul	 rax, rax, 4
  000e2	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ea	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ee	83 e0 0f	 and	 eax, 15
  000f1	c1 e0 08	 shl	 eax, 8
  000f4	b9 01 00 00 00	 mov	 ecx, 1
  000f9	48 6b c9 05	 imul	 rcx, rcx, 5
  000fd	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00105	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00109	0b c1		 or	 eax, ecx
  0010b	89 44 24 68	 mov	 DWORD PTR d2$[rsp], eax

; 2472 :     IPRINT_PRINT("%d(%d,%d),%d(%d,%d)",d1,l1+1,b1,d2,l2+1,b2)

  0010f	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00117	48 ff c0	 inc	 rax
  0011a	48 89 44 24 50	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  0011f	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  00124	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00127	89 44 24 58	 mov	 DWORD PTR tv135[rsp], eax
  0012b	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  00130	48 ff c0	 inc	 rax
  00133	48 89 44 24 50	 mov	 QWORD PTR iname$[rsp], rax
  00138	83 7c 24 58 00	 cmp	 DWORD PTR tv135[rsp], 0
  0013d	74 02		 je	 SHORT $LN6@iprint_ASM
  0013f	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00141	8b 44 24 5c	 mov	 eax, DWORD PTR l2$[rsp]
  00145	ff c0		 inc	 eax
  00147	8b 4c 24 60	 mov	 ecx, DWORD PTR l1$[rsp]
  0014b	ff c1		 inc	 ecx
  0014d	8b 54 24 64	 mov	 edx, DWORD PTR b2$[rsp]
  00151	89 54 24 40	 mov	 DWORD PTR [rsp+64], edx
  00155	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00159	8b 44 24 68	 mov	 eax, DWORD PTR d2$[rsp]
  0015d	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00161	8b 44 24 6c	 mov	 eax, DWORD PTR b1$[rsp]
  00165	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00169	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0016d	44 8b 4c 24 70	 mov	 r9d, DWORD PTR d1$[rsp]
  00172	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198691
  00179	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0017e	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR opers$[rsp]
  00186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0018c	48 8b 44 24 50	 mov	 rax, QWORD PTR iname$[rsp]
  00191	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00196	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR opers$[rsp]
  0019e	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  001a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198692
  001ad	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  001b5	e8 00 00 00 00	 call	 sprintf
  001ba	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001c2	48 33 cc	 xor	 rcx, rsp
  001c5	e8 00 00 00 00	 call	 __security_check_cookie
  001ca	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  001d1	c3		 ret	 0
iprint_ASMFMT_SS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv82 = 56
b2$ = 60
d2$ = 64
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_S PROC

; 2456 : IPRINT_FUNC( ASMFMT_S );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2457 :     int d2,b2;
; 2458 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2459 :     b2 = inst[2] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 02	 imul	 rax, rax, 2
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 3c	 mov	 DWORD PTR b2$[rsp], eax

; 2460 :     d2 = (inst[2] & 0x0F) << 8 | inst[3];

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	c1 e0 08	 shl	 eax, 8
  0006a	b9 01 00 00 00	 mov	 ecx, 1
  0006f	48 6b c9 03	 imul	 rcx, rcx, 3
  00073	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  0007b	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0007f	0b c1		 or	 eax, ecx
  00081	89 44 24 40	 mov	 DWORD PTR d2$[rsp], eax

; 2461 :     IPRINT_PRINT("%d(%d)",d2,b2)

  00085	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  0008d	48 ff c0	 inc	 rax
  00090	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00095	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0009a	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0009d	89 44 24 38	 mov	 DWORD PTR tv82[rsp], eax
  000a1	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000a6	48 ff c0	 inc	 rax
  000a9	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000ae	83 7c 24 38 00	 cmp	 DWORD PTR tv82[rsp], 0
  000b3	74 02		 je	 SHORT $LN6@iprint_ASM
  000b5	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000b7	8b 44 24 3c	 mov	 eax, DWORD PTR b2$[rsp]
  000bb	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000bf	44 8b 4c 24 40	 mov	 r9d, DWORD PTR d2$[rsp]
  000c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198667
  000cb	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000d0	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000db	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e5	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  000ea	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198668
  000f9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00101	e8 00 00 00 00	 call	 sprintf
  00106	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0010e	48 33 cc	 xor	 rcx, rsp
  00111	e8 00 00 00 00	 call	 __security_check_cookie
  00116	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0011d	c3		 ret	 0
iprint_ASMFMT_S ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv94 = 72
i2$ = 76
b3$ = 80
d3$ = 84
m1$ = 88
Two_S64$ = 96
opers$ = 112
__$ArrayPad$ = 176
regs$ = 208
inst$ = 216
mnemonic$ = 224
prtbuf$ = 232
iprint_ASMFMT_SMI_A PROC

; 2446 : IPRINT_FUNC( ASMFMT_SMI_A );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2447 :     int m1,i2,b3,d3;
; 2448 :     const S64 Two_S64=2;

  0002d	48 c7 44 24 60
	02 00 00 00	 mov	 QWORD PTR Two_S64$[rsp], 2
$LN4@iprint_ASM:

; 2449 :     UNREFERENCED( regs );

  00036	33 c0		 xor	 eax, eax
  00038	85 c0		 test	 eax, eax
  0003a	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2450 :     m1 = inst[1] >> 4;

  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	48 6b c0 01	 imul	 rax, rax, 1
  00045	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0004d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00051	c1 f8 04	 sar	 eax, 4
  00054	89 44 24 58	 mov	 DWORD PTR m1$[rsp], eax

; 2451 :     b3 = inst[2] >> 4;

  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 02	 imul	 rax, rax, 2
  00061	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00069	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0006d	c1 f8 04	 sar	 eax, 4
  00070	89 44 24 50	 mov	 DWORD PTR b3$[rsp], eax

; 2452 :     d3 = (inst[2] & 0x0F) << 8 | inst[3];

  00074	b8 01 00 00 00	 mov	 eax, 1
  00079	48 6b c0 02	 imul	 rax, rax, 2
  0007d	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00085	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00089	83 e0 0f	 and	 eax, 15
  0008c	c1 e0 08	 shl	 eax, 8
  0008f	b9 01 00 00 00	 mov	 ecx, 1
  00094	48 6b c9 03	 imul	 rcx, rcx, 3
  00098	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000a0	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000a4	0b c1		 or	 eax, ecx
  000a6	89 44 24 54	 mov	 DWORD PTR d3$[rsp], eax

; 2453 :     i2 = (S32)(((U32)inst[4] << 8) | (U32)inst[5]);

  000aa	b8 01 00 00 00	 mov	 eax, 1
  000af	48 6b c0 04	 imul	 rax, rax, 4
  000b3	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000bb	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000bf	c1 e0 08	 shl	 eax, 8
  000c2	b9 01 00 00 00	 mov	 ecx, 1
  000c7	48 6b c9 05	 imul	 rcx, rcx, 5
  000cb	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000d3	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000d7	0b c1		 or	 eax, ecx
  000d9	89 44 24 4c	 mov	 DWORD PTR i2$[rsp], eax

; 2454 :     IPRINT_PRINT("%d,*%+"I64_FMT"d,%d(%d)",m1,i2*Two_S64,d3,b3)

  000dd	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000e5	48 ff c0	 inc	 rax
  000e8	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000ed	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000f2	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000f5	89 44 24 48	 mov	 DWORD PTR tv94[rsp], eax
  000f9	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000fe	48 ff c0	 inc	 rax
  00101	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  00106	83 7c 24 48 00	 cmp	 DWORD PTR tv94[rsp], 0
  0010b	74 02		 je	 SHORT $LN6@iprint_ASM
  0010d	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  0010f	48 63 44 24 4c	 movsxd	 rax, DWORD PTR i2$[rsp]
  00114	48 0f af 44 24
	60		 imul	 rax, QWORD PTR Two_S64$[rsp]
  0011a	8b 4c 24 50	 mov	 ecx, DWORD PTR b3$[rsp]
  0011e	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  00122	8b 4c 24 54	 mov	 ecx, DWORD PTR d3$[rsp]
  00126	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  0012a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012f	44 8b 4c 24 58	 mov	 r9d, DWORD PTR m1$[rsp]
  00134	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198647
  0013b	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00140	48 8d 4c 24 70	 lea	 rcx, QWORD PTR opers$[rsp]
  00145	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0014b	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00150	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00155	4c 8d 4c 24 70	 lea	 r9, QWORD PTR opers$[rsp]
  0015a	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198648
  00169	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00171	e8 00 00 00 00	 call	 sprintf
  00176	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0017e	48 33 cc	 xor	 rcx, rsp
  00181	e8 00 00 00 00	 call	 __security_check_cookie
  00186	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0018d	c3		 ret	 0
iprint_ASMFMT_SMI_A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv92 = 56
i2$ = 60
b1$ = 64
d1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_SIL PROC

; 2438 : IPRINT_FUNC( ASMFMT_SIL );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2439 :     int b1,d1,i2;
; 2440 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2441 :     b1 = inst[2] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 02	 imul	 rax, rax, 2
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 40	 mov	 DWORD PTR b1$[rsp], eax

; 2442 :     d1 = (inst[2] & 0x0F) << 8 | inst[3];

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	c1 e0 08	 shl	 eax, 8
  0006a	b9 01 00 00 00	 mov	 ecx, 1
  0006f	48 6b c9 03	 imul	 rcx, rcx, 3
  00073	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  0007b	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0007f	0b c1		 or	 eax, ecx
  00081	89 44 24 44	 mov	 DWORD PTR d1$[rsp], eax

; 2443 :     i2 = (S16)(((U16)inst[4] << 8) | inst[5]);

  00085	b8 01 00 00 00	 mov	 eax, 1
  0008a	48 6b c0 04	 imul	 rax, rax, 4
  0008e	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00096	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009a	c1 e0 08	 shl	 eax, 8
  0009d	b9 01 00 00 00	 mov	 ecx, 1
  000a2	48 6b c9 05	 imul	 rcx, rcx, 5
  000a6	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000ae	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b2	0b c1		 or	 eax, ecx
  000b4	98		 cwde
  000b5	89 44 24 3c	 mov	 DWORD PTR i2$[rsp], eax

; 2444 :     IPRINT_PRINT("%d(%d),%d",d1,b1,i2)

  000b9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000c1	48 ff c0	 inc	 rax
  000c4	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000c9	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000ce	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d1	89 44 24 38	 mov	 DWORD PTR tv92[rsp], eax
  000d5	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000da	48 ff c0	 inc	 rax
  000dd	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000e2	83 7c 24 38 00	 cmp	 DWORD PTR tv92[rsp], 0
  000e7	74 02		 je	 SHORT $LN6@iprint_ASM
  000e9	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000eb	8b 44 24 3c	 mov	 eax, DWORD PTR i2$[rsp]
  000ef	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000f3	8b 44 24 40	 mov	 eax, DWORD PTR b1$[rsp]
  000f7	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000fb	44 8b 4c 24 44	 mov	 r9d, DWORD PTR d1$[rsp]
  00100	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198621
  00107	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0010c	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  00111	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00117	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0011c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00121	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  00126	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0012e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198622
  00135	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0013d	e8 00 00 00 00	 call	 sprintf
  00142	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0014a	48 33 cc	 xor	 rcx, rsp
  0014d	e8 00 00 00 00	 call	 __security_check_cookie
  00152	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00159	c3		 ret	 0
iprint_ASMFMT_SIL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv90 = 56
i2$ = 60
b1$ = 64
d1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_SIY PROC

; 2430 : IPRINT_FUNC( ASMFMT_SIY );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2431 :     int i2,b1,d1;
; 2432 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2433 :     i2 = inst[1];

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	89 44 24 3c	 mov	 DWORD PTR i2$[rsp], eax

; 2434 :     b1 = inst[2] >> 4;

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	48 6b c0 02	 imul	 rax, rax, 2
  00055	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0005d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00061	c1 f8 04	 sar	 eax, 4
  00064	89 44 24 40	 mov	 DWORD PTR b1$[rsp], eax

; 2435 :     d1 = (((S8)inst[4]) << 12) | (inst[2] & 0x0F) << 8 | inst[3];

  00068	b8 01 00 00 00	 mov	 eax, 1
  0006d	48 6b c0 04	 imul	 rax, rax, 4
  00071	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00079	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0007d	c1 e0 0c	 shl	 eax, 12
  00080	b9 01 00 00 00	 mov	 ecx, 1
  00085	48 6b c9 02	 imul	 rcx, rcx, 2
  00089	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00091	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00095	83 e1 0f	 and	 ecx, 15
  00098	c1 e1 08	 shl	 ecx, 8
  0009b	0b c1		 or	 eax, ecx
  0009d	b9 01 00 00 00	 mov	 ecx, 1
  000a2	48 6b c9 03	 imul	 rcx, rcx, 3
  000a6	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000ae	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b2	0b c1		 or	 eax, ecx
  000b4	89 44 24 44	 mov	 DWORD PTR d1$[rsp], eax

; 2436 :     IPRINT_PRINT("%d(%d),%d",d1,b1,i2)

  000b8	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000c0	48 ff c0	 inc	 rax
  000c3	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000c8	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000cd	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d0	89 44 24 38	 mov	 DWORD PTR tv90[rsp], eax
  000d4	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000d9	48 ff c0	 inc	 rax
  000dc	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000e1	83 7c 24 38 00	 cmp	 DWORD PTR tv90[rsp], 0
  000e6	74 02		 je	 SHORT $LN6@iprint_ASM
  000e8	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000ea	8b 44 24 3c	 mov	 eax, DWORD PTR i2$[rsp]
  000ee	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000f2	8b 44 24 40	 mov	 eax, DWORD PTR b1$[rsp]
  000f6	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000fa	44 8b 4c 24 44	 mov	 r9d, DWORD PTR d1$[rsp]
  000ff	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198598
  00106	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0010b	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  00110	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00116	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0011b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00120	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  00125	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198599
  00134	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0013c	e8 00 00 00 00	 call	 sprintf
  00141	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00149	48 33 cc	 xor	 rcx, rsp
  0014c	e8 00 00 00 00	 call	 __security_check_cookie
  00151	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00158	c3		 ret	 0
iprint_ASMFMT_SIY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv85 = 56
i2$ = 60
b1$ = 64
d1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_SI PROC

; 2422 : IPRINT_FUNC( ASMFMT_SI );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2423 :     int i2,b1,d1;
; 2424 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2425 :     i2 = inst[1];

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	89 44 24 3c	 mov	 DWORD PTR i2$[rsp], eax

; 2426 :     b1 = inst[2] >> 4;

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	48 6b c0 02	 imul	 rax, rax, 2
  00055	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0005d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00061	c1 f8 04	 sar	 eax, 4
  00064	89 44 24 40	 mov	 DWORD PTR b1$[rsp], eax

; 2427 :     d1 = (inst[2] & 0x0F) << 8 | inst[3];

  00068	b8 01 00 00 00	 mov	 eax, 1
  0006d	48 6b c0 02	 imul	 rax, rax, 2
  00071	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00079	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0007d	83 e0 0f	 and	 eax, 15
  00080	c1 e0 08	 shl	 eax, 8
  00083	b9 01 00 00 00	 mov	 ecx, 1
  00088	48 6b c9 03	 imul	 rcx, rcx, 3
  0008c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00094	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00098	0b c1		 or	 eax, ecx
  0009a	89 44 24 44	 mov	 DWORD PTR d1$[rsp], eax

; 2428 :     IPRINT_PRINT("%d(%d),%d",d1,b1,i2)

  0009e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000a6	48 ff c0	 inc	 rax
  000a9	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000ae	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000b3	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000b6	89 44 24 38	 mov	 DWORD PTR tv85[rsp], eax
  000ba	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000bf	48 ff c0	 inc	 rax
  000c2	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000c7	83 7c 24 38 00	 cmp	 DWORD PTR tv85[rsp], 0
  000cc	74 02		 je	 SHORT $LN6@iprint_ASM
  000ce	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000d0	8b 44 24 3c	 mov	 eax, DWORD PTR i2$[rsp]
  000d4	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000d8	8b 44 24 40	 mov	 eax, DWORD PTR b1$[rsp]
  000dc	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000e0	44 8b 4c 24 44	 mov	 r9d, DWORD PTR d1$[rsp]
  000e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198576
  000ec	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000f1	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000fc	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00101	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00106	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  0010b	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00113	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198577
  0011a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00122	e8 00 00 00 00	 call	 sprintf
  00127	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0012f	48 33 cc	 xor	 rcx, rsp
  00132	e8 00 00 00 00	 call	 __security_check_cookie
  00137	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0013e	c3		 ret	 0
iprint_ASMFMT_SI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv94 = 72
b4$ = 76
d4$ = 80
m3$ = 84
r2$ = 88
r1$ = 92
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RRS PROC

; 2412 : IPRINT_FUNC( ASMFMT_RRS );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2413 :     int r1,r2,m3,b4,d4;
; 2414 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2415 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 5c	 mov	 DWORD PTR r1$[rsp], eax

; 2416 :     r2 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 58	 mov	 DWORD PTR r2$[rsp], eax

; 2417 :     b4 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 4c	 mov	 DWORD PTR b4$[rsp], eax

; 2418 :     d4 = (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 02	 imul	 rax, rax, 2
  00090	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	c1 e0 08	 shl	 eax, 8
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	48 6b c9 03	 imul	 rcx, rcx, 3
  000ab	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b3	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b7	0b c1		 or	 eax, ecx
  000b9	89 44 24 50	 mov	 DWORD PTR d4$[rsp], eax

; 2419 :     m3 = inst[4] >> 4;

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	48 6b c0 04	 imul	 rax, rax, 4
  000c6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ce	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d2	c1 f8 04	 sar	 eax, 4
  000d5	89 44 24 54	 mov	 DWORD PTR m3$[rsp], eax

; 2420 :     IPRINT_PRINT("%d,%d,%d,%d(%d)",r1,r2,m3,d4,b4)

  000d9	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000e1	48 ff c0	 inc	 rax
  000e4	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000e9	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000ee	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000f1	89 44 24 48	 mov	 DWORD PTR tv94[rsp], eax
  000f5	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000fa	48 ff c0	 inc	 rax
  000fd	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  00102	83 7c 24 48 00	 cmp	 DWORD PTR tv94[rsp], 0
  00107	74 02		 je	 SHORT $LN6@iprint_ASM
  00109	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  0010b	8b 44 24 4c	 mov	 eax, DWORD PTR b4$[rsp]
  0010f	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00113	8b 44 24 50	 mov	 eax, DWORD PTR d4$[rsp]
  00117	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0011b	8b 44 24 54	 mov	 eax, DWORD PTR m3$[rsp]
  0011f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00123	8b 44 24 58	 mov	 eax, DWORD PTR r2$[rsp]
  00127	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0012b	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR r1$[rsp]
  00130	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198555
  00137	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0013c	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00147	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  0014c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00151	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00156	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0015e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198556
  00165	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0016d	e8 00 00 00 00	 call	 sprintf
  00172	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0017a	48 33 cc	 xor	 rcx, rsp
  0017d	e8 00 00 00 00	 call	 __security_check_cookie
  00182	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00189	c3		 ret	 0
iprint_ASMFMT_RRS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv93 = 72
b4$ = 76
d4$ = 80
m3$ = 84
i2$ = 88
r1$ = 92
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RIS PROC

; 2402 : IPRINT_FUNC( ASMFMT_RIS );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2403 :     int r1,i2,m3,b4,d4;
; 2404 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2405 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 5c	 mov	 DWORD PTR r1$[rsp], eax

; 2406 :     m3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 54	 mov	 DWORD PTR m3$[rsp], eax

; 2407 :     b4 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 4c	 mov	 DWORD PTR b4$[rsp], eax

; 2408 :     d4 = (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 02	 imul	 rax, rax, 2
  00090	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	c1 e0 08	 shl	 eax, 8
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	48 6b c9 03	 imul	 rcx, rcx, 3
  000ab	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b3	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b7	0b c1		 or	 eax, ecx
  000b9	89 44 24 50	 mov	 DWORD PTR d4$[rsp], eax

; 2409 :     i2 = inst[4];

  000bd	b8 01 00 00 00	 mov	 eax, 1
  000c2	48 6b c0 04	 imul	 rax, rax, 4
  000c6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ce	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d2	89 44 24 58	 mov	 DWORD PTR i2$[rsp], eax

; 2410 :     IPRINT_PRINT("%d,%d,%d,%d(%d)",r1,i2,m3,d4,b4)

  000d6	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000de	48 ff c0	 inc	 rax
  000e1	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000e6	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000eb	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ee	89 44 24 48	 mov	 DWORD PTR tv93[rsp], eax
  000f2	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000f7	48 ff c0	 inc	 rax
  000fa	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  000ff	83 7c 24 48 00	 cmp	 DWORD PTR tv93[rsp], 0
  00104	74 02		 je	 SHORT $LN6@iprint_ASM
  00106	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00108	8b 44 24 4c	 mov	 eax, DWORD PTR b4$[rsp]
  0010c	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00110	8b 44 24 50	 mov	 eax, DWORD PTR d4$[rsp]
  00114	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00118	8b 44 24 54	 mov	 eax, DWORD PTR m3$[rsp]
  0011c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00120	8b 44 24 58	 mov	 eax, DWORD PTR i2$[rsp]
  00124	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00128	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR r1$[rsp]
  0012d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198532
  00134	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00139	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  0013e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00144	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00149	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0014e	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00153	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198533
  00162	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0016a	e8 00 00 00 00	 call	 sprintf
  0016f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00177	48 33 cc	 xor	 rcx, rsp
  0017a	e8 00 00 00 00	 call	 __security_check_cookie
  0017f	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00186	c3		 ret	 0
iprint_ASMFMT_RIS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv91 = 56
i2$ = 60
r1$ = 64
Two_S64$ = 72
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RIL_A PROC

; 2393 : IPRINT_FUNC( ASMFMT_RIL_A );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2394 :     int r1,i2;
; 2395 :     const S64 Two_S64=2;

  0002d	48 c7 44 24 48
	02 00 00 00	 mov	 QWORD PTR Two_S64$[rsp], 2
$LN4@iprint_ASM:

; 2396 :     UNREFERENCED( regs );

  00036	33 c0		 xor	 eax, eax
  00038	85 c0		 test	 eax, eax
  0003a	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2397 :     r1 = inst[1] >> 4;

  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	48 6b c0 01	 imul	 rax, rax, 1
  00045	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0004d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00051	c1 f8 04	 sar	 eax, 4
  00054	89 44 24 40	 mov	 DWORD PTR r1$[rsp], eax

; 2398 :     i2 = (S32)((((U32)inst[2] << 24) | ((U32)inst[3] << 16)

  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 02	 imul	 rax, rax, 2
  00061	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00069	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0006d	c1 e0 18	 shl	 eax, 24
  00070	b9 01 00 00 00	 mov	 ecx, 1
  00075	48 6b c9 03	 imul	 rcx, rcx, 3
  00079	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00081	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00085	c1 e1 10	 shl	 ecx, 16
  00088	0b c1		 or	 eax, ecx
  0008a	b9 01 00 00 00	 mov	 ecx, 1
  0008f	48 6b c9 04	 imul	 rcx, rcx, 4
  00093	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  0009b	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0009f	c1 e1 08	 shl	 ecx, 8
  000a2	0b c1		 or	 eax, ecx
  000a4	b9 01 00 00 00	 mov	 ecx, 1
  000a9	48 6b c9 05	 imul	 rcx, rcx, 5
  000ad	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b5	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b9	0b c1		 or	 eax, ecx
  000bb	89 44 24 3c	 mov	 DWORD PTR i2$[rsp], eax

; 2399 :        | ((U32)inst[4] << 8)) | inst[5]);
; 2400 :     IPRINT_PRINT("%d,*%+"PRId64,r1,i2*Two_S64)

  000bf	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000c7	48 ff c0	 inc	 rax
  000ca	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000cf	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000d4	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d7	89 44 24 38	 mov	 DWORD PTR tv91[rsp], eax
  000db	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000e0	48 ff c0	 inc	 rax
  000e3	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000e8	83 7c 24 38 00	 cmp	 DWORD PTR tv91[rsp], 0
  000ed	74 02		 je	 SHORT $LN6@iprint_ASM
  000ef	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000f1	48 63 44 24 3c	 movsxd	 rax, DWORD PTR i2$[rsp]
  000f6	48 0f af 44 24
	48		 imul	 rax, QWORD PTR Two_S64$[rsp]
  000fc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00101	44 8b 4c 24 40	 mov	 r9d, DWORD PTR r1$[rsp]
  00106	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198509
  0010d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00112	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  00117	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0011d	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00122	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00127	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  0012c	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198510
  0013b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00143	e8 00 00 00 00	 call	 sprintf
  00148	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00150	48 33 cc	 xor	 rcx, rsp
  00153	e8 00 00 00 00	 call	 __security_check_cookie
  00158	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0015f	c3		 ret	 0
iprint_ASMFMT_RIL_A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv91 = 56
i2$ = 60
r1$ = 64
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RIL PROC

; 2385 : IPRINT_FUNC( ASMFMT_RIL );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2386 :     int r1,i2;
; 2387 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2388 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 40	 mov	 DWORD PTR r1$[rsp], eax

; 2389 :     i2 = (S32)((((U32)inst[2] << 24) | ((U32)inst[3] << 16)

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 e0 18	 shl	 eax, 24
  00067	b9 01 00 00 00	 mov	 ecx, 1
  0006c	48 6b c9 03	 imul	 rcx, rcx, 3
  00070	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00078	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0007c	c1 e1 10	 shl	 ecx, 16
  0007f	0b c1		 or	 eax, ecx
  00081	b9 01 00 00 00	 mov	 ecx, 1
  00086	48 6b c9 04	 imul	 rcx, rcx, 4
  0008a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00092	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00096	c1 e1 08	 shl	 ecx, 8
  00099	0b c1		 or	 eax, ecx
  0009b	b9 01 00 00 00	 mov	 ecx, 1
  000a0	48 6b c9 05	 imul	 rcx, rcx, 5
  000a4	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000ac	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b0	0b c1		 or	 eax, ecx
  000b2	89 44 24 3c	 mov	 DWORD PTR i2$[rsp], eax

; 2390 :        | ((U32)inst[4] << 8)) | inst[5]);
; 2391 :     IPRINT_PRINT("%d,%"PRId32,r1,i2)

  000b6	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000be	48 ff c0	 inc	 rax
  000c1	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000c6	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000cb	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ce	89 44 24 38	 mov	 DWORD PTR tv91[rsp], eax
  000d2	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000d7	48 ff c0	 inc	 rax
  000da	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000df	83 7c 24 38 00	 cmp	 DWORD PTR tv91[rsp], 0
  000e4	74 02		 je	 SHORT $LN6@iprint_ASM
  000e6	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000e8	8b 44 24 3c	 mov	 eax, DWORD PTR i2$[rsp]
  000ec	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000f0	44 8b 4c 24 40	 mov	 r9d, DWORD PTR r1$[rsp]
  000f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198484
  000fc	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00101	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00111	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00116	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  0011b	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00123	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198485
  0012a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00132	e8 00 00 00 00	 call	 sprintf
  00137	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0013f	48 33 cc	 xor	 rcx, rsp
  00142	e8 00 00 00 00	 call	 __security_check_cookie
  00147	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0014e	c3		 ret	 0
iprint_ASMFMT_RIL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv86 = 72
i5$ = 76
i4$ = 80
i3$ = 84
r2$ = 88
r1$ = 92
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RIE_RRIII PROC

; 2375 : IPRINT_FUNC( ASMFMT_RIE_RRIII );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2376 :     int r1,r2,i3,i4,i5;
; 2377 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2378 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 5c	 mov	 DWORD PTR r1$[rsp], eax

; 2379 :     r2 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 58	 mov	 DWORD PTR r2$[rsp], eax

; 2380 :     i3 = inst[2];

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	89 44 24 54	 mov	 DWORD PTR i3$[rsp], eax

; 2381 :     i4 = inst[3];

  00084	b8 01 00 00 00	 mov	 eax, 1
  00089	48 6b c0 03	 imul	 rax, rax, 3
  0008d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00095	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00099	89 44 24 50	 mov	 DWORD PTR i4$[rsp], eax

; 2382 :     i5 = inst[4];

  0009d	b8 01 00 00 00	 mov	 eax, 1
  000a2	48 6b c0 04	 imul	 rax, rax, 4
  000a6	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000ae	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b2	89 44 24 4c	 mov	 DWORD PTR i5$[rsp], eax

; 2383 :     IPRINT_PRINT("%d,%d,%d,%d,%d",r1,r2,i3,i4,i5)

  000b6	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000be	48 ff c0	 inc	 rax
  000c1	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000c6	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000cb	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ce	89 44 24 48	 mov	 DWORD PTR tv86[rsp], eax
  000d2	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000d7	48 ff c0	 inc	 rax
  000da	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  000df	83 7c 24 48 00	 cmp	 DWORD PTR tv86[rsp], 0
  000e4	74 02		 je	 SHORT $LN6@iprint_ASM
  000e6	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000e8	8b 44 24 4c	 mov	 eax, DWORD PTR i5$[rsp]
  000ec	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  000f0	8b 44 24 50	 mov	 eax, DWORD PTR i4$[rsp]
  000f4	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000f8	8b 44 24 54	 mov	 eax, DWORD PTR i3$[rsp]
  000fc	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00100	8b 44 24 58	 mov	 eax, DWORD PTR r2$[rsp]
  00104	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00108	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR r1$[rsp]
  0010d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198460
  00114	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00119	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00124	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00129	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012e	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00133	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0013b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198461
  00142	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0014a	e8 00 00 00 00	 call	 sprintf
  0014f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00157	48 33 cc	 xor	 rcx, rsp
  0015a	e8 00 00 00 00	 call	 __security_check_cookie
  0015f	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00166	c3		 ret	 0
iprint_ASMFMT_RIE_RRIII ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv90 = 72
i4$ = 76
m3$ = 80
i2$ = 84
r1$ = 88
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RIE_RMII PROC

; 2366 : IPRINT_FUNC( ASMFMT_RIE_RMII );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2367 :     int r1,m3,i4,i2;
; 2368 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2369 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 58	 mov	 DWORD PTR r1$[rsp], eax

; 2370 :     m3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 50	 mov	 DWORD PTR m3$[rsp], eax

; 2371 :     i4 = (S16)(((U16)inst[2] << 8) | inst[3]);

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 e0 08	 shl	 eax, 8
  00083	b9 01 00 00 00	 mov	 ecx, 1
  00088	48 6b c9 03	 imul	 rcx, rcx, 3
  0008c	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00094	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00098	0b c1		 or	 eax, ecx
  0009a	98		 cwde
  0009b	89 44 24 4c	 mov	 DWORD PTR i4$[rsp], eax

; 2372 :     i2 = inst[4];

  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	48 6b c0 04	 imul	 rax, rax, 4
  000a8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000b0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b4	89 44 24 54	 mov	 DWORD PTR i2$[rsp], eax

; 2373 :     IPRINT_PRINT("%d,%d,%d,*%+d",r1,i2,m3,i4*2)

  000b8	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000c0	48 ff c0	 inc	 rax
  000c3	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000c8	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000cd	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d0	89 44 24 48	 mov	 DWORD PTR tv90[rsp], eax
  000d4	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000d9	48 ff c0	 inc	 rax
  000dc	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  000e1	83 7c 24 48 00	 cmp	 DWORD PTR tv90[rsp], 0
  000e6	74 02		 je	 SHORT $LN6@iprint_ASM
  000e8	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000ea	8b 44 24 4c	 mov	 eax, DWORD PTR i4$[rsp]
  000ee	d1 e0		 shl	 eax, 1
  000f0	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000f4	8b 44 24 50	 mov	 eax, DWORD PTR m3$[rsp]
  000f8	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000fc	8b 44 24 54	 mov	 eax, DWORD PTR i2$[rsp]
  00100	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00104	44 8b 4c 24 58	 mov	 r9d, DWORD PTR r1$[rsp]
  00109	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198437
  00110	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00115	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  0011a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00120	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00125	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012a	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  0012f	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198438
  0013e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00146	e8 00 00 00 00	 call	 sprintf
  0014b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00153	48 33 cc	 xor	 rcx, rsp
  00156	e8 00 00 00 00	 call	 __security_check_cookie
  0015b	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00162	c3		 ret	 0
iprint_ASMFMT_RIE_RMII ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv91 = 72
i4$ = 76
m3$ = 80
r2$ = 84
r1$ = 88
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RIE_RRIM PROC

; 2357 : IPRINT_FUNC( ASMFMT_RIE_RRIM );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2358 :     int r1,r2,i4,m3;
; 2359 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2360 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 58	 mov	 DWORD PTR r1$[rsp], eax

; 2361 :     r2 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 54	 mov	 DWORD PTR r2$[rsp], eax

; 2362 :     i4 = (S16)(((U16)inst[2] << 8) | inst[3]);

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 e0 08	 shl	 eax, 8
  00083	b9 01 00 00 00	 mov	 ecx, 1
  00088	48 6b c9 03	 imul	 rcx, rcx, 3
  0008c	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00094	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00098	0b c1		 or	 eax, ecx
  0009a	98		 cwde
  0009b	89 44 24 4c	 mov	 DWORD PTR i4$[rsp], eax

; 2363 :     m3 = inst[4] >> 4;

  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	48 6b c0 04	 imul	 rax, rax, 4
  000a8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000b0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b4	c1 f8 04	 sar	 eax, 4
  000b7	89 44 24 50	 mov	 DWORD PTR m3$[rsp], eax

; 2364 :     IPRINT_PRINT("%d,%d,%d,*%+d",r1,r2,m3,i4*2)

  000bb	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000c3	48 ff c0	 inc	 rax
  000c6	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000cb	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000d0	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d3	89 44 24 48	 mov	 DWORD PTR tv91[rsp], eax
  000d7	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000dc	48 ff c0	 inc	 rax
  000df	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  000e4	83 7c 24 48 00	 cmp	 DWORD PTR tv91[rsp], 0
  000e9	74 02		 je	 SHORT $LN6@iprint_ASM
  000eb	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000ed	8b 44 24 4c	 mov	 eax, DWORD PTR i4$[rsp]
  000f1	d1 e0		 shl	 eax, 1
  000f3	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000f7	8b 44 24 50	 mov	 eax, DWORD PTR m3$[rsp]
  000fb	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000ff	8b 44 24 54	 mov	 eax, DWORD PTR r2$[rsp]
  00103	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00107	44 8b 4c 24 58	 mov	 r9d, DWORD PTR r1$[rsp]
  0010c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198413
  00113	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00118	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00123	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00128	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012d	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00132	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0013a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198414
  00141	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00149	e8 00 00 00 00	 call	 sprintf
  0014e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00156	48 33 cc	 xor	 rcx, rsp
  00159	e8 00 00 00 00	 call	 __security_check_cookie
  0015e	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00165	c3		 ret	 0
iprint_ASMFMT_RIE_RRIM ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv87 = 56
m3$ = 60
i2$ = 64
r1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RIE_RIM PROC

; 2349 : IPRINT_FUNC( ASMFMT_RIE_RIM );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2350 :     int r1,i2,m3;
; 2351 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2352 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 44	 mov	 DWORD PTR r1$[rsp], eax

; 2353 :     i2 = (S16)(((U16)inst[2] << 8) | inst[3]);

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 e0 08	 shl	 eax, 8
  00067	b9 01 00 00 00	 mov	 ecx, 1
  0006c	48 6b c9 03	 imul	 rcx, rcx, 3
  00070	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00078	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0007c	0b c1		 or	 eax, ecx
  0007e	98		 cwde
  0007f	89 44 24 40	 mov	 DWORD PTR i2$[rsp], eax

; 2354 :     m3 = inst[4] >> 4;

  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	48 6b c0 04	 imul	 rax, rax, 4
  0008c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00094	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00098	c1 f8 04	 sar	 eax, 4
  0009b	89 44 24 3c	 mov	 DWORD PTR m3$[rsp], eax

; 2355 :     IPRINT_PRINT("%d,%d,%d",r1,i2,m3)

  0009f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000a7	48 ff c0	 inc	 rax
  000aa	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000af	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000b4	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000b7	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
  000bb	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000c0	48 ff c0	 inc	 rax
  000c3	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000c8	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000cd	74 02		 je	 SHORT $LN6@iprint_ASM
  000cf	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000d1	8b 44 24 3c	 mov	 eax, DWORD PTR m3$[rsp]
  000d5	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000d9	8b 44 24 40	 mov	 eax, DWORD PTR i2$[rsp]
  000dd	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000e1	44 8b 4c 24 44	 mov	 r9d, DWORD PTR r1$[rsp]
  000e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198389
  000ed	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000f2	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000fd	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00102	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00107	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  0010c	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00114	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198390
  0011b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00123	e8 00 00 00 00	 call	 sprintf
  00128	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00130	48 33 cc	 xor	 rcx, rsp
  00133	e8 00 00 00 00	 call	 __security_check_cookie
  00138	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0013f	c3		 ret	 0
iprint_ASMFMT_RIE_RIM ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv87 = 56
i2$ = 60
r3$ = 64
r1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RIE_RRI PROC

; 2341 : IPRINT_FUNC( ASMFMT_RIE_RRI );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2342 :     int r1,r3,i2;
; 2343 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2344 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 44	 mov	 DWORD PTR r1$[rsp], eax

; 2345 :     r3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 40	 mov	 DWORD PTR r3$[rsp], eax

; 2346 :     i2 = (S16)(((U16)inst[2] << 8) | inst[3]);

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 e0 08	 shl	 eax, 8
  00083	b9 01 00 00 00	 mov	 ecx, 1
  00088	48 6b c9 03	 imul	 rcx, rcx, 3
  0008c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00094	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00098	0b c1		 or	 eax, ecx
  0009a	98		 cwde
  0009b	89 44 24 3c	 mov	 DWORD PTR i2$[rsp], eax

; 2347 :     IPRINT_PRINT("%d,%d,%d",r1,r3,i2)

  0009f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000a7	48 ff c0	 inc	 rax
  000aa	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000af	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000b4	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000b7	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
  000bb	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000c0	48 ff c0	 inc	 rax
  000c3	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000c8	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000cd	74 02		 je	 SHORT $LN6@iprint_ASM
  000cf	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000d1	8b 44 24 3c	 mov	 eax, DWORD PTR i2$[rsp]
  000d5	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000d9	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  000dd	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000e1	44 8b 4c 24 44	 mov	 r9d, DWORD PTR r1$[rsp]
  000e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198366
  000ed	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000f2	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000fd	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00102	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00107	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  0010c	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00114	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198367
  0011b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00123	e8 00 00 00 00	 call	 sprintf
  00128	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00130	48 33 cc	 xor	 rcx, rsp
  00133	e8 00 00 00 00	 call	 __security_check_cookie
  00138	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0013f	c3		 ret	 0
iprint_ASMFMT_RIE_RRI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv87 = 56
m3$ = 60
i2$ = 64
r1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RIE_G PROC

; 2333 : IPRINT_FUNC( ASMFMT_RIE_G );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2334 :     int r1,i2, m3;
; 2335 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2336 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 44	 mov	 DWORD PTR r1$[rsp], eax

; 2337 :     m3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 3c	 mov	 DWORD PTR m3$[rsp], eax

; 2338 :     i2 = (S16)(((U16)inst[2] << 8) | inst[3]);

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 e0 08	 shl	 eax, 8
  00083	b9 01 00 00 00	 mov	 ecx, 1
  00088	48 6b c9 03	 imul	 rcx, rcx, 3
  0008c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00094	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00098	0b c1		 or	 eax, ecx
  0009a	98		 cwde
  0009b	89 44 24 40	 mov	 DWORD PTR i2$[rsp], eax

; 2339 :     IPRINT_PRINT("%d,%d,%d",r1,i2,m3)

  0009f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000a7	48 ff c0	 inc	 rax
  000aa	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000af	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000b4	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000b7	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
  000bb	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000c0	48 ff c0	 inc	 rax
  000c3	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000c8	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000cd	74 02		 je	 SHORT $LN6@iprint_ASM
  000cf	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000d1	8b 44 24 3c	 mov	 eax, DWORD PTR m3$[rsp]
  000d5	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000d9	8b 44 24 40	 mov	 eax, DWORD PTR i2$[rsp]
  000dd	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000e1	44 8b 4c 24 44	 mov	 r9d, DWORD PTR r1$[rsp]
  000e6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198343
  000ed	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000f2	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000fd	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00102	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00107	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  0010c	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00114	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198344
  0011b	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00123	e8 00 00 00 00	 call	 sprintf
  00128	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00130	48 33 cc	 xor	 rcx, rsp
  00133	e8 00 00 00 00	 call	 __security_check_cookie
  00138	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0013f	c3		 ret	 0
iprint_ASMFMT_RIE_G ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv87 = 56
i2$ = 60
r3$ = 64
r1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RIE PROC

; 2325 : IPRINT_FUNC( ASMFMT_RIE );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2326 :     int r1,r3,i2;
; 2327 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2328 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 44	 mov	 DWORD PTR r1$[rsp], eax

; 2329 :     r3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 40	 mov	 DWORD PTR r3$[rsp], eax

; 2330 :     i2 = (S16)(((U16)inst[2] << 8) | inst[3]);

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 e0 08	 shl	 eax, 8
  00083	b9 01 00 00 00	 mov	 ecx, 1
  00088	48 6b c9 03	 imul	 rcx, rcx, 3
  0008c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00094	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00098	0b c1		 or	 eax, ecx
  0009a	98		 cwde
  0009b	89 44 24 3c	 mov	 DWORD PTR i2$[rsp], eax

; 2331 :     IPRINT_PRINT("%d,%d,*%+d",r1,r3,i2*2)

  0009f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000a7	48 ff c0	 inc	 rax
  000aa	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000af	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000b4	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000b7	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
  000bb	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000c0	48 ff c0	 inc	 rax
  000c3	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000c8	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000cd	74 02		 je	 SHORT $LN6@iprint_ASM
  000cf	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000d1	8b 44 24 3c	 mov	 eax, DWORD PTR i2$[rsp]
  000d5	d1 e0		 shl	 eax, 1
  000d7	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000db	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  000df	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000e3	44 8b 4c 24 44	 mov	 r9d, DWORD PTR r1$[rsp]
  000e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198320
  000ef	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000f4	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000ff	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00104	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00109	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  0010e	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198321
  0011d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00125	e8 00 00 00 00	 call	 sprintf
  0012a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00132	48 33 cc	 xor	 rcx, rsp
  00135	e8 00 00 00 00	 call	 __security_check_cookie
  0013a	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00141	c3		 ret	 0
iprint_ASMFMT_RIE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv83 = 56
i2$ = 60
r1$ = 64
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RI_B PROC

; 2318 : IPRINT_FUNC( ASMFMT_RI_B );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2319 :     int r1,i2;
; 2320 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2321 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 40	 mov	 DWORD PTR r1$[rsp], eax

; 2322 :     i2 = (S16)(((U16)inst[2] << 8) | inst[3]);

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 e0 08	 shl	 eax, 8
  00067	b9 01 00 00 00	 mov	 ecx, 1
  0006c	48 6b c9 03	 imul	 rcx, rcx, 3
  00070	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00078	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0007c	0b c1		 or	 eax, ecx
  0007e	98		 cwde
  0007f	89 44 24 3c	 mov	 DWORD PTR i2$[rsp], eax

; 2323 :     IPRINT_PRINT("%d,*%+d",r1,i2*2)

  00083	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  0008b	48 ff c0	 inc	 rax
  0008e	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00093	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00098	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0009b	89 44 24 38	 mov	 DWORD PTR tv83[rsp], eax
  0009f	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000a4	48 ff c0	 inc	 rax
  000a7	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000ac	83 7c 24 38 00	 cmp	 DWORD PTR tv83[rsp], 0
  000b1	74 02		 je	 SHORT $LN6@iprint_ASM
  000b3	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000b5	8b 44 24 3c	 mov	 eax, DWORD PTR i2$[rsp]
  000b9	d1 e0		 shl	 eax, 1
  000bb	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000bf	44 8b 4c 24 40	 mov	 r9d, DWORD PTR r1$[rsp]
  000c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198297
  000cb	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000d0	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000db	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000e0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e5	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  000ea	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198298
  000f9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00101	e8 00 00 00 00	 call	 sprintf
  00106	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0010e	48 33 cc	 xor	 rcx, rsp
  00111	e8 00 00 00 00	 call	 __security_check_cookie
  00116	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0011d	c3		 ret	 0
iprint_ASMFMT_RI_B ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv83 = 56
i2$ = 60
r1$ = 64
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RI PROC

; 2311 : IPRINT_FUNC( ASMFMT_RI );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2312 :     int r1,i2;
; 2313 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2314 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 40	 mov	 DWORD PTR r1$[rsp], eax

; 2315 :     i2 = (S16)(((U16)inst[2] << 8) | inst[3]);

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 e0 08	 shl	 eax, 8
  00067	b9 01 00 00 00	 mov	 ecx, 1
  0006c	48 6b c9 03	 imul	 rcx, rcx, 3
  00070	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00078	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0007c	0b c1		 or	 eax, ecx
  0007e	98		 cwde
  0007f	89 44 24 3c	 mov	 DWORD PTR i2$[rsp], eax

; 2316 :     IPRINT_PRINT("%d,%d",r1,i2)

  00083	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  0008b	48 ff c0	 inc	 rax
  0008e	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00093	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00098	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0009b	89 44 24 38	 mov	 DWORD PTR tv83[rsp], eax
  0009f	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000a4	48 ff c0	 inc	 rax
  000a7	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000ac	83 7c 24 38 00	 cmp	 DWORD PTR tv83[rsp], 0
  000b1	74 02		 je	 SHORT $LN6@iprint_ASM
  000b3	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000b5	8b 44 24 3c	 mov	 eax, DWORD PTR i2$[rsp]
  000b9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000bd	44 8b 4c 24 40	 mov	 r9d, DWORD PTR r1$[rsp]
  000c2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198275
  000c9	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000ce	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000d9	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000de	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e3	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  000e8	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198276
  000f7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  000ff	e8 00 00 00 00	 call	 sprintf
  00104	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0010c	48 33 cc	 xor	 rcx, rsp
  0010f	e8 00 00 00 00	 call	 __security_check_cookie
  00114	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0011b	c3		 ret	 0
iprint_ASMFMT_RI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv87 = 56
i2$ = 60
r3$ = 64
r1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RSI PROC

; 2303 : IPRINT_FUNC( ASMFMT_RSI );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2304 :     int r1,r3,i2;
; 2305 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2306 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 44	 mov	 DWORD PTR r1$[rsp], eax

; 2307 :     r3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 40	 mov	 DWORD PTR r3$[rsp], eax

; 2308 :     i2 = (S16)(((U16)inst[2] << 8) | inst[3]);

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 e0 08	 shl	 eax, 8
  00083	b9 01 00 00 00	 mov	 ecx, 1
  00088	48 6b c9 03	 imul	 rcx, rcx, 3
  0008c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00094	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00098	0b c1		 or	 eax, ecx
  0009a	98		 cwde
  0009b	89 44 24 3c	 mov	 DWORD PTR i2$[rsp], eax

; 2309 :     IPRINT_PRINT("%d,%d,*%+d",r1,r3,i2*2)

  0009f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000a7	48 ff c0	 inc	 rax
  000aa	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000af	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000b4	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000b7	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
  000bb	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000c0	48 ff c0	 inc	 rax
  000c3	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000c8	83 7c 24 38 00	 cmp	 DWORD PTR tv87[rsp], 0
  000cd	74 02		 je	 SHORT $LN6@iprint_ASM
  000cf	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000d1	8b 44 24 3c	 mov	 eax, DWORD PTR i2$[rsp]
  000d5	d1 e0		 shl	 eax, 1
  000d7	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000db	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  000df	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000e3	44 8b 4c 24 44	 mov	 r9d, DWORD PTR r1$[rsp]
  000e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198253
  000ef	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000f4	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000ff	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00104	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00109	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  0010e	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198254
  0011d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00125	e8 00 00 00 00	 call	 sprintf
  0012a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00132	48 33 cc	 xor	 rcx, rsp
  00135	e8 00 00 00 00	 call	 __security_check_cookie
  0013a	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00141	c3		 ret	 0
iprint_ASMFMT_RSI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv93 = 72
l2$ = 76
m3$ = 80
b2$ = 84
d2$ = 88
r1$ = 92
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RSL_RM PROC

; 2293 : IPRINT_FUNC( ASMFMT_RSL_RM );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2294 :     int r1,l2,b2,d2,m3;
; 2295 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2296 :     l2 = inst[1];

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	89 44 24 4c	 mov	 DWORD PTR l2$[rsp], eax

; 2297 :     b2 = inst[2] >> 4;

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	48 6b c0 02	 imul	 rax, rax, 2
  00055	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0005d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00061	c1 f8 04	 sar	 eax, 4
  00064	89 44 24 54	 mov	 DWORD PTR b2$[rsp], eax

; 2298 :     d2 = (inst[2] & 0x0F) << 8 | inst[3];

  00068	b8 01 00 00 00	 mov	 eax, 1
  0006d	48 6b c0 02	 imul	 rax, rax, 2
  00071	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00079	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0007d	83 e0 0f	 and	 eax, 15
  00080	c1 e0 08	 shl	 eax, 8
  00083	b9 01 00 00 00	 mov	 ecx, 1
  00088	48 6b c9 03	 imul	 rcx, rcx, 3
  0008c	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00094	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00098	0b c1		 or	 eax, ecx
  0009a	89 44 24 58	 mov	 DWORD PTR d2$[rsp], eax

; 2299 :     r1 = inst[4] >> 4;

  0009e	b8 01 00 00 00	 mov	 eax, 1
  000a3	48 6b c0 04	 imul	 rax, rax, 4
  000a7	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000af	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b3	c1 f8 04	 sar	 eax, 4
  000b6	89 44 24 5c	 mov	 DWORD PTR r1$[rsp], eax

; 2300 :     m3 = inst[4] & 0x0F;

  000ba	b8 01 00 00 00	 mov	 eax, 1
  000bf	48 6b c0 04	 imul	 rax, rax, 4
  000c3	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000cb	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000cf	83 e0 0f	 and	 eax, 15
  000d2	89 44 24 50	 mov	 DWORD PTR m3$[rsp], eax

; 2301 :     IPRINT_PRINT("%d,%d(%d,%d),%d",r1,d2,l2+1,b2,m3)

  000d6	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000de	48 ff c0	 inc	 rax
  000e1	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000e6	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000eb	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ee	89 44 24 48	 mov	 DWORD PTR tv93[rsp], eax
  000f2	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000f7	48 ff c0	 inc	 rax
  000fa	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  000ff	83 7c 24 48 00	 cmp	 DWORD PTR tv93[rsp], 0
  00104	74 02		 je	 SHORT $LN6@iprint_ASM
  00106	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00108	8b 44 24 4c	 mov	 eax, DWORD PTR l2$[rsp]
  0010c	ff c0		 inc	 eax
  0010e	8b 4c 24 50	 mov	 ecx, DWORD PTR m3$[rsp]
  00112	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00116	8b 4c 24 54	 mov	 ecx, DWORD PTR b2$[rsp]
  0011a	89 4c 24 30	 mov	 DWORD PTR [rsp+48], ecx
  0011e	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00122	8b 44 24 58	 mov	 eax, DWORD PTR d2$[rsp]
  00126	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0012a	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR r1$[rsp]
  0012f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198230
  00136	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0013b	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00146	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  0014b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00150	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00155	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0015d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198231
  00164	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0016c	e8 00 00 00 00	 call	 sprintf
  00171	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00179	48 33 cc	 xor	 rcx, rsp
  0017c	e8 00 00 00 00	 call	 __security_check_cookie
  00181	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00188	c3		 ret	 0
iprint_ASMFMT_RSL_RM ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv86 = 56
l1$ = 60
b1$ = 64
d1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RSL PROC

; 2285 : IPRINT_FUNC( ASMFMT_RSL );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2286 :     int l1,b1,d1;
; 2287 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2288 :     l1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 3c	 mov	 DWORD PTR l1$[rsp], eax

; 2289 :     b1 = inst[2] >> 4;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 f8 04	 sar	 eax, 4
  00067	89 44 24 40	 mov	 DWORD PTR b1$[rsp], eax

; 2290 :     d1 = (inst[2] & 0x0F) << 8 | inst[3];

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	83 e0 0f	 and	 eax, 15
  00083	c1 e0 08	 shl	 eax, 8
  00086	b9 01 00 00 00	 mov	 ecx, 1
  0008b	48 6b c9 03	 imul	 rcx, rcx, 3
  0008f	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00097	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0009b	0b c1		 or	 eax, ecx
  0009d	89 44 24 44	 mov	 DWORD PTR d1$[rsp], eax

; 2291 :     IPRINT_PRINT("%d(%d,%d)",d1,l1+1,b1)

  000a1	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000a9	48 ff c0	 inc	 rax
  000ac	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000b1	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000b6	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000b9	89 44 24 38	 mov	 DWORD PTR tv86[rsp], eax
  000bd	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000c2	48 ff c0	 inc	 rax
  000c5	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000ca	83 7c 24 38 00	 cmp	 DWORD PTR tv86[rsp], 0
  000cf	74 02		 je	 SHORT $LN6@iprint_ASM
  000d1	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000d3	8b 44 24 3c	 mov	 eax, DWORD PTR l1$[rsp]
  000d7	ff c0		 inc	 eax
  000d9	8b 4c 24 40	 mov	 ecx, DWORD PTR b1$[rsp]
  000dd	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  000e1	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000e5	44 8b 4c 24 44	 mov	 r9d, DWORD PTR d1$[rsp]
  000ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198207
  000f1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000f6	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00101	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00106	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0010b	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  00110	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00118	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198208
  0011f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00127	e8 00 00 00 00	 call	 sprintf
  0012c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00134	48 33 cc	 xor	 rcx, rsp
  00137	e8 00 00 00 00	 call	 __security_check_cookie
  0013c	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00143	c3		 ret	 0
iprint_ASMFMT_RSL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv95 = 72
m3$ = 76
b2$ = 80
d2$ = 84
r1$ = 88
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RSY_M3 PROC

; 2276 : IPRINT_FUNC( ASMFMT_RSY_M3 );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2277 :     int r1,b2,d2,m3;
; 2278 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2279 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 58	 mov	 DWORD PTR r1$[rsp], eax

; 2280 :     m3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 4c	 mov	 DWORD PTR m3$[rsp], eax

; 2281 :     b2 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 50	 mov	 DWORD PTR b2$[rsp], eax

; 2282 :     d2 = (((S8)inst[4]) << 12) | (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 04	 imul	 rax, rax, 4
  00090	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0009c	c1 e0 0c	 shl	 eax, 12
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	48 6b c9 02	 imul	 rcx, rcx, 2
  000a8	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b0	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b4	83 e1 0f	 and	 ecx, 15
  000b7	c1 e1 08	 shl	 ecx, 8
  000ba	0b c1		 or	 eax, ecx
  000bc	b9 01 00 00 00	 mov	 ecx, 1
  000c1	48 6b c9 03	 imul	 rcx, rcx, 3
  000c5	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000cd	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000d1	0b c1		 or	 eax, ecx
  000d3	89 44 24 54	 mov	 DWORD PTR d2$[rsp], eax

; 2283 :     IPRINT_PRINT("%d,%d(%d),%d",r1,d2,b2,m3)

  000d7	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000df	48 ff c0	 inc	 rax
  000e2	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000e7	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000ec	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ef	89 44 24 48	 mov	 DWORD PTR tv95[rsp], eax
  000f3	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000f8	48 ff c0	 inc	 rax
  000fb	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  00100	83 7c 24 48 00	 cmp	 DWORD PTR tv95[rsp], 0
  00105	74 02		 je	 SHORT $LN6@iprint_ASM
  00107	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00109	8b 44 24 4c	 mov	 eax, DWORD PTR m3$[rsp]
  0010d	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00111	8b 44 24 50	 mov	 eax, DWORD PTR b2$[rsp]
  00115	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00119	8b 44 24 54	 mov	 eax, DWORD PTR d2$[rsp]
  0011d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00121	44 8b 4c 24 58	 mov	 r9d, DWORD PTR r1$[rsp]
  00126	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198186
  0012d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00132	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0013d	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00142	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00147	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  0014c	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00154	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198187
  0015b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00163	e8 00 00 00 00	 call	 sprintf
  00168	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00170	48 33 cc	 xor	 rcx, rsp
  00173	e8 00 00 00 00	 call	 __security_check_cookie
  00178	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0017f	c3		 ret	 0
iprint_ASMFMT_RSY_M3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv95 = 72
b2$ = 76
d2$ = 80
r3$ = 84
r1$ = 88
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RSY PROC

; 2267 : IPRINT_FUNC( ASMFMT_RSY );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2268 :     int r1,r3,b2,d2;
; 2269 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2270 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 58	 mov	 DWORD PTR r1$[rsp], eax

; 2271 :     r3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 54	 mov	 DWORD PTR r3$[rsp], eax

; 2272 :     b2 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax

; 2273 :     d2 = (((S8)inst[4]) << 12) | (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 04	 imul	 rax, rax, 4
  00090	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0009c	c1 e0 0c	 shl	 eax, 12
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	48 6b c9 02	 imul	 rcx, rcx, 2
  000a8	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b0	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b4	83 e1 0f	 and	 ecx, 15
  000b7	c1 e1 08	 shl	 ecx, 8
  000ba	0b c1		 or	 eax, ecx
  000bc	b9 01 00 00 00	 mov	 ecx, 1
  000c1	48 6b c9 03	 imul	 rcx, rcx, 3
  000c5	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000cd	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000d1	0b c1		 or	 eax, ecx
  000d3	89 44 24 50	 mov	 DWORD PTR d2$[rsp], eax

; 2274 :     IPRINT_PRINT("%d,%d,%d(%d)",r1,r3,d2,b2)

  000d7	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000df	48 ff c0	 inc	 rax
  000e2	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000e7	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000ec	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ef	89 44 24 48	 mov	 DWORD PTR tv95[rsp], eax
  000f3	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000f8	48 ff c0	 inc	 rax
  000fb	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  00100	83 7c 24 48 00	 cmp	 DWORD PTR tv95[rsp], 0
  00105	74 02		 je	 SHORT $LN6@iprint_ASM
  00107	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00109	8b 44 24 4c	 mov	 eax, DWORD PTR b2$[rsp]
  0010d	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00111	8b 44 24 50	 mov	 eax, DWORD PTR d2$[rsp]
  00115	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00119	8b 44 24 54	 mov	 eax, DWORD PTR r3$[rsp]
  0011d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00121	44 8b 4c 24 58	 mov	 r9d, DWORD PTR r1$[rsp]
  00126	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198163
  0012d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00132	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0013d	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00142	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00147	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  0014c	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00154	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198164
  0015b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00163	e8 00 00 00 00	 call	 sprintf
  00168	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00170	48 33 cc	 xor	 rcx, rsp
  00173	e8 00 00 00 00	 call	 __security_check_cookie
  00178	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0017f	c3		 ret	 0
iprint_ASMFMT_RSY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv86 = 56
b2$ = 60
d2$ = 64
r1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RS_R1D2B2 PROC

; 2259 : IPRINT_FUNC( ASMFMT_RS_R1D2B2 );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2260 :     int r1,b2,d2;
; 2261 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2262 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 44	 mov	 DWORD PTR r1$[rsp], eax

; 2263 :     b2 = inst[2] >> 4;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 f8 04	 sar	 eax, 4
  00067	89 44 24 3c	 mov	 DWORD PTR b2$[rsp], eax

; 2264 :     d2 = (inst[2] & 0x0F) << 8 | inst[3];

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	83 e0 0f	 and	 eax, 15
  00083	c1 e0 08	 shl	 eax, 8
  00086	b9 01 00 00 00	 mov	 ecx, 1
  0008b	48 6b c9 03	 imul	 rcx, rcx, 3
  0008f	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00097	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  0009b	0b c1		 or	 eax, ecx
  0009d	89 44 24 40	 mov	 DWORD PTR d2$[rsp], eax

; 2265 :     IPRINT_PRINT("%d,%d(%d)",r1,d2,b2)

  000a1	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000a9	48 ff c0	 inc	 rax
  000ac	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000b1	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000b6	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000b9	89 44 24 38	 mov	 DWORD PTR tv86[rsp], eax
  000bd	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000c2	48 ff c0	 inc	 rax
  000c5	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000ca	83 7c 24 38 00	 cmp	 DWORD PTR tv86[rsp], 0
  000cf	74 02		 je	 SHORT $LN6@iprint_ASM
  000d1	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000d3	8b 44 24 3c	 mov	 eax, DWORD PTR b2$[rsp]
  000d7	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000db	8b 44 24 40	 mov	 eax, DWORD PTR d2$[rsp]
  000df	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000e3	44 8b 4c 24 44	 mov	 r9d, DWORD PTR r1$[rsp]
  000e8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198140
  000ef	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000f4	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000ff	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00104	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00109	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  0010e	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198141
  0011d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00125	e8 00 00 00 00	 call	 sprintf
  0012a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00132	48 33 cc	 xor	 rcx, rsp
  00135	e8 00 00 00 00	 call	 __security_check_cookie
  0013a	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00141	c3		 ret	 0
iprint_ASMFMT_RS_R1D2B2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv90 = 72
b2$ = 76
d2$ = 80
r3$ = 84
r1$ = 88
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RS PROC

; 2249 : IPRINT_FUNC( ASMFMT_RS );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2250 :     int r1,r3,b2,d2;
; 2251 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2252 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 58	 mov	 DWORD PTR r1$[rsp], eax

; 2253 :     r3 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 54	 mov	 DWORD PTR r3$[rsp], eax

; 2254 :     b2 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax

; 2255 :     d2 = (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 02	 imul	 rax, rax, 2
  00090	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	c1 e0 08	 shl	 eax, 8
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	48 6b c9 03	 imul	 rcx, rcx, 3
  000ab	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b3	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b7	0b c1		 or	 eax, ecx
  000b9	89 44 24 50	 mov	 DWORD PTR d2$[rsp], eax

; 2256 :     IPRINT_PRINT("%d,%d,%d(%d)",r1,r3,d2,b2)

  000bd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000c5	48 ff c0	 inc	 rax
  000c8	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000cd	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000d2	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d5	89 44 24 48	 mov	 DWORD PTR tv90[rsp], eax
  000d9	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000de	48 ff c0	 inc	 rax
  000e1	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  000e6	83 7c 24 48 00	 cmp	 DWORD PTR tv90[rsp], 0
  000eb	74 02		 je	 SHORT $LN6@iprint_ASM
  000ed	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000ef	8b 44 24 4c	 mov	 eax, DWORD PTR b2$[rsp]
  000f3	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000f7	8b 44 24 50	 mov	 eax, DWORD PTR d2$[rsp]
  000fb	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000ff	8b 44 24 54	 mov	 eax, DWORD PTR r3$[rsp]
  00103	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00107	44 8b 4c 24 58	 mov	 r9d, DWORD PTR r1$[rsp]
  0010c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198119
  00113	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00118	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00123	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00128	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012d	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00132	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0013a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198120
  00141	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00149	e8 00 00 00 00	 call	 sprintf
  0014e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00156	48 33 cc	 xor	 rcx, rsp
  00159	e8 00 00 00 00	 call	 __security_check_cookie
  0015e	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00165	c3		 ret	 0
iprint_ASMFMT_RS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv94 = 72
b2$ = 76
x2$ = 80
d2$ = 84
r3$ = 88
r1$ = 92
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RXF PROC

; 2239 : IPRINT_FUNC( ASMFMT_RXF );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2240 :     int r1,r3,x2,b2,d2;
; 2241 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2242 :     r1 = inst[4] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 04	 imul	 rax, rax, 4
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 5c	 mov	 DWORD PTR r1$[rsp], eax

; 2243 :     r3 = inst[1] >> 4;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 f8 04	 sar	 eax, 4
  00067	89 44 24 58	 mov	 DWORD PTR r3$[rsp], eax

; 2244 :     x2 = inst[1] & 0x0F;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 01	 imul	 rax, rax, 1
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	83 e0 0f	 and	 eax, 15
  00083	89 44 24 50	 mov	 DWORD PTR x2$[rsp], eax

; 2245 :     b2 = inst[2] >> 4;

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 02	 imul	 rax, rax, 2
  00090	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	c1 f8 04	 sar	 eax, 4
  0009f	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax

; 2246 :     d2 = (inst[2] & 0x0F) << 8 | inst[3];

  000a3	b8 01 00 00 00	 mov	 eax, 1
  000a8	48 6b c0 02	 imul	 rax, rax, 2
  000ac	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  000b4	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000b8	83 e0 0f	 and	 eax, 15
  000bb	c1 e0 08	 shl	 eax, 8
  000be	b9 01 00 00 00	 mov	 ecx, 1
  000c3	48 6b c9 03	 imul	 rcx, rcx, 3
  000c7	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000cf	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000d3	0b c1		 or	 eax, ecx
  000d5	89 44 24 54	 mov	 DWORD PTR d2$[rsp], eax

; 2247 :     IPRINT_PRINT("%d,%d,%d(%d,%d)",r1,r3,d2,x2,b2)

  000d9	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000e1	48 ff c0	 inc	 rax
  000e4	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000e9	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000ee	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000f1	89 44 24 48	 mov	 DWORD PTR tv94[rsp], eax
  000f5	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000fa	48 ff c0	 inc	 rax
  000fd	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  00102	83 7c 24 48 00	 cmp	 DWORD PTR tv94[rsp], 0
  00107	74 02		 je	 SHORT $LN6@iprint_ASM
  00109	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  0010b	8b 44 24 4c	 mov	 eax, DWORD PTR b2$[rsp]
  0010f	89 44 24 38	 mov	 DWORD PTR [rsp+56], eax
  00113	8b 44 24 50	 mov	 eax, DWORD PTR x2$[rsp]
  00117	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  0011b	8b 44 24 54	 mov	 eax, DWORD PTR d2$[rsp]
  0011f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00123	8b 44 24 58	 mov	 eax, DWORD PTR r3$[rsp]
  00127	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0012b	44 8b 4c 24 5c	 mov	 r9d, DWORD PTR r1$[rsp]
  00130	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198097
  00137	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0013c	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00147	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  0014c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00151	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00156	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0015e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198098
  00165	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0016d	e8 00 00 00 00	 call	 sprintf
  00172	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0017a	48 33 cc	 xor	 rcx, rsp
  0017d	e8 00 00 00 00	 call	 __security_check_cookie
  00182	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00189	c3		 ret	 0
iprint_ASMFMT_RXF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv95 = 72
b2$ = 76
x2$ = 80
d2$ = 84
r1$ = 88
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RXY PROC

; 2230 : IPRINT_FUNC( ASMFMT_RXY );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2231 :     int r1,x2,b2,d2;
; 2232 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2233 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 58	 mov	 DWORD PTR r1$[rsp], eax

; 2234 :     x2 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 50	 mov	 DWORD PTR x2$[rsp], eax

; 2235 :     b2 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax

; 2236 :     d2 = (((S8)inst[4]) << 12) | (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 04	 imul	 rax, rax, 4
  00090	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0009c	c1 e0 0c	 shl	 eax, 12
  0009f	b9 01 00 00 00	 mov	 ecx, 1
  000a4	48 6b c9 02	 imul	 rcx, rcx, 2
  000a8	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b0	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b4	83 e1 0f	 and	 ecx, 15
  000b7	c1 e1 08	 shl	 ecx, 8
  000ba	0b c1		 or	 eax, ecx
  000bc	b9 01 00 00 00	 mov	 ecx, 1
  000c1	48 6b c9 03	 imul	 rcx, rcx, 3
  000c5	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000cd	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000d1	0b c1		 or	 eax, ecx
  000d3	89 44 24 54	 mov	 DWORD PTR d2$[rsp], eax

; 2237 :     IPRINT_PRINT("%d,%d(%d,%d)",r1,d2,x2,b2)

  000d7	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000df	48 ff c0	 inc	 rax
  000e2	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000e7	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000ec	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ef	89 44 24 48	 mov	 DWORD PTR tv95[rsp], eax
  000f3	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000f8	48 ff c0	 inc	 rax
  000fb	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  00100	83 7c 24 48 00	 cmp	 DWORD PTR tv95[rsp], 0
  00105	74 02		 je	 SHORT $LN6@iprint_ASM
  00107	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00109	8b 44 24 4c	 mov	 eax, DWORD PTR b2$[rsp]
  0010d	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00111	8b 44 24 50	 mov	 eax, DWORD PTR x2$[rsp]
  00115	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00119	8b 44 24 54	 mov	 eax, DWORD PTR d2$[rsp]
  0011d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00121	44 8b 4c 24 58	 mov	 r9d, DWORD PTR r1$[rsp]
  00126	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198074
  0012d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00132	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0013d	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00142	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00147	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  0014c	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00154	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198075
  0015b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00163	e8 00 00 00 00	 call	 sprintf
  00168	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00170	48 33 cc	 xor	 rcx, rsp
  00173	e8 00 00 00 00	 call	 __security_check_cookie
  00178	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0017f	c3		 ret	 0
iprint_ASMFMT_RXY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv90 = 72
b2$ = 76
x2$ = 80
d2$ = 84
r1$ = 88
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RXE PROC

; 2221 : IPRINT_FUNC( ASMFMT_RXE );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2222 :     int r1,x2,b2,d2;
; 2223 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2224 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 58	 mov	 DWORD PTR r1$[rsp], eax

; 2225 :     x2 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 50	 mov	 DWORD PTR x2$[rsp], eax

; 2226 :     b2 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax

; 2227 :     d2 = (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 02	 imul	 rax, rax, 2
  00090	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	c1 e0 08	 shl	 eax, 8
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	48 6b c9 03	 imul	 rcx, rcx, 3
  000ab	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b3	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b7	0b c1		 or	 eax, ecx
  000b9	89 44 24 54	 mov	 DWORD PTR d2$[rsp], eax

; 2228 :     IPRINT_PRINT("%d,%d(%d,%d)",r1,d2,x2,b2)

  000bd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000c5	48 ff c0	 inc	 rax
  000c8	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000cd	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000d2	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d5	89 44 24 48	 mov	 DWORD PTR tv90[rsp], eax
  000d9	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000de	48 ff c0	 inc	 rax
  000e1	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  000e6	83 7c 24 48 00	 cmp	 DWORD PTR tv90[rsp], 0
  000eb	74 02		 je	 SHORT $LN6@iprint_ASM
  000ed	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000ef	8b 44 24 4c	 mov	 eax, DWORD PTR b2$[rsp]
  000f3	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000f7	8b 44 24 50	 mov	 eax, DWORD PTR x2$[rsp]
  000fb	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000ff	8b 44 24 54	 mov	 eax, DWORD PTR d2$[rsp]
  00103	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00107	44 8b 4c 24 58	 mov	 r9d, DWORD PTR r1$[rsp]
  0010c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198051
  00113	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00118	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00123	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00128	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012d	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00132	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0013a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198052
  00141	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00149	e8 00 00 00 00	 call	 sprintf
  0014e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00156	48 33 cc	 xor	 rcx, rsp
  00159	e8 00 00 00 00	 call	 __security_check_cookie
  0015e	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00165	c3		 ret	 0
iprint_ASMFMT_RXE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv90 = 72
b2$ = 76
x2$ = 80
d2$ = 84
r1$ = 88
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RX PROC

; 2212 : IPRINT_FUNC( ASMFMT_RX );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2213 :     int r1,x2,b2,d2;
; 2214 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2215 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 58	 mov	 DWORD PTR r1$[rsp], eax

; 2216 :     x2 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 50	 mov	 DWORD PTR x2$[rsp], eax

; 2217 :     b2 = inst[2] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 02	 imul	 rax, rax, 2
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 4c	 mov	 DWORD PTR b2$[rsp], eax

; 2218 :     d2 = (inst[2] & 0x0F) << 8 | inst[3];

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 02	 imul	 rax, rax, 2
  00090	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	c1 e0 08	 shl	 eax, 8
  000a2	b9 01 00 00 00	 mov	 ecx, 1
  000a7	48 6b c9 03	 imul	 rcx, rcx, 3
  000ab	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b3	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b7	0b c1		 or	 eax, ecx
  000b9	89 44 24 54	 mov	 DWORD PTR d2$[rsp], eax

; 2219 :     IPRINT_PRINT("%d,%d(%d,%d)",r1,d2,x2,b2)

  000bd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000c5	48 ff c0	 inc	 rax
  000c8	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000cd	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000d2	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d5	89 44 24 48	 mov	 DWORD PTR tv90[rsp], eax
  000d9	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000de	48 ff c0	 inc	 rax
  000e1	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  000e6	83 7c 24 48 00	 cmp	 DWORD PTR tv90[rsp], 0
  000eb	74 02		 je	 SHORT $LN6@iprint_ASM
  000ed	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000ef	8b 44 24 4c	 mov	 eax, DWORD PTR b2$[rsp]
  000f3	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000f7	8b 44 24 50	 mov	 eax, DWORD PTR x2$[rsp]
  000fb	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000ff	8b 44 24 54	 mov	 eax, DWORD PTR d2$[rsp]
  00103	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00107	44 8b 4c 24 58	 mov	 r9d, DWORD PTR r1$[rsp]
  0010c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198029
  00113	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00118	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00123	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  00128	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012d	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00132	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0013a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198030
  00141	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  00149	e8 00 00 00 00	 call	 sprintf
  0014e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00156	48 33 cc	 xor	 rcx, rsp
  00159	e8 00 00 00 00	 call	 __security_check_cookie
  0015e	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00165	c3		 ret	 0
iprint_ASMFMT_RX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv85 = 72
m4$ = 76
r3$ = 80
r2$ = 84
r1$ = 88
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RRF_A PROC

; 2203 : IPRINT_FUNC( ASMFMT_RRF_A );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2204 :     int r3,m4,r1,r2;
; 2205 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2206 :     r3 = inst[2] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 02	 imul	 rax, rax, 2
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 50	 mov	 DWORD PTR r3$[rsp], eax

; 2207 :     m4 = inst[2] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 4c	 mov	 DWORD PTR m4$[rsp], eax

; 2208 :     r1 = inst[3] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 03	 imul	 rax, rax, 3
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 58	 mov	 DWORD PTR r1$[rsp], eax

; 2209 :     r2 = inst[3] & 0x0F;

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 03	 imul	 rax, rax, 3
  00090	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	89 44 24 54	 mov	 DWORD PTR r2$[rsp], eax

; 2210 :     IPRINT_PRINT("%d,%d,%d,%d",r1,r2,r3,m4)

  000a3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000ab	48 ff c0	 inc	 rax
  000ae	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000b3	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000b8	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000bb	89 44 24 48	 mov	 DWORD PTR tv85[rsp], eax
  000bf	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000c4	48 ff c0	 inc	 rax
  000c7	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  000cc	83 7c 24 48 00	 cmp	 DWORD PTR tv85[rsp], 0
  000d1	74 02		 je	 SHORT $LN6@iprint_ASM
  000d3	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000d5	8b 44 24 4c	 mov	 eax, DWORD PTR m4$[rsp]
  000d9	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000dd	8b 44 24 50	 mov	 eax, DWORD PTR r3$[rsp]
  000e1	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000e5	8b 44 24 54	 mov	 eax, DWORD PTR r2$[rsp]
  000e9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000ed	44 8b 4c 24 58	 mov	 r9d, DWORD PTR r1$[rsp]
  000f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG198007
  000f9	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000fe	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00109	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  0010e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00113	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00118	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG198008
  00127	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0012f	e8 00 00 00 00	 call	 sprintf
  00134	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0013c	48 33 cc	 xor	 rcx, rsp
  0013f	e8 00 00 00 00	 call	 __security_check_cookie
  00144	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0014b	c3		 ret	 0
iprint_ASMFMT_RRF_A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv81 = 56
r3$ = 60
r2$ = 64
r1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RRR PROC

; 2195 : IPRINT_FUNC( ASMFMT_RRR );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2196 :     int r1,r2,r3;
; 2197 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2198 :     r3 = inst[2] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 02	 imul	 rax, rax, 2
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 3c	 mov	 DWORD PTR r3$[rsp], eax

; 2199 :     r1 = inst[3] >> 4;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 03	 imul	 rax, rax, 3
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 f8 04	 sar	 eax, 4
  00067	89 44 24 44	 mov	 DWORD PTR r1$[rsp], eax

; 2200 :     r2 = inst[3] & 0x0F;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 03	 imul	 rax, rax, 3
  00074	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	83 e0 0f	 and	 eax, 15
  00083	89 44 24 40	 mov	 DWORD PTR r2$[rsp], eax

; 2201 :     IPRINT_PRINT("%d,%d,%d",r1,r2,r3)

  00087	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  0008f	48 ff c0	 inc	 rax
  00092	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0009c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0009f	89 44 24 38	 mov	 DWORD PTR tv81[rsp], eax
  000a3	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000a8	48 ff c0	 inc	 rax
  000ab	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000b0	83 7c 24 38 00	 cmp	 DWORD PTR tv81[rsp], 0
  000b5	74 02		 je	 SHORT $LN6@iprint_ASM
  000b7	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000b9	8b 44 24 3c	 mov	 eax, DWORD PTR r3$[rsp]
  000bd	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000c1	8b 44 24 40	 mov	 eax, DWORD PTR r2$[rsp]
  000c5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000c9	44 8b 4c 24 44	 mov	 r9d, DWORD PTR r1$[rsp]
  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197985
  000d5	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000da	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000e5	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000ea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ef	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  000f4	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197986
  00103	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0010b	e8 00 00 00 00	 call	 sprintf
  00110	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00118	48 33 cc	 xor	 rcx, rsp
  0011b	e8 00 00 00 00	 call	 __security_check_cookie
  00120	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00127	c3		 ret	 0
iprint_ASMFMT_RRR ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv85 = 72
m4$ = 76
r2$ = 80
r3$ = 84
r1$ = 88
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RRF_RM PROC

; 2186 : IPRINT_FUNC( ASMFMT_RRF_RM );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2187 :     int r3,m4,r1,r2;
; 2188 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2189 :     r3 = inst[2] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 02	 imul	 rax, rax, 2
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 54	 mov	 DWORD PTR r3$[rsp], eax

; 2190 :     m4 = inst[2] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 4c	 mov	 DWORD PTR m4$[rsp], eax

; 2191 :     r1 = inst[3] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 03	 imul	 rax, rax, 3
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 58	 mov	 DWORD PTR r1$[rsp], eax

; 2192 :     r2 = inst[3] & 0x0F;

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 03	 imul	 rax, rax, 3
  00090	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	89 44 24 50	 mov	 DWORD PTR r2$[rsp], eax

; 2193 :     IPRINT_PRINT("%d,%d,%d,%d",r1,r3,r2,m4)

  000a3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000ab	48 ff c0	 inc	 rax
  000ae	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000b3	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000b8	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000bb	89 44 24 48	 mov	 DWORD PTR tv85[rsp], eax
  000bf	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000c4	48 ff c0	 inc	 rax
  000c7	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  000cc	83 7c 24 48 00	 cmp	 DWORD PTR tv85[rsp], 0
  000d1	74 02		 je	 SHORT $LN6@iprint_ASM
  000d3	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000d5	8b 44 24 4c	 mov	 eax, DWORD PTR m4$[rsp]
  000d9	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000dd	8b 44 24 50	 mov	 eax, DWORD PTR r2$[rsp]
  000e1	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000e5	8b 44 24 54	 mov	 eax, DWORD PTR r3$[rsp]
  000e9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000ed	44 8b 4c 24 58	 mov	 r9d, DWORD PTR r1$[rsp]
  000f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197964
  000f9	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000fe	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00109	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  0010e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00113	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00118	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197965
  00127	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0012f	e8 00 00 00 00	 call	 sprintf
  00134	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0013c	48 33 cc	 xor	 rcx, rsp
  0013f	e8 00 00 00 00	 call	 __security_check_cookie
  00144	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0014b	c3		 ret	 0
iprint_ASMFMT_RRF_RM ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 64
tv85 = 72
m4$ = 76
r2$ = 80
m3$ = 84
r1$ = 88
opers$ = 96
__$ArrayPad$ = 160
regs$ = 192
inst$ = 200
mnemonic$ = 208
prtbuf$ = 216
iprint_ASMFMT_RRF_MM PROC

; 2177 : IPRINT_FUNC( ASMFMT_RRF_MM );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2178 :     int m3,m4,r1,r2;
; 2179 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2180 :     m3 = inst[2] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 02	 imul	 rax, rax, 2
  0003c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 54	 mov	 DWORD PTR m3$[rsp], eax

; 2181 :     m4 = inst[2] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 02	 imul	 rax, rax, 2
  00058	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 4c	 mov	 DWORD PTR m4$[rsp], eax

; 2182 :     r1 = inst[3] >> 4;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 03	 imul	 rax, rax, 3
  00074	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	c1 f8 04	 sar	 eax, 4
  00083	89 44 24 58	 mov	 DWORD PTR r1$[rsp], eax

; 2183 :     r2 = inst[3] & 0x0F;

  00087	b8 01 00 00 00	 mov	 eax, 1
  0008c	48 6b c0 03	 imul	 rax, rax, 3
  00090	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00098	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0009c	83 e0 0f	 and	 eax, 15
  0009f	89 44 24 50	 mov	 DWORD PTR r2$[rsp], eax

; 2184 :     IPRINT_PRINT("%d,%d,%d,%d",r1,m3,r2,m4)

  000a3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000ab	48 ff c0	 inc	 rax
  000ae	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000b3	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000b8	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000bb	89 44 24 48	 mov	 DWORD PTR tv85[rsp], eax
  000bf	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  000c4	48 ff c0	 inc	 rax
  000c7	48 89 44 24 40	 mov	 QWORD PTR iname$[rsp], rax
  000cc	83 7c 24 48 00	 cmp	 DWORD PTR tv85[rsp], 0
  000d1	74 02		 je	 SHORT $LN6@iprint_ASM
  000d3	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000d5	8b 44 24 4c	 mov	 eax, DWORD PTR m4$[rsp]
  000d9	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000dd	8b 44 24 50	 mov	 eax, DWORD PTR r2$[rsp]
  000e1	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000e5	8b 44 24 54	 mov	 eax, DWORD PTR m3$[rsp]
  000e9	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000ed	44 8b 4c 24 58	 mov	 r9d, DWORD PTR r1$[rsp]
  000f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197942
  000f9	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000fe	48 8d 4c 24 60	 lea	 rcx, QWORD PTR opers$[rsp]
  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00109	48 8b 44 24 40	 mov	 rax, QWORD PTR iname$[rsp]
  0010e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00113	4c 8d 4c 24 60	 lea	 r9, QWORD PTR opers$[rsp]
  00118	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197943
  00127	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0012f	e8 00 00 00 00	 call	 sprintf
  00134	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0013c	48 33 cc	 xor	 rcx, rsp
  0013f	e8 00 00 00 00	 call	 __security_check_cookie
  00144	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0014b	c3		 ret	 0
iprint_ASMFMT_RRF_MM ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv81 = 56
m4$ = 60
r2$ = 64
r1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RRF_M4 PROC

; 2169 : IPRINT_FUNC( ASMFMT_RRF_M4 );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2170 :     int m4,r1,r2;
; 2171 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2172 :     m4 = inst[2] & 0x0F;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 02	 imul	 rax, rax, 2
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	83 e0 0f	 and	 eax, 15
  0004b	89 44 24 3c	 mov	 DWORD PTR m4$[rsp], eax

; 2173 :     r1 = inst[3] >> 4;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 03	 imul	 rax, rax, 3
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 f8 04	 sar	 eax, 4
  00067	89 44 24 44	 mov	 DWORD PTR r1$[rsp], eax

; 2174 :     r2 = inst[3] & 0x0F;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 03	 imul	 rax, rax, 3
  00074	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	83 e0 0f	 and	 eax, 15
  00083	89 44 24 40	 mov	 DWORD PTR r2$[rsp], eax

; 2175 :     IPRINT_PRINT("%d,%d,%d",r1,r2,m4)

  00087	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  0008f	48 ff c0	 inc	 rax
  00092	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0009c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0009f	89 44 24 38	 mov	 DWORD PTR tv81[rsp], eax
  000a3	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000a8	48 ff c0	 inc	 rax
  000ab	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000b0	83 7c 24 38 00	 cmp	 DWORD PTR tv81[rsp], 0
  000b5	74 02		 je	 SHORT $LN6@iprint_ASM
  000b7	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000b9	8b 44 24 3c	 mov	 eax, DWORD PTR m4$[rsp]
  000bd	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000c1	8b 44 24 40	 mov	 eax, DWORD PTR r2$[rsp]
  000c5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000c9	44 8b 4c 24 44	 mov	 r9d, DWORD PTR r1$[rsp]
  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197920
  000d5	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000da	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000e5	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000ea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ef	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  000f4	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197921
  00103	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0010b	e8 00 00 00 00	 call	 sprintf
  00110	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00118	48 33 cc	 xor	 rcx, rsp
  0011b	e8 00 00 00 00	 call	 __security_check_cookie
  00120	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00127	c3		 ret	 0
iprint_ASMFMT_RRF_M4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv81 = 56
m3$ = 60
r2$ = 64
r1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RRF_M3 PROC

; 2161 : IPRINT_FUNC( ASMFMT_RRF_M3 );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2162 :     int m3,r1,r2;
; 2163 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2164 :     m3 = inst[2] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 02	 imul	 rax, rax, 2
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 3c	 mov	 DWORD PTR m3$[rsp], eax

; 2165 :     r1 = inst[3] >> 4;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 03	 imul	 rax, rax, 3
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 f8 04	 sar	 eax, 4
  00067	89 44 24 44	 mov	 DWORD PTR r1$[rsp], eax

; 2166 :     r2 = inst[3] & 0x0F;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 03	 imul	 rax, rax, 3
  00074	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	83 e0 0f	 and	 eax, 15
  00083	89 44 24 40	 mov	 DWORD PTR r2$[rsp], eax

; 2167 :     IPRINT_PRINT("%d,%d,%d",r1,r2,m3)

  00087	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  0008f	48 ff c0	 inc	 rax
  00092	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0009c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0009f	89 44 24 38	 mov	 DWORD PTR tv81[rsp], eax
  000a3	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000a8	48 ff c0	 inc	 rax
  000ab	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000b0	83 7c 24 38 00	 cmp	 DWORD PTR tv81[rsp], 0
  000b5	74 02		 je	 SHORT $LN6@iprint_ASM
  000b7	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000b9	8b 44 24 3c	 mov	 eax, DWORD PTR m3$[rsp]
  000bd	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000c1	8b 44 24 40	 mov	 eax, DWORD PTR r2$[rsp]
  000c5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000c9	44 8b 4c 24 44	 mov	 r9d, DWORD PTR r1$[rsp]
  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197899
  000d5	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000da	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000e5	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000ea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ef	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  000f4	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197900
  00103	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0010b	e8 00 00 00 00	 call	 sprintf
  00110	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00118	48 33 cc	 xor	 rcx, rsp
  0011b	e8 00 00 00 00	 call	 __security_check_cookie
  00120	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00127	c3		 ret	 0
iprint_ASMFMT_RRF_M3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv81 = 56
r2$ = 60
m3$ = 64
r1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RRF_M PROC

; 2153 : IPRINT_FUNC( ASMFMT_RRF_M );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2154 :     int m3,r1,r2;
; 2155 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2156 :     m3 = inst[2] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 02	 imul	 rax, rax, 2
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 40	 mov	 DWORD PTR m3$[rsp], eax

; 2157 :     r1 = inst[3] >> 4;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 03	 imul	 rax, rax, 3
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 f8 04	 sar	 eax, 4
  00067	89 44 24 44	 mov	 DWORD PTR r1$[rsp], eax

; 2158 :     r2 = inst[3] & 0x0F;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 03	 imul	 rax, rax, 3
  00074	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	83 e0 0f	 and	 eax, 15
  00083	89 44 24 3c	 mov	 DWORD PTR r2$[rsp], eax

; 2159 :     IPRINT_PRINT("%d,%d,%d",r1,m3,r2)

  00087	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  0008f	48 ff c0	 inc	 rax
  00092	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0009c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0009f	89 44 24 38	 mov	 DWORD PTR tv81[rsp], eax
  000a3	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000a8	48 ff c0	 inc	 rax
  000ab	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000b0	83 7c 24 38 00	 cmp	 DWORD PTR tv81[rsp], 0
  000b5	74 02		 je	 SHORT $LN6@iprint_ASM
  000b7	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000b9	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  000bd	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000c1	8b 44 24 40	 mov	 eax, DWORD PTR m3$[rsp]
  000c5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000c9	44 8b 4c 24 44	 mov	 r9d, DWORD PTR r1$[rsp]
  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197878
  000d5	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000da	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000e5	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000ea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ef	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  000f4	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197879
  00103	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0010b	e8 00 00 00 00	 call	 sprintf
  00110	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00118	48 33 cc	 xor	 rcx, rsp
  0011b	e8 00 00 00 00	 call	 __security_check_cookie
  00120	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00127	c3		 ret	 0
iprint_ASMFMT_RRF_M ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv81 = 56
r2$ = 60
r3$ = 64
r1$ = 68
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RRF_R PROC

; 2145 : IPRINT_FUNC( ASMFMT_RRF_R );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2146 :     int r1,r3,r2;
; 2147 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2148 :     r1 = inst[2] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 02	 imul	 rax, rax, 2
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 44	 mov	 DWORD PTR r1$[rsp], eax

; 2149 :     r3 = inst[3] >> 4;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 03	 imul	 rax, rax, 3
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	c1 f8 04	 sar	 eax, 4
  00067	89 44 24 40	 mov	 DWORD PTR r3$[rsp], eax

; 2150 :     r2 = inst[3] & 0x0F;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	48 6b c0 03	 imul	 rax, rax, 3
  00074	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0007c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00080	83 e0 0f	 and	 eax, 15
  00083	89 44 24 3c	 mov	 DWORD PTR r2$[rsp], eax

; 2151 :     IPRINT_PRINT("%d,%d,%d",r1,r3,r2)

  00087	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  0008f	48 ff c0	 inc	 rax
  00092	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0009c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0009f	89 44 24 38	 mov	 DWORD PTR tv81[rsp], eax
  000a3	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000a8	48 ff c0	 inc	 rax
  000ab	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  000b0	83 7c 24 38 00	 cmp	 DWORD PTR tv81[rsp], 0
  000b5	74 02		 je	 SHORT $LN6@iprint_ASM
  000b7	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  000b9	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  000bd	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000c1	8b 44 24 40	 mov	 eax, DWORD PTR r3$[rsp]
  000c5	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000c9	44 8b 4c 24 44	 mov	 r9d, DWORD PTR r1$[rsp]
  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197857
  000d5	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000da	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000e5	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000ea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ef	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  000f4	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197858
  00103	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0010b	e8 00 00 00 00	 call	 sprintf
  00110	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00118	48 33 cc	 xor	 rcx, rsp
  0011b	e8 00 00 00 00	 call	 __security_check_cookie
  00120	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00127	c3		 ret	 0
iprint_ASMFMT_RRF_R ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv73 = 56
r1$ = 60
opers$ = 64
__$ArrayPad$ = 128
regs$ = 160
inst$ = 168
mnemonic$ = 176
prtbuf$ = 184
iprint_ASMFMT_RRE_R1 PROC

; 2139 : IPRINT_FUNC( ASMFMT_RRE_R1 );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2140 :     int r1;
; 2141 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2142 :     r1 = inst[3] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 03	 imul	 rax, rax, 3
  0003c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 3c	 mov	 DWORD PTR r1$[rsp], eax

; 2143 :     IPRINT_PRINT("%d",r1)

  0004f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00057	48 ff c0	 inc	 rax
  0005a	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00064	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00067	89 44 24 38	 mov	 DWORD PTR tv73[rsp], eax
  0006b	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00070	48 ff c0	 inc	 rax
  00073	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  00078	83 7c 24 38 00	 cmp	 DWORD PTR tv73[rsp], 0
  0007d	74 02		 je	 SHORT $LN6@iprint_ASM
  0007f	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00081	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR r1$[rsp]
  00086	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197836
  0008d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00092	48 8d 4c 24 40	 lea	 rcx, QWORD PTR opers$[rsp]
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0009d	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000a2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a7	4c 8d 4c 24 40	 lea	 r9, QWORD PTR opers$[rsp]
  000ac	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197837
  000bb	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  000c3	e8 00 00 00 00	 call	 sprintf
  000c8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d0	48 33 cc	 xor	 rcx, rsp
  000d3	e8 00 00 00 00	 call	 __security_check_cookie
  000d8	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  000df	c3		 ret	 0
iprint_ASMFMT_RRE_R1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv77 = 56
r2$ = 60
r1$ = 64
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RRE PROC

; 2131 : IPRINT_FUNC( ASMFMT_RRE );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2132 :     int r1, r2;
; 2133 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2134 :     r1 = inst[3] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 03	 imul	 rax, rax, 3
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 40	 mov	 DWORD PTR r1$[rsp], eax

; 2135 :     r2 = inst[3] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 03	 imul	 rax, rax, 3
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 3c	 mov	 DWORD PTR r2$[rsp], eax

; 2136 :     IPRINT_PRINT("%d,%d",r1,r2)

  0006b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00073	48 ff c0	 inc	 rax
  00076	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  0007b	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00080	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00083	89 44 24 38	 mov	 DWORD PTR tv77[rsp], eax
  00087	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0008c	48 ff c0	 inc	 rax
  0008f	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  00094	83 7c 24 38 00	 cmp	 DWORD PTR tv77[rsp], 0
  00099	74 02		 je	 SHORT $LN6@iprint_ASM
  0009b	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  0009d	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  000a1	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a5	44 8b 4c 24 40	 mov	 r9d, DWORD PTR r1$[rsp]
  000aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197817
  000b1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000b6	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000c1	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000cb	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  000d0	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197818
  000df	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  000e7	e8 00 00 00 00	 call	 sprintf
  000ec	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f4	48 33 cc	 xor	 rcx, rsp
  000f7	e8 00 00 00 00	 call	 __security_check_cookie
  000fc	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00103	c3		 ret	 0
iprint_ASMFMT_RRE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv69 = 56
opers$ = 64
__$ArrayPad$ = 128
regs$ = 160
inst$ = 168
mnemonic$ = 176
prtbuf$ = 184
iprint_ASMFMT_RR_SVC PROC

; 2127 : IPRINT_FUNC( ASMFMT_RR_SVC );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2128 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2129 :     IPRINT_PRINT("%d",inst[1])

  00033	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  0003b	48 ff c0	 inc	 rax
  0003e	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00048	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0004b	89 44 24 38	 mov	 DWORD PTR tv69[rsp], eax
  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00054	48 ff c0	 inc	 rax
  00057	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  0005c	83 7c 24 38 00	 cmp	 DWORD PTR tv69[rsp], 0
  00061	74 02		 je	 SHORT $LN6@iprint_ASM
  00063	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00065	b8 01 00 00 00	 mov	 eax, 1
  0006a	48 6b c0 01	 imul	 rax, rax, 1
  0006e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00076	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0007a	44 8b c8	 mov	 r9d, eax
  0007d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197797
  00084	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00089	48 8d 4c 24 40	 lea	 rcx, QWORD PTR opers$[rsp]
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00094	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00099	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0009e	4c 8d 4c 24 40	 lea	 r9, QWORD PTR opers$[rsp]
  000a3	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197798
  000b2	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  000ba	e8 00 00 00 00	 call	 sprintf
  000bf	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000c7	48 33 cc	 xor	 rcx, rsp
  000ca	e8 00 00 00 00	 call	 __security_check_cookie
  000cf	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  000d6	c3		 ret	 0
iprint_ASMFMT_RR_SVC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv73 = 56
r1$ = 60
opers$ = 64
__$ArrayPad$ = 128
regs$ = 160
inst$ = 168
mnemonic$ = 176
prtbuf$ = 184
iprint_ASMFMT_RR_R1 PROC

; 2121 : IPRINT_FUNC( ASMFMT_RR_R1 );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2122 :     int r1;
; 2123 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2124 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 3c	 mov	 DWORD PTR r1$[rsp], eax

; 2125 :     IPRINT_PRINT("%d",r1)

  0004f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00057	48 ff c0	 inc	 rax
  0005a	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00064	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00067	89 44 24 38	 mov	 DWORD PTR tv73[rsp], eax
  0006b	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00070	48 ff c0	 inc	 rax
  00073	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  00078	83 7c 24 38 00	 cmp	 DWORD PTR tv73[rsp], 0
  0007d	74 02		 je	 SHORT $LN6@iprint_ASM
  0007f	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  00081	44 8b 4c 24 3c	 mov	 r9d, DWORD PTR r1$[rsp]
  00086	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197779
  0008d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00092	48 8d 4c 24 40	 lea	 rcx, QWORD PTR opers$[rsp]
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  0009d	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000a2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a7	4c 8d 4c 24 40	 lea	 r9, QWORD PTR opers$[rsp]
  000ac	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197780
  000bb	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  000c3	e8 00 00 00 00	 call	 sprintf
  000c8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000d0	48 33 cc	 xor	 rcx, rsp
  000d3	e8 00 00 00 00	 call	 __security_check_cookie
  000d8	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  000df	c3		 ret	 0
iprint_ASMFMT_RR_R1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv77 = 56
r2$ = 60
r1$ = 64
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_RR PROC

; 2112 : IPRINT_FUNC( ASMFMT_RR );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2113 :     int r1, r2;
; 2114 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2115 :     r1 = inst[1] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 01	 imul	 rax, rax, 1
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 40	 mov	 DWORD PTR r1$[rsp], eax

; 2116 :     r2 = inst[1] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 01	 imul	 rax, rax, 1
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 3c	 mov	 DWORD PTR r2$[rsp], eax

; 2117 :     IPRINT_PRINT("%d,%d",r1,r2)

  0006b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00073	48 ff c0	 inc	 rax
  00076	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  0007b	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00080	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00083	89 44 24 38	 mov	 DWORD PTR tv77[rsp], eax
  00087	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0008c	48 ff c0	 inc	 rax
  0008f	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  00094	83 7c 24 38 00	 cmp	 DWORD PTR tv77[rsp], 0
  00099	74 02		 je	 SHORT $LN6@iprint_ASM
  0009b	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  0009d	8b 44 24 3c	 mov	 eax, DWORD PTR r2$[rsp]
  000a1	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a5	44 8b 4c 24 40	 mov	 r9d, DWORD PTR r1$[rsp]
  000aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197760
  000b1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000b6	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000c1	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000cb	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  000d0	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197761
  000df	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  000e7	e8 00 00 00 00	 call	 sprintf
  000ec	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f4	48 33 cc	 xor	 rcx, rsp
  000f7	e8 00 00 00 00	 call	 __security_check_cookie
  000fc	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00103	c3		 ret	 0
iprint_ASMFMT_RR ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv94 = 56
i3$ = 60
i2$ = 64
m1$ = 68
Two_S64$ = 72
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_MII_A PROC

; 2102 : IPRINT_FUNC( ASMFMT_MII_A );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 2103 :     int m1,i2,i3;
; 2104 :     const S64 Two_S64=2;

  0002d	48 c7 44 24 48
	02 00 00 00	 mov	 QWORD PTR Two_S64$[rsp], 2
$LN4@iprint_ASM:

; 2105 :     UNREFERENCED( regs );

  00036	33 c0		 xor	 eax, eax
  00038	85 c0		 test	 eax, eax
  0003a	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2106 :     m1 = inst[1] >> 4;

  0003c	b8 01 00 00 00	 mov	 eax, 1
  00041	48 6b c0 01	 imul	 rax, rax, 1
  00045	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0004d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00051	c1 f8 04	 sar	 eax, 4
  00054	89 44 24 44	 mov	 DWORD PTR m1$[rsp], eax

; 2107 :     i2 = (S32)(((U32)inst[1] << 8) | (U32)inst[2]);

  00058	b8 01 00 00 00	 mov	 eax, 1
  0005d	48 6b c0 01	 imul	 rax, rax, 1
  00061	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00069	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0006d	c1 e0 08	 shl	 eax, 8
  00070	b9 01 00 00 00	 mov	 ecx, 1
  00075	48 6b c9 02	 imul	 rcx, rcx, 2
  00079	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  00081	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00085	0b c1		 or	 eax, ecx
  00087	89 44 24 40	 mov	 DWORD PTR i2$[rsp], eax

; 2108 :     i3 = (S32)(((U32)inst[3] << 16) | ((U32)inst[4] << 8)

  0008b	b8 01 00 00 00	 mov	 eax, 1
  00090	48 6b c0 03	 imul	 rax, rax, 3
  00094	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  0009c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000a0	c1 e0 10	 shl	 eax, 16
  000a3	b9 01 00 00 00	 mov	 ecx, 1
  000a8	48 6b c9 04	 imul	 rcx, rcx, 4
  000ac	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000b4	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000b8	c1 e1 08	 shl	 ecx, 8
  000bb	0b c1		 or	 eax, ecx
  000bd	b9 01 00 00 00	 mov	 ecx, 1
  000c2	48 6b c9 05	 imul	 rcx, rcx, 5
  000c6	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR inst$[rsp]
  000ce	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  000d2	0b c1		 or	 eax, ecx
  000d4	89 44 24 3c	 mov	 DWORD PTR i3$[rsp], eax

; 2109 :                | (U32)inst[5]);
; 2110 :     IPRINT_PRINT("%d,*%+"I64_FMT"d,*%+"I64_FMT"d",m1,i2*Two_S64,i3*Two_S64)

  000d8	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  000e0	48 ff c0	 inc	 rax
  000e3	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  000e8	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000ed	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000f0	89 44 24 38	 mov	 DWORD PTR tv94[rsp], eax
  000f4	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000f9	48 ff c0	 inc	 rax
  000fc	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  00101	83 7c 24 38 00	 cmp	 DWORD PTR tv94[rsp], 0
  00106	74 02		 je	 SHORT $LN6@iprint_ASM
  00108	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  0010a	48 63 44 24 3c	 movsxd	 rax, DWORD PTR i3$[rsp]
  0010f	48 0f af 44 24
	48		 imul	 rax, QWORD PTR Two_S64$[rsp]
  00115	48 63 4c 24 40	 movsxd	 rcx, DWORD PTR i2$[rsp]
  0011a	48 0f af 4c 24
	48		 imul	 rcx, QWORD PTR Two_S64$[rsp]
  00120	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00125	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0012a	44 8b 4c 24 44	 mov	 r9d, DWORD PTR m1$[rsp]
  0012f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197740
  00136	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0013b	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00146	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0014b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00150	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  00155	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0015d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197741
  00164	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  0016c	e8 00 00 00 00	 call	 sprintf
  00171	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00179	48 33 cc	 xor	 rcx, rsp
  0017c	e8 00 00 00 00	 call	 __security_check_cookie
  00181	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00188	c3		 ret	 0
iprint_ASMFMT_MII_A ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv77 = 56
i2$ = 60
i1$ = 64
opers$ = 80
__$ArrayPad$ = 144
regs$ = 176
inst$ = 184
mnemonic$ = 192
prtbuf$ = 200
iprint_ASMFMT_IE PROC

; 2095 : IPRINT_FUNC( ASMFMT_IE );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2096 :     int i1, i2;
; 2097 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM

; 2098 :     i1 = inst[3] >> 4;

  00033	b8 01 00 00 00	 mov	 eax, 1
  00038	48 6b c0 03	 imul	 rax, rax, 3
  0003c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00044	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00048	c1 f8 04	 sar	 eax, 4
  0004b	89 44 24 40	 mov	 DWORD PTR i1$[rsp], eax

; 2099 :     i2 = inst[3] & 0x0F;

  0004f	b8 01 00 00 00	 mov	 eax, 1
  00054	48 6b c0 03	 imul	 rax, rax, 3
  00058	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	83 e0 0f	 and	 eax, 15
  00067	89 44 24 3c	 mov	 DWORD PTR i2$[rsp], eax

; 2100 :     IPRINT_PRINT("%d,%d",i1,i2)

  0006b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00073	48 ff c0	 inc	 rax
  00076	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN5@iprint_ASM:
  0007b	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  00080	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00083	89 44 24 38	 mov	 DWORD PTR tv77[rsp], eax
  00087	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0008c	48 ff c0	 inc	 rax
  0008f	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  00094	83 7c 24 38 00	 cmp	 DWORD PTR tv77[rsp], 0
  00099	74 02		 je	 SHORT $LN6@iprint_ASM
  0009b	eb de		 jmp	 SHORT $LN5@iprint_ASM
$LN6@iprint_ASM:
  0009d	8b 44 24 3c	 mov	 eax, DWORD PTR i2$[rsp]
  000a1	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000a5	44 8b 4c 24 40	 mov	 r9d, DWORD PTR i1$[rsp]
  000aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197711
  000b1	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  000b6	48 8d 4c 24 50	 lea	 rcx, QWORD PTR opers$[rsp]
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  000c1	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  000c6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000cb	4c 8d 4c 24 50	 lea	 r9, QWORD PTR opers$[rsp]
  000d0	4c 8b 84 24 c0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197712
  000df	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  000e7	e8 00 00 00 00	 call	 sprintf
  000ec	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000f4	48 33 cc	 xor	 rcx, rsp
  000f7	e8 00 00 00 00	 call	 __security_check_cookie
  000fc	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00103	c3		 ret	 0
iprint_ASMFMT_IE ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv70 = 56
opers$ = 64
__$ArrayPad$ = 128
regs$ = 160
inst$ = 168
mnemonic$ = 176
prtbuf$ = 184
iprint_ASMFMT_E PROC

; 2090 : IPRINT_FUNC( ASMFMT_E );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2091 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM
$LN7@iprint_ASM:

; 2092 :     UNREFERENCED(inst);

  00033	33 c0		 xor	 eax, eax
  00035	85 c0		 test	 eax, eax
  00037	75 fa		 jne	 SHORT $LN7@iprint_ASM

; 2093 :     IPRINT_PRINT("%c",',')

  00039	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00041	48 ff c0	 inc	 rax
  00044	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN8@iprint_ASM:
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0004e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00051	89 44 24 38	 mov	 DWORD PTR tv70[rsp], eax
  00055	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0005a	48 ff c0	 inc	 rax
  0005d	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  00062	83 7c 24 38 00	 cmp	 DWORD PTR tv70[rsp], 0
  00067	74 02		 je	 SHORT $LN9@iprint_ASM
  00069	eb de		 jmp	 SHORT $LN8@iprint_ASM
$LN9@iprint_ASM:
  0006b	41 b9 2c 00 00
	00		 mov	 r9d, 44			; 0000002cH
  00071	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197691
  00078	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0007d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR opers$[rsp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0008d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00092	4c 8d 4c 24 40	 lea	 r9, QWORD PTR opers$[rsp]
  00097	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197692
  000a6	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  000ae	e8 00 00 00 00	 call	 sprintf
  000b3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000bb	48 33 cc	 xor	 rcx, rsp
  000be	e8 00 00 00 00	 call	 __security_check_cookie
  000c3	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  000ca	c3		 ret	 0
iprint_ASMFMT_E ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iname$ = 48
tv70 = 56
opers$ = 64
__$ArrayPad$ = 128
regs$ = 160
inst$ = 168
mnemonic$ = 176
prtbuf$ = 184
iprint_ASMFMT_none PROC

; 2085 : IPRINT_FUNC( ASMFMT_none );

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax
$LN4@iprint_ASM:

; 2086 :     UNREFERENCED( regs );

  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 fa		 jne	 SHORT $LN4@iprint_ASM
$LN7@iprint_ASM:

; 2087 :     UNREFERENCED(inst);

  00033	33 c0		 xor	 eax, eax
  00035	85 c0		 test	 eax, eax
  00037	75 fa		 jne	 SHORT $LN7@iprint_ASM

; 2088 :     IPRINT_PRINT("%c",',')

  00039	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR mnemonic$[rsp]
  00041	48 ff c0	 inc	 rax
  00044	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
$LN8@iprint_ASM:
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0004e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00051	89 44 24 38	 mov	 DWORD PTR tv70[rsp], eax
  00055	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0005a	48 ff c0	 inc	 rax
  0005d	48 89 44 24 30	 mov	 QWORD PTR iname$[rsp], rax
  00062	83 7c 24 38 00	 cmp	 DWORD PTR tv70[rsp], 0
  00067	74 02		 je	 SHORT $LN9@iprint_ASM
  00069	eb de		 jmp	 SHORT $LN8@iprint_ASM
$LN9@iprint_ASM:
  0006b	41 b9 2c 00 00
	00		 mov	 r9d, 44			; 0000002cH
  00071	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG197670
  00078	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0007d	48 8d 4c 24 40	 lea	 rcx, QWORD PTR opers$[rsp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR iname$[rsp]
  0008d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00092	4c 8d 4c 24 40	 lea	 r9, QWORD PTR opers$[rsp]
  00097	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR mnemonic$[rsp]
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG197671
  000a6	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR prtbuf$[rsp]
  000ae	e8 00 00 00 00	 call	 sprintf
  000b3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000bb	48 33 cc	 xor	 rcx, rsp
  000be	e8 00 00 00 00	 call	 __security_check_cookie
  000c3	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  000ca	c3		 ret	 0
iprint_ASMFMT_none ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv73 = 32
tv74 = 36
tv86 = 40
tv87 = 44
tv130 = 48
tv131 = 52
inst$ = 80
regs$ = 88
operation_exception PROC

; 1443 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@operation_:

; 1444 :     INST_UPDATE_PSW( regs, ILC( inst[0] ), ILC( inst[0] ));

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 00	 imul	 rax, rax, 0
  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	83 f8 40	 cmp	 eax, 64			; 00000040H
  00023	7d 0a		 jge	 SHORT $LN9@operation_
  00025	c7 44 24 24 02
	00 00 00	 mov	 DWORD PTR tv74[rsp], 2
  0002d	eb 33		 jmp	 SHORT $LN10@operation_
$LN9@operation_:
  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	48 6b c0 00	 imul	 rax, rax, 0
  00038	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0003d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00041	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  00046	7d 0a		 jge	 SHORT $LN7@operation_
  00048	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR tv73[rsp], 4
  00050	eb 08		 jmp	 SHORT $LN8@operation_
$LN7@operation_:
  00052	c7 44 24 20 06
	00 00 00	 mov	 DWORD PTR tv73[rsp], 6
$LN8@operation_:
  0005a	8b 44 24 20	 mov	 eax, DWORD PTR tv73[rsp]
  0005e	89 44 24 24	 mov	 DWORD PTR tv74[rsp], eax
$LN10@operation_:
  00062	48 63 44 24 24	 movsxd	 rax, DWORD PTR tv74[rsp]
  00067	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0006c	48 03 41 68	 add	 rax, QWORD PTR [rcx+104]
  00070	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00075	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	48 6b c0 00	 imul	 rax, rax, 0
  00082	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00087	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0008b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0008e	7d 0a		 jge	 SHORT $LN13@operation_
  00090	c7 44 24 2c 02
	00 00 00	 mov	 DWORD PTR tv87[rsp], 2
  00098	eb 33		 jmp	 SHORT $LN14@operation_
$LN13@operation_:
  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	48 6b c0 00	 imul	 rax, rax, 0
  000a3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  000a8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ac	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  000b1	7d 0a		 jge	 SHORT $LN11@operation_
  000b3	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR tv86[rsp], 4
  000bb	eb 08		 jmp	 SHORT $LN12@operation_
$LN11@operation_:
  000bd	c7 44 24 28 06
	00 00 00	 mov	 DWORD PTR tv86[rsp], 6
$LN12@operation_:
  000c5	8b 44 24 28	 mov	 eax, DWORD PTR tv86[rsp]
  000c9	89 44 24 2c	 mov	 DWORD PTR tv87[rsp], eax
$LN14@operation_:
  000cd	83 7c 24 2c 00	 cmp	 DWORD PTR tv87[rsp], 0
  000d2	74 64		 je	 SHORT $LN5@operation_
  000d4	b8 01 00 00 00	 mov	 eax, 1
  000d9	48 6b c0 00	 imul	 rax, rax, 0
  000dd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  000e2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000e6	83 f8 40	 cmp	 eax, 64			; 00000040H
  000e9	7d 0a		 jge	 SHORT $LN17@operation_
  000eb	c7 44 24 34 02
	00 00 00	 mov	 DWORD PTR tv131[rsp], 2
  000f3	eb 33		 jmp	 SHORT $LN18@operation_
$LN17@operation_:
  000f5	b8 01 00 00 00	 mov	 eax, 1
  000fa	48 6b c0 00	 imul	 rax, rax, 0
  000fe	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00103	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00107	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  0010c	7d 0a		 jge	 SHORT $LN15@operation_
  0010e	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR tv130[rsp], 4
  00116	eb 08		 jmp	 SHORT $LN16@operation_
$LN15@operation_:
  00118	c7 44 24 30 06
	00 00 00	 mov	 DWORD PTR tv130[rsp], 6
$LN16@operation_:
  00120	8b 44 24 30	 mov	 eax, DWORD PTR tv130[rsp]
  00124	89 44 24 34	 mov	 DWORD PTR tv131[rsp], eax
$LN18@operation_:
  00128	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0012d	0f b6 4c 24 34	 movzx	 ecx, BYTE PTR tv131[rsp]
  00132	88 88 9a 00 00
	00		 mov	 BYTE PTR [rax+154], cl
$LN5@operation_:
  00138	33 c0		 xor	 eax, eax
  0013a	85 c0		 test	 eax, eax
  0013c	0f 85 cc fe ff
	ff		 jne	 $LN4@operation_

; 1445 :     regs->program_interrupt( regs, PGM_OPERATION_EXCEPTION );

  00142	ba 01 00 00 00	 mov	 edx, 1
  00147	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0014c	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00151	ff 90 20 0d 00
	00		 call	 QWORD PTR [rax+3360]

; 1446 : }

  00157	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0015b	c3		 ret	 0
operation_exception ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
s370_execute_opcode_ed________xx PROC

; 1420 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1421 :   regs->ARCH_DEP( runtime_opcode_ed________xx )[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 f0 af
	00 00		 mov	 rcx, QWORD PTR [rcx+45040]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1422 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
s370_execute_opcode_ed________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
s370_execute_opcode_ec________xx PROC

; 1412 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1413 :   regs->ARCH_DEP( runtime_opcode_ec________xx )[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 e8 af
	00 00		 mov	 rcx, QWORD PTR [rcx+45032]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1414 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
s370_execute_opcode_ec________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
s370_execute_opcode_eb________xx PROC

; 1404 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1405 :   regs->ARCH_DEP( runtime_opcode_eb________xx )[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 e0 af
	00 00		 mov	 rcx, QWORD PTR [rcx+45024]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1406 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
s370_execute_opcode_eb________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
s370_execute_opcode_e7________xx PROC

; 1396 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1397 :     regs->ARCH_DEP(runtime_opcode_e7________xx)[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 d8 af
	00 00		 mov	 rcx, QWORD PTR [rcx+45016]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1398 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
s370_execute_opcode_e7________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv72 = 32
inst$ = 64
regs$ = 72
s370_execute_opcode_e3________xx PROC

; 1378 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1379 :   regs->ARCH_DEP( runtime_opcode_e3________xx )[inst[5]](inst, regs);

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 05	 imul	 rax, rax, 5
  00017	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	48 8b 4c 24 48	 mov	 rcx, QWORD PTR regs$[rsp]
  00025	48 8b 89 d0 af
	00 00		 mov	 rcx, QWORD PTR [rcx+45008]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00031	48 8b 54 24 48	 mov	 rdx, QWORD PTR regs$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR inst$[rsp]
  0003b	4c 8b 44 24 20	 mov	 r8, QWORD PTR tv72[rsp]
  00040	41 ff 14 c0	 call	 QWORD PTR [r8+rax*8]

; 1380 : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
s370_execute_opcode_e3________xx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_extract_and_set_storage_attributes PROC

; 1329 :  UNDEF_INST( extract_and_set_storage_attributes )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_extract_and_set_storage_attributes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_set_vector_summary PROC

; 1321 :  UNDEF_INST( set_vector_summary )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_set_vector_summary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_branch_in_subspace_group PROC

; 1317 :  UNDEF_INST( branch_in_subspace_group )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_branch_in_subspace_group ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_system_information PROC

; 1306 :  UNDEF_INST( store_system_information )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_system_information ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_cpu_counter_multiple PROC

; 1302 :  UNDEF_INST( store_cpu_counter_multiple )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_cpu_counter_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_set_address_space_control_fast PROC

; 1290 :  UNDEF_INST( set_address_space_control_fast )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_set_address_space_control_fast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_service_call PROC

; 1286 :  UNDEF_INST( service_call )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_service_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_test_vmr PROC

; 1270 :  UNDEF_INST( v_test_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_test_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_store_vmr PROC

; 1269 :  UNDEF_INST( v_store_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_store_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_store_vector_parameters PROC

; 1268 :  UNDEF_INST( v_store_vector_parameters )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_store_vector_parameters ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_set_vector_mask_mode PROC

; 1267 :  UNDEF_INST( v_set_vector_mask_mode )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_set_vector_mask_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_save_vsr PROC

; 1266 :  UNDEF_INST( v_save_vsr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_save_vsr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_save_vr PROC

; 1265 :  UNDEF_INST( v_save_vr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_save_vr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_save_vmr PROC

; 1264 :  UNDEF_INST( v_save_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_save_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_save_vac PROC

; 1263 :  UNDEF_INST( v_save_vac )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_save_vac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_save_changed_vr PROC

; 1262 :  UNDEF_INST( v_save_changed_vr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_save_changed_vr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_restore_vsr PROC

; 1261 :  UNDEF_INST( v_restore_vsr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_restore_vsr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_restore_vr PROC

; 1260 :  UNDEF_INST( v_restore_vr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_restore_vr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_restore_vmr PROC

; 1259 :  UNDEF_INST( v_restore_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_restore_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_restore_vac PROC

; 1258 :  UNDEF_INST( v_restore_vac )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_restore_vac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_or_to_vmr PROC

; 1257 :  UNDEF_INST( v_or_to_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_or_to_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_load_vmr_complement PROC

; 1256 :  UNDEF_INST( v_load_vmr_complement )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_load_vmr_complement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_load_vmr PROC

; 1255 :  UNDEF_INST( v_load_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_load_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_load_vix_from_address PROC

; 1254 :  UNDEF_INST( v_load_vix_from_address )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_load_vix_from_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_load_vct_from_address PROC

; 1253 :  UNDEF_INST( v_load_vct_from_address )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_load_vct_from_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_extract_vector_modes PROC

; 1252 :  UNDEF_INST( v_extract_vector_modes )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_extract_vector_modes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_extract_vct PROC

; 1251 :  UNDEF_INST( v_extract_vct )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_extract_vct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_exclusive_or_to_vmr PROC

; 1250 :  UNDEF_INST( v_exclusive_or_to_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_exclusive_or_to_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_count_ones_in_vmr PROC

; 1249 :  UNDEF_INST( v_count_ones_in_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_count_ones_in_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_count_left_zeros_in_vmr PROC

; 1248 :  UNDEF_INST( v_count_left_zeros_in_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_count_left_zeros_in_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_complement_vmr PROC

; 1247 :  UNDEF_INST( v_complement_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_complement_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_clear_vr PROC

; 1246 :  UNDEF_INST( v_clear_vr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_clear_vr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_v_and_to_vmr PROC

; 1245 :  UNDEF_INST( v_and_to_vmr )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_v_and_to_vmr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_resume_program PROC

; 1233 :  UNDEF_INST( resume_program )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_resume_program ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_set_zone_parameter PROC

; 1229 :  UNDEF_INST( set_zone_parameter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_set_zone_parameter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_zone_parameter PROC

; 1228 :  UNDEF_INST( store_zone_parameter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_zone_parameter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_signal_adapter PROC

; 1224 :  UNDEF_INST( signal_adapter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_signal_adapter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_extract_queue_buffer_state PROC

; 1220 :  UNDEF_INST( extract_queue_buffer_state )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_extract_queue_buffer_state ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_set_queue_buffer_state PROC

; 1219 :  UNDEF_INST( set_queue_buffer_state )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_set_queue_buffer_state ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_perform_locked_operation PROC

; 1215 :  UNDEF_INST( perform_locked_operation )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_perform_locked_operation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_invalidate_expanded_storage_block_entry PROC

; 1074 :  UNDEF_INST( invalidate_expanded_storage_block_entry )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_invalidate_expanded_storage_block_entry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_move_page PROC

; 1073 :  UNDEF_INST( move_page )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_move_page ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_lock_page PROC

; 1069 :  UNDEF_INST( lock_page )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_lock_page ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_trap4 PROC

; 1065 :  UNDEF_INST( trap4 )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_trap4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_trap2 PROC

; 1064 :  UNDEF_INST( trap2 )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_trap2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_program_return PROC

; 1063 :  UNDEF_INST( program_return )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_program_return ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_modify_stacked_state PROC

; 1062 :  UNDEF_INST( modify_stacked_state )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_modify_stacked_state ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_extract_stacked_state PROC

; 1061 :  UNDEF_INST( extract_stacked_state )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_extract_stacked_state ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_extract_stacked_registers PROC

; 1060 :  UNDEF_INST( extract_stacked_registers )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_extract_stacked_registers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_branch_and_stack PROC

; 1059 :  UNDEF_INST( branch_and_stack )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_branch_and_stack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_test_pending_zone_interrupt PROC

; 1055 :  UNDEF_INST( test_pending_zone_interrupt )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_test_pending_zone_interrupt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_start_interpretive_execution PROC

; 1051 :  UNDEF_INST( start_interpretive_execution )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_start_interpretive_execution ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_zero_float_short_reg PROC

; 947  :  UNDEF_INST( load_zero_float_short_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_zero_float_short_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_zero_float_long_reg PROC

; 946  :  UNDEF_INST( load_zero_float_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_zero_float_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_zero_float_ext_reg PROC

; 945  :  UNDEF_INST( load_zero_float_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_zero_float_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_float_ext_reg PROC

; 944  :  UNDEF_INST( load_float_ext_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_float_ext_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_convert_float_long_to_bfp_short_reg PROC

; 943  :  UNDEF_INST( convert_float_long_to_bfp_short_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_convert_float_long_to_bfp_short_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_convert_float_long_to_bfp_long_reg PROC

; 942  :  UNDEF_INST( convert_float_long_to_bfp_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_convert_float_long_to_bfp_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_convert_bfp_short_to_float_long_reg PROC

; 941  :  UNDEF_INST( convert_bfp_short_to_float_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_convert_bfp_short_to_float_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_convert_bfp_long_to_float_long_reg PROC

; 940  :  UNDEF_INST( convert_bfp_long_to_float_long_reg )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_convert_bfp_long_to_float_long_reg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_clock_extended PROC

; 930  :  UNDEF_INST( store_clock_extended )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_clock_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_set_clock_programmable_field PROC

; 929  :  UNDEF_INST( set_clock_programmable_field )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_set_clock_programmable_field ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_page_out PROC

; 919  :  UNDEF_INST( page_out )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_page_out ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_page_in PROC

; 918  :  UNDEF_INST( page_in )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_page_in ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_page_table_entry_address PROC

; 869  :  UNDEF_INST( load_page_table_entry_address )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_page_table_entry_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_channel_subsystem_call PROC

; 856  :  UNDEF_INST( channel_subsystem_call )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_channel_subsystem_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_test_subchannel PROC

; 843  :  UNDEF_INST( test_subchannel )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_test_subchannel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_test_pending_interruption PROC

; 842  :  UNDEF_INST( test_pending_interruption )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_test_pending_interruption ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_subchannel PROC

; 841  :  UNDEF_INST( store_subchannel )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_subchannel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_channel_report_word PROC

; 840  :  UNDEF_INST( store_channel_report_word )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_channel_report_word ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_channel_path_status PROC

; 839  :  UNDEF_INST( store_channel_path_status )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_channel_path_status ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_start_subchannel PROC

; 838  :  UNDEF_INST( start_subchannel )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_start_subchannel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_set_channel_monitor PROC

; 837  :  UNDEF_INST( set_channel_monitor )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_set_channel_monitor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_set_address_limit PROC

; 836  :  UNDEF_INST( set_address_limit )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_set_address_limit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_resume_subchannel PROC

; 835  :  UNDEF_INST( resume_subchannel )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_resume_subchannel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_reset_channel_path PROC

; 834  :  UNDEF_INST( reset_channel_path )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_reset_channel_path ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_modify_subchannel PROC

; 833  :  UNDEF_INST( modify_subchannel )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_modify_subchannel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_halt_subchannel PROC

; 832  :  UNDEF_INST( halt_subchannel )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_halt_subchannel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_clear_subchannel PROC

; 831  :  UNDEF_INST( clear_subchannel )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_clear_subchannel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_cancel_subchannel PROC

; 827  :  UNDEF_INST( cancel_subchannel )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_cancel_subchannel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_compare_and_swap_and_purge PROC

; 823  :  UNDEF_INST( compare_and_swap_and_purge )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_compare_and_swap_and_purge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_branch_and_set_authority PROC

; 819  :  UNDEF_INST( branch_and_set_authority )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_branch_and_set_authority ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_test_access PROC

; 705  :  UNDEF_INST( test_access )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_test_access ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_access_multiple PROC

; 704  :  UNDEF_INST( store_access_multiple )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_access_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_set_access_register PROC

; 703  :  UNDEF_INST( set_access_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_set_access_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_purge_accesslist_lookaside_buffer PROC

; 702  :  UNDEF_INST( purge_accesslist_lookaside_buffer )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_purge_accesslist_lookaside_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_access_multiple PROC

; 701  :  UNDEF_INST( load_access_multiple )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_access_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_extract_access_register PROC

; 700  :  UNDEF_INST( extract_access_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_extract_access_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_copy_access PROC

; 699  :  UNDEF_INST( copy_access )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_copy_access ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_program_status_word_extended_y PROC

; 691  :  UNDEF_INST( load_program_status_word_extended_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_program_status_word_extended_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_bear PROC

; 690  :  UNDEF_INST( store_bear )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_bear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_bear PROC

; 689  :  UNDEF_INST( load_bear )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_bear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_insert_reference_bits_multiple PROC

; 685  :  UNDEF_INST( insert_reference_bits_multiple )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_insert_reference_bits_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_vector_store_multiple PROC

; 681  :      UNDEF_INST(vector_store_multiple)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_vector_store_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_vector_load_multiple PROC

; 680  :      UNDEF_INST(vector_load_multiple)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_vector_load_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_vector_store PROC

; 679  :      UNDEF_INST(vector_store)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_vector_store ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_vector_load PROC

; 678  :      UNDEF_INST(vector_load)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_vector_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_convert_dfp_ext_to_packed PROC

; 674  :  UNDEF_INST(convert_dfp_ext_to_packed)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_convert_dfp_ext_to_packed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_convert_dfp_long_to_packed PROC

; 673  :  UNDEF_INST(convert_dfp_long_to_packed)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_convert_dfp_long_to_packed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_convert_packed_to_dfp_ext PROC

; 672  :  UNDEF_INST(convert_packed_to_dfp_ext)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_convert_packed_to_dfp_ext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_convert_packed_to_dfp_long PROC

; 671  :  UNDEF_INST(convert_packed_to_dfp_long)

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_convert_packed_to_dfp_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_hypervisor_information PROC

; 656  :  UNDEF_INST( store_hypervisor_information )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_hypervisor_information ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_extract_transaction_nesting_depth PROC

; 652  :   UNDEF_INST( extract_transaction_nesting_depth )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_extract_transaction_nesting_depth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_nontransactional_store PROC

; 651  :   UNDEF_INST( nontransactional_store )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_nontransactional_store ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_transaction_end PROC

; 650  :   UNDEF_INST( transaction_end )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_transaction_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_transaction_abort PROC

; 649  :   UNDEF_INST( transaction_abort )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_transaction_abort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_transaction_begin PROC

; 648  :   UNDEF_INST( transaction_begin )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_transaction_begin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_query_sampling_information PROC

; 644  :  UNDEF_INST( query_sampling_information )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_query_sampling_information ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_sampling_controls PROC

; 643  :  UNDEF_INST( load_sampling_controls )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_sampling_controls ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_set_peripheral_counter PROC

; 639  :  UNDEF_INST( set_peripheral_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_set_peripheral_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_set_cpu_counter PROC

; 638  :  UNDEF_INST( set_cpu_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_set_cpu_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_query_counter_information PROC

; 637  :  UNDEF_INST( query_counter_information )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_query_counter_information ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_peripheral_counter_set_controls PROC

; 636  :  UNDEF_INST( load_peripheral_counter_set_controls )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_peripheral_counter_set_controls ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_cpu_counter_set_controls PROC

; 635  :  UNDEF_INST( load_cpu_counter_set_controls )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_cpu_counter_set_controls ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_extract_peripheral_counter PROC

; 634  :  UNDEF_INST( extract_peripheral_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_extract_peripheral_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_extract_cpu_counter PROC

; 633  :  UNDEF_INST( extract_cpu_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_extract_cpu_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_extract_coprocessor_group_address PROC

; 632  :  UNDEF_INST( extract_coprocessor_group_address )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_extract_coprocessor_group_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_reset_reference_bits_multiple PROC

; 628  :  UNDEF_INST( reset_reference_bits_multiple )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_reset_reference_bits_multiple ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_move_right_to_left PROC

; 624  :  UNDEF_INST( move_right_to_left )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_move_right_to_left ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_select_fullword_high_register PROC

; 623  :  UNDEF_INST( select_fullword_high_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_select_fullword_high_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_select_register_long PROC

; 622  :  UNDEF_INST( select_register_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_select_register_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_select_register PROC

; 621  :  UNDEF_INST( select_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_select_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_or_register_long_with_complement PROC

; 620  :  UNDEF_INST( or_register_long_with_complement )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_or_register_long_with_complement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_or_register_with_complement PROC

; 619  :  UNDEF_INST( or_register_with_complement )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_or_register_with_complement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_nor_register_long PROC

; 618  :  UNDEF_INST( nor_register_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_nor_register_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_nor_register PROC

; 617  :  UNDEF_INST( nor_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_nor_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_not_xor_register_long PROC

; 616  :  UNDEF_INST( not_xor_register_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_not_xor_register_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_not_xor_register PROC

; 615  :  UNDEF_INST( not_xor_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_not_xor_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_nand_register_long PROC

; 614  :  UNDEF_INST( nand_register_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_nand_register_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_nand_register PROC

; 613  :  UNDEF_INST( nand_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_nand_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_and_register_long_with_complement PROC

; 612  :  UNDEF_INST( and_register_long_with_complement )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_and_register_long_with_complement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_and_register_with_complement PROC

; 611  :  UNDEF_INST( and_register_with_complement )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_and_register_with_complement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_multiply_single_long_cc PROC

; 607  :  UNDEF_INST( multiply_single_long_cc )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_multiply_single_long_cc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_multiply_single_long_register_cc PROC

; 606  :  UNDEF_INST( multiply_single_long_register_cc )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_multiply_single_long_register_cc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_multiply_single_cc PROC

; 605  :  UNDEF_INST( multiply_single_cc )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_multiply_single_cc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_multiply_single_register_cc PROC

; 604  :  UNDEF_INST( multiply_single_register_cc )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_multiply_single_register_cc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_multiply_long_halfword PROC

; 603  :  UNDEF_INST( multiply_long_halfword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_multiply_long_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_multiply_long PROC

; 602  :  UNDEF_INST( multiply_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_multiply_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_multiply_long_register PROC

; 601  :  UNDEF_INST( multiply_long_register )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_multiply_long_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_subtract_long_halfword PROC

; 600  :  UNDEF_INST( subtract_long_halfword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_subtract_long_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_add_long_halfword PROC

; 599  :  UNDEF_INST( add_long_halfword )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_add_long_halfword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_branch_indirect_on_condition PROC

; 598  :  UNDEF_INST( branch_indirect_on_condition )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_branch_indirect_on_condition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_and_zero_rightmost_byte PROC

; 594  :  UNDEF_INST( load_and_zero_rightmost_byte );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_and_zero_rightmost_byte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_logical_and_zero_rightmost_byte PROC

; 593  :  UNDEF_INST( load_logical_and_zero_rightmost_byte );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_logical_and_zero_rightmost_byte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_and_zero_rightmost_byte_grande PROC

; 592  :  UNDEF_INST( load_and_zero_rightmost_byte_grande );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_and_zero_rightmost_byte_grande ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_high_on_condition PROC

; 588  :  UNDEF_INST( store_high_on_condition );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_high_on_condition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_high_on_condition_register PROC

; 587  :  UNDEF_INST( load_high_on_condition_register );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_high_on_condition_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_high_on_condition PROC

; 586  :  UNDEF_INST( load_high_on_condition );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_high_on_condition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_halfword_immediate_on_condition_grande PROC

; 585  :  UNDEF_INST( load_halfword_immediate_on_condition_grande );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_halfword_immediate_on_condition_grande ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_halfword_immediate_on_condition PROC

; 584  :  UNDEF_INST( load_halfword_immediate_on_condition );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_halfword_immediate_on_condition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_halfword_high_immediate_on_condition PROC

; 583  :  UNDEF_INST( load_halfword_high_immediate_on_condition );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_halfword_high_immediate_on_condition ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_transaction_begin_constrained PROC

; 579  :  UNDEF_INST( transaction_begin_constrained )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_transaction_begin_constrained ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_perform_processor_assist PROC

; 575  :  UNDEF_INST( perform_processor_assist );

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_perform_processor_assist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_rotate_then_insert_selected_bits_long_reg_n PROC

; 571  :  UNDEF_INST( rotate_then_insert_selected_bits_long_reg_n )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_rotate_then_insert_selected_bits_long_reg_n ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_compare_logical_and_trap_long PROC

; 570  :  UNDEF_INST( compare_logical_and_trap_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_compare_logical_and_trap_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_compare_logical_and_trap PROC

; 569  :  UNDEF_INST( compare_logical_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_compare_logical_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_logical_long_thirtyone_and_trap PROC

; 565  :  UNDEF_INST( load_logical_long_thirtyone_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_logical_long_thirtyone_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_logical_long_fullword_and_trap PROC

; 564  :  UNDEF_INST( load_logical_long_fullword_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_logical_long_fullword_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_fullword_high_and_trap PROC

; 563  :  UNDEF_INST( load_fullword_high_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_fullword_high_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_long_and_trap PROC

; 562  :  UNDEF_INST( load_long_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_long_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_and_trap PROC

; 561  :  UNDEF_INST( load_and_trap )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_and_trap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_next_instruction_access_intent PROC

; 557  :  UNDEF_INST( next_instruction_access_intent )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_next_instruction_access_intent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_branch_prediction_relative_preload PROC

; 556  :  UNDEF_INST( branch_prediction_relative_preload )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_branch_prediction_relative_preload ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_branch_prediction_preload PROC

; 555  :  UNDEF_INST( branch_prediction_preload )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_branch_prediction_preload ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_convert_dfp_ext_to_zoned PROC

; 551  :  UNDEF_INST( convert_dfp_ext_to_zoned )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_convert_dfp_ext_to_zoned ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_convert_dfp_long_to_zoned PROC

; 550  :  UNDEF_INST( convert_dfp_long_to_zoned )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_convert_dfp_long_to_zoned ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_convert_zoned_to_dfp_ext PROC

; 549  :  UNDEF_INST( convert_zoned_to_dfp_ext )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_convert_zoned_to_dfp_ext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_convert_zoned_to_dfp_long PROC

; 548  :  UNDEF_INST( convert_zoned_to_dfp_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_convert_zoned_to_dfp_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_perform_floating_point_operation PROC

; 458  :  UNDEF_INST( perform_floating_point_operation )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_perform_floating_point_operation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_program_parameter PROC

; 372  :  UNDEF_INST( load_program_parameter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_program_parameter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_extract_cpu_time PROC

; 257  :  UNDEF_INST( extract_cpu_time )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_extract_cpu_time ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_perform_timing_facility_function PROC

; 253  :  UNDEF_INST( perform_timing_facility_function )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_perform_timing_facility_function ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_move_with_optional_specifications PROC

; 249  :  UNDEF_INST( move_with_optional_specifications )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_move_with_optional_specifications ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_clock_fast PROC

; 238  :  UNDEF_INST( store_clock_fast )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_clock_fast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_access_multiple_y PROC

; 155  :  UNDEF_INST( store_access_multiple_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_access_multiple_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_load_access_multiple_y PROC

; 154  :  UNDEF_INST( load_access_multiple_y )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_load_access_multiple_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_perform_topology_function PROC

; 87   :  UNDEF_INST( perform_topology_function )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_perform_topology_function ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_perform_frame_management_function PROC

; 83   :  UNDEF_INST( perform_frame_management_function )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_perform_frame_management_function ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_store_facility_list_extended PROC

; 79   :  UNDEF_INST( store_facility_list_extended )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_store_facility_list_extended ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_set_secondary_asn_with_instance PROC

; 75   :  UNDEF_INST( set_secondary_asn_with_instance )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_set_secondary_asn_with_instance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_program_transfer_with_instance PROC

; 74   :  UNDEF_INST( program_transfer_with_instance )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_program_transfer_with_instance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_extract_secondary_asn_and_instance PROC

; 73   :  UNDEF_INST( extract_secondary_asn_and_instance )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_extract_secondary_asn_and_instance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_extract_primary_asn_and_instance PROC

; 72   :  UNDEF_INST( extract_primary_asn_and_instance )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_extract_primary_asn_and_instance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_invalidate_dat_table_entry PROC

; 68   :  UNDEF_INST( invalidate_dat_table_entry )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_invalidate_dat_table_entry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_compare_and_swap_and_purge_long PROC

; 67   :  UNDEF_INST( compare_and_swap_and_purge_long )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_compare_and_swap_and_purge_long ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv64 = 32
arch$ = 64
inst$ = 72
opcode1$ = 80
opcode2$ = 88
the_real_replace_opcode PROC

; 7206 : {

$LN32:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 7207 :   switch(opcode1)

  00017	8b 44 24 50	 mov	 eax, DWORD PTR opcode1$[rsp]
  0001b	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  0001f	8b 44 24 20	 mov	 eax, DWORD PTR tv64[rsp]
  00023	ff c8		 dec	 eax
  00025	89 44 24 20	 mov	 DWORD PTR tv64[rsp], eax
  00029	81 7c 24 20 ec
	00 00 00	 cmp	 DWORD PTR tv64[rsp], 236 ; 000000ecH
  00031	0f 87 d0 00 00
	00		 ja	 $LN28@the_real_r
  00037	48 63 44 24 20	 movsxd	 rax, DWORD PTR tv64[rsp]
  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00043	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN30@the_real_r[rcx+rax]
  0004b	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN31@the_real_r[rcx+rax*4]
  00052	48 03 c1	 add	 rax, rcx
  00055	ff e0		 jmp	 rax
$LN4@the_real_r:
$LN5@the_real_r:
$LN6@the_real_r:
$LN7@the_real_r:
$LN8@the_real_r:
$LN9@the_real_r:
$LN10@the_real_r:
$LN11@the_real_r:
$LN12@the_real_r:

; 7208 :   {
; 7209 :     case 0x01:
; 7210 :     case 0xa4:
; 7211 :     case 0xa6:
; 7212 :     case 0xb2:
; 7213 :     case 0xb3:
; 7214 :     case 0xb9:
; 7215 :     case 0xe4:
; 7216 :     case 0xe5:
; 7217 :     case 0xe6:
; 7218 : 
; 7219 :     {
; 7220 :       return(replace_opcode_xxxx(arch, inst, opcode1, opcode2));

  00057	44 8b 4c 24 58	 mov	 r9d, DWORD PTR opcode2$[rsp]
  0005c	44 8b 44 24 50	 mov	 r8d, DWORD PTR opcode1$[rsp]
  00061	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00066	8b 4c 24 40	 mov	 ecx, DWORD PTR arch$[rsp]
  0006a	e8 00 00 00 00	 call	 replace_opcode_xxxx
  0006f	e9 a6 00 00 00	 jmp	 $LN1@the_real_r
$LN13@the_real_r:

; 7221 :     }
; 7222 : 
; 7223 :     case 0xa5:
; 7224 :     {
; 7225 :       if(arch == ARCH_900_IDX)

  00074	83 7c 24 40 02	 cmp	 DWORD PTR arch$[rsp], 2
  00079	75 1d		 jne	 SHORT $LN14@the_real_r

; 7226 :         return(replace_opcode_xx_x(arch, inst, opcode1, opcode2));

  0007b	44 8b 4c 24 58	 mov	 r9d, DWORD PTR opcode2$[rsp]
  00080	44 8b 44 24 50	 mov	 r8d, DWORD PTR opcode1$[rsp]
  00085	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  0008a	8b 4c 24 40	 mov	 ecx, DWORD PTR arch$[rsp]
  0008e	e8 00 00 00 00	 call	 replace_opcode_xx_x
  00093	e9 82 00 00 00	 jmp	 $LN1@the_real_r
$LN14@the_real_r:

; 7227 : 
; 7228 :       #if (!defined( _VEC_FAC_DEFINED_FOR_370 )) && defined( _FEATURE_370_EXTENSION )
; 7229 :       if(arch == ARCH_370_IDX)

  00098	83 7c 24 40 00	 cmp	 DWORD PTR arch$[rsp], 0
  0009d	75 1a		 jne	 SHORT $LN15@the_real_r

; 7230 :         return(replace_opcode_xx_x(arch, inst, opcode1, opcode2));

  0009f	44 8b 4c 24 58	 mov	 r9d, DWORD PTR opcode2$[rsp]
  000a4	44 8b 44 24 50	 mov	 r8d, DWORD PTR opcode1$[rsp]
  000a9	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  000ae	8b 4c 24 40	 mov	 ecx, DWORD PTR arch$[rsp]
  000b2	e8 00 00 00 00	 call	 replace_opcode_xx_x
  000b7	eb 61		 jmp	 SHORT $LN1@the_real_r
$LN15@the_real_r:

; 7231 :       #endif
; 7232 : 
; 7233 :       return(replace_opcode_xxxx(arch, inst, opcode1, opcode2));

  000b9	44 8b 4c 24 58	 mov	 r9d, DWORD PTR opcode2$[rsp]
  000be	44 8b 44 24 50	 mov	 r8d, DWORD PTR opcode1$[rsp]
  000c3	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  000c8	8b 4c 24 40	 mov	 ecx, DWORD PTR arch$[rsp]
  000cc	e8 00 00 00 00	 call	 replace_opcode_xxxx
  000d1	eb 47		 jmp	 SHORT $LN1@the_real_r
$LN16@the_real_r:
$LN17@the_real_r:
$LN18@the_real_r:
$LN19@the_real_r:
$LN20@the_real_r:
$LN21@the_real_r:
$LN22@the_real_r:

; 7234 :     }
; 7235 : 
; 7236 :     case 0xa7:
; 7237 :     case 0xc0:
; 7238 :     case 0xc2:
; 7239 :     case 0xc4:
; 7240 :     case 0xc6:
; 7241 :     case 0xc8:
; 7242 :     case 0xcc:
; 7243 : 
; 7244 :     {
; 7245 :       return(replace_opcode_xx_x(arch, inst, opcode1, opcode2));

  000d3	44 8b 4c 24 58	 mov	 r9d, DWORD PTR opcode2$[rsp]
  000d8	44 8b 44 24 50	 mov	 r8d, DWORD PTR opcode1$[rsp]
  000dd	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  000e2	8b 4c 24 40	 mov	 ecx, DWORD PTR arch$[rsp]
  000e6	e8 00 00 00 00	 call	 replace_opcode_xx_x
  000eb	eb 2d		 jmp	 SHORT $LN1@the_real_r
$LN23@the_real_r:
$LN24@the_real_r:
$LN25@the_real_r:
$LN26@the_real_r:
$LN27@the_real_r:

; 7246 :     }
; 7247 : 
; 7248 :     case 0xe3:
; 7249 :     case 0xe7:
; 7250 :     case 0xeb:
; 7251 :     case 0xec:
; 7252 :     case 0xed:
; 7253 : 
; 7254 :     {
; 7255 :       return(replace_opcode_xx________xx(arch, inst, opcode1, opcode2));

  000ed	44 8b 4c 24 58	 mov	 r9d, DWORD PTR opcode2$[rsp]
  000f2	44 8b 44 24 50	 mov	 r8d, DWORD PTR opcode1$[rsp]
  000f7	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  000fc	8b 4c 24 40	 mov	 ecx, DWORD PTR arch$[rsp]
  00100	e8 00 00 00 00	 call	 replace_opcode_xx________xx
  00105	eb 13		 jmp	 SHORT $LN1@the_real_r
$LN28@the_real_r:

; 7256 :     }
; 7257 : 
; 7258 :     default:
; 7259 :     {
; 7260 :       return(replace_opcode_xx(arch, inst, opcode1));

  00107	44 8b 44 24 50	 mov	 r8d, DWORD PTR opcode1$[rsp]
  0010c	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00111	8b 4c 24 40	 mov	 ecx, DWORD PTR arch$[rsp]
  00115	e8 00 00 00 00	 call	 replace_opcode_xx
$LN1@the_real_r:

; 7261 :     }
; 7262 :   }
; 7263 : 
; 7264 :   UNREACHABLE_CODE( return NULL );
; 7265 : }

  0011a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011e	c3		 ret	 0
  0011f	90		 npad	 1
$LN31@the_real_r:
  00120	00 00 00 00	 DD	 $LN4@the_real_r
  00124	00 00 00 00	 DD	 $LN5@the_real_r
  00128	00 00 00 00	 DD	 $LN13@the_real_r
  0012c	00 00 00 00	 DD	 $LN6@the_real_r
  00130	00 00 00 00	 DD	 $LN16@the_real_r
  00134	00 00 00 00	 DD	 $LN7@the_real_r
  00138	00 00 00 00	 DD	 $LN8@the_real_r
  0013c	00 00 00 00	 DD	 $LN9@the_real_r
  00140	00 00 00 00	 DD	 $LN17@the_real_r
  00144	00 00 00 00	 DD	 $LN18@the_real_r
  00148	00 00 00 00	 DD	 $LN19@the_real_r
  0014c	00 00 00 00	 DD	 $LN20@the_real_r
  00150	00 00 00 00	 DD	 $LN21@the_real_r
  00154	00 00 00 00	 DD	 $LN22@the_real_r
  00158	00 00 00 00	 DD	 $LN23@the_real_r
  0015c	00 00 00 00	 DD	 $LN10@the_real_r
  00160	00 00 00 00	 DD	 $LN11@the_real_r
  00164	00 00 00 00	 DD	 $LN12@the_real_r
  00168	00 00 00 00	 DD	 $LN24@the_real_r
  0016c	00 00 00 00	 DD	 $LN25@the_real_r
  00170	00 00 00 00	 DD	 $LN26@the_real_r
  00174	00 00 00 00	 DD	 $LN27@the_real_r
  00178	00 00 00 00	 DD	 $LN28@the_real_r
$LN30@the_real_r:
  0017c	00		 DB	 0
  0017d	16		 DB	 22
  0017e	16		 DB	 22
  0017f	16		 DB	 22
  00180	16		 DB	 22
  00181	16		 DB	 22
  00182	16		 DB	 22
  00183	16		 DB	 22
  00184	16		 DB	 22
  00185	16		 DB	 22
  00186	16		 DB	 22
  00187	16		 DB	 22
  00188	16		 DB	 22
  00189	16		 DB	 22
  0018a	16		 DB	 22
  0018b	16		 DB	 22
  0018c	16		 DB	 22
  0018d	16		 DB	 22
  0018e	16		 DB	 22
  0018f	16		 DB	 22
  00190	16		 DB	 22
  00191	16		 DB	 22
  00192	16		 DB	 22
  00193	16		 DB	 22
  00194	16		 DB	 22
  00195	16		 DB	 22
  00196	16		 DB	 22
  00197	16		 DB	 22
  00198	16		 DB	 22
  00199	16		 DB	 22
  0019a	16		 DB	 22
  0019b	16		 DB	 22
  0019c	16		 DB	 22
  0019d	16		 DB	 22
  0019e	16		 DB	 22
  0019f	16		 DB	 22
  001a0	16		 DB	 22
  001a1	16		 DB	 22
  001a2	16		 DB	 22
  001a3	16		 DB	 22
  001a4	16		 DB	 22
  001a5	16		 DB	 22
  001a6	16		 DB	 22
  001a7	16		 DB	 22
  001a8	16		 DB	 22
  001a9	16		 DB	 22
  001aa	16		 DB	 22
  001ab	16		 DB	 22
  001ac	16		 DB	 22
  001ad	16		 DB	 22
  001ae	16		 DB	 22
  001af	16		 DB	 22
  001b0	16		 DB	 22
  001b1	16		 DB	 22
  001b2	16		 DB	 22
  001b3	16		 DB	 22
  001b4	16		 DB	 22
  001b5	16		 DB	 22
  001b6	16		 DB	 22
  001b7	16		 DB	 22
  001b8	16		 DB	 22
  001b9	16		 DB	 22
  001ba	16		 DB	 22
  001bb	16		 DB	 22
  001bc	16		 DB	 22
  001bd	16		 DB	 22
  001be	16		 DB	 22
  001bf	16		 DB	 22
  001c0	16		 DB	 22
  001c1	16		 DB	 22
  001c2	16		 DB	 22
  001c3	16		 DB	 22
  001c4	16		 DB	 22
  001c5	16		 DB	 22
  001c6	16		 DB	 22
  001c7	16		 DB	 22
  001c8	16		 DB	 22
  001c9	16		 DB	 22
  001ca	16		 DB	 22
  001cb	16		 DB	 22
  001cc	16		 DB	 22
  001cd	16		 DB	 22
  001ce	16		 DB	 22
  001cf	16		 DB	 22
  001d0	16		 DB	 22
  001d1	16		 DB	 22
  001d2	16		 DB	 22
  001d3	16		 DB	 22
  001d4	16		 DB	 22
  001d5	16		 DB	 22
  001d6	16		 DB	 22
  001d7	16		 DB	 22
  001d8	16		 DB	 22
  001d9	16		 DB	 22
  001da	16		 DB	 22
  001db	16		 DB	 22
  001dc	16		 DB	 22
  001dd	16		 DB	 22
  001de	16		 DB	 22
  001df	16		 DB	 22
  001e0	16		 DB	 22
  001e1	16		 DB	 22
  001e2	16		 DB	 22
  001e3	16		 DB	 22
  001e4	16		 DB	 22
  001e5	16		 DB	 22
  001e6	16		 DB	 22
  001e7	16		 DB	 22
  001e8	16		 DB	 22
  001e9	16		 DB	 22
  001ea	16		 DB	 22
  001eb	16		 DB	 22
  001ec	16		 DB	 22
  001ed	16		 DB	 22
  001ee	16		 DB	 22
  001ef	16		 DB	 22
  001f0	16		 DB	 22
  001f1	16		 DB	 22
  001f2	16		 DB	 22
  001f3	16		 DB	 22
  001f4	16		 DB	 22
  001f5	16		 DB	 22
  001f6	16		 DB	 22
  001f7	16		 DB	 22
  001f8	16		 DB	 22
  001f9	16		 DB	 22
  001fa	16		 DB	 22
  001fb	16		 DB	 22
  001fc	16		 DB	 22
  001fd	16		 DB	 22
  001fe	16		 DB	 22
  001ff	16		 DB	 22
  00200	16		 DB	 22
  00201	16		 DB	 22
  00202	16		 DB	 22
  00203	16		 DB	 22
  00204	16		 DB	 22
  00205	16		 DB	 22
  00206	16		 DB	 22
  00207	16		 DB	 22
  00208	16		 DB	 22
  00209	16		 DB	 22
  0020a	16		 DB	 22
  0020b	16		 DB	 22
  0020c	16		 DB	 22
  0020d	16		 DB	 22
  0020e	16		 DB	 22
  0020f	16		 DB	 22
  00210	16		 DB	 22
  00211	16		 DB	 22
  00212	16		 DB	 22
  00213	16		 DB	 22
  00214	16		 DB	 22
  00215	16		 DB	 22
  00216	16		 DB	 22
  00217	16		 DB	 22
  00218	16		 DB	 22
  00219	16		 DB	 22
  0021a	16		 DB	 22
  0021b	16		 DB	 22
  0021c	16		 DB	 22
  0021d	16		 DB	 22
  0021e	16		 DB	 22
  0021f	01		 DB	 1
  00220	02		 DB	 2
  00221	03		 DB	 3
  00222	04		 DB	 4
  00223	16		 DB	 22
  00224	16		 DB	 22
  00225	16		 DB	 22
  00226	16		 DB	 22
  00227	16		 DB	 22
  00228	16		 DB	 22
  00229	16		 DB	 22
  0022a	16		 DB	 22
  0022b	16		 DB	 22
  0022c	16		 DB	 22
  0022d	05		 DB	 5
  0022e	06		 DB	 6
  0022f	16		 DB	 22
  00230	16		 DB	 22
  00231	16		 DB	 22
  00232	16		 DB	 22
  00233	16		 DB	 22
  00234	07		 DB	 7
  00235	16		 DB	 22
  00236	16		 DB	 22
  00237	16		 DB	 22
  00238	16		 DB	 22
  00239	16		 DB	 22
  0023a	16		 DB	 22
  0023b	08		 DB	 8
  0023c	16		 DB	 22
  0023d	09		 DB	 9
  0023e	16		 DB	 22
  0023f	0a		 DB	 10
  00240	16		 DB	 22
  00241	0b		 DB	 11
  00242	16		 DB	 22
  00243	0c		 DB	 12
  00244	16		 DB	 22
  00245	16		 DB	 22
  00246	16		 DB	 22
  00247	0d		 DB	 13
  00248	16		 DB	 22
  00249	16		 DB	 22
  0024a	16		 DB	 22
  0024b	16		 DB	 22
  0024c	16		 DB	 22
  0024d	16		 DB	 22
  0024e	16		 DB	 22
  0024f	16		 DB	 22
  00250	16		 DB	 22
  00251	16		 DB	 22
  00252	16		 DB	 22
  00253	16		 DB	 22
  00254	16		 DB	 22
  00255	16		 DB	 22
  00256	16		 DB	 22
  00257	16		 DB	 22
  00258	16		 DB	 22
  00259	16		 DB	 22
  0025a	16		 DB	 22
  0025b	16		 DB	 22
  0025c	16		 DB	 22
  0025d	16		 DB	 22
  0025e	0e		 DB	 14
  0025f	0f		 DB	 15
  00260	10		 DB	 16
  00261	11		 DB	 17
  00262	12		 DB	 18
  00263	16		 DB	 22
  00264	16		 DB	 22
  00265	16		 DB	 22
  00266	13		 DB	 19
  00267	14		 DB	 20
  00268	15		 DB	 21
the_real_replace_opcode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
tv73 = 32
tv74 = 36
tv86 = 40
tv87 = 44
tv130 = 48
tv131 = 52
inst$ = 80
regs$ = 88
s370_operation_exception PROC

; 1428 : {

$LN19:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@s370_opera:

; 1429 :     INST_UPDATE_PSW (regs, ILC(inst[0]), ILC(inst[0]));

  0000e	b8 01 00 00 00	 mov	 eax, 1
  00013	48 6b c0 00	 imul	 rax, rax, 0
  00017	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0001c	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00020	83 f8 40	 cmp	 eax, 64			; 00000040H
  00023	7d 0a		 jge	 SHORT $LN9@s370_opera
  00025	c7 44 24 24 02
	00 00 00	 mov	 DWORD PTR tv74[rsp], 2
  0002d	eb 33		 jmp	 SHORT $LN10@s370_opera
$LN9@s370_opera:
  0002f	b8 01 00 00 00	 mov	 eax, 1
  00034	48 6b c0 00	 imul	 rax, rax, 0
  00038	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  0003d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00041	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  00046	7d 0a		 jge	 SHORT $LN7@s370_opera
  00048	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR tv73[rsp], 4
  00050	eb 08		 jmp	 SHORT $LN8@s370_opera
$LN7@s370_opera:
  00052	c7 44 24 20 06
	00 00 00	 mov	 DWORD PTR tv73[rsp], 6
$LN8@s370_opera:
  0005a	8b 44 24 20	 mov	 eax, DWORD PTR tv73[rsp]
  0005e	89 44 24 24	 mov	 DWORD PTR tv74[rsp], eax
$LN10@s370_opera:
  00062	48 63 44 24 24	 movsxd	 rax, DWORD PTR tv74[rsp]
  00067	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0006c	48 03 41 68	 add	 rax, QWORD PTR [rcx+104]
  00070	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00075	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
  00079	b8 01 00 00 00	 mov	 eax, 1
  0007e	48 6b c0 00	 imul	 rax, rax, 0
  00082	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00087	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0008b	83 f8 40	 cmp	 eax, 64			; 00000040H
  0008e	7d 0a		 jge	 SHORT $LN13@s370_opera
  00090	c7 44 24 2c 02
	00 00 00	 mov	 DWORD PTR tv87[rsp], 2
  00098	eb 33		 jmp	 SHORT $LN14@s370_opera
$LN13@s370_opera:
  0009a	b8 01 00 00 00	 mov	 eax, 1
  0009f	48 6b c0 00	 imul	 rax, rax, 0
  000a3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  000a8	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ac	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  000b1	7d 0a		 jge	 SHORT $LN11@s370_opera
  000b3	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR tv86[rsp], 4
  000bb	eb 08		 jmp	 SHORT $LN12@s370_opera
$LN11@s370_opera:
  000bd	c7 44 24 28 06
	00 00 00	 mov	 DWORD PTR tv86[rsp], 6
$LN12@s370_opera:
  000c5	8b 44 24 28	 mov	 eax, DWORD PTR tv86[rsp]
  000c9	89 44 24 2c	 mov	 DWORD PTR tv87[rsp], eax
$LN14@s370_opera:
  000cd	83 7c 24 2c 00	 cmp	 DWORD PTR tv87[rsp], 0
  000d2	74 64		 je	 SHORT $LN5@s370_opera
  000d4	b8 01 00 00 00	 mov	 eax, 1
  000d9	48 6b c0 00	 imul	 rax, rax, 0
  000dd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  000e2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000e6	83 f8 40	 cmp	 eax, 64			; 00000040H
  000e9	7d 0a		 jge	 SHORT $LN17@s370_opera
  000eb	c7 44 24 34 02
	00 00 00	 mov	 DWORD PTR tv131[rsp], 2
  000f3	eb 33		 jmp	 SHORT $LN18@s370_opera
$LN17@s370_opera:
  000f5	b8 01 00 00 00	 mov	 eax, 1
  000fa	48 6b c0 00	 imul	 rax, rax, 0
  000fe	48 8b 4c 24 50	 mov	 rcx, QWORD PTR inst$[rsp]
  00103	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00107	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  0010c	7d 0a		 jge	 SHORT $LN15@s370_opera
  0010e	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR tv130[rsp], 4
  00116	eb 08		 jmp	 SHORT $LN16@s370_opera
$LN15@s370_opera:
  00118	c7 44 24 30 06
	00 00 00	 mov	 DWORD PTR tv130[rsp], 6
$LN16@s370_opera:
  00120	8b 44 24 30	 mov	 eax, DWORD PTR tv130[rsp]
  00124	89 44 24 34	 mov	 DWORD PTR tv131[rsp], eax
$LN18@s370_opera:
  00128	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  0012d	0f b6 4c 24 34	 movzx	 ecx, BYTE PTR tv131[rsp]
  00132	88 88 9a 00 00
	00		 mov	 BYTE PTR [rax+154], cl
$LN5@s370_opera:
  00138	33 c0		 xor	 eax, eax
  0013a	85 c0		 test	 eax, eax
  0013c	0f 85 cc fe ff
	ff		 jne	 $LN4@s370_opera

; 1430 :     ARCH_DEP( program_interrupt )(regs, PGM_OPERATION_EXCEPTION);

  00142	ba 01 00 00 00	 mov	 edx, 1
  00147	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0014c	e8 00 00 00 00	 call	 s370_program_interrupt

; 1431 : }

  00151	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00155	c3		 ret	 0
s370_operation_exception ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_cipher_message_with_counter PROC

; 666  :  UNDEF_INST( cipher_message_with_counter )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_cipher_message_with_counter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_cipher_message_with_output_feedback PROC

; 665  :  UNDEF_INST( cipher_message_with_output_feedback )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_cipher_message_with_output_feedback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_cipher_message_with_cipher_feedback PROC

; 664  :  UNDEF_INST( cipher_message_with_cipher_feedback )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_cipher_message_with_cipher_feedback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_perform_cryptographic_computation PROC

; 667  :  UNDEF_INST( perform_cryptographic_computation )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_perform_cryptographic_computation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_perform_cryptographic_key_management_operation PROC

; 660  :  UNDEF_INST( perform_cryptographic_key_management_operation )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_perform_cryptographic_key_management_operation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_compute_message_authentication_code PROC

; 109  :  UNDEF_INST( compute_message_authentication_code )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_compute_message_authentication_code ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_compute_last_message_digest PROC

; 108  :  UNDEF_INST( compute_last_message_digest )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_compute_last_message_digest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_compute_intermediate_message_digest PROC

; 107  :  UNDEF_INST( compute_intermediate_message_digest )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_compute_intermediate_message_digest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_cipher_message_with_chaining PROC

; 106  :  UNDEF_INST( cipher_message_with_chaining )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_cipher_message_with_chaining ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
inst$ = 48
regs$ = 56
s370_cipher_message PROC

; 105  :  UNDEF_INST( cipher_message )

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR regs$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 s370_operation_exception
  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
s370_cipher_message ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
regs$ = 8
init_regs_runtime_opcode_pointers PROC

; 7450 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 7451 :   if (!regs)

  00005	48 83 7c 24 08
	00		 cmp	 QWORD PTR regs$[rsp], 0
  0000b	75 05		 jne	 SHORT $LN2@init_regs_

; 7452 :     return;

  0000d	e9 64 02 00 00	 jmp	 $LN1@init_regs_
$LN2@init_regs_:

; 7453 : 
; 7454 :   regs->s370_runtime_opcode_xxxx         = runtime_opcode_xxxx        [ARCH_370_IDX];

  00012	b8 00 00 08 00	 mov	 eax, 524288		; 00080000H
  00017	48 6b c0 00	 imul	 rax, rax, 0
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_xxxx
  00022	48 03 c8	 add	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  0002d	48 89 81 c8 af
	00 00		 mov	 QWORD PTR [rcx+45000], rax

; 7455 :   regs->s370_runtime_opcode_e3________xx = runtime_opcode_e3________xx[ARCH_370_IDX];

  00034	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00039	48 6b c0 00	 imul	 rax, rax, 0
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_e3________xx
  00044	48 03 c8	 add	 rcx, rax
  00047	48 8b c1	 mov	 rax, rcx
  0004a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  0004f	48 89 81 d0 af
	00 00		 mov	 QWORD PTR [rcx+45008], rax

; 7456 :   regs->s370_runtime_opcode_e7________xx = runtime_opcode_e7________xx[ARCH_370_IDX];

  00056	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  0005b	48 6b c0 00	 imul	 rax, rax, 0
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_e7________xx
  00066	48 03 c8	 add	 rcx, rax
  00069	48 8b c1	 mov	 rax, rcx
  0006c	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  00071	48 89 81 d8 af
	00 00		 mov	 QWORD PTR [rcx+45016], rax

; 7457 :   regs->s370_runtime_opcode_eb________xx = runtime_opcode_eb________xx[ARCH_370_IDX];

  00078	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  0007d	48 6b c0 00	 imul	 rax, rax, 0
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_eb________xx
  00088	48 03 c8	 add	 rcx, rax
  0008b	48 8b c1	 mov	 rax, rcx
  0008e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  00093	48 89 81 e0 af
	00 00		 mov	 QWORD PTR [rcx+45024], rax

; 7458 :   regs->s370_runtime_opcode_ec________xx = runtime_opcode_ec________xx[ARCH_370_IDX];

  0009a	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  0009f	48 6b c0 00	 imul	 rax, rax, 0
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_ec________xx
  000aa	48 03 c8	 add	 rcx, rax
  000ad	48 8b c1	 mov	 rax, rcx
  000b0	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  000b5	48 89 81 e8 af
	00 00		 mov	 QWORD PTR [rcx+45032], rax

; 7459 :   regs->s370_runtime_opcode_ed________xx = runtime_opcode_ed________xx[ARCH_370_IDX];

  000bc	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  000c1	48 6b c0 00	 imul	 rax, rax, 0
  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_ed________xx
  000cc	48 03 c8	 add	 rcx, rax
  000cf	48 8b c1	 mov	 rax, rcx
  000d2	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  000d7	48 89 81 f0 af
	00 00		 mov	 QWORD PTR [rcx+45040], rax

; 7460 : 
; 7461 :   regs->s390_runtime_opcode_xxxx         = runtime_opcode_xxxx        [ARCH_390_IDX];

  000de	b8 00 00 08 00	 mov	 eax, 524288		; 00080000H
  000e3	48 6b c0 01	 imul	 rax, rax, 1
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_xxxx
  000ee	48 03 c8	 add	 rcx, rax
  000f1	48 8b c1	 mov	 rax, rcx
  000f4	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  000f9	48 89 81 f8 af
	00 00		 mov	 QWORD PTR [rcx+45048], rax

; 7462 :   regs->s390_runtime_opcode_e3________xx = runtime_opcode_e3________xx[ARCH_390_IDX];

  00100	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00105	48 6b c0 01	 imul	 rax, rax, 1
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_e3________xx
  00110	48 03 c8	 add	 rcx, rax
  00113	48 8b c1	 mov	 rax, rcx
  00116	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  0011b	48 89 81 00 b0
	00 00		 mov	 QWORD PTR [rcx+45056], rax

; 7463 :   regs->s390_runtime_opcode_e7________xx = runtime_opcode_e7________xx[ARCH_390_IDX];

  00122	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00127	48 6b c0 01	 imul	 rax, rax, 1
  0012b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_e7________xx
  00132	48 03 c8	 add	 rcx, rax
  00135	48 8b c1	 mov	 rax, rcx
  00138	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  0013d	48 89 81 08 b0
	00 00		 mov	 QWORD PTR [rcx+45064], rax

; 7464 :   regs->s390_runtime_opcode_eb________xx = runtime_opcode_eb________xx[ARCH_390_IDX];

  00144	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00149	48 6b c0 01	 imul	 rax, rax, 1
  0014d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_eb________xx
  00154	48 03 c8	 add	 rcx, rax
  00157	48 8b c1	 mov	 rax, rcx
  0015a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  0015f	48 89 81 10 b0
	00 00		 mov	 QWORD PTR [rcx+45072], rax

; 7465 :   regs->s390_runtime_opcode_ec________xx = runtime_opcode_ec________xx[ARCH_390_IDX];

  00166	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  0016b	48 6b c0 01	 imul	 rax, rax, 1
  0016f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_ec________xx
  00176	48 03 c8	 add	 rcx, rax
  00179	48 8b c1	 mov	 rax, rcx
  0017c	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  00181	48 89 81 18 b0
	00 00		 mov	 QWORD PTR [rcx+45080], rax

; 7466 :   regs->s390_runtime_opcode_ed________xx = runtime_opcode_ed________xx[ARCH_390_IDX];

  00188	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  0018d	48 6b c0 01	 imul	 rax, rax, 1
  00191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_ed________xx
  00198	48 03 c8	 add	 rcx, rax
  0019b	48 8b c1	 mov	 rax, rcx
  0019e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  001a3	48 89 81 20 b0
	00 00		 mov	 QWORD PTR [rcx+45088], rax

; 7467 : 
; 7468 :   regs->z900_runtime_opcode_xxxx         = runtime_opcode_xxxx        [ARCH_900_IDX];

  001aa	b8 00 00 08 00	 mov	 eax, 524288		; 00080000H
  001af	48 6b c0 02	 imul	 rax, rax, 2
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_xxxx
  001ba	48 03 c8	 add	 rcx, rax
  001bd	48 8b c1	 mov	 rax, rcx
  001c0	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  001c5	48 89 81 28 b0
	00 00		 mov	 QWORD PTR [rcx+45096], rax

; 7469 :   regs->z900_runtime_opcode_e3________xx = runtime_opcode_e3________xx[ARCH_900_IDX];

  001cc	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  001d1	48 6b c0 02	 imul	 rax, rax, 2
  001d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_e3________xx
  001dc	48 03 c8	 add	 rcx, rax
  001df	48 8b c1	 mov	 rax, rcx
  001e2	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  001e7	48 89 81 30 b0
	00 00		 mov	 QWORD PTR [rcx+45104], rax

; 7470 :   regs->z900_runtime_opcode_e7________xx = runtime_opcode_e7________xx[ARCH_900_IDX];

  001ee	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  001f3	48 6b c0 02	 imul	 rax, rax, 2
  001f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_e7________xx
  001fe	48 03 c8	 add	 rcx, rax
  00201	48 8b c1	 mov	 rax, rcx
  00204	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  00209	48 89 81 38 b0
	00 00		 mov	 QWORD PTR [rcx+45112], rax

; 7471 :   regs->z900_runtime_opcode_eb________xx = runtime_opcode_eb________xx[ARCH_900_IDX];

  00210	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00215	48 6b c0 02	 imul	 rax, rax, 2
  00219	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_eb________xx
  00220	48 03 c8	 add	 rcx, rax
  00223	48 8b c1	 mov	 rax, rcx
  00226	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  0022b	48 89 81 40 b0
	00 00		 mov	 QWORD PTR [rcx+45120], rax

; 7472 :   regs->z900_runtime_opcode_ec________xx = runtime_opcode_ec________xx[ARCH_900_IDX];

  00232	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00237	48 6b c0 02	 imul	 rax, rax, 2
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_ec________xx
  00242	48 03 c8	 add	 rcx, rax
  00245	48 8b c1	 mov	 rax, rcx
  00248	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  0024d	48 89 81 48 b0
	00 00		 mov	 QWORD PTR [rcx+45128], rax

; 7473 :   regs->z900_runtime_opcode_ed________xx = runtime_opcode_ed________xx[ARCH_900_IDX];

  00254	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00259	48 6b c0 02	 imul	 rax, rax, 2
  0025d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:runtime_opcode_ed________xx
  00264	48 03 c8	 add	 rcx, rax
  00267	48 8b c1	 mov	 rax, rcx
  0026a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR regs$[rsp]
  0026f	48 89 81 50 b0
	00 00		 mov	 QWORD PTR [rcx+45136], rax
$LN1@init_regs_:

; 7474 : 
; 7475 : #if defined( OPTION_OPTINST ) && !defined( OPTION_NO_E3_OPTINST )
; 7476 :   regs->s370_runtime_opcode_e3_0______xx = runtime_opcode_e3_0______xx[ARCH_370_IDX];
; 7477 :   regs->s390_runtime_opcode_e3_0______xx = runtime_opcode_e3_0______xx[ARCH_390_IDX];
; 7478 :   regs->z900_runtime_opcode_e3_0______xx = runtime_opcode_e3_0______xx[ARCH_900_IDX];
; 7479 : #endif
; 7480 : }

  00276	c3		 ret	 0
init_regs_runtime_opcode_pointers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
i$ = 32
arch$ = 36
bit$ = 40
p$1 = 48
init_runtime_opcode_tables PROC

; 7297 : {

$LN37:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 7298 :   int arch;
; 7299 :   int i;
; 7300 : #ifdef OPTION_OPTINST
; 7301 :   int bit;
; 7302 : #endif
; 7303 : 
; 7304 :   for(arch = 0; arch < NUM_GEN_ARCHS; arch++)

  00004	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR arch$[rsp], 0
  0000c	eb 0a		 jmp	 SHORT $LN4@init_runti
$LN2@init_runti:
  0000e	8b 44 24 24	 mov	 eax, DWORD PTR arch$[rsp]
  00012	ff c0		 inc	 eax
  00014	89 44 24 24	 mov	 DWORD PTR arch$[rsp], eax
$LN4@init_runti:
  00018	83 7c 24 24 03	 cmp	 DWORD PTR arch$[rsp], 3
  0001d	0f 8d 23 09 00
	00		 jge	 $LN3@init_runti

; 7305 :   {
; 7306 :     for(i = 0; i < 256; i++)

  00023	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0002b	eb 0a		 jmp	 SHORT $LN7@init_runti
$LN5@init_runti:
  0002d	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00031	ff c0		 inc	 eax
  00033	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@init_runti:
  00037	81 7c 24 20 00
	01 00 00	 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  0003f	7d 2f		 jge	 SHORT $LN6@init_runti

; 7307 :       replace_opcode_xx(arch, gen_opcode_table[i][arch], i);

  00041	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00046	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_table
  00051	48 03 c8	 add	 rcx, rax
  00054	48 8b c1	 mov	 rax, rcx
  00057	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  0005c	44 8b 44 24 20	 mov	 r8d, DWORD PTR i$[rsp]
  00061	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00065	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00069	e8 00 00 00 00	 call	 replace_opcode_xx
  0006e	eb bd		 jmp	 SHORT $LN5@init_runti
$LN6@init_runti:

; 7308 : 
; 7309 :     for(i = 0; i < 256; i++)

  00070	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00078	eb 0a		 jmp	 SHORT $LN10@init_runti
$LN8@init_runti:
  0007a	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0007e	ff c0		 inc	 eax
  00080	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN10@init_runti:
  00084	81 7c 24 20 00
	01 00 00	 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  0008c	0f 8d 78 03 00
	00		 jge	 $LN9@init_runti

; 7310 :     {
; 7311 :       replace_opcode_xxxx(arch, gen_opcode_01xx[i][arch], 0x01, i);

  00092	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00097	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_01xx
  000a2	48 03 c8	 add	 rcx, rax
  000a5	48 8b c1	 mov	 rax, rcx
  000a8	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  000ad	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  000b2	41 b8 01 00 00
	00		 mov	 r8d, 1
  000b8	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  000bc	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  000c0	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7312 : 
; 7313 :       if(arch != ARCH_900_IDX)

  000c5	83 7c 24 24 02	 cmp	 DWORD PTR arch$[rsp], 2
  000ca	74 66		 je	 SHORT $LN26@init_runti

; 7314 :       {
; 7315 :         replace_opcode_xxxx(arch, gen_v_opcode_a4xx[i][arch], 0xa4, i);

  000cc	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000d1	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_v_opcode_a4xx
  000dc	48 03 c8	 add	 rcx, rax
  000df	48 8b c1	 mov	 rax, rcx
  000e2	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  000e7	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  000ec	41 b8 a4 00 00
	00		 mov	 r8d, 164		; 000000a4H
  000f2	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  000f6	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  000fa	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7316 :         #if defined( _VEC_FAC_DEFINED_FOR_370 )
; 7317 :         if(arch == ARCH_370_IDX)
; 7318 :           replace_opcode_xxxx(arch, gen_v_opcode_a5xx[i][arch], 0xa5, i);
; 7319 :         #endif
; 7320 :         #if defined( _VEC_FAC_DEFINED_FOR_390 )
; 7321 :         if(arch == ARCH_390_IDX)
; 7322 :           replace_opcode_xxxx(arch, gen_v_opcode_a5xx[i][arch], 0xa5, i);
; 7323 :         #endif
; 7324 :         replace_opcode_xxxx(arch, gen_v_opcode_a6xx[i][arch], 0xa6, i);

  000ff	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00104	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_v_opcode_a6xx
  0010f	48 03 c8	 add	 rcx, rax
  00112	48 8b c1	 mov	 rax, rcx
  00115	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  0011a	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  0011f	41 b8 a6 00 00
	00		 mov	 r8d, 166		; 000000a6H
  00125	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00129	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  0012d	e8 00 00 00 00	 call	 replace_opcode_xxxx
$LN26@init_runti:

; 7325 :       }
; 7326 : 
; 7327 :       // b2xx opcode table is ARCH_DEP!
; 7328 : 
; 7329 :            if (ARCH_370_IDX == arch) replace_opcode_xxxx( arch, s370_gen_opcode_b2xx[i][arch], 0xb2, i );

  00132	83 7c 24 24 00	 cmp	 DWORD PTR arch$[rsp], 0
  00137	75 38		 jne	 SHORT $LN27@init_runti
  00139	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0013e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s370_gen_opcode_b2xx
  00149	48 03 c8	 add	 rcx, rax
  0014c	48 8b c1	 mov	 rax, rcx
  0014f	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  00154	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00159	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  0015f	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00163	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00167	e8 00 00 00 00	 call	 replace_opcode_xxxx
  0016c	e9 8f 00 00 00	 jmp	 $LN28@init_runti
$LN27@init_runti:

; 7330 :       else if (ARCH_390_IDX == arch) replace_opcode_xxxx( arch, s390_gen_opcode_b2xx[i][arch], 0xb2, i );

  00171	83 7c 24 24 01	 cmp	 DWORD PTR arch$[rsp], 1
  00176	75 35		 jne	 SHORT $LN29@init_runti
  00178	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0017d	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00181	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:s390_gen_opcode_b2xx
  00188	48 03 c8	 add	 rcx, rax
  0018b	48 8b c1	 mov	 rax, rcx
  0018e	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  00193	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00198	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  0019e	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  001a2	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  001a6	e8 00 00 00 00	 call	 replace_opcode_xxxx
  001ab	eb 53		 jmp	 SHORT $LN30@init_runti
$LN29@init_runti:

; 7331 :       else if (ARCH_900_IDX == arch) replace_opcode_xxxx( arch, z900_gen_opcode_b2xx[i][arch], 0xb2, i );

  001ad	83 7c 24 24 02	 cmp	 DWORD PTR arch$[rsp], 2
  001b2	75 35		 jne	 SHORT $LN31@init_runti
  001b4	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001b9	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  001bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:z900_gen_opcode_b2xx
  001c4	48 03 c8	 add	 rcx, rax
  001c7	48 8b c1	 mov	 rax, rcx
  001ca	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  001cf	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  001d4	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  001da	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  001de	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  001e2	e8 00 00 00 00	 call	 replace_opcode_xxxx
  001e7	eb 17		 jmp	 SHORT $LN32@init_runti
$LN31@init_runti:
$LN13@init_runti:

; 7332 :       else
; 7333 :           CRASH();

  001e9	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR p$1[rsp], 0
  001f2	48 8b 44 24 30	 mov	 rax, QWORD PTR p$1[rsp]
  001f7	c6 00 00	 mov	 BYTE PTR [rax], 0
  001fa	33 c0		 xor	 eax, eax
  001fc	85 c0		 test	 eax, eax
  001fe	75 e9		 jne	 SHORT $LN13@init_runti
$LN32@init_runti:
$LN30@init_runti:
$LN28@init_runti:

; 7334 : 
; 7335 :       replace_opcode_xxxx(arch, gen_opcode_b3xx[i][arch], 0xb3, i);

  00200	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00205	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00209	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_b3xx
  00210	48 03 c8	 add	 rcx, rax
  00213	48 8b c1	 mov	 rax, rcx
  00216	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  0021b	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00220	41 b8 b3 00 00
	00		 mov	 r8d, 179		; 000000b3H
  00226	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  0022a	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  0022e	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7336 :       replace_opcode_xxxx(arch, gen_opcode_b9xx[i][arch], 0xb9, i);

  00233	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00238	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0023c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_b9xx
  00243	48 03 c8	 add	 rcx, rax
  00246	48 8b c1	 mov	 rax, rcx
  00249	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  0024e	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00253	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  00259	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  0025d	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00261	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7337 :       replace_opcode_xx________xx(arch, gen_opcode_e3xx[i][arch], 0xe3, i);

  00266	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0026b	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0026f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_e3xx
  00276	48 03 c8	 add	 rcx, rax
  00279	48 8b c1	 mov	 rax, rcx
  0027c	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  00281	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00286	41 b8 e3 00 00
	00		 mov	 r8d, 227		; 000000e3H
  0028c	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00290	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00294	e8 00 00 00 00	 call	 replace_opcode_xx________xx

; 7338 : 
; 7339 :       if(arch != ARCH_900_IDX)

  00299	83 7c 24 24 02	 cmp	 DWORD PTR arch$[rsp], 2
  0029e	74 33		 je	 SHORT $LN33@init_runti

; 7340 :         replace_opcode_xxxx(arch, gen_v_opcode_e4xx[i][arch], 0xe4, i);

  002a0	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  002a5	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  002a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_v_opcode_e4xx
  002b0	48 03 c8	 add	 rcx, rax
  002b3	48 8b c1	 mov	 rax, rcx
  002b6	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  002bb	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  002c0	41 b8 e4 00 00
	00		 mov	 r8d, 228		; 000000e4H
  002c6	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  002ca	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  002ce	e8 00 00 00 00	 call	 replace_opcode_xxxx
$LN33@init_runti:

; 7341 : 
; 7342 :       replace_opcode_xxxx(arch, gen_opcode_e5xx[i][arch], 0xe5, i);

  002d3	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  002d8	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  002dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_e5xx
  002e3	48 03 c8	 add	 rcx, rax
  002e6	48 8b c1	 mov	 rax, rcx
  002e9	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  002ee	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  002f3	41 b8 e5 00 00
	00		 mov	 r8d, 229		; 000000e5H
  002f9	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  002fd	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00301	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7343 :       replace_opcode_xxxx(arch, gen_opcode_e6xx[i][arch], 0xe6, i);

  00306	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0030b	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0030f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_e6xx
  00316	48 03 c8	 add	 rcx, rax
  00319	48 8b c1	 mov	 rax, rcx
  0031c	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  00321	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00326	41 b8 e6 00 00
	00		 mov	 r8d, 230		; 000000e6H
  0032c	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00330	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00334	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7344 :       replace_opcode_xx________xx(arch, gen_opcode_e7xx[i][arch], 0xe7, i);

  00339	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0033e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00342	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_e7xx
  00349	48 03 c8	 add	 rcx, rax
  0034c	48 8b c1	 mov	 rax, rcx
  0034f	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  00354	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00359	41 b8 e7 00 00
	00		 mov	 r8d, 231		; 000000e7H
  0035f	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00363	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00367	e8 00 00 00 00	 call	 replace_opcode_xx________xx

; 7345 :       replace_opcode_xx________xx(arch, gen_opcode_ebxx[i][arch], 0xeb, i);

  0036c	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00371	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00375	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_ebxx
  0037c	48 03 c8	 add	 rcx, rax
  0037f	48 8b c1	 mov	 rax, rcx
  00382	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  00387	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  0038c	41 b8 eb 00 00
	00		 mov	 r8d, 235		; 000000ebH
  00392	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00396	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  0039a	e8 00 00 00 00	 call	 replace_opcode_xx________xx

; 7346 :       replace_opcode_xx________xx(arch, gen_opcode_ecxx[i][arch], 0xec, i);

  0039f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  003a4	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  003a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_ecxx
  003af	48 03 c8	 add	 rcx, rax
  003b2	48 8b c1	 mov	 rax, rcx
  003b5	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  003ba	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  003bf	41 b8 ec 00 00
	00		 mov	 r8d, 236		; 000000ecH
  003c5	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  003c9	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  003cd	e8 00 00 00 00	 call	 replace_opcode_xx________xx

; 7347 :       replace_opcode_xx________xx(arch, gen_opcode_edxx[i][arch], 0xed, i);

  003d2	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  003d7	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  003db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_edxx
  003e2	48 03 c8	 add	 rcx, rax
  003e5	48 8b c1	 mov	 rax, rcx
  003e8	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  003ed	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  003f2	41 b8 ed 00 00
	00		 mov	 r8d, 237		; 000000edH
  003f8	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  003fc	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00400	e8 00 00 00 00	 call	 replace_opcode_xx________xx

; 7348 :     }

  00405	e9 70 fc ff ff	 jmp	 $LN8@init_runti
$LN9@init_runti:

; 7349 : 
; 7350 :     for(i = 0; i < 16; i++)

  0040a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00412	eb 0a		 jmp	 SHORT $LN16@init_runti
$LN14@init_runti:
  00414	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00418	ff c0		 inc	 eax
  0041a	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN16@init_runti:
  0041e	83 7c 24 20 10	 cmp	 DWORD PTR i$[rsp], 16
  00423	0f 8d de 01 00
	00		 jge	 $LN15@init_runti

; 7351 :     {
; 7352 :       if(arch == ARCH_900_IDX)

  00429	83 7c 24 24 02	 cmp	 DWORD PTR arch$[rsp], 2
  0042e	75 33		 jne	 SHORT $LN34@init_runti

; 7353 :         replace_opcode_xx_x(arch, gen_opcode_a5_x[i][arch], 0xa5, i);

  00430	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00435	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00439	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_a5_x
  00440	48 03 c8	 add	 rcx, rax
  00443	48 8b c1	 mov	 rax, rcx
  00446	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  0044b	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00450	41 b8 a5 00 00
	00		 mov	 r8d, 165		; 000000a5H
  00456	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  0045a	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  0045e	e8 00 00 00 00	 call	 replace_opcode_xx_x
$LN34@init_runti:

; 7354 :       #if (!defined( _VEC_FAC_DEFINED_FOR_370 )) && defined( _FEATURE_370_EXTENSION )
; 7355 :       if(arch == ARCH_370_IDX)

  00463	83 7c 24 24 00	 cmp	 DWORD PTR arch$[rsp], 0
  00468	75 33		 jne	 SHORT $LN35@init_runti

; 7356 :         replace_opcode_xx_x(arch, gen_opcode_a5_x[i][arch], 0xa5, i);

  0046a	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0046f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00473	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_a5_x
  0047a	48 03 c8	 add	 rcx, rax
  0047d	48 8b c1	 mov	 rax, rcx
  00480	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  00485	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  0048a	41 b8 a5 00 00
	00		 mov	 r8d, 165		; 000000a5H
  00490	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00494	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00498	e8 00 00 00 00	 call	 replace_opcode_xx_x
$LN35@init_runti:

; 7357 :       #endif
; 7358 :       replace_opcode_xx_x(arch, gen_opcode_a7_x[i][arch], 0xa7, i);

  0049d	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  004a2	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  004a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_a7_x
  004ad	48 03 c8	 add	 rcx, rax
  004b0	48 8b c1	 mov	 rax, rcx
  004b3	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  004b8	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  004bd	41 b8 a7 00 00
	00		 mov	 r8d, 167		; 000000a7H
  004c3	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  004c7	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  004cb	e8 00 00 00 00	 call	 replace_opcode_xx_x

; 7359 :       replace_opcode_xx_x(arch, gen_opcode_c0_x[i][arch], 0xc0, i);

  004d0	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  004d5	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  004d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c0_x
  004e0	48 03 c8	 add	 rcx, rax
  004e3	48 8b c1	 mov	 rax, rcx
  004e6	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  004eb	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  004f0	41 b8 c0 00 00
	00		 mov	 r8d, 192		; 000000c0H
  004f6	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  004fa	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  004fe	e8 00 00 00 00	 call	 replace_opcode_xx_x

; 7360 :       replace_opcode_xx_x(arch, gen_opcode_c2_x[i][arch], 0xc2, i);

  00503	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00508	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0050c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c2_x
  00513	48 03 c8	 add	 rcx, rax
  00516	48 8b c1	 mov	 rax, rcx
  00519	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  0051e	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00523	41 b8 c2 00 00
	00		 mov	 r8d, 194		; 000000c2H
  00529	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  0052d	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00531	e8 00 00 00 00	 call	 replace_opcode_xx_x

; 7361 :       replace_opcode_xx_x(arch, gen_opcode_c4_x[i][arch], 0xc4, i);

  00536	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0053b	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0053f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c4_x
  00546	48 03 c8	 add	 rcx, rax
  00549	48 8b c1	 mov	 rax, rcx
  0054c	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  00551	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00556	41 b8 c4 00 00
	00		 mov	 r8d, 196		; 000000c4H
  0055c	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00560	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00564	e8 00 00 00 00	 call	 replace_opcode_xx_x

; 7362 :       replace_opcode_xx_x(arch, gen_opcode_c6_x[i][arch], 0xc6, i);

  00569	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0056e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00572	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c6_x
  00579	48 03 c8	 add	 rcx, rax
  0057c	48 8b c1	 mov	 rax, rcx
  0057f	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  00584	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00589	41 b8 c6 00 00
	00		 mov	 r8d, 198		; 000000c6H
  0058f	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00593	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00597	e8 00 00 00 00	 call	 replace_opcode_xx_x

; 7363 :       replace_opcode_xx_x(arch, gen_opcode_c8_x[i][arch], 0xc8, i);

  0059c	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  005a1	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  005a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_c8_x
  005ac	48 03 c8	 add	 rcx, rax
  005af	48 8b c1	 mov	 rax, rcx
  005b2	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  005b7	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  005bc	41 b8 c8 00 00
	00		 mov	 r8d, 200		; 000000c8H
  005c2	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  005c6	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  005ca	e8 00 00 00 00	 call	 replace_opcode_xx_x

; 7364 :       replace_opcode_xx_x(arch, gen_opcode_cc_x[i][arch], 0xcc, i);

  005cf	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  005d4	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  005d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_cc_x
  005df	48 03 c8	 add	 rcx, rax
  005e2	48 8b c1	 mov	 rax, rcx
  005e5	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  005ea	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  005ef	41 b8 cc 00 00
	00		 mov	 r8d, 204		; 000000ccH
  005f5	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  005f9	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  005fd	e8 00 00 00 00	 call	 replace_opcode_xx_x

; 7365 :     }

  00602	e9 0d fe ff ff	 jmp	 $LN14@init_runti
$LN15@init_runti:

; 7366 : 
; 7367 :     // "Optimized" Instructions
; 7368 : 
; 7369 : #if defined( OPTION_OPTINST )
; 7370 : 
; 7371 :     for(i = 0; i < 256; i++)

  00607	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0060f	eb 0a		 jmp	 SHORT $LN19@init_runti
$LN17@init_runti:
  00611	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00615	ff c0		 inc	 eax
  00617	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN19@init_runti:
  0061b	81 7c 24 20 00
	01 00 00	 cmp	 DWORD PTR i$[rsp], 256	; 00000100H
  00623	0f 8d 04 01 00
	00		 jge	 $LN18@init_runti

; 7372 :     {
; 7373 :       replace_opcode_xxxx(arch, gen_opcode_15__[i][arch], 0x15, i); /* Optimized CLR */

  00629	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0062e	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00632	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_15__
  00639	48 03 c8	 add	 rcx, rax
  0063c	48 8b c1	 mov	 rax, rcx
  0063f	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  00644	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00649	41 b8 15 00 00
	00		 mov	 r8d, 21
  0064f	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00653	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00657	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7374 :       replace_opcode_xxxx(arch, gen_opcode_18__[i][arch], 0x18, i); /* Optimized LR */

  0065c	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00661	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00665	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_18__
  0066c	48 03 c8	 add	 rcx, rax
  0066f	48 8b c1	 mov	 rax, rcx
  00672	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  00677	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  0067c	41 b8 18 00 00
	00		 mov	 r8d, 24
  00682	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00686	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  0068a	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7375 :       replace_opcode_xxxx(arch, gen_opcode_1E__[i][arch], 0x1e, i); /* Optimized ALR */

  0068f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00694	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00698	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_1E__
  0069f	48 03 c8	 add	 rcx, rax
  006a2	48 8b c1	 mov	 rax, rcx
  006a5	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  006aa	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  006af	41 b8 1e 00 00
	00		 mov	 r8d, 30
  006b5	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  006b9	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  006bd	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7376 :       replace_opcode_xxxx(arch, gen_opcode_1F__[i][arch], 0x1f, i); /* Optimized SLR */

  006c2	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  006c7	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  006cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_1F__
  006d2	48 03 c8	 add	 rcx, rax
  006d5	48 8b c1	 mov	 rax, rcx
  006d8	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  006dd	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  006e2	41 b8 1f 00 00
	00		 mov	 r8d, 31
  006e8	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  006ec	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  006f0	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7377 :       replace_opcode_xxxx(arch, gen_opcode_BF_x[0][arch], 0xbf, i); /* Optimized ICM */

  006f5	b8 28 00 00 00	 mov	 eax, 40			; 00000028H
  006fa	48 6b c0 00	 imul	 rax, rax, 0
  006fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_BF_x
  00705	48 03 c8	 add	 rcx, rax
  00708	48 8b c1	 mov	 rax, rcx
  0070b	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  00710	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  00715	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  0071b	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  0071f	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00723	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7378 :     }

  00728	e9 e4 fe ff ff	 jmp	 $LN17@init_runti
$LN18@init_runti:

; 7379 : 
; 7380 :     for(i = 0; i < 16; i++)

  0072d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00735	eb 0a		 jmp	 SHORT $LN22@init_runti
$LN20@init_runti:
  00737	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0073b	ff c0		 inc	 eax
  0073d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN22@init_runti:
  00741	83 7c 24 20 10	 cmp	 DWORD PTR i$[rsp], 16
  00746	0f 8d 93 01 00
	00		 jge	 $LN21@init_runti

; 7381 :     {
; 7382 :       replace_opcode_xxxx(arch, gen_opcode_41_0[i][arch], 0x41, i << 4); /* Optimized LA */

  0074c	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00750	c1 e0 04	 shl	 eax, 4
  00753	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00758	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  0075c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gen_opcode_41_0
  00763	48 03 d1	 add	 rdx, rcx
  00766	48 8b ca	 mov	 rcx, rdx
  00769	48 63 54 24 24	 movsxd	 rdx, DWORD PTR arch$[rsp]
  0076e	44 8b c8	 mov	 r9d, eax
  00771	41 b8 41 00 00
	00		 mov	 r8d, 65			; 00000041H
  00777	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  0077b	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  0077f	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7383 :       replace_opcode_xxxx(arch, gen_opcode_47_0[i][arch], 0x47, i << 4); /* Optimized BC */

  00784	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00788	c1 e0 04	 shl	 eax, 4
  0078b	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00790	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  00794	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gen_opcode_47_0
  0079b	48 03 d1	 add	 rdx, rcx
  0079e	48 8b ca	 mov	 rcx, rdx
  007a1	48 63 54 24 24	 movsxd	 rdx, DWORD PTR arch$[rsp]
  007a6	44 8b c8	 mov	 r9d, eax
  007a9	41 b8 47 00 00
	00		 mov	 r8d, 71			; 00000047H
  007af	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  007b3	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  007b7	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7384 :       replace_opcode_xxxx(arch, gen_opcode_50_0[i][arch], 0x50, i << 4); /* Optimized ST */

  007bc	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  007c0	c1 e0 04	 shl	 eax, 4
  007c3	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  007c8	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  007cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gen_opcode_50_0
  007d3	48 03 d1	 add	 rdx, rcx
  007d6	48 8b ca	 mov	 rcx, rdx
  007d9	48 63 54 24 24	 movsxd	 rdx, DWORD PTR arch$[rsp]
  007de	44 8b c8	 mov	 r9d, eax
  007e1	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  007e7	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  007eb	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  007ef	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7385 :       replace_opcode_xxxx(arch, gen_opcode_55_0[i][arch], 0x55, i << 4); /* Optimized CL */

  007f4	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  007f8	c1 e0 04	 shl	 eax, 4
  007fb	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00800	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  00804	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gen_opcode_55_0
  0080b	48 03 d1	 add	 rdx, rcx
  0080e	48 8b ca	 mov	 rcx, rdx
  00811	48 63 54 24 24	 movsxd	 rdx, DWORD PTR arch$[rsp]
  00816	44 8b c8	 mov	 r9d, eax
  00819	41 b8 55 00 00
	00		 mov	 r8d, 85			; 00000055H
  0081f	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  00823	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00827	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7386 :       replace_opcode_xxxx(arch, gen_opcode_58_0[i][arch], 0x58, i << 4); /* Optimized L */

  0082c	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00830	c1 e0 04	 shl	 eax, 4
  00833	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00838	48 6b c9 28	 imul	 rcx, rcx, 40		; 00000028H
  0083c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gen_opcode_58_0
  00843	48 03 d1	 add	 rdx, rcx
  00846	48 8b ca	 mov	 rcx, rdx
  00849	48 63 54 24 24	 movsxd	 rdx, DWORD PTR arch$[rsp]
  0084e	44 8b c8	 mov	 r9d, eax
  00851	41 b8 58 00 00
	00		 mov	 r8d, 88			; 00000058H
  00857	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  0085b	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  0085f	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7387 :       replace_opcode_xxxx(arch, gen_opcode_BF_x[1][arch], 0xbf, (i << 4) + 0x7); /* Optimized ICM */

  00864	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00868	c1 e0 04	 shl	 eax, 4
  0086b	83 c0 07	 add	 eax, 7
  0086e	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00873	48 6b c9 01	 imul	 rcx, rcx, 1
  00877	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gen_opcode_BF_x
  0087e	48 03 d1	 add	 rdx, rcx
  00881	48 8b ca	 mov	 rcx, rdx
  00884	48 63 54 24 24	 movsxd	 rdx, DWORD PTR arch$[rsp]
  00889	44 8b c8	 mov	 r9d, eax
  0088c	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  00892	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  00896	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  0089a	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7388 :       replace_opcode_xxxx(arch, gen_opcode_BF_x[2][arch], 0xbf, (i << 4) + 0xf); /* Optimized ICM */

  0089f	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  008a3	c1 e0 04	 shl	 eax, 4
  008a6	83 c0 0f	 add	 eax, 15
  008a9	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  008ae	48 6b c9 02	 imul	 rcx, rcx, 2
  008b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gen_opcode_BF_x
  008b9	48 03 d1	 add	 rdx, rcx
  008bc	48 8b ca	 mov	 rcx, rdx
  008bf	48 63 54 24 24	 movsxd	 rdx, DWORD PTR arch$[rsp]
  008c4	44 8b c8	 mov	 r9d, eax
  008c7	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  008cd	48 8b 14 d1	 mov	 rdx, QWORD PTR [rcx+rdx*8]
  008d1	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  008d5	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7389 : #if !defined( OPTION_NO_E3_OPTINST )
; 7390 :       replace_opcode_xxxx(arch, gen_opcode_E3_0[0][arch], 0xe3, i << 4);
; 7391 : #endif
; 7392 :     }

  008da	e9 58 fe ff ff	 jmp	 $LN20@init_runti
$LN21@init_runti:

; 7393 : 
; 7394 :     bit = 0x80;

  008df	c7 44 24 28 80
	00 00 00	 mov	 DWORD PTR bit$[rsp], 128 ; 00000080H

; 7395 : 
; 7396 :     for(i = 0; i < 8; i++)

  008e7	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  008ef	eb 0a		 jmp	 SHORT $LN25@init_runti
$LN23@init_runti:
  008f1	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  008f5	ff c0		 inc	 eax
  008f7	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN25@init_runti:
  008fb	83 7c 24 20 08	 cmp	 DWORD PTR i$[rsp], 8
  00900	7d 3f		 jge	 SHORT $LN24@init_runti

; 7397 :     {
; 7398 :       replace_opcode_xxxx(arch, gen_opcode_91xx[i][arch], 0x91, bit); /* Single bit TM */

  00902	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00907	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  0090b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_91xx
  00912	48 03 c8	 add	 rcx, rax
  00915	48 8b c1	 mov	 rax, rcx
  00918	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR arch$[rsp]
  0091d	44 8b 4c 24 28	 mov	 r9d, DWORD PTR bit$[rsp]
  00922	41 b8 91 00 00
	00		 mov	 r8d, 145		; 00000091H
  00928	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  0092c	8b 4c 24 24	 mov	 ecx, DWORD PTR arch$[rsp]
  00930	e8 00 00 00 00	 call	 replace_opcode_xxxx

; 7399 :       bit >>= 1;

  00935	8b 44 24 28	 mov	 eax, DWORD PTR bit$[rsp]
  00939	d1 f8		 sar	 eax, 1
  0093b	89 44 24 28	 mov	 DWORD PTR bit$[rsp], eax

; 7400 :     }

  0093f	eb b0		 jmp	 SHORT $LN23@init_runti
$LN24@init_runti:

; 7401 : 
; 7402 : #if !defined( OPTION_NO_E3_OPTINST )
; 7403 : 
; 7404 :     for(i = 0; i < 256; i++)
; 7405 :     {
; 7406 :       switch(i)
; 7407 :       {
; 7408 :         case 0x04:
; 7409 : 
; 7410 :           runtime_opcode_e3_0______xx[arch][i] = gen_opcode_E3_0______04[0][arch]; /* Optimized LG */
; 7411 :           break;
; 7412 : 
; 7413 :         case 0x24:
; 7414 : 
; 7415 :           runtime_opcode_e3_0______xx[arch][i] = gen_opcode_E3_0______24[0][arch]; /* Optimized STG */
; 7416 :           break;
; 7417 : 
; 7418 :         default:
; 7419 : 
; 7420 :           runtime_opcode_e3_0______xx[arch][i] = gen_opcode_e3xx[i][arch];
; 7421 :           break;
; 7422 :       }
; 7423 :     }
; 7424 : 
; 7425 : #endif /* !defined( OPTION_NO_E3_OPTINST ) */
; 7426 : 
; 7427 : #endif /* defined( OPTION_OPTINST ) */
; 7428 :   }

  00941	e9 c8 f6 ff ff	 jmp	 $LN2@init_runti
$LN3@init_runti:

; 7429 : }

  00946	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0094a	c3		 ret	 0
init_runtime_opcode_tables ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\opcode.c
_TEXT	SEGMENT
iprt_info_string$ = 32
iprt_asmfmt_func$ = 40
arch_mode$ = 64
inst$ = 72
unused$ = 80
prtbuf$ = 88
iprint_router_func PROC

; 1947 : {

$LN6:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@iprint_rou:

; 1948 :     ROUTE_IPRINT( arch_mode, table, [0] );   /* Route based on primary opcode [0] */

  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 fa		 jne	 SHORT $LN4@iprint_rou
  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 00	 imul	 rax, rax, 0
  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  0002b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0002f	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_table
  0003a	48 03 c8	 add	 rcx, rax
  0003d	48 8b c1	 mov	 rax, rcx
  00040	b9 08 00 00 00	 mov	 ecx, 8
  00045	48 6b c9 03	 imul	 rcx, rcx, 3
  00049	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0004d	48 89 44 24 28	 mov	 QWORD PTR iprt_asmfmt_func$[rsp], rax
  00052	b8 01 00 00 00	 mov	 eax, 1
  00057	48 6b c0 00	 imul	 rax, rax, 0
  0005b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00060	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00064	48 6b c0 28	 imul	 rax, rax, 40		; 00000028H
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gen_opcode_table
  0006f	48 03 c8	 add	 rcx, rax
  00072	48 8b c1	 mov	 rax, rcx
  00075	b9 08 00 00 00	 mov	 ecx, 8
  0007a	48 6b c9 04	 imul	 rcx, rcx, 4
  0007e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00082	48 89 44 24 20	 mov	 QWORD PTR iprt_info_string$[rsp], rax
  00087	4c 8b 4c 24 58	 mov	 r9, QWORD PTR prtbuf$[rsp]
  0008c	4c 8b 44 24 20	 mov	 r8, QWORD PTR iprt_info_string$[rsp]
  00091	48 8b 54 24 48	 mov	 rdx, QWORD PTR inst$[rsp]
  00096	8b 4c 24 40	 mov	 ecx, DWORD PTR arch_mode$[rsp]
  0009a	ff 54 24 28	 call	 QWORD PTR iprt_asmfmt_func$[rsp]

; 1949 : }

  0009e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a2	c3		 ret	 0
iprint_router_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT

; 1771 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1779 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1780 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1458 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  0002c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00038	e8 00 00 00 00	 call	 _vsnprintf_l

; 1460 :     }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1391 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 83 c8 01	 or	 rax, 1
  00024	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0003d	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00050	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00054	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00059	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  0005b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00063	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00065	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00069	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  0006d	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1397 :     }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
