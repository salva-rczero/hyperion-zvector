; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	main
PUBLIC	Print_Dataset
PUBLIC	Print_Label
PUBLIC	Print_Label_Tapemap
PUBLIC	Print_Usage
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_isdigit:PROC
EXTRN	strcmp:PROC
EXTRN	strcpy:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_exit:PROC
EXTRN	__imp_atoi:PROC
EXTRN	__imp_atol:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp__ftelli64:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_strlcat:PROC
EXTRN	__imp_initialize_utility:PROC
EXTRN	__imp_w32_fprintf:PROC
EXTRN	__imp_guest_to_host:PROC
EXTRN	__imp_het_open:PROC
EXTRN	__imp_het_close:PROC
EXTRN	__imp_het_read:PROC
EXTRN	__imp_getopt:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_fet_open:PROC
EXTRN	__imp_fet_close:PROC
EXTRN	__imp_fet_read:PROC
EXTRN	__imp_sl_fmtdate:PROC
EXTRN	__imp_sl_fmtlab:PROC
EXTRN	__imp_sl_islabel:PROC
EXTRN	__imp_sl_istype:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__imp_extgui:DWORD
EXTRN	__imp_optind:DWORD
EXTRN	__imp_optarg:QWORD
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
prevpos	DQ	01H DUP (?)
gLastFileSeqSL DD 01H DUP (?)
gStdLblBuffer DB 051H DUP (?)
	ALIGN	4

gMltVolSet DB	07H DUP (?)
	ALIGN	4

gMltVolSeq DB	05H DUP (?)
	ALIGN	4

gBuffer	DB	0200001H DUP (?)
	ALIGN	4

gBlkCount DD	01H DUP (?)
gPrevBlkCnt DD	01H DUP (?)
gLength	DD	01H DUP (?)
gLenPrtd DD	01H DUP (?)
$SG159704 DB	01H DUP (?)
	ALIGN	4

$SG159708 DB	01H DUP (?)
	ALIGN	4

$SG159721 DB	01H DUP (?)
	ALIGN	4

$SG159722 DB	01H DUP (?)
	ALIGN	4

$SG159732 DB	01H DUP (?)
	ALIGN	4

$SG159748 DB	01H DUP (?)
	ALIGN	4

$SG159752 DB	01H DUP (?)
	ALIGN	4

$SG159756 DB	01H DUP (?)
	ALIGN	4

$SG159761 DB	01H DUP (?)
	ALIGN	4

$SG159767 DB	01H DUP (?)
	ALIGN	4

$SG159768 DB	01H DUP (?)
	ALIGN	4

$SG159787 DB	01H DUP (?)
	ALIGN	4

$SG159790 DB	01H DUP (?)
	ALIGN	4

$SG159843 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$main DD	imagerel $LN104
	DD	imagerel $LN104+3352
	DD	imagerel $unwind$main
$pdata$Print_Dataset DD imagerel $LN11
	DD	imagerel $LN11+612
	DD	imagerel $unwind$Print_Dataset
$pdata$Print_Label DD imagerel $LN7
	DD	imagerel $LN7+199
	DD	imagerel $unwind$Print_Label
$pdata$Print_Label_Tapemap DD imagerel $LN9
	DD	imagerel $LN9+206
	DD	imagerel $unwind$Print_Label_Tapemap
$pdata$Print_Usage DD imagerel $LN5
	DD	imagerel $LN5+200
	DD	imagerel $unwind$Print_Usage
$pdata$Print_Standard_Labels DD imagerel Print_Standard_Labels
	DD	imagerel Print_Standard_Labels+4742
	DD	imagerel $unwind$Print_Standard_Labels
$pdata$Print_Block_Data DD imagerel Print_Block_Data
	DD	imagerel Print_Block_Data+1280
	DD	imagerel $unwind$Print_Block_Data
pdata	ENDS
_DATA	SEGMENT
ebcdic_to_ascii DB 00H, 01H, 02H, 03H, 0a6H, 09H, 0a7H, 07fH, 0a9H, 0b0H, 0b1H
	DB	0bH, 0cH, 0dH, 0eH, 0fH, 010H, 011H, 012H, 013H, 0b2H, 0aH, 08H
	DB	0b7H, 018H, 019H, 01aH, 0b8H, 0baH, 01dH, 0bbH, 01fH, 0bdH, 0c0H
	DB	01cH, 0c1H, 0c2H, 0aH, 017H, 01bH, 0c3H, 0c4H, 0c5H, 0c6H, 0c7H
	DB	05H, 06H, 07H, 0c8H, 0c9H, 016H, 0cbH, 0ccH, 01eH, 0cdH, 04H, 0ceH
	DB	0d0H, 0d1H, 0d2H, 014H, 015H, 0d3H, 0fcH, ' ', 0d4H, 083H, 084H
	DB	085H, 0a0H, 0d5H, 086H, 087H, 0a4H, 0d6H, '.<(+', 0d7H, '&', 082H
	DB	088H, 089H, 08aH, 0a1H, 08cH, 08bH, 08dH, 0d8H, '!$*);^-/', 0d9H
	DB	08eH, 0dbH, 0dcH, 0ddH, 08fH, 080H, 0a5H, '|,%_>?', 0deH, 090H
	DB	0dfH, 0e0H, 0e2H, 0e3H, 0e4H, 0e5H, 0e6H, '`:#@''="', 0e7H, 'a'
	DB	'bcdefghi', 0aeH, 0afH, 0e8H, 0e9H, 0eaH, 0ecH, 0f0H, 'jklmnop'
	DB	'qr', 0f1H, 0f2H, 091H, 0f3H, 092H, 0f4H, 0f5H, '~stuvwxyz', 0adH
	DB	0a8H, 0f6H, '[', 0f7H, 0f8H, 09bH, 09cH, 09dH, 09eH, 09fH, 0b5H
	DB	0b6H, 0acH, 0abH, 0b9H, 0aaH, 0b3H, 0bcH, ']', 0beH, 0bfH, '{A'
	DB	'BCDEFGHI', 0caH, 093H, 094H, 095H, 0a2H, 0cfH, '}JKLMNOPQR', 0daH
	DB	096H, 081H, 097H, 0a3H, 098H, '\', 0e1H, 'STUVWXYZ', 0fdH, 0ebH
	DB	099H, 0edH, 0eeH, 0efH, '0123456789', 0feH, 0fbH, 09aH, 0f9H, 0faH
	DB	0ffH, 00H
	ORG $+15
ebcdic_to_printable_ascii DB '...........................................'
	DB	'..................... ...........<(+<&..........$*);^-/......'
	DB	'..|,%_>?.........`:#@''=".abcdefghi.......jklmnopqr.......~st'
	DB	'uvwxyz...[...............]..{ABCDEFGHI......}JKLMNOPQR......\'
	DB	'.STUVWXYZ......0123456789......', 00H
	ORG $+7
sep	DB	'---------------------', 0aH, 00H
	ORG $+1
ascii_to_printable_ascii DB '................................ !"#$%&''()*'
	DB	'+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefg'
	DB	'hijklmnopqrstuvwxyz{|}~................................. !"#$'
	DB	'%&''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`'
	DB	'abcdefghijklmnopqrstuvwxyz{|}~.', 00H
	ORG $+3
max_bytes_dsply DD 0400H
$SG159421 DB	'AWS, HET and FakeTape map program', 00H
	ORG $+2
$SG159422 DB	'hetmap', 00H
	ORG $+1
$SG159439 DB	'%s', 00H
	ORG $+1
$SG159424 DB	'ab:dfhlst', 00H
	ORG $+2
$SG159466 DB	'%s', 00H
	ORG $+1
$SG159440 DB	'Filename', 00H
	ORG $+3
$SG159467 DB	'File #', 00H
	ORG $+1
$SG159506 DB	'HDR', 00H
$SG159441 DB	'%-20.20s: %s', 0aH, 00H
	ORG $+2
$SG159443 DB	'.fkt', 00H
	ORG $+3
$SG159449 DB	'fet_open() returned %d', 0aH, 00H
$SG159450 DB	'het_open() returned %d', 0aH, 00H
$SG159456 DB	'IPOS=%lld', 0aH, 00H
	ORG $+1
$SG159507 DB	'EOF', 00H
$SG159461 DB	'End of tape.', 0aH, 00H
	ORG $+2
$SG159464 DB	'File %d: Blocks=%d, block size min=%d, max=%d', 0aH, 00H
	ORG $+1
$SG159468 DB	'%-20.20s: %d', 0aH, 00H
	ORG $+2
$SG159469 DB	'Blocks', 00H
	ORG $+1
$SG159470 DB	'%-20.20s: %d', 0aH, 00H
	ORG $+2
$SG159471 DB	'Min Blocksize', 00H
	ORG $+2
$SG159472 DB	'%-20.20s: %d', 0aH, 00H
	ORG $+2
$SG159473 DB	'Max Blocksize', 00H
	ORG $+2
$SG159474 DB	'%-20.20s: %d', 0aH, 00H
	ORG $+2
$SG159476 DB	'Uncompressed bytes', 00H
	ORG $+1
$SG159508 DB	'VOL', 00H
$SG159477 DB	'%-20.20s: %d', 0aH, 00H
	ORG $+2
$SG159478 DB	'Min Blocksize-Comp', 00H
	ORG $+1
$SG159509 DB	'EOV', 00H
$SG159479 DB	'%-20.20s: %d', 0aH, 00H
	ORG $+2
$SG159480 DB	'Max Blocksize-Comp', 00H
	ORG $+1
$SG159510 DB	'UHL', 00H
$SG159481 DB	'%-20.20s: %d', 0aH, 00H
	ORG $+2
$SG159482 DB	'Compressed bytes', 00H
	ORG $+3
$SG159511 DB	'UTL', 00H
$SG159483 DB	'%-20.20s: %d', 0aH, 00H
	ORG $+2
$SG159487 DB	'fet_read() returned %d', 0aH, 00H
$SG159488 DB	'het_read() returned %d', 0aH, 00H
$SG159520 DB	'%s', 00H
	ORG $+1
$SG159569 DB	'%s', 00H
	ORG $+1
$SG159521 DB	'Summary', 00H
$SG159522 DB	'%-20.20s:', 0aH, 00H
	ORG $+1
$SG159523 DB	'Files', 00H
	ORG $+2
$SG159525 DB	'Blocks', 00H
	ORG $+1
$SG159582 DB	'%s', 0aH, 00H
$SG159524 DB	'%-20.20s: %d', 0aH, 00H
	ORG $+2
$SG159526 DB	'%-20.20s: %d', 0aH, 00H
	ORG $+2
$SG159528 DB	'Uncompressed bytes', 00H
	ORG $+1
$SG159589 DB	'I', 00H
	ORG $+2
$SG159529 DB	'%-20.20s: %llu', 0aH, 00H
$SG159530 DB	'Compressed bytes', 00H
	ORG $+3
$SG159593 DB	'I', 00H
	ORG $+2
$SG159531 DB	'%-20.20s: %llu', 0aH, 00H
$SG159532 DB	'Reduction', 00H
	ORG $+2
$SG159692 DB	'VOL', 00H
$SG159533 DB	'%-20.20s: %llu', 0aH, 00H
$SG159551 DB	'vol=%-17.17s  owner=%s', 0aH, 0aH, 00H
	ORG $+3
$SG159695 DB	'HDR', 00H
$SG159554 DB	'seq=%-17d  file#=%d', 0aH, 00H
	ORG $+3
$SG159555 DB	'dsn=%-17.17s  crtdt=%-8.8s  expdt=%-8.8s  blocks=%d', 0aH
	DB	00H
	ORG $+3
$SG159557 DB	'job=%17.17s  recfm=%-3.3s       lrecl=%-5d     blksize=%'
	DB	'-5d', 0aH, 0aH, 00H
	ORG $+2
$SG159570 DB	'%-20.20s: ''%s''', 0aH, 00H
$SG159588 DB	'tapemap', 00H
$SG159696 DB	'EOF', 00H
	ORG $+4
$SG159590 DB	'HHC02758%s Usage: %s [options] infile', 0aH, 'HHC02758I '
	DB	'  infile  name of input file', 0aH, 'HHC02758I Options:', 0aH
	DB	'HHC02758I   -a      print all label and file information (def'
	DB	'ault: on)', 0aH, 'HHC02758I   -bn     print ''n'' bytes per f'
	DB	'ile; -b implies -s', 0aH, 'HHC02758I   -d      print only dat'
	DB	'aset information (default: off)', 0aH, 'HHC02758I   -f      p'
	DB	'rint only file information (default: off)', 0aH, 'HHC02758I  '
	DB	' -h      display usage summary', 0aH, 'HHC02758I   -l      pr'
	DB	'int only label information (default: off)', 0aH, 'HHC02758I  '
	DB	' -s      print dump of each data file (SLANAL format) (defaul'
	DB	't: off)', 0aH, 'HHC02758I   -t      print TAPEMAP-compatible '
	DB	'format output (default: off)', 0aH, 0aH, 00H
	ORG $+2
$SG159697 DB	'EOV', 00H
$SG159591 DB	'Print_Usage', 00H
$SG159700 DB	'UHL', 00H
$SG159592 DB	'hetmap.c', 00H
	ORG $+3
$SG159701 DB	'UTL', 00H
$SG159594 DB	'HHC02759%s Usage: %s filename', 0aH, 0aH, 00H
$SG159595 DB	'Print_Usage', 00H
$SG159718 DB	0cH, 00H
	ORG $+2
$SG159596 DB	'hetmap.c', 00H
	ORG $+3
$SG159705 DB	0aH, '%-2s', 00H
	ORG $+2
$SG159729 DB	'20', 00H
	ORG $+1
$SG159686 DB	'%3c%1c%*76c', 00H
$SG159730 DB	'19', 00H
	ORG $+1
$SG159703 DB	'%*3c%*1c%6c%1c%*5c%*21c%14c%*29c', 00H
	ORG $+3
$SG159736 DB	'00000', 00H
	ORG $+2
$SG159745 DB	'20', 00H
	ORG $+1
$SG159709 DB	'Standard Label Tape', 0aH, 0aH, '%-4sVolSer: %-10sOwner:'
	DB	' %s', 0aH, 00H
	ORG $+3
$SG159746 DB	'19', 00H
	ORG $+1
$SG159710 DB	'%-4s %1s %-s', 0aH, 00H
	ORG $+2
$SG159713 DB	'%*3c%*1c%17c%6c%4c%4c%4c%2c%6c%6c%1c%6c%13c%*3c%4c', 00H
	ORG $+1
$SG159760 DB	0aH, 00H
	ORG $+2
$SG159723 DB	0aH, '%-4sSL File Seq: %-4d%-3sDSNAME: %-20s', 00H
$SG159724 DB	'Created: ', 00H
	ORG $+2
$SG159731 DB	'2%1c', 00H
	ORG $+3
$SG159773 DB	'BS', 00H
	ORG $+1
$SG159733 DB	'%02d.%03d%-3s', 00H
	ORG $+2
$SG159737 DB	'Expires: ', 00H
	ORG $+2
$SG159777 DB	'%d', 00H
	ORG $+1
$SG159740 DB	'TMS-%-5s', 00H
	ORG $+3
$SG159747 DB	'2%1c', 00H
	ORG $+3
$SG159781 DB	'%ld', 00H
$SG159749 DB	'%02d.%03d%-1s', 00H
	ORG $+2
$SG159750 DB	'NO EXPDT', 00H
	ORG $+3
$SG159751 DB	'%-9s', 00H
	ORG $+3
$SG159782 DB	'%d', 00H
	ORG $+1
$SG159753 DB	'%-3sSystem: %s', 0aH, 00H
$SG159757 DB	'%-4sBlock Count: Expected %llu; Actual %d', 00H
	ORG $+2
$SG159783 DB	')', 00H
	ORG $+2
$SG159762 DB	'%-4s---> BLOCK COUNT MISMATCH <---', 0aH, 00H
	ORG $+4
$SG159764 DB	'%*3c%*1c%1c%5c%5c%1c%1c%8c%*1c%8c%2c%1c%*1c%1c%*2c%*6c%1'
	DB	'c%*22c%10c', 00H
	ORG $+1
$SG159792 DB	0aH, 00H
	ORG $+2
$SG159769 DB	'%-4sCreated by: Job %-8s; Step %-11s%-6s', 00H
	ORG $+3
$SG159784 DB	'%-51s', 00H
	ORG $+2
?lASCII@?1??Print_Block_Data@@9@9 DB 'ASCII ', 00H	; `Print_Block_Data'::`2'::lASCII
	ORG $+1
$SG159850 DB	' ', 00H
	ORG $+2
$SG159770 DB	'DCB=(RECFM=', 00H
$SG159852 DB	' ', 00H
	ORG $+2
$SG159776 DB	',LRECL=', 00H
$SG159778 DB	',BLKSIZE=', 00H
	ORG $+2
?lEBCDIC@?1??Print_Block_Data@@9@9 DB 'EBCDIC', 00H	; `Print_Block_Data'::`2'::lEBCDIC
	ORG $+1
$SG159854 DB	0aH, 00H
	ORG $+2
$SG159788 DB	0aH, '%-4sTape is part %d of multi-volume set %s', 0aH, 00H
	ORG $+3
$SG159791 DB	'%-3sCompression: IDRC', 00H
	ORG $+2
$SG159793 DB	'========================================================'
	DB	'============================================================='
	DB	'===================================', 0aH, 00H
	ORG $+6
$SG159795 DB	'%-4s %1d %-s', 0aH, 00H
	ORG $+2
$SG159797 DB	'%-4s %1d %-s', 0aH, 00H
	ORG $+2
$SG159844 DB	0aH, 0aH, 'ADDR%-4sBLOCK %-2d BYTES %-6d%s*%s%s%s|%s%s%s*'
	DB	0aH, 00H
	ORG $+6
$SG159847 DB	'%04X    ', 00H
	ORG $+3
$SG159848 DB	'%02X', 00H
	ORG $+7
$SG159853 DB	'%s*%s|%s*', 0aH, 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:Print_Block_Data
	DD	017H
	DD	04e6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:Print_Standard_Labels
	DD	013H
	DD	0126dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:Print_Label_Tapemap
	DD	015H
	DD	0b6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:Print_Label
	DD	015H
	DD	0afH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:Print_Dataset
	DD	019H
	DD	024cH
voltbl	ENDS
xdata	SEGMENT
$unwind$main DD	031101H
	DD	01c0111H
	DD	0700aH
$unwind$Print_Dataset DD 022119H
	DD	043010fH
	DD	imagerel __GSHandlerCheck
	DD	0200H
$unwind$Print_Label DD 021d19H
	DD	03b010bH
	DD	imagerel __GSHandlerCheck
	DD	01c0H
$unwind$Print_Label_Tapemap DD 021d19H
	DD	01f010bH
	DD	imagerel __GSHandlerCheck
	DD	0e0H
$unwind$Print_Usage DD 010901H
	DD	08209H
$unwind$Print_Standard_Labels DD 031b19H
	DD	0620109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	0300H
$unwind$Print_Block_Data DD 041f19H
	DD	021010dH
	DD	060057006H
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetmap.c
_TEXT	SEGMENT
B$ = 96
J$ = 100
lAmt2Prt$ = 104
Cl$ = 108
Kl$ = 112
I$ = 116
lLenSpace$ = 120
K$ = 124
Kr$ = 128
pAscii$ = 136
pEbcdic$ = 144
pSpaces$ = 152
tv236 = 160
$T1 = 168
pAsciiBuf$ = 176
pEbcdicBuf$ = 184
tv131 = 192
tv168 = 200
lPadding$ = 208
__$ArrayPad$ = 248
prtlen$ = 288
Print_Block_Data PROC

; 967  : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	56		 push	 rsi
  00005	57		 push	 rdi
  00006	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H
  0000d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00014	48 33 c4	 xor	 rax, rsp
  00017	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 968  :     SInt32      B, I, J, K, Kr, Kl, Cl;
; 969  :     char*       pAsciiBuf;
; 970  :     char*       pAscii;
; 971  :     char*       pEbcdicBuf;
; 972  :     char*       pEbcdic;
; 973  :     char*       pSpaces;
; 974  :     char        lPadding[bytes_per_line + 1];
; 975  :     SInt32      lLenSpace   = ( ( bytes_per_line / 4 ) * 9 ) + ( bytes_per_line / 16 ) - 7;

  0001f	c7 44 24 78 43
	00 00 00	 mov	 DWORD PTR lLenSpace$[rsp], 67 ; 00000043H

; 976  :     SInt32      lAmt2Prt    = 0;

  00027	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR lAmt2Prt$[rsp], 0

; 977  :     static char lASCII[7] = "ASCII ";
; 978  :     static char lEBCDIC[7] = "EBCDIC";
; 979  : 
; 980  :     if ( gBlkCount == 1 )

  0002f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR gBlkCount, 1
  00036	75 28		 jne	 SHORT $LN11@Print_Bloc

; 981  :     {   if ( prtlen >= max_bytes_dsply )

  00038	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR max_bytes_dsply
  0003e	39 84 24 20 01
	00 00		 cmp	 DWORD PTR prtlen$[rsp], eax
  00045	7c 0c		 jl	 SHORT $LN13@Print_Bloc

; 982  :         lAmt2Prt = max_bytes_dsply;

  00047	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR max_bytes_dsply
  0004d	89 44 24 68	 mov	 DWORD PTR lAmt2Prt$[rsp], eax
  00051	eb 0b		 jmp	 SHORT $LN14@Print_Bloc
$LN13@Print_Bloc:

; 983  :     else
; 984  :         lAmt2Prt = prtlen;

  00053	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR prtlen$[rsp]
  0005a	89 44 24 68	 mov	 DWORD PTR lAmt2Prt$[rsp], eax
$LN14@Print_Bloc:

; 985  :     }

  0005e	eb 0b		 jmp	 SHORT $LN12@Print_Bloc
$LN11@Print_Bloc:

; 986  :     else
; 987  :         lAmt2Prt = prtlen;

  00060	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR prtlen$[rsp]
  00067	89 44 24 68	 mov	 DWORD PTR lAmt2Prt$[rsp], eax
$LN12@Print_Bloc:

; 988  : 
; 989  :     pAsciiBuf   = malloc ( max_bytes_dsply );

  0006b	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR max_bytes_dsply
  00072	48 8b c8	 mov	 rcx, rax
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0007b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR pAsciiBuf$[rsp], rax

; 990  :     pEbcdicBuf  = malloc ( max_bytes_dsply );

  00083	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR max_bytes_dsply
  0008a	48 8b c8	 mov	 rcx, rax
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00093	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR pEbcdicBuf$[rsp], rax

; 991  :     pAscii      = malloc ( bytes_per_line + 1 );

  0009b	b9 21 00 00 00	 mov	 ecx, 33			; 00000021H
  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000a6	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR pAscii$[rsp], rax

; 992  :     pEbcdic     = malloc ( bytes_per_line + 1 );

  000ae	b9 21 00 00 00	 mov	 ecx, 33			; 00000021H
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000b9	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR pEbcdic$[rsp], rax

; 993  : 
; 994  :     pSpaces = malloc( lLenSpace + 12 );

  000c1	8b 44 24 78	 mov	 eax, DWORD PTR lLenSpace$[rsp]
  000c5	83 c0 0c	 add	 eax, 12
  000c8	48 98		 cdqe
  000ca	48 8b c8	 mov	 rcx, rax
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000d3	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR pSpaces$[rsp], rax

; 995  :     BLANK_OUT ( pSpaces, lLenSpace + 12 );

  000db	8b 44 24 78	 mov	 eax, DWORD PTR lLenSpace$[rsp]
  000df	83 c0 0b	 add	 eax, 11
  000e2	48 98		 cdqe
  000e4	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv131[rsp], rax
  000ec	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR pSpaces$[rsp]
  000f4	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  000f9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv131[rsp]
  00101	f3 aa		 rep stosb
  00103	8b 44 24 78	 mov	 eax, DWORD PTR lLenSpace$[rsp]
  00107	83 c0 0b	 add	 eax, 11
  0010a	48 98		 cdqe
  0010c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pSpaces$[rsp]
  00114	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 996  : 
; 997  :     ZERO_OUT ( lPadding, sizeof ( lPadding ) );

  00118	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR lPadding$[rsp]
  00120	48 8b f8	 mov	 rdi, rax
  00123	33 c0		 xor	 eax, eax
  00125	b9 21 00 00 00	 mov	 ecx, 33			; 00000021H
  0012a	f3 aa		 rep stosb

; 998  : 
; 999  :     for ( B = 0; B < (SInt32)lAmt2Prt; B++ )

  0012c	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR B$[rsp], 0
  00134	eb 0a		 jmp	 SHORT $LN4@Print_Bloc
$LN2@Print_Bloc:
  00136	8b 44 24 60	 mov	 eax, DWORD PTR B$[rsp]
  0013a	ff c0		 inc	 eax
  0013c	89 44 24 60	 mov	 DWORD PTR B$[rsp], eax
$LN4@Print_Bloc:
  00140	8b 44 24 68	 mov	 eax, DWORD PTR lAmt2Prt$[rsp]
  00144	39 44 24 60	 cmp	 DWORD PTR B$[rsp], eax
  00148	7d 58		 jge	 SHORT $LN3@Print_Bloc

; 1000 :     {
; 1001 :         pAsciiBuf[B] = ascii_to_printable_ascii[(int)gBuffer[B]];

  0014a	48 63 44 24 60	 movsxd	 rax, DWORD PTR B$[rsp]
  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gBuffer
  00156	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ascii_to_printable_ascii
  00161	48 63 54 24 60	 movsxd	 rdx, DWORD PTR B$[rsp]
  00166	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR pAsciiBuf$[rsp]
  0016e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00172	88 04 17	 mov	 BYTE PTR [rdi+rdx], al

; 1002 :         pEbcdicBuf[B] = ebcdic_to_printable_ascii[(int)gBuffer[B]];

  00175	48 63 44 24 60	 movsxd	 rax, DWORD PTR B$[rsp]
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gBuffer
  00181	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00185	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ebcdic_to_printable_ascii
  0018c	48 63 54 24 60	 movsxd	 rdx, DWORD PTR B$[rsp]
  00191	48 8b bc 24 b8
	00 00 00	 mov	 rdi, QWORD PTR pEbcdicBuf$[rsp]
  00199	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0019d	88 04 17	 mov	 BYTE PTR [rdi+rdx], al

; 1003 :     }

  001a0	eb 94		 jmp	 SHORT $LN2@Print_Bloc
$LN3@Print_Bloc:

; 1004 : 
; 1005 :     Kl = bytes_per_line;

  001a2	c7 44 24 70 20
	00 00 00	 mov	 DWORD PTR Kl$[rsp], 32	; 00000020H

; 1006 : 
; 1007 :     K  = lAmt2Prt / Kl;             /* how many lines             */

  001aa	8b 44 24 68	 mov	 eax, DWORD PTR lAmt2Prt$[rsp]
  001ae	99		 cdq
  001af	f7 7c 24 70	 idiv	 DWORD PTR Kl$[rsp]
  001b3	89 44 24 7c	 mov	 DWORD PTR K$[rsp], eax

; 1008 :     Kr = lAmt2Prt % Kl;             /* how many on line last line */

  001b7	8b 44 24 68	 mov	 eax, DWORD PTR lAmt2Prt$[rsp]
  001bb	99		 cdq
  001bc	f7 7c 24 70	 idiv	 DWORD PTR Kl$[rsp]
  001c0	8b c2		 mov	 eax, edx
  001c2	89 84 24 80 00
	00 00		 mov	 DWORD PTR Kr$[rsp], eax

; 1009 : 
; 1010 :     B = 0;

  001c9	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR B$[rsp], 0

; 1011 : 
; 1012 :     J = ( ( bytes_per_line - sizeof ( lASCII ) + 1 ) / 2 ) + ( ( bytes_per_line - sizeof ( lASCII ) + 1 ) % 2) + 1;

  001d1	c7 44 24 64 0e
	00 00 00	 mov	 DWORD PTR J$[rsp], 14

; 1013 : 
; 1014 :     BLANK_OUT ( lPadding, J );

  001d9	8b 44 24 64	 mov	 eax, DWORD PTR J$[rsp]
  001dd	ff c8		 dec	 eax
  001df	48 98		 cdqe
  001e1	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv168[rsp], rax
  001e9	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR lPadding$[rsp]
  001f1	48 8b f9	 mov	 rdi, rcx
  001f4	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  001f9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv168[rsp]
  00201	f3 aa		 rep stosb
  00203	8b 44 24 64	 mov	 eax, DWORD PTR J$[rsp]
  00207	ff c8		 dec	 eax
  00209	48 98		 cdqe
  0020b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR $T1[rsp], rax
  00213	48 83 bc 24 a8
	00 00 00 21	 cmp	 QWORD PTR $T1[rsp], 33	; 00000021H
  0021c	73 02		 jae	 SHORT $LN20@Print_Bloc
  0021e	eb 05		 jmp	 SHORT $LN21@Print_Bloc
$LN20@Print_Bloc:
  00220	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN21@Print_Bloc:
  00225	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR $T1[rsp]
  0022d	c6 84 04 d0 00
	00 00 00	 mov	 BYTE PTR lPadding$[rsp+rax], 0

; 1015 : 
; 1016 :     printf ( "\n\nADDR%-4sBLOCK %-2d BYTES %-6d%s*%s%s%s|%s%s%s*\n"

  00235	b8 01 00 00 00	 mov	 eax, 1
  0023a	48 6b c0 19	 imul	 rax, rax, 25
  0023e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pSpaces$[rsp]
  00246	48 03 c8	 add	 rcx, rax
  00249	48 8b c1	 mov	 rax, rcx
  0024c	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR lPadding$[rsp]
  00254	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?lASCII@?1??Print_Block_Data@@9@9
  00260	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00265	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR lPadding$[rsp]
  0026d	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00272	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR lPadding$[rsp]
  0027a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0027f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?lEBCDIC@?1??Print_Block_Data@@9@9
  00286	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0028b	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR lPadding$[rsp]
  00293	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00298	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0029d	44 8b 4c 24 68	 mov	 r9d, DWORD PTR lAmt2Prt$[rsp]
  002a2	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR gBlkCount
  002a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159843
  002b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159844
  002b7	e8 00 00 00 00	 call	 printf

; 1017 :             , ""
; 1018 :             , (int)gBlkCount
; 1019 :             , (int)lAmt2Prt
; 1020 :             , &pSpaces[25]
; 1021 :             , lPadding
; 1022 :             , lEBCDIC
; 1023 :             , lPadding
; 1024 :             , lPadding
; 1025 :             , lASCII
; 1026 :             , lPadding );
; 1027 : 
; 1028 :     for ( I = 0; I <= K; I++ )      /* number of lines to do */

  002bc	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR I$[rsp], 0
  002c4	eb 0a		 jmp	 SHORT $LN7@Print_Bloc
$LN5@Print_Bloc:
  002c6	8b 44 24 74	 mov	 eax, DWORD PTR I$[rsp]
  002ca	ff c0		 inc	 eax
  002cc	89 44 24 74	 mov	 DWORD PTR I$[rsp], eax
$LN7@Print_Bloc:
  002d0	8b 44 24 7c	 mov	 eax, DWORD PTR K$[rsp]
  002d4	39 44 24 74	 cmp	 DWORD PTR I$[rsp], eax
  002d8	0f 8f f8 01 00
	00		 jg	 $LN6@Print_Bloc

; 1029 :     {
; 1030 :         if ( I == K )

  002de	8b 44 24 7c	 mov	 eax, DWORD PTR K$[rsp]
  002e2	39 44 24 74	 cmp	 DWORD PTR I$[rsp], eax
  002e6	75 17		 jne	 SHORT $LN15@Print_Bloc

; 1031 :         {
; 1032 :             if ( Kr == 0 ) continue;

  002e8	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR Kr$[rsp], 0
  002f0	75 02		 jne	 SHORT $LN16@Print_Bloc
  002f2	eb d2		 jmp	 SHORT $LN5@Print_Bloc
$LN16@Print_Bloc:

; 1033 :             Kl = Kr;

  002f4	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR Kr$[rsp]
  002fb	89 44 24 70	 mov	 DWORD PTR Kl$[rsp], eax
$LN15@Print_Bloc:

; 1034 :         }
; 1035 : 
; 1036 :         printf ( "%04X    ", (int)B );

  002ff	8b 54 24 60	 mov	 edx, DWORD PTR B$[rsp]
  00303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159847
  0030a	e8 00 00 00 00	 call	 printf

; 1037 : 
; 1038 :         BLANK_OUT ( pAscii,  bytes_per_line + 1 );

  0030f	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pAscii$[rsp]
  00317	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  0031c	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  00321	f3 aa		 rep stosb
  00323	b8 01 00 00 00	 mov	 eax, 1
  00328	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  0032c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pAscii$[rsp]
  00334	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1039 :         BLANK_OUT ( pEbcdic, bytes_per_line + 1 );

  00338	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR pEbcdic$[rsp]
  00340	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00345	b9 20 00 00 00	 mov	 ecx, 32			; 00000020H
  0034a	f3 aa		 rep stosb
  0034c	b8 01 00 00 00	 mov	 eax, 1
  00351	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00355	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pEbcdic$[rsp]
  0035d	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1040 : 
; 1041 :         memcpy( pAscii,  &pAsciiBuf [B], Kl ); pAscii [ bytes_per_line ] = '\0';

  00361	48 63 44 24 70	 movsxd	 rax, DWORD PTR Kl$[rsp]
  00366	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR B$[rsp]
  0036b	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR pAsciiBuf$[rsp]
  00373	48 03 d1	 add	 rdx, rcx
  00376	48 8b ca	 mov	 rcx, rdx
  00379	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pAscii$[rsp]
  00381	48 8b f1	 mov	 rsi, rcx
  00384	48 8b c8	 mov	 rcx, rax
  00387	f3 a4		 rep movsb
  00389	b8 01 00 00 00	 mov	 eax, 1
  0038e	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  00392	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pAscii$[rsp]
  0039a	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1042 :         memcpy( pEbcdic, &pEbcdicBuf[B], Kl ); pEbcdic[ bytes_per_line ] = '\0';

  0039e	48 63 44 24 70	 movsxd	 rax, DWORD PTR Kl$[rsp]
  003a3	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR B$[rsp]
  003a8	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR pEbcdicBuf$[rsp]
  003b0	48 03 d1	 add	 rdx, rcx
  003b3	48 8b ca	 mov	 rcx, rdx
  003b6	48 8b bc 24 90
	00 00 00	 mov	 rdi, QWORD PTR pEbcdic$[rsp]
  003be	48 8b f1	 mov	 rsi, rcx
  003c1	48 8b c8	 mov	 rcx, rax
  003c4	f3 a4		 rep movsb
  003c6	b8 01 00 00 00	 mov	 eax, 1
  003cb	48 6b c0 20	 imul	 rax, rax, 32		; 00000020H
  003cf	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR pEbcdic$[rsp]
  003d7	c6 04 01 00	 mov	 BYTE PTR [rcx+rax], 0

; 1043 : 
; 1044 :         for ( Cl = 4, J = 0; J < Kl; J++ )

  003db	c7 44 24 6c 04
	00 00 00	 mov	 DWORD PTR Cl$[rsp], 4
  003e3	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR J$[rsp], 0
  003eb	eb 0a		 jmp	 SHORT $LN10@Print_Bloc
$LN8@Print_Bloc:
  003ed	8b 44 24 64	 mov	 eax, DWORD PTR J$[rsp]
  003f1	ff c0		 inc	 eax
  003f3	89 44 24 64	 mov	 DWORD PTR J$[rsp], eax
$LN10@Print_Bloc:
  003f7	8b 44 24 70	 mov	 eax, DWORD PTR Kl$[rsp]
  003fb	39 44 24 64	 cmp	 DWORD PTR J$[rsp], eax
  003ff	0f 8d 9a 00 00
	00		 jge	 $LN9@Print_Bloc

; 1045 :         {
; 1046 :             printf( "%02X", gBuffer[B++] );

  00405	48 63 44 24 60	 movsxd	 rax, DWORD PTR B$[rsp]
  0040a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gBuffer
  00411	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00415	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv236[rsp], eax
  0041c	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR tv236[rsp]
  00423	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159848
  0042a	e8 00 00 00 00	 call	 printf
  0042f	8b 44 24 60	 mov	 eax, DWORD PTR B$[rsp]
  00433	ff c0		 inc	 eax
  00435	89 44 24 60	 mov	 DWORD PTR B$[rsp], eax

; 1047 :             Cl += 2;

  00439	8b 44 24 6c	 mov	 eax, DWORD PTR Cl$[rsp]
  0043d	83 c0 02	 add	 eax, 2
  00440	89 44 24 6c	 mov	 DWORD PTR Cl$[rsp], eax

; 1048 :             if ( ( ( J + 1 ) % 16 ) == 0 ) { Cl++; printf ( " " ); }

  00444	8b 44 24 64	 mov	 eax, DWORD PTR J$[rsp]
  00448	ff c0		 inc	 eax
  0044a	99		 cdq
  0044b	83 e2 0f	 and	 edx, 15
  0044e	03 c2		 add	 eax, edx
  00450	83 e0 0f	 and	 eax, 15
  00453	2b c2		 sub	 eax, edx
  00455	85 c0		 test	 eax, eax
  00457	75 16		 jne	 SHORT $LN17@Print_Bloc
  00459	8b 44 24 6c	 mov	 eax, DWORD PTR Cl$[rsp]
  0045d	ff c0		 inc	 eax
  0045f	89 44 24 6c	 mov	 DWORD PTR Cl$[rsp], eax
  00463	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159850
  0046a	e8 00 00 00 00	 call	 printf
$LN17@Print_Bloc:

; 1049 :             if ( ( ( J + 1 ) % 4 ) == 0 ) { Cl++; printf ( " " ); }

  0046f	8b 44 24 64	 mov	 eax, DWORD PTR J$[rsp]
  00473	ff c0		 inc	 eax
  00475	99		 cdq
  00476	83 e2 03	 and	 edx, 3
  00479	03 c2		 add	 eax, edx
  0047b	83 e0 03	 and	 eax, 3
  0047e	2b c2		 sub	 eax, edx
  00480	85 c0		 test	 eax, eax
  00482	75 16		 jne	 SHORT $LN18@Print_Bloc
  00484	8b 44 24 6c	 mov	 eax, DWORD PTR Cl$[rsp]
  00488	ff c0		 inc	 eax
  0048a	89 44 24 6c	 mov	 DWORD PTR Cl$[rsp], eax
  0048e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159852
  00495	e8 00 00 00 00	 call	 printf
$LN18@Print_Bloc:

; 1050 :         }

  0049a	e9 4e ff ff ff	 jmp	 $LN8@Print_Bloc
$LN9@Print_Bloc:

; 1051 : 
; 1052 :         printf ( "%s*%s|%s*\n", ( pSpaces + Cl ), pEbcdic, pAscii );

  0049f	48 63 44 24 6c	 movsxd	 rax, DWORD PTR Cl$[rsp]
  004a4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pSpaces$[rsp]
  004ac	48 03 c8	 add	 rcx, rax
  004af	48 8b c1	 mov	 rax, rcx
  004b2	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR pAscii$[rsp]
  004ba	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR pEbcdic$[rsp]
  004c2	48 8b d0	 mov	 rdx, rax
  004c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159853
  004cc	e8 00 00 00 00	 call	 printf

; 1053 :     }

  004d1	e9 f0 fd ff ff	 jmp	 $LN5@Print_Bloc
$LN6@Print_Bloc:

; 1054 : 
; 1055 :     printf ( "\n" );

  004d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159854
  004dd	e8 00 00 00 00	 call	 printf

; 1056 : 
; 1057 :     return ( lAmt2Prt );

  004e2	8b 44 24 68	 mov	 eax, DWORD PTR lAmt2Prt$[rsp]
$LN19@Print_Bloc:

; 1058 : }

  004e6	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004ee	48 33 cc	 xor	 rcx, rsp
  004f1	e8 00 00 00 00	 call	 __security_check_cookie
  004f6	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  004fd	5f		 pop	 rdi
  004fe	5e		 pop	 rsi
  004ff	c3		 ret	 0
Print_Block_Data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetmap.c
_TEXT	SEGMENT
rc$ = 112
lLblNum$ = 116
lLblType$ = 120
battr$1 = 124
pcchr$2 = 128
i$ = 132
fmt$3 = 136
mltv$4 = 140
iLblType$ = 144
vsec$5 = 148
fsec$6 = 152
tden$7 = 156
ckpt$8 = 160
rtech$9 = 164
tv143 = 168
tv174 = 172
gver$10 = 176
tv337 = 180
tv383 = 184
$T11 = 192
$T12 = 200
$T13 = 208
$T14 = 216
$T15 = 224
$T16 = 232
$T17 = 240
$T18 = 248
$T19 = 256
$T20 = 264
$T21 = 272
$T22 = 280
$T23 = 288
$T24 = 296
$T25 = 304
$T26 = 312
$T27 = 320
$T28 = 328
$T29 = 336
$T30 = 344
$T31 = 352
$T32 = 360
$T33 = 368
$T34 = 376
$T35 = 384
$T36 = 392
$T37 = 400
$T38 = 408
$T39 = 416
lBlockCnt$40 = 424
$T41 = 432
$T42 = 440
$T43 = 448
$T44 = 456
$T45 = 464
tv438 = 472
fseq$46 = 480
edate$47 = 488
ebcnt$48 = 496
cdate$49 = 504
afseq$50 = 512
tmp$51 = 520
rsize$52 = 536
bsize$53 = 544
volser$54 = 552
afset$55 = 560
bcnt$56 = 568
gen$57 = 576
lbsiz$58 = 584
sname$59 = 600
jname$60 = 616
impid$61 = 632
owner$62 = 648
fid$63 = 664
dcb$64 = 688
__$ArrayPad$ = 768
Print_Standard_Labels PROC

; 648  : {

  00000	40 57		 push	 rdi
  00002	48 81 ec 10 03
	00 00		 sub	 rsp, 784		; 00000310H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 649  :     SInt32                  i = 0;

  0001b	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0

; 650  :     Boolean                 rc = FALSE;

  00026	c6 44 24 70 00	 mov	 BYTE PTR rc$[rsp], 0

; 651  :     char                    lLblType[4];
; 652  :     char                    lLblNum[2];
; 653  :     SInt32                  iLblType = 0;

  0002b	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR iLblType$[rsp], 0

; 654  : 
; 655  :     sscanf ( gStdLblBuffer, "%3c%1c%*76c", lLblType, lLblNum );

  00036	4c 8d 4c 24 74	 lea	 r9, QWORD PTR lLblNum$[rsp]
  0003b	4c 8d 44 24 78	 lea	 r8, QWORD PTR lLblType$[rsp]
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159686
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  0004e	e8 00 00 00 00	 call	 sscanf

; 656  :     TERMINATE(lLblType);

  00053	b8 01 00 00 00	 mov	 eax, 1
  00058	48 6b c0 03	 imul	 rax, rax, 3
  0005c	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR $T22[rsp], rax
  00064	48 83 bc 24 18
	01 00 00 04	 cmp	 QWORD PTR $T22[rsp], 4
  0006d	73 02		 jae	 SHORT $LN61@Print_Stan
  0006f	eb 05		 jmp	 SHORT $LN62@Print_Stan
$LN61@Print_Stan:
  00071	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN62@Print_Stan:
  00076	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR $T22[rsp]
  0007e	c6 44 04 78 00	 mov	 BYTE PTR lLblType$[rsp+rax], 0

; 657  :     TERMINATE(lLblNum);

  00083	48 c7 84 24 20
	01 00 00 01 00
	00 00		 mov	 QWORD PTR $T23[rsp], 1
  0008f	48 83 bc 24 20
	01 00 00 02	 cmp	 QWORD PTR $T23[rsp], 2
  00098	73 02		 jae	 SHORT $LN63@Print_Stan
  0009a	eb 05		 jmp	 SHORT $LN64@Print_Stan
$LN63@Print_Stan:
  0009c	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN64@Print_Stan:
  000a1	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR $T23[rsp]
  000a9	c6 44 04 74 00	 mov	 BYTE PTR lLblNum$[rsp+rax], 0

; 658  : 
; 659  :     if ( isdigit( lLblNum[0] ) )

  000ae	b8 01 00 00 00	 mov	 eax, 1
  000b3	48 6b c0 00	 imul	 rax, rax, 0
  000b7	0f be 44 04 74	 movsx	 eax, BYTE PTR lLblNum$[rsp+rax]
  000bc	8b c8		 mov	 ecx, eax
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  000c4	85 c0		 test	 eax, eax
  000c6	74 2f		 je	 SHORT $LN9@Print_Stan

; 660  :     { if ( lLblNum[0] < '1' || lLblNum[0] > '9' ) return ( FALSE ); } /* this should be transportable to EBCDIC machines */

  000c8	b8 01 00 00 00	 mov	 eax, 1
  000cd	48 6b c0 00	 imul	 rax, rax, 0
  000d1	0f be 44 04 74	 movsx	 eax, BYTE PTR lLblNum$[rsp+rax]
  000d6	83 f8 31	 cmp	 eax, 49			; 00000031H
  000d9	7c 13		 jl	 SHORT $LN12@Print_Stan
  000db	b8 01 00 00 00	 mov	 eax, 1
  000e0	48 6b c0 00	 imul	 rax, rax, 0
  000e4	0f be 44 04 74	 movsx	 eax, BYTE PTR lLblNum$[rsp+rax]
  000e9	83 f8 39	 cmp	 eax, 57			; 00000039H
  000ec	7e 07		 jle	 SHORT $LN11@Print_Stan
$LN12@Print_Stan:
  000ee	32 c0		 xor	 al, al
  000f0	e9 78 11 00 00	 jmp	 $LN1@Print_Stan
$LN11@Print_Stan:
  000f5	eb 07		 jmp	 SHORT $LN10@Print_Stan
$LN9@Print_Stan:

; 661  :     else
; 662  :         return ( FALSE );

  000f7	32 c0		 xor	 al, al
  000f9	e9 6f 11 00 00	 jmp	 $LN1@Print_Stan
$LN10@Print_Stan:

; 663  : 
; 664  :     if ( strcmp ( lLblType, "VOL" ) == 0 )      iLblType = 1;       /* VOL  */

  000fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159692
  00105	48 8d 4c 24 78	 lea	 rcx, QWORD PTR lLblType$[rsp]
  0010a	e8 00 00 00 00	 call	 strcmp
  0010f	85 c0		 test	 eax, eax
  00111	75 0b		 jne	 SHORT $LN13@Print_Stan
  00113	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR iLblType$[rsp], 1
$LN13@Print_Stan:

; 665  : 
; 666  :     if ( ( strcmp ( lLblType, "HDR" ) == 0 ) ||
; 667  :         ( strcmp ( lLblType, "EOF" ) == 0 ) ||

  0011e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159695
  00125	48 8d 4c 24 78	 lea	 rcx, QWORD PTR lLblType$[rsp]
  0012a	e8 00 00 00 00	 call	 strcmp
  0012f	85 c0		 test	 eax, eax
  00131	74 2a		 je	 SHORT $LN15@Print_Stan
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159696
  0013a	48 8d 4c 24 78	 lea	 rcx, QWORD PTR lLblType$[rsp]
  0013f	e8 00 00 00 00	 call	 strcmp
  00144	85 c0		 test	 eax, eax
  00146	74 15		 je	 SHORT $LN15@Print_Stan
  00148	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159697
  0014f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR lLblType$[rsp]
  00154	e8 00 00 00 00	 call	 strcmp
  00159	85 c0		 test	 eax, eax
  0015b	75 0b		 jne	 SHORT $LN14@Print_Stan
$LN15@Print_Stan:

; 668  :         ( strcmp ( lLblType, "EOV" ) == 0 ) )   iLblType = 2;       /* HDR | EOF | EOV  */

  0015d	c7 84 24 90 00
	00 00 02 00 00
	00		 mov	 DWORD PTR iLblType$[rsp], 2
$LN14@Print_Stan:

; 669  : 
; 670  :     if ( ( strcmp ( lLblType, "UHL" ) == 0 ) ||

  00168	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159700
  0016f	48 8d 4c 24 78	 lea	 rcx, QWORD PTR lLblType$[rsp]
  00174	e8 00 00 00 00	 call	 strcmp
  00179	85 c0		 test	 eax, eax
  0017b	74 15		 je	 SHORT $LN17@Print_Stan
  0017d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159701
  00184	48 8d 4c 24 78	 lea	 rcx, QWORD PTR lLblType$[rsp]
  00189	e8 00 00 00 00	 call	 strcmp
  0018e	85 c0		 test	 eax, eax
  00190	75 0b		 jne	 SHORT $LN16@Print_Stan
$LN17@Print_Stan:

; 671  :         ( strcmp ( lLblType, "UTL" ) == 0 ) )   iLblType = 3;       /* UHL | UTL    User Labels */

  00192	c7 84 24 90 00
	00 00 03 00 00
	00		 mov	 DWORD PTR iLblType$[rsp], 3
$LN16@Print_Stan:

; 672  : 
; 673  :     switch ( iLblType )

  0019d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR iLblType$[rsp]
  001a4	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv143[rsp], eax
  001ab	83 bc 24 a8 00
	00 00 01	 cmp	 DWORD PTR tv143[rsp], 1
  001b3	74 21		 je	 SHORT $LN18@Print_Stan
  001b5	83 bc 24 a8 00
	00 00 02	 cmp	 DWORD PTR tv143[rsp], 2
  001bd	0f 84 58 01 00
	00		 je	 $LN21@Print_Stan
  001c3	83 bc 24 a8 00
	00 00 03	 cmp	 DWORD PTR tv143[rsp], 3
  001cb	0f 84 3d 10 00
	00		 je	 $LN58@Print_Stan
  001d1	e9 7a 10 00 00	 jmp	 $LN59@Print_Stan
$LN18@Print_Stan:

; 674  :     {
; 675  :         case    1:
; 676  :         {
; 677  :             char    volser[7];                              /* ( 5-10) Volume ID                */
; 678  :             char    vsec[2]                                 /* (   11) Volume Accessability     */
; 679  :             /* 5 bytes  */                                  /* (12-16) VTOC Pointer (not used)  */
; 680  :             ;/* 21 bytes */                                 /* (17-37) Reserved                 */
; 681  :             char    owner[15]                               /* (38-51) Owner ID                 */
; 682  :             ;/* 29 bytes */                                 /* (52-80) Reserved                 */
; 683  : 
; 684  :             /*       1...5...10...15...20...25...30...35...40...45...50...55...60...65...70...75...80
; 685  :              *       VOL1volsr|sRESERVED-----------------|owner--------|RESERVED--------------------|
; 686  :              */
; 687  :             sscanf ( gStdLblBuffer, "%*3c%*1c%6c%1c%*5c%*21c%14c%*29c", volser, vsec, owner );

  001d6	48 8d 84 24 88
	02 00 00	 lea	 rax, QWORD PTR owner$62[rsp]
  001de	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001e3	4c 8d 8c 24 94
	00 00 00	 lea	 r9, QWORD PTR vsec$5[rsp]
  001eb	4c 8d 84 24 28
	02 00 00	 lea	 r8, QWORD PTR volser$54[rsp]
  001f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159703
  001fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  00201	e8 00 00 00 00	 call	 sscanf

; 688  : 
; 689  :             TERMINATE(volser);      /* Null terminate the arrays */

  00206	b8 01 00 00 00	 mov	 eax, 1
  0020b	48 6b c0 06	 imul	 rax, rax, 6
  0020f	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR $T24[rsp], rax
  00217	48 83 bc 24 28
	01 00 00 07	 cmp	 QWORD PTR $T24[rsp], 7
  00220	73 02		 jae	 SHORT $LN65@Print_Stan
  00222	eb 05		 jmp	 SHORT $LN66@Print_Stan
$LN65@Print_Stan:
  00224	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN66@Print_Stan:
  00229	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR $T24[rsp]
  00231	c6 84 04 28 02
	00 00 00	 mov	 BYTE PTR volser$54[rsp+rax], 0

; 690  :             TERMINATE(vsec);

  00239	48 c7 84 24 30
	01 00 00 01 00
	00 00		 mov	 QWORD PTR $T25[rsp], 1
  00245	48 83 bc 24 30
	01 00 00 02	 cmp	 QWORD PTR $T25[rsp], 2
  0024e	73 02		 jae	 SHORT $LN67@Print_Stan
  00250	eb 05		 jmp	 SHORT $LN68@Print_Stan
$LN67@Print_Stan:
  00252	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN68@Print_Stan:
  00257	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR $T25[rsp]
  0025f	c6 84 04 94 00
	00 00 00	 mov	 BYTE PTR vsec$5[rsp+rax], 0

; 691  :             TERMINATE(owner);

  00267	b8 01 00 00 00	 mov	 eax, 1
  0026c	48 6b c0 0e	 imul	 rax, rax, 14
  00270	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR $T26[rsp], rax
  00278	48 83 bc 24 38
	01 00 00 0f	 cmp	 QWORD PTR $T26[rsp], 15
  00281	73 02		 jae	 SHORT $LN69@Print_Stan
  00283	eb 05		 jmp	 SHORT $LN70@Print_Stan
$LN69@Print_Stan:
  00285	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN70@Print_Stan:
  0028a	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR $T26[rsp]
  00292	c6 84 04 88 02
	00 00 00	 mov	 BYTE PTR owner$62[rsp+rax], 0

; 692  : 
; 693  :             printf ( "\n%-2s", "" );

  0029a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159704
  002a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159705
  002a8	e8 00 00 00 00	 call	 printf

; 694  : 
; 695  :             if ( atoi( lLblNum ) == 1 )

  002ad	48 8d 4c 24 74	 lea	 rcx, QWORD PTR lLblNum$[rsp]
  002b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  002b8	83 f8 01	 cmp	 eax, 1
  002bb	75 25		 jne	 SHORT $LN19@Print_Stan

; 696  :                 printf ( "Standard Label Tape\n\n%-4s"

  002bd	4c 8d 8c 24 88
	02 00 00	 lea	 r9, QWORD PTR owner$62[rsp]
  002c5	4c 8d 84 24 28
	02 00 00	 lea	 r8, QWORD PTR volser$54[rsp]
  002cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159708
  002d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159709
  002db	e8 00 00 00 00	 call	 printf
  002e0	eb 2f		 jmp	 SHORT $LN20@Print_Stan
$LN19@Print_Stan:

; 697  :                         "VolSer: %-10s"
; 698  :                         "Owner: %s\n", "", volser, owner );
; 699  :             else
; 700  :                 printf ( "%-4s %1s %-s\n", lLblType, lLblNum, &gStdLblBuffer[4] );

  002e2	b8 01 00 00 00	 mov	 eax, 1
  002e7	48 6b c0 04	 imul	 rax, rax, 4
  002eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  002f2	48 03 c8	 add	 rcx, rax
  002f5	48 8b c1	 mov	 rax, rcx
  002f8	4c 8b c8	 mov	 r9, rax
  002fb	4c 8d 44 24 74	 lea	 r8, QWORD PTR lLblNum$[rsp]
  00300	48 8d 54 24 78	 lea	 rdx, QWORD PTR lLblType$[rsp]
  00305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159710
  0030c	e8 00 00 00 00	 call	 printf
$LN20@Print_Stan:

; 701  :         }
; 702  :             rc = TRUE;

  00311	c6 44 24 70 01	 mov	 BYTE PTR rc$[rsp], 1

; 703  :             break;

  00316	e9 3a 0f 00 00	 jmp	 $LN2@Print_Stan
$LN21@Print_Stan:

; 704  : 
; 705  :         case    2:
; 706  :         {
; 707  :             switch ( atoi( lLblNum ) )

  0031b	48 8d 4c 24 74	 lea	 rcx, QWORD PTR lLblNum$[rsp]
  00320	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00326	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv174[rsp], eax
  0032d	83 bc 24 ac 00
	00 00 01	 cmp	 DWORD PTR tv174[rsp], 1
  00335	74 13		 je	 SHORT $LN22@Print_Stan
  00337	83 bc 24 ac 00
	00 00 02	 cmp	 DWORD PTR tv174[rsp], 2
  0033f	0f 84 92 08 00
	00		 je	 $LN45@Print_Stan
  00345	e9 82 0e 00 00	 jmp	 $LN57@Print_Stan
$LN22@Print_Stan:

; 708  :             {
; 709  :                 case 1:
; 710  :                 {
; 711  :                     char    fid[18];                /* ( 5-21) rightmost 17 char of file Identifier (dataset name DSN)  */
; 712  :                     char    afset[7];               /* (22-27) Aggregate volume ID (volser 1st vol)                     */
; 713  :                     char    afseq[5];               /* (28-31) Aggregate volume seq (multi-volume)                      */
; 714  :                     char    fseq[5];                /* (32-35) file seq number 0001-9999 < x'6F'xxxxxx 1-64000(bin)     */
; 715  :                     char    gen[5];                 /* (36-39) generation number    (not used)                          */
; 716  :                     char    gver[3];                /* (40-41) generation version   (not used)                          */
; 717  :                     char    cdate[7]                /* (42-47) creation date                                            */
; 718  :                     ;                               /*         cyyddd;c = blank 19, 0 = 20, 1 = 21; jdate               */
; 719  :                     char    edate[7];               /* (48-53) expiration date                                          */
; 720  :                     char    fsec[2]                 /* (   54) File Security        (not used)                          */
; 721  :                     ;                               /*              0=none,1=pwd-R-W-Del,3=pwd-W-Del                    */
; 722  :                     char    bcnt[7];                /* (55-60) block count (blockcnt % 1000000) (HDR=0) (EOF/EOV)       */
; 723  :                     char    impid[14]               /* (61-73) System Code (IBMOS400|IBM OS/VS 370)                     */
; 724  :                     ;                               /* (74-76) Reserved                                                 */
; 725  :                     char    ebcnt[5];               /* (77-80) extended block count (blockcnt / 1000000)(EOF/EOV)       */
; 726  : 
; 727  :                     /*       1...5...10...15...20...25...30...35...40...45...50...55...60...65...70...75...80
; 728  :                      *       HDR1DSNAME----------|afvst|afs|fsq|---|-|cdate|edate||bcnt-|syscode-----|RR|ebct
; 729  :                      *       {EOF}                                 n/a         fsec^
; 730  :                      *       {EOV}
; 731  :                      */
; 732  :                     sscanf( gStdLblBuffer, "%*3c%*1c%17c%6c%4c%4c%4c%2c%6c%6c%1c%6c%13c%*3c%4c",

  0034a	48 8d 84 24 f0
	01 00 00	 lea	 rax, QWORD PTR ebcnt$48[rsp]
  00352	48 89 44 24 68	 mov	 QWORD PTR [rsp+104], rax
  00357	48 8d 84 24 78
	02 00 00	 lea	 rax, QWORD PTR impid$61[rsp]
  0035f	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  00364	48 8d 84 24 38
	02 00 00	 lea	 rax, QWORD PTR bcnt$56[rsp]
  0036c	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  00371	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR fsec$6[rsp]
  00379	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0037e	48 8d 84 24 e8
	01 00 00	 lea	 rax, QWORD PTR edate$47[rsp]
  00386	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0038b	48 8d 84 24 f8
	01 00 00	 lea	 rax, QWORD PTR cdate$49[rsp]
  00393	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00398	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR gver$10[rsp]
  003a0	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  003a5	48 8d 84 24 40
	02 00 00	 lea	 rax, QWORD PTR gen$57[rsp]
  003ad	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  003b2	48 8d 84 24 e0
	01 00 00	 lea	 rax, QWORD PTR fseq$46[rsp]
  003ba	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  003bf	48 8d 84 24 00
	02 00 00	 lea	 rax, QWORD PTR afseq$50[rsp]
  003c7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003cc	4c 8d 8c 24 30
	02 00 00	 lea	 r9, QWORD PTR afset$55[rsp]
  003d4	4c 8d 84 24 98
	02 00 00	 lea	 r8, QWORD PTR fid$63[rsp]
  003dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159713
  003e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  003ea	e8 00 00 00 00	 call	 sscanf

; 733  :                            fid, afset, afseq, fseq, gen, gver, cdate, edate, fsec, bcnt, impid, ebcnt);
; 734  : 
; 735  :                     TERMINATE(fid);             /* NULL Terminate the arrays */

  003ef	b8 01 00 00 00	 mov	 eax, 1
  003f4	48 6b c0 11	 imul	 rax, rax, 17
  003f8	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR $T27[rsp], rax
  00400	48 83 bc 24 40
	01 00 00 12	 cmp	 QWORD PTR $T27[rsp], 18
  00409	73 02		 jae	 SHORT $LN71@Print_Stan
  0040b	eb 05		 jmp	 SHORT $LN72@Print_Stan
$LN71@Print_Stan:
  0040d	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN72@Print_Stan:
  00412	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR $T27[rsp]
  0041a	c6 84 04 98 02
	00 00 00	 mov	 BYTE PTR fid$63[rsp+rax], 0

; 736  :                     TERMINATE(afset);

  00422	b8 01 00 00 00	 mov	 eax, 1
  00427	48 6b c0 06	 imul	 rax, rax, 6
  0042b	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR $T28[rsp], rax
  00433	48 83 bc 24 48
	01 00 00 07	 cmp	 QWORD PTR $T28[rsp], 7
  0043c	73 02		 jae	 SHORT $LN73@Print_Stan
  0043e	eb 05		 jmp	 SHORT $LN74@Print_Stan
$LN73@Print_Stan:
  00440	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN74@Print_Stan:
  00445	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR $T28[rsp]
  0044d	c6 84 04 30 02
	00 00 00	 mov	 BYTE PTR afset$55[rsp+rax], 0

; 737  :                     TERMINATE(afseq);

  00455	b8 01 00 00 00	 mov	 eax, 1
  0045a	48 6b c0 04	 imul	 rax, rax, 4
  0045e	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR $T20[rsp], rax
  00466	48 83 bc 24 08
	01 00 00 05	 cmp	 QWORD PTR $T20[rsp], 5
  0046f	73 02		 jae	 SHORT $LN75@Print_Stan
  00471	eb 05		 jmp	 SHORT $LN76@Print_Stan
$LN75@Print_Stan:
  00473	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN76@Print_Stan:
  00478	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR $T20[rsp]
  00480	c6 84 04 00 02
	00 00 00	 mov	 BYTE PTR afseq$50[rsp+rax], 0

; 738  :                     TERMINATE(fseq);

  00488	b8 01 00 00 00	 mov	 eax, 1
  0048d	48 6b c0 04	 imul	 rax, rax, 4
  00491	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR $T30[rsp], rax
  00499	48 83 bc 24 58
	01 00 00 05	 cmp	 QWORD PTR $T30[rsp], 5
  004a2	73 02		 jae	 SHORT $LN77@Print_Stan
  004a4	eb 05		 jmp	 SHORT $LN78@Print_Stan
$LN77@Print_Stan:
  004a6	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN78@Print_Stan:
  004ab	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR $T30[rsp]
  004b3	c6 84 04 e0 01
	00 00 00	 mov	 BYTE PTR fseq$46[rsp+rax], 0

; 739  :                     TERMINATE(gen);

  004bb	b8 01 00 00 00	 mov	 eax, 1
  004c0	48 6b c0 04	 imul	 rax, rax, 4
  004c4	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR $T31[rsp], rax
  004cc	48 83 bc 24 60
	01 00 00 05	 cmp	 QWORD PTR $T31[rsp], 5
  004d5	73 02		 jae	 SHORT $LN79@Print_Stan
  004d7	eb 05		 jmp	 SHORT $LN80@Print_Stan
$LN79@Print_Stan:
  004d9	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN80@Print_Stan:
  004de	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR $T31[rsp]
  004e6	c6 84 04 40 02
	00 00 00	 mov	 BYTE PTR gen$57[rsp+rax], 0

; 740  :                     TERMINATE(gver);

  004ee	b8 01 00 00 00	 mov	 eax, 1
  004f3	48 6b c0 02	 imul	 rax, rax, 2
  004f7	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR $T32[rsp], rax
  004ff	48 83 bc 24 68
	01 00 00 03	 cmp	 QWORD PTR $T32[rsp], 3
  00508	73 02		 jae	 SHORT $LN81@Print_Stan
  0050a	eb 05		 jmp	 SHORT $LN82@Print_Stan
$LN81@Print_Stan:
  0050c	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN82@Print_Stan:
  00511	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR $T32[rsp]
  00519	c6 84 04 b0 00
	00 00 00	 mov	 BYTE PTR gver$10[rsp+rax], 0

; 741  :                     TERMINATE(cdate);

  00521	b8 01 00 00 00	 mov	 eax, 1
  00526	48 6b c0 06	 imul	 rax, rax, 6
  0052a	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR $T33[rsp], rax
  00532	48 83 bc 24 70
	01 00 00 07	 cmp	 QWORD PTR $T33[rsp], 7
  0053b	73 02		 jae	 SHORT $LN83@Print_Stan
  0053d	eb 05		 jmp	 SHORT $LN84@Print_Stan
$LN83@Print_Stan:
  0053f	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN84@Print_Stan:
  00544	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR $T33[rsp]
  0054c	c6 84 04 f8 01
	00 00 00	 mov	 BYTE PTR cdate$49[rsp+rax], 0

; 742  :                     TERMINATE(edate);

  00554	b8 01 00 00 00	 mov	 eax, 1
  00559	48 6b c0 06	 imul	 rax, rax, 6
  0055d	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR $T34[rsp], rax
  00565	48 83 bc 24 78
	01 00 00 07	 cmp	 QWORD PTR $T34[rsp], 7
  0056e	73 02		 jae	 SHORT $LN85@Print_Stan
  00570	eb 05		 jmp	 SHORT $LN86@Print_Stan
$LN85@Print_Stan:
  00572	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN86@Print_Stan:
  00577	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR $T34[rsp]
  0057f	c6 84 04 e8 01
	00 00 00	 mov	 BYTE PTR edate$47[rsp+rax], 0

; 743  :                     TERMINATE(fsec);

  00587	48 c7 84 24 80
	01 00 00 01 00
	00 00		 mov	 QWORD PTR $T35[rsp], 1
  00593	48 83 bc 24 80
	01 00 00 02	 cmp	 QWORD PTR $T35[rsp], 2
  0059c	73 02		 jae	 SHORT $LN87@Print_Stan
  0059e	eb 05		 jmp	 SHORT $LN88@Print_Stan
$LN87@Print_Stan:
  005a0	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN88@Print_Stan:
  005a5	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR $T35[rsp]
  005ad	c6 84 04 98 00
	00 00 00	 mov	 BYTE PTR fsec$6[rsp+rax], 0

; 744  :                     TERMINATE(bcnt);

  005b5	b8 01 00 00 00	 mov	 eax, 1
  005ba	48 6b c0 06	 imul	 rax, rax, 6
  005be	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR $T36[rsp], rax
  005c6	48 83 bc 24 88
	01 00 00 07	 cmp	 QWORD PTR $T36[rsp], 7
  005cf	73 02		 jae	 SHORT $LN89@Print_Stan
  005d1	eb 05		 jmp	 SHORT $LN90@Print_Stan
$LN89@Print_Stan:
  005d3	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN90@Print_Stan:
  005d8	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR $T36[rsp]
  005e0	c6 84 04 38 02
	00 00 00	 mov	 BYTE PTR bcnt$56[rsp+rax], 0

; 745  :                     TERMINATE(impid);

  005e8	b8 01 00 00 00	 mov	 eax, 1
  005ed	48 6b c0 0d	 imul	 rax, rax, 13
  005f1	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR $T37[rsp], rax
  005f9	48 83 bc 24 90
	01 00 00 0e	 cmp	 QWORD PTR $T37[rsp], 14
  00602	73 02		 jae	 SHORT $LN91@Print_Stan
  00604	eb 05		 jmp	 SHORT $LN92@Print_Stan
$LN91@Print_Stan:
  00606	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN92@Print_Stan:
  0060b	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR $T37[rsp]
  00613	c6 84 04 78 02
	00 00 00	 mov	 BYTE PTR impid$61[rsp+rax], 0

; 746  :                     TERMINATE(ebcnt);

  0061b	b8 01 00 00 00	 mov	 eax, 1
  00620	48 6b c0 04	 imul	 rax, rax, 4
  00624	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR $T29[rsp], rax
  0062c	48 83 bc 24 50
	01 00 00 05	 cmp	 QWORD PTR $T29[rsp], 5
  00635	73 02		 jae	 SHORT $LN93@Print_Stan
  00637	eb 05		 jmp	 SHORT $LN94@Print_Stan
$LN93@Print_Stan:
  00639	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN94@Print_Stan:
  0063e	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR $T29[rsp]
  00646	c6 84 04 f0 01
	00 00 00	 mov	 BYTE PTR ebcnt$48[rsp+rax], 0

; 747  : 
; 748  :                     if ( lLblType[0] == 'E' )

  0064e	b8 01 00 00 00	 mov	 eax, 1
  00653	48 6b c0 00	 imul	 rax, rax, 0
  00657	0f be 44 04 78	 movsx	 eax, BYTE PTR lLblType$[rsp+rax]
  0065c	83 f8 45	 cmp	 eax, 69			; 00000045H
  0065f	0f 85 8a 00 00
	00		 jne	 $LN23@Print_Stan

; 749  :                     {
; 750  :                         for ( i = 0; i < 4; i++ ) { if ( !isdigit( ebcnt[i] ) ) ebcnt[i] = '0'; }

  00665	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$[rsp], 0
  00670	eb 10		 jmp	 SHORT $LN8@Print_Stan
$LN6@Print_Stan:
  00672	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR i$[rsp]
  00679	ff c0		 inc	 eax
  0067b	89 84 24 84 00
	00 00		 mov	 DWORD PTR i$[rsp], eax
$LN8@Print_Stan:
  00682	83 bc 24 84 00
	00 00 04	 cmp	 DWORD PTR i$[rsp], 4
  0068a	7d 2e		 jge	 SHORT $LN7@Print_Stan
  0068c	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  00694	0f be 84 04 f0
	01 00 00	 movsx	 eax, BYTE PTR ebcnt$48[rsp+rax]
  0069c	8b c8		 mov	 ecx, eax
  0069e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_isdigit
  006a4	85 c0		 test	 eax, eax
  006a6	75 10		 jne	 SHORT $LN25@Print_Stan
  006a8	48 63 84 24 84
	00 00 00	 movsxd	 rax, DWORD PTR i$[rsp]
  006b0	c6 84 04 f0 01
	00 00 30	 mov	 BYTE PTR ebcnt$48[rsp+rax], 48 ; 00000030H
$LN25@Print_Stan:
  006b8	eb b8		 jmp	 SHORT $LN6@Print_Stan
$LN7@Print_Stan:

; 751  :                         ebcnt[4] = '\0';

  006ba	b8 01 00 00 00	 mov	 eax, 1
  006bf	48 6b c0 04	 imul	 rax, rax, 4
  006c3	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR $T38[rsp], rax
  006cb	48 83 bc 24 98
	01 00 00 05	 cmp	 QWORD PTR $T38[rsp], 5
  006d4	73 02		 jae	 SHORT $LN95@Print_Stan
  006d6	eb 05		 jmp	 SHORT $LN96@Print_Stan
$LN95@Print_Stan:
  006d8	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN96@Print_Stan:
  006dd	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR $T38[rsp]
  006e5	c6 84 04 f0 01
	00 00 00	 mov	 BYTE PTR ebcnt$48[rsp+rax], 0

; 752  :                     }

  006ed	eb 1c		 jmp	 SHORT $LN24@Print_Stan
$LN23@Print_Stan:

; 753  :                     else
; 754  :                         if ( atoi( lLblNum ) == 1 )

  006ef	48 8d 4c 24 74	 lea	 rcx, QWORD PTR lLblNum$[rsp]
  006f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  006fa	83 f8 01	 cmp	 eax, 1
  006fd	75 0c		 jne	 SHORT $LN26@Print_Stan

; 755  :                             printf ("\f");

  006ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159718
  00706	e8 00 00 00 00	 call	 printf
$LN26@Print_Stan:
$LN24@Print_Stan:

; 756  : 
; 757  :                     if ( fseq[0] == '?' )       /* this is the indicator that IBM uses for seq no > 9999 ebcdic x'6f' */

  0070b	b8 01 00 00 00	 mov	 eax, 1
  00710	48 6b c0 00	 imul	 rax, rax, 0
  00714	0f be 84 04 e0
	01 00 00	 movsx	 eax, BYTE PTR fseq$46[rsp+rax]
  0071c	83 f8 3f	 cmp	 eax, 63			; 0000003fH
  0071f	0f 85 a5 00 00
	00		 jne	 $LN27@Print_Stan

; 758  :                     {
; 759  :                         fseq[0] = '\x00';

  00725	b8 01 00 00 00	 mov	 eax, 1
  0072a	48 6b c0 00	 imul	 rax, rax, 0
  0072e	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR $T39[rsp], rax
  00736	48 83 bc 24 a0
	01 00 00 05	 cmp	 QWORD PTR $T39[rsp], 5
  0073f	73 02		 jae	 SHORT $LN97@Print_Stan
  00741	eb 05		 jmp	 SHORT $LN98@Print_Stan
$LN97@Print_Stan:
  00743	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN98@Print_Stan:
  00748	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR $T39[rsp]
  00750	c6 84 04 e0 01
	00 00 00	 mov	 BYTE PTR fseq$46[rsp+rax], 0

; 760  :                         gLastFileSeqSL = ( ( fseq[0]    << 24 ) & 0xff000000 )

  00758	b8 01 00 00 00	 mov	 eax, 1
  0075d	48 6b c0 00	 imul	 rax, rax, 0
  00761	0f be 84 04 e0
	01 00 00	 movsx	 eax, BYTE PTR fseq$46[rsp+rax]
  00769	c1 e0 18	 shl	 eax, 24
  0076c	25 00 00 00 ff	 and	 eax, -16777216		; ff000000H
  00771	b9 01 00 00 00	 mov	 ecx, 1
  00776	48 6b c9 01	 imul	 rcx, rcx, 1
  0077a	0f be 8c 0c e0
	01 00 00	 movsx	 ecx, BYTE PTR fseq$46[rsp+rcx]
  00782	c1 e1 10	 shl	 ecx, 16
  00785	81 e1 00 00 ff
	00		 and	 ecx, 16711680		; 00ff0000H
  0078b	0b c1		 or	 eax, ecx
  0078d	b9 01 00 00 00	 mov	 ecx, 1
  00792	48 6b c9 02	 imul	 rcx, rcx, 2
  00796	0f be 8c 0c e0
	01 00 00	 movsx	 ecx, BYTE PTR fseq$46[rsp+rcx]
  0079e	c1 e1 08	 shl	 ecx, 8
  007a1	81 e1 00 ff 00
	00		 and	 ecx, 65280		; 0000ff00H
  007a7	0b c1		 or	 eax, ecx
  007a9	b9 01 00 00 00	 mov	 ecx, 1
  007ae	48 6b c9 03	 imul	 rcx, rcx, 3
  007b2	0f be 8c 0c e0
	01 00 00	 movsx	 ecx, BYTE PTR fseq$46[rsp+rcx]
  007ba	81 e1 ff 00 00
	00		 and	 ecx, 255		; 000000ffH
  007c0	0b c1		 or	 eax, ecx
  007c2	89 05 00 00 00
	00		 mov	 DWORD PTR gLastFileSeqSL, eax

; 761  :                         |( ( fseq[1]    << 16 ) & 0x00ff0000 )
; 762  :                         |( ( fseq[2]    << 8  ) & 0x0000ff00 )
; 763  :                         |( ( fseq[3]          ) & 0x000000ff );
; 764  :                     }

  007c8	eb 14		 jmp	 SHORT $LN28@Print_Stan
$LN27@Print_Stan:

; 765  :                     else
; 766  :                         gLastFileSeqSL = (UInt32)atol( fseq );

  007ca	48 8d 8c 24 e0
	01 00 00	 lea	 rcx, QWORD PTR fseq$46[rsp]
  007d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atol
  007d8	89 05 00 00 00
	00		 mov	 DWORD PTR gLastFileSeqSL, eax
$LN28@Print_Stan:

; 767  : 
; 768  :                     printf ( "\n%-4s"

  007de	48 8d 8c 24 e0
	01 00 00	 lea	 rcx, QWORD PTR fseq$46[rsp]
  007e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  007ec	48 8d 8c 24 98
	02 00 00	 lea	 rcx, QWORD PTR fid$63[rsp]
  007f4	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  007f9	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159721
  00800	44 8b c0	 mov	 r8d, eax
  00803	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159722
  0080a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159723
  00811	e8 00 00 00 00	 call	 printf

; 769  :                             "SL File Seq: %-4d%-3s"
; 770  :                             "DSNAME: %-20s"
; 771  :                             , "", atoi( fseq ), "", fid );
; 772  : 
; 773  :                     printf ( "Created: " );

  00816	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159724
  0081d	e8 00 00 00 00	 call	 printf

; 774  :                     if ( cdate[0] == ' ' )

  00822	b8 01 00 00 00	 mov	 eax, 1
  00827	48 6b c0 00	 imul	 rax, rax, 0
  0082b	0f be 84 04 f8
	01 00 00	 movsx	 eax, BYTE PTR cdate$49[rsp+rax]
  00833	83 f8 20	 cmp	 eax, 32			; 00000020H
  00836	75 45		 jne	 SHORT $LN29@Print_Stan

; 775  :                         if ( (int)( atol( &cdate[1] ) / 1000l ) < 1967 )

  00838	b8 01 00 00 00	 mov	 eax, 1
  0083d	48 6b c0 01	 imul	 rax, rax, 1
  00841	48 8d 84 04 f8
	01 00 00	 lea	 rax, QWORD PTR cdate$49[rsp+rax]
  00849	48 8b c8	 mov	 rcx, rax
  0084c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atol
  00852	99		 cdq
  00853	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00858	f7 f9		 idiv	 ecx
  0085a	3d af 07 00 00	 cmp	 eax, 1967		; 000007afH
  0085f	7d 0e		 jge	 SHORT $LN31@Print_Stan

; 776  :                             printf ( "20" );

  00861	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159729
  00868	e8 00 00 00 00	 call	 printf
  0086d	eb 0c		 jmp	 SHORT $LN32@Print_Stan
$LN31@Print_Stan:

; 777  :                         else
; 778  :                             printf ( "19" );

  0086f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159730
  00876	e8 00 00 00 00	 call	 printf
$LN32@Print_Stan:
  0087b	eb 1f		 jmp	 SHORT $LN30@Print_Stan
$LN29@Print_Stan:

; 779  :                     else
; 780  :                         printf ( "2%1c", cdate[0] );

  0087d	b8 01 00 00 00	 mov	 eax, 1
  00882	48 6b c0 00	 imul	 rax, rax, 0
  00886	0f be 84 04 f8
	01 00 00	 movsx	 eax, BYTE PTR cdate$49[rsp+rax]
  0088e	8b d0		 mov	 edx, eax
  00890	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159731
  00897	e8 00 00 00 00	 call	 printf
$LN30@Print_Stan:

; 781  :                     printf ( "%02d.%03d%-3s", (int)( atol( &cdate[1] ) / 1000l ), atoi( &cdate[3] ), "" );

  0089c	b8 01 00 00 00	 mov	 eax, 1
  008a1	48 6b c0 03	 imul	 rax, rax, 3
  008a5	48 8d 84 04 f8
	01 00 00	 lea	 rax, QWORD PTR cdate$49[rsp+rax]
  008ad	48 8b c8	 mov	 rcx, rax
  008b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  008b6	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv337[rsp], eax
  008bd	b9 01 00 00 00	 mov	 ecx, 1
  008c2	48 6b c9 01	 imul	 rcx, rcx, 1
  008c6	48 8d 8c 0c f8
	01 00 00	 lea	 rcx, QWORD PTR cdate$49[rsp+rcx]
  008ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atol
  008d4	99		 cdq
  008d5	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  008da	f7 f9		 idiv	 ecx
  008dc	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159732
  008e3	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv337[rsp]
  008ea	44 8b c1	 mov	 r8d, ecx
  008ed	8b d0		 mov	 edx, eax
  008ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159733
  008f6	e8 00 00 00 00	 call	 printf

; 782  : 
; 783  :                     if ( strcmp ( &edate[1], "00000" ) !=0 )

  008fb	b8 01 00 00 00	 mov	 eax, 1
  00900	48 6b c0 01	 imul	 rax, rax, 1
  00904	48 8d 84 04 e8
	01 00 00	 lea	 rax, QWORD PTR edate$47[rsp+rax]
  0090c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159736
  00913	48 8b c8	 mov	 rcx, rax
  00916	e8 00 00 00 00	 call	 strcmp
  0091b	85 c0		 test	 eax, eax
  0091d	0f 84 2a 01 00
	00		 je	 $LN33@Print_Stan

; 784  :                     {
; 785  :                         printf ( "Expires: " );

  00923	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159737
  0092a	e8 00 00 00 00	 call	 printf

; 786  :                         if ( atoi ( &edate[3] ) == 0 )

  0092f	b8 01 00 00 00	 mov	 eax, 1
  00934	48 6b c0 03	 imul	 rax, rax, 3
  00938	48 8d 84 04 e8
	01 00 00	 lea	 rax, QWORD PTR edate$47[rsp+rax]
  00940	48 8b c8	 mov	 rcx, rax
  00943	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00949	85 c0		 test	 eax, eax
  0094b	75 25		 jne	 SHORT $LN35@Print_Stan

; 787  :                             printf ( "TMS-%-5s", &edate[1] );

  0094d	b8 01 00 00 00	 mov	 eax, 1
  00952	48 6b c0 01	 imul	 rax, rax, 1
  00956	48 8d 84 04 e8
	01 00 00	 lea	 rax, QWORD PTR edate$47[rsp+rax]
  0095e	48 8b d0	 mov	 rdx, rax
  00961	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159740
  00968	e8 00 00 00 00	 call	 printf
  0096d	e9 d9 00 00 00	 jmp	 $LN36@Print_Stan
$LN35@Print_Stan:

; 788  :                         else
; 789  :                         {
; 790  :                             if ( edate[0] == ' ' )

  00972	b8 01 00 00 00	 mov	 eax, 1
  00977	48 6b c0 00	 imul	 rax, rax, 0
  0097b	0f be 84 04 e8
	01 00 00	 movsx	 eax, BYTE PTR edate$47[rsp+rax]
  00983	83 f8 20	 cmp	 eax, 32			; 00000020H
  00986	75 45		 jne	 SHORT $LN37@Print_Stan

; 791  :                                 if ( (int)( atol( &edate[1] ) / 1000l ) < 1967 )

  00988	b8 01 00 00 00	 mov	 eax, 1
  0098d	48 6b c0 01	 imul	 rax, rax, 1
  00991	48 8d 84 04 e8
	01 00 00	 lea	 rax, QWORD PTR edate$47[rsp+rax]
  00999	48 8b c8	 mov	 rcx, rax
  0099c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atol
  009a2	99		 cdq
  009a3	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  009a8	f7 f9		 idiv	 ecx
  009aa	3d af 07 00 00	 cmp	 eax, 1967		; 000007afH
  009af	7d 0e		 jge	 SHORT $LN39@Print_Stan

; 792  :                                     printf ( "20" );

  009b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159745
  009b8	e8 00 00 00 00	 call	 printf
  009bd	eb 0c		 jmp	 SHORT $LN40@Print_Stan
$LN39@Print_Stan:

; 793  :                                 else
; 794  :                                     printf ( "19" );

  009bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159746
  009c6	e8 00 00 00 00	 call	 printf
$LN40@Print_Stan:
  009cb	eb 1f		 jmp	 SHORT $LN38@Print_Stan
$LN37@Print_Stan:

; 795  :                             else
; 796  :                                 printf ( "2%1c", edate[0] );

  009cd	b8 01 00 00 00	 mov	 eax, 1
  009d2	48 6b c0 00	 imul	 rax, rax, 0
  009d6	0f be 84 04 e8
	01 00 00	 movsx	 eax, BYTE PTR edate$47[rsp+rax]
  009de	8b d0		 mov	 edx, eax
  009e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159747
  009e7	e8 00 00 00 00	 call	 printf
$LN38@Print_Stan:

; 797  :                             printf ( "%02d.%03d%-1s", (int)( atol( &edate[1] ) / 1000l ), atoi( &edate[3] ), "" );

  009ec	b8 01 00 00 00	 mov	 eax, 1
  009f1	48 6b c0 03	 imul	 rax, rax, 3
  009f5	48 8d 84 04 e8
	01 00 00	 lea	 rax, QWORD PTR edate$47[rsp+rax]
  009fd	48 8b c8	 mov	 rcx, rax
  00a00	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00a06	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv383[rsp], eax
  00a0d	b9 01 00 00 00	 mov	 ecx, 1
  00a12	48 6b c9 01	 imul	 rcx, rcx, 1
  00a16	48 8d 8c 0c e8
	01 00 00	 lea	 rcx, QWORD PTR edate$47[rsp+rcx]
  00a1e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atol
  00a24	99		 cdq
  00a25	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  00a2a	f7 f9		 idiv	 ecx
  00a2c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159748
  00a33	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv383[rsp]
  00a3a	44 8b c1	 mov	 r8d, ecx
  00a3d	8b d0		 mov	 edx, eax
  00a3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159749
  00a46	e8 00 00 00 00	 call	 printf
$LN36@Print_Stan:

; 798  :                         }
; 799  :                     }

  00a4b	eb 13		 jmp	 SHORT $LN34@Print_Stan
$LN33@Print_Stan:

; 800  :                     else
; 801  :                         printf ( "%-9s", "NO EXPDT" );

  00a4d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159750
  00a54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159751
  00a5b	e8 00 00 00 00	 call	 printf
$LN34@Print_Stan:

; 802  : 
; 803  :                     printf ( "%-3sSystem: %s\n", "", impid );

  00a60	4c 8d 84 24 78
	02 00 00	 lea	 r8, QWORD PTR impid$61[rsp]
  00a68	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159752
  00a6f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159753
  00a76	e8 00 00 00 00	 call	 printf

; 804  : 
; 805  :                     if ( gStdLblBuffer[0] == 'E' )

  00a7b	b8 01 00 00 00	 mov	 eax, 1
  00a80	48 6b c0 00	 imul	 rax, rax, 0
  00a84	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  00a8b	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00a8f	83 f8 45	 cmp	 eax, 69			; 00000045H
  00a92	0f 85 a6 00 00
	00		 jne	 $LN41@Print_Stan

; 806  :                     {
; 807  :                         UInt64   lBlockCnt  = (UInt64)(atol( bcnt ) % 1000000l) + (UInt64)(atol( ebcnt ) * 1000000l);

  00a98	48 8d 8c 24 38
	02 00 00	 lea	 rcx, QWORD PTR bcnt$56[rsp]
  00aa0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atol
  00aa6	99		 cdq
  00aa7	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00aac	f7 f9		 idiv	 ecx
  00aae	8b c2		 mov	 eax, edx
  00ab0	48 98		 cdqe
  00ab2	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv438[rsp], rax
  00aba	48 8d 8c 24 f0
	01 00 00	 lea	 rcx, QWORD PTR ebcnt$48[rsp]
  00ac2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atol
  00ac8	69 c0 40 42 0f
	00		 imul	 eax, eax, 1000000	; 000f4240H
  00ace	48 98		 cdqe
  00ad0	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR tv438[rsp]
  00ad8	48 03 c8	 add	 rcx, rax
  00adb	48 8b c1	 mov	 rax, rcx
  00ade	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR lBlockCnt$40[rsp], rax

; 808  :                         printf ( "%-4sBlock Count: "

  00ae6	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR gPrevBlkCnt
  00aed	4c 8b 84 24 a8
	01 00 00	 mov	 r8, QWORD PTR lBlockCnt$40[rsp]
  00af5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159756
  00afc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159757
  00b03	e8 00 00 00 00	 call	 printf

; 809  :                                 "Expected %llu; "
; 810  :                                 "Actual %d",
; 811  :                                 "", lBlockCnt, (int)gPrevBlkCnt );
; 812  :                         if ( lBlockCnt == (UInt64)gPrevBlkCnt )

  00b08	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR gPrevBlkCnt
  00b0e	48 39 84 24 a8
	01 00 00	 cmp	 QWORD PTR lBlockCnt$40[rsp], rax
  00b16	75 0e		 jne	 SHORT $LN43@Print_Stan

; 813  :                             printf ( "\n" );

  00b18	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159760
  00b1f	e8 00 00 00 00	 call	 printf
  00b24	eb 13		 jmp	 SHORT $LN44@Print_Stan
$LN43@Print_Stan:

; 814  :                         else
; 815  :                             printf ( "%-4s---> BLOCK COUNT MISMATCH <---\n", "" );

  00b26	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159761
  00b2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159762
  00b34	e8 00 00 00 00	 call	 printf
$LN44@Print_Stan:

; 816  :                     }

  00b39	e9 94 00 00 00	 jmp	 $LN42@Print_Stan
$LN41@Print_Stan:

; 817  :                     else
; 818  :                     {
; 819  :                         gMltVolSet[0] = '\0';

  00b3e	b8 01 00 00 00	 mov	 eax, 1
  00b43	48 6b c0 00	 imul	 rax, rax, 0
  00b47	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR $T41[rsp], rax
  00b4f	48 83 bc 24 b0
	01 00 00 07	 cmp	 QWORD PTR $T41[rsp], 7
  00b58	73 02		 jae	 SHORT $LN99@Print_Stan
  00b5a	eb 05		 jmp	 SHORT $LN100@Print_Stan
$LN99@Print_Stan:
  00b5c	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN100@Print_Stan:
  00b61	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:gMltVolSet
  00b68	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR $T41[rsp]
  00b70	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 820  :                         gMltVolSeq[0] = '\0';

  00b74	b8 01 00 00 00	 mov	 eax, 1
  00b79	48 6b c0 00	 imul	 rax, rax, 0
  00b7d	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR $T42[rsp], rax
  00b85	48 83 bc 24 b8
	01 00 00 05	 cmp	 QWORD PTR $T42[rsp], 5
  00b8e	73 02		 jae	 SHORT $LN101@Print_Stan
  00b90	eb 05		 jmp	 SHORT $LN102@Print_Stan
$LN101@Print_Stan:
  00b92	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN102@Print_Stan:
  00b97	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:gMltVolSeq
  00b9e	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR $T42[rsp]
  00ba6	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 821  :                         strcpy ( gMltVolSet, afset );

  00baa	48 8d 94 24 30
	02 00 00	 lea	 rdx, QWORD PTR afset$55[rsp]
  00bb2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gMltVolSet
  00bb9	e8 00 00 00 00	 call	 strcpy

; 822  :                         strcpy ( gMltVolSeq, afseq );

  00bbe	48 8d 94 24 00
	02 00 00	 lea	 rdx, QWORD PTR afseq$50[rsp]
  00bc6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gMltVolSeq
  00bcd	e8 00 00 00 00	 call	 strcpy
$LN42@Print_Stan:

; 823  :                     }
; 824  :                 }
; 825  :                     break;

  00bd2	e9 30 06 00 00	 jmp	 $LN4@Print_Stan
$LN45@Print_Stan:

; 826  : 
; 827  :                 case 2:
; 828  :                 {
; 829  :                     char    fmt[2];                             /* (    5) Format F=fixed;V=variable;U=unblock              */
; 830  :                     char    bsize[6];                           /* ( 6-10) Block Size 1-32767 (>32767 see large block size) */
; 831  :                     char    rsize[6];                           /* (11-15) Record Size                                      */
; 832  :                     char    tden[2];                            /* (   16) Density of tape 3=1600,4=6250,5=3200,blank=others */
; 833  :                     char    mltv[2];                            /* (   17) Multi-volume switch 1/0 2nd + tape seq num       */
; 834  :                     char    jname[9]                            /* (18-25) Job Name creating tape                           */
; 835  :                     ;/* 1 byte */                               /* (   26) '/' Separator                                    */
; 836  :                     char    sname[9];                           /* (27-34) Step Name creating tape                          */
; 837  :                     char    rtech[3];                           /* (35-36) Adv. Recording tech. blank=none;'P '=IDRC        */
; 838  :                     char    pcchr[2];                           /* (   37) Printer Control Char A=ANSI;M=machine            */
; 839  :                     char    battr[2]                            /* (   38) Block Attr B=blkd;S=Spanned(V)|Std(F);R=B&S      */
; 840  :                     ;/* 3 bytes */                              /* (39-47) Reserved                                         */
; 841  :                     char    ckpt[2]                             /* (   48) Chkpt Data Set ID; C=secure CKPT dsn;blank - not */
; 842  :                     ;/* 22 chars */                             /* (49-70) Reserved                                         */
; 843  :                     char    lbsiz[11];                          /* (71-80) Large Block Size > 32767                         */
; 844  : 
; 845  :                     char    tmp[10];
; 846  :                     char    dcb[80];
; 847  : 
; 848  :                     /*       1...5...10...15...20...25...30...35...40...45...50...55...60...65...70...75...80
; 849  :                      *       HDR2|bsiz|rsiz|||jname--|/sname--|r||R|RR000000|RESERVED-------------|lbsize---|
; 850  :                      *      {EOF}^-- FORMAT |^- MULTI-VOL        | ^- BLK'D ^- CKPT
; 851  :                      *      {EOV}           ^-- DENSITY          ^-CC {A|M| }
; 852  :                      */
; 853  :                     sscanf( gStdLblBuffer,

  00bd7	48 8d 84 24 48
	02 00 00	 lea	 rax, QWORD PTR lbsiz$58[rsp]
  00bdf	48 89 44 24 68	 mov	 QWORD PTR [rsp+104], rax
  00be4	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR ckpt$8[rsp]
  00bec	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  00bf1	48 8d 44 24 7c	 lea	 rax, QWORD PTR battr$1[rsp]
  00bf6	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  00bfb	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR pcchr$2[rsp]
  00c03	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00c08	48 8d 84 24 a4
	00 00 00	 lea	 rax, QWORD PTR rtech$9[rsp]
  00c10	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00c15	48 8d 84 24 58
	02 00 00	 lea	 rax, QWORD PTR sname$59[rsp]
  00c1d	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00c22	48 8d 84 24 68
	02 00 00	 lea	 rax, QWORD PTR jname$60[rsp]
  00c2a	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00c2f	48 8d 84 24 8c
	00 00 00	 lea	 rax, QWORD PTR mltv$4[rsp]
  00c37	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00c3c	48 8d 84 24 9c
	00 00 00	 lea	 rax, QWORD PTR tden$7[rsp]
  00c44	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00c49	48 8d 84 24 18
	02 00 00	 lea	 rax, QWORD PTR rsize$52[rsp]
  00c51	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c56	4c 8d 8c 24 20
	02 00 00	 lea	 r9, QWORD PTR bsize$53[rsp]
  00c5e	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR fmt$3[rsp]
  00c66	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159764
  00c6d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  00c74	e8 00 00 00 00	 call	 sscanf

; 854  :                            "%*3c"               /*  3 HDR | EOF | EOV                           */
; 855  :                            "%*1c"               /*  1 1-9                                       */
; 856  :                            "%1c"                /*  1 fmt                                       */
; 857  :                            "%5c"                /*  5 bsize                                     */
; 858  :                            "%5c"                /*  5 rsize                                     */
; 859  :                            "%1c"                /*  1 tden                                      */
; 860  :                            "%1c"                /*  1 mltv      Multi-volume switch indicator   */
; 861  :                            "%8c"                /*  8 jname                                     */
; 862  :                            "%*1c"               /*  1 '/'                                       */
; 863  :                            "%8c"                /*  8 sname                                     */
; 864  :                            "%2c"                /*  2 rtech                                     */
; 865  :                            "%1c"                /*  1 cc        A | M                           */
; 866  :                            "%*1c"               /*  1 reserved                                  */
; 867  :                            "%1c"                /*  1 battr     B | S | BS | ' '                */
; 868  :                            "%*2c"               /*  2 reserved                                  */
; 869  :                            "%*6c"               /*  6 Device Serial number or 6 blanks          */
; 870  :                            "%1c"                /*  1 ckpt      Checkpoint Data Set Id          */
; 871  :                            "%*22c"              /* 22 reserved                                  */
; 872  :                            "%10c"               /* 10 lbsize    large block size (> 32767)      */
; 873  :                            , fmt, bsize, rsize, tden, mltv, jname, sname, rtech, pcchr, battr, ckpt, lbsiz);
; 874  : 
; 875  :                     TERMINATE(fmt);         /* NULL terminate the arrays */

  00c79	48 c7 84 24 c0
	01 00 00 01 00
	00 00		 mov	 QWORD PTR $T43[rsp], 1
  00c85	48 83 bc 24 c0
	01 00 00 02	 cmp	 QWORD PTR $T43[rsp], 2
  00c8e	73 02		 jae	 SHORT $LN103@Print_Stan
  00c90	eb 05		 jmp	 SHORT $LN104@Print_Stan
$LN103@Print_Stan:
  00c92	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN104@Print_Stan:
  00c97	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR $T43[rsp]
  00c9f	c6 84 04 88 00
	00 00 00	 mov	 BYTE PTR fmt$3[rsp+rax], 0

; 876  :                     TERMINATE(bsize);

  00ca7	b8 01 00 00 00	 mov	 eax, 1
  00cac	48 6b c0 05	 imul	 rax, rax, 5
  00cb0	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR $T44[rsp], rax
  00cb8	48 83 bc 24 c8
	01 00 00 06	 cmp	 QWORD PTR $T44[rsp], 6
  00cc1	73 02		 jae	 SHORT $LN105@Print_Stan
  00cc3	eb 05		 jmp	 SHORT $LN106@Print_Stan
$LN105@Print_Stan:
  00cc5	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN106@Print_Stan:
  00cca	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR $T44[rsp]
  00cd2	c6 84 04 20 02
	00 00 00	 mov	 BYTE PTR bsize$53[rsp+rax], 0

; 877  :                     TERMINATE(rsize);

  00cda	b8 01 00 00 00	 mov	 eax, 1
  00cdf	48 6b c0 05	 imul	 rax, rax, 5
  00ce3	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR $T45[rsp], rax
  00ceb	48 83 bc 24 d0
	01 00 00 06	 cmp	 QWORD PTR $T45[rsp], 6
  00cf4	73 02		 jae	 SHORT $LN107@Print_Stan
  00cf6	eb 05		 jmp	 SHORT $LN108@Print_Stan
$LN107@Print_Stan:
  00cf8	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN108@Print_Stan:
  00cfd	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR $T45[rsp]
  00d05	c6 84 04 18 02
	00 00 00	 mov	 BYTE PTR rsize$52[rsp+rax], 0

; 878  :                     TERMINATE(tden);

  00d0d	48 c7 84 24 c0
	00 00 00 01 00
	00 00		 mov	 QWORD PTR $T11[rsp], 1
  00d19	48 83 bc 24 c0
	00 00 00 02	 cmp	 QWORD PTR $T11[rsp], 2
  00d22	73 02		 jae	 SHORT $LN109@Print_Stan
  00d24	eb 05		 jmp	 SHORT $LN110@Print_Stan
$LN109@Print_Stan:
  00d26	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN110@Print_Stan:
  00d2b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR $T11[rsp]
  00d33	c6 84 04 9c 00
	00 00 00	 mov	 BYTE PTR tden$7[rsp+rax], 0

; 879  :                     TERMINATE(mltv);

  00d3b	48 c7 84 24 c8
	00 00 00 01 00
	00 00		 mov	 QWORD PTR $T12[rsp], 1
  00d47	48 83 bc 24 c8
	00 00 00 02	 cmp	 QWORD PTR $T12[rsp], 2
  00d50	73 02		 jae	 SHORT $LN111@Print_Stan
  00d52	eb 05		 jmp	 SHORT $LN112@Print_Stan
$LN111@Print_Stan:
  00d54	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN112@Print_Stan:
  00d59	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR $T12[rsp]
  00d61	c6 84 04 8c 00
	00 00 00	 mov	 BYTE PTR mltv$4[rsp+rax], 0

; 880  :                     TERMINATE(jname);

  00d69	b8 01 00 00 00	 mov	 eax, 1
  00d6e	48 6b c0 08	 imul	 rax, rax, 8
  00d72	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR $T13[rsp], rax
  00d7a	48 83 bc 24 d0
	00 00 00 09	 cmp	 QWORD PTR $T13[rsp], 9
  00d83	73 02		 jae	 SHORT $LN113@Print_Stan
  00d85	eb 05		 jmp	 SHORT $LN114@Print_Stan
$LN113@Print_Stan:
  00d87	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN114@Print_Stan:
  00d8c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR $T13[rsp]
  00d94	c6 84 04 68 02
	00 00 00	 mov	 BYTE PTR jname$60[rsp+rax], 0

; 881  :                     TERMINATE(sname);

  00d9c	b8 01 00 00 00	 mov	 eax, 1
  00da1	48 6b c0 08	 imul	 rax, rax, 8
  00da5	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR $T14[rsp], rax
  00dad	48 83 bc 24 d8
	00 00 00 09	 cmp	 QWORD PTR $T14[rsp], 9
  00db6	73 02		 jae	 SHORT $LN115@Print_Stan
  00db8	eb 05		 jmp	 SHORT $LN116@Print_Stan
$LN115@Print_Stan:
  00dba	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN116@Print_Stan:
  00dbf	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR $T14[rsp]
  00dc7	c6 84 04 58 02
	00 00 00	 mov	 BYTE PTR sname$59[rsp+rax], 0

; 882  :                     TERMINATE(rtech);

  00dcf	b8 01 00 00 00	 mov	 eax, 1
  00dd4	48 6b c0 02	 imul	 rax, rax, 2
  00dd8	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR $T15[rsp], rax
  00de0	48 83 bc 24 e0
	00 00 00 03	 cmp	 QWORD PTR $T15[rsp], 3
  00de9	73 02		 jae	 SHORT $LN117@Print_Stan
  00deb	eb 05		 jmp	 SHORT $LN118@Print_Stan
$LN117@Print_Stan:
  00ded	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN118@Print_Stan:
  00df2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR $T15[rsp]
  00dfa	c6 84 04 a4 00
	00 00 00	 mov	 BYTE PTR rtech$9[rsp+rax], 0

; 883  :                     TERMINATE(pcchr);

  00e02	48 c7 84 24 e8
	00 00 00 01 00
	00 00		 mov	 QWORD PTR $T16[rsp], 1
  00e0e	48 83 bc 24 e8
	00 00 00 02	 cmp	 QWORD PTR $T16[rsp], 2
  00e17	73 02		 jae	 SHORT $LN119@Print_Stan
  00e19	eb 05		 jmp	 SHORT $LN120@Print_Stan
$LN119@Print_Stan:
  00e1b	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN120@Print_Stan:
  00e20	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR $T16[rsp]
  00e28	c6 84 04 80 00
	00 00 00	 mov	 BYTE PTR pcchr$2[rsp+rax], 0

; 884  :                     TERMINATE(battr);

  00e30	48 c7 84 24 f0
	00 00 00 01 00
	00 00		 mov	 QWORD PTR $T17[rsp], 1
  00e3c	48 83 bc 24 f0
	00 00 00 02	 cmp	 QWORD PTR $T17[rsp], 2
  00e45	73 02		 jae	 SHORT $LN121@Print_Stan
  00e47	eb 05		 jmp	 SHORT $LN122@Print_Stan
$LN121@Print_Stan:
  00e49	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN122@Print_Stan:
  00e4e	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR $T17[rsp]
  00e56	c6 44 04 7c 00	 mov	 BYTE PTR battr$1[rsp+rax], 0

; 885  :                     TERMINATE(ckpt);

  00e5b	48 c7 84 24 f8
	00 00 00 01 00
	00 00		 mov	 QWORD PTR $T18[rsp], 1
  00e67	48 83 bc 24 f8
	00 00 00 02	 cmp	 QWORD PTR $T18[rsp], 2
  00e70	73 02		 jae	 SHORT $LN123@Print_Stan
  00e72	eb 05		 jmp	 SHORT $LN124@Print_Stan
$LN123@Print_Stan:
  00e74	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN124@Print_Stan:
  00e79	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR $T18[rsp]
  00e81	c6 84 04 a0 00
	00 00 00	 mov	 BYTE PTR ckpt$8[rsp+rax], 0

; 886  :                     TERMINATE(lbsiz);

  00e89	b8 01 00 00 00	 mov	 eax, 1
  00e8e	48 6b c0 0a	 imul	 rax, rax, 10
  00e92	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR $T19[rsp], rax
  00e9a	48 83 bc 24 00
	01 00 00 0b	 cmp	 QWORD PTR $T19[rsp], 11
  00ea3	73 02		 jae	 SHORT $LN125@Print_Stan
  00ea5	eb 05		 jmp	 SHORT $LN126@Print_Stan
$LN125@Print_Stan:
  00ea7	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN126@Print_Stan:
  00eac	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR $T19[rsp]
  00eb4	c6 84 04 48 02
	00 00 00	 mov	 BYTE PTR lbsiz$58[rsp+rax], 0

; 887  : 
; 888  :                     if ( gStdLblBuffer[0] == 'H' )

  00ebc	b8 01 00 00 00	 mov	 eax, 1
  00ec1	48 6b c0 00	 imul	 rax, rax, 0
  00ec5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  00ecc	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00ed0	83 f8 48	 cmp	 eax, 72			; 00000048H
  00ed3	0f 85 e5 02 00
	00		 jne	 $LN46@Print_Stan

; 889  :                     {
; 890  :                         tmp[0] = dcb[0] = '\0';

  00ed9	b8 01 00 00 00	 mov	 eax, 1
  00ede	48 6b c0 00	 imul	 rax, rax, 0
  00ee2	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR $T21[rsp], rax
  00eea	48 83 bc 24 10
	01 00 00 50	 cmp	 QWORD PTR $T21[rsp], 80	; 00000050H
  00ef3	73 02		 jae	 SHORT $LN127@Print_Stan
  00ef5	eb 05		 jmp	 SHORT $LN128@Print_Stan
$LN127@Print_Stan:
  00ef7	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN128@Print_Stan:
  00efc	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR $T21[rsp]
  00f04	c6 84 04 b0 02
	00 00 00	 mov	 BYTE PTR dcb$64[rsp+rax], 0
  00f0c	b8 01 00 00 00	 mov	 eax, 1
  00f11	48 6b c0 00	 imul	 rax, rax, 0
  00f15	c6 84 04 08 02
	00 00 00	 mov	 BYTE PTR tmp$51[rsp+rax], 0

; 891  : 
; 892  :                         printf ( "%-4sCreated by: Job %-8s; Step %-11s%-6s"

  00f1d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159767
  00f24	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00f29	4c 8d 8c 24 58
	02 00 00	 lea	 r9, QWORD PTR sname$59[rsp]
  00f31	4c 8d 84 24 68
	02 00 00	 lea	 r8, QWORD PTR jname$60[rsp]
  00f39	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159768
  00f40	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159769
  00f47	e8 00 00 00 00	 call	 printf

; 893  :                                 , "", jname, sname, "" );
; 894  : 
; 895  :                         STRLCAT( dcb, "DCB=(RECFM=" );

  00f4c	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  00f52	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159770
  00f59	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR dcb$64[rsp]
  00f61	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 896  : 
; 897  :                         STRLCAT( dcb, fmt );            /* first character of the RECFM F|V|U                   */

  00f67	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  00f6d	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR fmt$3[rsp]
  00f75	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR dcb$64[rsp]
  00f7d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 898  :                                                         /* next 'S' means SPANNED for 'V' and STANDARD for 'F'  */
; 899  :                         if ( battr[0] == 'R' )          /* next 1 or 2 (if = 'R') characters B|S|R|' '          */

  00f83	b8 01 00 00 00	 mov	 eax, 1
  00f88	48 6b c0 00	 imul	 rax, rax, 0
  00f8c	0f be 44 04 7c	 movsx	 eax, BYTE PTR battr$1[rsp+rax]
  00f91	83 f8 52	 cmp	 eax, 82			; 00000052H
  00f94	75 1d		 jne	 SHORT $LN48@Print_Stan

; 900  :                             STRLCAT( dcb, "BS" );       /* 'R' = both B & S together                            */

  00f96	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  00f9c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159773
  00fa3	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR dcb$64[rsp]
  00fab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
  00fb1	eb 2c		 jmp	 SHORT $LN49@Print_Stan
$LN48@Print_Stan:

; 901  :                         else
; 902  :                             if ( battr[0] != ' ' )

  00fb3	b8 01 00 00 00	 mov	 eax, 1
  00fb8	48 6b c0 00	 imul	 rax, rax, 0
  00fbc	0f be 44 04 7c	 movsx	 eax, BYTE PTR battr$1[rsp+rax]
  00fc1	83 f8 20	 cmp	 eax, 32			; 00000020H
  00fc4	74 19		 je	 SHORT $LN50@Print_Stan

; 903  :                                 STRLCAT( dcb, battr );  /* just the B|S if not 'R' - blank is not included      */

  00fc6	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  00fcc	48 8d 54 24 7c	 lea	 rdx, QWORD PTR battr$1[rsp]
  00fd1	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR dcb$64[rsp]
  00fd9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN50@Print_Stan:
$LN49@Print_Stan:

; 904  : 
; 905  :                         if ( pcchr[0] != ' ' )

  00fdf	b8 01 00 00 00	 mov	 eax, 1
  00fe4	48 6b c0 00	 imul	 rax, rax, 0
  00fe8	0f be 84 04 80
	00 00 00	 movsx	 eax, BYTE PTR pcchr$2[rsp+rax]
  00ff0	83 f8 20	 cmp	 eax, 32			; 00000020H
  00ff3	74 1c		 je	 SHORT $LN51@Print_Stan

; 906  :                             STRLCAT( dcb, pcchr );      /* last is the printer carriage control type A|M        */

  00ff5	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  00ffb	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR pcchr$2[rsp]
  01003	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR dcb$64[rsp]
  0100b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat
$LN51@Print_Stan:

; 907  :                                                         /* A = ANSI and M = Machine                             */
; 908  :                         STRLCAT( dcb, ",LRECL=" );

  01011	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  01017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159776
  0101e	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR dcb$64[rsp]
  01026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 909  :                         sprintf( tmp, "%d", atoi( rsize ) );

  0102c	48 8d 8c 24 18
	02 00 00	 lea	 rcx, QWORD PTR rsize$52[rsp]
  01034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  0103a	44 8b c0	 mov	 r8d, eax
  0103d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159777
  01044	48 8d 8c 24 08
	02 00 00	 lea	 rcx, QWORD PTR tmp$51[rsp]
  0104c	e8 00 00 00 00	 call	 sprintf

; 910  :                         STRLCAT( dcb, tmp );

  01051	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  01057	48 8d 94 24 08
	02 00 00	 lea	 rdx, QWORD PTR tmp$51[rsp]
  0105f	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR dcb$64[rsp]
  01067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 911  : 
; 912  :                         STRLCAT( dcb, ",BLKSIZE=" );

  0106d	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  01073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159778
  0107a	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR dcb$64[rsp]
  01082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 913  :                         if ( lbsiz[0] == '0' )

  01088	b8 01 00 00 00	 mov	 eax, 1
  0108d	48 6b c0 00	 imul	 rax, rax, 0
  01091	0f be 84 04 48
	02 00 00	 movsx	 eax, BYTE PTR lbsiz$58[rsp+rax]
  01099	83 f8 30	 cmp	 eax, 48			; 00000030H
  0109c	75 27		 jne	 SHORT $LN52@Print_Stan

; 914  :                             sprintf ( tmp, "%ld", atol( lbsiz ) );

  0109e	48 8d 8c 24 48
	02 00 00	 lea	 rcx, QWORD PTR lbsiz$58[rsp]
  010a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atol
  010ac	44 8b c0	 mov	 r8d, eax
  010af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159781
  010b6	48 8d 8c 24 08
	02 00 00	 lea	 rcx, QWORD PTR tmp$51[rsp]
  010be	e8 00 00 00 00	 call	 sprintf
  010c3	eb 25		 jmp	 SHORT $LN53@Print_Stan
$LN52@Print_Stan:

; 915  :                         else
; 916  :                             sprintf ( tmp, "%d", atoi( bsize ) );

  010c5	48 8d 8c 24 20
	02 00 00	 lea	 rcx, QWORD PTR bsize$53[rsp]
  010cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  010d3	44 8b c0	 mov	 r8d, eax
  010d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159782
  010dd	48 8d 8c 24 08
	02 00 00	 lea	 rcx, QWORD PTR tmp$51[rsp]
  010e5	e8 00 00 00 00	 call	 sprintf
$LN53@Print_Stan:

; 917  :                         STRLCAT( dcb, tmp );

  010ea	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  010f0	48 8d 94 24 08
	02 00 00	 lea	 rdx, QWORD PTR tmp$51[rsp]
  010f8	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR dcb$64[rsp]
  01100	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 918  : 
; 919  :                         STRLCAT( dcb, ")" );

  01106	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  0110c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159783
  01113	48 8d 8c 24 b0
	02 00 00	 lea	 rcx, QWORD PTR dcb$64[rsp]
  0111b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 920  : 
; 921  :                         printf ( "%-51s", dcb );

  01121	48 8d 94 24 b0
	02 00 00	 lea	 rdx, QWORD PTR dcb$64[rsp]
  01129	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159784
  01130	e8 00 00 00 00	 call	 printf

; 922  : 
; 923  :                         if ( mltv[0] == '1' || atoi( gMltVolSeq ) > 1 )

  01135	b8 01 00 00 00	 mov	 eax, 1
  0113a	48 6b c0 00	 imul	 rax, rax, 0
  0113e	0f be 84 04 8c
	00 00 00	 movsx	 eax, BYTE PTR mltv$4[rsp+rax]
  01146	83 f8 31	 cmp	 eax, 49			; 00000031H
  01149	74 12		 je	 SHORT $LN55@Print_Stan
  0114b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gMltVolSeq
  01152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  01158	83 f8 01	 cmp	 eax, 1
  0115b	7e 2a		 jle	 SHORT $LN54@Print_Stan
$LN55@Print_Stan:

; 924  :                             printf ( "\n%-4sTape is part %d of multi-volume set %s\n", "", atoi( gMltVolSeq ), gMltVolSet );

  0115d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gMltVolSeq
  01164	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  0116a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:gMltVolSet
  01171	44 8b c0	 mov	 r8d, eax
  01174	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159787
  0117b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159788
  01182	e8 00 00 00 00	 call	 printf
$LN54@Print_Stan:

; 925  : 
; 926  :                         if ( rtech[0] == 'P' )

  01187	b8 01 00 00 00	 mov	 eax, 1
  0118c	48 6b c0 00	 imul	 rax, rax, 0
  01190	0f be 84 04 a4
	00 00 00	 movsx	 eax, BYTE PTR rtech$9[rsp+rax]
  01198	83 f8 50	 cmp	 eax, 80			; 00000050H
  0119b	75 13		 jne	 SHORT $LN56@Print_Stan

; 927  :                             printf ( "%-3sCompression: IDRC", "" );

  0119d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159790
  011a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159791
  011ab	e8 00 00 00 00	 call	 printf
$LN56@Print_Stan:

; 928  : 
; 929  :                         printf ( "\n" );

  011b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159792
  011b7	e8 00 00 00 00	 call	 printf

; 930  :                     }

  011bc	eb 0c		 jmp	 SHORT $LN47@Print_Stan
$LN46@Print_Stan:

; 931  :                     else
; 932  :                         printf( "======================================"

  011be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159793
  011c5	e8 00 00 00 00	 call	 printf
$LN47@Print_Stan:

; 933  :                                 "======================================"
; 934  :                                 "======================================"
; 935  :                                 "======================================\n" );
; 936  :                 }
; 937  :                     break;

  011ca	eb 3b		 jmp	 SHORT $LN4@Print_Stan
$LN57@Print_Stan:

; 938  : 
; 939  :                 default:
; 940  :                     printf ( "%-4s %1d %-s\n", lLblType, *lLblNum, &gStdLblBuffer[4] );

  011cc	b8 01 00 00 00	 mov	 eax, 1
  011d1	48 6b c0 04	 imul	 rax, rax, 4
  011d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  011dc	48 03 c8	 add	 rcx, rax
  011df	48 8b c1	 mov	 rax, rcx
  011e2	b9 01 00 00 00	 mov	 ecx, 1
  011e7	48 6b c9 00	 imul	 rcx, rcx, 0
  011eb	0f be 4c 0c 74	 movsx	 ecx, BYTE PTR lLblNum$[rsp+rcx]
  011f0	4c 8b c8	 mov	 r9, rax
  011f3	44 8b c1	 mov	 r8d, ecx
  011f6	48 8d 54 24 78	 lea	 rdx, QWORD PTR lLblType$[rsp]
  011fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159795
  01202	e8 00 00 00 00	 call	 printf
$LN4@Print_Stan:

; 941  :                     break;
; 942  :             }
; 943  :         }
; 944  :             rc = TRUE;

  01207	c6 44 24 70 01	 mov	 BYTE PTR rc$[rsp], 1

; 945  :             break;

  0120c	eb 47		 jmp	 SHORT $LN2@Print_Stan
$LN58@Print_Stan:

; 946  : 
; 947  :         case        3:
; 948  :             printf ( "%-4s %1d %-s\n", lLblType, *lLblNum, &gStdLblBuffer[4] );

  0120e	b8 01 00 00 00	 mov	 eax, 1
  01213	48 6b c0 04	 imul	 rax, rax, 4
  01217	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  0121e	48 03 c8	 add	 rcx, rax
  01221	48 8b c1	 mov	 rax, rcx
  01224	b9 01 00 00 00	 mov	 ecx, 1
  01229	48 6b c9 00	 imul	 rcx, rcx, 0
  0122d	0f be 4c 0c 74	 movsx	 ecx, BYTE PTR lLblNum$[rsp+rcx]
  01232	4c 8b c8	 mov	 r9, rax
  01235	44 8b c1	 mov	 r8d, ecx
  01238	48 8d 54 24 78	 lea	 rdx, QWORD PTR lLblType$[rsp]
  0123d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159797
  01244	e8 00 00 00 00	 call	 printf

; 949  :             rc = TRUE;

  01249	c6 44 24 70 01	 mov	 BYTE PTR rc$[rsp], 1

; 950  :             break;

  0124e	eb 05		 jmp	 SHORT $LN2@Print_Stan
$LN59@Print_Stan:

; 951  : 
; 952  :         default:
; 953  :             rc = FALSE;

  01250	c6 44 24 70 00	 mov	 BYTE PTR rc$[rsp], 0
$LN2@Print_Stan:

; 954  :             break;
; 955  :     }
; 956  : 
; 957  :     ZERO_OUT ( gStdLblBuffer, sizeof( gStdLblBuffer ) );

  01255	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:gStdLblBuffer
  0125c	48 8b f8	 mov	 rdi, rax
  0125f	33 c0		 xor	 eax, eax
  01261	b9 51 00 00 00	 mov	 ecx, 81			; 00000051H
  01266	f3 aa		 rep stosb

; 958  :     return ( rc );

  01268	0f b6 44 24 70	 movzx	 eax, BYTE PTR rc$[rsp]
$LN1@Print_Stan:
$LN60@Print_Stan:

; 959  : 
; 960  : } /* end function Print_Standard_Labels */

  0126d	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  01275	48 33 cc	 xor	 rcx, rsp
  01278	e8 00 00 00 00	 call	 __security_check_cookie
  0127d	48 81 c4 10 03
	00 00		 add	 rsp, 784		; 00000310H
  01284	5f		 pop	 rdi
  01285	c3		 ret	 0
Print_Standard_Labels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetmap.c
_TEXT	SEGMENT
pgm$ = 80
Print_Usage PROC

; 630  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 631  :     if (strcasecmp( pgm, "tapemap" ))

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159588
  00010	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pgm$[rsp]
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0001b	85 c0		 test	 eax, eax
  0001d	74 53		 je	 SHORT $LN2@Print_Usag

; 632  :     {
; 633  :         // "Usage: %s ...
; 634  :         WRMSG( HHC02758, "I", pgm ); // HHC02758 = tapemap

  0001f	b9 01 00 00 00	 mov	 ecx, 1
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0002a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pgm$[rsp]
  0002f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159589
  0003b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159590
  00047	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0004c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00051	41 b9 03 00 00
	00		 mov	 r9d, 3
  00057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159591
  0005e	ba 7a 02 00 00	 mov	 edx, 634		; 0000027aH
  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159592
  0006a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 635  :     }

  00070	eb 51		 jmp	 SHORT $LN3@Print_Usag
$LN2@Print_Usag:

; 636  :     else
; 637  :     {
; 638  :         // "Usage: %s ...
; 639  :         WRMSG( HHC02759, "I", pgm ); // HHC02759 = hetmap

  00072	b9 01 00 00 00	 mov	 ecx, 1
  00077	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0007d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pgm$[rsp]
  00082	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159593
  0008e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159594
  0009a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0009f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a4	41 b9 03 00 00
	00		 mov	 r9d, 3
  000aa	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159595
  000b1	ba 7f 02 00 00	 mov	 edx, 639		; 0000027fH
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159596
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN3@Print_Usag:

; 640  :     }
; 641  : }

  000c3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c7	c3		 ret	 0
Print_Usage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetmap.c
_TEXT	SEGMENT
i$ = 32
$T1 = 40
lab$ = 48
labelrec$ = 128
__$ArrayPad$ = 224
len$ = 256
Print_Label_Tapemap PROC

; 608  : {

$LN9:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H
  0000b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00012	48 33 c4	 xor	 rax, rsp
  00015	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 609  :     SLLABEL lab;
; 610  :     char labelrec[81];
; 611  :     SInt32 i;
; 612  : 
; 613  :     if( sl_islabel( &lab, gBuffer, len ) == FALSE )

  0001d	44 8b 84 24 00
	01 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gBuffer
  0002c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR lab$[rsp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_islabel
  00037	85 c0		 test	 eax, eax
  00039	75 02		 jne	 SHORT $LN5@Print_Labe

; 614  :     {
; 615  :         return;

  0003b	eb 79		 jmp	 SHORT $LN1@Print_Labe
$LN5@Print_Labe:

; 616  :     }
; 617  :     for (i=0; i < 80; i++)

  0003d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00045	eb 0a		 jmp	 SHORT $LN4@Print_Labe
$LN2@Print_Labe:
  00047	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0004b	ff c0		 inc	 eax
  0004d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@Print_Labe:
  00051	83 7c 24 20 50	 cmp	 DWORD PTR i$[rsp], 80	; 00000050H
  00056	7d 24		 jge	 SHORT $LN3@Print_Labe

; 618  :     {
; 619  :         labelrec[i] = guest_to_host(gBuffer[i]);

  00058	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gBuffer
  00064	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  0006e	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00073	88 84 0c 80 00
	00 00		 mov	 BYTE PTR labelrec$[rsp+rcx], al

; 620  :     }

  0007a	eb cb		 jmp	 SHORT $LN2@Print_Labe
$LN3@Print_Labe:

; 621  :     labelrec[i] = '\0';

  0007c	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00081	48 89 44 24 28	 mov	 QWORD PTR $T1[rsp], rax
  00086	48 83 7c 24 28
	51		 cmp	 QWORD PTR $T1[rsp], 81	; 00000051H
  0008c	73 02		 jae	 SHORT $LN7@Print_Labe
  0008e	eb 05		 jmp	 SHORT $LN8@Print_Labe
$LN7@Print_Labe:
  00090	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN8@Print_Labe:
  00095	48 8b 44 24 28	 mov	 rax, QWORD PTR $T1[rsp]
  0009a	c6 84 04 80 00
	00 00 00	 mov	 BYTE PTR labelrec$[rsp+rax], 0

; 622  :     printf ("%s\n", labelrec);

  000a2	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR labelrec$[rsp]
  000aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159582
  000b1	e8 00 00 00 00	 call	 printf
$LN1@Print_Labe:
$LN6@Print_Labe:

; 623  : }

  000b6	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000be	48 33 cc	 xor	 rcx, rsp
  000c1	e8 00 00 00 00	 call	 __security_check_cookie
  000c6	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  000cd	c3		 ret	 0
Print_Label_Tapemap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetmap.c
_TEXT	SEGMENT
i$ = 32
lab$ = 48
fmt$ = 128
__$ArrayPad$ = 448
len$ = 480
Print_Label PROC

; 581  : {

$LN7:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  0000b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00012	48 33 c4	 xor	 rax, rsp
  00015	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 582  :     SLLABEL lab;
; 583  :     SLFMT fmt;
; 584  :     SInt32 i;
; 585  : 
; 586  :     if( sl_islabel( &lab, gBuffer, len ) == FALSE )

  0001d	44 8b 84 24 e0
	01 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gBuffer
  0002c	48 8d 4c 24 30	 lea	 rcx, QWORD PTR lab$[rsp]
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_islabel
  00037	85 c0		 test	 eax, eax
  00039	75 02		 jne	 SHORT $LN5@Print_Labe

; 587  :     {
; 588  :         return;

  0003b	eb 72		 jmp	 SHORT $LN1@Print_Labe
$LN5@Print_Labe:

; 589  :     }
; 590  : 
; 591  :     sl_fmtlab( &fmt, &lab );

  0003d	48 8d 54 24 30	 lea	 rdx, QWORD PTR lab$[rsp]
  00042	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR fmt$[rsp]
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_fmtlab

; 592  : 
; 593  :     printf ( "%s", sep );

  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sep
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159569
  0005e	e8 00 00 00 00	 call	 printf

; 594  : 
; 595  :     for( i = 0; fmt.key[ i ] != NULL; i++ )

  00063	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0006b	eb 0a		 jmp	 SHORT $LN4@Print_Labe
$LN2@Print_Labe:
  0006d	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00071	ff c0		 inc	 eax
  00073	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@Print_Labe:
  00077	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0007c	48 83 bc c4 80
	00 00 00 00	 cmp	 QWORD PTR fmt$[rsp+rax*8], 0
  00085	74 28		 je	 SHORT $LN3@Print_Labe

; 596  :     {
; 597  :         printf ("%-20.20s: '%s'\n", fmt.key[ i ] , fmt.val[ i ] );

  00087	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0008c	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00091	4c 8b 84 c4 f0
	00 00 00	 mov	 r8, QWORD PTR fmt$[rsp+rax*8+112]
  00099	48 8b 94 cc 80
	00 00 00	 mov	 rdx, QWORD PTR fmt$[rsp+rcx*8]
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159570
  000a8	e8 00 00 00 00	 call	 printf

; 598  :     }

  000ad	eb be		 jmp	 SHORT $LN2@Print_Labe
$LN3@Print_Labe:
$LN1@Print_Labe:

; 599  : 
; 600  :     return;
; 601  : }

  000af	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  000b7	48 33 cc	 xor	 rcx, rsp
  000ba	e8 00 00 00 00	 call	 __security_check_cookie
  000bf	48 81 c4 d8 01
	00 00		 add	 rsp, 472		; 000001d8H
  000c6	c3		 ret	 0
Print_Label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetmap.c
_TEXT	SEGMENT
recfm$ = 48
tv92 = 52
tv95 = 56
tv158 = 60
$T1 = 64
tv129 = 72
fmt$ = 80
lab$ = 400
expdt$ = 480
crtdt$ = 496
__$ArrayPad$ = 512
len$ = 544
fileno$ = 552
Print_Dataset PROC

; 529  : {

$LN11:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00008	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0000f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00016	48 33 c4	 xor	 rax, rsp
  00019	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 530  :     SLLABEL lab;
; 531  :     SLFMT fmt;
; 532  :     char crtdt[ 9 ];
; 533  :     char expdt[ 9 ];
; 534  :     char recfm[ 4 ];
; 535  : 
; 536  :     if( sl_islabel( &lab, gBuffer, len ) == FALSE )

  00021	44 8b 84 24 20
	02 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gBuffer
  00030	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR lab$[rsp]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_islabel
  0003e	85 c0		 test	 eax, eax
  00040	75 05		 jne	 SHORT $LN2@Print_Data

; 537  :     {
; 538  :         return;

  00042	e9 05 02 00 00	 jmp	 $LN1@Print_Data
$LN2@Print_Data:

; 539  :     }
; 540  : 
; 541  :     sl_fmtlab( &fmt, &lab );

  00047	48 8d 94 24 90
	01 00 00	 lea	 rdx, QWORD PTR lab$[rsp]
  0004f	48 8d 4c 24 50	 lea	 rcx, QWORD PTR fmt$[rsp]
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_fmtlab

; 542  : 
; 543  :     if( sl_isvol( gBuffer, 1 ) )

  0005a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00060	ba 01 00 00 00	 mov	 edx, 1
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gBuffer
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_istype
  00072	85 c0		 test	 eax, eax
  00074	74 21		 je	 SHORT $LN3@Print_Data

; 544  :     {
; 545  :         printf ( "vol=%-17.17s  owner=%s\n\n",

  00076	4c 8d 84 24 3e
	01 00 00	 lea	 r8, QWORD PTR fmt$[rsp+238]
  0007e	48 8d 94 24 35
	01 00 00	 lea	 rdx, QWORD PTR fmt$[rsp+229]
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159551
  0008d	e8 00 00 00 00	 call	 printf

; 546  :                fmt.slvol.volser,
; 547  :                fmt.slvol.owner);
; 548  :     }

  00092	e9 b5 01 00 00	 jmp	 $LN4@Print_Data
$LN3@Print_Data:

; 549  :     else if( sl_iseof( gBuffer, 1 ) )

  00097	41 b8 01 00 00
	00		 mov	 r8d, 1
  0009d	ba 04 00 00 00	 mov	 edx, 4
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gBuffer
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_istype
  000af	85 c0		 test	 eax, eax
  000b1	0f 84 bf 00 00
	00		 je	 $LN5@Print_Data

; 550  :     {
; 551  :         printf ( "seq=%-17d  file#=%d\n",

  000b7	48 8d 8c 24 53
	01 00 00	 lea	 rcx, QWORD PTR fmt$[rsp+259]
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000c5	44 8b 84 24 28
	02 00 00	 mov	 r8d, DWORD PTR fileno$[rsp]
  000cd	8b d0		 mov	 edx, eax
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159554
  000d6	e8 00 00 00 00	 call	 printf

; 552  :                atoi( fmt.slds1.dsseq ),
; 553  :                (int)fileno );
; 554  :         printf ( "dsn=%-17.17s  crtdt=%-8.8s  expdt=%-8.8s  blocks=%d\n",

  000db	48 8d 8c 24 85
	01 00 00	 lea	 rcx, QWORD PTR fmt$[rsp+309]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  000e9	69 c0 40 42 0f
	00		 imul	 eax, eax, 1000000	; 000f4240H
  000ef	89 44 24 34	 mov	 DWORD PTR tv92[rsp], eax
  000f3	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR fmt$[rsp+288]
  000fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00101	8b 4c 24 34	 mov	 ecx, DWORD PTR tv92[rsp]
  00105	03 c8		 add	 ecx, eax
  00107	8b c1		 mov	 eax, ecx
  00109	89 44 24 38	 mov	 DWORD PTR tv95[rsp], eax
  0010d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00113	48 8d 94 24 67
	01 00 00	 lea	 rdx, QWORD PTR fmt$[rsp+279]
  0011b	48 8d 8c 24 e0
	01 00 00	 lea	 rcx, QWORD PTR expdt$[rsp]
  00123	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_fmtdate
  00129	48 89 44 24 48	 mov	 QWORD PTR tv129[rsp], rax
  0012e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00134	48 8d 94 24 60
	01 00 00	 lea	 rdx, QWORD PTR fmt$[rsp+272]
  0013c	48 8d 8c 24 f0
	01 00 00	 lea	 rcx, QWORD PTR crtdt$[rsp]
  00144	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_fmtdate
  0014a	8b 4c 24 38	 mov	 ecx, DWORD PTR tv95[rsp]
  0014e	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00152	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv129[rsp]
  00157	4c 8b c9	 mov	 r9, rcx
  0015a	4c 8b c0	 mov	 r8, rax
  0015d	48 8d 94 24 35
	01 00 00	 lea	 rdx, QWORD PTR fmt$[rsp+229]
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159555
  0016c	e8 00 00 00 00	 call	 printf

; 555  :                fmt.slds1.dsid,
; 556  :                sl_fmtdate( crtdt, fmt.slds1.crtdt, TRUE ),
; 557  :                sl_fmtdate( expdt, fmt.slds1.expdt, TRUE ),
; 558  :                atoi( fmt.slds1.blkhi ) * 1000000 + atoi( fmt.slds1.blklo ) );
; 559  :     }

  00171	e9 d6 00 00 00	 jmp	 $LN6@Print_Data
$LN5@Print_Data:

; 560  :     else if( sl_iseof( gBuffer, 2 ) )

  00176	41 b8 02 00 00
	00		 mov	 r8d, 2
  0017c	ba 04 00 00 00	 mov	 edx, 4
  00181	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gBuffer
  00188	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sl_istype
  0018e	85 c0		 test	 eax, eax
  00190	0f 84 b6 00 00
	00		 je	 $LN7@Print_Data

; 561  :     {
; 562  :         recfm[ 0 ] = '\0';

  00196	b8 01 00 00 00	 mov	 eax, 1
  0019b	48 6b c0 00	 imul	 rax, rax, 0
  0019f	48 89 44 24 40	 mov	 QWORD PTR $T1[rsp], rax
  001a4	48 83 7c 24 40
	04		 cmp	 QWORD PTR $T1[rsp], 4
  001aa	73 02		 jae	 SHORT $LN9@Print_Data
  001ac	eb 05		 jmp	 SHORT $LN10@Print_Data
$LN9@Print_Data:
  001ae	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN10@Print_Data:
  001b3	48 8b 44 24 40	 mov	 rax, QWORD PTR $T1[rsp]
  001b8	c6 44 04 30 00	 mov	 BYTE PTR recfm$[rsp+rax], 0

; 563  :         STRLCAT( recfm, fmt.slds2.recfm   );

  001bd	41 b8 04 00 00
	00		 mov	 r8d, 4
  001c3	48 8d 94 24 35
	01 00 00	 lea	 rdx, QWORD PTR fmt$[rsp+229]
  001cb	48 8d 4c 24 30	 lea	 rcx, QWORD PTR recfm$[rsp]
  001d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 564  :         STRLCAT( recfm, fmt.slds2.blkattr );

  001d6	41 b8 04 00 00
	00		 mov	 r8d, 4
  001dc	48 8d 94 24 5e
	01 00 00	 lea	 rdx, QWORD PTR fmt$[rsp+270]
  001e4	48 8d 4c 24 30	 lea	 rcx, QWORD PTR recfm$[rsp]
  001e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 565  :         STRLCAT( recfm, fmt.slds2.ctrl    );

  001ef	41 b8 04 00 00
	00		 mov	 r8d, 4
  001f5	48 8d 94 24 5c
	01 00 00	 lea	 rdx, QWORD PTR fmt$[rsp+268]
  001fd	48 8d 4c 24 30	 lea	 rcx, QWORD PTR recfm$[rsp]
  00202	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcat

; 566  :         printf ( "job=%17.17s  recfm=%-3.3s       lrecl=%-5d     blksize=%-5d\n\n",

  00208	48 8d 8c 24 37
	01 00 00	 lea	 rcx, QWORD PTR fmt$[rsp+231]
  00210	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00216	89 44 24 3c	 mov	 DWORD PTR tv158[rsp], eax
  0021a	48 8d 8c 24 3d
	01 00 00	 lea	 rcx, QWORD PTR fmt$[rsp+237]
  00222	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00228	8b 4c 24 3c	 mov	 ecx, DWORD PTR tv158[rsp]
  0022c	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00230	44 8b c8	 mov	 r9d, eax
  00233	4c 8d 44 24 30	 lea	 r8, QWORD PTR recfm$[rsp]
  00238	48 8d 94 24 47
	01 00 00	 lea	 rdx, QWORD PTR fmt$[rsp+247]
  00240	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159557
  00247	e8 00 00 00 00	 call	 printf
$LN7@Print_Data:
$LN6@Print_Data:
$LN4@Print_Data:
$LN1@Print_Data:
$LN8@Print_Data:

; 567  :                fmt.slds2.jobid,
; 568  :                recfm,
; 569  :                atoi( fmt.slds2.lrecl ),
; 570  :                atoi( fmt.slds2.blksize ) );
; 571  :     }
; 572  : 
; 573  :     return;
; 574  : }

  0024c	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00254	48 33 cc	 xor	 rcx, rsp
  00257	e8 00 00 00 00	 call	 __security_check_cookie
  0025c	48 81 c4 18 02
	00 00		 add	 rsp, 536		; 00000218H
  00263	c3		 ret	 0
Print_Dataset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hetmap.c
_TEXT	SEGMENT
rc$ = 48
opts$ = 52
lResidue$ = 56
i_faketape$ = 60
hetb$ = 64
uminsz$ = 72
i$ = 76
fileno$ = 80
ubytes$ = 84
cbytes$ = 88
umaxsz$ = 92
cminsz$ = 96
tv78 = 100
cmaxsz$ = 104
totblocks$ = 108
tv388 = 112
tv389 = 116
tv399 = 120
tv401 = 124
tv402 = 128
tv412 = 132
tv414 = 136
tv415 = 140
tv386 = 144
i_filename$ = 152
curpos$1 = 160
totcbytes$ = 168
totubytes$ = 176
fetb$ = 184
i$2 = 192
pgm$ = 200
$T3 = 208
$T4 = 216
argc$ = 240
argv$ = 248
main	PROC

; 195  : {

$LN104:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	57		 push	 rdi
  0000a	48 81 ec e0 00
	00 00		 sub	 rsp, 224		; 000000e0H

; 196  :     HETB *hetb;
; 197  :     FETB *fetb;
; 198  :     char *i_filename;
; 199  :     int   i_faketape = FALSE;

  00011	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i_faketape$[rsp], 0

; 200  :     SInt32  rc;
; 201  :     SInt32  fileno;
; 202  :     SInt32  i;
; 203  :     U32  uminsz;
; 204  :     U32  umaxsz;
; 205  :     U32  ubytes;
; 206  :     U32  cminsz;
; 207  :     U32  cmaxsz;
; 208  :     U32  cbytes;
; 209  :     U32  totblocks;
; 210  :     U64  totubytes;
; 211  :     U64  totcbytes;
; 212  :     U32  opts = 0;

  00019	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR opts$[rsp], 0

; 213  :     SInt32  lResidue    = max_bytes_dsply;  /* amount of space left to print */

  00021	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR max_bytes_dsply
  00027	89 44 24 38	 mov	 DWORD PTR lResidue$[rsp], eax

; 214  :     char *pgm;
; 215  : 
; 216  :     INITIALIZE_UTILITY( UTILITY_NAME, UTILITY_DESC, &pgm );

  0002b	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR pgm$[rsp]
  00033	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00038	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159421
  0003f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159422
  00046	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0004e	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_initialize_utility
  0005b	89 84 24 f0 00
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 217  : 
; 218  : #define O_ALL               0xC0
; 219  : #define O_FILES             0X80
; 220  : #define O_LABELS            0X40
; 221  : #define O_DATASETS          0X20
; 222  : #define O_TAPEMAP_OUTPUT    0x10
; 223  : #define O_TAPEMAP_INVOKED   0x08
; 224  : #define O_SLANAL_OUT        0x04
; 225  : 
; 226  :     if (! (opts & O_TAPEMAP_INVOKED) )

  00062	8b 44 24 34	 mov	 eax, DWORD PTR opts$[rsp]
  00066	83 e0 08	 and	 eax, 8
  00069	85 c0		 test	 eax, eax
  0006b	0f 85 53 01 00
	00		 jne	 $LN14@main

; 227  :     {
; 228  : 
; 229  :         opts = O_ALL;

  00071	c7 44 24 34 c0
	00 00 00	 mov	 DWORD PTR opts$[rsp], 192 ; 000000c0H
$LN2@main:

; 230  : 
; 231  :         while( TRUE )

  00079	33 c0		 xor	 eax, eax
  0007b	83 f8 01	 cmp	 eax, 1
  0007e	0f 84 40 01 00
	00		 je	 $LN3@main

; 232  :         {
; 233  :             rc = getopt( argc, argv, "ab:dfhlst" );

  00084	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159424
  0008b	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  00093	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getopt
  000a0	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax

; 234  :             if( rc == -1 )

  000a4	83 7c 24 30 ff	 cmp	 DWORD PTR rc$[rsp], -1
  000a9	75 05		 jne	 SHORT $LN15@main

; 235  :                 break;

  000ab	e9 14 01 00 00	 jmp	 $LN3@main
$LN15@main:

; 236  : 
; 237  :             switch( rc )

  000b0	8b 44 24 30	 mov	 eax, DWORD PTR rc$[rsp]
  000b4	89 44 24 64	 mov	 DWORD PTR tv78[rsp], eax
  000b8	8b 44 24 64	 mov	 eax, DWORD PTR tv78[rsp]
  000bc	83 e8 61	 sub	 eax, 97			; 00000061H
  000bf	89 44 24 64	 mov	 DWORD PTR tv78[rsp], eax
  000c3	83 7c 24 64 13	 cmp	 DWORD PTR tv78[rsp], 19
  000c8	0f 87 da 00 00
	00		 ja	 $LN26@main
  000ce	48 63 44 24 64	 movsxd	 rax, DWORD PTR tv78[rsp]
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000da	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN103@main[rcx+rax*4]
  000e1	48 03 c1	 add	 rax, rcx
  000e4	ff e0		 jmp	 rax
$LN16@main:

; 238  :             {
; 239  :                 case 'a':
; 240  :                     opts = O_ALL;

  000e6	c7 44 24 34 c0
	00 00 00	 mov	 DWORD PTR opts$[rsp], 192 ; 000000c0H

; 241  :                     break;

  000ee	e9 cc 00 00 00	 jmp	 $LN4@main
$LN17@main:

; 242  :                 case 'b':
; 243  :                     max_bytes_dsply = atoi( optarg );

  000f3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optarg
  000fa	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_atoi
  00103	89 05 00 00 00
	00		 mov	 DWORD PTR max_bytes_dsply, eax

; 244  :                     if ( max_bytes_dsply < 256 ) max_bytes_dsply = 256;

  00109	81 3d 00 00 00
	00 00 01 00 00	 cmp	 DWORD PTR max_bytes_dsply, 256 ; 00000100H
  00113	7d 0c		 jge	 SHORT $LN18@main
  00115	c7 05 00 00 00
	00 00 01 00 00	 mov	 DWORD PTR max_bytes_dsply, 256 ; 00000100H
  0011f	eb 34		 jmp	 SHORT $LN19@main
$LN18@main:

; 245  :                     else
; 246  :                     {
; 247  :                         int i;
; 248  :                         i = max_bytes_dsply % 4;

  00121	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR max_bytes_dsply
  00127	99		 cdq
  00128	83 e2 03	 and	 edx, 3
  0012b	03 c2		 add	 eax, edx
  0012d	83 e0 03	 and	 eax, 3
  00130	2b c2		 sub	 eax, edx
  00132	89 84 24 c0 00
	00 00		 mov	 DWORD PTR i$2[rsp], eax

; 249  :                         max_bytes_dsply += (4-i);

  00139	b8 04 00 00 00	 mov	 eax, 4
  0013e	2b 84 24 c0 00
	00 00		 sub	 eax, DWORD PTR i$2[rsp]
  00145	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR max_bytes_dsply
  0014b	03 c8		 add	 ecx, eax
  0014d	8b c1		 mov	 eax, ecx
  0014f	89 05 00 00 00
	00		 mov	 DWORD PTR max_bytes_dsply, eax
$LN19@main:

; 250  :                     }
; 251  :                     opts = O_SLANAL_OUT;

  00155	c7 44 24 34 04
	00 00 00	 mov	 DWORD PTR opts$[rsp], 4

; 252  :                     break;

  0015d	eb 60		 jmp	 SHORT $LN4@main
$LN20@main:

; 253  :                 case 'd':
; 254  :                     opts = O_DATASETS;

  0015f	c7 44 24 34 20
	00 00 00	 mov	 DWORD PTR opts$[rsp], 32 ; 00000020H

; 255  :                     break;

  00167	eb 56		 jmp	 SHORT $LN4@main
$LN21@main:

; 256  :                 case 'f':
; 257  :                     opts = O_FILES;

  00169	c7 44 24 34 80
	00 00 00	 mov	 DWORD PTR opts$[rsp], 128 ; 00000080H

; 258  :                     break;

  00171	eb 4c		 jmp	 SHORT $LN4@main
$LN22@main:

; 259  :                 case 'h':
; 260  :                     Print_Usage( pgm );

  00173	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  0017b	e8 00 00 00 00	 call	 Print_Usage

; 261  :                     return 1;

  00180	b8 01 00 00 00	 mov	 eax, 1
  00185	e9 33 0b 00 00	 jmp	 $LN1@main
$LN23@main:

; 262  :                 case 'l':
; 263  :                     opts = O_LABELS;

  0018a	c7 44 24 34 40
	00 00 00	 mov	 DWORD PTR opts$[rsp], 64 ; 00000040H

; 264  :                     break;

  00192	eb 2b		 jmp	 SHORT $LN4@main
$LN24@main:

; 265  :                 case 's':
; 266  :                     opts = O_SLANAL_OUT;

  00194	c7 44 24 34 04
	00 00 00	 mov	 DWORD PTR opts$[rsp], 4

; 267  :                     break;

  0019c	eb 21		 jmp	 SHORT $LN4@main
$LN25@main:

; 268  :                 case 't':
; 269  :                     opts = O_TAPEMAP_OUTPUT;

  0019e	c7 44 24 34 10
	00 00 00	 mov	 DWORD PTR opts$[rsp], 16

; 270  :                     break;

  001a6	eb 17		 jmp	 SHORT $LN4@main
$LN26@main:

; 271  :                 default:
; 272  :                     Print_Usage( pgm );

  001a8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  001b0	e8 00 00 00 00	 call	 Print_Usage

; 273  :                     return 1;

  001b5	b8 01 00 00 00	 mov	 eax, 1
  001ba	e9 fe 0a 00 00	 jmp	 $LN1@main
$LN4@main:

; 274  :             }
; 275  :         }

  001bf	e9 b5 fe ff ff	 jmp	 $LN2@main
$LN3@main:
$LN14@main:

; 276  : 
; 277  :     }  // end if (! (opts & O_TAPEMAP_INVOKED) )
; 278  : 
; 279  :     argc -= optind;

  001c4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  001cb	8b 00		 mov	 eax, DWORD PTR [rax]
  001cd	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR argc$[rsp]
  001d4	2b c8		 sub	 ecx, eax
  001d6	8b c1		 mov	 eax, ecx
  001d8	89 84 24 f0 00
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 280  :     if( argc != 1 )

  001df	83 bc 24 f0 00
	00 00 01	 cmp	 DWORD PTR argc$[rsp], 1
  001e7	74 18		 je	 SHORT $LN27@main

; 281  :     {
; 282  :         Print_Usage( pgm );

  001e9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pgm$[rsp]
  001f1	e8 00 00 00 00	 call	 Print_Usage

; 283  :         exit( 1 );

  001f6	b9 01 00 00 00	 mov	 ecx, 1
  001fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN27@main:

; 284  :     }
; 285  : 
; 286  :     if( opts & O_ALL )

  00201	8b 44 24 34	 mov	 eax, DWORD PTR opts$[rsp]
  00205	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  0020a	85 c0		 test	 eax, eax
  0020c	74 3c		 je	 SHORT $LN28@main

; 287  :     {
; 288  :         printf( "%s", sep );

  0020e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sep
  00215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159439
  0021c	e8 00 00 00 00	 call	 printf

; 289  :         printf( "%-20.20s: %s\n", "Filename", argv[ optind ] );

  00221	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00228	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0022b	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00233	4c 8b 04 c1	 mov	 r8, QWORD PTR [rcx+rax*8]
  00237	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159440
  0023e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159441
  00245	e8 00 00 00 00	 call	 printf
$LN28@main:

; 290  :     }
; 291  : 
; 292  :     i_filename = argv[ optind ];

  0024a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_optind
  00251	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00254	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0025c	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00260	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR i_filename$[rsp], rax

; 293  : 
; 294  :     if ( ( rc = (int)strlen( i_filename ) ) > 4 && ( rc = strcasecmp( &i_filename[rc-4], ".fkt" ) ) == 0 )

  00268	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i_filename$[rsp]
  00270	e8 00 00 00 00	 call	 strlen
  00275	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax
  00279	83 7c 24 30 04	 cmp	 DWORD PTR rc$[rsp], 4
  0027e	7e 3a		 jle	 SHORT $LN29@main
  00280	8b 44 24 30	 mov	 eax, DWORD PTR rc$[rsp]
  00284	83 e8 04	 sub	 eax, 4
  00287	48 98		 cdqe
  00289	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR i_filename$[rsp]
  00291	48 03 c8	 add	 rcx, rax
  00294	48 8b c1	 mov	 rax, rcx
  00297	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159443
  0029e	48 8b c8	 mov	 rcx, rax
  002a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  002a7	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax
  002ab	83 7c 24 30 00	 cmp	 DWORD PTR rc$[rsp], 0
  002b0	75 08		 jne	 SHORT $LN29@main

; 295  :     {
; 296  :         i_faketape = TRUE;

  002b2	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR i_faketape$[rsp], 1
$LN29@main:

; 297  :     }
; 298  : 
; 299  :     if ( i_faketape )

  002ba	83 7c 24 3c 00	 cmp	 DWORD PTR i_faketape$[rsp], 0
  002bf	74 22		 je	 SHORT $LN30@main

; 300  :         rc = fet_open( &fetb, i_filename, FETOPEN_READONLY );

  002c1	41 b8 02 00 00
	00		 mov	 r8d, 2
  002c7	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR i_filename$[rsp]
  002cf	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR fetb$[rsp]
  002d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_open
  002dd	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax
  002e1	eb 1d		 jmp	 SHORT $LN31@main
$LN30@main:

; 301  :     else
; 302  :         rc = het_open( &hetb, i_filename, HETOPEN_READONLY );

  002e3	41 b8 02 00 00
	00		 mov	 r8d, 2
  002e9	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR i_filename$[rsp]
  002f1	48 8d 4c 24 40	 lea	 rcx, QWORD PTR hetb$[rsp]
  002f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_open
  002fc	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax
$LN31@main:

; 303  :     if( rc < 0 )

  00300	83 7c 24 30 00	 cmp	 DWORD PTR rc$[rsp], 0
  00305	7d 4d		 jge	 SHORT $LN32@main

; 304  :     {
; 305  :         if ( i_faketape )

  00307	83 7c 24 3c 00	 cmp	 DWORD PTR i_faketape$[rsp], 0
  0030c	74 20		 je	 SHORT $LN33@main

; 306  :         {
; 307  :             printf( "fet_open() returned %d\n", (int)rc );

  0030e	8b 54 24 30	 mov	 edx, DWORD PTR rc$[rsp]
  00312	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159449
  00319	e8 00 00 00 00	 call	 printf

; 308  :             fet_close( &fetb );

  0031e	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR fetb$[rsp]
  00326	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_close

; 309  :         }

  0032c	eb 1b		 jmp	 SHORT $LN34@main
$LN33@main:

; 310  :         else
; 311  :         {
; 312  :             printf( "het_open() returned %d\n", (int)rc );

  0032e	8b 54 24 30	 mov	 edx, DWORD PTR rc$[rsp]
  00332	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159450
  00339	e8 00 00 00 00	 call	 printf

; 313  :             het_close( &hetb );

  0033e	48 8d 4c 24 40	 lea	 rcx, QWORD PTR hetb$[rsp]
  00343	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_close
$LN34@main:

; 314  :         }
; 315  :         exit( 1 );

  00349	b9 01 00 00 00	 mov	 ecx, 1
  0034e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN32@main:

; 316  :     }
; 317  : 
; 318  :     BLANK_OUT ( gStdLblBuffer, sizeof ( gStdLblBuffer ) );

  00354	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:gStdLblBuffer
  0035b	48 8b f8	 mov	 rdi, rax
  0035e	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00363	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00368	f3 aa		 rep stosb
  0036a	b8 01 00 00 00	 mov	 eax, 1
  0036f	48 6b c0 50	 imul	 rax, rax, 80		; 00000050H
  00373	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR $T3[rsp], rax
  0037b	48 83 bc 24 d0
	00 00 00 51	 cmp	 QWORD PTR $T3[rsp], 81	; 00000051H
  00384	73 02		 jae	 SHORT $LN80@main
  00386	eb 05		 jmp	 SHORT $LN81@main
$LN80@main:
  00388	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN81@main:
  0038d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:gStdLblBuffer
  00394	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR $T3[rsp]
  0039c	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 319  : 
; 320  :     fileno = 0;

  003a0	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR fileno$[rsp], 0

; 321  :     gBlkCount = 0;

  003a8	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR gBlkCount, 0

; 322  : 
; 323  :     uminsz = 0;

  003b2	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR uminsz$[rsp], 0

; 324  :     umaxsz = 0;

  003ba	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR umaxsz$[rsp], 0

; 325  :     ubytes = 0;

  003c2	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR ubytes$[rsp], 0

; 326  :     cminsz = 0;

  003ca	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR cminsz$[rsp], 0

; 327  :     cmaxsz = 0;

  003d2	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR cmaxsz$[rsp], 0

; 328  :     cbytes = 0;

  003da	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR cbytes$[rsp], 0

; 329  : 
; 330  :     totblocks = 0;

  003e2	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR totblocks$[rsp], 0

; 331  :     totubytes = 0;

  003ea	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR totubytes$[rsp], 0

; 332  :     totcbytes = 0;

  003f6	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR totcbytes$[rsp], 0
$LN102@main:
$LN6@main:

; 333  : 
; 334  :     while( TRUE )

  00402	33 c0		 xor	 eax, eax
  00404	83 f8 01	 cmp	 eax, 1
  00407	0f 84 bc 07 00
	00		 je	 $LN7@main

; 335  :     {
; 336  :         if( extgui )

  0040d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  00414	83 38 00	 cmp	 DWORD PTR [rax], 0
  00417	0f 84 9d 00 00
	00		 je	 $LN35@main

; 337  :         {
; 338  :             off_t curpos;
; 339  :             /* Report progress every nnnK */
; 340  :             if ( i_faketape )

  0041d	83 7c 24 3c 00	 cmp	 DWORD PTR i_faketape$[rsp], 0
  00422	74 1b		 je	 SHORT $LN36@main

; 341  :                 curpos = ftell( fetb->fh );

  00424	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR fetb$[rsp]
  0042c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0042f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ftelli64
  00435	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR curpos$1[rsp], rax
  0043d	eb 16		 jmp	 SHORT $LN37@main
$LN36@main:

; 342  :             else
; 343  :                 curpos = ftell( hetb->fh );

  0043f	48 8b 44 24 40	 mov	 rax, QWORD PTR hetb$[rsp]
  00444	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00447	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__ftelli64
  0044d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR curpos$1[rsp], rax
$LN37@main:

; 344  :             if( ( curpos & PROGRESS_MASK ) != ( prevpos & PROGRESS_MASK ) )

  00455	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR curpos$1[rsp]
  0045d	48 25 00 00 fc
	ff		 and	 rax, -262144		; fffffffffffc0000H
  00463	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR prevpos
  0046a	48 81 e1 00 00
	fc ff		 and	 rcx, -262144		; fffffffffffc0000H
  00471	48 3b c1	 cmp	 rax, rcx
  00474	74 44		 je	 SHORT $LN38@main

; 345  :             {
; 346  :                 prevpos = curpos;

  00476	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR curpos$1[rsp]
  0047e	48 89 05 00 00
	00 00		 mov	 QWORD PTR prevpos, rax
$LN10@main:

; 347  :                 EXTGUIMSG( "IPOS=%"PRId64"\n", (U64)curpos );

  00485	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_extgui
  0048c	83 38 00	 cmp	 DWORD PTR [rax], 0
  0048f	74 23		 je	 SHORT $LN39@main
  00491	b9 02 00 00 00	 mov	 ecx, 2
  00496	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0049c	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR curpos$1[rsp]
  004a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159456
  004ab	48 8b c8	 mov	 rcx, rax
  004ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_fprintf
$LN39@main:
  004b4	33 c0		 xor	 eax, eax
  004b6	85 c0		 test	 eax, eax
  004b8	75 cb		 jne	 SHORT $LN10@main
$LN38@main:
$LN35@main:

; 348  :             }
; 349  :         }
; 350  : 
; 351  :         if ( i_faketape)

  004ba	83 7c 24 3c 00	 cmp	 DWORD PTR i_faketape$[rsp], 0
  004bf	74 1b		 je	 SHORT $LN40@main

; 352  :         {
; 353  :             rc = fet_read( fetb, gBuffer );

  004c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gBuffer
  004c8	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR fetb$[rsp]
  004d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_read
  004d6	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax

; 354  :         }

  004da	eb 16		 jmp	 SHORT $LN41@main
$LN40@main:

; 355  :         else
; 356  :             rc = het_read( hetb, gBuffer );

  004dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:gBuffer
  004e3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR hetb$[rsp]
  004e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_read
  004ee	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax
$LN41@main:

; 357  :         if( rc == HETE_EOT )                    // FETE and HETE enums are the same

  004f2	83 7c 24 30 fc	 cmp	 DWORD PTR rc$[rsp], -4
  004f7	75 1c		 jne	 SHORT $LN42@main

; 358  :         {
; 359  :             if( opts & O_TAPEMAP_OUTPUT )

  004f9	8b 44 24 34	 mov	 eax, DWORD PTR opts$[rsp]
  004fd	83 e0 10	 and	 eax, 16
  00500	85 c0		 test	 eax, eax
  00502	74 0c		 je	 SHORT $LN43@main

; 360  :             {
; 361  :                 printf ("End of tape.\n");

  00504	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159461
  0050b	e8 00 00 00 00	 call	 printf
$LN43@main:

; 362  :             }
; 363  :             break;

  00510	e9 b4 06 00 00	 jmp	 $LN7@main
$LN42@main:

; 364  :         }
; 365  : 
; 366  :         if( rc == HETE_TAPEMARK )

  00515	83 7c 24 30 fe	 cmp	 DWORD PTR rc$[rsp], -2
  0051a	0f 85 c1 01 00
	00		 jne	 $LN44@main

; 367  :         {
; 368  :             fileno += 1;

  00520	8b 44 24 50	 mov	 eax, DWORD PTR fileno$[rsp]
  00524	ff c0		 inc	 eax
  00526	89 44 24 50	 mov	 DWORD PTR fileno$[rsp], eax

; 369  : 
; 370  :             lResidue = max_bytes_dsply;

  0052a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR max_bytes_dsply
  00530	89 44 24 38	 mov	 DWORD PTR lResidue$[rsp], eax

; 371  : 
; 372  :             if( opts & O_TAPEMAP_OUTPUT )

  00534	8b 44 24 34	 mov	 eax, DWORD PTR opts$[rsp]
  00538	83 e0 10	 and	 eax, 16
  0053b	85 c0		 test	 eax, eax
  0053d	74 24		 je	 SHORT $LN45@main

; 373  :             {
; 374  :                 printf ("File %d: Blocks=%d, block size min=%d, max=%d\n",

  0053f	8b 44 24 5c	 mov	 eax, DWORD PTR umaxsz$[rsp]
  00543	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00547	44 8b 4c 24 48	 mov	 r9d, DWORD PTR uminsz$[rsp]
  0054c	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR gBlkCount
  00553	8b 54 24 50	 mov	 edx, DWORD PTR fileno$[rsp]
  00557	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159464
  0055e	e8 00 00 00 00	 call	 printf
$LN45@main:

; 375  :                         (int)fileno, (int)gBlkCount, (int)uminsz, (int)umaxsz      );
; 376  :             }
; 377  : 
; 378  :             if( opts & O_FILES )

  00563	8b 44 24 34	 mov	 eax, DWORD PTR opts$[rsp]
  00567	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0056c	85 c0		 test	 eax, eax
  0056e	0f 84 dc 00 00
	00		 je	 $LN46@main

; 379  :             {
; 380  :                 printf ( "%s", sep );

  00574	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sep
  0057b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159466
  00582	e8 00 00 00 00	 call	 printf

; 381  :                 printf ( "%-20.20s: %d\n", "File #", (int)fileno );

  00587	44 8b 44 24 50	 mov	 r8d, DWORD PTR fileno$[rsp]
  0058c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159467
  00593	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159468
  0059a	e8 00 00 00 00	 call	 printf

; 382  :                 printf ( "%-20.20s: %d\n", "Blocks", (int)gBlkCount );

  0059f	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR gBlkCount
  005a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159469
  005ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159470
  005b4	e8 00 00 00 00	 call	 printf

; 383  :                 printf ( "%-20.20s: %d\n", "Min Blocksize", (int)uminsz );

  005b9	44 8b 44 24 48	 mov	 r8d, DWORD PTR uminsz$[rsp]
  005be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159471
  005c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159472
  005cc	e8 00 00 00 00	 call	 printf

; 384  :                 printf ( "%-20.20s: %d\n", "Max Blocksize", (int)umaxsz );

  005d1	44 8b 44 24 5c	 mov	 r8d, DWORD PTR umaxsz$[rsp]
  005d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159473
  005dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159474
  005e4	e8 00 00 00 00	 call	 printf

; 385  :                 if ( !i_faketape )

  005e9	83 7c 24 3c 00	 cmp	 DWORD PTR i_faketape$[rsp], 0
  005ee	75 60		 jne	 SHORT $LN47@main

; 386  :                 {
; 387  :                     printf ( "%-20.20s: %d\n", "Uncompressed bytes", (int)ubytes );

  005f0	44 8b 44 24 54	 mov	 r8d, DWORD PTR ubytes$[rsp]
  005f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159476
  005fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159477
  00603	e8 00 00 00 00	 call	 printf

; 388  :                     printf ( "%-20.20s: %d\n", "Min Blocksize-Comp", (int)cminsz );

  00608	44 8b 44 24 60	 mov	 r8d, DWORD PTR cminsz$[rsp]
  0060d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159478
  00614	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159479
  0061b	e8 00 00 00 00	 call	 printf

; 389  :                     printf ( "%-20.20s: %d\n", "Max Blocksize-Comp", (int)cmaxsz );

  00620	44 8b 44 24 68	 mov	 r8d, DWORD PTR cmaxsz$[rsp]
  00625	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159480
  0062c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159481
  00633	e8 00 00 00 00	 call	 printf

; 390  :                     printf ( "%-20.20s: %d\n", "Compressed bytes", (int)cbytes );

  00638	44 8b 44 24 58	 mov	 r8d, DWORD PTR cbytes$[rsp]
  0063d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159482
  00644	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159483
  0064b	e8 00 00 00 00	 call	 printf
$LN47@main:
$LN46@main:

; 391  :                 }
; 392  :             }
; 393  : 
; 394  :             totblocks += gBlkCount;

  00650	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR gBlkCount
  00656	8b 4c 24 6c	 mov	 ecx, DWORD PTR totblocks$[rsp]
  0065a	03 c8		 add	 ecx, eax
  0065c	8b c1		 mov	 eax, ecx
  0065e	89 44 24 6c	 mov	 DWORD PTR totblocks$[rsp], eax

; 395  :             totubytes += ubytes;

  00662	8b 44 24 54	 mov	 eax, DWORD PTR ubytes$[rsp]
  00666	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR totubytes$[rsp]
  0066e	48 03 c8	 add	 rcx, rax
  00671	48 8b c1	 mov	 rax, rcx
  00674	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR totubytes$[rsp], rax

; 396  :             totcbytes += cbytes;

  0067c	8b 44 24 58	 mov	 eax, DWORD PTR cbytes$[rsp]
  00680	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR totcbytes$[rsp]
  00688	48 03 c8	 add	 rcx, rax
  0068b	48 8b c1	 mov	 rax, rcx
  0068e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR totcbytes$[rsp], rax

; 397  : 
; 398  :             gPrevBlkCnt = gBlkCount;

  00696	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR gBlkCount
  0069c	89 05 00 00 00
	00		 mov	 DWORD PTR gPrevBlkCnt, eax

; 399  :             gBlkCount = 0;

  006a2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR gBlkCount, 0

; 400  : 
; 401  :             uminsz = 0;

  006ac	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR uminsz$[rsp], 0

; 402  :             umaxsz = 0;

  006b4	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR umaxsz$[rsp], 0

; 403  :             ubytes = 0;

  006bc	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR ubytes$[rsp], 0

; 404  :             cminsz = 0;

  006c4	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR cminsz$[rsp], 0

; 405  :             cmaxsz = 0;

  006cc	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR cmaxsz$[rsp], 0

; 406  :             cbytes = 0;

  006d4	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR cbytes$[rsp], 0

; 407  : 
; 408  :             continue;

  006dc	e9 21 fd ff ff	 jmp	 $LN6@main
$LN44@main:

; 409  :         }
; 410  : 
; 411  :         if( rc < 0 )

  006e1	83 7c 24 30 00	 cmp	 DWORD PTR rc$[rsp], 0
  006e6	7d 2e		 jge	 SHORT $LN48@main

; 412  :         {
; 413  :             if ( i_faketape )

  006e8	83 7c 24 3c 00	 cmp	 DWORD PTR i_faketape$[rsp], 0
  006ed	74 12		 je	 SHORT $LN49@main

; 414  :                 printf ( "fet_read() returned %d\n", (int)rc );

  006ef	8b 54 24 30	 mov	 edx, DWORD PTR rc$[rsp]
  006f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159487
  006fa	e8 00 00 00 00	 call	 printf
  006ff	eb 10		 jmp	 SHORT $LN50@main
$LN49@main:

; 415  :             else
; 416  :                 printf ( "het_read() returned %d\n", (int)rc );

  00701	8b 54 24 30	 mov	 edx, DWORD PTR rc$[rsp]
  00705	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159488
  0070c	e8 00 00 00 00	 call	 printf
$LN50@main:

; 417  :             break;

  00711	e9 b3 04 00 00	 jmp	 $LN7@main
$LN48@main:

; 418  :         }
; 419  : 
; 420  :         gBlkCount += 1;

  00716	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR gBlkCount
  0071c	ff c0		 inc	 eax
  0071e	89 05 00 00 00
	00		 mov	 DWORD PTR gBlkCount, eax

; 421  :         if ( !i_faketape )

  00724	83 7c 24 3c 00	 cmp	 DWORD PTR i_faketape$[rsp], 0
  00729	0f 85 9e 00 00
	00		 jne	 $LN51@main

; 422  :         {
; 423  :             ubytes += hetb->ublksize;

  0072f	48 8b 44 24 40	 mov	 rax, QWORD PTR hetb$[rsp]
  00734	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00737	8b 4c 24 54	 mov	 ecx, DWORD PTR ubytes$[rsp]
  0073b	03 c8		 add	 ecx, eax
  0073d	8b c1		 mov	 eax, ecx
  0073f	89 44 24 54	 mov	 DWORD PTR ubytes$[rsp], eax

; 424  :             cbytes += hetb->cblksize;

  00743	48 8b 44 24 40	 mov	 rax, QWORD PTR hetb$[rsp]
  00748	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  0074b	8b 4c 24 58	 mov	 ecx, DWORD PTR cbytes$[rsp]
  0074f	03 c8		 add	 ecx, eax
  00751	8b c1		 mov	 eax, ecx
  00753	89 44 24 58	 mov	 DWORD PTR cbytes$[rsp], eax

; 425  : 
; 426  :             if( uminsz == 0 || hetb->ublksize < uminsz ) uminsz = hetb->ublksize;

  00757	83 7c 24 48 00	 cmp	 DWORD PTR uminsz$[rsp], 0
  0075c	74 0e		 je	 SHORT $LN53@main
  0075e	48 8b 44 24 40	 mov	 rax, QWORD PTR hetb$[rsp]
  00763	8b 4c 24 48	 mov	 ecx, DWORD PTR uminsz$[rsp]
  00767	39 48 10	 cmp	 DWORD PTR [rax+16], ecx
  0076a	73 0c		 jae	 SHORT $LN52@main
$LN53@main:
  0076c	48 8b 44 24 40	 mov	 rax, QWORD PTR hetb$[rsp]
  00771	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00774	89 44 24 48	 mov	 DWORD PTR uminsz$[rsp], eax
$LN52@main:

; 427  :             if( hetb->ublksize > umaxsz ) umaxsz = hetb->ublksize;

  00778	48 8b 44 24 40	 mov	 rax, QWORD PTR hetb$[rsp]
  0077d	8b 4c 24 5c	 mov	 ecx, DWORD PTR umaxsz$[rsp]
  00781	39 48 10	 cmp	 DWORD PTR [rax+16], ecx
  00784	76 0c		 jbe	 SHORT $LN54@main
  00786	48 8b 44 24 40	 mov	 rax, QWORD PTR hetb$[rsp]
  0078b	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0078e	89 44 24 5c	 mov	 DWORD PTR umaxsz$[rsp], eax
$LN54@main:

; 428  :             if( cminsz == 0 || hetb->cblksize < cminsz ) cminsz = hetb->cblksize;

  00792	83 7c 24 60 00	 cmp	 DWORD PTR cminsz$[rsp], 0
  00797	74 0e		 je	 SHORT $LN56@main
  00799	48 8b 44 24 40	 mov	 rax, QWORD PTR hetb$[rsp]
  0079e	8b 4c 24 60	 mov	 ecx, DWORD PTR cminsz$[rsp]
  007a2	39 48 14	 cmp	 DWORD PTR [rax+20], ecx
  007a5	73 0c		 jae	 SHORT $LN55@main
$LN56@main:
  007a7	48 8b 44 24 40	 mov	 rax, QWORD PTR hetb$[rsp]
  007ac	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  007af	89 44 24 60	 mov	 DWORD PTR cminsz$[rsp], eax
$LN55@main:

; 429  :             if( hetb->cblksize > cmaxsz ) cmaxsz = hetb->cblksize;

  007b3	48 8b 44 24 40	 mov	 rax, QWORD PTR hetb$[rsp]
  007b8	8b 4c 24 68	 mov	 ecx, DWORD PTR cmaxsz$[rsp]
  007bc	39 48 14	 cmp	 DWORD PTR [rax+20], ecx
  007bf	76 0c		 jbe	 SHORT $LN57@main
  007c1	48 8b 44 24 40	 mov	 rax, QWORD PTR hetb$[rsp]
  007c6	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  007c9	89 44 24 68	 mov	 DWORD PTR cmaxsz$[rsp], eax
$LN57@main:
$LN51@main:

; 430  :         }
; 431  : 
; 432  :         if ( rc >= 80 )

  007cd	83 7c 24 30 50	 cmp	 DWORD PTR rc$[rsp], 80	; 00000050H
  007d2	7c 79		 jl	 SHORT $LN58@main

; 433  :         {
; 434  :             for (i=0; i < 80; i++)

  007d4	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  007dc	eb 0a		 jmp	 SHORT $LN13@main
$LN11@main:
  007de	8b 44 24 4c	 mov	 eax, DWORD PTR i$[rsp]
  007e2	ff c0		 inc	 eax
  007e4	89 44 24 4c	 mov	 DWORD PTR i$[rsp], eax
$LN13@main:
  007e8	83 7c 24 4c 50	 cmp	 DWORD PTR i$[rsp], 80	; 00000050H
  007ed	7d 2c		 jge	 SHORT $LN12@main

; 435  :             {
; 436  :                 gStdLblBuffer[i] = ebcdic_to_ascii[gBuffer[i]];

  007ef	48 63 44 24 4c	 movsxd	 rax, DWORD PTR i$[rsp]
  007f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gBuffer
  007fb	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  007ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ebcdic_to_ascii
  00806	48 63 54 24 4c	 movsxd	 rdx, DWORD PTR i$[rsp]
  0080b	48 8d 3d 00 00
	00 00		 lea	 rdi, OFFSET FLAT:gStdLblBuffer
  00812	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00816	88 04 17	 mov	 BYTE PTR [rdi+rdx], al

; 437  :             }

  00819	eb c3		 jmp	 SHORT $LN11@main
$LN12@main:

; 438  :             gStdLblBuffer[i] = '\0';

  0081b	48 63 44 24 4c	 movsxd	 rax, DWORD PTR i$[rsp]
  00820	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR $T4[rsp], rax
  00828	48 83 bc 24 d8
	00 00 00 51	 cmp	 QWORD PTR $T4[rsp], 81	; 00000051H
  00831	73 02		 jae	 SHORT $LN82@main
  00833	eb 05		 jmp	 SHORT $LN83@main
$LN82@main:
  00835	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN83@main:
  0083a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:gStdLblBuffer
  00841	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR $T4[rsp]
  00849	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0
$LN58@main:

; 439  :         }
; 440  : 
; 441  :         if( opts & O_LABELS )

  0084d	8b 44 24 34	 mov	 eax, DWORD PTR opts$[rsp]
  00851	83 e0 40	 and	 eax, 64			; 00000040H
  00854	85 c0		 test	 eax, eax
  00856	74 09		 je	 SHORT $LN59@main

; 442  :         {
; 443  :             Print_Label( rc );

  00858	8b 4c 24 30	 mov	 ecx, DWORD PTR rc$[rsp]
  0085c	e8 00 00 00 00	 call	 Print_Label
$LN59@main:

; 444  :         }
; 445  : 
; 446  :         if( opts & O_TAPEMAP_OUTPUT )

  00861	8b 44 24 34	 mov	 eax, DWORD PTR opts$[rsp]
  00865	83 e0 10	 and	 eax, 16
  00868	85 c0		 test	 eax, eax
  0086a	74 09		 je	 SHORT $LN60@main

; 447  :         {
; 448  :             Print_Label_Tapemap( rc );

  0086c	8b 4c 24 30	 mov	 ecx, DWORD PTR rc$[rsp]
  00870	e8 00 00 00 00	 call	 Print_Label_Tapemap
$LN60@main:

; 449  :         }
; 450  : 
; 451  :         if( opts & O_DATASETS )

  00875	8b 44 24 34	 mov	 eax, DWORD PTR opts$[rsp]
  00879	83 e0 20	 and	 eax, 32			; 00000020H
  0087c	85 c0		 test	 eax, eax
  0087e	74 0d		 je	 SHORT $LN61@main

; 452  :         {
; 453  :             Print_Dataset( rc, fileno );

  00880	8b 54 24 50	 mov	 edx, DWORD PTR fileno$[rsp]
  00884	8b 4c 24 30	 mov	 ecx, DWORD PTR rc$[rsp]
  00888	e8 00 00 00 00	 call	 Print_Dataset
$LN61@main:

; 454  :         }
; 455  : 
; 456  :         if( opts & O_SLANAL_OUT )

  0088d	8b 44 24 34	 mov	 eax, DWORD PTR opts$[rsp]
  00891	83 e0 04	 and	 eax, 4
  00894	85 c0		 test	 eax, eax
  00896	0f 84 28 03 00
	00		 je	 $LN62@main

; 457  :         {
; 458  :             gLength = rc;

  0089c	8b 44 24 30	 mov	 eax, DWORD PTR rc$[rsp]
  008a0	89 05 00 00 00
	00		 mov	 DWORD PTR gLength, eax

; 459  : 
; 460  :             if ( gLength == 80 )

  008a6	83 3d 00 00 00
	00 50		 cmp	 DWORD PTR gLength, 80	; 00000050H
  008ad	0f 85 48 02 00
	00		 jne	 $LN63@main

; 461  :             {
; 462  :                 if ( 0
; 463  :                     || memcmp ( gStdLblBuffer, "HDR", 3 ) == 0
; 464  :                     || memcmp ( gStdLblBuffer, "EOF", 3 ) == 0
; 465  :                     || memcmp ( gStdLblBuffer, "VOL", 3 ) == 0
; 466  :                     || memcmp ( gStdLblBuffer, "EOV", 3 ) == 0
; 467  :                     || memcmp ( gStdLblBuffer, "UHL", 3 ) == 0
; 468  :                     || memcmp ( gStdLblBuffer, "UTL", 3 ) == 0 )

  008b3	33 c0		 xor	 eax, eax
  008b5	85 c0		 test	 eax, eax
  008b7	0f 85 b6 00 00
	00		 jne	 $LN67@main
  008bd	41 b8 03 00 00
	00		 mov	 r8d, 3
  008c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159506
  008ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  008d1	e8 00 00 00 00	 call	 memcmp
  008d6	85 c0		 test	 eax, eax
  008d8	0f 84 95 00 00
	00		 je	 $LN67@main
  008de	41 b8 03 00 00
	00		 mov	 r8d, 3
  008e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159507
  008eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  008f2	e8 00 00 00 00	 call	 memcmp
  008f7	85 c0		 test	 eax, eax
  008f9	74 78		 je	 SHORT $LN67@main
  008fb	41 b8 03 00 00
	00		 mov	 r8d, 3
  00901	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159508
  00908	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  0090f	e8 00 00 00 00	 call	 memcmp
  00914	85 c0		 test	 eax, eax
  00916	74 5b		 je	 SHORT $LN67@main
  00918	41 b8 03 00 00
	00		 mov	 r8d, 3
  0091e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159509
  00925	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  0092c	e8 00 00 00 00	 call	 memcmp
  00931	85 c0		 test	 eax, eax
  00933	74 3e		 je	 SHORT $LN67@main
  00935	41 b8 03 00 00
	00		 mov	 r8d, 3
  0093b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159510
  00942	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  00949	e8 00 00 00 00	 call	 memcmp
  0094e	85 c0		 test	 eax, eax
  00950	74 21		 je	 SHORT $LN67@main
  00952	41 b8 03 00 00
	00		 mov	 r8d, 3
  00958	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159511
  0095f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gStdLblBuffer
  00966	e8 00 00 00 00	 call	 memcmp
  0096b	85 c0		 test	 eax, eax
  0096d	0f 85 cc 00 00
	00		 jne	 $LN65@main
$LN67@main:

; 469  :                 {
; 470  :                     if ( !Print_Standard_Labels (  ) )

  00973	e8 00 00 00 00	 call	 Print_Standard_Labels
  00978	0f b6 c0	 movzx	 eax, al
  0097b	85 c0		 test	 eax, eax
  0097d	0f 85 b7 00 00
	00		 jne	 $LN68@main

; 471  :                     {
; 472  :                         if ( gBlkCount <= 10 && ( gBlkCount == 1 || ( gBlkCount > 1 && lResidue > bytes_per_line ) ) )

  00983	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR gBlkCount, 10
  0098a	0f 87 aa 00 00
	00		 ja	 $LN69@main
  00990	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR gBlkCount, 1
  00997	74 18		 je	 SHORT $LN70@main
  00999	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR gBlkCount, 1
  009a0	0f 86 94 00 00
	00		 jbe	 $LN69@main
  009a6	83 7c 24 38 20	 cmp	 DWORD PTR lResidue$[rsp], 32 ; 00000020H
  009ab	0f 8e 89 00 00
	00		 jle	 $LN69@main
$LN70@main:

; 473  :                         {
; 474  :                             gLenPrtd = ( gBlkCount == 1 ? ( gLength <= max_bytes_dsply ? gLength : max_bytes_dsply ) :

  009b1	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR gBlkCount, 1
  009b8	75 37		 jne	 SHORT $LN88@main
  009ba	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR max_bytes_dsply
  009c0	39 05 00 00 00
	00		 cmp	 DWORD PTR gLength, eax
  009c6	7f 0f		 jg	 SHORT $LN84@main
  009c8	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR gLength
  009ce	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv386[rsp], eax
  009d5	eb 0d		 jmp	 SHORT $LN85@main
$LN84@main:
  009d7	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR max_bytes_dsply
  009dd	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv386[rsp], eax
$LN85@main:
  009e4	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv386[rsp]
  009eb	89 44 24 74	 mov	 DWORD PTR tv389[rsp], eax
  009ef	eb 28		 jmp	 SHORT $LN89@main
$LN88@main:
  009f1	8b 44 24 38	 mov	 eax, DWORD PTR lResidue$[rsp]
  009f5	39 05 00 00 00
	00		 cmp	 DWORD PTR gLength, eax
  009fb	7f 0c		 jg	 SHORT $LN86@main
  009fd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR gLength
  00a03	89 44 24 70	 mov	 DWORD PTR tv388[rsp], eax
  00a07	eb 08		 jmp	 SHORT $LN87@main
$LN86@main:
  00a09	8b 44 24 38	 mov	 eax, DWORD PTR lResidue$[rsp]
  00a0d	89 44 24 70	 mov	 DWORD PTR tv388[rsp], eax
$LN87@main:
  00a11	8b 44 24 70	 mov	 eax, DWORD PTR tv388[rsp]
  00a15	89 44 24 74	 mov	 DWORD PTR tv389[rsp], eax
$LN89@main:
  00a19	8b 44 24 74	 mov	 eax, DWORD PTR tv389[rsp]
  00a1d	89 05 00 00 00
	00		 mov	 DWORD PTR gLenPrtd, eax

; 475  :                                         ( gLength <= lResidue ? gLength : lResidue ) );
; 476  :                             lResidue -= Print_Block_Data ( gLenPrtd );

  00a23	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR gLenPrtd
  00a29	e8 00 00 00 00	 call	 Print_Block_Data
  00a2e	8b 4c 24 38	 mov	 ecx, DWORD PTR lResidue$[rsp]
  00a32	2b c8		 sub	 ecx, eax
  00a34	8b c1		 mov	 eax, ecx
  00a36	89 44 24 38	 mov	 DWORD PTR lResidue$[rsp], eax
$LN69@main:
$LN68@main:

; 477  :                         }
; 478  :                     }
; 479  :                 }

  00a3a	e9 b7 00 00 00	 jmp	 $LN66@main
$LN65@main:

; 480  :                 else
; 481  :                 {
; 482  :                     if ( gBlkCount <= 10 && ( gBlkCount == 1 || ( gBlkCount > 1 && lResidue > bytes_per_line ) ) )

  00a3f	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR gBlkCount, 10
  00a46	0f 87 aa 00 00
	00		 ja	 $LN71@main
  00a4c	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR gBlkCount, 1
  00a53	74 18		 je	 SHORT $LN72@main
  00a55	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR gBlkCount, 1
  00a5c	0f 86 94 00 00
	00		 jbe	 $LN71@main
  00a62	83 7c 24 38 20	 cmp	 DWORD PTR lResidue$[rsp], 32 ; 00000020H
  00a67	0f 8e 89 00 00
	00		 jle	 $LN71@main
$LN72@main:

; 483  :                     {
; 484  :                         gLenPrtd = ( gBlkCount == 1 ? ( gLength <= max_bytes_dsply ? gLength : max_bytes_dsply ) :

  00a6d	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR gBlkCount, 1
  00a74	75 31		 jne	 SHORT $LN94@main
  00a76	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR max_bytes_dsply
  00a7c	39 05 00 00 00
	00		 cmp	 DWORD PTR gLength, eax
  00a82	7f 0c		 jg	 SHORT $LN90@main
  00a84	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR gLength
  00a8a	89 44 24 78	 mov	 DWORD PTR tv399[rsp], eax
  00a8e	eb 0a		 jmp	 SHORT $LN91@main
$LN90@main:
  00a90	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR max_bytes_dsply
  00a96	89 44 24 78	 mov	 DWORD PTR tv399[rsp], eax
$LN91@main:
  00a9a	8b 44 24 78	 mov	 eax, DWORD PTR tv399[rsp]
  00a9e	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv402[rsp], eax
  00aa5	eb 2b		 jmp	 SHORT $LN95@main
$LN94@main:
  00aa7	8b 44 24 38	 mov	 eax, DWORD PTR lResidue$[rsp]
  00aab	39 05 00 00 00
	00		 cmp	 DWORD PTR gLength, eax
  00ab1	7f 0c		 jg	 SHORT $LN92@main
  00ab3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR gLength
  00ab9	89 44 24 7c	 mov	 DWORD PTR tv401[rsp], eax
  00abd	eb 08		 jmp	 SHORT $LN93@main
$LN92@main:
  00abf	8b 44 24 38	 mov	 eax, DWORD PTR lResidue$[rsp]
  00ac3	89 44 24 7c	 mov	 DWORD PTR tv401[rsp], eax
$LN93@main:
  00ac7	8b 44 24 7c	 mov	 eax, DWORD PTR tv401[rsp]
  00acb	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv402[rsp], eax
$LN95@main:
  00ad2	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv402[rsp]
  00ad9	89 05 00 00 00
	00		 mov	 DWORD PTR gLenPrtd, eax

; 485  :                                     ( gLength <= lResidue ? gLength : lResidue ) );
; 486  :                         lResidue -= Print_Block_Data ( gLenPrtd );

  00adf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR gLenPrtd
  00ae5	e8 00 00 00 00	 call	 Print_Block_Data
  00aea	8b 4c 24 38	 mov	 ecx, DWORD PTR lResidue$[rsp]
  00aee	2b c8		 sub	 ecx, eax
  00af0	8b c1		 mov	 eax, ecx
  00af2	89 44 24 38	 mov	 DWORD PTR lResidue$[rsp], eax
$LN71@main:
$LN66@main:

; 487  :                     }
; 488  :                 }
; 489  :             }

  00af6	e9 c9 00 00 00	 jmp	 $LN64@main
$LN63@main:

; 490  :             else
; 491  :             {
; 492  :                 if ( ( gBlkCount <= 10 ) && ( ( gBlkCount == 1 ) || ( ( gBlkCount > 1 ) && ( lResidue > bytes_per_line ) ) ) )

  00afb	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR gBlkCount, 10
  00b02	0f 87 bc 00 00
	00		 ja	 $LN73@main
  00b08	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR gBlkCount, 1
  00b0f	74 18		 je	 SHORT $LN74@main
  00b11	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR gBlkCount, 1
  00b18	0f 86 a6 00 00
	00		 jbe	 $LN73@main
  00b1e	83 7c 24 38 20	 cmp	 DWORD PTR lResidue$[rsp], 32 ; 00000020H
  00b23	0f 8e 9b 00 00
	00		 jle	 $LN73@main
$LN74@main:

; 493  :                 {
; 494  :                     gLenPrtd = ( gBlkCount == 1 ? ( gLength <= max_bytes_dsply ? gLength : max_bytes_dsply ) :

  00b29	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR gBlkCount, 1
  00b30	75 3a		 jne	 SHORT $LN100@main
  00b32	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR max_bytes_dsply
  00b38	39 05 00 00 00
	00		 cmp	 DWORD PTR gLength, eax
  00b3e	7f 0f		 jg	 SHORT $LN96@main
  00b40	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR gLength
  00b46	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv412[rsp], eax
  00b4d	eb 0d		 jmp	 SHORT $LN97@main
$LN96@main:
  00b4f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR max_bytes_dsply
  00b55	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv412[rsp], eax
$LN97@main:
  00b5c	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR tv412[rsp]
  00b63	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv415[rsp], eax
  00b6a	eb 34		 jmp	 SHORT $LN101@main
$LN100@main:
  00b6c	8b 44 24 38	 mov	 eax, DWORD PTR lResidue$[rsp]
  00b70	39 05 00 00 00
	00		 cmp	 DWORD PTR gLength, eax
  00b76	7f 0f		 jg	 SHORT $LN98@main
  00b78	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR gLength
  00b7e	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv414[rsp], eax
  00b85	eb 0b		 jmp	 SHORT $LN99@main
$LN98@main:
  00b87	8b 44 24 38	 mov	 eax, DWORD PTR lResidue$[rsp]
  00b8b	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv414[rsp], eax
$LN99@main:
  00b92	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv414[rsp]
  00b99	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv415[rsp], eax
$LN101@main:
  00ba0	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv415[rsp]
  00ba7	89 05 00 00 00
	00		 mov	 DWORD PTR gLenPrtd, eax

; 495  :                                 ( gLength <= lResidue ? gLength : lResidue ) );
; 496  :                     lResidue -= Print_Block_Data ( gLenPrtd );

  00bad	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR gLenPrtd
  00bb3	e8 00 00 00 00	 call	 Print_Block_Data
  00bb8	8b 4c 24 38	 mov	 ecx, DWORD PTR lResidue$[rsp]
  00bbc	2b c8		 sub	 ecx, eax
  00bbe	8b c1		 mov	 eax, ecx
  00bc0	89 44 24 38	 mov	 DWORD PTR lResidue$[rsp], eax
$LN73@main:
$LN64@main:
$LN62@main:

; 497  :                 }
; 498  :             }
; 499  :         }
; 500  :     }

  00bc4	e9 39 f8 ff ff	 jmp	 $LN102@main
$LN7@main:

; 501  : 
; 502  :     if( opts & O_FILES )

  00bc9	8b 44 24 34	 mov	 eax, DWORD PTR opts$[rsp]
  00bcd	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00bd2	85 c0		 test	 eax, eax
  00bd4	0f 84 bf 00 00
	00		 je	 $LN75@main

; 503  :     {
; 504  :         printf ( "%s", sep );

  00bda	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:sep
  00be1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159520
  00be8	e8 00 00 00 00	 call	 printf

; 505  :         printf ( "%-20.20s:\n", "Summary" );

  00bed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159521
  00bf4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159522
  00bfb	e8 00 00 00 00	 call	 printf

; 506  :         printf ( "%-20.20s: %d\n", "Files", (int)fileno );

  00c00	44 8b 44 24 50	 mov	 r8d, DWORD PTR fileno$[rsp]
  00c05	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159523
  00c0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159524
  00c13	e8 00 00 00 00	 call	 printf

; 507  :         printf ( "%-20.20s: %d\n", "Blocks", (int)totblocks );

  00c18	44 8b 44 24 6c	 mov	 r8d, DWORD PTR totblocks$[rsp]
  00c1d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159525
  00c24	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159526
  00c2b	e8 00 00 00 00	 call	 printf

; 508  :         if ( !i_faketape )

  00c30	83 7c 24 3c 00	 cmp	 DWORD PTR i_faketape$[rsp], 0
  00c35	75 62		 jne	 SHORT $LN76@main

; 509  :         {
; 510  :             printf ( "%-20.20s: %llu\n", "Uncompressed bytes", (unsigned long long)totubytes );

  00c37	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR totubytes$[rsp]
  00c3f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159528
  00c46	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159529
  00c4d	e8 00 00 00 00	 call	 printf

; 511  :             printf ( "%-20.20s: %llu\n", "Compressed bytes", (unsigned long long)totcbytes );

  00c52	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR totcbytes$[rsp]
  00c5a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159530
  00c61	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159531
  00c68	e8 00 00 00 00	 call	 printf

; 512  :             printf ( "%-20.20s: %llu\n", "Reduction", (unsigned long long)(totubytes - totcbytes) );

  00c6d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR totcbytes$[rsp]
  00c75	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR totubytes$[rsp]
  00c7d	48 2b c8	 sub	 rcx, rax
  00c80	48 8b c1	 mov	 rax, rcx
  00c83	4c 8b c0	 mov	 r8, rax
  00c86	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159532
  00c8d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159533
  00c94	e8 00 00 00 00	 call	 printf
$LN76@main:
$LN75@main:

; 513  :         }
; 514  :     }
; 515  : 
; 516  :     if ( i_faketape )

  00c99	83 7c 24 3c 00	 cmp	 DWORD PTR i_faketape$[rsp], 0
  00c9e	74 10		 je	 SHORT $LN77@main

; 517  :         fet_close( &fetb );

  00ca0	48 8d 8c 24 b8
	00 00 00	 lea	 rcx, QWORD PTR fetb$[rsp]
  00ca8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fet_close
  00cae	eb 0b		 jmp	 SHORT $LN78@main
$LN77@main:

; 518  :     else
; 519  :         het_close( &hetb );

  00cb0	48 8d 4c 24 40	 lea	 rcx, QWORD PTR hetb$[rsp]
  00cb5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_het_close
$LN78@main:

; 520  : 
; 521  :     return 0;

  00cbb	33 c0		 xor	 eax, eax
$LN1@main:
$LN79@main:

; 522  : }

  00cbd	48 81 c4 e0 00
	00 00		 add	 rsp, 224		; 000000e0H
  00cc4	5f		 pop	 rdi
  00cc5	c3		 ret	 0
  00cc6	66 90		 npad	 2
$LN103@main:
  00cc8	00 00 00 00	 DD	 $LN16@main
  00ccc	00 00 00 00	 DD	 $LN17@main
  00cd0	00 00 00 00	 DD	 $LN26@main
  00cd4	00 00 00 00	 DD	 $LN20@main
  00cd8	00 00 00 00	 DD	 $LN26@main
  00cdc	00 00 00 00	 DD	 $LN21@main
  00ce0	00 00 00 00	 DD	 $LN26@main
  00ce4	00 00 00 00	 DD	 $LN22@main
  00ce8	00 00 00 00	 DD	 $LN26@main
  00cec	00 00 00 00	 DD	 $LN26@main
  00cf0	00 00 00 00	 DD	 $LN26@main
  00cf4	00 00 00 00	 DD	 $LN23@main
  00cf8	00 00 00 00	 DD	 $LN26@main
  00cfc	00 00 00 00	 DD	 $LN26@main
  00d00	00 00 00 00	 DD	 $LN26@main
  00d04	00 00 00 00	 DD	 $LN26@main
  00d08	00 00 00 00	 DD	 $LN26@main
  00d0c	00 00 00 00	 DD	 $LN26@main
  00d10	00 00 00 00	 DD	 $LN24@main
  00d14	00 00 00 00	 DD	 $LN25@main
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT

; 1771 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1772 :         int _Result;
; 1773 :         va_list _ArgList;
; 1774 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 1775 : 
; 1776 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsprintf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 1777 : 
; 1778 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 1779 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 1780 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1458 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1459 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  00027	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  0002c	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00038	e8 00 00 00 00	 call	 _vsnprintf_l

; 1460 :     }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1391 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1392 :         int const _Result = __stdio_common_vsprintf(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 83 c8 01	 or	 rax, 1
  00024	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00029	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0002e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00033	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00038	4c 8b 4c 24 60	 mov	 r9, QWORD PTR _Format$[rsp]
  0003d	4c 8b 44 24 58	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsprintf
  00050	89 44 24 30	 mov	 DWORD PTR _Result$[rsp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

  00054	83 7c 24 30 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00059	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  0005b	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  00063	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00065	8b 44 24 30	 mov	 eax, DWORD PTR _Result$[rsp]
  00069	89 44 24 34	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  0006d	8b 44 24 34	 mov	 eax, DWORD PTR tv74[rsp]

; 1397 :     }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT

; 956  :     {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 957  :         int _Result;
; 958  :         va_list _ArgList;
; 959  :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 960  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

  00022	b9 01 00 00 00	 mov	 ecx, 1
  00027	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0002d	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00032	45 33 c0	 xor	 r8d, r8d
  00035	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Format$[rsp]
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	e8 00 00 00 00	 call	 _vfprintf_l
  00042	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 961  :         __crt_va_end(_ArgList);

  00046	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 962  :         return _Result;

  0004f	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 963  :     }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 644  :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 645  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00027	4c 8b 4c 24 50	 mov	 r9, QWORD PTR _Locale$[rsp]
  0002c	4c 8b 44 24 48	 mov	 r8, QWORD PTR _Format$[rsp]
  00031	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Stream$[rsp]
  00036	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vfprintf

; 646  :     }

  0003f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00043	c3		 ret	 0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
