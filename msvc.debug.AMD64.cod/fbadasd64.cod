; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
VOL1_KEYA DB	056H
	DB	04fH
	DB	04cH
	DB	031H
VOL1_KEY DB	0e5H
	DB	0d6H
	DB	0d3H
	DB	0f1H
IPL1_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f1H
IPL2_KEY DB	0c9H
	DB	0d7H
	DB	0d3H
	DB	0f2H
iplpsw	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
iplccw1	DB	06H
	DB	00H
	DB	03aH
	DB	098H
	DB	060H
	DB	00H
	DB	00H
	DB	060H
iplccw2	DB	08H
	DB	00H
	DB	03aH
	DB	098H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
noiplpsw DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
noiplccw1 DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
noiplccw2 DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
ipl2data DB	07H
	DB	00H
	DB	03aH
	DB	0b8H
	DB	040H
	DB	00H
	DB	00H
	DB	06H
	DB	031H
	DB	00H
	DB	03aH
	DB	0beH
	DB	040H
	DB	00H
	DB	00H
	DB	05H
	DB	08H
	DB	00H
	DB	03aH
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	07fH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
CONST	ENDS
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	fetch_fw_noswap
PUBLIC	fba64_dasd_init_handler
EXTRN	__imp__errno:PROC
EXTRN	strcmp:PROC
EXTRN	strlen:PROC
EXTRN	_byteswap_ulong:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp__fstat64:PROC
EXTRN	__imp__stat64:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	dasd_lookup:PROC
EXTRN	dasd_build_fba_devid:PROC
EXTRN	dasd_build_fba_devchar:PROC
EXTRN	shared_fba_init:PROC
EXTRN	cckd64_dasd_init_handler:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	is_dh_devid_typ:PROC
EXTRN	cckd_sf_parse_sfn:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_fw_noswap DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$fetch_fw_noswap
pdata	ENDS
pdata	SEGMENT
$pdata$fba64_dasd_init_handler DD imagerel $LN98
	DD	imagerel $LN98+5750
	DD	imagerel $unwind$fba64_dasd_init_handler
pdata	ENDS
_DATA	SEGMENT
$SG169839 DB	'%hx', 00H
$SG169842 DB	'E', 00H
	ORG $+10
$SG169843 DB	'HHC00500%s %1d:%04X FBA file: name missing or invalid fi'
	DB	'lename length', 0aH, 00H
	ORG $+1
$SG169844 DB	'fba64_dasd_init_handler', 00H
$SG169845 DB	'fbadasd64.c', 00H
$SG169849 DB	'E', 00H
	ORG $+2
$SG169850 DB	'HHC00501%s %1d:%04X FBA file %s not found or invalid', 0aH
	DB	00H
	ORG $+2
$SG169851 DB	'fba64_dasd_init_handler', 00H
$SG169852 DB	'fbadasd64.c', 00H
$SG169855 DB	'open()', 00H
	ORG $+1
$SG169856 DB	'E', 00H
	ORG $+2
$SG169857 DB	'HHC00502%s %1d:%04X FBA file %s: error in function %s: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG169864 DB	'E', 00H
	ORG $+2
$SG169858 DB	'fba64_dasd_init_handler', 00H
$SG169859 DB	'fbadasd64.c', 00H
$SG169863 DB	'read()', 00H
	ORG $+1
$SG169870 DB	'E', 00H
	ORG $+2
$SG169865 DB	'HHC00502%s %1d:%04X FBA file %s: error in function %s: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG169880 DB	'E', 00H
	ORG $+2
$SG169866 DB	'fba64_dasd_init_handler', 00H
$SG169867 DB	'fbadasd64.c', 00H
$SG169886 DB	'E', 00H
	ORG $+2
$SG169868 DB	'unexpected end of file', 00H
	ORG $+1
$SG169869 DB	'read()', 00H
	ORG $+1
$SG169871 DB	'HHC00502%s %1d:%04X FBA file %s: error in function %s: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG169891 DB	'sf=', 00H
$SG169872 DB	'fba64_dasd_init_handler', 00H
$SG169873 DB	'fbadasd64.c', 00H
$SG169879 DB	'read()', 00H
	ORG $+1
$SG169893 DB	'cu=', 00H
$SG169881 DB	'HHC00502%s %1d:%04X FBA file %s: error in function %s: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG169896 DB	'E', 00H
	ORG $+2
$SG169882 DB	'fba64_dasd_init_handler', 00H
$SG169883 DB	'fbadasd64.c', 00H
$SG169902 DB	'E', 00H
	ORG $+2
$SG169884 DB	'unexpected end of file', 00H
	ORG $+1
$SG169885 DB	'read()', 00H
	ORG $+1
$SG169887 DB	'HHC00502%s %1d:%04X FBA file %s: error in function %s: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG169912 DB	'E', 00H
	ORG $+2
$SG169888 DB	'fba64_dasd_init_handler', 00H
$SG169889 DB	'fbadasd64.c', 00H
$SG169894 DB	'CFBA64', 00H
	ORG $+1
$SG169895 DB	'FBA64', 00H
	ORG $+6
$SG169897 DB	'HHC00503%s %1d:%04X %s file: parameter %s in argument %d'
	DB	' is invalid', 0aH, 00H
	ORG $+3
$SG169898 DB	'fba64_dasd_init_handler', 00H
$SG169899 DB	'fbadasd64.c', 00H
$SG169917 DB	'*', 00H
	ORG $+2
$SG169901 DB	'fstat()', 00H
$SG169903 DB	'HHC00502%s %1d:%04X FBA file %s: error in function %s: %'
	DB	's', 0aH, 00H
	ORG $+1
$SG169923 DB	'E', 00H
	ORG $+2
$SG169904 DB	'fba64_dasd_init_handler', 00H
$SG169905 DB	'fbadasd64.c', 00H
$SG169909 DB	'%u%c', 00H
	ORG $+3
$SG169910 DB	'CFBA64', 00H
	ORG $+1
$SG169911 DB	'FBA64', 00H
	ORG $+6
$SG169914 DB	'fba64_dasd_init_handler', 00H
$SG169913 DB	'HHC00505%s %1d:%04X %s file %s: invalid device origin bl'
	DB	'ock number %s', 0aH, 00H
	ORG $+1
$SG169915 DB	'fbadasd64.c', 00H
$SG169920 DB	'%u%c', 00H
	ORG $+3
$SG169921 DB	'CFBA64', 00H
	ORG $+1
$SG169922 DB	'FBA64', 00H
	ORG $+2
$SG169928 DB	'CFBA64', 00H
	ORG $+1
$SG169930 DB	'I', 00H
	ORG $+2
$SG169924 DB	'HHC00506%s %1d:%04X %s file %s: invalid device block cou'
	DB	'nt %s', 0aH, 00H
	ORG $+1
$SG169925 DB	'fba64_dasd_init_handler', 00H
$SG169926 DB	'fbadasd64.c', 00H
$SG169929 DB	'FBA64', 00H
	ORG $+2
$SG169935 DB	'CFBA64', 00H
	ORG $+1
$SG169937 DB	'E', 00H
	ORG $+2
$SG169931 DB	'HHC00507%s %1d:%04X %s file %s: origin %lld, blks %d', 0aH
	DB	00H
	ORG $+2
$SG169932 DB	'fba64_dasd_init_handler', 00H
$SG169933 DB	'fbadasd64.c', 00H
$SG169936 DB	'FBA64', 00H
	ORG $+6
$SG169939 DB	'fba64_dasd_init_handler', 00H
$SG169938 DB	'HHC00508%s %1d:%04X %s file %s: device type %4.4X not fo'
	DB	'und in dasd table', 0aH, 00H
	ORG $+5
$SG169940 DB	'fbadasd64.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:fba64_dasd_init_handler
	DD	01fH
	DD	0165eH
voltbl	ENDS
xdata	SEGMENT
$unwind$fba64_dasd_init_handler DD 022719H
	DD	0c30115H
	DD	imagerel __GSHandlerCheck
	DD	0600H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_fw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\fbadasd64.c
_TEXT	SEGMENT
i$ = 112
rc$ = 116
c$ = 120
cfba$ = 124
startblk$ = 128
tv89 = 132
tv95 = 136
tv162 = 140
tv168 = 144
tv203 = 148
tv209 = 152
tv237 = 156
tv243 = 160
tv261 = 164
tv267 = 168
tv306 = 172
tv312 = 176
tv330 = 180
tv336 = 184
tv447 = 188
tv453 = 192
tv482 = 196
tv488 = 200
tv531 = 204
tv537 = 208
tv584 = 212
tv590 = 216
numblks$ = 220
tv629 = 224
tv635 = 228
tv701 = 232
tv707 = 236
tv435 = 240
tv691 = 244
tv442 = 248
tv526 = 256
tv579 = 264
tv624 = 272
tv696 = 280
tv157 = 288
tv193 = 296
tv198 = 304
tv227 = 312
tv232 = 320
tv256 = 328
tv296 = 336
tv301 = 344
tv325 = 352
cu$ = 360
tv437 = 368
tv472 = 376
tv477 = 384
tv506 = 392
tv520 = 400
tv523 = 408
tv573 = 416
tv576 = 424
tv621 = 432
tv693 = 440
statbuf$ = 448
devhdr$ = 512
cdevhdr$ = 1024
__$ArrayPad$ = 1536
dev$ = 1568
argc$ = 1576
argv$ = 1584
fba64_dasd_init_handler PROC

; 35   : {

$LN98:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec 18 06
	00 00		 sub	 rsp, 1560		; 00000618H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 00
	06 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 36   : int     rc;                             /* Return code               */
; 37   : struct  stat statbuf;                   /* File information          */
; 38   : int     startblk;                       /* Device origin block number*/
; 39   : int     numblks;                        /* Device block count        */
; 40   : BYTE    c;                              /* Character work area       */
; 41   : char   *cu = NULL;                      /* Specified control unit    */

  00027	48 c7 84 24 68
	01 00 00 00 00
	00 00		 mov	 QWORD PTR cu$[rsp], 0

; 42   : int     cfba = 0;                       /* 1 = Compressed fba        */

  00033	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR cfba$[rsp], 0

; 43   : int     i;                              /* Loop index                */
; 44   : CKD_DEVHDR      devhdr;                 /* Device header             */
; 45   : CCKD64_DEVHDR   cdevhdr;                /* Compressed device header  */
; 46   : 
; 47   :     /* For re-initialisation, close the existing file, if any */
; 48   :     if (dev->fd >= 0)

  0003b	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00043	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  0004a	7c 1a		 jl	 SHORT $LN5@fba64_dasd

; 49   :         (dev->hnd->close)(dev);

  0004c	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00054	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  0005b	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00063	ff 50 10	 call	 QWORD PTR [rax+16]
$LN5@fba64_dasd:

; 50   : 
; 51   :     if (!dev->typname || !sscanf(dev->typname,"%hx",&(dev->devtype)))

  00066	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0006e	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00073	74 2b		 je	 SHORT $LN7@fba64_dasd
  00075	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007d	48 83 c0 4a	 add	 rax, 74			; 0000004aH
  00081	4c 8b c0	 mov	 r8, rax
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169839
  0008b	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00093	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  00097	e8 00 00 00 00	 call	 sscanf
  0009c	85 c0		 test	 eax, eax
  0009e	75 11		 jne	 SHORT $LN6@fba64_dasd
$LN7@fba64_dasd:

; 52   :         dev->devtype = DEFAULT_FBA_TYPE;

  000a0	b8 70 33 00 00	 mov	 eax, 13168		; 00003370H
  000a5	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000ad	66 89 41 4a	 mov	 WORD PTR [rcx+74], ax
$LN6@fba64_dasd:

; 53   : 
; 54   :     /* reset excps count */
; 55   :     dev->excps = 0;

  000b1	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000b9	48 c7 80 00 06
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1536], 0

; 56   : 
; 57   :     /* The first argument is the file name */
; 58   :     if (argc == 0 || strlen(argv[0]) >= sizeof(dev->filename))

  000c4	83 bc 24 28 06
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  000cc	74 26		 je	 SHORT $LN9@fba64_dasd
  000ce	b8 08 00 00 00	 mov	 eax, 8
  000d3	48 6b c0 00	 imul	 rax, rax, 0
  000d7	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  000df	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000e3	e8 00 00 00 00	 call	 strlen
  000e8	48 3d 05 01 00
	00		 cmp	 rax, 261		; 00000105H
  000ee	0f 82 bf 00 00
	00		 jb	 $LN8@fba64_dasd
$LN9@fba64_dasd:

; 59   :     {
; 60   :         // "%1d:%04X FBA file: name missing or invalid filename length"
; 61   :         WRMSG( HHC00500, "E", LCSS_DEVNUM);

  000f4	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000fd	74 15		 je	 SHORT $LN36@fba64_dasd
  000ff	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00107	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0010b	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv89[rsp], eax
  00112	eb 0b		 jmp	 SHORT $LN37@fba64_dasd
$LN36@fba64_dasd:
  00114	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv89[rsp], 0
$LN37@fba64_dasd:
  0011f	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00128	74 17		 je	 SHORT $LN38@fba64_dasd
  0012a	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00132	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00136	d1 f8		 sar	 eax, 1
  00138	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv95[rsp], eax
  0013f	eb 0b		 jmp	 SHORT $LN39@fba64_dasd
$LN38@fba64_dasd:
  00141	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv95[rsp], 0
$LN39@fba64_dasd:
  0014c	b9 01 00 00 00	 mov	 ecx, 1
  00151	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00157	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv89[rsp]
  0015e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00162	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv95[rsp]
  00169	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169842
  00174	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169843
  00180	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00185	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00190	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169844
  00197	ba 3d 00 00 00	 mov	 edx, 61			; 0000003dH
  0019c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169845
  001a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 62   :         return -1;

  001a9	b8 ff ff ff ff	 mov	 eax, -1
  001ae	e9 ab 14 00 00	 jmp	 $LN1@fba64_dasd
$LN8@fba64_dasd:

; 63   :     }
; 64   : 
; 65   :     /* Save the file name in the device block */
; 66   :     hostpath(dev->filename, argv[0], sizeof(dev->filename));

  001b3	b8 08 00 00 00	 mov	 eax, 8
  001b8	48 6b c0 00	 imul	 rax, rax, 0
  001bc	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001c4	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  001cb	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  001d1	48 8b 94 24 30
	06 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  001d9	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  001dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 67   : 
; 68   : #if defined( OPTION_SHARED_DEVICES )
; 69   :     /* Device is shareable */
; 70   :     dev->shareable = 1;

  001e3	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001eb	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  001f1	83 c8 08	 or	 eax, 8
  001f4	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001fc	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 71   : #endif // defined( OPTION_SHARED_DEVICES )
; 72   : 
; 73   :     /* Check for possible remote device */
; 74   :     if (stat(dev->filename, &statbuf) < 0)

  00202	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0020a	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00210	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR statbuf$[rsp]
  00218	48 8b c8	 mov	 rcx, rax
  0021b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stat64
  00221	85 c0		 test	 eax, eax
  00223	0f 8d 18 01 00
	00		 jge	 $LN10@fba64_dasd

; 75   :     {
; 76   :         rc = shared_fba_init ( dev, argc, argv);

  00229	4c 8b 84 24 30
	06 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  00231	8b 94 24 28 06
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  00238	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00240	e8 00 00 00 00	 call	 shared_fba_init
  00245	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 77   :         if (rc < 0)

  00249	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  0024e	0f 8d e4 00 00
	00		 jge	 $LN11@fba64_dasd

; 78   :         {
; 79   :             // "%1d:%04X FBA file %s not found or invalid"
; 80   :             WRMSG( HHC00501, "E", LCSS_DEVNUM, dev->filename );

  00254	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0025d	74 15		 je	 SHORT $LN40@fba64_dasd
  0025f	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00267	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0026b	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv162[rsp], eax
  00272	eb 0b		 jmp	 SHORT $LN41@fba64_dasd
$LN40@fba64_dasd:
  00274	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv162[rsp], 0
$LN41@fba64_dasd:
  0027f	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00288	74 17		 je	 SHORT $LN42@fba64_dasd
  0028a	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00292	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00296	d1 f8		 sar	 eax, 1
  00298	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv168[rsp], eax
  0029f	eb 0b		 jmp	 SHORT $LN43@fba64_dasd
$LN42@fba64_dasd:
  002a1	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv168[rsp], 0
$LN43@fba64_dasd:
  002ac	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002b4	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  002ba	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv157[rsp], rax
  002c2	b9 01 00 00 00	 mov	 ecx, 1
  002c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002cd	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tv157[rsp]
  002d5	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002da	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv162[rsp]
  002e1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002e5	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv168[rsp]
  002ec	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169849
  002f7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169850
  00303	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00308	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0030d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00313	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169851
  0031a	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  0031f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169852
  00326	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 81   :             return -1;

  0032c	b8 ff ff ff ff	 mov	 eax, -1
  00331	e9 28 13 00 00	 jmp	 $LN1@fba64_dasd

; 82   :         }

  00336	eb 09		 jmp	 SHORT $LN12@fba64_dasd
$LN11@fba64_dasd:

; 83   :         else
; 84   :             return rc;

  00338	8b 44 24 74	 mov	 eax, DWORD PTR rc$[rsp]
  0033c	e9 1d 13 00 00	 jmp	 $LN1@fba64_dasd
$LN12@fba64_dasd:
$LN10@fba64_dasd:

; 85   :     }
; 86   : 
; 87   :     /* Open the device file */
; 88   :     dev->fd = HOPEN (dev->filename, O_RDWR|O_BINARY);

  00341	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00349	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0034f	ba 02 80 00 00	 mov	 edx, 32770		; 00008002H
  00354	48 8b c8	 mov	 rcx, rax
  00357	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  0035d	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00365	89 81 ac 01 00
	00		 mov	 DWORD PTR [rcx+428], eax

; 89   :     if (dev->fd < 0)

  0036b	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00373	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  0037a	0f 8d 51 01 00
	00		 jge	 $LN13@fba64_dasd

; 90   :     {
; 91   :         dev->fd = HOPEN (dev->filename, O_RDONLY|O_BINARY);

  00380	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00388	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0038e	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  00393	48 8b c8	 mov	 rcx, rax
  00396	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  0039c	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003a4	89 81 ac 01 00
	00		 mov	 DWORD PTR [rcx+428], eax

; 92   :         if (dev->fd < 0)

  003aa	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003b2	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  003b9	0f 8d 12 01 00
	00		 jge	 $LN14@fba64_dasd

; 93   :         {
; 94   :             // "%1d:%04X FBA file %s: error in function %s: %s"
; 95   :             WRMSG( HHC00502, "E", LCSS_DEVNUM,

  003bf	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  003c8	74 15		 je	 SHORT $LN44@fba64_dasd
  003ca	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003d2	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  003d6	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv203[rsp], eax
  003dd	eb 0b		 jmp	 SHORT $LN45@fba64_dasd
$LN44@fba64_dasd:
  003df	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv203[rsp], 0
$LN45@fba64_dasd:
  003ea	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  003f3	74 17		 je	 SHORT $LN46@fba64_dasd
  003f5	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003fd	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00401	d1 f8		 sar	 eax, 1
  00403	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv209[rsp], eax
  0040a	eb 0b		 jmp	 SHORT $LN47@fba64_dasd
$LN46@fba64_dasd:
  0040c	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv209[rsp], 0
$LN47@fba64_dasd:
  00417	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0041d	8b 08		 mov	 ecx, DWORD PTR [rax]
  0041f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00425	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv193[rsp], rax
  0042d	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00435	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0043c	48 89 8c 24 30
	01 00 00	 mov	 QWORD PTR tv198[rsp], rcx
  00444	b9 01 00 00 00	 mov	 ecx, 1
  00449	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0044f	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv193[rsp]
  00457	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0045c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169855
  00463	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00468	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR tv198[rsp]
  00470	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00475	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv203[rsp]
  0047c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00480	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv209[rsp]
  00487	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0048b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169856
  00492	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00497	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169857
  0049e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004a3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a8	41 b9 03 00 00
	00		 mov	 r9d, 3
  004ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169858
  004b5	ba 60 00 00 00	 mov	 edx, 96			; 00000060H
  004ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169859
  004c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 96   :                    dev->filename, "open()", strerror( errno ));
; 97   :             return -1;

  004c7	b8 ff ff ff ff	 mov	 eax, -1
  004cc	e9 8d 11 00 00	 jmp	 $LN1@fba64_dasd
$LN14@fba64_dasd:
$LN13@fba64_dasd:

; 98   :         }
; 99   :     }
; 100  : 
; 101  :     /* Read the first block to see if it's compressed */
; 102  :     rc = read (dev->fd, &devhdr, CKD_DEVHDR_SIZE);

  004d1	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  004d7	48 8d 94 24 00
	02 00 00	 lea	 rdx, QWORD PTR devhdr$[rsp]
  004df	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004e7	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  004ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  004f3	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 103  :     if (rc < (int)               CKD_DEVHDR_SIZE)

  004f7	81 7c 24 74 00
	02 00 00	 cmp	 DWORD PTR rc$[rsp], 512	; 00000200H
  004ff	0f 8d 38 02 00
	00		 jge	 $LN15@fba64_dasd

; 104  :     {
; 105  :         /* Handle read error condition */
; 106  :         if (rc < 0)

  00505	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  0050a	0f 8d 0d 01 00
	00		 jge	 $LN16@fba64_dasd

; 107  :             // "%1d:%04X FBA file %s: error in function %s: %s"
; 108  :             WRMSG( HHC00502, "E", LCSS_DEVNUM,

  00510	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00519	74 15		 je	 SHORT $LN48@fba64_dasd
  0051b	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00523	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00527	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv237[rsp], eax
  0052e	eb 0b		 jmp	 SHORT $LN49@fba64_dasd
$LN48@fba64_dasd:
  00530	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv237[rsp], 0
$LN49@fba64_dasd:
  0053b	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00544	74 17		 je	 SHORT $LN50@fba64_dasd
  00546	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0054e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00552	d1 f8		 sar	 eax, 1
  00554	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv243[rsp], eax
  0055b	eb 0b		 jmp	 SHORT $LN51@fba64_dasd
$LN50@fba64_dasd:
  0055d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv243[rsp], 0
$LN51@fba64_dasd:
  00568	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0056e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00570	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00576	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv227[rsp], rax
  0057e	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00586	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0058d	48 89 8c 24 40
	01 00 00	 mov	 QWORD PTR tv232[rsp], rcx
  00595	b9 01 00 00 00	 mov	 ecx, 1
  0059a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005a0	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tv227[rsp]
  005a8	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  005ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169863
  005b4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  005b9	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv232[rsp]
  005c1	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  005c6	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv237[rsp]
  005cd	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  005d1	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv243[rsp]
  005d8	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  005dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169864
  005e3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169865
  005ef	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005f4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005f9	41 b9 03 00 00
	00		 mov	 r9d, 3
  005ff	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169866
  00606	ba 6d 00 00 00	 mov	 edx, 109		; 0000006dH
  0060b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169867
  00612	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  00618	e9 f0 00 00 00	 jmp	 $LN17@fba64_dasd
$LN16@fba64_dasd:

; 109  :                    dev->filename, "read()", strerror( errno ));
; 110  :         else
; 111  :             // "%1d:%04X FBA file %s: error in function %s: %s"
; 112  :             WRMSG( HHC00502, "E", LCSS_DEVNUM,

  0061d	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00626	74 15		 je	 SHORT $LN52@fba64_dasd
  00628	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00630	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00634	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv261[rsp], eax
  0063b	eb 0b		 jmp	 SHORT $LN53@fba64_dasd
$LN52@fba64_dasd:
  0063d	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv261[rsp], 0
$LN53@fba64_dasd:
  00648	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00651	74 17		 je	 SHORT $LN54@fba64_dasd
  00653	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0065b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0065f	d1 f8		 sar	 eax, 1
  00661	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv267[rsp], eax
  00668	eb 0b		 jmp	 SHORT $LN55@fba64_dasd
$LN54@fba64_dasd:
  0066a	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv267[rsp], 0
$LN55@fba64_dasd:
  00675	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0067d	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00683	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv256[rsp], rax
  0068b	b9 01 00 00 00	 mov	 ecx, 1
  00690	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00696	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169868
  0069d	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  006a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169869
  006a9	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  006ae	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR tv256[rsp]
  006b6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  006bb	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv261[rsp]
  006c2	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  006c6	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv267[rsp]
  006cd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  006d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169870
  006d8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169871
  006e4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006e9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006ee	41 b9 03 00 00
	00		 mov	 r9d, 3
  006f4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169872
  006fb	ba 71 00 00 00	 mov	 edx, 113		; 00000071H
  00700	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169873
  00707	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN17@fba64_dasd:

; 113  :                    dev->filename, "read()", "unexpected end of file" );
; 114  :         close (dev->fd);

  0070d	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00715	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0071b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 115  :         dev->fd = -1;

  00721	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00729	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 116  :         return -1;

  00733	b8 ff ff ff ff	 mov	 eax, -1
  00738	e9 21 0f 00 00	 jmp	 $LN1@fba64_dasd
$LN15@fba64_dasd:

; 117  :     }
; 118  : 
; 119  :     /* Processing for compressed fba64 dasd */
; 120  :     if (is_dh_devid_typ( devhdr.dh_devid, FBA_C064_TYP ))

  0073d	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00742	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR devhdr$[rsp]
  0074a	e8 00 00 00 00	 call	 is_dh_devid_typ
  0074f	0f b6 c0	 movzx	 eax, al
  00752	85 c0		 test	 eax, eax
  00754	0f 84 13 05 00
	00		 je	 $LN18@fba64_dasd

; 121  :     {
; 122  :         dev->cckd64 = 1;

  0075a	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00762	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  00769	0c 01		 or	 al, 1
  0076b	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00773	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 123  : 
; 124  :         cfba = 1;

  00779	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR cfba$[rsp], 1

; 125  : 
; 126  :         /* Read the compressed device header */
; 127  :         rc = read (dev->fd, &cdevhdr, CCKD64_DEVHDR_SIZE);

  00781	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00787	48 8d 94 24 00
	04 00 00	 lea	 rdx, QWORD PTR cdevhdr$[rsp]
  0078f	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00797	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0079d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  007a3	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 128  :         if (rc < (int)                CCKD64_DEVHDR_SIZE)

  007a7	81 7c 24 74 00
	02 00 00	 cmp	 DWORD PTR rc$[rsp], 512	; 00000200H
  007af	0f 8d 38 02 00
	00		 jge	 $LN20@fba64_dasd

; 129  :         {
; 130  :             /* Handle read error condition */
; 131  :             if (rc < 0)

  007b5	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  007ba	0f 8d 0d 01 00
	00		 jge	 $LN21@fba64_dasd

; 132  :                 // "%1d:%04X FBA file %s: error in function %s: %s"
; 133  :                 WRMSG( HHC00502, "E", LCSS_DEVNUM,

  007c0	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  007c9	74 15		 je	 SHORT $LN56@fba64_dasd
  007cb	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007d3	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  007d7	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv306[rsp], eax
  007de	eb 0b		 jmp	 SHORT $LN57@fba64_dasd
$LN56@fba64_dasd:
  007e0	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv306[rsp], 0
$LN57@fba64_dasd:
  007eb	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  007f4	74 17		 je	 SHORT $LN58@fba64_dasd
  007f6	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007fe	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00802	d1 f8		 sar	 eax, 1
  00804	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv312[rsp], eax
  0080b	eb 0b		 jmp	 SHORT $LN59@fba64_dasd
$LN58@fba64_dasd:
  0080d	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv312[rsp], 0
$LN59@fba64_dasd:
  00818	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0081e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00820	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00826	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv296[rsp], rax
  0082e	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00836	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0083d	48 89 8c 24 58
	01 00 00	 mov	 QWORD PTR tv301[rsp], rcx
  00845	b9 01 00 00 00	 mov	 ecx, 1
  0084a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00850	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR tv296[rsp]
  00858	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0085d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169879
  00864	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00869	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tv301[rsp]
  00871	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00876	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR tv306[rsp]
  0087d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00881	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR tv312[rsp]
  00888	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0088c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169880
  00893	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00898	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169881
  0089f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008a4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008a9	41 b9 03 00 00
	00		 mov	 r9d, 3
  008af	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169882
  008b6	ba 86 00 00 00	 mov	 edx, 134		; 00000086H
  008bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169883
  008c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
  008c8	e9 f0 00 00 00	 jmp	 $LN22@fba64_dasd
$LN21@fba64_dasd:

; 134  :                        dev->filename, "read()", strerror( errno ));
; 135  :             else
; 136  :                 // "%1d:%04X FBA file %s: error in function %s: %s"
; 137  :                 WRMSG( HHC00502, "E", LCSS_DEVNUM,

  008cd	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  008d6	74 15		 je	 SHORT $LN60@fba64_dasd
  008d8	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  008e0	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  008e4	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv330[rsp], eax
  008eb	eb 0b		 jmp	 SHORT $LN61@fba64_dasd
$LN60@fba64_dasd:
  008ed	c7 84 24 b4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv330[rsp], 0
$LN61@fba64_dasd:
  008f8	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00901	74 17		 je	 SHORT $LN62@fba64_dasd
  00903	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0090b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0090f	d1 f8		 sar	 eax, 1
  00911	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv336[rsp], eax
  00918	eb 0b		 jmp	 SHORT $LN63@fba64_dasd
$LN62@fba64_dasd:
  0091a	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv336[rsp], 0
$LN63@fba64_dasd:
  00925	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0092d	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00933	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv325[rsp], rax
  0093b	b9 01 00 00 00	 mov	 ecx, 1
  00940	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00946	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169884
  0094d	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00952	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169885
  00959	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0095e	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR tv325[rsp]
  00966	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0096b	8b 8c 24 b4 00
	00 00		 mov	 ecx, DWORD PTR tv330[rsp]
  00972	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00976	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR tv336[rsp]
  0097d	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00981	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169886
  00988	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0098d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169887
  00994	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00999	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0099e	41 b9 03 00 00
	00		 mov	 r9d, 3
  009a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169888
  009ab	ba 8a 00 00 00	 mov	 edx, 138		; 0000008aH
  009b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169889
  009b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN22@fba64_dasd:

; 138  :                        dev->filename, "read()", "unexpected end of file" );
; 139  :             close (dev->fd);

  009bd	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009c5	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  009cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 140  :             dev->fd = -1;

  009d1	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009d9	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 141  :             return -1;

  009e3	b8 ff ff ff ff	 mov	 eax, -1
  009e8	e9 71 0c 00 00	 jmp	 $LN1@fba64_dasd
$LN20@fba64_dasd:

; 142  :         }
; 143  : 
; 144  :         /* Set block size, device origin, and device size in blocks */
; 145  :         dev->fbablksiz = 512;

  009ed	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  009f5	c7 80 8c 11 00
	00 00 02 00 00	 mov	 DWORD PTR [rax+4492], 512 ; 00000200H

; 146  :         dev->fbaorigin = 0;

  009ff	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00a07	48 c7 80 90 11
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4496], 0

; 147  :         FETCH_LE_FW( dev->fbanumblk, cdevhdr.cdh_cyls );

  00a12	48 8d 8c 24 0c
	04 00 00	 lea	 rcx, QWORD PTR cdevhdr$[rsp+12]
  00a1a	e8 00 00 00 00	 call	 fetch_fw_noswap
  00a1f	8b c8		 mov	 ecx, eax
  00a21	e8 00 00 00 00	 call	 _byteswap_ulong
  00a26	8b c8		 mov	 ecx, eax
  00a28	e8 00 00 00 00	 call	 _byteswap_ulong
  00a2d	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00a35	89 81 88 11 00
	00		 mov	 DWORD PTR [rcx+4488], eax

; 148  : 
; 149  :         /* process the remaining arguments */
; 150  :         for (i = 1; i < argc; i++)

  00a3b	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  00a43	eb 0a		 jmp	 SHORT $LN4@fba64_dasd
$LN2@fba64_dasd:
  00a45	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00a49	ff c0		 inc	 eax
  00a4b	89 44 24 70	 mov	 DWORD PTR i$[rsp], eax
$LN4@fba64_dasd:
  00a4f	8b 84 24 28 06
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00a56	39 44 24 70	 cmp	 DWORD PTR i$[rsp], eax
  00a5a	0f 8d 08 02 00
	00		 jge	 $LN3@fba64_dasd

; 151  :         {
; 152  :             if (strlen (argv[i]) > 3
; 153  :              && memcmp ("sf=", argv[i], 3) == 0)

  00a60	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00a65	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00a6d	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00a71	e8 00 00 00 00	 call	 strlen
  00a76	48 83 f8 03	 cmp	 rax, 3
  00a7a	76 51		 jbe	 SHORT $LN23@fba64_dasd
  00a7c	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00a81	41 b8 03 00 00
	00		 mov	 r8d, 3
  00a87	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00a8f	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00a93	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169891
  00a9a	e8 00 00 00 00	 call	 memcmp
  00a9f	85 c0		 test	 eax, eax
  00aa1	75 2a		 jne	 SHORT $LN23@fba64_dasd

; 154  :             {
; 155  :                 /* Parse the shadow file name parameter */
; 156  :                 cckd_sf_parse_sfn( dev, argv[i]+3 );

  00aa3	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00aa8	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00ab0	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00ab4	48 83 c0 03	 add	 rax, 3
  00ab8	48 8b d0	 mov	 rdx, rax
  00abb	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00ac3	e8 00 00 00 00	 call	 cckd_sf_parse_sfn

; 157  :                 continue;

  00ac8	e9 78 ff ff ff	 jmp	 $LN2@fba64_dasd
$LN23@fba64_dasd:

; 158  :             }
; 159  :             if (strlen (argv[i]) > 3
; 160  :              && memcmp("cu=", argv[i], 3) == 0)   /* support for cu= added but  */

  00acd	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00ad2	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00ada	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00ade	e8 00 00 00 00	 call	 strlen
  00ae3	48 83 f8 03	 cmp	 rax, 3
  00ae7	76 49		 jbe	 SHORT $LN24@fba64_dasd
  00ae9	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00aee	41 b8 03 00 00
	00		 mov	 r8d, 3
  00af4	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00afc	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00b00	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169893
  00b07	e8 00 00 00 00	 call	 memcmp
  00b0c	85 c0		 test	 eax, eax
  00b0e	75 22		 jne	 SHORT $LN24@fba64_dasd

; 161  :             {                                     /* is ignored for the present */
; 162  :                 cu = argv[i]+3;

  00b10	48 63 44 24 70	 movsxd	 rax, DWORD PTR i$[rsp]
  00b15	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00b1d	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00b21	48 83 c0 03	 add	 rax, 3
  00b25	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR cu$[rsp], rax

; 163  :                 continue;

  00b2d	e9 13 ff ff ff	 jmp	 $LN2@fba64_dasd
$LN24@fba64_dasd:

; 164  :             }
; 165  : 
; 166  :             // "%1d:%04X %s file: parameter %s in argument %d is invalid"
; 167  :             WRMSG( HHC00503, "E", LCSS_DEVNUM, FBATYP( cfba, 1 ), argv[i], i + 1 );

  00b32	83 7c 24 7c 00	 cmp	 DWORD PTR cfba$[rsp], 0
  00b37	74 11		 je	 SHORT $LN64@fba64_dasd
  00b39	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169894
  00b40	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv442[rsp], rax
  00b48	eb 0f		 jmp	 SHORT $LN65@fba64_dasd
$LN64@fba64_dasd:
  00b4a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169895
  00b51	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv442[rsp], rax
$LN65@fba64_dasd:
  00b59	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00b62	74 15		 je	 SHORT $LN66@fba64_dasd
  00b64	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b6c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00b70	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv447[rsp], eax
  00b77	eb 0b		 jmp	 SHORT $LN67@fba64_dasd
$LN66@fba64_dasd:
  00b79	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv447[rsp], 0
$LN67@fba64_dasd:
  00b84	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00b8d	74 17		 je	 SHORT $LN68@fba64_dasd
  00b8f	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00b97	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00b9b	d1 f8		 sar	 eax, 1
  00b9d	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv453[rsp], eax
  00ba4	eb 0b		 jmp	 SHORT $LN69@fba64_dasd
$LN68@fba64_dasd:
  00ba6	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv453[rsp], 0
$LN69@fba64_dasd:
  00bb1	8b 44 24 70	 mov	 eax, DWORD PTR i$[rsp]
  00bb5	ff c0		 inc	 eax
  00bb7	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv435[rsp], eax
  00bbe	48 63 4c 24 70	 movsxd	 rcx, DWORD PTR i$[rsp]
  00bc3	48 89 8c 24 70
	01 00 00	 mov	 QWORD PTR tv437[rsp], rcx
  00bcb	b9 01 00 00 00	 mov	 ecx, 1
  00bd0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00bd6	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR tv435[rsp]
  00bdd	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  00be1	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00be9	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR tv437[rsp]
  00bf1	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00bf5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00bfa	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv442[rsp]
  00c02	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00c07	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR tv447[rsp]
  00c0e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00c12	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv453[rsp]
  00c19	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00c1d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169896
  00c24	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c29	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169897
  00c30	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c35	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c3a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c40	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169898
  00c47	ba a7 00 00 00	 mov	 edx, 167		; 000000a7H
  00c4c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169899
  00c53	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 168  :             return -1;

  00c59	b8 ff ff ff ff	 mov	 eax, -1
  00c5e	e9 fb 09 00 00	 jmp	 $LN1@fba64_dasd

; 169  :         }

  00c63	e9 dd fd ff ff	 jmp	 $LN2@fba64_dasd
$LN3@fba64_dasd:

; 170  :     }

  00c68	e9 e1 05 00 00	 jmp	 $LN19@fba64_dasd
$LN18@fba64_dasd:

; 171  : 
; 172  :     /* Processing for regular fba dasd */
; 173  :     else
; 174  :     {
; 175  :         dev->cckd64 = 1;

  00c6d	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c75	0f b6 80 10 13
	00 00		 movzx	 eax, BYTE PTR [rax+4880]
  00c7c	0c 01		 or	 al, 1
  00c7e	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00c86	88 81 10 13 00
	00		 mov	 BYTE PTR [rcx+4880], al

; 176  : 
; 177  :         /* Determine the device size */
; 178  :         rc = fstat (dev->fd, &statbuf);

  00c8c	48 8d 94 24 c0
	01 00 00	 lea	 rdx, QWORD PTR statbuf$[rsp]
  00c94	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00c9c	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00ca2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__fstat64
  00ca8	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 179  :         if (rc < 0)

  00cac	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00cb1	0f 8d 38 01 00
	00		 jge	 $LN25@fba64_dasd

; 180  :         {
; 181  :             // "%1d:%04X FBA file %s: error in function %s: %s"
; 182  :             WRMSG( HHC00502, "E", LCSS_DEVNUM,

  00cb7	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00cc0	74 15		 je	 SHORT $LN70@fba64_dasd
  00cc2	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00cca	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00cce	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv482[rsp], eax
  00cd5	eb 0b		 jmp	 SHORT $LN71@fba64_dasd
$LN70@fba64_dasd:
  00cd7	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv482[rsp], 0
$LN71@fba64_dasd:
  00ce2	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00ceb	74 17		 je	 SHORT $LN72@fba64_dasd
  00ced	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00cf5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00cf9	d1 f8		 sar	 eax, 1
  00cfb	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv488[rsp], eax
  00d02	eb 0b		 jmp	 SHORT $LN73@fba64_dasd
$LN72@fba64_dasd:
  00d04	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv488[rsp], 0
$LN73@fba64_dasd:
  00d0f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00d15	8b 08		 mov	 ecx, DWORD PTR [rax]
  00d17	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00d1d	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv472[rsp], rax
  00d25	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00d2d	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00d34	48 89 8c 24 80
	01 00 00	 mov	 QWORD PTR tv477[rsp], rcx
  00d3c	b9 01 00 00 00	 mov	 ecx, 1
  00d41	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00d47	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR tv472[rsp]
  00d4f	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00d54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169901
  00d5b	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00d60	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR tv477[rsp]
  00d68	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00d6d	8b 8c 24 c4 00
	00 00		 mov	 ecx, DWORD PTR tv482[rsp]
  00d74	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00d78	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv488[rsp]
  00d7f	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00d83	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169902
  00d8a	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00d8f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169903
  00d96	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00d9b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00da0	41 b9 03 00 00
	00		 mov	 r9d, 3
  00da6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169904
  00dad	ba b7 00 00 00	 mov	 edx, 183		; 000000b7H
  00db2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169905
  00db9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 183  :                    dev->filename, "fstat()", strerror( errno ));
; 184  :             close (dev->fd);

  00dbf	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00dc7	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00dcd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 185  :             dev->fd = -1;

  00dd3	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ddb	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 186  :             return -1;

  00de5	b8 ff ff ff ff	 mov	 eax, -1
  00dea	e9 6f 08 00 00	 jmp	 $LN1@fba64_dasd
$LN25@fba64_dasd:

; 187  :         }
; 188  : #if defined(OPTION_FBA_BLKDEVICE) && defined(BLKGETSIZE)
; 189  :         if(S_ISBLK(statbuf.st_mode))
; 190  :         {
; 191  :             rc=ioctl(dev->fd,BLKGETSIZE,&statbuf.st_size);
; 192  :             if(rc<0)
; 193  :             {
; 194  :                 // "%1d:%04X FBA file %s: error in function %s: %s"
; 195  :                 WRMSG( HHC00502, "E", LCSS_DEVNUM,
; 196  :                        dev->filename, "ioctl()", strerror( errno ));
; 197  :                 close (dev->fd);
; 198  :                 dev->fd = -1;
; 199  :                 return -1;
; 200  :             }
; 201  :             dev->fbablksiz = 512;
; 202  :             dev->fbaorigin = 0;
; 203  :             dev->fbanumblk = statbuf.st_size;
; 204  :             if (!dev->quiet)
; 205  :                 // "%1d:%04X FBA file %s: REAL FBA opened"
; 206  :                 WRMSG( HHC00504, "I", LCSS_DEVNUM, dev->filename );
; 207  :         }
; 208  :         else
; 209  : #endif // defined(OPTION_FBA_BLKDEVICE) && defined(BLKGETSIZE)
; 210  :         {
; 211  :             /* Set block size, device origin, and device size in blocks */
; 212  :             dev->fbablksiz = 512;

  00def	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00df7	c7 80 8c 11 00
	00 00 02 00 00	 mov	 DWORD PTR [rax+4492], 512 ; 00000200H

; 213  :             dev->fbaorigin = 0;

  00e01	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e09	48 c7 80 90 11
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4496], 0

; 214  :             dev->fbanumblk = (int)(statbuf.st_size / dev->fbablksiz);

  00e14	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e1c	48 63 80 8c 11
	00 00		 movsxd	 rax, DWORD PTR [rax+4492]
  00e23	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv506[rsp], rax
  00e2b	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR statbuf$[rsp+24]
  00e33	48 99		 cdq
  00e35	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR tv506[rsp]
  00e3d	48 f7 f9	 idiv	 rcx
  00e40	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00e48	89 81 88 11 00
	00		 mov	 DWORD PTR [rcx+4488], eax

; 215  :         }
; 216  : 
; 217  :         /* The second argument is the device origin block number */
; 218  :         if (argc >= 2)

  00e4e	83 bc 24 28 06
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00e56	0f 8c f1 01 00
	00		 jl	 $LN26@fba64_dasd

; 219  :         {
; 220  :             if (sscanf(argv[1], "%u%c", &startblk, &c) != 1
; 221  :              || startblk >= dev->fbanumblk)

  00e5c	b8 08 00 00 00	 mov	 eax, 8
  00e61	48 6b c0 01	 imul	 rax, rax, 1
  00e65	4c 8d 4c 24 78	 lea	 r9, QWORD PTR c$[rsp]
  00e6a	4c 8d 84 24 80
	00 00 00	 lea	 r8, QWORD PTR startblk$[rsp]
  00e72	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169909
  00e79	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00e81	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00e85	e8 00 00 00 00	 call	 sscanf
  00e8a	83 f8 01	 cmp	 eax, 1
  00e8d	75 1b		 jne	 SHORT $LN28@fba64_dasd
  00e8f	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00e97	8b 80 88 11 00
	00		 mov	 eax, DWORD PTR [rax+4488]
  00e9d	39 84 24 80 00
	00 00		 cmp	 DWORD PTR startblk$[rsp], eax
  00ea4	0f 8c 67 01 00
	00		 jl	 $LN27@fba64_dasd
$LN28@fba64_dasd:

; 222  :             {
; 223  :                 // "%1d:%04X %s file %s: invalid device origin block number %s"
; 224  :                 WRMSG( HHC00505, "E", LCSS_DEVNUM, FBATYP( cfba, 1 ), dev->filename, argv[1] );

  00eaa	83 7c 24 7c 00	 cmp	 DWORD PTR cfba$[rsp], 0
  00eaf	74 11		 je	 SHORT $LN74@fba64_dasd
  00eb1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169910
  00eb8	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv526[rsp], rax
  00ec0	eb 0f		 jmp	 SHORT $LN75@fba64_dasd
$LN74@fba64_dasd:
  00ec2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169911
  00ec9	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv526[rsp], rax
$LN75@fba64_dasd:
  00ed1	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00eda	74 15		 je	 SHORT $LN76@fba64_dasd
  00edc	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ee4	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00ee8	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv531[rsp], eax
  00eef	eb 0b		 jmp	 SHORT $LN77@fba64_dasd
$LN76@fba64_dasd:
  00ef1	c7 84 24 cc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv531[rsp], 0
$LN77@fba64_dasd:
  00efc	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00f05	74 17		 je	 SHORT $LN78@fba64_dasd
  00f07	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00f0f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00f13	d1 f8		 sar	 eax, 1
  00f15	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv537[rsp], eax
  00f1c	eb 0b		 jmp	 SHORT $LN79@fba64_dasd
$LN78@fba64_dasd:
  00f1e	c7 84 24 d0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv537[rsp], 0
$LN79@fba64_dasd:
  00f29	b8 08 00 00 00	 mov	 eax, 8
  00f2e	48 6b c0 01	 imul	 rax, rax, 1
  00f32	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv520[rsp], rax
  00f3a	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00f42	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00f49	48 89 8c 24 98
	01 00 00	 mov	 QWORD PTR tv523[rsp], rcx
  00f51	b9 01 00 00 00	 mov	 ecx, 1
  00f56	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f5c	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00f64	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR tv520[rsp]
  00f6c	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  00f70	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00f75	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR tv523[rsp]
  00f7d	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00f82	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv526[rsp]
  00f8a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00f8f	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR tv531[rsp]
  00f96	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00f9a	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR tv537[rsp]
  00fa1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00fa5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169912
  00fac	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00fb1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169913
  00fb8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00fbd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00fc2	41 b9 03 00 00
	00		 mov	 r9d, 3
  00fc8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169914
  00fcf	ba e0 00 00 00	 mov	 edx, 224		; 000000e0H
  00fd4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169915
  00fdb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 225  :                 close (dev->fd);

  00fe1	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00fe9	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00fef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 226  :                 dev->fd = -1;

  00ff5	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00ffd	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 227  :                 return -1;

  01007	b8 ff ff ff ff	 mov	 eax, -1
  0100c	e9 4d 06 00 00	 jmp	 $LN1@fba64_dasd
$LN27@fba64_dasd:

; 228  :             }
; 229  :             dev->fbaorigin  = startblk;

  01011	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR startblk$[rsp]
  01019	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01021	48 89 81 90 11
	00 00		 mov	 QWORD PTR [rcx+4496], rax

; 230  :             dev->fbanumblk -= startblk;

  01028	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01030	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR startblk$[rsp]
  01037	8b 80 88 11 00
	00		 mov	 eax, DWORD PTR [rax+4488]
  0103d	2b c1		 sub	 eax, ecx
  0103f	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01047	89 81 88 11 00
	00		 mov	 DWORD PTR [rcx+4488], eax
$LN26@fba64_dasd:

; 231  :         }
; 232  : 
; 233  :         /* The third argument is the device block count */
; 234  :         if (argc >= 3 && strcmp(argv[2],"*") != 0)

  0104d	83 bc 24 28 06
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  01055	0f 8c f3 01 00
	00		 jl	 $LN29@fba64_dasd
  0105b	b8 08 00 00 00	 mov	 eax, 8
  01060	48 6b c0 02	 imul	 rax, rax, 2
  01064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169917
  0106b	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01073	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  01077	e8 00 00 00 00	 call	 strcmp
  0107c	85 c0		 test	 eax, eax
  0107e	0f 84 ca 01 00
	00		 je	 $LN29@fba64_dasd

; 235  :         {
; 236  :             if (sscanf(argv[2], "%u%c", &numblks, &c) != 1
; 237  :              || numblks > dev->fbanumblk)

  01084	b8 08 00 00 00	 mov	 eax, 8
  01089	48 6b c0 02	 imul	 rax, rax, 2
  0108d	4c 8d 4c 24 78	 lea	 r9, QWORD PTR c$[rsp]
  01092	4c 8d 84 24 dc
	00 00 00	 lea	 r8, QWORD PTR numblks$[rsp]
  0109a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169920
  010a1	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  010a9	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  010ad	e8 00 00 00 00	 call	 sscanf
  010b2	83 f8 01	 cmp	 eax, 1
  010b5	75 1b		 jne	 SHORT $LN31@fba64_dasd
  010b7	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  010bf	8b 80 88 11 00
	00		 mov	 eax, DWORD PTR [rax+4488]
  010c5	39 84 24 dc 00
	00 00		 cmp	 DWORD PTR numblks$[rsp], eax
  010cc	0f 8e 67 01 00
	00		 jle	 $LN30@fba64_dasd
$LN31@fba64_dasd:

; 238  :             {
; 239  :                 // "%1d:%04X %s file %s: invalid device block count %s"
; 240  :                 WRMSG( HHC00506, "E", LCSS_DEVNUM, FBATYP( cfba, 1 ), dev->filename, argv[2] );

  010d2	83 7c 24 7c 00	 cmp	 DWORD PTR cfba$[rsp], 0
  010d7	74 11		 je	 SHORT $LN80@fba64_dasd
  010d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169921
  010e0	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv579[rsp], rax
  010e8	eb 0f		 jmp	 SHORT $LN81@fba64_dasd
$LN80@fba64_dasd:
  010ea	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169922
  010f1	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv579[rsp], rax
$LN81@fba64_dasd:
  010f9	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01102	74 15		 je	 SHORT $LN82@fba64_dasd
  01104	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0110c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01110	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv584[rsp], eax
  01117	eb 0b		 jmp	 SHORT $LN83@fba64_dasd
$LN82@fba64_dasd:
  01119	c7 84 24 d4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv584[rsp], 0
$LN83@fba64_dasd:
  01124	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0112d	74 17		 je	 SHORT $LN84@fba64_dasd
  0112f	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01137	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0113b	d1 f8		 sar	 eax, 1
  0113d	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv590[rsp], eax
  01144	eb 0b		 jmp	 SHORT $LN85@fba64_dasd
$LN84@fba64_dasd:
  01146	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv590[rsp], 0
$LN85@fba64_dasd:
  01151	b8 08 00 00 00	 mov	 eax, 8
  01156	48 6b c0 02	 imul	 rax, rax, 2
  0115a	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR tv573[rsp], rax
  01162	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0116a	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  01171	48 89 8c 24 a8
	01 00 00	 mov	 QWORD PTR tv576[rsp], rcx
  01179	b9 01 00 00 00	 mov	 ecx, 1
  0117e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01184	48 8b 8c 24 30
	06 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0118c	48 8b 94 24 a0
	01 00 00	 mov	 rdx, QWORD PTR tv573[rsp]
  01194	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  01198	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0119d	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR tv576[rsp]
  011a5	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  011aa	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv579[rsp]
  011b2	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  011b7	8b 8c 24 d4 00
	00 00		 mov	 ecx, DWORD PTR tv584[rsp]
  011be	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  011c2	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv590[rsp]
  011c9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  011cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169923
  011d4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  011d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169924
  011e0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  011e5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  011ea	41 b9 03 00 00
	00		 mov	 r9d, 3
  011f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169925
  011f7	ba f0 00 00 00	 mov	 edx, 240		; 000000f0H
  011fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169926
  01203	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 241  :                 close (dev->fd);

  01209	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01211	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  01217	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 242  :                 dev->fd = -1;

  0121d	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01225	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 243  :                 return -1;

  0122f	b8 ff ff ff ff	 mov	 eax, -1
  01234	e9 25 04 00 00	 jmp	 $LN1@fba64_dasd
$LN30@fba64_dasd:

; 244  :             }
; 245  :             dev->fbanumblk = numblks;

  01239	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01241	8b 8c 24 dc 00
	00 00		 mov	 ecx, DWORD PTR numblks$[rsp]
  01248	89 88 88 11 00
	00		 mov	 DWORD PTR [rax+4488], ecx
$LN29@fba64_dasd:
$LN19@fba64_dasd:

; 246  :         }
; 247  :     }
; 248  : 
; 249  :     dev->fbaend = (dev->fbaorigin + dev->fbanumblk) * dev->fbablksiz;

  0124e	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01256	48 63 80 88 11
	00 00		 movsxd	 rax, DWORD PTR [rax+4488]
  0125d	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01265	48 8b 89 90 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4496]
  0126c	48 03 c8	 add	 rcx, rax
  0126f	48 8b c1	 mov	 rax, rcx
  01272	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0127a	48 63 89 8c 11
	00 00		 movsxd	 rcx, DWORD PTR [rcx+4492]
  01281	48 0f af c1	 imul	 rax, rcx
  01285	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0128d	48 89 81 a0 11
	00 00		 mov	 QWORD PTR [rcx+4512], rax

; 250  : 
; 251  :     if (!dev->quiet)

  01294	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0129c	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  012a2	c1 e8 0c	 shr	 eax, 12
  012a5	83 e0 01	 and	 eax, 1
  012a8	85 c0		 test	 eax, eax
  012aa	0f 85 32 01 00
	00		 jne	 $LN32@fba64_dasd

; 252  :         // "%1d:%04X %s file %s: origin %"PRId64", blks %d"
; 253  :         WRMSG( HHC00507, "I", LCSS_DEVNUM, FBATYP( cfba, 1 ),

  012b0	83 7c 24 7c 00	 cmp	 DWORD PTR cfba$[rsp], 0
  012b5	74 11		 je	 SHORT $LN86@fba64_dasd
  012b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169928
  012be	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv624[rsp], rax
  012c6	eb 0f		 jmp	 SHORT $LN87@fba64_dasd
$LN86@fba64_dasd:
  012c8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169929
  012cf	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv624[rsp], rax
$LN87@fba64_dasd:
  012d7	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  012e0	74 15		 je	 SHORT $LN88@fba64_dasd
  012e2	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  012ea	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  012ee	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv629[rsp], eax
  012f5	eb 0b		 jmp	 SHORT $LN89@fba64_dasd
$LN88@fba64_dasd:
  012f7	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv629[rsp], 0
$LN89@fba64_dasd:
  01302	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0130b	74 17		 je	 SHORT $LN90@fba64_dasd
  0130d	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01315	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  01319	d1 f8		 sar	 eax, 1
  0131b	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv635[rsp], eax
  01322	eb 0b		 jmp	 SHORT $LN91@fba64_dasd
$LN90@fba64_dasd:
  01324	c7 84 24 e4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv635[rsp], 0
$LN91@fba64_dasd:
  0132f	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01337	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0133d	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv621[rsp], rax
  01345	b9 01 00 00 00	 mov	 ecx, 1
  0134a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01350	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01358	8b 89 88 11 00
	00		 mov	 ecx, DWORD PTR [rcx+4488]
  0135e	89 4c 24 60	 mov	 DWORD PTR [rsp+96], ecx
  01362	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0136a	48 8b 89 90 11
	00 00		 mov	 rcx, QWORD PTR [rcx+4496]
  01371	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  01376	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR tv621[rsp]
  0137e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01383	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv624[rsp]
  0138b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01390	8b 8c 24 e0 00
	00 00		 mov	 ecx, DWORD PTR tv629[rsp]
  01397	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0139b	8b 8c 24 e4 00
	00 00		 mov	 ecx, DWORD PTR tv635[rsp]
  013a2	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  013a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169930
  013ad	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  013b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169931
  013b9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  013be	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  013c3	41 b9 03 00 00
	00		 mov	 r9d, 3
  013c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169932
  013d0	ba fe 00 00 00	 mov	 edx, 254		; 000000feH
  013d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169933
  013dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN32@fba64_dasd:

; 254  :                dev->filename, dev->fbaorigin, dev->fbanumblk );
; 255  : 
; 256  :     /* Set number of sense bytes */
; 257  :     dev->numsense = 24;

  013e2	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013ea	c7 80 60 03 00
	00 18 00 00 00	 mov	 DWORD PTR [rax+864], 24

; 258  : 
; 259  :     /* Locate the FBA dasd table entry */
; 260  :     dev->fbatab = dasd_lookup (DASD_FBADEV, NULL, dev->devtype, dev->fbanumblk);

  013f4	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  013fc	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  01400	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01408	44 8b 89 88 11
	00 00		 mov	 r9d, DWORD PTR [rcx+4488]
  0140f	44 8b c0	 mov	 r8d, eax
  01412	33 d2		 xor	 edx, edx
  01414	b9 03 00 00 00	 mov	 ecx, 3
  01419	e8 00 00 00 00	 call	 dasd_lookup
  0141e	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01426	48 89 81 80 11
	00 00		 mov	 QWORD PTR [rcx+4480], rax

; 261  :     if (dev->fbatab == NULL)

  0142d	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01435	48 83 b8 80 11
	00 00 00	 cmp	 QWORD PTR [rax+4480], 0
  0143d	0f 85 5b 01 00
	00		 jne	 $LN33@fba64_dasd

; 262  :     {
; 263  :         // "%1d:%04X %s file %s: device type %4.4X not found in dasd table"
; 264  :         WRMSG( HHC00508, "E", LCSS_DEVNUM, FBATYP( cfba, 1 ), dev->filename, dev->devtype );

  01443	83 7c 24 7c 00	 cmp	 DWORD PTR cfba$[rsp], 0
  01448	74 11		 je	 SHORT $LN92@fba64_dasd
  0144a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169935
  01451	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv696[rsp], rax
  01459	eb 0f		 jmp	 SHORT $LN93@fba64_dasd
$LN92@fba64_dasd:
  0145b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG169936
  01462	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv696[rsp], rax
$LN93@fba64_dasd:
  0146a	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  01473	74 15		 je	 SHORT $LN94@fba64_dasd
  01475	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0147d	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  01481	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv701[rsp], eax
  01488	eb 0b		 jmp	 SHORT $LN95@fba64_dasd
$LN94@fba64_dasd:
  0148a	c7 84 24 e8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv701[rsp], 0
$LN95@fba64_dasd:
  01495	48 83 bc 24 20
	06 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0149e	74 17		 je	 SHORT $LN96@fba64_dasd
  014a0	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014a8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  014ac	d1 f8		 sar	 eax, 1
  014ae	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv707[rsp], eax
  014b5	eb 0b		 jmp	 SHORT $LN97@fba64_dasd
$LN96@fba64_dasd:
  014b7	c7 84 24 ec 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv707[rsp], 0
$LN97@fba64_dasd:
  014c2	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  014ca	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  014ce	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv691[rsp], eax
  014d5	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  014dd	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  014e4	48 89 8c 24 b8
	01 00 00	 mov	 QWORD PTR tv693[rsp], rcx
  014ec	b9 01 00 00 00	 mov	 ecx, 1
  014f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  014f7	8b 8c 24 f4 00
	00 00		 mov	 ecx, DWORD PTR tv691[rsp]
  014fe	89 4c 24 58	 mov	 DWORD PTR [rsp+88], ecx
  01502	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR tv693[rsp]
  0150a	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0150f	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR tv696[rsp]
  01517	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0151c	8b 8c 24 e8 00
	00 00		 mov	 ecx, DWORD PTR tv701[rsp]
  01523	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  01527	8b 8c 24 ec 00
	00 00		 mov	 ecx, DWORD PTR tv707[rsp]
  0152e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01532	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169937
  01539	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0153e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169938
  01545	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0154a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0154f	41 b9 03 00 00
	00		 mov	 r9d, 3
  01555	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169939
  0155c	ba 08 01 00 00	 mov	 edx, 264		; 00000108H
  01561	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169940
  01568	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 265  :         close (dev->fd);

  0156e	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  01576	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0157c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close

; 266  :         dev->fd = -1;

  01582	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0158a	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 267  :         return -1;

  01594	b8 ff ff ff ff	 mov	 eax, -1
  01599	e9 c0 00 00 00	 jmp	 $LN1@fba64_dasd
$LN33@fba64_dasd:

; 268  :     }
; 269  : 
; 270  :     /* Build the dh_devid area */
; 271  :     dev->numdevid = dasd_build_fba_devid (dev->fbatab,(BYTE *)&dev->devid);

  0159e	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015a6	48 05 68 04 00
	00		 add	 rax, 1128		; 00000468H
  015ac	48 8b d0	 mov	 rdx, rax
  015af	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015b7	48 8b 88 80 11
	00 00		 mov	 rcx, QWORD PTR [rax+4480]
  015be	e8 00 00 00 00	 call	 dasd_build_fba_devid
  015c3	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  015cb	89 81 64 04 00
	00		 mov	 DWORD PTR [rcx+1124], eax

; 272  : 
; 273  :     /* Build the devchar area */
; 274  :     dev->numdevchar = dasd_build_fba_devchar (dev->fbatab,

  015d1	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015d9	48 05 6c 05 00
	00		 add	 rax, 1388		; 0000056cH
  015df	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  015e7	44 8b 81 88 11
	00 00		 mov	 r8d, DWORD PTR [rcx+4488]
  015ee	48 8b d0	 mov	 rdx, rax
  015f1	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  015f9	48 8b 88 80 11
	00 00		 mov	 rcx, QWORD PTR [rax+4480]
  01600	e8 00 00 00 00	 call	 dasd_build_fba_devchar
  01605	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0160d	89 81 68 05 00
	00		 mov	 DWORD PTR [rcx+1384], eax

; 275  :                                  (BYTE *)&dev->devchar,dev->fbanumblk);
; 276  : 
; 277  :     /* Initialize current blkgrp and cache entry */
; 278  :     dev->bufcur = dev->cache = -1;

  01613	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0161b	c7 80 f8 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+504], -1
  01625	48 8b 84 24 20
	06 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0162d	c7 80 c0 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+448], -1

; 279  : 
; 280  :     /* Activate I/O tracing */
; 281  : //  dev->ccwtrace = 1;
; 282  : 
; 283  :     /* Call the compressed init handler if compressed fba */
; 284  :     if (cfba)

  01637	83 7c 24 7c 00	 cmp	 DWORD PTR cfba$[rsp], 0
  0163c	74 1e		 je	 SHORT $LN34@fba64_dasd

; 285  :         return cckd64_dasd_init_handler (dev, argc, argv);

  0163e	4c 8b 84 24 30
	06 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  01646	8b 94 24 28 06
	00 00		 mov	 edx, DWORD PTR argc$[rsp]
  0164d	48 8b 8c 24 20
	06 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  01655	e8 00 00 00 00	 call	 cckd64_dasd_init_handler
  0165a	eb 02		 jmp	 SHORT $LN1@fba64_dasd
$LN34@fba64_dasd:

; 286  : 
; 287  :     return 0;

  0165c	33 c0		 xor	 eax, eax
$LN1@fba64_dasd:

; 288  : } /* end function fba64_dasd_init_handler */

  0165e	48 8b 8c 24 00
	06 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  01666	48 33 cc	 xor	 rcx, rsp
  01669	e8 00 00 00 00	 call	 __security_check_cookie
  0166e	48 81 c4 18 06
	00 00		 add	 rsp, 1560		; 00000618H
  01675	c3		 ret	 0
fba64_dasd_init_handler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_fw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_fw_noswap PROC					; COMDAT

; 746  :     inline U32 fetch_fw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 747  :       U32 value;
; 748  :       memcpy(&value, (BYTE *)ptr, 4);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR value$[rsp], eax

; 749  :       return value;

  00013	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]

; 750  :     }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
fetch_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
END
