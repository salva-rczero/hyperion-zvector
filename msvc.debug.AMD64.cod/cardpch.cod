; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	hdl_check_depends_ep
PUBLIC	hdl_define_devtypes_ep
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp__errno:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp__chsize_s:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_write:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_w32_basename:PROC
EXTRN	__imp_guest_to_host:PROC
EXTRN	__imp_device_attention:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
$SG159145 DB	01H DUP (?)
$SG159147 DB	01H DUP (?)
$SG159149 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$write_buffer DD imagerel write_buffer
	DD	imagerel write_buffer+369
	DD	imagerel $unwind$write_buffer
$pdata$open_punch DD imagerel open_punch
	DD	imagerel open_punch+717
	DD	imagerel $unwind$open_punch
$pdata$cardpch_init_handler DD imagerel cardpch_init_handler
	DD	imagerel cardpch_init_handler+2074
	DD	imagerel $unwind$cardpch_init_handler
$pdata$cardpch_query_device DD imagerel cardpch_query_device
	DD	imagerel cardpch_query_device+641
	DD	imagerel $unwind$cardpch_query_device
$pdata$cardpch_close_device DD imagerel cardpch_close_device
	DD	imagerel cardpch_close_device+87
	DD	imagerel $unwind$cardpch_close_device
$pdata$cardpch_execute_ccw DD imagerel cardpch_execute_ccw
	DD	imagerel cardpch_execute_ccw+1444
	DD	imagerel $unwind$cardpch_execute_ccw
$pdata$hdl_check_depends_ep DD imagerel $LN11
	DD	imagerel $LN11+110
	DD	imagerel $unwind$hdl_check_depends_ep
$pdata$hdl_define_devtypes_ep DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$hdl_define_devtypes_ep
pdata	ENDS
_DATA	SEGMENT
$SG159063 DB	'incomplete', 00H
	ORG $+5
$SG159064 DB	'write()', 00H
$SG159065 DB	'Card', 00H
	ORG $+3
$SG159066 DB	'E', 00H
	ORG $+2
$SG159090 DB	'E', 00H
	ORG $+2
$SG159067 DB	'HHC01250%s %1d:%04X %s: error in function %s: %s', 0aH, 00H
	ORG $+2
$SG159095 DB	'E', 00H
	ORG $+2
$SG159068 DB	'write_buffer', 00H
	ORG $+3
$SG159069 DB	'cardpch.c', 00H
	ORG $+2
$SG159100 DB	'%hx', 00H
$SG159087 DB	'cardpch.c:64', 00H
	ORG $+3
$SG159088 DB	'cardpch.c:66', 00H
	ORG $+3
$SG159091 DB	'HHC01208%s %1d:%04X Card: filename is missing', 0aH, 00H
	ORG $+1
$SG159092 DB	'cardpch_init_handler', 00H
	ORG $+3
$SG159093 DB	'cardpch.c', 00H
	ORG $+6
$SG159097 DB	'cardpch_init_handler', 00H
	ORG $+3
$SG159096 DB	'HHC01201%s %1d:%04X Card: filename %s too long, maximum '
	DB	'length is %d', 0aH, 00H
	ORG $+2
$SG159098 DB	'cardpch.c', 00H
	ORG $+2
$SG159104 DB	'append', 00H
	ORG $+1
$SG159106 DB	'ascii', 00H
	ORG $+2
$SG159108 DB	'crlf', 00H
	ORG $+3
$SG159110 DB	'ebcdic', 00H
	ORG $+1
$SG159115 DB	'W', 00H
	ORG $+2
$SG159112 DB	'noclear', 00H
$SG159113 DB	'noclear', 00H
$SG159114 DB	'Card', 00H
	ORG $+3
$SG159116 DB	'HHC01251%s %1d:%04X %s: option ''%s'' has been deprecate'
	DB	'd', 0aH, 00H
	ORG $+3
$SG159119 DB	'E', 00H
	ORG $+2
$SG159117 DB	'cardpch_init_handler', 00H
	ORG $+3
$SG159118 DB	'cardpch.c', 00H
	ORG $+6
$SG159121 DB	'cardpch_init_handler', 00H
	ORG $+3
$SG159120 DB	'HHC01209%s %1d:%04X Card: parameter %s in argument %d is'
	DB	' invalid', 0aH, 00H
	ORG $+2
$SG159137 DB	'PCH', 00H
$SG159122 DB	'cardpch.c', 00H
	ORG $+2
$SG159143 DB	'.', 00H
	ORG $+2
$SG159144 DB	' (stopped)', 00H
	ORG $+1
$SG159166 DB	'E', 00H
	ORG $+2
$SG159146 DB	' append', 00H
$SG159148 DB	' crlf', 00H
	ORG $+2
$SG159150 DB	' ascii', 00H
	ORG $+1
$SG159151 DB	' ebcdic', 00H
$SG159152 DB	'%s%s%s%s%s IO[%llu]', 00H
$SG159174 DB	'E', 00H
	ORG $+2
$SG159164 DB	'HOPEN()', 00H
$SG159165 DB	'Card', 00H
	ORG $+3
$SG159167 DB	'HHC01250%s %1d:%04X %s: error in function %s: %s', 0aH, 00H
	ORG $+2
$SG159287 DB	'DEVBLK', 00H
	ORG $+5
$SG159168 DB	'open_punch', 00H
	ORG $+5
$SG159169 DB	'cardpch.c', 00H
	ORG $+6
$SG159172 DB	'lseek()', 00H
$SG159173 DB	'Card', 00H
	ORG $+3
$SG159175 DB	'HHC01250%s %1d:%04X %s: error in function %s: %s', 0aH, 00H
	ORG $+6
$SG159176 DB	'open_punch', 00H
	ORG $+5
$SG159177 DB	'cardpch.c', 00H
	ORG $+2
$SG159292 DB	'3525', 00H
	ORG $+7
cardpch_device_hndinfo DQ FLAT:cardpch_init_handler
	DQ	FLAT:cardpch_execute_ccw
	DQ	FLAT:cardpch_close_device
	DQ	FLAT:cardpch_query_device
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
$SG159283 DB	'SDL 4.60', 00H
	ORG $+7
$SG159284 DB	'HERCULES', 00H
	ORG $+7
$SG159286 DB	'SDL 4.00', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:cardpch_query_device
	DD	025H
	DD	0269H
voltbl	ENDS
xdata	SEGMENT
$unwind$write_buffer DD 021b01H
	DD	011011bH
$unwind$open_punch DD 020c01H
	DD	015010cH
$unwind$cardpch_init_handler DD 021501H
	DD	0150115H
$unwind$cardpch_query_device DD 022d19H
	DD	035011bH
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$cardpch_close_device DD 010901H
	DD	04209H
$unwind$cardpch_execute_ccw DD 031901H
	DD	070158219H
	DD	06014H
$unwind$hdl_check_depends_ep DD 010901H
	DD	06209H
$unwind$hdl_define_devtypes_ep DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cardpch.c
_TEXT	SEGMENT
defdev$ = 48
hdl_define_devtypes_ep PROC

; 439  : HDL_DEVICE_SECTION;

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 440  : {
; 441  :     HDL_DEVICE(3525, cardpch_device_hndinfo );

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:cardpch_device_hndinfo
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159292
  00017	ff 54 24 30	 call	 QWORD PTR defdev$[rsp]

; 442  : }
; 443  : END_DEVICE_SECTION

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
hdl_define_devtypes_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cardpch.c
_TEXT	SEGMENT
depchk_rc$ = 32
depchk$ = 64
hdl_check_depends_ep PROC

; 431  : HDL_DEPENDENCY_SECTION;

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H
  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 0
$LN4@hdl_check_:

; 432  : {
; 433  :      HDL_DEPENDENCY(HERCULES);

  00011	41 b8 08 00 00
	00		 mov	 r8d, 8
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159283
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159284
  00025	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  00029	85 c0		 test	 eax, eax
  0002b	74 08		 je	 SHORT $LN8@hdl_check_
  0002d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN8@hdl_check_:
  00035	33 c0		 xor	 eax, eax
  00037	85 c0		 test	 eax, eax
  00039	75 d6		 jne	 SHORT $LN4@hdl_check_
$LN7@hdl_check_:

; 434  :      HDL_DEPENDENCY(DEVBLK);

  0003b	41 b8 a0 1b 00
	00		 mov	 r8d, 7072		; 00001ba0H
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159286
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159287
  0004f	ff 54 24 40	 call	 QWORD PTR depchk$[rsp]
  00053	85 c0		 test	 eax, eax
  00055	74 08		 je	 SHORT $LN9@hdl_check_
  00057	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR depchk_rc$[rsp], 1
$LN9@hdl_check_:
  0005f	33 c0		 xor	 eax, eax
  00061	85 c0		 test	 eax, eax
  00063	75 d6		 jne	 SHORT $LN7@hdl_check_

; 435  : }
; 436  : END_DEPENDENCY_SECTION

  00065	8b 44 24 20	 mov	 eax, DWORD PTR depchk_rc$[rsp]
  00069	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006d	c3		 ret	 0
hdl_check_depends_ep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cardpch.c
_TEXT	SEGMENT
c$ = 32
i$ = 36
num$ = 40
tv77 = 44
tv86 = 48
tv191 = 52
tv210 = 56
dev$ = 96
code$ = 104
flags$ = 112
chained$ = 120
count$ = 128
prevcode$ = 136
ccwseq$ = 144
iobuf$ = 152
more$ = 160
unitstat$ = 168
residual$ = 176
cardpch_execute_ccw PROC

; 253  : {

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@cardpch_ex:

; 254  : U32             i;                      /* Loop counter              */
; 255  : U32             num;                    /* Number of bytes to move   */
; 256  : BYTE            c;                      /* Output character          */
; 257  : 
; 258  :     UNREFERENCED( prevcode );

  00019	33 c0		 xor	 eax, eax
  0001b	85 c0		 test	 eax, eax
  0001d	75 fa		 jne	 SHORT $LN4@cardpch_ex
$LN7@cardpch_ex:

; 259  :     UNREFERENCED( ccwseq );

  0001f	33 c0		 xor	 eax, eax
  00021	85 c0		 test	 eax, eax
  00023	75 fa		 jne	 SHORT $LN7@cardpch_ex

; 260  : 
; 261  :     /* If punch stopped, return intervention required */
; 262  :     if (dev->stopdev && !IS_CCW_SENSE( code ))

  00025	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0002a	8b 80 84 07 00
	00		 mov	 eax, DWORD PTR [rax+1924]
  00030	c1 e8 02	 shr	 eax, 2
  00033	83 e0 01	 and	 eax, 1
  00036	85 c0		 test	 eax, eax
  00038	74 33		 je	 SHORT $LN19@cardpch_ex
  0003a	0f b6 44 24 68	 movzx	 eax, BYTE PTR code$[rsp]
  0003f	83 e0 0f	 and	 eax, 15
  00042	83 f8 04	 cmp	 eax, 4
  00045	74 26		 je	 SHORT $LN19@cardpch_ex

; 263  :     {
; 264  :         /* Set unit check with intervention required */
; 265  :         dev->sense[0] = SENSE_IR;

  00047	b8 01 00 00 00	 mov	 eax, 1
  0004c	48 6b c0 00	 imul	 rax, rax, 0
  00050	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  00055	c6 84 01 64 03
	00 00 40	 mov	 BYTE PTR [rcx+rax+868], 64 ; 00000040H

; 266  :         *unitstat = CSW_CE | CSW_DE | CSW_UC;

  0005d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00065	c6 00 0e	 mov	 BYTE PTR [rax], 14

; 267  :         return;

  00068	e9 2d 04 00 00	 jmp	 $LN1@cardpch_ex
$LN19@cardpch_ex:

; 268  :     }
; 269  : 
; 270  :     /* Process depending on CCW opcode */
; 271  :     switch (code) {

  0006d	0f b6 44 24 68	 movzx	 eax, BYTE PTR code$[rsp]
  00072	89 44 24 2c	 mov	 DWORD PTR tv77[rsp], eax
  00076	8b 44 24 2c	 mov	 eax, DWORD PTR tv77[rsp]
  0007a	ff c8		 dec	 eax
  0007c	89 44 24 2c	 mov	 DWORD PTR tv77[rsp], eax
  00080	81 7c 24 2c e3
	00 00 00	 cmp	 DWORD PTR tv77[rsp], 227 ; 000000e3H
  00088	0f 87 eb 03 00
	00		 ja	 $LN36@cardpch_ex
  0008e	48 63 44 24 2c	 movsxd	 rax, DWORD PTR tv77[rsp]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0009a	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN44@cardpch_ex[rcx+rax]
  000a2	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN45@cardpch_ex[rcx+rax*4]
  000a9	48 03 c1	 add	 rax, rcx
  000ac	ff e0		 jmp	 rax
$LN20@cardpch_ex:
$LN21@cardpch_ex:
$LN22@cardpch_ex:

; 272  : 
; 273  :     case 0x01:
; 274  :     case 0x41:
; 275  :     case 0x81:
; 276  :     /*---------------------------------------------------------------*/
; 277  :     /* WRITE, FEED, SELECT STACKER                                   */
; 278  :     /*---------------------------------------------------------------*/
; 279  :         /* Start a new record if not data-chained from previous CCW */
; 280  :         if ((chained & CCW_FLAGS_CD) == 0)

  000ae	0f b6 44 24 78	 movzx	 eax, BYTE PTR chained$[rsp]
  000b3	25 80 00 00 00	 and	 eax, 128		; 00000080H
  000b8	85 c0		 test	 eax, eax
  000ba	75 1e		 jne	 SHORT $LN23@cardpch_ex

; 281  :         {
; 282  :             dev->cardpos = 0;

  000bc	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  000c1	c7 80 f0 06 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+1776], 0

; 283  :             dev->cardrem = CARD_LENGTH;

  000cb	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  000d0	c7 80 f4 06 00
	00 50 00 00 00	 mov	 DWORD PTR [rax+1780], 80 ; 00000050H
$LN23@cardpch_ex:

; 284  : 
; 285  :         } /* end if(!data-chained) */
; 286  : 
; 287  :         /* Calculate number of bytes to write and set residual count */
; 288  :         num = (count < (U32)dev->cardrem) ? count : (U32)dev->cardrem;

  000da	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  000df	8b 80 f4 06 00
	00		 mov	 eax, DWORD PTR [rax+1780]
  000e5	39 84 24 80 00
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  000ec	73 0d		 jae	 SHORT $LN38@cardpch_ex
  000ee	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  000f5	89 44 24 30	 mov	 DWORD PTR tv86[rsp], eax
  000f9	eb 0f		 jmp	 SHORT $LN39@cardpch_ex
$LN38@cardpch_ex:
  000fb	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00100	8b 80 f4 06 00
	00		 mov	 eax, DWORD PTR [rax+1780]
  00106	89 44 24 30	 mov	 DWORD PTR tv86[rsp], eax
$LN39@cardpch_ex:
  0010a	8b 44 24 30	 mov	 eax, DWORD PTR tv86[rsp]
  0010e	89 44 24 28	 mov	 DWORD PTR num$[rsp], eax

; 289  :         *residual = count - num;

  00112	8b 44 24 28	 mov	 eax, DWORD PTR num$[rsp]
  00116	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  0011d	2b c8		 sub	 ecx, eax
  0011f	8b c1		 mov	 eax, ecx
  00121	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  00129	89 01		 mov	 DWORD PTR [rcx], eax

; 290  : 
; 291  :         /* Copy data from channel buffer to card buffer */
; 292  :         for (i = 0; i < num; i++)

  0012b	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00133	eb 0a		 jmp	 SHORT $LN12@cardpch_ex
$LN10@cardpch_ex:
  00135	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00139	ff c0		 inc	 eax
  0013b	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN12@cardpch_ex:
  0013f	8b 44 24 28	 mov	 eax, DWORD PTR num$[rsp]
  00143	39 44 24 24	 cmp	 DWORD PTR i$[rsp], eax
  00147	0f 83 8d 00 00
	00		 jae	 $LN11@cardpch_ex

; 293  :         {
; 294  :             c = iobuf[i];

  0014d	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00151	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR iobuf$[rsp]
  00159	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0015d	88 44 24 20	 mov	 BYTE PTR c$[rsp], al

; 295  : 
; 296  :             if (dev->ascii)

  00161	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00166	8b 80 f8 06 00
	00		 mov	 eax, DWORD PTR [rax+1784]
  0016c	c1 e8 03	 shr	 eax, 3
  0016f	83 e0 01	 and	 eax, 1
  00172	85 c0		 test	 eax, eax
  00174	74 0f		 je	 SHORT $LN24@cardpch_ex

; 297  :             {
; 298  :                 c = guest_to_host(c);

  00176	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR c$[rsp]
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_guest_to_host
  00181	88 44 24 20	 mov	 BYTE PTR c$[rsp], al
$LN24@cardpch_ex:

; 299  :             }
; 300  : 
; 301  :             dev->buf[dev->cardpos] = c;

  00185	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0018a	48 63 80 f0 06
	00 00		 movsxd	 rax, DWORD PTR [rax+1776]
  00191	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  00196	48 8b 89 c8 01
	00 00		 mov	 rcx, QWORD PTR [rcx+456]
  0019d	0f b6 54 24 20	 movzx	 edx, BYTE PTR c$[rsp]
  001a2	88 14 01	 mov	 BYTE PTR [rcx+rax], dl

; 302  :             dev->cardpos++;

  001a5	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  001aa	8b 80 f0 06 00
	00		 mov	 eax, DWORD PTR [rax+1776]
  001b0	ff c0		 inc	 eax
  001b2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  001b7	89 81 f0 06 00
	00		 mov	 DWORD PTR [rcx+1776], eax

; 303  :             dev->cardrem--;

  001bd	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  001c2	8b 80 f4 06 00
	00		 mov	 eax, DWORD PTR [rax+1780]
  001c8	ff c8		 dec	 eax
  001ca	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  001cf	89 81 f4 06 00
	00		 mov	 DWORD PTR [rcx+1780], eax

; 304  :         } /* end for(i) */

  001d5	e9 5b ff ff ff	 jmp	 $LN10@cardpch_ex
$LN11@cardpch_ex:

; 305  : 
; 306  :         /* Perform end of record processing if not data-chaining */
; 307  :         if ((flags & CCW_FLAGS_CD) == 0)

  001da	0f b6 44 24 70	 movzx	 eax, BYTE PTR flags$[rsp]
  001df	25 80 00 00 00	 and	 eax, 128		; 00000080H
  001e4	85 c0		 test	 eax, eax
  001e6	0f 85 1b 01 00
	00		 jne	 $LN25@cardpch_ex

; 308  :         {
; 309  :             if (dev->ascii)

  001ec	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  001f1	8b 80 f8 06 00
	00		 mov	 eax, DWORD PTR [rax+1784]
  001f7	c1 e8 03	 shr	 eax, 3
  001fa	83 e0 01	 and	 eax, 1
  001fd	85 c0		 test	 eax, eax
  001ff	0f 84 93 00 00
	00		 je	 $LN26@cardpch_ex

; 310  :             {
; 311  :                 /* Truncate trailing blanks from card buffer */
; 312  :                 for (i = dev->cardpos; i > 0; i--)

  00205	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0020a	8b 80 f0 06 00
	00		 mov	 eax, DWORD PTR [rax+1776]
  00210	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
  00214	eb 0a		 jmp	 SHORT $LN15@cardpch_ex
$LN13@cardpch_ex:
  00216	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0021a	ff c8		 dec	 eax
  0021c	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN15@cardpch_ex:
  00220	83 7c 24 24 00	 cmp	 DWORD PTR i$[rsp], 0
  00225	76 21		 jbe	 SHORT $LN14@cardpch_ex

; 313  :                     if (dev->buf[i-1] != SPACE) break;

  00227	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0022b	ff c8		 dec	 eax
  0022d	8b c0		 mov	 eax, eax
  0022f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  00234	48 8b 89 c8 01
	00 00		 mov	 rcx, QWORD PTR [rcx+456]
  0023b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0023f	83 f8 20	 cmp	 eax, 32			; 00000020H
  00242	74 02		 je	 SHORT $LN28@cardpch_ex
  00244	eb 02		 jmp	 SHORT $LN14@cardpch_ex
$LN28@cardpch_ex:
  00246	eb ce		 jmp	 SHORT $LN13@cardpch_ex
$LN14@cardpch_ex:

; 314  : 
; 315  :                 /* Append carriage return and line feed */
; 316  :                 if (dev->crlf) dev->buf[i++] = '\r';

  00248	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0024d	8b 80 84 07 00
	00		 mov	 eax, DWORD PTR [rax+1924]
  00253	83 e0 01	 and	 eax, 1
  00256	85 c0		 test	 eax, eax
  00258	74 1e		 je	 SHORT $LN29@cardpch_ex
  0025a	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0025e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  00263	48 8b 89 c8 01
	00 00		 mov	 rcx, QWORD PTR [rcx+456]
  0026a	c6 04 01 0d	 mov	 BYTE PTR [rcx+rax], 13
  0026e	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00272	ff c0		 inc	 eax
  00274	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN29@cardpch_ex:

; 317  :                 dev->buf[i++] = '\n';

  00278	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  0027c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  00281	48 8b 89 c8 01
	00 00		 mov	 rcx, QWORD PTR [rcx+456]
  00288	c6 04 01 0a	 mov	 BYTE PTR [rcx+rax], 10
  0028c	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00290	ff c0		 inc	 eax
  00292	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax

; 318  :             }

  00296	eb 38		 jmp	 SHORT $LN27@cardpch_ex
$LN26@cardpch_ex:

; 319  :             else
; 320  :             {
; 321  :                 /* Pad card image with blanks */
; 322  :                 for (i = dev->cardpos; i < CARD_LENGTH; i++)

  00298	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0029d	8b 80 f0 06 00
	00		 mov	 eax, DWORD PTR [rax+1776]
  002a3	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
  002a7	eb 0a		 jmp	 SHORT $LN18@cardpch_ex
$LN16@cardpch_ex:
  002a9	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  002ad	ff c0		 inc	 eax
  002af	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN18@cardpch_ex:
  002b3	83 7c 24 24 50	 cmp	 DWORD PTR i$[rsp], 80	; 00000050H
  002b8	73 16		 jae	 SHORT $LN17@cardpch_ex

; 323  :                     dev->buf[i] = HEX40;

  002ba	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  002be	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  002c3	48 8b 89 c8 01
	00 00		 mov	 rcx, QWORD PTR [rcx+456]
  002ca	c6 04 01 40	 mov	 BYTE PTR [rcx+rax], 64	; 00000040H
  002ce	eb d9		 jmp	 SHORT $LN16@cardpch_ex
$LN17@cardpch_ex:
$LN27@cardpch_ex:

; 324  :             }
; 325  : 
; 326  :             /* Write card image */
; 327  :             write_buffer (dev, dev->buf, i, unitstat);

  002d0	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR unitstat$[rsp]
  002d8	44 8b 44 24 24	 mov	 r8d, DWORD PTR i$[rsp]
  002dd	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  002e2	48 8b 90 c8 01
	00 00		 mov	 rdx, QWORD PTR [rax+456]
  002e9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  002ee	e8 00 00 00 00	 call	 write_buffer

; 328  :             if (*unitstat != 0) break;

  002f3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  002fb	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002fe	85 c0		 test	 eax, eax
  00300	74 05		 je	 SHORT $LN30@cardpch_ex
  00302	e9 93 01 00 00	 jmp	 $LN8@cardpch_ex
$LN30@cardpch_ex:
$LN25@cardpch_ex:

; 329  : 
; 330  :         } /* end if(!data-chaining) */
; 331  : 
; 332  :         /* Return normal status */
; 333  :         *unitstat = CSW_CE | CSW_DE;

  00307	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0030f	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 334  :         break;

  00312	e9 83 01 00 00	 jmp	 $LN8@cardpch_ex
$LN31@cardpch_ex:

; 335  : 
; 336  :     case 0x03:
; 337  :     /*---------------------------------------------------------------*/
; 338  :     /* CONTROL NO-OPERATION                                          */
; 339  :     /*---------------------------------------------------------------*/
; 340  :         *unitstat = CSW_CE | CSW_DE;

  00317	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  0031f	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 341  :         break;

  00322	e9 73 01 00 00	 jmp	 $LN8@cardpch_ex
$LN32@cardpch_ex:

; 342  : 
; 343  :     case 0x04:
; 344  :     /*---------------------------------------------------------------*/
; 345  :     /* SENSE                                                         */
; 346  :     /*---------------------------------------------------------------*/
; 347  :         /* Calculate residual byte count */
; 348  :         num = (count < dev->numsense) ? count : dev->numsense;

  00327	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0032c	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  00332	39 84 24 80 00
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  00339	73 0d		 jae	 SHORT $LN40@cardpch_ex
  0033b	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00342	89 44 24 34	 mov	 DWORD PTR tv191[rsp], eax
  00346	eb 0f		 jmp	 SHORT $LN41@cardpch_ex
$LN40@cardpch_ex:
  00348	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0034d	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  00353	89 44 24 34	 mov	 DWORD PTR tv191[rsp], eax
$LN41@cardpch_ex:
  00357	8b 44 24 34	 mov	 eax, DWORD PTR tv191[rsp]
  0035b	89 44 24 28	 mov	 DWORD PTR num$[rsp], eax

; 349  :         *residual = count - num;

  0035f	8b 44 24 28	 mov	 eax, DWORD PTR num$[rsp]
  00363	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  0036a	2b c8		 sub	 ecx, eax
  0036c	8b c1		 mov	 eax, ecx
  0036e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  00376	89 01		 mov	 DWORD PTR [rcx], eax

; 350  :         if (count < dev->numsense) *more = 1;

  00378	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  0037d	8b 80 60 03 00
	00		 mov	 eax, DWORD PTR [rax+864]
  00383	39 84 24 80 00
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  0038a	73 0b		 jae	 SHORT $LN33@cardpch_ex
  0038c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR more$[rsp]
  00394	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN33@cardpch_ex:

; 351  : 
; 352  :         /* Copy device sense bytes to channel I/O buffer */
; 353  :         memcpy (iobuf, dev->sense, num);

  00397	8b 44 24 28	 mov	 eax, DWORD PTR num$[rsp]
  0039b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  003a0	48 81 c1 64 03
	00 00		 add	 rcx, 868		; 00000364H
  003a7	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  003af	48 8b f1	 mov	 rsi, rcx
  003b2	8b c8		 mov	 ecx, eax
  003b4	f3 a4		 rep movsb

; 354  : 
; 355  :         /* Clear the device sense bytes */
; 356  :         memset (dev->sense, 0, sizeof(dev->sense));

  003b6	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  003bb	48 05 64 03 00
	00		 add	 rax, 868		; 00000364H
  003c1	48 8b f8	 mov	 rdi, rax
  003c4	33 c0		 xor	 eax, eax
  003c6	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  003cb	f3 aa		 rep stosb

; 357  : 
; 358  :         /* Return unit status */
; 359  :         *unitstat = CSW_CE | CSW_DE;

  003cd	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  003d5	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 360  :         break;

  003d8	e9 bd 00 00 00	 jmp	 $LN8@cardpch_ex
$LN34@cardpch_ex:

; 361  : 
; 362  :     case 0xE4:
; 363  :     /*---------------------------------------------------------------*/
; 364  :     /* SENSE ID                                                      */
; 365  :     /*---------------------------------------------------------------*/
; 366  :         /* Calculate residual byte count */
; 367  :         num = (count < dev->numdevid) ? count : dev->numdevid;

  003dd	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  003e2	8b 80 64 04 00
	00		 mov	 eax, DWORD PTR [rax+1124]
  003e8	39 84 24 80 00
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  003ef	73 0d		 jae	 SHORT $LN42@cardpch_ex
  003f1	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  003f8	89 44 24 38	 mov	 DWORD PTR tv210[rsp], eax
  003fc	eb 0f		 jmp	 SHORT $LN43@cardpch_ex
$LN42@cardpch_ex:
  003fe	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00403	8b 80 64 04 00
	00		 mov	 eax, DWORD PTR [rax+1124]
  00409	89 44 24 38	 mov	 DWORD PTR tv210[rsp], eax
$LN43@cardpch_ex:
  0040d	8b 44 24 38	 mov	 eax, DWORD PTR tv210[rsp]
  00411	89 44 24 28	 mov	 DWORD PTR num$[rsp], eax

; 368  :         *residual = count - num;

  00415	8b 44 24 28	 mov	 eax, DWORD PTR num$[rsp]
  00419	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR count$[rsp]
  00420	2b c8		 sub	 ecx, eax
  00422	8b c1		 mov	 eax, ecx
  00424	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR residual$[rsp]
  0042c	89 01		 mov	 DWORD PTR [rcx], eax

; 369  :         if (count < dev->numdevid) *more = 1;

  0042e	48 8b 44 24 60	 mov	 rax, QWORD PTR dev$[rsp]
  00433	8b 80 64 04 00
	00		 mov	 eax, DWORD PTR [rax+1124]
  00439	39 84 24 80 00
	00 00		 cmp	 DWORD PTR count$[rsp], eax
  00440	73 0b		 jae	 SHORT $LN35@cardpch_ex
  00442	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR more$[rsp]
  0044a	c6 00 01	 mov	 BYTE PTR [rax], 1
$LN35@cardpch_ex:

; 370  : 
; 371  :         /* Copy device identifier bytes to channel I/O buffer */
; 372  :         memcpy (iobuf, dev->devid, num);

  0044d	8b 44 24 28	 mov	 eax, DWORD PTR num$[rsp]
  00451	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  00456	48 81 c1 68 04
	00 00		 add	 rcx, 1128		; 00000468H
  0045d	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR iobuf$[rsp]
  00465	48 8b f1	 mov	 rsi, rcx
  00468	8b c8		 mov	 ecx, eax
  0046a	f3 a4		 rep movsb

; 373  : 
; 374  :         /* Return unit status */
; 375  :         *unitstat = CSW_CE | CSW_DE;

  0046c	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00474	c6 00 0c	 mov	 BYTE PTR [rax], 12

; 376  :         break;

  00477	eb 21		 jmp	 SHORT $LN8@cardpch_ex
$LN36@cardpch_ex:

; 377  : 
; 378  :     default:
; 379  :     /*---------------------------------------------------------------*/
; 380  :     /* INVALID OPERATION                                             */
; 381  :     /*---------------------------------------------------------------*/
; 382  :         /* Set command reject sense byte, and unit check status */
; 383  :         dev->sense[0] = SENSE_CR;

  00479	b8 01 00 00 00	 mov	 eax, 1
  0047e	48 6b c0 00	 imul	 rax, rax, 0
  00482	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dev$[rsp]
  00487	c6 84 01 64 03
	00 00 80	 mov	 BYTE PTR [rcx+rax+868], 128 ; 00000080H

; 384  :         *unitstat = CSW_CE | CSW_DE | CSW_UC;

  0048f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00497	c6 00 0e	 mov	 BYTE PTR [rax], 14
$LN8@cardpch_ex:
$LN1@cardpch_ex:

; 385  : 
; 386  :     } /* end switch(code) */
; 387  : 
; 388  : } /* end function cardpch_execute_ccw */

  0049a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0049e	5f		 pop	 rdi
  0049f	5e		 pop	 rsi
  004a0	c3		 ret	 0
  004a1	0f 1f 00	 npad	 3
$LN45@cardpch_ex:
  004a4	00 00 00 00	 DD	 $LN20@cardpch_ex
  004a8	00 00 00 00	 DD	 $LN31@cardpch_ex
  004ac	00 00 00 00	 DD	 $LN32@cardpch_ex
  004b0	00 00 00 00	 DD	 $LN21@cardpch_ex
  004b4	00 00 00 00	 DD	 $LN22@cardpch_ex
  004b8	00 00 00 00	 DD	 $LN34@cardpch_ex
  004bc	00 00 00 00	 DD	 $LN36@cardpch_ex
$LN44@cardpch_ex:
  004c0	00		 DB	 0
  004c1	06		 DB	 6
  004c2	01		 DB	 1
  004c3	02		 DB	 2
  004c4	06		 DB	 6
  004c5	06		 DB	 6
  004c6	06		 DB	 6
  004c7	06		 DB	 6
  004c8	06		 DB	 6
  004c9	06		 DB	 6
  004ca	06		 DB	 6
  004cb	06		 DB	 6
  004cc	06		 DB	 6
  004cd	06		 DB	 6
  004ce	06		 DB	 6
  004cf	06		 DB	 6
  004d0	06		 DB	 6
  004d1	06		 DB	 6
  004d2	06		 DB	 6
  004d3	06		 DB	 6
  004d4	06		 DB	 6
  004d5	06		 DB	 6
  004d6	06		 DB	 6
  004d7	06		 DB	 6
  004d8	06		 DB	 6
  004d9	06		 DB	 6
  004da	06		 DB	 6
  004db	06		 DB	 6
  004dc	06		 DB	 6
  004dd	06		 DB	 6
  004de	06		 DB	 6
  004df	06		 DB	 6
  004e0	06		 DB	 6
  004e1	06		 DB	 6
  004e2	06		 DB	 6
  004e3	06		 DB	 6
  004e4	06		 DB	 6
  004e5	06		 DB	 6
  004e6	06		 DB	 6
  004e7	06		 DB	 6
  004e8	06		 DB	 6
  004e9	06		 DB	 6
  004ea	06		 DB	 6
  004eb	06		 DB	 6
  004ec	06		 DB	 6
  004ed	06		 DB	 6
  004ee	06		 DB	 6
  004ef	06		 DB	 6
  004f0	06		 DB	 6
  004f1	06		 DB	 6
  004f2	06		 DB	 6
  004f3	06		 DB	 6
  004f4	06		 DB	 6
  004f5	06		 DB	 6
  004f6	06		 DB	 6
  004f7	06		 DB	 6
  004f8	06		 DB	 6
  004f9	06		 DB	 6
  004fa	06		 DB	 6
  004fb	06		 DB	 6
  004fc	06		 DB	 6
  004fd	06		 DB	 6
  004fe	06		 DB	 6
  004ff	06		 DB	 6
  00500	03		 DB	 3
  00501	06		 DB	 6
  00502	06		 DB	 6
  00503	06		 DB	 6
  00504	06		 DB	 6
  00505	06		 DB	 6
  00506	06		 DB	 6
  00507	06		 DB	 6
  00508	06		 DB	 6
  00509	06		 DB	 6
  0050a	06		 DB	 6
  0050b	06		 DB	 6
  0050c	06		 DB	 6
  0050d	06		 DB	 6
  0050e	06		 DB	 6
  0050f	06		 DB	 6
  00510	06		 DB	 6
  00511	06		 DB	 6
  00512	06		 DB	 6
  00513	06		 DB	 6
  00514	06		 DB	 6
  00515	06		 DB	 6
  00516	06		 DB	 6
  00517	06		 DB	 6
  00518	06		 DB	 6
  00519	06		 DB	 6
  0051a	06		 DB	 6
  0051b	06		 DB	 6
  0051c	06		 DB	 6
  0051d	06		 DB	 6
  0051e	06		 DB	 6
  0051f	06		 DB	 6
  00520	06		 DB	 6
  00521	06		 DB	 6
  00522	06		 DB	 6
  00523	06		 DB	 6
  00524	06		 DB	 6
  00525	06		 DB	 6
  00526	06		 DB	 6
  00527	06		 DB	 6
  00528	06		 DB	 6
  00529	06		 DB	 6
  0052a	06		 DB	 6
  0052b	06		 DB	 6
  0052c	06		 DB	 6
  0052d	06		 DB	 6
  0052e	06		 DB	 6
  0052f	06		 DB	 6
  00530	06		 DB	 6
  00531	06		 DB	 6
  00532	06		 DB	 6
  00533	06		 DB	 6
  00534	06		 DB	 6
  00535	06		 DB	 6
  00536	06		 DB	 6
  00537	06		 DB	 6
  00538	06		 DB	 6
  00539	06		 DB	 6
  0053a	06		 DB	 6
  0053b	06		 DB	 6
  0053c	06		 DB	 6
  0053d	06		 DB	 6
  0053e	06		 DB	 6
  0053f	06		 DB	 6
  00540	04		 DB	 4
  00541	06		 DB	 6
  00542	06		 DB	 6
  00543	06		 DB	 6
  00544	06		 DB	 6
  00545	06		 DB	 6
  00546	06		 DB	 6
  00547	06		 DB	 6
  00548	06		 DB	 6
  00549	06		 DB	 6
  0054a	06		 DB	 6
  0054b	06		 DB	 6
  0054c	06		 DB	 6
  0054d	06		 DB	 6
  0054e	06		 DB	 6
  0054f	06		 DB	 6
  00550	06		 DB	 6
  00551	06		 DB	 6
  00552	06		 DB	 6
  00553	06		 DB	 6
  00554	06		 DB	 6
  00555	06		 DB	 6
  00556	06		 DB	 6
  00557	06		 DB	 6
  00558	06		 DB	 6
  00559	06		 DB	 6
  0055a	06		 DB	 6
  0055b	06		 DB	 6
  0055c	06		 DB	 6
  0055d	06		 DB	 6
  0055e	06		 DB	 6
  0055f	06		 DB	 6
  00560	06		 DB	 6
  00561	06		 DB	 6
  00562	06		 DB	 6
  00563	06		 DB	 6
  00564	06		 DB	 6
  00565	06		 DB	 6
  00566	06		 DB	 6
  00567	06		 DB	 6
  00568	06		 DB	 6
  00569	06		 DB	 6
  0056a	06		 DB	 6
  0056b	06		 DB	 6
  0056c	06		 DB	 6
  0056d	06		 DB	 6
  0056e	06		 DB	 6
  0056f	06		 DB	 6
  00570	06		 DB	 6
  00571	06		 DB	 6
  00572	06		 DB	 6
  00573	06		 DB	 6
  00574	06		 DB	 6
  00575	06		 DB	 6
  00576	06		 DB	 6
  00577	06		 DB	 6
  00578	06		 DB	 6
  00579	06		 DB	 6
  0057a	06		 DB	 6
  0057b	06		 DB	 6
  0057c	06		 DB	 6
  0057d	06		 DB	 6
  0057e	06		 DB	 6
  0057f	06		 DB	 6
  00580	06		 DB	 6
  00581	06		 DB	 6
  00582	06		 DB	 6
  00583	06		 DB	 6
  00584	06		 DB	 6
  00585	06		 DB	 6
  00586	06		 DB	 6
  00587	06		 DB	 6
  00588	06		 DB	 6
  00589	06		 DB	 6
  0058a	06		 DB	 6
  0058b	06		 DB	 6
  0058c	06		 DB	 6
  0058d	06		 DB	 6
  0058e	06		 DB	 6
  0058f	06		 DB	 6
  00590	06		 DB	 6
  00591	06		 DB	 6
  00592	06		 DB	 6
  00593	06		 DB	 6
  00594	06		 DB	 6
  00595	06		 DB	 6
  00596	06		 DB	 6
  00597	06		 DB	 6
  00598	06		 DB	 6
  00599	06		 DB	 6
  0059a	06		 DB	 6
  0059b	06		 DB	 6
  0059c	06		 DB	 6
  0059d	06		 DB	 6
  0059e	06		 DB	 6
  0059f	06		 DB	 6
  005a0	06		 DB	 6
  005a1	06		 DB	 6
  005a2	06		 DB	 6
  005a3	05		 DB	 5
cardpch_execute_ccw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cardpch.c
_TEXT	SEGMENT
dev$ = 48
cardpch_close_device PROC

; 237  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 238  :     /* Close the device file */
; 239  :     if (dev->fd >= 0)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  0000e	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00015	7c 11		 jl	 SHORT $LN2@cardpch_cl

; 240  :         close( dev->fd );

  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  0001c	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close
$LN2@cardpch_cl:

; 241  :     dev->fd = -1;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  0002d	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 242  :     dev->stopdev = FALSE;

  00037	48 8b 44 24 30	 mov	 rax, QWORD PTR dev$[rsp]
  0003c	8b 80 84 07 00
	00		 mov	 eax, DWORD PTR [rax+1924]
  00042	83 e0 fb	 and	 eax, -5			; fffffffbH
  00045	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dev$[rsp]
  0004a	89 81 84 07 00
	00		 mov	 DWORD PTR [rcx+1924], eax

; 243  : 
; 244  :     return 0;

  00050	33 c0		 xor	 eax, eax

; 245  : } /* end function cardpch_close_device */

  00052	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00056	c3		 ret	 0
cardpch_close_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cardpch.c
_TEXT	SEGMENT
$T1 = 80
tv129 = 88
tv134 = 96
tv143 = 104
tv149 = 112
filename$ = 128
__$ArrayPad$ = 400
dev$ = 432
devclass$ = 440
buflen$ = 448
buffer$ = 456
cardpch_query_device PROC

; 178  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 179  :     char  filename[ PATH_MAX + 1 ];     /* full path or just name    */
; 180  : 
; 181  :     BEGIN_DEVICE_CLASS_QUERY( "PCH", dev, devclass, buflen, buffer );

  0002d	48 83 bc 24 b8
	01 00 00 00	 cmp	 QWORD PTR devclass$[rsp], 0
  00036	74 12		 je	 SHORT $LN2@cardpch_qu
  00038	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR devclass$[rsp]
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159137
  00047	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN2@cardpch_qu:
  0004a	48 83 bc 24 b0
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00053	74 20		 je	 SHORT $LN4@cardpch_qu
  00055	48 83 bc 24 b8
	01 00 00 00	 cmp	 QWORD PTR devclass$[rsp], 0
  0005e	74 15		 je	 SHORT $LN4@cardpch_qu
  00060	83 bc 24 c0 01
	00 00 00	 cmp	 DWORD PTR buflen$[rsp], 0
  00068	74 0b		 je	 SHORT $LN4@cardpch_qu
  0006a	48 83 bc 24 c8
	01 00 00 00	 cmp	 QWORD PTR buffer$[rsp], 0
  00073	75 05		 jne	 SHORT $LN3@cardpch_qu
$LN4@cardpch_qu:
  00075	e9 ef 01 00 00	 jmp	 $LN1@cardpch_qu
$LN3@cardpch_qu:
  0007a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00081	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  00087	c1 e8 1a	 shr	 eax, 26
  0008a	83 e0 01	 and	 eax, 1
  0008d	85 c0		 test	 eax, eax
  0008f	74 75		 je	 SHORT $LN5@cardpch_qu
  00091	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00099	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0009f	48 8b c8	 mov	 rcx, rax
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_basename
  000a8	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  000ae	48 8b d0	 mov	 rdx, rax
  000b1	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159143
  000c6	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  000ce	e8 00 00 00 00	 call	 strcmp
  000d3	85 c0		 test	 eax, eax
  000d5	75 2d		 jne	 SHORT $LN7@cardpch_qu
  000d7	b8 01 00 00 00	 mov	 eax, 1
  000dc	48 6b c0 00	 imul	 rax, rax, 0
  000e0	48 89 44 24 50	 mov	 QWORD PTR $T1[rsp], rax
  000e5	48 81 7c 24 50
	05 01 00 00	 cmp	 QWORD PTR $T1[rsp], 261	; 00000105H
  000ee	73 02		 jae	 SHORT $LN9@cardpch_qu
  000f0	eb 05		 jmp	 SHORT $LN10@cardpch_qu
$LN9@cardpch_qu:
  000f2	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN10@cardpch_qu:
  000f7	48 8b 44 24 50	 mov	 rax, QWORD PTR $T1[rsp]
  000fc	c6 84 04 80 00
	00 00 00	 mov	 BYTE PTR filename$[rsp+rax], 0
$LN7@cardpch_qu:
  00104	eb 25		 jmp	 SHORT $LN6@cardpch_qu
$LN5@cardpch_qu:
  00106	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0010e	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00114	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  0011a	48 8b d0	 mov	 rdx, rax
  0011d	48 8d 8c 24 80
	00 00 00	 lea	 rcx, QWORD PTR filename$[rsp]
  00125	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy
$LN6@cardpch_qu:

; 182  : 
; 183  :     snprintf (buffer, buflen, "%s%s%s%s%s IO[%"PRIu64"]",

  0012b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00133	8b 80 84 07 00
	00		 mov	 eax, DWORD PTR [rax+1924]
  00139	c1 e8 02	 shr	 eax, 2
  0013c	83 e0 01	 and	 eax, 1
  0013f	85 c0		 test	 eax, eax
  00141	74 0e		 je	 SHORT $LN11@cardpch_qu
  00143	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159144
  0014a	48 89 44 24 58	 mov	 QWORD PTR tv129[rsp], rax
  0014f	eb 0c		 jmp	 SHORT $LN12@cardpch_qu
$LN11@cardpch_qu:
  00151	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159145
  00158	48 89 44 24 58	 mov	 QWORD PTR tv129[rsp], rax
$LN12@cardpch_qu:
  0015d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00165	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0016b	83 e0 01	 and	 eax, 1
  0016e	85 c0		 test	 eax, eax
  00170	74 0e		 je	 SHORT $LN13@cardpch_qu
  00172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159146
  00179	48 89 44 24 60	 mov	 QWORD PTR tv134[rsp], rax
  0017e	eb 0c		 jmp	 SHORT $LN14@cardpch_qu
$LN13@cardpch_qu:
  00180	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159147
  00187	48 89 44 24 60	 mov	 QWORD PTR tv134[rsp], rax
$LN14@cardpch_qu:
  0018c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00194	8b 80 f8 06 00
	00		 mov	 eax, DWORD PTR [rax+1784]
  0019a	c1 e8 03	 shr	 eax, 3
  0019d	83 e0 01	 and	 eax, 1
  001a0	85 c0		 test	 eax, eax
  001a2	74 23		 je	 SHORT $LN15@cardpch_qu
  001a4	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001ac	8b 80 84 07 00
	00		 mov	 eax, DWORD PTR [rax+1924]
  001b2	83 e0 01	 and	 eax, 1
  001b5	85 c0		 test	 eax, eax
  001b7	74 0e		 je	 SHORT $LN15@cardpch_qu
  001b9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159148
  001c0	48 89 44 24 68	 mov	 QWORD PTR tv143[rsp], rax
  001c5	eb 0c		 jmp	 SHORT $LN16@cardpch_qu
$LN15@cardpch_qu:
  001c7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159149
  001ce	48 89 44 24 68	 mov	 QWORD PTR tv143[rsp], rax
$LN16@cardpch_qu:
  001d3	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001db	8b 80 f8 06 00
	00		 mov	 eax, DWORD PTR [rax+1784]
  001e1	c1 e8 03	 shr	 eax, 3
  001e4	83 e0 01	 and	 eax, 1
  001e7	85 c0		 test	 eax, eax
  001e9	74 0e		 je	 SHORT $LN17@cardpch_qu
  001eb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159150
  001f2	48 89 44 24 70	 mov	 QWORD PTR tv149[rsp], rax
  001f7	eb 0c		 jmp	 SHORT $LN18@cardpch_qu
$LN17@cardpch_qu:
  001f9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159151
  00200	48 89 44 24 70	 mov	 QWORD PTR tv149[rsp], rax
$LN18@cardpch_qu:
  00205	48 63 84 24 c0
	01 00 00	 movsxd	 rax, DWORD PTR buflen$[rsp]
  0020d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00215	48 8b 89 00 06
	00 00		 mov	 rcx, QWORD PTR [rcx+1536]
  0021c	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00221	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv129[rsp]
  00226	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0022b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv134[rsp]
  00230	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00235	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv143[rsp]
  0023a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0023f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv149[rsp]
  00244	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00249	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR filename$[rsp]
  00251	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159152
  00258	48 8b d0	 mov	 rdx, rax
  0025b	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR buffer$[rsp]
  00263	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf
$LN1@cardpch_qu:
$LN8@cardpch_qu:

; 184  :                 filename,
; 185  :                 (dev->ascii                ? " ascii"     : " ebcdic"),
; 186  :                 ((dev->ascii && dev->crlf) ? " crlf"      : ""),
; 187  :                 (dev->append               ? " append"    : ""),
; 188  :                 (dev->stopdev              ? " (stopped)" : ""),
; 189  :                 dev->excps );
; 190  : 
; 191  : } /* end function cardpch_query_device */

  00269	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00271	48 33 cc	 xor	 rcx, rsp
  00274	e8 00 00 00 00	 call	 __security_check_cookie
  00279	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00280	c3		 ret	 0
cardpch_query_device ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cardpch.c
_TEXT	SEGMENT
i$ = 96
tv81 = 100
tv87 = 104
tv142 = 108
tv148 = 112
tv287 = 116
tv293 = 120
tv313 = 124
tv319 = 128
tv304 = 132
tv136 = 136
tv306 = 144
dev$ = 176
argc$ = 184
argv$ = 192
cardpch_init_handler PROC

; 56   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 57   : int     i;                              /* Array subscript           */
; 58   : 
; 59   :     /* Close the existing file, if any */
; 60   :     if (dev->fd >= 0)

  00015	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0001d	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00024	7c 62		 jl	 SHORT $LN5@cardpch_in

; 61   :     {
; 62   :         (dev->hnd->close)( dev );

  00026	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0002e	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  00035	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0003d	ff 50 10	 call	 QWORD PTR [rax+16]

; 63   : 
; 64   :         release_lock( &dev->lock );

  00040	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00048	48 83 c0 38	 add	 rax, 56			; 00000038H
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159087
  00053	48 8b c8	 mov	 rcx, rax
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 65   :         device_attention( dev, CSW_DE );

  0005c	b2 04		 mov	 dl, 4
  0005e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_device_attention

; 66   :         obtain_lock( &dev->lock );

  0006c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00074	48 83 c0 38	 add	 rax, 56			; 00000038H
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159088
  0007f	48 8b c8	 mov	 rcx, rax
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock
$LN5@cardpch_in:

; 67   :     }
; 68   : 
; 69   :     /* The first argument is the file name */
; 70   :     if (argc == 0)

  00088	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR argc$[rsp], 0
  00090	0f 85 ad 00 00
	00		 jne	 $LN6@cardpch_in

; 71   :     {
; 72   :         // "%1d:%04X Card: filename is missing"
; 73   :         WRMSG( HHC01208, "E", LCSS_DEVNUM );

  00096	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0009f	74 12		 je	 SHORT $LN18@cardpch_in
  000a1	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a9	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  000ad	89 44 24 64	 mov	 DWORD PTR tv81[rsp], eax
  000b1	eb 08		 jmp	 SHORT $LN19@cardpch_in
$LN18@cardpch_in:
  000b3	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN19@cardpch_in:
  000bb	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000c4	74 14		 je	 SHORT $LN20@cardpch_in
  000c6	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ce	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000d2	d1 f8		 sar	 eax, 1
  000d4	89 44 24 68	 mov	 DWORD PTR tv87[rsp], eax
  000d8	eb 08		 jmp	 SHORT $LN21@cardpch_in
$LN20@cardpch_in:
  000da	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
$LN21@cardpch_in:
  000e2	b9 01 00 00 00	 mov	 ecx, 1
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ed	8b 4c 24 64	 mov	 ecx, DWORD PTR tv81[rsp]
  000f1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000f5	8b 4c 24 68	 mov	 ecx, DWORD PTR tv87[rsp]
  000f9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159090
  00104	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159091
  00110	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00115	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0011a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00120	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159092
  00127	ba 49 00 00 00	 mov	 edx, 73			; 00000049H
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159093
  00133	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 74   :         return -1;

  00139	b8 ff ff ff ff	 mov	 eax, -1
  0013e	e9 cf 06 00 00	 jmp	 $LN1@cardpch_in
$LN6@cardpch_in:

; 75   :     }
; 76   : 
; 77   :     if (strlen( argv[0] ) >= sizeof( dev->filename ))

  00143	b8 08 00 00 00	 mov	 eax, 8
  00148	48 6b c0 00	 imul	 rax, rax, 0
  0014c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00154	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  00158	e8 00 00 00 00	 call	 strlen
  0015d	48 3d 05 01 00
	00		 cmp	 rax, 261		; 00000105H
  00163	0f 82 df 00 00
	00		 jb	 $LN7@cardpch_in

; 78   :     {
; 79   :         // "%1d:%04X Card: filename %s too long, maximum length is %d"
; 80   :         WRMSG( HHC01201, "E", LCSS_DEVNUM, argv[0], (int) sizeof( dev->filename ) - 1 );

  00169	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00172	74 12		 je	 SHORT $LN22@cardpch_in
  00174	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0017c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00180	89 44 24 6c	 mov	 DWORD PTR tv142[rsp], eax
  00184	eb 08		 jmp	 SHORT $LN23@cardpch_in
$LN22@cardpch_in:
  00186	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN23@cardpch_in:
  0018e	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00197	74 14		 je	 SHORT $LN24@cardpch_in
  00199	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001a1	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  001a5	d1 f8		 sar	 eax, 1
  001a7	89 44 24 70	 mov	 DWORD PTR tv148[rsp], eax
  001ab	eb 08		 jmp	 SHORT $LN25@cardpch_in
$LN24@cardpch_in:
  001ad	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
$LN25@cardpch_in:
  001b5	b8 08 00 00 00	 mov	 eax, 8
  001ba	48 6b c0 00	 imul	 rax, rax, 0
  001be	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv136[rsp], rax
  001c6	b9 01 00 00 00	 mov	 ecx, 1
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001d1	c7 44 24 50 04
	01 00 00	 mov	 DWORD PTR [rsp+80], 260	; 00000104H
  001d9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001e1	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR tv136[rsp]
  001e9	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  001ed	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001f2	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv142[rsp]
  001f6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001fa	8b 4c 24 70	 mov	 ecx, DWORD PTR tv148[rsp]
  001fe	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00202	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159095
  00209	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0020e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159096
  00215	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0021a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0021f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00225	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159097
  0022c	ba 50 00 00 00	 mov	 edx, 80			; 00000050H
  00231	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159098
  00238	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 81   :         return -1;

  0023e	b8 ff ff ff ff	 mov	 eax, -1
  00243	e9 ca 05 00 00	 jmp	 $LN1@cardpch_in
$LN7@cardpch_in:

; 82   :     }
; 83   : 
; 84   :     /* Save the file name in the device block */
; 85   :     hostpath( dev->filename, argv[0], sizeof( dev->filename ));

  00248	b8 08 00 00 00	 mov	 eax, 8
  0024d	48 6b c0 00	 imul	 rax, rax, 0
  00251	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00259	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00260	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00266	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  0026e	48 8b 14 02	 mov	 rdx, QWORD PTR [rdx+rax]
  00272	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 86   : 
; 87   :     /* Initialize the device type */
; 88   :     if (!sscanf( dev->typname, "%hx", &dev->devtype ))

  00278	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00280	48 83 c0 4a	 add	 rax, 74			; 0000004aH
  00284	4c 8b c0	 mov	 r8, rax
  00287	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159100
  0028e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00296	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  0029a	e8 00 00 00 00	 call	 sscanf
  0029f	85 c0		 test	 eax, eax
  002a1	75 11		 jne	 SHORT $LN8@cardpch_in

; 89   :         dev->devtype = 0x3525;

  002a3	b8 25 35 00 00	 mov	 eax, 13605		; 00003525H
  002a8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002b0	66 89 41 4a	 mov	 WORD PTR [rcx+74], ax
$LN8@cardpch_in:

; 90   : 
; 91   :     /* Initialize the device identifier bytes */
; 92   :     dev->devid[0] = 0xFF;

  002b4	b8 01 00 00 00	 mov	 eax, 1
  002b9	48 6b c0 00	 imul	 rax, rax, 0
  002bd	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002c5	c6 84 01 68 04
	00 00 ff	 mov	 BYTE PTR [rcx+rax+1128], 255 ; 000000ffH

; 93   :     if (0x3525 == dev->devtype)

  002cd	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002d5	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  002d9	3d 25 35 00 00	 cmp	 eax, 13605		; 00003525H
  002de	75 34		 jne	 SHORT $LN9@cardpch_in

; 94   :     {
; 95   :         dev->devid[1] = 0x35;

  002e0	b8 01 00 00 00	 mov	 eax, 1
  002e5	48 6b c0 01	 imul	 rax, rax, 1
  002e9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002f1	c6 84 01 68 04
	00 00 35	 mov	 BYTE PTR [rcx+rax+1128], 53 ; 00000035H

; 96   :         dev->devid[2] = 0x05;

  002f9	b8 01 00 00 00	 mov	 eax, 1
  002fe	48 6b c0 02	 imul	 rax, rax, 2
  00302	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0030a	c6 84 01 68 04
	00 00 05	 mov	 BYTE PTR [rcx+rax+1128], 5

; 97   :     }

  00312	eb 32		 jmp	 SHORT $LN10@cardpch_in
$LN9@cardpch_in:

; 98   :     else
; 99   :     {
; 100  :         dev->devid[1] = 0x28; /* Control unit type is 2821-1 */

  00314	b8 01 00 00 00	 mov	 eax, 1
  00319	48 6b c0 01	 imul	 rax, rax, 1
  0031d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00325	c6 84 01 68 04
	00 00 28	 mov	 BYTE PTR [rcx+rax+1128], 40 ; 00000028H

; 101  :         dev->devid[2] = 0x21;

  0032d	b8 01 00 00 00	 mov	 eax, 1
  00332	48 6b c0 02	 imul	 rax, rax, 2
  00336	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0033e	c6 84 01 68 04
	00 00 21	 mov	 BYTE PTR [rcx+rax+1128], 33 ; 00000021H
$LN10@cardpch_in:

; 102  :     }
; 103  :     dev->devid[3] = 0x01;

  00346	b8 01 00 00 00	 mov	 eax, 1
  0034b	48 6b c0 03	 imul	 rax, rax, 3
  0034f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00357	c6 84 01 68 04
	00 00 01	 mov	 BYTE PTR [rcx+rax+1128], 1

; 104  :     dev->devid[4] = dev->devtype >> 8;

  0035f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00367	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  0036b	c1 f8 08	 sar	 eax, 8
  0036e	b9 01 00 00 00	 mov	 ecx, 1
  00373	48 6b c9 04	 imul	 rcx, rcx, 4
  00377	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0037f	88 84 0a 68 04
	00 00		 mov	 BYTE PTR [rdx+rcx+1128], al

; 105  :     dev->devid[5] = dev->devtype & 0xFF;

  00386	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0038e	0f b7 40 4a	 movzx	 eax, WORD PTR [rax+74]
  00392	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00397	b9 01 00 00 00	 mov	 ecx, 1
  0039c	48 6b c9 05	 imul	 rcx, rcx, 5
  003a0	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  003a8	88 84 0a 68 04
	00 00		 mov	 BYTE PTR [rdx+rcx+1128], al

; 106  :     dev->devid[6] = 0x01;

  003af	b8 01 00 00 00	 mov	 eax, 1
  003b4	48 6b c0 06	 imul	 rax, rax, 6
  003b8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003c0	c6 84 01 68 04
	00 00 01	 mov	 BYTE PTR [rcx+rax+1128], 1

; 107  :     dev->numdevid = 7;

  003c8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003d0	c7 80 64 04 00
	00 07 00 00 00	 mov	 DWORD PTR [rax+1124], 7

; 108  : 
; 109  :     /* Set number of sense bytes */
; 110  :     dev->numsense = 1;

  003da	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003e2	c7 80 60 03 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+864], 1

; 111  : 
; 112  :     /* Set length of buffer */
; 113  :     dev->bufsize = CARD_LENGTH + 2;

  003ec	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003f4	c7 80 d8 01 00
	00 52 00 00 00	 mov	 DWORD PTR [rax+472], 82	; 00000052H

; 114  : 
; 115  :     /* Initialize device dependent fields */
; 116  :     dev->fd      = -1;

  003fe	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00406	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 117  :     dev->append  = 0;

  00410	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00418	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0041e	83 e0 fe	 and	 eax, -2			; fffffffeH
  00421	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00429	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 118  :     dev->ascii   = 0;

  0042f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00437	8b 80 f8 06 00
	00		 mov	 eax, DWORD PTR [rax+1784]
  0043d	83 e0 f7	 and	 eax, -9			; fffffff7H
  00440	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00448	89 81 f8 06 00
	00		 mov	 DWORD PTR [rcx+1784], eax

; 119  :     dev->cardpos = 0;

  0044e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00456	c7 80 f0 06 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+1776], 0

; 120  :     dev->cardrem = CARD_LENGTH;

  00460	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00468	c7 80 f4 06 00
	00 50 00 00 00	 mov	 DWORD PTR [rax+1780], 80 ; 00000050H

; 121  :     dev->crlf    = 0;

  00472	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0047a	8b 80 84 07 00
	00		 mov	 eax, DWORD PTR [rax+1924]
  00480	83 e0 fe	 and	 eax, -2			; fffffffeH
  00483	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0048b	89 81 84 07 00
	00		 mov	 DWORD PTR [rcx+1924], eax

; 122  :     dev->excps   = 0;

  00491	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00499	48 c7 80 00 06
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1536], 0

; 123  :     dev->stopdev = FALSE;

  004a4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004ac	8b 80 84 07 00
	00		 mov	 eax, DWORD PTR [rax+1924]
  004b2	83 e0 fb	 and	 eax, -5			; fffffffbH
  004b5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  004bd	89 81 84 07 00
	00		 mov	 DWORD PTR [rcx+1924], eax

; 124  : 
; 125  :     /* Process the driver arguments */
; 126  :     for (i=1; i < argc; i++)

  004c3	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  004cb	eb 0a		 jmp	 SHORT $LN4@cardpch_in
$LN2@cardpch_in:
  004cd	8b 44 24 60	 mov	 eax, DWORD PTR i$[rsp]
  004d1	ff c0		 inc	 eax
  004d3	89 44 24 60	 mov	 DWORD PTR i$[rsp], eax
$LN4@cardpch_in:
  004d7	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  004de	39 44 24 60	 cmp	 DWORD PTR i$[rsp], eax
  004e2	0f 8d 10 03 00
	00		 jge	 $LN3@cardpch_in

; 127  :     {
; 128  :         if (strcasecmp( argv[i], "append" ) == 0)

  004e8	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  004ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159104
  004f4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  004fc	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00500	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00506	85 c0		 test	 eax, eax
  00508	75 21		 jne	 SHORT $LN11@cardpch_in

; 129  :         {
; 130  :             dev->append = 1;

  0050a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00512	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00518	83 c8 01	 or	 eax, 1
  0051b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00523	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 131  :             continue;

  00529	eb a2		 jmp	 SHORT $LN2@cardpch_in
$LN11@cardpch_in:

; 132  :         }
; 133  : 
; 134  :         if (strcasecmp( argv[i], "ascii" ) == 0)

  0052b	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00530	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159106
  00537	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0053f	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00543	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00549	85 c0		 test	 eax, eax
  0054b	75 24		 jne	 SHORT $LN12@cardpch_in

; 135  :         {
; 136  :             dev->ascii = 1;

  0054d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00555	8b 80 f8 06 00
	00		 mov	 eax, DWORD PTR [rax+1784]
  0055b	83 c8 08	 or	 eax, 8
  0055e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00566	89 81 f8 06 00
	00		 mov	 DWORD PTR [rcx+1784], eax

; 137  :             continue;

  0056c	e9 5c ff ff ff	 jmp	 $LN2@cardpch_in
$LN12@cardpch_in:

; 138  :         }
; 139  : 
; 140  :         if (strcasecmp( argv[i], "crlf" ) == 0)

  00571	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00576	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159108
  0057d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00585	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00589	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0058f	85 c0		 test	 eax, eax
  00591	75 24		 jne	 SHORT $LN13@cardpch_in

; 141  :         {
; 142  :             dev->crlf = 1;

  00593	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0059b	8b 80 84 07 00
	00		 mov	 eax, DWORD PTR [rax+1924]
  005a1	83 c8 01	 or	 eax, 1
  005a4	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  005ac	89 81 84 07 00
	00		 mov	 DWORD PTR [rcx+1924], eax

; 143  :             continue;

  005b2	e9 16 ff ff ff	 jmp	 $LN2@cardpch_in
$LN13@cardpch_in:

; 144  :         }
; 145  : 
; 146  :         if (strcasecmp( argv[i], "ebcdic" ) == 0)

  005b7	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  005bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159110
  005c3	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  005cb	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  005cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  005d5	85 c0		 test	 eax, eax
  005d7	75 24		 jne	 SHORT $LN14@cardpch_in

; 147  :         {
; 148  :             dev->ascii = 0;

  005d9	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005e1	8b 80 f8 06 00
	00		 mov	 eax, DWORD PTR [rax+1784]
  005e7	83 e0 f7	 and	 eax, -9			; fffffff7H
  005ea	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  005f2	89 81 f8 06 00
	00		 mov	 DWORD PTR [rcx+1784], eax

; 149  :             continue;

  005f8	e9 d0 fe ff ff	 jmp	 $LN2@cardpch_in
$LN14@cardpch_in:

; 150  :         }
; 151  : 
; 152  :         if (strcasecmp( argv[i], "noclear" ) == 0)

  005fd	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$[rsp]
  00602	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159112
  00609	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00611	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00615	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0061b	85 c0		 test	 eax, eax
  0061d	0f 85 df 00 00
	00		 jne	 $LN15@cardpch_in

; 153  :         {
; 154  :             dev->append = 1;

  00623	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0062b	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00631	83 c8 01	 or	 eax, 1
  00634	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0063c	89 81 f8 05 00
	00		 mov	 DWORD PTR [rcx+1528], eax

; 155  :             // "%1d:%04X %s: option '%s' has been deprecated"
; 156  :             WRMSG( HHC01251, "W", LCSS_DEVNUM,

  00642	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0064b	74 12		 je	 SHORT $LN26@cardpch_in
  0064d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00655	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00659	89 44 24 74	 mov	 DWORD PTR tv287[rsp], eax
  0065d	eb 08		 jmp	 SHORT $LN27@cardpch_in
$LN26@cardpch_in:
  0065f	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv287[rsp], 0
$LN27@cardpch_in:
  00667	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00670	74 14		 je	 SHORT $LN28@cardpch_in
  00672	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0067a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0067e	d1 f8		 sar	 eax, 1
  00680	89 44 24 78	 mov	 DWORD PTR tv293[rsp], eax
  00684	eb 08		 jmp	 SHORT $LN29@cardpch_in
$LN28@cardpch_in:
  00686	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv293[rsp], 0
$LN29@cardpch_in:
  0068e	b9 01 00 00 00	 mov	 ecx, 1
  00693	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00699	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159113
  006a0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  006a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159114
  006ac	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  006b1	8b 4c 24 74	 mov	 ecx, DWORD PTR tv287[rsp]
  006b5	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  006b9	8b 4c 24 78	 mov	 ecx, DWORD PTR tv293[rsp]
  006bd	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  006c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159115
  006c8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  006cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159116
  006d4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006d9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006de	41 b9 03 00 00
	00		 mov	 r9d, 3
  006e4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159117
  006eb	ba 9d 00 00 00	 mov	 edx, 157		; 0000009dH
  006f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159118
  006f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 157  :                 "Card", "noclear" );
; 158  :             continue;

  006fd	e9 cb fd ff ff	 jmp	 $LN2@cardpch_in
$LN15@cardpch_in:

; 159  :         }
; 160  : 
; 161  :         // "%1d:%04X Card: parameter %s in argument %d is invalid"
; 162  :         WRMSG( HHC01209, "E", LCSS_DEVNUM, argv[i], i+1 );

  00702	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0070b	74 12		 je	 SHORT $LN30@cardpch_in
  0070d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00715	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00719	89 44 24 7c	 mov	 DWORD PTR tv313[rsp], eax
  0071d	eb 08		 jmp	 SHORT $LN31@cardpch_in
$LN30@cardpch_in:
  0071f	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv313[rsp], 0
$LN31@cardpch_in:
  00727	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00730	74 17		 je	 SHORT $LN32@cardpch_in
  00732	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0073a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0073e	d1 f8		 sar	 eax, 1
  00740	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv319[rsp], eax
  00747	eb 0b		 jmp	 SHORT $LN33@cardpch_in
$LN32@cardpch_in:
  00749	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv319[rsp], 0
$LN33@cardpch_in:
  00754	8b 44 24 60	 mov	 eax, DWORD PTR i$[rsp]
  00758	ff c0		 inc	 eax
  0075a	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv304[rsp], eax
  00761	48 63 4c 24 60	 movsxd	 rcx, DWORD PTR i$[rsp]
  00766	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv306[rsp], rcx
  0076e	b9 01 00 00 00	 mov	 ecx, 1
  00773	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00779	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv304[rsp]
  00780	89 4c 24 50	 mov	 DWORD PTR [rsp+80], ecx
  00784	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0078c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv306[rsp]
  00794	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00798	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0079d	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv313[rsp]
  007a1	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  007a5	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv319[rsp]
  007ac	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  007b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159119
  007b7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  007bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159120
  007c3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  007c8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  007cd	41 b9 03 00 00
	00		 mov	 r9d, 3
  007d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159121
  007da	ba a2 00 00 00	 mov	 edx, 162		; 000000a2H
  007df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159122
  007e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 163  :         return -1;

  007ec	b8 ff ff ff ff	 mov	 eax, -1
  007f1	eb 1f		 jmp	 SHORT $LN1@cardpch_in

; 164  :     }

  007f3	e9 d5 fc ff ff	 jmp	 $LN2@cardpch_in
$LN3@cardpch_in:

; 165  : 
; 166  :     /* Open the device file right away */
; 167  :     if (open_punch( dev ) != 0)

  007f8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00800	e8 00 00 00 00	 call	 open_punch
  00805	85 c0		 test	 eax, eax
  00807	74 07		 je	 SHORT $LN16@cardpch_in

; 168  :         return -1;  // (error msg already issued)

  00809	b8 ff ff ff ff	 mov	 eax, -1
  0080e	eb 02		 jmp	 SHORT $LN1@cardpch_in
$LN16@cardpch_in:

; 169  : 
; 170  :     return 0;

  00810	33 c0		 xor	 eax, eax
$LN1@cardpch_in:

; 171  : } /* end function cardpch_init_handler */

  00812	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00819	c3		 ret	 0
cardpch_init_handler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cardpch.c
_TEXT	SEGMENT
open_flags$ = 96
tv69 = 100
tv84 = 104
tv90 = 108
tv151 = 112
tv157 = 116
rc$ = 120
filesize$ = 128
tv75 = 136
tv142 = 144
dev$ = 176
open_punch PROC

; 197  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 198  : int             rc;                     /* Return code               */
; 199  : int             open_flags;             /* File open flags           */
; 200  : off_t           filesize = 0;           /* file size for ftruncate   */

  0000c	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR filesize$[rsp], 0

; 201  : 
; 202  :     open_flags = O_WRONLY | O_CREAT /* | O_SYNC */ |  O_BINARY;

  00018	c7 44 24 60 01
	81 00 00	 mov	 DWORD PTR open_flags$[rsp], 33025 ; 00008101H

; 203  : 
; 204  :     if (!dev->append)

  00020	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00028	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0002e	83 e0 01	 and	 eax, 1
  00031	85 c0		 test	 eax, eax
  00033	75 0c		 jne	 SHORT $LN5@open_punch

; 205  :         open_flags |= O_TRUNC;

  00035	8b 44 24 60	 mov	 eax, DWORD PTR open_flags$[rsp]
  00039	0f ba e8 09	 bts	 eax, 9
  0003d	89 44 24 60	 mov	 DWORD PTR open_flags$[rsp], eax
$LN5@open_punch:

; 206  : 
; 207  :     if ((dev->fd = HOPEN( dev->filename, open_flags, S_IRUSR | S_IWUSR | S_IRGRP )) < 0)

  00041	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00049	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0004f	41 b8 80 01 00
	00		 mov	 r8d, 384		; 00000180H
  00055	8b 54 24 60	 mov	 edx, DWORD PTR open_flags$[rsp]
  00059	48 8b c8	 mov	 rcx, rax
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  00062	89 44 24 64	 mov	 DWORD PTR tv69[rsp], eax
  00066	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0006e	8b 4c 24 64	 mov	 ecx, DWORD PTR tv69[rsp]
  00072	89 88 ac 01 00
	00		 mov	 DWORD PTR [rax+428], ecx
  00078	83 7c 24 64 00	 cmp	 DWORD PTR tv69[rsp], 0
  0007d	0f 8d e8 00 00
	00		 jge	 $LN6@open_punch

; 208  :     {
; 209  :         // "%1d:%04X %s: error in function %s: %s"
; 210  :         WRMSG( HHC01250, "E", LCSS_DEVNUM,

  00083	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0008c	74 12		 je	 SHORT $LN10@open_punch
  0008e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00096	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0009a	89 44 24 68	 mov	 DWORD PTR tv84[rsp], eax
  0009e	eb 08		 jmp	 SHORT $LN11@open_punch
$LN10@open_punch:
  000a0	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
$LN11@open_punch:
  000a8	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000b1	74 14		 je	 SHORT $LN12@open_punch
  000b3	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000bb	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000bf	d1 f8		 sar	 eax, 1
  000c1	89 44 24 6c	 mov	 DWORD PTR tv90[rsp], eax
  000c5	eb 08		 jmp	 SHORT $LN13@open_punch
$LN12@open_punch:
  000c7	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv90[rsp], 0
$LN13@open_punch:
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000d5	8b 08		 mov	 ecx, DWORD PTR [rax]
  000d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000dd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv75[rsp], rax
  000e5	b9 01 00 00 00	 mov	 ecx, 1
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv75[rsp]
  000f8	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159164
  00104	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159165
  00110	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00115	8b 4c 24 68	 mov	 ecx, DWORD PTR tv84[rsp]
  00119	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0011d	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv90[rsp]
  00121	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159166
  0012c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159167
  00138	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00142	41 b9 03 00 00
	00		 mov	 r9d, 3
  00148	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159168
  0014f	ba d3 00 00 00	 mov	 edx, 211		; 000000d3H
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159169
  0015b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 211  :             "Card", "HOPEN()", strerror( errno ));
; 212  :         return -1;

  00161	b8 ff ff ff ff	 mov	 eax, -1
  00166	e9 5a 01 00 00	 jmp	 $LN1@open_punch
$LN6@open_punch:

; 213  :     }
; 214  : 
; 215  :     if (dev->append)

  0016b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00173	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00179	83 e0 01	 and	 eax, 1
  0017c	85 c0		 test	 eax, eax
  0017e	0f 84 18 01 00
	00		 je	 $LN7@open_punch

; 216  :     {
; 217  :         if ((filesize = lseek( dev->fd, 0, SEEK_END )) < 0)

  00184	41 b8 02 00 00
	00		 mov	 r8d, 2
  0018a	33 d2		 xor	 edx, edx
  0018c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00194	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  001a0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR filesize$[rsp], rax
  001a8	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR filesize$[rsp], 0
  001b1	0f 8d e5 00 00
	00		 jge	 $LN8@open_punch

; 218  :         {
; 219  :             // "%1d:%04X %s: error in function %s: %s"
; 220  :             WRMSG( HHC01250, "E", LCSS_DEVNUM,

  001b7	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001c0	74 12		 je	 SHORT $LN14@open_punch
  001c2	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001ca	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001ce	89 44 24 70	 mov	 DWORD PTR tv151[rsp], eax
  001d2	eb 08		 jmp	 SHORT $LN15@open_punch
$LN14@open_punch:
  001d4	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv151[rsp], 0
$LN15@open_punch:
  001dc	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001e5	74 14		 je	 SHORT $LN16@open_punch
  001e7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001ef	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  001f3	d1 f8		 sar	 eax, 1
  001f5	89 44 24 74	 mov	 DWORD PTR tv157[rsp], eax
  001f9	eb 08		 jmp	 SHORT $LN17@open_punch
$LN16@open_punch:
  001fb	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN17@open_punch:
  00203	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00209	8b 08		 mov	 ecx, DWORD PTR [rax]
  0020b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00211	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv142[rsp], rax
  00219	b9 01 00 00 00	 mov	 ecx, 1
  0021e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00224	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv142[rsp]
  0022c	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00231	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159172
  00238	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159173
  00244	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00249	8b 4c 24 70	 mov	 ecx, DWORD PTR tv151[rsp]
  0024d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00251	8b 4c 24 74	 mov	 ecx, DWORD PTR tv157[rsp]
  00255	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159174
  00260	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159175
  0026c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00271	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00276	41 b9 03 00 00
	00		 mov	 r9d, 3
  0027c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159176
  00283	ba dd 00 00 00	 mov	 edx, 221		; 000000ddH
  00288	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159177
  0028f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 221  :                 "Card", "lseek()", strerror( errno ));
; 222  :             return -1;

  00295	b8 ff ff ff ff	 mov	 eax, -1
  0029a	eb 29		 jmp	 SHORT $LN1@open_punch
$LN8@open_punch:
$LN7@open_punch:
$LN4@open_punch:

; 223  :         }
; 224  :     }
; 225  : 
; 226  :     /* Set new physical EOF */
; 227  :     do rc = ftruncate( dev->fd, filesize );

  0029c	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR filesize$[rsp]
  002a4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002ac	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  002b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__chsize_s
  002b8	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 228  :     while (EINTR == rc);

  002bc	83 7c 24 78 04	 cmp	 DWORD PTR rc$[rsp], 4
  002c1	74 d9		 je	 SHORT $LN4@open_punch

; 229  : 
; 230  :     return 0;

  002c3	33 c0		 xor	 eax, eax
$LN1@open_punch:

; 231  : }

  002c5	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  002cc	c3		 ret	 0
open_punch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cardpch.c
_TEXT	SEGMENT
tv82 = 96
tv88 = 100
rc$ = 104
tv75 = 112
dev$ = 144
buf$ = 152
len$ = 160
unitstat$ = 168
write_buffer PROC

; 29   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 30   : int             rc;                     /* Return code               */
; 31   : 
; 32   :     /* Write data to the output file */
; 33   :     rc = write (dev->fd, buf, len);

  0001b	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR len$[rsp]
  00023	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  0002b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00033	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0003f	89 44 24 68	 mov	 DWORD PTR rc$[rsp], eax

; 34   : 
; 35   :     /* Equipment check if error writing to output file */
; 36   :     if (rc < len)

  00043	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR len$[rsp]
  0004a	39 44 24 68	 cmp	 DWORD PTR rc$[rsp], eax
  0004e	0f 8d 15 01 00
	00		 jge	 $LN2@write_buff

; 37   :     {
; 38   :         // "%1d:%04X %s: error in function %s: %s"
; 39   :         WRMSG( HHC01250, "E", LCSS_DEVNUM,

  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0005a	83 38 00	 cmp	 DWORD PTR [rax], 0
  0005d	75 0e		 jne	 SHORT $LN4@write_buff
  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159063
  00066	48 89 44 24 70	 mov	 QWORD PTR tv75[rsp], rax
  0006b	eb 13		 jmp	 SHORT $LN5@write_buff
$LN4@write_buff:
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00073	8b 08		 mov	 ecx, DWORD PTR [rax]
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0007b	48 89 44 24 70	 mov	 QWORD PTR tv75[rsp], rax
$LN5@write_buff:
  00080	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00089	74 12		 je	 SHORT $LN6@write_buff
  0008b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00093	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00097	89 44 24 60	 mov	 DWORD PTR tv82[rsp], eax
  0009b	eb 08		 jmp	 SHORT $LN7@write_buff
$LN6@write_buff:
  0009d	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
$LN7@write_buff:
  000a5	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000ae	74 14		 je	 SHORT $LN8@write_buff
  000b0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000b8	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000bc	d1 f8		 sar	 eax, 1
  000be	89 44 24 64	 mov	 DWORD PTR tv88[rsp], eax
  000c2	eb 08		 jmp	 SHORT $LN9@write_buff
$LN8@write_buff:
  000c4	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN9@write_buff:
  000cc	b9 01 00 00 00	 mov	 ecx, 1
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv75[rsp]
  000dc	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159064
  000e8	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159065
  000f4	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000f9	8b 4c 24 60	 mov	 ecx, DWORD PTR tv82[rsp]
  000fd	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00101	8b 4c 24 64	 mov	 ecx, DWORD PTR tv88[rsp]
  00105	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159066
  00110	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159067
  0011c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00121	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00126	41 b9 03 00 00
	00		 mov	 r9d, 3
  0012c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159068
  00133	ba 29 00 00 00	 mov	 edx, 41			; 00000029H
  00138	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159069
  0013f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 40   :                "Card", "write()", errno == 0 ? "incomplete"
; 41   :                                              : strerror( errno ));
; 42   :         dev->sense[0] = SENSE_EC;

  00145	b8 01 00 00 00	 mov	 eax, 1
  0014a	48 6b c0 00	 imul	 rax, rax, 0
  0014e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00156	c6 84 01 64 03
	00 00 10	 mov	 BYTE PTR [rcx+rax+868], 16

; 43   :         *unitstat = CSW_CE | CSW_DE | CSW_UC;

  0015e	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR unitstat$[rsp]
  00166	c6 00 0e	 mov	 BYTE PTR [rax], 14
$LN2@write_buff:

; 44   :         return;
; 45   :     }
; 46   : 
; 47   : } /* end function write_buffer */

  00169	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00170	c3		 ret	 0
write_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
END
