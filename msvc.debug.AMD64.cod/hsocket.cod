; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
?nodelay@?1??disable_nagle@@9@9 DD 01H			; `disable_nagle'::`2'::nodelay
CONST	ENDS
PUBLIC	read_socket
PUBLIC	write_socket
PUBLIC	disable_nagle
EXTRN	__imp_recv:PROC
EXTRN	__imp_send:PROC
EXTRN	__imp_setsockopt:PROC
pdata	SEGMENT
$pdata$read_socket DD imagerel $LN8
	DD	imagerel $LN8+154
	DD	imagerel $unwind$read_socket
$pdata$write_socket DD imagerel $LN6
	DD	imagerel $LN6+143
	DD	imagerel $unwind$write_socket
$pdata$disable_nagle DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$disable_nagle
pdata	ENDS
xdata	SEGMENT
$unwind$read_socket DD 011201H
	DD	06212H
$unwind$write_socket DD 011201H
	DD	06212H
$unwind$disable_nagle DD 010801H
	DD	08208H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsocket.c
_TEXT	SEGMENT
rc$ = 48
fd$ = 80
disable_nagle PROC

; 149  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 150  : static const int nodelay = 1;
; 151  : 
; 152  :     int rc = setsockopt

  00008	48 63 44 24 50	 movsxd	 rax, DWORD PTR fd$[rsp]
  0000d	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00015	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?nodelay@?1??disable_nagle@@9@9
  0001c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00022	ba 06 00 00 00	 mov	 edx, 6
  00027	48 8b c8	 mov	 rcx, rax
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setsockopt
  00030	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax

; 153  :     (
; 154  :         fd,                 /* socket affected          */
; 155  :         IPPROTO_TCP,        /* set option at TCP level  */
; 156  :         TCP_NODELAY,        /* the name of the option   */
; 157  :         (char*)&nodelay,    /* pointer to option value  */
; 158  :         sizeof(nodelay)     /* length of option value   */
; 159  :     );
; 160  :     return rc;

  00034	8b 44 24 30	 mov	 eax, DWORD PTR rc$[rsp]

; 161  : 
; 162  : } /* end of disable_nagle */

  00038	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0003c	c3		 ret	 0
disable_nagle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsocket.c
_TEXT	SEGMENT
nleft$ = 32
nwritten$ = 36
ptr$ = 40
fd$ = 64
_ptr$ = 72
nbytes$ = 80
write_socket PROC

; 109  : {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 110  : const char *ptr;
; 111  : int  nleft, nwritten;
; 112  : 
; 113  :     ptr   = _ptr;               /* point to data to be written       */

  00012	48 8b 44 24 48	 mov	 rax, QWORD PTR _ptr$[rsp]
  00017	48 89 44 24 28	 mov	 QWORD PTR ptr$[rsp], rax

; 114  :     nleft = nbytes;             /* number of bytes to be written     */

  0001c	8b 44 24 50	 mov	 eax, DWORD PTR nbytes$[rsp]
  00020	89 44 24 20	 mov	 DWORD PTR nleft$[rsp], eax
$LN2@write_sock:

; 115  : 
; 116  :     while (nleft > 0)           /* while bytes remain to be written  */

  00024	83 7c 24 20 00	 cmp	 DWORD PTR nleft$[rsp], 0
  00029	7e 53		 jle	 SHORT $LN3@write_sock

; 117  :     {
; 118  : #ifdef _MSVC_
; 119  :         nwritten = send( fd, ptr, nleft, 0 );

  0002b	48 63 44 24 40	 movsxd	 rax, DWORD PTR fd$[rsp]
  00030	45 33 c9	 xor	 r9d, r9d
  00033	44 8b 44 24 20	 mov	 r8d, DWORD PTR nleft$[rsp]
  00038	48 8b 54 24 28	 mov	 rdx, QWORD PTR ptr$[rsp]
  0003d	48 8b c8	 mov	 rcx, rax
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_send
  00046	89 44 24 24	 mov	 DWORD PTR nwritten$[rsp], eax

; 120  : #else
; 121  :         nwritten = write( fd, ptr, nleft );
; 122  : #endif
; 123  :         if (nwritten <= 0)

  0004a	83 7c 24 24 00	 cmp	 DWORD PTR nwritten$[rsp], 0
  0004f	7f 06		 jg	 SHORT $LN4@write_sock

; 124  :             return nwritten;    /* error, return <= 0 */

  00051	8b 44 24 24	 mov	 eax, DWORD PTR nwritten$[rsp]
  00055	eb 33		 jmp	 SHORT $LN1@write_sock
$LN4@write_sock:

; 125  : 
; 126  :         ptr   += nwritten;      /* bump to next o/p buffer location  */

  00057	48 63 44 24 24	 movsxd	 rax, DWORD PTR nwritten$[rsp]
  0005c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ptr$[rsp]
  00061	48 03 c8	 add	 rcx, rax
  00064	48 8b c1	 mov	 rax, rcx
  00067	48 89 44 24 28	 mov	 QWORD PTR ptr$[rsp], rax

; 127  :         nleft -= nwritten;      /* fix remaining bytes to be written */

  0006c	8b 44 24 24	 mov	 eax, DWORD PTR nwritten$[rsp]
  00070	8b 4c 24 20	 mov	 ecx, DWORD PTR nleft$[rsp]
  00074	2b c8		 sub	 ecx, eax
  00076	8b c1		 mov	 eax, ecx
  00078	89 44 24 20	 mov	 DWORD PTR nleft$[rsp], eax

; 128  : 
; 129  :     } /* end of do while */

  0007c	eb a6		 jmp	 SHORT $LN2@write_sock
$LN3@write_sock:

; 130  : 
; 131  :     return (nbytes - nleft);    /* return number of bytes written */

  0007e	8b 44 24 20	 mov	 eax, DWORD PTR nleft$[rsp]
  00082	8b 4c 24 50	 mov	 ecx, DWORD PTR nbytes$[rsp]
  00086	2b c8		 sub	 ecx, eax
  00088	8b c1		 mov	 eax, ecx
$LN1@write_sock:

; 132  : 
; 133  : } /* end of write_socket */

  0008a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008e	c3		 ret	 0
write_socket ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hsocket.c
_TEXT	SEGMENT
nread$ = 32
nleft$ = 36
ptr$ = 40
fd$ = 64
_ptr$ = 72
nbytes$ = 80
read_socket PROC

; 45   : {

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 46   : char  *ptr;
; 47   : int   nleft, nread;
; 48   : 
; 49   :     ptr   = _ptr;               /* point to input buffer             */

  00012	48 8b 44 24 48	 mov	 rax, QWORD PTR _ptr$[rsp]
  00017	48 89 44 24 28	 mov	 QWORD PTR ptr$[rsp], rax

; 50   :     nleft = nbytes;             /* number of bytes to be read        */

  0001c	8b 44 24 50	 mov	 eax, DWORD PTR nbytes$[rsp]
  00020	89 44 24 24	 mov	 DWORD PTR nleft$[rsp], eax
$LN2@read_socke:

; 51   : 
; 52   :     while (nleft > 0)           /* while room in i/p buffer remains  */

  00024	83 7c 24 24 00	 cmp	 DWORD PTR nleft$[rsp], 0
  00029	7e 5e		 jle	 SHORT $LN3@read_socke

; 53   :     {
; 54   : #ifdef _MSVC_
; 55   :         nread = recv( fd, ptr, nleft, 0 );

  0002b	48 63 44 24 40	 movsxd	 rax, DWORD PTR fd$[rsp]
  00030	45 33 c9	 xor	 r9d, r9d
  00033	44 8b 44 24 24	 mov	 r8d, DWORD PTR nleft$[rsp]
  00038	48 8b 54 24 28	 mov	 rdx, QWORD PTR ptr$[rsp]
  0003d	48 8b c8	 mov	 rcx, rax
  00040	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_recv
  00046	89 44 24 20	 mov	 DWORD PTR nread$[rsp], eax

; 56   : #else
; 57   :         nread = read( fd, ptr, nleft );
; 58   : #endif
; 59   :         if (nread < 0)

  0004a	83 7c 24 20 00	 cmp	 DWORD PTR nread$[rsp], 0
  0004f	7d 08		 jge	 SHORT $LN4@read_socke

; 60   :             return nread;       /* error, return < 0 */

  00051	8b 44 24 20	 mov	 eax, DWORD PTR nread$[rsp]
  00055	eb 3e		 jmp	 SHORT $LN1@read_socke
  00057	eb 09		 jmp	 SHORT $LN5@read_socke
$LN4@read_socke:

; 61   :         else
; 62   :         if (nread == 0)         /* EOF; we read all we could */

  00059	83 7c 24 20 00	 cmp	 DWORD PTR nread$[rsp], 0
  0005e	75 02		 jne	 SHORT $LN6@read_socke

; 63   :             break;

  00060	eb 27		 jmp	 SHORT $LN3@read_socke
$LN6@read_socke:
$LN5@read_socke:

; 64   : 
; 65   :         ptr   += nread;         /* bump to next i/p buffer location  */

  00062	48 63 44 24 20	 movsxd	 rax, DWORD PTR nread$[rsp]
  00067	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ptr$[rsp]
  0006c	48 03 c8	 add	 rcx, rax
  0006f	48 8b c1	 mov	 rax, rcx
  00072	48 89 44 24 28	 mov	 QWORD PTR ptr$[rsp], rax

; 66   :         nleft -= nread;         /* adjust remaining bytes to be read */

  00077	8b 44 24 20	 mov	 eax, DWORD PTR nread$[rsp]
  0007b	8b 4c 24 24	 mov	 ecx, DWORD PTR nleft$[rsp]
  0007f	2b c8		 sub	 ecx, eax
  00081	8b c1		 mov	 eax, ecx
  00083	89 44 24 24	 mov	 DWORD PTR nleft$[rsp], eax

; 67   : 
; 68   :     } /* end of do while */

  00087	eb 9b		 jmp	 SHORT $LN2@read_socke
$LN3@read_socke:

; 69   : 
; 70   :     return (nbytes - nleft);    /* return number of bytes read */

  00089	8b 44 24 24	 mov	 eax, DWORD PTR nleft$[rsp]
  0008d	8b 4c 24 50	 mov	 ecx, DWORD PTR nbytes$[rsp]
  00091	2b c8		 sub	 ecx, eax
  00093	8b c1		 mov	 eax, ecx
$LN1@read_socke:

; 71   : 
; 72   : } /* end of read_socket */

  00095	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00099	c3		 ret	 0
read_socket ENDP
_TEXT	ENDS
END
