; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	PackageName
PUBLIC	PackageVersion
PUBLIC	PackageSource
PUBLIC	PackageMajorVers
PUBLIC	MsgLevel
PUBLIC	MsgPrefix
PUBLIC	ErrPrefix
PUBLIC	ExecCmd
PUBLIC	ExecSub
PUBLIC	HaltExec
_BSS	SEGMENT
PackageName DQ	01H DUP (?)
PackageVersion DQ 01H DUP (?)
PackageSource DQ 01H DUP (?)
MsgLevel DB	01H DUP (?)
	ALIGN	4

MsgPrefix DB	01H DUP (?)
	ALIGN	4

ErrPrefix DB	01H DUP (?)
	ALIGN	8

ExecCmd	DQ	01H DUP (?)
ExecSub	DQ	01H DUP (?)
HaltExec DQ	01H DUP (?)
$SG159548 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
PackageMajorVers DB 030H
	ORG $+3
$SG159104 DB	'OORexx', 00H
	ORG $+1
$SG159105 DB	'Regina', 00H
	ORG $+5
$SG159549 DB	'Start/Enable', 00H
	ORG $+3
$SG159550 DB	'Path', 00H
	ORG $+3
$SG159551 DB	'SysPath', 00H
$SG159552 DB	'Extensions', 00H
	ORG $+5
$SG159553 DB	'Resolver', 00H
	ORG $+7
$SG159554 DB	'MsgLevel', 00H
	ORG $+7
$SG159555 DB	'MsgPrefix', 00H
	ORG $+6
$SG159556 DB	'ErrPrefix', 00H
	ORG $+2
$SG159557 DB	'Mode', 00H
	ORG $+3
$SG159558 DB	'Cancel', 00H
_DATA	ENDS
CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
?verbose@?1??InitializeRexx@@9@9 DB 01H			; `InitializeRexx'::`2'::verbose
?verbose@?1??Enable@@9@9 DB 00H				; `Enable'::`2'::verbose
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsnprintf_s_l
PUBLIC	_vsnprintf_s
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	rexx_cmd
PUBLIC	exec_cmd
PUBLIC	InitializeRexx
EXTRN	__report_rangecheckfailure:PROC
EXTRN	strchr:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp__strnicmp:PROC
EXTRN	__imp_strtok:PROC
EXTRN	__imp_strdup:PROC
EXTRN	__imp_IsDebuggerPresent:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vsnprintf_s:PROC
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp__stat64:PROC
EXTRN	__imp_getpid:PROC
EXTRN	__imp_hthread_initialize_lock:PROC
EXTRN	__imp_hthread_obtain_lock:PROC
EXTRN	__imp_hthread_release_lock:PROC
EXTRN	__imp_hthread_initialize_condition:PROC
EXTRN	__imp_hthread_signal_condition:PROC
EXTRN	__imp_hthread_wait_condition:PROC
EXTRN	__imp_hthread_create_thread:PROC
EXTRN	__imp_hthread_equal_threads:PROC
EXTRN	__imp_get_symbol:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_FormatTIMEVAL:PROC
EXTRN	__imp_tkcount:PROC
EXTRN	__imp_ltrim:PROC
EXTRN	__imp_rtrim:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_gettimeofday:PROC
EXTRN	__imp_w32_snprintf:PROC
EXTRN	__imp_w32_basename:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	__imp_logmsg:PROC
EXTRN	ReginaLoad:PROC
EXTRN	ReginaEnable:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
COMM	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9:QWORD							; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
	ALIGN	8

DefaultPackage DQ 01H DUP (?)
DefaultRexxPath DQ 01H DUP (?)
DefaultExtensions DQ 01H DUP (?)
DefaultMode DB	01H DUP (?)
	ALIGN	4

OORexxAvailable DB 01H DUP (?)
	ALIGN	4

ReginaAvailable DB 01H DUP (?)
	ALIGN	4

RexxMode DB	01H DUP (?)
	ALIGN	8

RexxPath DQ	01H DUP (?)
RexxPathArray DQ 01H DUP (?)
RexxPathCount DD 01H DUP (?)
	ALIGN	8

SysPath	DQ	01H DUP (?)
SysPathArray DQ	01H DUP (?)
SysPathCount DD	01H DUP (?)
	ALIGN	8

Extensions DQ	01H DUP (?)
ExtensionsArray DQ 01H DUP (?)
ExtensionsCount DD 01H DUP (?)
scr_list DB	010H DUP (?)
	ALIGN	8

scr_lock DQ	01H DUP (?)
scr_cond DQ	01H DUP (?)
$SG159229 DB	01H DUP (?)
	ALIGN	4

$SG159242 DB	01H DUP (?)
	ALIGN	4

$SG159257 DB	01H DUP (?)
	ALIGN	4

$SG159303 DB	01H DUP (?)
	ALIGN	4

$SG159306 DB	01H DUP (?)
	ALIGN	4

$SG159344 DB	01H DUP (?)
	ALIGN	4

$SG159381 DB	01H DUP (?)
	ALIGN	4

$SG159411 DB	01H DUP (?)
	ALIGN	4

$SG159434 DB	01H DUP (?)
	ALIGN	4

$SG159622 DB	01H DUP (?)
	ALIGN	4

$SG159883 DB	01H DUP (?)
	ALIGN	4

$SG159890 DB	01H DUP (?)
	ALIGN	4

$SG159965 DB	01H DUP (?)
	ALIGN	4

$SG160002 DB	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$_vsnprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_s DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$_vsnprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sscanf
pdata	ENDS
pdata	SEGMENT
$pdata$DebuggerTrace DD imagerel DebuggerTrace
	DD	imagerel DebuggerTrace+247
	DD	imagerel $unwind$DebuggerTrace
$pdata$rexx_cmd DD imagerel $LN128
	DD	imagerel $LN128+5996
	DD	imagerel $unwind$rexx_cmd
$pdata$exec_cmd DD imagerel $LN56
	DD	imagerel $LN56+2381
	DD	imagerel $unwind$exec_cmd
$pdata$InitializeRexx DD imagerel $LN4
	DD	imagerel $LN4+241
	DD	imagerel $unwind$InitializeRexx
$pdata$InitializeDefaults DD imagerel InitializeDefaults
	DD	imagerel InitializeDefaults+400
	DD	imagerel $unwind$InitializeDefaults
$pdata$InitializePaths DD imagerel InitializePaths
	DD	imagerel InitializePaths+194
	DD	imagerel $unwind$InitializePaths
$pdata$InitializeExtensions DD imagerel InitializeExtensions
	DD	imagerel InitializeExtensions+192
	DD	imagerel $unwind$InitializeExtensions
$pdata$Enable DD imagerel Enable
	DD	imagerel Enable+1242
	DD	imagerel $unwind$Enable
$pdata$DisplayOptions DD imagerel DisplayOptions
	DD	imagerel DisplayOptions+1670
	DD	imagerel $unwind$DisplayOptions
$pdata$CancelRexxExec DD imagerel CancelRexxExec
	DD	imagerel CancelRexxExec+619
	DD	imagerel $unwind$CancelRexxExec
$pdata$CancelAllRexxExecs DD imagerel CancelAllRexxExecs
	DD	imagerel CancelAllRexxExecs+559
	DD	imagerel $unwind$CancelAllRexxExecs
$pdata$ReportVersionSource DD imagerel ReportVersionSource
	DD	imagerel ReportVersionSource+199
	DD	imagerel $unwind$ReportVersionSource
$pdata$PkgName2Num DD imagerel PkgName2Num
	DD	imagerel PkgName2Num+85
	DD	imagerel $unwind$PkgName2Num
$pdata$IsValidPackage DD imagerel IsValidPackage
	DD	imagerel IsValidPackage+86
	DD	imagerel $unwind$IsValidPackage
$pdata$IsEnabled DD imagerel IsEnabled
	DD	imagerel IsEnabled+214
	DD	imagerel $unwind$IsEnabled
$pdata$IsDisabled DD imagerel IsDisabled
	DD	imagerel IsDisabled+46
	DD	imagerel $unwind$IsDisabled
$pdata$InitArray DD imagerel InitArray
	DD	imagerel InitArray+631
	DD	imagerel $unwind$InitArray
$pdata$EnablePkg DD imagerel EnablePkg
	DD	imagerel EnablePkg+188
	DD	imagerel $unwind$EnablePkg
$pdata$FreeSCRCTL DD imagerel FreeSCRCTL
	DD	imagerel FreeSCRCTL+40
	DD	imagerel $unwind$FreeSCRCTL
$pdata$PruneSCRCTL DD imagerel PruneSCRCTL
	DD	imagerel PruneSCRCTL+174
	DD	imagerel $unwind$PruneSCRCTL
$pdata$NewSCRCTL DD imagerel NewSCRCTL
	DD	imagerel NewSCRCTL+286
	DD	imagerel $unwind$NewSCRCTL
$pdata$FindSCRCTL DD imagerel FindSCRCTL
	DD	imagerel FindSCRCTL+120
	DD	imagerel $unwind$FindSCRCTL
$pdata$ListSCRCTLs DD imagerel ListSCRCTLs
	DD	imagerel ListSCRCTLs+730
	DD	imagerel $unwind$ListSCRCTLs
$pdata$exec_async_thread DD imagerel exec_async_thread
	DD	imagerel exec_async_thread+331
	DD	imagerel $unwind$exec_async_thread
$pdata$exec_async DD imagerel exec_async
	DD	imagerel exec_async+456
	DD	imagerel $unwind$exec_async
pdata	ENDS
_DATA	SEGMENT
useResolver DB	01H
useSysPath DB	01H
	ORG $+3
PkgNames DQ	FLAT:$SG159104
	DQ	FLAT:$SG159105
$SG159181 DB	'I', 00H
	ORG $+2
$SG159185 DB	'I', 00H
	ORG $+2
$SG159182 DB	'HHC17528%s REXX(%s) VERSION: %s', 0aH, 00H
	ORG $+3
$SG159203 DB	'??????', 00H
	ORG $+1
$SG159230 DB	'E', 00H
	ORG $+2
$SG159183 DB	'ReportVersionSource', 00H
$SG159316 DB	';', 00H
	ORG $+2
$SG159184 DB	'hRexx.c', 00H
$SG159186 DB	'HHC17529%s REXX(%s) SOURCE:  %s', 0aH, 00H
	ORG $+3
$SG159317 DB	';', 00H
	ORG $+2
$SG159187 DB	'ReportVersionSource', 00H
$SG159328 DB	';', 00H
	ORG $+2
$SG159188 DB	'hRexx.c', 00H
$SG159224 DB	'hRexx.c:247', 00H
$SG159356 DB	'E', 00H
	ORG $+2
$SG159225 DB	'&scr_lock', 00H
	ORG $+2
$SG159377 DB	'W', 00H
	ORG $+2
$SG159226 DB	'hRexx.c:248', 00H
$SG159382 DB	'W', 00H
	ORG $+2
$SG159228 DB	'default ', 00H
	ORG $+3
$SG159379 DB	'Enable', 00H
	ORG $+1
$SG159387 DB	'E', 00H
	ORG $+2
$SG159231 DB	'HHC17511%s REXX(%s) Could not enable %sRexx package', 0aH
	DB	00H
	ORG $+3
$SG159232 DB	'InitializeRexx', 00H
	ORG $+1
$SG159233 DB	'hRexx.c', 00H
$SG159241 DB	'HREXX_PACKAGE', 00H
	ORG $+2
$SG159246 DB	'HREXX_MODE', 00H
	ORG $+1
$SG159398 DB	'I', 00H
	ORG $+2
$SG159249 DB	'Command', 00H
$SG159252 DB	'Subroutine', 00H
	ORG $+1
$SG159406 DB	'I', 00H
	ORG $+2
$SG159256 DB	'HREXX_PATH', 00H
	ORG $+1
$SG159412 DB	'E', 00H
	ORG $+2
$SG159261 DB	'HREXX_EXTENSIONS', 00H
	ORG $+3
$SG159384 DB	'Enable', 00H
	ORG $+1
$SG159421 DB	'E', 00H
	ORG $+2
$SG159262 DB	'.REXX;.rexx;.REX;.rex;.CMD;.cmd;.RX;.rx', 00H
$SG159314 DB	'PATH', 00H
	ORG $+3
$SG159330 DB	'InitializeExtensions', 00H
	ORG $+3
$SG159331 DB	'hRexx.c', 00H
$SG159334 DB	'InitializeExtensions', 00H
	ORG $+3
$SG159332 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159335 DB	'hRexx.c', 00H
$SG159336 DB	'%s(%d) : warning HHC90999W : *** Assertion Failed! *** f'
	DB	'unction: %s', 0aH, 00H
	ORG $+3
$SG159357 DB	'HHC17527%s REXX(%s) Unknown/unsupported Rexx package ''%'
	DB	's''', 0aH, 00H
	ORG $+1
$SG159430 DB	'E', 00H
	ORG $+2
$SG159358 DB	'EnablePkg', 00H
	ORG $+2
$SG159389 DB	'Enable', 00H
	ORG $+1
$SG159435 DB	'E', 00H
	ORG $+2
$SG159359 DB	'hRexx.c', 00H
$SG159371 DB	'auto', 00H
	ORG $+3
$SG159374 DB	'none', 00H
	ORG $+3
$SG159378 DB	'HHC17526%s REXX(%s) Rexx has been stopped/disabled', 0aH
	DB	00H
$SG159477 DB	'E', 00H
	ORG $+2
$SG159380 DB	'hRexx.c', 00H
$SG159383 DB	'HHC17523%s REXX(%s) Rexx already stopped/disabled', 0aH, 00H
	ORG $+1
$SG159515 DB	'I', 00H
	ORG $+2
$SG159385 DB	'hRexx.c', 00H
$SG159388 DB	'HHC17522%s REXX(%s) Rexx already started/enabled', 0aH, 00H
	ORG $+2
$SG159396 DB	'OORexx', 00H
	ORG $+1
$SG159520 DB	'I', 00H
	ORG $+2
$SG159390 DB	'hRexx.c', 00H
$SG159393 DB	'auto', 00H
	ORG $+3
$SG159397 DB	'OORexx', 00H
	ORG $+1
$SG159399 DB	'HHC17525%s REXX(%s) Rexx has been started/enabled', 0aH, 00H
	ORG $+1
$SG159400 DB	'Enable', 00H
	ORG $+1
$SG159525 DB	'I', 00H
	ORG $+2
$SG159401 DB	'hRexx.c', 00H
$SG159404 DB	'Regina', 00H
	ORG $+1
$SG159405 DB	'Regina', 00H
	ORG $+1
$SG159407 DB	'HHC17525%s REXX(%s) Rexx has been started/enabled', 0aH, 00H
	ORG $+1
$SG159408 DB	'Enable', 00H
	ORG $+1
$SG159529 DB	'cmd', 00H
$SG159409 DB	'hRexx.c', 00H
$SG159410 DB	'either ', 00H
$SG159413 DB	'HHC17511%s REXX(%s) Could not enable %sRexx package', 0aH
	DB	00H
	ORG $+3
$SG159414 DB	'Enable', 00H
	ORG $+1
$SG159415 DB	'hRexx.c', 00H
$SG159418 DB	'OORexx', 00H
	ORG $+1
$SG159420 DB	'requested ', 00H
	ORG $+1
$SG159530 DB	'sub', 00H
$SG159422 DB	'HHC17511%s REXX(%s) Could not enable %sRexx package', 0aH
	DB	00H
	ORG $+3
$SG159423 DB	'Enable', 00H
	ORG $+1
$SG159424 DB	'hRexx.c', 00H
$SG159427 DB	'Regina', 00H
	ORG $+1
$SG159429 DB	'requested ', 00H
	ORG $+1
$SG159531 DB	'???', 00H
$SG159431 DB	'HHC17511%s REXX(%s) Could not enable %sRexx package', 0aH
	DB	00H
	ORG $+3
$SG159432 DB	'Enable', 00H
	ORG $+1
$SG159433 DB	'hRexx.c', 00H
$SG159436 DB	'HHC17527%s REXX(%s) Unknown/unsupported Rexx package ''%'
	DB	's''', 0aH, 00H
	ORG $+1
$SG159437 DB	'Enable', 00H
	ORG $+1
$SG159532 DB	'I', 00H
	ORG $+2
$SG159438 DB	'hRexx.c', 00H
$SG159478 DB	'HHC00152%s Out of memory', 0aH, 00H
	ORG $+2
$SG159613 DB	'Cancel', 00H
	ORG $+1
$SG159623 DB	'E', 00H
	ORG $+2
$SG159479 DB	'NewSCRCTL', 00H
	ORG $+2
$SG159630 DB	'Enable', 00H
	ORG $+1
$SG159633 DB	'E', 00H
	ORG $+2
$SG159480 DB	'hRexx.c', 00H
$SG159516 DB	'HHC17516%s No asynchronous Rexx scripts are currently ru'
	DB	'nning', 0aH, 00H
	ORG $+1
$SG159517 DB	'ListSCRCTLs', 00H
$SG159657 DB	'E', 00H
	ORG $+2
$SG159518 DB	'hRexx.c', 00H
$SG159519 DB	'Started  Package ThreadId  Mode Name...', 00H
$SG159521 DB	'HHC17514%s %s', 0aH, 00H
	ORG $+1
$SG159522 DB	'ListSCRCTLs', 00H
$SG159664 DB	'All', 00H
$SG159523 DB	'hRexx.c', 00H
$SG159524 DB	'-------  ------  --------  ---  -------------', 00H
	ORG $+2
$SG159526 DB	'HHC17514%s %s', 0aH, 00H
	ORG $+1
$SG159527 DB	'ListSCRCTLs', 00H
$SG159667 DB	'E', 00H
	ORG $+2
$SG159528 DB	'hRexx.c', 00H
$SG159533 DB	'HHC17515%s %8s %6s  %8.8x  %3s  %s', 0aH, 00H
$SG159682 DB	'E', 00H
	ORG $+2
$SG159534 DB	'ListSCRCTLs', 00H
$SG159699 DB	'On', 00H
	ORG $+1
$SG159535 DB	'hRexx.c', 00H
$SG159609 DB	'List', 00H
	ORG $+3
ARGSDESC DQ	FLAT:$SG159548
	DQ	FLAT:$SG159549
	DQ	FLAT:$SG159550
	DQ	FLAT:$SG159551
	DQ	FLAT:$SG159552
	DQ	FLAT:$SG159553
	DQ	FLAT:$SG159554
	DQ	FLAT:$SG159555
	DQ	FLAT:$SG159556
	DQ	FLAT:$SG159557
	DQ	FLAT:$SG159558
$SG159610 DB	'hRexx.c:825', 00H
$SG159704 DB	'Off', 00H
$SG159611 DB	'hRexx.c:829', 00H
$SG159615 DB	'mode', 00H
	ORG $+3
$SG159631 DB	'Start', 00H
	ORG $+2
$SG159675 DB	'Regina', 00H
	ORG $+1
$SG159708 DB	'E', 00H
	ORG $+2
$SG159619 DB	'Disable', 00H
$SG159620 DB	'Stop', 00H
	ORG $+3
$SG159624 DB	'HHC17523%s REXX(%s) Rexx already stopped/disabled', 0aH, 00H
	ORG $+1
$SG159717 DB	'On', 00H
	ORG $+1
$SG159625 DB	'rexx_cmd', 00H
	ORG $+3
$SG159676 DB	'OORexx', 00H
	ORG $+1
$SG159722 DB	'Off', 00H
$SG159626 DB	'hRexx.c', 00H
$SG159634 DB	'HHC17522%s REXX(%s) Rexx already started/enabled', 0aH, 00H
	ORG $+2
$SG159698 DB	'Enable', 00H
	ORG $+1
$SG159726 DB	'E', 00H
	ORG $+2
$SG159635 DB	'rexx_cmd', 00H
	ORG $+3
$SG159681 DB	'reset', 00H
	ORG $+2
$SG159716 DB	'Enable', 00H
	ORG $+1
$SG159735 DB	'Off', 00H
$SG159636 DB	'hRexx.c', 00H
$SG159640 DB	'Path', 00H
	ORG $+3
$SG159641 DB	'RexxPath', 00H
	ORG $+3
$SG159689 DB	'reset', 00H
	ORG $+2
$SG159739 DB	'Enable', 00H
	ORG $+1
$SG159740 DB	'On', 00H
	ORG $+1
$SG159643 DB	'SysPath', 00H
$SG159647 DB	'Extensions', 00H
	ORG $+1
$SG159744 DB	'E', 00H
	ORG $+2
$SG159648 DB	'Suffixes', 00H
	ORG $+3
$SG159693 DB	'reset', 00H
	ORG $+2
$SG159753 DB	'Off', 00H
$SG159650 DB	'Resolver', 00H
	ORG $+3
$SG159707 DB	'reset', 00H
	ORG $+2
$SG159757 DB	'Enable', 00H
	ORG $+1
$SG159758 DB	'On', 00H
	ORG $+1
$SG159652 DB	'MsgLevel', 00H
	ORG $+3
$SG159725 DB	'reset', 00H
	ORG $+2
$SG159762 DB	'E', 00H
	ORG $+2
$SG159654 DB	'MsgPrefix', 00H
	ORG $+2
$SG159771 DB	'Off', 00H
$SG159656 DB	'ErrPrefix', 00H
	ORG $+2
$SG159775 DB	'Enable', 00H
	ORG $+1
$SG159776 DB	'On', 00H
	ORG $+1
$SG159658 DB	'HHC17508%s REXX(%s) Argument %d: unknown option ''%s''', 0aH
	DB	00H
	ORG $+2
$SG159659 DB	'rexx_cmd', 00H
	ORG $+3
$SG159743 DB	'reset', 00H
	ORG $+2
$SG159780 DB	'E', 00H
	ORG $+2
$SG159660 DB	'hRexx.c', 00H
$SG159666 DB	'%x%c', 00H
	ORG $+3
$SG159668 DB	'HHC17509%s REXX(%s) Option %s value ''%s'' is invalid', 0aH
	DB	00H
	ORG $+3
$SG159669 DB	'rexx_cmd', 00H
	ORG $+3
$SG159761 DB	'reset', 00H
	ORG $+2
$SG159794 DB	'E', 00H
	ORG $+2
$SG159670 DB	'hRexx.c', 00H
$SG159677 DB	'auto', 00H
	ORG $+3
$SG159678 DB	'none', 00H
	ORG $+3
$SG159683 DB	'HHC17509%s REXX(%s) Option %s value ''%s'' is invalid', 0aH
	DB	00H
	ORG $+3
$SG159684 DB	'rexx_cmd', 00H
	ORG $+3
$SG159779 DB	'reset', 00H
	ORG $+2
$SG159801 DB	'E', 00H
	ORG $+2
$SG159685 DB	'hRexx.c', 00H
$SG159703 DB	'Disable', 00H
$SG159709 DB	'HHC17509%s REXX(%s) Option %s value ''%s'' is invalid', 0aH
	DB	00H
	ORG $+3
$SG159710 DB	'rexx_cmd', 00H
	ORG $+3
$SG159793 DB	'reset', 00H
	ORG $+2
$SG159817 DB	'I', 00H
	ORG $+2
$SG159711 DB	'hRexx.c', 00H
$SG159721 DB	'Disable', 00H
$SG159727 DB	'HHC17509%s REXX(%s) Option %s value ''%s'' is invalid', 0aH
	DB	00H
	ORG $+3
$SG159728 DB	'rexx_cmd', 00H
	ORG $+3
$SG159821 DB	'W', 00H
	ORG $+2
$SG159729 DB	'hRexx.c', 00H
$SG159734 DB	'Disable', 00H
$SG159745 DB	'HHC17509%s REXX(%s) Option %s value ''%s'' is invalid', 0aH
	DB	00H
	ORG $+3
$SG159746 DB	'rexx_cmd', 00H
	ORG $+3
$SG159829 DB	'W', 00H
	ORG $+2
$SG159747 DB	'hRexx.c', 00H
$SG159752 DB	'Disable', 00H
$SG159763 DB	'HHC17509%s REXX(%s) Option %s value ''%s'' is invalid', 0aH
	DB	00H
	ORG $+3
$SG159764 DB	'rexx_cmd', 00H
	ORG $+3
$SG159838 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159839 DB	'I', 00H
	ORG $+2
$SG159765 DB	'hRexx.c', 00H
$SG159770 DB	'Disable', 00H
$SG159781 DB	'HHC17509%s REXX(%s) Option %s value ''%s'' is invalid', 0aH
	DB	00H
	ORG $+3
$SG159782 DB	'rexx_cmd', 00H
	ORG $+3
$SG159843 DB	'On', 00H
	ORG $+1
$SG159783 DB	'hRexx.c', 00H
$SG159787 DB	'Command', 00H
$SG159790 DB	'Subroutine', 00H
	ORG $+1
$SG159844 DB	'Off', 00H
$SG159795 DB	'HHC17509%s REXX(%s) Option %s value ''%s'' is invalid', 0aH
	DB	00H
	ORG $+3
$SG159796 DB	'rexx_cmd', 00H
	ORG $+3
$SG159846 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159847 DB	'I', 00H
	ORG $+2
$SG159797 DB	'hRexx.c', 00H
$SG159802 DB	'HHC17507%s REXX(%s) Option ''%s'' needs a value', 0aH, 00H
	ORG $+1
$SG159803 DB	'rexx_cmd', 00H
	ORG $+3
$SG159851 DB	'On', 00H
	ORG $+1
$SG159804 DB	'hRexx.c', 00H
$SG159818 DB	'HHC17526%s REXX(%s) Rexx has been stopped/disabled', 0aH
	DB	00H
$SG159852 DB	'Off', 00H
$SG159819 DB	'rexx_cmd', 00H
	ORG $+3
$SG159854 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159855 DB	'I', 00H
	ORG $+2
$SG159820 DB	'hRexx.c', 00H
$SG159822 DB	'HHC17523%s REXX(%s) Rexx already stopped/disabled', 0aH, 00H
	ORG $+1
$SG159859 DB	'On', 00H
	ORG $+1
$SG159823 DB	'rexx_cmd', 00H
	ORG $+3
$SG159860 DB	'Off', 00H
$SG159824 DB	'hRexx.c', 00H
$SG159830 DB	'HHC17522%s REXX(%s) Rexx already started/enabled', 0aH, 00H
	ORG $+2
$SG159862 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159863 DB	'I', 00H
	ORG $+2
$SG159831 DB	'rexx_cmd', 00H
	ORG $+3
$SG159867 DB	'On', 00H
	ORG $+1
$SG159832 DB	'hRexx.c', 00H
$SG159835 DB	'Command', 00H
$SG159836 DB	'Subroutine', 00H
	ORG $+1
$SG159868 DB	'Off', 00H
$SG159837 DB	'Mode            : %s', 00H
	ORG $+3
$SG159840 DB	'HHC17500%s REXX(%s) %s', 0aH, 00H
$SG159841 DB	'DisplayOptions', 00H
	ORG $+1
$SG159842 DB	'hRexx.c', 00H
$SG159845 DB	'MsgLevel        : %s', 00H
	ORG $+3
$SG159848 DB	'HHC17500%s REXX(%s) %s', 0aH, 00H
$SG159849 DB	'DisplayOptions', 00H
	ORG $+1
$SG159850 DB	'hRexx.c', 00H
$SG159853 DB	'MsgPrefix       : %s', 00H
	ORG $+3
$SG159856 DB	'HHC17500%s REXX(%s) %s', 0aH, 00H
$SG159857 DB	'DisplayOptions', 00H
	ORG $+1
$SG159858 DB	'hRexx.c', 00H
$SG159861 DB	'ErrPrefix       : %s', 00H
	ORG $+3
$SG159864 DB	'HHC17500%s REXX(%s) %s', 0aH, 00H
$SG159865 DB	'DisplayOptions', 00H
	ORG $+1
$SG159866 DB	'hRexx.c', 00H
$SG159869 DB	'Resolver        : %s', 00H
	ORG $+3
$SG159870 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159871 DB	'I', 00H
	ORG $+2
$SG159875 DB	'On', 00H
	ORG $+1
$SG159872 DB	'HHC17500%s REXX(%s) %s', 0aH, 00H
$SG159873 DB	'DisplayOptions', 00H
	ORG $+1
$SG159874 DB	'hRexx.c', 00H
$SG159876 DB	'Off', 00H
$SG159879 DB	'I', 00H
	ORG $+2
$SG159877 DB	'SysPath    (%2d) : %s', 00H
	ORG $+2
$SG159878 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159880 DB	'HHC17500%s REXX(%s) %s', 0aH, 00H
$SG159881 DB	'DisplayOptions', 00H
	ORG $+1
$SG159882 DB	'hRexx.c', 00H
$SG159884 DB	'RexxPath   (%2d) : %s', 00H
	ORG $+2
$SG159885 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159886 DB	'I', 00H
	ORG $+2
$SG159892 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+1
$SG159893 DB	'I', 00H
	ORG $+2
$SG159887 DB	'HHC17500%s REXX(%s) %s', 0aH, 00H
$SG159888 DB	'DisplayOptions', 00H
	ORG $+1
$SG159889 DB	'hRexx.c', 00H
$SG159891 DB	'Extensions (%2d) : %s', 00H
	ORG $+2
$SG159894 DB	'HHC17500%s REXX(%s) %s', 0aH, 00H
$SG159895 DB	'DisplayOptions', 00H
	ORG $+1
$SG159896 DB	'hRexx.c', 00H
$SG159912 DB	'hRexx.c:1323', 00H
	ORG $+3
$SG159914 DB	'hRexx.c:1338', 00H
	ORG $+3
$SG159915 DB	'hRexx.c:1340', 00H
	ORG $+3
$SG159918 DB	'hRexx.c:1354', 00H
	ORG $+3
$SG159919 DB	'hRexx.c:1358', 00H
	ORG $+3
$SG159935 DB	'hRexx.c:1377', 00H
	ORG $+3
$SG159938 DB	'hRexx.c:1396', 00H
	ORG $+3
$SG159941 DB	'E', 00H
	ORG $+2
$SG159957 DB	'E', 00H
	ORG $+2
$SG159942 DB	'HHC00102%s Error in function create_thread(): %s', 0aH, 00H
	ORG $+2
$SG159966 DB	'E', 00H
	ORG $+2
$SG159943 DB	'exec_async', 00H
	ORG $+1
$SG159972 DB	'E', 00H
	ORG $+2
$SG159944 DB	'hRexx.c', 00H
$SG159945 DB	'hRexx.c:1407', 00H
	ORG $+3
$SG159946 DB	'hRexx.c:1414', 00H
	ORG $+3
$SG159955 DB	'hRexx.c:1425', 00H
	ORG $+3
$SG159958 DB	'HHC17517%s Asynchronous Rexx script %8.8x not found', 0aH
	DB	00H
	ORG $+3
$SG159959 DB	'CancelRexxExec', 00H
	ORG $+1
$SG159960 DB	'hRexx.c', 00H
$SG159961 DB	'hRexx.c:1434', 00H
	ORG $+3
$SG159964 DB	'temporary ', 00H
	ORG $+1
$SG159978 DB	'E', 00H
	ORG $+2
$SG159967 DB	'HHC17511%s REXX(%s) Could not enable %sRexx package', 0aH
	DB	00H
	ORG $+3
$SG159968 DB	'CancelRexxExec', 00H
	ORG $+1
$SG159969 DB	'hRexx.c', 00H
$SG159971 DB	'failed', 00H
	ORG $+1
$SG159973 DB	'HHC17520%s REXX(%s) Signal HALT %8.8x %s', 0aH, 00H
	ORG $+2
$SG160003 DB	'E', 00H
	ORG $+2
$SG159974 DB	'CancelRexxExec', 00H
	ORG $+1
$SG159975 DB	'hRexx.c', 00H
$SG159977 DB	'original ', 00H
	ORG $+2
$SG160008 DB	'failed', 00H
	ORG $+1
$SG160009 DB	'E', 00H
	ORG $+2
$SG159979 DB	'HHC17511%s REXX(%s) Could not enable %sRexx package', 0aH
	DB	00H
	ORG $+3
$SG159980 DB	'CancelRexxExec', 00H
	ORG $+1
$SG159981 DB	'hRexx.c', 00H
$SG159982 DB	'hRexx.c:1468', 00H
	ORG $+3
$SG159998 DB	'hRexx.c:1480', 00H
	ORG $+3
$SG160001 DB	'temporary ', 00H
	ORG $+1
$SG160015 DB	'E', 00H
	ORG $+2
$SG160004 DB	'HHC17511%s REXX(%s) Could not enable %sRexx package', 0aH
	DB	00H
	ORG $+3
$SG160005 DB	'CancelAllRexxExecs', 00H
	ORG $+1
$SG160064 DB	'E', 00H
	ORG $+2
$SG160006 DB	'hRexx.c', 00H
$SG160010 DB	'HHC17520%s REXX(%s) Signal HALT %8.8x %s', 0aH, 00H
	ORG $+2
$SG160071 DB	'E', 00H
	ORG $+2
$SG160011 DB	'CancelAllRexxExecs', 00H
	ORG $+1
$SG160078 DB	'cmd', 00H
$SG160012 DB	'hRexx.c', 00H
$SG160014 DB	'original ', 00H
	ORG $+2
$SG160079 DB	'com', 00H
$SG160016 DB	'HHC17511%s REXX(%s) Could not enable %sRexx package', 0aH
	DB	00H
	ORG $+3
$SG160017 DB	'CancelAllRexxExecs', 00H
	ORG $+1
$SG160086 DB	'sub', 00H
$SG160018 DB	'hRexx.c', 00H
$SG160019 DB	'hRexx.c:1519', 00H
	ORG $+3
$SG160065 DB	'HHC02227%s Shell/Exec commands are disabled', 0aH, 00H
	ORG $+3
$SG160066 DB	'exec_cmd', 00H
	ORG $+3
$SG160091 DB	'&', 00H
	ORG $+2
$SG160067 DB	'hRexx.c', 00H
$SG160072 DB	'HHC17505%s REXX(%s) Exec: script name not specified', 0aH
	DB	00H
	ORG $+3
$SG160073 DB	'exec_cmd', 00H
	ORG $+3
$SG160106 DB	'E', 00H
	ORG $+2
$SG160074 DB	'hRexx.c', 00H
$SG160080 DB	'-cmd', 00H
	ORG $+3
$SG160081 DB	'-com', 00H
	ORG $+3
$SG160082 DB	'/cmd', 00H
	ORG $+3
$SG160083 DB	'/com', 00H
	ORG $+3
$SG160087 DB	'-sub', 00H
	ORG $+3
$SG160088 DB	'/sub', 00H
	ORG $+3
$SG160098 DB	'%s\%s%s', 00H
$SG160103 DB	'%s\%s%s', 00H
$SG160107 DB	'HHC17506%s REXX(%s) Exec: script "%s" not found', 0aH, 00H
	ORG $+3
$SG160121 DB	'E', 00H
	ORG $+2
$SG160108 DB	'exec_cmd', 00H
	ORG $+3
$SG160125 DB	' ', 09H, 0aH, 0bH, 0cH, 0dH, 00H
	ORG $+5
$SG160109 DB	'hRexx.c', 00H
$SG160122 DB	'HHC17513%s REXX(%s) Malformed call to ''exec_cmd'' funct'
	DB	'ion', 0aH, 00H
	ORG $+5
$SG160123 DB	'exec_cmd', 00H
	ORG $+7
$SG160124 DB	'hRexx.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ListSCRCTLs
	DD	011H
	DD	02c2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:DisplayOptions
	DD	013H
	DD	066dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:exec_cmd
	DD	01fH
	DD	0935H
voltbl	ENDS
xdata	SEGMENT
$unwind$DebuggerTrace DD 011801H
	DD	0a218H
$unwind$rexx_cmd DD 021501H
	DD	0310115H
$unwind$exec_cmd DD 022719H
	DD	0410115H
	DD	imagerel __GSHandlerCheck
	DD	01f0H
$unwind$InitializeRexx DD 010401H
	DD	0a204H
$unwind$InitializeDefaults DD 010401H
	DD	06204H
$unwind$InitializePaths DD 010901H
	DD	0a209H
$unwind$InitializeExtensions DD 010901H
	DD	0a209H
$unwind$Enable DD 010901H
	DD	0c209H
$unwind$DisplayOptions DD 031b19H
	DD	03c0109H
	DD	07002H
	DD	imagerel __GSHandlerCheck
	DD	01d0H
$unwind$CancelRexxExec DD 010801H
	DD	0e208H
$unwind$CancelAllRexxExecs DD 010401H
	DD	0e204H
$unwind$ReportVersionSource DD 010401H
	DD	0a204H
$unwind$PkgName2Num DD 010901H
	DD	06209H
$unwind$IsValidPackage DD 010901H
	DD	06209H
$unwind$IsEnabled DD 010901H
	DD	06209H
$unwind$IsDisabled DD 010401H
	DD	06204H
$unwind$InitArray DD 011801H
	DD	0a218H
$unwind$EnablePkg DD 010c01H
	DD	0c20cH
$unwind$FreeSCRCTL DD 010901H
	DD	04209H
$unwind$PruneSCRCTL DD 010401H
	DD	08204H
$unwind$NewSCRCTL DD 011201H
	DD	0a212H
$unwind$FindSCRCTL DD 010801H
	DD	06208H
$unwind$ListSCRCTLs DD 021919H
	DD	0190107H
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$exec_async_thread DD 010901H
	DD	0a209H
$unwind$exec_async DD 021a01H
	DD	011011aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_s_l DD 011801H
	DD	0a218H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
rc$ = 64
dummy$1 = 68
_EX_Head$2 = 72
_EX_Tail$3 = 80
tv81 = 88
thr_args$ = 96
scr_name$ = 144
scr_mode$ = 152
scr_args$ = 160
scr_numargs$ = 168
exec_async PROC

; 1373 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1374 :     int     rc;
; 1375 :     THRARG  thr_args;
; 1376 : 
; 1377 :     obtain_lock( &scr_lock );

  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159935
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  00028	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1378 :     {
; 1379 :         TID dummy = 0;      // temp for NewSCRCTL()

  0002e	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR dummy$1[rsp], 0

; 1380 : 
; 1381 :         /* Initialize THRARG structure. Note that the SCRCTL struct's
; 1382 :            'tid' field (thr_args.scr_ctl->scr_tid) will be initially
; 1383 :            created with a null (0) dummy value but will get fixed
; 1384 :            automatically whenever the exec_async_thread is created.
; 1385 :         */
; 1386 :         thr_args.scr_args    = scr_args;

  00036	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR scr_args$[rsp]
  0003e	48 89 44 24 68	 mov	 QWORD PTR thr_args$[rsp+8], rax

; 1387 :         thr_args.scr_numargs = scr_numargs;

  00043	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR scr_numargs$[rsp]
  0004a	89 44 24 70	 mov	 DWORD PTR thr_args$[rsp+16], eax

; 1388 :         thr_args.scr_ctl     = NewSCRCTL( scr_name, dummy, scr_mode );

  0004e	44 0f b6 84 24
	98 00 00 00	 movzx	 r8d, BYTE PTR scr_mode$[rsp]
  00057	8b 54 24 44	 mov	 edx, DWORD PTR dummy$1[rsp]
  0005b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR scr_name$[rsp]
  00063	e8 00 00 00 00	 call	 NewSCRCTL
  00068	48 89 44 24 60	 mov	 QWORD PTR thr_args$[rsp], rax

; 1389 : 
; 1390 :         if (!thr_args.scr_ctl)

  0006d	48 83 7c 24 60
	00		 cmp	 QWORD PTR thr_args$[rsp], 0
  00073	75 0d		 jne	 SHORT $LN2@exec_async

; 1391 :             rc = -1; // (out of memory)

  00075	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1
  0007d	e9 26 01 00 00	 jmp	 $LN3@exec_async
$LN2@exec_async:

; 1392 :         else
; 1393 :         {
; 1394 :             /* Create async thread and update thread-id */
; 1395 :             rc = create_thread( &thr_args.scr_ctl->scr_tid, DETACHED,

  00082	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  00089	48 05 88 10 00
	00		 add	 rax, 4232		; 00001088H
  0008f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR thr_args$[rsp]
  00094	48 83 c1 20	 add	 rcx, 32			; 00000020H
  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159938
  0009f	48 89 54 24 28	 mov	 QWORD PTR [rsp+40], rdx
  000a4	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR scr_name$[rsp]
  000ac	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  000b1	4c 8d 4c 24 60	 lea	 r9, QWORD PTR thr_args$[rsp]
  000b6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:exec_async_thread
  000bd	48 8b d0	 mov	 rdx, rax
  000c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_create_thread
  000c6	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 1396 :                       exec_async_thread, &thr_args, scr_name );
; 1397 : 
; 1398 :             if (rc != 0)

  000ca	83 7c 24 40 00	 cmp	 DWORD PTR rc$[rsp], 0
  000cf	74 6c		 je	 SHORT $LN4@exec_async

; 1399 :             {
; 1400 :                // "Error in function create_thread(): %s"
; 1401 :                WRMSG( HHC00102, "E", strerror( rc ));

  000d1	8b 4c 24 40	 mov	 ecx, DWORD PTR rc$[rsp]
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000db	48 89 44 24 58	 mov	 QWORD PTR tv81[rsp], rax
  000e0	b9 01 00 00 00	 mov	 ecx, 1
  000e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000eb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv81[rsp]
  000f0	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159941
  000fc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159942
  00108	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00112	41 b9 03 00 00
	00		 mov	 r9d, 3
  00118	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159943
  0011f	ba 79 05 00 00	 mov	 edx, 1401		; 00000579H
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159944
  0012b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1402 :                FreeSCRCTL( thr_args.scr_ctl );

  00131	48 8b 4c 24 60	 mov	 rcx, QWORD PTR thr_args$[rsp]
  00136	e8 00 00 00 00	 call	 FreeSCRCTL

; 1403 :             }

  0013b	eb 6b		 jmp	 SHORT $LN5@exec_async
$LN4@exec_async:

; 1404 :             else
; 1405 :             {
; 1406 :                 /* Wait for thread to initialize */
; 1407 :                 wait_condition( &scr_cond, &scr_lock );

  0013d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159945
  00144	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:scr_lock
  0014b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_cond
  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_wait_condition

; 1408 : 
; 1409 :                 /* Add this script to our list */
; 1410 :                 InsertListTail( &scr_list, &thr_args.scr_ctl->link );

  00158	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:scr_list
  0015f	48 89 44 24 48	 mov	 QWORD PTR _EX_Head$2[rsp], rax
  00164	48 8b 44 24 48	 mov	 rax, QWORD PTR _EX_Head$2[rsp]
  00169	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0016d	48 89 44 24 50	 mov	 QWORD PTR _EX_Tail$3[rsp], rax
  00172	48 8b 44 24 60	 mov	 rax, QWORD PTR thr_args$[rsp]
  00177	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _EX_Head$2[rsp]
  0017c	48 89 08	 mov	 QWORD PTR [rax], rcx
  0017f	48 8b 44 24 60	 mov	 rax, QWORD PTR thr_args$[rsp]
  00184	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _EX_Tail$3[rsp]
  00189	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0018d	48 8b 44 24 60	 mov	 rax, QWORD PTR thr_args$[rsp]
  00192	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _EX_Tail$3[rsp]
  00197	48 89 01	 mov	 QWORD PTR [rcx], rax
  0019a	48 8b 44 24 60	 mov	 rax, QWORD PTR thr_args$[rsp]
  0019f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _EX_Head$2[rsp]
  001a4	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN5@exec_async:
$LN3@exec_async:

; 1411 :             }
; 1412 :         }
; 1413 :     }
; 1414 :     release_lock( &scr_lock );

  001a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159946
  001af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  001b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1415 :     return rc;

  001bc	8b 44 24 40	 mov	 eax, DWORD PTR rc$[rsp]

; 1416 : }

  001c0	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  001c7	c3		 ret	 0
exec_async ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
rc$ = 32
argc$ = 36
pCtl$ = 40
arg$1 = 48
cmd_cmdline$ = 56
args$ = 64
tv76 = 72
p$ = 96
exec_async_thread PROC

; 1315 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1316 :     SCRCTL*  pCtl;                  // Pointer to our SCRCTL entry
; 1317 :     void*    args;                  // (depends on mode)
; 1318 :     int      argc;                  // (depends on mode)
; 1319 :     int      rc;                    // ExecCmd/ExecSub return code
; 1320 :     char*    cmd_cmdline = NULL;    // (MODE_COMMAND script cmdline)

  00009	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR cmd_cmdline$[rsp], 0

; 1321 : 
; 1322 :     /* Retrieve needed arguments */
; 1323 :     obtain_lock( &scr_lock );

  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159912
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  00020	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1324 :     {
; 1325 :         THRARG* arg = p;

  00026	48 8b 44 24 60	 mov	 rax, QWORD PTR p$[rsp]
  0002b	48 89 44 24 30	 mov	 QWORD PTR arg$1[rsp], rax

; 1326 : 
; 1327 :         pCtl  = arg->scr_ctl;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR arg$1[rsp]
  00035	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00038	48 89 44 24 28	 mov	 QWORD PTR pCtl$[rsp], rax

; 1328 :         args  = arg->scr_args;

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR arg$1[rsp]
  00042	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00046	48 89 44 24 40	 mov	 QWORD PTR args$[rsp], rax

; 1329 :         argc  = arg->scr_numargs;

  0004b	48 8b 44 24 30	 mov	 rax, QWORD PTR arg$1[rsp]
  00050	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00053	89 44 24 24	 mov	 DWORD PTR argc$[rsp], eax

; 1330 : 
; 1331 :         pCtl->scr_ended = FALSE;

  00057	48 8b 44 24 28	 mov	 rax, QWORD PTR pCtl$[rsp]
  0005c	c6 40 25 00	 mov	 BYTE PTR [rax+37], 0

; 1332 : 
; 1333 :         //* Make copy of MODE_COMMAND cmdline before it disappears! */
; 1334 :         if (pCtl->scr_mode == MODE_COMMAND)

  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR pCtl$[rsp]
  00065	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  00069	85 c0		 test	 eax, eax
  0006b	75 2d		 jne	 SHORT $LN2@exec_async

; 1335 :             cmd_cmdline = args ? strdup( args ) : NULL;

  0006d	48 83 7c 24 40
	00		 cmp	 QWORD PTR args$[rsp], 0
  00073	74 12		 je	 SHORT $LN6@exec_async
  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR args$[rsp]
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00080	48 89 44 24 48	 mov	 QWORD PTR tv76[rsp], rax
  00085	eb 09		 jmp	 SHORT $LN7@exec_async
$LN6@exec_async:
  00087	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv76[rsp], 0
$LN7@exec_async:
  00090	48 8b 44 24 48	 mov	 rax, QWORD PTR tv76[rsp]
  00095	48 89 44 24 38	 mov	 QWORD PTR cmd_cmdline$[rsp], rax
$LN2@exec_async:

; 1336 : 
; 1337 :         /* Indicate arguments retrieved */
; 1338 :         signal_condition( &scr_cond );

  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159914
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_cond
  000a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_signal_condition

; 1339 :     }
; 1340 :     release_lock( &scr_lock );

  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159915
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1341 : 
; 1342 :     /* Execute Rexx script asynchronously */
; 1343 :     if (pCtl->scr_mode == MODE_COMMAND)

  000c2	48 8b 44 24 28	 mov	 rax, QWORD PTR pCtl$[rsp]
  000c7	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000cb	85 c0		 test	 eax, eax
  000cd	75 25		 jne	 SHORT $LN3@exec_async

; 1344 :     {
; 1345 :         rc = ExecCmd( pCtl->scr_name, cmd_cmdline );

  000cf	48 8b 54 24 38	 mov	 rdx, QWORD PTR cmd_cmdline$[rsp]
  000d4	48 8b 44 24 28	 mov	 rax, QWORD PTR pCtl$[rsp]
  000d9	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR ExecCmd
  000e3	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 1346 :         free( cmd_cmdline );

  000e7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cmd_cmdline$[rsp]
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1347 :     }

  000f2	eb 1c		 jmp	 SHORT $LN4@exec_async
$LN3@exec_async:

; 1348 :     else // (pCtl->scr_mode == MODE_SUBROUTINE)
; 1349 :     {
; 1350 :         rc = ExecSub( pCtl->scr_name, argc, args );

  000f4	4c 8b 44 24 40	 mov	 r8, QWORD PTR args$[rsp]
  000f9	8b 54 24 24	 mov	 edx, DWORD PTR argc$[rsp]
  000fd	48 8b 44 24 28	 mov	 rax, QWORD PTR pCtl$[rsp]
  00102	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR ExecSub
  0010c	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
$LN4@exec_async:

; 1351 :     }
; 1352 : 
; 1353 :     /* Indicate script has ended */
; 1354 :     obtain_lock( &scr_lock );

  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159918
  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  0011e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1355 :     {
; 1356 :         pCtl->scr_ended = TRUE;

  00124	48 8b 44 24 28	 mov	 rax, QWORD PTR pCtl$[rsp]
  00129	c6 40 25 01	 mov	 BYTE PTR [rax+37], 1

; 1357 :     }
; 1358 :     release_lock( &scr_lock );

  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159919
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  0013b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1359 : 
; 1360 :     return INT2VOIDP( rc );    // (in case anyone is interested)

  00141	48 63 44 24 20	 movsxd	 rax, DWORD PTR rc$[rsp]

; 1361 : }

  00146	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0014a	c3		 ret	 0
exec_async_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
pCtl$ = 96
pLink$ = 104
$T1 = 112
tv143 = 120
tv144 = 128
tv148 = 136
tv153 = 144
tod$ = 152
__$ArrayPad$ = 184
ListSCRCTLs PROC

; 645  : {

  00000	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
  00007	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0000e	48 33 c4	 xor	 rax, rsp
  00011	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 646  :     LIST_ENTRY*  pLink  = NULL;

  00019	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR pLink$[rsp], 0

; 647  :     SCRCTL*      pCtl   = NULL;

  00022	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR pCtl$[rsp], 0

; 648  :     char         tod[32];           // "YYYY-MM-DD HH:MM:SS.uuuuuu"
; 649  : 
; 650  :     /* Prune list on regular basis */
; 651  :     PruneSCRCTL();

  0002b	e8 00 00 00 00	 call	 PruneSCRCTL

; 652  : 
; 653  :     /* Check for empty list */
; 654  :     if (IsListEmpty( &scr_list ))

  00030	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:scr_list
  00037	48 39 05 00 00
	00 00		 cmp	 QWORD PTR scr_list, rax
  0003e	75 4c		 jne	 SHORT $LN5@ListSCRCTL

; 655  :     {
; 656  :         // "No asynchronous Rexx scripts are currently running"
; 657  :         WRMSG( HHC17516, "I" );

  00040	b9 01 00 00 00	 mov	 ecx, 1
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159515
  00052	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159516
  0005e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00063	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00068	41 b9 03 00 00
	00		 mov	 r9d, 3
  0006e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159517
  00075	ba 91 02 00 00	 mov	 edx, 657		; 00000291H
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159518
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 658  :         return;

  00087	e9 36 02 00 00	 jmp	 $LN1@ListSCRCTL
$LN5@ListSCRCTL:

; 659  :     }
; 660  : 
; 661  :     // "Started  Package ThreadId  Mode Name..."
; 662  :     WRMSG( HHC17514, "I", "Started  Package ThreadId  Mode Name..." );

  0008c	b9 01 00 00 00	 mov	 ecx, 1
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159519
  0009e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159520
  000aa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159521
  000b6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000bb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c0	41 b9 03 00 00
	00		 mov	 r9d, 3
  000c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159522
  000cd	ba 96 02 00 00	 mov	 edx, 662		; 00000296H
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159523
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 663  :     WRMSG( HHC17514, "I", "-------  ------  --------  ---  -------------" );

  000df	b9 01 00 00 00	 mov	 ecx, 1
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159524
  000f1	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159525
  000fd	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159526
  00109	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0010e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00113	41 b9 03 00 00
	00		 mov	 r9d, 3
  00119	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159527
  00120	ba 97 02 00 00	 mov	 edx, 663		; 00000297H
  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159528
  0012c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 664  : 
; 665  :     /* Display all entries in list */
; 666  :     for (pLink = scr_list.Flink; pLink != &scr_list; pLink = pLink->Flink)

  00132	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR scr_list
  00139	48 89 44 24 68	 mov	 QWORD PTR pLink$[rsp], rax
  0013e	eb 0d		 jmp	 SHORT $LN4@ListSCRCTL
$LN2@ListSCRCTL:
  00140	48 8b 44 24 68	 mov	 rax, QWORD PTR pLink$[rsp]
  00145	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00148	48 89 44 24 68	 mov	 QWORD PTR pLink$[rsp], rax
$LN4@ListSCRCTL:
  0014d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:scr_list
  00154	48 39 44 24 68	 cmp	 QWORD PTR pLink$[rsp], rax
  00159	0f 84 63 01 00
	00		 je	 $LN3@ListSCRCTL

; 667  :     {
; 668  :         pCtl = CONTAINING_RECORD( pLink, SCRCTL, link );

  0015f	48 8b 44 24 68	 mov	 rax, QWORD PTR pLink$[rsp]
  00164	48 89 44 24 60	 mov	 QWORD PTR pCtl$[rsp], rax

; 669  : 
; 670  :         FormatTIMEVAL( &pCtl->scr_tv, tod, sizeof( tod ));

  00169	48 8b 44 24 60	 mov	 rax, QWORD PTR pCtl$[rsp]
  0016e	48 83 c0 10	 add	 rax, 16
  00172	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00178	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR tod$[rsp]
  00180	48 8b c8	 mov	 rcx, rax
  00183	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatTIMEVAL

; 671  : 
; 672  :         tod[ 19 ] = 0; // "YYYY-MM-DD HH:MM:SS"

  00189	b8 01 00 00 00	 mov	 eax, 1
  0018e	48 6b c0 13	 imul	 rax, rax, 19
  00192	48 89 44 24 70	 mov	 QWORD PTR $T1[rsp], rax
  00197	48 83 7c 24 70
	20		 cmp	 QWORD PTR $T1[rsp], 32	; 00000020H
  0019d	73 02		 jae	 SHORT $LN7@ListSCRCTL
  0019f	eb 05		 jmp	 SHORT $LN8@ListSCRCTL
$LN7@ListSCRCTL:
  001a1	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN8@ListSCRCTL:
  001a6	48 8b 44 24 70	 mov	 rax, QWORD PTR $T1[rsp]
  001ab	c6 84 04 98 00
	00 00 00	 mov	 BYTE PTR tod$[rsp+rax], 0

; 673  : 
; 674  :         // "%8s %6s  "TIDPAT"  %3s  %s"
; 675  :         WRMSG( HHC17515, "I"

  001b3	48 8b 44 24 60	 mov	 rax, QWORD PTR pCtl$[rsp]
  001b8	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  001bc	85 c0		 test	 eax, eax
  001be	75 11		 jne	 SHORT $LN11@ListSCRCTL
  001c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159529
  001c7	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv144[rsp], rax
  001cf	eb 35		 jmp	 SHORT $LN12@ListSCRCTL
$LN11@ListSCRCTL:
  001d1	48 8b 44 24 60	 mov	 rax, QWORD PTR pCtl$[rsp]
  001d6	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  001da	83 f8 01	 cmp	 eax, 1
  001dd	75 0e		 jne	 SHORT $LN9@ListSCRCTL
  001df	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159530
  001e6	48 89 44 24 78	 mov	 QWORD PTR tv143[rsp], rax
  001eb	eb 0c		 jmp	 SHORT $LN10@ListSCRCTL
$LN9@ListSCRCTL:
  001ed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159531
  001f4	48 89 44 24 78	 mov	 QWORD PTR tv143[rsp], rax
$LN10@ListSCRCTL:
  001f9	48 8b 44 24 78	 mov	 rax, QWORD PTR tv143[rsp]
  001fe	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv144[rsp], rax
$LN12@ListSCRCTL:
  00206	48 8b 44 24 60	 mov	 rax, QWORD PTR pCtl$[rsp]
  0020b	0f b6 48 26	 movzx	 ecx, BYTE PTR [rax+38]
  0020f	e8 00 00 00 00	 call	 PkgNum2Name
  00214	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv148[rsp], rax
  0021c	b9 01 00 00 00	 mov	 ecx, 1
  00221	48 6b c9 0b	 imul	 rcx, rcx, 11
  00225	48 8d 8c 0c 98
	00 00 00	 lea	 rcx, QWORD PTR tod$[rsp+rcx]
  0022d	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv153[rsp], rcx
  00235	b9 01 00 00 00	 mov	 ecx, 1
  0023a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00240	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pCtl$[rsp]
  00245	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00249	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0024e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv144[rsp]
  00256	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0025b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pCtl$[rsp]
  00260	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00263	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00267	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv148[rsp]
  0026f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00274	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv153[rsp]
  0027c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00281	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159532
  00288	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0028d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159533
  00294	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00299	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0029e	41 b9 03 00 00
	00		 mov	 r9d, 3
  002a4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159534
  002ab	ba aa 02 00 00	 mov	 edx, 682		; 000002aaH
  002b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159535
  002b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 676  :             , &tod[ 11 ] // HH:MM:SS
; 677  :             , PkgNum2Name( pCtl->scr_pkg )
; 678  :             , TID_CAST( pCtl->scr_tid )
; 679  :             , pCtl->scr_mode == MODE_COMMAND    ? "cmd" :
; 680  :               pCtl->scr_mode == MODE_SUBROUTINE ? "sub" : "???"
; 681  :             , pCtl->scr_name
; 682  :         );
; 683  :     }

  002bd	e9 7e fe ff ff	 jmp	 $LN2@ListSCRCTL
$LN3@ListSCRCTL:
$LN1@ListSCRCTL:
$LN6@ListSCRCTL:

; 684  : }

  002c2	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  002ca	48 33 cc	 xor	 rcx, rsp
  002cd	e8 00 00 00 00	 call	 __security_check_cookie
  002d2	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  002d9	c3		 ret	 0
ListSCRCTLs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
pLink$ = 32
pCtl$ = 40
tid$ = 64
FindSCRCTL PROC

; 623  : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 624  :     LIST_ENTRY*  pLink  = NULL;

  00008	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR pLink$[rsp], 0

; 625  :     SCRCTL*      pCtl   = NULL;

  00011	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR pCtl$[rsp], 0

; 626  : 
; 627  :     /* Prune list on regular basis */
; 628  :     PruneSCRCTL();

  0001a	e8 00 00 00 00	 call	 PruneSCRCTL

; 629  : 
; 630  :     /* Search the list to locate the desired entry */
; 631  :     for (pLink = scr_list.Flink; pLink != &scr_list; pLink = pLink->Flink)

  0001f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR scr_list
  00026	48 89 44 24 20	 mov	 QWORD PTR pLink$[rsp], rax
  0002b	eb 0d		 jmp	 SHORT $LN4@FindSCRCTL
$LN2@FindSCRCTL:
  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR pLink$[rsp]
  00032	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00035	48 89 44 24 20	 mov	 QWORD PTR pLink$[rsp], rax
$LN4@FindSCRCTL:
  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:scr_list
  00041	48 39 44 24 20	 cmp	 QWORD PTR pLink$[rsp], rax
  00046	74 29		 je	 SHORT $LN3@FindSCRCTL

; 632  :     {
; 633  :         pCtl = CONTAINING_RECORD( pLink, SCRCTL, link );

  00048	48 8b 44 24 20	 mov	 rax, QWORD PTR pLink$[rsp]
  0004d	48 89 44 24 28	 mov	 QWORD PTR pCtl$[rsp], rax

; 634  :         if (equal_threads( pCtl->scr_tid, tid ))

  00052	8b 54 24 40	 mov	 edx, DWORD PTR tid$[rsp]
  00056	48 8b 44 24 28	 mov	 rax, QWORD PTR pCtl$[rsp]
  0005b	8b 48 20	 mov	 ecx, DWORD PTR [rax+32]
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_equal_threads
  00064	85 c0		 test	 eax, eax
  00066	74 07		 je	 SHORT $LN5@FindSCRCTL

; 635  :             return pCtl; // found

  00068	48 8b 44 24 28	 mov	 rax, QWORD PTR pCtl$[rsp]
  0006d	eb 04		 jmp	 SHORT $LN1@FindSCRCTL
$LN5@FindSCRCTL:

; 636  :     }

  0006f	eb bc		 jmp	 SHORT $LN2@FindSCRCTL
$LN3@FindSCRCTL:

; 637  : 
; 638  :     return NULL;    // not found

  00071	33 c0		 xor	 eax, eax
$LN1@FindSCRCTL:

; 639  : }

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
FindSCRCTL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
pCtl$ = 64
tv72 = 72
scr_name$ = 96
scr_tid$ = 104
scr_mode$ = 112
NewSCRCTL PROC

; 589  : {

  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 590  :     SCRCTL*  pCtl;
; 591  : 
; 592  :     /* Prune list on regular basis */
; 593  :     PruneSCRCTL();

  00012	e8 00 00 00 00	 call	 PruneSCRCTL

; 594  : 
; 595  :     /* Create a new entry */
; 596  :     if (0
; 597  :         || !(pCtl = malloc( sizeof( SCRCTL )))
; 598  :         || !(pCtl->scr_name = strdup( scr_name ))

  00017	33 c0		 xor	 eax, eax
  00019	85 c0		 test	 eax, eax
  0001b	75 3e		 jne	 SHORT $LN3@NewSCRCTL
  0001d	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00022	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00028	48 89 44 24 40	 mov	 QWORD PTR pCtl$[rsp], rax
  0002d	48 83 7c 24 40
	00		 cmp	 QWORD PTR pCtl$[rsp], 0
  00033	74 26		 je	 SHORT $LN3@NewSCRCTL
  00035	48 8b 4c 24 60	 mov	 rcx, QWORD PTR scr_name$[rsp]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00040	48 89 44 24 48	 mov	 QWORD PTR tv72[rsp], rax
  00045	48 8b 44 24 40	 mov	 rax, QWORD PTR pCtl$[rsp]
  0004a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv72[rsp]
  0004f	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
  00053	48 83 7c 24 48
	00		 cmp	 QWORD PTR tv72[rsp], 0
  00059	75 56		 jne	 SHORT $LN2@NewSCRCTL
$LN3@NewSCRCTL:

; 599  :     )
; 600  :     {
; 601  :         // "Out of memory"
; 602  :         WRMSG( HHC00152, "E" );

  0005b	b9 01 00 00 00	 mov	 ecx, 1
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159477
  0006d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159478
  00079	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0007e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00083	41 b9 03 00 00
	00		 mov	 r9d, 3
  00089	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159479
  00090	ba 5a 02 00 00	 mov	 edx, 602		; 0000025aH
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159480
  0009c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 603  :         free( pCtl );

  000a2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pCtl$[rsp]
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 604  :         return NULL;

  000ad	33 c0		 xor	 eax, eax
  000af	eb 68		 jmp	 SHORT $LN1@NewSCRCTL
$LN2@NewSCRCTL:

; 605  :     }
; 606  : 
; 607  :     /* Initialize the new entry */
; 608  :     InitializeListLink( &pCtl->link );

  000b1	48 8b 44 24 40	 mov	 rax, QWORD PTR pCtl$[rsp]
  000b6	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
  000be	48 8b 44 24 40	 mov	 rax, QWORD PTR pCtl$[rsp]
  000c3	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 609  :     gettimeofday( &pCtl->scr_tv, NULL );

  000ca	48 8b 44 24 40	 mov	 rax, QWORD PTR pCtl$[rsp]
  000cf	48 83 c0 10	 add	 rax, 16
  000d3	33 d2		 xor	 edx, edx
  000d5	48 8b c8	 mov	 rcx, rax
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_gettimeofday

; 610  : 
; 611  :     pCtl->scr_tid   = scr_tid;

  000de	48 8b 44 24 40	 mov	 rax, QWORD PTR pCtl$[rsp]
  000e3	8b 4c 24 68	 mov	 ecx, DWORD PTR scr_tid$[rsp]
  000e7	89 48 20	 mov	 DWORD PTR [rax+32], ecx

; 612  :     pCtl->scr_mode  = scr_mode;

  000ea	48 8b 44 24 40	 mov	 rax, QWORD PTR pCtl$[rsp]
  000ef	0f b6 4c 24 70	 movzx	 ecx, BYTE PTR scr_mode$[rsp]
  000f4	88 48 24	 mov	 BYTE PTR [rax+36], cl

; 613  :     pCtl->scr_ended = FALSE;

  000f7	48 8b 44 24 40	 mov	 rax, QWORD PTR pCtl$[rsp]
  000fc	c6 40 25 00	 mov	 BYTE PTR [rax+37], 0

; 614  :     pCtl->scr_pkg   = PkgName2Num( PackageName );

  00100	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00107	e8 00 00 00 00	 call	 PkgName2Num
  0010c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pCtl$[rsp]
  00111	88 41 26	 mov	 BYTE PTR [rcx+38], al

; 615  : 
; 616  :     return pCtl;

  00114	48 8b 44 24 40	 mov	 rax, QWORD PTR pCtl$[rsp]
$LN1@NewSCRCTL:

; 617  : }

  00119	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0011d	c3		 ret	 0
NewSCRCTL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
pLink$ = 32
pCtl$ = 40
_EX_Flink$1 = 48
_EX_Blink$2 = 56
PruneSCRCTL PROC

; 563  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 564  :     LIST_ENTRY*  pLink  = NULL;

  00004	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR pLink$[rsp], 0

; 565  :     SCRCTL*      pCtl   = NULL;

  0000d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR pCtl$[rsp], 0

; 566  : 
; 567  :     for (pLink = scr_list.Flink; pLink != &scr_list; pLink = pLink->Flink)

  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR scr_list
  0001d	48 89 44 24 20	 mov	 QWORD PTR pLink$[rsp], rax
  00022	eb 0d		 jmp	 SHORT $LN4@PruneSCRCT
$LN2@PruneSCRCT:
  00024	48 8b 44 24 20	 mov	 rax, QWORD PTR pLink$[rsp]
  00029	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0002c	48 89 44 24 20	 mov	 QWORD PTR pLink$[rsp], rax
$LN4@PruneSCRCT:
  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:scr_list
  00038	48 39 44 24 20	 cmp	 QWORD PTR pLink$[rsp], rax
  0003d	74 6a		 je	 SHORT $LN3@PruneSCRCT

; 568  :     {
; 569  :         pCtl = CONTAINING_RECORD( pLink, SCRCTL, link );

  0003f	48 8b 44 24 20	 mov	 rax, QWORD PTR pLink$[rsp]
  00044	48 89 44 24 28	 mov	 QWORD PTR pCtl$[rsp], rax

; 570  : 
; 571  :         if (pCtl->scr_ended)

  00049	48 8b 44 24 28	 mov	 rax, QWORD PTR pCtl$[rsp]
  0004e	0f b6 40 25	 movzx	 eax, BYTE PTR [rax+37]
  00052	85 c0		 test	 eax, eax
  00054	74 4e		 je	 SHORT $LN5@PruneSCRCT

; 572  :         {
; 573  :             pLink = pLink->Blink;   // (since entry is going away)

  00056	48 8b 44 24 20	 mov	 rax, QWORD PTR pLink$[rsp]
  0005b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005f	48 89 44 24 20	 mov	 QWORD PTR pLink$[rsp], rax

; 574  :             RemoveListEntry( &pCtl->link );

  00064	48 8b 44 24 28	 mov	 rax, QWORD PTR pCtl$[rsp]
  00069	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006c	48 89 44 24 30	 mov	 QWORD PTR _EX_Flink$1[rsp], rax
  00071	48 8b 44 24 28	 mov	 rax, QWORD PTR pCtl$[rsp]
  00076	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0007a	48 89 44 24 38	 mov	 QWORD PTR _EX_Blink$2[rsp], rax
  0007f	48 8b 44 24 38	 mov	 rax, QWORD PTR _EX_Blink$2[rsp]
  00084	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _EX_Flink$1[rsp]
  00089	48 89 08	 mov	 QWORD PTR [rax], rcx
  0008c	48 8b 44 24 30	 mov	 rax, QWORD PTR _EX_Flink$1[rsp]
  00091	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _EX_Blink$2[rsp]
  00096	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 575  :             FreeSCRCTL( pCtl );     // (remove from list and free)

  0009a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pCtl$[rsp]
  0009f	e8 00 00 00 00	 call	 FreeSCRCTL
$LN5@PruneSCRCT:

; 576  :         }
; 577  :     }

  000a4	e9 7b ff ff ff	 jmp	 $LN2@PruneSCRCT
$LN3@PruneSCRCT:

; 578  : }

  000a9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ad	c3		 ret	 0
PruneSCRCTL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
pCtl$ = 48
FreeSCRCTL PROC

; 553  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 554  :     /* Free list entry and return */
; 555  :     free( pCtl->scr_name );

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR pCtl$[rsp]
  0000e	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 556  :     free( pCtl );

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pCtl$[rsp]
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 557  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
FreeSCRCTL ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
tv65 = 80
tv76 = 88
pkgnum$ = 112
verbose$ = 120
EnablePkg PROC

; 430  : {

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00008	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 431  :     switch (pkgnum)

  0000c	0f b6 44 24 70	 movzx	 eax, BYTE PTR pkgnum$[rsp]
  00011	88 44 24 50	 mov	 BYTE PTR tv65[rsp], al
  00015	80 7c 24 50 00	 cmp	 BYTE PTR tv65[rsp], 0
  0001a	74 09		 je	 SHORT $LN4@EnablePkg
  0001c	80 7c 24 50 01	 cmp	 BYTE PTR tv65[rsp], 1
  00021	74 11		 je	 SHORT $LN5@EnablePkg
  00023	eb 1b		 jmp	 SHORT $LN2@EnablePkg
$LN4@EnablePkg:

; 432  :     {
; 433  :         case                 OOREXX_PKGNUM:
; 434  :             return PKG_FUNC( OOREXX_PKG, Enable )( verbose );

  00025	0f b6 4c 24 78	 movzx	 ecx, BYTE PTR verbose$[rsp]
  0002a	e8 00 00 00 00	 call	 OORexxEnable
  0002f	e9 83 00 00 00	 jmp	 $LN1@EnablePkg
$LN5@EnablePkg:

; 435  : 
; 436  :         case                 REGINA_PKGNUM:
; 437  :             return PKG_FUNC( REGINA_PKG, Enable )( verbose );

  00034	0f b6 4c 24 78	 movzx	 ecx, BYTE PTR verbose$[rsp]
  00039	e8 00 00 00 00	 call	 ReginaEnable
  0003e	eb 77		 jmp	 SHORT $LN1@EnablePkg
$LN2@EnablePkg:

; 438  :     }
; 439  : 
; 440  :     if (verbose)

  00040	0f b6 44 24 78	 movzx	 eax, BYTE PTR verbose$[rsp]
  00045	85 c0		 test	 eax, eax
  00047	74 6c		 je	 SHORT $LN6@EnablePkg

; 441  :     {
; 442  :         // "REXX(%s) Unknown/unsupported Rexx package '%s'"
; 443  :         WRMSG( HHC17527, "E", PackageName, PkgNum2Name( pkgnum ));

  00049	0f b6 4c 24 70	 movzx	 ecx, BYTE PTR pkgnum$[rsp]
  0004e	e8 00 00 00 00	 call	 PkgNum2Name
  00053	48 89 44 24 58	 mov	 QWORD PTR tv76[rsp], rax
  00058	b9 01 00 00 00	 mov	 ecx, 1
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00063	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv76[rsp]
  00068	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00074	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159356
  00080	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159357
  0008c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00091	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00096	41 b9 03 00 00
	00		 mov	 r9d, 3
  0009c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159358
  000a3	ba bb 01 00 00	 mov	 edx, 443		; 000001bbH
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159359
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@EnablePkg:

; 444  :     }
; 445  : 
; 446  :     return FALSE;

  000b5	32 c0		 xor	 al, al
$LN1@EnablePkg:

; 447  : }

  000b7	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000bb	c3		 ret	 0
EnablePkg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
i$ = 32
tv89 = 36
tv141 = 40
token$1 = 48
work$2 = 56
arrayents$3 = 64
arrayents$4 = 72
str$ = 96
delims$ = 104
def$ = 112
empty0$ = 120
arraystr$ = 128
array$ = 136
count$ = 144
InitArray PROC

; 320  : {

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 321  :     int i;
; 322  : 
; 323  :     /* Free the old information */
; 324  :     if (*count)

  00018	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR count$[rsp]
  00020	83 38 00	 cmp	 DWORD PTR [rax], 0
  00023	0f 84 98 00 00
	00		 je	 $LN8@InitArray

; 325  :     {
; 326  :         char** arrayents = *array;

  00029	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR array$[rsp]
  00031	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00034	48 89 44 24 48	 mov	 QWORD PTR arrayents$4[rsp], rax

; 327  : 
; 328  :         for (i=0; i < *count; i++)

  00039	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00041	eb 0a		 jmp	 SHORT $LN4@InitArray
$LN2@InitArray:
  00043	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00047	ff c0		 inc	 eax
  00049	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@InitArray:
  0004d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR count$[rsp]
  00055	8b 00		 mov	 eax, DWORD PTR [rax]
  00057	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0005b	7d 16		 jge	 SHORT $LN3@InitArray

; 329  :             free( arrayents[i] );

  0005d	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00062	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arrayents$4[rsp]
  00067	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00071	eb d0		 jmp	 SHORT $LN2@InitArray
$LN3@InitArray:

; 330  : 
; 331  :         free( *array );

  00073	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR array$[rsp]
  0007b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 332  :         *array = NULL;

  00084	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR array$[rsp]
  0008c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 333  : 
; 334  :         free( *arraystr );

  00093	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR arraystr$[rsp]
  0009b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 335  :         *arraystr = NULL;

  000a4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR arraystr$[rsp]
  000ac	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 336  : 
; 337  :         *count = 0;

  000b3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR count$[rsp]
  000bb	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0
$LN8@InitArray:

; 338  :     }
; 339  : 
; 340  :     /* Initialize string to its new value */
; 341  :     if (str)

  000c1	48 83 7c 24 60
	00		 cmp	 QWORD PTR str$[rsp], 0
  000c7	74 18		 je	 SHORT $LN9@InitArray

; 342  :         *arraystr = strdup( str );

  000c9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR str$[rsp]
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000d4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR arraystr$[rsp]
  000dc	48 89 01	 mov	 QWORD PTR [rcx], rax
  000df	eb 1e		 jmp	 SHORT $LN10@InitArray
$LN9@InitArray:

; 343  :     else if (def)

  000e1	48 83 7c 24 70
	00		 cmp	 QWORD PTR def$[rsp], 0
  000e7	74 16		 je	 SHORT $LN11@InitArray

; 344  :         *arraystr = strdup( def );

  000e9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR def$[rsp]
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000f4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR arraystr$[rsp]
  000fc	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN11@InitArray:
$LN10@InitArray:

; 345  : 
; 346  :     if (!*arraystr && empty0)

  000ff	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR arraystr$[rsp]
  00107	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0010b	75 21		 jne	 SHORT $LN12@InitArray
  0010d	0f b6 44 24 78	 movzx	 eax, BYTE PTR empty0$[rsp]
  00112	85 c0		 test	 eax, eax
  00114	74 18		 je	 SHORT $LN12@InitArray

; 347  :         *arraystr = strdup( "" );

  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159303
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00123	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR arraystr$[rsp]
  0012b	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN12@InitArray:

; 348  : 
; 349  :     /* Rebuild the array using its new string value */
; 350  :     if (*arraystr)

  0012e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR arraystr$[rsp]
  00136	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0013a	0f 84 32 01 00
	00		 je	 $LN13@InitArray

; 351  :     {
; 352  :         char*  work;
; 353  :         char*  token;
; 354  :         char** arrayents;
; 355  : 
; 356  :         work = strdup( *arraystr );

  00140	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR arraystr$[rsp]
  00148	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0014b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00151	48 89 44 24 38	 mov	 QWORD PTR work$2[rsp], rax

; 357  : 
; 358  :         /* The 'empty0' option requests an extra empty string
; 359  :            entry at index 0 followed by the other entries.
; 360  :         */
; 361  :         *count = (empty0 ? 1 : 0) + tkcount( work, delims );

  00156	0f b6 44 24 78	 movzx	 eax, BYTE PTR empty0$[rsp]
  0015b	85 c0		 test	 eax, eax
  0015d	74 0a		 je	 SHORT $LN16@InitArray
  0015f	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  00167	eb 08		 jmp	 SHORT $LN17@InitArray
$LN16@InitArray:
  00169	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN17@InitArray:
  00171	48 8b 54 24 68	 mov	 rdx, QWORD PTR delims$[rsp]
  00176	48 8b 4c 24 38	 mov	 rcx, QWORD PTR work$2[rsp]
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tkcount
  00181	8b 4c 24 24	 mov	 ecx, DWORD PTR tv89[rsp]
  00185	03 c8		 add	 ecx, eax
  00187	8b c1		 mov	 eax, ecx
  00189	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR count$[rsp]
  00191	89 01		 mov	 DWORD PTR [rcx], eax

; 362  :         arrayents = *array = malloc( *count * sizeof( char* ));

  00193	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR count$[rsp]
  0019b	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0019e	48 c1 e0 03	 shl	 rax, 3
  001a2	48 8b c8	 mov	 rcx, rax
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  001ab	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR array$[rsp]
  001b3	48 89 01	 mov	 QWORD PTR [rcx], rax
  001b6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR array$[rsp]
  001be	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001c1	48 89 44 24 40	 mov	 QWORD PTR arrayents$3[rsp], rax

; 363  : 
; 364  :         if (empty0)

  001c6	0f b6 44 24 78	 movzx	 eax, BYTE PTR empty0$[rsp]
  001cb	85 c0		 test	 eax, eax
  001cd	74 1f		 je	 SHORT $LN14@InitArray

; 365  :             arrayents[0] = strdup("");

  001cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159306
  001d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  001dc	b9 08 00 00 00	 mov	 ecx, 8
  001e1	48 6b c9 00	 imul	 rcx, rcx, 0
  001e5	48 8b 54 24 40	 mov	 rdx, QWORD PTR arrayents$3[rsp]
  001ea	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
$LN14@InitArray:

; 366  : 
; 367  :         for (i = empty0 ? 1 : 0, token = strtok( work, delims );

  001ee	0f b6 44 24 78	 movzx	 eax, BYTE PTR empty0$[rsp]
  001f3	85 c0		 test	 eax, eax
  001f5	74 0a		 je	 SHORT $LN18@InitArray
  001f7	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv141[rsp], 1
  001ff	eb 08		 jmp	 SHORT $LN19@InitArray
$LN18@InitArray:
  00201	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv141[rsp], 0
$LN19@InitArray:
  00209	8b 44 24 28	 mov	 eax, DWORD PTR tv141[rsp]
  0020d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  00211	48 8b 54 24 68	 mov	 rdx, QWORD PTR delims$[rsp]
  00216	48 8b 4c 24 38	 mov	 rcx, QWORD PTR work$2[rsp]
  0021b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok
  00221	48 89 44 24 30	 mov	 QWORD PTR token$1[rsp], rax
  00226	eb 1c		 jmp	 SHORT $LN7@InitArray
$LN5@InitArray:

; 368  :             token; token = strtok( NULL, delims ), i++)

  00228	48 8b 54 24 68	 mov	 rdx, QWORD PTR delims$[rsp]
  0022d	33 c9		 xor	 ecx, ecx
  0022f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strtok
  00235	48 89 44 24 30	 mov	 QWORD PTR token$1[rsp], rax
  0023a	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0023e	ff c0		 inc	 eax
  00240	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN7@InitArray:
  00244	48 83 7c 24 30
	00		 cmp	 QWORD PTR token$1[rsp], 0
  0024a	74 1b		 je	 SHORT $LN6@InitArray

; 369  :         {
; 370  :             arrayents[i] = strdup( token );

  0024c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR token$1[rsp]
  00251	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00257	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  0025c	48 8b 54 24 40	 mov	 rdx, QWORD PTR arrayents$3[rsp]
  00261	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax

; 371  :         }

  00265	eb c1		 jmp	 SHORT $LN5@InitArray
$LN6@InitArray:

; 372  : 
; 373  :         free( work );

  00267	48 8b 4c 24 38	 mov	 rcx, QWORD PTR work$2[rsp]
  0026c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN13@InitArray:

; 374  :     }
; 375  : }

  00272	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00276	c3		 ret	 0
InitArray ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
tv68 = 32
IsDisabled PROC

; 235  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 236  :     return !IsEnabled( NULL );

  00004	33 c9		 xor	 ecx, ecx
  00006	e8 00 00 00 00	 call	 IsEnabled
  0000b	0f b6 c0	 movzx	 eax, al
  0000e	85 c0		 test	 eax, eax
  00010	75 0a		 jne	 SHORT $LN3@IsDisabled
  00012	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  0001a	eb 08		 jmp	 SHORT $LN4@IsDisabled
$LN3@IsDisabled:
  0001c	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN4@IsDisabled:
  00024	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv68[rsp]

; 237  : }

  00029	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002d	c3		 ret	 0
IsDisabled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
tv88 = 32
pkgname$ = 64
IsEnabled PROC

; 208  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 209  :     return

  00009	33 c0		 xor	 eax, eax
  0000b	83 f8 01	 cmp	 eax, 1
  0000e	0f 84 b0 00 00
	00		 je	 $LN3@IsEnabled
  00014	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR PackageName, 0
  0001c	0f 84 a2 00 00
	00		 je	 $LN3@IsEnabled
  00022	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR PackageVersion, 0
  0002a	0f 84 94 00 00
	00		 je	 $LN3@IsEnabled
  00030	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR PackageSource, 0
  00038	0f 84 86 00 00
	00		 je	 $LN3@IsEnabled
  0003e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ExecCmd, 0
  00046	74 7c		 je	 SHORT $LN3@IsEnabled
  00048	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ExecSub, 0
  00050	74 72		 je	 SHORT $LN3@IsEnabled
  00052	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR HaltExec, 0
  0005a	74 68		 je	 SHORT $LN3@IsEnabled
  0005c	33 c0		 xor	 eax, eax
  0005e	85 c0		 test	 eax, eax
  00060	75 58		 jne	 SHORT $LN5@IsEnabled
  00062	33 c0		 xor	 eax, eax
  00064	83 f8 01	 cmp	 eax, 1
  00067	74 2f		 je	 SHORT $LN4@IsEnabled
  00069	48 83 7c 24 40
	00		 cmp	 QWORD PTR pkgname$[rsp], 0
  0006f	74 27		 je	 SHORT $LN4@IsEnabled
  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pkgname$[rsp]
  00076	e8 00 00 00 00	 call	 IsValidPackage
  0007b	0f b6 c0	 movzx	 eax, al
  0007e	85 c0		 test	 eax, eax
  00080	74 16		 je	 SHORT $LN4@IsEnabled
  00082	48 8b 54 24 40	 mov	 rdx, QWORD PTR pkgname$[rsp]
  00087	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00094	85 c0		 test	 eax, eax
  00096	74 22		 je	 SHORT $LN5@IsEnabled
$LN4@IsEnabled:
  00098	33 c0		 xor	 eax, eax
  0009a	83 f8 01	 cmp	 eax, 1
  0009d	74 25		 je	 SHORT $LN6@IsEnabled
  0009f	48 83 7c 24 40
	00		 cmp	 QWORD PTR pkgname$[rsp], 0
  000a5	75 1d		 jne	 SHORT $LN6@IsEnabled
  000a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  000ae	e8 00 00 00 00	 call	 IsValidPackage
  000b3	0f b6 c0	 movzx	 eax, al
  000b6	85 c0		 test	 eax, eax
  000b8	74 0a		 je	 SHORT $LN3@IsEnabled
$LN5@IsEnabled:
  000ba	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
  000c2	eb 08		 jmp	 SHORT $LN7@IsEnabled
$LN3@IsEnabled:
$LN6@IsEnabled:
  000c4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN7@IsEnabled:
  000cc	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv88[rsp]

; 210  :     (1
; 211  :         && PackageName
; 212  :         && PackageVersion
; 213  :         && PackageSource
; 214  :         && ExecCmd
; 215  :         && ExecSub
; 216  :         && HaltExec
; 217  :         && (0
; 218  :             || (1
; 219  :                 && pkgname
; 220  :                 && IsValidPackage( pkgname )
; 221  :                 && strcasecmp( PackageName, pkgname ) == 0
; 222  :                )
; 223  :             || (1
; 224  :                 && !pkgname
; 225  :                 && IsValidPackage( PackageName )
; 226  :                )
; 227  :            )
; 228  :     );
; 229  : }

  000d1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d5	c3		 ret	 0
IsEnabled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
pkgnum$1 = 32
pkgname$ = 64
IsValidPackage PROC

; 193  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 194  :     if (pkgname)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR pkgname$[rsp], 0
  0000f	74 3e		 je	 SHORT $LN5@IsValidPac

; 195  :     {
; 196  :         BYTE pkgnum;
; 197  :         for (pkgnum=0; pkgnum < PKGS; pkgnum++)

  00011	c6 44 24 20 00	 mov	 BYTE PTR pkgnum$1[rsp], 0
  00016	eb 0b		 jmp	 SHORT $LN4@IsValidPac
$LN2@IsValidPac:
  00018	0f b6 44 24 20	 movzx	 eax, BYTE PTR pkgnum$1[rsp]
  0001d	fe c0		 inc	 al
  0001f	88 44 24 20	 mov	 BYTE PTR pkgnum$1[rsp], al
$LN4@IsValidPac:
  00023	0f b6 44 24 20	 movzx	 eax, BYTE PTR pkgnum$1[rsp]
  00028	83 f8 02	 cmp	 eax, 2
  0002b	7d 22		 jge	 SHORT $LN3@IsValidPac

; 198  :             if (strcasecmp( pkgname, PkgNum2Name( pkgnum )) == 0)

  0002d	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR pkgnum$1[rsp]
  00032	e8 00 00 00 00	 call	 PkgNum2Name
  00037	48 8b d0	 mov	 rdx, rax
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pkgname$[rsp]
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00045	85 c0		 test	 eax, eax
  00047	75 04		 jne	 SHORT $LN6@IsValidPac

; 199  :                 return TRUE;

  00049	b0 01		 mov	 al, 1
  0004b	eb 04		 jmp	 SHORT $LN1@IsValidPac
$LN6@IsValidPac:
  0004d	eb c9		 jmp	 SHORT $LN2@IsValidPac
$LN3@IsValidPac:
$LN5@IsValidPac:

; 200  :     }
; 201  :     return FALSE;

  0004f	32 c0		 xor	 al, al
$LN1@IsValidPac:

; 202  : }

  00051	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00055	c3		 ret	 0
IsValidPackage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
pkgnum$ = 8
PkgNum2Name PROC

; 183  : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 184  :     if (pkgnum < _countof( PkgNames ))

  00004	0f b6 44 24 08	 movzx	 eax, BYTE PTR pkgnum$[rsp]
  00009	48 83 f8 02	 cmp	 rax, 2
  0000d	73 12		 jae	 SHORT $LN2@PkgNum2Nam

; 185  :         return PkgNames[ pkgnum ];

  0000f	0f b6 44 24 08	 movzx	 eax, BYTE PTR pkgnum$[rsp]
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PkgNames
  0001b	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0001f	eb 07		 jmp	 SHORT $LN1@PkgNum2Nam
$LN2@PkgNum2Nam:

; 186  :     return "??????";

  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159203
$LN1@PkgNum2Nam:

; 187  : }

  00028	c3		 ret	 0
PkgNum2Name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
pkgnum$ = 32
pkgname$ = 64
PkgName2Num PROC

; 171  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 172  :     BYTE pkgnum;
; 173  :     for (pkgnum = 0; pkgnum < _countof( PkgNames ); pkgnum++)

  00009	c6 44 24 20 00	 mov	 BYTE PTR pkgnum$[rsp], 0
  0000e	eb 0b		 jmp	 SHORT $LN4@PkgName2Nu
$LN2@PkgName2Nu:
  00010	0f b6 44 24 20	 movzx	 eax, BYTE PTR pkgnum$[rsp]
  00015	fe c0		 inc	 al
  00017	88 44 24 20	 mov	 BYTE PTR pkgnum$[rsp], al
$LN4@PkgName2Nu:
  0001b	0f b6 44 24 20	 movzx	 eax, BYTE PTR pkgnum$[rsp]
  00020	48 83 f8 02	 cmp	 rax, 2
  00024	73 28		 jae	 SHORT $LN3@PkgName2Nu

; 174  :         if (strcasecmp( PkgNames[ pkgnum ], pkgname ) == 0)

  00026	0f b6 44 24 20	 movzx	 eax, BYTE PTR pkgnum$[rsp]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PkgNames
  00032	48 8b 54 24 40	 mov	 rdx, QWORD PTR pkgname$[rsp]
  00037	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00041	85 c0		 test	 eax, eax
  00043	75 07		 jne	 SHORT $LN5@PkgName2Nu

; 175  :             return pkgnum;

  00045	0f b6 44 24 20	 movzx	 eax, BYTE PTR pkgnum$[rsp]
  0004a	eb 04		 jmp	 SHORT $LN1@PkgName2Nu
$LN5@PkgName2Nu:
  0004c	eb c2		 jmp	 SHORT $LN2@PkgName2Nu
$LN3@PkgName2Nu:

; 176  :     return -1;

  0004e	b0 ff		 mov	 al, 255			; 000000ffH
$LN1@PkgName2Nu:

; 177  : }

  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
PkgName2Num ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
ReportVersionSource PROC

; 160  : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 161  :     // "REXX(%s) VERSION: %s"
; 162  :     // "REXX(%s) SOURCE: %s"
; 163  :     WRMSG( HHC17528, "I", PackageName, PackageVersion );

  00004	b9 01 00 00 00	 mov	 ecx, 1
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0000f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageVersion
  00016	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0001b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00022	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159181
  0002e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159182
  0003a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0003f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00044	41 b9 03 00 00
	00		 mov	 r9d, 3
  0004a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159183
  00051	ba a3 00 00 00	 mov	 edx, 163		; 000000a3H
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159184
  0005d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 164  :     WRMSG( HHC17529, "I", PackageName, PackageSource  );

  00063	b9 01 00 00 00	 mov	 ecx, 1
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0006e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageSource
  00075	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0007a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00081	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159185
  0008d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159186
  00099	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0009e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a3	41 b9 03 00 00
	00		 mov	 r9d, 3
  000a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159187
  000b0	ba a4 00 00 00	 mov	 edx, 164		; 000000a4H
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159188
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 165  : }

  000c2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c6	c3		 ret	 0
ReportVersionSource ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
rc$ = 80
cur_pkg$1 = 81
pLink$2 = 88
pCtl$3 = 96
tv128 = 104
CancelAllRexxExecs PROC

; 1477 : {

  00000	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1478 :     BYTE rc = TRUE;

  00004	c6 44 24 50 01	 mov	 BYTE PTR rc$[rsp], 1

; 1479 : 
; 1480 :     obtain_lock( &scr_lock );

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159998
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1481 :     {
; 1482 :         LIST_ENTRY*  pLink    = NULL;

  0001d	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR pLink$2[rsp], 0

; 1483 :         SCRCTL*      pCtl     = NULL;

  00026	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR pCtl$3[rsp], 0

; 1484 :         BYTE         cur_pkg  = PkgName2Num( PackageName );

  0002f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00036	e8 00 00 00 00	 call	 PkgName2Num
  0003b	88 44 24 51	 mov	 BYTE PTR cur_pkg$1[rsp], al

; 1485 : 
; 1486 :         for (pLink = scr_list.Flink; pLink != &scr_list; pLink = pLink->Flink)

  0003f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR scr_list
  00046	48 89 44 24 58	 mov	 QWORD PTR pLink$2[rsp], rax
  0004b	eb 0d		 jmp	 SHORT $LN4@CancelAllR
$LN2@CancelAllR:
  0004d	48 8b 44 24 58	 mov	 rax, QWORD PTR pLink$2[rsp]
  00052	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00055	48 89 44 24 58	 mov	 QWORD PTR pLink$2[rsp], rax
$LN4@CancelAllR:
  0005a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:scr_list
  00061	48 39 44 24 58	 cmp	 QWORD PTR pLink$2[rsp], rax
  00066	0f 84 2e 01 00
	00		 je	 $LN3@CancelAllR

; 1487 :         {
; 1488 :             pCtl = CONTAINING_RECORD( pLink, SCRCTL, link );

  0006c	48 8b 44 24 58	 mov	 rax, QWORD PTR pLink$2[rsp]
  00071	48 89 44 24 60	 mov	 QWORD PTR pCtl$3[rsp], rax

; 1489 : 
; 1490 :             /* Temporarily enable same package as script's */
; 1491 :             if (!EnablePkg( pCtl->scr_pkg, FALSE ))

  00076	33 d2		 xor	 edx, edx
  00078	48 8b 44 24 60	 mov	 rax, QWORD PTR pCtl$3[rsp]
  0007d	0f b6 48 26	 movzx	 ecx, BYTE PTR [rax+38]
  00081	e8 00 00 00 00	 call	 EnablePkg
  00086	0f b6 c0	 movzx	 eax, al
  00089	85 c0		 test	 eax, eax
  0008b	75 69		 jne	 SHORT $LN5@CancelAllR

; 1492 :             {
; 1493 :                 // "REXX(%s) Could not enable %sRexx package"
; 1494 :                 WRMSG( HHC17511, "E", "", "temporary " );

  0008d	b9 01 00 00 00	 mov	 ecx, 1
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160001
  0009f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160002
  000ab	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160003
  000b7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160004
  000c3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000cd	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160005
  000da	ba d6 05 00 00	 mov	 edx, 1494		; 000005d6H
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160006
  000e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1495 :                 rc = FALSE;

  000ec	c6 44 24 50 00	 mov	 BYTE PTR rc$[rsp], 0

; 1496 :             }

  000f1	e9 9f 00 00 00	 jmp	 $LN6@CancelAllR
$LN5@CancelAllR:

; 1497 :             else
; 1498 :             {
; 1499 :                 /* Now ask Rexx to HALT that script */
; 1500 :                 if (HaltExec( getpid(), pCtl->scr_tid ) != 0)

  000f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getpid
  000fc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pCtl$3[rsp]
  00101	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  00104	8b c8		 mov	 ecx, eax
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR HaltExec
  0010c	85 c0		 test	 eax, eax
  0010e	0f 84 81 00 00
	00		 je	 $LN7@CancelAllR

; 1501 :                 {
; 1502 :                     // "REXX(%s) Signal HALT "TIDPAT" %s"
; 1503 :                     WRMSG( HHC17520, "E", PkgNum2Name( pCtl->scr_pkg ),

  00114	48 8b 44 24 60	 mov	 rax, QWORD PTR pCtl$3[rsp]
  00119	0f b6 48 26	 movzx	 ecx, BYTE PTR [rax+38]
  0011d	e8 00 00 00 00	 call	 PkgNum2Name
  00122	48 89 44 24 68	 mov	 QWORD PTR tv128[rsp], rax
  00127	b9 01 00 00 00	 mov	 ecx, 1
  0012c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160008
  00139	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0013e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pCtl$3[rsp]
  00143	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00146	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0014a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv128[rsp]
  0014f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160009
  0015b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00160	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160010
  00167	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0016c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00171	41 b9 03 00 00
	00		 mov	 r9d, 3
  00177	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160011
  0017e	ba e0 05 00 00	 mov	 edx, 1504		; 000005e0H
  00183	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160012
  0018a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1504 :                         TID_CAST( pCtl->scr_tid ), "failed" );
; 1505 :                     rc = FALSE;

  00190	c6 44 24 50 00	 mov	 BYTE PTR rc$[rsp], 0
$LN7@CancelAllR:
$LN6@CancelAllR:

; 1506 :                 }
; 1507 :             }
; 1508 :         }

  00195	e9 b3 fe ff ff	 jmp	 $LN2@CancelAllR
$LN3@CancelAllR:

; 1509 : 
; 1510 :         /* Re-enable the original package */
; 1511 :         if (!EnablePkg( cur_pkg, FALSE ))

  0019a	33 d2		 xor	 edx, edx
  0019c	0f b6 4c 24 51	 movzx	 ecx, BYTE PTR cur_pkg$1[rsp]
  001a1	e8 00 00 00 00	 call	 EnablePkg
  001a6	0f b6 c0	 movzx	 eax, al
  001a9	85 c0		 test	 eax, eax
  001ab	75 64		 jne	 SHORT $LN8@CancelAllR

; 1512 :         {
; 1513 :             // "REXX(%s) Could not enable %sRexx package"
; 1514 :             WRMSG( HHC17511, "E", PackageName, "original " );

  001ad	b9 01 00 00 00	 mov	 ecx, 1
  001b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160014
  001bf	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  001c4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  001cb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  001d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160015
  001d7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160016
  001e3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001e8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ed	41 b9 03 00 00
	00		 mov	 r9d, 3
  001f3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160017
  001fa	ba ea 05 00 00	 mov	 edx, 1514		; 000005eaH
  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160018
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1515 :             rc = FALSE;

  0020c	c6 44 24 50 00	 mov	 BYTE PTR rc$[rsp], 0
$LN8@CancelAllR:

; 1516 :         }
; 1517 : 
; 1518 :     }
; 1519 :     release_lock( &scr_lock );

  00211	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160019
  00218	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  0021f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1520 : 
; 1521 :     return rc;

  00225	0f b6 44 24 50	 movzx	 eax, BYTE PTR rc$[rsp]

; 1522 : }

  0022a	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0022e	c3		 ret	 0
CancelAllRexxExecs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
rc$ = 80
cur_pkg$1 = 81
pCtl$2 = 88
tv141 = 96
tid$ = 128
CancelRexxExec PROC

; 1422 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1423 :     BYTE rc = TRUE;

  00008	c6 44 24 50 01	 mov	 BYTE PTR rc$[rsp], 1

; 1424 : 
; 1425 :     obtain_lock( &scr_lock );

  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159955
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 1426 :     {
; 1427 :         SCRCTL*  pCtl;
; 1428 :         BYTE     cur_pkg;
; 1429 : 
; 1430 :         if (!(pCtl = FindSCRCTL( tid )))

  00021	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tid$[rsp]
  00028	e8 00 00 00 00	 call	 FindSCRCTL
  0002d	48 89 44 24 58	 mov	 QWORD PTR pCtl$2[rsp], rax
  00032	48 83 7c 24 58
	00		 cmp	 QWORD PTR pCtl$2[rsp], 0
  00038	75 6d		 jne	 SHORT $LN2@CancelRexx

; 1431 :         {
; 1432 :             // "Asynchronous Rexx script "TIDPAT" not found"
; 1433 :             WRMSG( HHC17517, "E", TID_CAST( tid ));

  0003a	b9 01 00 00 00	 mov	 ecx, 1
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00045	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tid$[rsp]
  0004c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159957
  00057	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159958
  00063	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00068	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00073	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159959
  0007a	ba 99 05 00 00	 mov	 edx, 1433		; 00000599H
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159960
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1434 :             release_lock( &scr_lock );

  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159961
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1435 :             return FALSE;

  000a0	32 c0		 xor	 al, al
  000a2	e9 bf 01 00 00	 jmp	 $LN1@CancelRexx
$LN2@CancelRexx:

; 1436 :         }
; 1437 : 
; 1438 :         /* Save current package */
; 1439 :         cur_pkg = PkgName2Num( PackageName );

  000a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  000ae	e8 00 00 00 00	 call	 PkgName2Num
  000b3	88 44 24 51	 mov	 BYTE PTR cur_pkg$1[rsp], al

; 1440 : 
; 1441 :         /* Temporarily enable same package as script's */
; 1442 :         if (!EnablePkg( pCtl->scr_pkg, FALSE ))

  000b7	33 d2		 xor	 edx, edx
  000b9	48 8b 44 24 58	 mov	 rax, QWORD PTR pCtl$2[rsp]
  000be	0f b6 48 26	 movzx	 ecx, BYTE PTR [rax+38]
  000c2	e8 00 00 00 00	 call	 EnablePkg
  000c7	0f b6 c0	 movzx	 eax, al
  000ca	85 c0		 test	 eax, eax
  000cc	75 69		 jne	 SHORT $LN3@CancelRexx

; 1443 :         {
; 1444 :             // "REXX(%s) Could not enable %sRexx package"
; 1445 :             WRMSG( HHC17511, "E", "", "temporary " );

  000ce	b9 01 00 00 00	 mov	 ecx, 1
  000d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159964
  000e0	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159965
  000ec	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159966
  000f8	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159967
  00104	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00109	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0010e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00114	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159968
  0011b	ba a5 05 00 00	 mov	 edx, 1445		; 000005a5H
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159969
  00127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1446 :             rc = FALSE;

  0012d	c6 44 24 50 00	 mov	 BYTE PTR rc$[rsp], 0

; 1447 :         }

  00132	e9 9f 00 00 00	 jmp	 $LN4@CancelRexx
$LN3@CancelRexx:

; 1448 :         else
; 1449 :         {
; 1450 :             /* Now ask Rexx to HALT that script */
; 1451 :             if (HaltExec( getpid(), pCtl->scr_tid ) != 0)

  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getpid
  0013d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pCtl$2[rsp]
  00142	8b 51 20	 mov	 edx, DWORD PTR [rcx+32]
  00145	8b c8		 mov	 ecx, eax
  00147	ff 15 00 00 00
	00		 call	 QWORD PTR HaltExec
  0014d	85 c0		 test	 eax, eax
  0014f	0f 84 81 00 00
	00		 je	 $LN5@CancelRexx

; 1452 :             {
; 1453 :                 // "REXX(%s) Signal HALT "TIDPAT" %s"
; 1454 :                 WRMSG( HHC17520, "E", PkgNum2Name( pCtl->scr_pkg ),

  00155	48 8b 44 24 58	 mov	 rax, QWORD PTR pCtl$2[rsp]
  0015a	0f b6 48 26	 movzx	 ecx, BYTE PTR [rax+38]
  0015e	e8 00 00 00 00	 call	 PkgNum2Name
  00163	48 89 44 24 60	 mov	 QWORD PTR tv141[rsp], rax
  00168	b9 01 00 00 00	 mov	 ecx, 1
  0016d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00173	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159971
  0017a	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0017f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pCtl$2[rsp]
  00184	8b 49 20	 mov	 ecx, DWORD PTR [rcx+32]
  00187	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0018b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv141[rsp]
  00190	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159972
  0019c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159973
  001a8	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001ad	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b2	41 b9 03 00 00
	00		 mov	 r9d, 3
  001b8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159974
  001bf	ba af 05 00 00	 mov	 edx, 1455		; 000005afH
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159975
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1455 :                     TID_CAST( pCtl->scr_tid ), "failed" );
; 1456 :                 rc = FALSE;

  001d1	c6 44 24 50 00	 mov	 BYTE PTR rc$[rsp], 0
$LN5@CancelRexx:
$LN4@CancelRexx:

; 1457 :             }
; 1458 :         }
; 1459 : 
; 1460 :         /* Re-enable the original package */
; 1461 :         if (!EnablePkg( cur_pkg, FALSE ))

  001d6	33 d2		 xor	 edx, edx
  001d8	0f b6 4c 24 51	 movzx	 ecx, BYTE PTR cur_pkg$1[rsp]
  001dd	e8 00 00 00 00	 call	 EnablePkg
  001e2	0f b6 c0	 movzx	 eax, al
  001e5	85 c0		 test	 eax, eax
  001e7	75 64		 jne	 SHORT $LN6@CancelRexx

; 1462 :         {
; 1463 :             // "REXX(%s) Could not enable %sRexx package"
; 1464 :             WRMSG( HHC17511, "E", PackageName, "original " );

  001e9	b9 01 00 00 00	 mov	 ecx, 1
  001ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159977
  001fb	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00200	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00207	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159978
  00213	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00218	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159979
  0021f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00224	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00229	41 b9 03 00 00
	00		 mov	 r9d, 3
  0022f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159980
  00236	ba b8 05 00 00	 mov	 edx, 1464		; 000005b8H
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159981
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1465 :             rc = FALSE;

  00248	c6 44 24 50 00	 mov	 BYTE PTR rc$[rsp], 0
$LN6@CancelRexx:

; 1466 :         }
; 1467 :     }
; 1468 :     release_lock( &scr_lock );

  0024d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159982
  00254	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  0025b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 1469 : 
; 1470 :     return rc;

  00261	0f b6 44 24 50	 movzx	 eax, BYTE PTR rc$[rsp]
$LN1@CancelRexx:

; 1471 : }

  00266	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0026a	c3		 ret	 0
CancelRexxExec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
tv71 = 80
tv92 = 88
tv145 = 96
tv166 = 104
tv187 = 112
tv240 = 120
tv261 = 128
tv282 = 136
tv64 = 144
tv89 = 152
tv142 = 160
tv163 = 168
tv184 = 176
tv237 = 184
tv259 = 192
tv280 = 200
buf$ = 208
__$ArrayPad$ = 464
DisplayOptions PROC

; 1272 : {

  00000	40 57		 push	 rdi
  00002	48 81 ec e0 01
	00 00		 sub	 rsp, 480		; 000001e0H
  00009	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00010	48 33 c4	 xor	 rax, rsp
  00013	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1273 :     char buf[ 256 ] = {0};

  0001b	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR buf$[rsp]
  00023	48 8b f8	 mov	 rdi, rax
  00026	33 c0		 xor	 eax, eax
  00028	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  0002d	f3 aa		 rep stosb

; 1274 : 
; 1275 :     // "REXX(%s) %s"
; 1276 :     MSGBUF( buf, "Mode            : %s", RexxMode == MODE_COMMAND ? "Command" : "Subroutine" );

  0002f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR RexxMode
  00036	85 c0		 test	 eax, eax
  00038	75 0e		 jne	 SHORT $LN3@DisplayOpt
  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159835
  00041	48 89 44 24 50	 mov	 QWORD PTR tv71[rsp], rax
  00046	eb 0c		 jmp	 SHORT $LN4@DisplayOpt
$LN3@DisplayOpt:
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159836
  0004f	48 89 44 24 50	 mov	 QWORD PTR tv71[rsp], rax
$LN4@DisplayOpt:
  00054	4c 8b 4c 24 50	 mov	 r9, QWORD PTR tv71[rsp]
  00059	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159837
  00060	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00065	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1277 :     WRMSG( HHC17500, "I", PackageName, RTRIM( buf ));

  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159838
  0007a	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  00088	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv64[rsp], rax
  00090	b9 01 00 00 00	 mov	 ecx, 1
  00095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0009b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv64[rsp]
  000a3	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  000a8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  000af	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159839
  000bb	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159840
  000c7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000cc	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000d1	41 b9 03 00 00
	00		 mov	 r9d, 3
  000d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159841
  000de	ba fd 04 00 00	 mov	 edx, 1277		; 000004fdH
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159842
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1278 : 
; 1279 :     // "REXX(%s) %s"
; 1280 :     MSGBUF( buf, "MsgLevel        : %s", MsgLevel ? "On" : "Off" );

  000f0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR MsgLevel
  000f7	85 c0		 test	 eax, eax
  000f9	74 0e		 je	 SHORT $LN5@DisplayOpt
  000fb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159843
  00102	48 89 44 24 58	 mov	 QWORD PTR tv92[rsp], rax
  00107	eb 0c		 jmp	 SHORT $LN6@DisplayOpt
$LN5@DisplayOpt:
  00109	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159844
  00110	48 89 44 24 58	 mov	 QWORD PTR tv92[rsp], rax
$LN6@DisplayOpt:
  00115	4c 8b 4c 24 58	 mov	 r9, QWORD PTR tv92[rsp]
  0011a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159845
  00121	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00126	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1281 :     WRMSG( HHC17500, "I", PackageName, RTRIM( buf ));

  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159846
  0013b	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00143	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  00149	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv89[rsp], rax
  00151	b9 01 00 00 00	 mov	 ecx, 1
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0015c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv89[rsp]
  00164	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00169	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00170	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00175	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159847
  0017c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00181	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159848
  00188	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0018d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00192	41 b9 03 00 00
	00		 mov	 r9d, 3
  00198	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159849
  0019f	ba 01 05 00 00	 mov	 edx, 1281		; 00000501H
  001a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159850
  001ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1282 : 
; 1283 :     // "REXX(%s) %s"
; 1284 :     MSGBUF( buf, "MsgPrefix       : %s", MsgPrefix ? "On" : "Off" );

  001b1	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR MsgPrefix
  001b8	85 c0		 test	 eax, eax
  001ba	74 0e		 je	 SHORT $LN7@DisplayOpt
  001bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159851
  001c3	48 89 44 24 60	 mov	 QWORD PTR tv145[rsp], rax
  001c8	eb 0c		 jmp	 SHORT $LN8@DisplayOpt
$LN7@DisplayOpt:
  001ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159852
  001d1	48 89 44 24 60	 mov	 QWORD PTR tv145[rsp], rax
$LN8@DisplayOpt:
  001d6	4c 8b 4c 24 60	 mov	 r9, QWORD PTR tv145[rsp]
  001db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159853
  001e2	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  001e7	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  001ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1285 :     WRMSG( HHC17500, "I", PackageName, RTRIM( buf ));

  001f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159854
  001fc	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00204	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  0020a	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv142[rsp], rax
  00212	b9 01 00 00 00	 mov	 ecx, 1
  00217	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0021d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv142[rsp]
  00225	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0022a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00231	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00236	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159855
  0023d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00242	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159856
  00249	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0024e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00253	41 b9 03 00 00
	00		 mov	 r9d, 3
  00259	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159857
  00260	ba 05 05 00 00	 mov	 edx, 1285		; 00000505H
  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159858
  0026c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1286 : 
; 1287 :     // "REXX(%s) %s"
; 1288 :     MSGBUF( buf, "ErrPrefix       : %s", ErrPrefix ? "On" : "Off" );

  00272	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ErrPrefix
  00279	85 c0		 test	 eax, eax
  0027b	74 0e		 je	 SHORT $LN9@DisplayOpt
  0027d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159859
  00284	48 89 44 24 68	 mov	 QWORD PTR tv166[rsp], rax
  00289	eb 0c		 jmp	 SHORT $LN10@DisplayOpt
$LN9@DisplayOpt:
  0028b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159860
  00292	48 89 44 24 68	 mov	 QWORD PTR tv166[rsp], rax
$LN10@DisplayOpt:
  00297	4c 8b 4c 24 68	 mov	 r9, QWORD PTR tv166[rsp]
  0029c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159861
  002a3	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  002a8	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  002b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1289 :     WRMSG( HHC17500, "I", PackageName, RTRIM( buf ));

  002b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159862
  002bd	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  002c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  002cb	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv163[rsp], rax
  002d3	b9 01 00 00 00	 mov	 ecx, 1
  002d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002de	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv163[rsp]
  002e6	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002eb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  002f2	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159863
  002fe	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00303	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159864
  0030a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0030f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00314	41 b9 03 00 00
	00		 mov	 r9d, 3
  0031a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159865
  00321	ba 09 05 00 00	 mov	 edx, 1289		; 00000509H
  00326	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159866
  0032d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1290 : 
; 1291 :     // "REXX(%s) %s"
; 1292 :     MSGBUF( buf, "Resolver        : %s", useResolver ? "On" : "Off" );

  00333	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR useResolver
  0033a	85 c0		 test	 eax, eax
  0033c	74 0e		 je	 SHORT $LN11@DisplayOpt
  0033e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159867
  00345	48 89 44 24 70	 mov	 QWORD PTR tv187[rsp], rax
  0034a	eb 0c		 jmp	 SHORT $LN12@DisplayOpt
$LN11@DisplayOpt:
  0034c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159868
  00353	48 89 44 24 70	 mov	 QWORD PTR tv187[rsp], rax
$LN12@DisplayOpt:
  00358	4c 8b 4c 24 70	 mov	 r9, QWORD PTR tv187[rsp]
  0035d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159869
  00364	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00369	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00371	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1293 :     WRMSG( HHC17500, "I", PackageName, RTRIM( buf ));

  00377	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159870
  0037e	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00386	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  0038c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv184[rsp], rax
  00394	b9 01 00 00 00	 mov	 ecx, 1
  00399	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0039f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv184[rsp]
  003a7	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  003ac	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  003b3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159871
  003bf	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159872
  003cb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003d5	41 b9 03 00 00
	00		 mov	 r9d, 3
  003db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159873
  003e2	ba 0d 05 00 00	 mov	 edx, 1293		; 0000050dH
  003e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159874
  003ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1294 : 
; 1295 :     // "REXX(%s) %s"
; 1296 :     MSGBUF( buf, "SysPath    (%2d) : %s", SysPathCount, useSysPath ? "On" : "Off" );

  003f4	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR useSysPath
  003fb	85 c0		 test	 eax, eax
  003fd	74 0e		 je	 SHORT $LN13@DisplayOpt
  003ff	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159875
  00406	48 89 44 24 78	 mov	 QWORD PTR tv240[rsp], rax
  0040b	eb 0c		 jmp	 SHORT $LN14@DisplayOpt
$LN13@DisplayOpt:
  0040d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159876
  00414	48 89 44 24 78	 mov	 QWORD PTR tv240[rsp], rax
$LN14@DisplayOpt:
  00419	48 8b 44 24 78	 mov	 rax, QWORD PTR tv240[rsp]
  0041e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00423	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR SysPathCount
  0042a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159877
  00431	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00436	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0043e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1297 :     WRMSG( HHC17500, "I", PackageName, RTRIM( buf ));

  00444	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159878
  0044b	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00453	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  00459	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv237[rsp], rax
  00461	b9 01 00 00 00	 mov	 ecx, 1
  00466	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0046c	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv237[rsp]
  00474	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00479	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00480	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00485	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159879
  0048c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00491	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159880
  00498	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0049d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004a2	41 b9 03 00 00
	00		 mov	 r9d, 3
  004a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159881
  004af	ba 11 05 00 00	 mov	 edx, 1297		; 00000511H
  004b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159882
  004bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1298 : 
; 1299 :     MSGBUF( buf,"RexxPath   (%2d) : %s", RexxPathCount, RexxPathCount ? RexxPath : "" );

  004c1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR RexxPathCount, 0
  004c8	74 11		 je	 SHORT $LN15@DisplayOpt
  004ca	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RexxPath
  004d1	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv261[rsp], rax
  004d9	eb 0f		 jmp	 SHORT $LN16@DisplayOpt
$LN15@DisplayOpt:
  004db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159883
  004e2	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv261[rsp], rax
$LN16@DisplayOpt:
  004ea	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv261[rsp]
  004f2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004f7	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR RexxPathCount
  004fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159884
  00505	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0050a	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00512	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1300 :     // "REXX(%s) %s"
; 1301 :     WRMSG( HHC17500, "I", PackageName, RTRIM( buf ));

  00518	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159885
  0051f	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  00527	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  0052d	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv259[rsp], rax
  00535	b9 01 00 00 00	 mov	 ecx, 1
  0053a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00540	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv259[rsp]
  00548	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0054d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00554	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00559	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159886
  00560	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00565	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159887
  0056c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00571	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00576	41 b9 03 00 00
	00		 mov	 r9d, 3
  0057c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159888
  00583	ba 15 05 00 00	 mov	 edx, 1301		; 00000515H
  00588	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159889
  0058f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1302 : 
; 1303 :     // NOTE: we use "ExtensionsCount-1" because the
; 1304 :     // first entry is our dummy empty-string entry.
; 1305 : 
; 1306 :     MSGBUF( buf, "Extensions (%2d) : %s", ExtensionsCount-1, ExtensionsCount > 1 ? Extensions : "" );

  00595	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ExtensionsCount, 1
  0059c	7e 11		 jle	 SHORT $LN17@DisplayOpt
  0059e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR Extensions
  005a5	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv282[rsp], rax
  005ad	eb 0f		 jmp	 SHORT $LN18@DisplayOpt
$LN17@DisplayOpt:
  005af	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159890
  005b6	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv282[rsp], rax
$LN18@DisplayOpt:
  005be	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ExtensionsCount
  005c4	ff c8		 dec	 eax
  005c6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv282[rsp]
  005ce	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  005d3	44 8b c8	 mov	 r9d, eax
  005d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159891
  005dd	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  005e2	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  005ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1307 :     // "REXX(%s) %s"
; 1308 :     WRMSG( HHC17500, "I", PackageName, RTRIM( buf ));

  005f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159892
  005f7	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  005ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_rtrim
  00605	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv280[rsp], rax
  0060d	b9 01 00 00 00	 mov	 ecx, 1
  00612	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00618	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv280[rsp]
  00620	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00625	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  0062c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00631	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159893
  00638	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0063d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159894
  00644	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00649	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0064e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00654	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159895
  0065b	ba 1c 05 00 00	 mov	 edx, 1308		; 0000051cH
  00660	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159896
  00667	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1309 : }

  0066d	48 8b 8c 24 d0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00675	48 33 cc	 xor	 rcx, rsp
  00678	e8 00 00 00 00	 call	 __security_check_cookie
  0067d	48 81 c4 e0 01
	00 00		 add	 rsp, 480		; 000001e0H
  00684	5f		 pop	 rdi
  00685	c3		 ret	 0
DisplayOptions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
Disable	PROC

; 418  :     PackageName     = "";

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159344
  00007	48 89 05 00 00
	00 00		 mov	 QWORD PTR PackageName, rax

; 419  :     PackageVersion  = NULL;

  0000e	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR PackageVersion, 0

; 420  :     PackageSource   = NULL;

  00019	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR PackageSource, 0

; 421  :     ExecCmd         = NULL;

  00024	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR ExecCmd, 0

; 422  :     ExecSub         = NULL;

  0002f	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR ExecSub, 0

; 423  :     HaltExec        = NULL;

  0003a	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR HaltExec, 0

; 424  : }

  00045	c3		 ret	 0
Disable	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
oldpkg$1 = 80
wPackage$ = 112
Enable	PROC

; 453  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 454  :     static const BYTE verbose = FALSE;
; 455  : 
; 456  :     if (!wPackage)                  // (if not specified)

  00009	48 83 7c 24 70
	00		 cmp	 QWORD PTR wPackage$[rsp], 0
  0000f	75 0c		 jne	 SHORT $LN2@Enable

; 457  :         wPackage = DefaultPackage;  // (then use default)

  00011	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR DefaultPackage
  00018	48 89 44 24 70	 mov	 QWORD PTR wPackage$[rsp], rax
$LN2@Enable:

; 458  : 
; 459  :     if (!wPackage[0])               // (unspecified same as "auto")

  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	48 6b c0 00	 imul	 rax, rax, 0
  00026	48 8b 4c 24 70	 mov	 rcx, QWORD PTR wPackage$[rsp]
  0002b	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0002f	85 c0		 test	 eax, eax
  00031	75 0c		 jne	 SHORT $LN3@Enable

; 460  :         wPackage = "auto";          // (unspecified same as "auto")

  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG159371
  0003a	48 89 44 24 70	 mov	 QWORD PTR wPackage$[rsp], rax
$LN3@Enable:

; 461  : 
; 462  :     /* If the desired package is already enabled then just return */
; 463  :     if (IsEnabled( wPackage ))

  0003f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR wPackage$[rsp]
  00044	e8 00 00 00 00	 call	 IsEnabled
  00049	0f b6 c0	 movzx	 eax, al
  0004c	85 c0		 test	 eax, eax
  0004e	74 07		 je	 SHORT $LN4@Enable

; 464  :         return 0;

  00050	33 c0		 xor	 eax, eax
  00052	e9 7e 04 00 00	 jmp	 $LN1@Enable
$LN4@Enable:

; 465  : 
; 466  :     /* Enabling package "none" same as Disabling/Stopping Rexx */
; 467  :     if (strcasecmp( wPackage, "none" ) == 0)

  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159374
  0005e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR wPackage$[rsp]
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00069	85 c0		 test	 eax, eax
  0006b	0f 85 e0 00 00
	00		 jne	 $LN5@Enable

; 468  :     {
; 469  :         if (IsEnabled( NULL ))

  00071	33 c9		 xor	 ecx, ecx
  00073	e8 00 00 00 00	 call	 IsEnabled
  00078	0f b6 c0	 movzx	 eax, al
  0007b	85 c0		 test	 eax, eax
  0007d	74 75		 je	 SHORT $LN6@Enable

; 470  :         {
; 471  :             char* oldpkg = strdup( PackageName );

  0007f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0008c	48 89 44 24 50	 mov	 QWORD PTR oldpkg$1[rsp], rax

; 472  :             Disable();

  00091	e8 00 00 00 00	 call	 Disable

; 473  :             // "REXX(%s) Rexx has been stopped/disabled"
; 474  :             WRMSG( HHC17526, "W", oldpkg );

  00096	b9 01 00 00 00	 mov	 ecx, 1
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000a1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR oldpkg$1[rsp]
  000a6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159377
  000b2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159378
  000be	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159379
  000d5	ba da 01 00 00	 mov	 edx, 474		; 000001daH
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159380
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 475  :             free( oldpkg );

  000e7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR oldpkg$1[rsp]
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 476  :         }

  000f2	eb 53		 jmp	 SHORT $LN7@Enable
$LN6@Enable:

; 477  :         else
; 478  :         {
; 479  :             // "REXX(%s) Rexx already stopped/disabled"
; 480  :             WRMSG( HHC17523, "W", "" );

  000f4	b9 01 00 00 00	 mov	 ecx, 1
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159381
  00106	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159382
  00112	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00117	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159383
  0011e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00123	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00128	41 b9 03 00 00
	00		 mov	 r9d, 3
  0012e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159384
  00135	ba e0 01 00 00	 mov	 edx, 480		; 000001e0H
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159385
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN7@Enable:

; 481  :         }
; 482  :         return +1; // ("none" requested)

  00147	b8 01 00 00 00	 mov	 eax, 1
  0014c	e9 84 03 00 00	 jmp	 $LN1@Enable
$LN5@Enable:

; 483  :     }
; 484  : 
; 485  :     /* Can't Enable a different Rexx package until the
; 486  :        the currently enabled package is disabled first. */
; 487  :     if (IsEnabled( NULL ))

  00151	33 c9		 xor	 ecx, ecx
  00153	e8 00 00 00 00	 call	 IsEnabled
  00158	0f b6 c0	 movzx	 eax, al
  0015b	85 c0		 test	 eax, eax
  0015d	74 5d		 je	 SHORT $LN8@Enable

; 488  :     {
; 489  :         // "REXX(%s) Rexx already started/enabled"
; 490  :         WRMSG( HHC17522, "E", PackageName );

  0015f	b9 01 00 00 00	 mov	 ecx, 1
  00164	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0016a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00171	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00176	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159387
  0017d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159388
  00189	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0018e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00193	41 b9 03 00 00
	00		 mov	 r9d, 3
  00199	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159389
  001a0	ba ea 01 00 00	 mov	 edx, 490		; 000001eaH
  001a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159390
  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 491  :         return -1;

  001b2	b8 ff ff ff ff	 mov	 eax, -1
  001b7	e9 19 03 00 00	 jmp	 $LN1@Enable
$LN8@Enable:

; 492  :     }
; 493  : 
; 494  :     if (strcasecmp( wPackage, "auto" ) == 0)

  001bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159393
  001c3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR wPackage$[rsp]
  001c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001ce	85 c0		 test	 eax, eax
  001d0	0f 85 5f 01 00
	00		 jne	 $LN9@Enable

; 495  :     {
; 496  :         if (1
; 497  :             && OORexxAvailable
; 498  :             && Enable( OOREXX_PKGNAME ) == 0

  001d6	33 c0		 xor	 eax, eax
  001d8	83 f8 01	 cmp	 eax, 1
  001db	74 73		 je	 SHORT $LN11@Enable
  001dd	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR OORexxAvailable
  001e4	85 c0		 test	 eax, eax
  001e6	74 68		 je	 SHORT $LN11@Enable
  001e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159396
  001ef	e8 00 00 00 00	 call	 Enable
  001f4	85 c0		 test	 eax, eax
  001f6	75 58		 jne	 SHORT $LN11@Enable

; 499  :         )
; 500  :         {
; 501  :             // "REXX(%s) Rexx has been started/enabled"
; 502  :             WRMSG( HHC17525, "I", OOREXX_PKGNAME );

  001f8	b9 01 00 00 00	 mov	 ecx, 1
  001fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00203	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159397
  0020a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0020f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159398
  00216	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0021b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159399
  00222	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00227	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0022c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00232	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159400
  00239	ba f6 01 00 00	 mov	 edx, 502		; 000001f6H
  0023e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159401
  00245	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 503  :         }

  0024b	e9 e0 00 00 00	 jmp	 $LN12@Enable
$LN11@Enable:

; 504  :         else if (1
; 505  :             && ReginaAvailable
; 506  :             && Enable( REGINA_PKGNAME ) == 0

  00250	33 c0		 xor	 eax, eax
  00252	83 f8 01	 cmp	 eax, 1
  00255	74 70		 je	 SHORT $LN13@Enable
  00257	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ReginaAvailable
  0025e	85 c0		 test	 eax, eax
  00260	74 65		 je	 SHORT $LN13@Enable
  00262	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159404
  00269	e8 00 00 00 00	 call	 Enable
  0026e	85 c0		 test	 eax, eax
  00270	75 55		 jne	 SHORT $LN13@Enable

; 507  :         )
; 508  :         {
; 509  :             // "REXX(%s) Rexx has been started/enabled"
; 510  :             WRMSG( HHC17525, "I", REGINA_PKGNAME );

  00272	b9 01 00 00 00	 mov	 ecx, 1
  00277	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0027d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159405
  00284	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00289	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159406
  00290	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00295	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159407
  0029c	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002a1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002a6	41 b9 03 00 00
	00		 mov	 r9d, 3
  002ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159408
  002b3	ba fe 01 00 00	 mov	 edx, 510		; 000001feH
  002b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159409
  002bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 511  :         }

  002c5	eb 69		 jmp	 SHORT $LN14@Enable
$LN13@Enable:

; 512  :         else
; 513  :         {
; 514  :             // "REXX(%s) Could not enable %sRexx package"
; 515  :             WRMSG( HHC17511, "E", "", "either " );

  002c7	b9 01 00 00 00	 mov	 ecx, 1
  002cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159410
  002d9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  002de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159411
  002e5	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159412
  002f1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159413
  002fd	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00302	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00307	41 b9 03 00 00
	00		 mov	 r9d, 3
  0030d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159414
  00314	ba 03 02 00 00	 mov	 edx, 515		; 00000203H
  00319	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159415
  00320	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 516  :             return -1;

  00326	b8 ff ff ff ff	 mov	 eax, -1
  0032b	e9 a5 01 00 00	 jmp	 $LN1@Enable
$LN14@Enable:
$LN12@Enable:

; 517  :         }
; 518  :     }

  00330	e9 9e 01 00 00	 jmp	 $LN10@Enable
$LN9@Enable:

; 519  :     else if (strcasecmp( OOREXX_PKGNAME, wPackage ) == 0)

  00335	48 8b 54 24 70	 mov	 rdx, QWORD PTR wPackage$[rsp]
  0033a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159418
  00341	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00347	85 c0		 test	 eax, eax
  00349	0f 85 86 00 00
	00		 jne	 $LN15@Enable

; 520  :     {
; 521  :         if (!EnablePkg( OOREXX_PKGNUM, verbose ))

  0034f	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?verbose@?1??Enable@@9@9
  00356	33 c9		 xor	 ecx, ecx
  00358	e8 00 00 00 00	 call	 EnablePkg
  0035d	0f b6 c0	 movzx	 eax, al
  00360	85 c0		 test	 eax, eax
  00362	75 67		 jne	 SHORT $LN17@Enable

; 522  :         {
; 523  :             // "REXX(%s) Could not enable %sRexx package"
; 524  :             WRMSG( HHC17511, "E", wPackage, "requested " );

  00364	b9 01 00 00 00	 mov	 ecx, 1
  00369	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0036f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159420
  00376	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0037b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR wPackage$[rsp]
  00380	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00385	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159421
  0038c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00391	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159422
  00398	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0039d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003a2	41 b9 03 00 00
	00		 mov	 r9d, 3
  003a8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159423
  003af	ba 0c 02 00 00	 mov	 edx, 524		; 0000020cH
  003b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159424
  003bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 525  :             return -1;

  003c1	b8 ff ff ff ff	 mov	 eax, -1
  003c6	e9 0a 01 00 00	 jmp	 $LN1@Enable
$LN17@Enable:

; 526  :         }
; 527  :         ReportVersionSource();

  003cb	e8 00 00 00 00	 call	 ReportVersionSource

; 528  :     }

  003d0	e9 fe 00 00 00	 jmp	 $LN16@Enable
$LN15@Enable:

; 529  :     else if (strcasecmp( REGINA_PKGNAME, wPackage ) == 0)

  003d5	48 8b 54 24 70	 mov	 rdx, QWORD PTR wPackage$[rsp]
  003da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159427
  003e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  003e7	85 c0		 test	 eax, eax
  003e9	0f 85 80 00 00
	00		 jne	 $LN18@Enable

; 530  :     {
; 531  :         if (!EnablePkg( REGINA_PKGNUM, verbose ))

  003ef	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?verbose@?1??Enable@@9@9
  003f6	b1 01		 mov	 cl, 1
  003f8	e8 00 00 00 00	 call	 EnablePkg
  003fd	0f b6 c0	 movzx	 eax, al
  00400	85 c0		 test	 eax, eax
  00402	75 64		 jne	 SHORT $LN20@Enable

; 532  :         {
; 533  :             // "REXX(%s) Could not enable %sRexx package"
; 534  :             WRMSG( HHC17511, "E", wPackage, "requested " );

  00404	b9 01 00 00 00	 mov	 ecx, 1
  00409	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0040f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159429
  00416	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0041b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR wPackage$[rsp]
  00420	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00425	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159430
  0042c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00431	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159431
  00438	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0043d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00442	41 b9 03 00 00
	00		 mov	 r9d, 3
  00448	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159432
  0044f	ba 16 02 00 00	 mov	 edx, 534		; 00000216H
  00454	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159433
  0045b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 535  :             return -1;

  00461	b8 ff ff ff ff	 mov	 eax, -1
  00466	eb 6d		 jmp	 SHORT $LN1@Enable
$LN20@Enable:

; 536  :         }
; 537  :         ReportVersionSource();

  00468	e8 00 00 00 00	 call	 ReportVersionSource

; 538  :     }

  0046d	eb 64		 jmp	 SHORT $LN19@Enable
$LN18@Enable:

; 539  :     else
; 540  :     {
; 541  :         // "REXX(%s) Unknown/unsupported Rexx package '%s'"
; 542  :         WRMSG( HHC17527, "E", "", wPackage );

  0046f	b9 01 00 00 00	 mov	 ecx, 1
  00474	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0047a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR wPackage$[rsp]
  0047f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00484	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159434
  0048b	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00490	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159435
  00497	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0049c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159436
  004a3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004ad	41 b9 03 00 00
	00		 mov	 r9d, 3
  004b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159437
  004ba	ba 1e 02 00 00	 mov	 edx, 542		; 0000021eH
  004bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159438
  004c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 543  :         return -1;

  004cc	b8 ff ff ff ff	 mov	 eax, -1
  004d1	eb 02		 jmp	 SHORT $LN1@Enable
$LN19@Enable:
$LN16@Enable:
$LN10@Enable:

; 544  :     }
; 545  : 
; 546  :     return 0;

  004d3	33 c0		 xor	 eax, eax
$LN1@Enable:

; 547  : }

  004d5	48 83 c4 68	 add	 rsp, 104		; 00000068H
  004d9	c3		 ret	 0
Enable	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
empty0$ = 64
wExtensions$ = 96
InitializeExtensions PROC

; 399  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 400  :     /* The 'empty0' option requests an extra empty string
; 401  :        entry at index 0 followed by the other entries. Thus
; 402  :        our ExtensionsArray will always have at least one
; 403  :        entry and ExtensionsCount will always be at least 1.
; 404  :     */
; 405  :     BYTE empty0 = TRUE;

  00009	c6 44 24 40 01	 mov	 BYTE PTR empty0$[rsp], 1

; 406  : 
; 407  :     InitArray( wExtensions, EXTDELIM, DefaultExtensions, empty0,

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ExtensionsCount
  00015	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:ExtensionsArray
  00021	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Extensions
  0002d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00032	44 0f b6 4c 24
	40		 movzx	 r9d, BYTE PTR empty0$[rsp]
  00038	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR DefaultExtensions
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159328
  00046	48 8b 4c 24 60	 mov	 rcx, QWORD PTR wExtensions$[rsp]
  0004b	e8 00 00 00 00	 call	 InitArray
$LN4@Initialize:

; 408  :         &Extensions, &ExtensionsArray, &ExtensionsCount );
; 409  : 
; 410  :     ASSERT( ExtensionsCount >= 1 );

  00050	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ExtensionsCount, 1
  00057	7d 5c		 jge	 SHORT $LN8@Initialize
$LN7@Initialize:
  00059	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159330
  00060	41 b8 9a 01 00
	00		 mov	 r8d, 410		; 0000019aH
  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159331
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159332
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_logmsg
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  00080	85 c0		 test	 eax, eax
  00082	74 20		 je	 SHORT $LN9@Initialize
  00084	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:$SG159334
  0008b	41 b8 9a 01 00
	00		 mov	 r8d, 410		; 0000019aH
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159335
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159336
  0009f	e8 00 00 00 00	 call	 DebuggerTrace
$LN9@Initialize:
  000a4	33 c0		 xor	 eax, eax
  000a6	85 c0		 test	 eax, eax
  000a8	75 af		 jne	 SHORT $LN7@Initialize
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_IsDebuggerPresent
  000b0	85 c0		 test	 eax, eax
  000b2	74 01		 je	 SHORT $LN10@Initialize
  000b4	cc		 int	 3
$LN10@Initialize:
$LN8@Initialize:
  000b5	33 c0		 xor	 eax, eax
  000b7	85 c0		 test	 eax, eax
  000b9	75 95		 jne	 SHORT $LN4@Initialize

; 411  : }

  000bb	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000bf	c3		 ret	 0
InitializeExtensions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
empty0$ = 64
path$ = 72
wPath$ = 96
InitializePaths PROC

; 381  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 382  :     const char* path = get_symbol( "PATH" );

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159314
  00010	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_get_symbol
  00016	48 89 44 24 48	 mov	 QWORD PTR path$[rsp], rax

; 383  :     BYTE empty0 = FALSE;

  0001b	c6 44 24 40 00	 mov	 BYTE PTR empty0$[rsp], 0

; 384  : 
; 385  :     if (path && !*path)

  00020	48 83 7c 24 48
	00		 cmp	 QWORD PTR path$[rsp], 0
  00026	74 15		 je	 SHORT $LN2@Initialize
  00028	48 8b 44 24 48	 mov	 rax, QWORD PTR path$[rsp]
  0002d	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00030	85 c0		 test	 eax, eax
  00032	75 09		 jne	 SHORT $LN2@Initialize

; 386  :         path = NULL;

  00034	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR path$[rsp], 0
$LN2@Initialize:

; 387  : 
; 388  :     InitArray( wPath, PATHDELIM, DefaultRexxPath, empty0,

  0003d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:RexxPathCount
  00044	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:RexxPathArray
  00050	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:RexxPath
  0005c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00061	44 0f b6 4c 24
	40		 movzx	 r9d, BYTE PTR empty0$[rsp]
  00067	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR DefaultRexxPath
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159316
  00075	48 8b 4c 24 60	 mov	 rcx, QWORD PTR wPath$[rsp]
  0007a	e8 00 00 00 00	 call	 InitArray

; 389  :         &RexxPath, &RexxPathArray, &RexxPathCount );
; 390  : 
; 391  :     InitArray( path, PATHDELIM, NULL, empty0,

  0007f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:SysPathCount
  00086	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0008b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:SysPathArray
  00092	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00097	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:SysPath
  0009e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a3	44 0f b6 4c 24
	40		 movzx	 r9d, BYTE PTR empty0$[rsp]
  000a9	45 33 c0	 xor	 r8d, r8d
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159317
  000b3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR path$[rsp]
  000b8	e8 00 00 00 00	 call	 InitArray

; 392  :         &SysPath, &SysPathArray, &SysPathCount );
; 393  : }

  000bd	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c1	c3		 ret	 0
InitializePaths ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
sym$ = 32
InitializeDefaults PROC

; 273  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 274  :     const char* sym;
; 275  : 
; 276  :     /* Retrieve and save the user's preferred default values */
; 277  : 
; 278  :     if (!(sym = get_symbol( "HREXX_PACKAGE" )) || !*sym)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159241
  0000b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_get_symbol
  00011	48 89 44 24 20	 mov	 QWORD PTR sym$[rsp], rax
  00016	48 83 7c 24 20
	00		 cmp	 QWORD PTR sym$[rsp], 0
  0001c	74 0c		 je	 SHORT $LN4@Initialize
  0001e	48 8b 44 24 20	 mov	 rax, QWORD PTR sym$[rsp]
  00023	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00026	85 c0		 test	 eax, eax
  00028	75 16		 jne	 SHORT $LN2@Initialize
$LN4@Initialize:

; 279  :         DefaultPackage = strdup( DEFAULT_PACKAGE );

  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159242
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00037	48 89 05 00 00
	00 00		 mov	 QWORD PTR DefaultPackage, rax
  0003e	eb 12		 jmp	 SHORT $LN3@Initialize
$LN2@Initialize:

; 280  :     else
; 281  :         DefaultPackage = strdup( sym );

  00040	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sym$[rsp]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0004b	48 89 05 00 00
	00 00		 mov	 QWORD PTR DefaultPackage, rax
$LN3@Initialize:

; 282  : 
; 283  :     if (!(sym = get_symbol( "HREXX_MODE" )) || !*sym)

  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159246
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_get_symbol
  0005f	48 89 44 24 20	 mov	 QWORD PTR sym$[rsp], rax
  00064	48 83 7c 24 20
	00		 cmp	 QWORD PTR sym$[rsp], 0
  0006a	74 0c		 je	 SHORT $LN7@Initialize
  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR sym$[rsp]
  00071	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00074	85 c0		 test	 eax, eax
  00076	75 09		 jne	 SHORT $LN5@Initialize
$LN7@Initialize:

; 284  :         DefaultMode = DEFAULT_MODE;

  00078	c6 05 00 00 00
	00 00		 mov	 BYTE PTR DefaultMode, 0
  0007f	eb 45		 jmp	 SHORT $LN6@Initialize
$LN5@Initialize:

; 285  :     else
; 286  :     {
; 287  :         if (strcasecmp( sym, "Command" ) == 0)

  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159249
  00088	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sym$[rsp]
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00093	85 c0		 test	 eax, eax
  00095	75 09		 jne	 SHORT $LN8@Initialize

; 288  :             DefaultMode = MODE_COMMAND;

  00097	c6 05 00 00 00
	00 00		 mov	 BYTE PTR DefaultMode, 0
  0009e	eb 26		 jmp	 SHORT $LN9@Initialize
$LN8@Initialize:

; 289  :         else if (strcasecmp( sym, "Subroutine" ) == 0)

  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159252
  000a7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sym$[rsp]
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  000b2	85 c0		 test	 eax, eax
  000b4	75 09		 jne	 SHORT $LN10@Initialize

; 290  :             DefaultMode = MODE_SUBROUTINE;

  000b6	c6 05 00 00 00
	00 01		 mov	 BYTE PTR DefaultMode, 1
  000bd	eb 07		 jmp	 SHORT $LN11@Initialize
$LN10@Initialize:

; 291  :         else
; 292  :             DefaultMode = DEFAULT_MODE;

  000bf	c6 05 00 00 00
	00 00		 mov	 BYTE PTR DefaultMode, 0
$LN11@Initialize:
$LN9@Initialize:
$LN6@Initialize:

; 293  :     }
; 294  : 
; 295  :     if (!(sym = get_symbol( "HREXX_PATH" )) || !*sym)

  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159256
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_get_symbol
  000d3	48 89 44 24 20	 mov	 QWORD PTR sym$[rsp], rax
  000d8	48 83 7c 24 20
	00		 cmp	 QWORD PTR sym$[rsp], 0
  000de	74 0c		 je	 SHORT $LN14@Initialize
  000e0	48 8b 44 24 20	 mov	 rax, QWORD PTR sym$[rsp]
  000e5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000e8	85 c0		 test	 eax, eax
  000ea	75 16		 jne	 SHORT $LN12@Initialize
$LN14@Initialize:

; 296  :         DefaultRexxPath = strdup( DEFAULT_REXXPATH );

  000ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159257
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  000f9	48 89 05 00 00
	00 00		 mov	 QWORD PTR DefaultRexxPath, rax
  00100	eb 12		 jmp	 SHORT $LN13@Initialize
$LN12@Initialize:

; 297  :     else
; 298  :         DefaultRexxPath = strdup( sym );

  00102	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sym$[rsp]
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0010d	48 89 05 00 00
	00 00		 mov	 QWORD PTR DefaultRexxPath, rax
$LN13@Initialize:

; 299  : 
; 300  :     if (!(sym = get_symbol( "HREXX_EXTENSIONS" )) || !*sym)

  00114	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159261
  0011b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_get_symbol
  00121	48 89 44 24 20	 mov	 QWORD PTR sym$[rsp], rax
  00126	48 83 7c 24 20
	00		 cmp	 QWORD PTR sym$[rsp], 0
  0012c	74 0c		 je	 SHORT $LN17@Initialize
  0012e	48 8b 44 24 20	 mov	 rax, QWORD PTR sym$[rsp]
  00133	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00136	85 c0		 test	 eax, eax
  00138	75 16		 jne	 SHORT $LN15@Initialize
$LN17@Initialize:

; 301  :         DefaultExtensions = strdup( DEFAULT_EXTENSIONS );

  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159262
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  00147	48 89 05 00 00
	00 00		 mov	 QWORD PTR DefaultExtensions, rax
  0014e	eb 12		 jmp	 SHORT $LN16@Initialize
$LN15@Initialize:

; 302  :     else
; 303  :         DefaultExtensions = strdup( sym );

  00150	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sym$[rsp]
  00155	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strdup
  0015b	48 89 05 00 00
	00 00		 mov	 QWORD PTR DefaultExtensions, rax
$LN16@Initialize:

; 304  : 
; 305  :     /* Initialize the defaults */
; 306  : 
; 307  :     PackageName = DefaultPackage;

  00162	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR DefaultPackage
  00169	48 89 05 00 00
	00 00		 mov	 QWORD PTR PackageName, rax

; 308  :     RexxMode    = DefaultMode;

  00170	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR DefaultMode
  00177	88 05 00 00 00
	00		 mov	 BYTE PTR RexxMode, al

; 309  : 
; 310  :     InitializePaths( NULL );

  0017d	33 c9		 xor	 ecx, ecx
  0017f	e8 00 00 00 00	 call	 InitializePaths

; 311  :     InitializeExtensions( NULL );

  00184	33 c9		 xor	 ecx, ecx
  00186	e8 00 00 00 00	 call	 InitializeExtensions

; 312  : }

  0018b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0018f	c3		 ret	 0
InitializeDefaults ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
verbose$ = 8
OORexxEnable PROC

; 134  :   static BYTE PKG_FUNC( OOREXX_PKG, Enable )( BYTE verbose ) {UNREFERENCED(verbose);return FALSE;}

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
$LN4@OORexxEnab:
  00004	33 c0		 xor	 eax, eax
  00006	85 c0		 test	 eax, eax
  00008	75 fa		 jne	 SHORT $LN4@OORexxEnab
  0000a	32 c0		 xor	 al, al
  0000c	c3		 ret	 0
OORexxEnable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
verbose$ = 8
OORexxLoad PROC

; 133  :   static BYTE PKG_FUNC( OOREXX_PKG, Load   )( BYTE verbose ) {UNREFERENCED(verbose);return FALSE;}

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
$LN4@OORexxLoad:
  00004	33 c0		 xor	 eax, eax
  00006	85 c0		 test	 eax, eax
  00008	75 fa		 jne	 SHORT $LN4@OORexxLoad
  0000a	32 c0		 xor	 al, al
  0000c	c3		 ret	 0
OORexxLoad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
InitializeRexx PROC

; 243  : {

$LN4:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 244  :     static const BYTE verbose = TRUE;   // (always during startup)
; 245  : 
; 246  :     /* Initialize script control */
; 247  :     initialize_lock      ( &scr_lock );

  00004	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159224
  0000b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159225
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_lock

; 248  :     initialize_condition ( &scr_cond );

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159226
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_cond
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_initialize_condition

; 249  :     InitializeListHead   ( &scr_list );

  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:scr_list
  0003a	48 89 05 08 00
	00 00		 mov	 QWORD PTR scr_list+8, rax
  00041	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR scr_list+8
  00048	48 89 05 00 00
	00 00		 mov	 QWORD PTR scr_list, rax

; 250  : 
; 251  :     /* Initialize default options */
; 252  :     InitializeDefaults();

  0004f	e8 00 00 00 00	 call	 InitializeDefaults

; 253  : 
; 254  :     /* Load all available Rexx packages */
; 255  :     OORexxAvailable = PKG_FUNC( OOREXX_PKG, Load )( verbose );

  00054	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?verbose@?1??InitializeRexx@@9@9
  0005b	e8 00 00 00 00	 call	 OORexxLoad
  00060	88 05 00 00 00
	00		 mov	 BYTE PTR OORexxAvailable, al

; 256  :     ReginaAvailable = PKG_FUNC( REGINA_PKG, Load )( verbose );

  00066	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?verbose@?1??InitializeRexx@@9@9
  0006d	e8 00 00 00 00	 call	 ReginaLoad
  00072	88 05 00 00 00
	00		 mov	 BYTE PTR ReginaAvailable, al

; 257  : 
; 258  :     /* Automatically enable default Rexx package if possible */
; 259  :     if (Enable( DefaultPackage ) != 0)

  00078	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR DefaultPackage
  0007f	e8 00 00 00 00	 call	 Enable
  00084	85 c0		 test	 eax, eax
  00086	74 5f		 je	 SHORT $LN2@Initialize

; 260  :     {
; 261  :         // "REXX(%s) Could not enable %sRexx package"
; 262  :         WRMSG( HHC17511, "E", "", "default " );

  00088	b9 01 00 00 00	 mov	 ecx, 1
  0008d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159228
  0009a	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159229
  000a6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159230
  000b2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159231
  000be	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c8	41 b9 03 00 00
	00		 mov	 r9d, 3
  000ce	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159232
  000d5	ba 06 01 00 00	 mov	 edx, 262		; 00000106H
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159233
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN2@Initialize:

; 263  :     }
; 264  : 
; 265  :     /* Always show options at start regardless of Rexx start success */
; 266  :     DisplayOptions();

  000e7	e8 00 00 00 00	 call	 DisplayOptions

; 267  : }

  000ec	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f0	c3		 ret	 0
InitializeRexx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
found$ = 80
i$ = 84
haveMode$ = 88
async$ = 89
rc$ = 92
iarg$ = 96
n$ = 100
mode$ = 104
num_sub_args$1 = 108
pscriptname$ = 112
script_argstring$2 = 120
script_arg_idx$3 = 128
sub_args_array$4 = 136
script_arg$5 = 144
execcmd$6 = 152
_fstat64$ = 160
scriptname$ = 224
__$ArrayPad$ = 496
argc$ = 528
argv$ = 536
cmdline$ = 544
exec_cmd PROC

; 1528 : {

$LN56:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 08 02
	00 00		 sub	 rsp, 520		; 00000208H
  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001c	48 33 c4	 xor	 rax, rsp
  0001f	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 1529 :     char* pscriptname;
; 1530 :     char  scriptname[ MAX_FULLPATH_LEN ];
; 1531 :     struct stat fstat;
; 1532 :     int   rc, mode, iarg, i, n;
; 1533 : 
; 1534 :     BYTE  haveMode  = FALSE;

  00027	c6 44 24 58 00	 mov	 BYTE PTR haveMode$[rsp], 0

; 1535 :     BYTE  found     = FALSE;

  0002c	c6 44 24 50 00	 mov	 BYTE PTR found$[rsp], 0

; 1536 :     BYTE  async     = FALSE;

  00031	c6 44 24 59 00	 mov	 BYTE PTR async$[rsp], 0

; 1537 : 
; 1538 :     if (!(sysblk.shcmdopt & SHCMDOPT_ENABLE))

  00036	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  0003d	0f b6 80 2f 11
	00 00		 movzx	 eax, BYTE PTR [rax+4399]
  00044	83 e0 01	 and	 eax, 1
  00047	85 c0		 test	 eax, eax
  00049	75 51		 jne	 SHORT $LN17@exec_cmd

; 1539 :     {
; 1540 :         // "Shell/Exec commands are disabled"
; 1541 :         WRMSG( HHC02227, "E" );

  0004b	b9 01 00 00 00	 mov	 ecx, 1
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160064
  0005d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160065
  00069	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0006e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00073	41 b9 03 00 00
	00		 mov	 r9d, 3
  00079	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160066
  00080	ba 05 06 00 00	 mov	 edx, 1541		; 00000605H
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160067
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1542 :         return -1;

  00092	b8 ff ff ff ff	 mov	 eax, -1
  00097	e9 99 08 00 00	 jmp	 $LN1@exec_cmd
$LN17@exec_cmd:

; 1543 :     }
; 1544 : 
; 1545 :     /*-----------------------------------------------------------------
; 1546 : 
; 1547 :                           -------------------
; 1548 :                             PROGRAMMING NOTE
; 1549 :                           -------------------
; 1550 : 
; 1551 : 
; 1552 :       argv[0] is the Hercules command ("exec").
; 1553 : 
; 1554 :       argv[1] is the optional execution mode ("sub" or "cmd").
; 1555 : 
; 1556 :       argv[2] (or argv[1] if the optional mode wasn't specified)
; 1557 :               is the name of the Rexx script to be executed.
; 1558 : 
; 1559 :       argv[3] (or argv[2] if the optional mode wasn't specified)
; 1560 :               through "argv[argc-1]" are the script's arguments.
; 1561 : 
; 1562 :       When the script is called in subroutine mode, it is passed
; 1563 :       multiple arguments, so our job is easy: we simply call the
; 1564 :       "ExecSub" function passing it argv[3] (or argv[2]) through
; 1565 :       argv[argc-1].
; 1566 : 
; 1567 :                           *******************
; 1568 :                           **   IMPORTANT!  **
; 1569 :                           *******************
; 1570 : 
; 1571 :       When the script is called in command mode however, then we
; 1572 :       call "ExecCmd" and pass it just a single argument: the re-
; 1573 :       mainder of the unparsed command-line immediately following
; 1574 :       the script name, passed as a single long string.
; 1575 : 
; 1576 :       This means we need to pass it a pointer to the above "cmdline"
; 1577 :       argument that was passed to us, but indexed to where argv[2]
; 1578 :       (or argv[1]) begins, i.e. past the command name ("exec") and
; 1579 :       optional execution mode ("sub" or "cmd") and script name arg-
; 1580 :       uments, to where the argument immediately following the script
; 1581 :       name actually begins within the "cmdline" string.
; 1582 : 
; 1583 :       This means the "argv" array passed to us MUST correspond to
; 1584 :       a proper Hercules command parsing of the "cmdline" string.
; 1585 :       That is to say, you should NEVER call the "exec_cmd" function
; 1586 :       directly yourself.  Instead, you should call "panel_command"
; 1587 :       and let it call this function as expected.
; 1588 : 
; 1589 :       Refer to the "(mode == MODE_COMMAND)" statement block further
; 1590 :       below for details regarding this requirement.
; 1591 : 
; 1592 :     -----------------------------------------------------------------*/
; 1593 : 
; 1594 :     /* Make sure the Rexx Package is enabled for use */
; 1595 :     if (IsDisabled())

  0009c	e8 00 00 00 00	 call	 IsDisabled
  000a1	0f b6 c0	 movzx	 eax, al
  000a4	85 c0		 test	 eax, eax
  000a6	74 15		 je	 SHORT $LN18@exec_cmd

; 1596 :     {
; 1597 :         if (Enable( NULL ) != 0)

  000a8	33 c9		 xor	 ecx, ecx
  000aa	e8 00 00 00 00	 call	 Enable
  000af	85 c0		 test	 eax, eax
  000b1	74 0a		 je	 SHORT $LN19@exec_cmd

; 1598 :             return -1;

  000b3	b8 ff ff ff ff	 mov	 eax, -1
  000b8	e9 78 08 00 00	 jmp	 $LN1@exec_cmd
$LN19@exec_cmd:
$LN18@exec_cmd:

; 1599 :     }
; 1600 : 
; 1601 :     /* At the very minimum we need to have a script name */
; 1602 :     if (argc < 2)

  000bd	83 bc 24 10 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000c5	7d 5d		 jge	 SHORT $LN20@exec_cmd

; 1603 :     {
; 1604 :         // "REXX(%s) Exec: script name not specified"
; 1605 :         WRMSG( HHC17505, "E", PackageName  );

  000c7	b9 01 00 00 00	 mov	 ecx, 1
  000cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  000d9	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160071
  000e5	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160072
  000f1	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000f6	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000fb	41 b9 03 00 00
	00		 mov	 r9d, 3
  00101	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160073
  00108	ba 45 06 00 00	 mov	 edx, 1605		; 00000645H
  0010d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160074
  00114	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1606 :         return -1;

  0011a	b8 ff ff ff ff	 mov	 eax, -1
  0011f	e9 11 08 00 00	 jmp	 $LN1@exec_cmd
$LN20@exec_cmd:

; 1607 :     }
; 1608 : 
; 1609 :     /* If they specified an execution mode on their 'exec' command,
; 1610 :        then after honoring it, remove it from the arguments array
; 1611 :        (but KEEP argv[0], the
; 1612 :     */
; 1613 :     mode = RexxMode;

  00124	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR RexxMode
  0012b	89 44 24 68	 mov	 DWORD PTR mode$[rsp], eax

; 1614 :     iarg = 1;

  0012f	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR iarg$[rsp], 1

; 1615 : 
; 1616 :     if (0
; 1617 :         || HAVKEYW( "cmd"  ) || HAVKEYW( "com"  )
; 1618 :         || HAVKEYW( "-cmd" ) || HAVKEYW( "-com" )
; 1619 :         || HAVKEYW( "/cmd" ) || HAVKEYW( "/com" )

  00137	33 c0		 xor	 eax, eax
  00139	85 c0		 test	 eax, eax
  0013b	0f 85 d4 00 00
	00		 jne	 $LN23@exec_cmd
  00141	48 63 44 24 60	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00146	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0014e	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00152	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160078
  00159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0015f	85 c0		 test	 eax, eax
  00161	0f 84 ae 00 00
	00		 je	 $LN23@exec_cmd
  00167	48 63 44 24 60	 movsxd	 rax, DWORD PTR iarg$[rsp]
  0016c	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00174	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00178	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160079
  0017f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00185	85 c0		 test	 eax, eax
  00187	0f 84 88 00 00
	00		 je	 $LN23@exec_cmd
  0018d	48 63 44 24 60	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00192	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0019a	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0019e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160080
  001a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001ab	85 c0		 test	 eax, eax
  001ad	74 66		 je	 SHORT $LN23@exec_cmd
  001af	48 63 44 24 60	 movsxd	 rax, DWORD PTR iarg$[rsp]
  001b4	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001bc	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  001c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160081
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001cd	85 c0		 test	 eax, eax
  001cf	74 44		 je	 SHORT $LN23@exec_cmd
  001d1	48 63 44 24 60	 movsxd	 rax, DWORD PTR iarg$[rsp]
  001d6	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001de	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  001e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160082
  001e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001ef	85 c0		 test	 eax, eax
  001f1	74 22		 je	 SHORT $LN23@exec_cmd
  001f3	48 63 44 24 60	 movsxd	 rax, DWORD PTR iarg$[rsp]
  001f8	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00200	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160083
  0020b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00211	85 c0		 test	 eax, eax
  00213	75 0f		 jne	 SHORT $LN21@exec_cmd
$LN23@exec_cmd:

; 1620 :     )
; 1621 :     {
; 1622 :         mode = MODE_COMMAND;

  00215	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR mode$[rsp], 0

; 1623 :         haveMode = TRUE;

  0021d	c6 44 24 58 01	 mov	 BYTE PTR haveMode$[rsp], 1

; 1624 :     }

  00222	eb 79		 jmp	 SHORT $LN22@exec_cmd
$LN21@exec_cmd:

; 1625 :     else if (0
; 1626 :         || HAVKEYW( "sub"  )
; 1627 :         || HAVKEYW( "-sub" )
; 1628 :         || HAVKEYW( "/sub" )

  00224	33 c0		 xor	 eax, eax
  00226	85 c0		 test	 eax, eax
  00228	75 66		 jne	 SHORT $LN25@exec_cmd
  0022a	48 63 44 24 60	 movsxd	 rax, DWORD PTR iarg$[rsp]
  0022f	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00237	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160086
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00248	85 c0		 test	 eax, eax
  0024a	74 44		 je	 SHORT $LN25@exec_cmd
  0024c	48 63 44 24 60	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00251	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00259	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0025d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160087
  00264	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0026a	85 c0		 test	 eax, eax
  0026c	74 22		 je	 SHORT $LN25@exec_cmd
  0026e	48 63 44 24 60	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00273	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0027b	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0027f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160088
  00286	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0028c	85 c0		 test	 eax, eax
  0028e	75 0d		 jne	 SHORT $LN24@exec_cmd
$LN25@exec_cmd:

; 1629 :     )
; 1630 :     {
; 1631 :         mode = MODE_SUBROUTINE;

  00290	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR mode$[rsp], 1

; 1632 :         haveMode = TRUE;

  00298	c6 44 24 58 01	 mov	 BYTE PTR haveMode$[rsp], 1
$LN24@exec_cmd:
$LN22@exec_cmd:

; 1633 :     }
; 1634 : 
; 1635 :     /* Remove the script execution mode option from the command line */
; 1636 :     if (haveMode)

  0029d	0f b6 44 24 58	 movzx	 eax, BYTE PTR haveMode$[rsp]
  002a2	85 c0		 test	 eax, eax
  002a4	74 59		 je	 SHORT $LN26@exec_cmd

; 1637 :     {
; 1638 :         for (i=2; i < argc; i++)

  002a6	c7 44 24 54 02
	00 00 00	 mov	 DWORD PTR i$[rsp], 2
  002ae	eb 0a		 jmp	 SHORT $LN4@exec_cmd
$LN2@exec_cmd:
  002b0	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  002b4	ff c0		 inc	 eax
  002b6	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN4@exec_cmd:
  002ba	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  002c1	39 44 24 54	 cmp	 DWORD PTR i$[rsp], eax
  002c5	7d 28		 jge	 SHORT $LN3@exec_cmd

; 1639 :             argv[ i-1 ] = argv[ i ];

  002c7	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  002cc	8b 4c 24 54	 mov	 ecx, DWORD PTR i$[rsp]
  002d0	ff c9		 dec	 ecx
  002d2	48 63 c9	 movsxd	 rcx, ecx
  002d5	48 8b 94 24 18
	02 00 00	 mov	 rdx, QWORD PTR argv$[rsp]
  002dd	4c 8b 84 24 18
	02 00 00	 mov	 r8, QWORD PTR argv$[rsp]
  002e5	49 8b 04 c0	 mov	 rax, QWORD PTR [r8+rax*8]
  002e9	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  002ed	eb c1		 jmp	 SHORT $LN2@exec_cmd
$LN3@exec_cmd:

; 1640 :         --argc;

  002ef	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  002f6	ff c8		 dec	 eax
  002f8	89 84 24 10 02
	00 00		 mov	 DWORD PTR argc$[rsp], eax
$LN26@exec_cmd:

; 1641 :     }
; 1642 : 
; 1643 :     /*                  AT THIS POINT...
; 1644 : 
; 1645 :        argv[0] is still the Hercules command ("exec").
; 1646 :        argv[1] is now the name of the Rexx script to be executed.
; 1647 :        argv[2] to argv[argc-1] are now the script's arguments (if any)
; 1648 :     */
; 1649 : 
; 1650 :     /* Check for asynchronous execution option ("&" as last arg) */
; 1651 :     if (argc > 2 && strcmp( argv[ argc-1 ], "&" ) == 0)

  002ff	83 bc 24 10 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  00307	7e 3c		 jle	 SHORT $LN27@exec_cmd
  00309	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00310	ff c8		 dec	 eax
  00312	48 98		 cdqe
  00314	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160091
  0031b	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00323	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00327	e8 00 00 00 00	 call	 strcmp
  0032c	85 c0		 test	 eax, eax
  0032e	75 15		 jne	 SHORT $LN27@exec_cmd

; 1652 :     {
; 1653 :         argc--; // (drop last argument)

  00330	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00337	ff c8		 dec	 eax
  00339	89 84 24 10 02
	00 00		 mov	 DWORD PTR argc$[rsp], eax

; 1654 :         async = TRUE;

  00340	c6 44 24 59 01	 mov	 BYTE PTR async$[rsp], 1
$LN27@exec_cmd:

; 1655 :     }
; 1656 : 
; 1657 :     /* Save the name of the script they want to execute */
; 1658 :     pscriptname = argv[1];

  00345	b8 08 00 00 00	 mov	 eax, 8
  0034a	48 6b c0 01	 imul	 rax, rax, 1
  0034e	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00356	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0035a	48 89 44 24 70	 mov	 QWORD PTR pscriptname$[rsp], rax

; 1659 :     STRLCPY( scriptname, pscriptname );

  0035f	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00365	48 8b 54 24 70	 mov	 rdx, QWORD PTR pscriptname$[rsp]
  0036a	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR scriptname$[rsp]
  00372	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 1660 : 
; 1661 :     /* If the resolver option isn't enabled, use their name as-is */
; 1662 :     found = TRUE;

  00378	c6 44 24 50 01	 mov	 BYTE PTR found$[rsp], 1

; 1663 :     if (!useResolver)

  0037d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR useResolver
  00384	85 c0		 test	 eax, eax
  00386	75 05		 jne	 SHORT $LN28@exec_cmd

; 1664 :         goto resolved;

  00388	e9 bd 02 00 00	 jmp	 $resolved$57
$LN28@exec_cmd:

; 1665 :     found = FALSE;

  0038d	c6 44 24 50 00	 mov	 BYTE PTR found$[rsp], 0

; 1666 : 
; 1667 :     /* Otherwise we need to resolve the script name's full path.
; 1668 :        As the first attempt, use the scriptname exactly as they
; 1669 :        specified it.
; 1670 :     */
; 1671 :     rc = stat( pscriptname, &fstat );

  00392	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR _fstat64$[rsp]
  0039a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pscriptname$[rsp]
  0039f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stat64
  003a5	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 1672 : 
; 1673 :     if (rc == 0 && S_ISREG( fstat.st_mode ))

  003a9	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  003ae	75 1e		 jne	 SHORT $LN29@exec_cmd
  003b0	0f b7 84 24 a6
	00 00 00	 movzx	 eax, WORD PTR _fstat64$[rsp+6]
  003b8	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  003bd	3d 00 80 00 00	 cmp	 eax, 32768		; 00008000H
  003c2	75 0a		 jne	 SHORT $LN29@exec_cmd

; 1674 :     {
; 1675 :         found = TRUE;

  003c4	c6 44 24 50 01	 mov	 BYTE PTR found$[rsp], 1

; 1676 :         goto resolved;

  003c9	e9 7c 02 00 00	 jmp	 $resolved$57
$LN29@exec_cmd:

; 1677 :     }
; 1678 : 
; 1679 :     /* If they specified a specific location then
; 1680 :        it obviously doesn't doesn't exist there.
; 1681 :     */
; 1682 :     if (strcmp( basename( scriptname ), pscriptname ) != 0)

  003ce	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR scriptname$[rsp]
  003d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_basename
  003dc	48 8b 54 24 70	 mov	 rdx, QWORD PTR pscriptname$[rsp]
  003e1	48 8b c8	 mov	 rcx, rax
  003e4	e8 00 00 00 00	 call	 strcmp
  003e9	85 c0		 test	 eax, eax
  003eb	74 05		 je	 SHORT $LN30@exec_cmd

; 1683 :         goto resolved;

  003ed	e9 58 02 00 00	 jmp	 $resolved$57
$LN30@exec_cmd:

; 1684 : 
; 1685 :     /* Otherwise it's only a scriptname without a path (and maybe
; 1686 :        without any extension either). Search the defined Rexx paths
; 1687 :        using no extension followed by each of the defined extensions.
; 1688 :        The first entry in our extensions array is an empty string
; 1689 :        to cause us to always try their name without any extension
; 1690 :        first, followed by all the remaining defined extensions.
; 1691 :     */
; 1692 :     if (RexxPathCount)

  003f2	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR RexxPathCount, 0
  003f9	0f 84 19 01 00
	00		 je	 $LN31@exec_cmd

; 1693 :     {
; 1694 :         /* Check each directory in this list... */
; 1695 :         for (i = 0; i < RexxPathCount; i++)

  003ff	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00407	eb 0a		 jmp	 SHORT $LN7@exec_cmd
$LN5@exec_cmd:
  00409	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  0040d	ff c0		 inc	 eax
  0040f	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN7@exec_cmd:
  00413	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR RexxPathCount
  00419	39 44 24 54	 cmp	 DWORD PTR i$[rsp], eax
  0041d	0f 8d f5 00 00
	00		 jge	 $LN6@exec_cmd

; 1696 :         {
; 1697 :             /* Does this directory exist? */
; 1698 :             rc = stat( RexxPathArray[ i ], &fstat );

  00423	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  00428	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR _fstat64$[rsp]
  00430	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR RexxPathArray
  00437	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0043b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stat64
  00441	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 1699 :             if (rc != 0 || !S_ISDIR( fstat.st_mode ))

  00445	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  0044a	75 14		 jne	 SHORT $LN33@exec_cmd
  0044c	0f b7 84 24 a6
	00 00 00	 movzx	 eax, WORD PTR _fstat64$[rsp+6]
  00454	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00459	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  0045e	74 02		 je	 SHORT $LN32@exec_cmd
$LN33@exec_cmd:

; 1700 :                 continue;

  00460	eb a7		 jmp	 SHORT $LN5@exec_cmd
$LN32@exec_cmd:

; 1701 : 
; 1702 :             /* This directory does exist. Check to see if the script
; 1703 :                is in this directory by trying each defined extension.
; 1704 :             */
; 1705 :             for (n = 0; n < ExtensionsCount; n++)

  00462	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  0046a	eb 0a		 jmp	 SHORT $LN10@exec_cmd
$LN8@exec_cmd:
  0046c	8b 44 24 64	 mov	 eax, DWORD PTR n$[rsp]
  00470	ff c0		 inc	 eax
  00472	89 44 24 64	 mov	 DWORD PTR n$[rsp], eax
$LN10@exec_cmd:
  00476	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ExtensionsCount
  0047c	39 44 24 64	 cmp	 DWORD PTR n$[rsp], eax
  00480	0f 8d 8d 00 00
	00		 jge	 $LN9@exec_cmd

; 1706 :             {
; 1707 :                 /* Build full path scriptname with this extension */
; 1708 :                 MSGBUF( scriptname, PATHFORMAT, RexxPathArray[ i ],

  00486	48 63 44 24 64	 movsxd	 rax, DWORD PTR n$[rsp]
  0048b	48 63 4c 24 54	 movsxd	 rcx, DWORD PTR i$[rsp]
  00490	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ExtensionsArray
  00497	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  0049b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  004a0	48 8b 44 24 70	 mov	 rax, QWORD PTR pscriptname$[rsp]
  004a5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004aa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR RexxPathArray
  004b1	4c 8b 0c c8	 mov	 r9, QWORD PTR [rax+rcx*8]
  004b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160098
  004bc	ba 05 01 00 00	 mov	 edx, 261		; 00000105H
  004c1	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR scriptname$[rsp]
  004c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1709 :                     pscriptname, ExtensionsArray[ n ]);
; 1710 : 
; 1711 :                 /* Is it in this directory with this extension? */
; 1712 :                 rc = stat( scriptname, &fstat );

  004cf	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR _fstat64$[rsp]
  004d7	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR scriptname$[rsp]
  004df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stat64
  004e5	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 1713 :                 if (rc == 0 && S_ISREG( fstat.st_mode ))

  004e9	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  004ee	75 1e		 jne	 SHORT $LN34@exec_cmd
  004f0	0f b7 84 24 a6
	00 00 00	 movzx	 eax, WORD PTR _fstat64$[rsp+6]
  004f8	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  004fd	3d 00 80 00 00	 cmp	 eax, 32768		; 00008000H
  00502	75 0a		 jne	 SHORT $LN34@exec_cmd

; 1714 :                 {
; 1715 :                     found = TRUE;

  00504	c6 44 24 50 01	 mov	 BYTE PTR found$[rsp], 1

; 1716 :                     goto resolved;

  00509	e9 3c 01 00 00	 jmp	 $resolved$57
$LN34@exec_cmd:

; 1717 :                 }
; 1718 :             }

  0050e	e9 59 ff ff ff	 jmp	 $LN8@exec_cmd
$LN9@exec_cmd:

; 1719 :         }

  00513	e9 f1 fe ff ff	 jmp	 $LN5@exec_cmd
$LN6@exec_cmd:
$LN31@exec_cmd:

; 1720 :     }
; 1721 : 
; 1722 :     if (useSysPath && SysPathCount)

  00518	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR useSysPath
  0051f	85 c0		 test	 eax, eax
  00521	0f 84 23 01 00
	00		 je	 $LN35@exec_cmd
  00527	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR SysPathCount, 0
  0052e	0f 84 16 01 00
	00		 je	 $LN35@exec_cmd

; 1723 :     {
; 1724 :         /* Check each directory in this list... */
; 1725 :         for (i = 0; i < SysPathCount; i++)

  00534	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0053c	eb 0a		 jmp	 SHORT $LN13@exec_cmd
$LN11@exec_cmd:
  0053e	8b 44 24 54	 mov	 eax, DWORD PTR i$[rsp]
  00542	ff c0		 inc	 eax
  00544	89 44 24 54	 mov	 DWORD PTR i$[rsp], eax
$LN13@exec_cmd:
  00548	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR SysPathCount
  0054e	39 44 24 54	 cmp	 DWORD PTR i$[rsp], eax
  00552	0f 8d f2 00 00
	00		 jge	 $LN12@exec_cmd

; 1726 :         {
; 1727 :             /* Does this directory exist? */
; 1728 :             rc = stat( SysPathArray[ i ], &fstat );

  00558	48 63 44 24 54	 movsxd	 rax, DWORD PTR i$[rsp]
  0055d	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR _fstat64$[rsp]
  00565	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR SysPathArray
  0056c	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  00570	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stat64
  00576	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 1729 :             if (rc != 0 || !S_ISDIR( fstat.st_mode ))

  0057a	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  0057f	75 14		 jne	 SHORT $LN37@exec_cmd
  00581	0f b7 84 24 a6
	00 00 00	 movzx	 eax, WORD PTR _fstat64$[rsp+6]
  00589	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  0058e	3d 00 40 00 00	 cmp	 eax, 16384		; 00004000H
  00593	74 02		 je	 SHORT $LN36@exec_cmd
$LN37@exec_cmd:

; 1730 :                 continue;

  00595	eb a7		 jmp	 SHORT $LN11@exec_cmd
$LN36@exec_cmd:

; 1731 : 
; 1732 :             /* This directory does exist. Check to see if the script
; 1733 :                is in this directory by trying each defined extension.
; 1734 :             */
; 1735 :             for (n = 0; n < ExtensionsCount; n++)

  00597	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  0059f	eb 0a		 jmp	 SHORT $LN16@exec_cmd
$LN14@exec_cmd:
  005a1	8b 44 24 64	 mov	 eax, DWORD PTR n$[rsp]
  005a5	ff c0		 inc	 eax
  005a7	89 44 24 64	 mov	 DWORD PTR n$[rsp], eax
$LN16@exec_cmd:
  005ab	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR ExtensionsCount
  005b1	39 44 24 64	 cmp	 DWORD PTR n$[rsp], eax
  005b5	0f 8d 8a 00 00
	00		 jge	 $LN15@exec_cmd

; 1736 :             {
; 1737 :                 /* Build full path scriptname with this extension */
; 1738 :                 MSGBUF( scriptname, PATHFORMAT, SysPathArray[ i ],

  005bb	48 63 44 24 64	 movsxd	 rax, DWORD PTR n$[rsp]
  005c0	48 63 4c 24 54	 movsxd	 rcx, DWORD PTR i$[rsp]
  005c5	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ExtensionsArray
  005cc	48 8b 04 c2	 mov	 rax, QWORD PTR [rdx+rax*8]
  005d0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  005d5	48 8b 44 24 70	 mov	 rax, QWORD PTR pscriptname$[rsp]
  005da	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005df	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR SysPathArray
  005e6	4c 8b 0c c8	 mov	 r9, QWORD PTR [rax+rcx*8]
  005ea	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160103
  005f1	ba 05 01 00 00	 mov	 edx, 261		; 00000105H
  005f6	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR scriptname$[rsp]
  005fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_snprintf

; 1739 :                     pscriptname, ExtensionsArray[ n ]);
; 1740 : 
; 1741 :                 /* Is it in this directory with this extension? */
; 1742 :                 rc = stat( scriptname, &fstat );

  00604	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR _fstat64$[rsp]
  0060c	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR scriptname$[rsp]
  00614	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stat64
  0061a	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 1743 :                 if (rc == 0 && S_ISREG( fstat.st_mode ))

  0061e	83 7c 24 5c 00	 cmp	 DWORD PTR rc$[rsp], 0
  00623	75 1b		 jne	 SHORT $LN38@exec_cmd
  00625	0f b7 84 24 a6
	00 00 00	 movzx	 eax, WORD PTR _fstat64$[rsp+6]
  0062d	25 00 f0 00 00	 and	 eax, 61440		; 0000f000H
  00632	3d 00 80 00 00	 cmp	 eax, 32768		; 00008000H
  00637	75 07		 jne	 SHORT $LN38@exec_cmd

; 1744 :                 {
; 1745 :                     found = TRUE;

  00639	c6 44 24 50 01	 mov	 BYTE PTR found$[rsp], 1

; 1746 :                     goto resolved;

  0063e	eb 0a		 jmp	 SHORT $resolved$57
$LN38@exec_cmd:

; 1747 :                 }
; 1748 :             }

  00640	e9 5c ff ff ff	 jmp	 $LN14@exec_cmd
$LN15@exec_cmd:

; 1749 :         }

  00645	e9 f4 fe ff ff	 jmp	 $LN11@exec_cmd
$LN12@exec_cmd:
$LN35@exec_cmd:
$resolved$57:

; 1750 :     }
; 1751 : 
; 1752 : resolved:
; 1753 : 
; 1754 :     if (!found)

  0064a	0f b6 44 24 50	 movzx	 eax, BYTE PTR found$[rsp]
  0064f	85 c0		 test	 eax, eax
  00651	75 67		 jne	 SHORT $LN39@exec_cmd

; 1755 :     {
; 1756 :         // "REXX(%s) Exec: script \"%s\" not found"
; 1757 :         WRMSG( HHC17506, "E", PackageName, pscriptname );

  00653	b9 01 00 00 00	 mov	 ecx, 1
  00658	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0065e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pscriptname$[rsp]
  00663	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00668	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  0066f	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00674	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160106
  0067b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00680	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160107
  00687	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0068c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00691	41 b9 03 00 00
	00		 mov	 r9d, 3
  00697	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160108
  0069e	ba dd 06 00 00	 mov	 edx, 1757		; 000006ddH
  006a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160109
  006aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1758 :         return -1;

  006b0	b8 ff ff ff ff	 mov	 eax, -1
  006b5	e9 7b 02 00 00	 jmp	 $LN1@exec_cmd
$LN39@exec_cmd:

; 1759 :     }
; 1760 : 
; 1761 :     /* Call the proper Rexx package function to execute their script.
; 1762 : 
; 1763 :                          AT THIS POINT...
; 1764 : 
; 1765 :        argv[0] is still the Hercules command ("exec").
; 1766 :        argv[1] is still the name of the Rexx script to be executed.
; 1767 :        argv[2] to argv[argc-1] are still the script's arguments.
; 1768 :     */
; 1769 :     if (mode == MODE_SUBROUTINE)

  006ba	83 7c 24 68 01	 cmp	 DWORD PTR mode$[rsp], 1
  006bf	0f 85 9e 00 00
	00		 jne	 $LN40@exec_cmd

; 1770 :     {
; 1771 :         /* The arguments passed to a Rexx script called in subroutine
; 1772 :            mode is the array of individual arguments (if any) following
; 1773 :            the script name.  This is easy since they've already been
; 1774 :            parsed for us by the Hercules's command-line parser, so we
; 1775 :            just pass them to the script as-is.
; 1776 :         */
; 1777 : 
; 1778 :         int     num_sub_args;       // (number of script arguments)
; 1779 :         char**  sub_args_array;     // (array of script arguments)
; 1780 : 
; 1781 :         if (argc > 2)

  006c5	83 bc 24 10 02
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  006cd	7e 2f		 jle	 SHORT $LN42@exec_cmd

; 1782 :         {
; 1783 :             num_sub_args   = (argc - 2);

  006cf	8b 84 24 10 02
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  006d6	83 e8 02	 sub	 eax, 2
  006d9	89 44 24 6c	 mov	 DWORD PTR num_sub_args$1[rsp], eax

; 1784 :             sub_args_array = &argv[  2 ];

  006dd	b8 08 00 00 00	 mov	 eax, 8
  006e2	48 6b c0 02	 imul	 rax, rax, 2
  006e6	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006ee	48 03 c8	 add	 rcx, rax
  006f1	48 8b c1	 mov	 rax, rcx
  006f4	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR sub_args_array$4[rsp], rax

; 1785 :         }

  006fc	eb 14		 jmp	 SHORT $LN43@exec_cmd
$LN42@exec_cmd:

; 1786 :         else
; 1787 :         {
; 1788 :             num_sub_args   = 0;

  006fe	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR num_sub_args$1[rsp], 0

; 1789 :             sub_args_array = NULL;

  00706	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR sub_args_array$4[rsp], 0
$LN43@exec_cmd:

; 1790 :         }
; 1791 : 
; 1792 :         if (!async)

  00712	0f b6 44 24 59	 movzx	 eax, BYTE PTR async$[rsp]
  00717	85 c0		 test	 eax, eax
  00719	75 20		 jne	 SHORT $LN44@exec_cmd

; 1793 :         {
; 1794 :             /* Execute Rexx script synchronously */
; 1795 :             rc = ExecSub( scriptname, num_sub_args, sub_args_array );

  0071b	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR sub_args_array$4[rsp]
  00723	8b 54 24 6c	 mov	 edx, DWORD PTR num_sub_args$1[rsp]
  00727	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR scriptname$[rsp]
  0072f	ff 15 00 00 00
	00		 call	 QWORD PTR ExecSub
  00735	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 1796 :         }

  00739	eb 23		 jmp	 SHORT $LN45@exec_cmd
$LN44@exec_cmd:

; 1797 :         else
; 1798 :         {
; 1799 :             /* Execute Rexx script asynchronously */
; 1800 :             rc = exec_async( scriptname, mode, sub_args_array, num_sub_args );

  0073b	44 8b 4c 24 6c	 mov	 r9d, DWORD PTR num_sub_args$1[rsp]
  00740	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR sub_args_array$4[rsp]
  00748	0f b6 54 24 68	 movzx	 edx, BYTE PTR mode$[rsp]
  0074d	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR scriptname$[rsp]
  00755	e8 00 00 00 00	 call	 exec_async
  0075a	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax
$LN45@exec_cmd:

; 1801 :         }
; 1802 :     }

  0075e	e9 ce 01 00 00	 jmp	 $LN41@exec_cmd
$LN40@exec_cmd:

; 1803 :     else // (mode == MODE_COMMAND)
; 1804 :     {
; 1805 :         /*-------------------------------------------------------------
; 1806 : 
; 1807 :                              PROGRAMMING NOTE
; 1808 : 
; 1809 :            The only argument to a Rexx script called in command mode
; 1810 :            is the remainder of the command-line arguments immediately
; 1811 :            following the script name, passed as a single string, which
; 1812 :            is more difficult.  We can't simply build a string from the
; 1813 :            individual pre-parsed arguments passed to us as the result
; 1814 :            may not exactly match what was entered on the command line
; 1815 :            (e.g. we cannot presume multiple blanks between arguments
; 1816 :            are not important to the Rexx script being called).  Thus
; 1817 :            we instead simply point to the original unmodified Hercules
; 1818 :            "cmdline" string indexed to where the script's argument(s)
; 1819 :            string actully begins.
; 1820 : 
; 1821 :         -------------------------------------------------------------*/
; 1822 : 
; 1823 :         char* script_argstring;         // (script's only argument)
; 1824 : 
; 1825 :         if (argc < 3 || !cmdline)

  00763	83 bc 24 10 02
	00 00 03	 cmp	 DWORD PTR argc$[rsp], 3
  0076b	7c 0b		 jl	 SHORT $LN48@exec_cmd
  0076d	48 83 bc 24 20
	02 00 00 00	 cmp	 QWORD PTR cmdline$[rsp], 0
  00776	75 0e		 jne	 SHORT $LN46@exec_cmd
$LN48@exec_cmd:

; 1826 :             script_argstring = NULL;    // (no arguments)

  00778	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR script_argstring$2[rsp], 0
  00781	e9 4f 01 00 00	 jmp	 $LN47@exec_cmd
$LN46@exec_cmd:

; 1827 :         else
; 1828 :         {
; 1829 :             char*   execcmd;            // (herc cmdline "exec" token)
; 1830 :             char*   script_arg;         // (arg following script name)
; 1831 :             size_t  script_arg_idx;     // (index to script_argstring)
; 1832 : 
; 1833 :             execcmd        = argv[0];

  00786	b8 08 00 00 00	 mov	 eax, 8
  0078b	48 6b c0 00	 imul	 rax, rax, 0
  0078f	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00797	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0079b	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR execcmd$6[rsp], rax

; 1834 :             script_arg     = argv[2];

  007a3	b8 08 00 00 00	 mov	 eax, 8
  007a8	48 6b c0 02	 imul	 rax, rax, 2
  007ac	48 8b 8c 24 18
	02 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  007b4	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  007b8	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR script_arg$5[rsp], rax

; 1835 :             script_arg_idx = (script_arg - execcmd);

  007c0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR execcmd$6[rsp]
  007c8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR script_arg$5[rsp]
  007d0	48 2b c8	 sub	 rcx, rax
  007d3	48 8b c1	 mov	 rax, rcx
  007d6	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR script_arg_idx$3[rsp], rax

; 1836 : 
; 1837 :             /* Check we were called properly: 4+1+len+1="exec name " */
; 1838 :             if (0
; 1839 :                 || script_arg_idx < (4 + 1 + strlen( scriptname ) + 1)
; 1840 :                 || script_arg_idx >= strlen( cmdline )

  007de	33 c0		 xor	 eax, eax
  007e0	85 c0		 test	 eax, eax
  007e2	75 32		 jne	 SHORT $LN50@exec_cmd
  007e4	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR scriptname$[rsp]
  007ec	e8 00 00 00 00	 call	 strlen
  007f1	48 83 c0 06	 add	 rax, 6
  007f5	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR script_arg_idx$3[rsp], rax
  007fd	72 17		 jb	 SHORT $LN50@exec_cmd
  007ff	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  00807	e8 00 00 00 00	 call	 strlen
  0080c	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR script_arg_idx$3[rsp], rax
  00814	72 5d		 jb	 SHORT $LN49@exec_cmd
$LN50@exec_cmd:

; 1841 :             )
; 1842 :             {
; 1843 :                 // "REXX(%s) Malformed call to 'exec_cmd' function"
; 1844 :                 WRMSG( HHC17513, "E", PackageName );

  00816	b9 01 00 00 00	 mov	 ecx, 1
  0081b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00821	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00828	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  0082d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160121
  00834	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00839	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160122
  00840	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00845	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0084a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00850	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG160123
  00857	ba 34 07 00 00	 mov	 edx, 1844		; 00000734H
  0085c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG160124
  00863	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1845 :                 return -1;

  00869	b8 ff ff ff ff	 mov	 eax, -1
  0086e	e9 c2 00 00 00	 jmp	 $LN1@exec_cmd
$LN49@exec_cmd:

; 1846 :             }
; 1847 : 
; 1848 :             /* Left-trim the cmdline so its first char is argv[0][0] */
; 1849 :             cmdline = LTRIM( cmdline );

  00873	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG160125
  0087a	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  00882	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ltrim
  00888	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR cmdline$[rsp], rax

; 1850 : 
; 1851 :             /* If the first argument contains any blanks then it was
; 1852 :                originally surrounded by quotes which were removed by
; 1853 :                Hercules command-line parsing, so we need to backup by
; 1854 :                one position to point to the double quote where that
; 1855 :                argument actually began.
; 1856 :             */
; 1857 :             if (strchr( script_arg, ' ' ))

  00890	ba 20 00 00 00	 mov	 edx, 32			; 00000020H
  00895	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR script_arg$5[rsp]
  0089d	e8 00 00 00 00	 call	 strchr
  008a2	48 85 c0	 test	 rax, rax
  008a5	74 13		 je	 SHORT $LN51@exec_cmd

; 1858 :                 --script_arg_idx;

  008a7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR script_arg_idx$3[rsp]
  008af	48 ff c8	 dec	 rax
  008b2	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR script_arg_idx$3[rsp], rax
$LN51@exec_cmd:

; 1859 : 
; 1860 :             script_argstring = cmdline + script_arg_idx;

  008ba	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR script_arg_idx$3[rsp]
  008c2	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR cmdline$[rsp]
  008ca	48 03 c8	 add	 rcx, rax
  008cd	48 8b c1	 mov	 rax, rcx
  008d0	48 89 44 24 78	 mov	 QWORD PTR script_argstring$2[rsp], rax
$LN47@exec_cmd:

; 1861 :         }
; 1862 : 
; 1863 :         if (!async)

  008d5	0f b6 44 24 59	 movzx	 eax, BYTE PTR async$[rsp]
  008da	85 c0		 test	 eax, eax
  008dc	75 19		 jne	 SHORT $LN52@exec_cmd

; 1864 :         {
; 1865 :             /* Execute Rexx script synchronously */
; 1866 :             rc = ExecCmd( scriptname, script_argstring );

  008de	48 8b 54 24 78	 mov	 rdx, QWORD PTR script_argstring$2[rsp]
  008e3	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR scriptname$[rsp]
  008eb	ff 15 00 00 00
	00		 call	 QWORD PTR ExecCmd
  008f1	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax

; 1867 :         }

  008f5	eb 3a		 jmp	 SHORT $LN53@exec_cmd
$LN52@exec_cmd:

; 1868 :         else
; 1869 :         {
; 1870 :             /* Remove the " &&" async argument from script's cmdline.
; 1871 :                PLEASE NOTE that we *MUST* keep any resulting trailing
; 1872 :                blanks that might result since for command mode scripts
; 1873 :                we mustn't presume they aren't significant! (Refer to
; 1874 :                the PROGRAMMING NOTE further above for justification!)
; 1875 :             */
; 1876 :             if (script_argstring)

  008f7	48 83 7c 24 78
	00		 cmp	 QWORD PTR script_argstring$2[rsp], 0
  008fd	74 14		 je	 SHORT $LN54@exec_cmd

; 1877 :                 script_argstring[ strlen( script_argstring ) - 3 ] = 0;

  008ff	48 8b 4c 24 78	 mov	 rcx, QWORD PTR script_argstring$2[rsp]
  00904	e8 00 00 00 00	 call	 strlen
  00909	48 8b 4c 24 78	 mov	 rcx, QWORD PTR script_argstring$2[rsp]
  0090e	c6 44 01 fd 00	 mov	 BYTE PTR [rcx+rax-3], 0
$LN54@exec_cmd:

; 1878 : 
; 1879 :             /* Execute Rexx script asynchronously */
; 1880 :             rc = exec_async( scriptname, mode, script_argstring, 0 );

  00913	45 33 c9	 xor	 r9d, r9d
  00916	4c 8b 44 24 78	 mov	 r8, QWORD PTR script_argstring$2[rsp]
  0091b	0f b6 54 24 68	 movzx	 edx, BYTE PTR mode$[rsp]
  00920	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR scriptname$[rsp]
  00928	e8 00 00 00 00	 call	 exec_async
  0092d	89 44 24 5c	 mov	 DWORD PTR rc$[rsp], eax
$LN53@exec_cmd:
$LN41@exec_cmd:

; 1881 :         }
; 1882 :     }
; 1883 : 
; 1884 :     return rc;

  00931	8b 44 24 5c	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@exec_cmd:

; 1885 : 
; 1886 : } // end exec_cmd

  00935	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0093d	48 33 cc	 xor	 rcx, rsp
  00940	e8 00 00 00 00	 call	 __security_check_cookie
  00945	48 81 c4 08 02
	00 00		 add	 rsp, 520		; 00000208H
  0094c	c3		 ret	 0
exec_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\hRexx.c
_TEXT	SEGMENT
iarg$ = 80
argl$ = 84
whatValue$ = 88
wMode$ = 92
wMsgLevel$ = 93
wMsgPrefix$ = 94
wErrPrefix$ = 95
wResolver$ = 96
wSysPath$ = 97
haveMode$ = 98
haveMsgLevel$ = 99
haveMsgPrefix$ = 100
haveErrPrefix$ = 101
haveResolver$ = 102
haveSysPath$ = 103
havePath$ = 104
haveExtensions$ = 105
haveDisable$ = 106
haveEnable$ = 107
haveCancel$ = 108
tv371 = 112
c$1 = 116
tv382 = 120
tv396 = 124
wPackage$ = 128
tid$2 = 136
wPath$ = 144
wExtensions$ = 152
tv356 = 160
tv397 = 168
tv958 = 176
tv401 = 184
tv454 = 192
tv959 = 200
tv458 = 208
tv529 = 216
tv992 = 224
tv533 = 232
tv616 = 240
tv993 = 248
tv620 = 256
tv671 = 264
tv994 = 272
tv675 = 280
tv726 = 288
tv995 = 296
tv730 = 304
tv813 = 312
tv996 = 320
tv817 = 328
tv860 = 336
tv997 = 344
tv864 = 352
tv998 = 360
tv882 = 368
saved_pkgname$3 = 376
argc$ = 400
argv$ = 408
cmdline$ = 416
rexx_cmd PROC

; 769  : {

$LN128:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec 88 01
	00 00		 sub	 rsp, 392		; 00000188H

; 770  :     int    iarg             = 0;

  00015	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR iarg$[rsp], 0

; 771  :     int    argl             = 0;

  0001d	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR argl$[rsp], 0

; 772  : 
; 773  :     BYTE   haveEnable       = FALSE;

  00025	c6 44 24 6b 00	 mov	 BYTE PTR haveEnable$[rsp], 0

; 774  :     BYTE   haveDisable      = FALSE;

  0002a	c6 44 24 6a 00	 mov	 BYTE PTR haveDisable$[rsp], 0

; 775  :     char*  wPackage         = NULL;

  0002f	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR wPackage$[rsp], 0

; 776  :     BYTE   havePath         = FALSE;

  0003b	c6 44 24 68 00	 mov	 BYTE PTR havePath$[rsp], 0

; 777  :     BYTE   haveSysPath      = FALSE;

  00040	c6 44 24 67 00	 mov	 BYTE PTR haveSysPath$[rsp], 0

; 778  :     BYTE   haveExtensions   = FALSE;

  00045	c6 44 24 69 00	 mov	 BYTE PTR haveExtensions$[rsp], 0

; 779  :     BYTE   haveResolver     = FALSE;

  0004a	c6 44 24 66 00	 mov	 BYTE PTR haveResolver$[rsp], 0

; 780  :     BYTE   haveMsgLevel     = FALSE;

  0004f	c6 44 24 63 00	 mov	 BYTE PTR haveMsgLevel$[rsp], 0

; 781  :     BYTE   haveMsgPrefix    = FALSE;

  00054	c6 44 24 64 00	 mov	 BYTE PTR haveMsgPrefix$[rsp], 0

; 782  :     BYTE   haveErrPrefix    = FALSE;

  00059	c6 44 24 65 00	 mov	 BYTE PTR haveErrPrefix$[rsp], 0

; 783  :     BYTE   haveMode         = FALSE;

  0005e	c6 44 24 62 00	 mov	 BYTE PTR haveMode$[rsp], 0

; 784  :     BYTE   haveCancel       = FALSE;

  00063	c6 44 24 6c 00	 mov	 BYTE PTR haveCancel$[rsp], 0

; 785  : 
; 786  :     BYTE   wSysPath         = useSysPath;

  00068	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR useSysPath
  0006f	88 44 24 61	 mov	 BYTE PTR wSysPath$[rsp], al

; 787  :     BYTE   wResolver        = useResolver;

  00073	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR useResolver
  0007a	88 44 24 60	 mov	 BYTE PTR wResolver$[rsp], al

; 788  :     BYTE   wMsgLevel        = MsgLevel;

  0007e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR MsgLevel
  00085	88 44 24 5d	 mov	 BYTE PTR wMsgLevel$[rsp], al

; 789  :     BYTE   wMsgPrefix       = MsgPrefix;

  00089	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR MsgPrefix
  00090	88 44 24 5e	 mov	 BYTE PTR wMsgPrefix$[rsp], al

; 790  :     BYTE   wErrPrefix       = ErrPrefix;

  00094	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ErrPrefix
  0009b	88 44 24 5f	 mov	 BYTE PTR wErrPrefix$[rsp], al

; 791  :     BYTE   wMode            = RexxMode;

  0009f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR RexxMode
  000a6	88 44 24 5c	 mov	 BYTE PTR wMode$[rsp], al

; 792  : 
; 793  :     char*  wPath            = NULL;

  000aa	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR wPath$[rsp], 0

; 794  :     char*  wExtensions      = NULL;

  000b6	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR wExtensions$[rsp], 0

; 795  : 
; 796  :     int    whatValue        = 0;

  000c2	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR whatValue$[rsp], 0
$LN4@rexx_cmd:

; 797  : 
; 798  :     UNREFERENCED( cmdline );

  000ca	33 c0		 xor	 eax, eax
  000cc	85 c0		 test	 eax, eax
  000ce	75 fa		 jne	 SHORT $LN4@rexx_cmd

; 799  : 
; 800  :     /* Just display the current options when no arguments are given */
; 801  :     if (argc < 2)

  000d0	83 bc 24 90 01
	00 00 02	 cmp	 DWORD PTR argc$[rsp], 2
  000d8	7d 0c		 jge	 SHORT $LN10@rexx_cmd

; 802  :     {
; 803  :         DisplayOptions();

  000da	e8 00 00 00 00	 call	 DisplayOptions

; 804  :         return 0;

  000df	33 c0		 xor	 eax, eax
  000e1	e9 53 16 00 00	 jmp	 $LN1@rexx_cmd
$LN10@rexx_cmd:

; 805  :     }
; 806  : 
; 807  :     //----------------------------------------------------------------
; 808  :     // First, parse and save their options. Once parsing is complete,
; 809  :     // We will then process their options if no errors were detected.
; 810  :     //----------------------------------------------------------------
; 811  : 
; 812  :     for (iarg=1; iarg < argc; iarg++)

  000e6	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR iarg$[rsp], 1
  000ee	eb 0a		 jmp	 SHORT $LN7@rexx_cmd
$LN5@rexx_cmd:
  000f0	8b 44 24 50	 mov	 eax, DWORD PTR iarg$[rsp]
  000f4	ff c0		 inc	 eax
  000f6	89 44 24 50	 mov	 DWORD PTR iarg$[rsp], eax
$LN7@rexx_cmd:
  000fa	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR argc$[rsp]
  00101	39 44 24 50	 cmp	 DWORD PTR iarg$[rsp], eax
  00105	0f 8d 73 13 00
	00		 jge	 $LN6@rexx_cmd

; 813  :     {
; 814  :         // Get length of next token (option's name or its value).
; 815  :         argl = strlen( argv[ iarg ]);

  0010b	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00110	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00118	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  0011c	e8 00 00 00 00	 call	 strlen
  00121	89 44 24 54	 mov	 DWORD PTR argl$[rsp], eax

; 816  : 
; 817  :         if (!whatValue)

  00125	83 7c 24 58 00	 cmp	 DWORD PTR whatValue$[rsp], 0
  0012a	0f 85 17 06 00
	00		 jne	 $LN11@rexx_cmd

; 818  :         {
; 819  :             //-----------------------
; 820  :             // Parse the option name
; 821  :             //-----------------------
; 822  : 
; 823  :             if (HAVKEYW( "List" ))

  00130	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00135	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0013d	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159609
  00148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0014e	85 c0		 test	 eax, eax
  00150	75 34		 jne	 SHORT $LN13@rexx_cmd

; 824  :             {
; 825  :                 obtain_lock( &scr_lock );

  00152	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159610
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  00160	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_obtain_lock

; 826  :                 {
; 827  :                     ListSCRCTLs();

  00166	e8 00 00 00 00	 call	 ListSCRCTLs

; 828  :                 }
; 829  :                 release_lock( &scr_lock );

  0016b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159611
  00172	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:scr_lock
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hthread_release_lock

; 830  :                 return 0;

  0017f	33 c0		 xor	 eax, eax
  00181	e9 b3 15 00 00	 jmp	 $LN1@rexx_cmd
$LN13@rexx_cmd:

; 831  :             }
; 832  : 
; 833  :             if (!haveCancel && HAVKEYW( "Cancel" ))

  00186	0f b6 44 24 6c	 movzx	 eax, BYTE PTR haveCancel$[rsp]
  0018b	85 c0		 test	 eax, eax
  0018d	75 34		 jne	 SHORT $LN14@rexx_cmd
  0018f	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00194	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0019c	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159613
  001a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001ad	85 c0		 test	 eax, eax
  001af	75 12		 jne	 SHORT $LN14@rexx_cmd

; 834  :             {
; 835  :                 haveCancel = TRUE;

  001b1	c6 44 24 6c 01	 mov	 BYTE PTR haveCancel$[rsp], 1

; 836  :                 whatValue  = _NEEDCANCEL;

  001b6	c7 44 24 58 0a
	00 00 00	 mov	 DWORD PTR whatValue$[rsp], 10

; 837  :                 continue;

  001be	e9 2d ff ff ff	 jmp	 $LN5@rexx_cmd
$LN14@rexx_cmd:

; 838  :             }
; 839  : 
; 840  :             if (!haveMode && HAVKEYW( "mode" ))

  001c3	0f b6 44 24 62	 movzx	 eax, BYTE PTR haveMode$[rsp]
  001c8	85 c0		 test	 eax, eax
  001ca	75 34		 jne	 SHORT $LN15@rexx_cmd
  001cc	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  001d1	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  001d9	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159615
  001e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  001ea	85 c0		 test	 eax, eax
  001ec	75 12		 jne	 SHORT $LN15@rexx_cmd

; 841  :             {
; 842  :                 haveMode  = TRUE;

  001ee	c6 44 24 62 01	 mov	 BYTE PTR haveMode$[rsp], 1

; 843  :                 whatValue = _NEEDMODE;

  001f3	c7 44 24 58 09
	00 00 00	 mov	 DWORD PTR whatValue$[rsp], 9

; 844  :                 continue;

  001fb	e9 f0 fe ff ff	 jmp	 $LN5@rexx_cmd
$LN15@rexx_cmd:

; 845  :             }
; 846  : 
; 847  :             if (!haveDisable &&

  00200	0f b6 44 24 6a	 movzx	 eax, BYTE PTR haveDisable$[rsp]
  00205	85 c0		 test	 eax, eax
  00207	0f 85 eb 00 00
	00		 jne	 $LN16@rexx_cmd
  0020d	83 7c 24 54 03	 cmp	 DWORD PTR argl$[rsp], 3
  00212	7c 31		 jl	 SHORT $LN18@rexx_cmd
  00214	83 7c 24 54 07	 cmp	 DWORD PTR argl$[rsp], 7
  00219	7f 2a		 jg	 SHORT $LN18@rexx_cmd
  0021b	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  00220	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  00225	4c 8b c0	 mov	 r8, rax
  00228	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00230	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00234	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159619
  0023b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  00241	85 c0		 test	 eax, eax
  00243	74 40		 je	 SHORT $LN17@rexx_cmd
$LN18@rexx_cmd:
  00245	83 7c 24 54 03	 cmp	 DWORD PTR argl$[rsp], 3
  0024a	0f 8c a8 00 00
	00		 jl	 $LN16@rexx_cmd
  00250	83 7c 24 54 04	 cmp	 DWORD PTR argl$[rsp], 4
  00255	0f 8f 9d 00 00
	00		 jg	 $LN16@rexx_cmd
  0025b	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  00260	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  00265	4c 8b c0	 mov	 r8, rax
  00268	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00270	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00274	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159620
  0027b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  00281	85 c0		 test	 eax, eax
  00283	75 73		 jne	 SHORT $LN16@rexx_cmd
$LN17@rexx_cmd:

; 848  :                 ((argl >= 3 && argl <= 7 && HAVABBR( "Disable" )) ||
; 849  :                  (argl >= 3 && argl <= 4 && HAVABBR( "Stop"    ))))
; 850  :             {
; 851  :                 if (IsDisabled())

  00285	e8 00 00 00 00	 call	 IsDisabled
  0028a	0f b6 c0	 movzx	 eax, al
  0028d	85 c0		 test	 eax, eax
  0028f	74 5d		 je	 SHORT $LN19@rexx_cmd

; 852  :                 {
; 853  :                     // "REXX(%s) Rexx already stopped/disabled"
; 854  :                     WRMSG( HHC17523, "E", "" );

  00291	b9 01 00 00 00	 mov	 ecx, 1
  00296	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0029c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159622
  002a3	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  002a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159623
  002af	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159624
  002bb	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002c5	41 b9 03 00 00
	00		 mov	 r9d, 3
  002cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159625
  002d2	ba 56 03 00 00	 mov	 edx, 854		; 00000356H
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159626
  002de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 855  :                     return -1;

  002e4	b8 ff ff ff ff	 mov	 eax, -1
  002e9	e9 4b 14 00 00	 jmp	 $LN1@rexx_cmd
$LN19@rexx_cmd:

; 856  :                 }
; 857  : 
; 858  :                 haveDisable = TRUE;

  002ee	c6 44 24 6a 01	 mov	 BYTE PTR haveDisable$[rsp], 1

; 859  :                 continue;

  002f3	e9 f8 fd ff ff	 jmp	 $LN5@rexx_cmd
$LN16@rexx_cmd:

; 860  :             }
; 861  : 
; 862  :             if (!haveEnable &&

  002f8	0f b6 44 24 6b	 movzx	 eax, BYTE PTR haveEnable$[rsp]
  002fd	85 c0		 test	 eax, eax
  002ff	0f 85 f5 00 00
	00		 jne	 $LN20@rexx_cmd
  00305	83 7c 24 54 03	 cmp	 DWORD PTR argl$[rsp], 3
  0030a	7c 31		 jl	 SHORT $LN22@rexx_cmd
  0030c	83 7c 24 54 06	 cmp	 DWORD PTR argl$[rsp], 6
  00311	7f 2a		 jg	 SHORT $LN22@rexx_cmd
  00313	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  00318	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  0031d	4c 8b c0	 mov	 r8, rax
  00320	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00328	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  0032c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159630
  00333	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  00339	85 c0		 test	 eax, eax
  0033b	74 40		 je	 SHORT $LN21@rexx_cmd
$LN22@rexx_cmd:
  0033d	83 7c 24 54 03	 cmp	 DWORD PTR argl$[rsp], 3
  00342	0f 8c b2 00 00
	00		 jl	 $LN20@rexx_cmd
  00348	83 7c 24 54 05	 cmp	 DWORD PTR argl$[rsp], 5
  0034d	0f 8f a7 00 00
	00		 jg	 $LN20@rexx_cmd
  00353	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  00358	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  0035d	4c 8b c0	 mov	 r8, rax
  00360	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00368	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  0036c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159631
  00373	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  00379	85 c0		 test	 eax, eax
  0037b	75 7d		 jne	 SHORT $LN20@rexx_cmd
$LN21@rexx_cmd:

; 863  :                 ((argl >= 3 && argl <= 6 && HAVABBR( "Enable" )) ||
; 864  :                  (argl >= 3 && argl <= 5 && HAVABBR( "Start"  ))))
; 865  :             {
; 866  :                 if (IsEnabled( NULL ))

  0037d	33 c9		 xor	 ecx, ecx
  0037f	e8 00 00 00 00	 call	 IsEnabled
  00384	0f b6 c0	 movzx	 eax, al
  00387	85 c0		 test	 eax, eax
  00389	74 5d		 je	 SHORT $LN23@rexx_cmd

; 867  :                 {
; 868  :                     // REXX(%s) Rexx already started/enabled"
; 869  :                     WRMSG( HHC17522, "E", PackageName );

  0038b	b9 01 00 00 00	 mov	 ecx, 1
  00390	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00396	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  0039d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  003a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159633
  003a9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159634
  003b5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003ba	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003bf	41 b9 03 00 00
	00		 mov	 r9d, 3
  003c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159635
  003cc	ba 65 03 00 00	 mov	 edx, 869		; 00000365H
  003d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159636
  003d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 870  :                     return -1;

  003de	b8 ff ff ff ff	 mov	 eax, -1
  003e3	e9 51 13 00 00	 jmp	 $LN1@rexx_cmd
$LN23@rexx_cmd:

; 871  :                 }
; 872  : 
; 873  :                 haveEnable  = TRUE;

  003e8	c6 44 24 6b 01	 mov	 BYTE PTR haveEnable$[rsp], 1

; 874  :                 whatValue   = _NEEDPACKAGE;

  003ed	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR whatValue$[rsp], 1

; 875  :                 continue;

  003f5	e9 f6 fc ff ff	 jmp	 $LN5@rexx_cmd
$LN20@rexx_cmd:

; 876  :             }
; 877  : 
; 878  :             if (!havePath &&

  003fa	0f b6 44 24 68	 movzx	 eax, BYTE PTR havePath$[rsp]
  003ff	85 c0		 test	 eax, eax
  00401	0f 85 82 00 00
	00		 jne	 $LN24@rexx_cmd
  00407	83 7c 24 54 04	 cmp	 DWORD PTR argl$[rsp], 4
  0040c	7c 31		 jl	 SHORT $LN26@rexx_cmd
  0040e	83 7c 24 54 05	 cmp	 DWORD PTR argl$[rsp], 5
  00413	7f 2a		 jg	 SHORT $LN26@rexx_cmd
  00415	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  0041a	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  0041f	4c 8b c0	 mov	 r8, rax
  00422	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0042a	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  0042e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159640
  00435	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  0043b	85 c0		 test	 eax, eax
  0043d	74 38		 je	 SHORT $LN25@rexx_cmd
$LN26@rexx_cmd:
  0043f	83 7c 24 54 05	 cmp	 DWORD PTR argl$[rsp], 5
  00444	7c 43		 jl	 SHORT $LN24@rexx_cmd
  00446	83 7c 24 54 09	 cmp	 DWORD PTR argl$[rsp], 9
  0044b	7f 3c		 jg	 SHORT $LN24@rexx_cmd
  0044d	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  00452	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  00457	4c 8b c0	 mov	 r8, rax
  0045a	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00462	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00466	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159641
  0046d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  00473	85 c0		 test	 eax, eax
  00475	75 12		 jne	 SHORT $LN24@rexx_cmd
$LN25@rexx_cmd:

; 879  :                 ((argl >= 4 && argl <= 5 && HAVABBR( "Path"     )) ||
; 880  :                  (argl >= 5 && argl <= 9 && HAVABBR( "RexxPath" ))))
; 881  :             {
; 882  :                 havePath  = TRUE;

  00477	c6 44 24 68 01	 mov	 BYTE PTR havePath$[rsp], 1

; 883  :                 whatValue = _NEEDPATH;

  0047c	c7 44 24 58 02
	00 00 00	 mov	 DWORD PTR whatValue$[rsp], 2

; 884  :                 continue;

  00484	e9 67 fc ff ff	 jmp	 $LN5@rexx_cmd
$LN24@rexx_cmd:

; 885  :             }
; 886  : 
; 887  :             if (!haveSysPath &&

  00489	0f b6 44 24 67	 movzx	 eax, BYTE PTR haveSysPath$[rsp]
  0048e	85 c0		 test	 eax, eax
  00490	75 4a		 jne	 SHORT $LN27@rexx_cmd
  00492	83 7c 24 54 04	 cmp	 DWORD PTR argl$[rsp], 4
  00497	7c 43		 jl	 SHORT $LN27@rexx_cmd
  00499	83 7c 24 54 07	 cmp	 DWORD PTR argl$[rsp], 7
  0049e	7f 3c		 jg	 SHORT $LN27@rexx_cmd
  004a0	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  004a5	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  004aa	4c 8b c0	 mov	 r8, rax
  004ad	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  004b5	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  004b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159643
  004c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  004c6	85 c0		 test	 eax, eax
  004c8	75 12		 jne	 SHORT $LN27@rexx_cmd

; 888  :                 (argl >= 4 && argl <= 7 && HAVABBR( "SysPath" )))
; 889  :             {
; 890  :                 haveSysPath = TRUE;

  004ca	c6 44 24 67 01	 mov	 BYTE PTR haveSysPath$[rsp], 1

; 891  :                 whatValue   = _NEEDSYSPATH;

  004cf	c7 44 24 58 03
	00 00 00	 mov	 DWORD PTR whatValue$[rsp], 3

; 892  :                 continue;

  004d7	e9 14 fc ff ff	 jmp	 $LN5@rexx_cmd
$LN27@rexx_cmd:

; 893  :             }
; 894  : 
; 895  :             if (!haveExtensions &&

  004dc	0f b6 44 24 69	 movzx	 eax, BYTE PTR haveExtensions$[rsp]
  004e1	85 c0		 test	 eax, eax
  004e3	0f 85 82 00 00
	00		 jne	 $LN28@rexx_cmd
  004e9	83 7c 24 54 03	 cmp	 DWORD PTR argl$[rsp], 3
  004ee	7c 31		 jl	 SHORT $LN30@rexx_cmd
  004f0	83 7c 24 54 0a	 cmp	 DWORD PTR argl$[rsp], 10
  004f5	7f 2a		 jg	 SHORT $LN30@rexx_cmd
  004f7	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  004fc	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  00501	4c 8b c0	 mov	 r8, rax
  00504	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0050c	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00510	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159647
  00517	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  0051d	85 c0		 test	 eax, eax
  0051f	74 38		 je	 SHORT $LN29@rexx_cmd
$LN30@rexx_cmd:
  00521	83 7c 24 54 03	 cmp	 DWORD PTR argl$[rsp], 3
  00526	7c 43		 jl	 SHORT $LN28@rexx_cmd
  00528	83 7c 24 54 08	 cmp	 DWORD PTR argl$[rsp], 8
  0052d	7f 3c		 jg	 SHORT $LN28@rexx_cmd
  0052f	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  00534	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  00539	4c 8b c0	 mov	 r8, rax
  0053c	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00544	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00548	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159648
  0054f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  00555	85 c0		 test	 eax, eax
  00557	75 12		 jne	 SHORT $LN28@rexx_cmd
$LN29@rexx_cmd:

; 896  :                 ((argl >= 3 && argl <= 10 && HAVABBR( "Extensions" )) ||
; 897  :                  (argl >= 3 && argl <=  8 && HAVABBR( "Suffixes"   ))))
; 898  :             {
; 899  :                 haveExtensions = TRUE;

  00559	c6 44 24 69 01	 mov	 BYTE PTR haveExtensions$[rsp], 1

; 900  :                 whatValue      = _NEEDEXTENSIONS;

  0055e	c7 44 24 58 04
	00 00 00	 mov	 DWORD PTR whatValue$[rsp], 4

; 901  :                 continue;

  00566	e9 85 fb ff ff	 jmp	 $LN5@rexx_cmd
$LN28@rexx_cmd:

; 902  :             }
; 903  : 
; 904  :             if (!haveResolver &&

  0056b	0f b6 44 24 66	 movzx	 eax, BYTE PTR haveResolver$[rsp]
  00570	85 c0		 test	 eax, eax
  00572	75 4a		 jne	 SHORT $LN31@rexx_cmd
  00574	83 7c 24 54 05	 cmp	 DWORD PTR argl$[rsp], 5
  00579	7c 43		 jl	 SHORT $LN31@rexx_cmd
  0057b	83 7c 24 54 08	 cmp	 DWORD PTR argl$[rsp], 8
  00580	7f 3c		 jg	 SHORT $LN31@rexx_cmd
  00582	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  00587	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  0058c	4c 8b c0	 mov	 r8, rax
  0058f	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00597	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  0059b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159650
  005a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  005a8	85 c0		 test	 eax, eax
  005aa	75 12		 jne	 SHORT $LN31@rexx_cmd

; 905  :                 (argl >= 5 && argl <= 8 && HAVABBR( "Resolver" )))
; 906  :             {
; 907  :                 haveResolver = TRUE;

  005ac	c6 44 24 66 01	 mov	 BYTE PTR haveResolver$[rsp], 1

; 908  :                 whatValue    = _NEEDRESOLVER;

  005b1	c7 44 24 58 05
	00 00 00	 mov	 DWORD PTR whatValue$[rsp], 5

; 909  :                 continue;

  005b9	e9 32 fb ff ff	 jmp	 $LN5@rexx_cmd
$LN31@rexx_cmd:

; 910  :             }
; 911  : 
; 912  :             if (!haveMsgLevel &&

  005be	0f b6 44 24 63	 movzx	 eax, BYTE PTR haveMsgLevel$[rsp]
  005c3	85 c0		 test	 eax, eax
  005c5	75 4a		 jne	 SHORT $LN32@rexx_cmd
  005c7	83 7c 24 54 04	 cmp	 DWORD PTR argl$[rsp], 4
  005cc	7c 43		 jl	 SHORT $LN32@rexx_cmd
  005ce	83 7c 24 54 08	 cmp	 DWORD PTR argl$[rsp], 8
  005d3	7f 3c		 jg	 SHORT $LN32@rexx_cmd
  005d5	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  005da	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  005df	4c 8b c0	 mov	 r8, rax
  005e2	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  005ea	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  005ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159652
  005f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  005fb	85 c0		 test	 eax, eax
  005fd	75 12		 jne	 SHORT $LN32@rexx_cmd

; 913  :                 (argl >= 4 && argl <= 8 && HAVABBR( "MsgLevel" )))
; 914  :             {
; 915  :                 haveMsgLevel = TRUE;

  005ff	c6 44 24 63 01	 mov	 BYTE PTR haveMsgLevel$[rsp], 1

; 916  :                 whatValue    = _NEEDMSGLEVL;

  00604	c7 44 24 58 06
	00 00 00	 mov	 DWORD PTR whatValue$[rsp], 6

; 917  :                 continue;

  0060c	e9 df fa ff ff	 jmp	 $LN5@rexx_cmd
$LN32@rexx_cmd:

; 918  :             }
; 919  : 
; 920  :             if (!haveMsgPrefix &&

  00611	0f b6 44 24 64	 movzx	 eax, BYTE PTR haveMsgPrefix$[rsp]
  00616	85 c0		 test	 eax, eax
  00618	75 4a		 jne	 SHORT $LN33@rexx_cmd
  0061a	83 7c 24 54 04	 cmp	 DWORD PTR argl$[rsp], 4
  0061f	7c 43		 jl	 SHORT $LN33@rexx_cmd
  00621	83 7c 24 54 09	 cmp	 DWORD PTR argl$[rsp], 9
  00626	7f 3c		 jg	 SHORT $LN33@rexx_cmd
  00628	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  0062d	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  00632	4c 8b c0	 mov	 r8, rax
  00635	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  0063d	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00641	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159654
  00648	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  0064e	85 c0		 test	 eax, eax
  00650	75 12		 jne	 SHORT $LN33@rexx_cmd

; 921  :                 (argl >= 4 && argl <= 9 && HAVABBR( "MsgPrefix" )))
; 922  :             {
; 923  :                 haveMsgPrefix = TRUE;

  00652	c6 44 24 64 01	 mov	 BYTE PTR haveMsgPrefix$[rsp], 1

; 924  :                 whatValue     = _NEEDMSGPREF;

  00657	c7 44 24 58 07
	00 00 00	 mov	 DWORD PTR whatValue$[rsp], 7

; 925  :                 continue;

  0065f	e9 8c fa ff ff	 jmp	 $LN5@rexx_cmd
$LN33@rexx_cmd:

; 926  :             }
; 927  : 
; 928  :             if (!haveErrPrefix &&

  00664	0f b6 44 24 65	 movzx	 eax, BYTE PTR haveErrPrefix$[rsp]
  00669	85 c0		 test	 eax, eax
  0066b	75 4a		 jne	 SHORT $LN34@rexx_cmd
  0066d	83 7c 24 54 04	 cmp	 DWORD PTR argl$[rsp], 4
  00672	7c 43		 jl	 SHORT $LN34@rexx_cmd
  00674	83 7c 24 54 09	 cmp	 DWORD PTR argl$[rsp], 9
  00679	7f 3c		 jg	 SHORT $LN34@rexx_cmd
  0067b	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  00680	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  00685	4c 8b c0	 mov	 r8, rax
  00688	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  00690	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  00694	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159656
  0069b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  006a1	85 c0		 test	 eax, eax
  006a3	75 12		 jne	 SHORT $LN34@rexx_cmd

; 929  :                  (argl >= 4 && argl <= 9 && HAVABBR( "ErrPrefix" )))
; 930  :             {
; 931  :                 haveErrPrefix = TRUE;

  006a5	c6 44 24 65 01	 mov	 BYTE PTR haveErrPrefix$[rsp], 1

; 932  :                 whatValue     = _NEEDERRPREF;

  006aa	c7 44 24 58 08
	00 00 00	 mov	 DWORD PTR whatValue$[rsp], 8

; 933  :                 continue;

  006b2	e9 39 fa ff ff	 jmp	 $LN5@rexx_cmd
$LN34@rexx_cmd:

; 934  :             }
; 935  : 
; 936  :             // "REXX(%s) Argument %d: unknown option '%s'"
; 937  :             WRMSG( HHC17508, "E", PackageName, iarg, argv[ iarg ]);

  006b7	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  006bc	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv356[rsp], rax
  006c4	b9 01 00 00 00	 mov	 ecx, 1
  006c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  006cf	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  006d7	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR tv356[rsp]
  006df	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  006e3	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  006e8	8b 4c 24 50	 mov	 ecx, DWORD PTR iarg$[rsp]
  006ec	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  006f0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  006f7	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159657
  00703	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00708	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159658
  0070f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00714	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00719	41 b9 03 00 00
	00		 mov	 r9d, 3
  0071f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159659
  00726	ba a9 03 00 00	 mov	 edx, 937		; 000003a9H
  0072b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159660
  00732	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 938  :             return -1;

  00738	b8 ff ff ff ff	 mov	 eax, -1
  0073d	e9 f7 0f 00 00	 jmp	 $LN1@rexx_cmd

; 939  :         }

  00742	e9 32 0d 00 00	 jmp	 $LN12@rexx_cmd
$LN11@rexx_cmd:

; 940  :         else // (whatValue > 0)
; 941  :         {
; 942  :             //------------------------
; 943  :             // Parse the option value
; 944  :             //------------------------
; 945  : 
; 946  :             switch (whatValue)

  00747	8b 44 24 58	 mov	 eax, DWORD PTR whatValue$[rsp]
  0074b	89 44 24 70	 mov	 DWORD PTR tv371[rsp], eax
  0074f	8b 44 24 70	 mov	 eax, DWORD PTR tv371[rsp]
  00753	ff c8		 dec	 eax
  00755	89 44 24 70	 mov	 DWORD PTR tv371[rsp], eax
  00759	83 7c 24 70 09	 cmp	 DWORD PTR tv371[rsp], 9
  0075e	0f 87 08 0d 00
	00		 ja	 $LN8@rexx_cmd
  00764	48 63 44 24 70	 movsxd	 rax, DWORD PTR tv371[rsp]
  00769	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00770	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN127@rexx_cmd[rcx+rax*4]
  00777	48 03 c1	 add	 rax, rcx
  0077a	ff e0		 jmp	 rax
$LN35@rexx_cmd:

; 947  :             {
; 948  :                 case _NEEDCANCEL:
; 949  :                 {
; 950  :                     if (HAVKEYW( "All" ))

  0077c	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00781	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00789	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  0078d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159664
  00794	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0079a	85 c0		 test	 eax, eax
  0079c	75 2c		 jne	 SHORT $LN36@rexx_cmd

; 951  :                         return CancelAllRexxExecs() ? 0 : -1;

  0079e	e8 00 00 00 00	 call	 CancelAllRexxExecs
  007a3	0f b6 c0	 movzx	 eax, al
  007a6	85 c0		 test	 eax, eax
  007a8	74 0a		 je	 SHORT $LN123@rexx_cmd
  007aa	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv382[rsp], 0
  007b2	eb 08		 jmp	 SHORT $LN124@rexx_cmd
$LN123@rexx_cmd:
  007b4	c7 44 24 78 ff
	ff ff ff	 mov	 DWORD PTR tv382[rsp], -1
$LN124@rexx_cmd:
  007bc	8b 44 24 78	 mov	 eax, DWORD PTR tv382[rsp]
  007c0	e9 74 0f 00 00	 jmp	 $LN1@rexx_cmd
  007c5	e9 15 01 00 00	 jmp	 $LN37@rexx_cmd
$LN36@rexx_cmd:

; 952  :                     else
; 953  :                     {
; 954  :                         TID tid;
; 955  :                         char c;
; 956  : 
; 957  :                         if (sscanf( argv[ iarg ], SCN_TIDPAT "%c", &tid, &c ) == 1)

  007ca	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  007cf	4c 8d 4c 24 74	 lea	 r9, QWORD PTR c$1[rsp]
  007d4	4c 8d 84 24 88
	00 00 00	 lea	 r8, QWORD PTR tid$2[rsp]
  007dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG159666
  007e3	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  007eb	48 8b 0c c1	 mov	 rcx, QWORD PTR [rcx+rax*8]
  007ef	e8 00 00 00 00	 call	 sscanf
  007f4	83 f8 01	 cmp	 eax, 1
  007f7	75 2e		 jne	 SHORT $LN38@rexx_cmd

; 958  :                             return CancelRexxExec( tid ) ? 0 : -1;

  007f9	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tid$2[rsp]
  00800	e8 00 00 00 00	 call	 CancelRexxExec
  00805	0f b6 c0	 movzx	 eax, al
  00808	85 c0		 test	 eax, eax
  0080a	74 0a		 je	 SHORT $LN125@rexx_cmd
  0080c	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv396[rsp], 0
  00814	eb 08		 jmp	 SHORT $LN126@rexx_cmd
$LN125@rexx_cmd:
  00816	c7 44 24 7c ff
	ff ff ff	 mov	 DWORD PTR tv396[rsp], -1
$LN126@rexx_cmd:
  0081e	8b 44 24 7c	 mov	 eax, DWORD PTR tv396[rsp]
  00822	e9 12 0f 00 00	 jmp	 $LN1@rexx_cmd
$LN38@rexx_cmd:

; 959  : 
; 960  :                         // "REXX(%s) Option %s value '%s' is invalid"
; 961  :                         WRMSG( HHC17509, "E", PackageName,

  00827	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  0082c	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv397[rsp], rax
  00834	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR whatValue$[rsp]
  00839	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv401[rsp], rcx
  00841	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ARGSDESC
  00848	48 89 94 24 b0
	00 00 00	 mov	 QWORD PTR tv958[rsp], rdx
  00850	b9 01 00 00 00	 mov	 ecx, 1
  00855	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0085b	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00863	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR tv397[rsp]
  0086b	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  0086f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00874	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv958[rsp]
  0087c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR tv401[rsp]
  00884	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00888	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0088d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00894	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00899	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159667
  008a0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  008a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159668
  008ac	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  008b1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008b6	41 b9 03 00 00
	00		 mov	 r9d, 3
  008bc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159669
  008c3	ba c2 03 00 00	 mov	 edx, 962		; 000003c2H
  008c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159670
  008cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 962  :                             ARGSDESC[ whatValue ], argv[ iarg ]);
; 963  :                         return -1;

  008d5	b8 ff ff ff ff	 mov	 eax, -1
  008da	e9 5a 0e 00 00	 jmp	 $LN1@rexx_cmd
$LN37@rexx_cmd:

; 964  :                     }
; 965  :                 }
; 966  :                 break;

  008df	e9 88 0b 00 00	 jmp	 $LN8@rexx_cmd
$LN39@rexx_cmd:

; 967  : 
; 968  :                 case _NEEDPACKAGE:
; 969  :                 {
; 970  :                     if (0
; 971  :                         || HAVKEYW( REGINA_PKGNAME )
; 972  :                         || HAVKEYW( OOREXX_PKGNAME )
; 973  :                         || HAVKEYW( "auto" )
; 974  :                         || HAVKEYW( "none" )

  008e4	33 c0		 xor	 eax, eax
  008e6	85 c0		 test	 eax, eax
  008e8	0f 85 88 00 00
	00		 jne	 $LN42@rexx_cmd
  008ee	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  008f3	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  008fb	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  008ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159675
  00906	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0090c	85 c0		 test	 eax, eax
  0090e	74 66		 je	 SHORT $LN42@rexx_cmd
  00910	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00915	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0091d	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00921	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159676
  00928	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  0092e	85 c0		 test	 eax, eax
  00930	74 44		 je	 SHORT $LN42@rexx_cmd
  00932	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00937	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0093f	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00943	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159677
  0094a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00950	85 c0		 test	 eax, eax
  00952	74 22		 je	 SHORT $LN42@rexx_cmd
  00954	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00959	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00961	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00965	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159678
  0096c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00972	85 c0		 test	 eax, eax
  00974	75 1e		 jne	 SHORT $LN40@rexx_cmd
$LN42@rexx_cmd:

; 975  :                     )
; 976  :                     {
; 977  :                         wPackage = argv[ iarg ];

  00976	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  0097b	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00983	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00987	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR wPackage$[rsp], rax

; 978  :                     }

  0098f	e9 ee 00 00 00	 jmp	 $LN41@rexx_cmd
$LN40@rexx_cmd:

; 979  :                     else if (HAVKEYW( "reset" ))

  00994	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00999	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  009a1	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  009a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159681
  009ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  009b2	85 c0		 test	 eax, eax
  009b4	75 14		 jne	 SHORT $LN43@rexx_cmd

; 980  :                     {
; 981  :                         wPackage = DefaultPackage;

  009b6	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR DefaultPackage
  009bd	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR wPackage$[rsp], rax

; 982  :                     }

  009c5	e9 b8 00 00 00	 jmp	 $LN44@rexx_cmd
$LN43@rexx_cmd:

; 983  :                     else
; 984  :                     {
; 985  :                         // "REXX(%s) Option %s value '%s' is invalid"
; 986  :                         WRMSG( HHC17509, "E", PackageName,

  009ca	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  009cf	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv454[rsp], rax
  009d7	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR whatValue$[rsp]
  009dc	48 89 8c 24 d0
	00 00 00	 mov	 QWORD PTR tv458[rsp], rcx
  009e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ARGSDESC
  009eb	48 89 94 24 c8
	00 00 00	 mov	 QWORD PTR tv959[rsp], rdx
  009f3	b9 01 00 00 00	 mov	 ecx, 1
  009f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  009fe	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00a06	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR tv454[rsp]
  00a0e	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00a12	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00a17	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv959[rsp]
  00a1f	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR tv458[rsp]
  00a27	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00a2b	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00a30	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00a37	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00a3c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159682
  00a43	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00a48	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159683
  00a4f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00a54	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a59	41 b9 03 00 00
	00		 mov	 r9d, 3
  00a5f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159684
  00a66	ba db 03 00 00	 mov	 edx, 987		; 000003dbH
  00a6b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159685
  00a72	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 987  :                             ARGSDESC[ whatValue ], argv[ iarg ]);
; 988  :                         return -1;

  00a78	b8 ff ff ff ff	 mov	 eax, -1
  00a7d	e9 b7 0c 00 00	 jmp	 $LN1@rexx_cmd
$LN44@rexx_cmd:
$LN41@rexx_cmd:

; 989  :                     }
; 990  :                 }
; 991  :                 break;

  00a82	e9 e5 09 00 00	 jmp	 $LN8@rexx_cmd
$LN45@rexx_cmd:

; 992  : 
; 993  :                 case _NEEDEXTENSIONS:
; 994  :                 {
; 995  :                     if (HAVKEYW( "reset" ))

  00a87	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00a8c	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00a94	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00a98	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159689
  00a9f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00aa5	85 c0		 test	 eax, eax
  00aa7	75 11		 jne	 SHORT $LN46@rexx_cmd

; 996  :                         wExtensions = DefaultExtensions;

  00aa9	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR DefaultExtensions
  00ab0	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR wExtensions$[rsp], rax
  00ab8	eb 19		 jmp	 SHORT $LN47@rexx_cmd
$LN46@rexx_cmd:

; 997  :                     else
; 998  :                         wExtensions = argv[ iarg ];

  00aba	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00abf	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00ac7	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00acb	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR wExtensions$[rsp], rax
$LN47@rexx_cmd:

; 999  :                 }
; 1000 :                 break;

  00ad3	e9 94 09 00 00	 jmp	 $LN8@rexx_cmd
$LN48@rexx_cmd:

; 1001 : 
; 1002 :                 case _NEEDPATH:
; 1003 :                 {
; 1004 :                     if (HAVKEYW( "reset" ))

  00ad8	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00add	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00ae5	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00ae9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159693
  00af0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00af6	85 c0		 test	 eax, eax
  00af8	75 11		 jne	 SHORT $LN49@rexx_cmd

; 1005 :                         wPath = DefaultRexxPath;

  00afa	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR DefaultRexxPath
  00b01	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR wPath$[rsp], rax
  00b09	eb 19		 jmp	 SHORT $LN50@rexx_cmd
$LN49@rexx_cmd:

; 1006 :                     else
; 1007 :                         wPath = argv[ iarg ];

  00b0b	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00b10	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00b18	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00b1c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR wPath$[rsp], rax
$LN50@rexx_cmd:

; 1008 :                 }
; 1009 :                 break;

  00b24	e9 43 09 00 00	 jmp	 $LN8@rexx_cmd
$LN51@rexx_cmd:

; 1010 : 
; 1011 :                 case _NEEDSYSPATH:
; 1012 :                 {
; 1013 :                     if (0
; 1014 :                         || HAVKEYW( "Enable" )
; 1015 :                         || HAVKEYW( "On" )

  00b29	33 c0		 xor	 eax, eax
  00b2b	85 c0		 test	 eax, eax
  00b2d	75 44		 jne	 SHORT $LN54@rexx_cmd
  00b2f	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00b34	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00b3c	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00b40	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159698
  00b47	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00b4d	85 c0		 test	 eax, eax
  00b4f	74 22		 je	 SHORT $LN54@rexx_cmd
  00b51	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00b56	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00b5e	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00b62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159699
  00b69	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00b6f	85 c0		 test	 eax, eax
  00b71	75 0a		 jne	 SHORT $LN52@rexx_cmd
$LN54@rexx_cmd:

; 1016 :                     )
; 1017 :                     {
; 1018 :                         wSysPath = TRUE;

  00b73	c6 44 24 61 01	 mov	 BYTE PTR wSysPath$[rsp], 1

; 1019 :                     }

  00b78	e9 38 01 00 00	 jmp	 $LN53@rexx_cmd
$LN52@rexx_cmd:

; 1020 :                     else if (0
; 1021 :                         || HAVKEYW( "Disable" )
; 1022 :                         || HAVKEYW( "Off" )

  00b7d	33 c0		 xor	 eax, eax
  00b7f	85 c0		 test	 eax, eax
  00b81	75 44		 jne	 SHORT $LN57@rexx_cmd
  00b83	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00b88	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00b90	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00b94	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159703
  00b9b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00ba1	85 c0		 test	 eax, eax
  00ba3	74 22		 je	 SHORT $LN57@rexx_cmd
  00ba5	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00baa	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00bb2	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00bb6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159704
  00bbd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00bc3	85 c0		 test	 eax, eax
  00bc5	75 0a		 jne	 SHORT $LN55@rexx_cmd
$LN57@rexx_cmd:

; 1023 :                     )
; 1024 :                     {
; 1025 :                         wSysPath = FALSE;

  00bc7	c6 44 24 61 00	 mov	 BYTE PTR wSysPath$[rsp], 0

; 1026 :                     }

  00bcc	e9 e4 00 00 00	 jmp	 $LN56@rexx_cmd
$LN55@rexx_cmd:

; 1027 :                     else if (HAVKEYW( "reset" ))

  00bd1	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00bd6	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00bde	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00be2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159707
  00be9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00bef	85 c0		 test	 eax, eax
  00bf1	75 0a		 jne	 SHORT $LN58@rexx_cmd

; 1028 :                     {
; 1029 :                         wSysPath = DEFAULT_USESYSPATH;

  00bf3	c6 44 24 61 01	 mov	 BYTE PTR wSysPath$[rsp], 1

; 1030 :                     }

  00bf8	e9 b8 00 00 00	 jmp	 $LN59@rexx_cmd
$LN58@rexx_cmd:

; 1031 :                     else
; 1032 :                     {
; 1033 :                         // "REXX(%s) Option %s value '%s' is invalid"
; 1034 :                         WRMSG( HHC17509, "E", PackageName,

  00bfd	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00c02	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv529[rsp], rax
  00c0a	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR whatValue$[rsp]
  00c0f	48 89 8c 24 e8
	00 00 00	 mov	 QWORD PTR tv533[rsp], rcx
  00c17	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ARGSDESC
  00c1e	48 89 94 24 e0
	00 00 00	 mov	 QWORD PTR tv992[rsp], rdx
  00c26	b9 01 00 00 00	 mov	 ecx, 1
  00c2b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00c31	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00c39	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR tv529[rsp]
  00c41	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00c45	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00c4a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv992[rsp]
  00c52	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR tv533[rsp]
  00c5a	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00c5e	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00c63	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00c6a	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00c6f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159708
  00c76	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c7b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159709
  00c82	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c87	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c8c	41 b9 03 00 00
	00		 mov	 r9d, 3
  00c92	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159710
  00c99	ba 0b 04 00 00	 mov	 edx, 1035		; 0000040bH
  00c9e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159711
  00ca5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1035 :                             ARGSDESC[ whatValue ], argv[ iarg ]);
; 1036 :                         return -1;

  00cab	b8 ff ff ff ff	 mov	 eax, -1
  00cb0	e9 84 0a 00 00	 jmp	 $LN1@rexx_cmd
$LN59@rexx_cmd:
$LN56@rexx_cmd:
$LN53@rexx_cmd:

; 1037 :                     }
; 1038 :                 }
; 1039 :                 break;

  00cb5	e9 b2 07 00 00	 jmp	 $LN8@rexx_cmd
$LN60@rexx_cmd:

; 1040 : 
; 1041 :                 case _NEEDRESOLVER:
; 1042 :                 {
; 1043 :                     if (0
; 1044 :                         || HAVKEYW( "Enable" )
; 1045 :                         || HAVKEYW( "On" )

  00cba	33 c0		 xor	 eax, eax
  00cbc	85 c0		 test	 eax, eax
  00cbe	75 44		 jne	 SHORT $LN63@rexx_cmd
  00cc0	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00cc5	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00ccd	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00cd1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159716
  00cd8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00cde	85 c0		 test	 eax, eax
  00ce0	74 22		 je	 SHORT $LN63@rexx_cmd
  00ce2	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00ce7	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00cef	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00cf3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159717
  00cfa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00d00	85 c0		 test	 eax, eax
  00d02	75 0a		 jne	 SHORT $LN61@rexx_cmd
$LN63@rexx_cmd:

; 1046 :                     )
; 1047 :                     {
; 1048 :                         wResolver = TRUE;

  00d04	c6 44 24 60 01	 mov	 BYTE PTR wResolver$[rsp], 1

; 1049 :                     }

  00d09	e9 38 01 00 00	 jmp	 $LN62@rexx_cmd
$LN61@rexx_cmd:

; 1050 :                     else if (0
; 1051 :                         || HAVKEYW( "Disable" )
; 1052 :                         || HAVKEYW( "Off" )

  00d0e	33 c0		 xor	 eax, eax
  00d10	85 c0		 test	 eax, eax
  00d12	75 44		 jne	 SHORT $LN66@rexx_cmd
  00d14	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00d19	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00d21	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00d25	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159721
  00d2c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00d32	85 c0		 test	 eax, eax
  00d34	74 22		 je	 SHORT $LN66@rexx_cmd
  00d36	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00d3b	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00d43	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00d47	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159722
  00d4e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00d54	85 c0		 test	 eax, eax
  00d56	75 0a		 jne	 SHORT $LN64@rexx_cmd
$LN66@rexx_cmd:

; 1053 :                     )
; 1054 :                     {
; 1055 :                         wResolver = FALSE;

  00d58	c6 44 24 60 00	 mov	 BYTE PTR wResolver$[rsp], 0

; 1056 :                     }

  00d5d	e9 e4 00 00 00	 jmp	 $LN65@rexx_cmd
$LN64@rexx_cmd:

; 1057 :                     else if (HAVKEYW( "reset" ))

  00d62	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00d67	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00d6f	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00d73	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159725
  00d7a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00d80	85 c0		 test	 eax, eax
  00d82	75 0a		 jne	 SHORT $LN67@rexx_cmd

; 1058 :                     {
; 1059 :                         wResolver = DEFAULT_USERESOLVER;

  00d84	c6 44 24 60 01	 mov	 BYTE PTR wResolver$[rsp], 1

; 1060 :                     }

  00d89	e9 b8 00 00 00	 jmp	 $LN68@rexx_cmd
$LN67@rexx_cmd:

; 1061 :                     else
; 1062 :                     {
; 1063 :                         // "REXX(%s) Option %s value '%s' is invalid"
; 1064 :                         WRMSG( HHC17509, "E", PackageName,

  00d8e	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00d93	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv616[rsp], rax
  00d9b	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR whatValue$[rsp]
  00da0	48 89 8c 24 00
	01 00 00	 mov	 QWORD PTR tv620[rsp], rcx
  00da8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ARGSDESC
  00daf	48 89 94 24 f8
	00 00 00	 mov	 QWORD PTR tv993[rsp], rdx
  00db7	b9 01 00 00 00	 mov	 ecx, 1
  00dbc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00dc2	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00dca	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR tv616[rsp]
  00dd2	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00dd6	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00ddb	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR tv993[rsp]
  00de3	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR tv620[rsp]
  00deb	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00def	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00df4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00dfb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00e00	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159726
  00e07	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00e0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159727
  00e13	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00e18	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00e1d	41 b9 03 00 00
	00		 mov	 r9d, 3
  00e23	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159728
  00e2a	ba 29 04 00 00	 mov	 edx, 1065		; 00000429H
  00e2f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159729
  00e36	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1065 :                             ARGSDESC[ whatValue ], argv[ iarg ]);
; 1066 :                         return -1;

  00e3c	b8 ff ff ff ff	 mov	 eax, -1
  00e41	e9 f3 08 00 00	 jmp	 $LN1@rexx_cmd
$LN68@rexx_cmd:
$LN65@rexx_cmd:
$LN62@rexx_cmd:

; 1067 :                     }
; 1068 :                 }
; 1069 :                 break;

  00e46	e9 21 06 00 00	 jmp	 $LN8@rexx_cmd
$LN69@rexx_cmd:

; 1070 : 
; 1071 :                 case _NEEDMSGLEVL:
; 1072 :                 {
; 1073 :                     if (0
; 1074 :                         || HAVKEYW( "Disable" )
; 1075 :                         || HAVKEYW( "Off" )

  00e4b	33 c0		 xor	 eax, eax
  00e4d	85 c0		 test	 eax, eax
  00e4f	75 44		 jne	 SHORT $LN72@rexx_cmd
  00e51	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00e56	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00e5e	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00e62	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159734
  00e69	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00e6f	85 c0		 test	 eax, eax
  00e71	74 22		 je	 SHORT $LN72@rexx_cmd
  00e73	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00e78	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00e80	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00e84	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159735
  00e8b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00e91	85 c0		 test	 eax, eax
  00e93	75 0a		 jne	 SHORT $LN70@rexx_cmd
$LN72@rexx_cmd:

; 1076 :                     )
; 1077 :                     {
; 1078 :                         wMsgLevel = FALSE;

  00e95	c6 44 24 5d 00	 mov	 BYTE PTR wMsgLevel$[rsp], 0

; 1079 :                     }

  00e9a	e9 38 01 00 00	 jmp	 $LN71@rexx_cmd
$LN70@rexx_cmd:

; 1080 :                     else if (0
; 1081 :                         || HAVKEYW( "Enable" )
; 1082 :                         || HAVKEYW( "On" )

  00e9f	33 c0		 xor	 eax, eax
  00ea1	85 c0		 test	 eax, eax
  00ea3	75 44		 jne	 SHORT $LN75@rexx_cmd
  00ea5	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00eaa	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00eb2	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00eb6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159739
  00ebd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00ec3	85 c0		 test	 eax, eax
  00ec5	74 22		 je	 SHORT $LN75@rexx_cmd
  00ec7	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00ecc	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00ed4	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00ed8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159740
  00edf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00ee5	85 c0		 test	 eax, eax
  00ee7	75 0a		 jne	 SHORT $LN73@rexx_cmd
$LN75@rexx_cmd:

; 1083 :                     )
; 1084 :                     {
; 1085 :                         wMsgLevel = TRUE;

  00ee9	c6 44 24 5d 01	 mov	 BYTE PTR wMsgLevel$[rsp], 1

; 1086 :                     }

  00eee	e9 e4 00 00 00	 jmp	 $LN74@rexx_cmd
$LN73@rexx_cmd:

; 1087 :                     else if (HAVKEYW( "reset" ))

  00ef3	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00ef8	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00f00	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00f04	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159743
  00f0b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  00f11	85 c0		 test	 eax, eax
  00f13	75 0a		 jne	 SHORT $LN76@rexx_cmd

; 1088 :                     {
; 1089 :                         wMsgLevel = DEFAULT_MSGLEVEL;

  00f15	c6 44 24 5d 00	 mov	 BYTE PTR wMsgLevel$[rsp], 0

; 1090 :                     }

  00f1a	e9 b8 00 00 00	 jmp	 $LN77@rexx_cmd
$LN76@rexx_cmd:

; 1091 :                     else
; 1092 :                     {
; 1093 :                         // "REXX(%s) Option %s value '%s' is invalid"
; 1094 :                         WRMSG( HHC17509, "E", PackageName,

  00f1f	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00f24	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv671[rsp], rax
  00f2c	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR whatValue$[rsp]
  00f31	48 89 8c 24 18
	01 00 00	 mov	 QWORD PTR tv675[rsp], rcx
  00f39	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ARGSDESC
  00f40	48 89 94 24 10
	01 00 00	 mov	 QWORD PTR tv994[rsp], rdx
  00f48	b9 01 00 00 00	 mov	 ecx, 1
  00f4d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00f53	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00f5b	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR tv671[rsp]
  00f63	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00f67	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00f6c	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv994[rsp]
  00f74	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR tv675[rsp]
  00f7c	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00f80	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00f85	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  00f8c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00f91	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159744
  00f98	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00f9d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159745
  00fa4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00fa9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00fae	41 b9 03 00 00
	00		 mov	 r9d, 3
  00fb4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159746
  00fbb	ba 47 04 00 00	 mov	 edx, 1095		; 00000447H
  00fc0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159747
  00fc7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1095 :                             ARGSDESC[ whatValue ], argv[ iarg ]);
; 1096 :                         return -1;

  00fcd	b8 ff ff ff ff	 mov	 eax, -1
  00fd2	e9 62 07 00 00	 jmp	 $LN1@rexx_cmd
$LN77@rexx_cmd:
$LN74@rexx_cmd:
$LN71@rexx_cmd:

; 1097 :                     }
; 1098 :                 }
; 1099 :                 break;

  00fd7	e9 90 04 00 00	 jmp	 $LN8@rexx_cmd
$LN78@rexx_cmd:

; 1100 : 
; 1101 :                 case _NEEDMSGPREF:
; 1102 :                 {
; 1103 :                     if (0
; 1104 :                         || HAVKEYW( "Disable" )
; 1105 :                         || HAVKEYW( "Off" )

  00fdc	33 c0		 xor	 eax, eax
  00fde	85 c0		 test	 eax, eax
  00fe0	75 44		 jne	 SHORT $LN81@rexx_cmd
  00fe2	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  00fe7	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  00fef	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00ff3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159752
  00ffa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01000	85 c0		 test	 eax, eax
  01002	74 22		 je	 SHORT $LN81@rexx_cmd
  01004	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  01009	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01011	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  01015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159753
  0101c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01022	85 c0		 test	 eax, eax
  01024	75 0a		 jne	 SHORT $LN79@rexx_cmd
$LN81@rexx_cmd:

; 1106 :                     )
; 1107 :                     {
; 1108 :                         wMsgPrefix = FALSE;

  01026	c6 44 24 5e 00	 mov	 BYTE PTR wMsgPrefix$[rsp], 0

; 1109 :                     }

  0102b	e9 38 01 00 00	 jmp	 $LN80@rexx_cmd
$LN79@rexx_cmd:

; 1110 :                     else if (0
; 1111 :                         || HAVKEYW( "Enable" )
; 1112 :                         || HAVKEYW( "On" )

  01030	33 c0		 xor	 eax, eax
  01032	85 c0		 test	 eax, eax
  01034	75 44		 jne	 SHORT $LN84@rexx_cmd
  01036	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  0103b	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01043	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  01047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159757
  0104e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01054	85 c0		 test	 eax, eax
  01056	74 22		 je	 SHORT $LN84@rexx_cmd
  01058	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  0105d	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01065	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  01069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159758
  01070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01076	85 c0		 test	 eax, eax
  01078	75 0a		 jne	 SHORT $LN82@rexx_cmd
$LN84@rexx_cmd:

; 1113 :                     )
; 1114 :                     {
; 1115 :                         wMsgPrefix = TRUE;

  0107a	c6 44 24 5e 01	 mov	 BYTE PTR wMsgPrefix$[rsp], 1

; 1116 :                     }

  0107f	e9 e4 00 00 00	 jmp	 $LN83@rexx_cmd
$LN82@rexx_cmd:

; 1117 :                     else if (HAVKEYW( "reset" ))

  01084	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  01089	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01091	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  01095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159761
  0109c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  010a2	85 c0		 test	 eax, eax
  010a4	75 0a		 jne	 SHORT $LN85@rexx_cmd

; 1118 :                     {
; 1119 :                         wMsgPrefix = DEFAULT_MSGPREFIX;

  010a6	c6 44 24 5e 00	 mov	 BYTE PTR wMsgPrefix$[rsp], 0

; 1120 :                     }

  010ab	e9 b8 00 00 00	 jmp	 $LN86@rexx_cmd
$LN85@rexx_cmd:

; 1121 :                     else
; 1122 :                     {
; 1123 :                         // "REXX(%s) Option %s value '%s' is invalid"
; 1124 :                         WRMSG( HHC17509, "E", PackageName,

  010b0	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  010b5	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv726[rsp], rax
  010bd	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR whatValue$[rsp]
  010c2	48 89 8c 24 30
	01 00 00	 mov	 QWORD PTR tv730[rsp], rcx
  010ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ARGSDESC
  010d1	48 89 94 24 28
	01 00 00	 mov	 QWORD PTR tv995[rsp], rdx
  010d9	b9 01 00 00 00	 mov	 ecx, 1
  010de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  010e4	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  010ec	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR tv726[rsp]
  010f4	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  010f8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  010fd	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR tv995[rsp]
  01105	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR tv730[rsp]
  0110d	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  01111	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  01116	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  0111d	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159762
  01129	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0112e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159763
  01135	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0113a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0113f	41 b9 03 00 00
	00		 mov	 r9d, 3
  01145	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159764
  0114c	ba 65 04 00 00	 mov	 edx, 1125		; 00000465H
  01151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159765
  01158	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1125 :                             ARGSDESC[ whatValue ], argv[ iarg ]);
; 1126 :                         return -1;

  0115e	b8 ff ff ff ff	 mov	 eax, -1
  01163	e9 d1 05 00 00	 jmp	 $LN1@rexx_cmd
$LN86@rexx_cmd:
$LN83@rexx_cmd:
$LN80@rexx_cmd:

; 1127 :                     }
; 1128 :                 }
; 1129 :                 break;

  01168	e9 ff 02 00 00	 jmp	 $LN8@rexx_cmd
$LN87@rexx_cmd:

; 1130 : 
; 1131 :                 case _NEEDERRPREF:
; 1132 :                 {
; 1133 :                     if (0
; 1134 :                         || HAVKEYW( "Disable" )
; 1135 :                         || HAVKEYW( "Off" )

  0116d	33 c0		 xor	 eax, eax
  0116f	85 c0		 test	 eax, eax
  01171	75 44		 jne	 SHORT $LN90@rexx_cmd
  01173	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  01178	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01180	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  01184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159770
  0118b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01191	85 c0		 test	 eax, eax
  01193	74 22		 je	 SHORT $LN90@rexx_cmd
  01195	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  0119a	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  011a2	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  011a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159771
  011ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  011b3	85 c0		 test	 eax, eax
  011b5	75 0a		 jne	 SHORT $LN88@rexx_cmd
$LN90@rexx_cmd:

; 1136 :                     )
; 1137 :                     {
; 1138 :                         wErrPrefix = FALSE;

  011b7	c6 44 24 5f 00	 mov	 BYTE PTR wErrPrefix$[rsp], 0

; 1139 :                     }

  011bc	e9 38 01 00 00	 jmp	 $LN89@rexx_cmd
$LN88@rexx_cmd:

; 1140 :                     else if (0
; 1141 :                         || HAVKEYW( "Enable" )
; 1142 :                         || HAVKEYW( "On" )

  011c1	33 c0		 xor	 eax, eax
  011c3	85 c0		 test	 eax, eax
  011c5	75 44		 jne	 SHORT $LN93@rexx_cmd
  011c7	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  011cc	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  011d4	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  011d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159775
  011df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  011e5	85 c0		 test	 eax, eax
  011e7	74 22		 je	 SHORT $LN93@rexx_cmd
  011e9	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  011ee	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  011f6	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  011fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159776
  01201	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01207	85 c0		 test	 eax, eax
  01209	75 0a		 jne	 SHORT $LN91@rexx_cmd
$LN93@rexx_cmd:

; 1143 :                     )
; 1144 :                     {
; 1145 :                         wErrPrefix = TRUE;

  0120b	c6 44 24 5f 01	 mov	 BYTE PTR wErrPrefix$[rsp], 1

; 1146 :                     }

  01210	e9 e4 00 00 00	 jmp	 $LN92@rexx_cmd
$LN91@rexx_cmd:

; 1147 :                     else if (HAVKEYW( "reset" ))

  01215	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  0121a	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  01222	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  01226	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159779
  0122d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  01233	85 c0		 test	 eax, eax
  01235	75 0a		 jne	 SHORT $LN94@rexx_cmd

; 1148 :                     {
; 1149 :                         wErrPrefix = DEFAULT_ERRPREFIX;

  01237	c6 44 24 5f 00	 mov	 BYTE PTR wErrPrefix$[rsp], 0

; 1150 :                     }

  0123c	e9 b8 00 00 00	 jmp	 $LN95@rexx_cmd
$LN94@rexx_cmd:

; 1151 :                     else
; 1152 :                     {
; 1153 :                         // "REXX(%s) Option %s value '%s' is invalid"
; 1154 :                         WRMSG( HHC17509, "E", PackageName,

  01241	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  01246	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv813[rsp], rax
  0124e	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR whatValue$[rsp]
  01253	48 89 8c 24 48
	01 00 00	 mov	 QWORD PTR tv817[rsp], rcx
  0125b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ARGSDESC
  01262	48 89 94 24 40
	01 00 00	 mov	 QWORD PTR tv996[rsp], rdx
  0126a	b9 01 00 00 00	 mov	 ecx, 1
  0126f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01275	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0127d	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR tv813[rsp]
  01285	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  01289	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0128e	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv996[rsp]
  01296	48 8b 94 24 48
	01 00 00	 mov	 rdx, QWORD PTR tv817[rsp]
  0129e	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  012a2	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  012a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  012ae	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  012b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159780
  012ba	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  012bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159781
  012c6	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  012cb	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  012d0	41 b9 03 00 00
	00		 mov	 r9d, 3
  012d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159782
  012dd	ba 83 04 00 00	 mov	 edx, 1155		; 00000483H
  012e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159783
  012e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1155 :                             ARGSDESC[ whatValue ], argv[ iarg ]);
; 1156 :                         return -1;

  012ef	b8 ff ff ff ff	 mov	 eax, -1
  012f4	e9 40 04 00 00	 jmp	 $LN1@rexx_cmd
$LN95@rexx_cmd:
$LN92@rexx_cmd:
$LN89@rexx_cmd:

; 1157 :                     }
; 1158 :                 }
; 1159 :                 break;

  012f9	e9 6e 01 00 00	 jmp	 $LN8@rexx_cmd
$LN96@rexx_cmd:

; 1160 : 
; 1161 :                 case _NEEDMODE:
; 1162 :                 {
; 1163 :                     if (argl >= 3 && argl <= 7 && HAVABBR( "Command" ))

  012fe	83 7c 24 54 03	 cmp	 DWORD PTR argl$[rsp], 3
  01303	7c 3b		 jl	 SHORT $LN97@rexx_cmd
  01305	83 7c 24 54 07	 cmp	 DWORD PTR argl$[rsp], 7
  0130a	7f 34		 jg	 SHORT $LN97@rexx_cmd
  0130c	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  01311	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  01316	4c 8b c0	 mov	 r8, rax
  01319	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  01321	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  01325	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159787
  0132c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  01332	85 c0		 test	 eax, eax
  01334	75 0a		 jne	 SHORT $LN97@rexx_cmd

; 1164 :                     {
; 1165 :                         wMode = MODE_COMMAND;

  01336	c6 44 24 5c 00	 mov	 BYTE PTR wMode$[rsp], 0

; 1166 :                     }

  0133b	e9 2c 01 00 00	 jmp	 $LN98@rexx_cmd
$LN97@rexx_cmd:

; 1167 :                     else if (argl >= 3 && argl <= 10 && HAVABBR( "Subroutine" ))

  01340	83 7c 24 54 03	 cmp	 DWORD PTR argl$[rsp], 3
  01345	7c 3b		 jl	 SHORT $LN99@rexx_cmd
  01347	83 7c 24 54 0a	 cmp	 DWORD PTR argl$[rsp], 10
  0134c	7f 34		 jg	 SHORT $LN99@rexx_cmd
  0134e	48 63 44 24 54	 movsxd	 rax, DWORD PTR argl$[rsp]
  01353	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR iarg$[rsp]
  01358	4c 8b c0	 mov	 r8, rax
  0135b	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR argv$[rsp]
  01363	48 8b 14 c8	 mov	 rdx, QWORD PTR [rax+rcx*8]
  01367	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159790
  0136e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__strnicmp
  01374	85 c0		 test	 eax, eax
  01376	75 0a		 jne	 SHORT $LN99@rexx_cmd

; 1168 :                     {
; 1169 :                         wMode = MODE_SUBROUTINE;

  01378	c6 44 24 5c 01	 mov	 BYTE PTR wMode$[rsp], 1

; 1170 :                     }

  0137d	e9 ea 00 00 00	 jmp	 $LN100@rexx_cmd
$LN99@rexx_cmd:

; 1171 :                     else if (HAVKEYW( "reset" ))

  01382	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  01387	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  0138f	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  01393	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159793
  0139a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__stricmp
  013a0	85 c0		 test	 eax, eax
  013a2	75 10		 jne	 SHORT $LN101@rexx_cmd

; 1172 :                     {
; 1173 :                         wMode = DefaultMode;

  013a4	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR DefaultMode
  013ab	88 44 24 5c	 mov	 BYTE PTR wMode$[rsp], al

; 1174 :                     }

  013af	e9 b8 00 00 00	 jmp	 $LN102@rexx_cmd
$LN101@rexx_cmd:

; 1175 :                     else
; 1176 :                     {
; 1177 :                         // "REXX(%s) Option %s value '%s' is invalid"
; 1178 :                         WRMSG( HHC17509, "E", PackageName,

  013b4	48 63 44 24 50	 movsxd	 rax, DWORD PTR iarg$[rsp]
  013b9	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv860[rsp], rax
  013c1	48 63 4c 24 58	 movsxd	 rcx, DWORD PTR whatValue$[rsp]
  013c6	48 89 8c 24 60
	01 00 00	 mov	 QWORD PTR tv864[rsp], rcx
  013ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:ARGSDESC
  013d5	48 89 94 24 58
	01 00 00	 mov	 QWORD PTR tv997[rsp], rdx
  013dd	b9 01 00 00 00	 mov	 ecx, 1
  013e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  013e8	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR argv$[rsp]
  013f0	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR tv860[rsp]
  013f8	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  013fc	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  01401	48 8b 8c 24 58
	01 00 00	 mov	 rcx, QWORD PTR tv997[rsp]
  01409	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR tv864[rsp]
  01411	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  01415	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0141a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  01421	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01426	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159794
  0142d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01432	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159795
  01439	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0143e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01443	41 b9 03 00 00
	00		 mov	 r9d, 3
  01449	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159796
  01450	ba 9b 04 00 00	 mov	 edx, 1179		; 0000049bH
  01455	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159797
  0145c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1179 :                             ARGSDESC[ whatValue ], argv[ iarg ]);
; 1180 :                         return -1;

  01462	b8 ff ff ff ff	 mov	 eax, -1
  01467	e9 cd 02 00 00	 jmp	 $LN1@rexx_cmd
$LN102@rexx_cmd:
$LN100@rexx_cmd:
$LN98@rexx_cmd:
$LN8@rexx_cmd:

; 1181 :                     }
; 1182 :                 }
; 1183 :                 break;
; 1184 :             }
; 1185 :             // end switch (whatValue)
; 1186 : 
; 1187 :             whatValue = 0;

  0146c	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR whatValue$[rsp], 0

; 1188 :             continue;

  01474	e9 77 ec ff ff	 jmp	 $LN5@rexx_cmd
$LN12@rexx_cmd:

; 1189 :         }
; 1190 :     }

  01479	e9 72 ec ff ff	 jmp	 $LN5@rexx_cmd
$LN6@rexx_cmd:

; 1191 :     // end for (iarg=1; iarg < argc; iarg++)
; 1192 : 
; 1193 :     if (whatValue == _NEEDPACKAGE)

  0147e	83 7c 24 58 01	 cmp	 DWORD PTR whatValue$[rsp], 1
  01483	75 14		 jne	 SHORT $LN103@rexx_cmd

; 1194 :     {
; 1195 :         // (they entered "rexx start" without specifying package)
; 1196 :         wPackage = DefaultPackage;

  01485	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR DefaultPackage
  0148c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR wPackage$[rsp], rax

; 1197 :     }

  01494	e9 9d 00 00 00	 jmp	 $LN104@rexx_cmd
$LN103@rexx_cmd:

; 1198 :     else if (whatValue > 0)

  01499	83 7c 24 58 00	 cmp	 DWORD PTR whatValue$[rsp], 0
  0149e	0f 8e 92 00 00
	00		 jle	 $LN105@rexx_cmd

; 1199 :     {
; 1200 :         // "REXX(%s) Option '%s' needs a value"
; 1201 :         WRMSG( HHC17507, "E", PackageName, ARGSDESC[ whatValue ]);

  014a4	48 63 44 24 58	 movsxd	 rax, DWORD PTR whatValue$[rsp]
  014a9	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv882[rsp], rax
  014b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:ARGSDESC
  014b8	48 89 8c 24 68
	01 00 00	 mov	 QWORD PTR tv998[rsp], rcx
  014c0	b9 01 00 00 00	 mov	 ecx, 1
  014c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  014cb	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR tv998[rsp]
  014d3	48 8b 8c 24 70
	01 00 00	 mov	 rcx, QWORD PTR tv882[rsp]
  014db	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  014df	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  014e4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  014eb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  014f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159801
  014f7	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  014fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159802
  01503	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01508	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0150d	41 b9 03 00 00
	00		 mov	 r9d, 3
  01513	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159803
  0151a	ba b1 04 00 00	 mov	 edx, 1201		; 000004b1H
  0151f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159804
  01526	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1202 :         return -1;

  0152c	b8 ff ff ff ff	 mov	 eax, -1
  01531	e9 03 02 00 00	 jmp	 $LN1@rexx_cmd
$LN105@rexx_cmd:
$LN104@rexx_cmd:

; 1203 :     }
; 1204 : 
; 1205 :     //----------------------------------------------------------------
; 1206 :     // Option parsing complete. Process their requested options.
; 1207 :     //----------------------------------------------------------------
; 1208 : 
; 1209 :     if (haveMode)

  01536	0f b6 44 24 62	 movzx	 eax, BYTE PTR haveMode$[rsp]
  0153b	85 c0		 test	 eax, eax
  0153d	74 0b		 je	 SHORT $LN106@rexx_cmd

; 1210 :         RexxMode = wMode;

  0153f	0f b6 44 24 5c	 movzx	 eax, BYTE PTR wMode$[rsp]
  01544	88 05 00 00 00
	00		 mov	 BYTE PTR RexxMode, al
$LN106@rexx_cmd:

; 1211 : 
; 1212 :     if (haveMsgLevel)

  0154a	0f b6 44 24 63	 movzx	 eax, BYTE PTR haveMsgLevel$[rsp]
  0154f	85 c0		 test	 eax, eax
  01551	74 0b		 je	 SHORT $LN107@rexx_cmd

; 1213 :         MsgLevel = wMsgLevel;

  01553	0f b6 44 24 5d	 movzx	 eax, BYTE PTR wMsgLevel$[rsp]
  01558	88 05 00 00 00
	00		 mov	 BYTE PTR MsgLevel, al
$LN107@rexx_cmd:

; 1214 : 
; 1215 :     if (haveMsgPrefix)

  0155e	0f b6 44 24 64	 movzx	 eax, BYTE PTR haveMsgPrefix$[rsp]
  01563	85 c0		 test	 eax, eax
  01565	74 0b		 je	 SHORT $LN108@rexx_cmd

; 1216 :         MsgPrefix = wMsgPrefix;

  01567	0f b6 44 24 5e	 movzx	 eax, BYTE PTR wMsgPrefix$[rsp]
  0156c	88 05 00 00 00
	00		 mov	 BYTE PTR MsgPrefix, al
$LN108@rexx_cmd:

; 1217 : 
; 1218 :     if (haveErrPrefix)

  01572	0f b6 44 24 65	 movzx	 eax, BYTE PTR haveErrPrefix$[rsp]
  01577	85 c0		 test	 eax, eax
  01579	74 0b		 je	 SHORT $LN109@rexx_cmd

; 1219 :         ErrPrefix = wErrPrefix;

  0157b	0f b6 44 24 5f	 movzx	 eax, BYTE PTR wErrPrefix$[rsp]
  01580	88 05 00 00 00
	00		 mov	 BYTE PTR ErrPrefix, al
$LN109@rexx_cmd:

; 1220 : 
; 1221 :     if (haveResolver)

  01586	0f b6 44 24 66	 movzx	 eax, BYTE PTR haveResolver$[rsp]
  0158b	85 c0		 test	 eax, eax
  0158d	74 0b		 je	 SHORT $LN110@rexx_cmd

; 1222 :         useResolver = wResolver;

  0158f	0f b6 44 24 60	 movzx	 eax, BYTE PTR wResolver$[rsp]
  01594	88 05 00 00 00
	00		 mov	 BYTE PTR useResolver, al
$LN110@rexx_cmd:

; 1223 : 
; 1224 :     if (haveSysPath)

  0159a	0f b6 44 24 67	 movzx	 eax, BYTE PTR haveSysPath$[rsp]
  0159f	85 c0		 test	 eax, eax
  015a1	74 0b		 je	 SHORT $LN111@rexx_cmd

; 1225 :         useSysPath = wSysPath;

  015a3	0f b6 44 24 61	 movzx	 eax, BYTE PTR wSysPath$[rsp]
  015a8	88 05 00 00 00
	00		 mov	 BYTE PTR useSysPath, al
$LN111@rexx_cmd:

; 1226 : 
; 1227 :     if (havePath)

  015ae	0f b6 44 24 68	 movzx	 eax, BYTE PTR havePath$[rsp]
  015b3	85 c0		 test	 eax, eax
  015b5	74 0d		 je	 SHORT $LN112@rexx_cmd

; 1228 :         InitializePaths( wPath );

  015b7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR wPath$[rsp]
  015bf	e8 00 00 00 00	 call	 InitializePaths
$LN112@rexx_cmd:

; 1229 : 
; 1230 :     if (haveExtensions)

  015c4	0f b6 44 24 69	 movzx	 eax, BYTE PTR haveExtensions$[rsp]
  015c9	85 c0		 test	 eax, eax
  015cb	74 0d		 je	 SHORT $LN113@rexx_cmd

; 1231 :         InitializeExtensions( wExtensions );

  015cd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR wExtensions$[rsp]
  015d5	e8 00 00 00 00	 call	 InitializeExtensions
$LN113@rexx_cmd:

; 1232 : 
; 1233 :     /* Disable/Enable the Rexx package, as needed */
; 1234 :     if (haveDisable)

  015da	0f b6 44 24 6a	 movzx	 eax, BYTE PTR haveDisable$[rsp]
  015df	85 c0		 test	 eax, eax
  015e1	0f 84 d0 00 00
	00		 je	 $LN114@rexx_cmd

; 1235 :     {
; 1236 :         if (IsEnabled( NULL ))

  015e7	33 c9		 xor	 ecx, ecx
  015e9	e8 00 00 00 00	 call	 IsEnabled
  015ee	0f b6 c0	 movzx	 eax, al
  015f1	85 c0		 test	 eax, eax
  015f3	74 6a		 je	 SHORT $LN116@rexx_cmd

; 1237 :         {
; 1238 :             char* saved_pkgname = PackageName;

  015f5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PackageName
  015fc	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR saved_pkgname$3[rsp], rax

; 1239 :             Disable();

  01604	e8 00 00 00 00	 call	 Disable

; 1240 :             // "REXX(%s) Rexx has been stopped/disabled"
; 1241 :             WRMSG( HHC17526, "I", saved_pkgname );

  01609	b9 01 00 00 00	 mov	 ecx, 1
  0160e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  01614	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR saved_pkgname$3[rsp]
  0161c	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01621	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159817
  01628	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0162d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159818
  01634	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01639	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0163e	41 b9 03 00 00
	00		 mov	 r9d, 3
  01644	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159819
  0164b	ba d9 04 00 00	 mov	 edx, 1241		; 000004d9H
  01650	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159820
  01657	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 1242 :         }

  0165d	eb 53		 jmp	 SHORT $LN117@rexx_cmd
$LN116@rexx_cmd:

; 1243 :         else
; 1244 :         {
; 1245 :             // "REXX(%s) Rexx already stopped/disabled"
; 1246 :             WRMSG( HHC17523, "W", PackageName );

  0165f	b9 01 00 00 00	 mov	 ecx, 1
  01664	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0166a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  01671	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  01676	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159821
  0167d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01682	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159822
  01689	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0168e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01693	41 b9 03 00 00
	00		 mov	 r9d, 3
  01699	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159823
  016a0	ba de 04 00 00	 mov	 edx, 1246		; 000004deH
  016a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159824
  016ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN117@rexx_cmd:

; 1247 :         }
; 1248 :     }

  016b2	e9 80 00 00 00	 jmp	 $LN115@rexx_cmd
$LN114@rexx_cmd:

; 1249 :     else if (haveEnable)

  016b7	0f b6 44 24 6b	 movzx	 eax, BYTE PTR haveEnable$[rsp]
  016bc	85 c0		 test	 eax, eax
  016be	74 77		 je	 SHORT $LN118@rexx_cmd

; 1250 :     {
; 1251 :         if (IsDisabled())

  016c0	e8 00 00 00 00	 call	 IsDisabled
  016c5	0f b6 c0	 movzx	 eax, al
  016c8	85 c0		 test	 eax, eax
  016ca	74 18		 je	 SHORT $LN119@rexx_cmd

; 1252 :         {
; 1253 :             // Enable function will report version/source, etc.
; 1254 :             if (Enable( wPackage ) == 0)

  016cc	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR wPackage$[rsp]
  016d4	e8 00 00 00 00	 call	 Enable
  016d9	85 c0		 test	 eax, eax
  016db	75 05		 jne	 SHORT $LN121@rexx_cmd

; 1255 :                 DisplayOptions();

  016dd	e8 00 00 00 00	 call	 DisplayOptions
$LN121@rexx_cmd:

; 1256 :         }

  016e2	eb 53		 jmp	 SHORT $LN120@rexx_cmd
$LN119@rexx_cmd:

; 1257 :         else
; 1258 :         {
; 1259 :             // "REXX(%s) Rexx already started/enabled"
; 1260 :             WRMSG( HHC17522, "W", PackageName );

  016e4	b9 01 00 00 00	 mov	 ecx, 1
  016e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  016ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PackageName
  016f6	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  016fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159829
  01702	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01707	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159830
  0170e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01713	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01718	41 b9 03 00 00
	00		 mov	 r9d, 3
  0171e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG159831
  01725	ba ec 04 00 00	 mov	 edx, 1260		; 000004ecH
  0172a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG159832
  01731	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN120@rexx_cmd:
$LN118@rexx_cmd:
$LN115@rexx_cmd:

; 1261 :         }
; 1262 :     }
; 1263 : 
; 1264 :     return 0;

  01737	33 c0		 xor	 eax, eax
$LN1@rexx_cmd:

; 1265 : 
; 1266 : } // end rexx_cmd

  01739	48 81 c4 88 01
	00 00		 add	 rsp, 392		; 00000188H
  01740	c3		 ret	 0
  01741	0f 1f 00	 npad	 3
$LN127@rexx_cmd:
  01744	00 00 00 00	 DD	 $LN39@rexx_cmd
  01748	00 00 00 00	 DD	 $LN48@rexx_cmd
  0174c	00 00 00 00	 DD	 $LN51@rexx_cmd
  01750	00 00 00 00	 DD	 $LN45@rexx_cmd
  01754	00 00 00 00	 DD	 $LN60@rexx_cmd
  01758	00 00 00 00	 DD	 $LN69@rexx_cmd
  0175c	00 00 00 00	 DD	 $LN78@rexx_cmd
  01760	00 00 00 00	 DD	 $LN87@rexx_cmd
  01764	00 00 00 00	 DD	 $LN96@rexx_cmd
  01768	00 00 00 00	 DD	 $LN35@rexx_cmd
rexx_cmd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dbgtrace.h
_TEXT	SEGMENT
buffsize$ = 48
rc$ = 52
chunksize$ = 56
buffer$ = 64
args$ = 72
fmt$ = 96
DebuggerTrace PROC

; 94   :   static inline void DebuggerTrace(char* fmt, ...) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 95   :       const int chunksize = 512;

  00018	c7 44 24 38 00
	02 00 00	 mov	 DWORD PTR chunksize$[rsp], 512 ; 00000200H

; 96   :       int buffsize = 0;

  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR buffsize$[rsp], 0

; 97   :       char* buffer = NULL;

  00028	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR buffer$[rsp], 0

; 98   :       int rc = -1;

  00031	c7 44 24 34 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 99   :       va_list args;
; 100  :       va_start( args, fmt );

  00039	48 8d 44 24 68	 lea	 rax, QWORD PTR fmt$[rsp+8]
  0003e	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN9@DebuggerTr:
$LN4@DebuggerTr:

; 101  :       do {
; 102  :           if (buffer) free( buffer );

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00049	74 0b		 je	 SHORT $LN5@DebuggerTr
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN5@DebuggerTr:

; 103  :           buffsize += chunksize;

  00056	8b 44 24 38	 mov	 eax, DWORD PTR chunksize$[rsp]
  0005a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0005e	03 c8		 add	 ecx, eax
  00060	8b c1		 mov	 eax, ecx
  00062	89 44 24 30	 mov	 DWORD PTR buffsize$[rsp], eax

; 104  :           buffer = malloc( buffsize + 1 );

  00066	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  0006a	ff c0		 inc	 eax
  0006c	48 98		 cdqe
  0006e	48 8b c8	 mov	 rcx, rax
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00077	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 105  :           if (!buffer) BREAK_INTO_DEBUGGER();

  0007c	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  00082	75 01		 jne	 SHORT $LN6@DebuggerTr
  00084	cc		 int	 3
$LN6@DebuggerTr:

; 106  :           rc = _vsnprintf_s( buffer, buffsize+1, buffsize, fmt, args);

  00085	48 63 44 24 30	 movsxd	 rax, DWORD PTR buffsize$[rsp]
  0008a	8b 4c 24 30	 mov	 ecx, DWORD PTR buffsize$[rsp]
  0008e	ff c1		 inc	 ecx
  00090	48 63 c9	 movsxd	 rcx, ecx
  00093	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00098	48 89 54 24 20	 mov	 QWORD PTR [rsp+32], rdx
  0009d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR fmt$[rsp]
  000a2	4c 8b c0	 mov	 r8, rax
  000a5	48 8b d1	 mov	 rdx, rcx
  000a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000ad	e8 00 00 00 00	 call	 _vsnprintf_s
  000b2	89 44 24 34	 mov	 DWORD PTR rc$[rsp], eax

; 107  :       } while (rc < 0 || rc >= buffsize);

  000b6	83 7c 24 34 00	 cmp	 DWORD PTR rc$[rsp], 0
  000bb	7c 86		 jl	 SHORT $LN4@DebuggerTr
  000bd	8b 44 24 30	 mov	 eax, DWORD PTR buffsize$[rsp]
  000c1	39 44 24 34	 cmp	 DWORD PTR rc$[rsp], eax
  000c5	0f 8d 78 ff ff
	ff		 jge	 $LN9@DebuggerTr

; 108  :       OutputDebugStringA( buffer ); /* send to debugger pane */

  000cb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringA

; 109  :       if (buffer) free( buffer );

  000d6	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000dc	74 0b		 je	 SHORT $LN7@DebuggerTr
  000de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN7@DebuggerTr:

; 110  :       va_end( args );

  000e9	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 111  :   }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
DebuggerTrace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sscanf	PROC						; COMDAT

; 2247 :     {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR _Format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR _ArgList$[rsp], rax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

  00022	4c 8b 4c 24 28	 mov	 r9, QWORD PTR _ArgList$[rsp]
  00027	45 33 c0	 xor	 r8d, r8d
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR _Format$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  00034	e8 00 00 00 00	 call	 _vsscanf_l
  00039	89 44 24 20	 mov	 DWORD PTR _Result$[rsp], eax

; 2252 :         __crt_va_end(_ArgList);

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR _ArgList$[rsp], 0

; 2253 :         return _Result;

  00046	8b 44 24 20	 mov	 eax, DWORD PTR _Result$[rsp]

; 2254 :     }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsscanf_l PROC						; COMDAT

; 2152 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2153 :         return __stdio_common_vsscanf(

  00018	e8 00 00 00 00	 call	 __local_stdio_scanf_options
  0001d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00022	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _Locale$[rsp]
  0002c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR _Format$[rsp]
  00036	49 c7 c0 ff ff
	ff ff		 mov	 r8, -1
  0003d	48 8b 54 24 40	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsscanf

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_MaxCount$ = 80
_Format$ = 88
_ArgList$ = 96
_vsnprintf_s PROC					; COMDAT

; 1598 :     {

$LN3:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1599 :         return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, NULL, _ArgList);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR _ArgList$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00022	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0002b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR _Format$[rsp]
  00030	4c 8b 44 24 50	 mov	 r8, QWORD PTR _MaxCount$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR _BufferCount$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _Buffer$[rsp]
  0003f	e8 00 00 00 00	 call	 _vsnprintf_s_l

; 1600 :     }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
_vsnprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
;	COMDAT _vsnprintf_s_l
_TEXT	SEGMENT
_Result$ = 64
tv74 = 68
_Buffer$ = 96
_BufferCount$ = 104
_MaxCount$ = 112
_Format$ = 120
_Locale$ = 128
_ArgList$ = 136
_vsnprintf_s_l PROC					; COMDAT

; 1577 :     {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1578 :         int const _Result = __stdio_common_vsnprintf_s(

  00018	e8 00 00 00 00	 call	 __local_stdio_printf_options
  0001d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _ArgList$[rsp]
  00025	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0002a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _Locale$[rsp]
  00032	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00037	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _Format$[rsp]
  0003c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00041	4c 8b 4c 24 70	 mov	 r9, QWORD PTR _MaxCount$[rsp]
  00046	4c 8b 44 24 68	 mov	 r8, QWORD PTR _BufferCount$[rsp]
  0004b	48 8b 54 24 60	 mov	 rdx, QWORD PTR _Buffer$[rsp]
  00050	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___stdio_common_vsnprintf_s
  00059	89 44 24 40	 mov	 DWORD PTR _Result$[rsp], eax

; 1579 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1580 :             _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
; 1581 : 
; 1582 :         return _Result < 0 ? -1 : _Result;

  0005d	83 7c 24 40 00	 cmp	 DWORD PTR _Result$[rsp], 0
  00062	7d 0a		 jge	 SHORT $LN3@vsnprintf_
  00064	c7 44 24 44 ff
	ff ff ff	 mov	 DWORD PTR tv74[rsp], -1
  0006c	eb 08		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  0006e	8b 44 24 40	 mov	 eax, DWORD PTR _Result$[rsp]
  00072	89 44 24 44	 mov	 DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
  00076	8b 44 24 44	 mov	 eax, DWORD PTR tv74[rsp]

; 1583 :     }

  0007a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0007e	c3		 ret	 0
_vsnprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@9 ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

  00007	c3		 ret	 0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\Program Files (x86)\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00007	c3		 ret	 0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
