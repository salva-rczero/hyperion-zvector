; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	fetch_hw_noswap
PUBLIC	store_hw_noswap
PUBLIC	fetch_fw_noswap
PUBLIC	fetch_dw_noswap
PUBLIC	store_dw_noswap
PUBLIC	s370_maddr_l
PUBLIC	s370_cmpsc_vfetchb
PUBLIC	s370_cmpsc_vfetch2
PUBLIC	s370_cmpsc_vfetch4
PUBLIC	s370_cmpsc_vfetch8
PUBLIC	s370_cmpsc_vfetchc
PUBLIC	s370_cmpsc_vstoreb
PUBLIC	s370_cmpsc_vstore2
PUBLIC	s370_cmpsc_vstore4
PUBLIC	s370_cmpsc_vstore8
PUBLIC	s370_cmpsc_vstorec
PUBLIC	s370_cmpsc_SetREGS
PUBLIC	s370_cmpsc_SetCMPSC
PUBLIC	s390_maddr_l
PUBLIC	s390_cmpsc_vfetchb
PUBLIC	s390_cmpsc_vfetch2
PUBLIC	s390_cmpsc_vfetch4
PUBLIC	s390_cmpsc_vfetch8
PUBLIC	s390_cmpsc_vfetchc
PUBLIC	s390_cmpsc_vstoreb
PUBLIC	s390_cmpsc_vstore2
PUBLIC	s390_cmpsc_vstore4
PUBLIC	s390_cmpsc_vstore8
PUBLIC	s390_cmpsc_vstorec
PUBLIC	s390_cmpsc_SetREGS
PUBLIC	s390_cmpsc_SetCMPSC
PUBLIC	z900_maddr_l
PUBLIC	z900_cmpsc_vfetchb
PUBLIC	z900_cmpsc_vfetch2
PUBLIC	z900_cmpsc_vfetch4
PUBLIC	z900_cmpsc_vfetch8
PUBLIC	z900_cmpsc_vfetchc
PUBLIC	z900_cmpsc_vstoreb
PUBLIC	z900_cmpsc_vstore2
PUBLIC	z900_cmpsc_vstore4
PUBLIC	z900_cmpsc_vstore8
PUBLIC	z900_cmpsc_vstorec
PUBLIC	z900_cmpsc_SetREGS
PUBLIC	z900_cmpsc_SetCMPSC
EXTRN	_byteswap_ushort:PROC
EXTRN	_byteswap_ulong:PROC
EXTRN	_byteswap_uint64:PROC
EXTRN	txf_maddr_l:PROC
EXTRN	s370_logical_to_main_l:PROC
EXTRN	s390_logical_to_main_l:PROC
EXTRN	z900_logical_to_main_l:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_hw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_hw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_fw_noswap DD imagerel $LN3
	DD	imagerel $LN3+27
	DD	imagerel $unwind$fetch_fw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fetch_dw_noswap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$fetch_dw_noswap
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s370_maddr_l DD imagerel $LN14
	DD	imagerel $LN14+474
	DD	imagerel $unwind$s370_maddr_l
pdata	ENDS
pdata	SEGMENT
$pdata$s370_cmpsc_vfetchb DD imagerel $LN21
	DD	imagerel $LN21+497
	DD	imagerel $unwind$s370_cmpsc_vfetchb
$pdata$s370_cmpsc_vfetch2 DD imagerel $LN48
	DD	imagerel $LN48+1026
	DD	imagerel $unwind$s370_cmpsc_vfetch2
$pdata$s370_cmpsc_vfetch4 DD imagerel $LN48
	DD	imagerel $LN48+1238
	DD	imagerel $unwind$s370_cmpsc_vfetch4
$pdata$s370_cmpsc_vfetch8 DD imagerel $LN48
	DD	imagerel $LN48+1243
	DD	imagerel $unwind$s370_cmpsc_vfetch8
$pdata$s370_cmpsc_vfetchc DD imagerel $LN34
	DD	imagerel $LN34+1026
	DD	imagerel $unwind$s370_cmpsc_vfetchc
$pdata$s370_cmpsc_vstoreb DD imagerel $LN21
	DD	imagerel $LN21+504
	DD	imagerel $unwind$s370_cmpsc_vstoreb
$pdata$s370_cmpsc_vstore2 DD imagerel $LN50
	DD	imagerel $LN50+1123
	DD	imagerel $unwind$s370_cmpsc_vstore2
$pdata$s370_cmpsc_vstore4 DD imagerel $LN50
	DD	imagerel $LN50+1261
	DD	imagerel $unwind$s370_cmpsc_vstore4
$pdata$s370_cmpsc_vstore8 DD imagerel $LN50
	DD	imagerel $LN50+1266
	DD	imagerel $unwind$s370_cmpsc_vstore8
$pdata$s370_cmpsc_vstorec DD imagerel $LN34
	DD	imagerel $LN34+1011
	DD	imagerel $unwind$s370_cmpsc_vstorec
$pdata$s370_cmpsc_SetCMPSC DD imagerel $LN5
	DD	imagerel $LN5+460
	DD	imagerel $unwind$s370_cmpsc_SetCMPSC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$s390_maddr_l DD imagerel $LN14
	DD	imagerel $LN14+474
	DD	imagerel $unwind$s390_maddr_l
pdata	ENDS
pdata	SEGMENT
$pdata$s390_cmpsc_vfetchb DD imagerel $LN21
	DD	imagerel $LN21+510
	DD	imagerel $unwind$s390_cmpsc_vfetchb
$pdata$s390_cmpsc_vfetch2 DD imagerel $LN48
	DD	imagerel $LN48+1039
	DD	imagerel $unwind$s390_cmpsc_vfetch2
$pdata$s390_cmpsc_vfetch4 DD imagerel $LN48
	DD	imagerel $LN48+1254
	DD	imagerel $unwind$s390_cmpsc_vfetch4
$pdata$s390_cmpsc_vfetch8 DD imagerel $LN48
	DD	imagerel $LN48+1259
	DD	imagerel $unwind$s390_cmpsc_vfetch8
$pdata$s390_cmpsc_vfetchc DD imagerel $LN34
	DD	imagerel $LN34+1042
	DD	imagerel $unwind$s390_cmpsc_vfetchc
$pdata$s390_cmpsc_vstoreb DD imagerel $LN21
	DD	imagerel $LN21+517
	DD	imagerel $unwind$s390_cmpsc_vstoreb
$pdata$s390_cmpsc_vstore2 DD imagerel $LN50
	DD	imagerel $LN50+1139
	DD	imagerel $unwind$s390_cmpsc_vstore2
$pdata$s390_cmpsc_vstore4 DD imagerel $LN50
	DD	imagerel $LN50+1277
	DD	imagerel $unwind$s390_cmpsc_vstore4
$pdata$s390_cmpsc_vstore8 DD imagerel $LN50
	DD	imagerel $LN50+1282
	DD	imagerel $unwind$s390_cmpsc_vstore8
$pdata$s390_cmpsc_vstorec DD imagerel $LN34
	DD	imagerel $LN34+1027
	DD	imagerel $unwind$s390_cmpsc_vstorec
$pdata$s390_cmpsc_SetCMPSC DD imagerel $LN5
	DD	imagerel $LN5+484
	DD	imagerel $unwind$s390_cmpsc_SetCMPSC
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$z900_maddr_l DD imagerel $LN18
	DD	imagerel $LN18+657
	DD	imagerel $unwind$z900_maddr_l
pdata	ENDS
pdata	SEGMENT
$pdata$z900_cmpsc_vfetchb DD imagerel $LN21
	DD	imagerel $LN21+516
	DD	imagerel $unwind$z900_cmpsc_vfetchb
$pdata$z900_cmpsc_vfetch2 DD imagerel $LN48
	DD	imagerel $LN48+1055
	DD	imagerel $unwind$z900_cmpsc_vfetch2
$pdata$z900_cmpsc_vfetch4 DD imagerel $LN48
	DD	imagerel $LN48+1273
	DD	imagerel $unwind$z900_cmpsc_vfetch4
$pdata$z900_cmpsc_vfetch8 DD imagerel $LN48
	DD	imagerel $LN48+1278
	DD	imagerel $unwind$z900_cmpsc_vfetch8
$pdata$z900_cmpsc_vfetchc DD imagerel $LN34
	DD	imagerel $LN34+1054
	DD	imagerel $unwind$z900_cmpsc_vfetchc
$pdata$z900_cmpsc_vstoreb DD imagerel $LN21
	DD	imagerel $LN21+523
	DD	imagerel $unwind$z900_cmpsc_vstoreb
$pdata$z900_cmpsc_vstore2 DD imagerel $LN50
	DD	imagerel $LN50+1155
	DD	imagerel $unwind$z900_cmpsc_vstore2
$pdata$z900_cmpsc_vstore4 DD imagerel $LN50
	DD	imagerel $LN50+1296
	DD	imagerel $unwind$z900_cmpsc_vstore4
$pdata$z900_cmpsc_vstore8 DD imagerel $LN50
	DD	imagerel $LN50+1301
	DD	imagerel $unwind$z900_cmpsc_vstore8
$pdata$z900_cmpsc_vstorec DD imagerel $LN34
	DD	imagerel $LN34+1039
	DD	imagerel $unwind$z900_cmpsc_vstorec
$pdata$z900_cmpsc_SetCMPSC DD imagerel $LN15
	DD	imagerel $LN15+789
	DD	imagerel $unwind$z900_cmpsc_SetCMPSC
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$z900_maddr_l DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s390_maddr_l DD 011701H
	DD	0a217H
xdata	ENDS
xdata	SEGMENT
$unwind$s370_cmpsc_vfetchb DD 010d01H
	DD	0820dH
$unwind$s370_cmpsc_vfetch2 DD 010d01H
	DD	0c20dH
$unwind$s370_cmpsc_vfetch4 DD 030f01H
	DD	0700be20fH
	DD	0600aH
$unwind$s370_cmpsc_vfetch8 DD 030f01H
	DD	0700be20fH
	DD	0600aH
$unwind$s370_cmpsc_vfetchc DD 031a01H
	DD	07016a21aH
	DD	06015H
$unwind$s370_cmpsc_vstoreb DD 011101H
	DD	08211H
$unwind$s370_cmpsc_vstore2 DD 011201H
	DD	0c212H
$unwind$s370_cmpsc_vstore4 DD 031301H
	DD	0700fe213H
	DD	0600eH
$unwind$s370_cmpsc_vstore8 DD 031401H
	DD	07010e214H
	DD	0600fH
$unwind$s370_cmpsc_vstorec DD 031a01H
	DD	07016a21aH
	DD	06015H
$unwind$s370_cmpsc_SetCMPSC DD 011801H
	DD	02218H
$unwind$s390_cmpsc_vfetchb DD 010d01H
	DD	0820dH
$unwind$s390_cmpsc_vfetch2 DD 010d01H
	DD	0c20dH
$unwind$s390_cmpsc_vfetch4 DD 030f01H
	DD	0700be20fH
	DD	0600aH
$unwind$s390_cmpsc_vfetch8 DD 030f01H
	DD	0700be20fH
	DD	0600aH
$unwind$s390_cmpsc_vfetchc DD 031a01H
	DD	07016a21aH
	DD	06015H
$unwind$s390_cmpsc_vstoreb DD 011101H
	DD	08211H
$unwind$s390_cmpsc_vstore2 DD 011201H
	DD	0c212H
$unwind$s390_cmpsc_vstore4 DD 031301H
	DD	0700fe213H
	DD	0600eH
$unwind$s390_cmpsc_vstore8 DD 031401H
	DD	07010e214H
	DD	0600fH
$unwind$s390_cmpsc_vstorec DD 031a01H
	DD	07016a21aH
	DD	06015H
$unwind$s390_cmpsc_SetCMPSC DD 011801H
	DD	02218H
$unwind$z900_cmpsc_vfetchb DD 010e01H
	DD	0820eH
$unwind$z900_cmpsc_vfetch2 DD 010e01H
	DD	0c20eH
$unwind$z900_cmpsc_vfetch4 DD 031001H
	DD	0700ce210H
	DD	0600bH
$unwind$z900_cmpsc_vfetch8 DD 031001H
	DD	0700ce210H
	DD	0600bH
$unwind$z900_cmpsc_vfetchc DD 031a01H
	DD	07016a21aH
	DD	06015H
$unwind$z900_cmpsc_vstoreb DD 011201H
	DD	08212H
$unwind$z900_cmpsc_vstore2 DD 011301H
	DD	0c213H
$unwind$z900_cmpsc_vstore4 DD 031401H
	DD	07010e214H
	DD	0600fH
$unwind$z900_cmpsc_vstore8 DD 031501H
	DD	07011e215H
	DD	06010H
$unwind$z900_cmpsc_vstorec DD 031a01H
	DD	07016a21aH
	DD	06015H
$unwind$z900_cmpsc_SetCMPSC DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$s370_maddr_l DD 011701H
	DD	0a217H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_dw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_fw_noswap DD 010901H
	DD	02209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fetch_hw_noswap DD 010901H
	DD	02209H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
GR0$ = 0
GR1$ = 8
tv83 = 16
tv133 = 24
tv151 = 32
tv171 = 40
tv189 = 48
pCMPSCBLK$ = 80
regs$ = 88
r1$ = 96
r2$ = 104
z900_cmpsc_SetCMPSC PROC

; 693  : {

$LN15:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 694  :     register GREG GR0, GR1;
; 695  : 
; 696  :     pCMPSCBLK->r1       =  r1;

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  0001d	0f b6 4c 24 60	 movzx	 ecx, BYTE PTR r1$[rsp]
  00022	88 48 40	 mov	 BYTE PTR [rax+64], cl

; 697  :     pCMPSCBLK->r2       =  r2;

  00025	48 8b 44 24 50	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  0002a	0f b6 4c 24 68	 movzx	 ecx, BYTE PTR r2$[rsp]
  0002f	88 48 41	 mov	 BYTE PTR [rax+65], cl

; 698  : 
; 699  :     GR0                 = regs->GR_L( 0 );

  00032	b8 08 00 00 00	 mov	 eax, 8
  00037	48 6b c0 00	 imul	 rax, rax, 0
  0003b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00040	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00047	48 89 04 24	 mov	 QWORD PTR GR0$[rsp], rax

; 700  :     GR1                 = GR_A( 1,    regs ) & ADDRESS_MAXWRAP( regs );

  0004b	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00050	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00056	83 e0 01	 and	 eax, 1
  00059	85 c0		 test	 eax, eax
  0005b	74 1d		 je	 SHORT $LN5@z900_cmpsc
  0005d	b8 08 00 00 00	 mov	 eax, 8
  00062	48 6b c0 01	 imul	 rax, rax, 1
  00066	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0006b	48 8b 84 01 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax+640]
  00073	48 89 44 24 10	 mov	 QWORD PTR tv83[rsp], rax
  00078	eb 1a		 jmp	 SHORT $LN6@z900_cmpsc
$LN5@z900_cmpsc:
  0007a	b8 08 00 00 00	 mov	 eax, 8
  0007f	48 6b c0 01	 imul	 rax, rax, 1
  00083	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00088	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0008f	48 89 44 24 10	 mov	 QWORD PTR tv83[rsp], rax
$LN6@z900_cmpsc:
  00094	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00099	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000a0	48 8b 4c 24 10	 mov	 rcx, QWORD PTR tv83[rsp]
  000a5	48 23 c8	 and	 rcx, rax
  000a8	48 8b c1	 mov	 rax, rcx
  000ab	48 89 44 24 08	 mov	 QWORD PTR GR1$[rsp], rax

; 701  :     pCMPSCBLK->pOp1     = GR_A( r1,   regs ) & ADDRESS_MAXWRAP( regs );

  000b0	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000b5	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  000bb	83 e0 01	 and	 eax, 1
  000be	85 c0		 test	 eax, eax
  000c0	74 19		 je	 SHORT $LN7@z900_cmpsc
  000c2	48 63 44 24 60	 movsxd	 rax, DWORD PTR r1$[rsp]
  000c7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000cc	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  000d4	48 89 44 24 18	 mov	 QWORD PTR tv133[rsp], rax
  000d9	eb 16		 jmp	 SHORT $LN8@z900_cmpsc
$LN7@z900_cmpsc:
  000db	48 63 44 24 60	 movsxd	 rax, DWORD PTR r1$[rsp]
  000e0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  000e5	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000ec	48 89 44 24 18	 mov	 QWORD PTR tv133[rsp], rax
$LN8@z900_cmpsc:
  000f1	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  000f6	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000fd	48 8b 4c 24 18	 mov	 rcx, QWORD PTR tv133[rsp]
  00102	48 23 c8	 and	 rcx, rax
  00105	48 8b c1	 mov	 rax, rcx
  00108	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  0010d	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 702  :     pCMPSCBLK->pOp2     = GR_A( r2,   regs ) & ADDRESS_MAXWRAP( regs );

  00111	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00116	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0011c	83 e0 01	 and	 eax, 1
  0011f	85 c0		 test	 eax, eax
  00121	74 19		 je	 SHORT $LN9@z900_cmpsc
  00123	48 63 44 24 68	 movsxd	 rax, DWORD PTR r2$[rsp]
  00128	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  0012d	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00135	48 89 44 24 20	 mov	 QWORD PTR tv151[rsp], rax
  0013a	eb 16		 jmp	 SHORT $LN10@z900_cmpsc
$LN9@z900_cmpsc:
  0013c	48 63 44 24 68	 movsxd	 rax, DWORD PTR r2$[rsp]
  00141	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00146	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0014d	48 89 44 24 20	 mov	 QWORD PTR tv151[rsp], rax
$LN10@z900_cmpsc:
  00152	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00157	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0015e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv151[rsp]
  00163	48 23 c8	 and	 rcx, rax
  00166	48 8b c1	 mov	 rax, rcx
  00169	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  0016e	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 703  :     pCMPSCBLK->nLen1    = GR_A( r1+1, regs );

  00172	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  00177	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0017d	83 e0 01	 and	 eax, 1
  00180	85 c0		 test	 eax, eax
  00182	74 1c		 je	 SHORT $LN11@z900_cmpsc
  00184	8b 44 24 60	 mov	 eax, DWORD PTR r1$[rsp]
  00188	ff c0		 inc	 eax
  0018a	48 98		 cdqe
  0018c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00191	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  00199	48 89 44 24 28	 mov	 QWORD PTR tv171[rsp], rax
  0019e	eb 19		 jmp	 SHORT $LN12@z900_cmpsc
$LN11@z900_cmpsc:
  001a0	8b 44 24 60	 mov	 eax, DWORD PTR r1$[rsp]
  001a4	ff c0		 inc	 eax
  001a6	48 98		 cdqe
  001a8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  001ad	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  001b4	48 89 44 24 28	 mov	 QWORD PTR tv171[rsp], rax
$LN12@z900_cmpsc:
  001b9	48 8b 44 24 50	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  001be	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv171[rsp]
  001c3	48 89 08	 mov	 QWORD PTR [rax], rcx

; 704  :     pCMPSCBLK->nLen2    = GR_A( r2+1, regs );

  001c6	48 8b 44 24 58	 mov	 rax, QWORD PTR regs$[rsp]
  001cb	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  001d1	83 e0 01	 and	 eax, 1
  001d4	85 c0		 test	 eax, eax
  001d6	74 1c		 je	 SHORT $LN13@z900_cmpsc
  001d8	8b 44 24 68	 mov	 eax, DWORD PTR r2$[rsp]
  001dc	ff c0		 inc	 eax
  001de	48 98		 cdqe
  001e0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  001e5	48 8b 84 c1 80
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+640]
  001ed	48 89 44 24 30	 mov	 QWORD PTR tv189[rsp], rax
  001f2	eb 19		 jmp	 SHORT $LN14@z900_cmpsc
$LN13@z900_cmpsc:
  001f4	8b 44 24 68	 mov	 eax, DWORD PTR r2$[rsp]
  001f8	ff c0		 inc	 eax
  001fa	48 98		 cdqe
  001fc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00201	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00208	48 89 44 24 30	 mov	 QWORD PTR tv189[rsp], rax
$LN14@z900_cmpsc:
  0020d	48 8b 44 24 50	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  00212	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv189[rsp]
  00217	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 705  : 
; 706  : //  pCMPSCBLK->e        = (GR0 >>  8) & 0x01;   // (no such field)
; 707  :     pCMPSCBLK->f1       = (GR0 >>  9) & 0x01;

  0021b	48 8b 04 24	 mov	 rax, QWORD PTR GR0$[rsp]
  0021f	48 c1 e8 09	 shr	 rax, 9
  00223	48 83 e0 01	 and	 rax, 1
  00227	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  0022c	88 41 43	 mov	 BYTE PTR [rcx+67], al

; 708  :     pCMPSCBLK->cdss     = (GR0 >> 12) & 0x0F;

  0022f	48 8b 04 24	 mov	 rax, QWORD PTR GR0$[rsp]
  00233	48 c1 e8 0c	 shr	 rax, 12
  00237	48 83 e0 0f	 and	 rax, 15
  0023b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00240	88 41 44	 mov	 BYTE PTR [rcx+68], al

; 709  :     pCMPSCBLK->st       = (GR0 >> 16) & 0x01;

  00243	48 8b 04 24	 mov	 rax, QWORD PTR GR0$[rsp]
  00247	48 c1 e8 10	 shr	 rax, 16
  0024b	48 83 e0 01	 and	 rax, 1
  0024f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00254	88 41 42	 mov	 BYTE PTR [rcx+66], al

; 710  : #if defined(_FEATURE_047_CMPSC_ENH_FACILITY)
; 711  :     if (FACILITY_ENABLED( 047_CMPSC_ENH, regs ))

  00257	b8 01 00 00 00	 mov	 eax, 1
  0025c	48 6b c0 05	 imul	 rax, rax, 5
  00260	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  00265	0f b6 84 01 28
	0d 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3368]
  0026d	83 e0 01	 and	 eax, 1
  00270	85 c0		 test	 eax, eax
  00272	74 16		 je	 SHORT $LN2@z900_cmpsc

; 712  :     pCMPSCBLK->zp       = (GR0 >> 17) & 0x01; else

  00274	48 8b 04 24	 mov	 rax, QWORD PTR GR0$[rsp]
  00278	48 c1 e8 11	 shr	 rax, 17
  0027c	48 83 e0 01	 and	 rax, 1
  00280	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00285	88 41 47	 mov	 BYTE PTR [rcx+71], al
  00288	eb 09		 jmp	 SHORT $LN3@z900_cmpsc
$LN2@z900_cmpsc:

; 713  : #endif
; 714  :     pCMPSCBLK->zp       = FALSE;

  0028a	48 8b 44 24 50	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  0028f	c6 40 47 00	 mov	 BYTE PTR [rax+71], 0
$LN3@z900_cmpsc:

; 715  : 
; 716  :     pCMPSCBLK->cbn      = (GR1 &  0x007);

  00293	48 8b 44 24 08	 mov	 rax, QWORD PTR GR1$[rsp]
  00298	48 83 e0 07	 and	 rax, 7
  0029c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  002a1	88 41 45	 mov	 BYTE PTR [rcx+69], al

; 717  :     pCMPSCBLK->stt      = (GR1 &  0xFFF) >>  3;

  002a4	48 8b 44 24 08	 mov	 rax, QWORD PTR GR1$[rsp]
  002a9	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  002af	48 c1 e8 03	 shr	 rax, 3
  002b3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  002b8	66 89 41 3c	 mov	 WORD PTR [rcx+60], ax

; 718  :     pCMPSCBLK->pDict    = (GR1 & ~0xFFF);

  002bc	48 8b 44 24 08	 mov	 rax, QWORD PTR GR1$[rsp]
  002c1	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  002c7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  002cc	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 719  : 
; 720  :     pCMPSCBLK->regs     =  regs;

  002d0	48 8b 44 24 50	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  002d5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  002da	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 721  :     pCMPSCBLK->cc       =  regs->psw.cc;

  002de	48 8b 44 24 50	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  002e3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  002e8	0f b6 49 7c	 movzx	 ecx, BYTE PTR [rcx+124]
  002ec	88 48 46	 mov	 BYTE PTR [rax+70], cl

; 722  :     pCMPSCBLK->pic      =  regs->psw.intcode;

  002ef	48 8b 44 24 50	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  002f4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR regs$[rsp]
  002f9	0f b7 89 98 00
	00 00		 movzx	 ecx, WORD PTR [rcx+152]
  00300	66 89 48 3e	 mov	 WORD PTR [rax+62], cx

; 723  :     pCMPSCBLK->nCPUAmt  =  DEF_CMPSC_CPU_AMT;

  00304	48 8b 44 24 50	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  00309	c7 40 38 00 00
	10 00		 mov	 DWORD PTR [rax+56], 1048576 ; 00100000H

; 724  : //  pCMPSCBLK->dbg      =  0;  // (future)
; 725  : }

  00310	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00314	c3		 ret	 0
z900_cmpsc_SetCMPSC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
pCMPSCBLK$ = 8
regs$ = 16
r1$ = 24
r2$ = 32
z900_cmpsc_SetREGS PROC

; 632  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@z900_cmpsc:

; 633  :     SET_GR_A( r1,     regs, (VADR) pCMPSCBLK->pOp1  );

  00014	48 8b 44 24 10	 mov	 rax, QWORD PTR regs$[rsp]
  00019	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0001f	83 e0 01	 and	 eax, 1
  00022	85 c0		 test	 eax, eax
  00024	74 1d		 je	 SHORT $LN17@z900_cmpsc
  00026	48 63 44 24 18	 movsxd	 rax, DWORD PTR r1$[rsp]
  0002b	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  00030	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  00035	48 8b 52 20	 mov	 rdx, QWORD PTR [rdx+32]
  00039	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  00041	eb 19		 jmp	 SHORT $LN18@z900_cmpsc
$LN17@z900_cmpsc:
  00043	48 63 44 24 18	 movsxd	 rax, DWORD PTR r1$[rsp]
  00048	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  0004d	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  00052	8b 52 20	 mov	 edx, DWORD PTR [rdx+32]
  00055	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN18@z900_cmpsc:
  0005c	33 c0		 xor	 eax, eax
  0005e	85 c0		 test	 eax, eax
  00060	75 b2		 jne	 SHORT $LN4@z900_cmpsc
$LN7@z900_cmpsc:

; 634  :     SET_GR_A( r2,     regs, (VADR) pCMPSCBLK->pOp2  );

  00062	48 8b 44 24 10	 mov	 rax, QWORD PTR regs$[rsp]
  00067	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0006d	83 e0 01	 and	 eax, 1
  00070	85 c0		 test	 eax, eax
  00072	74 1d		 je	 SHORT $LN19@z900_cmpsc
  00074	48 63 44 24 20	 movsxd	 rax, DWORD PTR r2$[rsp]
  00079	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  0007e	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  00083	48 8b 52 28	 mov	 rdx, QWORD PTR [rdx+40]
  00087	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  0008f	eb 19		 jmp	 SHORT $LN20@z900_cmpsc
$LN19@z900_cmpsc:
  00091	48 63 44 24 20	 movsxd	 rax, DWORD PTR r2$[rsp]
  00096	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  0009b	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  000a0	8b 52 28	 mov	 edx, DWORD PTR [rdx+40]
  000a3	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN20@z900_cmpsc:
  000aa	33 c0		 xor	 eax, eax
  000ac	85 c0		 test	 eax, eax
  000ae	75 b2		 jne	 SHORT $LN7@z900_cmpsc
$LN10@z900_cmpsc:

; 635  :     SET_GR_A( r1 + 1, regs, (GREG) pCMPSCBLK->nLen1 );

  000b0	48 8b 44 24 10	 mov	 rax, QWORD PTR regs$[rsp]
  000b5	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  000bb	83 e0 01	 and	 eax, 1
  000be	85 c0		 test	 eax, eax
  000c0	74 1f		 je	 SHORT $LN21@z900_cmpsc
  000c2	8b 44 24 18	 mov	 eax, DWORD PTR r1$[rsp]
  000c6	ff c0		 inc	 eax
  000c8	48 98		 cdqe
  000ca	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  000cf	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  000d4	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  000d7	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  000df	eb 1b		 jmp	 SHORT $LN22@z900_cmpsc
$LN21@z900_cmpsc:
  000e1	8b 44 24 18	 mov	 eax, DWORD PTR r1$[rsp]
  000e5	ff c0		 inc	 eax
  000e7	48 98		 cdqe
  000e9	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  000ee	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  000f3	8b 12		 mov	 edx, DWORD PTR [rdx]
  000f5	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN22@z900_cmpsc:
  000fc	33 c0		 xor	 eax, eax
  000fe	85 c0		 test	 eax, eax
  00100	75 ae		 jne	 SHORT $LN10@z900_cmpsc
$LN13@z900_cmpsc:

; 636  :     SET_GR_A( r2 + 1, regs, (GREG) pCMPSCBLK->nLen2 );

  00102	48 8b 44 24 10	 mov	 rax, QWORD PTR regs$[rsp]
  00107	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  0010d	83 e0 01	 and	 eax, 1
  00110	85 c0		 test	 eax, eax
  00112	74 20		 je	 SHORT $LN23@z900_cmpsc
  00114	8b 44 24 20	 mov	 eax, DWORD PTR r2$[rsp]
  00118	ff c0		 inc	 eax
  0011a	48 98		 cdqe
  0011c	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  00121	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  00126	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  0012a	48 89 94 c1 80
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+640], rdx
  00132	eb 1c		 jmp	 SHORT $LN24@z900_cmpsc
$LN23@z900_cmpsc:
  00134	8b 44 24 20	 mov	 eax, DWORD PTR r2$[rsp]
  00138	ff c0		 inc	 eax
  0013a	48 98		 cdqe
  0013c	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  00141	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  00146	8b 52 08	 mov	 edx, DWORD PTR [rdx+8]
  00149	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx
$LN24@z900_cmpsc:
  00150	33 c0		 xor	 eax, eax
  00152	85 c0		 test	 eax, eax
  00154	75 ac		 jne	 SHORT $LN13@z900_cmpsc

; 637  : 
; 638  :     regs->psw.cc      = pCMPSCBLK->cc;

  00156	48 8b 44 24 10	 mov	 rax, QWORD PTR regs$[rsp]
  0015b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00160	0f b6 49 46	 movzx	 ecx, BYTE PTR [rcx+70]
  00164	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 639  :     regs->psw.intcode = pCMPSCBLK->pic;

  00167	48 8b 44 24 10	 mov	 rax, QWORD PTR regs$[rsp]
  0016c	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00171	0f b7 49 3e	 movzx	 ecx, WORD PTR [rcx+62]
  00175	66 89 88 98 00
	00 00		 mov	 WORD PTR [rax+152], cx
$LN16@z900_cmpsc:

; 640  : 
; 641  :     /* Register 0 is input-only and thus not modified.
; 642  : 
; 643  :     SET_GR_A( 0, regs,
; 644  :     (0
; 645  :         | ((GREG)   zeropad       << 17)
; 646  :         | ((GREG) pCMPSCBLK->st   << 16)
; 647  :         | ((GREG) pCMPSCBLK->cdss << 12)
; 648  :         | ((GREG) pCMPSCBLK->f1   <<  9)
; 649  :         | ((GREG)   expand        <<  8)
; 650  :     ));
; 651  :     */
; 652  : 
; 653  :     SET_GR_A( 1, regs, ((GREG) pCMPSCBLK->pDict     ) |

  0017c	48 8b 44 24 10	 mov	 rax, QWORD PTR regs$[rsp]
  00181	8b 80 80 00 00
	00		 mov	 eax, DWORD PTR [rax+128]
  00187	83 e0 01	 and	 eax, 1
  0018a	85 c0		 test	 eax, eax
  0018c	74 40		 je	 SHORT $LN25@z900_cmpsc
  0018e	48 8b 44 24 08	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  00193	0f b7 40 3c	 movzx	 eax, WORD PTR [rax+60]
  00197	48 c1 e0 03	 shl	 rax, 3
  0019b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  001a0	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  001a4	48 0b c8	 or	 rcx, rax
  001a7	48 8b c1	 mov	 rax, rcx
  001aa	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  001af	0f b6 49 45	 movzx	 ecx, BYTE PTR [rcx+69]
  001b3	48 0b c1	 or	 rax, rcx
  001b6	b9 08 00 00 00	 mov	 ecx, 8
  001bb	48 6b c9 01	 imul	 rcx, rcx, 1
  001bf	48 8b 54 24 10	 mov	 rdx, QWORD PTR regs$[rsp]
  001c4	48 89 84 0a 80
	02 00 00	 mov	 QWORD PTR [rdx+rcx+640], rax
  001cc	eb 3d		 jmp	 SHORT $LN26@z900_cmpsc
$LN25@z900_cmpsc:
  001ce	48 8b 44 24 08	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  001d3	0f b7 40 3c	 movzx	 eax, WORD PTR [rax+60]
  001d7	48 c1 e0 03	 shl	 rax, 3
  001db	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  001e0	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  001e4	48 0b c8	 or	 rcx, rax
  001e7	48 8b c1	 mov	 rax, rcx
  001ea	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  001ef	0f b6 49 45	 movzx	 ecx, BYTE PTR [rcx+69]
  001f3	48 0b c1	 or	 rax, rcx
  001f6	b9 08 00 00 00	 mov	 ecx, 8
  001fb	48 6b c9 01	 imul	 rcx, rcx, 1
  001ff	48 8b 54 24 10	 mov	 rdx, QWORD PTR regs$[rsp]
  00204	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax
$LN26@z900_cmpsc:
  0020b	33 c0		 xor	 eax, eax
  0020d	85 c0		 test	 eax, eax
  0020f	0f 85 67 ff ff
	ff		 jne	 $LN16@z900_cmpsc

; 654  :                        ((GREG) pCMPSCBLK->stt  <<  3) |
; 655  :                        ((GREG) pCMPSCBLK->cbn       ) );
; 656  : }

  00215	c3		 ret	 0
z900_cmpsc_SetREGS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv82 = 52
tv143 = 56
tv157 = 60
tv180 = 64
tv188 = 68
tv236 = 72
tv244 = 76
src$ = 112
len$ = 120
addr$ = 128
pMEMBLK$ = 136
z900_cmpsc_vstorec PROC

; 570  : {

$LN34:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 571  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0001a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0002c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  00034	48 23 c8	 and	 rcx, rax
  00037	48 8b c1	 mov	 rax, rcx
  0003a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR addr$[rsp], rax

; 572  : 
; 573  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00042	b8 08 00 00 00	 mov	 eax, 8
  00047	48 6b c0 00	 imul	 rax, rax, 0
  0004b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00053	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00059	74 20		 je	 SHORT $LN10@z900_cmpsc
  0005b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00063	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00067	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR addr$[rsp], rax
  0006f	72 0a		 jb	 SHORT $LN10@z900_cmpsc
  00071	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  00079	eb 08		 jmp	 SHORT $LN13@z900_cmpsc
$LN10@z900_cmpsc:
  0007b	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN13@z900_cmpsc:
  00083	83 7c 24 34 00	 cmp	 DWORD PTR tv82[rsp], 0
  00088	0f 84 8f 00 00
	00		 je	 $LN2@z900_cmpsc

; 574  :     {
; 575  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  0008e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00096	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  0009c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000a4	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 576  :         pMEMBLK->maddr[1] = 0;

  000a8	b8 08 00 00 00	 mov	 eax, 8
  000ad	48 6b c0 01	 imul	 rax, rax, 1
  000b1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000b9	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 577  :         pMEMBLK->maddr[0] = MADDR

  000c2	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000ca	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000ce	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000d2	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000da	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e2	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000e5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000ed	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000f1	ba 01 00 00 00	 mov	 edx, 1
  000f6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000fe	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00102	e8 00 00 00 00	 call	 z900_maddr_l
  00107	b9 08 00 00 00	 mov	 ecx, 8
  0010c	48 6b c9 00	 imul	 rcx, rcx, 0
  00110	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00118	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@z900_cmpsc:

; 578  :         (
; 579  :             pMEMBLK->vpagebeg,
; 580  :             pMEMBLK->arn,
; 581  :             pMEMBLK->regs,
; 582  :             ACCTYPE_WRITE,  // (store)
; 583  :             pMEMBLK->pkey
; 584  :         );
; 585  :     }
; 586  :     if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  0011d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00125	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00129	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0012f	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR addr$[rsp], rax
  00137	73 0a		 jae	 SHORT $LN16@z900_cmpsc
  00139	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00141	eb 08		 jmp	 SHORT $LN17@z900_cmpsc
$LN16@z900_cmpsc:
  00143	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN17@z900_cmpsc:
  0014b	83 7c 24 38 00	 cmp	 DWORD PTR tv143[rsp], 0
  00150	0f 84 c5 01 00
	00		 je	 $LN3@z900_cmpsc

; 587  :     {
; 588  :         if (NOCROSSPAGE( addr, len ))

  00156	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0015e	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00164	0f b7 4c 24 78	 movzx	 ecx, WORD PTR len$[rsp]
  00169	ba ff 0f 00 00	 mov	 edx, 4095		; 00000fffH
  0016e	2b d1		 sub	 edx, ecx
  00170	8b ca		 mov	 ecx, edx
  00172	3b c1		 cmp	 eax, ecx
  00174	7f 0a		 jg	 SHORT $LN20@z900_cmpsc
  00176	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv157[rsp], 1
  0017e	eb 08		 jmp	 SHORT $LN21@z900_cmpsc
$LN20@z900_cmpsc:
  00180	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN21@z900_cmpsc:
  00188	83 7c 24 3c 00	 cmp	 DWORD PTR tv157[rsp], 0
  0018d	74 43		 je	 SHORT $LN5@z900_cmpsc

; 589  :         {
; 590  :             memcpy( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], src, len+1 );

  0018f	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  00194	ff c0		 inc	 eax
  00196	48 98		 cdqe
  00198	b9 08 00 00 00	 mov	 ecx, 8
  0019d	48 6b c9 00	 imul	 rcx, rcx, 0
  001a1	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  001a9	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  001b0	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001b8	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001bd	48 03 ca	 add	 rcx, rdx
  001c0	48 8b f9	 mov	 rdi, rcx
  001c3	48 8b 74 24 70	 mov	 rsi, QWORD PTR src$[rsp]
  001c8	48 8b c8	 mov	 rcx, rax
  001cb	f3 a4		 rep movsb

; 591  :         }

  001cd	e9 44 01 00 00	 jmp	 $LN6@z900_cmpsc
$LN5@z900_cmpsc:

; 592  :         else
; 593  :         {
; 594  :             U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  001d2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  001da	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  001e0	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  001e5	48 2b c8	 sub	 rcx, rax
  001e8	48 8b c1	 mov	 rax, rcx
  001eb	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 595  :             if (likely(!pMEMBLK->maddr[1]))

  001f0	b8 08 00 00 00	 mov	 eax, 8
  001f5	48 6b c0 01	 imul	 rax, rax, 1
  001f9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00201	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00207	75 0a		 jne	 SHORT $LN22@z900_cmpsc
  00209	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv180[rsp], 1
  00211	eb 08		 jmp	 SHORT $LN23@z900_cmpsc
$LN22@z900_cmpsc:
  00213	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv180[rsp], 0
$LN23@z900_cmpsc:
  0021b	83 7c 24 40 00	 cmp	 DWORD PTR tv180[rsp], 0
  00220	74 0a		 je	 SHORT $LN26@z900_cmpsc
  00222	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv188[rsp], 1
  0022a	eb 08		 jmp	 SHORT $LN27@z900_cmpsc
$LN26@z900_cmpsc:
  0022c	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv188[rsp], 0
$LN27@z900_cmpsc:
  00234	83 7c 24 44 00	 cmp	 DWORD PTR tv188[rsp], 0
  00239	74 64		 je	 SHORT $LN7@z900_cmpsc

; 596  :             {
; 597  :                 pMEMBLK->maddr[1] = MADDR

  0023b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00243	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00247	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0024d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00255	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00259	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0025d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00265	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0026d	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00270	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00278	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  0027c	ba 01 00 00 00	 mov	 edx, 1
  00281	48 8b c8	 mov	 rcx, rax
  00284	e8 00 00 00 00	 call	 z900_maddr_l
  00289	b9 08 00 00 00	 mov	 ecx, 8
  0028e	48 6b c9 01	 imul	 rcx, rcx, 1
  00292	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0029a	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN7@z900_cmpsc:

; 598  :                 (
; 599  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 600  :                     pMEMBLK->arn,
; 601  :                     pMEMBLK->regs,
; 602  :                     ACCTYPE_WRITE,  // (store)
; 603  :                     pMEMBLK->pkey
; 604  :                 );
; 605  :             }
; 606  :             memcpy( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], src,                len1 );

  0029f	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  002a4	b9 08 00 00 00	 mov	 ecx, 8
  002a9	48 6b c9 00	 imul	 rcx, rcx, 0
  002ad	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  002b5	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  002bc	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  002c4	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  002c9	48 03 ca	 add	 rcx, rdx
  002cc	48 8b f9	 mov	 rdi, rcx
  002cf	48 8b 74 24 70	 mov	 rsi, QWORD PTR src$[rsp]
  002d4	8b c8		 mov	 ecx, eax
  002d6	f3 a4		 rep movsb

; 607  :             memcpy(  pMEMBLK->maddr[1],                            src + len1, len+1 - len1 );

  002d8	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  002dd	ff c0		 inc	 eax
  002df	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  002e4	2b c1		 sub	 eax, ecx
  002e6	48 98		 cdqe
  002e8	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  002ed	48 8b 54 24 70	 mov	 rdx, QWORD PTR src$[rsp]
  002f2	48 03 d1	 add	 rdx, rcx
  002f5	48 8b ca	 mov	 rcx, rdx
  002f8	ba 08 00 00 00	 mov	 edx, 8
  002fd	48 6b d2 01	 imul	 rdx, rdx, 1
  00301	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  00309	48 8b 7c 17 10	 mov	 rdi, QWORD PTR [rdi+rdx+16]
  0030e	48 8b f1	 mov	 rsi, rcx
  00311	48 8b c8	 mov	 rcx, rax
  00314	f3 a4		 rep movsb
$LN6@z900_cmpsc:

; 608  :         }
; 609  :     }

  00316	e9 ed 00 00 00	 jmp	 $LN4@z900_cmpsc
$LN3@z900_cmpsc:

; 610  :     else
; 611  :     {
; 612  :         if (unlikely(!pMEMBLK->maddr[1]))

  0031b	b8 08 00 00 00	 mov	 eax, 8
  00320	48 6b c0 01	 imul	 rax, rax, 1
  00324	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0032c	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00332	75 0a		 jne	 SHORT $LN28@z900_cmpsc
  00334	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv236[rsp], 1
  0033c	eb 08		 jmp	 SHORT $LN29@z900_cmpsc
$LN28@z900_cmpsc:
  0033e	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv236[rsp], 0
$LN29@z900_cmpsc:
  00346	83 7c 24 48 00	 cmp	 DWORD PTR tv236[rsp], 0
  0034b	74 0a		 je	 SHORT $LN32@z900_cmpsc
  0034d	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv244[rsp], 1
  00355	eb 08		 jmp	 SHORT $LN33@z900_cmpsc
$LN32@z900_cmpsc:
  00357	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv244[rsp], 0
$LN33@z900_cmpsc:
  0035f	83 7c 24 4c 00	 cmp	 DWORD PTR tv244[rsp], 0
  00364	74 64		 je	 SHORT $LN8@z900_cmpsc

; 613  :         {
; 614  :             pMEMBLK->maddr[1] = MADDR

  00366	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0036e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00372	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00378	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00380	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00384	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00388	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00390	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00398	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0039b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003a3	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  003a7	ba 01 00 00 00	 mov	 edx, 1
  003ac	48 8b c8	 mov	 rcx, rax
  003af	e8 00 00 00 00	 call	 z900_maddr_l
  003b4	b9 08 00 00 00	 mov	 ecx, 8
  003b9	48 6b c9 01	 imul	 rcx, rcx, 1
  003bd	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  003c5	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@z900_cmpsc:

; 615  :             (
; 616  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 617  :                 pMEMBLK->arn,
; 618  :                 pMEMBLK->regs,
; 619  :                 ACCTYPE_WRITE,  // (store)
; 620  :                 pMEMBLK->pkey
; 621  :             );
; 622  :         }
; 623  :         memcpy( &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK], src, len+1 );

  003ca	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  003cf	ff c0		 inc	 eax
  003d1	48 98		 cdqe
  003d3	b9 08 00 00 00	 mov	 ecx, 8
  003d8	48 6b c9 01	 imul	 rcx, rcx, 1
  003dc	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  003e4	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  003eb	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  003f3	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  003f8	48 03 ca	 add	 rcx, rdx
  003fb	48 8b f9	 mov	 rdi, rcx
  003fe	48 8b 74 24 70	 mov	 rsi, QWORD PTR src$[rsp]
  00403	48 8b c8	 mov	 rcx, rax
  00406	f3 a4		 rep movsb
$LN4@z900_cmpsc:

; 624  :     }
; 625  : }

  00408	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0040c	5f		 pop	 rdi
  0040d	5e		 pop	 rsi
  0040e	c3		 ret	 0
z900_cmpsc_vstorec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv82 = 52
tv143 = 56
tv153 = 60
tv157 = 64
tv163 = 68
tv187 = 72
tv195 = 76
tv214 = 80
tv220 = 84
tv249 = 88
tv257 = 92
value$2 = 96
val$ = 144
addr$ = 152
pMEMBLK$ = 160
z900_cmpsc_vstore8 PROC

; 439  : {

$LN50:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 440  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00015	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0001d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00020	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00027	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  0002f	48 23 c8	 and	 rcx, rax
  00032	48 8b c1	 mov	 rax, rcx
  00035	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR addr$[rsp], rax

; 441  : 
; 442  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0003d	b8 08 00 00 00	 mov	 eax, 8
  00042	48 6b c0 00	 imul	 rax, rax, 0
  00046	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0004e	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00054	74 20		 je	 SHORT $LN14@z900_cmpsc
  00056	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0005e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00062	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR addr$[rsp], rax
  0006a	72 0a		 jb	 SHORT $LN14@z900_cmpsc
  0006c	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  00074	eb 08		 jmp	 SHORT $LN17@z900_cmpsc
$LN14@z900_cmpsc:
  00076	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN17@z900_cmpsc:
  0007e	83 7c 24 34 00	 cmp	 DWORD PTR tv82[rsp], 0
  00083	0f 84 8f 00 00
	00		 je	 $LN2@z900_cmpsc

; 443  :     {
; 444  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00089	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00091	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  00097	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0009f	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 445  :         pMEMBLK->maddr[1] = 0;

  000a3	b8 08 00 00 00	 mov	 eax, 8
  000a8	48 6b c0 01	 imul	 rax, rax, 1
  000ac	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000b4	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 446  :         pMEMBLK->maddr[0] = MADDR

  000bd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c5	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000c9	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000cd	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000dd	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000e0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e8	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000ec	ba 01 00 00 00	 mov	 edx, 1
  000f1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000f9	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000fd	e8 00 00 00 00	 call	 z900_maddr_l
  00102	b9 08 00 00 00	 mov	 ecx, 8
  00107	48 6b c9 00	 imul	 rcx, rcx, 0
  0010b	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00113	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@z900_cmpsc:

; 447  :         (
; 448  :             pMEMBLK->vpagebeg,
; 449  :             pMEMBLK->arn,
; 450  :             pMEMBLK->regs,
; 451  :             ACCTYPE_WRITE,  // (store)
; 452  :             pMEMBLK->pkey
; 453  :         );
; 454  :     }
; 455  :     if (NOCROSSPAGE( addr, 8 ))

  00118	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00120	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00126	3d f7 0f 00 00	 cmp	 eax, 4087		; 00000ff7H
  0012b	7f 0a		 jg	 SHORT $LN20@z900_cmpsc
  0012d	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00135	eb 08		 jmp	 SHORT $LN21@z900_cmpsc
$LN20@z900_cmpsc:
  00137	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN21@z900_cmpsc:
  0013f	83 7c 24 38 00	 cmp	 DWORD PTR tv143[rsp], 0
  00144	0f 84 62 02 00
	00		 je	 $LN3@z900_cmpsc

; 456  :     {
; 457  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  0014a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00152	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00156	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0015c	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR addr$[rsp], rax
  00164	73 0a		 jae	 SHORT $LN24@z900_cmpsc
  00166	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv153[rsp], 1
  0016e	eb 08		 jmp	 SHORT $LN25@z900_cmpsc
$LN24@z900_cmpsc:
  00170	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv153[rsp], 0
$LN25@z900_cmpsc:
  00178	83 7c 24 3c 00	 cmp	 DWORD PTR tv153[rsp], 0
  0017d	0f 84 bd 00 00
	00		 je	 $LN5@z900_cmpsc

; 458  :         {
; 459  :             if (U64_ALIGNED( addr ))

  00183	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0018b	48 83 e0 07	 and	 rax, 7
  0018f	48 85 c0	 test	 rax, rax
  00192	75 0a		 jne	 SHORT $LN26@z900_cmpsc
  00194	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv157[rsp], 1
  0019c	eb 08		 jmp	 SHORT $LN27@z900_cmpsc
$LN26@z900_cmpsc:
  0019e	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN27@z900_cmpsc:
  001a6	83 7c 24 40 00	 cmp	 DWORD PTR tv157[rsp], 0
  001ab	74 0a		 je	 SHORT $LN30@z900_cmpsc
  001ad	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv163[rsp], 1
  001b5	eb 08		 jmp	 SHORT $LN31@z900_cmpsc
$LN30@z900_cmpsc:
  001b7	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv163[rsp], 0
$LN31@z900_cmpsc:
  001bf	83 7c 24 44 00	 cmp	 DWORD PTR tv163[rsp], 0
  001c4	74 38		 je	 SHORT $LN7@z900_cmpsc

; 460  :                 *(U64*)   &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] = CSWAP64( val );

  001c6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  001ce	e8 00 00 00 00	 call	 _byteswap_uint64
  001d3	b9 08 00 00 00	 mov	 ecx, 8
  001d8	48 6b c9 00	 imul	 rcx, rcx, 0
  001dc	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  001e4	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  001eb	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001f3	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001f8	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax
  001fc	eb 3d		 jmp	 SHORT $LN8@z900_cmpsc
$LN7@z900_cmpsc:

; 461  :             else
; 462  :                 store_dw( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],           val );

  001fe	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  00206	e8 00 00 00 00	 call	 _byteswap_uint64
  0020b	b9 08 00 00 00	 mov	 ecx, 8
  00210	48 6b c9 00	 imul	 rcx, rcx, 0
  00214	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  0021c	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  00223	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0022b	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00230	48 03 ca	 add	 rcx, rdx
  00233	48 8b d0	 mov	 rdx, rax
  00236	e8 00 00 00 00	 call	 store_dw_noswap
$LN8@z900_cmpsc:

; 463  :         }

  0023b	e9 67 01 00 00	 jmp	 $LN6@z900_cmpsc
$LN5@z900_cmpsc:

; 464  :         else
; 465  :         {
; 466  :             if (unlikely(!pMEMBLK->maddr[1]))

  00240	b8 08 00 00 00	 mov	 eax, 8
  00245	48 6b c0 01	 imul	 rax, rax, 1
  00249	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00251	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00257	75 0a		 jne	 SHORT $LN32@z900_cmpsc
  00259	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv187[rsp], 1
  00261	eb 08		 jmp	 SHORT $LN33@z900_cmpsc
$LN32@z900_cmpsc:
  00263	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv187[rsp], 0
$LN33@z900_cmpsc:
  0026b	83 7c 24 48 00	 cmp	 DWORD PTR tv187[rsp], 0
  00270	74 0a		 je	 SHORT $LN36@z900_cmpsc
  00272	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv195[rsp], 1
  0027a	eb 08		 jmp	 SHORT $LN37@z900_cmpsc
$LN36@z900_cmpsc:
  0027c	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv195[rsp], 0
$LN37@z900_cmpsc:
  00284	83 7c 24 4c 00	 cmp	 DWORD PTR tv195[rsp], 0
  00289	74 64		 je	 SHORT $LN9@z900_cmpsc

; 467  :             {
; 468  :                 pMEMBLK->maddr[1] = MADDR

  0028b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00293	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00297	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0029d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002a5	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  002a9	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  002ad	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002b5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002bd	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  002c0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002c8	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002cc	ba 01 00 00 00	 mov	 edx, 1
  002d1	48 8b c8	 mov	 rcx, rax
  002d4	e8 00 00 00 00	 call	 z900_maddr_l
  002d9	b9 08 00 00 00	 mov	 ecx, 8
  002de	48 6b c9 01	 imul	 rcx, rcx, 1
  002e2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002ea	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN9@z900_cmpsc:

; 469  :                 (
; 470  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 471  :                     pMEMBLK->arn,
; 472  :                     pMEMBLK->regs,
; 473  :                     ACCTYPE_WRITE,  // (store)
; 474  :                     pMEMBLK->pkey
; 475  :                 );
; 476  :             }
; 477  :             if (U64_ALIGNED( addr ))

  002ef	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  002f7	48 83 e0 07	 and	 rax, 7
  002fb	48 85 c0	 test	 rax, rax
  002fe	75 0a		 jne	 SHORT $LN38@z900_cmpsc
  00300	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv214[rsp], 1
  00308	eb 08		 jmp	 SHORT $LN39@z900_cmpsc
$LN38@z900_cmpsc:
  0030a	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv214[rsp], 0
$LN39@z900_cmpsc:
  00312	83 7c 24 50 00	 cmp	 DWORD PTR tv214[rsp], 0
  00317	74 0a		 je	 SHORT $LN42@z900_cmpsc
  00319	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv220[rsp], 1
  00321	eb 08		 jmp	 SHORT $LN43@z900_cmpsc
$LN42@z900_cmpsc:
  00323	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv220[rsp], 0
$LN43@z900_cmpsc:
  0032b	83 7c 24 54 00	 cmp	 DWORD PTR tv220[rsp], 0
  00330	74 38		 je	 SHORT $LN10@z900_cmpsc

; 478  :                 *(U64*)   &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] = CSWAP64( val );

  00332	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  0033a	e8 00 00 00 00	 call	 _byteswap_uint64
  0033f	b9 08 00 00 00	 mov	 ecx, 8
  00344	48 6b c9 01	 imul	 rcx, rcx, 1
  00348	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  00350	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  00357	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0035f	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00364	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax
  00368	eb 3d		 jmp	 SHORT $LN11@z900_cmpsc
$LN10@z900_cmpsc:

; 479  :             else
; 480  :                 store_dw( &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK],           val );

  0036a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  00372	e8 00 00 00 00	 call	 _byteswap_uint64
  00377	b9 08 00 00 00	 mov	 ecx, 8
  0037c	48 6b c9 01	 imul	 rcx, rcx, 1
  00380	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  00388	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  0038f	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00397	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0039c	48 03 ca	 add	 rcx, rdx
  0039f	48 8b d0	 mov	 rdx, rax
  003a2	e8 00 00 00 00	 call	 store_dw_noswap
$LN11@z900_cmpsc:
$LN6@z900_cmpsc:

; 481  :         }
; 482  :     }

  003a7	e9 62 01 00 00	 jmp	 $LN4@z900_cmpsc
$LN3@z900_cmpsc:

; 483  :     else
; 484  :     {
; 485  :         U64 value = CSWAP64( val );

  003ac	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  003b4	e8 00 00 00 00	 call	 _byteswap_uint64
  003b9	48 89 44 24 60	 mov	 QWORD PTR value$2[rsp], rax

; 486  :         U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  003be	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  003c6	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  003cc	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  003d1	48 2b c8	 sub	 rcx, rax
  003d4	48 8b c1	 mov	 rax, rcx
  003d7	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 487  :         if (likely(!pMEMBLK->maddr[1]))

  003dc	b8 08 00 00 00	 mov	 eax, 8
  003e1	48 6b c0 01	 imul	 rax, rax, 1
  003e5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003ed	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  003f3	75 0a		 jne	 SHORT $LN44@z900_cmpsc
  003f5	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv249[rsp], 1
  003fd	eb 08		 jmp	 SHORT $LN45@z900_cmpsc
$LN44@z900_cmpsc:
  003ff	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv249[rsp], 0
$LN45@z900_cmpsc:
  00407	83 7c 24 58 00	 cmp	 DWORD PTR tv249[rsp], 0
  0040c	74 0a		 je	 SHORT $LN48@z900_cmpsc
  0040e	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv257[rsp], 1
  00416	eb 08		 jmp	 SHORT $LN49@z900_cmpsc
$LN48@z900_cmpsc:
  00418	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv257[rsp], 0
$LN49@z900_cmpsc:
  00420	83 7c 24 5c 00	 cmp	 DWORD PTR tv257[rsp], 0
  00425	74 64		 je	 SHORT $LN12@z900_cmpsc

; 488  :         {
; 489  :             pMEMBLK->maddr[1] = MADDR

  00427	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0042f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00433	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00439	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00441	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00445	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00449	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00451	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00459	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0045c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00464	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00468	ba 01 00 00 00	 mov	 edx, 1
  0046d	48 8b c8	 mov	 rcx, rax
  00470	e8 00 00 00 00	 call	 z900_maddr_l
  00475	b9 08 00 00 00	 mov	 ecx, 8
  0047a	48 6b c9 01	 imul	 rcx, rcx, 1
  0047e	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00486	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN12@z900_cmpsc:

; 490  :             (
; 491  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 492  :                 pMEMBLK->arn,
; 493  :                 pMEMBLK->regs,
; 494  :                 ACCTYPE_WRITE,  // (store)
; 495  :                 pMEMBLK->pkey
; 496  :             );
; 497  :         }
; 498  :         memcpy( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], (U8*)&value,            len1 );

  0048b	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00490	b9 08 00 00 00	 mov	 ecx, 8
  00495	48 6b c9 00	 imul	 rcx, rcx, 0
  00499	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  004a1	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  004a8	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  004b0	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  004b5	48 03 ca	 add	 rcx, rdx
  004b8	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$2[rsp]
  004bd	48 8b f9	 mov	 rdi, rcx
  004c0	48 8b f2	 mov	 rsi, rdx
  004c3	8b c8		 mov	 ecx, eax
  004c5	f3 a4		 rep movsb

; 499  :         memcpy( &pMEMBLK->maddr[1][0],                         (U8*)&value + len1, 8 - len1 );

  004c7	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  004cc	b9 08 00 00 00	 mov	 ecx, 8
  004d1	2b c8		 sub	 ecx, eax
  004d3	8b c1		 mov	 eax, ecx
  004d5	48 98		 cdqe
  004d7	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  004dc	48 8d 4c 0c 60	 lea	 rcx, QWORD PTR value$2[rsp+rcx]
  004e1	ba 08 00 00 00	 mov	 edx, 8
  004e6	48 6b d2 01	 imul	 rdx, rdx, 1
  004ea	bf 01 00 00 00	 mov	 edi, 1
  004ef	48 6b ff 00	 imul	 rdi, rdi, 0
  004f3	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR pMEMBLK$[rsp]
  004fb	48 03 7c 16 10	 add	 rdi, QWORD PTR [rsi+rdx+16]
  00500	48 8b d7	 mov	 rdx, rdi
  00503	48 8b fa	 mov	 rdi, rdx
  00506	48 8b f1	 mov	 rsi, rcx
  00509	48 8b c8	 mov	 rcx, rax
  0050c	f3 a4		 rep movsb
$LN4@z900_cmpsc:

; 500  :     }
; 501  : }

  0050e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00512	5f		 pop	 rdi
  00513	5e		 pop	 rsi
  00514	c3		 ret	 0
z900_cmpsc_vstore8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv82 = 52
tv143 = 56
tv153 = 60
tv157 = 64
tv163 = 68
tv188 = 72
tv196 = 76
tv215 = 80
tv221 = 84
tv251 = 88
tv259 = 92
value$2 = 96
val$ = 144
addr$ = 152
pMEMBLK$ = 160
z900_cmpsc_vstore4 PROC

; 304  : {

$LN50:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	56		 push	 rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 305  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00014	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0001c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001f	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00026	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  0002e	48 23 c8	 and	 rcx, rax
  00031	48 8b c1	 mov	 rax, rcx
  00034	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR addr$[rsp], rax

; 306  : 
; 307  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0003c	b8 08 00 00 00	 mov	 eax, 8
  00041	48 6b c0 00	 imul	 rax, rax, 0
  00045	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0004d	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00053	74 20		 je	 SHORT $LN14@z900_cmpsc
  00055	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0005d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00061	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR addr$[rsp], rax
  00069	72 0a		 jb	 SHORT $LN14@z900_cmpsc
  0006b	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  00073	eb 08		 jmp	 SHORT $LN17@z900_cmpsc
$LN14@z900_cmpsc:
  00075	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN17@z900_cmpsc:
  0007d	83 7c 24 34 00	 cmp	 DWORD PTR tv82[rsp], 0
  00082	0f 84 8f 00 00
	00		 je	 $LN2@z900_cmpsc

; 308  :     {
; 309  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00088	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00090	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  00096	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0009e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 310  :         pMEMBLK->maddr[1] = 0;

  000a2	b8 08 00 00 00	 mov	 eax, 8
  000a7	48 6b c0 01	 imul	 rax, rax, 1
  000ab	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000b3	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 311  :         pMEMBLK->maddr[0] = MADDR

  000bc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c4	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000c8	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000cc	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d4	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000dc	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000df	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e7	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000eb	ba 01 00 00 00	 mov	 edx, 1
  000f0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000f8	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000fc	e8 00 00 00 00	 call	 z900_maddr_l
  00101	b9 08 00 00 00	 mov	 ecx, 8
  00106	48 6b c9 00	 imul	 rcx, rcx, 0
  0010a	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00112	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@z900_cmpsc:

; 312  :         (
; 313  :             pMEMBLK->vpagebeg,
; 314  :             pMEMBLK->arn,
; 315  :             pMEMBLK->regs,
; 316  :             ACCTYPE_WRITE,  // (store)
; 317  :             pMEMBLK->pkey
; 318  :         );
; 319  :     }
; 320  :     if (NOCROSSPAGE( addr, 4 ))

  00117	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0011f	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00125	3d fb 0f 00 00	 cmp	 eax, 4091		; 00000ffbH
  0012a	7f 0a		 jg	 SHORT $LN20@z900_cmpsc
  0012c	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00134	eb 08		 jmp	 SHORT $LN21@z900_cmpsc
$LN20@z900_cmpsc:
  00136	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN21@z900_cmpsc:
  0013e	83 7c 24 38 00	 cmp	 DWORD PTR tv143[rsp], 0
  00143	0f 84 60 02 00
	00		 je	 $LN3@z900_cmpsc

; 321  :     {
; 322  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  00149	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00151	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00155	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0015b	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR addr$[rsp], rax
  00163	73 0a		 jae	 SHORT $LN24@z900_cmpsc
  00165	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv153[rsp], 1
  0016d	eb 08		 jmp	 SHORT $LN25@z900_cmpsc
$LN24@z900_cmpsc:
  0016f	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv153[rsp], 0
$LN25@z900_cmpsc:
  00177	83 7c 24 3c 00	 cmp	 DWORD PTR tv153[rsp], 0
  0017c	0f 84 bc 00 00
	00		 je	 $LN5@z900_cmpsc

; 323  :         {
; 324  :             if (U32_ALIGNED( addr ))

  00182	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0018a	48 83 e0 03	 and	 rax, 3
  0018e	48 85 c0	 test	 rax, rax
  00191	75 0a		 jne	 SHORT $LN26@z900_cmpsc
  00193	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv157[rsp], 1
  0019b	eb 08		 jmp	 SHORT $LN27@z900_cmpsc
$LN26@z900_cmpsc:
  0019d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN27@z900_cmpsc:
  001a5	83 7c 24 40 00	 cmp	 DWORD PTR tv157[rsp], 0
  001aa	74 0a		 je	 SHORT $LN30@z900_cmpsc
  001ac	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv163[rsp], 1
  001b4	eb 08		 jmp	 SHORT $LN31@z900_cmpsc
$LN30@z900_cmpsc:
  001b6	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv163[rsp], 0
$LN31@z900_cmpsc:
  001be	83 7c 24 44 00	 cmp	 DWORD PTR tv163[rsp], 0
  001c3	74 36		 je	 SHORT $LN7@z900_cmpsc

; 325  :                 *(U32*)   &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] = CSWAP32( val );

  001c5	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR val$[rsp]
  001cc	e8 00 00 00 00	 call	 _byteswap_ulong
  001d1	b9 08 00 00 00	 mov	 ecx, 8
  001d6	48 6b c9 00	 imul	 rcx, rcx, 0
  001da	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  001e2	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  001e9	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001f1	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001f6	89 04 11	 mov	 DWORD PTR [rcx+rdx], eax
  001f9	eb 3e		 jmp	 SHORT $LN8@z900_cmpsc
$LN7@z900_cmpsc:

; 326  :             else
; 327  :                 store_dw( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],           val );

  001fb	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR val$[rsp]
  00202	8b c8		 mov	 ecx, eax
  00204	e8 00 00 00 00	 call	 _byteswap_uint64
  00209	b9 08 00 00 00	 mov	 ecx, 8
  0020e	48 6b c9 00	 imul	 rcx, rcx, 0
  00212	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  0021a	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  00221	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00229	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0022e	48 03 ca	 add	 rcx, rdx
  00231	48 8b d0	 mov	 rdx, rax
  00234	e8 00 00 00 00	 call	 store_dw_noswap
$LN8@z900_cmpsc:

; 328  :         }

  00239	e9 66 01 00 00	 jmp	 $LN6@z900_cmpsc
$LN5@z900_cmpsc:

; 329  :         else
; 330  :         {
; 331  :             if (unlikely(!pMEMBLK->maddr[1]))

  0023e	b8 08 00 00 00	 mov	 eax, 8
  00243	48 6b c0 01	 imul	 rax, rax, 1
  00247	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0024f	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00255	75 0a		 jne	 SHORT $LN32@z900_cmpsc
  00257	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv188[rsp], 1
  0025f	eb 08		 jmp	 SHORT $LN33@z900_cmpsc
$LN32@z900_cmpsc:
  00261	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv188[rsp], 0
$LN33@z900_cmpsc:
  00269	83 7c 24 48 00	 cmp	 DWORD PTR tv188[rsp], 0
  0026e	74 0a		 je	 SHORT $LN36@z900_cmpsc
  00270	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv196[rsp], 1
  00278	eb 08		 jmp	 SHORT $LN37@z900_cmpsc
$LN36@z900_cmpsc:
  0027a	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv196[rsp], 0
$LN37@z900_cmpsc:
  00282	83 7c 24 4c 00	 cmp	 DWORD PTR tv196[rsp], 0
  00287	74 64		 je	 SHORT $LN9@z900_cmpsc

; 332  :             {
; 333  :                 pMEMBLK->maddr[1] = MADDR

  00289	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00291	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00295	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0029b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002a3	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  002a7	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  002ab	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002b3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002bb	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  002be	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002c6	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002ca	ba 01 00 00 00	 mov	 edx, 1
  002cf	48 8b c8	 mov	 rcx, rax
  002d2	e8 00 00 00 00	 call	 z900_maddr_l
  002d7	b9 08 00 00 00	 mov	 ecx, 8
  002dc	48 6b c9 01	 imul	 rcx, rcx, 1
  002e0	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002e8	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN9@z900_cmpsc:

; 334  :                 (
; 335  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 336  :                     pMEMBLK->arn,
; 337  :                     pMEMBLK->regs,
; 338  :                     ACCTYPE_WRITE,  // (store)
; 339  :                     pMEMBLK->pkey
; 340  :                 );
; 341  :             }
; 342  :             if (U32_ALIGNED( addr ))

  002ed	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  002f5	48 83 e0 03	 and	 rax, 3
  002f9	48 85 c0	 test	 rax, rax
  002fc	75 0a		 jne	 SHORT $LN38@z900_cmpsc
  002fe	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv215[rsp], 1
  00306	eb 08		 jmp	 SHORT $LN39@z900_cmpsc
$LN38@z900_cmpsc:
  00308	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv215[rsp], 0
$LN39@z900_cmpsc:
  00310	83 7c 24 50 00	 cmp	 DWORD PTR tv215[rsp], 0
  00315	74 0a		 je	 SHORT $LN42@z900_cmpsc
  00317	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv221[rsp], 1
  0031f	eb 08		 jmp	 SHORT $LN43@z900_cmpsc
$LN42@z900_cmpsc:
  00321	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv221[rsp], 0
$LN43@z900_cmpsc:
  00329	83 7c 24 54 00	 cmp	 DWORD PTR tv221[rsp], 0
  0032e	74 36		 je	 SHORT $LN10@z900_cmpsc

; 343  :                 *(U32*)   &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] = CSWAP32( val );

  00330	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR val$[rsp]
  00337	e8 00 00 00 00	 call	 _byteswap_ulong
  0033c	b9 08 00 00 00	 mov	 ecx, 8
  00341	48 6b c9 01	 imul	 rcx, rcx, 1
  00345	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  0034d	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  00354	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0035c	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00361	89 04 11	 mov	 DWORD PTR [rcx+rdx], eax
  00364	eb 3e		 jmp	 SHORT $LN11@z900_cmpsc
$LN10@z900_cmpsc:

; 344  :             else
; 345  :                 store_dw( &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK],           val );

  00366	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR val$[rsp]
  0036d	8b c8		 mov	 ecx, eax
  0036f	e8 00 00 00 00	 call	 _byteswap_uint64
  00374	b9 08 00 00 00	 mov	 ecx, 8
  00379	48 6b c9 01	 imul	 rcx, rcx, 1
  0037d	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  00385	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  0038c	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00394	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00399	48 03 ca	 add	 rcx, rdx
  0039c	48 8b d0	 mov	 rdx, rax
  0039f	e8 00 00 00 00	 call	 store_dw_noswap
$LN11@z900_cmpsc:
$LN6@z900_cmpsc:

; 346  :         }
; 347  :     }

  003a4	e9 60 01 00 00	 jmp	 $LN4@z900_cmpsc
$LN3@z900_cmpsc:

; 348  :     else
; 349  :     {
; 350  :         U32 value = CSWAP32( val );

  003a9	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR val$[rsp]
  003b0	e8 00 00 00 00	 call	 _byteswap_ulong
  003b5	89 44 24 60	 mov	 DWORD PTR value$2[rsp], eax

; 351  :         U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  003b9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  003c1	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  003c7	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  003cc	48 2b c8	 sub	 rcx, rax
  003cf	48 8b c1	 mov	 rax, rcx
  003d2	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 352  :         if (likely(!pMEMBLK->maddr[1]))

  003d7	b8 08 00 00 00	 mov	 eax, 8
  003dc	48 6b c0 01	 imul	 rax, rax, 1
  003e0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003e8	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  003ee	75 0a		 jne	 SHORT $LN44@z900_cmpsc
  003f0	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv251[rsp], 1
  003f8	eb 08		 jmp	 SHORT $LN45@z900_cmpsc
$LN44@z900_cmpsc:
  003fa	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv251[rsp], 0
$LN45@z900_cmpsc:
  00402	83 7c 24 58 00	 cmp	 DWORD PTR tv251[rsp], 0
  00407	74 0a		 je	 SHORT $LN48@z900_cmpsc
  00409	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv259[rsp], 1
  00411	eb 08		 jmp	 SHORT $LN49@z900_cmpsc
$LN48@z900_cmpsc:
  00413	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv259[rsp], 0
$LN49@z900_cmpsc:
  0041b	83 7c 24 5c 00	 cmp	 DWORD PTR tv259[rsp], 0
  00420	74 64		 je	 SHORT $LN12@z900_cmpsc

; 353  :         {
; 354  :             pMEMBLK->maddr[1] = MADDR

  00422	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0042a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0042e	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00434	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0043c	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00440	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00444	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0044c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00454	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00457	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0045f	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00463	ba 01 00 00 00	 mov	 edx, 1
  00468	48 8b c8	 mov	 rcx, rax
  0046b	e8 00 00 00 00	 call	 z900_maddr_l
  00470	b9 08 00 00 00	 mov	 ecx, 8
  00475	48 6b c9 01	 imul	 rcx, rcx, 1
  00479	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00481	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN12@z900_cmpsc:

; 355  :             (
; 356  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 357  :                 pMEMBLK->arn,
; 358  :                 pMEMBLK->regs,
; 359  :                 ACCTYPE_WRITE,  // (store)
; 360  :                 pMEMBLK->pkey
; 361  :             );
; 362  :         }
; 363  :         memcpy( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], (U8*)&value,            len1 );

  00486	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  0048b	b9 08 00 00 00	 mov	 ecx, 8
  00490	48 6b c9 00	 imul	 rcx, rcx, 0
  00494	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  0049c	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  004a3	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  004ab	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  004b0	48 03 ca	 add	 rcx, rdx
  004b3	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$2[rsp]
  004b8	48 8b f9	 mov	 rdi, rcx
  004bb	48 8b f2	 mov	 rsi, rdx
  004be	8b c8		 mov	 ecx, eax
  004c0	f3 a4		 rep movsb

; 364  :         memcpy( &pMEMBLK->maddr[1][0],                         (U8*)&value + len1, 4 - len1 );

  004c2	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  004c7	b9 04 00 00 00	 mov	 ecx, 4
  004cc	2b c8		 sub	 ecx, eax
  004ce	8b c1		 mov	 eax, ecx
  004d0	48 98		 cdqe
  004d2	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  004d7	48 8d 4c 0c 60	 lea	 rcx, QWORD PTR value$2[rsp+rcx]
  004dc	ba 08 00 00 00	 mov	 edx, 8
  004e1	48 6b d2 01	 imul	 rdx, rdx, 1
  004e5	bf 01 00 00 00	 mov	 edi, 1
  004ea	48 6b ff 00	 imul	 rdi, rdi, 0
  004ee	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR pMEMBLK$[rsp]
  004f6	48 03 7c 16 10	 add	 rdi, QWORD PTR [rsi+rdx+16]
  004fb	48 8b d7	 mov	 rdx, rdi
  004fe	48 8b fa	 mov	 rdi, rdx
  00501	48 8b f1	 mov	 rsi, rcx
  00504	48 8b c8	 mov	 rcx, rax
  00507	f3 a4		 rep movsb
$LN4@z900_cmpsc:

; 365  :     }
; 366  : }

  00509	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0050d	5f		 pop	 rdi
  0050e	5e		 pop	 rsi
  0050f	c3		 ret	 0
z900_cmpsc_vstore4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
tv82 = 48
tv141 = 52
tv151 = 56
tv155 = 60
tv161 = 64
tv185 = 68
tv193 = 72
tv212 = 76
tv218 = 80
tv242 = 84
tv250 = 88
val$ = 112
addr$ = 120
pMEMBLK$ = 128
z900_cmpsc_vstore2 PROC

; 171  : {

$LN50:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 172  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00013	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00025	48 8b 4c 24 78	 mov	 rcx, QWORD PTR addr$[rsp]
  0002a	48 23 c8	 and	 rcx, rax
  0002d	48 8b c1	 mov	 rax, rcx
  00030	48 89 44 24 78	 mov	 QWORD PTR addr$[rsp], rax

; 173  : 
; 174  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00035	b8 08 00 00 00	 mov	 eax, 8
  0003a	48 6b c0 00	 imul	 rax, rax, 0
  0003e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00046	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0004c	74 1d		 je	 SHORT $LN14@z900_cmpsc
  0004e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00056	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005a	48 39 44 24 78	 cmp	 QWORD PTR addr$[rsp], rax
  0005f	72 0a		 jb	 SHORT $LN14@z900_cmpsc
  00061	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  00069	eb 08		 jmp	 SHORT $LN17@z900_cmpsc
$LN14@z900_cmpsc:
  0006b	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN17@z900_cmpsc:
  00073	83 7c 24 30 00	 cmp	 DWORD PTR tv82[rsp], 0
  00078	0f 84 8c 00 00
	00		 je	 $LN2@z900_cmpsc

; 175  :     {
; 176  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  0007e	48 8b 44 24 78	 mov	 rax, QWORD PTR addr$[rsp]
  00083	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  00089	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00091	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 177  :         pMEMBLK->maddr[1] = 0;

  00095	b8 08 00 00 00	 mov	 eax, 8
  0009a	48 6b c0 01	 imul	 rax, rax, 1
  0009e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000a6	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 178  :         pMEMBLK->maddr[0] = MADDR

  000af	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b7	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000bb	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000bf	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000cf	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000d2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000da	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000de	ba 01 00 00 00	 mov	 edx, 1
  000e3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000eb	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000ef	e8 00 00 00 00	 call	 z900_maddr_l
  000f4	b9 08 00 00 00	 mov	 ecx, 8
  000f9	48 6b c9 00	 imul	 rcx, rcx, 0
  000fd	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00105	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@z900_cmpsc:

; 179  :         (
; 180  :             pMEMBLK->vpagebeg,
; 181  :             pMEMBLK->arn,
; 182  :             pMEMBLK->regs,
; 183  :             ACCTYPE_WRITE,  // (store)
; 184  :             pMEMBLK->pkey
; 185  :         );
; 186  :     }
; 187  :     if (!LASTBYTEOFPAGE( addr ))

  0010a	48 8b 44 24 78	 mov	 rax, QWORD PTR addr$[rsp]
  0010f	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00115	48 3d ff 0f 00
	00		 cmp	 rax, 4095		; 00000fffH
  0011b	75 0a		 jne	 SHORT $LN20@z900_cmpsc
  0011d	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv141[rsp], 1
  00125	eb 08		 jmp	 SHORT $LN21@z900_cmpsc
$LN20@z900_cmpsc:
  00127	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv141[rsp], 0
$LN21@z900_cmpsc:
  0012f	83 7c 24 34 00	 cmp	 DWORD PTR tv141[rsp], 0
  00134	0f 85 41 02 00
	00		 jne	 $LN3@z900_cmpsc

; 188  :     {
; 189  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  0013a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00142	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00146	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0014c	48 39 44 24 78	 cmp	 QWORD PTR addr$[rsp], rax
  00151	73 0a		 jae	 SHORT $LN24@z900_cmpsc
  00153	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv151[rsp], 1
  0015b	eb 08		 jmp	 SHORT $LN25@z900_cmpsc
$LN24@z900_cmpsc:
  0015d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv151[rsp], 0
$LN25@z900_cmpsc:
  00165	83 7c 24 38 00	 cmp	 DWORD PTR tv151[rsp], 0
  0016a	0f 84 ae 00 00
	00		 je	 $LN5@z900_cmpsc

; 190  :         {
; 191  :             if (U16_ALIGNED( addr ))

  00170	48 8b 44 24 78	 mov	 rax, QWORD PTR addr$[rsp]
  00175	48 83 e0 01	 and	 rax, 1
  00179	48 85 c0	 test	 rax, rax
  0017c	75 0a		 jne	 SHORT $LN26@z900_cmpsc
  0017e	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv155[rsp], 1
  00186	eb 08		 jmp	 SHORT $LN27@z900_cmpsc
$LN26@z900_cmpsc:
  00188	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv155[rsp], 0
$LN27@z900_cmpsc:
  00190	83 7c 24 3c 00	 cmp	 DWORD PTR tv155[rsp], 0
  00195	74 0a		 je	 SHORT $LN30@z900_cmpsc
  00197	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv161[rsp], 1
  0019f	eb 08		 jmp	 SHORT $LN31@z900_cmpsc
$LN30@z900_cmpsc:
  001a1	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv161[rsp], 0
$LN31@z900_cmpsc:
  001a9	83 7c 24 40 00	 cmp	 DWORD PTR tv161[rsp], 0
  001ae	74 32		 je	 SHORT $LN7@z900_cmpsc

; 192  :                 *(U16*)   &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] = CSWAP16( val );

  001b0	0f b7 4c 24 70	 movzx	 ecx, WORD PTR val$[rsp]
  001b5	e8 00 00 00 00	 call	 _byteswap_ushort
  001ba	b9 08 00 00 00	 mov	 ecx, 8
  001bf	48 6b c9 00	 imul	 rcx, rcx, 0
  001c3	48 8b 54 24 78	 mov	 rdx, QWORD PTR addr$[rsp]
  001c8	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  001cf	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001d7	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001dc	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  001e0	eb 37		 jmp	 SHORT $LN8@z900_cmpsc
$LN7@z900_cmpsc:

; 193  :             else
; 194  :                 store_hw( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],           val );

  001e2	0f b7 4c 24 70	 movzx	 ecx, WORD PTR val$[rsp]
  001e7	e8 00 00 00 00	 call	 _byteswap_ushort
  001ec	b9 08 00 00 00	 mov	 ecx, 8
  001f1	48 6b c9 00	 imul	 rcx, rcx, 0
  001f5	48 8b 54 24 78	 mov	 rdx, QWORD PTR addr$[rsp]
  001fa	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  00201	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00209	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0020e	48 03 ca	 add	 rcx, rdx
  00211	0f b7 d0	 movzx	 edx, ax
  00214	e8 00 00 00 00	 call	 store_hw_noswap
$LN8@z900_cmpsc:

; 195  :         }

  00219	e9 58 01 00 00	 jmp	 $LN6@z900_cmpsc
$LN5@z900_cmpsc:

; 196  :         else
; 197  :         {
; 198  :             if (unlikely(!pMEMBLK->maddr[1]))

  0021e	b8 08 00 00 00	 mov	 eax, 8
  00223	48 6b c0 01	 imul	 rax, rax, 1
  00227	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0022f	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00235	75 0a		 jne	 SHORT $LN32@z900_cmpsc
  00237	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv185[rsp], 1
  0023f	eb 08		 jmp	 SHORT $LN33@z900_cmpsc
$LN32@z900_cmpsc:
  00241	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv185[rsp], 0
$LN33@z900_cmpsc:
  00249	83 7c 24 44 00	 cmp	 DWORD PTR tv185[rsp], 0
  0024e	74 0a		 je	 SHORT $LN36@z900_cmpsc
  00250	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv193[rsp], 1
  00258	eb 08		 jmp	 SHORT $LN37@z900_cmpsc
$LN36@z900_cmpsc:
  0025a	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv193[rsp], 0
$LN37@z900_cmpsc:
  00262	83 7c 24 48 00	 cmp	 DWORD PTR tv193[rsp], 0
  00267	74 64		 je	 SHORT $LN9@z900_cmpsc

; 199  :             {
; 200  :                 pMEMBLK->maddr[1] = MADDR

  00269	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00271	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00275	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0027b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00283	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00287	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0028b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00293	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0029b	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0029e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002a6	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002aa	ba 01 00 00 00	 mov	 edx, 1
  002af	48 8b c8	 mov	 rcx, rax
  002b2	e8 00 00 00 00	 call	 z900_maddr_l
  002b7	b9 08 00 00 00	 mov	 ecx, 8
  002bc	48 6b c9 01	 imul	 rcx, rcx, 1
  002c0	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002c8	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN9@z900_cmpsc:

; 201  :                 (
; 202  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 203  :                     pMEMBLK->arn,
; 204  :                     pMEMBLK->regs,
; 205  :                     ACCTYPE_WRITE,  // (store)
; 206  :                     pMEMBLK->pkey
; 207  :                 );
; 208  :             }
; 209  :             if (U16_ALIGNED( addr ))

  002cd	48 8b 44 24 78	 mov	 rax, QWORD PTR addr$[rsp]
  002d2	48 83 e0 01	 and	 rax, 1
  002d6	48 85 c0	 test	 rax, rax
  002d9	75 0a		 jne	 SHORT $LN38@z900_cmpsc
  002db	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv212[rsp], 1
  002e3	eb 08		 jmp	 SHORT $LN39@z900_cmpsc
$LN38@z900_cmpsc:
  002e5	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv212[rsp], 0
$LN39@z900_cmpsc:
  002ed	83 7c 24 4c 00	 cmp	 DWORD PTR tv212[rsp], 0
  002f2	74 0a		 je	 SHORT $LN42@z900_cmpsc
  002f4	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv218[rsp], 1
  002fc	eb 08		 jmp	 SHORT $LN43@z900_cmpsc
$LN42@z900_cmpsc:
  002fe	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv218[rsp], 0
$LN43@z900_cmpsc:
  00306	83 7c 24 50 00	 cmp	 DWORD PTR tv218[rsp], 0
  0030b	74 32		 je	 SHORT $LN10@z900_cmpsc

; 210  :                 *(U16*)   &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] = CSWAP16( val );

  0030d	0f b7 4c 24 70	 movzx	 ecx, WORD PTR val$[rsp]
  00312	e8 00 00 00 00	 call	 _byteswap_ushort
  00317	b9 08 00 00 00	 mov	 ecx, 8
  0031c	48 6b c9 01	 imul	 rcx, rcx, 1
  00320	48 8b 54 24 78	 mov	 rdx, QWORD PTR addr$[rsp]
  00325	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  0032c	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00334	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00339	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  0033d	eb 37		 jmp	 SHORT $LN11@z900_cmpsc
$LN10@z900_cmpsc:

; 211  :             else
; 212  :                 store_hw( &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK],           val );

  0033f	0f b7 4c 24 70	 movzx	 ecx, WORD PTR val$[rsp]
  00344	e8 00 00 00 00	 call	 _byteswap_ushort
  00349	b9 08 00 00 00	 mov	 ecx, 8
  0034e	48 6b c9 01	 imul	 rcx, rcx, 1
  00352	48 8b 54 24 78	 mov	 rdx, QWORD PTR addr$[rsp]
  00357	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  0035e	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00366	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0036b	48 03 ca	 add	 rcx, rdx
  0036e	0f b7 d0	 movzx	 edx, ax
  00371	e8 00 00 00 00	 call	 store_hw_noswap
$LN11@z900_cmpsc:
$LN6@z900_cmpsc:

; 213  :         }
; 214  :     }

  00376	e9 03 01 00 00	 jmp	 $LN4@z900_cmpsc
$LN3@z900_cmpsc:

; 215  :     else
; 216  :     {
; 217  :         if (likely(!pMEMBLK->maddr[1]))

  0037b	b8 08 00 00 00	 mov	 eax, 8
  00380	48 6b c0 01	 imul	 rax, rax, 1
  00384	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0038c	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00392	75 0a		 jne	 SHORT $LN44@z900_cmpsc
  00394	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv242[rsp], 1
  0039c	eb 08		 jmp	 SHORT $LN45@z900_cmpsc
$LN44@z900_cmpsc:
  0039e	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv242[rsp], 0
$LN45@z900_cmpsc:
  003a6	83 7c 24 54 00	 cmp	 DWORD PTR tv242[rsp], 0
  003ab	74 0a		 je	 SHORT $LN48@z900_cmpsc
  003ad	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv250[rsp], 1
  003b5	eb 08		 jmp	 SHORT $LN49@z900_cmpsc
$LN48@z900_cmpsc:
  003b7	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv250[rsp], 0
$LN49@z900_cmpsc:
  003bf	83 7c 24 58 00	 cmp	 DWORD PTR tv250[rsp], 0
  003c4	74 64		 je	 SHORT $LN12@z900_cmpsc

; 218  :         {
; 219  :             pMEMBLK->maddr[1] = MADDR

  003c6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  003ce	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003d2	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  003d8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003e0	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  003e4	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  003e8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  003f0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003f8	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  003fb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00403	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00407	ba 01 00 00 00	 mov	 edx, 1
  0040c	48 8b c8	 mov	 rcx, rax
  0040f	e8 00 00 00 00	 call	 z900_maddr_l
  00414	b9 08 00 00 00	 mov	 ecx, 8
  00419	48 6b c9 01	 imul	 rcx, rcx, 1
  0041d	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00425	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN12@z900_cmpsc:

; 220  :             (
; 221  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 222  :                 pMEMBLK->arn,
; 223  :                 pMEMBLK->regs,
; 224  :                 ACCTYPE_WRITE,  // (store)
; 225  :                 pMEMBLK->pkey
; 226  :             );
; 227  :         }
; 228  :         pMEMBLK->maddr[0][PAGEFRAME_BYTEMASK] = (U8)(val >> 8);

  0042a	0f b7 44 24 70	 movzx	 eax, WORD PTR val$[rsp]
  0042f	c1 f8 08	 sar	 eax, 8
  00432	b9 08 00 00 00	 mov	 ecx, 8
  00437	48 6b c9 00	 imul	 rcx, rcx, 0
  0043b	ba 01 00 00 00	 mov	 edx, 1
  00440	48 69 d2 ff 0f
	00 00		 imul	 rdx, rdx, 4095		; 00000fffH
  00447	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0044f	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00454	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 229  :         pMEMBLK->maddr[1][0]                  = (U8)(val     );

  00457	b8 08 00 00 00	 mov	 eax, 8
  0045c	48 6b c0 01	 imul	 rax, rax, 1
  00460	b9 01 00 00 00	 mov	 ecx, 1
  00465	48 6b c9 00	 imul	 rcx, rcx, 0
  00469	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00471	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00476	0f b6 54 24 70	 movzx	 edx, BYTE PTR val$[rsp]
  0047b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
$LN4@z900_cmpsc:

; 230  :     }
; 231  : }

  0047e	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00482	c3		 ret	 0
z900_cmpsc_vstore2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
tv82 = 48
tv143 = 52
tv155 = 56
tv163 = 60
byt$ = 80
addr$ = 88
pMEMBLK$ = 96
z900_cmpsc_vstoreb PROC

; 66   : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 67   :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00012	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001a	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00021	48 8b 4c 24 58	 mov	 rcx, QWORD PTR addr$[rsp]
  00026	48 23 c8	 and	 rcx, rax
  00029	48 8b c1	 mov	 rax, rcx
  0002c	48 89 44 24 58	 mov	 QWORD PTR addr$[rsp], rax

; 68   : 
; 69   :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00031	b8 08 00 00 00	 mov	 eax, 8
  00036	48 6b c0 00	 imul	 rax, rax, 0
  0003a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0003f	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00045	74 1a		 je	 SHORT $LN7@z900_cmpsc
  00047	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0004c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00050	48 39 44 24 58	 cmp	 QWORD PTR addr$[rsp], rax
  00055	72 0a		 jb	 SHORT $LN7@z900_cmpsc
  00057	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  0005f	eb 08		 jmp	 SHORT $LN10@z900_cmpsc
$LN7@z900_cmpsc:
  00061	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN10@z900_cmpsc:
  00069	83 7c 24 30 00	 cmp	 DWORD PTR tv82[rsp], 0
  0006e	74 77		 je	 SHORT $LN2@z900_cmpsc

; 70   :     {
; 71   :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00070	48 8b 44 24 58	 mov	 rax, QWORD PTR addr$[rsp]
  00075	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  0007b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00080	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 72   :         pMEMBLK->maddr[1] = 0;

  00084	b8 08 00 00 00	 mov	 eax, 8
  00089	48 6b c0 01	 imul	 rax, rax, 1
  0008d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00092	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 73   :         pMEMBLK->maddr[0] = MADDR

  0009b	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000a0	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000a4	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000a8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b0	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b5	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000b8	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000bd	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000c1	ba 01 00 00 00	 mov	 edx, 1
  000c6	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000cb	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000cf	e8 00 00 00 00	 call	 z900_maddr_l
  000d4	b9 08 00 00 00	 mov	 ecx, 8
  000d9	48 6b c9 00	 imul	 rcx, rcx, 0
  000dd	48 8b 54 24 60	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000e2	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@z900_cmpsc:

; 74   :         (
; 75   :             pMEMBLK->vpagebeg,
; 76   :             pMEMBLK->arn,
; 77   :             pMEMBLK->regs,
; 78   :             ACCTYPE_WRITE,  // (store)
; 79   :             pMEMBLK->pkey
; 80   :         );
; 81   :     }
; 82   :     if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  000e7	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000ec	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000f0	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  000f6	48 39 44 24 58	 cmp	 QWORD PTR addr$[rsp], rax
  000fb	73 0a		 jae	 SHORT $LN13@z900_cmpsc
  000fd	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00105	eb 08		 jmp	 SHORT $LN14@z900_cmpsc
$LN13@z900_cmpsc:
  00107	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN14@z900_cmpsc:
  0010f	83 7c 24 34 00	 cmp	 DWORD PTR tv143[rsp], 0
  00114	74 2c		 je	 SHORT $LN3@z900_cmpsc

; 83   :     {
; 84   :         pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] = byt;

  00116	b8 08 00 00 00	 mov	 eax, 8
  0011b	48 6b c0 00	 imul	 rax, rax, 0
  0011f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR addr$[rsp]
  00124	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  0012b	48 8b 54 24 60	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00130	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00135	0f b6 54 24 50	 movzx	 edx, BYTE PTR byt$[rsp]
  0013a	88 14 08	 mov	 BYTE PTR [rax+rcx], dl

; 85   :     }

  0013d	e9 c4 00 00 00	 jmp	 $LN4@z900_cmpsc
$LN3@z900_cmpsc:

; 86   :     else
; 87   :     {
; 88   :         if (unlikely(!pMEMBLK->maddr[1]))

  00142	b8 08 00 00 00	 mov	 eax, 8
  00147	48 6b c0 01	 imul	 rax, rax, 1
  0014b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00150	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00156	75 0a		 jne	 SHORT $LN15@z900_cmpsc
  00158	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv155[rsp], 1
  00160	eb 08		 jmp	 SHORT $LN16@z900_cmpsc
$LN15@z900_cmpsc:
  00162	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv155[rsp], 0
$LN16@z900_cmpsc:
  0016a	83 7c 24 38 00	 cmp	 DWORD PTR tv155[rsp], 0
  0016f	74 0a		 je	 SHORT $LN19@z900_cmpsc
  00171	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv163[rsp], 1
  00179	eb 08		 jmp	 SHORT $LN20@z900_cmpsc
$LN19@z900_cmpsc:
  0017b	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv163[rsp], 0
$LN20@z900_cmpsc:
  00183	83 7c 24 3c 00	 cmp	 DWORD PTR tv163[rsp], 0
  00188	74 55		 je	 SHORT $LN5@z900_cmpsc

; 89   :         {
; 90   :             pMEMBLK->maddr[1] = MADDR

  0018a	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0018f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00193	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00199	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0019e	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  001a2	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  001a6	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001ae	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001b3	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  001b6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001bb	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  001bf	ba 01 00 00 00	 mov	 edx, 1
  001c4	48 8b c8	 mov	 rcx, rax
  001c7	e8 00 00 00 00	 call	 z900_maddr_l
  001cc	b9 08 00 00 00	 mov	 ecx, 8
  001d1	48 6b c9 01	 imul	 rcx, rcx, 1
  001d5	48 8b 54 24 60	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001da	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN5@z900_cmpsc:

; 91   :             (
; 92   :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 93   :                 pMEMBLK->arn,
; 94   :                 pMEMBLK->regs,
; 95   :                 ACCTYPE_WRITE,  // (store)
; 96   :                 pMEMBLK->pkey
; 97   :             );
; 98   :         }
; 99   :         pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] = byt;

  001df	b8 08 00 00 00	 mov	 eax, 8
  001e4	48 6b c0 01	 imul	 rax, rax, 1
  001e8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR addr$[rsp]
  001ed	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  001f4	48 8b 54 24 60	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001f9	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001fe	0f b6 54 24 50	 movzx	 edx, BYTE PTR byt$[rsp]
  00203	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
$LN4@z900_cmpsc:

; 100  :     }
; 101  : }

  00206	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0020a	c3		 ret	 0
z900_cmpsc_vstoreb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv82 = 52
tv143 = 56
tv157 = 60
tv180 = 64
tv188 = 68
tv238 = 72
tv246 = 76
dst$ = 112
len$ = 120
addr$ = 128
pMEMBLK$ = 136
z900_cmpsc_vfetchc PROC

; 508  : {

$LN34:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 509  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0001a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0002c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  00034	48 23 c8	 and	 rcx, rax
  00037	48 8b c1	 mov	 rax, rcx
  0003a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR addr$[rsp], rax

; 510  : 
; 511  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00042	b8 08 00 00 00	 mov	 eax, 8
  00047	48 6b c0 00	 imul	 rax, rax, 0
  0004b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00053	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00059	74 20		 je	 SHORT $LN10@z900_cmpsc
  0005b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00063	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00067	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR addr$[rsp], rax
  0006f	72 0a		 jb	 SHORT $LN10@z900_cmpsc
  00071	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  00079	eb 08		 jmp	 SHORT $LN13@z900_cmpsc
$LN10@z900_cmpsc:
  0007b	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN13@z900_cmpsc:
  00083	83 7c 24 34 00	 cmp	 DWORD PTR tv82[rsp], 0
  00088	0f 84 8f 00 00
	00		 je	 $LN2@z900_cmpsc

; 512  :     {
; 513  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  0008e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00096	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  0009c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000a4	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 514  :         pMEMBLK->maddr[1] = 0;

  000a8	b8 08 00 00 00	 mov	 eax, 8
  000ad	48 6b c0 01	 imul	 rax, rax, 1
  000b1	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000b9	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 515  :         pMEMBLK->maddr[0] = MADDR

  000c2	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000ca	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000ce	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000d2	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000da	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e2	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000e5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000ed	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000f1	ba 01 00 00 00	 mov	 edx, 1
  000f6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000fe	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00102	e8 00 00 00 00	 call	 z900_maddr_l
  00107	b9 08 00 00 00	 mov	 ecx, 8
  0010c	48 6b c9 00	 imul	 rcx, rcx, 0
  00110	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00118	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@z900_cmpsc:

; 516  :         (
; 517  :             pMEMBLK->vpagebeg,
; 518  :             pMEMBLK->arn,
; 519  :             pMEMBLK->regs,
; 520  :             ACCTYPE_READ,   // (fetch)
; 521  :             pMEMBLK->pkey
; 522  :         );
; 523  :     }
; 524  :     if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  0011d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00125	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00129	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0012f	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR addr$[rsp], rax
  00137	73 0a		 jae	 SHORT $LN16@z900_cmpsc
  00139	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00141	eb 08		 jmp	 SHORT $LN17@z900_cmpsc
$LN16@z900_cmpsc:
  00143	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN17@z900_cmpsc:
  0014b	83 7c 24 38 00	 cmp	 DWORD PTR tv143[rsp], 0
  00150	0f 84 d4 01 00
	00		 je	 $LN3@z900_cmpsc

; 525  :     {
; 526  :         if (NOCROSSPAGE( addr, len ))

  00156	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0015e	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00164	0f b7 4c 24 78	 movzx	 ecx, WORD PTR len$[rsp]
  00169	ba ff 0f 00 00	 mov	 edx, 4095		; 00000fffH
  0016e	2b d1		 sub	 edx, ecx
  00170	8b ca		 mov	 ecx, edx
  00172	3b c1		 cmp	 eax, ecx
  00174	7f 0a		 jg	 SHORT $LN20@z900_cmpsc
  00176	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv157[rsp], 1
  0017e	eb 08		 jmp	 SHORT $LN21@z900_cmpsc
$LN20@z900_cmpsc:
  00180	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN21@z900_cmpsc:
  00188	83 7c 24 3c 00	 cmp	 DWORD PTR tv157[rsp], 0
  0018d	74 43		 je	 SHORT $LN5@z900_cmpsc

; 527  :         {
; 528  :             memcpy( dst, &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], len+1 );

  0018f	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  00194	ff c0		 inc	 eax
  00196	48 98		 cdqe
  00198	b9 08 00 00 00	 mov	 ecx, 8
  0019d	48 6b c9 00	 imul	 rcx, rcx, 0
  001a1	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  001a9	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  001b0	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001b8	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001bd	48 03 ca	 add	 rcx, rdx
  001c0	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dst$[rsp]
  001c5	48 8b f1	 mov	 rsi, rcx
  001c8	48 8b c8	 mov	 rcx, rax
  001cb	f3 a4		 rep movsb

; 529  :         }

  001cd	e9 53 01 00 00	 jmp	 $LN6@z900_cmpsc
$LN5@z900_cmpsc:

; 530  :         else
; 531  :         {
; 532  :             U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  001d2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  001da	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  001e0	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  001e5	48 2b c8	 sub	 rcx, rax
  001e8	48 8b c1	 mov	 rax, rcx
  001eb	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 533  :             if (likely(!pMEMBLK->maddr[1]))

  001f0	b8 08 00 00 00	 mov	 eax, 8
  001f5	48 6b c0 01	 imul	 rax, rax, 1
  001f9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00201	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00207	75 0a		 jne	 SHORT $LN22@z900_cmpsc
  00209	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv180[rsp], 1
  00211	eb 08		 jmp	 SHORT $LN23@z900_cmpsc
$LN22@z900_cmpsc:
  00213	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv180[rsp], 0
$LN23@z900_cmpsc:
  0021b	83 7c 24 40 00	 cmp	 DWORD PTR tv180[rsp], 0
  00220	74 0a		 je	 SHORT $LN26@z900_cmpsc
  00222	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv188[rsp], 1
  0022a	eb 08		 jmp	 SHORT $LN27@z900_cmpsc
$LN26@z900_cmpsc:
  0022c	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv188[rsp], 0
$LN27@z900_cmpsc:
  00234	83 7c 24 44 00	 cmp	 DWORD PTR tv188[rsp], 0
  00239	74 64		 je	 SHORT $LN7@z900_cmpsc

; 534  :             {
; 535  :                 pMEMBLK->maddr[1] = MADDR

  0023b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00243	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00247	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0024d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00255	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00259	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0025d	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00265	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0026d	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00270	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00278	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  0027c	ba 01 00 00 00	 mov	 edx, 1
  00281	48 8b c8	 mov	 rcx, rax
  00284	e8 00 00 00 00	 call	 z900_maddr_l
  00289	b9 08 00 00 00	 mov	 ecx, 8
  0028e	48 6b c9 01	 imul	 rcx, rcx, 1
  00292	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0029a	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN7@z900_cmpsc:

; 536  :                 (
; 537  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 538  :                     pMEMBLK->arn,
; 539  :                     pMEMBLK->regs,
; 540  :                     ACCTYPE_READ,   // (fetch)
; 541  :                     pMEMBLK->pkey
; 542  :                 );
; 543  :             }
; 544  :             memcpy(  dst,         &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], len1 );

  0029f	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  002a4	b9 08 00 00 00	 mov	 ecx, 8
  002a9	48 6b c9 00	 imul	 rcx, rcx, 0
  002ad	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  002b5	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  002bc	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  002c4	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  002c9	48 03 ca	 add	 rcx, rdx
  002cc	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dst$[rsp]
  002d1	48 8b f1	 mov	 rsi, rcx
  002d4	8b c8		 mov	 ecx, eax
  002d6	f3 a4		 rep movsb

; 545  :             memcpy( (dst + len1), &pMEMBLK->maddr[1][0],        len+1     -      len1 );

  002d8	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  002dd	ff c0		 inc	 eax
  002df	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  002e4	2b c1		 sub	 eax, ecx
  002e6	48 98		 cdqe
  002e8	b9 08 00 00 00	 mov	 ecx, 8
  002ed	48 6b c9 01	 imul	 rcx, rcx, 1
  002f1	ba 01 00 00 00	 mov	 edx, 1
  002f6	48 6b d2 00	 imul	 rdx, rdx, 0
  002fa	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  00302	48 03 54 0f 10	 add	 rdx, QWORD PTR [rdi+rcx+16]
  00307	48 8b ca	 mov	 rcx, rdx
  0030a	0f b7 54 24 30	 movzx	 edx, WORD PTR len1$1[rsp]
  0030f	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dst$[rsp]
  00314	48 03 fa	 add	 rdi, rdx
  00317	48 8b d7	 mov	 rdx, rdi
  0031a	48 8b fa	 mov	 rdi, rdx
  0031d	48 8b f1	 mov	 rsi, rcx
  00320	48 8b c8	 mov	 rcx, rax
  00323	f3 a4		 rep movsb
$LN6@z900_cmpsc:

; 546  :         }
; 547  :     }

  00325	e9 ed 00 00 00	 jmp	 $LN4@z900_cmpsc
$LN3@z900_cmpsc:

; 548  :     else
; 549  :     {
; 550  :         if (unlikely(!pMEMBLK->maddr[1]))

  0032a	b8 08 00 00 00	 mov	 eax, 8
  0032f	48 6b c0 01	 imul	 rax, rax, 1
  00333	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0033b	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00341	75 0a		 jne	 SHORT $LN28@z900_cmpsc
  00343	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv238[rsp], 1
  0034b	eb 08		 jmp	 SHORT $LN29@z900_cmpsc
$LN28@z900_cmpsc:
  0034d	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv238[rsp], 0
$LN29@z900_cmpsc:
  00355	83 7c 24 48 00	 cmp	 DWORD PTR tv238[rsp], 0
  0035a	74 0a		 je	 SHORT $LN32@z900_cmpsc
  0035c	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv246[rsp], 1
  00364	eb 08		 jmp	 SHORT $LN33@z900_cmpsc
$LN32@z900_cmpsc:
  00366	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv246[rsp], 0
$LN33@z900_cmpsc:
  0036e	83 7c 24 4c 00	 cmp	 DWORD PTR tv246[rsp], 0
  00373	74 64		 je	 SHORT $LN8@z900_cmpsc

; 551  :         {
; 552  :             pMEMBLK->maddr[1] = MADDR

  00375	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0037d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00381	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00387	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0038f	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00393	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00397	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0039f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003a7	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  003aa	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003b2	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  003b6	ba 01 00 00 00	 mov	 edx, 1
  003bb	48 8b c8	 mov	 rcx, rax
  003be	e8 00 00 00 00	 call	 z900_maddr_l
  003c3	b9 08 00 00 00	 mov	 ecx, 8
  003c8	48 6b c9 01	 imul	 rcx, rcx, 1
  003cc	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  003d4	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@z900_cmpsc:

; 553  :             (
; 554  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 555  :                 pMEMBLK->arn,
; 556  :                 pMEMBLK->regs,
; 557  :                 ACCTYPE_READ,   // (fetch)
; 558  :                 pMEMBLK->pkey
; 559  :             );
; 560  :         }
; 561  :         memcpy( dst, &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK], len+1 );

  003d9	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  003de	ff c0		 inc	 eax
  003e0	48 98		 cdqe
  003e2	b9 08 00 00 00	 mov	 ecx, 8
  003e7	48 6b c9 01	 imul	 rcx, rcx, 1
  003eb	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  003f3	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  003fa	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  00402	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  00407	48 03 ca	 add	 rcx, rdx
  0040a	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dst$[rsp]
  0040f	48 8b f1	 mov	 rsi, rcx
  00412	48 8b c8	 mov	 rcx, rax
  00415	f3 a4		 rep movsb
$LN4@z900_cmpsc:

; 562  :     }
; 563  : }

  00417	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0041b	5f		 pop	 rdi
  0041c	5e		 pop	 rsi
  0041d	c3		 ret	 0
z900_cmpsc_vfetchc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv82 = 52
tv143 = 56
tv153 = 60
tv157 = 64
tv163 = 68
tv187 = 72
tv195 = 76
tv214 = 80
tv220 = 84
tv247 = 88
tv255 = 92
value$2 = 96
addr$ = 144
pMEMBLK$ = 152
z900_cmpsc_vfetch8 PROC

; 372  : {

$LN48:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 373  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00010	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00022	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  0002a	48 23 c8	 and	 rcx, rax
  0002d	48 8b c1	 mov	 rax, rcx
  00030	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR addr$[rsp], rax

; 374  : 
; 375  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00049	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0004f	74 20		 je	 SHORT $LN12@z900_cmpsc
  00051	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00059	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005d	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR addr$[rsp], rax
  00065	72 0a		 jb	 SHORT $LN12@z900_cmpsc
  00067	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  0006f	eb 08		 jmp	 SHORT $LN15@z900_cmpsc
$LN12@z900_cmpsc:
  00071	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN15@z900_cmpsc:
  00079	83 7c 24 34 00	 cmp	 DWORD PTR tv82[rsp], 0
  0007e	0f 84 8f 00 00
	00		 je	 $LN2@z900_cmpsc

; 376  :     {
; 377  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00084	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0008c	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  00092	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0009a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 378  :         pMEMBLK->maddr[1] = 0;

  0009e	b8 08 00 00 00	 mov	 eax, 8
  000a3	48 6b c0 01	 imul	 rax, rax, 1
  000a7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000af	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 379  :         pMEMBLK->maddr[0] = MADDR

  000b8	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c0	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000c4	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000c8	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000d0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000d8	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000db	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e3	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000e7	ba 01 00 00 00	 mov	 edx, 1
  000ec	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000f4	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000f8	e8 00 00 00 00	 call	 z900_maddr_l
  000fd	b9 08 00 00 00	 mov	 ecx, 8
  00102	48 6b c9 00	 imul	 rcx, rcx, 0
  00106	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0010e	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@z900_cmpsc:

; 380  :         (
; 381  :             pMEMBLK->vpagebeg,
; 382  :             pMEMBLK->arn,
; 383  :             pMEMBLK->regs,
; 384  :             ACCTYPE_READ,   // (fetch)
; 385  :             pMEMBLK->pkey
; 386  :         );
; 387  :     }
; 388  :     if (NOCROSSPAGE( addr, 8 ))

  00113	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0011b	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00121	3d f7 0f 00 00	 cmp	 eax, 4087		; 00000ff7H
  00126	7f 0a		 jg	 SHORT $LN18@z900_cmpsc
  00128	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00130	eb 08		 jmp	 SHORT $LN19@z900_cmpsc
$LN18@z900_cmpsc:
  00132	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN19@z900_cmpsc:
  0013a	83 7c 24 38 00	 cmp	 DWORD PTR tv143[rsp], 0
  0013f	0f 84 58 02 00
	00		 je	 $LN3@z900_cmpsc

; 389  :     {
; 390  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  00145	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0014d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00151	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00157	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR addr$[rsp], rax
  0015f	73 0a		 jae	 SHORT $LN22@z900_cmpsc
  00161	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv153[rsp], 1
  00169	eb 08		 jmp	 SHORT $LN23@z900_cmpsc
$LN22@z900_cmpsc:
  0016b	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv153[rsp], 0
$LN23@z900_cmpsc:
  00173	83 7c 24 3c 00	 cmp	 DWORD PTR tv153[rsp], 0
  00178	0f 84 b8 00 00
	00		 je	 $LN5@z900_cmpsc

; 391  :         {
; 392  :             if (U64_ALIGNED( addr ))

  0017e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00186	48 83 e0 07	 and	 rax, 7
  0018a	48 85 c0	 test	 rax, rax
  0018d	75 0a		 jne	 SHORT $LN24@z900_cmpsc
  0018f	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv157[rsp], 1
  00197	eb 08		 jmp	 SHORT $LN25@z900_cmpsc
$LN24@z900_cmpsc:
  00199	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN25@z900_cmpsc:
  001a1	83 7c 24 40 00	 cmp	 DWORD PTR tv157[rsp], 0
  001a6	74 0a		 je	 SHORT $LN28@z900_cmpsc
  001a8	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv163[rsp], 1
  001b0	eb 08		 jmp	 SHORT $LN29@z900_cmpsc
$LN28@z900_cmpsc:
  001b2	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv163[rsp], 0
$LN29@z900_cmpsc:
  001ba	83 7c 24 44 00	 cmp	 DWORD PTR tv163[rsp], 0
  001bf	74 33		 je	 SHORT $LN7@z900_cmpsc

; 393  :                 return CSWAP64( *(U64*) &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001c1	b8 08 00 00 00	 mov	 eax, 8
  001c6	48 6b c0 00	 imul	 rax, rax, 0
  001ca	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  001d2	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  001d9	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001e1	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001e6	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  001ea	e8 00 00 00 00	 call	 _byteswap_uint64
  001ef	e9 03 03 00 00	 jmp	 $LN1@z900_cmpsc
$LN7@z900_cmpsc:

; 394  :             return fetch_dw(            &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001f4	b8 08 00 00 00	 mov	 eax, 8
  001f9	48 6b c0 00	 imul	 rax, rax, 0
  001fd	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  00205	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  0020c	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00214	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00219	48 03 c1	 add	 rax, rcx
  0021c	48 8b c8	 mov	 rcx, rax
  0021f	e8 00 00 00 00	 call	 fetch_dw_noswap
  00224	48 8b c8	 mov	 rcx, rax
  00227	e8 00 00 00 00	 call	 _byteswap_uint64
  0022c	e9 c6 02 00 00	 jmp	 $LN1@z900_cmpsc

; 395  :         }

  00231	e9 62 01 00 00	 jmp	 $LN6@z900_cmpsc
$LN5@z900_cmpsc:

; 396  :         else
; 397  :         {
; 398  :             if (unlikely(!pMEMBLK->maddr[1]))

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 01	 imul	 rax, rax, 1
  0023f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00247	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0024d	75 0a		 jne	 SHORT $LN30@z900_cmpsc
  0024f	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv187[rsp], 1
  00257	eb 08		 jmp	 SHORT $LN31@z900_cmpsc
$LN30@z900_cmpsc:
  00259	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv187[rsp], 0
$LN31@z900_cmpsc:
  00261	83 7c 24 48 00	 cmp	 DWORD PTR tv187[rsp], 0
  00266	74 0a		 je	 SHORT $LN34@z900_cmpsc
  00268	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv195[rsp], 1
  00270	eb 08		 jmp	 SHORT $LN35@z900_cmpsc
$LN34@z900_cmpsc:
  00272	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv195[rsp], 0
$LN35@z900_cmpsc:
  0027a	83 7c 24 4c 00	 cmp	 DWORD PTR tv195[rsp], 0
  0027f	74 64		 je	 SHORT $LN8@z900_cmpsc

; 399  :             {
; 400  :                 pMEMBLK->maddr[1] = MADDR

  00281	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00289	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0028d	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00293	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0029b	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0029f	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  002a3	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  002ab	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002b3	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  002b6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002be	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002c2	ba 01 00 00 00	 mov	 edx, 1
  002c7	48 8b c8	 mov	 rcx, rax
  002ca	e8 00 00 00 00	 call	 z900_maddr_l
  002cf	b9 08 00 00 00	 mov	 ecx, 8
  002d4	48 6b c9 01	 imul	 rcx, rcx, 1
  002d8	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002e0	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@z900_cmpsc:

; 401  :                 (
; 402  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 403  :                     pMEMBLK->arn,
; 404  :                     pMEMBLK->regs,
; 405  :                     ACCTYPE_READ,   // (fetch)
; 406  :                     pMEMBLK->pkey
; 407  :                 );
; 408  :             }
; 409  :             if (U64_ALIGNED( addr ))

  002e5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  002ed	48 83 e0 07	 and	 rax, 7
  002f1	48 85 c0	 test	 rax, rax
  002f4	75 0a		 jne	 SHORT $LN36@z900_cmpsc
  002f6	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv214[rsp], 1
  002fe	eb 08		 jmp	 SHORT $LN37@z900_cmpsc
$LN36@z900_cmpsc:
  00300	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv214[rsp], 0
$LN37@z900_cmpsc:
  00308	83 7c 24 50 00	 cmp	 DWORD PTR tv214[rsp], 0
  0030d	74 0a		 je	 SHORT $LN40@z900_cmpsc
  0030f	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv220[rsp], 1
  00317	eb 08		 jmp	 SHORT $LN41@z900_cmpsc
$LN40@z900_cmpsc:
  00319	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv220[rsp], 0
$LN41@z900_cmpsc:
  00321	83 7c 24 54 00	 cmp	 DWORD PTR tv220[rsp], 0
  00326	74 33		 je	 SHORT $LN9@z900_cmpsc

; 410  :                 return CSWAP64( *(U64*) &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  00328	b8 08 00 00 00	 mov	 eax, 8
  0032d	48 6b c0 01	 imul	 rax, rax, 1
  00331	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  00339	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  00340	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00348	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0034d	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00351	e8 00 00 00 00	 call	 _byteswap_uint64
  00356	e9 9c 01 00 00	 jmp	 $LN1@z900_cmpsc
$LN9@z900_cmpsc:

; 411  :             return fetch_dw(            &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  0035b	b8 08 00 00 00	 mov	 eax, 8
  00360	48 6b c0 01	 imul	 rax, rax, 1
  00364	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  0036c	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  00373	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0037b	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00380	48 03 c1	 add	 rax, rcx
  00383	48 8b c8	 mov	 rcx, rax
  00386	e8 00 00 00 00	 call	 fetch_dw_noswap
  0038b	48 8b c8	 mov	 rcx, rax
  0038e	e8 00 00 00 00	 call	 _byteswap_uint64
  00393	e9 5f 01 00 00	 jmp	 $LN1@z900_cmpsc
$LN6@z900_cmpsc:

; 412  :         }
; 413  :     }

  00398	e9 5a 01 00 00	 jmp	 $LN4@z900_cmpsc
$LN3@z900_cmpsc:

; 414  :     else
; 415  :     {
; 416  :         U64 value;
; 417  :         U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  0039d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  003a5	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  003ab	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  003b0	48 2b c8	 sub	 rcx, rax
  003b3	48 8b c1	 mov	 rax, rcx
  003b6	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 418  :         if (likely(!pMEMBLK->maddr[1]))

  003bb	b8 08 00 00 00	 mov	 eax, 8
  003c0	48 6b c0 01	 imul	 rax, rax, 1
  003c4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003cc	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  003d2	75 0a		 jne	 SHORT $LN42@z900_cmpsc
  003d4	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv247[rsp], 1
  003dc	eb 08		 jmp	 SHORT $LN43@z900_cmpsc
$LN42@z900_cmpsc:
  003de	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv247[rsp], 0
$LN43@z900_cmpsc:
  003e6	83 7c 24 58 00	 cmp	 DWORD PTR tv247[rsp], 0
  003eb	74 0a		 je	 SHORT $LN46@z900_cmpsc
  003ed	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv255[rsp], 1
  003f5	eb 08		 jmp	 SHORT $LN47@z900_cmpsc
$LN46@z900_cmpsc:
  003f7	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv255[rsp], 0
$LN47@z900_cmpsc:
  003ff	83 7c 24 5c 00	 cmp	 DWORD PTR tv255[rsp], 0
  00404	74 64		 je	 SHORT $LN10@z900_cmpsc

; 419  :         {
; 420  :             pMEMBLK->maddr[1] = MADDR

  00406	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0040e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00412	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00418	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00420	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00424	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00428	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00430	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00438	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0043b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00443	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00447	ba 01 00 00 00	 mov	 edx, 1
  0044c	48 8b c8	 mov	 rcx, rax
  0044f	e8 00 00 00 00	 call	 z900_maddr_l
  00454	b9 08 00 00 00	 mov	 ecx, 8
  00459	48 6b c9 01	 imul	 rcx, rcx, 1
  0045d	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00465	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN10@z900_cmpsc:

; 421  :             (
; 422  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 423  :                 pMEMBLK->arn,
; 424  :                 pMEMBLK->regs,
; 425  :                 ACCTYPE_READ,   // (fetch)
; 426  :                 pMEMBLK->pkey
; 427  :             );
; 428  :         }
; 429  :         memcpy( (U8*)&value,        &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],     len1 );

  0046a	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  0046f	b9 08 00 00 00	 mov	 ecx, 8
  00474	48 6b c9 00	 imul	 rcx, rcx, 0
  00478	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  00480	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  00487	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0048f	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00494	48 03 ca	 add	 rcx, rdx
  00497	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$2[rsp]
  0049c	48 8b fa	 mov	 rdi, rdx
  0049f	48 8b f1	 mov	 rsi, rcx
  004a2	8b c8		 mov	 ecx, eax
  004a4	f3 a4		 rep movsb

; 430  :         memcpy( (U8*)&value + len1, &pMEMBLK->maddr[1][0],                         8 - len1 );

  004a6	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  004ab	b9 08 00 00 00	 mov	 ecx, 8
  004b0	2b c8		 sub	 ecx, eax
  004b2	8b c1		 mov	 eax, ecx
  004b4	48 98		 cdqe
  004b6	b9 08 00 00 00	 mov	 ecx, 8
  004bb	48 6b c9 01	 imul	 rcx, rcx, 1
  004bf	ba 01 00 00 00	 mov	 edx, 1
  004c4	48 6b d2 00	 imul	 rdx, rdx, 0
  004c8	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  004d0	48 03 54 0f 10	 add	 rdx, QWORD PTR [rdi+rcx+16]
  004d5	48 8b ca	 mov	 rcx, rdx
  004d8	0f b7 54 24 30	 movzx	 edx, WORD PTR len1$1[rsp]
  004dd	48 8d 54 14 60	 lea	 rdx, QWORD PTR value$2[rsp+rdx]
  004e2	48 8b fa	 mov	 rdi, rdx
  004e5	48 8b f1	 mov	 rsi, rcx
  004e8	48 8b c8	 mov	 rcx, rax
  004eb	f3 a4		 rep movsb

; 431  :         return CSWAP64( value );

  004ed	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$2[rsp]
  004f2	e8 00 00 00 00	 call	 _byteswap_uint64
$LN4@z900_cmpsc:
$LN1@z900_cmpsc:

; 432  :     }
; 433  : }

  004f7	48 83 c4 78	 add	 rsp, 120		; 00000078H
  004fb	5f		 pop	 rdi
  004fc	5e		 pop	 rsi
  004fd	c3		 ret	 0
z900_cmpsc_vfetch8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv82 = 52
tv143 = 56
tv153 = 60
tv157 = 64
tv163 = 68
tv187 = 72
tv195 = 76
tv214 = 80
tv220 = 84
tv247 = 88
tv255 = 92
value$2 = 96
addr$ = 144
pMEMBLK$ = 152
z900_cmpsc_vfetch4 PROC

; 237  : {

$LN48:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 238  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00010	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00022	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  0002a	48 23 c8	 and	 rcx, rax
  0002d	48 8b c1	 mov	 rax, rcx
  00030	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR addr$[rsp], rax

; 239  : 
; 240  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00038	b8 08 00 00 00	 mov	 eax, 8
  0003d	48 6b c0 00	 imul	 rax, rax, 0
  00041	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00049	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0004f	74 20		 je	 SHORT $LN12@z900_cmpsc
  00051	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00059	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005d	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR addr$[rsp], rax
  00065	72 0a		 jb	 SHORT $LN12@z900_cmpsc
  00067	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  0006f	eb 08		 jmp	 SHORT $LN15@z900_cmpsc
$LN12@z900_cmpsc:
  00071	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN15@z900_cmpsc:
  00079	83 7c 24 34 00	 cmp	 DWORD PTR tv82[rsp], 0
  0007e	0f 84 8f 00 00
	00		 je	 $LN2@z900_cmpsc

; 241  :     {
; 242  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00084	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0008c	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  00092	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0009a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 243  :         pMEMBLK->maddr[1] = 0;

  0009e	b8 08 00 00 00	 mov	 eax, 8
  000a3	48 6b c0 01	 imul	 rax, rax, 1
  000a7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000af	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 244  :         pMEMBLK->maddr[0] = MADDR

  000b8	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c0	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000c4	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000c8	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000d0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000d8	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000db	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e3	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000e7	ba 01 00 00 00	 mov	 edx, 1
  000ec	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000f4	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000f8	e8 00 00 00 00	 call	 z900_maddr_l
  000fd	b9 08 00 00 00	 mov	 ecx, 8
  00102	48 6b c9 00	 imul	 rcx, rcx, 0
  00106	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0010e	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@z900_cmpsc:

; 245  :         (
; 246  :             pMEMBLK->vpagebeg,
; 247  :             pMEMBLK->arn,
; 248  :             pMEMBLK->regs,
; 249  :             ACCTYPE_READ,   // (fetch)
; 250  :             pMEMBLK->pkey
; 251  :         );
; 252  :     }
; 253  :     if (NOCROSSPAGE( addr, 4 ))

  00113	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  0011b	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  00121	3d fb 0f 00 00	 cmp	 eax, 4091		; 00000ffbH
  00126	7f 0a		 jg	 SHORT $LN18@z900_cmpsc
  00128	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00130	eb 08		 jmp	 SHORT $LN19@z900_cmpsc
$LN18@z900_cmpsc:
  00132	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN19@z900_cmpsc:
  0013a	83 7c 24 38 00	 cmp	 DWORD PTR tv143[rsp], 0
  0013f	0f 84 54 02 00
	00		 je	 $LN3@z900_cmpsc

; 254  :     {
; 255  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  00145	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0014d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00151	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00157	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR addr$[rsp], rax
  0015f	73 0a		 jae	 SHORT $LN22@z900_cmpsc
  00161	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv153[rsp], 1
  00169	eb 08		 jmp	 SHORT $LN23@z900_cmpsc
$LN22@z900_cmpsc:
  0016b	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv153[rsp], 0
$LN23@z900_cmpsc:
  00173	83 7c 24 3c 00	 cmp	 DWORD PTR tv153[rsp], 0
  00178	0f 84 b6 00 00
	00		 je	 $LN5@z900_cmpsc

; 256  :         {
; 257  :             if (U32_ALIGNED( addr ))

  0017e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  00186	48 83 e0 03	 and	 rax, 3
  0018a	48 85 c0	 test	 rax, rax
  0018d	75 0a		 jne	 SHORT $LN24@z900_cmpsc
  0018f	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv157[rsp], 1
  00197	eb 08		 jmp	 SHORT $LN25@z900_cmpsc
$LN24@z900_cmpsc:
  00199	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
$LN25@z900_cmpsc:
  001a1	83 7c 24 40 00	 cmp	 DWORD PTR tv157[rsp], 0
  001a6	74 0a		 je	 SHORT $LN28@z900_cmpsc
  001a8	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv163[rsp], 1
  001b0	eb 08		 jmp	 SHORT $LN29@z900_cmpsc
$LN28@z900_cmpsc:
  001b2	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv163[rsp], 0
$LN29@z900_cmpsc:
  001ba	83 7c 24 44 00	 cmp	 DWORD PTR tv163[rsp], 0
  001bf	74 32		 je	 SHORT $LN7@z900_cmpsc

; 258  :                 return CSWAP32( *(U32*) &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001c1	b8 08 00 00 00	 mov	 eax, 8
  001c6	48 6b c0 00	 imul	 rax, rax, 0
  001ca	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  001d2	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  001d9	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001e1	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001e6	8b 0c 08	 mov	 ecx, DWORD PTR [rax+rcx]
  001e9	e8 00 00 00 00	 call	 _byteswap_ulong
  001ee	e9 ff 02 00 00	 jmp	 $LN1@z900_cmpsc
$LN7@z900_cmpsc:

; 259  :             return fetch_fw(            &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001f3	b8 08 00 00 00	 mov	 eax, 8
  001f8	48 6b c0 00	 imul	 rax, rax, 0
  001fc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  00204	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  0020b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00213	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00218	48 03 c1	 add	 rax, rcx
  0021b	48 8b c8	 mov	 rcx, rax
  0021e	e8 00 00 00 00	 call	 fetch_fw_noswap
  00223	8b c8		 mov	 ecx, eax
  00225	e8 00 00 00 00	 call	 _byteswap_ulong
  0022a	e9 c3 02 00 00	 jmp	 $LN1@z900_cmpsc

; 260  :         }

  0022f	e9 60 01 00 00	 jmp	 $LN6@z900_cmpsc
$LN5@z900_cmpsc:

; 261  :         else
; 262  :         {
; 263  :             if (unlikely(!pMEMBLK->maddr[1]))

  00234	b8 08 00 00 00	 mov	 eax, 8
  00239	48 6b c0 01	 imul	 rax, rax, 1
  0023d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00245	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0024b	75 0a		 jne	 SHORT $LN30@z900_cmpsc
  0024d	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv187[rsp], 1
  00255	eb 08		 jmp	 SHORT $LN31@z900_cmpsc
$LN30@z900_cmpsc:
  00257	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv187[rsp], 0
$LN31@z900_cmpsc:
  0025f	83 7c 24 48 00	 cmp	 DWORD PTR tv187[rsp], 0
  00264	74 0a		 je	 SHORT $LN34@z900_cmpsc
  00266	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv195[rsp], 1
  0026e	eb 08		 jmp	 SHORT $LN35@z900_cmpsc
$LN34@z900_cmpsc:
  00270	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv195[rsp], 0
$LN35@z900_cmpsc:
  00278	83 7c 24 4c 00	 cmp	 DWORD PTR tv195[rsp], 0
  0027d	74 64		 je	 SHORT $LN8@z900_cmpsc

; 264  :             {
; 265  :                 pMEMBLK->maddr[1] = MADDR

  0027f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00287	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0028b	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00291	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00299	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0029d	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  002a1	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  002a9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002b1	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  002b4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002bc	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002c0	ba 01 00 00 00	 mov	 edx, 1
  002c5	48 8b c8	 mov	 rcx, rax
  002c8	e8 00 00 00 00	 call	 z900_maddr_l
  002cd	b9 08 00 00 00	 mov	 ecx, 8
  002d2	48 6b c9 01	 imul	 rcx, rcx, 1
  002d6	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002de	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@z900_cmpsc:

; 266  :                 (
; 267  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 268  :                     pMEMBLK->arn,
; 269  :                     pMEMBLK->regs,
; 270  :                     ACCTYPE_READ,   // (fetch)
; 271  :                     pMEMBLK->pkey
; 272  :                 );
; 273  :             }
; 274  :             if (U32_ALIGNED( addr ))

  002e3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  002eb	48 83 e0 03	 and	 rax, 3
  002ef	48 85 c0	 test	 rax, rax
  002f2	75 0a		 jne	 SHORT $LN36@z900_cmpsc
  002f4	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv214[rsp], 1
  002fc	eb 08		 jmp	 SHORT $LN37@z900_cmpsc
$LN36@z900_cmpsc:
  002fe	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv214[rsp], 0
$LN37@z900_cmpsc:
  00306	83 7c 24 50 00	 cmp	 DWORD PTR tv214[rsp], 0
  0030b	74 0a		 je	 SHORT $LN40@z900_cmpsc
  0030d	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv220[rsp], 1
  00315	eb 08		 jmp	 SHORT $LN41@z900_cmpsc
$LN40@z900_cmpsc:
  00317	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv220[rsp], 0
$LN41@z900_cmpsc:
  0031f	83 7c 24 54 00	 cmp	 DWORD PTR tv220[rsp], 0
  00324	74 32		 je	 SHORT $LN9@z900_cmpsc

; 275  :                 return CSWAP32( *(U32*) &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  00326	b8 08 00 00 00	 mov	 eax, 8
  0032b	48 6b c0 01	 imul	 rax, rax, 1
  0032f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  00337	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  0033e	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00346	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0034b	8b 0c 08	 mov	 ecx, DWORD PTR [rax+rcx]
  0034e	e8 00 00 00 00	 call	 _byteswap_ulong
  00353	e9 9a 01 00 00	 jmp	 $LN1@z900_cmpsc
$LN9@z900_cmpsc:

; 276  :             return fetch_fw(            &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  00358	b8 08 00 00 00	 mov	 eax, 8
  0035d	48 6b c0 01	 imul	 rax, rax, 1
  00361	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR addr$[rsp]
  00369	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  00370	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00378	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0037d	48 03 c1	 add	 rax, rcx
  00380	48 8b c8	 mov	 rcx, rax
  00383	e8 00 00 00 00	 call	 fetch_fw_noswap
  00388	8b c8		 mov	 ecx, eax
  0038a	e8 00 00 00 00	 call	 _byteswap_ulong
  0038f	e9 5e 01 00 00	 jmp	 $LN1@z900_cmpsc
$LN6@z900_cmpsc:

; 277  :         }
; 278  :     }

  00394	e9 59 01 00 00	 jmp	 $LN4@z900_cmpsc
$LN3@z900_cmpsc:

; 279  :     else
; 280  :     {
; 281  :         U32 value;
; 282  :         U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  00399	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR addr$[rsp]
  003a1	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  003a7	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  003ac	48 2b c8	 sub	 rcx, rax
  003af	48 8b c1	 mov	 rax, rcx
  003b2	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 283  :         if (likely(!pMEMBLK->maddr[1]))

  003b7	b8 08 00 00 00	 mov	 eax, 8
  003bc	48 6b c0 01	 imul	 rax, rax, 1
  003c0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003c8	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  003ce	75 0a		 jne	 SHORT $LN42@z900_cmpsc
  003d0	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv247[rsp], 1
  003d8	eb 08		 jmp	 SHORT $LN43@z900_cmpsc
$LN42@z900_cmpsc:
  003da	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv247[rsp], 0
$LN43@z900_cmpsc:
  003e2	83 7c 24 58 00	 cmp	 DWORD PTR tv247[rsp], 0
  003e7	74 0a		 je	 SHORT $LN46@z900_cmpsc
  003e9	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv255[rsp], 1
  003f1	eb 08		 jmp	 SHORT $LN47@z900_cmpsc
$LN46@z900_cmpsc:
  003f3	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv255[rsp], 0
$LN47@z900_cmpsc:
  003fb	83 7c 24 5c 00	 cmp	 DWORD PTR tv255[rsp], 0
  00400	74 64		 je	 SHORT $LN10@z900_cmpsc

; 284  :         {
; 285  :             pMEMBLK->maddr[1] = MADDR

  00402	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0040a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0040e	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00414	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0041c	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00420	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00424	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0042c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00434	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00437	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0043f	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00443	ba 01 00 00 00	 mov	 edx, 1
  00448	48 8b c8	 mov	 rcx, rax
  0044b	e8 00 00 00 00	 call	 z900_maddr_l
  00450	b9 08 00 00 00	 mov	 ecx, 8
  00455	48 6b c9 01	 imul	 rcx, rcx, 1
  00459	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00461	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN10@z900_cmpsc:

; 286  :             (
; 287  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 288  :                 pMEMBLK->arn,
; 289  :                 pMEMBLK->regs,
; 290  :                 ACCTYPE_READ,   // (fetch)
; 291  :                 pMEMBLK->pkey
; 292  :             );
; 293  :         }
; 294  :         memcpy( (U8*)&value,        &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],     len1 );

  00466	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  0046b	b9 08 00 00 00	 mov	 ecx, 8
  00470	48 6b c9 00	 imul	 rcx, rcx, 0
  00474	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR addr$[rsp]
  0047c	48 81 e2 ff 0f
	00 00		 and	 rdx, 4095		; 00000fffH
  00483	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0048b	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00490	48 03 ca	 add	 rcx, rdx
  00493	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$2[rsp]
  00498	48 8b fa	 mov	 rdi, rdx
  0049b	48 8b f1	 mov	 rsi, rcx
  0049e	8b c8		 mov	 ecx, eax
  004a0	f3 a4		 rep movsb

; 295  :         memcpy( (U8*)&value + len1, &pMEMBLK->maddr[1][0],                         4 - len1 );

  004a2	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  004a7	b9 04 00 00 00	 mov	 ecx, 4
  004ac	2b c8		 sub	 ecx, eax
  004ae	8b c1		 mov	 eax, ecx
  004b0	48 98		 cdqe
  004b2	b9 08 00 00 00	 mov	 ecx, 8
  004b7	48 6b c9 01	 imul	 rcx, rcx, 1
  004bb	ba 01 00 00 00	 mov	 edx, 1
  004c0	48 6b d2 00	 imul	 rdx, rdx, 0
  004c4	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  004cc	48 03 54 0f 10	 add	 rdx, QWORD PTR [rdi+rcx+16]
  004d1	48 8b ca	 mov	 rcx, rdx
  004d4	0f b7 54 24 30	 movzx	 edx, WORD PTR len1$1[rsp]
  004d9	48 8d 54 14 60	 lea	 rdx, QWORD PTR value$2[rsp+rdx]
  004de	48 8b fa	 mov	 rdi, rdx
  004e1	48 8b f1	 mov	 rsi, rcx
  004e4	48 8b c8	 mov	 rcx, rax
  004e7	f3 a4		 rep movsb

; 296  :         return CSWAP32( value );

  004e9	8b 4c 24 60	 mov	 ecx, DWORD PTR value$2[rsp]
  004ed	e8 00 00 00 00	 call	 _byteswap_ulong
$LN4@z900_cmpsc:
$LN1@z900_cmpsc:

; 297  :     }
; 298  : }

  004f2	48 83 c4 78	 add	 rsp, 120		; 00000078H
  004f6	5f		 pop	 rdi
  004f7	5e		 pop	 rsi
  004f8	c3		 ret	 0
z900_cmpsc_vfetch4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
tv82 = 48
tv141 = 52
tv151 = 56
tv155 = 60
tv161 = 64
tv185 = 68
tv193 = 72
tv212 = 76
tv218 = 80
tv242 = 84
tv250 = 88
addr$ = 112
pMEMBLK$ = 120
z900_cmpsc_vfetch2 PROC

; 107  : {

$LN48:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 108  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0000e	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0001d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR addr$[rsp]
  00022	48 23 c8	 and	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	48 89 44 24 70	 mov	 QWORD PTR addr$[rsp], rax

; 109  : 
; 110  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0002d	b8 08 00 00 00	 mov	 eax, 8
  00032	48 6b c0 00	 imul	 rax, rax, 0
  00036	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0003b	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00041	74 1a		 je	 SHORT $LN12@z900_cmpsc
  00043	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00048	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004c	48 39 44 24 70	 cmp	 QWORD PTR addr$[rsp], rax
  00051	72 0a		 jb	 SHORT $LN12@z900_cmpsc
  00053	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  0005b	eb 08		 jmp	 SHORT $LN15@z900_cmpsc
$LN12@z900_cmpsc:
  0005d	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN15@z900_cmpsc:
  00065	83 7c 24 30 00	 cmp	 DWORD PTR tv82[rsp], 0
  0006a	74 77		 je	 SHORT $LN2@z900_cmpsc

; 111  :     {
; 112  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  0006c	48 8b 44 24 70	 mov	 rax, QWORD PTR addr$[rsp]
  00071	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  00077	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0007c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 113  :         pMEMBLK->maddr[1] = 0;

  00080	b8 08 00 00 00	 mov	 eax, 8
  00085	48 6b c0 01	 imul	 rax, rax, 1
  00089	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0008e	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 114  :         pMEMBLK->maddr[0] = MADDR

  00097	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0009c	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000a0	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000a4	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000ac	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b1	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000b4	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b9	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000bd	ba 01 00 00 00	 mov	 edx, 1
  000c2	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c7	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000cb	e8 00 00 00 00	 call	 z900_maddr_l
  000d0	b9 08 00 00 00	 mov	 ecx, 8
  000d5	48 6b c9 00	 imul	 rcx, rcx, 0
  000d9	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000de	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@z900_cmpsc:

; 115  :         (
; 116  :             pMEMBLK->vpagebeg,
; 117  :             pMEMBLK->arn,
; 118  :             pMEMBLK->regs,
; 119  :             ACCTYPE_READ,   // (fetch)
; 120  :             pMEMBLK->pkey
; 121  :         );
; 122  :     }
; 123  :     if (!LASTBYTEOFPAGE( addr ))

  000e3	48 8b 44 24 70	 mov	 rax, QWORD PTR addr$[rsp]
  000e8	48 25 ff 0f 00
	00		 and	 rax, 4095		; 00000fffH
  000ee	48 3d ff 0f 00
	00		 cmp	 rax, 4095		; 00000fffH
  000f4	75 0a		 jne	 SHORT $LN18@z900_cmpsc
  000f6	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv141[rsp], 1
  000fe	eb 08		 jmp	 SHORT $LN19@z900_cmpsc
$LN18@z900_cmpsc:
  00100	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv141[rsp], 0
$LN19@z900_cmpsc:
  00108	83 7c 24 34 00	 cmp	 DWORD PTR tv141[rsp], 0
  0010d	0f 85 22 02 00
	00		 jne	 $LN3@z900_cmpsc

; 124  :     {
; 125  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  00113	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00118	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0011c	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00122	48 39 44 24 70	 cmp	 QWORD PTR addr$[rsp], rax
  00127	73 0a		 jae	 SHORT $LN22@z900_cmpsc
  00129	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv151[rsp], 1
  00131	eb 08		 jmp	 SHORT $LN23@z900_cmpsc
$LN22@z900_cmpsc:
  00133	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv151[rsp], 0
$LN23@z900_cmpsc:
  0013b	83 7c 24 38 00	 cmp	 DWORD PTR tv151[rsp], 0
  00140	0f 84 a9 00 00
	00		 je	 $LN5@z900_cmpsc

; 126  :         {
; 127  :             if (U16_ALIGNED( addr ))

  00146	48 8b 44 24 70	 mov	 rax, QWORD PTR addr$[rsp]
  0014b	48 83 e0 01	 and	 rax, 1
  0014f	48 85 c0	 test	 rax, rax
  00152	75 0a		 jne	 SHORT $LN24@z900_cmpsc
  00154	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv155[rsp], 1
  0015c	eb 08		 jmp	 SHORT $LN25@z900_cmpsc
$LN24@z900_cmpsc:
  0015e	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv155[rsp], 0
$LN25@z900_cmpsc:
  00166	83 7c 24 3c 00	 cmp	 DWORD PTR tv155[rsp], 0
  0016b	74 0a		 je	 SHORT $LN28@z900_cmpsc
  0016d	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv161[rsp], 1
  00175	eb 08		 jmp	 SHORT $LN29@z900_cmpsc
$LN28@z900_cmpsc:
  00177	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv161[rsp], 0
$LN29@z900_cmpsc:
  0017f	83 7c 24 40 00	 cmp	 DWORD PTR tv161[rsp], 0
  00184	74 2d		 je	 SHORT $LN7@z900_cmpsc

; 128  :                 return CSWAP16( *(U16*) &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  00186	b8 08 00 00 00	 mov	 eax, 8
  0018b	48 6b c0 00	 imul	 rax, rax, 0
  0018f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR addr$[rsp]
  00194	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  0019b	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001a0	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001a5	0f b7 0c 08	 movzx	 ecx, WORD PTR [rax+rcx]
  001a9	e8 00 00 00 00	 call	 _byteswap_ushort
  001ae	e9 67 02 00 00	 jmp	 $LN1@z900_cmpsc
$LN7@z900_cmpsc:

; 129  :             return fetch_hw(            &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001b3	b8 08 00 00 00	 mov	 eax, 8
  001b8	48 6b c0 00	 imul	 rax, rax, 0
  001bc	48 8b 4c 24 70	 mov	 rcx, QWORD PTR addr$[rsp]
  001c1	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  001c8	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001cd	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001d2	48 03 c1	 add	 rax, rcx
  001d5	48 8b c8	 mov	 rcx, rax
  001d8	e8 00 00 00 00	 call	 fetch_hw_noswap
  001dd	0f b7 c8	 movzx	 ecx, ax
  001e0	e8 00 00 00 00	 call	 _byteswap_ushort
  001e5	e9 30 02 00 00	 jmp	 $LN1@z900_cmpsc

; 130  :         }

  001ea	e9 41 01 00 00	 jmp	 $LN6@z900_cmpsc
$LN5@z900_cmpsc:

; 131  :         else
; 132  :         {
; 133  :             if (unlikely(!pMEMBLK->maddr[1]))

  001ef	b8 08 00 00 00	 mov	 eax, 8
  001f4	48 6b c0 01	 imul	 rax, rax, 1
  001f8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001fd	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00203	75 0a		 jne	 SHORT $LN30@z900_cmpsc
  00205	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv185[rsp], 1
  0020d	eb 08		 jmp	 SHORT $LN31@z900_cmpsc
$LN30@z900_cmpsc:
  0020f	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv185[rsp], 0
$LN31@z900_cmpsc:
  00217	83 7c 24 44 00	 cmp	 DWORD PTR tv185[rsp], 0
  0021c	74 0a		 je	 SHORT $LN34@z900_cmpsc
  0021e	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv193[rsp], 1
  00226	eb 08		 jmp	 SHORT $LN35@z900_cmpsc
$LN34@z900_cmpsc:
  00228	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv193[rsp], 0
$LN35@z900_cmpsc:
  00230	83 7c 24 48 00	 cmp	 DWORD PTR tv193[rsp], 0
  00235	74 55		 je	 SHORT $LN8@z900_cmpsc

; 134  :             {
; 135  :                 pMEMBLK->maddr[1] = MADDR

  00237	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0023c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00240	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00246	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0024b	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0024f	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00253	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0025b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00260	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00263	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00268	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  0026c	ba 01 00 00 00	 mov	 edx, 1
  00271	48 8b c8	 mov	 rcx, rax
  00274	e8 00 00 00 00	 call	 z900_maddr_l
  00279	b9 08 00 00 00	 mov	 ecx, 8
  0027e	48 6b c9 01	 imul	 rcx, rcx, 1
  00282	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00287	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@z900_cmpsc:

; 136  :                 (
; 137  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 138  :                     pMEMBLK->arn,
; 139  :                     pMEMBLK->regs,
; 140  :                     ACCTYPE_READ,   // (fetch)
; 141  :                     pMEMBLK->pkey
; 142  :                 );
; 143  :             }
; 144  :             if (U16_ALIGNED( addr ))

  0028c	48 8b 44 24 70	 mov	 rax, QWORD PTR addr$[rsp]
  00291	48 83 e0 01	 and	 rax, 1
  00295	48 85 c0	 test	 rax, rax
  00298	75 0a		 jne	 SHORT $LN36@z900_cmpsc
  0029a	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv212[rsp], 1
  002a2	eb 08		 jmp	 SHORT $LN37@z900_cmpsc
$LN36@z900_cmpsc:
  002a4	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv212[rsp], 0
$LN37@z900_cmpsc:
  002ac	83 7c 24 4c 00	 cmp	 DWORD PTR tv212[rsp], 0
  002b1	74 0a		 je	 SHORT $LN40@z900_cmpsc
  002b3	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv218[rsp], 1
  002bb	eb 08		 jmp	 SHORT $LN41@z900_cmpsc
$LN40@z900_cmpsc:
  002bd	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv218[rsp], 0
$LN41@z900_cmpsc:
  002c5	83 7c 24 50 00	 cmp	 DWORD PTR tv218[rsp], 0
  002ca	74 2d		 je	 SHORT $LN9@z900_cmpsc

; 145  :                 return CSWAP16( *(U16*) &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  002cc	b8 08 00 00 00	 mov	 eax, 8
  002d1	48 6b c0 01	 imul	 rax, rax, 1
  002d5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR addr$[rsp]
  002da	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  002e1	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002e6	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  002eb	0f b7 0c 08	 movzx	 ecx, WORD PTR [rax+rcx]
  002ef	e8 00 00 00 00	 call	 _byteswap_ushort
  002f4	e9 21 01 00 00	 jmp	 $LN1@z900_cmpsc
$LN9@z900_cmpsc:

; 146  :             return fetch_hw(            &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  002f9	b8 08 00 00 00	 mov	 eax, 8
  002fe	48 6b c0 01	 imul	 rax, rax, 1
  00302	48 8b 4c 24 70	 mov	 rcx, QWORD PTR addr$[rsp]
  00307	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  0030e	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00313	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00318	48 03 c1	 add	 rax, rcx
  0031b	48 8b c8	 mov	 rcx, rax
  0031e	e8 00 00 00 00	 call	 fetch_hw_noswap
  00323	0f b7 c8	 movzx	 ecx, ax
  00326	e8 00 00 00 00	 call	 _byteswap_ushort
  0032b	e9 ea 00 00 00	 jmp	 $LN1@z900_cmpsc
$LN6@z900_cmpsc:

; 147  :         }
; 148  :     }

  00330	e9 e5 00 00 00	 jmp	 $LN4@z900_cmpsc
$LN3@z900_cmpsc:

; 149  :     else
; 150  :     {
; 151  :         if (likely(!pMEMBLK->maddr[1]))

  00335	b8 08 00 00 00	 mov	 eax, 8
  0033a	48 6b c0 01	 imul	 rax, rax, 1
  0033e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00343	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00349	75 0a		 jne	 SHORT $LN42@z900_cmpsc
  0034b	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv242[rsp], 1
  00353	eb 08		 jmp	 SHORT $LN43@z900_cmpsc
$LN42@z900_cmpsc:
  00355	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv242[rsp], 0
$LN43@z900_cmpsc:
  0035d	83 7c 24 54 00	 cmp	 DWORD PTR tv242[rsp], 0
  00362	74 0a		 je	 SHORT $LN46@z900_cmpsc
  00364	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv250[rsp], 1
  0036c	eb 08		 jmp	 SHORT $LN47@z900_cmpsc
$LN46@z900_cmpsc:
  0036e	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv250[rsp], 0
$LN47@z900_cmpsc:
  00376	83 7c 24 58 00	 cmp	 DWORD PTR tv250[rsp], 0
  0037b	74 55		 je	 SHORT $LN10@z900_cmpsc

; 152  :         {
; 153  :             pMEMBLK->maddr[1] = MADDR

  0037d	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00382	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00386	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0038c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00391	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00395	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00399	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  003a1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003a6	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  003a9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003ae	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  003b2	ba 01 00 00 00	 mov	 edx, 1
  003b7	48 8b c8	 mov	 rcx, rax
  003ba	e8 00 00 00 00	 call	 z900_maddr_l
  003bf	b9 08 00 00 00	 mov	 ecx, 8
  003c4	48 6b c9 01	 imul	 rcx, rcx, 1
  003c8	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  003cd	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN10@z900_cmpsc:

; 154  :             (
; 155  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 156  :                 pMEMBLK->arn,
; 157  :                 pMEMBLK->regs,
; 158  :                 ACCTYPE_READ,   // (fetch)
; 159  :                 pMEMBLK->pkey
; 160  :             );
; 161  :         }
; 162  :         return (((U16) pMEMBLK->maddr[0][PAGEFRAME_BYTEMASK]) << 8)

  003d2	b8 08 00 00 00	 mov	 eax, 8
  003d7	48 6b c0 00	 imul	 rax, rax, 0
  003db	b9 01 00 00 00	 mov	 ecx, 1
  003e0	48 69 c9 ff 0f
	00 00		 imul	 rcx, rcx, 4095		; 00000fffH
  003e7	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  003ec	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  003f1	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  003f5	c1 e0 08	 shl	 eax, 8
  003f8	b9 08 00 00 00	 mov	 ecx, 8
  003fd	48 6b c9 01	 imul	 rcx, rcx, 1
  00401	ba 01 00 00 00	 mov	 edx, 1
  00406	48 6b d2 00	 imul	 rdx, rdx, 0
  0040a	4c 8b 44 24 78	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0040f	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00414	0f b6 0c 11	 movzx	 ecx, BYTE PTR [rcx+rdx]
  00418	0b c1		 or	 eax, ecx
$LN4@z900_cmpsc:
$LN1@z900_cmpsc:

; 163  :            |    ((U16) pMEMBLK->maddr[1][0]                       );
; 164  :     }
; 165  : }

  0041a	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0041e	c3		 ret	 0
z900_cmpsc_vfetch2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
tv82 = 48
tv143 = 52
tv155 = 56
tv163 = 60
addr$ = 80
pMEMBLK$ = 88
z900_cmpsc_vfetchb PROC

; 25   : {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 26   :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00013	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00016	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  00022	48 23 c8	 and	 rcx, rax
  00025	48 8b c1	 mov	 rax, rcx
  00028	48 89 44 24 50	 mov	 QWORD PTR addr$[rsp], rax

; 27   : 
; 28   :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0002d	b8 08 00 00 00	 mov	 eax, 8
  00032	48 6b c0 00	 imul	 rax, rax, 0
  00036	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0003b	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00041	74 1a		 je	 SHORT $LN7@z900_cmpsc
  00043	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00048	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004c	48 39 44 24 50	 cmp	 QWORD PTR addr$[rsp], rax
  00051	72 0a		 jb	 SHORT $LN7@z900_cmpsc
  00053	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  0005b	eb 08		 jmp	 SHORT $LN10@z900_cmpsc
$LN7@z900_cmpsc:
  0005d	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN10@z900_cmpsc:
  00065	83 7c 24 30 00	 cmp	 DWORD PTR tv82[rsp], 0
  0006a	74 77		 je	 SHORT $LN2@z900_cmpsc

; 29   :     {
; 30   :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR addr$[rsp]
  00071	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  00077	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0007c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 31   :         pMEMBLK->maddr[1] = 0;

  00080	b8 08 00 00 00	 mov	 eax, 8
  00085	48 6b c0 01	 imul	 rax, rax, 1
  00089	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0008e	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 32   :         pMEMBLK->maddr[0] = MADDR

  00097	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0009c	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000a0	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000a4	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000ac	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b1	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000b4	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b9	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000bd	ba 01 00 00 00	 mov	 edx, 1
  000c2	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c7	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000cb	e8 00 00 00 00	 call	 z900_maddr_l
  000d0	b9 08 00 00 00	 mov	 ecx, 8
  000d5	48 6b c9 00	 imul	 rcx, rcx, 0
  000d9	48 8b 54 24 58	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000de	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@z900_cmpsc:

; 33   :         (
; 34   :             pMEMBLK->vpagebeg,
; 35   :             pMEMBLK->arn,
; 36   :             pMEMBLK->regs,
; 37   :             ACCTYPE_READ,   // (fetch)
; 38   :             pMEMBLK->pkey
; 39   :         );
; 40   :     }
; 41   :     if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  000e3	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000ec	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  000f2	48 39 44 24 50	 cmp	 QWORD PTR addr$[rsp], rax
  000f7	73 0a		 jae	 SHORT $LN13@z900_cmpsc
  000f9	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00101	eb 08		 jmp	 SHORT $LN14@z900_cmpsc
$LN13@z900_cmpsc:
  00103	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN14@z900_cmpsc:
  0010b	83 7c 24 34 00	 cmp	 DWORD PTR tv143[rsp], 0
  00110	74 2d		 je	 SHORT $LN3@z900_cmpsc

; 42   :     {
; 43   :         return pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK];

  00112	b8 08 00 00 00	 mov	 eax, 8
  00117	48 6b c0 00	 imul	 rax, rax, 0
  0011b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  00120	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  00127	48 8b 54 24 58	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0012c	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00131	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00135	e9 c5 00 00 00	 jmp	 $LN1@z900_cmpsc

; 44   :     }

  0013a	e9 c0 00 00 00	 jmp	 $LN4@z900_cmpsc
$LN3@z900_cmpsc:

; 45   :     else
; 46   :     {
; 47   :         if (unlikely(!pMEMBLK->maddr[1]))

  0013f	b8 08 00 00 00	 mov	 eax, 8
  00144	48 6b c0 01	 imul	 rax, rax, 1
  00148	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0014d	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00153	75 0a		 jne	 SHORT $LN15@z900_cmpsc
  00155	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv155[rsp], 1
  0015d	eb 08		 jmp	 SHORT $LN16@z900_cmpsc
$LN15@z900_cmpsc:
  0015f	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv155[rsp], 0
$LN16@z900_cmpsc:
  00167	83 7c 24 38 00	 cmp	 DWORD PTR tv155[rsp], 0
  0016c	74 0a		 je	 SHORT $LN19@z900_cmpsc
  0016e	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv163[rsp], 1
  00176	eb 08		 jmp	 SHORT $LN20@z900_cmpsc
$LN19@z900_cmpsc:
  00178	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv163[rsp], 0
$LN20@z900_cmpsc:
  00180	83 7c 24 3c 00	 cmp	 DWORD PTR tv163[rsp], 0
  00185	74 55		 je	 SHORT $LN5@z900_cmpsc

; 48   :         {
; 49   :             pMEMBLK->maddr[1] = MADDR

  00187	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0018c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00190	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00196	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0019b	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0019f	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  001a3	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  001ab	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001b0	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  001b3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001b8	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  001bc	ba 01 00 00 00	 mov	 edx, 1
  001c1	48 8b c8	 mov	 rcx, rax
  001c4	e8 00 00 00 00	 call	 z900_maddr_l
  001c9	b9 08 00 00 00	 mov	 ecx, 8
  001ce	48 6b c9 01	 imul	 rcx, rcx, 1
  001d2	48 8b 54 24 58	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001d7	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN5@z900_cmpsc:

; 50   :             (
; 51   :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 52   :                 pMEMBLK->arn,
; 53   :                 pMEMBLK->regs,
; 54   :                 ACCTYPE_READ,   // (fetch)
; 55   :                 pMEMBLK->pkey
; 56   :             );
; 57   :         }
; 58   :         return pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK];

  001dc	b8 08 00 00 00	 mov	 eax, 8
  001e1	48 6b c0 01	 imul	 rax, rax, 1
  001e5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR addr$[rsp]
  001ea	48 81 e1 ff 0f
	00 00		 and	 rcx, 4095		; 00000fffH
  001f1	48 8b 54 24 58	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001f6	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001fb	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
$LN4@z900_cmpsc:
$LN1@z900_cmpsc:

; 59   :     }
; 60   : }

  001ff	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00203	c3		 ret	 0
z900_cmpsc_vfetchb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dat.h
;	COMDAT z900_maddr_l
_TEXT	SEGMENT
tlbix$ = 48
aea_crn$ = 52
tv70 = 56
maddr$ = 64
addr$ = 96
len$ = 104
arn$ = 112
regs$ = 120
acctype$ = 128
akey$ = 136
z900_maddr_l PROC					; COMDAT

; 307  : {

$LN18:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 308  :     /* Note: ALL of the below conditions must be true for a TLB hit
; 309  :        to occur.  If ANY of them are false, then it's a TLB miss,
; 310  :        requiring us to then perform a full DAT address translation.
; 311  : 
; 312  :        Note too that on the grand scheme of things the order/sequence
; 313  :        of the below tests (if statements) is completely unimportant
; 314  :        since ALL conditions must be checked anyway in order for a hit
; 315  :        to occur, and it doesn't matter that a miss tests a few extra
; 316  :        conditions since it's going to do a full translation anyway!
; 317  :        (which is many, many instructions)
; 318  :     */
; 319  : 
; 320  :     int  aea_crn  = (arn >= USE_ARMODE) ? 0 : regs->AEA_AR( arn );

  00018	83 7c 24 70 10	 cmp	 DWORD PTR arn$[rsp], 16
  0001d	7c 0a		 jl	 SHORT $LN16@z900_maddr
  0001f	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
  00027	eb 19		 jmp	 SHORT $LN17@z900_maddr
$LN16@z900_maddr:
  00029	8b 44 24 70	 mov	 eax, DWORD PTR arn$[rsp]
  0002d	83 c0 05	 add	 eax, 5
  00030	48 98		 cdqe
  00032	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00037	8b 84 81 94 0c
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+3220]
  0003e	89 44 24 38	 mov	 DWORD PTR tv70[rsp], eax
$LN17@z900_maddr:
  00042	8b 44 24 38	 mov	 eax, DWORD PTR tv70[rsp]
  00046	89 44 24 34	 mov	 DWORD PTR aea_crn$[rsp], eax

; 321  :     U16  tlbix    = TLBIX( addr );

  0004a	48 8b 44 24 60	 mov	 rax, QWORD PTR addr$[rsp]
  0004f	48 c1 e8 0c	 shr	 rax, 12
  00053	48 25 ff 03 00
	00		 and	 rax, 1023		; 000003ffH
  00059	66 89 44 24 30	 mov	 WORD PTR tlbix$[rsp], ax

; 322  :     BYTE *maddr   = NULL;

  0005e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR maddr$[rsp], 0

; 323  : 
; 324  :     /* Non-zero AEA Control Register number? */
; 325  :     if (aea_crn)

  00067	83 7c 24 34 00	 cmp	 DWORD PTR aea_crn$[rsp], 0
  0006c	0f 84 2d 01 00
	00		 je	 $LN2@z900_maddr

; 326  :     {
; 327  :         /* Same Addess Space Designator as before? */
; 328  :         /* Or if not, is address in a common segment? */
; 329  :         if (0
; 330  :             || (regs->CR( aea_crn ) == regs->tlb.TLB_ASD( tlbix ))
; 331  :             || (regs->AEA_COMMON( aea_crn ) & regs->tlb.common[ tlbix ])

  00072	33 c0		 xor	 eax, eax
  00074	85 c0		 test	 eax, eax
  00076	75 5a		 jne	 SHORT $LN4@z900_maddr
  00078	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  0007c	ff c0		 inc	 eax
  0007e	48 98		 cdqe
  00080	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  00085	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  0008a	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  0008f	49 8b 8c c8 60
	b0 00 00	 mov	 rcx, QWORD PTR [r8+rcx*8+45152]
  00097	48 39 8c c2 00
	06 00 00	 cmp	 QWORD PTR [rdx+rax*8+1536], rcx
  0009f	74 31		 je	 SHORT $LN4@z900_maddr
  000a1	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  000a5	ff c0		 inc	 eax
  000a7	48 98		 cdqe
  000a9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000ae	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  000b6	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000bb	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000c0	0f b6 8c 0a 60
	54 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+87136]
  000c8	23 c1		 and	 eax, ecx
  000ca	85 c0		 test	 eax, eax
  000cc	0f 84 cd 00 00
	00		 je	 $LN3@z900_maddr
$LN4@z900_maddr:

; 332  :         )
; 333  :         {
; 334  :             /* Storage Key zero? */
; 335  :             /* Or if not, same Storage Key as before? */
; 336  :             if (0
; 337  :                 || akey == 0
; 338  :                 || akey == regs->tlb.skey[ tlbix ]

  000d2	33 c0		 xor	 eax, eax
  000d4	85 c0		 test	 eax, eax
  000d6	75 2e		 jne	 SHORT $LN6@z900_maddr
  000d8	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000e0	85 c0		 test	 eax, eax
  000e2	74 22		 je	 SHORT $LN6@z900_maddr
  000e4	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000ec	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000f1	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000f6	0f b6 8c 0a 60
	50 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+86112]
  000fe	3b c1		 cmp	 eax, ecx
  00100	0f 85 99 00 00
	00		 jne	 $LN5@z900_maddr
$LN6@z900_maddr:

; 339  :             )
; 340  :             {
; 341  :                 /* Does the page address match the one in the TLB? */
; 342  :                 /* (does a TLB entry exist for this page address?) */
; 343  :                 if (
; 344  :                     ((addr & TLBID_PAGEMASK) | regs->tlbID)
; 345  :                     ==

  00106	48 8b 44 24 60	 mov	 rax, QWORD PTR addr$[rsp]
  0010b	48 25 00 00 c0
	ff		 and	 rax, -4194304		; ffffffffffc00000H
  00111	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00116	8b 89 58 b0 00
	00		 mov	 ecx, DWORD PTR [rcx+45144]
  0011c	48 0b c1	 or	 rax, rcx
  0011f	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  00124	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00129	48 3b 84 ca 60
	d0 00 00	 cmp	 rax, QWORD PTR [rdx+rcx*8+53344]
  00131	75 6c		 jne	 SHORT $LN7@z900_maddr

; 346  :                     regs->tlb.TLB_VADDR( tlbix )
; 347  :                 )
; 348  :                 {
; 349  :                     /* Is storage being accessed same way as before? */
; 350  :                     if (acctype & regs->tlb.acc[ tlbix ])

  00133	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  00138	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0013d	0f b6 84 01 60
	5c 01 00	 movzx	 eax, BYTE PTR [rcx+rax+89184]
  00145	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR acctype$[rsp]
  0014c	23 c8		 and	 ecx, eax
  0014e	8b c1		 mov	 eax, ecx
  00150	85 c0		 test	 eax, eax
  00152	74 4b		 je	 SHORT $LN8@z900_maddr

; 351  :                     {
; 352  :                         /*------------------------------------------*/
; 353  :                         /* TLB hit: use previously translated value */
; 354  :                         /*------------------------------------------*/
; 355  : 
; 356  :                         if (acctype & ACC_CHECK)

  00154	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR acctype$[rsp]
  0015b	83 e0 01	 and	 eax, 1
  0015e	85 c0		 test	 eax, eax
  00160	74 1e		 je	 SHORT $LN9@z900_maddr

; 357  :                             regs->dat.storkey = regs->tlb.storkey[ tlbix ];

  00162	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  00167	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0016c	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00171	48 8b 84 c2 60
	30 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+77920]
  00179	48 89 81 28 08
	00 00		 mov	 QWORD PTR [rcx+2088], rax
$LN9@z900_maddr:

; 358  : 
; 359  :                         maddr = MAINADDR( regs->tlb.main[tlbix], addr );

  00180	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  00185	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0018a	48 8b 54 24 60	 mov	 rdx, QWORD PTR addr$[rsp]
  0018f	48 8b 84 c1 60
	10 01 00	 mov	 rax, QWORD PTR [rcx+rax*8+69728]
  00197	48 33 c2	 xor	 rax, rdx
  0019a	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN8@z900_maddr:
$LN7@z900_maddr:
$LN5@z900_maddr:
$LN3@z900_maddr:
$LN2@z900_maddr:

; 360  :                     }
; 361  :                 }
; 362  :             }
; 363  :         }
; 364  :     }
; 365  : 
; 366  :     /*---------------------------------------*/
; 367  :     /* TLB miss: do full address translation */
; 368  :     /*---------------------------------------*/
; 369  :     if (!maddr)

  0019f	48 83 7c 24 40
	00		 cmp	 QWORD PTR maddr$[rsp], 0
  001a5	75 36		 jne	 SHORT $LN10@z900_maddr

; 370  :         maddr = ARCH_DEP( logical_to_main_l )( addr, arn, regs, acctype, akey, len );

  001a7	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  001ac	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001b1	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  001b9	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  001bd	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR acctype$[rsp]
  001c5	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  001ca	8b 54 24 70	 mov	 edx, DWORD PTR arn$[rsp]
  001ce	48 8b 4c 24 60	 mov	 rcx, QWORD PTR addr$[rsp]
  001d3	e8 00 00 00 00	 call	 z900_logical_to_main_l
  001d8	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN10@z900_maddr:

; 371  : 
; 372  : #if defined( FEATURE_073_TRANSACT_EXEC_FACILITY )
; 373  :     if (FACILITY_ENABLED( 073_TRANSACT_EXEC, regs ))

  001dd	b8 01 00 00 00	 mov	 eax, 1
  001e2	48 6b c0 09	 imul	 rax, rax, 9
  001e6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  001eb	0f b6 84 01 28
	0d 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3368]
  001f3	83 e0 40	 and	 eax, 64			; 00000040H
  001f6	85 c0		 test	 eax, eax
  001f8	0f 84 89 00 00
	00		 je	 $LN11@z900_maddr

; 374  :     {
; 375  :         /* SA22-7832-12 Principles of Operation, page 5-99:
; 376  : 
; 377  :              "Storage accesses for instruction and DAT- and ART-
; 378  :               table fetches follow the non-transactional rules."
; 379  :         */
; 380  :         if (0
; 381  :             || !regs
; 382  :             || !regs->txf_tnd
; 383  :             || arn == USE_INST_SPACE    /* Instruction fetching */
; 384  :             || arn == USE_REAL_ADDR     /* Address translation  */

  001fe	33 c0		 xor	 eax, eax
  00200	85 c0		 test	 eax, eax
  00202	75 26		 jne	 SHORT $LN13@z900_maddr
  00204	48 83 7c 24 78
	00		 cmp	 QWORD PTR regs$[rsp], 0
  0020a	74 1e		 je	 SHORT $LN13@z900_maddr
  0020c	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00211	0f b6 80 58 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3672]
  00218	85 c0		 test	 eax, eax
  0021a	74 0e		 je	 SHORT $LN13@z900_maddr
  0021c	83 7c 24 70 ff	 cmp	 DWORD PTR arn$[rsp], -1
  00221	74 07		 je	 SHORT $LN13@z900_maddr
  00223	83 7c 24 70 fe	 cmp	 DWORD PTR arn$[rsp], -2
  00228	75 07		 jne	 SHORT $LN12@z900_maddr
$LN13@z900_maddr:

; 385  :         )
; 386  :             return maddr;

  0022a	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]
  0022f	eb 5b		 jmp	 SHORT $LN1@z900_maddr
$LN12@z900_maddr:

; 387  : 
; 388  :         /* Quick exit if NTSTG call */
; 389  :         if (regs->txf_NTSTG)

  00231	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00236	0f b6 80 4b 0e
	00 00		 movzx	 eax, BYTE PTR [rax+3659]
  0023d	85 c0		 test	 eax, eax
  0023f	74 13		 je	 SHORT $LN14@z900_maddr

; 390  :         {
; 391  :             regs->txf_NTSTG = false;

  00241	48 8b 44 24 78	 mov	 rax, QWORD PTR regs$[rsp]
  00246	c6 80 4b 0e 00
	00 00		 mov	 BYTE PTR [rax+3659], 0

; 392  :             return maddr;

  0024d	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]
  00252	eb 38		 jmp	 SHORT $LN1@z900_maddr
$LN14@z900_maddr:

; 393  :         }
; 394  : 
; 395  :         /* Translate to alternate TXF address */
; 396  :         maddr = TXF_MADDRL( addr, len, arn, regs, acctype, maddr );

  00254	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]
  00259	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0025e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR acctype$[rsp]
  00265	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00269	4c 8b 4c 24 78	 mov	 r9, QWORD PTR regs$[rsp]
  0026e	44 8b 44 24 70	 mov	 r8d, DWORD PTR arn$[rsp]
  00273	48 8b 54 24 68	 mov	 rdx, QWORD PTR len$[rsp]
  00278	48 8b 4c 24 60	 mov	 rcx, QWORD PTR addr$[rsp]
  0027d	e8 00 00 00 00	 call	 txf_maddr_l
  00282	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN11@z900_maddr:

; 397  :     }
; 398  : #endif
; 399  : 
; 400  :     return maddr;

  00287	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]
$LN1@z900_maddr:

; 401  : }

  0028c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00290	c3		 ret	 0
z900_maddr_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
GR0$ = 0
GR1$ = 4
pCMPSCBLK$ = 32
regs$ = 40
r1$ = 48
r2$ = 56
s390_cmpsc_SetCMPSC PROC

; 693  : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 18	 sub	 rsp, 24

; 694  :     register GREG GR0, GR1;
; 695  : 
; 696  :     pCMPSCBLK->r1       =  r1;

  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  0001d	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR r1$[rsp]
  00022	88 48 40	 mov	 BYTE PTR [rax+64], cl

; 697  :     pCMPSCBLK->r2       =  r2;

  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  0002a	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR r2$[rsp]
  0002f	88 48 41	 mov	 BYTE PTR [rax+65], cl

; 698  : 
; 699  :     GR0                 = regs->GR_L( 0 );

  00032	b8 08 00 00 00	 mov	 eax, 8
  00037	48 6b c0 00	 imul	 rax, rax, 0
  0003b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00040	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00047	89 04 24	 mov	 DWORD PTR GR0$[rsp], eax

; 700  :     GR1                 = GR_A( 1,    regs ) & ADDRESS_MAXWRAP( regs );

  0004a	b8 08 00 00 00	 mov	 eax, 8
  0004f	48 6b c0 01	 imul	 rax, rax, 1
  00053	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00058	48 8b 54 24 28	 mov	 rdx, QWORD PTR regs$[rsp]
  0005d	8b 92 90 00 00
	00		 mov	 edx, DWORD PTR [rdx+144]
  00063	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0006a	23 c2		 and	 eax, edx
  0006c	89 44 24 04	 mov	 DWORD PTR GR1$[rsp], eax

; 701  :     pCMPSCBLK->pOp1     = GR_A( r1,   regs ) & ADDRESS_MAXWRAP( regs );

  00070	48 63 44 24 30	 movsxd	 rax, DWORD PTR r1$[rsp]
  00075	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  0007a	48 8b 54 24 28	 mov	 rdx, QWORD PTR regs$[rsp]
  0007f	8b 92 90 00 00
	00		 mov	 edx, DWORD PTR [rdx+144]
  00085	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0008c	23 c2		 and	 eax, edx
  0008e	8b c0		 mov	 eax, eax
  00090	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00095	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 702  :     pCMPSCBLK->pOp2     = GR_A( r2,   regs ) & ADDRESS_MAXWRAP( regs );

  00099	48 63 44 24 38	 movsxd	 rax, DWORD PTR r2$[rsp]
  0009e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000a3	48 8b 54 24 28	 mov	 rdx, QWORD PTR regs$[rsp]
  000a8	8b 92 90 00 00
	00		 mov	 edx, DWORD PTR [rdx+144]
  000ae	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000b5	23 c2		 and	 eax, edx
  000b7	8b c0		 mov	 eax, eax
  000b9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  000be	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 703  :     pCMPSCBLK->nLen1    = GR_A( r1+1, regs );

  000c2	8b 44 24 30	 mov	 eax, DWORD PTR r1$[rsp]
  000c6	ff c0		 inc	 eax
  000c8	48 98		 cdqe
  000ca	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000cf	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000d6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  000db	48 89 01	 mov	 QWORD PTR [rcx], rax

; 704  :     pCMPSCBLK->nLen2    = GR_A( r2+1, regs );

  000de	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  000e2	ff c0		 inc	 eax
  000e4	48 98		 cdqe
  000e6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000eb	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000f2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  000f7	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 705  : 
; 706  : //  pCMPSCBLK->e        = (GR0 >>  8) & 0x01;   // (no such field)
; 707  :     pCMPSCBLK->f1       = (GR0 >>  9) & 0x01;

  000fb	8b 04 24	 mov	 eax, DWORD PTR GR0$[rsp]
  000fe	c1 e8 09	 shr	 eax, 9
  00101	83 e0 01	 and	 eax, 1
  00104	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00109	88 41 43	 mov	 BYTE PTR [rcx+67], al

; 708  :     pCMPSCBLK->cdss     = (GR0 >> 12) & 0x0F;

  0010c	8b 04 24	 mov	 eax, DWORD PTR GR0$[rsp]
  0010f	c1 e8 0c	 shr	 eax, 12
  00112	83 e0 0f	 and	 eax, 15
  00115	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  0011a	88 41 44	 mov	 BYTE PTR [rcx+68], al

; 709  :     pCMPSCBLK->st       = (GR0 >> 16) & 0x01;

  0011d	8b 04 24	 mov	 eax, DWORD PTR GR0$[rsp]
  00120	c1 e8 10	 shr	 eax, 16
  00123	83 e0 01	 and	 eax, 1
  00126	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  0012b	88 41 42	 mov	 BYTE PTR [rcx+66], al

; 710  : #if defined(_FEATURE_047_CMPSC_ENH_FACILITY)
; 711  :     if (FACILITY_ENABLED( 047_CMPSC_ENH, regs ))

  0012e	b8 01 00 00 00	 mov	 eax, 1
  00133	48 6b c0 05	 imul	 rax, rax, 5
  00137	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  0013c	0f b6 84 01 28
	0d 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3368]
  00144	83 e0 01	 and	 eax, 1
  00147	85 c0		 test	 eax, eax
  00149	74 13		 je	 SHORT $LN2@s390_cmpsc

; 712  :     pCMPSCBLK->zp       = (GR0 >> 17) & 0x01; else

  0014b	8b 04 24	 mov	 eax, DWORD PTR GR0$[rsp]
  0014e	c1 e8 11	 shr	 eax, 17
  00151	83 e0 01	 and	 eax, 1
  00154	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00159	88 41 47	 mov	 BYTE PTR [rcx+71], al
  0015c	eb 09		 jmp	 SHORT $LN3@s390_cmpsc
$LN2@s390_cmpsc:

; 713  : #endif
; 714  :     pCMPSCBLK->zp       = FALSE;

  0015e	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  00163	c6 40 47 00	 mov	 BYTE PTR [rax+71], 0
$LN3@s390_cmpsc:

; 715  : 
; 716  :     pCMPSCBLK->cbn      = (GR1 &  0x007);

  00167	8b 44 24 04	 mov	 eax, DWORD PTR GR1$[rsp]
  0016b	83 e0 07	 and	 eax, 7
  0016e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00173	88 41 45	 mov	 BYTE PTR [rcx+69], al

; 717  :     pCMPSCBLK->stt      = (GR1 &  0xFFF) >>  3;

  00176	8b 44 24 04	 mov	 eax, DWORD PTR GR1$[rsp]
  0017a	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0017f	c1 e8 03	 shr	 eax, 3
  00182	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00187	66 89 41 3c	 mov	 WORD PTR [rcx+60], ax

; 718  :     pCMPSCBLK->pDict    = (GR1 & ~0xFFF);

  0018b	8b 44 24 04	 mov	 eax, DWORD PTR GR1$[rsp]
  0018f	25 00 f0 ff ff	 and	 eax, -4096		; fffff000H
  00194	8b c0		 mov	 eax, eax
  00196	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  0019b	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 719  : 
; 720  :     pCMPSCBLK->regs     =  regs;

  0019f	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  001a4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  001a9	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 721  :     pCMPSCBLK->cc       =  regs->psw.cc;

  001ad	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  001b2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  001b7	0f b6 49 7c	 movzx	 ecx, BYTE PTR [rcx+124]
  001bb	88 48 46	 mov	 BYTE PTR [rax+70], cl

; 722  :     pCMPSCBLK->pic      =  regs->psw.intcode;

  001be	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  001c3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  001c8	0f b7 89 98 00
	00 00		 movzx	 ecx, WORD PTR [rcx+152]
  001cf	66 89 48 3e	 mov	 WORD PTR [rax+62], cx

; 723  :     pCMPSCBLK->nCPUAmt  =  DEF_CMPSC_CPU_AMT;

  001d3	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  001d8	c7 40 38 00 00
	10 00		 mov	 DWORD PTR [rax+56], 1048576 ; 00100000H

; 724  : //  pCMPSCBLK->dbg      =  0;  // (future)
; 725  : }

  001df	48 83 c4 18	 add	 rsp, 24
  001e3	c3		 ret	 0
s390_cmpsc_SetCMPSC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
pCMPSCBLK$ = 8
regs$ = 16
r1$ = 24
r2$ = 32
s390_cmpsc_SetREGS PROC

; 632  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 633  :     SET_GR_A( r1,     regs, (VADR) pCMPSCBLK->pOp1  );

  00014	48 63 44 24 18	 movsxd	 rax, DWORD PTR r1$[rsp]
  00019	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  0001e	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  00023	8b 52 20	 mov	 edx, DWORD PTR [rdx+32]
  00026	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 634  :     SET_GR_A( r2,     regs, (VADR) pCMPSCBLK->pOp2  );

  0002d	48 63 44 24 20	 movsxd	 rax, DWORD PTR r2$[rsp]
  00032	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  00037	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  0003c	8b 52 28	 mov	 edx, DWORD PTR [rdx+40]
  0003f	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 635  :     SET_GR_A( r1 + 1, regs, (GREG) pCMPSCBLK->nLen1 );

  00046	8b 44 24 18	 mov	 eax, DWORD PTR r1$[rsp]
  0004a	ff c0		 inc	 eax
  0004c	48 98		 cdqe
  0004e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  00053	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  00058	8b 12		 mov	 edx, DWORD PTR [rdx]
  0005a	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 636  :     SET_GR_A( r2 + 1, regs, (GREG) pCMPSCBLK->nLen2 );

  00061	8b 44 24 20	 mov	 eax, DWORD PTR r2$[rsp]
  00065	ff c0		 inc	 eax
  00067	48 98		 cdqe
  00069	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  0006e	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  00073	8b 52 08	 mov	 edx, DWORD PTR [rdx+8]
  00076	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 637  : 
; 638  :     regs->psw.cc      = pCMPSCBLK->cc;

  0007d	48 8b 44 24 10	 mov	 rax, QWORD PTR regs$[rsp]
  00082	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00087	0f b6 49 46	 movzx	 ecx, BYTE PTR [rcx+70]
  0008b	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 639  :     regs->psw.intcode = pCMPSCBLK->pic;

  0008e	48 8b 44 24 10	 mov	 rax, QWORD PTR regs$[rsp]
  00093	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00098	0f b7 49 3e	 movzx	 ecx, WORD PTR [rcx+62]
  0009c	66 89 88 98 00
	00 00		 mov	 WORD PTR [rax+152], cx

; 640  : 
; 641  :     /* Register 0 is input-only and thus not modified.
; 642  : 
; 643  :     SET_GR_A( 0, regs,
; 644  :     (0
; 645  :         | ((GREG)   zeropad       << 17)
; 646  :         | ((GREG) pCMPSCBLK->st   << 16)
; 647  :         | ((GREG) pCMPSCBLK->cdss << 12)
; 648  :         | ((GREG) pCMPSCBLK->f1   <<  9)
; 649  :         | ((GREG)   expand        <<  8)
; 650  :     ));
; 651  :     */
; 652  : 
; 653  :     SET_GR_A( 1, regs, ((GREG) pCMPSCBLK->pDict     ) |

  000a3	48 8b 44 24 08	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  000a8	0f b7 40 3c	 movzx	 eax, WORD PTR [rax+60]
  000ac	c1 e0 03	 shl	 eax, 3
  000af	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  000b4	8b 49 30	 mov	 ecx, DWORD PTR [rcx+48]
  000b7	0b c8		 or	 ecx, eax
  000b9	8b c1		 mov	 eax, ecx
  000bb	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  000c0	0f b6 49 45	 movzx	 ecx, BYTE PTR [rcx+69]
  000c4	0b c1		 or	 eax, ecx
  000c6	b9 08 00 00 00	 mov	 ecx, 8
  000cb	48 6b c9 01	 imul	 rcx, rcx, 1
  000cf	48 8b 54 24 10	 mov	 rdx, QWORD PTR regs$[rsp]
  000d4	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 654  :                        ((GREG) pCMPSCBLK->stt  <<  3) |
; 655  :                        ((GREG) pCMPSCBLK->cbn       ) );
; 656  : }

  000db	c3		 ret	 0
s390_cmpsc_SetREGS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv84 = 52
tv148 = 56
tv160 = 60
tv184 = 64
tv192 = 68
tv242 = 72
tv250 = 76
src$ = 112
len$ = 120
addr$ = 128
pMEMBLK$ = 136
s390_cmpsc_vstorec PROC

; 570  : {

$LN34:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 571  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0001a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0002b	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00032	23 c8		 and	 ecx, eax
  00034	8b c1		 mov	 eax, ecx
  00036	89 84 24 80 00
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 572  : 
; 573  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0003d	b8 08 00 00 00	 mov	 eax, 8
  00042	48 6b c0 00	 imul	 rax, rax, 0
  00046	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0004e	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00054	74 1f		 je	 SHORT $LN10@s390_cmpsc
  00056	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0005d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00065	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  00069	72 0a		 jb	 SHORT $LN10@s390_cmpsc
  0006b	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
  00073	eb 08		 jmp	 SHORT $LN13@s390_cmpsc
$LN10@s390_cmpsc:
  00075	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
$LN13@s390_cmpsc:
  0007d	83 7c 24 34 00	 cmp	 DWORD PTR tv84[rsp], 0
  00082	0f 84 8e 00 00
	00		 je	 $LN2@s390_cmpsc

; 574  :     {
; 575  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00088	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0008f	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  00094	8b c0		 mov	 eax, eax
  00096	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0009e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 576  :         pMEMBLK->maddr[1] = 0;

  000a2	b8 08 00 00 00	 mov	 eax, 8
  000a7	48 6b c0 01	 imul	 rax, rax, 1
  000ab	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000b3	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 577  :         pMEMBLK->maddr[0] = MADDR

  000bc	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c4	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000c8	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000cc	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000d4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000dc	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000df	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e7	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000eb	ba 01 00 00 00	 mov	 edx, 1
  000f0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000f8	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000fb	e8 00 00 00 00	 call	 s390_maddr_l
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 00	 imul	 rcx, rcx, 0
  00109	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00111	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s390_cmpsc:

; 578  :         (
; 579  :             pMEMBLK->vpagebeg,
; 580  :             pMEMBLK->arn,
; 581  :             pMEMBLK->regs,
; 582  :             ACCTYPE_WRITE,  // (store)
; 583  :             pMEMBLK->pkey
; 584  :         );
; 585  :     }
; 586  :     if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  00116	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0011d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00125	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00129	48 81 c1 00 10
	00 00		 add	 rcx, 4096		; 00001000H
  00130	48 3b c1	 cmp	 rax, rcx
  00133	73 0a		 jae	 SHORT $LN16@s390_cmpsc
  00135	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv148[rsp], 1
  0013d	eb 08		 jmp	 SHORT $LN17@s390_cmpsc
$LN16@s390_cmpsc:
  0013f	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
$LN17@s390_cmpsc:
  00147	83 7c 24 38 00	 cmp	 DWORD PTR tv148[rsp], 0
  0014c	0f 84 be 01 00
	00		 je	 $LN3@s390_cmpsc

; 587  :     {
; 588  :         if (NOCROSSPAGE( addr, len ))

  00152	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00159	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0015e	0f b7 4c 24 78	 movzx	 ecx, WORD PTR len$[rsp]
  00163	ba ff 0f 00 00	 mov	 edx, 4095		; 00000fffH
  00168	2b d1		 sub	 edx, ecx
  0016a	8b ca		 mov	 ecx, edx
  0016c	3b c1		 cmp	 eax, ecx
  0016e	7f 0a		 jg	 SHORT $LN20@s390_cmpsc
  00170	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv160[rsp], 1
  00178	eb 08		 jmp	 SHORT $LN21@s390_cmpsc
$LN20@s390_cmpsc:
  0017a	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv160[rsp], 0
$LN21@s390_cmpsc:
  00182	83 7c 24 3c 00	 cmp	 DWORD PTR tv160[rsp], 0
  00187	74 43		 je	 SHORT $LN5@s390_cmpsc

; 589  :         {
; 590  :             memcpy( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], src, len+1 );

  00189	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  0018e	ff c0		 inc	 eax
  00190	48 98		 cdqe
  00192	b9 08 00 00 00	 mov	 ecx, 8
  00197	48 6b c9 00	 imul	 rcx, rcx, 0
  0019b	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  001a2	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  001a8	8b d2		 mov	 edx, edx
  001aa	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001b2	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001b7	48 03 ca	 add	 rcx, rdx
  001ba	48 8b f9	 mov	 rdi, rcx
  001bd	48 8b 74 24 70	 mov	 rsi, QWORD PTR src$[rsp]
  001c2	48 8b c8	 mov	 rcx, rax
  001c5	f3 a4		 rep movsb

; 591  :         }

  001c7	e9 3f 01 00 00	 jmp	 $LN6@s390_cmpsc
$LN5@s390_cmpsc:

; 592  :         else
; 593  :         {
; 594  :             U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  001cc	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  001d3	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  001d8	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  001dd	2b c8		 sub	 ecx, eax
  001df	8b c1		 mov	 eax, ecx
  001e1	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 595  :             if (likely(!pMEMBLK->maddr[1]))

  001e6	b8 08 00 00 00	 mov	 eax, 8
  001eb	48 6b c0 01	 imul	 rax, rax, 1
  001ef	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001f7	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  001fd	75 0a		 jne	 SHORT $LN22@s390_cmpsc
  001ff	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv184[rsp], 1
  00207	eb 08		 jmp	 SHORT $LN23@s390_cmpsc
$LN22@s390_cmpsc:
  00209	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv184[rsp], 0
$LN23@s390_cmpsc:
  00211	83 7c 24 40 00	 cmp	 DWORD PTR tv184[rsp], 0
  00216	74 0a		 je	 SHORT $LN26@s390_cmpsc
  00218	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv192[rsp], 1
  00220	eb 08		 jmp	 SHORT $LN27@s390_cmpsc
$LN26@s390_cmpsc:
  00222	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv192[rsp], 0
$LN27@s390_cmpsc:
  0022a	83 7c 24 44 00	 cmp	 DWORD PTR tv192[rsp], 0
  0022f	74 63		 je	 SHORT $LN7@s390_cmpsc

; 596  :             {
; 597  :                 pMEMBLK->maddr[1] = MADDR

  00231	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00239	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0023d	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00243	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0024b	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0024f	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00253	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0025b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00263	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00266	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0026e	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00272	ba 01 00 00 00	 mov	 edx, 1
  00277	8b c8		 mov	 ecx, eax
  00279	e8 00 00 00 00	 call	 s390_maddr_l
  0027e	b9 08 00 00 00	 mov	 ecx, 8
  00283	48 6b c9 01	 imul	 rcx, rcx, 1
  00287	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0028f	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN7@s390_cmpsc:

; 598  :                 (
; 599  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 600  :                     pMEMBLK->arn,
; 601  :                     pMEMBLK->regs,
; 602  :                     ACCTYPE_WRITE,  // (store)
; 603  :                     pMEMBLK->pkey
; 604  :                 );
; 605  :             }
; 606  :             memcpy( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], src,                len1 );

  00294	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00299	b9 08 00 00 00	 mov	 ecx, 8
  0029e	48 6b c9 00	 imul	 rcx, rcx, 0
  002a2	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  002a9	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  002af	8b d2		 mov	 edx, edx
  002b1	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  002b9	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  002be	48 03 ca	 add	 rcx, rdx
  002c1	48 8b f9	 mov	 rdi, rcx
  002c4	48 8b 74 24 70	 mov	 rsi, QWORD PTR src$[rsp]
  002c9	8b c8		 mov	 ecx, eax
  002cb	f3 a4		 rep movsb

; 607  :             memcpy(  pMEMBLK->maddr[1],                            src + len1, len+1 - len1 );

  002cd	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  002d2	ff c0		 inc	 eax
  002d4	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  002d9	2b c1		 sub	 eax, ecx
  002db	48 98		 cdqe
  002dd	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  002e2	48 8b 54 24 70	 mov	 rdx, QWORD PTR src$[rsp]
  002e7	48 03 d1	 add	 rdx, rcx
  002ea	48 8b ca	 mov	 rcx, rdx
  002ed	ba 08 00 00 00	 mov	 edx, 8
  002f2	48 6b d2 01	 imul	 rdx, rdx, 1
  002f6	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  002fe	48 8b 7c 17 10	 mov	 rdi, QWORD PTR [rdi+rdx+16]
  00303	48 8b f1	 mov	 rsi, rcx
  00306	48 8b c8	 mov	 rcx, rax
  00309	f3 a4		 rep movsb
$LN6@s390_cmpsc:

; 608  :         }
; 609  :     }

  0030b	e9 ec 00 00 00	 jmp	 $LN4@s390_cmpsc
$LN3@s390_cmpsc:

; 610  :     else
; 611  :     {
; 612  :         if (unlikely(!pMEMBLK->maddr[1]))

  00310	b8 08 00 00 00	 mov	 eax, 8
  00315	48 6b c0 01	 imul	 rax, rax, 1
  00319	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00321	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00327	75 0a		 jne	 SHORT $LN28@s390_cmpsc
  00329	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv242[rsp], 1
  00331	eb 08		 jmp	 SHORT $LN29@s390_cmpsc
$LN28@s390_cmpsc:
  00333	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv242[rsp], 0
$LN29@s390_cmpsc:
  0033b	83 7c 24 48 00	 cmp	 DWORD PTR tv242[rsp], 0
  00340	74 0a		 je	 SHORT $LN32@s390_cmpsc
  00342	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv250[rsp], 1
  0034a	eb 08		 jmp	 SHORT $LN33@s390_cmpsc
$LN32@s390_cmpsc:
  0034c	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv250[rsp], 0
$LN33@s390_cmpsc:
  00354	83 7c 24 4c 00	 cmp	 DWORD PTR tv250[rsp], 0
  00359	74 63		 je	 SHORT $LN8@s390_cmpsc

; 613  :         {
; 614  :             pMEMBLK->maddr[1] = MADDR

  0035b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00363	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00367	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0036d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00375	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00379	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0037d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00385	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0038d	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00390	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00398	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  0039c	ba 01 00 00 00	 mov	 edx, 1
  003a1	8b c8		 mov	 ecx, eax
  003a3	e8 00 00 00 00	 call	 s390_maddr_l
  003a8	b9 08 00 00 00	 mov	 ecx, 8
  003ad	48 6b c9 01	 imul	 rcx, rcx, 1
  003b1	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  003b9	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@s390_cmpsc:

; 615  :             (
; 616  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 617  :                 pMEMBLK->arn,
; 618  :                 pMEMBLK->regs,
; 619  :                 ACCTYPE_WRITE,  // (store)
; 620  :                 pMEMBLK->pkey
; 621  :             );
; 622  :         }
; 623  :         memcpy( &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK], src, len+1 );

  003be	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  003c3	ff c0		 inc	 eax
  003c5	48 98		 cdqe
  003c7	b9 08 00 00 00	 mov	 ecx, 8
  003cc	48 6b c9 01	 imul	 rcx, rcx, 1
  003d0	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  003d7	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  003dd	8b d2		 mov	 edx, edx
  003df	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  003e7	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  003ec	48 03 ca	 add	 rcx, rdx
  003ef	48 8b f9	 mov	 rdi, rcx
  003f2	48 8b 74 24 70	 mov	 rsi, QWORD PTR src$[rsp]
  003f7	48 8b c8	 mov	 rcx, rax
  003fa	f3 a4		 rep movsb
$LN4@s390_cmpsc:

; 624  :     }
; 625  : }

  003fc	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00400	5f		 pop	 rdi
  00401	5e		 pop	 rsi
  00402	c3		 ret	 0
s390_cmpsc_vstorec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv84 = 52
tv144 = 56
tv156 = 60
tv160 = 64
tv166 = 68
tv192 = 72
tv200 = 76
tv220 = 80
tv226 = 84
tv257 = 88
tv265 = 92
value$2 = 96
val$ = 144
addr$ = 152
pMEMBLK$ = 160
s390_cmpsc_vstore8 PROC

; 439  : {

$LN50:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	56		 push	 rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 440  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00014	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0001c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001f	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00025	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  0002c	23 c8		 and	 ecx, eax
  0002e	8b c1		 mov	 eax, ecx
  00030	89 84 24 98 00
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 441  : 
; 442  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00037	b8 08 00 00 00	 mov	 eax, 8
  0003c	48 6b c0 00	 imul	 rax, rax, 0
  00040	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00048	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0004e	74 1f		 je	 SHORT $LN14@s390_cmpsc
  00050	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00057	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0005f	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  00063	72 0a		 jb	 SHORT $LN14@s390_cmpsc
  00065	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
  0006d	eb 08		 jmp	 SHORT $LN17@s390_cmpsc
$LN14@s390_cmpsc:
  0006f	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
$LN17@s390_cmpsc:
  00077	83 7c 24 34 00	 cmp	 DWORD PTR tv84[rsp], 0
  0007c	0f 84 8e 00 00
	00		 je	 $LN2@s390_cmpsc

; 443  :     {
; 444  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00082	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00089	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  0008e	8b c0		 mov	 eax, eax
  00090	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00098	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 445  :         pMEMBLK->maddr[1] = 0;

  0009c	b8 08 00 00 00	 mov	 eax, 8
  000a1	48 6b c0 01	 imul	 rax, rax, 1
  000a5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000ad	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 446  :         pMEMBLK->maddr[0] = MADDR

  000b6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000be	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000c2	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000c6	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000ce	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000d6	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000d9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e1	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000e5	ba 01 00 00 00	 mov	 edx, 1
  000ea	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000f2	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000f5	e8 00 00 00 00	 call	 s390_maddr_l
  000fa	b9 08 00 00 00	 mov	 ecx, 8
  000ff	48 6b c9 00	 imul	 rcx, rcx, 0
  00103	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0010b	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s390_cmpsc:

; 447  :         (
; 448  :             pMEMBLK->vpagebeg,
; 449  :             pMEMBLK->arn,
; 450  :             pMEMBLK->regs,
; 451  :             ACCTYPE_WRITE,  // (store)
; 452  :             pMEMBLK->pkey
; 453  :         );
; 454  :     }
; 455  :     if (NOCROSSPAGE( addr, 8 ))

  00110	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00117	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0011c	3d f7 0f 00 00	 cmp	 eax, 4087		; 00000ff7H
  00121	7f 0a		 jg	 SHORT $LN20@s390_cmpsc
  00123	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv144[rsp], 1
  0012b	eb 08		 jmp	 SHORT $LN21@s390_cmpsc
$LN20@s390_cmpsc:
  0012d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN21@s390_cmpsc:
  00135	83 7c 24 38 00	 cmp	 DWORD PTR tv144[rsp], 0
  0013a	0f 84 5e 02 00
	00		 je	 $LN3@s390_cmpsc

; 456  :     {
; 457  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  00140	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00147	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0014f	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00153	48 81 c1 00 10
	00 00		 add	 rcx, 4096		; 00001000H
  0015a	48 3b c1	 cmp	 rax, rcx
  0015d	73 0a		 jae	 SHORT $LN24@s390_cmpsc
  0015f	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv156[rsp], 1
  00167	eb 08		 jmp	 SHORT $LN25@s390_cmpsc
$LN24@s390_cmpsc:
  00169	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv156[rsp], 0
$LN25@s390_cmpsc:
  00171	83 7c 24 3c 00	 cmp	 DWORD PTR tv156[rsp], 0
  00176	0f 84 ba 00 00
	00		 je	 $LN5@s390_cmpsc

; 458  :         {
; 459  :             if (U64_ALIGNED( addr ))

  0017c	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00183	83 e0 07	 and	 eax, 7
  00186	85 c0		 test	 eax, eax
  00188	75 0a		 jne	 SHORT $LN26@s390_cmpsc
  0018a	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv160[rsp], 1
  00192	eb 08		 jmp	 SHORT $LN27@s390_cmpsc
$LN26@s390_cmpsc:
  00194	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv160[rsp], 0
$LN27@s390_cmpsc:
  0019c	83 7c 24 40 00	 cmp	 DWORD PTR tv160[rsp], 0
  001a1	74 0a		 je	 SHORT $LN30@s390_cmpsc
  001a3	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv166[rsp], 1
  001ab	eb 08		 jmp	 SHORT $LN31@s390_cmpsc
$LN30@s390_cmpsc:
  001ad	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv166[rsp], 0
$LN31@s390_cmpsc:
  001b5	83 7c 24 44 00	 cmp	 DWORD PTR tv166[rsp], 0
  001ba	74 38		 je	 SHORT $LN7@s390_cmpsc

; 460  :                 *(U64*)   &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] = CSWAP64( val );

  001bc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  001c4	e8 00 00 00 00	 call	 _byteswap_uint64
  001c9	b9 08 00 00 00	 mov	 ecx, 8
  001ce	48 6b c9 00	 imul	 rcx, rcx, 0
  001d2	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  001d9	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  001df	8b d2		 mov	 edx, edx
  001e1	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001e9	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001ee	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax
  001f2	eb 3d		 jmp	 SHORT $LN8@s390_cmpsc
$LN7@s390_cmpsc:

; 461  :             else
; 462  :                 store_dw( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],           val );

  001f4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  001fc	e8 00 00 00 00	 call	 _byteswap_uint64
  00201	b9 08 00 00 00	 mov	 ecx, 8
  00206	48 6b c9 00	 imul	 rcx, rcx, 0
  0020a	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00211	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  00217	8b d2		 mov	 edx, edx
  00219	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00221	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00226	48 03 ca	 add	 rcx, rdx
  00229	48 8b d0	 mov	 rdx, rax
  0022c	e8 00 00 00 00	 call	 store_dw_noswap
$LN8@s390_cmpsc:

; 463  :         }

  00231	e9 63 01 00 00	 jmp	 $LN6@s390_cmpsc
$LN5@s390_cmpsc:

; 464  :         else
; 465  :         {
; 466  :             if (unlikely(!pMEMBLK->maddr[1]))

  00236	b8 08 00 00 00	 mov	 eax, 8
  0023b	48 6b c0 01	 imul	 rax, rax, 1
  0023f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00247	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0024d	75 0a		 jne	 SHORT $LN32@s390_cmpsc
  0024f	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv192[rsp], 1
  00257	eb 08		 jmp	 SHORT $LN33@s390_cmpsc
$LN32@s390_cmpsc:
  00259	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv192[rsp], 0
$LN33@s390_cmpsc:
  00261	83 7c 24 48 00	 cmp	 DWORD PTR tv192[rsp], 0
  00266	74 0a		 je	 SHORT $LN36@s390_cmpsc
  00268	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv200[rsp], 1
  00270	eb 08		 jmp	 SHORT $LN37@s390_cmpsc
$LN36@s390_cmpsc:
  00272	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv200[rsp], 0
$LN37@s390_cmpsc:
  0027a	83 7c 24 4c 00	 cmp	 DWORD PTR tv200[rsp], 0
  0027f	74 63		 je	 SHORT $LN9@s390_cmpsc

; 467  :             {
; 468  :                 pMEMBLK->maddr[1] = MADDR

  00281	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00289	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0028d	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00293	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0029b	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0029f	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  002a3	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002ab	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002b3	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  002b6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002be	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002c2	ba 01 00 00 00	 mov	 edx, 1
  002c7	8b c8		 mov	 ecx, eax
  002c9	e8 00 00 00 00	 call	 s390_maddr_l
  002ce	b9 08 00 00 00	 mov	 ecx, 8
  002d3	48 6b c9 01	 imul	 rcx, rcx, 1
  002d7	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002df	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN9@s390_cmpsc:

; 469  :                 (
; 470  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 471  :                     pMEMBLK->arn,
; 472  :                     pMEMBLK->regs,
; 473  :                     ACCTYPE_WRITE,  // (store)
; 474  :                     pMEMBLK->pkey
; 475  :                 );
; 476  :             }
; 477  :             if (U64_ALIGNED( addr ))

  002e4	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  002eb	83 e0 07	 and	 eax, 7
  002ee	85 c0		 test	 eax, eax
  002f0	75 0a		 jne	 SHORT $LN38@s390_cmpsc
  002f2	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv220[rsp], 1
  002fa	eb 08		 jmp	 SHORT $LN39@s390_cmpsc
$LN38@s390_cmpsc:
  002fc	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv220[rsp], 0
$LN39@s390_cmpsc:
  00304	83 7c 24 50 00	 cmp	 DWORD PTR tv220[rsp], 0
  00309	74 0a		 je	 SHORT $LN42@s390_cmpsc
  0030b	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv226[rsp], 1
  00313	eb 08		 jmp	 SHORT $LN43@s390_cmpsc
$LN42@s390_cmpsc:
  00315	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv226[rsp], 0
$LN43@s390_cmpsc:
  0031d	83 7c 24 54 00	 cmp	 DWORD PTR tv226[rsp], 0
  00322	74 38		 je	 SHORT $LN10@s390_cmpsc

; 478  :                 *(U64*)   &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] = CSWAP64( val );

  00324	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  0032c	e8 00 00 00 00	 call	 _byteswap_uint64
  00331	b9 08 00 00 00	 mov	 ecx, 8
  00336	48 6b c9 01	 imul	 rcx, rcx, 1
  0033a	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00341	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  00347	8b d2		 mov	 edx, edx
  00349	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00351	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00356	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax
  0035a	eb 3d		 jmp	 SHORT $LN11@s390_cmpsc
$LN10@s390_cmpsc:

; 479  :             else
; 480  :                 store_dw( &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK],           val );

  0035c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  00364	e8 00 00 00 00	 call	 _byteswap_uint64
  00369	b9 08 00 00 00	 mov	 ecx, 8
  0036e	48 6b c9 01	 imul	 rcx, rcx, 1
  00372	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00379	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  0037f	8b d2		 mov	 edx, edx
  00381	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00389	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0038e	48 03 ca	 add	 rcx, rdx
  00391	48 8b d0	 mov	 rdx, rax
  00394	e8 00 00 00 00	 call	 store_dw_noswap
$LN11@s390_cmpsc:
$LN6@s390_cmpsc:

; 481  :         }
; 482  :     }

  00399	e9 5d 01 00 00	 jmp	 $LN4@s390_cmpsc
$LN3@s390_cmpsc:

; 483  :     else
; 484  :     {
; 485  :         U64 value = CSWAP64( val );

  0039e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  003a6	e8 00 00 00 00	 call	 _byteswap_uint64
  003ab	48 89 44 24 60	 mov	 QWORD PTR value$2[rsp], rax

; 486  :         U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  003b0	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  003b7	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  003bc	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  003c1	2b c8		 sub	 ecx, eax
  003c3	8b c1		 mov	 eax, ecx
  003c5	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 487  :         if (likely(!pMEMBLK->maddr[1]))

  003ca	b8 08 00 00 00	 mov	 eax, 8
  003cf	48 6b c0 01	 imul	 rax, rax, 1
  003d3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003db	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  003e1	75 0a		 jne	 SHORT $LN44@s390_cmpsc
  003e3	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv257[rsp], 1
  003eb	eb 08		 jmp	 SHORT $LN45@s390_cmpsc
$LN44@s390_cmpsc:
  003ed	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv257[rsp], 0
$LN45@s390_cmpsc:
  003f5	83 7c 24 58 00	 cmp	 DWORD PTR tv257[rsp], 0
  003fa	74 0a		 je	 SHORT $LN48@s390_cmpsc
  003fc	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv265[rsp], 1
  00404	eb 08		 jmp	 SHORT $LN49@s390_cmpsc
$LN48@s390_cmpsc:
  00406	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv265[rsp], 0
$LN49@s390_cmpsc:
  0040e	83 7c 24 5c 00	 cmp	 DWORD PTR tv265[rsp], 0
  00413	74 63		 je	 SHORT $LN12@s390_cmpsc

; 488  :         {
; 489  :             pMEMBLK->maddr[1] = MADDR

  00415	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0041d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00421	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00427	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0042f	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00433	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00437	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0043f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00447	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0044a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00452	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00456	ba 01 00 00 00	 mov	 edx, 1
  0045b	8b c8		 mov	 ecx, eax
  0045d	e8 00 00 00 00	 call	 s390_maddr_l
  00462	b9 08 00 00 00	 mov	 ecx, 8
  00467	48 6b c9 01	 imul	 rcx, rcx, 1
  0046b	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00473	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN12@s390_cmpsc:

; 490  :             (
; 491  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 492  :                 pMEMBLK->arn,
; 493  :                 pMEMBLK->regs,
; 494  :                 ACCTYPE_WRITE,  // (store)
; 495  :                 pMEMBLK->pkey
; 496  :             );
; 497  :         }
; 498  :         memcpy( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], (U8*)&value,            len1 );

  00478	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  0047d	b9 08 00 00 00	 mov	 ecx, 8
  00482	48 6b c9 00	 imul	 rcx, rcx, 0
  00486	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  0048d	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  00493	8b d2		 mov	 edx, edx
  00495	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0049d	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  004a2	48 03 ca	 add	 rcx, rdx
  004a5	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$2[rsp]
  004aa	48 8b f9	 mov	 rdi, rcx
  004ad	48 8b f2	 mov	 rsi, rdx
  004b0	8b c8		 mov	 ecx, eax
  004b2	f3 a4		 rep movsb

; 499  :         memcpy( &pMEMBLK->maddr[1][0],                         (U8*)&value + len1, 8 - len1 );

  004b4	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  004b9	b9 08 00 00 00	 mov	 ecx, 8
  004be	2b c8		 sub	 ecx, eax
  004c0	8b c1		 mov	 eax, ecx
  004c2	48 98		 cdqe
  004c4	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  004c9	48 8d 4c 0c 60	 lea	 rcx, QWORD PTR value$2[rsp+rcx]
  004ce	ba 08 00 00 00	 mov	 edx, 8
  004d3	48 6b d2 01	 imul	 rdx, rdx, 1
  004d7	bf 01 00 00 00	 mov	 edi, 1
  004dc	48 6b ff 00	 imul	 rdi, rdi, 0
  004e0	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR pMEMBLK$[rsp]
  004e8	48 03 7c 16 10	 add	 rdi, QWORD PTR [rsi+rdx+16]
  004ed	48 8b d7	 mov	 rdx, rdi
  004f0	48 8b fa	 mov	 rdi, rdx
  004f3	48 8b f1	 mov	 rsi, rcx
  004f6	48 8b c8	 mov	 rcx, rax
  004f9	f3 a4		 rep movsb
$LN4@s390_cmpsc:

; 500  :     }
; 501  : }

  004fb	48 83 c4 78	 add	 rsp, 120		; 00000078H
  004ff	5f		 pop	 rdi
  00500	5e		 pop	 rsi
  00501	c3		 ret	 0
s390_cmpsc_vstore8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv84 = 52
tv144 = 56
tv156 = 60
tv160 = 64
tv166 = 68
tv193 = 72
tv201 = 76
tv221 = 80
tv227 = 84
tv259 = 88
tv267 = 92
value$2 = 96
val$ = 144
addr$ = 152
pMEMBLK$ = 160
s390_cmpsc_vstore4 PROC

; 304  : {

$LN50:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	56		 push	 rsi
  0000e	57		 push	 rdi
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 305  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00013	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0001b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001e	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00024	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  0002b	23 c8		 and	 ecx, eax
  0002d	8b c1		 mov	 eax, ecx
  0002f	89 84 24 98 00
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 306  : 
; 307  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00036	b8 08 00 00 00	 mov	 eax, 8
  0003b	48 6b c0 00	 imul	 rax, rax, 0
  0003f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00047	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0004d	74 1f		 je	 SHORT $LN14@s390_cmpsc
  0004f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00056	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0005e	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  00062	72 0a		 jb	 SHORT $LN14@s390_cmpsc
  00064	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
  0006c	eb 08		 jmp	 SHORT $LN17@s390_cmpsc
$LN14@s390_cmpsc:
  0006e	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
$LN17@s390_cmpsc:
  00076	83 7c 24 34 00	 cmp	 DWORD PTR tv84[rsp], 0
  0007b	0f 84 8e 00 00
	00		 je	 $LN2@s390_cmpsc

; 308  :     {
; 309  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00081	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00088	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  0008d	8b c0		 mov	 eax, eax
  0008f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00097	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 310  :         pMEMBLK->maddr[1] = 0;

  0009b	b8 08 00 00 00	 mov	 eax, 8
  000a0	48 6b c0 01	 imul	 rax, rax, 1
  000a4	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000ac	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 311  :         pMEMBLK->maddr[0] = MADDR

  000b5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000bd	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000c1	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000c5	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000cd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000d5	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000d8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e0	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000e4	ba 01 00 00 00	 mov	 edx, 1
  000e9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000f1	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000f4	e8 00 00 00 00	 call	 s390_maddr_l
  000f9	b9 08 00 00 00	 mov	 ecx, 8
  000fe	48 6b c9 00	 imul	 rcx, rcx, 0
  00102	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0010a	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s390_cmpsc:

; 312  :         (
; 313  :             pMEMBLK->vpagebeg,
; 314  :             pMEMBLK->arn,
; 315  :             pMEMBLK->regs,
; 316  :             ACCTYPE_WRITE,  // (store)
; 317  :             pMEMBLK->pkey
; 318  :         );
; 319  :     }
; 320  :     if (NOCROSSPAGE( addr, 4 ))

  0010f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00116	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0011b	3d fb 0f 00 00	 cmp	 eax, 4091		; 00000ffbH
  00120	7f 0a		 jg	 SHORT $LN20@s390_cmpsc
  00122	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv144[rsp], 1
  0012a	eb 08		 jmp	 SHORT $LN21@s390_cmpsc
$LN20@s390_cmpsc:
  0012c	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN21@s390_cmpsc:
  00134	83 7c 24 38 00	 cmp	 DWORD PTR tv144[rsp], 0
  00139	0f 84 5c 02 00
	00		 je	 $LN3@s390_cmpsc

; 321  :     {
; 322  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  0013f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00146	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0014e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00152	48 81 c1 00 10
	00 00		 add	 rcx, 4096		; 00001000H
  00159	48 3b c1	 cmp	 rax, rcx
  0015c	73 0a		 jae	 SHORT $LN24@s390_cmpsc
  0015e	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv156[rsp], 1
  00166	eb 08		 jmp	 SHORT $LN25@s390_cmpsc
$LN24@s390_cmpsc:
  00168	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv156[rsp], 0
$LN25@s390_cmpsc:
  00170	83 7c 24 3c 00	 cmp	 DWORD PTR tv156[rsp], 0
  00175	0f 84 b9 00 00
	00		 je	 $LN5@s390_cmpsc

; 323  :         {
; 324  :             if (U32_ALIGNED( addr ))

  0017b	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00182	83 e0 03	 and	 eax, 3
  00185	85 c0		 test	 eax, eax
  00187	75 0a		 jne	 SHORT $LN26@s390_cmpsc
  00189	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv160[rsp], 1
  00191	eb 08		 jmp	 SHORT $LN27@s390_cmpsc
$LN26@s390_cmpsc:
  00193	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv160[rsp], 0
$LN27@s390_cmpsc:
  0019b	83 7c 24 40 00	 cmp	 DWORD PTR tv160[rsp], 0
  001a0	74 0a		 je	 SHORT $LN30@s390_cmpsc
  001a2	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv166[rsp], 1
  001aa	eb 08		 jmp	 SHORT $LN31@s390_cmpsc
$LN30@s390_cmpsc:
  001ac	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv166[rsp], 0
$LN31@s390_cmpsc:
  001b4	83 7c 24 44 00	 cmp	 DWORD PTR tv166[rsp], 0
  001b9	74 36		 je	 SHORT $LN7@s390_cmpsc

; 325  :                 *(U32*)   &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] = CSWAP32( val );

  001bb	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR val$[rsp]
  001c2	e8 00 00 00 00	 call	 _byteswap_ulong
  001c7	b9 08 00 00 00	 mov	 ecx, 8
  001cc	48 6b c9 00	 imul	 rcx, rcx, 0
  001d0	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  001d7	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  001dd	8b d2		 mov	 edx, edx
  001df	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001e7	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001ec	89 04 11	 mov	 DWORD PTR [rcx+rdx], eax
  001ef	eb 3e		 jmp	 SHORT $LN8@s390_cmpsc
$LN7@s390_cmpsc:

; 326  :             else
; 327  :                 store_dw( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],           val );

  001f1	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR val$[rsp]
  001f8	8b c8		 mov	 ecx, eax
  001fa	e8 00 00 00 00	 call	 _byteswap_uint64
  001ff	b9 08 00 00 00	 mov	 ecx, 8
  00204	48 6b c9 00	 imul	 rcx, rcx, 0
  00208	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  0020f	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  00215	8b d2		 mov	 edx, edx
  00217	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0021f	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00224	48 03 ca	 add	 rcx, rdx
  00227	48 8b d0	 mov	 rdx, rax
  0022a	e8 00 00 00 00	 call	 store_dw_noswap
$LN8@s390_cmpsc:

; 328  :         }

  0022f	e9 62 01 00 00	 jmp	 $LN6@s390_cmpsc
$LN5@s390_cmpsc:

; 329  :         else
; 330  :         {
; 331  :             if (unlikely(!pMEMBLK->maddr[1]))

  00234	b8 08 00 00 00	 mov	 eax, 8
  00239	48 6b c0 01	 imul	 rax, rax, 1
  0023d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00245	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0024b	75 0a		 jne	 SHORT $LN32@s390_cmpsc
  0024d	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv193[rsp], 1
  00255	eb 08		 jmp	 SHORT $LN33@s390_cmpsc
$LN32@s390_cmpsc:
  00257	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv193[rsp], 0
$LN33@s390_cmpsc:
  0025f	83 7c 24 48 00	 cmp	 DWORD PTR tv193[rsp], 0
  00264	74 0a		 je	 SHORT $LN36@s390_cmpsc
  00266	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv201[rsp], 1
  0026e	eb 08		 jmp	 SHORT $LN37@s390_cmpsc
$LN36@s390_cmpsc:
  00270	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv201[rsp], 0
$LN37@s390_cmpsc:
  00278	83 7c 24 4c 00	 cmp	 DWORD PTR tv201[rsp], 0
  0027d	74 63		 je	 SHORT $LN9@s390_cmpsc

; 332  :             {
; 333  :                 pMEMBLK->maddr[1] = MADDR

  0027f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00287	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0028b	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00291	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00299	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0029d	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  002a1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  002a9	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002b1	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  002b4	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002bc	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002c0	ba 01 00 00 00	 mov	 edx, 1
  002c5	8b c8		 mov	 ecx, eax
  002c7	e8 00 00 00 00	 call	 s390_maddr_l
  002cc	b9 08 00 00 00	 mov	 ecx, 8
  002d1	48 6b c9 01	 imul	 rcx, rcx, 1
  002d5	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002dd	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN9@s390_cmpsc:

; 334  :                 (
; 335  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 336  :                     pMEMBLK->arn,
; 337  :                     pMEMBLK->regs,
; 338  :                     ACCTYPE_WRITE,  // (store)
; 339  :                     pMEMBLK->pkey
; 340  :                 );
; 341  :             }
; 342  :             if (U32_ALIGNED( addr ))

  002e2	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  002e9	83 e0 03	 and	 eax, 3
  002ec	85 c0		 test	 eax, eax
  002ee	75 0a		 jne	 SHORT $LN38@s390_cmpsc
  002f0	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv221[rsp], 1
  002f8	eb 08		 jmp	 SHORT $LN39@s390_cmpsc
$LN38@s390_cmpsc:
  002fa	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv221[rsp], 0
$LN39@s390_cmpsc:
  00302	83 7c 24 50 00	 cmp	 DWORD PTR tv221[rsp], 0
  00307	74 0a		 je	 SHORT $LN42@s390_cmpsc
  00309	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv227[rsp], 1
  00311	eb 08		 jmp	 SHORT $LN43@s390_cmpsc
$LN42@s390_cmpsc:
  00313	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv227[rsp], 0
$LN43@s390_cmpsc:
  0031b	83 7c 24 54 00	 cmp	 DWORD PTR tv227[rsp], 0
  00320	74 36		 je	 SHORT $LN10@s390_cmpsc

; 343  :                 *(U32*)   &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] = CSWAP32( val );

  00322	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR val$[rsp]
  00329	e8 00 00 00 00	 call	 _byteswap_ulong
  0032e	b9 08 00 00 00	 mov	 ecx, 8
  00333	48 6b c9 01	 imul	 rcx, rcx, 1
  00337	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  0033e	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  00344	8b d2		 mov	 edx, edx
  00346	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0034e	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00353	89 04 11	 mov	 DWORD PTR [rcx+rdx], eax
  00356	eb 3e		 jmp	 SHORT $LN11@s390_cmpsc
$LN10@s390_cmpsc:

; 344  :             else
; 345  :                 store_dw( &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK],           val );

  00358	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR val$[rsp]
  0035f	8b c8		 mov	 ecx, eax
  00361	e8 00 00 00 00	 call	 _byteswap_uint64
  00366	b9 08 00 00 00	 mov	 ecx, 8
  0036b	48 6b c9 01	 imul	 rcx, rcx, 1
  0036f	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00376	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  0037c	8b d2		 mov	 edx, edx
  0037e	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00386	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0038b	48 03 ca	 add	 rcx, rdx
  0038e	48 8b d0	 mov	 rdx, rax
  00391	e8 00 00 00 00	 call	 store_dw_noswap
$LN11@s390_cmpsc:
$LN6@s390_cmpsc:

; 346  :         }
; 347  :     }

  00396	e9 5b 01 00 00	 jmp	 $LN4@s390_cmpsc
$LN3@s390_cmpsc:

; 348  :     else
; 349  :     {
; 350  :         U32 value = CSWAP32( val );

  0039b	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR val$[rsp]
  003a2	e8 00 00 00 00	 call	 _byteswap_ulong
  003a7	89 44 24 60	 mov	 DWORD PTR value$2[rsp], eax

; 351  :         U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  003ab	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  003b2	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  003b7	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  003bc	2b c8		 sub	 ecx, eax
  003be	8b c1		 mov	 eax, ecx
  003c0	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 352  :         if (likely(!pMEMBLK->maddr[1]))

  003c5	b8 08 00 00 00	 mov	 eax, 8
  003ca	48 6b c0 01	 imul	 rax, rax, 1
  003ce	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003d6	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  003dc	75 0a		 jne	 SHORT $LN44@s390_cmpsc
  003de	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv259[rsp], 1
  003e6	eb 08		 jmp	 SHORT $LN45@s390_cmpsc
$LN44@s390_cmpsc:
  003e8	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv259[rsp], 0
$LN45@s390_cmpsc:
  003f0	83 7c 24 58 00	 cmp	 DWORD PTR tv259[rsp], 0
  003f5	74 0a		 je	 SHORT $LN48@s390_cmpsc
  003f7	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv267[rsp], 1
  003ff	eb 08		 jmp	 SHORT $LN49@s390_cmpsc
$LN48@s390_cmpsc:
  00401	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv267[rsp], 0
$LN49@s390_cmpsc:
  00409	83 7c 24 5c 00	 cmp	 DWORD PTR tv267[rsp], 0
  0040e	74 63		 je	 SHORT $LN12@s390_cmpsc

; 353  :         {
; 354  :             pMEMBLK->maddr[1] = MADDR

  00410	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00418	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0041c	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00422	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0042a	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0042e	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00432	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0043a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00442	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00445	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0044d	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00451	ba 01 00 00 00	 mov	 edx, 1
  00456	8b c8		 mov	 ecx, eax
  00458	e8 00 00 00 00	 call	 s390_maddr_l
  0045d	b9 08 00 00 00	 mov	 ecx, 8
  00462	48 6b c9 01	 imul	 rcx, rcx, 1
  00466	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0046e	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN12@s390_cmpsc:

; 355  :             (
; 356  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 357  :                 pMEMBLK->arn,
; 358  :                 pMEMBLK->regs,
; 359  :                 ACCTYPE_WRITE,  // (store)
; 360  :                 pMEMBLK->pkey
; 361  :             );
; 362  :         }
; 363  :         memcpy( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], (U8*)&value,            len1 );

  00473	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00478	b9 08 00 00 00	 mov	 ecx, 8
  0047d	48 6b c9 00	 imul	 rcx, rcx, 0
  00481	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00488	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  0048e	8b d2		 mov	 edx, edx
  00490	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00498	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0049d	48 03 ca	 add	 rcx, rdx
  004a0	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$2[rsp]
  004a5	48 8b f9	 mov	 rdi, rcx
  004a8	48 8b f2	 mov	 rsi, rdx
  004ab	8b c8		 mov	 ecx, eax
  004ad	f3 a4		 rep movsb

; 364  :         memcpy( &pMEMBLK->maddr[1][0],                         (U8*)&value + len1, 4 - len1 );

  004af	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  004b4	b9 04 00 00 00	 mov	 ecx, 4
  004b9	2b c8		 sub	 ecx, eax
  004bb	8b c1		 mov	 eax, ecx
  004bd	48 98		 cdqe
  004bf	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  004c4	48 8d 4c 0c 60	 lea	 rcx, QWORD PTR value$2[rsp+rcx]
  004c9	ba 08 00 00 00	 mov	 edx, 8
  004ce	48 6b d2 01	 imul	 rdx, rdx, 1
  004d2	bf 01 00 00 00	 mov	 edi, 1
  004d7	48 6b ff 00	 imul	 rdi, rdi, 0
  004db	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR pMEMBLK$[rsp]
  004e3	48 03 7c 16 10	 add	 rdi, QWORD PTR [rsi+rdx+16]
  004e8	48 8b d7	 mov	 rdx, rdi
  004eb	48 8b fa	 mov	 rdi, rdx
  004ee	48 8b f1	 mov	 rsi, rcx
  004f1	48 8b c8	 mov	 rcx, rax
  004f4	f3 a4		 rep movsb
$LN4@s390_cmpsc:

; 365  :     }
; 366  : }

  004f6	48 83 c4 78	 add	 rsp, 120		; 00000078H
  004fa	5f		 pop	 rdi
  004fb	5e		 pop	 rsi
  004fc	c3		 ret	 0
s390_cmpsc_vstore4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
tv84 = 48
tv144 = 52
tv156 = 56
tv160 = 60
tv166 = 64
tv192 = 68
tv200 = 72
tv220 = 76
tv226 = 80
tv252 = 84
tv260 = 88
val$ = 112
addr$ = 120
pMEMBLK$ = 128
s390_cmpsc_vstore2 PROC

; 171  : {

$LN50:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 172  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00012	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0001a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001d	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00023	8b 4c 24 78	 mov	 ecx, DWORD PTR addr$[rsp]
  00027	23 c8		 and	 ecx, eax
  00029	8b c1		 mov	 eax, ecx
  0002b	89 44 24 78	 mov	 DWORD PTR addr$[rsp], eax

; 173  : 
; 174  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0002f	b8 08 00 00 00	 mov	 eax, 8
  00034	48 6b c0 00	 imul	 rax, rax, 0
  00038	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00040	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00046	74 1c		 je	 SHORT $LN14@s390_cmpsc
  00048	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  0004c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00054	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  00058	72 0a		 jb	 SHORT $LN14@s390_cmpsc
  0005a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
  00062	eb 08		 jmp	 SHORT $LN17@s390_cmpsc
$LN14@s390_cmpsc:
  00064	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
$LN17@s390_cmpsc:
  0006c	83 7c 24 30 00	 cmp	 DWORD PTR tv84[rsp], 0
  00071	0f 84 8b 00 00
	00		 je	 $LN2@s390_cmpsc

; 175  :     {
; 176  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00077	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  0007b	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  00080	8b c0		 mov	 eax, eax
  00082	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0008a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 177  :         pMEMBLK->maddr[1] = 0;

  0008e	b8 08 00 00 00	 mov	 eax, 8
  00093	48 6b c0 01	 imul	 rax, rax, 1
  00097	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0009f	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 178  :         pMEMBLK->maddr[0] = MADDR

  000a8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b0	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000b4	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000b8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c8	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000cb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000d3	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000d7	ba 01 00 00 00	 mov	 edx, 1
  000dc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e4	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000e7	e8 00 00 00 00	 call	 s390_maddr_l
  000ec	b9 08 00 00 00	 mov	 ecx, 8
  000f1	48 6b c9 00	 imul	 rcx, rcx, 0
  000f5	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000fd	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s390_cmpsc:

; 179  :         (
; 180  :             pMEMBLK->vpagebeg,
; 181  :             pMEMBLK->arn,
; 182  :             pMEMBLK->regs,
; 183  :             ACCTYPE_WRITE,  // (store)
; 184  :             pMEMBLK->pkey
; 185  :         );
; 186  :     }
; 187  :     if (!LASTBYTEOFPAGE( addr ))

  00102	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  00106	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0010b	3d ff 0f 00 00	 cmp	 eax, 4095		; 00000fffH
  00110	75 0a		 jne	 SHORT $LN20@s390_cmpsc
  00112	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv144[rsp], 1
  0011a	eb 08		 jmp	 SHORT $LN21@s390_cmpsc
$LN20@s390_cmpsc:
  0011c	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN21@s390_cmpsc:
  00124	83 7c 24 34 00	 cmp	 DWORD PTR tv144[rsp], 0
  00129	0f 85 3d 02 00
	00		 jne	 $LN3@s390_cmpsc

; 188  :     {
; 189  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  0012f	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  00133	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0013b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0013f	48 81 c1 00 10
	00 00		 add	 rcx, 4096		; 00001000H
  00146	48 3b c1	 cmp	 rax, rcx
  00149	73 0a		 jae	 SHORT $LN24@s390_cmpsc
  0014b	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv156[rsp], 1
  00153	eb 08		 jmp	 SHORT $LN25@s390_cmpsc
$LN24@s390_cmpsc:
  00155	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv156[rsp], 0
$LN25@s390_cmpsc:
  0015d	83 7c 24 38 00	 cmp	 DWORD PTR tv156[rsp], 0
  00162	0f 84 ab 00 00
	00		 je	 $LN5@s390_cmpsc

; 190  :         {
; 191  :             if (U16_ALIGNED( addr ))

  00168	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  0016c	83 e0 01	 and	 eax, 1
  0016f	85 c0		 test	 eax, eax
  00171	75 0a		 jne	 SHORT $LN26@s390_cmpsc
  00173	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv160[rsp], 1
  0017b	eb 08		 jmp	 SHORT $LN27@s390_cmpsc
$LN26@s390_cmpsc:
  0017d	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv160[rsp], 0
$LN27@s390_cmpsc:
  00185	83 7c 24 3c 00	 cmp	 DWORD PTR tv160[rsp], 0
  0018a	74 0a		 je	 SHORT $LN30@s390_cmpsc
  0018c	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv166[rsp], 1
  00194	eb 08		 jmp	 SHORT $LN31@s390_cmpsc
$LN30@s390_cmpsc:
  00196	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv166[rsp], 0
$LN31@s390_cmpsc:
  0019e	83 7c 24 40 00	 cmp	 DWORD PTR tv166[rsp], 0
  001a3	74 32		 je	 SHORT $LN7@s390_cmpsc

; 192  :                 *(U16*)   &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] = CSWAP16( val );

  001a5	0f b7 4c 24 70	 movzx	 ecx, WORD PTR val$[rsp]
  001aa	e8 00 00 00 00	 call	 _byteswap_ushort
  001af	b9 08 00 00 00	 mov	 ecx, 8
  001b4	48 6b c9 00	 imul	 rcx, rcx, 0
  001b8	8b 54 24 78	 mov	 edx, DWORD PTR addr$[rsp]
  001bc	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  001c2	8b d2		 mov	 edx, edx
  001c4	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001cc	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001d1	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  001d5	eb 37		 jmp	 SHORT $LN8@s390_cmpsc
$LN7@s390_cmpsc:

; 193  :             else
; 194  :                 store_hw( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],           val );

  001d7	0f b7 4c 24 70	 movzx	 ecx, WORD PTR val$[rsp]
  001dc	e8 00 00 00 00	 call	 _byteswap_ushort
  001e1	b9 08 00 00 00	 mov	 ecx, 8
  001e6	48 6b c9 00	 imul	 rcx, rcx, 0
  001ea	8b 54 24 78	 mov	 edx, DWORD PTR addr$[rsp]
  001ee	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  001f4	8b d2		 mov	 edx, edx
  001f6	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001fe	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00203	48 03 ca	 add	 rcx, rdx
  00206	0f b7 d0	 movzx	 edx, ax
  00209	e8 00 00 00 00	 call	 store_hw_noswap
$LN8@s390_cmpsc:

; 195  :         }

  0020e	e9 54 01 00 00	 jmp	 $LN6@s390_cmpsc
$LN5@s390_cmpsc:

; 196  :         else
; 197  :         {
; 198  :             if (unlikely(!pMEMBLK->maddr[1]))

  00213	b8 08 00 00 00	 mov	 eax, 8
  00218	48 6b c0 01	 imul	 rax, rax, 1
  0021c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00224	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0022a	75 0a		 jne	 SHORT $LN32@s390_cmpsc
  0022c	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv192[rsp], 1
  00234	eb 08		 jmp	 SHORT $LN33@s390_cmpsc
$LN32@s390_cmpsc:
  00236	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv192[rsp], 0
$LN33@s390_cmpsc:
  0023e	83 7c 24 44 00	 cmp	 DWORD PTR tv192[rsp], 0
  00243	74 0a		 je	 SHORT $LN36@s390_cmpsc
  00245	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv200[rsp], 1
  0024d	eb 08		 jmp	 SHORT $LN37@s390_cmpsc
$LN36@s390_cmpsc:
  0024f	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv200[rsp], 0
$LN37@s390_cmpsc:
  00257	83 7c 24 48 00	 cmp	 DWORD PTR tv200[rsp], 0
  0025c	74 63		 je	 SHORT $LN9@s390_cmpsc

; 199  :             {
; 200  :                 pMEMBLK->maddr[1] = MADDR

  0025e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00266	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0026a	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00270	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00278	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0027c	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00280	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00288	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00290	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00293	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0029b	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  0029f	ba 01 00 00 00	 mov	 edx, 1
  002a4	8b c8		 mov	 ecx, eax
  002a6	e8 00 00 00 00	 call	 s390_maddr_l
  002ab	b9 08 00 00 00	 mov	 ecx, 8
  002b0	48 6b c9 01	 imul	 rcx, rcx, 1
  002b4	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002bc	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN9@s390_cmpsc:

; 201  :                 (
; 202  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 203  :                     pMEMBLK->arn,
; 204  :                     pMEMBLK->regs,
; 205  :                     ACCTYPE_WRITE,  // (store)
; 206  :                     pMEMBLK->pkey
; 207  :                 );
; 208  :             }
; 209  :             if (U16_ALIGNED( addr ))

  002c1	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  002c5	83 e0 01	 and	 eax, 1
  002c8	85 c0		 test	 eax, eax
  002ca	75 0a		 jne	 SHORT $LN38@s390_cmpsc
  002cc	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv220[rsp], 1
  002d4	eb 08		 jmp	 SHORT $LN39@s390_cmpsc
$LN38@s390_cmpsc:
  002d6	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv220[rsp], 0
$LN39@s390_cmpsc:
  002de	83 7c 24 4c 00	 cmp	 DWORD PTR tv220[rsp], 0
  002e3	74 0a		 je	 SHORT $LN42@s390_cmpsc
  002e5	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv226[rsp], 1
  002ed	eb 08		 jmp	 SHORT $LN43@s390_cmpsc
$LN42@s390_cmpsc:
  002ef	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv226[rsp], 0
$LN43@s390_cmpsc:
  002f7	83 7c 24 50 00	 cmp	 DWORD PTR tv226[rsp], 0
  002fc	74 32		 je	 SHORT $LN10@s390_cmpsc

; 210  :                 *(U16*)   &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] = CSWAP16( val );

  002fe	0f b7 4c 24 70	 movzx	 ecx, WORD PTR val$[rsp]
  00303	e8 00 00 00 00	 call	 _byteswap_ushort
  00308	b9 08 00 00 00	 mov	 ecx, 8
  0030d	48 6b c9 01	 imul	 rcx, rcx, 1
  00311	8b 54 24 78	 mov	 edx, DWORD PTR addr$[rsp]
  00315	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  0031b	8b d2		 mov	 edx, edx
  0031d	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00325	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0032a	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  0032e	eb 37		 jmp	 SHORT $LN11@s390_cmpsc
$LN10@s390_cmpsc:

; 211  :             else
; 212  :                 store_hw( &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK],           val );

  00330	0f b7 4c 24 70	 movzx	 ecx, WORD PTR val$[rsp]
  00335	e8 00 00 00 00	 call	 _byteswap_ushort
  0033a	b9 08 00 00 00	 mov	 ecx, 8
  0033f	48 6b c9 01	 imul	 rcx, rcx, 1
  00343	8b 54 24 78	 mov	 edx, DWORD PTR addr$[rsp]
  00347	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  0034d	8b d2		 mov	 edx, edx
  0034f	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00357	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0035c	48 03 ca	 add	 rcx, rdx
  0035f	0f b7 d0	 movzx	 edx, ax
  00362	e8 00 00 00 00	 call	 store_hw_noswap
$LN11@s390_cmpsc:
$LN6@s390_cmpsc:

; 213  :         }
; 214  :     }

  00367	e9 02 01 00 00	 jmp	 $LN4@s390_cmpsc
$LN3@s390_cmpsc:

; 215  :     else
; 216  :     {
; 217  :         if (likely(!pMEMBLK->maddr[1]))

  0036c	b8 08 00 00 00	 mov	 eax, 8
  00371	48 6b c0 01	 imul	 rax, rax, 1
  00375	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0037d	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00383	75 0a		 jne	 SHORT $LN44@s390_cmpsc
  00385	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv252[rsp], 1
  0038d	eb 08		 jmp	 SHORT $LN45@s390_cmpsc
$LN44@s390_cmpsc:
  0038f	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv252[rsp], 0
$LN45@s390_cmpsc:
  00397	83 7c 24 54 00	 cmp	 DWORD PTR tv252[rsp], 0
  0039c	74 0a		 je	 SHORT $LN48@s390_cmpsc
  0039e	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv260[rsp], 1
  003a6	eb 08		 jmp	 SHORT $LN49@s390_cmpsc
$LN48@s390_cmpsc:
  003a8	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv260[rsp], 0
$LN49@s390_cmpsc:
  003b0	83 7c 24 58 00	 cmp	 DWORD PTR tv260[rsp], 0
  003b5	74 63		 je	 SHORT $LN12@s390_cmpsc

; 218  :         {
; 219  :             pMEMBLK->maddr[1] = MADDR

  003b7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  003bf	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003c3	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  003c9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003d1	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  003d5	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  003d9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  003e1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003e9	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  003ec	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003f4	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  003f8	ba 01 00 00 00	 mov	 edx, 1
  003fd	8b c8		 mov	 ecx, eax
  003ff	e8 00 00 00 00	 call	 s390_maddr_l
  00404	b9 08 00 00 00	 mov	 ecx, 8
  00409	48 6b c9 01	 imul	 rcx, rcx, 1
  0040d	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00415	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN12@s390_cmpsc:

; 220  :             (
; 221  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 222  :                 pMEMBLK->arn,
; 223  :                 pMEMBLK->regs,
; 224  :                 ACCTYPE_WRITE,  // (store)
; 225  :                 pMEMBLK->pkey
; 226  :             );
; 227  :         }
; 228  :         pMEMBLK->maddr[0][PAGEFRAME_BYTEMASK] = (U8)(val >> 8);

  0041a	0f b7 44 24 70	 movzx	 eax, WORD PTR val$[rsp]
  0041f	c1 f8 08	 sar	 eax, 8
  00422	b9 08 00 00 00	 mov	 ecx, 8
  00427	48 6b c9 00	 imul	 rcx, rcx, 0
  0042b	ba 01 00 00 00	 mov	 edx, 1
  00430	48 69 d2 ff 0f
	00 00		 imul	 rdx, rdx, 4095		; 00000fffH
  00437	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0043f	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00444	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 229  :         pMEMBLK->maddr[1][0]                  = (U8)(val     );

  00447	b8 08 00 00 00	 mov	 eax, 8
  0044c	48 6b c0 01	 imul	 rax, rax, 1
  00450	b9 01 00 00 00	 mov	 ecx, 1
  00455	48 6b c9 00	 imul	 rcx, rcx, 0
  00459	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00461	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00466	0f b6 54 24 70	 movzx	 edx, BYTE PTR val$[rsp]
  0046b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
$LN4@s390_cmpsc:

; 230  :     }
; 231  : }

  0046e	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00472	c3		 ret	 0
s390_cmpsc_vstore2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
tv84 = 48
tv148 = 52
tv161 = 56
tv169 = 60
byt$ = 80
addr$ = 88
pMEMBLK$ = 96
s390_cmpsc_vstoreb PROC

; 66   : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000d	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 67   :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00011	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00016	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00019	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0001f	8b 4c 24 58	 mov	 ecx, DWORD PTR addr$[rsp]
  00023	23 c8		 and	 ecx, eax
  00025	8b c1		 mov	 eax, ecx
  00027	89 44 24 58	 mov	 DWORD PTR addr$[rsp], eax

; 68   : 
; 69   :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0002b	b8 08 00 00 00	 mov	 eax, 8
  00030	48 6b c0 00	 imul	 rax, rax, 0
  00034	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00039	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0003f	74 19		 je	 SHORT $LN7@s390_cmpsc
  00041	8b 44 24 58	 mov	 eax, DWORD PTR addr$[rsp]
  00045	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0004a	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  0004e	72 0a		 jb	 SHORT $LN7@s390_cmpsc
  00050	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
  00058	eb 08		 jmp	 SHORT $LN10@s390_cmpsc
$LN7@s390_cmpsc:
  0005a	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
$LN10@s390_cmpsc:
  00062	83 7c 24 30 00	 cmp	 DWORD PTR tv84[rsp], 0
  00067	74 76		 je	 SHORT $LN2@s390_cmpsc

; 70   :     {
; 71   :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00069	8b 44 24 58	 mov	 eax, DWORD PTR addr$[rsp]
  0006d	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  00072	8b c0		 mov	 eax, eax
  00074	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00079	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 72   :         pMEMBLK->maddr[1] = 0;

  0007d	b8 08 00 00 00	 mov	 eax, 8
  00082	48 6b c0 01	 imul	 rax, rax, 1
  00086	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0008b	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 73   :         pMEMBLK->maddr[0] = MADDR

  00094	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00099	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  0009d	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000a1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000a9	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000ae	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000b1	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b6	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000ba	ba 01 00 00 00	 mov	 edx, 1
  000bf	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c4	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000c7	e8 00 00 00 00	 call	 s390_maddr_l
  000cc	b9 08 00 00 00	 mov	 ecx, 8
  000d1	48 6b c9 00	 imul	 rcx, rcx, 0
  000d5	48 8b 54 24 60	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000da	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s390_cmpsc:

; 74   :         (
; 75   :             pMEMBLK->vpagebeg,
; 76   :             pMEMBLK->arn,
; 77   :             pMEMBLK->regs,
; 78   :             ACCTYPE_WRITE,  // (store)
; 79   :             pMEMBLK->pkey
; 80   :         );
; 81   :     }
; 82   :     if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  000df	8b 44 24 58	 mov	 eax, DWORD PTR addr$[rsp]
  000e3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000e8	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000ec	48 81 c1 00 10
	00 00		 add	 rcx, 4096		; 00001000H
  000f3	48 3b c1	 cmp	 rax, rcx
  000f6	73 0a		 jae	 SHORT $LN13@s390_cmpsc
  000f8	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv148[rsp], 1
  00100	eb 08		 jmp	 SHORT $LN14@s390_cmpsc
$LN13@s390_cmpsc:
  00102	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
$LN14@s390_cmpsc:
  0010a	83 7c 24 34 00	 cmp	 DWORD PTR tv148[rsp], 0
  0010f	74 2c		 je	 SHORT $LN3@s390_cmpsc

; 83   :     {
; 84   :         pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] = byt;

  00111	b8 08 00 00 00	 mov	 eax, 8
  00116	48 6b c0 00	 imul	 rax, rax, 0
  0011a	8b 4c 24 58	 mov	 ecx, DWORD PTR addr$[rsp]
  0011e	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00124	8b c9		 mov	 ecx, ecx
  00126	48 8b 54 24 60	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0012b	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00130	0f b6 54 24 50	 movzx	 edx, BYTE PTR byt$[rsp]
  00135	88 14 08	 mov	 BYTE PTR [rax+rcx], dl

; 85   :     }

  00138	e9 c3 00 00 00	 jmp	 $LN4@s390_cmpsc
$LN3@s390_cmpsc:

; 86   :     else
; 87   :     {
; 88   :         if (unlikely(!pMEMBLK->maddr[1]))

  0013d	b8 08 00 00 00	 mov	 eax, 8
  00142	48 6b c0 01	 imul	 rax, rax, 1
  00146	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0014b	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00151	75 0a		 jne	 SHORT $LN15@s390_cmpsc
  00153	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv161[rsp], 1
  0015b	eb 08		 jmp	 SHORT $LN16@s390_cmpsc
$LN15@s390_cmpsc:
  0015d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv161[rsp], 0
$LN16@s390_cmpsc:
  00165	83 7c 24 38 00	 cmp	 DWORD PTR tv161[rsp], 0
  0016a	74 0a		 je	 SHORT $LN19@s390_cmpsc
  0016c	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv169[rsp], 1
  00174	eb 08		 jmp	 SHORT $LN20@s390_cmpsc
$LN19@s390_cmpsc:
  00176	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv169[rsp], 0
$LN20@s390_cmpsc:
  0017e	83 7c 24 3c 00	 cmp	 DWORD PTR tv169[rsp], 0
  00183	74 54		 je	 SHORT $LN5@s390_cmpsc

; 89   :         {
; 90   :             pMEMBLK->maddr[1] = MADDR

  00185	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0018a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0018e	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00194	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00199	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0019d	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  001a1	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  001a9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001ae	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  001b1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001b6	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  001ba	ba 01 00 00 00	 mov	 edx, 1
  001bf	8b c8		 mov	 ecx, eax
  001c1	e8 00 00 00 00	 call	 s390_maddr_l
  001c6	b9 08 00 00 00	 mov	 ecx, 8
  001cb	48 6b c9 01	 imul	 rcx, rcx, 1
  001cf	48 8b 54 24 60	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001d4	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN5@s390_cmpsc:

; 91   :             (
; 92   :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 93   :                 pMEMBLK->arn,
; 94   :                 pMEMBLK->regs,
; 95   :                 ACCTYPE_WRITE,  // (store)
; 96   :                 pMEMBLK->pkey
; 97   :             );
; 98   :         }
; 99   :         pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] = byt;

  001d9	b8 08 00 00 00	 mov	 eax, 8
  001de	48 6b c0 01	 imul	 rax, rax, 1
  001e2	8b 4c 24 58	 mov	 ecx, DWORD PTR addr$[rsp]
  001e6	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  001ec	8b c9		 mov	 ecx, ecx
  001ee	48 8b 54 24 60	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001f3	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001f8	0f b6 54 24 50	 movzx	 edx, BYTE PTR byt$[rsp]
  001fd	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
$LN4@s390_cmpsc:

; 100  :     }
; 101  : }

  00200	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00204	c3		 ret	 0
s390_cmpsc_vstoreb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv84 = 52
tv148 = 56
tv160 = 60
tv184 = 64
tv192 = 68
tv244 = 72
tv252 = 76
dst$ = 112
len$ = 120
addr$ = 128
pMEMBLK$ = 136
s390_cmpsc_vfetchc PROC

; 508  : {

$LN34:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 509  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0001a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0002b	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00032	23 c8		 and	 ecx, eax
  00034	8b c1		 mov	 eax, ecx
  00036	89 84 24 80 00
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 510  : 
; 511  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0003d	b8 08 00 00 00	 mov	 eax, 8
  00042	48 6b c0 00	 imul	 rax, rax, 0
  00046	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0004e	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00054	74 1f		 je	 SHORT $LN10@s390_cmpsc
  00056	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0005d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00065	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  00069	72 0a		 jb	 SHORT $LN10@s390_cmpsc
  0006b	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
  00073	eb 08		 jmp	 SHORT $LN13@s390_cmpsc
$LN10@s390_cmpsc:
  00075	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
$LN13@s390_cmpsc:
  0007d	83 7c 24 34 00	 cmp	 DWORD PTR tv84[rsp], 0
  00082	0f 84 8e 00 00
	00		 je	 $LN2@s390_cmpsc

; 512  :     {
; 513  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00088	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0008f	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  00094	8b c0		 mov	 eax, eax
  00096	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0009e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 514  :         pMEMBLK->maddr[1] = 0;

  000a2	b8 08 00 00 00	 mov	 eax, 8
  000a7	48 6b c0 01	 imul	 rax, rax, 1
  000ab	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000b3	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 515  :         pMEMBLK->maddr[0] = MADDR

  000bc	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c4	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000c8	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000cc	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000d4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000dc	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000df	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e7	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000eb	ba 01 00 00 00	 mov	 edx, 1
  000f0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000f8	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000fb	e8 00 00 00 00	 call	 s390_maddr_l
  00100	b9 08 00 00 00	 mov	 ecx, 8
  00105	48 6b c9 00	 imul	 rcx, rcx, 0
  00109	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00111	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s390_cmpsc:

; 516  :         (
; 517  :             pMEMBLK->vpagebeg,
; 518  :             pMEMBLK->arn,
; 519  :             pMEMBLK->regs,
; 520  :             ACCTYPE_READ,   // (fetch)
; 521  :             pMEMBLK->pkey
; 522  :         );
; 523  :     }
; 524  :     if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  00116	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0011d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00125	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00129	48 81 c1 00 10
	00 00		 add	 rcx, 4096		; 00001000H
  00130	48 3b c1	 cmp	 rax, rcx
  00133	73 0a		 jae	 SHORT $LN16@s390_cmpsc
  00135	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv148[rsp], 1
  0013d	eb 08		 jmp	 SHORT $LN17@s390_cmpsc
$LN16@s390_cmpsc:
  0013f	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
$LN17@s390_cmpsc:
  00147	83 7c 24 38 00	 cmp	 DWORD PTR tv148[rsp], 0
  0014c	0f 84 cd 01 00
	00		 je	 $LN3@s390_cmpsc

; 525  :     {
; 526  :         if (NOCROSSPAGE( addr, len ))

  00152	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00159	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0015e	0f b7 4c 24 78	 movzx	 ecx, WORD PTR len$[rsp]
  00163	ba ff 0f 00 00	 mov	 edx, 4095		; 00000fffH
  00168	2b d1		 sub	 edx, ecx
  0016a	8b ca		 mov	 ecx, edx
  0016c	3b c1		 cmp	 eax, ecx
  0016e	7f 0a		 jg	 SHORT $LN20@s390_cmpsc
  00170	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv160[rsp], 1
  00178	eb 08		 jmp	 SHORT $LN21@s390_cmpsc
$LN20@s390_cmpsc:
  0017a	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv160[rsp], 0
$LN21@s390_cmpsc:
  00182	83 7c 24 3c 00	 cmp	 DWORD PTR tv160[rsp], 0
  00187	74 43		 je	 SHORT $LN5@s390_cmpsc

; 527  :         {
; 528  :             memcpy( dst, &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], len+1 );

  00189	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  0018e	ff c0		 inc	 eax
  00190	48 98		 cdqe
  00192	b9 08 00 00 00	 mov	 ecx, 8
  00197	48 6b c9 00	 imul	 rcx, rcx, 0
  0019b	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  001a2	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  001a8	8b d2		 mov	 edx, edx
  001aa	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001b2	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001b7	48 03 ca	 add	 rcx, rdx
  001ba	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dst$[rsp]
  001bf	48 8b f1	 mov	 rsi, rcx
  001c2	48 8b c8	 mov	 rcx, rax
  001c5	f3 a4		 rep movsb

; 529  :         }

  001c7	e9 4e 01 00 00	 jmp	 $LN6@s390_cmpsc
$LN5@s390_cmpsc:

; 530  :         else
; 531  :         {
; 532  :             U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  001cc	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  001d3	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  001d8	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  001dd	2b c8		 sub	 ecx, eax
  001df	8b c1		 mov	 eax, ecx
  001e1	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 533  :             if (likely(!pMEMBLK->maddr[1]))

  001e6	b8 08 00 00 00	 mov	 eax, 8
  001eb	48 6b c0 01	 imul	 rax, rax, 1
  001ef	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001f7	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  001fd	75 0a		 jne	 SHORT $LN22@s390_cmpsc
  001ff	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv184[rsp], 1
  00207	eb 08		 jmp	 SHORT $LN23@s390_cmpsc
$LN22@s390_cmpsc:
  00209	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv184[rsp], 0
$LN23@s390_cmpsc:
  00211	83 7c 24 40 00	 cmp	 DWORD PTR tv184[rsp], 0
  00216	74 0a		 je	 SHORT $LN26@s390_cmpsc
  00218	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv192[rsp], 1
  00220	eb 08		 jmp	 SHORT $LN27@s390_cmpsc
$LN26@s390_cmpsc:
  00222	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv192[rsp], 0
$LN27@s390_cmpsc:
  0022a	83 7c 24 44 00	 cmp	 DWORD PTR tv192[rsp], 0
  0022f	74 63		 je	 SHORT $LN7@s390_cmpsc

; 534  :             {
; 535  :                 pMEMBLK->maddr[1] = MADDR

  00231	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00239	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0023d	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00243	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0024b	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0024f	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00253	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0025b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00263	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00266	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0026e	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00272	ba 01 00 00 00	 mov	 edx, 1
  00277	8b c8		 mov	 ecx, eax
  00279	e8 00 00 00 00	 call	 s390_maddr_l
  0027e	b9 08 00 00 00	 mov	 ecx, 8
  00283	48 6b c9 01	 imul	 rcx, rcx, 1
  00287	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0028f	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN7@s390_cmpsc:

; 536  :                 (
; 537  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 538  :                     pMEMBLK->arn,
; 539  :                     pMEMBLK->regs,
; 540  :                     ACCTYPE_READ,   // (fetch)
; 541  :                     pMEMBLK->pkey
; 542  :                 );
; 543  :             }
; 544  :             memcpy(  dst,         &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], len1 );

  00294	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00299	b9 08 00 00 00	 mov	 ecx, 8
  0029e	48 6b c9 00	 imul	 rcx, rcx, 0
  002a2	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  002a9	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  002af	8b d2		 mov	 edx, edx
  002b1	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  002b9	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  002be	48 03 ca	 add	 rcx, rdx
  002c1	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dst$[rsp]
  002c6	48 8b f1	 mov	 rsi, rcx
  002c9	8b c8		 mov	 ecx, eax
  002cb	f3 a4		 rep movsb

; 545  :             memcpy( (dst + len1), &pMEMBLK->maddr[1][0],        len+1     -      len1 );

  002cd	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  002d2	ff c0		 inc	 eax
  002d4	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  002d9	2b c1		 sub	 eax, ecx
  002db	48 98		 cdqe
  002dd	b9 08 00 00 00	 mov	 ecx, 8
  002e2	48 6b c9 01	 imul	 rcx, rcx, 1
  002e6	ba 01 00 00 00	 mov	 edx, 1
  002eb	48 6b d2 00	 imul	 rdx, rdx, 0
  002ef	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  002f7	48 03 54 0f 10	 add	 rdx, QWORD PTR [rdi+rcx+16]
  002fc	48 8b ca	 mov	 rcx, rdx
  002ff	0f b7 54 24 30	 movzx	 edx, WORD PTR len1$1[rsp]
  00304	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dst$[rsp]
  00309	48 03 fa	 add	 rdi, rdx
  0030c	48 8b d7	 mov	 rdx, rdi
  0030f	48 8b fa	 mov	 rdi, rdx
  00312	48 8b f1	 mov	 rsi, rcx
  00315	48 8b c8	 mov	 rcx, rax
  00318	f3 a4		 rep movsb
$LN6@s390_cmpsc:

; 546  :         }
; 547  :     }

  0031a	e9 ec 00 00 00	 jmp	 $LN4@s390_cmpsc
$LN3@s390_cmpsc:

; 548  :     else
; 549  :     {
; 550  :         if (unlikely(!pMEMBLK->maddr[1]))

  0031f	b8 08 00 00 00	 mov	 eax, 8
  00324	48 6b c0 01	 imul	 rax, rax, 1
  00328	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00330	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00336	75 0a		 jne	 SHORT $LN28@s390_cmpsc
  00338	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv244[rsp], 1
  00340	eb 08		 jmp	 SHORT $LN29@s390_cmpsc
$LN28@s390_cmpsc:
  00342	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv244[rsp], 0
$LN29@s390_cmpsc:
  0034a	83 7c 24 48 00	 cmp	 DWORD PTR tv244[rsp], 0
  0034f	74 0a		 je	 SHORT $LN32@s390_cmpsc
  00351	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv252[rsp], 1
  00359	eb 08		 jmp	 SHORT $LN33@s390_cmpsc
$LN32@s390_cmpsc:
  0035b	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv252[rsp], 0
$LN33@s390_cmpsc:
  00363	83 7c 24 4c 00	 cmp	 DWORD PTR tv252[rsp], 0
  00368	74 63		 je	 SHORT $LN8@s390_cmpsc

; 551  :         {
; 552  :             pMEMBLK->maddr[1] = MADDR

  0036a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00372	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00376	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0037c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00384	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00388	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0038c	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00394	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0039c	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0039f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003a7	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  003ab	ba 01 00 00 00	 mov	 edx, 1
  003b0	8b c8		 mov	 ecx, eax
  003b2	e8 00 00 00 00	 call	 s390_maddr_l
  003b7	b9 08 00 00 00	 mov	 ecx, 8
  003bc	48 6b c9 01	 imul	 rcx, rcx, 1
  003c0	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  003c8	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@s390_cmpsc:

; 553  :             (
; 554  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 555  :                 pMEMBLK->arn,
; 556  :                 pMEMBLK->regs,
; 557  :                 ACCTYPE_READ,   // (fetch)
; 558  :                 pMEMBLK->pkey
; 559  :             );
; 560  :         }
; 561  :         memcpy( dst, &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK], len+1 );

  003cd	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  003d2	ff c0		 inc	 eax
  003d4	48 98		 cdqe
  003d6	b9 08 00 00 00	 mov	 ecx, 8
  003db	48 6b c9 01	 imul	 rcx, rcx, 1
  003df	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  003e6	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  003ec	8b d2		 mov	 edx, edx
  003ee	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  003f6	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  003fb	48 03 ca	 add	 rcx, rdx
  003fe	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dst$[rsp]
  00403	48 8b f1	 mov	 rsi, rcx
  00406	48 8b c8	 mov	 rcx, rax
  00409	f3 a4		 rep movsb
$LN4@s390_cmpsc:

; 562  :     }
; 563  : }

  0040b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0040f	5f		 pop	 rdi
  00410	5e		 pop	 rsi
  00411	c3		 ret	 0
s390_cmpsc_vfetchc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv84 = 52
tv144 = 56
tv156 = 60
tv160 = 64
tv166 = 68
tv192 = 72
tv200 = 76
tv220 = 80
tv226 = 84
tv255 = 88
tv263 = 92
value$2 = 96
addr$ = 144
pMEMBLK$ = 152
s390_cmpsc_vfetch8 PROC

; 372  : {

$LN48:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 373  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0000f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00020	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00027	23 c8		 and	 ecx, eax
  00029	8b c1		 mov	 eax, ecx
  0002b	89 84 24 90 00
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 374  : 
; 375  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00032	b8 08 00 00 00	 mov	 eax, 8
  00037	48 6b c0 00	 imul	 rax, rax, 0
  0003b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00043	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00049	74 1f		 je	 SHORT $LN12@s390_cmpsc
  0004b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00052	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0005a	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  0005e	72 0a		 jb	 SHORT $LN12@s390_cmpsc
  00060	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
  00068	eb 08		 jmp	 SHORT $LN15@s390_cmpsc
$LN12@s390_cmpsc:
  0006a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
$LN15@s390_cmpsc:
  00072	83 7c 24 34 00	 cmp	 DWORD PTR tv84[rsp], 0
  00077	0f 84 8e 00 00
	00		 je	 $LN2@s390_cmpsc

; 376  :     {
; 377  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  0007d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00084	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  00089	8b c0		 mov	 eax, eax
  0008b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00093	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 378  :         pMEMBLK->maddr[1] = 0;

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000a8	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 379  :         pMEMBLK->maddr[0] = MADDR

  000b1	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b9	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000bd	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000c1	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000c9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000d1	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000d4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000dc	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000e0	ba 01 00 00 00	 mov	 edx, 1
  000e5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000ed	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000f0	e8 00 00 00 00	 call	 s390_maddr_l
  000f5	b9 08 00 00 00	 mov	 ecx, 8
  000fa	48 6b c9 00	 imul	 rcx, rcx, 0
  000fe	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00106	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s390_cmpsc:

; 380  :         (
; 381  :             pMEMBLK->vpagebeg,
; 382  :             pMEMBLK->arn,
; 383  :             pMEMBLK->regs,
; 384  :             ACCTYPE_READ,   // (fetch)
; 385  :             pMEMBLK->pkey
; 386  :         );
; 387  :     }
; 388  :     if (NOCROSSPAGE( addr, 8 ))

  0010b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00112	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00117	3d f7 0f 00 00	 cmp	 eax, 4087		; 00000ff7H
  0011c	7f 0a		 jg	 SHORT $LN18@s390_cmpsc
  0011e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv144[rsp], 1
  00126	eb 08		 jmp	 SHORT $LN19@s390_cmpsc
$LN18@s390_cmpsc:
  00128	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN19@s390_cmpsc:
  00130	83 7c 24 38 00	 cmp	 DWORD PTR tv144[rsp], 0
  00135	0f 84 54 02 00
	00		 je	 $LN3@s390_cmpsc

; 389  :     {
; 390  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  0013b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00142	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0014a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0014e	48 81 c1 00 10
	00 00		 add	 rcx, 4096		; 00001000H
  00155	48 3b c1	 cmp	 rax, rcx
  00158	73 0a		 jae	 SHORT $LN22@s390_cmpsc
  0015a	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv156[rsp], 1
  00162	eb 08		 jmp	 SHORT $LN23@s390_cmpsc
$LN22@s390_cmpsc:
  00164	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv156[rsp], 0
$LN23@s390_cmpsc:
  0016c	83 7c 24 3c 00	 cmp	 DWORD PTR tv156[rsp], 0
  00171	0f 84 b5 00 00
	00		 je	 $LN5@s390_cmpsc

; 391  :         {
; 392  :             if (U64_ALIGNED( addr ))

  00177	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0017e	83 e0 07	 and	 eax, 7
  00181	85 c0		 test	 eax, eax
  00183	75 0a		 jne	 SHORT $LN24@s390_cmpsc
  00185	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv160[rsp], 1
  0018d	eb 08		 jmp	 SHORT $LN25@s390_cmpsc
$LN24@s390_cmpsc:
  0018f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv160[rsp], 0
$LN25@s390_cmpsc:
  00197	83 7c 24 40 00	 cmp	 DWORD PTR tv160[rsp], 0
  0019c	74 0a		 je	 SHORT $LN28@s390_cmpsc
  0019e	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv166[rsp], 1
  001a6	eb 08		 jmp	 SHORT $LN29@s390_cmpsc
$LN28@s390_cmpsc:
  001a8	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv166[rsp], 0
$LN29@s390_cmpsc:
  001b0	83 7c 24 44 00	 cmp	 DWORD PTR tv166[rsp], 0
  001b5	74 33		 je	 SHORT $LN7@s390_cmpsc

; 393  :                 return CSWAP64( *(U64*) &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001b7	b8 08 00 00 00	 mov	 eax, 8
  001bc	48 6b c0 00	 imul	 rax, rax, 0
  001c0	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  001c7	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  001cd	8b c9		 mov	 ecx, ecx
  001cf	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001d7	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001dc	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  001e0	e8 00 00 00 00	 call	 _byteswap_uint64
  001e5	e9 fa 02 00 00	 jmp	 $LN1@s390_cmpsc
$LN7@s390_cmpsc:

; 394  :             return fetch_dw(            &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001ea	b8 08 00 00 00	 mov	 eax, 8
  001ef	48 6b c0 00	 imul	 rax, rax, 0
  001f3	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  001fa	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00200	8b c9		 mov	 ecx, ecx
  00202	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0020a	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0020f	48 03 c1	 add	 rax, rcx
  00212	48 8b c8	 mov	 rcx, rax
  00215	e8 00 00 00 00	 call	 fetch_dw_noswap
  0021a	48 8b c8	 mov	 rcx, rax
  0021d	e8 00 00 00 00	 call	 _byteswap_uint64
  00222	e9 bd 02 00 00	 jmp	 $LN1@s390_cmpsc

; 395  :         }

  00227	e9 5e 01 00 00	 jmp	 $LN6@s390_cmpsc
$LN5@s390_cmpsc:

; 396  :         else
; 397  :         {
; 398  :             if (unlikely(!pMEMBLK->maddr[1]))

  0022c	b8 08 00 00 00	 mov	 eax, 8
  00231	48 6b c0 01	 imul	 rax, rax, 1
  00235	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0023d	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00243	75 0a		 jne	 SHORT $LN30@s390_cmpsc
  00245	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv192[rsp], 1
  0024d	eb 08		 jmp	 SHORT $LN31@s390_cmpsc
$LN30@s390_cmpsc:
  0024f	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv192[rsp], 0
$LN31@s390_cmpsc:
  00257	83 7c 24 48 00	 cmp	 DWORD PTR tv192[rsp], 0
  0025c	74 0a		 je	 SHORT $LN34@s390_cmpsc
  0025e	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv200[rsp], 1
  00266	eb 08		 jmp	 SHORT $LN35@s390_cmpsc
$LN34@s390_cmpsc:
  00268	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv200[rsp], 0
$LN35@s390_cmpsc:
  00270	83 7c 24 4c 00	 cmp	 DWORD PTR tv200[rsp], 0
  00275	74 63		 je	 SHORT $LN8@s390_cmpsc

; 399  :             {
; 400  :                 pMEMBLK->maddr[1] = MADDR

  00277	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0027f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00283	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00289	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00291	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00295	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00299	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  002a1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002a9	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  002ac	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002b4	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002b8	ba 01 00 00 00	 mov	 edx, 1
  002bd	8b c8		 mov	 ecx, eax
  002bf	e8 00 00 00 00	 call	 s390_maddr_l
  002c4	b9 08 00 00 00	 mov	 ecx, 8
  002c9	48 6b c9 01	 imul	 rcx, rcx, 1
  002cd	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002d5	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@s390_cmpsc:

; 401  :                 (
; 402  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 403  :                     pMEMBLK->arn,
; 404  :                     pMEMBLK->regs,
; 405  :                     ACCTYPE_READ,   // (fetch)
; 406  :                     pMEMBLK->pkey
; 407  :                 );
; 408  :             }
; 409  :             if (U64_ALIGNED( addr ))

  002da	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  002e1	83 e0 07	 and	 eax, 7
  002e4	85 c0		 test	 eax, eax
  002e6	75 0a		 jne	 SHORT $LN36@s390_cmpsc
  002e8	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv220[rsp], 1
  002f0	eb 08		 jmp	 SHORT $LN37@s390_cmpsc
$LN36@s390_cmpsc:
  002f2	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv220[rsp], 0
$LN37@s390_cmpsc:
  002fa	83 7c 24 50 00	 cmp	 DWORD PTR tv220[rsp], 0
  002ff	74 0a		 je	 SHORT $LN40@s390_cmpsc
  00301	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv226[rsp], 1
  00309	eb 08		 jmp	 SHORT $LN41@s390_cmpsc
$LN40@s390_cmpsc:
  0030b	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv226[rsp], 0
$LN41@s390_cmpsc:
  00313	83 7c 24 54 00	 cmp	 DWORD PTR tv226[rsp], 0
  00318	74 33		 je	 SHORT $LN9@s390_cmpsc

; 410  :                 return CSWAP64( *(U64*) &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  0031a	b8 08 00 00 00	 mov	 eax, 8
  0031f	48 6b c0 01	 imul	 rax, rax, 1
  00323	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  0032a	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00330	8b c9		 mov	 ecx, ecx
  00332	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0033a	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0033f	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00343	e8 00 00 00 00	 call	 _byteswap_uint64
  00348	e9 97 01 00 00	 jmp	 $LN1@s390_cmpsc
$LN9@s390_cmpsc:

; 411  :             return fetch_dw(            &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  0034d	b8 08 00 00 00	 mov	 eax, 8
  00352	48 6b c0 01	 imul	 rax, rax, 1
  00356	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  0035d	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00363	8b c9		 mov	 ecx, ecx
  00365	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0036d	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00372	48 03 c1	 add	 rax, rcx
  00375	48 8b c8	 mov	 rcx, rax
  00378	e8 00 00 00 00	 call	 fetch_dw_noswap
  0037d	48 8b c8	 mov	 rcx, rax
  00380	e8 00 00 00 00	 call	 _byteswap_uint64
  00385	e9 5a 01 00 00	 jmp	 $LN1@s390_cmpsc
$LN6@s390_cmpsc:

; 412  :         }
; 413  :     }

  0038a	e9 55 01 00 00	 jmp	 $LN4@s390_cmpsc
$LN3@s390_cmpsc:

; 414  :     else
; 415  :     {
; 416  :         U64 value;
; 417  :         U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  0038f	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00396	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  0039b	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  003a0	2b c8		 sub	 ecx, eax
  003a2	8b c1		 mov	 eax, ecx
  003a4	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 418  :         if (likely(!pMEMBLK->maddr[1]))

  003a9	b8 08 00 00 00	 mov	 eax, 8
  003ae	48 6b c0 01	 imul	 rax, rax, 1
  003b2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003ba	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  003c0	75 0a		 jne	 SHORT $LN42@s390_cmpsc
  003c2	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv255[rsp], 1
  003ca	eb 08		 jmp	 SHORT $LN43@s390_cmpsc
$LN42@s390_cmpsc:
  003cc	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv255[rsp], 0
$LN43@s390_cmpsc:
  003d4	83 7c 24 58 00	 cmp	 DWORD PTR tv255[rsp], 0
  003d9	74 0a		 je	 SHORT $LN46@s390_cmpsc
  003db	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv263[rsp], 1
  003e3	eb 08		 jmp	 SHORT $LN47@s390_cmpsc
$LN46@s390_cmpsc:
  003e5	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv263[rsp], 0
$LN47@s390_cmpsc:
  003ed	83 7c 24 5c 00	 cmp	 DWORD PTR tv263[rsp], 0
  003f2	74 63		 je	 SHORT $LN10@s390_cmpsc

; 419  :         {
; 420  :             pMEMBLK->maddr[1] = MADDR

  003f4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  003fc	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00400	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00406	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0040e	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00412	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00416	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0041e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00426	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00429	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00431	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00435	ba 01 00 00 00	 mov	 edx, 1
  0043a	8b c8		 mov	 ecx, eax
  0043c	e8 00 00 00 00	 call	 s390_maddr_l
  00441	b9 08 00 00 00	 mov	 ecx, 8
  00446	48 6b c9 01	 imul	 rcx, rcx, 1
  0044a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00452	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN10@s390_cmpsc:

; 421  :             (
; 422  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 423  :                 pMEMBLK->arn,
; 424  :                 pMEMBLK->regs,
; 425  :                 ACCTYPE_READ,   // (fetch)
; 426  :                 pMEMBLK->pkey
; 427  :             );
; 428  :         }
; 429  :         memcpy( (U8*)&value,        &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],     len1 );

  00457	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  0045c	b9 08 00 00 00	 mov	 ecx, 8
  00461	48 6b c9 00	 imul	 rcx, rcx, 0
  00465	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  0046c	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  00472	8b d2		 mov	 edx, edx
  00474	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0047c	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00481	48 03 ca	 add	 rcx, rdx
  00484	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$2[rsp]
  00489	48 8b fa	 mov	 rdi, rdx
  0048c	48 8b f1	 mov	 rsi, rcx
  0048f	8b c8		 mov	 ecx, eax
  00491	f3 a4		 rep movsb

; 430  :         memcpy( (U8*)&value + len1, &pMEMBLK->maddr[1][0],                         8 - len1 );

  00493	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00498	b9 08 00 00 00	 mov	 ecx, 8
  0049d	2b c8		 sub	 ecx, eax
  0049f	8b c1		 mov	 eax, ecx
  004a1	48 98		 cdqe
  004a3	b9 08 00 00 00	 mov	 ecx, 8
  004a8	48 6b c9 01	 imul	 rcx, rcx, 1
  004ac	ba 01 00 00 00	 mov	 edx, 1
  004b1	48 6b d2 00	 imul	 rdx, rdx, 0
  004b5	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  004bd	48 03 54 0f 10	 add	 rdx, QWORD PTR [rdi+rcx+16]
  004c2	48 8b ca	 mov	 rcx, rdx
  004c5	0f b7 54 24 30	 movzx	 edx, WORD PTR len1$1[rsp]
  004ca	48 8d 54 14 60	 lea	 rdx, QWORD PTR value$2[rsp+rdx]
  004cf	48 8b fa	 mov	 rdi, rdx
  004d2	48 8b f1	 mov	 rsi, rcx
  004d5	48 8b c8	 mov	 rcx, rax
  004d8	f3 a4		 rep movsb

; 431  :         return CSWAP64( value );

  004da	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$2[rsp]
  004df	e8 00 00 00 00	 call	 _byteswap_uint64
$LN4@s390_cmpsc:
$LN1@s390_cmpsc:

; 432  :     }
; 433  : }

  004e4	48 83 c4 78	 add	 rsp, 120		; 00000078H
  004e8	5f		 pop	 rdi
  004e9	5e		 pop	 rsi
  004ea	c3		 ret	 0
s390_cmpsc_vfetch8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv84 = 52
tv144 = 56
tv156 = 60
tv160 = 64
tv166 = 68
tv192 = 72
tv200 = 76
tv220 = 80
tv226 = 84
tv255 = 88
tv263 = 92
value$2 = 96
addr$ = 144
pMEMBLK$ = 152
s390_cmpsc_vfetch4 PROC

; 237  : {

$LN48:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 238  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0000f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00017	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001a	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  00020	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00027	23 c8		 and	 ecx, eax
  00029	8b c1		 mov	 eax, ecx
  0002b	89 84 24 90 00
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 239  : 
; 240  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00032	b8 08 00 00 00	 mov	 eax, 8
  00037	48 6b c0 00	 imul	 rax, rax, 0
  0003b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00043	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00049	74 1f		 je	 SHORT $LN12@s390_cmpsc
  0004b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00052	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0005a	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  0005e	72 0a		 jb	 SHORT $LN12@s390_cmpsc
  00060	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
  00068	eb 08		 jmp	 SHORT $LN15@s390_cmpsc
$LN12@s390_cmpsc:
  0006a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
$LN15@s390_cmpsc:
  00072	83 7c 24 34 00	 cmp	 DWORD PTR tv84[rsp], 0
  00077	0f 84 8e 00 00
	00		 je	 $LN2@s390_cmpsc

; 241  :     {
; 242  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  0007d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00084	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  00089	8b c0		 mov	 eax, eax
  0008b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00093	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 243  :         pMEMBLK->maddr[1] = 0;

  00097	b8 08 00 00 00	 mov	 eax, 8
  0009c	48 6b c0 01	 imul	 rax, rax, 1
  000a0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000a8	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 244  :         pMEMBLK->maddr[0] = MADDR

  000b1	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b9	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000bd	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000c1	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000c9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000d1	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000d4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000dc	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000e0	ba 01 00 00 00	 mov	 edx, 1
  000e5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000ed	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000f0	e8 00 00 00 00	 call	 s390_maddr_l
  000f5	b9 08 00 00 00	 mov	 ecx, 8
  000fa	48 6b c9 00	 imul	 rcx, rcx, 0
  000fe	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00106	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s390_cmpsc:

; 245  :         (
; 246  :             pMEMBLK->vpagebeg,
; 247  :             pMEMBLK->arn,
; 248  :             pMEMBLK->regs,
; 249  :             ACCTYPE_READ,   // (fetch)
; 250  :             pMEMBLK->pkey
; 251  :         );
; 252  :     }
; 253  :     if (NOCROSSPAGE( addr, 4 ))

  0010b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00112	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00117	3d fb 0f 00 00	 cmp	 eax, 4091		; 00000ffbH
  0011c	7f 0a		 jg	 SHORT $LN18@s390_cmpsc
  0011e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv144[rsp], 1
  00126	eb 08		 jmp	 SHORT $LN19@s390_cmpsc
$LN18@s390_cmpsc:
  00128	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN19@s390_cmpsc:
  00130	83 7c 24 38 00	 cmp	 DWORD PTR tv144[rsp], 0
  00135	0f 84 50 02 00
	00		 je	 $LN3@s390_cmpsc

; 254  :     {
; 255  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  0013b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00142	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0014a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0014e	48 81 c1 00 10
	00 00		 add	 rcx, 4096		; 00001000H
  00155	48 3b c1	 cmp	 rax, rcx
  00158	73 0a		 jae	 SHORT $LN22@s390_cmpsc
  0015a	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv156[rsp], 1
  00162	eb 08		 jmp	 SHORT $LN23@s390_cmpsc
$LN22@s390_cmpsc:
  00164	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv156[rsp], 0
$LN23@s390_cmpsc:
  0016c	83 7c 24 3c 00	 cmp	 DWORD PTR tv156[rsp], 0
  00171	0f 84 b3 00 00
	00		 je	 $LN5@s390_cmpsc

; 256  :         {
; 257  :             if (U32_ALIGNED( addr ))

  00177	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0017e	83 e0 03	 and	 eax, 3
  00181	85 c0		 test	 eax, eax
  00183	75 0a		 jne	 SHORT $LN24@s390_cmpsc
  00185	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv160[rsp], 1
  0018d	eb 08		 jmp	 SHORT $LN25@s390_cmpsc
$LN24@s390_cmpsc:
  0018f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv160[rsp], 0
$LN25@s390_cmpsc:
  00197	83 7c 24 40 00	 cmp	 DWORD PTR tv160[rsp], 0
  0019c	74 0a		 je	 SHORT $LN28@s390_cmpsc
  0019e	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv166[rsp], 1
  001a6	eb 08		 jmp	 SHORT $LN29@s390_cmpsc
$LN28@s390_cmpsc:
  001a8	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv166[rsp], 0
$LN29@s390_cmpsc:
  001b0	83 7c 24 44 00	 cmp	 DWORD PTR tv166[rsp], 0
  001b5	74 32		 je	 SHORT $LN7@s390_cmpsc

; 258  :                 return CSWAP32( *(U32*) &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001b7	b8 08 00 00 00	 mov	 eax, 8
  001bc	48 6b c0 00	 imul	 rax, rax, 0
  001c0	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  001c7	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  001cd	8b c9		 mov	 ecx, ecx
  001cf	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001d7	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001dc	8b 0c 08	 mov	 ecx, DWORD PTR [rax+rcx]
  001df	e8 00 00 00 00	 call	 _byteswap_ulong
  001e4	e9 f6 02 00 00	 jmp	 $LN1@s390_cmpsc
$LN7@s390_cmpsc:

; 259  :             return fetch_fw(            &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001e9	b8 08 00 00 00	 mov	 eax, 8
  001ee	48 6b c0 00	 imul	 rax, rax, 0
  001f2	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  001f9	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  001ff	8b c9		 mov	 ecx, ecx
  00201	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00209	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0020e	48 03 c1	 add	 rax, rcx
  00211	48 8b c8	 mov	 rcx, rax
  00214	e8 00 00 00 00	 call	 fetch_fw_noswap
  00219	8b c8		 mov	 ecx, eax
  0021b	e8 00 00 00 00	 call	 _byteswap_ulong
  00220	e9 ba 02 00 00	 jmp	 $LN1@s390_cmpsc

; 260  :         }

  00225	e9 5c 01 00 00	 jmp	 $LN6@s390_cmpsc
$LN5@s390_cmpsc:

; 261  :         else
; 262  :         {
; 263  :             if (unlikely(!pMEMBLK->maddr[1]))

  0022a	b8 08 00 00 00	 mov	 eax, 8
  0022f	48 6b c0 01	 imul	 rax, rax, 1
  00233	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0023b	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00241	75 0a		 jne	 SHORT $LN30@s390_cmpsc
  00243	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv192[rsp], 1
  0024b	eb 08		 jmp	 SHORT $LN31@s390_cmpsc
$LN30@s390_cmpsc:
  0024d	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv192[rsp], 0
$LN31@s390_cmpsc:
  00255	83 7c 24 48 00	 cmp	 DWORD PTR tv192[rsp], 0
  0025a	74 0a		 je	 SHORT $LN34@s390_cmpsc
  0025c	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv200[rsp], 1
  00264	eb 08		 jmp	 SHORT $LN35@s390_cmpsc
$LN34@s390_cmpsc:
  00266	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv200[rsp], 0
$LN35@s390_cmpsc:
  0026e	83 7c 24 4c 00	 cmp	 DWORD PTR tv200[rsp], 0
  00273	74 63		 je	 SHORT $LN8@s390_cmpsc

; 264  :             {
; 265  :                 pMEMBLK->maddr[1] = MADDR

  00275	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0027d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00281	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00287	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0028f	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00293	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00297	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0029f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002a7	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  002aa	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002b2	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002b6	ba 01 00 00 00	 mov	 edx, 1
  002bb	8b c8		 mov	 ecx, eax
  002bd	e8 00 00 00 00	 call	 s390_maddr_l
  002c2	b9 08 00 00 00	 mov	 ecx, 8
  002c7	48 6b c9 01	 imul	 rcx, rcx, 1
  002cb	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002d3	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@s390_cmpsc:

; 266  :                 (
; 267  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 268  :                     pMEMBLK->arn,
; 269  :                     pMEMBLK->regs,
; 270  :                     ACCTYPE_READ,   // (fetch)
; 271  :                     pMEMBLK->pkey
; 272  :                 );
; 273  :             }
; 274  :             if (U32_ALIGNED( addr ))

  002d8	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  002df	83 e0 03	 and	 eax, 3
  002e2	85 c0		 test	 eax, eax
  002e4	75 0a		 jne	 SHORT $LN36@s390_cmpsc
  002e6	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv220[rsp], 1
  002ee	eb 08		 jmp	 SHORT $LN37@s390_cmpsc
$LN36@s390_cmpsc:
  002f0	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv220[rsp], 0
$LN37@s390_cmpsc:
  002f8	83 7c 24 50 00	 cmp	 DWORD PTR tv220[rsp], 0
  002fd	74 0a		 je	 SHORT $LN40@s390_cmpsc
  002ff	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv226[rsp], 1
  00307	eb 08		 jmp	 SHORT $LN41@s390_cmpsc
$LN40@s390_cmpsc:
  00309	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv226[rsp], 0
$LN41@s390_cmpsc:
  00311	83 7c 24 54 00	 cmp	 DWORD PTR tv226[rsp], 0
  00316	74 32		 je	 SHORT $LN9@s390_cmpsc

; 275  :                 return CSWAP32( *(U32*) &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  00318	b8 08 00 00 00	 mov	 eax, 8
  0031d	48 6b c0 01	 imul	 rax, rax, 1
  00321	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00328	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  0032e	8b c9		 mov	 ecx, ecx
  00330	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00338	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0033d	8b 0c 08	 mov	 ecx, DWORD PTR [rax+rcx]
  00340	e8 00 00 00 00	 call	 _byteswap_ulong
  00345	e9 95 01 00 00	 jmp	 $LN1@s390_cmpsc
$LN9@s390_cmpsc:

; 276  :             return fetch_fw(            &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  0034a	b8 08 00 00 00	 mov	 eax, 8
  0034f	48 6b c0 01	 imul	 rax, rax, 1
  00353	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  0035a	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00360	8b c9		 mov	 ecx, ecx
  00362	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0036a	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0036f	48 03 c1	 add	 rax, rcx
  00372	48 8b c8	 mov	 rcx, rax
  00375	e8 00 00 00 00	 call	 fetch_fw_noswap
  0037a	8b c8		 mov	 ecx, eax
  0037c	e8 00 00 00 00	 call	 _byteswap_ulong
  00381	e9 59 01 00 00	 jmp	 $LN1@s390_cmpsc
$LN6@s390_cmpsc:

; 277  :         }
; 278  :     }

  00386	e9 54 01 00 00	 jmp	 $LN4@s390_cmpsc
$LN3@s390_cmpsc:

; 279  :     else
; 280  :     {
; 281  :         U32 value;
; 282  :         U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  0038b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00392	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00397	b9 00 10 00 00	 mov	 ecx, 4096		; 00001000H
  0039c	2b c8		 sub	 ecx, eax
  0039e	8b c1		 mov	 eax, ecx
  003a0	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 283  :         if (likely(!pMEMBLK->maddr[1]))

  003a5	b8 08 00 00 00	 mov	 eax, 8
  003aa	48 6b c0 01	 imul	 rax, rax, 1
  003ae	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003b6	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  003bc	75 0a		 jne	 SHORT $LN42@s390_cmpsc
  003be	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv255[rsp], 1
  003c6	eb 08		 jmp	 SHORT $LN43@s390_cmpsc
$LN42@s390_cmpsc:
  003c8	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv255[rsp], 0
$LN43@s390_cmpsc:
  003d0	83 7c 24 58 00	 cmp	 DWORD PTR tv255[rsp], 0
  003d5	74 0a		 je	 SHORT $LN46@s390_cmpsc
  003d7	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv263[rsp], 1
  003df	eb 08		 jmp	 SHORT $LN47@s390_cmpsc
$LN46@s390_cmpsc:
  003e1	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv263[rsp], 0
$LN47@s390_cmpsc:
  003e9	83 7c 24 5c 00	 cmp	 DWORD PTR tv263[rsp], 0
  003ee	74 63		 je	 SHORT $LN10@s390_cmpsc

; 284  :         {
; 285  :             pMEMBLK->maddr[1] = MADDR

  003f0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  003f8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003fc	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00402	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0040a	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0040e	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00412	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0041a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00422	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00425	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0042d	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00431	ba 01 00 00 00	 mov	 edx, 1
  00436	8b c8		 mov	 ecx, eax
  00438	e8 00 00 00 00	 call	 s390_maddr_l
  0043d	b9 08 00 00 00	 mov	 ecx, 8
  00442	48 6b c9 01	 imul	 rcx, rcx, 1
  00446	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0044e	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN10@s390_cmpsc:

; 286  :             (
; 287  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 288  :                 pMEMBLK->arn,
; 289  :                 pMEMBLK->regs,
; 290  :                 ACCTYPE_READ,   // (fetch)
; 291  :                 pMEMBLK->pkey
; 292  :             );
; 293  :         }
; 294  :         memcpy( (U8*)&value,        &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],     len1 );

  00453	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00458	b9 08 00 00 00	 mov	 ecx, 8
  0045d	48 6b c9 00	 imul	 rcx, rcx, 0
  00461	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00468	81 e2 ff 0f 00
	00		 and	 edx, 4095		; 00000fffH
  0046e	8b d2		 mov	 edx, edx
  00470	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00478	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0047d	48 03 ca	 add	 rcx, rdx
  00480	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$2[rsp]
  00485	48 8b fa	 mov	 rdi, rdx
  00488	48 8b f1	 mov	 rsi, rcx
  0048b	8b c8		 mov	 ecx, eax
  0048d	f3 a4		 rep movsb

; 295  :         memcpy( (U8*)&value + len1, &pMEMBLK->maddr[1][0],                         4 - len1 );

  0048f	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00494	b9 04 00 00 00	 mov	 ecx, 4
  00499	2b c8		 sub	 ecx, eax
  0049b	8b c1		 mov	 eax, ecx
  0049d	48 98		 cdqe
  0049f	b9 08 00 00 00	 mov	 ecx, 8
  004a4	48 6b c9 01	 imul	 rcx, rcx, 1
  004a8	ba 01 00 00 00	 mov	 edx, 1
  004ad	48 6b d2 00	 imul	 rdx, rdx, 0
  004b1	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  004b9	48 03 54 0f 10	 add	 rdx, QWORD PTR [rdi+rcx+16]
  004be	48 8b ca	 mov	 rcx, rdx
  004c1	0f b7 54 24 30	 movzx	 edx, WORD PTR len1$1[rsp]
  004c6	48 8d 54 14 60	 lea	 rdx, QWORD PTR value$2[rsp+rdx]
  004cb	48 8b fa	 mov	 rdi, rdx
  004ce	48 8b f1	 mov	 rsi, rcx
  004d1	48 8b c8	 mov	 rcx, rax
  004d4	f3 a4		 rep movsb

; 296  :         return CSWAP32( value );

  004d6	8b 4c 24 60	 mov	 ecx, DWORD PTR value$2[rsp]
  004da	e8 00 00 00 00	 call	 _byteswap_ulong
$LN4@s390_cmpsc:
$LN1@s390_cmpsc:

; 297  :     }
; 298  : }

  004df	48 83 c4 78	 add	 rsp, 120		; 00000078H
  004e3	5f		 pop	 rdi
  004e4	5e		 pop	 rsi
  004e5	c3		 ret	 0
s390_cmpsc_vfetch4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
tv84 = 48
tv144 = 52
tv156 = 56
tv160 = 60
tv166 = 64
tv192 = 68
tv200 = 72
tv220 = 76
tv226 = 80
tv252 = 84
tv260 = 88
addr$ = 112
pMEMBLK$ = 120
s390_cmpsc_vfetch2 PROC

; 107  : {

$LN48:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 108  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0000d	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00012	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00015	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0001b	8b 4c 24 70	 mov	 ecx, DWORD PTR addr$[rsp]
  0001f	23 c8		 and	 ecx, eax
  00021	8b c1		 mov	 eax, ecx
  00023	89 44 24 70	 mov	 DWORD PTR addr$[rsp], eax

; 109  : 
; 110  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00027	b8 08 00 00 00	 mov	 eax, 8
  0002c	48 6b c0 00	 imul	 rax, rax, 0
  00030	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00035	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0003b	74 19		 je	 SHORT $LN12@s390_cmpsc
  0003d	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  00041	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00046	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  0004a	72 0a		 jb	 SHORT $LN12@s390_cmpsc
  0004c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
  00054	eb 08		 jmp	 SHORT $LN15@s390_cmpsc
$LN12@s390_cmpsc:
  00056	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
$LN15@s390_cmpsc:
  0005e	83 7c 24 30 00	 cmp	 DWORD PTR tv84[rsp], 0
  00063	74 76		 je	 SHORT $LN2@s390_cmpsc

; 111  :     {
; 112  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00065	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  00069	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  0006e	8b c0		 mov	 eax, eax
  00070	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00075	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 113  :         pMEMBLK->maddr[1] = 0;

  00079	b8 08 00 00 00	 mov	 eax, 8
  0007e	48 6b c0 01	 imul	 rax, rax, 1
  00082	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00087	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 114  :         pMEMBLK->maddr[0] = MADDR

  00090	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00095	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  00099	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0009d	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000a5	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000aa	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000ad	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b2	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000b6	ba 01 00 00 00	 mov	 edx, 1
  000bb	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c0	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000c3	e8 00 00 00 00	 call	 s390_maddr_l
  000c8	b9 08 00 00 00	 mov	 ecx, 8
  000cd	48 6b c9 00	 imul	 rcx, rcx, 0
  000d1	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000d6	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s390_cmpsc:

; 115  :         (
; 116  :             pMEMBLK->vpagebeg,
; 117  :             pMEMBLK->arn,
; 118  :             pMEMBLK->regs,
; 119  :             ACCTYPE_READ,   // (fetch)
; 120  :             pMEMBLK->pkey
; 121  :         );
; 122  :     }
; 123  :     if (!LASTBYTEOFPAGE( addr ))

  000db	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  000df	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  000e4	3d ff 0f 00 00	 cmp	 eax, 4095		; 00000fffH
  000e9	75 0a		 jne	 SHORT $LN18@s390_cmpsc
  000eb	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv144[rsp], 1
  000f3	eb 08		 jmp	 SHORT $LN19@s390_cmpsc
$LN18@s390_cmpsc:
  000f5	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN19@s390_cmpsc:
  000fd	83 7c 24 34 00	 cmp	 DWORD PTR tv144[rsp], 0
  00102	0f 85 1e 02 00
	00		 jne	 $LN3@s390_cmpsc

; 124  :     {
; 125  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  00108	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  0010c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00111	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00115	48 81 c1 00 10
	00 00		 add	 rcx, 4096		; 00001000H
  0011c	48 3b c1	 cmp	 rax, rcx
  0011f	73 0a		 jae	 SHORT $LN22@s390_cmpsc
  00121	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv156[rsp], 1
  00129	eb 08		 jmp	 SHORT $LN23@s390_cmpsc
$LN22@s390_cmpsc:
  0012b	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv156[rsp], 0
$LN23@s390_cmpsc:
  00133	83 7c 24 38 00	 cmp	 DWORD PTR tv156[rsp], 0
  00138	0f 84 a6 00 00
	00		 je	 $LN5@s390_cmpsc

; 126  :         {
; 127  :             if (U16_ALIGNED( addr ))

  0013e	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  00142	83 e0 01	 and	 eax, 1
  00145	85 c0		 test	 eax, eax
  00147	75 0a		 jne	 SHORT $LN24@s390_cmpsc
  00149	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv160[rsp], 1
  00151	eb 08		 jmp	 SHORT $LN25@s390_cmpsc
$LN24@s390_cmpsc:
  00153	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv160[rsp], 0
$LN25@s390_cmpsc:
  0015b	83 7c 24 3c 00	 cmp	 DWORD PTR tv160[rsp], 0
  00160	74 0a		 je	 SHORT $LN28@s390_cmpsc
  00162	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv166[rsp], 1
  0016a	eb 08		 jmp	 SHORT $LN29@s390_cmpsc
$LN28@s390_cmpsc:
  0016c	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv166[rsp], 0
$LN29@s390_cmpsc:
  00174	83 7c 24 40 00	 cmp	 DWORD PTR tv166[rsp], 0
  00179	74 2d		 je	 SHORT $LN7@s390_cmpsc

; 128  :                 return CSWAP16( *(U16*) &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  0017b	b8 08 00 00 00	 mov	 eax, 8
  00180	48 6b c0 00	 imul	 rax, rax, 0
  00184	8b 4c 24 70	 mov	 ecx, DWORD PTR addr$[rsp]
  00188	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  0018e	8b c9		 mov	 ecx, ecx
  00190	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00195	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0019a	0f b7 0c 08	 movzx	 ecx, WORD PTR [rax+rcx]
  0019e	e8 00 00 00 00	 call	 _byteswap_ushort
  001a3	e9 62 02 00 00	 jmp	 $LN1@s390_cmpsc
$LN7@s390_cmpsc:

; 129  :             return fetch_hw(            &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001a8	b8 08 00 00 00	 mov	 eax, 8
  001ad	48 6b c0 00	 imul	 rax, rax, 0
  001b1	8b 4c 24 70	 mov	 ecx, DWORD PTR addr$[rsp]
  001b5	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  001bb	8b c9		 mov	 ecx, ecx
  001bd	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001c2	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001c7	48 03 c1	 add	 rax, rcx
  001ca	48 8b c8	 mov	 rcx, rax
  001cd	e8 00 00 00 00	 call	 fetch_hw_noswap
  001d2	0f b7 c8	 movzx	 ecx, ax
  001d5	e8 00 00 00 00	 call	 _byteswap_ushort
  001da	e9 2b 02 00 00	 jmp	 $LN1@s390_cmpsc

; 130  :         }

  001df	e9 3d 01 00 00	 jmp	 $LN6@s390_cmpsc
$LN5@s390_cmpsc:

; 131  :         else
; 132  :         {
; 133  :             if (unlikely(!pMEMBLK->maddr[1]))

  001e4	b8 08 00 00 00	 mov	 eax, 8
  001e9	48 6b c0 01	 imul	 rax, rax, 1
  001ed	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001f2	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  001f8	75 0a		 jne	 SHORT $LN30@s390_cmpsc
  001fa	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv192[rsp], 1
  00202	eb 08		 jmp	 SHORT $LN31@s390_cmpsc
$LN30@s390_cmpsc:
  00204	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv192[rsp], 0
$LN31@s390_cmpsc:
  0020c	83 7c 24 44 00	 cmp	 DWORD PTR tv192[rsp], 0
  00211	74 0a		 je	 SHORT $LN34@s390_cmpsc
  00213	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv200[rsp], 1
  0021b	eb 08		 jmp	 SHORT $LN35@s390_cmpsc
$LN34@s390_cmpsc:
  0021d	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv200[rsp], 0
$LN35@s390_cmpsc:
  00225	83 7c 24 48 00	 cmp	 DWORD PTR tv200[rsp], 0
  0022a	74 54		 je	 SHORT $LN8@s390_cmpsc

; 134  :             {
; 135  :                 pMEMBLK->maddr[1] = MADDR

  0022c	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00231	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00235	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0023b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00240	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00244	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00248	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00250	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00255	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00258	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0025d	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00261	ba 01 00 00 00	 mov	 edx, 1
  00266	8b c8		 mov	 ecx, eax
  00268	e8 00 00 00 00	 call	 s390_maddr_l
  0026d	b9 08 00 00 00	 mov	 ecx, 8
  00272	48 6b c9 01	 imul	 rcx, rcx, 1
  00276	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0027b	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@s390_cmpsc:

; 136  :                 (
; 137  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 138  :                     pMEMBLK->arn,
; 139  :                     pMEMBLK->regs,
; 140  :                     ACCTYPE_READ,   // (fetch)
; 141  :                     pMEMBLK->pkey
; 142  :                 );
; 143  :             }
; 144  :             if (U16_ALIGNED( addr ))

  00280	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  00284	83 e0 01	 and	 eax, 1
  00287	85 c0		 test	 eax, eax
  00289	75 0a		 jne	 SHORT $LN36@s390_cmpsc
  0028b	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv220[rsp], 1
  00293	eb 08		 jmp	 SHORT $LN37@s390_cmpsc
$LN36@s390_cmpsc:
  00295	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv220[rsp], 0
$LN37@s390_cmpsc:
  0029d	83 7c 24 4c 00	 cmp	 DWORD PTR tv220[rsp], 0
  002a2	74 0a		 je	 SHORT $LN40@s390_cmpsc
  002a4	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv226[rsp], 1
  002ac	eb 08		 jmp	 SHORT $LN41@s390_cmpsc
$LN40@s390_cmpsc:
  002ae	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv226[rsp], 0
$LN41@s390_cmpsc:
  002b6	83 7c 24 50 00	 cmp	 DWORD PTR tv226[rsp], 0
  002bb	74 2d		 je	 SHORT $LN9@s390_cmpsc

; 145  :                 return CSWAP16( *(U16*) &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  002bd	b8 08 00 00 00	 mov	 eax, 8
  002c2	48 6b c0 01	 imul	 rax, rax, 1
  002c6	8b 4c 24 70	 mov	 ecx, DWORD PTR addr$[rsp]
  002ca	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  002d0	8b c9		 mov	 ecx, ecx
  002d2	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002d7	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  002dc	0f b7 0c 08	 movzx	 ecx, WORD PTR [rax+rcx]
  002e0	e8 00 00 00 00	 call	 _byteswap_ushort
  002e5	e9 20 01 00 00	 jmp	 $LN1@s390_cmpsc
$LN9@s390_cmpsc:

; 146  :             return fetch_hw(            &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  002ea	b8 08 00 00 00	 mov	 eax, 8
  002ef	48 6b c0 01	 imul	 rax, rax, 1
  002f3	8b 4c 24 70	 mov	 ecx, DWORD PTR addr$[rsp]
  002f7	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  002fd	8b c9		 mov	 ecx, ecx
  002ff	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00304	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00309	48 03 c1	 add	 rax, rcx
  0030c	48 8b c8	 mov	 rcx, rax
  0030f	e8 00 00 00 00	 call	 fetch_hw_noswap
  00314	0f b7 c8	 movzx	 ecx, ax
  00317	e8 00 00 00 00	 call	 _byteswap_ushort
  0031c	e9 e9 00 00 00	 jmp	 $LN1@s390_cmpsc
$LN6@s390_cmpsc:

; 147  :         }
; 148  :     }

  00321	e9 e4 00 00 00	 jmp	 $LN4@s390_cmpsc
$LN3@s390_cmpsc:

; 149  :     else
; 150  :     {
; 151  :         if (likely(!pMEMBLK->maddr[1]))

  00326	b8 08 00 00 00	 mov	 eax, 8
  0032b	48 6b c0 01	 imul	 rax, rax, 1
  0032f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00334	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0033a	75 0a		 jne	 SHORT $LN42@s390_cmpsc
  0033c	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv252[rsp], 1
  00344	eb 08		 jmp	 SHORT $LN43@s390_cmpsc
$LN42@s390_cmpsc:
  00346	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv252[rsp], 0
$LN43@s390_cmpsc:
  0034e	83 7c 24 54 00	 cmp	 DWORD PTR tv252[rsp], 0
  00353	74 0a		 je	 SHORT $LN46@s390_cmpsc
  00355	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv260[rsp], 1
  0035d	eb 08		 jmp	 SHORT $LN47@s390_cmpsc
$LN46@s390_cmpsc:
  0035f	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv260[rsp], 0
$LN47@s390_cmpsc:
  00367	83 7c 24 58 00	 cmp	 DWORD PTR tv260[rsp], 0
  0036c	74 54		 je	 SHORT $LN10@s390_cmpsc

; 152  :         {
; 153  :             pMEMBLK->maddr[1] = MADDR

  0036e	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00373	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00377	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  0037d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00382	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00386	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0038a	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00392	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00397	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0039a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0039f	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  003a3	ba 01 00 00 00	 mov	 edx, 1
  003a8	8b c8		 mov	 ecx, eax
  003aa	e8 00 00 00 00	 call	 s390_maddr_l
  003af	b9 08 00 00 00	 mov	 ecx, 8
  003b4	48 6b c9 01	 imul	 rcx, rcx, 1
  003b8	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  003bd	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN10@s390_cmpsc:

; 154  :             (
; 155  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 156  :                 pMEMBLK->arn,
; 157  :                 pMEMBLK->regs,
; 158  :                 ACCTYPE_READ,   // (fetch)
; 159  :                 pMEMBLK->pkey
; 160  :             );
; 161  :         }
; 162  :         return (((U16) pMEMBLK->maddr[0][PAGEFRAME_BYTEMASK]) << 8)

  003c2	b8 08 00 00 00	 mov	 eax, 8
  003c7	48 6b c0 00	 imul	 rax, rax, 0
  003cb	b9 01 00 00 00	 mov	 ecx, 1
  003d0	48 69 c9 ff 0f
	00 00		 imul	 rcx, rcx, 4095		; 00000fffH
  003d7	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  003dc	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  003e1	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  003e5	c1 e0 08	 shl	 eax, 8
  003e8	b9 08 00 00 00	 mov	 ecx, 8
  003ed	48 6b c9 01	 imul	 rcx, rcx, 1
  003f1	ba 01 00 00 00	 mov	 edx, 1
  003f6	48 6b d2 00	 imul	 rdx, rdx, 0
  003fa	4c 8b 44 24 78	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  003ff	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00404	0f b6 0c 11	 movzx	 ecx, BYTE PTR [rcx+rdx]
  00408	0b c1		 or	 eax, ecx
$LN4@s390_cmpsc:
$LN1@s390_cmpsc:

; 163  :            |    ((U16) pMEMBLK->maddr[1][0]                       );
; 164  :     }
; 165  : }

  0040a	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0040e	c3		 ret	 0
s390_cmpsc_vfetch2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
tv84 = 48
tv148 = 52
tv161 = 56
tv169 = 60
addr$ = 80
pMEMBLK$ = 88
s390_cmpsc_vfetchb PROC

; 25   : {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 26   :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0000d	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00012	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00015	8b 80 90 00 00
	00		 mov	 eax, DWORD PTR [rax+144]
  0001b	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  0001f	23 c8		 and	 ecx, eax
  00021	8b c1		 mov	 eax, ecx
  00023	89 44 24 50	 mov	 DWORD PTR addr$[rsp], eax

; 27   : 
; 28   :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00027	b8 08 00 00 00	 mov	 eax, 8
  0002c	48 6b c0 00	 imul	 rax, rax, 0
  00030	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00035	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0003b	74 19		 je	 SHORT $LN7@s390_cmpsc
  0003d	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00041	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00046	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  0004a	72 0a		 jb	 SHORT $LN7@s390_cmpsc
  0004c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv84[rsp], 0
  00054	eb 08		 jmp	 SHORT $LN10@s390_cmpsc
$LN7@s390_cmpsc:
  00056	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
$LN10@s390_cmpsc:
  0005e	83 7c 24 30 00	 cmp	 DWORD PTR tv84[rsp], 0
  00063	74 76		 je	 SHORT $LN2@s390_cmpsc

; 29   :     {
; 30   :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00065	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00069	25 00 f0 ff 7f	 and	 eax, 2147479552		; 7ffff000H
  0006e	8b c0		 mov	 eax, eax
  00070	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00075	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 31   :         pMEMBLK->maddr[1] = 0;

  00079	b8 08 00 00 00	 mov	 eax, 8
  0007e	48 6b c0 01	 imul	 rax, rax, 1
  00082	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00087	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 32   :         pMEMBLK->maddr[0] = MADDR

  00090	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00095	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  00099	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  0009d	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000a5	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000aa	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000ad	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b2	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000b6	ba 01 00 00 00	 mov	 edx, 1
  000bb	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c0	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000c3	e8 00 00 00 00	 call	 s390_maddr_l
  000c8	b9 08 00 00 00	 mov	 ecx, 8
  000cd	48 6b c9 00	 imul	 rcx, rcx, 0
  000d1	48 8b 54 24 58	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000d6	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s390_cmpsc:

; 33   :         (
; 34   :             pMEMBLK->vpagebeg,
; 35   :             pMEMBLK->arn,
; 36   :             pMEMBLK->regs,
; 37   :             ACCTYPE_READ,   // (fetch)
; 38   :             pMEMBLK->pkey
; 39   :         );
; 40   :     }
; 41   :     if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  000db	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  000df	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000e4	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000e8	48 81 c1 00 10
	00 00		 add	 rcx, 4096		; 00001000H
  000ef	48 3b c1	 cmp	 rax, rcx
  000f2	73 0a		 jae	 SHORT $LN13@s390_cmpsc
  000f4	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv148[rsp], 1
  000fc	eb 08		 jmp	 SHORT $LN14@s390_cmpsc
$LN13@s390_cmpsc:
  000fe	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
$LN14@s390_cmpsc:
  00106	83 7c 24 34 00	 cmp	 DWORD PTR tv148[rsp], 0
  0010b	74 2d		 je	 SHORT $LN3@s390_cmpsc

; 42   :     {
; 43   :         return pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK];

  0010d	b8 08 00 00 00	 mov	 eax, 8
  00112	48 6b c0 00	 imul	 rax, rax, 0
  00116	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  0011a	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  00120	8b c9		 mov	 ecx, ecx
  00122	48 8b 54 24 58	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00127	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0012c	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00130	e9 c4 00 00 00	 jmp	 $LN1@s390_cmpsc

; 44   :     }

  00135	e9 bf 00 00 00	 jmp	 $LN4@s390_cmpsc
$LN3@s390_cmpsc:

; 45   :     else
; 46   :     {
; 47   :         if (unlikely(!pMEMBLK->maddr[1]))

  0013a	b8 08 00 00 00	 mov	 eax, 8
  0013f	48 6b c0 01	 imul	 rax, rax, 1
  00143	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00148	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0014e	75 0a		 jne	 SHORT $LN15@s390_cmpsc
  00150	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv161[rsp], 1
  00158	eb 08		 jmp	 SHORT $LN16@s390_cmpsc
$LN15@s390_cmpsc:
  0015a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv161[rsp], 0
$LN16@s390_cmpsc:
  00162	83 7c 24 38 00	 cmp	 DWORD PTR tv161[rsp], 0
  00167	74 0a		 je	 SHORT $LN19@s390_cmpsc
  00169	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv169[rsp], 1
  00171	eb 08		 jmp	 SHORT $LN20@s390_cmpsc
$LN19@s390_cmpsc:
  00173	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv169[rsp], 0
$LN20@s390_cmpsc:
  0017b	83 7c 24 3c 00	 cmp	 DWORD PTR tv169[rsp], 0
  00180	74 54		 je	 SHORT $LN5@s390_cmpsc

; 48   :         {
; 49   :             pMEMBLK->maddr[1] = MADDR

  00182	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00187	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0018b	48 05 00 10 00
	00		 add	 rax, 4096		; 00001000H
  00191	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00196	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0019a	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0019e	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  001a6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001ab	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  001ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001b3	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  001b7	ba 01 00 00 00	 mov	 edx, 1
  001bc	8b c8		 mov	 ecx, eax
  001be	e8 00 00 00 00	 call	 s390_maddr_l
  001c3	b9 08 00 00 00	 mov	 ecx, 8
  001c8	48 6b c9 01	 imul	 rcx, rcx, 1
  001cc	48 8b 54 24 58	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001d1	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN5@s390_cmpsc:

; 50   :             (
; 51   :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 52   :                 pMEMBLK->arn,
; 53   :                 pMEMBLK->regs,
; 54   :                 ACCTYPE_READ,   // (fetch)
; 55   :                 pMEMBLK->pkey
; 56   :             );
; 57   :         }
; 58   :         return pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK];

  001d6	b8 08 00 00 00	 mov	 eax, 8
  001db	48 6b c0 01	 imul	 rax, rax, 1
  001df	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  001e3	81 e1 ff 0f 00
	00		 and	 ecx, 4095		; 00000fffH
  001e9	8b c9		 mov	 ecx, ecx
  001eb	48 8b 54 24 58	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001f0	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001f5	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
$LN4@s390_cmpsc:
$LN1@s390_cmpsc:

; 59   :     }
; 60   : }

  001f9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001fd	c3		 ret	 0
s390_cmpsc_vfetchb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dat.h
;	COMDAT s390_maddr_l
_TEXT	SEGMENT
tlbix$ = 48
aea_crn$ = 52
tv70 = 56
maddr$ = 64
addr$ = 96
len$ = 104
arn$ = 112
regs$ = 120
acctype$ = 128
akey$ = 136
s390_maddr_l PROC					; COMDAT

; 307  : {

$LN14:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 308  :     /* Note: ALL of the below conditions must be true for a TLB hit
; 309  :        to occur.  If ANY of them are false, then it's a TLB miss,
; 310  :        requiring us to then perform a full DAT address translation.
; 311  : 
; 312  :        Note too that on the grand scheme of things the order/sequence
; 313  :        of the below tests (if statements) is completely unimportant
; 314  :        since ALL conditions must be checked anyway in order for a hit
; 315  :        to occur, and it doesn't matter that a miss tests a few extra
; 316  :        conditions since it's going to do a full translation anyway!
; 317  :        (which is many, many instructions)
; 318  :     */
; 319  : 
; 320  :     int  aea_crn  = (arn >= USE_ARMODE) ? 0 : regs->AEA_AR( arn );

  00017	83 7c 24 70 10	 cmp	 DWORD PTR arn$[rsp], 16
  0001c	7c 0a		 jl	 SHORT $LN12@s390_maddr
  0001e	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
  00026	eb 19		 jmp	 SHORT $LN13@s390_maddr
$LN12@s390_maddr:
  00028	8b 44 24 70	 mov	 eax, DWORD PTR arn$[rsp]
  0002c	83 c0 05	 add	 eax, 5
  0002f	48 98		 cdqe
  00031	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00036	8b 84 81 94 0c
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+3220]
  0003d	89 44 24 38	 mov	 DWORD PTR tv70[rsp], eax
$LN13@s390_maddr:
  00041	8b 44 24 38	 mov	 eax, DWORD PTR tv70[rsp]
  00045	89 44 24 34	 mov	 DWORD PTR aea_crn$[rsp], eax

; 321  :     U16  tlbix    = TLBIX( addr );

  00049	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  0004d	c1 e8 0c	 shr	 eax, 12
  00050	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00055	66 89 44 24 30	 mov	 WORD PTR tlbix$[rsp], ax

; 322  :     BYTE *maddr   = NULL;

  0005a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR maddr$[rsp], 0

; 323  : 
; 324  :     /* Non-zero AEA Control Register number? */
; 325  :     if (aea_crn)

  00063	83 7c 24 34 00	 cmp	 DWORD PTR aea_crn$[rsp], 0
  00068	0f 84 25 01 00
	00		 je	 $LN2@s390_maddr

; 326  :     {
; 327  :         /* Same Addess Space Designator as before? */
; 328  :         /* Or if not, is address in a common segment? */
; 329  :         if (0
; 330  :             || (regs->CR( aea_crn ) == regs->tlb.TLB_ASD( tlbix ))
; 331  :             || (regs->AEA_COMMON( aea_crn ) & regs->tlb.common[ tlbix ])

  0006e	33 c0		 xor	 eax, eax
  00070	85 c0		 test	 eax, eax
  00072	75 59		 jne	 SHORT $LN4@s390_maddr
  00074	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  00078	ff c0		 inc	 eax
  0007a	48 98		 cdqe
  0007c	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  00081	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00086	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  0008b	41 8b 8c c8 60
	b0 00 00	 mov	 ecx, DWORD PTR [r8+rcx*8+45152]
  00093	39 8c c2 00 06
	00 00		 cmp	 DWORD PTR [rdx+rax*8+1536], ecx
  0009a	74 31		 je	 SHORT $LN4@s390_maddr
  0009c	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  000a0	ff c0		 inc	 eax
  000a2	48 98		 cdqe
  000a4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a9	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  000b1	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000b6	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000bb	0f b6 8c 0a 60
	54 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+87136]
  000c3	23 c1		 and	 eax, ecx
  000c5	85 c0		 test	 eax, eax
  000c7	0f 84 c6 00 00
	00		 je	 $LN3@s390_maddr
$LN4@s390_maddr:

; 332  :         )
; 333  :         {
; 334  :             /* Storage Key zero? */
; 335  :             /* Or if not, same Storage Key as before? */
; 336  :             if (0
; 337  :                 || akey == 0
; 338  :                 || akey == regs->tlb.skey[ tlbix ]

  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 2e		 jne	 SHORT $LN6@s390_maddr
  000d3	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000db	85 c0		 test	 eax, eax
  000dd	74 22		 je	 SHORT $LN6@s390_maddr
  000df	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000e7	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000ec	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000f1	0f b6 8c 0a 60
	50 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+86112]
  000f9	3b c1		 cmp	 eax, ecx
  000fb	0f 85 92 00 00
	00		 jne	 $LN5@s390_maddr
$LN6@s390_maddr:

; 339  :             )
; 340  :             {
; 341  :                 /* Does the page address match the one in the TLB? */
; 342  :                 /* (does a TLB entry exist for this page address?) */
; 343  :                 if (
; 344  :                     ((addr & TLBID_PAGEMASK) | regs->tlbID)
; 345  :                     ==

  00101	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00105	25 00 00 c0 7f	 and	 eax, 2143289344		; 7fc00000H
  0010a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010f	0b 81 58 b0 00
	00		 or	 eax, DWORD PTR [rcx+45144]
  00115	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  0011a	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  0011f	3b 84 ca 60 d0
	00 00		 cmp	 eax, DWORD PTR [rdx+rcx*8+53344]
  00126	75 6b		 jne	 SHORT $LN7@s390_maddr

; 346  :                     regs->tlb.TLB_VADDR( tlbix )
; 347  :                 )
; 348  :                 {
; 349  :                     /* Is storage being accessed same way as before? */
; 350  :                     if (acctype & regs->tlb.acc[ tlbix ])

  00128	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0012d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00132	0f b6 84 01 60
	5c 01 00	 movzx	 eax, BYTE PTR [rcx+rax+89184]
  0013a	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR acctype$[rsp]
  00141	23 c8		 and	 ecx, eax
  00143	8b c1		 mov	 eax, ecx
  00145	85 c0		 test	 eax, eax
  00147	74 4a		 je	 SHORT $LN8@s390_maddr

; 351  :                     {
; 352  :                         /*------------------------------------------*/
; 353  :                         /* TLB hit: use previously translated value */
; 354  :                         /*------------------------------------------*/
; 355  : 
; 356  :                         if (acctype & ACC_CHECK)

  00149	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR acctype$[rsp]
  00150	83 e0 01	 and	 eax, 1
  00153	85 c0		 test	 eax, eax
  00155	74 1e		 je	 SHORT $LN9@s390_maddr

; 357  :                             regs->dat.storkey = regs->tlb.storkey[ tlbix ];

  00157	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0015c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00161	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00166	48 8b 84 c2 60
	30 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+77920]
  0016e	48 89 81 28 08
	00 00		 mov	 QWORD PTR [rcx+2088], rax
$LN9@s390_maddr:

; 358  : 
; 359  :                         maddr = MAINADDR( regs->tlb.main[tlbix], addr );

  00175	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0017a	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  0017e	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00183	48 8b 84 c2 60
	10 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+69728]
  0018b	48 33 c1	 xor	 rax, rcx
  0018e	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN8@s390_maddr:
$LN7@s390_maddr:
$LN5@s390_maddr:
$LN3@s390_maddr:
$LN2@s390_maddr:

; 360  :                     }
; 361  :                 }
; 362  :             }
; 363  :         }
; 364  :     }
; 365  : 
; 366  :     /*---------------------------------------*/
; 367  :     /* TLB miss: do full address translation */
; 368  :     /*---------------------------------------*/
; 369  :     if (!maddr)

  00193	48 83 7c 24 40
	00		 cmp	 QWORD PTR maddr$[rsp], 0
  00199	75 35		 jne	 SHORT $LN10@s390_maddr

; 370  :         maddr = ARCH_DEP( logical_to_main_l )( addr, arn, regs, acctype, akey, len );

  0019b	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  001a0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001a5	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  001ad	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  001b1	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR acctype$[rsp]
  001b9	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  001be	8b 54 24 70	 mov	 edx, DWORD PTR arn$[rsp]
  001c2	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  001c6	e8 00 00 00 00	 call	 s390_logical_to_main_l
  001cb	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN10@s390_maddr:

; 371  : 
; 372  : #if defined( FEATURE_073_TRANSACT_EXEC_FACILITY )
; 373  :     if (FACILITY_ENABLED( 073_TRANSACT_EXEC, regs ))
; 374  :     {
; 375  :         /* SA22-7832-12 Principles of Operation, page 5-99:
; 376  : 
; 377  :              "Storage accesses for instruction and DAT- and ART-
; 378  :               table fetches follow the non-transactional rules."
; 379  :         */
; 380  :         if (0
; 381  :             || !regs
; 382  :             || !regs->txf_tnd
; 383  :             || arn == USE_INST_SPACE    /* Instruction fetching */
; 384  :             || arn == USE_REAL_ADDR     /* Address translation  */
; 385  :         )
; 386  :             return maddr;
; 387  : 
; 388  :         /* Quick exit if NTSTG call */
; 389  :         if (regs->txf_NTSTG)
; 390  :         {
; 391  :             regs->txf_NTSTG = false;
; 392  :             return maddr;
; 393  :         }
; 394  : 
; 395  :         /* Translate to alternate TXF address */
; 396  :         maddr = TXF_MADDRL( addr, len, arn, regs, acctype, maddr );
; 397  :     }
; 398  : #endif
; 399  : 
; 400  :     return maddr;

  001d0	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]

; 401  : }

  001d5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001d9	c3		 ret	 0
s390_maddr_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
GR0$ = 0
GR1$ = 4
pCMPSCBLK$ = 32
regs$ = 40
r1$ = 48
r2$ = 56
s370_cmpsc_SetCMPSC PROC

; 693  : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 18	 sub	 rsp, 24

; 694  :     register GREG GR0, GR1;
; 695  : 
; 696  :     pCMPSCBLK->r1       =  r1;

  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  0001d	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR r1$[rsp]
  00022	88 48 40	 mov	 BYTE PTR [rax+64], cl

; 697  :     pCMPSCBLK->r2       =  r2;

  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  0002a	0f b6 4c 24 38	 movzx	 ecx, BYTE PTR r2$[rsp]
  0002f	88 48 41	 mov	 BYTE PTR [rax+65], cl

; 698  : 
; 699  :     GR0                 = regs->GR_L( 0 );

  00032	b8 08 00 00 00	 mov	 eax, 8
  00037	48 6b c0 00	 imul	 rax, rax, 0
  0003b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00040	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  00047	89 04 24	 mov	 DWORD PTR GR0$[rsp], eax

; 700  :     GR1                 = GR_A( 1,    regs ) & ADDRESS_MAXWRAP( regs );

  0004a	b8 08 00 00 00	 mov	 eax, 8
  0004f	48 6b c0 01	 imul	 rax, rax, 1
  00053	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00058	8b 84 01 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax+640]
  0005f	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00064	89 44 24 04	 mov	 DWORD PTR GR1$[rsp], eax

; 701  :     pCMPSCBLK->pOp1     = GR_A( r1,   regs ) & ADDRESS_MAXWRAP( regs );

  00068	48 63 44 24 30	 movsxd	 rax, DWORD PTR r1$[rsp]
  0006d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00072	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  00079	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0007e	8b c0		 mov	 eax, eax
  00080	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00085	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 702  :     pCMPSCBLK->pOp2     = GR_A( r2,   regs ) & ADDRESS_MAXWRAP( regs );

  00089	48 63 44 24 38	 movsxd	 rax, DWORD PTR r2$[rsp]
  0008e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00093	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  0009a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0009f	8b c0		 mov	 eax, eax
  000a1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  000a6	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 703  :     pCMPSCBLK->nLen1    = GR_A( r1+1, regs );

  000aa	8b 44 24 30	 mov	 eax, DWORD PTR r1$[rsp]
  000ae	ff c0		 inc	 eax
  000b0	48 98		 cdqe
  000b2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000b7	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000be	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  000c3	48 89 01	 mov	 QWORD PTR [rcx], rax

; 704  :     pCMPSCBLK->nLen2    = GR_A( r2+1, regs );

  000c6	8b 44 24 38	 mov	 eax, DWORD PTR r2$[rsp]
  000ca	ff c0		 inc	 eax
  000cc	48 98		 cdqe
  000ce	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  000d3	8b 84 c1 80 02
	00 00		 mov	 eax, DWORD PTR [rcx+rax*8+640]
  000da	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  000df	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 705  : 
; 706  : //  pCMPSCBLK->e        = (GR0 >>  8) & 0x01;   // (no such field)
; 707  :     pCMPSCBLK->f1       = (GR0 >>  9) & 0x01;

  000e3	8b 04 24	 mov	 eax, DWORD PTR GR0$[rsp]
  000e6	c1 e8 09	 shr	 eax, 9
  000e9	83 e0 01	 and	 eax, 1
  000ec	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  000f1	88 41 43	 mov	 BYTE PTR [rcx+67], al

; 708  :     pCMPSCBLK->cdss     = (GR0 >> 12) & 0x0F;

  000f4	8b 04 24	 mov	 eax, DWORD PTR GR0$[rsp]
  000f7	c1 e8 0c	 shr	 eax, 12
  000fa	83 e0 0f	 and	 eax, 15
  000fd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00102	88 41 44	 mov	 BYTE PTR [rcx+68], al

; 709  :     pCMPSCBLK->st       = (GR0 >> 16) & 0x01;

  00105	8b 04 24	 mov	 eax, DWORD PTR GR0$[rsp]
  00108	c1 e8 10	 shr	 eax, 16
  0010b	83 e0 01	 and	 eax, 1
  0010e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00113	88 41 42	 mov	 BYTE PTR [rcx+66], al

; 710  : #if defined(_FEATURE_047_CMPSC_ENH_FACILITY)
; 711  :     if (FACILITY_ENABLED( 047_CMPSC_ENH, regs ))

  00116	b8 01 00 00 00	 mov	 eax, 1
  0011b	48 6b c0 05	 imul	 rax, rax, 5
  0011f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00124	0f b6 84 01 28
	0d 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3368]
  0012c	83 e0 01	 and	 eax, 1
  0012f	85 c0		 test	 eax, eax
  00131	74 13		 je	 SHORT $LN2@s370_cmpsc

; 712  :     pCMPSCBLK->zp       = (GR0 >> 17) & 0x01; else

  00133	8b 04 24	 mov	 eax, DWORD PTR GR0$[rsp]
  00136	c1 e8 11	 shr	 eax, 17
  00139	83 e0 01	 and	 eax, 1
  0013c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00141	88 41 47	 mov	 BYTE PTR [rcx+71], al
  00144	eb 09		 jmp	 SHORT $LN3@s370_cmpsc
$LN2@s370_cmpsc:

; 713  : #endif
; 714  :     pCMPSCBLK->zp       = FALSE;

  00146	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  0014b	c6 40 47 00	 mov	 BYTE PTR [rax+71], 0
$LN3@s370_cmpsc:

; 715  : 
; 716  :     pCMPSCBLK->cbn      = (GR1 &  0x007);

  0014f	8b 44 24 04	 mov	 eax, DWORD PTR GR1$[rsp]
  00153	83 e0 07	 and	 eax, 7
  00156	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  0015b	88 41 45	 mov	 BYTE PTR [rcx+69], al

; 717  :     pCMPSCBLK->stt      = (GR1 &  0xFFF) >>  3;

  0015e	8b 44 24 04	 mov	 eax, DWORD PTR GR1$[rsp]
  00162	25 ff 0f 00 00	 and	 eax, 4095		; 00000fffH
  00167	c1 e8 03	 shr	 eax, 3
  0016a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  0016f	66 89 41 3c	 mov	 WORD PTR [rcx+60], ax

; 718  :     pCMPSCBLK->pDict    = (GR1 & ~0xFFF);

  00173	8b 44 24 04	 mov	 eax, DWORD PTR GR1$[rsp]
  00177	25 00 f0 ff ff	 and	 eax, -4096		; fffff000H
  0017c	8b c0		 mov	 eax, eax
  0017e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00183	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 719  : 
; 720  :     pCMPSCBLK->regs     =  regs;

  00187	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  0018c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  00191	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 721  :     pCMPSCBLK->cc       =  regs->psw.cc;

  00195	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  0019a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  0019f	0f b6 49 7c	 movzx	 ecx, BYTE PTR [rcx+124]
  001a3	88 48 46	 mov	 BYTE PTR [rax+70], cl

; 722  :     pCMPSCBLK->pic      =  regs->psw.intcode;

  001a6	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  001ab	48 8b 4c 24 28	 mov	 rcx, QWORD PTR regs$[rsp]
  001b0	0f b7 89 98 00
	00 00		 movzx	 ecx, WORD PTR [rcx+152]
  001b7	66 89 48 3e	 mov	 WORD PTR [rax+62], cx

; 723  :     pCMPSCBLK->nCPUAmt  =  DEF_CMPSC_CPU_AMT;

  001bb	48 8b 44 24 20	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  001c0	c7 40 38 00 00
	10 00		 mov	 DWORD PTR [rax+56], 1048576 ; 00100000H

; 724  : //  pCMPSCBLK->dbg      =  0;  // (future)
; 725  : }

  001c7	48 83 c4 18	 add	 rsp, 24
  001cb	c3		 ret	 0
s370_cmpsc_SetCMPSC ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
pCMPSCBLK$ = 8
regs$ = 16
r1$ = 24
r2$ = 32
s370_cmpsc_SetREGS PROC

; 632  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 633  :     SET_GR_A( r1,     regs, (VADR) pCMPSCBLK->pOp1  );

  00014	48 63 44 24 18	 movsxd	 rax, DWORD PTR r1$[rsp]
  00019	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  0001e	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  00023	8b 52 20	 mov	 edx, DWORD PTR [rdx+32]
  00026	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 634  :     SET_GR_A( r2,     regs, (VADR) pCMPSCBLK->pOp2  );

  0002d	48 63 44 24 20	 movsxd	 rax, DWORD PTR r2$[rsp]
  00032	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  00037	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  0003c	8b 52 28	 mov	 edx, DWORD PTR [rdx+40]
  0003f	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 635  :     SET_GR_A( r1 + 1, regs, (GREG) pCMPSCBLK->nLen1 );

  00046	8b 44 24 18	 mov	 eax, DWORD PTR r1$[rsp]
  0004a	ff c0		 inc	 eax
  0004c	48 98		 cdqe
  0004e	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  00053	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  00058	8b 12		 mov	 edx, DWORD PTR [rdx]
  0005a	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 636  :     SET_GR_A( r2 + 1, regs, (GREG) pCMPSCBLK->nLen2 );

  00061	8b 44 24 20	 mov	 eax, DWORD PTR r2$[rsp]
  00065	ff c0		 inc	 eax
  00067	48 98		 cdqe
  00069	48 8b 4c 24 10	 mov	 rcx, QWORD PTR regs$[rsp]
  0006e	48 8b 54 24 08	 mov	 rdx, QWORD PTR pCMPSCBLK$[rsp]
  00073	8b 52 08	 mov	 edx, DWORD PTR [rdx+8]
  00076	89 94 c1 80 02
	00 00		 mov	 DWORD PTR [rcx+rax*8+640], edx

; 637  : 
; 638  :     regs->psw.cc      = pCMPSCBLK->cc;

  0007d	48 8b 44 24 10	 mov	 rax, QWORD PTR regs$[rsp]
  00082	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00087	0f b6 49 46	 movzx	 ecx, BYTE PTR [rcx+70]
  0008b	88 48 7c	 mov	 BYTE PTR [rax+124], cl

; 639  :     regs->psw.intcode = pCMPSCBLK->pic;

  0008e	48 8b 44 24 10	 mov	 rax, QWORD PTR regs$[rsp]
  00093	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  00098	0f b7 49 3e	 movzx	 ecx, WORD PTR [rcx+62]
  0009c	66 89 88 98 00
	00 00		 mov	 WORD PTR [rax+152], cx

; 640  : 
; 641  :     /* Register 0 is input-only and thus not modified.
; 642  : 
; 643  :     SET_GR_A( 0, regs,
; 644  :     (0
; 645  :         | ((GREG)   zeropad       << 17)
; 646  :         | ((GREG) pCMPSCBLK->st   << 16)
; 647  :         | ((GREG) pCMPSCBLK->cdss << 12)
; 648  :         | ((GREG) pCMPSCBLK->f1   <<  9)
; 649  :         | ((GREG)   expand        <<  8)
; 650  :     ));
; 651  :     */
; 652  : 
; 653  :     SET_GR_A( 1, regs, ((GREG) pCMPSCBLK->pDict     ) |

  000a3	48 8b 44 24 08	 mov	 rax, QWORD PTR pCMPSCBLK$[rsp]
  000a8	0f b7 40 3c	 movzx	 eax, WORD PTR [rax+60]
  000ac	c1 e0 03	 shl	 eax, 3
  000af	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  000b4	8b 49 30	 mov	 ecx, DWORD PTR [rcx+48]
  000b7	0b c8		 or	 ecx, eax
  000b9	8b c1		 mov	 eax, ecx
  000bb	48 8b 4c 24 08	 mov	 rcx, QWORD PTR pCMPSCBLK$[rsp]
  000c0	0f b6 49 45	 movzx	 ecx, BYTE PTR [rcx+69]
  000c4	0b c1		 or	 eax, ecx
  000c6	b9 08 00 00 00	 mov	 ecx, 8
  000cb	48 6b c9 01	 imul	 rcx, rcx, 1
  000cf	48 8b 54 24 10	 mov	 rdx, QWORD PTR regs$[rsp]
  000d4	89 84 0a 80 02
	00 00		 mov	 DWORD PTR [rdx+rcx+640], eax

; 654  :                        ((GREG) pCMPSCBLK->stt  <<  3) |
; 655  :                        ((GREG) pCMPSCBLK->cbn       ) );
; 656  : }

  000db	c3		 ret	 0
s370_cmpsc_SetREGS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv82 = 52
tv146 = 56
tv158 = 60
tv182 = 64
tv190 = 68
tv240 = 72
tv248 = 76
src$ = 112
len$ = 120
addr$ = 128
pMEMBLK$ = 136
s370_cmpsc_vstorec PROC

; 570  : {

$LN34:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 571  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0001a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00021	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00026	89 84 24 80 00
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 572  : 
; 573  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0002d	b8 08 00 00 00	 mov	 eax, 8
  00032	48 6b c0 00	 imul	 rax, rax, 0
  00036	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0003e	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00044	74 1f		 je	 SHORT $LN10@s370_cmpsc
  00046	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0004d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00055	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  00059	72 0a		 jb	 SHORT $LN10@s370_cmpsc
  0005b	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  00063	eb 08		 jmp	 SHORT $LN13@s370_cmpsc
$LN10@s370_cmpsc:
  00065	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN13@s370_cmpsc:
  0006d	83 7c 24 34 00	 cmp	 DWORD PTR tv82[rsp], 0
  00072	0f 84 8e 00 00
	00		 je	 $LN2@s370_cmpsc

; 574  :     {
; 575  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00078	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0007f	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  00084	8b c0		 mov	 eax, eax
  00086	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0008e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 576  :         pMEMBLK->maddr[1] = 0;

  00092	b8 08 00 00 00	 mov	 eax, 8
  00097	48 6b c0 01	 imul	 rax, rax, 1
  0009b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000a3	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 577  :         pMEMBLK->maddr[0] = MADDR

  000ac	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b4	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000b8	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000bc	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000c4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000cc	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000cf	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000d7	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000db	ba 01 00 00 00	 mov	 edx, 1
  000e0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e8	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000eb	e8 00 00 00 00	 call	 s370_maddr_l
  000f0	b9 08 00 00 00	 mov	 ecx, 8
  000f5	48 6b c9 00	 imul	 rcx, rcx, 0
  000f9	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00101	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s370_cmpsc:

; 578  :         (
; 579  :             pMEMBLK->vpagebeg,
; 580  :             pMEMBLK->arn,
; 581  :             pMEMBLK->regs,
; 582  :             ACCTYPE_WRITE,  // (store)
; 583  :             pMEMBLK->pkey
; 584  :         );
; 585  :     }
; 586  :     if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  00106	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0010d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00115	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00119	48 81 c1 00 08
	00 00		 add	 rcx, 2048		; 00000800H
  00120	48 3b c1	 cmp	 rax, rcx
  00123	73 0a		 jae	 SHORT $LN16@s370_cmpsc
  00125	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv146[rsp], 1
  0012d	eb 08		 jmp	 SHORT $LN17@s370_cmpsc
$LN16@s370_cmpsc:
  0012f	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv146[rsp], 0
$LN17@s370_cmpsc:
  00137	83 7c 24 38 00	 cmp	 DWORD PTR tv146[rsp], 0
  0013c	0f 84 be 01 00
	00		 je	 $LN3@s370_cmpsc

; 587  :     {
; 588  :         if (NOCROSSPAGE( addr, len ))

  00142	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00149	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0014e	0f b7 4c 24 78	 movzx	 ecx, WORD PTR len$[rsp]
  00153	ba ff 07 00 00	 mov	 edx, 2047		; 000007ffH
  00158	2b d1		 sub	 edx, ecx
  0015a	8b ca		 mov	 ecx, edx
  0015c	3b c1		 cmp	 eax, ecx
  0015e	7f 0a		 jg	 SHORT $LN20@s370_cmpsc
  00160	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv158[rsp], 1
  00168	eb 08		 jmp	 SHORT $LN21@s370_cmpsc
$LN20@s370_cmpsc:
  0016a	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv158[rsp], 0
$LN21@s370_cmpsc:
  00172	83 7c 24 3c 00	 cmp	 DWORD PTR tv158[rsp], 0
  00177	74 43		 je	 SHORT $LN5@s370_cmpsc

; 589  :         {
; 590  :             memcpy( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], src, len+1 );

  00179	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  0017e	ff c0		 inc	 eax
  00180	48 98		 cdqe
  00182	b9 08 00 00 00	 mov	 ecx, 8
  00187	48 6b c9 00	 imul	 rcx, rcx, 0
  0018b	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00192	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  00198	8b d2		 mov	 edx, edx
  0019a	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001a2	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001a7	48 03 ca	 add	 rcx, rdx
  001aa	48 8b f9	 mov	 rdi, rcx
  001ad	48 8b 74 24 70	 mov	 rsi, QWORD PTR src$[rsp]
  001b2	48 8b c8	 mov	 rcx, rax
  001b5	f3 a4		 rep movsb

; 591  :         }

  001b7	e9 3f 01 00 00	 jmp	 $LN6@s370_cmpsc
$LN5@s370_cmpsc:

; 592  :         else
; 593  :         {
; 594  :             U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  001bc	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  001c3	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  001c8	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  001cd	2b c8		 sub	 ecx, eax
  001cf	8b c1		 mov	 eax, ecx
  001d1	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 595  :             if (likely(!pMEMBLK->maddr[1]))

  001d6	b8 08 00 00 00	 mov	 eax, 8
  001db	48 6b c0 01	 imul	 rax, rax, 1
  001df	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001e7	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  001ed	75 0a		 jne	 SHORT $LN22@s370_cmpsc
  001ef	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv182[rsp], 1
  001f7	eb 08		 jmp	 SHORT $LN23@s370_cmpsc
$LN22@s370_cmpsc:
  001f9	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv182[rsp], 0
$LN23@s370_cmpsc:
  00201	83 7c 24 40 00	 cmp	 DWORD PTR tv182[rsp], 0
  00206	74 0a		 je	 SHORT $LN26@s370_cmpsc
  00208	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv190[rsp], 1
  00210	eb 08		 jmp	 SHORT $LN27@s370_cmpsc
$LN26@s370_cmpsc:
  00212	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv190[rsp], 0
$LN27@s370_cmpsc:
  0021a	83 7c 24 44 00	 cmp	 DWORD PTR tv190[rsp], 0
  0021f	74 63		 je	 SHORT $LN7@s370_cmpsc

; 596  :             {
; 597  :                 pMEMBLK->maddr[1] = MADDR

  00221	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00229	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0022d	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00233	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0023b	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0023f	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00243	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0024b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00253	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00256	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0025e	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00262	ba 01 00 00 00	 mov	 edx, 1
  00267	8b c8		 mov	 ecx, eax
  00269	e8 00 00 00 00	 call	 s370_maddr_l
  0026e	b9 08 00 00 00	 mov	 ecx, 8
  00273	48 6b c9 01	 imul	 rcx, rcx, 1
  00277	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0027f	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN7@s370_cmpsc:

; 598  :                 (
; 599  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 600  :                     pMEMBLK->arn,
; 601  :                     pMEMBLK->regs,
; 602  :                     ACCTYPE_WRITE,  // (store)
; 603  :                     pMEMBLK->pkey
; 604  :                 );
; 605  :             }
; 606  :             memcpy( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], src,                len1 );

  00284	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00289	b9 08 00 00 00	 mov	 ecx, 8
  0028e	48 6b c9 00	 imul	 rcx, rcx, 0
  00292	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00299	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  0029f	8b d2		 mov	 edx, edx
  002a1	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  002a9	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  002ae	48 03 ca	 add	 rcx, rdx
  002b1	48 8b f9	 mov	 rdi, rcx
  002b4	48 8b 74 24 70	 mov	 rsi, QWORD PTR src$[rsp]
  002b9	8b c8		 mov	 ecx, eax
  002bb	f3 a4		 rep movsb

; 607  :             memcpy(  pMEMBLK->maddr[1],                            src + len1, len+1 - len1 );

  002bd	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  002c2	ff c0		 inc	 eax
  002c4	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  002c9	2b c1		 sub	 eax, ecx
  002cb	48 98		 cdqe
  002cd	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  002d2	48 8b 54 24 70	 mov	 rdx, QWORD PTR src$[rsp]
  002d7	48 03 d1	 add	 rdx, rcx
  002da	48 8b ca	 mov	 rcx, rdx
  002dd	ba 08 00 00 00	 mov	 edx, 8
  002e2	48 6b d2 01	 imul	 rdx, rdx, 1
  002e6	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  002ee	48 8b 7c 17 10	 mov	 rdi, QWORD PTR [rdi+rdx+16]
  002f3	48 8b f1	 mov	 rsi, rcx
  002f6	48 8b c8	 mov	 rcx, rax
  002f9	f3 a4		 rep movsb
$LN6@s370_cmpsc:

; 608  :         }
; 609  :     }

  002fb	e9 ec 00 00 00	 jmp	 $LN4@s370_cmpsc
$LN3@s370_cmpsc:

; 610  :     else
; 611  :     {
; 612  :         if (unlikely(!pMEMBLK->maddr[1]))

  00300	b8 08 00 00 00	 mov	 eax, 8
  00305	48 6b c0 01	 imul	 rax, rax, 1
  00309	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00311	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00317	75 0a		 jne	 SHORT $LN28@s370_cmpsc
  00319	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv240[rsp], 1
  00321	eb 08		 jmp	 SHORT $LN29@s370_cmpsc
$LN28@s370_cmpsc:
  00323	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv240[rsp], 0
$LN29@s370_cmpsc:
  0032b	83 7c 24 48 00	 cmp	 DWORD PTR tv240[rsp], 0
  00330	74 0a		 je	 SHORT $LN32@s370_cmpsc
  00332	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv248[rsp], 1
  0033a	eb 08		 jmp	 SHORT $LN33@s370_cmpsc
$LN32@s370_cmpsc:
  0033c	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv248[rsp], 0
$LN33@s370_cmpsc:
  00344	83 7c 24 4c 00	 cmp	 DWORD PTR tv248[rsp], 0
  00349	74 63		 je	 SHORT $LN8@s370_cmpsc

; 613  :         {
; 614  :             pMEMBLK->maddr[1] = MADDR

  0034b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00353	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00357	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  0035d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00365	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00369	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0036d	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00375	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0037d	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00380	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00388	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  0038c	ba 01 00 00 00	 mov	 edx, 1
  00391	8b c8		 mov	 ecx, eax
  00393	e8 00 00 00 00	 call	 s370_maddr_l
  00398	b9 08 00 00 00	 mov	 ecx, 8
  0039d	48 6b c9 01	 imul	 rcx, rcx, 1
  003a1	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  003a9	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@s370_cmpsc:

; 615  :             (
; 616  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 617  :                 pMEMBLK->arn,
; 618  :                 pMEMBLK->regs,
; 619  :                 ACCTYPE_WRITE,  // (store)
; 620  :                 pMEMBLK->pkey
; 621  :             );
; 622  :         }
; 623  :         memcpy( &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK], src, len+1 );

  003ae	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  003b3	ff c0		 inc	 eax
  003b5	48 98		 cdqe
  003b7	b9 08 00 00 00	 mov	 ecx, 8
  003bc	48 6b c9 01	 imul	 rcx, rcx, 1
  003c0	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  003c7	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  003cd	8b d2		 mov	 edx, edx
  003cf	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  003d7	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  003dc	48 03 ca	 add	 rcx, rdx
  003df	48 8b f9	 mov	 rdi, rcx
  003e2	48 8b 74 24 70	 mov	 rsi, QWORD PTR src$[rsp]
  003e7	48 8b c8	 mov	 rcx, rax
  003ea	f3 a4		 rep movsb
$LN4@s370_cmpsc:

; 624  :     }
; 625  : }

  003ec	48 83 c4 58	 add	 rsp, 88			; 00000058H
  003f0	5f		 pop	 rdi
  003f1	5e		 pop	 rsi
  003f2	c3		 ret	 0
s370_cmpsc_vstorec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv82 = 52
tv142 = 56
tv154 = 60
tv158 = 64
tv164 = 68
tv190 = 72
tv198 = 76
tv218 = 80
tv224 = 84
tv255 = 88
tv263 = 92
value$2 = 96
val$ = 144
addr$ = 152
pMEMBLK$ = 160
s370_cmpsc_vstore8 PROC

; 439  : {

$LN50:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	56		 push	 rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 440  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00014	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0001b	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00020	89 84 24 98 00
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 441  : 
; 442  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00027	b8 08 00 00 00	 mov	 eax, 8
  0002c	48 6b c0 00	 imul	 rax, rax, 0
  00030	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00038	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0003e	74 1f		 je	 SHORT $LN14@s370_cmpsc
  00040	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00047	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0004f	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  00053	72 0a		 jb	 SHORT $LN14@s370_cmpsc
  00055	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  0005d	eb 08		 jmp	 SHORT $LN17@s370_cmpsc
$LN14@s370_cmpsc:
  0005f	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN17@s370_cmpsc:
  00067	83 7c 24 34 00	 cmp	 DWORD PTR tv82[rsp], 0
  0006c	0f 84 8e 00 00
	00		 je	 $LN2@s370_cmpsc

; 443  :     {
; 444  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00072	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00079	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  0007e	8b c0		 mov	 eax, eax
  00080	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00088	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 445  :         pMEMBLK->maddr[1] = 0;

  0008c	b8 08 00 00 00	 mov	 eax, 8
  00091	48 6b c0 01	 imul	 rax, rax, 1
  00095	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0009d	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 446  :         pMEMBLK->maddr[0] = MADDR

  000a6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000ae	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000b2	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000b6	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000be	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c6	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000c9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000d1	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000d5	ba 01 00 00 00	 mov	 edx, 1
  000da	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e2	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000e5	e8 00 00 00 00	 call	 s370_maddr_l
  000ea	b9 08 00 00 00	 mov	 ecx, 8
  000ef	48 6b c9 00	 imul	 rcx, rcx, 0
  000f3	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000fb	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s370_cmpsc:

; 447  :         (
; 448  :             pMEMBLK->vpagebeg,
; 449  :             pMEMBLK->arn,
; 450  :             pMEMBLK->regs,
; 451  :             ACCTYPE_WRITE,  // (store)
; 452  :             pMEMBLK->pkey
; 453  :         );
; 454  :     }
; 455  :     if (NOCROSSPAGE( addr, 8 ))

  00100	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00107	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0010c	3d f7 07 00 00	 cmp	 eax, 2039		; 000007f7H
  00111	7f 0a		 jg	 SHORT $LN20@s370_cmpsc
  00113	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  0011b	eb 08		 jmp	 SHORT $LN21@s370_cmpsc
$LN20@s370_cmpsc:
  0011d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN21@s370_cmpsc:
  00125	83 7c 24 38 00	 cmp	 DWORD PTR tv142[rsp], 0
  0012a	0f 84 5e 02 00
	00		 je	 $LN3@s370_cmpsc

; 456  :     {
; 457  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  00130	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00137	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0013f	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00143	48 81 c1 00 08
	00 00		 add	 rcx, 2048		; 00000800H
  0014a	48 3b c1	 cmp	 rax, rcx
  0014d	73 0a		 jae	 SHORT $LN24@s370_cmpsc
  0014f	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv154[rsp], 1
  00157	eb 08		 jmp	 SHORT $LN25@s370_cmpsc
$LN24@s370_cmpsc:
  00159	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv154[rsp], 0
$LN25@s370_cmpsc:
  00161	83 7c 24 3c 00	 cmp	 DWORD PTR tv154[rsp], 0
  00166	0f 84 ba 00 00
	00		 je	 $LN5@s370_cmpsc

; 458  :         {
; 459  :             if (U64_ALIGNED( addr ))

  0016c	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00173	83 e0 07	 and	 eax, 7
  00176	85 c0		 test	 eax, eax
  00178	75 0a		 jne	 SHORT $LN26@s370_cmpsc
  0017a	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv158[rsp], 1
  00182	eb 08		 jmp	 SHORT $LN27@s370_cmpsc
$LN26@s370_cmpsc:
  00184	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv158[rsp], 0
$LN27@s370_cmpsc:
  0018c	83 7c 24 40 00	 cmp	 DWORD PTR tv158[rsp], 0
  00191	74 0a		 je	 SHORT $LN30@s370_cmpsc
  00193	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv164[rsp], 1
  0019b	eb 08		 jmp	 SHORT $LN31@s370_cmpsc
$LN30@s370_cmpsc:
  0019d	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv164[rsp], 0
$LN31@s370_cmpsc:
  001a5	83 7c 24 44 00	 cmp	 DWORD PTR tv164[rsp], 0
  001aa	74 38		 je	 SHORT $LN7@s370_cmpsc

; 460  :                 *(U64*)   &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] = CSWAP64( val );

  001ac	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  001b4	e8 00 00 00 00	 call	 _byteswap_uint64
  001b9	b9 08 00 00 00	 mov	 ecx, 8
  001be	48 6b c9 00	 imul	 rcx, rcx, 0
  001c2	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  001c9	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  001cf	8b d2		 mov	 edx, edx
  001d1	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001d9	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001de	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax
  001e2	eb 3d		 jmp	 SHORT $LN8@s370_cmpsc
$LN7@s370_cmpsc:

; 461  :             else
; 462  :                 store_dw( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],           val );

  001e4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  001ec	e8 00 00 00 00	 call	 _byteswap_uint64
  001f1	b9 08 00 00 00	 mov	 ecx, 8
  001f6	48 6b c9 00	 imul	 rcx, rcx, 0
  001fa	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00201	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  00207	8b d2		 mov	 edx, edx
  00209	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00211	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00216	48 03 ca	 add	 rcx, rdx
  00219	48 8b d0	 mov	 rdx, rax
  0021c	e8 00 00 00 00	 call	 store_dw_noswap
$LN8@s370_cmpsc:

; 463  :         }

  00221	e9 63 01 00 00	 jmp	 $LN6@s370_cmpsc
$LN5@s370_cmpsc:

; 464  :         else
; 465  :         {
; 466  :             if (unlikely(!pMEMBLK->maddr[1]))

  00226	b8 08 00 00 00	 mov	 eax, 8
  0022b	48 6b c0 01	 imul	 rax, rax, 1
  0022f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00237	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0023d	75 0a		 jne	 SHORT $LN32@s370_cmpsc
  0023f	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv190[rsp], 1
  00247	eb 08		 jmp	 SHORT $LN33@s370_cmpsc
$LN32@s370_cmpsc:
  00249	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv190[rsp], 0
$LN33@s370_cmpsc:
  00251	83 7c 24 48 00	 cmp	 DWORD PTR tv190[rsp], 0
  00256	74 0a		 je	 SHORT $LN36@s370_cmpsc
  00258	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv198[rsp], 1
  00260	eb 08		 jmp	 SHORT $LN37@s370_cmpsc
$LN36@s370_cmpsc:
  00262	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv198[rsp], 0
$LN37@s370_cmpsc:
  0026a	83 7c 24 4c 00	 cmp	 DWORD PTR tv198[rsp], 0
  0026f	74 63		 je	 SHORT $LN9@s370_cmpsc

; 467  :             {
; 468  :                 pMEMBLK->maddr[1] = MADDR

  00271	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00279	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0027d	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00283	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0028b	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0028f	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00293	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0029b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002a3	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  002a6	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002ae	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002b2	ba 01 00 00 00	 mov	 edx, 1
  002b7	8b c8		 mov	 ecx, eax
  002b9	e8 00 00 00 00	 call	 s370_maddr_l
  002be	b9 08 00 00 00	 mov	 ecx, 8
  002c3	48 6b c9 01	 imul	 rcx, rcx, 1
  002c7	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002cf	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN9@s370_cmpsc:

; 469  :                 (
; 470  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 471  :                     pMEMBLK->arn,
; 472  :                     pMEMBLK->regs,
; 473  :                     ACCTYPE_WRITE,  // (store)
; 474  :                     pMEMBLK->pkey
; 475  :                 );
; 476  :             }
; 477  :             if (U64_ALIGNED( addr ))

  002d4	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  002db	83 e0 07	 and	 eax, 7
  002de	85 c0		 test	 eax, eax
  002e0	75 0a		 jne	 SHORT $LN38@s370_cmpsc
  002e2	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv218[rsp], 1
  002ea	eb 08		 jmp	 SHORT $LN39@s370_cmpsc
$LN38@s370_cmpsc:
  002ec	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv218[rsp], 0
$LN39@s370_cmpsc:
  002f4	83 7c 24 50 00	 cmp	 DWORD PTR tv218[rsp], 0
  002f9	74 0a		 je	 SHORT $LN42@s370_cmpsc
  002fb	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv224[rsp], 1
  00303	eb 08		 jmp	 SHORT $LN43@s370_cmpsc
$LN42@s370_cmpsc:
  00305	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv224[rsp], 0
$LN43@s370_cmpsc:
  0030d	83 7c 24 54 00	 cmp	 DWORD PTR tv224[rsp], 0
  00312	74 38		 je	 SHORT $LN10@s370_cmpsc

; 478  :                 *(U64*)   &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] = CSWAP64( val );

  00314	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  0031c	e8 00 00 00 00	 call	 _byteswap_uint64
  00321	b9 08 00 00 00	 mov	 ecx, 8
  00326	48 6b c9 01	 imul	 rcx, rcx, 1
  0032a	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00331	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  00337	8b d2		 mov	 edx, edx
  00339	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00341	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00346	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax
  0034a	eb 3d		 jmp	 SHORT $LN11@s370_cmpsc
$LN10@s370_cmpsc:

; 479  :             else
; 480  :                 store_dw( &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK],           val );

  0034c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  00354	e8 00 00 00 00	 call	 _byteswap_uint64
  00359	b9 08 00 00 00	 mov	 ecx, 8
  0035e	48 6b c9 01	 imul	 rcx, rcx, 1
  00362	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00369	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  0036f	8b d2		 mov	 edx, edx
  00371	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00379	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0037e	48 03 ca	 add	 rcx, rdx
  00381	48 8b d0	 mov	 rdx, rax
  00384	e8 00 00 00 00	 call	 store_dw_noswap
$LN11@s370_cmpsc:
$LN6@s370_cmpsc:

; 481  :         }
; 482  :     }

  00389	e9 5d 01 00 00	 jmp	 $LN4@s370_cmpsc
$LN3@s370_cmpsc:

; 483  :     else
; 484  :     {
; 485  :         U64 value = CSWAP64( val );

  0038e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR val$[rsp]
  00396	e8 00 00 00 00	 call	 _byteswap_uint64
  0039b	48 89 44 24 60	 mov	 QWORD PTR value$2[rsp], rax

; 486  :         U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  003a0	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  003a7	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  003ac	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  003b1	2b c8		 sub	 ecx, eax
  003b3	8b c1		 mov	 eax, ecx
  003b5	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 487  :         if (likely(!pMEMBLK->maddr[1]))

  003ba	b8 08 00 00 00	 mov	 eax, 8
  003bf	48 6b c0 01	 imul	 rax, rax, 1
  003c3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003cb	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  003d1	75 0a		 jne	 SHORT $LN44@s370_cmpsc
  003d3	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv255[rsp], 1
  003db	eb 08		 jmp	 SHORT $LN45@s370_cmpsc
$LN44@s370_cmpsc:
  003dd	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv255[rsp], 0
$LN45@s370_cmpsc:
  003e5	83 7c 24 58 00	 cmp	 DWORD PTR tv255[rsp], 0
  003ea	74 0a		 je	 SHORT $LN48@s370_cmpsc
  003ec	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv263[rsp], 1
  003f4	eb 08		 jmp	 SHORT $LN49@s370_cmpsc
$LN48@s370_cmpsc:
  003f6	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv263[rsp], 0
$LN49@s370_cmpsc:
  003fe	83 7c 24 5c 00	 cmp	 DWORD PTR tv263[rsp], 0
  00403	74 63		 je	 SHORT $LN12@s370_cmpsc

; 488  :         {
; 489  :             pMEMBLK->maddr[1] = MADDR

  00405	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0040d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00411	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00417	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0041f	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00423	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00427	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0042f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00437	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0043a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00442	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00446	ba 01 00 00 00	 mov	 edx, 1
  0044b	8b c8		 mov	 ecx, eax
  0044d	e8 00 00 00 00	 call	 s370_maddr_l
  00452	b9 08 00 00 00	 mov	 ecx, 8
  00457	48 6b c9 01	 imul	 rcx, rcx, 1
  0045b	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00463	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN12@s370_cmpsc:

; 490  :             (
; 491  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 492  :                 pMEMBLK->arn,
; 493  :                 pMEMBLK->regs,
; 494  :                 ACCTYPE_WRITE,  // (store)
; 495  :                 pMEMBLK->pkey
; 496  :             );
; 497  :         }
; 498  :         memcpy( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], (U8*)&value,            len1 );

  00468	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  0046d	b9 08 00 00 00	 mov	 ecx, 8
  00472	48 6b c9 00	 imul	 rcx, rcx, 0
  00476	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  0047d	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  00483	8b d2		 mov	 edx, edx
  00485	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0048d	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00492	48 03 ca	 add	 rcx, rdx
  00495	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$2[rsp]
  0049a	48 8b f9	 mov	 rdi, rcx
  0049d	48 8b f2	 mov	 rsi, rdx
  004a0	8b c8		 mov	 ecx, eax
  004a2	f3 a4		 rep movsb

; 499  :         memcpy( &pMEMBLK->maddr[1][0],                         (U8*)&value + len1, 8 - len1 );

  004a4	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  004a9	b9 08 00 00 00	 mov	 ecx, 8
  004ae	2b c8		 sub	 ecx, eax
  004b0	8b c1		 mov	 eax, ecx
  004b2	48 98		 cdqe
  004b4	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  004b9	48 8d 4c 0c 60	 lea	 rcx, QWORD PTR value$2[rsp+rcx]
  004be	ba 08 00 00 00	 mov	 edx, 8
  004c3	48 6b d2 01	 imul	 rdx, rdx, 1
  004c7	bf 01 00 00 00	 mov	 edi, 1
  004cc	48 6b ff 00	 imul	 rdi, rdi, 0
  004d0	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR pMEMBLK$[rsp]
  004d8	48 03 7c 16 10	 add	 rdi, QWORD PTR [rsi+rdx+16]
  004dd	48 8b d7	 mov	 rdx, rdi
  004e0	48 8b fa	 mov	 rdi, rdx
  004e3	48 8b f1	 mov	 rsi, rcx
  004e6	48 8b c8	 mov	 rcx, rax
  004e9	f3 a4		 rep movsb
$LN4@s370_cmpsc:

; 500  :     }
; 501  : }

  004eb	48 83 c4 78	 add	 rsp, 120		; 00000078H
  004ef	5f		 pop	 rdi
  004f0	5e		 pop	 rsi
  004f1	c3		 ret	 0
s370_cmpsc_vstore8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv82 = 52
tv142 = 56
tv154 = 60
tv158 = 64
tv164 = 68
tv191 = 72
tv199 = 76
tv219 = 80
tv225 = 84
tv257 = 88
tv265 = 92
value$2 = 96
val$ = 144
addr$ = 152
pMEMBLK$ = 160
s370_cmpsc_vstore4 PROC

; 304  : {

$LN50:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	56		 push	 rsi
  0000e	57		 push	 rdi
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 305  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00013	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0001a	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0001f	89 84 24 98 00
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 306  : 
; 307  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00026	b8 08 00 00 00	 mov	 eax, 8
  0002b	48 6b c0 00	 imul	 rax, rax, 0
  0002f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00037	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0003d	74 1f		 je	 SHORT $LN14@s370_cmpsc
  0003f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00046	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0004e	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  00052	72 0a		 jb	 SHORT $LN14@s370_cmpsc
  00054	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  0005c	eb 08		 jmp	 SHORT $LN17@s370_cmpsc
$LN14@s370_cmpsc:
  0005e	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN17@s370_cmpsc:
  00066	83 7c 24 34 00	 cmp	 DWORD PTR tv82[rsp], 0
  0006b	0f 84 8e 00 00
	00		 je	 $LN2@s370_cmpsc

; 308  :     {
; 309  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00071	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00078	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  0007d	8b c0		 mov	 eax, eax
  0007f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00087	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 310  :         pMEMBLK->maddr[1] = 0;

  0008b	b8 08 00 00 00	 mov	 eax, 8
  00090	48 6b c0 01	 imul	 rax, rax, 1
  00094	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0009c	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 311  :         pMEMBLK->maddr[0] = MADDR

  000a5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000ad	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000b1	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000b5	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000bd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c5	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000c8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000d0	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000d4	ba 01 00 00 00	 mov	 edx, 1
  000d9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e1	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000e4	e8 00 00 00 00	 call	 s370_maddr_l
  000e9	b9 08 00 00 00	 mov	 ecx, 8
  000ee	48 6b c9 00	 imul	 rcx, rcx, 0
  000f2	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000fa	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s370_cmpsc:

; 312  :         (
; 313  :             pMEMBLK->vpagebeg,
; 314  :             pMEMBLK->arn,
; 315  :             pMEMBLK->regs,
; 316  :             ACCTYPE_WRITE,  // (store)
; 317  :             pMEMBLK->pkey
; 318  :         );
; 319  :     }
; 320  :     if (NOCROSSPAGE( addr, 4 ))

  000ff	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00106	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0010b	3d fb 07 00 00	 cmp	 eax, 2043		; 000007fbH
  00110	7f 0a		 jg	 SHORT $LN20@s370_cmpsc
  00112	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  0011a	eb 08		 jmp	 SHORT $LN21@s370_cmpsc
$LN20@s370_cmpsc:
  0011c	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN21@s370_cmpsc:
  00124	83 7c 24 38 00	 cmp	 DWORD PTR tv142[rsp], 0
  00129	0f 84 5c 02 00
	00		 je	 $LN3@s370_cmpsc

; 321  :     {
; 322  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  0012f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00136	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0013e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00142	48 81 c1 00 08
	00 00		 add	 rcx, 2048		; 00000800H
  00149	48 3b c1	 cmp	 rax, rcx
  0014c	73 0a		 jae	 SHORT $LN24@s370_cmpsc
  0014e	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv154[rsp], 1
  00156	eb 08		 jmp	 SHORT $LN25@s370_cmpsc
$LN24@s370_cmpsc:
  00158	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv154[rsp], 0
$LN25@s370_cmpsc:
  00160	83 7c 24 3c 00	 cmp	 DWORD PTR tv154[rsp], 0
  00165	0f 84 b9 00 00
	00		 je	 $LN5@s370_cmpsc

; 323  :         {
; 324  :             if (U32_ALIGNED( addr ))

  0016b	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00172	83 e0 03	 and	 eax, 3
  00175	85 c0		 test	 eax, eax
  00177	75 0a		 jne	 SHORT $LN26@s370_cmpsc
  00179	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv158[rsp], 1
  00181	eb 08		 jmp	 SHORT $LN27@s370_cmpsc
$LN26@s370_cmpsc:
  00183	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv158[rsp], 0
$LN27@s370_cmpsc:
  0018b	83 7c 24 40 00	 cmp	 DWORD PTR tv158[rsp], 0
  00190	74 0a		 je	 SHORT $LN30@s370_cmpsc
  00192	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv164[rsp], 1
  0019a	eb 08		 jmp	 SHORT $LN31@s370_cmpsc
$LN30@s370_cmpsc:
  0019c	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv164[rsp], 0
$LN31@s370_cmpsc:
  001a4	83 7c 24 44 00	 cmp	 DWORD PTR tv164[rsp], 0
  001a9	74 36		 je	 SHORT $LN7@s370_cmpsc

; 325  :                 *(U32*)   &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] = CSWAP32( val );

  001ab	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR val$[rsp]
  001b2	e8 00 00 00 00	 call	 _byteswap_ulong
  001b7	b9 08 00 00 00	 mov	 ecx, 8
  001bc	48 6b c9 00	 imul	 rcx, rcx, 0
  001c0	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  001c7	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  001cd	8b d2		 mov	 edx, edx
  001cf	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001d7	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001dc	89 04 11	 mov	 DWORD PTR [rcx+rdx], eax
  001df	eb 3e		 jmp	 SHORT $LN8@s370_cmpsc
$LN7@s370_cmpsc:

; 326  :             else
; 327  :                 store_dw( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],           val );

  001e1	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR val$[rsp]
  001e8	8b c8		 mov	 ecx, eax
  001ea	e8 00 00 00 00	 call	 _byteswap_uint64
  001ef	b9 08 00 00 00	 mov	 ecx, 8
  001f4	48 6b c9 00	 imul	 rcx, rcx, 0
  001f8	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  001ff	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  00205	8b d2		 mov	 edx, edx
  00207	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0020f	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00214	48 03 ca	 add	 rcx, rdx
  00217	48 8b d0	 mov	 rdx, rax
  0021a	e8 00 00 00 00	 call	 store_dw_noswap
$LN8@s370_cmpsc:

; 328  :         }

  0021f	e9 62 01 00 00	 jmp	 $LN6@s370_cmpsc
$LN5@s370_cmpsc:

; 329  :         else
; 330  :         {
; 331  :             if (unlikely(!pMEMBLK->maddr[1]))

  00224	b8 08 00 00 00	 mov	 eax, 8
  00229	48 6b c0 01	 imul	 rax, rax, 1
  0022d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00235	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0023b	75 0a		 jne	 SHORT $LN32@s370_cmpsc
  0023d	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv191[rsp], 1
  00245	eb 08		 jmp	 SHORT $LN33@s370_cmpsc
$LN32@s370_cmpsc:
  00247	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv191[rsp], 0
$LN33@s370_cmpsc:
  0024f	83 7c 24 48 00	 cmp	 DWORD PTR tv191[rsp], 0
  00254	74 0a		 je	 SHORT $LN36@s370_cmpsc
  00256	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv199[rsp], 1
  0025e	eb 08		 jmp	 SHORT $LN37@s370_cmpsc
$LN36@s370_cmpsc:
  00260	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv199[rsp], 0
$LN37@s370_cmpsc:
  00268	83 7c 24 4c 00	 cmp	 DWORD PTR tv199[rsp], 0
  0026d	74 63		 je	 SHORT $LN9@s370_cmpsc

; 332  :             {
; 333  :                 pMEMBLK->maddr[1] = MADDR

  0026f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00277	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0027b	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00281	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00289	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0028d	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00291	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00299	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002a1	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  002a4	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002ac	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002b0	ba 01 00 00 00	 mov	 edx, 1
  002b5	8b c8		 mov	 ecx, eax
  002b7	e8 00 00 00 00	 call	 s370_maddr_l
  002bc	b9 08 00 00 00	 mov	 ecx, 8
  002c1	48 6b c9 01	 imul	 rcx, rcx, 1
  002c5	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002cd	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN9@s370_cmpsc:

; 334  :                 (
; 335  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 336  :                     pMEMBLK->arn,
; 337  :                     pMEMBLK->regs,
; 338  :                     ACCTYPE_WRITE,  // (store)
; 339  :                     pMEMBLK->pkey
; 340  :                 );
; 341  :             }
; 342  :             if (U32_ALIGNED( addr ))

  002d2	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  002d9	83 e0 03	 and	 eax, 3
  002dc	85 c0		 test	 eax, eax
  002de	75 0a		 jne	 SHORT $LN38@s370_cmpsc
  002e0	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv219[rsp], 1
  002e8	eb 08		 jmp	 SHORT $LN39@s370_cmpsc
$LN38@s370_cmpsc:
  002ea	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv219[rsp], 0
$LN39@s370_cmpsc:
  002f2	83 7c 24 50 00	 cmp	 DWORD PTR tv219[rsp], 0
  002f7	74 0a		 je	 SHORT $LN42@s370_cmpsc
  002f9	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv225[rsp], 1
  00301	eb 08		 jmp	 SHORT $LN43@s370_cmpsc
$LN42@s370_cmpsc:
  00303	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv225[rsp], 0
$LN43@s370_cmpsc:
  0030b	83 7c 24 54 00	 cmp	 DWORD PTR tv225[rsp], 0
  00310	74 36		 je	 SHORT $LN10@s370_cmpsc

; 343  :                 *(U32*)   &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] = CSWAP32( val );

  00312	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR val$[rsp]
  00319	e8 00 00 00 00	 call	 _byteswap_ulong
  0031e	b9 08 00 00 00	 mov	 ecx, 8
  00323	48 6b c9 01	 imul	 rcx, rcx, 1
  00327	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  0032e	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  00334	8b d2		 mov	 edx, edx
  00336	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0033e	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00343	89 04 11	 mov	 DWORD PTR [rcx+rdx], eax
  00346	eb 3e		 jmp	 SHORT $LN11@s370_cmpsc
$LN10@s370_cmpsc:

; 344  :             else
; 345  :                 store_dw( &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK],           val );

  00348	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR val$[rsp]
  0034f	8b c8		 mov	 ecx, eax
  00351	e8 00 00 00 00	 call	 _byteswap_uint64
  00356	b9 08 00 00 00	 mov	 ecx, 8
  0035b	48 6b c9 01	 imul	 rcx, rcx, 1
  0035f	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00366	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  0036c	8b d2		 mov	 edx, edx
  0036e	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00376	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0037b	48 03 ca	 add	 rcx, rdx
  0037e	48 8b d0	 mov	 rdx, rax
  00381	e8 00 00 00 00	 call	 store_dw_noswap
$LN11@s370_cmpsc:
$LN6@s370_cmpsc:

; 346  :         }
; 347  :     }

  00386	e9 5b 01 00 00	 jmp	 $LN4@s370_cmpsc
$LN3@s370_cmpsc:

; 348  :     else
; 349  :     {
; 350  :         U32 value = CSWAP32( val );

  0038b	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR val$[rsp]
  00392	e8 00 00 00 00	 call	 _byteswap_ulong
  00397	89 44 24 60	 mov	 DWORD PTR value$2[rsp], eax

; 351  :         U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  0039b	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  003a2	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  003a7	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  003ac	2b c8		 sub	 ecx, eax
  003ae	8b c1		 mov	 eax, ecx
  003b0	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 352  :         if (likely(!pMEMBLK->maddr[1]))

  003b5	b8 08 00 00 00	 mov	 eax, 8
  003ba	48 6b c0 01	 imul	 rax, rax, 1
  003be	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003c6	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  003cc	75 0a		 jne	 SHORT $LN44@s370_cmpsc
  003ce	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv257[rsp], 1
  003d6	eb 08		 jmp	 SHORT $LN45@s370_cmpsc
$LN44@s370_cmpsc:
  003d8	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv257[rsp], 0
$LN45@s370_cmpsc:
  003e0	83 7c 24 58 00	 cmp	 DWORD PTR tv257[rsp], 0
  003e5	74 0a		 je	 SHORT $LN48@s370_cmpsc
  003e7	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv265[rsp], 1
  003ef	eb 08		 jmp	 SHORT $LN49@s370_cmpsc
$LN48@s370_cmpsc:
  003f1	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv265[rsp], 0
$LN49@s370_cmpsc:
  003f9	83 7c 24 5c 00	 cmp	 DWORD PTR tv265[rsp], 0
  003fe	74 63		 je	 SHORT $LN12@s370_cmpsc

; 353  :         {
; 354  :             pMEMBLK->maddr[1] = MADDR

  00400	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00408	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0040c	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00412	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0041a	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0041e	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00422	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0042a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00432	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00435	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0043d	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00441	ba 01 00 00 00	 mov	 edx, 1
  00446	8b c8		 mov	 ecx, eax
  00448	e8 00 00 00 00	 call	 s370_maddr_l
  0044d	b9 08 00 00 00	 mov	 ecx, 8
  00452	48 6b c9 01	 imul	 rcx, rcx, 1
  00456	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0045e	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN12@s370_cmpsc:

; 355  :             (
; 356  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 357  :                 pMEMBLK->arn,
; 358  :                 pMEMBLK->regs,
; 359  :                 ACCTYPE_WRITE,  // (store)
; 360  :                 pMEMBLK->pkey
; 361  :             );
; 362  :         }
; 363  :         memcpy( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], (U8*)&value,            len1 );

  00463	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00468	b9 08 00 00 00	 mov	 ecx, 8
  0046d	48 6b c9 00	 imul	 rcx, rcx, 0
  00471	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00478	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  0047e	8b d2		 mov	 edx, edx
  00480	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00488	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0048d	48 03 ca	 add	 rcx, rdx
  00490	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$2[rsp]
  00495	48 8b f9	 mov	 rdi, rcx
  00498	48 8b f2	 mov	 rsi, rdx
  0049b	8b c8		 mov	 ecx, eax
  0049d	f3 a4		 rep movsb

; 364  :         memcpy( &pMEMBLK->maddr[1][0],                         (U8*)&value + len1, 4 - len1 );

  0049f	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  004a4	b9 04 00 00 00	 mov	 ecx, 4
  004a9	2b c8		 sub	 ecx, eax
  004ab	8b c1		 mov	 eax, ecx
  004ad	48 98		 cdqe
  004af	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  004b4	48 8d 4c 0c 60	 lea	 rcx, QWORD PTR value$2[rsp+rcx]
  004b9	ba 08 00 00 00	 mov	 edx, 8
  004be	48 6b d2 01	 imul	 rdx, rdx, 1
  004c2	bf 01 00 00 00	 mov	 edi, 1
  004c7	48 6b ff 00	 imul	 rdi, rdi, 0
  004cb	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR pMEMBLK$[rsp]
  004d3	48 03 7c 16 10	 add	 rdi, QWORD PTR [rsi+rdx+16]
  004d8	48 8b d7	 mov	 rdx, rdi
  004db	48 8b fa	 mov	 rdi, rdx
  004de	48 8b f1	 mov	 rsi, rcx
  004e1	48 8b c8	 mov	 rcx, rax
  004e4	f3 a4		 rep movsb
$LN4@s370_cmpsc:

; 365  :     }
; 366  : }

  004e6	48 83 c4 78	 add	 rsp, 120		; 00000078H
  004ea	5f		 pop	 rdi
  004eb	5e		 pop	 rsi
  004ec	c3		 ret	 0
s370_cmpsc_vstore4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
tv82 = 48
tv142 = 52
tv154 = 56
tv158 = 60
tv164 = 64
tv190 = 68
tv198 = 72
tv218 = 76
tv224 = 80
tv250 = 84
tv258 = 88
val$ = 112
addr$ = 120
pMEMBLK$ = 128
s370_cmpsc_vstore2 PROC

; 171  : {

$LN50:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	66 89 4c 24 08	 mov	 WORD PTR [rsp+8], cx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 172  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00012	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  00016	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0001b	89 44 24 78	 mov	 DWORD PTR addr$[rsp], eax

; 173  : 
; 174  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0001f	b8 08 00 00 00	 mov	 eax, 8
  00024	48 6b c0 00	 imul	 rax, rax, 0
  00028	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00030	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00036	74 1c		 je	 SHORT $LN14@s370_cmpsc
  00038	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  0003c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00044	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  00048	72 0a		 jb	 SHORT $LN14@s370_cmpsc
  0004a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  00052	eb 08		 jmp	 SHORT $LN17@s370_cmpsc
$LN14@s370_cmpsc:
  00054	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN17@s370_cmpsc:
  0005c	83 7c 24 30 00	 cmp	 DWORD PTR tv82[rsp], 0
  00061	0f 84 8b 00 00
	00		 je	 $LN2@s370_cmpsc

; 175  :     {
; 176  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00067	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  0006b	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  00070	8b c0		 mov	 eax, eax
  00072	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0007a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 177  :         pMEMBLK->maddr[1] = 0;

  0007e	b8 08 00 00 00	 mov	 eax, 8
  00083	48 6b c0 01	 imul	 rax, rax, 1
  00087	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0008f	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 178  :         pMEMBLK->maddr[0] = MADDR

  00098	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000a0	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000a4	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000a8	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  000b0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b8	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000bb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c3	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000c7	ba 01 00 00 00	 mov	 edx, 1
  000cc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000d4	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000d7	e8 00 00 00 00	 call	 s370_maddr_l
  000dc	b9 08 00 00 00	 mov	 ecx, 8
  000e1	48 6b c9 00	 imul	 rcx, rcx, 0
  000e5	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000ed	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s370_cmpsc:

; 179  :         (
; 180  :             pMEMBLK->vpagebeg,
; 181  :             pMEMBLK->arn,
; 182  :             pMEMBLK->regs,
; 183  :             ACCTYPE_WRITE,  // (store)
; 184  :             pMEMBLK->pkey
; 185  :         );
; 186  :     }
; 187  :     if (!LASTBYTEOFPAGE( addr ))

  000f2	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  000f6	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  000fb	3d ff 07 00 00	 cmp	 eax, 2047		; 000007ffH
  00100	75 0a		 jne	 SHORT $LN20@s370_cmpsc
  00102	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  0010a	eb 08		 jmp	 SHORT $LN21@s370_cmpsc
$LN20@s370_cmpsc:
  0010c	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN21@s370_cmpsc:
  00114	83 7c 24 34 00	 cmp	 DWORD PTR tv142[rsp], 0
  00119	0f 85 3d 02 00
	00		 jne	 $LN3@s370_cmpsc

; 188  :     {
; 189  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  0011f	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  00123	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0012b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0012f	48 81 c1 00 08
	00 00		 add	 rcx, 2048		; 00000800H
  00136	48 3b c1	 cmp	 rax, rcx
  00139	73 0a		 jae	 SHORT $LN24@s370_cmpsc
  0013b	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv154[rsp], 1
  00143	eb 08		 jmp	 SHORT $LN25@s370_cmpsc
$LN24@s370_cmpsc:
  00145	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv154[rsp], 0
$LN25@s370_cmpsc:
  0014d	83 7c 24 38 00	 cmp	 DWORD PTR tv154[rsp], 0
  00152	0f 84 ab 00 00
	00		 je	 $LN5@s370_cmpsc

; 190  :         {
; 191  :             if (U16_ALIGNED( addr ))

  00158	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  0015c	83 e0 01	 and	 eax, 1
  0015f	85 c0		 test	 eax, eax
  00161	75 0a		 jne	 SHORT $LN26@s370_cmpsc
  00163	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv158[rsp], 1
  0016b	eb 08		 jmp	 SHORT $LN27@s370_cmpsc
$LN26@s370_cmpsc:
  0016d	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv158[rsp], 0
$LN27@s370_cmpsc:
  00175	83 7c 24 3c 00	 cmp	 DWORD PTR tv158[rsp], 0
  0017a	74 0a		 je	 SHORT $LN30@s370_cmpsc
  0017c	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv164[rsp], 1
  00184	eb 08		 jmp	 SHORT $LN31@s370_cmpsc
$LN30@s370_cmpsc:
  00186	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv164[rsp], 0
$LN31@s370_cmpsc:
  0018e	83 7c 24 40 00	 cmp	 DWORD PTR tv164[rsp], 0
  00193	74 32		 je	 SHORT $LN7@s370_cmpsc

; 192  :                 *(U16*)   &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] = CSWAP16( val );

  00195	0f b7 4c 24 70	 movzx	 ecx, WORD PTR val$[rsp]
  0019a	e8 00 00 00 00	 call	 _byteswap_ushort
  0019f	b9 08 00 00 00	 mov	 ecx, 8
  001a4	48 6b c9 00	 imul	 rcx, rcx, 0
  001a8	8b 54 24 78	 mov	 edx, DWORD PTR addr$[rsp]
  001ac	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  001b2	8b d2		 mov	 edx, edx
  001b4	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001bc	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001c1	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  001c5	eb 37		 jmp	 SHORT $LN8@s370_cmpsc
$LN7@s370_cmpsc:

; 193  :             else
; 194  :                 store_hw( &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],           val );

  001c7	0f b7 4c 24 70	 movzx	 ecx, WORD PTR val$[rsp]
  001cc	e8 00 00 00 00	 call	 _byteswap_ushort
  001d1	b9 08 00 00 00	 mov	 ecx, 8
  001d6	48 6b c9 00	 imul	 rcx, rcx, 0
  001da	8b 54 24 78	 mov	 edx, DWORD PTR addr$[rsp]
  001de	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  001e4	8b d2		 mov	 edx, edx
  001e6	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001ee	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001f3	48 03 ca	 add	 rcx, rdx
  001f6	0f b7 d0	 movzx	 edx, ax
  001f9	e8 00 00 00 00	 call	 store_hw_noswap
$LN8@s370_cmpsc:

; 195  :         }

  001fe	e9 54 01 00 00	 jmp	 $LN6@s370_cmpsc
$LN5@s370_cmpsc:

; 196  :         else
; 197  :         {
; 198  :             if (unlikely(!pMEMBLK->maddr[1]))

  00203	b8 08 00 00 00	 mov	 eax, 8
  00208	48 6b c0 01	 imul	 rax, rax, 1
  0020c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00214	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0021a	75 0a		 jne	 SHORT $LN32@s370_cmpsc
  0021c	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv190[rsp], 1
  00224	eb 08		 jmp	 SHORT $LN33@s370_cmpsc
$LN32@s370_cmpsc:
  00226	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv190[rsp], 0
$LN33@s370_cmpsc:
  0022e	83 7c 24 44 00	 cmp	 DWORD PTR tv190[rsp], 0
  00233	74 0a		 je	 SHORT $LN36@s370_cmpsc
  00235	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv198[rsp], 1
  0023d	eb 08		 jmp	 SHORT $LN37@s370_cmpsc
$LN36@s370_cmpsc:
  0023f	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv198[rsp], 0
$LN37@s370_cmpsc:
  00247	83 7c 24 48 00	 cmp	 DWORD PTR tv198[rsp], 0
  0024c	74 63		 je	 SHORT $LN9@s370_cmpsc

; 199  :             {
; 200  :                 pMEMBLK->maddr[1] = MADDR

  0024e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00256	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0025a	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00260	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00268	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0026c	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00270	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  00278	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00280	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00283	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0028b	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  0028f	ba 01 00 00 00	 mov	 edx, 1
  00294	8b c8		 mov	 ecx, eax
  00296	e8 00 00 00 00	 call	 s370_maddr_l
  0029b	b9 08 00 00 00	 mov	 ecx, 8
  002a0	48 6b c9 01	 imul	 rcx, rcx, 1
  002a4	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002ac	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN9@s370_cmpsc:

; 201  :                 (
; 202  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 203  :                     pMEMBLK->arn,
; 204  :                     pMEMBLK->regs,
; 205  :                     ACCTYPE_WRITE,  // (store)
; 206  :                     pMEMBLK->pkey
; 207  :                 );
; 208  :             }
; 209  :             if (U16_ALIGNED( addr ))

  002b1	8b 44 24 78	 mov	 eax, DWORD PTR addr$[rsp]
  002b5	83 e0 01	 and	 eax, 1
  002b8	85 c0		 test	 eax, eax
  002ba	75 0a		 jne	 SHORT $LN38@s370_cmpsc
  002bc	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv218[rsp], 1
  002c4	eb 08		 jmp	 SHORT $LN39@s370_cmpsc
$LN38@s370_cmpsc:
  002c6	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv218[rsp], 0
$LN39@s370_cmpsc:
  002ce	83 7c 24 4c 00	 cmp	 DWORD PTR tv218[rsp], 0
  002d3	74 0a		 je	 SHORT $LN42@s370_cmpsc
  002d5	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv224[rsp], 1
  002dd	eb 08		 jmp	 SHORT $LN43@s370_cmpsc
$LN42@s370_cmpsc:
  002df	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv224[rsp], 0
$LN43@s370_cmpsc:
  002e7	83 7c 24 50 00	 cmp	 DWORD PTR tv224[rsp], 0
  002ec	74 32		 je	 SHORT $LN10@s370_cmpsc

; 210  :                 *(U16*)   &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] = CSWAP16( val );

  002ee	0f b7 4c 24 70	 movzx	 ecx, WORD PTR val$[rsp]
  002f3	e8 00 00 00 00	 call	 _byteswap_ushort
  002f8	b9 08 00 00 00	 mov	 ecx, 8
  002fd	48 6b c9 01	 imul	 rcx, rcx, 1
  00301	8b 54 24 78	 mov	 edx, DWORD PTR addr$[rsp]
  00305	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  0030b	8b d2		 mov	 edx, edx
  0030d	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00315	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0031a	66 89 04 11	 mov	 WORD PTR [rcx+rdx], ax
  0031e	eb 37		 jmp	 SHORT $LN11@s370_cmpsc
$LN10@s370_cmpsc:

; 211  :             else
; 212  :                 store_hw( &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK],           val );

  00320	0f b7 4c 24 70	 movzx	 ecx, WORD PTR val$[rsp]
  00325	e8 00 00 00 00	 call	 _byteswap_ushort
  0032a	b9 08 00 00 00	 mov	 ecx, 8
  0032f	48 6b c9 01	 imul	 rcx, rcx, 1
  00333	8b 54 24 78	 mov	 edx, DWORD PTR addr$[rsp]
  00337	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  0033d	8b d2		 mov	 edx, edx
  0033f	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00347	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0034c	48 03 ca	 add	 rcx, rdx
  0034f	0f b7 d0	 movzx	 edx, ax
  00352	e8 00 00 00 00	 call	 store_hw_noswap
$LN11@s370_cmpsc:
$LN6@s370_cmpsc:

; 213  :         }
; 214  :     }

  00357	e9 02 01 00 00	 jmp	 $LN4@s370_cmpsc
$LN3@s370_cmpsc:

; 215  :     else
; 216  :     {
; 217  :         if (likely(!pMEMBLK->maddr[1]))

  0035c	b8 08 00 00 00	 mov	 eax, 8
  00361	48 6b c0 01	 imul	 rax, rax, 1
  00365	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0036d	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00373	75 0a		 jne	 SHORT $LN44@s370_cmpsc
  00375	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv250[rsp], 1
  0037d	eb 08		 jmp	 SHORT $LN45@s370_cmpsc
$LN44@s370_cmpsc:
  0037f	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv250[rsp], 0
$LN45@s370_cmpsc:
  00387	83 7c 24 54 00	 cmp	 DWORD PTR tv250[rsp], 0
  0038c	74 0a		 je	 SHORT $LN48@s370_cmpsc
  0038e	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv258[rsp], 1
  00396	eb 08		 jmp	 SHORT $LN49@s370_cmpsc
$LN48@s370_cmpsc:
  00398	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv258[rsp], 0
$LN49@s370_cmpsc:
  003a0	83 7c 24 58 00	 cmp	 DWORD PTR tv258[rsp], 0
  003a5	74 63		 je	 SHORT $LN12@s370_cmpsc

; 218  :         {
; 219  :             pMEMBLK->maddr[1] = MADDR

  003a7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  003af	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003b3	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  003b9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003c1	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  003c5	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  003c9	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  003d1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003d9	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  003dc	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003e4	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  003e8	ba 01 00 00 00	 mov	 edx, 1
  003ed	8b c8		 mov	 ecx, eax
  003ef	e8 00 00 00 00	 call	 s370_maddr_l
  003f4	b9 08 00 00 00	 mov	 ecx, 8
  003f9	48 6b c9 01	 imul	 rcx, rcx, 1
  003fd	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00405	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN12@s370_cmpsc:

; 220  :             (
; 221  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 222  :                 pMEMBLK->arn,
; 223  :                 pMEMBLK->regs,
; 224  :                 ACCTYPE_WRITE,  // (store)
; 225  :                 pMEMBLK->pkey
; 226  :             );
; 227  :         }
; 228  :         pMEMBLK->maddr[0][PAGEFRAME_BYTEMASK] = (U8)(val >> 8);

  0040a	0f b7 44 24 70	 movzx	 eax, WORD PTR val$[rsp]
  0040f	c1 f8 08	 sar	 eax, 8
  00412	b9 08 00 00 00	 mov	 ecx, 8
  00417	48 6b c9 00	 imul	 rcx, rcx, 0
  0041b	ba 01 00 00 00	 mov	 edx, 1
  00420	48 69 d2 ff 07
	00 00		 imul	 rdx, rdx, 2047		; 000007ffH
  00427	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0042f	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00434	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 229  :         pMEMBLK->maddr[1][0]                  = (U8)(val     );

  00437	b8 08 00 00 00	 mov	 eax, 8
  0043c	48 6b c0 01	 imul	 rax, rax, 1
  00440	b9 01 00 00 00	 mov	 ecx, 1
  00445	48 6b c9 00	 imul	 rcx, rcx, 0
  00449	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00451	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00456	0f b6 54 24 70	 movzx	 edx, BYTE PTR val$[rsp]
  0045b	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
$LN4@s370_cmpsc:

; 230  :     }
; 231  : }

  0045e	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00462	c3		 ret	 0
s370_cmpsc_vstore2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
tv82 = 48
tv146 = 52
tv159 = 56
tv167 = 60
byt$ = 80
addr$ = 88
pMEMBLK$ = 96
s370_cmpsc_vstoreb PROC

; 66   : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  0000d	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 67   :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  00011	8b 44 24 58	 mov	 eax, DWORD PTR addr$[rsp]
  00015	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0001a	89 44 24 58	 mov	 DWORD PTR addr$[rsp], eax

; 68   : 
; 69   :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0001e	b8 08 00 00 00	 mov	 eax, 8
  00023	48 6b c0 00	 imul	 rax, rax, 0
  00027	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0002c	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00032	74 19		 je	 SHORT $LN7@s370_cmpsc
  00034	8b 44 24 58	 mov	 eax, DWORD PTR addr$[rsp]
  00038	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0003d	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  00041	72 0a		 jb	 SHORT $LN7@s370_cmpsc
  00043	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  0004b	eb 08		 jmp	 SHORT $LN10@s370_cmpsc
$LN7@s370_cmpsc:
  0004d	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN10@s370_cmpsc:
  00055	83 7c 24 30 00	 cmp	 DWORD PTR tv82[rsp], 0
  0005a	74 76		 je	 SHORT $LN2@s370_cmpsc

; 70   :     {
; 71   :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  0005c	8b 44 24 58	 mov	 eax, DWORD PTR addr$[rsp]
  00060	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  00065	8b c0		 mov	 eax, eax
  00067	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0006c	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 72   :         pMEMBLK->maddr[1] = 0;

  00070	b8 08 00 00 00	 mov	 eax, 8
  00075	48 6b c0 01	 imul	 rax, rax, 1
  00079	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0007e	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 73   :         pMEMBLK->maddr[0] = MADDR

  00087	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0008c	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  00090	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00094	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0009c	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000a1	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000a4	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000a9	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000ad	ba 01 00 00 00	 mov	 edx, 1
  000b2	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b7	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000ba	e8 00 00 00 00	 call	 s370_maddr_l
  000bf	b9 08 00 00 00	 mov	 ecx, 8
  000c4	48 6b c9 00	 imul	 rcx, rcx, 0
  000c8	48 8b 54 24 60	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000cd	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s370_cmpsc:

; 74   :         (
; 75   :             pMEMBLK->vpagebeg,
; 76   :             pMEMBLK->arn,
; 77   :             pMEMBLK->regs,
; 78   :             ACCTYPE_WRITE,  // (store)
; 79   :             pMEMBLK->pkey
; 80   :         );
; 81   :     }
; 82   :     if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  000d2	8b 44 24 58	 mov	 eax, DWORD PTR addr$[rsp]
  000d6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000db	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000df	48 81 c1 00 08
	00 00		 add	 rcx, 2048		; 00000800H
  000e6	48 3b c1	 cmp	 rax, rcx
  000e9	73 0a		 jae	 SHORT $LN13@s370_cmpsc
  000eb	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv146[rsp], 1
  000f3	eb 08		 jmp	 SHORT $LN14@s370_cmpsc
$LN13@s370_cmpsc:
  000f5	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv146[rsp], 0
$LN14@s370_cmpsc:
  000fd	83 7c 24 34 00	 cmp	 DWORD PTR tv146[rsp], 0
  00102	74 2c		 je	 SHORT $LN3@s370_cmpsc

; 83   :     {
; 84   :         pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] = byt;

  00104	b8 08 00 00 00	 mov	 eax, 8
  00109	48 6b c0 00	 imul	 rax, rax, 0
  0010d	8b 4c 24 58	 mov	 ecx, DWORD PTR addr$[rsp]
  00111	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  00117	8b c9		 mov	 ecx, ecx
  00119	48 8b 54 24 60	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0011e	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00123	0f b6 54 24 50	 movzx	 edx, BYTE PTR byt$[rsp]
  00128	88 14 08	 mov	 BYTE PTR [rax+rcx], dl

; 85   :     }

  0012b	e9 c3 00 00 00	 jmp	 $LN4@s370_cmpsc
$LN3@s370_cmpsc:

; 86   :     else
; 87   :     {
; 88   :         if (unlikely(!pMEMBLK->maddr[1]))

  00130	b8 08 00 00 00	 mov	 eax, 8
  00135	48 6b c0 01	 imul	 rax, rax, 1
  00139	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0013e	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00144	75 0a		 jne	 SHORT $LN15@s370_cmpsc
  00146	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv159[rsp], 1
  0014e	eb 08		 jmp	 SHORT $LN16@s370_cmpsc
$LN15@s370_cmpsc:
  00150	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv159[rsp], 0
$LN16@s370_cmpsc:
  00158	83 7c 24 38 00	 cmp	 DWORD PTR tv159[rsp], 0
  0015d	74 0a		 je	 SHORT $LN19@s370_cmpsc
  0015f	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv167[rsp], 1
  00167	eb 08		 jmp	 SHORT $LN20@s370_cmpsc
$LN19@s370_cmpsc:
  00169	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv167[rsp], 0
$LN20@s370_cmpsc:
  00171	83 7c 24 3c 00	 cmp	 DWORD PTR tv167[rsp], 0
  00176	74 54		 je	 SHORT $LN5@s370_cmpsc

; 89   :         {
; 90   :             pMEMBLK->maddr[1] = MADDR

  00178	48 8b 44 24 60	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0017d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00181	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00187	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0018c	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00190	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00194	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0019c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001a1	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  001a4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001a9	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  001ad	ba 01 00 00 00	 mov	 edx, 1
  001b2	8b c8		 mov	 ecx, eax
  001b4	e8 00 00 00 00	 call	 s370_maddr_l
  001b9	b9 08 00 00 00	 mov	 ecx, 8
  001be	48 6b c9 01	 imul	 rcx, rcx, 1
  001c2	48 8b 54 24 60	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001c7	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN5@s370_cmpsc:

; 91   :             (
; 92   :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 93   :                 pMEMBLK->arn,
; 94   :                 pMEMBLK->regs,
; 95   :                 ACCTYPE_WRITE,  // (store)
; 96   :                 pMEMBLK->pkey
; 97   :             );
; 98   :         }
; 99   :         pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] = byt;

  001cc	b8 08 00 00 00	 mov	 eax, 8
  001d1	48 6b c0 01	 imul	 rax, rax, 1
  001d5	8b 4c 24 58	 mov	 ecx, DWORD PTR addr$[rsp]
  001d9	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  001df	8b c9		 mov	 ecx, ecx
  001e1	48 8b 54 24 60	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001e6	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001eb	0f b6 54 24 50	 movzx	 edx, BYTE PTR byt$[rsp]
  001f0	88 14 08	 mov	 BYTE PTR [rax+rcx], dl
$LN4@s370_cmpsc:

; 100  :     }
; 101  : }

  001f3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001f7	c3		 ret	 0
s370_cmpsc_vstoreb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv82 = 52
tv146 = 56
tv158 = 60
tv182 = 64
tv190 = 68
tv242 = 72
tv250 = 76
dst$ = 112
len$ = 120
addr$ = 128
pMEMBLK$ = 136
s370_cmpsc_vfetchc PROC

; 508  : {

$LN34:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 509  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0001a	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00021	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00026	89 84 24 80 00
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 510  : 
; 511  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0002d	b8 08 00 00 00	 mov	 eax, 8
  00032	48 6b c0 00	 imul	 rax, rax, 0
  00036	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0003e	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00044	74 1f		 je	 SHORT $LN10@s370_cmpsc
  00046	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0004d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00055	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  00059	72 0a		 jb	 SHORT $LN10@s370_cmpsc
  0005b	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  00063	eb 08		 jmp	 SHORT $LN13@s370_cmpsc
$LN10@s370_cmpsc:
  00065	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN13@s370_cmpsc:
  0006d	83 7c 24 34 00	 cmp	 DWORD PTR tv82[rsp], 0
  00072	0f 84 8e 00 00
	00		 je	 $LN2@s370_cmpsc

; 512  :     {
; 513  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00078	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0007f	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  00084	8b c0		 mov	 eax, eax
  00086	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0008e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 514  :         pMEMBLK->maddr[1] = 0;

  00092	b8 08 00 00 00	 mov	 eax, 8
  00097	48 6b c0 01	 imul	 rax, rax, 1
  0009b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000a3	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 515  :         pMEMBLK->maddr[0] = MADDR

  000ac	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b4	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000b8	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000bc	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000c4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000cc	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000cf	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000d7	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000db	ba 01 00 00 00	 mov	 edx, 1
  000e0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000e8	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000eb	e8 00 00 00 00	 call	 s370_maddr_l
  000f0	b9 08 00 00 00	 mov	 ecx, 8
  000f5	48 6b c9 00	 imul	 rcx, rcx, 0
  000f9	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00101	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s370_cmpsc:

; 516  :         (
; 517  :             pMEMBLK->vpagebeg,
; 518  :             pMEMBLK->arn,
; 519  :             pMEMBLK->regs,
; 520  :             ACCTYPE_READ,   // (fetch)
; 521  :             pMEMBLK->pkey
; 522  :         );
; 523  :     }
; 524  :     if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  00106	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0010d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00115	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00119	48 81 c1 00 08
	00 00		 add	 rcx, 2048		; 00000800H
  00120	48 3b c1	 cmp	 rax, rcx
  00123	73 0a		 jae	 SHORT $LN16@s370_cmpsc
  00125	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv146[rsp], 1
  0012d	eb 08		 jmp	 SHORT $LN17@s370_cmpsc
$LN16@s370_cmpsc:
  0012f	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv146[rsp], 0
$LN17@s370_cmpsc:
  00137	83 7c 24 38 00	 cmp	 DWORD PTR tv146[rsp], 0
  0013c	0f 84 cd 01 00
	00		 je	 $LN3@s370_cmpsc

; 525  :     {
; 526  :         if (NOCROSSPAGE( addr, len ))

  00142	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00149	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0014e	0f b7 4c 24 78	 movzx	 ecx, WORD PTR len$[rsp]
  00153	ba ff 07 00 00	 mov	 edx, 2047		; 000007ffH
  00158	2b d1		 sub	 edx, ecx
  0015a	8b ca		 mov	 ecx, edx
  0015c	3b c1		 cmp	 eax, ecx
  0015e	7f 0a		 jg	 SHORT $LN20@s370_cmpsc
  00160	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv158[rsp], 1
  00168	eb 08		 jmp	 SHORT $LN21@s370_cmpsc
$LN20@s370_cmpsc:
  0016a	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv158[rsp], 0
$LN21@s370_cmpsc:
  00172	83 7c 24 3c 00	 cmp	 DWORD PTR tv158[rsp], 0
  00177	74 43		 je	 SHORT $LN5@s370_cmpsc

; 527  :         {
; 528  :             memcpy( dst, &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], len+1 );

  00179	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  0017e	ff c0		 inc	 eax
  00180	48 98		 cdqe
  00182	b9 08 00 00 00	 mov	 ecx, 8
  00187	48 6b c9 00	 imul	 rcx, rcx, 0
  0018b	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00192	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  00198	8b d2		 mov	 edx, edx
  0019a	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  001a2	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  001a7	48 03 ca	 add	 rcx, rdx
  001aa	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dst$[rsp]
  001af	48 8b f1	 mov	 rsi, rcx
  001b2	48 8b c8	 mov	 rcx, rax
  001b5	f3 a4		 rep movsb

; 529  :         }

  001b7	e9 4e 01 00 00	 jmp	 $LN6@s370_cmpsc
$LN5@s370_cmpsc:

; 530  :         else
; 531  :         {
; 532  :             U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  001bc	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  001c3	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  001c8	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  001cd	2b c8		 sub	 ecx, eax
  001cf	8b c1		 mov	 eax, ecx
  001d1	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 533  :             if (likely(!pMEMBLK->maddr[1]))

  001d6	b8 08 00 00 00	 mov	 eax, 8
  001db	48 6b c0 01	 imul	 rax, rax, 1
  001df	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001e7	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  001ed	75 0a		 jne	 SHORT $LN22@s370_cmpsc
  001ef	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv182[rsp], 1
  001f7	eb 08		 jmp	 SHORT $LN23@s370_cmpsc
$LN22@s370_cmpsc:
  001f9	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv182[rsp], 0
$LN23@s370_cmpsc:
  00201	83 7c 24 40 00	 cmp	 DWORD PTR tv182[rsp], 0
  00206	74 0a		 je	 SHORT $LN26@s370_cmpsc
  00208	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv190[rsp], 1
  00210	eb 08		 jmp	 SHORT $LN27@s370_cmpsc
$LN26@s370_cmpsc:
  00212	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv190[rsp], 0
$LN27@s370_cmpsc:
  0021a	83 7c 24 44 00	 cmp	 DWORD PTR tv190[rsp], 0
  0021f	74 63		 je	 SHORT $LN7@s370_cmpsc

; 534  :             {
; 535  :                 pMEMBLK->maddr[1] = MADDR

  00221	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00229	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0022d	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00233	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0023b	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0023f	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00243	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0024b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00253	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00256	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0025e	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00262	ba 01 00 00 00	 mov	 edx, 1
  00267	8b c8		 mov	 ecx, eax
  00269	e8 00 00 00 00	 call	 s370_maddr_l
  0026e	b9 08 00 00 00	 mov	 ecx, 8
  00273	48 6b c9 01	 imul	 rcx, rcx, 1
  00277	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0027f	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN7@s370_cmpsc:

; 536  :                 (
; 537  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 538  :                     pMEMBLK->arn,
; 539  :                     pMEMBLK->regs,
; 540  :                     ACCTYPE_READ,   // (fetch)
; 541  :                     pMEMBLK->pkey
; 542  :                 );
; 543  :             }
; 544  :             memcpy(  dst,         &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK], len1 );

  00284	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00289	b9 08 00 00 00	 mov	 ecx, 8
  0028e	48 6b c9 00	 imul	 rcx, rcx, 0
  00292	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00299	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  0029f	8b d2		 mov	 edx, edx
  002a1	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  002a9	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  002ae	48 03 ca	 add	 rcx, rdx
  002b1	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dst$[rsp]
  002b6	48 8b f1	 mov	 rsi, rcx
  002b9	8b c8		 mov	 ecx, eax
  002bb	f3 a4		 rep movsb

; 545  :             memcpy( (dst + len1), &pMEMBLK->maddr[1][0],        len+1     -      len1 );

  002bd	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  002c2	ff c0		 inc	 eax
  002c4	0f b7 4c 24 30	 movzx	 ecx, WORD PTR len1$1[rsp]
  002c9	2b c1		 sub	 eax, ecx
  002cb	48 98		 cdqe
  002cd	b9 08 00 00 00	 mov	 ecx, 8
  002d2	48 6b c9 01	 imul	 rcx, rcx, 1
  002d6	ba 01 00 00 00	 mov	 edx, 1
  002db	48 6b d2 00	 imul	 rdx, rdx, 0
  002df	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  002e7	48 03 54 0f 10	 add	 rdx, QWORD PTR [rdi+rcx+16]
  002ec	48 8b ca	 mov	 rcx, rdx
  002ef	0f b7 54 24 30	 movzx	 edx, WORD PTR len1$1[rsp]
  002f4	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dst$[rsp]
  002f9	48 03 fa	 add	 rdi, rdx
  002fc	48 8b d7	 mov	 rdx, rdi
  002ff	48 8b fa	 mov	 rdi, rdx
  00302	48 8b f1	 mov	 rsi, rcx
  00305	48 8b c8	 mov	 rcx, rax
  00308	f3 a4		 rep movsb
$LN6@s370_cmpsc:

; 546  :         }
; 547  :     }

  0030a	e9 ec 00 00 00	 jmp	 $LN4@s370_cmpsc
$LN3@s370_cmpsc:

; 548  :     else
; 549  :     {
; 550  :         if (unlikely(!pMEMBLK->maddr[1]))

  0030f	b8 08 00 00 00	 mov	 eax, 8
  00314	48 6b c0 01	 imul	 rax, rax, 1
  00318	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00320	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00326	75 0a		 jne	 SHORT $LN28@s370_cmpsc
  00328	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv242[rsp], 1
  00330	eb 08		 jmp	 SHORT $LN29@s370_cmpsc
$LN28@s370_cmpsc:
  00332	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv242[rsp], 0
$LN29@s370_cmpsc:
  0033a	83 7c 24 48 00	 cmp	 DWORD PTR tv242[rsp], 0
  0033f	74 0a		 je	 SHORT $LN32@s370_cmpsc
  00341	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv250[rsp], 1
  00349	eb 08		 jmp	 SHORT $LN33@s370_cmpsc
$LN32@s370_cmpsc:
  0034b	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv250[rsp], 0
$LN33@s370_cmpsc:
  00353	83 7c 24 4c 00	 cmp	 DWORD PTR tv250[rsp], 0
  00358	74 63		 je	 SHORT $LN8@s370_cmpsc

; 551  :         {
; 552  :             pMEMBLK->maddr[1] = MADDR

  0035a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00362	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00366	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  0036c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00374	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00378	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0037c	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00384	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0038c	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0038f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00397	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  0039b	ba 01 00 00 00	 mov	 edx, 1
  003a0	8b c8		 mov	 ecx, eax
  003a2	e8 00 00 00 00	 call	 s370_maddr_l
  003a7	b9 08 00 00 00	 mov	 ecx, 8
  003ac	48 6b c9 01	 imul	 rcx, rcx, 1
  003b0	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  003b8	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@s370_cmpsc:

; 553  :             (
; 554  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 555  :                 pMEMBLK->arn,
; 556  :                 pMEMBLK->regs,
; 557  :                 ACCTYPE_READ,   // (fetch)
; 558  :                 pMEMBLK->pkey
; 559  :             );
; 560  :         }
; 561  :         memcpy( dst, &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK], len+1 );

  003bd	0f b7 44 24 78	 movzx	 eax, WORD PTR len$[rsp]
  003c2	ff c0		 inc	 eax
  003c4	48 98		 cdqe
  003c6	b9 08 00 00 00	 mov	 ecx, 8
  003cb	48 6b c9 01	 imul	 rcx, rcx, 1
  003cf	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  003d6	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  003dc	8b d2		 mov	 edx, edx
  003de	48 8b bc 24 88
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  003e6	48 8b 4c 0f 10	 mov	 rcx, QWORD PTR [rdi+rcx+16]
  003eb	48 03 ca	 add	 rcx, rdx
  003ee	48 8b 7c 24 70	 mov	 rdi, QWORD PTR dst$[rsp]
  003f3	48 8b f1	 mov	 rsi, rcx
  003f6	48 8b c8	 mov	 rcx, rax
  003f9	f3 a4		 rep movsb
$LN4@s370_cmpsc:

; 562  :     }
; 563  : }

  003fb	48 83 c4 58	 add	 rsp, 88			; 00000058H
  003ff	5f		 pop	 rdi
  00400	5e		 pop	 rsi
  00401	c3		 ret	 0
s370_cmpsc_vfetchc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv82 = 52
tv142 = 56
tv154 = 60
tv158 = 64
tv164 = 68
tv190 = 72
tv198 = 76
tv218 = 80
tv224 = 84
tv253 = 88
tv261 = 92
value$2 = 96
addr$ = 144
pMEMBLK$ = 152
s370_cmpsc_vfetch8 PROC

; 372  : {

$LN48:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 373  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0000f	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00016	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0001b	89 84 24 90 00
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 374  : 
; 375  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00022	b8 08 00 00 00	 mov	 eax, 8
  00027	48 6b c0 00	 imul	 rax, rax, 0
  0002b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00033	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00039	74 1f		 je	 SHORT $LN12@s370_cmpsc
  0003b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00042	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0004a	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  0004e	72 0a		 jb	 SHORT $LN12@s370_cmpsc
  00050	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  00058	eb 08		 jmp	 SHORT $LN15@s370_cmpsc
$LN12@s370_cmpsc:
  0005a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN15@s370_cmpsc:
  00062	83 7c 24 34 00	 cmp	 DWORD PTR tv82[rsp], 0
  00067	0f 84 8e 00 00
	00		 je	 $LN2@s370_cmpsc

; 376  :     {
; 377  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  0006d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00074	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  00079	8b c0		 mov	 eax, eax
  0007b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00083	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 378  :         pMEMBLK->maddr[1] = 0;

  00087	b8 08 00 00 00	 mov	 eax, 8
  0008c	48 6b c0 01	 imul	 rax, rax, 1
  00090	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00098	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 379  :         pMEMBLK->maddr[0] = MADDR

  000a1	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000a9	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000ad	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000b1	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000b9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c1	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000c4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000cc	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000d0	ba 01 00 00 00	 mov	 edx, 1
  000d5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000dd	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000e0	e8 00 00 00 00	 call	 s370_maddr_l
  000e5	b9 08 00 00 00	 mov	 ecx, 8
  000ea	48 6b c9 00	 imul	 rcx, rcx, 0
  000ee	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000f6	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s370_cmpsc:

; 380  :         (
; 381  :             pMEMBLK->vpagebeg,
; 382  :             pMEMBLK->arn,
; 383  :             pMEMBLK->regs,
; 384  :             ACCTYPE_READ,   // (fetch)
; 385  :             pMEMBLK->pkey
; 386  :         );
; 387  :     }
; 388  :     if (NOCROSSPAGE( addr, 8 ))

  000fb	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00102	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00107	3d f7 07 00 00	 cmp	 eax, 2039		; 000007f7H
  0010c	7f 0a		 jg	 SHORT $LN18@s370_cmpsc
  0010e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00116	eb 08		 jmp	 SHORT $LN19@s370_cmpsc
$LN18@s370_cmpsc:
  00118	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN19@s370_cmpsc:
  00120	83 7c 24 38 00	 cmp	 DWORD PTR tv142[rsp], 0
  00125	0f 84 54 02 00
	00		 je	 $LN3@s370_cmpsc

; 389  :     {
; 390  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  0012b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00132	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0013a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0013e	48 81 c1 00 08
	00 00		 add	 rcx, 2048		; 00000800H
  00145	48 3b c1	 cmp	 rax, rcx
  00148	73 0a		 jae	 SHORT $LN22@s370_cmpsc
  0014a	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv154[rsp], 1
  00152	eb 08		 jmp	 SHORT $LN23@s370_cmpsc
$LN22@s370_cmpsc:
  00154	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv154[rsp], 0
$LN23@s370_cmpsc:
  0015c	83 7c 24 3c 00	 cmp	 DWORD PTR tv154[rsp], 0
  00161	0f 84 b5 00 00
	00		 je	 $LN5@s370_cmpsc

; 391  :         {
; 392  :             if (U64_ALIGNED( addr ))

  00167	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0016e	83 e0 07	 and	 eax, 7
  00171	85 c0		 test	 eax, eax
  00173	75 0a		 jne	 SHORT $LN24@s370_cmpsc
  00175	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv158[rsp], 1
  0017d	eb 08		 jmp	 SHORT $LN25@s370_cmpsc
$LN24@s370_cmpsc:
  0017f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv158[rsp], 0
$LN25@s370_cmpsc:
  00187	83 7c 24 40 00	 cmp	 DWORD PTR tv158[rsp], 0
  0018c	74 0a		 je	 SHORT $LN28@s370_cmpsc
  0018e	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv164[rsp], 1
  00196	eb 08		 jmp	 SHORT $LN29@s370_cmpsc
$LN28@s370_cmpsc:
  00198	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv164[rsp], 0
$LN29@s370_cmpsc:
  001a0	83 7c 24 44 00	 cmp	 DWORD PTR tv164[rsp], 0
  001a5	74 33		 je	 SHORT $LN7@s370_cmpsc

; 393  :                 return CSWAP64( *(U64*) &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001a7	b8 08 00 00 00	 mov	 eax, 8
  001ac	48 6b c0 00	 imul	 rax, rax, 0
  001b0	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  001b7	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  001bd	8b c9		 mov	 ecx, ecx
  001bf	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001c7	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001cc	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  001d0	e8 00 00 00 00	 call	 _byteswap_uint64
  001d5	e9 fa 02 00 00	 jmp	 $LN1@s370_cmpsc
$LN7@s370_cmpsc:

; 394  :             return fetch_dw(            &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001da	b8 08 00 00 00	 mov	 eax, 8
  001df	48 6b c0 00	 imul	 rax, rax, 0
  001e3	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  001ea	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  001f0	8b c9		 mov	 ecx, ecx
  001f2	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001fa	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001ff	48 03 c1	 add	 rax, rcx
  00202	48 8b c8	 mov	 rcx, rax
  00205	e8 00 00 00 00	 call	 fetch_dw_noswap
  0020a	48 8b c8	 mov	 rcx, rax
  0020d	e8 00 00 00 00	 call	 _byteswap_uint64
  00212	e9 bd 02 00 00	 jmp	 $LN1@s370_cmpsc

; 395  :         }

  00217	e9 5e 01 00 00	 jmp	 $LN6@s370_cmpsc
$LN5@s370_cmpsc:

; 396  :         else
; 397  :         {
; 398  :             if (unlikely(!pMEMBLK->maddr[1]))

  0021c	b8 08 00 00 00	 mov	 eax, 8
  00221	48 6b c0 01	 imul	 rax, rax, 1
  00225	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0022d	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00233	75 0a		 jne	 SHORT $LN30@s370_cmpsc
  00235	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv190[rsp], 1
  0023d	eb 08		 jmp	 SHORT $LN31@s370_cmpsc
$LN30@s370_cmpsc:
  0023f	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv190[rsp], 0
$LN31@s370_cmpsc:
  00247	83 7c 24 48 00	 cmp	 DWORD PTR tv190[rsp], 0
  0024c	74 0a		 je	 SHORT $LN34@s370_cmpsc
  0024e	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv198[rsp], 1
  00256	eb 08		 jmp	 SHORT $LN35@s370_cmpsc
$LN34@s370_cmpsc:
  00258	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv198[rsp], 0
$LN35@s370_cmpsc:
  00260	83 7c 24 4c 00	 cmp	 DWORD PTR tv198[rsp], 0
  00265	74 63		 je	 SHORT $LN8@s370_cmpsc

; 399  :             {
; 400  :                 pMEMBLK->maddr[1] = MADDR

  00267	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0026f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00273	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00279	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00281	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00285	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00289	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00291	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00299	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0029c	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002a4	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002a8	ba 01 00 00 00	 mov	 edx, 1
  002ad	8b c8		 mov	 ecx, eax
  002af	e8 00 00 00 00	 call	 s370_maddr_l
  002b4	b9 08 00 00 00	 mov	 ecx, 8
  002b9	48 6b c9 01	 imul	 rcx, rcx, 1
  002bd	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002c5	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@s370_cmpsc:

; 401  :                 (
; 402  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 403  :                     pMEMBLK->arn,
; 404  :                     pMEMBLK->regs,
; 405  :                     ACCTYPE_READ,   // (fetch)
; 406  :                     pMEMBLK->pkey
; 407  :                 );
; 408  :             }
; 409  :             if (U64_ALIGNED( addr ))

  002ca	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  002d1	83 e0 07	 and	 eax, 7
  002d4	85 c0		 test	 eax, eax
  002d6	75 0a		 jne	 SHORT $LN36@s370_cmpsc
  002d8	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv218[rsp], 1
  002e0	eb 08		 jmp	 SHORT $LN37@s370_cmpsc
$LN36@s370_cmpsc:
  002e2	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv218[rsp], 0
$LN37@s370_cmpsc:
  002ea	83 7c 24 50 00	 cmp	 DWORD PTR tv218[rsp], 0
  002ef	74 0a		 je	 SHORT $LN40@s370_cmpsc
  002f1	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv224[rsp], 1
  002f9	eb 08		 jmp	 SHORT $LN41@s370_cmpsc
$LN40@s370_cmpsc:
  002fb	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv224[rsp], 0
$LN41@s370_cmpsc:
  00303	83 7c 24 54 00	 cmp	 DWORD PTR tv224[rsp], 0
  00308	74 33		 je	 SHORT $LN9@s370_cmpsc

; 410  :                 return CSWAP64( *(U64*) &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  0030a	b8 08 00 00 00	 mov	 eax, 8
  0030f	48 6b c0 01	 imul	 rax, rax, 1
  00313	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  0031a	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  00320	8b c9		 mov	 ecx, ecx
  00322	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0032a	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0032f	48 8b 0c 08	 mov	 rcx, QWORD PTR [rax+rcx]
  00333	e8 00 00 00 00	 call	 _byteswap_uint64
  00338	e9 97 01 00 00	 jmp	 $LN1@s370_cmpsc
$LN9@s370_cmpsc:

; 411  :             return fetch_dw(            &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  0033d	b8 08 00 00 00	 mov	 eax, 8
  00342	48 6b c0 01	 imul	 rax, rax, 1
  00346	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  0034d	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  00353	8b c9		 mov	 ecx, ecx
  00355	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0035d	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  00362	48 03 c1	 add	 rax, rcx
  00365	48 8b c8	 mov	 rcx, rax
  00368	e8 00 00 00 00	 call	 fetch_dw_noswap
  0036d	48 8b c8	 mov	 rcx, rax
  00370	e8 00 00 00 00	 call	 _byteswap_uint64
  00375	e9 5a 01 00 00	 jmp	 $LN1@s370_cmpsc
$LN6@s370_cmpsc:

; 412  :         }
; 413  :     }

  0037a	e9 55 01 00 00	 jmp	 $LN4@s370_cmpsc
$LN3@s370_cmpsc:

; 414  :     else
; 415  :     {
; 416  :         U64 value;
; 417  :         U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  0037f	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00386	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  0038b	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00390	2b c8		 sub	 ecx, eax
  00392	8b c1		 mov	 eax, ecx
  00394	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 418  :         if (likely(!pMEMBLK->maddr[1]))

  00399	b8 08 00 00 00	 mov	 eax, 8
  0039e	48 6b c0 01	 imul	 rax, rax, 1
  003a2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003aa	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  003b0	75 0a		 jne	 SHORT $LN42@s370_cmpsc
  003b2	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv253[rsp], 1
  003ba	eb 08		 jmp	 SHORT $LN43@s370_cmpsc
$LN42@s370_cmpsc:
  003bc	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv253[rsp], 0
$LN43@s370_cmpsc:
  003c4	83 7c 24 58 00	 cmp	 DWORD PTR tv253[rsp], 0
  003c9	74 0a		 je	 SHORT $LN46@s370_cmpsc
  003cb	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv261[rsp], 1
  003d3	eb 08		 jmp	 SHORT $LN47@s370_cmpsc
$LN46@s370_cmpsc:
  003d5	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv261[rsp], 0
$LN47@s370_cmpsc:
  003dd	83 7c 24 5c 00	 cmp	 DWORD PTR tv261[rsp], 0
  003e2	74 63		 je	 SHORT $LN10@s370_cmpsc

; 419  :         {
; 420  :             pMEMBLK->maddr[1] = MADDR

  003e4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  003ec	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003f0	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  003f6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003fe	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00402	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00406	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0040e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00416	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00419	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00421	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00425	ba 01 00 00 00	 mov	 edx, 1
  0042a	8b c8		 mov	 ecx, eax
  0042c	e8 00 00 00 00	 call	 s370_maddr_l
  00431	b9 08 00 00 00	 mov	 ecx, 8
  00436	48 6b c9 01	 imul	 rcx, rcx, 1
  0043a	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00442	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN10@s370_cmpsc:

; 421  :             (
; 422  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 423  :                 pMEMBLK->arn,
; 424  :                 pMEMBLK->regs,
; 425  :                 ACCTYPE_READ,   // (fetch)
; 426  :                 pMEMBLK->pkey
; 427  :             );
; 428  :         }
; 429  :         memcpy( (U8*)&value,        &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],     len1 );

  00447	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  0044c	b9 08 00 00 00	 mov	 ecx, 8
  00451	48 6b c9 00	 imul	 rcx, rcx, 0
  00455	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  0045c	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  00462	8b d2		 mov	 edx, edx
  00464	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  0046c	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  00471	48 03 ca	 add	 rcx, rdx
  00474	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$2[rsp]
  00479	48 8b fa	 mov	 rdi, rdx
  0047c	48 8b f1	 mov	 rsi, rcx
  0047f	8b c8		 mov	 ecx, eax
  00481	f3 a4		 rep movsb

; 430  :         memcpy( (U8*)&value + len1, &pMEMBLK->maddr[1][0],                         8 - len1 );

  00483	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00488	b9 08 00 00 00	 mov	 ecx, 8
  0048d	2b c8		 sub	 ecx, eax
  0048f	8b c1		 mov	 eax, ecx
  00491	48 98		 cdqe
  00493	b9 08 00 00 00	 mov	 ecx, 8
  00498	48 6b c9 01	 imul	 rcx, rcx, 1
  0049c	ba 01 00 00 00	 mov	 edx, 1
  004a1	48 6b d2 00	 imul	 rdx, rdx, 0
  004a5	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  004ad	48 03 54 0f 10	 add	 rdx, QWORD PTR [rdi+rcx+16]
  004b2	48 8b ca	 mov	 rcx, rdx
  004b5	0f b7 54 24 30	 movzx	 edx, WORD PTR len1$1[rsp]
  004ba	48 8d 54 14 60	 lea	 rdx, QWORD PTR value$2[rsp+rdx]
  004bf	48 8b fa	 mov	 rdi, rdx
  004c2	48 8b f1	 mov	 rsi, rcx
  004c5	48 8b c8	 mov	 rcx, rax
  004c8	f3 a4		 rep movsb

; 431  :         return CSWAP64( value );

  004ca	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$2[rsp]
  004cf	e8 00 00 00 00	 call	 _byteswap_uint64
$LN4@s370_cmpsc:
$LN1@s370_cmpsc:

; 432  :     }
; 433  : }

  004d4	48 83 c4 78	 add	 rsp, 120		; 00000078H
  004d8	5f		 pop	 rdi
  004d9	5e		 pop	 rsi
  004da	c3		 ret	 0
s370_cmpsc_vfetch8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
len1$1 = 48
tv82 = 52
tv142 = 56
tv154 = 60
tv158 = 64
tv164 = 68
tv190 = 72
tv198 = 76
tv218 = 80
tv224 = 84
tv253 = 88
tv261 = 92
value$2 = 96
addr$ = 144
pMEMBLK$ = 152
s370_cmpsc_vfetch4 PROC

; 237  : {

$LN48:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	56		 push	 rsi
  0000a	57		 push	 rdi
  0000b	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 238  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0000f	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00016	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  0001b	89 84 24 90 00
	00 00		 mov	 DWORD PTR addr$[rsp], eax

; 239  : 
; 240  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  00022	b8 08 00 00 00	 mov	 eax, 8
  00027	48 6b c0 00	 imul	 rax, rax, 0
  0002b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00033	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00039	74 1f		 je	 SHORT $LN12@s370_cmpsc
  0003b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00042	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0004a	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  0004e	72 0a		 jb	 SHORT $LN12@s370_cmpsc
  00050	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  00058	eb 08		 jmp	 SHORT $LN15@s370_cmpsc
$LN12@s370_cmpsc:
  0005a	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN15@s370_cmpsc:
  00062	83 7c 24 34 00	 cmp	 DWORD PTR tv82[rsp], 0
  00067	0f 84 8e 00 00
	00		 je	 $LN2@s370_cmpsc

; 241  :     {
; 242  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  0006d	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00074	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  00079	8b c0		 mov	 eax, eax
  0007b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00083	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 243  :         pMEMBLK->maddr[1] = 0;

  00087	b8 08 00 00 00	 mov	 eax, 8
  0008c	48 6b c0 01	 imul	 rax, rax, 1
  00090	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00098	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 244  :         pMEMBLK->maddr[0] = MADDR

  000a1	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000a9	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  000ad	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  000b1	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  000b9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000c1	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000c4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000cc	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000d0	ba 01 00 00 00	 mov	 edx, 1
  000d5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000dd	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000e0	e8 00 00 00 00	 call	 s370_maddr_l
  000e5	b9 08 00 00 00	 mov	 ecx, 8
  000ea	48 6b c9 00	 imul	 rcx, rcx, 0
  000ee	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000f6	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s370_cmpsc:

; 245  :         (
; 246  :             pMEMBLK->vpagebeg,
; 247  :             pMEMBLK->arn,
; 248  :             pMEMBLK->regs,
; 249  :             ACCTYPE_READ,   // (fetch)
; 250  :             pMEMBLK->pkey
; 251  :         );
; 252  :     }
; 253  :     if (NOCROSSPAGE( addr, 4 ))

  000fb	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00102	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00107	3d fb 07 00 00	 cmp	 eax, 2043		; 000007fbH
  0010c	7f 0a		 jg	 SHORT $LN18@s370_cmpsc
  0010e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  00116	eb 08		 jmp	 SHORT $LN19@s370_cmpsc
$LN18@s370_cmpsc:
  00118	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN19@s370_cmpsc:
  00120	83 7c 24 38 00	 cmp	 DWORD PTR tv142[rsp], 0
  00125	0f 84 50 02 00
	00		 je	 $LN3@s370_cmpsc

; 254  :     {
; 255  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  0012b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00132	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0013a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0013e	48 81 c1 00 08
	00 00		 add	 rcx, 2048		; 00000800H
  00145	48 3b c1	 cmp	 rax, rcx
  00148	73 0a		 jae	 SHORT $LN22@s370_cmpsc
  0014a	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv154[rsp], 1
  00152	eb 08		 jmp	 SHORT $LN23@s370_cmpsc
$LN22@s370_cmpsc:
  00154	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv154[rsp], 0
$LN23@s370_cmpsc:
  0015c	83 7c 24 3c 00	 cmp	 DWORD PTR tv154[rsp], 0
  00161	0f 84 b3 00 00
	00		 je	 $LN5@s370_cmpsc

; 256  :         {
; 257  :             if (U32_ALIGNED( addr ))

  00167	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  0016e	83 e0 03	 and	 eax, 3
  00171	85 c0		 test	 eax, eax
  00173	75 0a		 jne	 SHORT $LN24@s370_cmpsc
  00175	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv158[rsp], 1
  0017d	eb 08		 jmp	 SHORT $LN25@s370_cmpsc
$LN24@s370_cmpsc:
  0017f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv158[rsp], 0
$LN25@s370_cmpsc:
  00187	83 7c 24 40 00	 cmp	 DWORD PTR tv158[rsp], 0
  0018c	74 0a		 je	 SHORT $LN28@s370_cmpsc
  0018e	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv164[rsp], 1
  00196	eb 08		 jmp	 SHORT $LN29@s370_cmpsc
$LN28@s370_cmpsc:
  00198	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv164[rsp], 0
$LN29@s370_cmpsc:
  001a0	83 7c 24 44 00	 cmp	 DWORD PTR tv164[rsp], 0
  001a5	74 32		 je	 SHORT $LN7@s370_cmpsc

; 258  :                 return CSWAP32( *(U32*) &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001a7	b8 08 00 00 00	 mov	 eax, 8
  001ac	48 6b c0 00	 imul	 rax, rax, 0
  001b0	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  001b7	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  001bd	8b c9		 mov	 ecx, ecx
  001bf	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001c7	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001cc	8b 0c 08	 mov	 ecx, DWORD PTR [rax+rcx]
  001cf	e8 00 00 00 00	 call	 _byteswap_ulong
  001d4	e9 f6 02 00 00	 jmp	 $LN1@s370_cmpsc
$LN7@s370_cmpsc:

; 259  :             return fetch_fw(            &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  001d9	b8 08 00 00 00	 mov	 eax, 8
  001de	48 6b c0 00	 imul	 rax, rax, 0
  001e2	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  001e9	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  001ef	8b c9		 mov	 ecx, ecx
  001f1	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001f9	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001fe	48 03 c1	 add	 rax, rcx
  00201	48 8b c8	 mov	 rcx, rax
  00204	e8 00 00 00 00	 call	 fetch_fw_noswap
  00209	8b c8		 mov	 ecx, eax
  0020b	e8 00 00 00 00	 call	 _byteswap_ulong
  00210	e9 ba 02 00 00	 jmp	 $LN1@s370_cmpsc

; 260  :         }

  00215	e9 5c 01 00 00	 jmp	 $LN6@s370_cmpsc
$LN5@s370_cmpsc:

; 261  :         else
; 262  :         {
; 263  :             if (unlikely(!pMEMBLK->maddr[1]))

  0021a	b8 08 00 00 00	 mov	 eax, 8
  0021f	48 6b c0 01	 imul	 rax, rax, 1
  00223	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0022b	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00231	75 0a		 jne	 SHORT $LN30@s370_cmpsc
  00233	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv190[rsp], 1
  0023b	eb 08		 jmp	 SHORT $LN31@s370_cmpsc
$LN30@s370_cmpsc:
  0023d	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv190[rsp], 0
$LN31@s370_cmpsc:
  00245	83 7c 24 48 00	 cmp	 DWORD PTR tv190[rsp], 0
  0024a	74 0a		 je	 SHORT $LN34@s370_cmpsc
  0024c	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv198[rsp], 1
  00254	eb 08		 jmp	 SHORT $LN35@s370_cmpsc
$LN34@s370_cmpsc:
  00256	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv198[rsp], 0
$LN35@s370_cmpsc:
  0025e	83 7c 24 4c 00	 cmp	 DWORD PTR tv198[rsp], 0
  00263	74 63		 je	 SHORT $LN8@s370_cmpsc

; 264  :             {
; 265  :                 pMEMBLK->maddr[1] = MADDR

  00265	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0026d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00271	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00277	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0027f	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00283	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00287	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0028f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00297	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0029a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  002a2	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  002a6	ba 01 00 00 00	 mov	 edx, 1
  002ab	8b c8		 mov	 ecx, eax
  002ad	e8 00 00 00 00	 call	 s370_maddr_l
  002b2	b9 08 00 00 00	 mov	 ecx, 8
  002b7	48 6b c9 01	 imul	 rcx, rcx, 1
  002bb	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002c3	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@s370_cmpsc:

; 266  :                 (
; 267  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 268  :                     pMEMBLK->arn,
; 269  :                     pMEMBLK->regs,
; 270  :                     ACCTYPE_READ,   // (fetch)
; 271  :                     pMEMBLK->pkey
; 272  :                 );
; 273  :             }
; 274  :             if (U32_ALIGNED( addr ))

  002c8	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  002cf	83 e0 03	 and	 eax, 3
  002d2	85 c0		 test	 eax, eax
  002d4	75 0a		 jne	 SHORT $LN36@s370_cmpsc
  002d6	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv218[rsp], 1
  002de	eb 08		 jmp	 SHORT $LN37@s370_cmpsc
$LN36@s370_cmpsc:
  002e0	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv218[rsp], 0
$LN37@s370_cmpsc:
  002e8	83 7c 24 50 00	 cmp	 DWORD PTR tv218[rsp], 0
  002ed	74 0a		 je	 SHORT $LN40@s370_cmpsc
  002ef	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv224[rsp], 1
  002f7	eb 08		 jmp	 SHORT $LN41@s370_cmpsc
$LN40@s370_cmpsc:
  002f9	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv224[rsp], 0
$LN41@s370_cmpsc:
  00301	83 7c 24 54 00	 cmp	 DWORD PTR tv224[rsp], 0
  00306	74 32		 je	 SHORT $LN9@s370_cmpsc

; 275  :                 return CSWAP32( *(U32*) &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  00308	b8 08 00 00 00	 mov	 eax, 8
  0030d	48 6b c0 01	 imul	 rax, rax, 1
  00311	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  00318	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  0031e	8b c9		 mov	 ecx, ecx
  00320	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00328	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0032d	8b 0c 08	 mov	 ecx, DWORD PTR [rax+rcx]
  00330	e8 00 00 00 00	 call	 _byteswap_ulong
  00335	e9 95 01 00 00	 jmp	 $LN1@s370_cmpsc
$LN9@s370_cmpsc:

; 276  :             return fetch_fw(            &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  0033a	b8 08 00 00 00	 mov	 eax, 8
  0033f	48 6b c0 01	 imul	 rax, rax, 1
  00343	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR addr$[rsp]
  0034a	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  00350	8b c9		 mov	 ecx, ecx
  00352	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0035a	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0035f	48 03 c1	 add	 rax, rcx
  00362	48 8b c8	 mov	 rcx, rax
  00365	e8 00 00 00 00	 call	 fetch_fw_noswap
  0036a	8b c8		 mov	 ecx, eax
  0036c	e8 00 00 00 00	 call	 _byteswap_ulong
  00371	e9 59 01 00 00	 jmp	 $LN1@s370_cmpsc
$LN6@s370_cmpsc:

; 277  :         }
; 278  :     }

  00376	e9 54 01 00 00	 jmp	 $LN4@s370_cmpsc
$LN3@s370_cmpsc:

; 279  :     else
; 280  :     {
; 281  :         U32 value;
; 282  :         U16 len1 = PAGEFRAME_PAGESIZE - (addr & PAGEFRAME_BYTEMASK);

  0037b	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR addr$[rsp]
  00382	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  00387	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0038c	2b c8		 sub	 ecx, eax
  0038e	8b c1		 mov	 eax, ecx
  00390	66 89 44 24 30	 mov	 WORD PTR len1$1[rsp], ax

; 283  :         if (likely(!pMEMBLK->maddr[1]))

  00395	b8 08 00 00 00	 mov	 eax, 8
  0039a	48 6b c0 01	 imul	 rax, rax, 1
  0039e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003a6	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  003ac	75 0a		 jne	 SHORT $LN42@s370_cmpsc
  003ae	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv253[rsp], 1
  003b6	eb 08		 jmp	 SHORT $LN43@s370_cmpsc
$LN42@s370_cmpsc:
  003b8	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv253[rsp], 0
$LN43@s370_cmpsc:
  003c0	83 7c 24 58 00	 cmp	 DWORD PTR tv253[rsp], 0
  003c5	74 0a		 je	 SHORT $LN46@s370_cmpsc
  003c7	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv261[rsp], 1
  003cf	eb 08		 jmp	 SHORT $LN47@s370_cmpsc
$LN46@s370_cmpsc:
  003d1	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv261[rsp], 0
$LN47@s370_cmpsc:
  003d9	83 7c 24 5c 00	 cmp	 DWORD PTR tv261[rsp], 0
  003de	74 63		 je	 SHORT $LN10@s370_cmpsc

; 284  :         {
; 285  :             pMEMBLK->maddr[1] = MADDR

  003e0	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  003e8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003ec	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  003f2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  003fa	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  003fe	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00402	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0040a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00412	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  00415	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0041d	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00421	ba 01 00 00 00	 mov	 edx, 1
  00426	8b c8		 mov	 ecx, eax
  00428	e8 00 00 00 00	 call	 s370_maddr_l
  0042d	b9 08 00 00 00	 mov	 ecx, 8
  00432	48 6b c9 01	 imul	 rcx, rcx, 1
  00436	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0043e	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN10@s370_cmpsc:

; 286  :             (
; 287  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 288  :                 pMEMBLK->arn,
; 289  :                 pMEMBLK->regs,
; 290  :                 ACCTYPE_READ,   // (fetch)
; 291  :                 pMEMBLK->pkey
; 292  :             );
; 293  :         }
; 294  :         memcpy( (U8*)&value,        &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK],     len1 );

  00443	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00448	b9 08 00 00 00	 mov	 ecx, 8
  0044d	48 6b c9 00	 imul	 rcx, rcx, 0
  00451	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR addr$[rsp]
  00458	81 e2 ff 07 00
	00		 and	 edx, 2047		; 000007ffH
  0045e	8b d2		 mov	 edx, edx
  00460	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  00468	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  0046d	48 03 ca	 add	 rcx, rdx
  00470	48 8d 54 24 60	 lea	 rdx, QWORD PTR value$2[rsp]
  00475	48 8b fa	 mov	 rdi, rdx
  00478	48 8b f1	 mov	 rsi, rcx
  0047b	8b c8		 mov	 ecx, eax
  0047d	f3 a4		 rep movsb

; 295  :         memcpy( (U8*)&value + len1, &pMEMBLK->maddr[1][0],                         4 - len1 );

  0047f	0f b7 44 24 30	 movzx	 eax, WORD PTR len1$1[rsp]
  00484	b9 04 00 00 00	 mov	 ecx, 4
  00489	2b c8		 sub	 ecx, eax
  0048b	8b c1		 mov	 eax, ecx
  0048d	48 98		 cdqe
  0048f	b9 08 00 00 00	 mov	 ecx, 8
  00494	48 6b c9 01	 imul	 rcx, rcx, 1
  00498	ba 01 00 00 00	 mov	 edx, 1
  0049d	48 6b d2 00	 imul	 rdx, rdx, 0
  004a1	48 8b bc 24 98
	00 00 00	 mov	 rdi, QWORD PTR pMEMBLK$[rsp]
  004a9	48 03 54 0f 10	 add	 rdx, QWORD PTR [rdi+rcx+16]
  004ae	48 8b ca	 mov	 rcx, rdx
  004b1	0f b7 54 24 30	 movzx	 edx, WORD PTR len1$1[rsp]
  004b6	48 8d 54 14 60	 lea	 rdx, QWORD PTR value$2[rsp+rdx]
  004bb	48 8b fa	 mov	 rdi, rdx
  004be	48 8b f1	 mov	 rsi, rcx
  004c1	48 8b c8	 mov	 rcx, rax
  004c4	f3 a4		 rep movsb

; 296  :         return CSWAP32( value );

  004c6	8b 4c 24 60	 mov	 ecx, DWORD PTR value$2[rsp]
  004ca	e8 00 00 00 00	 call	 _byteswap_ulong
$LN4@s370_cmpsc:
$LN1@s370_cmpsc:

; 297  :     }
; 298  : }

  004cf	48 83 c4 78	 add	 rsp, 120		; 00000078H
  004d3	5f		 pop	 rdi
  004d4	5e		 pop	 rsi
  004d5	c3		 ret	 0
s370_cmpsc_vfetch4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
tv82 = 48
tv142 = 52
tv154 = 56
tv158 = 60
tv164 = 64
tv190 = 68
tv198 = 72
tv218 = 76
tv224 = 80
tv250 = 84
tv258 = 88
addr$ = 112
pMEMBLK$ = 120
s370_cmpsc_vfetch2 PROC

; 107  : {

$LN48:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 108  :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0000d	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  00011	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00016	89 44 24 70	 mov	 DWORD PTR addr$[rsp], eax

; 109  : 
; 110  :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0001a	b8 08 00 00 00	 mov	 eax, 8
  0001f	48 6b c0 00	 imul	 rax, rax, 0
  00023	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00028	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0002e	74 19		 je	 SHORT $LN12@s370_cmpsc
  00030	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  00034	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00039	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  0003d	72 0a		 jb	 SHORT $LN12@s370_cmpsc
  0003f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  00047	eb 08		 jmp	 SHORT $LN15@s370_cmpsc
$LN12@s370_cmpsc:
  00049	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN15@s370_cmpsc:
  00051	83 7c 24 30 00	 cmp	 DWORD PTR tv82[rsp], 0
  00056	74 76		 je	 SHORT $LN2@s370_cmpsc

; 111  :     {
; 112  :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00058	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  0005c	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  00061	8b c0		 mov	 eax, eax
  00063	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00068	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 113  :         pMEMBLK->maddr[1] = 0;

  0006c	b8 08 00 00 00	 mov	 eax, 8
  00071	48 6b c0 01	 imul	 rax, rax, 1
  00075	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0007a	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 114  :         pMEMBLK->maddr[0] = MADDR

  00083	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00088	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  0008c	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00090	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00098	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0009d	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000a0	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000a5	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000a9	ba 01 00 00 00	 mov	 edx, 1
  000ae	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b3	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000b6	e8 00 00 00 00	 call	 s370_maddr_l
  000bb	b9 08 00 00 00	 mov	 ecx, 8
  000c0	48 6b c9 00	 imul	 rcx, rcx, 0
  000c4	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000c9	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s370_cmpsc:

; 115  :         (
; 116  :             pMEMBLK->vpagebeg,
; 117  :             pMEMBLK->arn,
; 118  :             pMEMBLK->regs,
; 119  :             ACCTYPE_READ,   // (fetch)
; 120  :             pMEMBLK->pkey
; 121  :         );
; 122  :     }
; 123  :     if (!LASTBYTEOFPAGE( addr ))

  000ce	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  000d2	25 ff 07 00 00	 and	 eax, 2047		; 000007ffH
  000d7	3d ff 07 00 00	 cmp	 eax, 2047		; 000007ffH
  000dc	75 0a		 jne	 SHORT $LN18@s370_cmpsc
  000de	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv142[rsp], 1
  000e6	eb 08		 jmp	 SHORT $LN19@s370_cmpsc
$LN18@s370_cmpsc:
  000e8	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv142[rsp], 0
$LN19@s370_cmpsc:
  000f0	83 7c 24 34 00	 cmp	 DWORD PTR tv142[rsp], 0
  000f5	0f 85 1e 02 00
	00		 jne	 $LN3@s370_cmpsc

; 124  :     {
; 125  :         if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  000fb	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  000ff	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00104	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00108	48 81 c1 00 08
	00 00		 add	 rcx, 2048		; 00000800H
  0010f	48 3b c1	 cmp	 rax, rcx
  00112	73 0a		 jae	 SHORT $LN22@s370_cmpsc
  00114	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv154[rsp], 1
  0011c	eb 08		 jmp	 SHORT $LN23@s370_cmpsc
$LN22@s370_cmpsc:
  0011e	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv154[rsp], 0
$LN23@s370_cmpsc:
  00126	83 7c 24 38 00	 cmp	 DWORD PTR tv154[rsp], 0
  0012b	0f 84 a6 00 00
	00		 je	 $LN5@s370_cmpsc

; 126  :         {
; 127  :             if (U16_ALIGNED( addr ))

  00131	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  00135	83 e0 01	 and	 eax, 1
  00138	85 c0		 test	 eax, eax
  0013a	75 0a		 jne	 SHORT $LN24@s370_cmpsc
  0013c	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv158[rsp], 1
  00144	eb 08		 jmp	 SHORT $LN25@s370_cmpsc
$LN24@s370_cmpsc:
  00146	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv158[rsp], 0
$LN25@s370_cmpsc:
  0014e	83 7c 24 3c 00	 cmp	 DWORD PTR tv158[rsp], 0
  00153	74 0a		 je	 SHORT $LN28@s370_cmpsc
  00155	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv164[rsp], 1
  0015d	eb 08		 jmp	 SHORT $LN29@s370_cmpsc
$LN28@s370_cmpsc:
  0015f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv164[rsp], 0
$LN29@s370_cmpsc:
  00167	83 7c 24 40 00	 cmp	 DWORD PTR tv164[rsp], 0
  0016c	74 2d		 je	 SHORT $LN7@s370_cmpsc

; 128  :                 return CSWAP16( *(U16*) &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  0016e	b8 08 00 00 00	 mov	 eax, 8
  00173	48 6b c0 00	 imul	 rax, rax, 0
  00177	8b 4c 24 70	 mov	 ecx, DWORD PTR addr$[rsp]
  0017b	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  00181	8b c9		 mov	 ecx, ecx
  00183	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  00188	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0018d	0f b7 0c 08	 movzx	 ecx, WORD PTR [rax+rcx]
  00191	e8 00 00 00 00	 call	 _byteswap_ushort
  00196	e9 62 02 00 00	 jmp	 $LN1@s370_cmpsc
$LN7@s370_cmpsc:

; 129  :             return fetch_hw(            &pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK] );

  0019b	b8 08 00 00 00	 mov	 eax, 8
  001a0	48 6b c0 00	 imul	 rax, rax, 0
  001a4	8b 4c 24 70	 mov	 ecx, DWORD PTR addr$[rsp]
  001a8	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  001ae	8b c9		 mov	 ecx, ecx
  001b0	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001b5	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001ba	48 03 c1	 add	 rax, rcx
  001bd	48 8b c8	 mov	 rcx, rax
  001c0	e8 00 00 00 00	 call	 fetch_hw_noswap
  001c5	0f b7 c8	 movzx	 ecx, ax
  001c8	e8 00 00 00 00	 call	 _byteswap_ushort
  001cd	e9 2b 02 00 00	 jmp	 $LN1@s370_cmpsc

; 130  :         }

  001d2	e9 3d 01 00 00	 jmp	 $LN6@s370_cmpsc
$LN5@s370_cmpsc:

; 131  :         else
; 132  :         {
; 133  :             if (unlikely(!pMEMBLK->maddr[1]))

  001d7	b8 08 00 00 00	 mov	 eax, 8
  001dc	48 6b c0 01	 imul	 rax, rax, 1
  001e0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001e5	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  001eb	75 0a		 jne	 SHORT $LN30@s370_cmpsc
  001ed	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv190[rsp], 1
  001f5	eb 08		 jmp	 SHORT $LN31@s370_cmpsc
$LN30@s370_cmpsc:
  001f7	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv190[rsp], 0
$LN31@s370_cmpsc:
  001ff	83 7c 24 44 00	 cmp	 DWORD PTR tv190[rsp], 0
  00204	74 0a		 je	 SHORT $LN34@s370_cmpsc
  00206	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv198[rsp], 1
  0020e	eb 08		 jmp	 SHORT $LN35@s370_cmpsc
$LN34@s370_cmpsc:
  00210	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv198[rsp], 0
$LN35@s370_cmpsc:
  00218	83 7c 24 48 00	 cmp	 DWORD PTR tv198[rsp], 0
  0021d	74 54		 je	 SHORT $LN8@s370_cmpsc

; 134  :             {
; 135  :                 pMEMBLK->maddr[1] = MADDR

  0021f	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00224	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00228	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  0022e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00233	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00237	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0023b	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00243	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00248	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0024b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00250	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00254	ba 01 00 00 00	 mov	 edx, 1
  00259	8b c8		 mov	 ecx, eax
  0025b	e8 00 00 00 00	 call	 s370_maddr_l
  00260	b9 08 00 00 00	 mov	 ecx, 8
  00265	48 6b c9 01	 imul	 rcx, rcx, 1
  00269	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0026e	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN8@s370_cmpsc:

; 136  :                 (
; 137  :                     pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 138  :                     pMEMBLK->arn,
; 139  :                     pMEMBLK->regs,
; 140  :                     ACCTYPE_READ,   // (fetch)
; 141  :                     pMEMBLK->pkey
; 142  :                 );
; 143  :             }
; 144  :             if (U16_ALIGNED( addr ))

  00273	8b 44 24 70	 mov	 eax, DWORD PTR addr$[rsp]
  00277	83 e0 01	 and	 eax, 1
  0027a	85 c0		 test	 eax, eax
  0027c	75 0a		 jne	 SHORT $LN36@s370_cmpsc
  0027e	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv218[rsp], 1
  00286	eb 08		 jmp	 SHORT $LN37@s370_cmpsc
$LN36@s370_cmpsc:
  00288	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv218[rsp], 0
$LN37@s370_cmpsc:
  00290	83 7c 24 4c 00	 cmp	 DWORD PTR tv218[rsp], 0
  00295	74 0a		 je	 SHORT $LN40@s370_cmpsc
  00297	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv224[rsp], 1
  0029f	eb 08		 jmp	 SHORT $LN41@s370_cmpsc
$LN40@s370_cmpsc:
  002a1	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv224[rsp], 0
$LN41@s370_cmpsc:
  002a9	83 7c 24 50 00	 cmp	 DWORD PTR tv224[rsp], 0
  002ae	74 2d		 je	 SHORT $LN9@s370_cmpsc

; 145  :                 return CSWAP16( *(U16*) &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  002b0	b8 08 00 00 00	 mov	 eax, 8
  002b5	48 6b c0 01	 imul	 rax, rax, 1
  002b9	8b 4c 24 70	 mov	 ecx, DWORD PTR addr$[rsp]
  002bd	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  002c3	8b c9		 mov	 ecx, ecx
  002c5	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002ca	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  002cf	0f b7 0c 08	 movzx	 ecx, WORD PTR [rax+rcx]
  002d3	e8 00 00 00 00	 call	 _byteswap_ushort
  002d8	e9 20 01 00 00	 jmp	 $LN1@s370_cmpsc
$LN9@s370_cmpsc:

; 146  :             return fetch_hw(            &pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK] );

  002dd	b8 08 00 00 00	 mov	 eax, 8
  002e2	48 6b c0 01	 imul	 rax, rax, 1
  002e6	8b 4c 24 70	 mov	 ecx, DWORD PTR addr$[rsp]
  002ea	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  002f0	8b c9		 mov	 ecx, ecx
  002f2	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  002f7	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  002fc	48 03 c1	 add	 rax, rcx
  002ff	48 8b c8	 mov	 rcx, rax
  00302	e8 00 00 00 00	 call	 fetch_hw_noswap
  00307	0f b7 c8	 movzx	 ecx, ax
  0030a	e8 00 00 00 00	 call	 _byteswap_ushort
  0030f	e9 e9 00 00 00	 jmp	 $LN1@s370_cmpsc
$LN6@s370_cmpsc:

; 147  :         }
; 148  :     }

  00314	e9 e4 00 00 00	 jmp	 $LN4@s370_cmpsc
$LN3@s370_cmpsc:

; 149  :     else
; 150  :     {
; 151  :         if (likely(!pMEMBLK->maddr[1]))

  00319	b8 08 00 00 00	 mov	 eax, 8
  0031e	48 6b c0 01	 imul	 rax, rax, 1
  00322	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00327	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0032d	75 0a		 jne	 SHORT $LN42@s370_cmpsc
  0032f	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv250[rsp], 1
  00337	eb 08		 jmp	 SHORT $LN43@s370_cmpsc
$LN42@s370_cmpsc:
  00339	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv250[rsp], 0
$LN43@s370_cmpsc:
  00341	83 7c 24 54 00	 cmp	 DWORD PTR tv250[rsp], 0
  00346	74 0a		 je	 SHORT $LN46@s370_cmpsc
  00348	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv258[rsp], 1
  00350	eb 08		 jmp	 SHORT $LN47@s370_cmpsc
$LN46@s370_cmpsc:
  00352	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv258[rsp], 0
$LN47@s370_cmpsc:
  0035a	83 7c 24 58 00	 cmp	 DWORD PTR tv258[rsp], 0
  0035f	74 54		 je	 SHORT $LN10@s370_cmpsc

; 152  :         {
; 153  :             pMEMBLK->maddr[1] = MADDR

  00361	48 8b 44 24 78	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00366	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0036a	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00370	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00375	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  00379	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  0037d	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00385	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0038a	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  0038d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00392	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  00396	ba 01 00 00 00	 mov	 edx, 1
  0039b	8b c8		 mov	 ecx, eax
  0039d	e8 00 00 00 00	 call	 s370_maddr_l
  003a2	b9 08 00 00 00	 mov	 ecx, 8
  003a7	48 6b c9 01	 imul	 rcx, rcx, 1
  003ab	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  003b0	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN10@s370_cmpsc:

; 154  :             (
; 155  :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 156  :                 pMEMBLK->arn,
; 157  :                 pMEMBLK->regs,
; 158  :                 ACCTYPE_READ,   // (fetch)
; 159  :                 pMEMBLK->pkey
; 160  :             );
; 161  :         }
; 162  :         return (((U16) pMEMBLK->maddr[0][PAGEFRAME_BYTEMASK]) << 8)

  003b5	b8 08 00 00 00	 mov	 eax, 8
  003ba	48 6b c0 00	 imul	 rax, rax, 0
  003be	b9 01 00 00 00	 mov	 ecx, 1
  003c3	48 69 c9 ff 07
	00 00		 imul	 rcx, rcx, 2047		; 000007ffH
  003ca	48 8b 54 24 78	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  003cf	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  003d4	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  003d8	c1 e0 08	 shl	 eax, 8
  003db	b9 08 00 00 00	 mov	 ecx, 8
  003e0	48 6b c9 01	 imul	 rcx, rcx, 1
  003e4	ba 01 00 00 00	 mov	 edx, 1
  003e9	48 6b d2 00	 imul	 rdx, rdx, 0
  003ed	4c 8b 44 24 78	 mov	 r8, QWORD PTR pMEMBLK$[rsp]
  003f2	49 8b 4c 08 10	 mov	 rcx, QWORD PTR [r8+rcx+16]
  003f7	0f b6 0c 11	 movzx	 ecx, BYTE PTR [rcx+rdx]
  003fb	0b c1		 or	 eax, ecx
$LN4@s370_cmpsc:
$LN1@s370_cmpsc:

; 163  :            |    ((U16) pMEMBLK->maddr[1][0]                       );
; 164  :     }
; 165  : }

  003fd	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00401	c3		 ret	 0
s370_cmpsc_vfetch2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\cmpscmem.c
_TEXT	SEGMENT
tv82 = 48
tv146 = 52
tv159 = 56
tv167 = 60
addr$ = 80
pMEMBLK$ = 88
s370_cmpsc_vfetchb PROC

; 25   : {

$LN21:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 26   :     addr &= ADDRESS_MAXWRAP( pMEMBLK->regs );

  0000d	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00011	25 ff ff ff 00	 and	 eax, 16777215		; 00ffffffH
  00016	89 44 24 50	 mov	 DWORD PTR addr$[rsp], eax

; 27   : 
; 28   :     if (unlikely(!pMEMBLK->maddr[0] || addr < pMEMBLK->vpagebeg))

  0001a	b8 08 00 00 00	 mov	 eax, 8
  0001f	48 6b c0 00	 imul	 rax, rax, 0
  00023	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00028	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  0002e	74 19		 je	 SHORT $LN7@s370_cmpsc
  00030	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  00034	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00039	48 3b 41 08	 cmp	 rax, QWORD PTR [rcx+8]
  0003d	72 0a		 jb	 SHORT $LN7@s370_cmpsc
  0003f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
  00047	eb 08		 jmp	 SHORT $LN10@s370_cmpsc
$LN7@s370_cmpsc:
  00049	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv82[rsp], 1
$LN10@s370_cmpsc:
  00051	83 7c 24 30 00	 cmp	 DWORD PTR tv82[rsp], 0
  00056	74 76		 je	 SHORT $LN2@s370_cmpsc

; 29   :     {
; 30   :         pMEMBLK->vpagebeg = (addr & PAGEFRAME_PAGEMASK);

  00058	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  0005c	25 00 f8 ff 7f	 and	 eax, 2147481600		; 7ffff800H
  00061	8b c0		 mov	 eax, eax
  00063	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00068	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 31   :         pMEMBLK->maddr[1] = 0;

  0006c	b8 08 00 00 00	 mov	 eax, 8
  00071	48 6b c0 01	 imul	 rax, rax, 1
  00075	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0007a	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 32   :         pMEMBLK->maddr[0] = MADDR

  00083	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  00088	0f b6 40 24	 movzx	 eax, BYTE PTR [rax+36]
  0008c	88 44 24 28	 mov	 BYTE PTR [rsp+40], al
  00090	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00098	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0009d	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000a0	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000a5	44 8b 40 20	 mov	 r8d, DWORD PTR [rax+32]
  000a9	ba 01 00 00 00	 mov	 edx, 1
  000ae	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  000b3	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000b6	e8 00 00 00 00	 call	 s370_maddr_l
  000bb	b9 08 00 00 00	 mov	 ecx, 8
  000c0	48 6b c9 00	 imul	 rcx, rcx, 0
  000c4	48 8b 54 24 58	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  000c9	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN2@s370_cmpsc:

; 33   :         (
; 34   :             pMEMBLK->vpagebeg,
; 35   :             pMEMBLK->arn,
; 36   :             pMEMBLK->regs,
; 37   :             ACCTYPE_READ,   // (fetch)
; 38   :             pMEMBLK->pkey
; 39   :         );
; 40   :     }
; 41   :     if (MEMBLK_FIRSTPAGE( pMEMBLK, addr ))

  000ce	8b 44 24 50	 mov	 eax, DWORD PTR addr$[rsp]
  000d2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  000d7	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000db	48 81 c1 00 08
	00 00		 add	 rcx, 2048		; 00000800H
  000e2	48 3b c1	 cmp	 rax, rcx
  000e5	73 0a		 jae	 SHORT $LN13@s370_cmpsc
  000e7	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv146[rsp], 1
  000ef	eb 08		 jmp	 SHORT $LN14@s370_cmpsc
$LN13@s370_cmpsc:
  000f1	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv146[rsp], 0
$LN14@s370_cmpsc:
  000f9	83 7c 24 34 00	 cmp	 DWORD PTR tv146[rsp], 0
  000fe	74 2d		 je	 SHORT $LN3@s370_cmpsc

; 42   :     {
; 43   :         return pMEMBLK->maddr[0][addr & PAGEFRAME_BYTEMASK];

  00100	b8 08 00 00 00	 mov	 eax, 8
  00105	48 6b c0 00	 imul	 rax, rax, 0
  00109	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  0010d	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  00113	8b c9		 mov	 ecx, ecx
  00115	48 8b 54 24 58	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  0011a	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  0011f	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00123	e9 c4 00 00 00	 jmp	 $LN1@s370_cmpsc

; 44   :     }

  00128	e9 bf 00 00 00	 jmp	 $LN4@s370_cmpsc
$LN3@s370_cmpsc:

; 45   :     else
; 46   :     {
; 47   :         if (unlikely(!pMEMBLK->maddr[1]))

  0012d	b8 08 00 00 00	 mov	 eax, 8
  00132	48 6b c0 01	 imul	 rax, rax, 1
  00136	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0013b	48 83 7c 01 10
	00		 cmp	 QWORD PTR [rcx+rax+16], 0
  00141	75 0a		 jne	 SHORT $LN15@s370_cmpsc
  00143	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv159[rsp], 1
  0014b	eb 08		 jmp	 SHORT $LN16@s370_cmpsc
$LN15@s370_cmpsc:
  0014d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv159[rsp], 0
$LN16@s370_cmpsc:
  00155	83 7c 24 38 00	 cmp	 DWORD PTR tv159[rsp], 0
  0015a	74 0a		 je	 SHORT $LN19@s370_cmpsc
  0015c	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv167[rsp], 1
  00164	eb 08		 jmp	 SHORT $LN20@s370_cmpsc
$LN19@s370_cmpsc:
  00166	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv167[rsp], 0
$LN20@s370_cmpsc:
  0016e	83 7c 24 3c 00	 cmp	 DWORD PTR tv167[rsp], 0
  00173	74 54		 je	 SHORT $LN5@s370_cmpsc

; 48   :         {
; 49   :             pMEMBLK->maddr[1] = MADDR

  00175	48 8b 44 24 58	 mov	 rax, QWORD PTR pMEMBLK$[rsp]
  0017a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0017e	48 05 00 08 00
	00		 add	 rax, 2048		; 00000800H
  00184	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  00189	0f b6 49 24	 movzx	 ecx, BYTE PTR [rcx+36]
  0018d	88 4c 24 28	 mov	 BYTE PTR [rsp+40], cl
  00191	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  00199	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  0019e	4c 8b 09	 mov	 r9, QWORD PTR [rcx]
  001a1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pMEMBLK$[rsp]
  001a6	44 8b 41 20	 mov	 r8d, DWORD PTR [rcx+32]
  001aa	ba 01 00 00 00	 mov	 edx, 1
  001af	8b c8		 mov	 ecx, eax
  001b1	e8 00 00 00 00	 call	 s370_maddr_l
  001b6	b9 08 00 00 00	 mov	 ecx, 8
  001bb	48 6b c9 01	 imul	 rcx, rcx, 1
  001bf	48 8b 54 24 58	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001c4	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax
$LN5@s370_cmpsc:

; 50   :             (
; 51   :                 pMEMBLK->vpagebeg + PAGEFRAME_PAGESIZE,
; 52   :                 pMEMBLK->arn,
; 53   :                 pMEMBLK->regs,
; 54   :                 ACCTYPE_READ,   // (fetch)
; 55   :                 pMEMBLK->pkey
; 56   :             );
; 57   :         }
; 58   :         return pMEMBLK->maddr[1][addr & PAGEFRAME_BYTEMASK];

  001c9	b8 08 00 00 00	 mov	 eax, 8
  001ce	48 6b c0 01	 imul	 rax, rax, 1
  001d2	8b 4c 24 50	 mov	 ecx, DWORD PTR addr$[rsp]
  001d6	81 e1 ff 07 00
	00		 and	 ecx, 2047		; 000007ffH
  001dc	8b c9		 mov	 ecx, ecx
  001de	48 8b 54 24 58	 mov	 rdx, QWORD PTR pMEMBLK$[rsp]
  001e3	48 8b 44 02 10	 mov	 rax, QWORD PTR [rdx+rax+16]
  001e8	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
$LN4@s370_cmpsc:
$LN1@s370_cmpsc:

; 59   :     }
; 60   : }

  001ec	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001f0	c3		 ret	 0
s370_cmpsc_vfetchb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\dat.h
;	COMDAT s370_maddr_l
_TEXT	SEGMENT
tlbix$ = 48
aea_crn$ = 52
tv70 = 56
maddr$ = 64
addr$ = 96
len$ = 104
arn$ = 112
regs$ = 120
acctype$ = 128
akey$ = 136
s370_maddr_l PROC					; COMDAT

; 307  : {

$LN14:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00013	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 308  :     /* Note: ALL of the below conditions must be true for a TLB hit
; 309  :        to occur.  If ANY of them are false, then it's a TLB miss,
; 310  :        requiring us to then perform a full DAT address translation.
; 311  : 
; 312  :        Note too that on the grand scheme of things the order/sequence
; 313  :        of the below tests (if statements) is completely unimportant
; 314  :        since ALL conditions must be checked anyway in order for a hit
; 315  :        to occur, and it doesn't matter that a miss tests a few extra
; 316  :        conditions since it's going to do a full translation anyway!
; 317  :        (which is many, many instructions)
; 318  :     */
; 319  : 
; 320  :     int  aea_crn  = (arn >= USE_ARMODE) ? 0 : regs->AEA_AR( arn );

  00017	83 7c 24 70 10	 cmp	 DWORD PTR arn$[rsp], 16
  0001c	7c 0a		 jl	 SHORT $LN12@s370_maddr
  0001e	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv70[rsp], 0
  00026	eb 19		 jmp	 SHORT $LN13@s370_maddr
$LN12@s370_maddr:
  00028	8b 44 24 70	 mov	 eax, DWORD PTR arn$[rsp]
  0002c	83 c0 05	 add	 eax, 5
  0002f	48 98		 cdqe
  00031	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00036	8b 84 81 94 0c
	00 00		 mov	 eax, DWORD PTR [rcx+rax*4+3220]
  0003d	89 44 24 38	 mov	 DWORD PTR tv70[rsp], eax
$LN13@s370_maddr:
  00041	8b 44 24 38	 mov	 eax, DWORD PTR tv70[rsp]
  00045	89 44 24 34	 mov	 DWORD PTR aea_crn$[rsp], eax

; 321  :     U16  tlbix    = TLBIX( addr );

  00049	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  0004d	c1 e8 0b	 shr	 eax, 11
  00050	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00055	66 89 44 24 30	 mov	 WORD PTR tlbix$[rsp], ax

; 322  :     BYTE *maddr   = NULL;

  0005a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR maddr$[rsp], 0

; 323  : 
; 324  :     /* Non-zero AEA Control Register number? */
; 325  :     if (aea_crn)

  00063	83 7c 24 34 00	 cmp	 DWORD PTR aea_crn$[rsp], 0
  00068	0f 84 25 01 00
	00		 je	 $LN2@s370_maddr

; 326  :     {
; 327  :         /* Same Addess Space Designator as before? */
; 328  :         /* Or if not, is address in a common segment? */
; 329  :         if (0
; 330  :             || (regs->CR( aea_crn ) == regs->tlb.TLB_ASD( tlbix ))
; 331  :             || (regs->AEA_COMMON( aea_crn ) & regs->tlb.common[ tlbix ])

  0006e	33 c0		 xor	 eax, eax
  00070	85 c0		 test	 eax, eax
  00072	75 59		 jne	 SHORT $LN4@s370_maddr
  00074	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  00078	ff c0		 inc	 eax
  0007a	48 98		 cdqe
  0007c	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  00081	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00086	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  0008b	41 8b 8c c8 60
	b0 00 00	 mov	 ecx, DWORD PTR [r8+rcx*8+45152]
  00093	39 8c c2 00 06
	00 00		 cmp	 DWORD PTR [rdx+rax*8+1536], ecx
  0009a	74 31		 je	 SHORT $LN4@s370_maddr
  0009c	8b 44 24 34	 mov	 eax, DWORD PTR aea_crn$[rsp]
  000a0	ff c0		 inc	 eax
  000a2	48 98		 cdqe
  000a4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  000a9	0f b6 84 01 e8
	0c 00 00	 movzx	 eax, BYTE PTR [rcx+rax+3304]
  000b1	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000b6	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000bb	0f b6 8c 0a 60
	54 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+87136]
  000c3	23 c1		 and	 eax, ecx
  000c5	85 c0		 test	 eax, eax
  000c7	0f 84 c6 00 00
	00		 je	 $LN3@s370_maddr
$LN4@s370_maddr:

; 332  :         )
; 333  :         {
; 334  :             /* Storage Key zero? */
; 335  :             /* Or if not, same Storage Key as before? */
; 336  :             if (0
; 337  :                 || akey == 0
; 338  :                 || akey == regs->tlb.skey[ tlbix ]

  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 2e		 jne	 SHORT $LN6@s370_maddr
  000d3	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000db	85 c0		 test	 eax, eax
  000dd	74 22		 je	 SHORT $LN6@s370_maddr
  000df	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  000e7	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  000ec	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  000f1	0f b6 8c 0a 60
	50 01 00	 movzx	 ecx, BYTE PTR [rdx+rcx+86112]
  000f9	3b c1		 cmp	 eax, ecx
  000fb	0f 85 92 00 00
	00		 jne	 $LN5@s370_maddr
$LN6@s370_maddr:

; 339  :             )
; 340  :             {
; 341  :                 /* Does the page address match the one in the TLB? */
; 342  :                 /* (does a TLB entry exist for this page address?) */
; 343  :                 if (
; 344  :                     ((addr & TLBID_PAGEMASK) | regs->tlbID)
; 345  :                     ==

  00101	8b 44 24 60	 mov	 eax, DWORD PTR addr$[rsp]
  00105	25 00 00 e0 00	 and	 eax, 14680064		; 00e00000H
  0010a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  0010f	0b 81 58 b0 00
	00		 or	 eax, DWORD PTR [rcx+45144]
  00115	0f b7 4c 24 30	 movzx	 ecx, WORD PTR tlbix$[rsp]
  0011a	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  0011f	3b 84 ca 60 d0
	00 00		 cmp	 eax, DWORD PTR [rdx+rcx*8+53344]
  00126	75 6b		 jne	 SHORT $LN7@s370_maddr

; 346  :                     regs->tlb.TLB_VADDR( tlbix )
; 347  :                 )
; 348  :                 {
; 349  :                     /* Is storage being accessed same way as before? */
; 350  :                     if (acctype & regs->tlb.acc[ tlbix ])

  00128	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0012d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00132	0f b6 84 01 60
	5c 01 00	 movzx	 eax, BYTE PTR [rcx+rax+89184]
  0013a	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR acctype$[rsp]
  00141	23 c8		 and	 ecx, eax
  00143	8b c1		 mov	 eax, ecx
  00145	85 c0		 test	 eax, eax
  00147	74 4a		 je	 SHORT $LN8@s370_maddr

; 351  :                     {
; 352  :                         /*------------------------------------------*/
; 353  :                         /* TLB hit: use previously translated value */
; 354  :                         /*------------------------------------------*/
; 355  : 
; 356  :                         if (acctype & ACC_CHECK)

  00149	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR acctype$[rsp]
  00150	83 e0 01	 and	 eax, 1
  00153	85 c0		 test	 eax, eax
  00155	74 1e		 je	 SHORT $LN9@s370_maddr

; 357  :                             regs->dat.storkey = regs->tlb.storkey[ tlbix ];

  00157	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0015c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR regs$[rsp]
  00161	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00166	48 8b 84 c2 60
	30 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+77920]
  0016e	48 89 81 28 08
	00 00		 mov	 QWORD PTR [rcx+2088], rax
$LN9@s370_maddr:

; 358  : 
; 359  :                         maddr = MAINADDR( regs->tlb.main[tlbix], addr );

  00175	0f b7 44 24 30	 movzx	 eax, WORD PTR tlbix$[rsp]
  0017a	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  0017e	48 8b 54 24 78	 mov	 rdx, QWORD PTR regs$[rsp]
  00183	48 8b 84 c2 60
	10 01 00	 mov	 rax, QWORD PTR [rdx+rax*8+69728]
  0018b	48 33 c1	 xor	 rax, rcx
  0018e	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN8@s370_maddr:
$LN7@s370_maddr:
$LN5@s370_maddr:
$LN3@s370_maddr:
$LN2@s370_maddr:

; 360  :                     }
; 361  :                 }
; 362  :             }
; 363  :         }
; 364  :     }
; 365  : 
; 366  :     /*---------------------------------------*/
; 367  :     /* TLB miss: do full address translation */
; 368  :     /*---------------------------------------*/
; 369  :     if (!maddr)

  00193	48 83 7c 24 40
	00		 cmp	 QWORD PTR maddr$[rsp], 0
  00199	75 35		 jne	 SHORT $LN10@s370_maddr

; 370  :         maddr = ARCH_DEP( logical_to_main_l )( addr, arn, regs, acctype, akey, len );

  0019b	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  001a0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001a5	0f b6 84 24 88
	00 00 00	 movzx	 eax, BYTE PTR akey$[rsp]
  001ad	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  001b1	44 8b 8c 24 80
	00 00 00	 mov	 r9d, DWORD PTR acctype$[rsp]
  001b9	4c 8b 44 24 78	 mov	 r8, QWORD PTR regs$[rsp]
  001be	8b 54 24 70	 mov	 edx, DWORD PTR arn$[rsp]
  001c2	8b 4c 24 60	 mov	 ecx, DWORD PTR addr$[rsp]
  001c6	e8 00 00 00 00	 call	 s370_logical_to_main_l
  001cb	48 89 44 24 40	 mov	 QWORD PTR maddr$[rsp], rax
$LN10@s370_maddr:

; 371  : 
; 372  : #if defined( FEATURE_073_TRANSACT_EXEC_FACILITY )
; 373  :     if (FACILITY_ENABLED( 073_TRANSACT_EXEC, regs ))
; 374  :     {
; 375  :         /* SA22-7832-12 Principles of Operation, page 5-99:
; 376  : 
; 377  :              "Storage accesses for instruction and DAT- and ART-
; 378  :               table fetches follow the non-transactional rules."
; 379  :         */
; 380  :         if (0
; 381  :             || !regs
; 382  :             || !regs->txf_tnd
; 383  :             || arn == USE_INST_SPACE    /* Instruction fetching */
; 384  :             || arn == USE_REAL_ADDR     /* Address translation  */
; 385  :         )
; 386  :             return maddr;
; 387  : 
; 388  :         /* Quick exit if NTSTG call */
; 389  :         if (regs->txf_NTSTG)
; 390  :         {
; 391  :             regs->txf_NTSTG = false;
; 392  :             return maddr;
; 393  :         }
; 394  : 
; 395  :         /* Translate to alternate TXF address */
; 396  :         maddr = TXF_MADDRL( addr, len, arn, regs, acctype, maddr );
; 397  :     }
; 398  : #endif
; 399  : 
; 400  :     return maddr;

  001d0	48 8b 44 24 40	 mov	 rax, QWORD PTR maddr$[rsp]

; 401  : }

  001d5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001d9	c3		 ret	 0
s370_maddr_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_dw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_dw_noswap PROC					; COMDAT

; 834  :     inline void store_dw_noswap(void *ptr, U64 value) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 835  :       memcpy((BYTE *)ptr, (BYTE *)&value, 8);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR value$[rsp]
  00014	48 89 08	 mov	 QWORD PTR [rax], rcx

; 836  :     }

  00017	c3		 ret	 0
store_dw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_dw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_dw_noswap PROC					; COMDAT

; 816  :     inline U64 fetch_dw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 817  :       U64 value;
; 818  :       memcpy(&value, (BYTE *)ptr, 8);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00011	48 89 04 24	 mov	 QWORD PTR value$[rsp], rax

; 819  :       return value;

  00015	48 8b 04 24	 mov	 rax, QWORD PTR value$[rsp]

; 820  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_dw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_fw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_fw_noswap PROC					; COMDAT

; 746  :     inline U32 fetch_fw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 747  :       U32 value;
; 748  :       memcpy(&value, (BYTE *)ptr, 4);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR value$[rsp], eax

; 749  :       return value;

  00013	8b 04 24	 mov	 eax, DWORD PTR value$[rsp]

; 750  :     }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
fetch_fw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT store_hw_noswap
_TEXT	SEGMENT
ptr$ = 8
value$ = 16
store_hw_noswap PROC					; COMDAT

; 730  :     inline void store_hw_noswap(void *ptr, U16 value) {

  00000	66 89 54 24 10	 mov	 WORD PTR [rsp+16], dx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 731  :       memcpy((BYTE *)ptr, (BYTE *)&value, 2);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	0f b7 4c 24 10	 movzx	 ecx, WORD PTR value$[rsp]
  00014	66 89 08	 mov	 WORD PTR [rax], cx

; 732  :     }

  00017	c3		 ret	 0
store_hw_noswap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\machdep.h
;	COMDAT fetch_hw_noswap
_TEXT	SEGMENT
value$ = 0
ptr$ = 32
fetch_hw_noswap PROC					; COMDAT

; 712  :     inline U16 fetch_hw_noswap(const void *ptr) {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 713  :       U16 value;
; 714  :       memcpy(&value, (BYTE *)ptr, 2);

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]
  0000e	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00011	66 89 04 24	 mov	 WORD PTR value$[rsp], ax

; 715  :       return value;

  00015	0f b7 04 24	 movzx	 eax, WORD PTR value$[rsp]

; 716  :     }

  00019	48 83 c4 18	 add	 rsp, 24
  0001d	c3		 ret	 0
fetch_hw_noswap ENDP
_TEXT	ENDS
END
