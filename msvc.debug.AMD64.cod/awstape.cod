; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
CKD_ENDTRK DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
CONST	ENDS
PUBLIC	open_awstape
PUBLIC	close_awstape
PUBLIC	passedeot_awstape
PUBLIC	rewind_awstape
PUBLIC	write_awsmark
PUBLIC	sync_awstape
PUBLIC	fsb_awstape
PUBLIC	bsb_awstape
PUBLIC	fsf_awstape
PUBLIC	bsf_awstape
PUBLIC	readhdr_awstape
PUBLIC	read_awstape
PUBLIC	write_awstape
EXTRN	__imp__errno:PROC
EXTRN	strcmp:PROC
EXTRN	__imp__chsize_s:PROC
EXTRN	__imp__commit:PROC
EXTRN	__imp__lseeki64:PROC
EXTRN	__imp_close:PROC
EXTRN	__imp_read:PROC
EXTRN	__imp_write:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_strlcpy:PROC
EXTRN	__imp_w32_strerror:PROC
EXTRN	__imp_hostpath:PROC
EXTRN	__imp_w32_hopen:PROC
EXTRN	__imp_fwritemsg:PROC
EXTRN	build_senseX:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__imp_sysblk:BYTE
EXTRN	__security_cookie:QWORD
pdata	SEGMENT
$pdata$open_awstape DD imagerel $LN19
	DD	imagerel $LN19+1231
	DD	imagerel $unwind$open_awstape
$pdata$close_awstape DD imagerel $LN10
	DD	imagerel $LN10+414
	DD	imagerel $unwind$close_awstape
$pdata$rewind_awstape DD imagerel $LN4
	DD	imagerel $LN4+183
	DD	imagerel $unwind$rewind_awstape
$pdata$write_awsmark DD imagerel $LN25
	DD	imagerel $LN25+1691
	DD	imagerel $unwind$write_awsmark
$pdata$sync_awstape DD imagerel $LN9
	DD	imagerel $LN9+422
	DD	imagerel $unwind$sync_awstape
$pdata$fsb_awstape DD imagerel $LN9
	DD	imagerel $LN9+343
	DD	imagerel $unwind$fsb_awstape
$pdata$bsb_awstape DD imagerel $LN6
	DD	imagerel $LN6+368
	DD	imagerel $unwind$bsb_awstape
$pdata$fsf_awstape DD imagerel $LN7
	DD	imagerel $LN7+83
	DD	imagerel $unwind$fsf_awstape
$pdata$bsf_awstape DD imagerel $LN8
	DD	imagerel $LN8+131
	DD	imagerel $unwind$bsf_awstape
$pdata$readhdr_awstape DD imagerel $LN23
	DD	imagerel $LN23+1420
	DD	imagerel $unwind$readhdr_awstape
$pdata$read_awstape DD imagerel $LN29
	DD	imagerel $LN29+1795
	DD	imagerel $unwind$read_awstape
$pdata$write_awstape DD imagerel $LN36
	DD	imagerel $LN36+2450
	DD	imagerel $unwind$write_awstape
pdata	ENDS
_DATA	SEGMENT
$SG169201 DB	'aws', 00H
$SG169202 DB	'I', 00H
	ORG $+2
$SG169203 DB	'HHC00201%s %1d:%04X Tape file %s, type %s: tape closed', 0aH
	DB	00H
$SG169204 DB	'close_awstape', 00H
	ORG $+2
$SG169205 DB	'awstape.c', 00H
	ORG $+2
$SG169206 DB	'*', 00H
	ORG $+2
$SG169234 DB	'*', 00H
	ORG $+2
$SG169240 DB	'aws', 00H
$SG169241 DB	'I', 00H
	ORG $+2
$SG169251 DB	'open()', 00H
	ORG $+1
$SG169252 DB	'aws', 00H
$SG169242 DB	'HHC00235%s %1d:%04X Tape file %s, type %s: tape created', 0aH
	DB	00H
	ORG $+3
$SG169253 DB	'E', 00H
	ORG $+2
$SG169243 DB	'open_awstape', 00H
	ORG $+3
$SG169244 DB	'awstape.c', 00H
	ORG $+6
$SG169255 DB	'open_awstape', 00H
	ORG $+3
$SG169257 DB	'*', 00H
	ORG $+6
$SG169254 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169256 DB	'awstape.c', 00H
	ORG $+2
$SG169276 DB	'aws', 00H
$SG169275 DB	'lseek()', 00H
$SG169277 DB	'E', 00H
	ORG $+6
$SG169279 DB	'readhdr_awstape', 00H
$SG169282 DB	'read()', 00H
	ORG $+1
$SG169278 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169283 DB	'aws', 00H
$SG169280 DB	'awstape.c', 00H
	ORG $+2
$SG169284 DB	'E', 00H
	ORG $+2
$SG169285 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169291 DB	'aws', 00H
$SG169286 DB	'readhdr_awstape', 00H
$SG169287 DB	'awstape.c', 00H
	ORG $+2
$SG169292 DB	'E', 00H
	ORG $+2
$SG169289 DB	'end of file (uninitialized tape)', 00H
	ORG $+3
$SG169299 DB	'aws', 00H
$SG169290 DB	'readhdr_awstape()', 00H
	ORG $+6
$SG169293 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169300 DB	'E', 00H
	ORG $+2
$SG169294 DB	'readhdr_awstape', 00H
$SG169295 DB	'awstape.c', 00H
	ORG $+2
$SG169325 DB	'aws', 00H
$SG169297 DB	'unexpected end of file', 00H
	ORG $+1
$SG169298 DB	'readhdr_awstape()', 00H
	ORG $+6
$SG169301 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169326 DB	'E', 00H
	ORG $+2
$SG169302 DB	'readhdr_awstape', 00H
$SG169303 DB	'awstape.c', 00H
	ORG $+6
$SG169327 DB	'HHC00202%s %1d:%04X Tape file %s, type %s: block length '
	DB	'%d exceeds maximum at offset 0x%16.16llX', 0aH, 00H
	ORG $+2
$SG169331 DB	'aws', 00H
$SG169328 DB	'read_awstape', 00H
	ORG $+3
$SG169329 DB	'awstape.c', 00H
	ORG $+2
$SG169332 DB	'E', 00H
	ORG $+2
$SG169338 DB	'read()', 00H
	ORG $+1
$SG169333 DB	'HHC00203%s %1d:%04X Tape file %s, type %s: invalid tapem'
	DB	'ark at offset 0x%16.16llX', 0aH, 00H
	ORG $+1
$SG169339 DB	'aws', 00H
$SG169334 DB	'read_awstape', 00H
	ORG $+3
$SG169335 DB	'awstape.c', 00H
	ORG $+2
$SG169340 DB	'E', 00H
	ORG $+2
$SG169346 DB	'read_awstape()', 00H
	ORG $+1
$SG169347 DB	'aws', 00H
	ORG $+4
$SG169341 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169348 DB	'E', 00H
	ORG $+2
$SG169342 DB	'read_awstape', 00H
	ORG $+3
$SG169343 DB	'awstape.c', 00H
	ORG $+2
$SG169386 DB	'aws', 00H
$SG169345 DB	'end of file within data block', 00H
	ORG $+2
$SG169349 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169387 DB	'E', 00H
	ORG $+2
$SG169350 DB	'read_awstape', 00H
	ORG $+3
$SG169351 DB	'awstape.c', 00H
	ORG $+2
$SG169396 DB	'aws', 00H
$SG169385 DB	'lseek()', 00H
$SG169395 DB	'write()', 00H
$SG169388 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169397 DB	'E', 00H
	ORG $+2
$SG169389 DB	'write_awstape', 00H
	ORG $+2
$SG169390 DB	'awstape.c', 00H
	ORG $+6
$SG169398 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169404 DB	'aws', 00H
$SG169399 DB	'write_awstape', 00H
	ORG $+2
$SG169400 DB	'awstape.c', 00H
	ORG $+2
$SG169405 DB	'E', 00H
	ORG $+2
$SG169403 DB	'write()', 00H
$SG169412 DB	'aws', 00H
	ORG $+4
$SG169406 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169413 DB	'E', 00H
	ORG $+2
$SG169407 DB	'write_awstape', 00H
	ORG $+2
$SG169408 DB	'awstape.c', 00H
	ORG $+2
$SG169439 DB	'aws', 00H
$SG169411 DB	'ftruncate()', 00H
	ORG $+4
$SG169414 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169440 DB	'E', 00H
	ORG $+2
$SG169415 DB	'write_awstape', 00H
	ORG $+2
$SG169416 DB	'awstape.c', 00H
	ORG $+2
$SG169448 DB	'aws', 00H
$SG169438 DB	'lseek()', 00H
$SG169447 DB	'write()', 00H
$SG169441 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169449 DB	'E', 00H
	ORG $+2
$SG169442 DB	'write_awsmark', 00H
	ORG $+2
$SG169443 DB	'awstape.c', 00H
	ORG $+6
$SG169450 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169455 DB	'aws', 00H
$SG169451 DB	'write_awsmark', 00H
	ORG $+2
$SG169452 DB	'awstape.c', 00H
	ORG $+2
$SG169456 DB	'E', 00H
	ORG $+2
$SG169454 DB	'ftruncate()', 00H
	ORG $+4
$SG169457 DB	'HHC00204%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s, offset 0x%16.16llX: %s', 0aH, 00H
	ORG $+3
$SG169470 DB	'aws', 00H
$SG169458 DB	'write_awsmark', 00H
	ORG $+2
$SG169459 DB	'awstape.c', 00H
	ORG $+2
$SG169471 DB	'E', 00H
	ORG $+2
$SG169469 DB	'fdatasync()', 00H
	ORG $+4
$SG169472 DB	'HHC00205%s %1d:%04X Tape file %s, type %s: error in func'
	DB	'tion %s: %s', 0aH, 00H
	ORG $+3
$SG169473 DB	'sync_awstape', 00H
	ORG $+3
$SG169474 DB	'awstape.c', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:write_awstape
	DD	025H
	DD	097aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:read_awstape
	DD	025H
	DD	06ebH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:bsb_awstape
	DD	01dH
	DD	015eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:fsb_awstape
	DD	01dH
	DD	0145H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:write_awsmark
	DD	020H
	DD	0683H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:open_awstape
	DD	020H
	DD	04b7H
voltbl	ENDS
xdata	SEGMENT
$unwind$open_awstape DD 022819H
	DD	03b0116H
	DD	imagerel __GSHandlerCheck
	DD	01c0H
$unwind$close_awstape DD 010901H
	DD	0e209H
$unwind$rewind_awstape DD 011301H
	DD	06213H
$unwind$write_awsmark DD 022819H
	DD	01d0116H
	DD	imagerel __GSHandlerCheck
	DD	0d8H
$unwind$sync_awstape DD 021601H
	DD	0130116H
$unwind$fsb_awstape DD 012219H
	DD	0c213H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$bsb_awstape DD 012219H
	DD	0c213H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$fsf_awstape DD 011301H
	DD	06213H
$unwind$bsf_awstape DD 011301H
	DD	06213H
$unwind$readhdr_awstape DD 021b01H
	DD	01b011bH
$unwind$read_awstape DD 022d19H
	DD	01d011bH
	DD	imagerel __GSHandlerCheck
	DD	0d8H
$unwind$write_awstape DD 022d19H
	DD	023011bH
	DD	imagerel __GSHandlerCheck
	DD	0100H
xdata	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
chksize$ = 112
prvblkl$ = 116
rc$ = 120
blkpos$ = 128
tv138 = 136
tv144 = 140
tv217 = 144
tv223 = 148
tv265 = 152
tv271 = 156
tv328 = 160
tv334 = 164
rcoff$ = 168
tv94 = 176
tv133 = 184
tv205 = 192
tv212 = 200
tv252 = 208
tv256 = 216
tv260 = 224
tv316 = 232
tv323 = 240
awshdr$ = 248
__$ArrayPad$ = 256
dev$ = 288
buf$ = 296
blklen$ = 304
unitstat$ = 312
code$ = 320
write_awstape PROC

; 395  : {

$LN36:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 396  : int             rc;                     /* Return code               */
; 397  : off_t           rcoff;                  /* Return code from lseek()  */
; 398  : AWSTAPE_BLKHDR  awshdr;                 /* AWSTAPE chunk header      */
; 399  : off_t           blkpos;                 /* Offset of chunk header    */
; 400  : U16             chksize;                /* Length of current chunk   */
; 401  : U16             prvblkl;                /* Length of previous chunk  */
; 402  : 
; 403  :     /* Initialize current block position and previous block length */
; 404  :     blkpos = dev->nxtblkpos;

  0002d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00035	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  0003c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR blkpos$[rsp], rax

; 405  :     prvblkl = 0;

  00044	33 c0		 xor	 eax, eax
  00046	66 89 44 24 74	 mov	 WORD PTR prvblkl$[rsp], ax

; 406  : 
; 407  :     /* Determine previous block length if not at start of tape */
; 408  :     if (dev->nxtblkpos > 0)

  0004b	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00053	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  0005b	0f 8e 9a 00 00
	00		 jle	 $LN8@write_awst

; 409  :     {
; 410  :         /* Reread the previous block header */
; 411  :         rc = readhdr_awstape (dev, dev->prvblkpos, &awshdr, unitstat,code);

  00061	0f b6 84 24 40
	01 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00069	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  0006d	4c 8b 8c 24 38
	01 00 00	 mov	 r9, QWORD PTR unitstat$[rsp]
  00075	4c 8d 84 24 f8
	00 00 00	 lea	 r8, QWORD PTR awshdr$[rsp]
  0007d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00085	48 8b 90 10 10
	00 00		 mov	 rdx, QWORD PTR [rax+4112]
  0008c	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00094	e8 00 00 00 00	 call	 readhdr_awstape
  00099	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 412  :         if (rc < 0) return -1;

  0009d	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  000a2	7d 0a		 jge	 SHORT $LN9@write_awst
  000a4	b8 ff ff ff ff	 mov	 eax, -1
  000a9	e9 cc 08 00 00	 jmp	 $LN1@write_awst
$LN9@write_awst:

; 413  : 
; 414  :         /* Extract the block length from the block header */
; 415  :         prvblkl = ((U16)(awshdr.curblkl[1]) << 8)

  000ae	b8 01 00 00 00	 mov	 eax, 1
  000b3	48 6b c0 01	 imul	 rax, rax, 1
  000b7	0f b6 84 04 f8
	00 00 00	 movzx	 eax, BYTE PTR awshdr$[rsp+rax]
  000bf	c1 e0 08	 shl	 eax, 8
  000c2	b9 01 00 00 00	 mov	 ecx, 1
  000c7	48 6b c9 00	 imul	 rcx, rcx, 0
  000cb	0f b6 8c 0c f8
	00 00 00	 movzx	 ecx, BYTE PTR awshdr$[rsp+rcx]
  000d3	0b c1		 or	 eax, ecx
  000d5	66 89 44 24 74	 mov	 WORD PTR prvblkl$[rsp], ax

; 416  :                     | awshdr.curblkl[0];
; 417  : 
; 418  :         /* Recalculate the offset of the next block */
; 419  :         blkpos = dev->prvblkpos + sizeof(awshdr) + prvblkl;

  000da	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000e2	48 8b 80 10 10
	00 00		 mov	 rax, QWORD PTR [rax+4112]
  000e9	0f b7 4c 24 74	 movzx	 ecx, WORD PTR prvblkl$[rsp]
  000ee	48 8d 44 08 06	 lea	 rax, QWORD PTR [rax+rcx+6]
  000f3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR blkpos$[rsp], rax
$LN8@write_awst:

; 420  :     }
; 421  : 
; 422  :     /* Reposition file to the new block header */
; 423  :     rcoff = lseek (dev->fd, blkpos, SEEK_SET);

  000fb	45 33 c0	 xor	 r8d, r8d
  000fe	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR blkpos$[rsp]
  00106	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0010e	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00114	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0011a	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR rcoff$[rsp], rax

; 424  :     if (rcoff < 0)

  00122	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR rcoff$[rsp], 0
  0012b	0f 8d 4e 01 00
	00		 jge	 $LN10@write_awst

; 425  :     {
; 426  :         /* Handle seek error condition */
; 427  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "aws", "lseek()", blkpos, strerror(errno));

  00131	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0013a	74 15		 je	 SHORT $LN20@write_awst
  0013c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00144	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00148	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv138[rsp], eax
  0014f	eb 0b		 jmp	 SHORT $LN21@write_awst
$LN20@write_awst:
  00151	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv138[rsp], 0
$LN21@write_awst:
  0015c	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00165	74 17		 je	 SHORT $LN22@write_awst
  00167	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0016f	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00173	d1 f8		 sar	 eax, 1
  00175	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv144[rsp], eax
  0017c	eb 0b		 jmp	 SHORT $LN23@write_awst
$LN22@write_awst:
  0017e	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv144[rsp], 0
$LN23@write_awst:
  00189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0018f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00191	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00197	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv94[rsp], rax
  0019f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001a7	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  001ae	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv133[rsp], rcx
  001b6	b9 01 00 00 00	 mov	 ecx, 1
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001c1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv94[rsp]
  001c9	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  001ce	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  001d6	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  001db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169385
  001e2	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  001e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169386
  001ee	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  001f3	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv133[rsp]
  001fb	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00200	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv138[rsp]
  00207	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0020b	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv144[rsp]
  00212	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00216	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169387
  0021d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00222	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169388
  00229	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0022e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00233	41 b9 03 00 00
	00		 mov	 r9d, 3
  00239	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169389
  00240	ba ab 01 00 00	 mov	 edx, 427		; 000001abH
  00245	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169390
  0024c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 428  : 
; 429  :         /* Set unit check with equipment check */
; 430  :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  00252	44 0f b6 8c 24
	40 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0025b	4c 8b 84 24 38
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00263	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0026b	b9 0e 00 00 00	 mov	 ecx, 14
  00270	e8 00 00 00 00	 call	 build_senseX

; 431  :         return -1;

  00275	b8 ff ff ff ff	 mov	 eax, -1
  0027a	e9 fb 06 00 00	 jmp	 $LN1@write_awst
$LN10@write_awst:

; 432  :     }
; 433  : 
; 434  :     /* ISW: Determine if we are passed maxsize */
; 435  :     if(dev->tdparms.maxsize>0)

  0027f	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00287	48 83 b8 38 10
	00 00 00	 cmp	 QWORD PTR [rax+4152], 0
  0028f	7e 59		 jle	 SHORT $LN11@write_awst

; 436  :     {
; 437  :         if((off_t)(dev->nxtblkpos+blklen+sizeof(awshdr)) > dev->tdparms.maxsize)

  00291	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR blklen$[rsp]
  00298	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002a0	48 8b 89 08 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4104]
  002a7	48 8d 44 01 06	 lea	 rax, QWORD PTR [rcx+rax+6]
  002ac	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  002b4	48 3b 81 38 10
	00 00		 cmp	 rax, QWORD PTR [rcx+4152]
  002bb	7e 2d		 jle	 SHORT $LN12@write_awst

; 438  :         {
; 439  :             build_senseX(TAPE_BSENSE_ENDOFTAPE,dev,unitstat,code);

  002bd	44 0f b6 8c 24
	40 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  002c6	4c 8b 84 24 38
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  002ce	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  002d6	b9 08 00 00 00	 mov	 ecx, 8
  002db	e8 00 00 00 00	 call	 build_senseX

; 440  :             return -1;

  002e0	b8 ff ff ff ff	 mov	 eax, -1
  002e5	e9 90 06 00 00	 jmp	 $LN1@write_awst
$LN12@write_awst:
$LN11@write_awst:

; 441  :         }
; 442  :     }
; 443  :     /* ISW: End of virtual physical EOT determination */
; 444  : 
; 445  :     /* Initialize starting values */
; 446  :     chksize = dev->tdparms.chksize;

  002ea	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002f2	0f b7 80 34 10
	00 00		 movzx	 eax, WORD PTR [rax+4148]
  002f9	66 89 44 24 70	 mov	 WORD PTR chksize$[rsp], ax

; 447  :     awshdr.flags1 = AWSTAPE_FLAG1_NEWREC;

  002fe	c6 84 24 fc 00
	00 00 80	 mov	 BYTE PTR awshdr$[rsp+4], 128 ; 00000080H

; 448  :     awshdr.flags2 = 0;

  00306	c6 84 24 fd 00
	00 00 00	 mov	 BYTE PTR awshdr$[rsp+5], 0
$LN4@write_awst:

; 449  : 
; 450  :     /* Keep writing chunks until the entire block has been written */
; 451  :     do
; 452  :     {
; 453  :         /* Adjust chunksize and flags if this is last/only chunk */
; 454  :         if ((U32)chksize >= blklen)

  0030e	0f b7 44 24 70	 movzx	 eax, WORD PTR chksize$[rsp]
  00313	3b 84 24 30 01
	00 00		 cmp	 eax, DWORD PTR blklen$[rsp]
  0031a	72 1f		 jb	 SHORT $LN13@write_awst

; 455  :         {
; 456  :             chksize = (U16) blklen;

  0031c	0f b7 84 24 30
	01 00 00	 movzx	 eax, WORD PTR blklen$[rsp]
  00324	66 89 44 24 70	 mov	 WORD PTR chksize$[rsp], ax

; 457  :             awshdr.flags1 |= AWSTAPE_FLAG1_ENDREC;

  00329	0f b6 84 24 fc
	00 00 00	 movzx	 eax, BYTE PTR awshdr$[rsp+4]
  00331	83 c8 20	 or	 eax, 32			; 00000020H
  00334	88 84 24 fc 00
	00 00		 mov	 BYTE PTR awshdr$[rsp+4], al
$LN13@write_awst:

; 458  :         }
; 459  : 
; 460  :         /* Build the 6-byte chunk header */
; 461  :         awshdr.curblkl[0] = chksize & 0xFF;

  0033b	0f b7 44 24 70	 movzx	 eax, WORD PTR chksize$[rsp]
  00340	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00345	b9 01 00 00 00	 mov	 ecx, 1
  0034a	48 6b c9 00	 imul	 rcx, rcx, 0
  0034e	88 84 0c f8 00
	00 00		 mov	 BYTE PTR awshdr$[rsp+rcx], al

; 462  :         awshdr.curblkl[1] = (chksize >> 8) & 0xFF;

  00355	0f b7 44 24 70	 movzx	 eax, WORD PTR chksize$[rsp]
  0035a	c1 f8 08	 sar	 eax, 8
  0035d	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00362	b9 01 00 00 00	 mov	 ecx, 1
  00367	48 6b c9 01	 imul	 rcx, rcx, 1
  0036b	88 84 0c f8 00
	00 00		 mov	 BYTE PTR awshdr$[rsp+rcx], al

; 463  :         awshdr.prvblkl[0] = prvblkl & 0xFF;

  00372	0f b7 44 24 74	 movzx	 eax, WORD PTR prvblkl$[rsp]
  00377	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0037c	b9 01 00 00 00	 mov	 ecx, 1
  00381	48 6b c9 00	 imul	 rcx, rcx, 0
  00385	88 84 0c fa 00
	00 00		 mov	 BYTE PTR awshdr$[rsp+rcx+2], al

; 464  :         awshdr.prvblkl[1] = (prvblkl >> 8) & 0xFF;

  0038c	0f b7 44 24 74	 movzx	 eax, WORD PTR prvblkl$[rsp]
  00391	c1 f8 08	 sar	 eax, 8
  00394	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00399	b9 01 00 00 00	 mov	 ecx, 1
  0039e	48 6b c9 01	 imul	 rcx, rcx, 1
  003a2	88 84 0c fa 00
	00 00		 mov	 BYTE PTR awshdr$[rsp+rcx+2], al

; 465  : 
; 466  :         /* Write the chunk header */
; 467  :         rc = write (dev->fd, &awshdr, sizeof(awshdr));

  003a9	41 b8 06 00 00
	00		 mov	 r8d, 6
  003af	48 8d 94 24 f8
	00 00 00	 lea	 rdx, QWORD PTR awshdr$[rsp]
  003b7	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003bf	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  003c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  003cb	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 468  :         if (rc < (int)sizeof(awshdr))

  003cf	83 7c 24 78 06	 cmp	 DWORD PTR rc$[rsp], 6
  003d4	0f 8d 86 01 00
	00		 jge	 $LN14@write_awst

; 469  :         {
; 470  :             // "%1d:%04X Tape file %s, type %s: error in function %s, offset 0x%16.16"PRIX64": %s"
; 471  :             WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename,

  003da	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  003e3	74 15		 je	 SHORT $LN24@write_awst
  003e5	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003ed	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  003f1	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv217[rsp], eax
  003f8	eb 0b		 jmp	 SHORT $LN25@write_awst
$LN24@write_awst:
  003fa	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv217[rsp], 0
$LN25@write_awst:
  00405	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0040e	74 17		 je	 SHORT $LN26@write_awst
  00410	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00418	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0041c	d1 f8		 sar	 eax, 1
  0041e	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv223[rsp], eax
  00425	eb 0b		 jmp	 SHORT $LN27@write_awst
$LN26@write_awst:
  00427	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv223[rsp], 0
$LN27@write_awst:
  00432	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00438	8b 08		 mov	 ecx, DWORD PTR [rax]
  0043a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00440	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv205[rsp], rax
  00448	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00450	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00457	48 89 8c 24 c8
	00 00 00	 mov	 QWORD PTR tv212[rsp], rcx
  0045f	b9 01 00 00 00	 mov	 ecx, 1
  00464	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0046a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv205[rsp]
  00472	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00477	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  0047f	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00484	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169395
  0048b	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00490	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169396
  00497	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0049c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv212[rsp]
  004a4	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  004a9	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv217[rsp]
  004b0	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  004b4	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv223[rsp]
  004bb	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  004bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169397
  004c6	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169398
  004d2	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004d7	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004dc	41 b9 03 00 00
	00		 mov	 r9d, 3
  004e2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169399
  004e9	ba d8 01 00 00	 mov	 edx, 472		; 000001d8H
  004ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169400
  004f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 472  :                 "aws", "write()", blkpos, strerror(errno));
; 473  :             if (ENOSPC == errno)

  004fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00501	83 38 1c	 cmp	 DWORD PTR [rax], 28
  00504	75 2d		 jne	 SHORT $LN15@write_awst

; 474  :             {
; 475  :                 /* Disk FULL */
; 476  :                 build_senseX(TAPE_BSENSE_ENDOFTAPE,dev,unitstat,code);

  00506	44 0f b6 8c 24
	40 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0050f	4c 8b 84 24 38
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00517	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0051f	b9 08 00 00 00	 mov	 ecx, 8
  00524	e8 00 00 00 00	 call	 build_senseX

; 477  :                 return -1;

  00529	b8 ff ff ff ff	 mov	 eax, -1
  0052e	e9 47 04 00 00	 jmp	 $LN1@write_awst
$LN15@write_awst:

; 478  :             }
; 479  : 
; 480  :             /* Set unit check with equipment check */
; 481  :             build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  00533	44 0f b6 8c 24
	40 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0053c	4c 8b 84 24 38
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00544	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0054c	b9 03 00 00 00	 mov	 ecx, 3
  00551	e8 00 00 00 00	 call	 build_senseX

; 482  :             return -1;

  00556	b8 ff ff ff ff	 mov	 eax, -1
  0055b	e9 1a 04 00 00	 jmp	 $LN1@write_awst
$LN14@write_awst:

; 483  :         }
; 484  : 
; 485  :         /* Now write the chunk itself */
; 486  :         rc = write (dev->fd, buf, chksize);

  00560	0f b7 44 24 70	 movzx	 eax, WORD PTR chksize$[rsp]
  00565	44 8b c0	 mov	 r8d, eax
  00568	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  00570	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00578	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0057e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  00584	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 487  :         if (rc < (int)chksize)

  00588	0f b7 44 24 70	 movzx	 eax, WORD PTR chksize$[rsp]
  0058d	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00591	0f 8d 9a 01 00
	00		 jge	 $LN16@write_awst

; 488  :         {
; 489  :             // "%1d:%04X Tape file %s, type %s: error in function %s, offset 0x%16.16"PRIX64": %s"
; 490  :             WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename,

  00597	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  005a0	74 15		 je	 SHORT $LN28@write_awst
  005a2	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005aa	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  005ae	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv265[rsp], eax
  005b5	eb 0b		 jmp	 SHORT $LN29@write_awst
$LN28@write_awst:
  005b7	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv265[rsp], 0
$LN29@write_awst:
  005c2	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  005cb	74 17		 je	 SHORT $LN30@write_awst
  005cd	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  005d5	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  005d9	d1 f8		 sar	 eax, 1
  005db	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv271[rsp], eax
  005e2	eb 0b		 jmp	 SHORT $LN31@write_awst
$LN30@write_awst:
  005e4	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv271[rsp], 0
$LN31@write_awst:
  005ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  005f5	8b 08		 mov	 ecx, DWORD PTR [rax]
  005f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  005fd	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv252[rsp], rax
  00605	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  0060d	48 83 c1 06	 add	 rcx, 6
  00611	48 89 8c 24 d8
	00 00 00	 mov	 QWORD PTR tv256[rsp], rcx
  00619	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00621	48 81 c2 a4 00
	00 00		 add	 rdx, 164		; 000000a4H
  00628	48 89 94 24 e0
	00 00 00	 mov	 QWORD PTR tv260[rsp], rdx
  00630	b9 01 00 00 00	 mov	 ecx, 1
  00635	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  0063b	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv252[rsp]
  00643	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00648	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR tv256[rsp]
  00650	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00655	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169403
  0065c	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00661	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169404
  00668	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0066d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv260[rsp]
  00675	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0067a	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv265[rsp]
  00681	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00685	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv271[rsp]
  0068c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00690	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169405
  00697	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0069c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169406
  006a3	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  006a8	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  006ad	41 b9 03 00 00
	00		 mov	 r9d, 3
  006b3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169407
  006ba	ba eb 01 00 00	 mov	 edx, 491		; 000001ebH
  006bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169408
  006c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 491  :                 "aws", "write()", blkpos + sizeof(awshdr), strerror(errno));
; 492  :             if (ENOSPC == errno)

  006cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  006d2	83 38 1c	 cmp	 DWORD PTR [rax], 28
  006d5	75 2d		 jne	 SHORT $LN17@write_awst

; 493  :             {
; 494  :                 /* Disk FULL */
; 495  :                 build_senseX(TAPE_BSENSE_ENDOFTAPE,dev,unitstat,code);

  006d7	44 0f b6 8c 24
	40 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  006e0	4c 8b 84 24 38
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  006e8	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  006f0	b9 08 00 00 00	 mov	 ecx, 8
  006f5	e8 00 00 00 00	 call	 build_senseX

; 496  :                 return -1;

  006fa	b8 ff ff ff ff	 mov	 eax, -1
  006ff	e9 76 02 00 00	 jmp	 $LN1@write_awst
$LN17@write_awst:

; 497  :             }
; 498  : 
; 499  :             /* Set unit check with equipment check */
; 500  :             build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  00704	44 0f b6 8c 24
	40 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0070d	4c 8b 84 24 38
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00715	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0071d	b9 03 00 00 00	 mov	 ecx, 3
  00722	e8 00 00 00 00	 call	 build_senseX

; 501  :             return -1;

  00727	b8 ff ff ff ff	 mov	 eax, -1
  0072c	e9 49 02 00 00	 jmp	 $LN1@write_awst
$LN16@write_awst:

; 502  :         }
; 503  : 
; 504  :         /* Adjust the offsets of the previous and next blocks */
; 505  :         dev->prvblkpos = blkpos;

  00731	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00739	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00741	48 89 88 10 10
	00 00		 mov	 QWORD PTR [rax+4112], rcx

; 506  :         blkpos += sizeof(awshdr) + chksize;

  00748	0f b7 44 24 70	 movzx	 eax, WORD PTR chksize$[rsp]
  0074d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00755	48 8d 44 01 06	 lea	 rax, QWORD PTR [rcx+rax+6]
  0075a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR blkpos$[rsp], rax

; 507  :         dev->nxtblkpos = blkpos;

  00762	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0076a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00772	48 89 88 08 10
	00 00		 mov	 QWORD PTR [rax+4104], rcx

; 508  : 
; 509  :         /* The next chunk (if there is one) won't be the first */
; 510  :         awshdr.flags1 &= ~AWSTAPE_FLAG1_NEWREC;

  00779	0f b6 84 24 fc
	00 00 00	 movzx	 eax, BYTE PTR awshdr$[rsp+4]
  00781	0f ba f0 07	 btr	 eax, 7
  00785	88 84 24 fc 00
	00 00		 mov	 BYTE PTR awshdr$[rsp+4], al

; 511  : 
; 512  :         /* Adjust buffer pointer and block bytes remaining */
; 513  :         buf    += chksize;

  0078c	0f b7 44 24 70	 movzx	 eax, WORD PTR chksize$[rsp]
  00791	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00799	48 03 c8	 add	 rcx, rax
  0079c	48 8b c1	 mov	 rax, rcx
  0079f	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR buf$[rsp], rax

; 514  :         blklen -= chksize;

  007a7	0f b7 44 24 70	 movzx	 eax, WORD PTR chksize$[rsp]
  007ac	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR blklen$[rsp]
  007b3	2b c8		 sub	 ecx, eax
  007b5	8b c1		 mov	 eax, ecx
  007b7	89 84 24 30 01
	00 00		 mov	 DWORD PTR blklen$[rsp], eax

; 515  :         prvblkl = chksize;

  007be	0f b7 44 24 70	 movzx	 eax, WORD PTR chksize$[rsp]
  007c3	66 89 44 24 74	 mov	 WORD PTR prvblkl$[rsp], ax

; 516  :     }
; 517  :     while (blklen);

  007c8	83 bc 24 30 01
	00 00 00	 cmp	 DWORD PTR blklen$[rsp], 0
  007d0	0f 85 38 fb ff
	ff		 jne	 $LN4@write_awst

; 518  : 
; 519  :     dev->blockid++;

  007d6	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007de	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  007e4	ff c0		 inc	 eax
  007e6	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  007ee	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax
$LN7@write_awst:

; 520  : 
; 521  :     /* Set new physical EOF */
; 522  :     do rc = ftruncate( dev->fd, dev->nxtblkpos );

  007f4	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  007fc	48 8b 90 08 10
	00 00		 mov	 rdx, QWORD PTR [rax+4104]
  00803	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0080b	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00811	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__chsize_s
  00817	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 523  :     while (EINTR == rc);

  0081b	83 7c 24 78 04	 cmp	 DWORD PTR rc$[rsp], 4
  00820	74 d2		 je	 SHORT $LN7@write_awst

; 524  : 
; 525  :     /* Handle write error condition */
; 526  :     if (rc != 0)

  00822	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00827	0f 84 4b 01 00
	00		 je	 $LN18@write_awst

; 527  :     {
; 528  :         // "%1d:%04X Tape file %s, type %s: error in function %s, offset 0x%16.16"PRIX64": %s"
; 529  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename,

  0082d	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00836	74 15		 je	 SHORT $LN32@write_awst
  00838	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00840	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00844	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv328[rsp], eax
  0084b	eb 0b		 jmp	 SHORT $LN33@write_awst
$LN32@write_awst:
  0084d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv328[rsp], 0
$LN33@write_awst:
  00858	48 83 bc 24 20
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00861	74 17		 je	 SHORT $LN34@write_awst
  00863	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0086b	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0086f	d1 f8		 sar	 eax, 1
  00871	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv334[rsp], eax
  00878	eb 0b		 jmp	 SHORT $LN35@write_awst
$LN34@write_awst:
  0087a	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv334[rsp], 0
$LN35@write_awst:
  00885	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0088b	8b 08		 mov	 ecx, DWORD PTR [rax]
  0088d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00893	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv316[rsp], rax
  0089b	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  008a3	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  008aa	48 89 8c 24 f0
	00 00 00	 mov	 QWORD PTR tv323[rsp], rcx
  008b2	b9 01 00 00 00	 mov	 ecx, 1
  008b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  008bd	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv316[rsp]
  008c5	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  008ca	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  008d2	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  008d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169411
  008de	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  008e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169412
  008ea	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  008ef	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv323[rsp]
  008f7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  008fc	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv328[rsp]
  00903	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00907	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv334[rsp]
  0090e	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00912	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169413
  00919	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0091e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169414
  00925	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0092a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0092f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00935	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169415
  0093c	ba 12 02 00 00	 mov	 edx, 530		; 00000212H
  00941	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169416
  00948	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 530  :             "aws", "ftruncate()", blkpos, strerror(errno));
; 531  : 
; 532  :         /* Set unit check with equipment check */
; 533  :         build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  0094e	44 0f b6 8c 24
	40 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00957	4c 8b 84 24 38
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0095f	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00967	b9 03 00 00 00	 mov	 ecx, 3
  0096c	e8 00 00 00 00	 call	 build_senseX

; 534  :         return -1;

  00971	b8 ff ff ff ff	 mov	 eax, -1
  00976	eb 02		 jmp	 SHORT $LN1@write_awst
$LN18@write_awst:

; 535  :     }
; 536  : 
; 537  :     /* Return normal status */
; 538  :     return 0;

  00978	33 c0		 xor	 eax, eax
$LN1@write_awst:

; 539  : 
; 540  : } /* end function write_awstape */

  0097a	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00982	48 33 cc	 xor	 rcx, rsp
  00985	e8 00 00 00 00	 call	 __security_check_cookie
  0098a	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  00991	c3		 ret	 0
write_awstape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
seglen$ = 112
blklen$ = 116
rc$ = 120
blkpos$ = 128
tv95 = 136
tv133 = 140
tv161 = 144
tv167 = 148
tv206 = 152
tv212 = 156
tv238 = 160
tv244 = 164
tv90 = 168
tv156 = 176
tv194 = 184
tv201 = 192
tv233 = 200
awshdr$ = 208
__$ArrayPad$ = 216
dev$ = 240
buf$ = 248
unitstat$ = 256
code$ = 264
read_awstape PROC

; 282  : {

$LN29:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 283  : int             rc;                     /* Return code               */
; 284  : AWSTAPE_BLKHDR  awshdr;                 /* AWSTAPE block header      */
; 285  : off_t           blkpos;                 /* Offset of block header    */
; 286  : int             blklen = 0;             /* Total length of block     */

  0002d	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR blklen$[rsp], 0

; 287  : U16             seglen;                 /* Data length of segment    */
; 288  : 
; 289  :     /* Initialize current block position */
; 290  :     blkpos = dev->nxtblkpos;

  00035	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0003d	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  00044	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR blkpos$[rsp], rax
$LN4@read_awsta:

; 291  : 
; 292  :     /* Read block segments until end of block */
; 293  :     do
; 294  :     {
; 295  :         /* Read the 6-byte block header */
; 296  :         rc = readhdr_awstape (dev, blkpos, &awshdr, unitstat,code);

  0004c	0f b6 84 24 08
	01 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00054	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00058	4c 8b 8c 24 00
	01 00 00	 mov	 r9, QWORD PTR unitstat$[rsp]
  00060	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR awshdr$[rsp]
  00068	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR blkpos$[rsp]
  00070	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00078	e8 00 00 00 00	 call	 readhdr_awstape
  0007d	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 297  :         if (rc < 0) return -1;

  00081	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  00086	7d 0a		 jge	 SHORT $LN5@read_awsta
  00088	b8 ff ff ff ff	 mov	 eax, -1
  0008d	e9 59 06 00 00	 jmp	 $LN1@read_awsta
$LN5@read_awsta:

; 298  : 
; 299  :         /* Extract the segment length from the block header */
; 300  :         seglen = ((U16)(awshdr.curblkl[1]) << 8)

  00092	b8 01 00 00 00	 mov	 eax, 1
  00097	48 6b c0 01	 imul	 rax, rax, 1
  0009b	0f b6 84 04 d0
	00 00 00	 movzx	 eax, BYTE PTR awshdr$[rsp+rax]
  000a3	c1 e0 08	 shl	 eax, 8
  000a6	b9 01 00 00 00	 mov	 ecx, 1
  000ab	48 6b c9 00	 imul	 rcx, rcx, 0
  000af	0f b6 8c 0c d0
	00 00 00	 movzx	 ecx, BYTE PTR awshdr$[rsp+rcx]
  000b7	0b c1		 or	 eax, ecx
  000b9	66 89 44 24 70	 mov	 WORD PTR seglen$[rsp], ax

; 301  :                     | awshdr.curblkl[0];
; 302  : 
; 303  :         /* Calculate the offset of the next block segment */
; 304  :         blkpos += sizeof(awshdr) + seglen;

  000be	0f b7 44 24 70	 movzx	 eax, WORD PTR seglen$[rsp]
  000c3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  000cb	48 8d 44 01 06	 lea	 rax, QWORD PTR [rcx+rax+6]
  000d0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR blkpos$[rsp], rax

; 305  : 
; 306  :         /* Check that block length will not exceed buffer size */
; 307  :         if (blklen + seglen > MAX_TAPE_BLKSIZE)

  000d8	0f b7 44 24 70	 movzx	 eax, WORD PTR seglen$[rsp]
  000dd	8b 4c 24 74	 mov	 ecx, DWORD PTR blklen$[rsp]
  000e1	03 c8		 add	 ecx, eax
  000e3	8b c1		 mov	 eax, ecx
  000e5	3d 00 00 20 00	 cmp	 eax, 2097152		; 00200000H
  000ea	0f 8e 26 01 00
	00		 jle	 $LN6@read_awsta

; 308  :         {
; 309  :             // "%1d:%04X Tape file %s, type %s: block length %d exceeds maximum at offset 0x%16.16"PRIX64
; 310  :             WRMSG (HHC00202, "E", LCSS_DEVNUM, dev->filename, "aws",

  000f0	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000f9	74 15		 je	 SHORT $LN13@read_awsta
  000fb	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00103	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00107	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv95[rsp], eax
  0010e	eb 0b		 jmp	 SHORT $LN14@read_awsta
$LN13@read_awsta:
  00110	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv95[rsp], 0
$LN14@read_awsta:
  0011b	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00124	74 17		 je	 SHORT $LN15@read_awsta
  00126	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0012e	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00132	d1 f8		 sar	 eax, 1
  00134	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv133[rsp], eax
  0013b	eb 0b		 jmp	 SHORT $LN16@read_awsta
$LN15@read_awsta:
  0013d	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv133[rsp], 0
$LN16@read_awsta:
  00148	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00150	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00156	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv90[rsp], rax
  0015e	b9 01 00 00 00	 mov	 ecx, 1
  00163	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00169	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00171	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00176	c7 44 24 58 00
	00 20 00	 mov	 DWORD PTR [rsp+88], 2097152 ; 00200000H
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169325
  00185	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0018a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv90[rsp]
  00192	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00197	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv95[rsp]
  0019e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001a2	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv133[rsp]
  001a9	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  001ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169326
  001b4	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169327
  001c0	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  001c5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ca	41 b9 03 00 00
	00		 mov	 r9d, 3
  001d0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169328
  001d7	ba 37 01 00 00	 mov	 edx, 311		; 00000137H
  001dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169329
  001e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 311  :                     (int)MAX_TAPE_BLKSIZE, blkpos);
; 312  : 
; 313  :             /* Set unit check with data check */
; 314  :             build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  001e9	44 0f b6 8c 24
	08 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  001f2	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  001fa	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00202	b9 02 00 00 00	 mov	 ecx, 2
  00207	e8 00 00 00 00	 call	 build_senseX

; 315  :             return -1;

  0020c	b8 ff ff ff ff	 mov	 eax, -1
  00211	e9 d5 04 00 00	 jmp	 $LN1@read_awsta
$LN6@read_awsta:

; 316  :         }
; 317  : 
; 318  :         /* Check that tapemark blocksize is zero */
; 319  :         if ((awshdr.flags1 & AWSTAPE_FLAG1_TAPEMARK)
; 320  :             && blklen + seglen > 0)

  00216	0f b6 84 24 d4
	00 00 00	 movzx	 eax, BYTE PTR awshdr$[rsp+4]
  0021e	83 e0 40	 and	 eax, 64			; 00000040H
  00221	85 c0		 test	 eax, eax
  00223	0f 84 33 01 00
	00		 je	 $LN7@read_awsta
  00229	0f b7 44 24 70	 movzx	 eax, WORD PTR seglen$[rsp]
  0022e	8b 4c 24 74	 mov	 ecx, DWORD PTR blklen$[rsp]
  00232	03 c8		 add	 ecx, eax
  00234	8b c1		 mov	 eax, ecx
  00236	85 c0		 test	 eax, eax
  00238	0f 8e 1e 01 00
	00		 jle	 $LN7@read_awsta

; 321  :         {
; 322  :             // "%1d:%04X Tape file %s, type %s: invalid tapemark at offset 0x%16.16"PRIX64
; 323  :             WRMSG (HHC00203, "E", LCSS_DEVNUM, dev->filename, "aws", blkpos);

  0023e	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00247	74 15		 je	 SHORT $LN17@read_awsta
  00249	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00251	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00255	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv161[rsp], eax
  0025c	eb 0b		 jmp	 SHORT $LN18@read_awsta
$LN17@read_awsta:
  0025e	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv161[rsp], 0
$LN18@read_awsta:
  00269	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00272	74 17		 je	 SHORT $LN19@read_awsta
  00274	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0027c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00280	d1 f8		 sar	 eax, 1
  00282	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv167[rsp], eax
  00289	eb 0b		 jmp	 SHORT $LN20@read_awsta
$LN19@read_awsta:
  0028b	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv167[rsp], 0
$LN20@read_awsta:
  00296	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0029e	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  002a4	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv156[rsp], rax
  002ac	b9 01 00 00 00	 mov	 ecx, 1
  002b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  002b7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  002bf	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  002c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169331
  002cb	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  002d0	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv156[rsp]
  002d8	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  002dd	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv161[rsp]
  002e4	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  002e8	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv167[rsp]
  002ef	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  002f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169332
  002fa	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169333
  00306	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0030b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00310	41 b9 03 00 00
	00		 mov	 r9d, 3
  00316	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169334
  0031d	ba 43 01 00 00	 mov	 edx, 323		; 00000143H
  00322	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169335
  00329	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 324  : 
; 325  :             /* Set unit check with data check */
; 326  :             build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  0032f	44 0f b6 8c 24
	08 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00338	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00340	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00348	b9 02 00 00 00	 mov	 ecx, 2
  0034d	e8 00 00 00 00	 call	 build_senseX

; 327  :             return -1;

  00352	b8 ff ff ff ff	 mov	 eax, -1
  00357	e9 8f 03 00 00	 jmp	 $LN1@read_awsta
$LN7@read_awsta:

; 328  :         }
; 329  : 
; 330  :         /* Exit loop if this is a tapemark */
; 331  :         if (awshdr.flags1 & AWSTAPE_FLAG1_TAPEMARK)

  0035c	0f b6 84 24 d4
	00 00 00	 movzx	 eax, BYTE PTR awshdr$[rsp+4]
  00364	83 e0 40	 and	 eax, 64			; 00000040H
  00367	85 c0		 test	 eax, eax
  00369	74 05		 je	 SHORT $LN8@read_awsta

; 332  :             break;

  0036b	e9 f8 02 00 00	 jmp	 $LN3@read_awsta
$LN8@read_awsta:

; 333  : 
; 334  :         /* Read data block segment from tape file */
; 335  :         rc = read (dev->fd, buf+blklen, seglen);

  00370	0f b7 44 24 70	 movzx	 eax, WORD PTR seglen$[rsp]
  00375	48 63 4c 24 74	 movsxd	 rcx, DWORD PTR blklen$[rsp]
  0037a	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  00382	48 03 d1	 add	 rdx, rcx
  00385	48 8b ca	 mov	 rcx, rdx
  00388	44 8b c0	 mov	 r8d, eax
  0038b	48 8b d1	 mov	 rdx, rcx
  0038e	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00396	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0039c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  003a2	89 44 24 78	 mov	 DWORD PTR rc$[rsp], eax

; 336  : 
; 337  :         /* Handle read error condition */
; 338  :         if (rc < 0)

  003a6	83 7c 24 78 00	 cmp	 DWORD PTR rc$[rsp], 0
  003ab	0f 8d 4e 01 00
	00		 jge	 $LN9@read_awsta

; 339  :         {
; 340  :             // "%1d:%04X Tape file %s, type %s: error in function %s, offset 0x%16.16"PRIX64": %s"
; 341  :             WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "aws", "read()", blkpos, strerror(errno));

  003b1	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  003ba	74 15		 je	 SHORT $LN21@read_awsta
  003bc	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003c4	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  003c8	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv206[rsp], eax
  003cf	eb 0b		 jmp	 SHORT $LN22@read_awsta
$LN21@read_awsta:
  003d1	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv206[rsp], 0
$LN22@read_awsta:
  003dc	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  003e5	74 17		 je	 SHORT $LN23@read_awsta
  003e7	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003ef	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  003f3	d1 f8		 sar	 eax, 1
  003f5	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv212[rsp], eax
  003fc	eb 0b		 jmp	 SHORT $LN24@read_awsta
$LN23@read_awsta:
  003fe	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv212[rsp], 0
$LN24@read_awsta:
  00409	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0040f	8b 08		 mov	 ecx, DWORD PTR [rax]
  00411	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00417	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv194[rsp], rax
  0041f	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00427	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  0042e	48 89 8c 24 c0
	00 00 00	 mov	 QWORD PTR tv201[rsp], rcx
  00436	b9 01 00 00 00	 mov	 ecx, 1
  0043b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00441	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv194[rsp]
  00449	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  0044e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00456	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  0045b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169338
  00462	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  00467	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169339
  0046e	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00473	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv201[rsp]
  0047b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00480	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv206[rsp]
  00487	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0048b	8b 8c 24 9c 00
	00 00		 mov	 ecx, DWORD PTR tv212[rsp]
  00492	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00496	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169340
  0049d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  004a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169341
  004a9	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  004ae	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004b3	41 b9 03 00 00
	00		 mov	 r9d, 3
  004b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169342
  004c0	ba 55 01 00 00	 mov	 edx, 341		; 00000155H
  004c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169343
  004cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 342  : 
; 343  :             /* Set unit check with equipment check */
; 344  :             build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  004d2	44 0f b6 8c 24
	08 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  004db	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  004e3	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  004eb	b9 02 00 00 00	 mov	 ecx, 2
  004f0	e8 00 00 00 00	 call	 build_senseX

; 345  :             return -1;

  004f5	b8 ff ff ff ff	 mov	 eax, -1
  004fa	e9 ec 01 00 00	 jmp	 $LN1@read_awsta
$LN9@read_awsta:

; 346  :         }
; 347  : 
; 348  :         /* Handle end of file within data block */
; 349  :         if (rc < seglen)

  004ff	0f b7 44 24 70	 movzx	 eax, WORD PTR seglen$[rsp]
  00504	39 44 24 78	 cmp	 DWORD PTR rc$[rsp], eax
  00508	0f 8d 36 01 00
	00		 jge	 $LN10@read_awsta

; 350  :         {
; 351  :             // "%1d:%04X Tape file %s, type %s: error in function %s, offset 0x%16.16"PRIX64": %s"
; 352  :             WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "aws", "read_awstape()", blkpos, "end of file within data block");

  0050e	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00517	74 15		 je	 SHORT $LN25@read_awsta
  00519	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00521	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00525	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv238[rsp], eax
  0052c	eb 0b		 jmp	 SHORT $LN26@read_awsta
$LN25@read_awsta:
  0052e	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv238[rsp], 0
$LN26@read_awsta:
  00539	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00542	74 17		 je	 SHORT $LN27@read_awsta
  00544	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0054c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00550	d1 f8		 sar	 eax, 1
  00552	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv244[rsp], eax
  00559	eb 0b		 jmp	 SHORT $LN28@read_awsta
$LN27@read_awsta:
  0055b	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv244[rsp], 0
$LN28@read_awsta:
  00566	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0056e	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00574	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv233[rsp], rax
  0057c	b9 01 00 00 00	 mov	 ecx, 1
  00581	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00587	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169345
  0058e	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00593	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  0059b	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  005a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169346
  005a7	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  005ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169347
  005b3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  005b8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv233[rsp]
  005c0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  005c5	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR tv238[rsp]
  005cc	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  005d0	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR tv244[rsp]
  005d7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  005db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169348
  005e2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169349
  005ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  005f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005f8	41 b9 03 00 00
	00		 mov	 r9d, 3
  005fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169350
  00605	ba 60 01 00 00	 mov	 edx, 352		; 00000160H
  0060a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169351
  00611	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 353  : 
; 354  :             /* Set unit check with data check and partial record */
; 355  :             build_senseX(TAPE_BSENSE_BLOCKSHORT,dev,unitstat,code);

  00617	44 0f b6 8c 24
	08 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00620	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00628	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00630	b9 11 00 00 00	 mov	 ecx, 17
  00635	e8 00 00 00 00	 call	 build_senseX

; 356  :             return -1;

  0063a	b8 ff ff ff ff	 mov	 eax, -1
  0063f	e9 a7 00 00 00	 jmp	 $LN1@read_awsta
$LN10@read_awsta:

; 357  :         }
; 358  : 
; 359  :         /* Accumulate the total block length */
; 360  :         blklen += seglen;

  00644	0f b7 44 24 70	 movzx	 eax, WORD PTR seglen$[rsp]
  00649	8b 4c 24 74	 mov	 ecx, DWORD PTR blklen$[rsp]
  0064d	03 c8		 add	 ecx, eax
  0064f	8b c1		 mov	 eax, ecx
  00651	89 44 24 74	 mov	 DWORD PTR blklen$[rsp], eax

; 361  : 
; 362  :     } while ((awshdr.flags1 & AWSTAPE_FLAG1_ENDREC) == 0);

  00655	0f b6 84 24 d4
	00 00 00	 movzx	 eax, BYTE PTR awshdr$[rsp+4]
  0065d	83 e0 20	 and	 eax, 32			; 00000020H
  00660	85 c0		 test	 eax, eax
  00662	0f 84 e4 f9 ff
	ff		 je	 $LN4@read_awsta
$LN3@read_awsta:

; 363  : 
; 364  :     /* Calculate the offsets of the next and previous blocks */
; 365  :     dev->prvblkpos = dev->nxtblkpos;

  00668	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00670	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00678	48 8b 89 08 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4104]
  0067f	48 89 88 10 10
	00 00		 mov	 QWORD PTR [rax+4112], rcx

; 366  :     dev->nxtblkpos = blkpos;

  00686	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0068e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00696	48 89 88 08 10
	00 00		 mov	 QWORD PTR [rax+4104], rcx

; 367  : 
; 368  :     /* Increment the block number */
; 369  :     dev->blockid++;

  0069d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006a5	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  006ab	ff c0		 inc	 eax
  006ad	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  006b5	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 370  : 
; 371  :     /* Increment file number and return zero if tapemark was read */
; 372  :     if (blklen == 0)

  006bb	83 7c 24 74 00	 cmp	 DWORD PTR blklen$[rsp], 0
  006c0	75 25		 jne	 SHORT $LN11@read_awsta

; 373  :     {
; 374  :         dev->curfilen++;

  006c2	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  006ca	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  006d1	66 ff c0	 inc	 ax
  006d4	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  006dc	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 375  :         return 0; /* UX will be set by caller */

  006e3	33 c0		 xor	 eax, eax
  006e5	eb 04		 jmp	 SHORT $LN1@read_awsta
$LN11@read_awsta:

; 376  :     }
; 377  : 
; 378  :     /* Return block length */
; 379  :     return blklen;

  006e7	8b 44 24 74	 mov	 eax, DWORD PTR blklen$[rsp]
$LN1@read_awsta:

; 380  : 
; 381  : } /* end function read_awstape */

  006eb	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  006f3	48 33 cc	 xor	 rcx, rsp
  006f6	e8 00 00 00 00	 call	 __security_check_cookie
  006fb	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  00702	c3		 ret	 0
read_awstape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
rc$ = 112
tv82 = 116
tv88 = 120
tv153 = 124
tv159 = 128
tv184 = 132
tv190 = 136
tv215 = 140
tv221 = 144
rcoff$ = 152
tv70 = 160
tv77 = 168
tv141 = 176
tv148 = 184
tv179 = 192
tv210 = 200
dev$ = 224
blkpos$ = 232
buf$ = 240
unitstat$ = 248
code$ = 256
readhdr_awstape PROC

; 216  : {

$LN23:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 217  : int             rc;                     /* Return code               */
; 218  : off_t           rcoff;                  /* Return code from lseek()  */
; 219  : 
; 220  :     /* Reposition file to the requested block header */
; 221  :     rcoff = lseek (dev->fd, blkpos, SEEK_SET);

  0001b	45 33 c0	 xor	 r8d, r8d
  0001e	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR blkpos$[rsp]
  00026	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0002e	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0003a	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR rcoff$[rsp], rax

; 222  :     if (rcoff < 0)

  00042	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR rcoff$[rsp], 0
  0004b	0f 8d 3c 01 00
	00		 jge	 $LN2@readhdr_aw

; 223  :     {
; 224  :         /* Handle seek error condition */
; 225  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "aws", "lseek()", blkpos, strerror(errno));

  00051	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0005a	74 12		 je	 SHORT $LN7@readhdr_aw
  0005c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00064	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00068	89 44 24 74	 mov	 DWORD PTR tv82[rsp], eax
  0006c	eb 08		 jmp	 SHORT $LN8@readhdr_aw
$LN7@readhdr_aw:
  0006e	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv82[rsp], 0
$LN8@readhdr_aw:
  00076	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0007f	74 14		 je	 SHORT $LN9@readhdr_aw
  00081	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00089	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0008d	d1 f8		 sar	 eax, 1
  0008f	89 44 24 78	 mov	 DWORD PTR tv88[rsp], eax
  00093	eb 08		 jmp	 SHORT $LN10@readhdr_aw
$LN9@readhdr_aw:
  00095	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
$LN10@readhdr_aw:
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000a3	8b 08		 mov	 ecx, DWORD PTR [rax]
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000ab	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv70[rsp], rax
  000b3	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000bb	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  000c2	48 89 8c 24 a8
	00 00 00	 mov	 QWORD PTR tv77[rsp], rcx
  000ca	b9 01 00 00 00	 mov	 ecx, 1
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000d5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv70[rsp]
  000dd	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  000e2	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  000ea	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169275
  000f6	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169276
  00102	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00107	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv77[rsp]
  0010f	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00114	8b 4c 24 74	 mov	 ecx, DWORD PTR tv82[rsp]
  00118	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0011c	8b 4c 24 78	 mov	 ecx, DWORD PTR tv88[rsp]
  00120	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169277
  0012b	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169278
  00137	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0013c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00141	41 b9 03 00 00
	00		 mov	 r9d, 3
  00147	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169279
  0014e	ba e1 00 00 00	 mov	 edx, 225		; 000000e1H
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169280
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 226  : 
; 227  :         /* Set unit check with equipment check */
; 228  :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  00160	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00169	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00171	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00179	b9 0e 00 00 00	 mov	 ecx, 14
  0017e	e8 00 00 00 00	 call	 build_senseX

; 229  :         return -1;

  00183	b8 ff ff ff ff	 mov	 eax, -1
  00188	e9 f7 03 00 00	 jmp	 $LN1@readhdr_aw
$LN2@readhdr_aw:

; 230  :     }
; 231  : 
; 232  :     /* Read the 6-byte block header */
; 233  :     rc = read (dev->fd, buf, sizeof(AWSTAPE_BLKHDR));

  0018d	41 b8 06 00 00
	00		 mov	 r8d, 6
  00193	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR buf$[rsp]
  0019b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001a3	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_read
  001af	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 234  : 
; 235  :     /* Handle read error condition */
; 236  :     if (rc < 0)

  001b3	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  001b8	0f 8d 45 01 00
	00		 jge	 $LN3@readhdr_aw

; 237  :     {
; 238  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "aws", "read()", blkpos, strerror(errno));

  001be	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001c7	74 12		 je	 SHORT $LN11@readhdr_aw
  001c9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001d1	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  001d5	89 44 24 7c	 mov	 DWORD PTR tv153[rsp], eax
  001d9	eb 08		 jmp	 SHORT $LN12@readhdr_aw
$LN11@readhdr_aw:
  001db	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv153[rsp], 0
$LN12@readhdr_aw:
  001e3	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  001ec	74 17		 je	 SHORT $LN13@readhdr_aw
  001ee	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  001f6	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  001fa	d1 f8		 sar	 eax, 1
  001fc	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv159[rsp], eax
  00203	eb 0b		 jmp	 SHORT $LN14@readhdr_aw
$LN13@readhdr_aw:
  00205	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv159[rsp], 0
$LN14@readhdr_aw:
  00210	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00216	8b 08		 mov	 ecx, DWORD PTR [rax]
  00218	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0021e	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv141[rsp], rax
  00226	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0022e	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  00235	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv148[rsp], rcx
  0023d	b9 01 00 00 00	 mov	 ecx, 1
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00248	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv141[rsp]
  00250	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00255	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  0025d	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00262	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169282
  00269	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0026e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169283
  00275	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0027a	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv148[rsp]
  00282	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00287	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv153[rsp]
  0028b	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0028f	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv159[rsp]
  00296	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0029a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169284
  002a1	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  002a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169285
  002ad	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002b2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002b7	41 b9 03 00 00
	00		 mov	 r9d, 3
  002bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169286
  002c4	ba ee 00 00 00	 mov	 edx, 238		; 000000eeH
  002c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169287
  002d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 239  : 
; 240  :         /* Set unit check with equipment check */
; 241  :         build_senseX(TAPE_BSENSE_READFAIL,dev,unitstat,code);

  002d6	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  002df	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  002e7	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  002ef	b9 02 00 00 00	 mov	 ecx, 2
  002f4	e8 00 00 00 00	 call	 build_senseX

; 242  :         return -1;

  002f9	b8 ff ff ff ff	 mov	 eax, -1
  002fe	e9 81 02 00 00	 jmp	 $LN1@readhdr_aw
$LN3@readhdr_aw:

; 243  :     }
; 244  : 
; 245  :     /* Handle end of file (uninitialized tape) condition */
; 246  :     if (rc == 0)

  00303	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00308	0f 85 36 01 00
	00		 jne	 $LN4@readhdr_aw

; 247  :     {
; 248  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "aws", "readhdr_awstape()", blkpos, "end of file (uninitialized tape)");

  0030e	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00317	74 15		 je	 SHORT $LN15@readhdr_aw
  00319	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00321	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00325	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
  0032c	eb 0b		 jmp	 SHORT $LN16@readhdr_aw
$LN15@readhdr_aw:
  0032e	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv184[rsp], 0
$LN16@readhdr_aw:
  00339	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00342	74 17		 je	 SHORT $LN17@readhdr_aw
  00344	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0034c	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00350	d1 f8		 sar	 eax, 1
  00352	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv190[rsp], eax
  00359	eb 0b		 jmp	 SHORT $LN18@readhdr_aw
$LN17@readhdr_aw:
  0035b	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv190[rsp], 0
$LN18@readhdr_aw:
  00366	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0036e	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00374	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv179[rsp], rax
  0037c	b9 01 00 00 00	 mov	 ecx, 1
  00381	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  00387	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169289
  0038e	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00393	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  0039b	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  003a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169290
  003a7	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  003ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169291
  003b3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  003b8	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv179[rsp]
  003c0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003c5	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv184[rsp]
  003cc	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003d0	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv190[rsp]
  003d7	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169292
  003e2	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  003e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169293
  003ee	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  003f3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  003f8	41 b9 03 00 00
	00		 mov	 r9d, 3
  003fe	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169294
  00405	ba f8 00 00 00	 mov	 edx, 248		; 000000f8H
  0040a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169295
  00411	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 249  : 
; 250  :         /* Set unit exception with tape indicate (end of tape) */
; 251  :         build_senseX(TAPE_BSENSE_EMPTYTAPE,dev,unitstat,code);

  00417	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00420	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00428	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00430	b9 07 00 00 00	 mov	 ecx, 7
  00435	e8 00 00 00 00	 call	 build_senseX

; 252  :         return -1;

  0043a	b8 ff ff ff ff	 mov	 eax, -1
  0043f	e9 40 01 00 00	 jmp	 $LN1@readhdr_aw
$LN4@readhdr_aw:

; 253  :     }
; 254  : 
; 255  :     /* Handle end of file within block header */
; 256  :     if (rc < (int)sizeof(AWSTAPE_BLKHDR))

  00444	83 7c 24 70 06	 cmp	 DWORD PTR rc$[rsp], 6
  00449	0f 8d 33 01 00
	00		 jge	 $LN5@readhdr_aw

; 257  :     {
; 258  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "aws", "readhdr_awstape()", blkpos, "unexpected end of file");

  0044f	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00458	74 15		 je	 SHORT $LN19@readhdr_aw
  0045a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00462	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00466	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv215[rsp], eax
  0046d	eb 0b		 jmp	 SHORT $LN20@readhdr_aw
$LN19@readhdr_aw:
  0046f	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv215[rsp], 0
$LN20@readhdr_aw:
  0047a	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00483	74 17		 je	 SHORT $LN21@readhdr_aw
  00485	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0048d	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00491	d1 f8		 sar	 eax, 1
  00493	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv221[rsp], eax
  0049a	eb 0b		 jmp	 SHORT $LN22@readhdr_aw
$LN21@readhdr_aw:
  0049c	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv221[rsp], 0
$LN22@readhdr_aw:
  004a7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004af	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  004b5	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv210[rsp], rax
  004bd	b9 01 00 00 00	 mov	 ecx, 1
  004c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  004c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169297
  004cf	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  004d4	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR blkpos$[rsp]
  004dc	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  004e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169298
  004e8	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  004ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169299
  004f4	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  004f9	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv210[rsp]
  00501	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00506	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv215[rsp]
  0050d	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00511	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv221[rsp]
  00518	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0051c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169300
  00523	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00528	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169301
  0052f	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00534	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00539	41 b9 03 00 00
	00		 mov	 r9d, 3
  0053f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169302
  00546	ba 02 01 00 00	 mov	 edx, 258		; 00000102H
  0054b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169303
  00552	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 259  : 
; 260  :         build_senseX(TAPE_BSENSE_BLOCKSHORT,dev,unitstat,code);

  00558	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00561	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00569	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00571	b9 11 00 00 00	 mov	 ecx, 17
  00576	e8 00 00 00 00	 call	 build_senseX

; 261  :         return -1;

  0057b	b8 ff ff ff ff	 mov	 eax, -1
  00580	eb 02		 jmp	 SHORT $LN1@readhdr_aw
$LN5@readhdr_aw:

; 262  :     }
; 263  : 
; 264  :     /* Successful return */
; 265  :     return 0;

  00582	33 c0		 xor	 eax, eax
$LN1@readhdr_aw:

; 266  : 
; 267  : } /* end function readhdr_awstape */

  00584	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  0058b	c3		 ret	 0
readhdr_awstape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
rc$ = 32
dev$ = 64
unitstat$ = 72
code$ = 80
bsf_awstape PROC

; 820  : {

$LN8:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@bsf_awstap:

; 821  : int             rc;                     /* Return code               */
; 822  : 
; 823  :     while (1)

  00013	33 c0		 xor	 eax, eax
  00015	83 f8 01	 cmp	 eax, 1
  00018	74 62		 je	 SHORT $LN3@bsf_awstap

; 824  :     {
; 825  :         /* Exit if now at start of tape */
; 826  :         if (dev->nxtblkpos == 0)

  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0001f	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  00027	75 21		 jne	 SHORT $LN4@bsf_awstap

; 827  :         {
; 828  :             build_senseX(TAPE_BSENSE_LOADPTERR,dev,unitstat,code);

  00029	44 0f b6 4c 24
	50		 movzx	 r9d, BYTE PTR code$[rsp]
  0002f	4c 8b 44 24 48	 mov	 r8, QWORD PTR unitstat$[rsp]
  00034	48 8b 54 24 40	 mov	 rdx, QWORD PTR dev$[rsp]
  00039	b9 09 00 00 00	 mov	 ecx, 9
  0003e	e8 00 00 00 00	 call	 build_senseX

; 829  :             return -1;

  00043	b8 ff ff ff ff	 mov	 eax, -1
  00048	eb 34		 jmp	 SHORT $LN1@bsf_awstap
$LN4@bsf_awstap:

; 830  :         }
; 831  : 
; 832  :         /* Backspace to previous block position */
; 833  :         rc = bsb_awstape (dev, unitstat,code);

  0004a	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR code$[rsp]
  00050	48 8b 54 24 48	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00055	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0005a	e8 00 00 00 00	 call	 bsb_awstape
  0005f	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 834  :         if (rc < 0) return -1;

  00063	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  00068	7d 07		 jge	 SHORT $LN5@bsf_awstap
  0006a	b8 ff ff ff ff	 mov	 eax, -1
  0006f	eb 0d		 jmp	 SHORT $LN1@bsf_awstap
$LN5@bsf_awstap:

; 835  : 
; 836  :         /* Exit loop if backspaced over a tapemark */
; 837  :         if (rc == 0) break;

  00071	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  00076	75 02		 jne	 SHORT $LN6@bsf_awstap
  00078	eb 02		 jmp	 SHORT $LN3@bsf_awstap
$LN6@bsf_awstap:

; 838  : 
; 839  :     } /* end while */

  0007a	eb 97		 jmp	 SHORT $LN2@bsf_awstap
$LN3@bsf_awstap:

; 840  : 
; 841  :     /* Return normal status */
; 842  :     return 0;

  0007c	33 c0		 xor	 eax, eax
$LN1@bsf_awstap:

; 843  : 
; 844  : } /* end function bsf_awstape */

  0007e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00082	c3		 ret	 0
bsf_awstape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
rc$ = 32
dev$ = 64
unitstat$ = 72
code$ = 80
fsf_awstape PROC

; 789  : {

$LN7:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@fsf_awstap:

; 790  : int             rc;                     /* Return code               */
; 791  : 
; 792  :     while (1)

  00013	33 c0		 xor	 eax, eax
  00015	83 f8 01	 cmp	 eax, 1
  00018	74 32		 je	 SHORT $LN3@fsf_awstap

; 793  :     {
; 794  :         /* Forward space over next block */
; 795  :         rc = fsb_awstape (dev, unitstat,code);

  0001a	44 0f b6 44 24
	50		 movzx	 r8d, BYTE PTR code$[rsp]
  00020	48 8b 54 24 48	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00025	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  0002a	e8 00 00 00 00	 call	 fsb_awstape
  0002f	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 796  :         if (rc < 0) return -1;

  00033	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  00038	7d 07		 jge	 SHORT $LN4@fsf_awstap
  0003a	b8 ff ff ff ff	 mov	 eax, -1
  0003f	eb 0d		 jmp	 SHORT $LN1@fsf_awstap
$LN4@fsf_awstap:

; 797  : 
; 798  :         /* Exit loop if spaced over a tapemark */
; 799  :         if (rc == 0) break;

  00041	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  00046	75 02		 jne	 SHORT $LN5@fsf_awstap
  00048	eb 02		 jmp	 SHORT $LN3@fsf_awstap
$LN5@fsf_awstap:

; 800  : 
; 801  :     } /* end while */

  0004a	eb c7		 jmp	 SHORT $LN2@fsf_awstap
$LN3@fsf_awstap:

; 802  : 
; 803  :     /* Return normal status */
; 804  :     return 0;

  0004c	33 c0		 xor	 eax, eax
$LN1@fsf_awstap:

; 805  : 
; 806  : } /* end function fsf_awstape */

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
fsf_awstape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
curblkl$ = 48
prvblkl$ = 52
rc$ = 56
blkpos$ = 64
awshdr$ = 72
__$ArrayPad$ = 80
dev$ = 112
unitstat$ = 120
code$ = 128
bsb_awstape PROC

; 736  : {

$LN6:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 737  : int             rc;                     /* Return code               */
; 738  : AWSTAPE_BLKHDR  awshdr;                 /* AWSTAPE block header      */
; 739  : U16             curblkl;                /* Length of current block   */
; 740  : U16             prvblkl;                /* Length of previous block  */
; 741  : off_t           blkpos;                 /* Offset of block header    */
; 742  : 
; 743  :     /* Unit check if already at start of tape */
; 744  :     if (dev->nxtblkpos == 0)

  00022	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00027	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  0002f	75 27		 jne	 SHORT $LN2@bsb_awstap

; 745  :     {
; 746  :         build_senseX(TAPE_BSENSE_LOADPTERR,dev,unitstat,code);

  00031	44 0f b6 8c 24
	80 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0003a	4c 8b 44 24 78	 mov	 r8, QWORD PTR unitstat$[rsp]
  0003f	48 8b 54 24 70	 mov	 rdx, QWORD PTR dev$[rsp]
  00044	b9 09 00 00 00	 mov	 ecx, 9
  00049	e8 00 00 00 00	 call	 build_senseX

; 747  :         return -1;

  0004e	b8 ff ff ff ff	 mov	 eax, -1
  00053	e9 06 01 00 00	 jmp	 $LN1@bsb_awstap
$LN2@bsb_awstap:

; 748  :     }
; 749  : 
; 750  :     /* Backspace to previous block position */
; 751  :     blkpos = dev->prvblkpos;

  00058	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0005d	48 8b 80 10 10
	00 00		 mov	 rax, QWORD PTR [rax+4112]
  00064	48 89 44 24 40	 mov	 QWORD PTR blkpos$[rsp], rax

; 752  : 
; 753  :     /* Read the 6-byte block header */
; 754  :     rc = readhdr_awstape (dev, blkpos, &awshdr, unitstat,code);

  00069	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00071	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00075	4c 8b 4c 24 78	 mov	 r9, QWORD PTR unitstat$[rsp]
  0007a	4c 8d 44 24 48	 lea	 r8, QWORD PTR awshdr$[rsp]
  0007f	48 8b 54 24 40	 mov	 rdx, QWORD PTR blkpos$[rsp]
  00084	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00089	e8 00 00 00 00	 call	 readhdr_awstape
  0008e	89 44 24 38	 mov	 DWORD PTR rc$[rsp], eax

; 755  :     if (rc < 0) return -1;

  00092	83 7c 24 38 00	 cmp	 DWORD PTR rc$[rsp], 0
  00097	7d 0a		 jge	 SHORT $LN3@bsb_awstap
  00099	b8 ff ff ff ff	 mov	 eax, -1
  0009e	e9 bb 00 00 00	 jmp	 $LN1@bsb_awstap
$LN3@bsb_awstap:

; 756  : 
; 757  :     /* Extract the block lengths from the block header */
; 758  :     curblkl = ((U16)(awshdr.curblkl[1]) << 8)

  000a3	b8 01 00 00 00	 mov	 eax, 1
  000a8	48 6b c0 01	 imul	 rax, rax, 1
  000ac	0f b6 44 04 48	 movzx	 eax, BYTE PTR awshdr$[rsp+rax]
  000b1	c1 e0 08	 shl	 eax, 8
  000b4	b9 01 00 00 00	 mov	 ecx, 1
  000b9	48 6b c9 00	 imul	 rcx, rcx, 0
  000bd	0f b6 4c 0c 48	 movzx	 ecx, BYTE PTR awshdr$[rsp+rcx]
  000c2	0b c1		 or	 eax, ecx
  000c4	66 89 44 24 30	 mov	 WORD PTR curblkl$[rsp], ax

; 759  :                 | awshdr.curblkl[0];
; 760  :     prvblkl = ((U16)(awshdr.prvblkl[1]) << 8)

  000c9	b8 01 00 00 00	 mov	 eax, 1
  000ce	48 6b c0 01	 imul	 rax, rax, 1
  000d2	0f b6 44 04 4a	 movzx	 eax, BYTE PTR awshdr$[rsp+rax+2]
  000d7	c1 e0 08	 shl	 eax, 8
  000da	b9 01 00 00 00	 mov	 ecx, 1
  000df	48 6b c9 00	 imul	 rcx, rcx, 0
  000e3	0f b6 4c 0c 4a	 movzx	 ecx, BYTE PTR awshdr$[rsp+rcx+2]
  000e8	0b c1		 or	 eax, ecx
  000ea	66 89 44 24 34	 mov	 WORD PTR prvblkl$[rsp], ax

; 761  :                 | awshdr.prvblkl[0];
; 762  : 
; 763  :     /* Calculate the offset of the previous block */
; 764  :     dev->prvblkpos = blkpos - sizeof(awshdr) - prvblkl;

  000ef	48 8b 44 24 40	 mov	 rax, QWORD PTR blkpos$[rsp]
  000f4	48 83 e8 06	 sub	 rax, 6
  000f8	0f b7 4c 24 34	 movzx	 ecx, WORD PTR prvblkl$[rsp]
  000fd	48 2b c1	 sub	 rax, rcx
  00100	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00105	48 89 81 10 10
	00 00		 mov	 QWORD PTR [rcx+4112], rax

; 765  :     dev->nxtblkpos = blkpos;

  0010c	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00111	48 8b 4c 24 40	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00116	48 89 88 08 10
	00 00		 mov	 QWORD PTR [rax+4104], rcx

; 766  : 
; 767  :     /* Decrement current file number if backspaced over tapemark */
; 768  :     if (curblkl == 0)

  0011d	0f b7 44 24 30	 movzx	 eax, WORD PTR curblkl$[rsp]
  00122	85 c0		 test	 eax, eax
  00124	75 1b		 jne	 SHORT $LN4@bsb_awstap

; 769  :         dev->curfilen--;

  00126	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0012b	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  00132	66 ff c8	 dec	 ax
  00135	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0013a	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax
$LN4@bsb_awstap:

; 770  : 
; 771  :     dev->blockid--;

  00141	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00146	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  0014c	ff c8		 dec	 eax
  0014e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00153	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 772  : 
; 773  :     /* Return block length or zero if tapemark */
; 774  :     return curblkl;

  00159	0f b7 44 24 30	 movzx	 eax, WORD PTR curblkl$[rsp]
$LN1@bsb_awstap:

; 775  : 
; 776  : } /* end function bsb_awstape */

  0015e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00163	48 33 cc	 xor	 rcx, rsp
  00166	e8 00 00 00 00	 call	 __security_check_cookie
  0016b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0016f	c3		 ret	 0
bsb_awstape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
seglen$ = 48
blklen$ = 52
blkpos$ = 56
rc$ = 64
awshdr$ = 68
__$ArrayPad$ = 80
dev$ = 112
unitstat$ = 120
code$ = 128
fsb_awstape PROC

; 679  : {

$LN9:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  00013	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001a	48 33 c4	 xor	 rax, rsp
  0001d	48 89 44 24 50	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 680  : int             rc;                     /* Return code               */
; 681  : AWSTAPE_BLKHDR  awshdr;                 /* AWSTAPE block header      */
; 682  : off_t           blkpos;                 /* Offset of block header    */
; 683  : int             blklen = 0;             /* Total length of block     */

  00022	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR blklen$[rsp], 0

; 684  : U16             seglen;                 /* Data length of segment    */
; 685  : 
; 686  :     /* Initialize current block position */
; 687  :     blkpos = dev->nxtblkpos;

  0002a	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0002f	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  00036	48 89 44 24 38	 mov	 QWORD PTR blkpos$[rsp], rax
$LN4@fsb_awstap:

; 688  : 
; 689  :     /* Read block segments until end of block */
; 690  :     do
; 691  :     {
; 692  :         /* Read the 6-byte block header */
; 693  :         rc = readhdr_awstape (dev, blkpos, &awshdr, unitstat,code);

  0003b	0f b6 84 24 80
	00 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00043	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00047	4c 8b 4c 24 78	 mov	 r9, QWORD PTR unitstat$[rsp]
  0004c	4c 8d 44 24 44	 lea	 r8, QWORD PTR awshdr$[rsp]
  00051	48 8b 54 24 38	 mov	 rdx, QWORD PTR blkpos$[rsp]
  00056	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0005b	e8 00 00 00 00	 call	 readhdr_awstape
  00060	89 44 24 40	 mov	 DWORD PTR rc$[rsp], eax

; 694  :         if (rc < 0) return -1;

  00064	83 7c 24 40 00	 cmp	 DWORD PTR rc$[rsp], 0
  00069	7d 0a		 jge	 SHORT $LN5@fsb_awstap
  0006b	b8 ff ff ff ff	 mov	 eax, -1
  00070	e9 d0 00 00 00	 jmp	 $LN1@fsb_awstap
$LN5@fsb_awstap:

; 695  : 
; 696  :         /* Extract the block length from the block header */
; 697  :         seglen = ((U16)(awshdr.curblkl[1]) << 8)

  00075	b8 01 00 00 00	 mov	 eax, 1
  0007a	48 6b c0 01	 imul	 rax, rax, 1
  0007e	0f b6 44 04 44	 movzx	 eax, BYTE PTR awshdr$[rsp+rax]
  00083	c1 e0 08	 shl	 eax, 8
  00086	b9 01 00 00 00	 mov	 ecx, 1
  0008b	48 6b c9 00	 imul	 rcx, rcx, 0
  0008f	0f b6 4c 0c 44	 movzx	 ecx, BYTE PTR awshdr$[rsp+rcx]
  00094	0b c1		 or	 eax, ecx
  00096	66 89 44 24 30	 mov	 WORD PTR seglen$[rsp], ax

; 698  :                     | awshdr.curblkl[0];
; 699  : 
; 700  :         /* Calculate the offset of the next block segment */
; 701  :         blkpos += sizeof(awshdr) + seglen;

  0009b	0f b7 44 24 30	 movzx	 eax, WORD PTR seglen$[rsp]
  000a0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR blkpos$[rsp]
  000a5	48 8d 44 01 06	 lea	 rax, QWORD PTR [rcx+rax+6]
  000aa	48 89 44 24 38	 mov	 QWORD PTR blkpos$[rsp], rax

; 702  : 
; 703  :         /* Accumulate the total block length */
; 704  :         blklen += seglen;

  000af	0f b7 44 24 30	 movzx	 eax, WORD PTR seglen$[rsp]
  000b4	8b 4c 24 34	 mov	 ecx, DWORD PTR blklen$[rsp]
  000b8	03 c8		 add	 ecx, eax
  000ba	8b c1		 mov	 eax, ecx
  000bc	89 44 24 34	 mov	 DWORD PTR blklen$[rsp], eax

; 705  : 
; 706  :         /* Exit loop if this is a tapemark */
; 707  :         if (awshdr.flags1 & AWSTAPE_FLAG1_TAPEMARK)

  000c0	0f b6 44 24 48	 movzx	 eax, BYTE PTR awshdr$[rsp+4]
  000c5	83 e0 40	 and	 eax, 64			; 00000040H
  000c8	85 c0		 test	 eax, eax
  000ca	74 02		 je	 SHORT $LN6@fsb_awstap

; 708  :             break;

  000cc	eb 10		 jmp	 SHORT $LN3@fsb_awstap
$LN6@fsb_awstap:

; 709  : 
; 710  :     } while ((awshdr.flags1 & AWSTAPE_FLAG1_ENDREC) == 0);

  000ce	0f b6 44 24 48	 movzx	 eax, BYTE PTR awshdr$[rsp+4]
  000d3	83 e0 20	 and	 eax, 32			; 00000020H
  000d6	85 c0		 test	 eax, eax
  000d8	0f 84 5d ff ff
	ff		 je	 $LN4@fsb_awstap
$LN3@fsb_awstap:

; 711  : 
; 712  :     /* Calculate the offsets of the next and previous blocks */
; 713  :     dev->prvblkpos = dev->nxtblkpos;

  000de	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000e3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  000e8	48 8b 89 08 10
	00 00		 mov	 rcx, QWORD PTR [rcx+4104]
  000ef	48 89 88 10 10
	00 00		 mov	 QWORD PTR [rax+4112], rcx

; 714  :     dev->nxtblkpos = blkpos;

  000f6	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  000fb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR blkpos$[rsp]
  00100	48 89 88 08 10
	00 00		 mov	 QWORD PTR [rax+4104], rcx

; 715  : 
; 716  :     /* Increment current file number if tapemark was skipped */
; 717  :     if (blklen == 0)

  00107	83 7c 24 34 00	 cmp	 DWORD PTR blklen$[rsp], 0
  0010c	75 1b		 jne	 SHORT $LN7@fsb_awstap

; 718  :         dev->curfilen++;

  0010e	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  00113	0f b7 80 02 10
	00 00		 movzx	 eax, WORD PTR [rax+4098]
  0011a	66 ff c0	 inc	 ax
  0011d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  00122	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax
$LN7@fsb_awstap:

; 719  : 
; 720  :     dev->blockid++;

  00129	48 8b 44 24 70	 mov	 rax, QWORD PTR dev$[rsp]
  0012e	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  00134	ff c0		 inc	 eax
  00136	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dev$[rsp]
  0013b	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 721  : 
; 722  :     /* Return block length or zero if tapemark */
; 723  :     return blklen;

  00141	8b 44 24 34	 mov	 eax, DWORD PTR blklen$[rsp]
$LN1@fsb_awstap:

; 724  : 
; 725  : } /* end function fsb_awstape */

  00145	48 8b 4c 24 50	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0014a	48 33 cc	 xor	 rcx, rsp
  0014d	e8 00 00 00 00	 call	 __security_check_cookie
  00152	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00156	c3		 ret	 0
fsb_awstape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
tv87 = 112
tv93 = 116
tv76 = 120
tv82 = 128
dev$ = 160
unitstat$ = 168
code$ = 176
sync_awstape PROC

; 647  : {

$LN9:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 648  :     /* Unit check if tape is write-protected */
; 649  :     if (dev->readonly)

  00016	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0001e	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00024	d1 e8		 shr	 eax, 1
  00026	83 e0 01	 and	 eax, 1
  00029	85 c0		 test	 eax, eax
  0002b	74 2d		 je	 SHORT $LN2@sync_awsta

; 650  :     {
; 651  :         build_senseX(TAPE_BSENSE_WRITEPROTECT,dev,unitstat,code);

  0002d	44 0f b6 8c 24
	b0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00036	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0003e	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00046	b9 06 00 00 00	 mov	 ecx, 6
  0004b	e8 00 00 00 00	 call	 build_senseX

; 652  :         return -1;

  00050	b8 ff ff ff ff	 mov	 eax, -1
  00055	e9 44 01 00 00	 jmp	 $LN1@sync_awsta
$LN2@sync_awsta:

; 653  :     }
; 654  : 
; 655  :     /* Perform sync. Return error on failure. */
; 656  :     if (fdatasync( dev->fd ) < 0)

  0005a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00062	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__commit
  0006e	85 c0		 test	 eax, eax
  00070	0f 8d 26 01 00
	00		 jge	 $LN3@sync_awsta

; 657  :     {
; 658  :         /* Log the error */
; 659  :         WRMSG (HHC00205, "E", LCSS_DEVNUM, dev->filename, "aws", "fdatasync()", strerror(errno));

  00076	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0007f	74 12		 je	 SHORT $LN5@sync_awsta
  00081	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00089	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0008d	89 44 24 70	 mov	 DWORD PTR tv87[rsp], eax
  00091	eb 08		 jmp	 SHORT $LN6@sync_awsta
$LN5@sync_awsta:
  00093	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
$LN6@sync_awsta:
  0009b	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  000a4	74 14		 je	 SHORT $LN7@sync_awsta
  000a6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000ae	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  000b2	d1 f8		 sar	 eax, 1
  000b4	89 44 24 74	 mov	 DWORD PTR tv93[rsp], eax
  000b8	eb 08		 jmp	 SHORT $LN8@sync_awsta
$LN7@sync_awsta:
  000ba	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv93[rsp], 0
$LN8@sync_awsta:
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000c8	8b 08		 mov	 ecx, DWORD PTR [rax]
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  000d0	48 89 44 24 78	 mov	 QWORD PTR tv76[rsp], rax
  000d5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  000dd	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  000e4	48 89 8c 24 80
	00 00 00	 mov	 QWORD PTR tv82[rsp], rcx
  000ec	b9 01 00 00 00	 mov	 ecx, 1
  000f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000f7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv76[rsp]
  000fc	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169469
  00108	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0010d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169470
  00114	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00119	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv82[rsp]
  00121	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00126	8b 4c 24 70	 mov	 ecx, DWORD PTR tv87[rsp]
  0012a	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  0012e	8b 4c 24 74	 mov	 ecx, DWORD PTR tv93[rsp]
  00132	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169471
  0013d	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169472
  00149	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0014e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00153	41 b9 03 00 00
	00		 mov	 r9d, 3
  00159	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169473
  00160	ba 93 02 00 00	 mov	 edx, 659		; 00000293H
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169474
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 660  :         /* Set unit check with equipment check */
; 661  :         build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  00172	44 0f b6 8c 24
	b0 00 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0017b	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00183	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0018b	b9 03 00 00 00	 mov	 ecx, 3
  00190	e8 00 00 00 00	 call	 build_senseX

; 662  :         return -1;

  00195	b8 ff ff ff ff	 mov	 eax, -1
  0019a	eb 02		 jmp	 SHORT $LN1@sync_awsta
$LN3@sync_awsta:

; 663  :     }
; 664  : 
; 665  :     /* Return normal status */
; 666  :     return 0;

  0019c	33 c0		 xor	 eax, eax
$LN1@sync_awsta:

; 667  : 
; 668  : } /* end function sync_awstape */

  0019e	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  001a5	c3		 ret	 0
sync_awstape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
prvblkl$ = 112
rc$ = 116
blkpos$ = 120
tv138 = 128
tv144 = 132
tv202 = 136
tv208 = 140
tv249 = 144
tv255 = 148
rcoff$ = 152
tv94 = 160
tv133 = 168
tv190 = 176
tv197 = 184
tv237 = 192
tv244 = 200
awshdr$ = 208
__$ArrayPad$ = 216
dev$ = 240
unitstat$ = 248
code$ = 256
write_awsmark PROC

; 549  : {

$LN25:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 550  : int             rc;                     /* Return code               */
; 551  : off_t           rcoff;                  /* Return code from lseek()  */
; 552  : AWSTAPE_BLKHDR  awshdr;                 /* AWSTAPE block header      */
; 553  : off_t           blkpos;                 /* Offset of block header    */
; 554  : U16             prvblkl;                /* Length of previous block  */
; 555  : 
; 556  :     /* Initialize current block position and previous block length */
; 557  :     blkpos = dev->nxtblkpos;

  00028	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00030	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  00037	48 89 44 24 78	 mov	 QWORD PTR blkpos$[rsp], rax

; 558  :     prvblkl = 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	66 89 44 24 70	 mov	 WORD PTR prvblkl$[rsp], ax

; 559  : 
; 560  :     /* Determine previous block length if not at start of tape */
; 561  :     if (dev->nxtblkpos > 0)

  00043	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0004b	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  00053	0f 8e 97 00 00
	00		 jle	 $LN5@write_awsm

; 562  :     {
; 563  :         /* Reread the previous block header */
; 564  :         rc = readhdr_awstape (dev, dev->prvblkpos, &awshdr, unitstat,code);

  00059	0f b6 84 24 00
	01 00 00	 movzx	 eax, BYTE PTR code$[rsp]
  00061	88 44 24 20	 mov	 BYTE PTR [rsp+32], al
  00065	4c 8b 8c 24 f8
	00 00 00	 mov	 r9, QWORD PTR unitstat$[rsp]
  0006d	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR awshdr$[rsp]
  00075	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0007d	48 8b 90 10 10
	00 00		 mov	 rdx, QWORD PTR [rax+4112]
  00084	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0008c	e8 00 00 00 00	 call	 readhdr_awstape
  00091	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 565  :         if (rc < 0) return -1;

  00095	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  0009a	7d 0a		 jge	 SHORT $LN6@write_awsm
  0009c	b8 ff ff ff ff	 mov	 eax, -1
  000a1	e9 dd 05 00 00	 jmp	 $LN1@write_awsm
$LN6@write_awsm:

; 566  : 
; 567  :         /* Extract the block length from the block header */
; 568  :         prvblkl = ((U16)(awshdr.curblkl[1]) << 8)

  000a6	b8 01 00 00 00	 mov	 eax, 1
  000ab	48 6b c0 01	 imul	 rax, rax, 1
  000af	0f b6 84 04 d0
	00 00 00	 movzx	 eax, BYTE PTR awshdr$[rsp+rax]
  000b7	c1 e0 08	 shl	 eax, 8
  000ba	b9 01 00 00 00	 mov	 ecx, 1
  000bf	48 6b c9 00	 imul	 rcx, rcx, 0
  000c3	0f b6 8c 0c d0
	00 00 00	 movzx	 ecx, BYTE PTR awshdr$[rsp+rcx]
  000cb	0b c1		 or	 eax, ecx
  000cd	66 89 44 24 70	 mov	 WORD PTR prvblkl$[rsp], ax

; 569  :                     | awshdr.curblkl[0];
; 570  : 
; 571  :         /* Recalculate the offset of the next block */
; 572  :         blkpos = dev->prvblkpos + sizeof(awshdr) + prvblkl;

  000d2	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000da	48 8b 80 10 10
	00 00		 mov	 rax, QWORD PTR [rax+4112]
  000e1	0f b7 4c 24 70	 movzx	 ecx, WORD PTR prvblkl$[rsp]
  000e6	48 8d 44 08 06	 lea	 rax, QWORD PTR [rax+rcx+6]
  000eb	48 89 44 24 78	 mov	 QWORD PTR blkpos$[rsp], rax
$LN5@write_awsm:

; 573  :     }
; 574  : 
; 575  :     /* Reposition file to the new block header */
; 576  :     rcoff = lseek (dev->fd, blkpos, SEEK_SET);

  000f0	45 33 c0	 xor	 r8d, r8d
  000f3	48 8b 54 24 78	 mov	 rdx, QWORD PTR blkpos$[rsp]
  000f8	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00100	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  0010c	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR rcoff$[rsp], rax

; 577  :     if (rcoff < 0)

  00114	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR rcoff$[rsp], 0
  0011d	0f 8d 4b 01 00
	00		 jge	 $LN7@write_awsm

; 578  :     {
; 579  :         /* Handle seek error condition */
; 580  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "aws", "lseek()", blkpos, strerror(errno));

  00123	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0012c	74 15		 je	 SHORT $LN13@write_awsm
  0012e	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00136	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  0013a	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv138[rsp], eax
  00141	eb 0b		 jmp	 SHORT $LN14@write_awsm
$LN13@write_awsm:
  00143	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv138[rsp], 0
$LN14@write_awsm:
  0014e	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00157	74 17		 je	 SHORT $LN15@write_awsm
  00159	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00161	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  00165	d1 f8		 sar	 eax, 1
  00167	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv144[rsp], eax
  0016e	eb 0b		 jmp	 SHORT $LN16@write_awsm
$LN15@write_awsm:
  00170	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv144[rsp], 0
$LN16@write_awsm:
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00181	8b 08		 mov	 ecx, DWORD PTR [rax]
  00183	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00189	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv94[rsp], rax
  00191	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00199	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  001a0	48 89 8c 24 a8
	00 00 00	 mov	 QWORD PTR tv133[rsp], rcx
  001a8	b9 01 00 00 00	 mov	 ecx, 1
  001ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001b3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv94[rsp]
  001bb	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  001c0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  001c5	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  001ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169438
  001d1	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  001d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169439
  001dd	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  001e2	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR tv133[rsp]
  001ea	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001ef	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv138[rsp]
  001f6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001fa	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv144[rsp]
  00201	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00205	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169440
  0020c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00211	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169441
  00218	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0021d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00222	41 b9 03 00 00
	00		 mov	 r9d, 3
  00228	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169442
  0022f	ba 44 02 00 00	 mov	 edx, 580		; 00000244H
  00234	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169443
  0023b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 581  : 
; 582  :         build_senseX(TAPE_BSENSE_LOCATEERR,dev,unitstat,code);

  00241	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0024a	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00252	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0025a	b9 0e 00 00 00	 mov	 ecx, 14
  0025f	e8 00 00 00 00	 call	 build_senseX

; 583  :         return -1;

  00264	b8 ff ff ff ff	 mov	 eax, -1
  00269	e9 15 04 00 00	 jmp	 $LN1@write_awsm
$LN7@write_awsm:

; 584  :     }
; 585  :     /* ISW: Determine if we are passed maxsize */
; 586  :     if(dev->tdparms.maxsize>0)

  0026e	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00276	48 83 b8 38 10
	00 00 00	 cmp	 QWORD PTR [rax+4152], 0
  0027e	7e 51		 jle	 SHORT $LN8@write_awsm

; 587  :     {
; 588  :         if((off_t)(dev->nxtblkpos+sizeof(awshdr)) > dev->tdparms.maxsize)

  00280	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00288	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  0028f	48 83 c0 06	 add	 rax, 6
  00293	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  0029b	48 3b 81 38 10
	00 00		 cmp	 rax, QWORD PTR [rcx+4152]
  002a2	7e 2d		 jle	 SHORT $LN9@write_awsm

; 589  :         {
; 590  :             build_senseX(TAPE_BSENSE_ENDOFTAPE,dev,unitstat,code);

  002a4	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  002ad	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  002b5	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  002bd	b9 08 00 00 00	 mov	 ecx, 8
  002c2	e8 00 00 00 00	 call	 build_senseX

; 591  :             return -1;

  002c7	b8 ff ff ff ff	 mov	 eax, -1
  002cc	e9 b2 03 00 00	 jmp	 $LN1@write_awsm
$LN9@write_awsm:
$LN8@write_awsm:

; 592  :         }
; 593  :     }
; 594  :     /* ISW: End of virtual physical EOT determination */
; 595  : 
; 596  :     /* Build the 6-byte block header */
; 597  :     awshdr.curblkl[0] = 0;

  002d1	b8 01 00 00 00	 mov	 eax, 1
  002d6	48 6b c0 00	 imul	 rax, rax, 0
  002da	c6 84 04 d0 00
	00 00 00	 mov	 BYTE PTR awshdr$[rsp+rax], 0

; 598  :     awshdr.curblkl[1] = 0;

  002e2	b8 01 00 00 00	 mov	 eax, 1
  002e7	48 6b c0 01	 imul	 rax, rax, 1
  002eb	c6 84 04 d0 00
	00 00 00	 mov	 BYTE PTR awshdr$[rsp+rax], 0

; 599  :     awshdr.prvblkl[0] = prvblkl & 0xFF;

  002f3	0f b7 44 24 70	 movzx	 eax, WORD PTR prvblkl$[rsp]
  002f8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002fd	b9 01 00 00 00	 mov	 ecx, 1
  00302	48 6b c9 00	 imul	 rcx, rcx, 0
  00306	88 84 0c d2 00
	00 00		 mov	 BYTE PTR awshdr$[rsp+rcx+2], al

; 600  :     awshdr.prvblkl[1] = (prvblkl >>8) & 0xFF;

  0030d	0f b7 44 24 70	 movzx	 eax, WORD PTR prvblkl$[rsp]
  00312	c1 f8 08	 sar	 eax, 8
  00315	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0031a	b9 01 00 00 00	 mov	 ecx, 1
  0031f	48 6b c9 01	 imul	 rcx, rcx, 1
  00323	88 84 0c d2 00
	00 00		 mov	 BYTE PTR awshdr$[rsp+rcx+2], al

; 601  :     awshdr.flags1 = AWSTAPE_FLAG1_TAPEMARK;

  0032a	c6 84 24 d4 00
	00 00 40	 mov	 BYTE PTR awshdr$[rsp+4], 64 ; 00000040H

; 602  :     awshdr.flags2 = 0;

  00332	c6 84 24 d5 00
	00 00 00	 mov	 BYTE PTR awshdr$[rsp+5], 0

; 603  : 
; 604  :     /* Write the block header */
; 605  :     rc = write (dev->fd, &awshdr, sizeof(awshdr));

  0033a	41 b8 06 00 00
	00		 mov	 r8d, 6
  00340	48 8d 94 24 d0
	00 00 00	 lea	 rdx, QWORD PTR awshdr$[rsp]
  00348	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00350	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00356	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_write
  0035c	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 606  :     if (rc < (int)sizeof(awshdr))

  00360	83 7c 24 74 06	 cmp	 DWORD PTR rc$[rsp], 6
  00365	0f 8d 4b 01 00
	00		 jge	 $LN10@write_awsm

; 607  :     {
; 608  :         /* Handle write error condition */
; 609  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "aws", "write()", blkpos, strerror(errno));

  0036b	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00374	74 15		 je	 SHORT $LN17@write_awsm
  00376	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0037e	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00382	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv202[rsp], eax
  00389	eb 0b		 jmp	 SHORT $LN18@write_awsm
$LN17@write_awsm:
  0038b	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv202[rsp], 0
$LN18@write_awsm:
  00396	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0039f	74 17		 je	 SHORT $LN19@write_awsm
  003a1	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  003a9	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  003ad	d1 f8		 sar	 eax, 1
  003af	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv208[rsp], eax
  003b6	eb 0b		 jmp	 SHORT $LN20@write_awsm
$LN19@write_awsm:
  003b8	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv208[rsp], 0
$LN20@write_awsm:
  003c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  003c9	8b 08		 mov	 ecx, DWORD PTR [rax]
  003cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  003d1	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv190[rsp], rax
  003d9	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  003e1	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  003e8	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv197[rsp], rcx
  003f0	b9 01 00 00 00	 mov	 ecx, 1
  003f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003fb	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv190[rsp]
  00403	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  00408	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  0040d	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  00412	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169447
  00419	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  0041e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169448
  00425	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  0042a	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR tv197[rsp]
  00432	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00437	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv202[rsp]
  0043e	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00442	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR tv208[rsp]
  00449	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0044d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169449
  00454	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00459	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169450
  00460	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00465	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0046a	41 b9 03 00 00
	00		 mov	 r9d, 3
  00470	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169451
  00477	ba 61 02 00 00	 mov	 edx, 609		; 00000261H
  0047c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169452
  00483	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 610  : 
; 611  :         build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  00489	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00492	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  0049a	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  004a2	b9 03 00 00 00	 mov	 ecx, 3
  004a7	e8 00 00 00 00	 call	 build_senseX

; 612  :         return -1;

  004ac	b8 ff ff ff ff	 mov	 eax, -1
  004b1	e9 cd 01 00 00	 jmp	 $LN1@write_awsm
$LN10@write_awsm:

; 613  :     }
; 614  : 
; 615  :     dev->blockid++;

  004b6	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004be	8b 80 04 10 00
	00		 mov	 eax, DWORD PTR [rax+4100]
  004c4	ff c0		 inc	 eax
  004c6	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  004ce	89 81 04 10 00
	00		 mov	 DWORD PTR [rcx+4100], eax

; 616  : 
; 617  :     /* Calculate the offsets of the next and previous blocks */
; 618  :     dev->nxtblkpos = blkpos + sizeof(awshdr);

  004d4	48 8b 44 24 78	 mov	 rax, QWORD PTR blkpos$[rsp]
  004d9	48 83 c0 06	 add	 rax, 6
  004dd	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  004e5	48 89 81 08 10
	00 00		 mov	 QWORD PTR [rcx+4104], rax

; 619  :     dev->prvblkpos = blkpos;

  004ec	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  004f4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  004f9	48 89 88 10 10
	00 00		 mov	 QWORD PTR [rax+4112], rcx
$LN4@write_awsm:

; 620  : 
; 621  :     /* Set new physical EOF */
; 622  :     do rc = ftruncate( dev->fd, dev->nxtblkpos );

  00500	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00508	48 8b 90 08 10
	00 00		 mov	 rdx, QWORD PTR [rax+4104]
  0050f	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00517	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0051d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__chsize_s
  00523	89 44 24 74	 mov	 DWORD PTR rc$[rsp], eax

; 623  :     while (EINTR == rc);

  00527	83 7c 24 74 04	 cmp	 DWORD PTR rc$[rsp], 4
  0052c	74 d2		 je	 SHORT $LN4@write_awsm

; 624  : 
; 625  :     if (rc != 0)

  0052e	83 7c 24 74 00	 cmp	 DWORD PTR rc$[rsp], 0
  00533	0f 84 48 01 00
	00		 je	 $LN11@write_awsm

; 626  :     {
; 627  :         /* Handle write error condition */
; 628  :         WRMSG (HHC00204, "E", LCSS_DEVNUM, dev->filename, "aws", "ftruncate()", blkpos, strerror(errno));

  00539	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00542	74 15		 je	 SHORT $LN21@write_awsm
  00544	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0054c	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00550	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv249[rsp], eax
  00557	eb 0b		 jmp	 SHORT $LN22@write_awsm
$LN21@write_awsm:
  00559	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv249[rsp], 0
$LN22@write_awsm:
  00564	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0056d	74 17		 je	 SHORT $LN23@write_awsm
  0056f	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00577	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0057b	d1 f8		 sar	 eax, 1
  0057d	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv255[rsp], eax
  00584	eb 0b		 jmp	 SHORT $LN24@write_awsm
$LN23@write_awsm:
  00586	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv255[rsp], 0
$LN24@write_awsm:
  00591	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00597	8b 08		 mov	 ecx, DWORD PTR [rax]
  00599	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  0059f	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv237[rsp], rax
  005a7	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  005af	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  005b6	48 89 8c 24 c8
	00 00 00	 mov	 QWORD PTR tv244[rsp], rcx
  005be	b9 01 00 00 00	 mov	 ecx, 1
  005c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  005c9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv237[rsp]
  005d1	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  005d6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR blkpos$[rsp]
  005db	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  005e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169454
  005e7	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  005ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169455
  005f3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  005f8	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv244[rsp]
  00600	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00605	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR tv249[rsp]
  0060c	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  00610	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv255[rsp]
  00617	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  0061b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169456
  00622	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00627	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169457
  0062e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00633	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00638	41 b9 03 00 00
	00		 mov	 r9d, 3
  0063e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169458
  00645	ba 74 02 00 00	 mov	 edx, 628		; 00000274H
  0064a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169459
  00651	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 629  : 
; 630  :         /* Set unit check with equipment check */
; 631  :         build_senseX(TAPE_BSENSE_WRITEFAIL,dev,unitstat,code);

  00657	44 0f b6 8c 24
	00 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  00660	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00668	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  00670	b9 03 00 00 00	 mov	 ecx, 3
  00675	e8 00 00 00 00	 call	 build_senseX

; 632  :         return -1;

  0067a	b8 ff ff ff ff	 mov	 eax, -1
  0067f	eb 02		 jmp	 SHORT $LN1@write_awsm
$LN11@write_awsm:

; 633  :     }
; 634  : 
; 635  :     /* Return normal status */
; 636  :     return 0;

  00681	33 c0		 xor	 eax, eax
$LN1@write_awsm:

; 637  : 
; 638  : } /* end function write_awsmark */

  00683	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0068b	48 33 cc	 xor	 rcx, rsp
  0068e	e8 00 00 00 00	 call	 __security_check_cookie
  00693	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  0069a	c3		 ret	 0
write_awsmark ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
rcoff$ = 32
dev$ = 64
unitstat$ = 72
code$ = 80
rewind_awstape PROC

; 64   : {

$LN4:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 65   :     off_t rcoff;
; 66   :     rcoff=lseek(dev->fd,0,SEEK_SET);

  00013	45 33 c0	 xor	 r8d, r8d
  00016	33 d2		 xor	 edx, edx
  00018	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0001d	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__lseeki64
  00029	48 89 44 24 20	 mov	 QWORD PTR rcoff$[rsp], rax

; 67   :     if(rcoff<0)

  0002e	48 83 7c 24 20
	00		 cmp	 QWORD PTR rcoff$[rsp], 0
  00034	7d 21		 jge	 SHORT $LN2@rewind_aws

; 68   :     {
; 69   :         build_senseX(TAPE_BSENSE_REWINDFAILED,dev,unitstat,code);

  00036	44 0f b6 4c 24
	50		 movzx	 r9d, BYTE PTR code$[rsp]
  0003c	4c 8b 44 24 48	 mov	 r8, QWORD PTR unitstat$[rsp]
  00041	48 8b 54 24 40	 mov	 rdx, QWORD PTR dev$[rsp]
  00046	b9 13 00 00 00	 mov	 ecx, 19
  0004b	e8 00 00 00 00	 call	 build_senseX

; 70   :         return -1;

  00050	b8 ff ff ff ff	 mov	 eax, -1
  00055	eb 5b		 jmp	 SHORT $LN1@rewind_aws
$LN2@rewind_aws:

; 71   :     }
; 72   :     dev->nxtblkpos=0;

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0005c	48 c7 80 08 10
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+4104], 0

; 73   :     dev->prvblkpos=-1;

  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0006c	48 c7 80 10 10
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+4112], -1

; 74   :     dev->curfilen=1;

  00077	b8 01 00 00 00	 mov	 eax, 1
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  00081	66 89 81 02 10
	00 00		 mov	 WORD PTR [rcx+4098], ax

; 75   :     dev->blockid=0;

  00088	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0008d	c7 80 04 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4100], 0

; 76   :     dev->fenced = 0;

  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR dev$[rsp]
  0009c	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  000a2	83 e0 fe	 and	 eax, -2			; fffffffeH
  000a5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dev$[rsp]
  000aa	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 77   :     return 0;

  000b0	33 c0		 xor	 eax, eax
$LN1@rewind_aws:

; 78   : }

  000b2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b6	c3		 ret	 0
rewind_awstape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
dev$ = 8
passedeot_awstape PROC

; 85   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 86   :     if( dev->nxtblkpos == 0 )

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  0000a	48 83 b8 08 10
	00 00 00	 cmp	 QWORD PTR [rax+4104], 0
  00012	75 20		 jne	 SHORT $LN2@passedeot_

; 87   :     {
; 88   :         dev->eotwarning = 0;

  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  00019	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0001f	83 e0 df	 and	 eax, -33		; ffffffdfH
  00022	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  00027	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 89   :         return 0;

  0002d	33 c0		 xor	 eax, eax
  0002f	e9 8d 00 00 00	 jmp	 $LN1@passedeot_
$LN2@passedeot_:

; 90   :     }
; 91   :     if( dev->tdparms.maxsize == 0 )

  00034	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  00039	48 83 b8 38 10
	00 00 00	 cmp	 QWORD PTR [rax+4152], 0
  00041	75 1d		 jne	 SHORT $LN3@passedeot_

; 92   :     {
; 93   :         dev->eotwarning = 0;

  00043	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  00048	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  0004e	83 e0 df	 and	 eax, -33		; ffffffdfH
  00051	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  00056	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 94   :         return 0;

  0005c	33 c0		 xor	 eax, eax
  0005e	eb 61		 jmp	 SHORT $LN1@passedeot_
$LN3@passedeot_:

; 95   :     }
; 96   :     if( dev->nxtblkpos + dev->eotmargin > dev->tdparms.maxsize )

  00060	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  00065	48 8b 80 08 10
	00 00		 mov	 rax, QWORD PTR [rax+4104]
  0006c	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  00071	48 03 81 70 10
	00 00		 add	 rax, QWORD PTR [rcx+4208]
  00078	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  0007d	48 3b 81 38 10
	00 00		 cmp	 rax, QWORD PTR [rcx+4152]
  00084	7e 20		 jle	 SHORT $LN4@passedeot_

; 97   :     {
; 98   :         dev->eotwarning = 1;

  00086	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  0008b	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00091	83 c8 20	 or	 eax, 32			; 00000020H
  00094	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  00099	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 99   :         return 1;

  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	eb 1b		 jmp	 SHORT $LN1@passedeot_
$LN4@passedeot_:

; 100  :     }
; 101  :     dev->eotwarning = 0;

  000a6	48 8b 44 24 08	 mov	 rax, QWORD PTR dev$[rsp]
  000ab	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  000b1	83 e0 df	 and	 eax, -33		; ffffffdfH
  000b4	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dev$[rsp]
  000b9	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 102  :     return 0;

  000bf	33 c0		 xor	 eax, eax
$LN1@passedeot_:

; 103  : }

  000c1	c3		 ret	 0
passedeot_awstape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
tv80 = 96
tv86 = 100
tv75 = 104
dev$ = 128
close_awstape PROC

; 41   : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 42   :     if (dev->fd >= 0)

  00009	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00011	83 b8 ac 01 00
	00 00		 cmp	 DWORD PTR [rax+428], 0
  00018	0f 8c 14 01 00
	00		 jl	 $LN2@close_awst

; 43   :     {
; 44   :         if (!dev->batch || !dev->quiet)

  0001e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00026	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0002c	c1 e8 0a	 shr	 eax, 10
  0002f	83 e0 01	 and	 eax, 1
  00032	85 c0		 test	 eax, eax
  00034	74 1c		 je	 SHORT $LN4@close_awst
  00036	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0003e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00044	c1 e8 0c	 shr	 eax, 12
  00047	83 e0 01	 and	 eax, 1
  0004a	85 c0		 test	 eax, eax
  0004c	0f 85 cc 00 00
	00		 jne	 $LN3@close_awst
$LN4@close_awst:

; 45   :             // "%1d:%04X Tape file %s, type %s: tape closed"
; 46   :             WRMSG( HHC00201, "I", LCSS_DEVNUM, dev->filename, "aws" );

  00052	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0005b	74 12		 je	 SHORT $LN6@close_awst
  0005d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00065	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00069	89 44 24 60	 mov	 DWORD PTR tv80[rsp], eax
  0006d	eb 08		 jmp	 SHORT $LN7@close_awst
$LN6@close_awst:
  0006f	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN7@close_awst:
  00077	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00080	74 14		 je	 SHORT $LN8@close_awst
  00082	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0008a	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0008e	d1 f8		 sar	 eax, 1
  00090	89 44 24 64	 mov	 DWORD PTR tv86[rsp], eax
  00094	eb 08		 jmp	 SHORT $LN9@close_awst
$LN8@close_awst:
  00096	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
$LN9@close_awst:
  0009e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a6	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  000ac	48 89 44 24 68	 mov	 QWORD PTR tv75[rsp], rax
  000b1	b9 01 00 00 00	 mov	 ecx, 1
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169201
  000c3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  000c8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv75[rsp]
  000cd	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  000d2	8b 4c 24 60	 mov	 ecx, DWORD PTR tv80[rsp]
  000d6	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  000da	8b 4c 24 64	 mov	 ecx, DWORD PTR tv86[rsp]
  000de	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169202
  000e9	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169203
  000f5	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000fa	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000ff	41 b9 03 00 00
	00		 mov	 r9d, 3
  00105	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169204
  0010c	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169205
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN3@close_awst:

; 47   :         close( dev->fd );

  0011e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00126	8b 88 ac 01 00
	00		 mov	 ecx, DWORD PTR [rax+428]
  0012c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_close
$LN2@close_awst:

; 48   :     }
; 49   : 
; 50   :     STRLCPY( dev->filename, TAPE_UNLOADED );

  00132	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0013a	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00140	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00146	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169206
  0014d	48 8b c8	 mov	 rcx, rax
  00150	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 51   : 
; 52   :     dev->fd      = -1;

  00156	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0015e	c7 80 ac 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+428], -1

; 53   :     dev->blockid =  0;

  00168	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00170	c7 80 04 10 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+4100], 0

; 54   :     dev->fenced  =  0;

  0017a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00182	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  00188	83 e0 fe	 and	 eax, -2			; fffffffeH
  0018b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00193	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 55   : 
; 56   :     return;
; 57   : }

  00199	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0019d	c3		 ret	 0
close_awstape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File C:\papa\MyGit\hyperion-zvector\awstape.c
_TEXT	SEGMENT
rc$ = 112
ret_code$1 = 116
tv196 = 120
tv202 = 124
tv141 = 128
tv145 = 132
tmp_fd$2 = 136
tv138 = 144
tv185 = 152
tv191 = 160
pathname$ = 176
__$ArrayPad$ = 448
dev$ = 480
unitstat$ = 488
code$ = 496
open_awstape PROC

; 116  : {

$LN19:
  00000	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H
  00016	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001d	48 33 c4	 xor	 rax, rsp
  00020	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 117  :     int   rc = -1;                      /* Return code               */

  00028	c7 44 24 70 ff
	ff ff ff	 mov	 DWORD PTR rc$[rsp], -1

; 118  :     char  pathname[MAX_PATH];           /* file path in host format  */
; 119  : 
; 120  :     /* Check for no tape in drive */
; 121  : 
; 122  :     if (strcmp( dev->filename, TAPE_UNLOADED ) == 0)

  00030	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00038	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169234
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 strcmp
  0004d	85 c0		 test	 eax, eax
  0004f	75 2a		 jne	 SHORT $LN2@open_awsta

; 123  :     {
; 124  :         build_senseX( TAPE_BSENSE_TAPEUNLOADED, dev, unitstat, code );

  00051	44 0f b6 8c 24
	f0 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0005a	4c 8b 84 24 e8
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00062	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0006a	33 c9		 xor	 ecx, ecx
  0006c	e8 00 00 00 00	 call	 build_senseX

; 125  :         return -1;

  00071	b8 ff ff ff ff	 mov	 eax, -1
  00076	e9 3c 04 00 00	 jmp	 $LN1@open_awsta
$LN2@open_awsta:

; 126  :     }
; 127  : 
; 128  :     /* Open the AWSTAPE file */
; 129  : 
; 130  :     hostpath( pathname, dev->filename, sizeof( pathname ));

  0007b	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00083	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00089	41 b8 04 01 00
	00		 mov	 r8d, 260		; 00000104H
  0008f	48 8b d0	 mov	 rdx, rax
  00092	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_hostpath

; 131  : 
; 132  :     /* If NOT read-only... */
; 133  : 
; 134  :     if (!dev->tdparms.logical_readonly)

  000a0	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  000a8	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  000ae	c1 e8 0b	 shr	 eax, 11
  000b1	83 e0 01	 and	 eax, 1
  000b4	85 c0		 test	 eax, eax
  000b6	0f 85 f1 01 00
	00		 jne	 $LN3@open_awsta

; 135  :     {
; 136  :         /* Presume file exists and open it with read-write access */
; 137  :         rc = HOPEN( pathname, O_RDWR | O_BINARY,

  000bc	41 b8 80 01 00
	00		 mov	 r8d, 384		; 00000180H
  000c2	ba 02 80 00 00	 mov	 edx, 32770		; 00008002H
  000c7	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  000d5	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 138  :             S_IRUSR | S_IWUSR | S_IRGRP );
; 139  : 
; 140  :         /* If that didn't work and the auto-create option is on,
; 141  :            then try to automatically create the file for them.
; 142  :         */
; 143  :         if (rc < 0 && sysblk.auto_tape_create)

  000d9	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  000de	0f 8d c9 01 00
	00		 jge	 $LN4@open_awsta
  000e4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __imp_sysblk
  000eb	8b 80 94 12 00
	00		 mov	 eax, DWORD PTR [rax+4756]
  000f1	c1 e8 13	 shr	 eax, 19
  000f4	83 e0 01	 and	 eax, 1
  000f7	85 c0		 test	 eax, eax
  000f9	0f 84 ae 01 00
	00		 je	 $LN4@open_awsta

; 144  :         {
; 145  :             /* (use 'O_CREAT' this time) */
; 146  : 
; 147  :             rc = HOPEN( pathname, O_RDWR | O_BINARY | O_CREAT,

  000ff	41 b8 80 01 00
	00		 mov	 r8d, 384		; 00000180H
  00105	ba 02 81 00 00	 mov	 edx, 33026		; 00008102H
  0010a	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  00112	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  00118	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 148  :                 S_IRUSR | S_IWUSR | S_IRGRP );
; 149  : 
; 150  :             if (rc >= 0)

  0011c	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00121	0f 8c 86 01 00
	00		 jl	 $LN5@open_awsta

; 151  :             {
; 152  :                 int tmp_fd = dev->fd;

  00127	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0012f	8b 80 ac 01 00
	00		 mov	 eax, DWORD PTR [rax+428]
  00135	89 84 24 88 00
	00 00		 mov	 DWORD PTR tmp_fd$2[rsp], eax

; 153  :                 int ret_code = 0;

  0013c	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR ret_code$1[rsp], 0

; 154  : 
; 155  :                 dev->fd = rc;

  00144	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0014c	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  00150	89 88 ac 01 00
	00		 mov	 DWORD PTR [rax+428], ecx

; 156  : 
; 157  :                 if (!dev->batch || !dev->quiet)

  00156	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  0015e	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  00164	c1 e8 0a	 shr	 eax, 10
  00167	83 e0 01	 and	 eax, 1
  0016a	85 c0		 test	 eax, eax
  0016c	74 1c		 je	 SHORT $LN7@open_awsta
  0016e	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00176	8b 80 f8 05 00
	00		 mov	 eax, DWORD PTR [rax+1528]
  0017c	c1 e8 0c	 shr	 eax, 12
  0017f	83 e0 01	 and	 eax, 1
  00182	85 c0		 test	 eax, eax
  00184	0f 85 b4 00 00
	00		 jne	 $LN6@open_awsta
$LN7@open_awsta:

; 158  :                     // "%1d:%04X Tape file %s, type %s: tape created"
; 159  :                     WRMSG( HHC00235, "I", SSID_TO_LCSS( dev->ssid ),

  0018a	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00192	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  00198	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv138[rsp], rax
  001a0	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  001a8	0f b7 49 48	 movzx	 ecx, WORD PTR [rcx+72]
  001ac	89 8c 24 80 00
	00 00		 mov	 DWORD PTR tv141[rsp], ecx
  001b3	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  001bb	0f b7 52 44	 movzx	 edx, WORD PTR [rdx+68]
  001bf	d1 fa		 sar	 edx, 1
  001c1	89 94 24 84 00
	00 00		 mov	 DWORD PTR tv145[rsp], edx
  001c8	b9 01 00 00 00	 mov	 ecx, 1
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  001d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169240
  001da	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  001df	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv138[rsp]
  001e7	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  001ec	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv141[rsp]
  001f3	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  001f7	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv145[rsp]
  001fe	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00202	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169241
  00209	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0020e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169242
  00215	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0021a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0021f	41 b9 03 00 00
	00		 mov	 r9d, 3
  00225	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169243
  0022c	ba a0 00 00 00	 mov	 edx, 160		; 000000a0H
  00231	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169244
  00238	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg
$LN6@open_awsta:

; 160  :                            dev->devnum, dev->filename, "aws" );
; 161  : 
; 162  :                 /* Write two tapemarks */
; 163  : 
; 164  :                 ret_code = write_awsmark( dev, unitstat, code );

  0023e	44 0f b6 84 24
	f0 01 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  00247	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  0024f	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00257	e8 00 00 00 00	 call	 write_awsmark
  0025c	89 44 24 74	 mov	 DWORD PTR ret_code$1[rsp], eax

; 165  : 
; 166  :                 if (ret_code >= 0)

  00260	83 7c 24 74 00	 cmp	 DWORD PTR ret_code$1[rsp], 0
  00265	7c 22		 jl	 SHORT $LN8@open_awsta

; 167  :                     ret_code = write_awsmark( dev, unitstat, code );

  00267	44 0f b6 84 24
	f0 01 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  00270	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  00278	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00280	e8 00 00 00 00	 call	 write_awsmark
  00285	89 44 24 74	 mov	 DWORD PTR ret_code$1[rsp], eax
$LN8@open_awsta:

; 168  : 
; 169  :                 if (ret_code < 0)

  00289	83 7c 24 74 00	 cmp	 DWORD PTR ret_code$1[rsp], 0
  0028e	7d 1d		 jge	 SHORT $LN9@open_awsta

; 170  :                 {
; 171  :                     dev->fd = tmp_fd;

  00290	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00298	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tmp_fd$2[rsp]
  0029f	89 88 ac 01 00
	00		 mov	 DWORD PTR [rax+428], ecx

; 172  :                     rc = ret_code;

  002a5	8b 44 24 74	 mov	 eax, DWORD PTR ret_code$1[rsp]
  002a9	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax
$LN9@open_awsta:
$LN5@open_awsta:
$LN4@open_awsta:
$LN3@open_awsta:

; 173  :                 }
; 174  :             }
; 175  :         }
; 176  :     }
; 177  : 
; 178  :     /* If file is read-only then try again with read-only access */
; 179  :     if (0
; 180  :         || dev->tdparms.logical_readonly
; 181  :         || (rc < 0 && (EROFS  == errno || EACCES == errno))

  002ad	33 c0		 xor	 eax, eax
  002af	85 c0		 test	 eax, eax
  002b1	75 35		 jne	 SHORT $LN11@open_awsta
  002b3	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002bb	8b 80 30 10 00
	00		 mov	 eax, DWORD PTR [rax+4144]
  002c1	c1 e8 0b	 shr	 eax, 11
  002c4	83 e0 01	 and	 eax, 1
  002c7	85 c0		 test	 eax, eax
  002c9	75 1d		 jne	 SHORT $LN11@open_awsta
  002cb	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  002d0	7d 52		 jge	 SHORT $LN10@open_awsta
  002d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002d8	83 38 1e	 cmp	 DWORD PTR [rax], 30
  002db	74 0b		 je	 SHORT $LN12@open_awsta
  002dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  002e3	83 38 0d	 cmp	 DWORD PTR [rax], 13
  002e6	75 3c		 jne	 SHORT $LN10@open_awsta
$LN12@open_awsta:
$LN11@open_awsta:

; 182  :     )
; 183  :     {
; 184  :         dev->readonly = 1;

  002e8	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  002f0	8b 80 78 10 00
	00		 mov	 eax, DWORD PTR [rax+4216]
  002f6	83 c8 02	 or	 eax, 2
  002f9	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00301	89 81 78 10 00
	00		 mov	 DWORD PTR [rcx+4216], eax

; 185  :         rc = HOPEN( pathname, O_RDONLY | O_BINARY, S_IRUSR | S_IRGRP );

  00307	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  0030d	ba 00 80 00 00	 mov	 edx, 32768		; 00008000H
  00312	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR pathname$[rsp]
  0031a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_hopen
  00320	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax
$LN10@open_awsta:

; 186  :     }
; 187  : 
; 188  :     /* Check for open failure */
; 189  :     if (rc < 0)

  00324	83 7c 24 70 00	 cmp	 DWORD PTR rc$[rsp], 0
  00329	0f 8d 50 01 00
	00		 jge	 $LN13@open_awsta

; 190  :     {
; 191  :         // "%1d:%04X Tape file %s, type %s: error in function %s: %s"
; 192  :         WRMSG( HHC00205, "E", LCSS_DEVNUM,

  0032f	48 83 bc 24 e0
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  00338	74 12		 je	 SHORT $LN15@open_awsta
  0033a	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00342	0f b7 40 48	 movzx	 eax, WORD PTR [rax+72]
  00346	89 44 24 78	 mov	 DWORD PTR tv196[rsp], eax
  0034a	eb 08		 jmp	 SHORT $LN16@open_awsta
$LN15@open_awsta:
  0034c	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv196[rsp], 0
$LN16@open_awsta:
  00354	48 83 bc 24 e0
	01 00 00 00	 cmp	 QWORD PTR dev$[rsp], 0
  0035d	74 14		 je	 SHORT $LN17@open_awsta
  0035f	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00367	0f b7 40 44	 movzx	 eax, WORD PTR [rax+68]
  0036b	d1 f8		 sar	 eax, 1
  0036d	89 44 24 7c	 mov	 DWORD PTR tv202[rsp], eax
  00371	eb 08		 jmp	 SHORT $LN18@open_awsta
$LN17@open_awsta:
  00373	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv202[rsp], 0
$LN18@open_awsta:
  0037b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00381	8b 08		 mov	 ecx, DWORD PTR [rax]
  00383	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_w32_strerror
  00389	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv185[rsp], rax
  00391	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  00399	48 81 c1 a4 00
	00 00		 add	 rcx, 164		; 000000a4H
  003a0	48 89 8c 24 a0
	00 00 00	 mov	 QWORD PTR tv191[rsp], rcx
  003a8	b9 01 00 00 00	 mov	 ecx, 1
  003ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___acrt_iob_func
  003b3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv185[rsp]
  003bb	48 89 4c 24 60	 mov	 QWORD PTR [rsp+96], rcx
  003c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169251
  003c7	48 89 4c 24 58	 mov	 QWORD PTR [rsp+88], rcx
  003cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169252
  003d3	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  003d8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv191[rsp]
  003e0	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  003e5	8b 4c 24 78	 mov	 ecx, DWORD PTR tv196[rsp]
  003e9	89 4c 24 40	 mov	 DWORD PTR [rsp+64], ecx
  003ed	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv202[rsp]
  003f1	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  003f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169253
  003fc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00401	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169254
  00408	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0040d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00412	41 b9 03 00 00
	00		 mov	 r9d, 3
  00418	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG169255
  0041f	ba c1 00 00 00	 mov	 edx, 193		; 000000c1H
  00424	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG169256
  0042b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwritemsg

; 193  :             dev->filename, "aws", "open()", strerror( errno ));
; 194  : 
; 195  :         STRLCPY( dev->filename, TAPE_UNLOADED );

  00431	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00439	48 05 a4 00 00
	00		 add	 rax, 164		; 000000a4H
  0043f	41 b8 05 01 00
	00		 mov	 r8d, 261		; 00000105H
  00445	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG169257
  0044c	48 8b c8	 mov	 rcx, rax
  0044f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strlcpy

; 196  :         build_senseX( TAPE_BSENSE_TAPELOADFAIL, dev, unitstat, code );

  00455	44 0f b6 8c 24
	f0 01 00 00	 movzx	 r9d, BYTE PTR code$[rsp]
  0045e	4c 8b 84 24 e8
	01 00 00	 mov	 r8, QWORD PTR unitstat$[rsp]
  00466	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR dev$[rsp]
  0046e	b9 01 00 00 00	 mov	 ecx, 1
  00473	e8 00 00 00 00	 call	 build_senseX

; 197  :         return -1;

  00478	b8 ff ff ff ff	 mov	 eax, -1
  0047d	eb 38		 jmp	 SHORT $LN1@open_awsta
$LN13@open_awsta:

; 198  :     }
; 199  : 
; 200  :     /* Open success. Save file descriptor and rewind to load-point */
; 201  : 
; 202  :     dev->fd = rc;

  0047f	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR dev$[rsp]
  00487	8b 4c 24 70	 mov	 ecx, DWORD PTR rc$[rsp]
  0048b	89 88 ac 01 00
	00		 mov	 DWORD PTR [rax+428], ecx

; 203  :     rc = rewind_awstape( dev, unitstat, code );

  00491	44 0f b6 84 24
	f0 01 00 00	 movzx	 r8d, BYTE PTR code$[rsp]
  0049a	48 8b 94 24 e8
	01 00 00	 mov	 rdx, QWORD PTR unitstat$[rsp]
  004a2	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR dev$[rsp]
  004aa	e8 00 00 00 00	 call	 rewind_awstape
  004af	89 44 24 70	 mov	 DWORD PTR rc$[rsp], eax

; 204  :     return rc;

  004b3	8b 44 24 70	 mov	 eax, DWORD PTR rc$[rsp]
$LN1@open_awsta:

; 205  : 
; 206  : } /* end function open_awstape */

  004b7	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  004bf	48 33 cc	 xor	 rcx, rsp
  004c2	e8 00 00 00 00	 call	 __security_check_cookie
  004c7	48 81 c4 d8 01
	00 00		 add	 rsp, 472		; 000001d8H
  004ce	c3		 ret	 0
open_awstape ENDP
_TEXT	ENDS
END
